
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014718  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001084  080148a8  080148a8  000248a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801592c  0801592c  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801592c  0801592c  0002592c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015934  08015934  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015934  08015934  00025934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015938  08015938  00025938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0801593c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          000061e0  200001e8  200001e8  000301e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200063c8  200063c8  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e053  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a01  00000000  00000000  0004e26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e8  00000000  00000000  00051c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d30  00000000  00000000  00053658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004ab1  00000000  00000000  00055388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db2a  00000000  00000000  00059e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db460  00000000  00000000  00077963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00152dc3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000083f8  00000000  00000000  00152e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014890 	.word	0x08014890

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08014890 	.word	0x08014890

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ffc:	f006 f83a 	bl	8007074 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001000:	f000 f850 	bl	80010a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001004:	f000 fb48 	bl	8001698 <MX_GPIO_Init>
	MX_TIM8_Init();
 8001008:	f000 fa72 	bl	80014f0 <MX_TIM8_Init>
	MX_TIM1_Init();
 800100c:	f000 f8d6 	bl	80011bc <MX_TIM1_Init>
	MX_USART3_UART_Init();
 8001010:	f000 fb18 	bl	8001644 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8001014:	f000 f8a4 	bl	8001160 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001018:	f000 f96e 	bl	80012f8 <MX_TIM2_Init>
	MX_TIM4_Init();
 800101c:	f000 fa14 	bl	8001448 <MX_TIM4_Init>
	MX_TIM3_Init();
 8001020:	f000 f9be 	bl	80013a0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 8001024:	f005 fb16 	bl	8006654 <OLED_Init>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001028:	f00c f994 	bl	800d354 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <main+0x7c>)
 800102e:	2100      	movs	r1, #0
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <main+0x80>)
 8001032:	f00c f9d9 	bl	800d3e8 <osThreadNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a10      	ldr	r2, [pc, #64]	; (800107c <main+0x84>)
 800103a:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of OLEDTask */
	OLEDTaskHandle = osThreadNew(oled_show, NULL, &OLEDTask_attributes);
 800103c:	4a10      	ldr	r2, [pc, #64]	; (8001080 <main+0x88>)
 800103e:	2100      	movs	r1, #0
 8001040:	4810      	ldr	r0, [pc, #64]	; (8001084 <main+0x8c>)
 8001042:	f00c f9d1 	bl	800d3e8 <osThreadNew>
 8001046:	4603      	mov	r3, r0
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <main+0x90>)
 800104a:	6013      	str	r3, [r2, #0]

	/* creation of GyroRead */
	GyroReadHandle = osThreadNew(gyro_read, NULL, &GyroRead_attributes);
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <main+0x94>)
 800104e:	2100      	movs	r1, #0
 8001050:	480f      	ldr	r0, [pc, #60]	; (8001090 <main+0x98>)
 8001052:	f00c f9c9 	bl	800d3e8 <osThreadNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <main+0x9c>)
 800105a:	6013      	str	r3, [r2, #0]

	/* creation of ServoMotor */
	ServoMotorHandle = osThreadNew(servoMotor, NULL, &ServoMotor_attributes);
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <main+0xa0>)
 800105e:	2100      	movs	r1, #0
 8001060:	480e      	ldr	r0, [pc, #56]	; (800109c <main+0xa4>)
 8001062:	f00c f9c1 	bl	800d3e8 <osThreadNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <main+0xa8>)
 800106a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800106c:	f00c f996 	bl	800d39c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001070:	e7fe      	b.n	8001070 <main+0x78>
 8001072:	bf00      	nop
 8001074:	0801497c 	.word	0x0801497c
 8001078:	08005d85 	.word	0x08005d85
 800107c:	20000404 	.word	0x20000404
 8001080:	080149a0 	.word	0x080149a0
 8001084:	080060e5 	.word	0x080060e5
 8001088:	20000408 	.word	0x20000408
 800108c:	080149c4 	.word	0x080149c4
 8001090:	080060f1 	.word	0x080060f1
 8001094:	2000040c 	.word	0x2000040c
 8001098:	080149e8 	.word	0x080149e8
 800109c:	080062d1 	.word	0x080062d1
 80010a0:	20000410 	.word	0x20000410

080010a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
 80010a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2230      	movs	r2, #48	; 0x30
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f00e ff82 	bl	800ffbc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <SystemClock_Config+0xb4>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <SystemClock_Config+0xb4>)
 80010d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <SystemClock_Config+0xb4>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <SystemClock_Config+0xb8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <SystemClock_Config+0xb8>)
 80010ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <SystemClock_Config+0xb8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001100:	2302      	movs	r3, #2
 8001102:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001108:	2310      	movs	r3, #16
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f008 ff47 	bl	8009fa8 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x80>
		Error_Handler();
 8001120:	f005 f8ec 	bl	80062fc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f009 f9aa 	bl	800a498 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xaa>
		Error_Handler();
 800114a:	f005 f8d7 	bl	80062fc <Error_Handler>
	}
}
 800114e:	bf00      	nop
 8001150:	3750      	adds	r7, #80	; 0x50
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <MX_I2C1_Init+0x54>)
 8001168:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_I2C1_Init+0x50>)
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x58>)
 800116e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_I2C1_Init+0x50>)
 800117e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001182:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_I2C1_Init+0x50>)
 800119e:	f006 fb81 	bl	80078a4 <HAL_I2C_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x4c>
		Error_Handler();
 80011a8:	f005 f8a8 	bl	80062fc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000204 	.word	0x20000204
 80011b4:	40005400 	.word	0x40005400
 80011b8:	00061a80 	.word	0x00061a80

080011bc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b096      	sub	sp, #88	; 0x58
 80011c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2220      	movs	r2, #32
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00e fee1 	bl	800ffbc <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <MX_TIM1_Init+0x134>)
 80011fc:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <MX_TIM1_Init+0x138>)
 80011fe:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160;
 8001200:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001202:	22a0      	movs	r2, #160	; 0xa0
 8001204:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 800120c:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <MX_TIM1_Init+0x134>)
 800120e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001212:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <MX_TIM1_Init+0x134>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001226:	4832      	ldr	r0, [pc, #200]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001228:	f009 fb16 	bl	800a858 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8001232:	f005 f863 	bl	80062fc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800123c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001240:	4619      	mov	r1, r3
 8001242:	482b      	ldr	r0, [pc, #172]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001244:	f00a f98a 	bl	800b55c <HAL_TIM_ConfigClockSource>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x96>
		Error_Handler();
 800124e:	f005 f855 	bl	80062fc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001252:	4827      	ldr	r0, [pc, #156]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001254:	f009 fb4f 	bl	800a8f6 <HAL_TIM_PWM_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0xa6>
		Error_Handler();
 800125e:	f005 f84d 	bl	80062fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800126a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800126e:	4619      	mov	r1, r3
 8001270:	481f      	ldr	r0, [pc, #124]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001272:	f00a fee1 	bl	800c038 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 800127c:	f005 f83e 	bl	80062fc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001280:	2360      	movs	r3, #96	; 0x60
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	220c      	movs	r2, #12
 800129e:	4619      	mov	r1, r3
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012a2:	f00a f899 	bl	800b3d8 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 80012ac:	f005 f826 	bl	80062fc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012d4:	f00a ff2c 	bl	800c130 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM1_Init+0x126>
			!= HAL_OK) {
		Error_Handler();
 80012de:	f005 f80d 	bl	80062fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80012e2:	4803      	ldr	r0, [pc, #12]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012e4:	f005 fcf8 	bl	8006cd8 <HAL_TIM_MspPostInit>

}
 80012e8:	bf00      	nop
 80012ea:	3758      	adds	r7, #88	; 0x58
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000258 	.word	0x20000258
 80012f4:	40010000 	.word	0x40010000

080012f8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	; 0x30
 80012fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	2224      	movs	r2, #36	; 0x24
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f00e fe58 	bl	800ffbc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_TIM2_Init+0xa4>)
 8001316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_TIM2_Init+0xa4>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_TIM2_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_TIM2_Init+0xa4>)
 800132a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM2_Init+0xa4>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_TIM2_Init+0xa4>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800133c:	2301      	movs	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001344:	2301      	movs	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001354:	2301      	movs	r3, #1
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_TIM2_Init+0xa4>)
 8001368:	f009 fd5e 	bl	800ae28 <HAL_TIM_Encoder_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0x7e>
		Error_Handler();
 8001372:	f004 ffc3 	bl	80062fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_TIM2_Init+0xa4>)
 8001384:	f00a fe58 	bl	800c038 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800138e:	f004 ffb5 	bl	80062fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3730      	adds	r7, #48	; 0x30
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200002a0 	.word	0x200002a0

080013a0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013be:	4a21      	ldr	r2, [pc, #132]	; (8001444 <MX_TIM3_Init+0xa4>)
 80013c0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013c4:	2247      	movs	r2, #71	; 0x47
 80013c6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0xffff - 1;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013d4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 80013e2:	4817      	ldr	r0, [pc, #92]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013e4:	f009 fba8 	bl	800ab38 <HAL_TIM_IC_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM3_Init+0x52>
		Error_Handler();
 80013ee:	f004 ff85 	bl	80062fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4619      	mov	r1, r3
 8001400:	480f      	ldr	r0, [pc, #60]	; (8001440 <MX_TIM3_Init+0xa0>)
 8001402:	f00a fe19 	bl	800c038 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM3_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 800140c:	f004 ff76 	bl	80062fc <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_TIM3_Init+0xa0>)
 8001428:	f009 ff3a 	bl	800b2a0 <HAL_TIM_IC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0x96>
		Error_Handler();
 8001432:	f004 ff63 	bl	80062fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200002e8 	.word	0x200002e8
 8001444:	40000400 	.word	0x40000400

08001448 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2224      	movs	r2, #36	; 0x24
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f00e fdb0 	bl	800ffbc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001466:	4a21      	ldr	r2, [pc, #132]	; (80014ec <MX_TIM4_Init+0xa4>)
 8001468:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <MX_TIM4_Init+0xa0>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800148a:	2301      	movs	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014a2:	2301      	movs	r3, #1
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	4619      	mov	r1, r3
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <MX_TIM4_Init+0xa0>)
 80014b6:	f009 fcb7 	bl	800ae28 <HAL_TIM_Encoder_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM4_Init+0x7c>
		Error_Handler();
 80014c0:	f004 ff1c 	bl	80062fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_TIM4_Init+0xa0>)
 80014d2:	f00a fdb1 	bl	800c038 <HAL_TIMEx_MasterConfigSynchronization>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM4_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80014dc:	f004 ff0e 	bl	80062fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	3730      	adds	r7, #48	; 0x30
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000330 	.word	0x20000330
 80014ec:	40000800 	.word	0x40000800

080014f0 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b096      	sub	sp, #88	; 0x58
 80014f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2220      	movs	r2, #32
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f00e fd47 	bl	800ffbc <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800152e:	4b43      	ldr	r3, [pc, #268]	; (800163c <MX_TIM8_Init+0x14c>)
 8001530:	4a43      	ldr	r2, [pc, #268]	; (8001640 <MX_TIM8_Init+0x150>)
 8001532:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001534:	4b41      	ldr	r3, [pc, #260]	; (800163c <MX_TIM8_Init+0x14c>)
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b40      	ldr	r3, [pc, #256]	; (800163c <MX_TIM8_Init+0x14c>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7199;
 8001540:	4b3e      	ldr	r3, [pc, #248]	; (800163c <MX_TIM8_Init+0x14c>)
 8001542:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001546:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001548:	4b3c      	ldr	r3, [pc, #240]	; (800163c <MX_TIM8_Init+0x14c>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <MX_TIM8_Init+0x14c>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001554:	4b39      	ldr	r3, [pc, #228]	; (800163c <MX_TIM8_Init+0x14c>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 800155a:	4838      	ldr	r0, [pc, #224]	; (800163c <MX_TIM8_Init+0x14c>)
 800155c:	f009 f97c 	bl	800a858 <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM8_Init+0x7a>
		Error_Handler();
 8001566:	f004 fec9 	bl	80062fc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8001570:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001574:	4619      	mov	r1, r3
 8001576:	4831      	ldr	r0, [pc, #196]	; (800163c <MX_TIM8_Init+0x14c>)
 8001578:	f009 fff0 	bl	800b55c <HAL_TIM_ConfigClockSource>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM8_Init+0x96>
		Error_Handler();
 8001582:	f004 febb 	bl	80062fc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001586:	482d      	ldr	r0, [pc, #180]	; (800163c <MX_TIM8_Init+0x14c>)
 8001588:	f009 f9b5 	bl	800a8f6 <HAL_TIM_PWM_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM8_Init+0xa6>
		Error_Handler();
 8001592:	f004 feb3 	bl	80062fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800159e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015a2:	4619      	mov	r1, r3
 80015a4:	4825      	ldr	r0, [pc, #148]	; (800163c <MX_TIM8_Init+0x14c>)
 80015a6:	f00a fd47 	bl	800c038 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM8_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80015b0:	f004 fea4 	bl	80062fc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b4:	2360      	movs	r3, #96	; 0x60
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4818      	ldr	r0, [pc, #96]	; (800163c <MX_TIM8_Init+0x14c>)
 80015da:	f009 fefd 	bl	800b3d8 <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM8_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 80015e4:	f004 fe8a 	bl	80062fc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	2208      	movs	r2, #8
 80015ee:	4619      	mov	r1, r3
 80015f0:	4812      	ldr	r0, [pc, #72]	; (800163c <MX_TIM8_Init+0x14c>)
 80015f2:	f009 fef1 	bl	800b3d8 <HAL_TIM_PWM_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM8_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 80015fc:	f004 fe7e 	bl	80062fc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001618:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <MX_TIM8_Init+0x14c>)
 8001624:	f00a fd84 	bl	800c130 <HAL_TIMEx_ConfigBreakDeadTime>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM8_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 800162e:	f004 fe65 	bl	80062fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	3758      	adds	r7, #88	; 0x58
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000378 	.word	0x20000378
 8001640:	40010400 	.word	0x40010400

08001644 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_USART3_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800167c:	f00a fdbe 	bl	800c1fc <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001686:	f004 fe39 	bl	80062fc <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200003c0 	.word	0x200003c0
 8001694:	40004800 	.word	0x40004800

08001698 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b3a      	ldr	r3, [pc, #232]	; (800179c <MX_GPIO_Init+0x104>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a39      	ldr	r2, [pc, #228]	; (800179c <MX_GPIO_Init+0x104>)
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <MX_GPIO_Init+0x104>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b33      	ldr	r3, [pc, #204]	; (800179c <MX_GPIO_Init+0x104>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a32      	ldr	r2, [pc, #200]	; (800179c <MX_GPIO_Init+0x104>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b30      	ldr	r3, [pc, #192]	; (800179c <MX_GPIO_Init+0x104>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <MX_GPIO_Init+0x104>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a2b      	ldr	r2, [pc, #172]	; (800179c <MX_GPIO_Init+0x104>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <MX_GPIO_Init+0x104>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <MX_GPIO_Init+0x104>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a24      	ldr	r2, [pc, #144]	; (800179c <MX_GPIO_Init+0x104>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <MX_GPIO_Init+0x104>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800171e:	2200      	movs	r2, #0
 8001720:	f44f 51bf 	mov.w	r1, #6112	; 0x17e0
 8001724:	481e      	ldr	r0, [pc, #120]	; (80017a0 <MX_GPIO_Init+0x108>)
 8001726:	f006 f889 	bl	800783c <HAL_GPIO_WritePin>
			OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin
					| UltraSensor_Trigger_Pin | LED3_Pin | CIN1_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	210c      	movs	r1, #12
 800172e:	481d      	ldr	r0, [pc, #116]	; (80017a4 <MX_GPIO_Init+0x10c>)
 8001730:	f006 f884 	bl	800783c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2120      	movs	r1, #32
 8001738:	481b      	ldr	r0, [pc, #108]	; (80017a8 <MX_GPIO_Init+0x110>)
 800173a:	f006 f87f 	bl	800783c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
	 UltraSensor_Trigger_Pin LED3_Pin CIN1_Pin */
	GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin
 800173e:	f44f 53bf 	mov.w	r3, #6112	; 0x17e0
 8001742:	617b      	str	r3, [r7, #20]
			| OLED_DC_Pin | UltraSensor_Trigger_Pin | LED3_Pin | CIN1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4812      	ldr	r0, [pc, #72]	; (80017a0 <MX_GPIO_Init+0x108>)
 8001758:	f005 fed4 	bl	8007504 <HAL_GPIO_Init>

	/*Configure GPIO pins : AIN2_Pin AIN1_Pin */
	GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin;
 800175c:	230c      	movs	r3, #12
 800175e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001768:	2302      	movs	r3, #2
 800176a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	480c      	ldr	r0, [pc, #48]	; (80017a4 <MX_GPIO_Init+0x10c>)
 8001774:	f005 fec6 	bl	8007504 <HAL_GPIO_Init>

	/*Configure GPIO pin : CIN2_Pin */
	GPIO_InitStruct.Pin = CIN2_Pin;
 8001778:	2320      	movs	r3, #32
 800177a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CIN2_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_GPIO_Init+0x110>)
 8001790:	f005 feb8 	bl	8007504 <HAL_GPIO_Init>

}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40020800 	.word	0x40020800

080017ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// For own reference, this function seems to be called after
// interrupt from the HAL_UART_Receive_IT function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b08b      	sub	sp, #44	; 0x2c
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	6078      	str	r0, [r7, #4]
	//Prevent unused argument(s) compilation warning
	UNUSED(huart);
	static i = 0; //static means it doesn't get erase after every loop

	if (aRxBuffer[0] == 'n') {
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b6e      	cmp	r3, #110	; 0x6e
 80017ba:	d106      	bne.n	80017ca <HAL_UART_RxCpltCallback+0x1e>
		i = 0;
 80017bc:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
		newCmdReceived = 1;
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_UART_RxCpltCallback+0xb0>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
 80017c8:	e01e      	b.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
	} else if (i == 0) {
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_UART_RxCpltCallback+0x3a>
		cmd = aRxBuffer[0];
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_UART_RxCpltCallback+0xb4>)
 80017d8:	701a      	strb	r2, [r3, #0]
		i++;
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	e010      	b.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
	} else if (i > 0) {
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	dd0c      	ble.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
		data = data * 10 + (aRxBuffer[0] - '0');
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4413      	add	r3, r2
 8001802:	3b30      	subs	r3, #48	; 0x30
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 8001806:	6013      	str	r3, [r2, #0]
//		data = aRxBuffer[0];
	}

	uint8_t message1[20];
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 1);
 8001808:	2201      	movs	r2, #1
 800180a:	4912      	ldr	r1, [pc, #72]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 800180c:	4816      	ldr	r0, [pc, #88]	; (8001868 <HAL_UART_RxCpltCallback+0xbc>)
 800180e:	f00a fdd4 	bl	800c3ba <HAL_UART_Receive_IT>
//	HAL_UART_Transmit(&huart3, (uint8_t *) aRxBuffer, 1, 0xFFFF);

	sprintf(message1, "%c %d %c %d\0", aRxBuffer[0], newCmdReceived, cmd, data);
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_UART_RxCpltCallback+0xb0>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461c      	mov	r4, r3
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_UART_RxCpltCallback+0xb4>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f107 000c 	add.w	r0, r7, #12
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	9200      	str	r2, [sp, #0]
 8001830:	4623      	mov	r3, r4
 8001832:	460a      	mov	r2, r1
 8001834:	490d      	ldr	r1, [pc, #52]	; (800186c <HAL_UART_RxCpltCallback+0xc0>)
 8001836:	f00f fa49 	bl	8010ccc <siprintf>
	OLED_ShowString(10, 40, message1);
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	461a      	mov	r2, r3
 8001840:	2128      	movs	r1, #40	; 0x28
 8001842:	200a      	movs	r0, #10
 8001844:	f004 fed4 	bl	80065f0 <OLED_ShowString>
	OLED_Refresh_Gram(); //Refresh Ram
 8001848:	f004 fd5e 	bl	8006308 <OLED_Refresh_Gram>
}
 800184c:	bf00      	nop
 800184e:	3724      	adds	r7, #36	; 0x24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}
 8001854:	20000428 	.word	0x20000428
 8001858:	2000045c 	.word	0x2000045c
 800185c:	20000429 	.word	0x20000429
 8001860:	2000042a 	.word	0x2000042a
 8001864:	2000042c 	.word	0x2000042c
 8001868:	200003c0 	.word	0x200003c0
 800186c:	080148d8 	.word	0x080148d8

08001870 <delay>:

//reference: https://controllerstech.com/hcsr04-ultrasonic-sensor-and-stm32/
void delay(uint16_t time) {
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <delay+0x30>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time)
 8001882:	bf00      	nop
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <delay+0x30>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	429a      	cmp	r2, r3
 800188e:	d3f9      	bcc.n	8001884 <delay+0x14>
		;

}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	200002e8 	.word	0x200002e8

080018a4 <HCSR04_Read>:
void HCSR04_Read(void) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UltraSensor_Trigger_GPIO_Port, UltraSensor_Trigger_Pin,
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ae:	480b      	ldr	r0, [pc, #44]	; (80018dc <HCSR04_Read+0x38>)
 80018b0:	f005 ffc4 	bl	800783c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);  // pull the TRIG pin HIGH
	delay(10);  // wait for 10 us
 80018b4:	200a      	movs	r0, #10
 80018b6:	f7ff ffdb 	bl	8001870 <delay>
	HAL_GPIO_WritePin(UltraSensor_Trigger_GPIO_Port, UltraSensor_Trigger_Pin,
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c0:	4806      	ldr	r0, [pc, #24]	; (80018dc <HCSR04_Read+0x38>)
 80018c2:	f005 ffbb 	bl	800783c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);  // pull the TRIG pin low

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HCSR04_Read+0x3c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <HCSR04_Read+0x3c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0202 	orr.w	r2, r2, #2
 80018d4:	60da      	str	r2, [r3, #12]
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	200002e8 	.word	0x200002e8
 80018e4:	00000000 	.word	0x00000000

080018e8 <HAL_TIM_IC_CaptureCallback>:

//Called whenever falling or rising edge is captured
// Let's write the callback function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7f1b      	ldrb	r3, [r3, #28]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	f040 8082 	bne.w	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
			{
		if (Is_First_Captured == 0) // if the first value is not captured
 80018fa:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11a      	bne.n	8001938 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001902:	2100      	movs	r1, #0
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f009 fef1 	bl	800b6ec <HAL_TIM_ReadCapturedValue>
 800190a:	4603      	mov	r3, r0
 800190c:	4a41      	ldr	r2, [pc, #260]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800190e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001910:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6a1a      	ldr	r2, [r3, #32]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 020a 	bic.w	r2, r2, #10
 8001924:	621a      	str	r2, [r3, #32]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6a1a      	ldr	r2, [r3, #32]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0202 	orr.w	r2, r2, #2
 8001934:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8001936:	e062      	b.n	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured == 1)   // if the first is already captured
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d15e      	bne.n	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001940:	2100      	movs	r1, #0
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f009 fed2 	bl	800b6ec <HAL_TIM_ReadCapturedValue>
 8001948:	4603      	mov	r3, r0
 800194a:	4a33      	ldr	r2, [pc, #204]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 800194c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8001956:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d907      	bls.n	8001972 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 8001962:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	4a2b      	ldr	r2, [pc, #172]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e00f      	b.n	8001992 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 8001972:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d909      	bls.n	8001992 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800198c:	33ff      	adds	r3, #255	; 0xff
 800198e:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001990:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.034 / 2;
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdb4 	bl	8000504 <__aeabi_ui2d>
 800199c:	a31a      	add	r3, pc, #104	; (adr r3, 8001a08 <HAL_TIM_IC_CaptureCallback+0x120>)
 800199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a2:	f7fe fe29 	bl	80005f8 <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b6:	f7fe ff49 	bl	800084c <__aeabi_ddiv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f911 	bl	8000be8 <__aeabi_d2f>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x138>)
 80019ca:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6a1a      	ldr	r2, [r3, #32]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 020a 	bic.w	r2, r2, #10
 80019e0:	621a      	str	r2, [r3, #32]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6a12      	ldr	r2, [r2, #32]
 80019ec:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0202 	bic.w	r2, r2, #2
 80019fc:	60da      	str	r2, [r3, #12]
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	b020c49c 	.word	0xb020c49c
 8001a0c:	3fa16872 	.word	0x3fa16872
 8001a10:	20000440 	.word	0x20000440
 8001a14:	20000434 	.word	0x20000434
 8001a18:	20000438 	.word	0x20000438
 8001a1c:	2000043c 	.word	0x2000043c
 8001a20:	20000444 	.word	0x20000444
 8001a24:	20000258 	.word	0x20000258

08001a28 <task2A>:

void task2A(uint32_t data) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b0a0      	sub	sp, #128	; 0x80
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	uint32_t offset_show[30];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001a30:	2100      	movs	r1, #0
 8001a32:	48b4      	ldr	r0, [pc, #720]	; (8001d04 <task2A+0x2dc>)
 8001a34:	f008 ffb8 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001a38:	2108      	movs	r1, #8
 8001a3a:	48b2      	ldr	r0, [pc, #712]	; (8001d04 <task2A+0x2dc>)
 8001a3c:	f008 ffb4 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001a40:	210c      	movs	r1, #12
 8001a42:	48b1      	ldr	r0, [pc, #708]	; (8001d08 <task2A+0x2e0>)
 8001a44:	f008 ffb0 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2108      	movs	r1, #8
 8001a4c:	48af      	ldr	r0, [pc, #700]	; (8001d0c <task2A+0x2e4>)
 8001a4e:	f005 fef5 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2104      	movs	r1, #4
 8001a56:	48ad      	ldr	r0, [pc, #692]	; (8001d0c <task2A+0x2e4>)
 8001a58:	f005 fef0 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a62:	48ab      	ldr	r0, [pc, #684]	; (8001d10 <task2A+0x2e8>)
 8001a64:	f005 feea 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	48a9      	ldr	r0, [pc, #676]	; (8001d14 <task2A+0x2ec>)
 8001a6e:	f005 fee5 	bl	800783c <HAL_GPIO_WritePin>

	//if picture detected is left tln
	if (data == 'l') {
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b6c      	cmp	r3, #108	; 0x6c
 8001a76:	f040 8088 	bne.w	8001b8a <task2A+0x162>
		htim1.Instance->CCR4 = 115;
 8001a7a:	4ba3      	ldr	r3, [pc, #652]	; (8001d08 <task2A+0x2e0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2273      	movs	r2, #115	; 0x73
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001a82:	4ba0      	ldr	r3, [pc, #640]	; (8001d04 <task2A+0x2dc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a8a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 8001a8c:	4b9d      	ldr	r3, [pc, #628]	; (8001d04 <task2A+0x2dc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a94:	63da      	str	r2, [r3, #60]	; 0x3c
		moving = 1;
 8001a96:	4ba0      	ldr	r3, [pc, #640]	; (8001d18 <task2A+0x2f0>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
		while (moving) {
 8001a9c:	e020      	b.n	8001ae0 <task2A+0xb8>
			if ((int) totalAngle >= 27) {
 8001a9e:	4b9f      	ldr	r3, [pc, #636]	; (8001d1c <task2A+0x2f4>)
 8001aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7ff f856 	bl	8000b58 <__aeabi_d2iz>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b1a      	cmp	r3, #26
 8001ab0:	dc1b      	bgt.n	8001aea <task2A+0xc2>
				break;
			}
			sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001ab2:	4b9a      	ldr	r3, [pc, #616]	; (8001d1c <task2A+0x2f4>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7ff f84c 	bl	8000b58 <__aeabi_d2iz>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	4996      	ldr	r1, [pc, #600]	; (8001d20 <task2A+0x2f8>)
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f00f f8ff 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 20, offset_show);
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2114      	movs	r1, #20
 8001ad6:	200a      	movs	r0, #10
 8001ad8:	f004 fd8a 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 8001adc:	f004 fc14 	bl	8006308 <OLED_Refresh_Gram>
		while (moving) {
 8001ae0:	4b8d      	ldr	r3, [pc, #564]	; (8001d18 <task2A+0x2f0>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1da      	bne.n	8001a9e <task2A+0x76>
 8001ae8:	e000      	b.n	8001aec <task2A+0xc4>
				break;
 8001aea:	bf00      	nop
		}
		moveGyroPID(60, 1);
 8001aec:	2001      	movs	r0, #1
 8001aee:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8001d24 <task2A+0x2fc>
 8001af2:	f002 f995 	bl	8003e20 <moveGyroPID>
		htim1.Instance->CCR4 = RIGHT;
 8001af6:	4b84      	ldr	r3, [pc, #528]	; (8001d08 <task2A+0x2e0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	22fa      	movs	r2, #250	; 0xfa
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2000);
 8001afe:	4b81      	ldr	r3, [pc, #516]	; (8001d04 <task2A+0x2dc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b06:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001b08:	4b7e      	ldr	r3, [pc, #504]	; (8001d04 <task2A+0x2dc>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b10:	63da      	str	r2, [r3, #60]	; 0x3c
		continueMoving = 0;
 8001b12:	4b85      	ldr	r3, [pc, #532]	; (8001d28 <task2A+0x300>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
		while (Distance > 14) {
 8001b18:	e025      	b.n	8001b66 <task2A+0x13e>
			if (totalAngle <= -1 * 15) {
 8001b1a:	4b80      	ldr	r3, [pc, #512]	; (8001d1c <task2A+0x2f4>)
 8001b1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b81      	ldr	r3, [pc, #516]	; (8001d2c <task2A+0x304>)
 8001b26:	f7fe ffe3 	bl	8000af0 <__aeabi_dcmple>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <task2A+0x110>
				continueMoving = 1;
 8001b30:	4b7d      	ldr	r3, [pc, #500]	; (8001d28 <task2A+0x300>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
// 				sendToRPI("here");
				break;
 8001b36:	e020      	b.n	8001b7a <task2A+0x152>
			}

			sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001b38:	4b78      	ldr	r3, [pc, #480]	; (8001d1c <task2A+0x2f4>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7ff f809 	bl	8000b58 <__aeabi_d2iz>
 8001b46:	4602      	mov	r2, r0
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	4974      	ldr	r1, [pc, #464]	; (8001d20 <task2A+0x2f8>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00f f8bc 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 20, offset_show);
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2114      	movs	r1, #20
 8001b5c:	200a      	movs	r0, #10
 8001b5e:	f004 fd47 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 8001b62:	f004 fbd1 	bl	8006308 <OLED_Refresh_Gram>
		while (Distance > 14) {
 8001b66:	4b72      	ldr	r3, [pc, #456]	; (8001d30 <task2A+0x308>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	dccf      	bgt.n	8001b1a <task2A+0xf2>
		}
		if (continueMoving) {
 8001b7a:	4b6b      	ldr	r3, [pc, #428]	; (8001d28 <task2A+0x300>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 808e 	beq.w	8001ca0 <task2A+0x278>
			moveUltraExtreme();
 8001b84:	f001 ff4a 	bl	8003a1c <moveUltraExtreme>
 8001b88:	e08a      	b.n	8001ca0 <task2A+0x278>
		}

	} else if (data == 'r') {
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b72      	cmp	r3, #114	; 0x72
 8001b8e:	f040 8087 	bne.w	8001ca0 <task2A+0x278>
		htim1.Instance->CCR4 = RIGHT;
 8001b92:	4b5d      	ldr	r3, [pc, #372]	; (8001d08 <task2A+0x2e0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	22fa      	movs	r2, #250	; 0xfa
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2000);
 8001b9a:	4b5a      	ldr	r3, [pc, #360]	; (8001d04 <task2A+0x2dc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001ba4:	4b57      	ldr	r3, [pc, #348]	; (8001d04 <task2A+0x2dc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bac:	63da      	str	r2, [r3, #60]	; 0x3c
		moving = 1;
 8001bae:	4b5a      	ldr	r3, [pc, #360]	; (8001d18 <task2A+0x2f0>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
		while (moving) {
 8001bb4:	e021      	b.n	8001bfa <task2A+0x1d2>
			if ((int) totalAngle <= -1 * 23) // prev was 30
 8001bb6:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <task2A+0x2f4>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7fe ffca 	bl	8000b58 <__aeabi_d2iz>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f113 0f16 	cmn.w	r3, #22
 8001bca:	db1b      	blt.n	8001c04 <task2A+0x1dc>
					{
				break;
			}
			sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001bcc:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <task2A+0x2f4>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7fe ffbf 	bl	8000b58 <__aeabi_d2iz>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	f107 0308 	add.w	r3, r7, #8
 8001be0:	494f      	ldr	r1, [pc, #316]	; (8001d20 <task2A+0x2f8>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f00f f872 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 20, offset_show);
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	461a      	mov	r2, r3
 8001bee:	2114      	movs	r1, #20
 8001bf0:	200a      	movs	r0, #10
 8001bf2:	f004 fcfd 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 8001bf6:	f004 fb87 	bl	8006308 <OLED_Refresh_Gram>
		while (moving) {
 8001bfa:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <task2A+0x2f0>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1d9      	bne.n	8001bb6 <task2A+0x18e>
 8001c02:	e000      	b.n	8001c06 <task2A+0x1de>
				break;
 8001c04:	bf00      	nop
		}
		moveGyroPID(58, 1);
 8001c06:	2001      	movs	r0, #1
 8001c08:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8001d34 <task2A+0x30c>
 8001c0c:	f002 f908 	bl	8003e20 <moveGyroPID>
		htim1.Instance->CCR4 = LEFT;
 8001c10:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <task2A+0x2e0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2269      	movs	r2, #105	; 0x69
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001c18:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <task2A+0x2dc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c20:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 8001c22:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <task2A+0x2dc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c2a:	63da      	str	r2, [r3, #60]	; 0x3c
		continueMoving = 0;
 8001c2c:	4b3e      	ldr	r3, [pc, #248]	; (8001d28 <task2A+0x300>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]

		while (Distance > 14) {
 8001c32:	e025      	b.n	8001c80 <task2A+0x258>
			if (totalAngle >= 25) {
 8001c34:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <task2A+0x2f4>)
 8001c36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <task2A+0x310>)
 8001c40:	f7fe ff60 	bl	8000b04 <__aeabi_dcmpge>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <task2A+0x22a>
				continueMoving = 1;
 8001c4a:	4b37      	ldr	r3, [pc, #220]	; (8001d28 <task2A+0x300>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
				break;
 8001c50:	e020      	b.n	8001c94 <task2A+0x26c>
			}
			sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001c52:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <task2A+0x2f4>)
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe ff7c 	bl	8000b58 <__aeabi_d2iz>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	492e      	ldr	r1, [pc, #184]	; (8001d20 <task2A+0x2f8>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f00f f82f 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 20, offset_show);
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	461a      	mov	r2, r3
 8001c74:	2114      	movs	r1, #20
 8001c76:	200a      	movs	r0, #10
 8001c78:	f004 fcba 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 8001c7c:	f004 fb44 	bl	8006308 <OLED_Refresh_Gram>
		while (Distance > 14) {
 8001c80:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <task2A+0x308>)
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	dccf      	bgt.n	8001c34 <task2A+0x20c>
		}
		if (continueMoving) {
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <task2A+0x300>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <task2A+0x278>
			moveUltraExtreme();
 8001c9c:	f001 febe 	bl	8003a1c <moveUltraExtreme>
// 	 		continueMoving = 0;
// 		}
	}

	// straighten STM back to be perpendicular to 2nd obstacle
	if (continueMoving) {
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <task2A+0x300>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d078      	beq.n	8001d9a <task2A+0x372>
		if (actualAngle > 0) {
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <task2A+0x314>)
 8001caa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	f7fe ff2f 	bl	8000b18 <__aeabi_dcmpgt>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d03f      	beq.n	8001d40 <task2A+0x318>
			while (actualAngle > 0) {
 8001cc0:	e013      	b.n	8001cea <task2A+0x2c2>
				moving = 1;
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <task2A+0x2f0>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
				htim1.Instance->CCR4 = RIGHT;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <task2A+0x2e0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	22fa      	movs	r2, #250	; 0xfa
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <task2A+0x2dc>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cd8:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 400);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <task2A+0x2dc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c
				delay(1);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f7ff fdc3 	bl	8001870 <delay>
			while (actualAngle > 0) {
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <task2A+0x314>)
 8001cec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	f7fe ff0e 	bl	8000b18 <__aeabi_dcmpgt>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1df      	bne.n	8001cc2 <task2A+0x29a>
 8001d02:	e04a      	b.n	8001d9a <task2A+0x372>
 8001d04:	20000378 	.word	0x20000378
 8001d08:	20000258 	.word	0x20000258
 8001d0c:	40020000 	.word	0x40020000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40020800 	.word	0x40020800
 8001d18:	20000414 	.word	0x20000414
 8001d1c:	20000418 	.word	0x20000418
 8001d20:	080148e8 	.word	0x080148e8
 8001d24:	42700000 	.word	0x42700000
 8001d28:	20000416 	.word	0x20000416
 8001d2c:	c02e0000 	.word	0xc02e0000
 8001d30:	20000444 	.word	0x20000444
 8001d34:	42680000 	.word	0x42680000
 8001d38:	40390000 	.word	0x40390000
 8001d3c:	20000420 	.word	0x20000420
			}
		} else if (actualAngle < 0) {
 8001d40:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <task2A+0x3bc>)
 8001d42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	f7fe fec5 	bl	8000adc <__aeabi_dcmplt>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <task2A+0x372>
			while (actualAngle < 0) {
 8001d58:	e013      	b.n	8001d82 <task2A+0x35a>
				moving = 1;
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <task2A+0x3c0>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]
				htim1.Instance->CCR4 = LEFT;
 8001d60:	4b22      	ldr	r3, [pc, #136]	; (8001dec <task2A+0x3c4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2269      	movs	r2, #105	; 0x69
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 400);
 8001d68:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <task2A+0x3c8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001d70:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <task2A+0x3c8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d7a:	63da      	str	r2, [r3, #60]	; 0x3c
				delay(1);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff fd77 	bl	8001870 <delay>
			while (actualAngle < 0) {
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <task2A+0x3bc>)
 8001d84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	f7fe fea4 	bl	8000adc <__aeabi_dcmplt>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1df      	bne.n	8001d5a <task2A+0x332>
			}
		}
	}

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <task2A+0x3c8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <task2A+0x3c8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2200      	movs	r2, #0
 8001da8:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance->CCR4 = STRAIGHT;
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <task2A+0x3c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2295      	movs	r2, #149	; 0x95
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001db2:	2201      	movs	r2, #1
 8001db4:	2108      	movs	r1, #8
 8001db6:	480f      	ldr	r0, [pc, #60]	; (8001df4 <task2A+0x3cc>)
 8001db8:	f005 fd40 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	480c      	ldr	r0, [pc, #48]	; (8001df4 <task2A+0x3cc>)
 8001dc2:	f005 fd3b 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dcc:	480a      	ldr	r0, [pc, #40]	; (8001df8 <task2A+0x3d0>)
 8001dce:	f005 fd35 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2120      	movs	r1, #32
 8001dd6:	4809      	ldr	r0, [pc, #36]	; (8001dfc <task2A+0x3d4>)
 8001dd8:	f005 fd30 	bl	800783c <HAL_GPIO_WritePin>
}
 8001ddc:	bf00      	nop
 8001dde:	3780      	adds	r7, #128	; 0x80
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000420 	.word	0x20000420
 8001de8:	20000414 	.word	0x20000414
 8001dec:	20000258 	.word	0x20000258
 8001df0:	20000378 	.word	0x20000378
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40020800 	.word	0x40020800

08001e00 <task2A2>:

void task2A2(uint32_t data) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0a0      	sub	sp, #128	; 0x80
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	uint32_t offset_show[30];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	48ac      	ldr	r0, [pc, #688]	; (80020bc <task2A2+0x2bc>)
 8001e0c:	f008 fdcc 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001e10:	2108      	movs	r1, #8
 8001e12:	48aa      	ldr	r0, [pc, #680]	; (80020bc <task2A2+0x2bc>)
 8001e14:	f008 fdc8 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001e18:	210c      	movs	r1, #12
 8001e1a:	48a9      	ldr	r0, [pc, #676]	; (80020c0 <task2A2+0x2c0>)
 8001e1c:	f008 fdc4 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	2108      	movs	r1, #8
 8001e24:	48a7      	ldr	r0, [pc, #668]	; (80020c4 <task2A2+0x2c4>)
 8001e26:	f005 fd09 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	48a5      	ldr	r0, [pc, #660]	; (80020c4 <task2A2+0x2c4>)
 8001e30:	f005 fd04 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8001e34:	2201      	movs	r2, #1
 8001e36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e3a:	48a3      	ldr	r0, [pc, #652]	; (80020c8 <task2A2+0x2c8>)
 8001e3c:	f005 fcfe 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2120      	movs	r1, #32
 8001e44:	48a1      	ldr	r0, [pc, #644]	; (80020cc <task2A2+0x2cc>)
 8001e46:	f005 fcf9 	bl	800783c <HAL_GPIO_WritePin>
	moving = 0;
 8001e4a:	4ba1      	ldr	r3, [pc, #644]	; (80020d0 <task2A2+0x2d0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]

	if (continueMoving) {
 8001e50:	4ba0      	ldr	r3, [pc, #640]	; (80020d4 <task2A2+0x2d4>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 81c3 	beq.w	80021e0 <task2A2+0x3e0>
		//if picture detected is left Tln
		if (data == 'l') {
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b6c      	cmp	r3, #108	; 0x6c
 8001e5e:	f040 80d2 	bne.w	8002006 <task2A2+0x206>
			htim1.Instance->CCR4 = 105;
 8001e62:	4b97      	ldr	r3, [pc, #604]	; (80020c0 <task2A2+0x2c0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2269      	movs	r2, #105	; 0x69
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001e6a:	4b94      	ldr	r3, [pc, #592]	; (80020bc <task2A2+0x2bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e72:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8001e74:	4b91      	ldr	r3, [pc, #580]	; (80020bc <task2A2+0x2bc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e7c:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 8001e7e:	4b94      	ldr	r3, [pc, #592]	; (80020d0 <task2A2+0x2d0>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001e84:	e020      	b.n	8001ec8 <task2A2+0xc8>
				if ((int) actualAngle >= 60) // was 65
 8001e86:	4b94      	ldr	r3, [pc, #592]	; (80020d8 <task2A2+0x2d8>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7fe fe62 	bl	8000b58 <__aeabi_d2iz>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b3b      	cmp	r3, #59	; 0x3b
 8001e98:	dc1b      	bgt.n	8001ed2 <task2A2+0xd2>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001e9a:	4b90      	ldr	r3, [pc, #576]	; (80020dc <task2A2+0x2dc>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7fe fe58 	bl	8000b58 <__aeabi_d2iz>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	498c      	ldr	r1, [pc, #560]	; (80020e0 <task2A2+0x2e0>)
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f00e ff0b 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2114      	movs	r1, #20
 8001ebe:	200a      	movs	r0, #10
 8001ec0:	f004 fb96 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001ec4:	f004 fa20 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 8001ec8:	4b81      	ldr	r3, [pc, #516]	; (80020d0 <task2A2+0x2d0>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1da      	bne.n	8001e86 <task2A2+0x86>
 8001ed0:	e000      	b.n	8001ed4 <task2A2+0xd4>
					break;
 8001ed2:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001ed4:	4b79      	ldr	r3, [pc, #484]	; (80020bc <task2A2+0x2bc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8001edc:	4b77      	ldr	r3, [pc, #476]	; (80020bc <task2A2+0x2bc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(85, 1);
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 80020e4 <task2A2+0x2e4>
 8001eea:	f001 ff99 	bl	8003e20 <moveGyroPID>
			htim1.Instance->CCR4 = RIGHT;
 8001eee:	4b74      	ldr	r3, [pc, #464]	; (80020c0 <task2A2+0x2c0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	22fa      	movs	r2, #250	; 0xfa
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001ef6:	4b71      	ldr	r3, [pc, #452]	; (80020bc <task2A2+0x2bc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001efe:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001f00:	4b6e      	ldr	r3, [pc, #440]	; (80020bc <task2A2+0x2bc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f08:	63da      	str	r2, [r3, #60]	; 0x3c
			// 		continueMoving = 0;

			while (moving) {
 8001f0a:	e021      	b.n	8001f50 <task2A2+0x150>
				if ((int) actualAngle <= -83) {
 8001f0c:	4b72      	ldr	r3, [pc, #456]	; (80020d8 <task2A2+0x2d8>)
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f7fe fe1f 	bl	8000b58 <__aeabi_d2iz>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f113 0f52 	cmn.w	r3, #82	; 0x52
 8001f20:	db1b      	blt.n	8001f5a <task2A2+0x15a>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001f22:	4b6e      	ldr	r3, [pc, #440]	; (80020dc <task2A2+0x2dc>)
 8001f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fe14 	bl	8000b58 <__aeabi_d2iz>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f107 0308 	add.w	r3, r7, #8
 8001f36:	496a      	ldr	r1, [pc, #424]	; (80020e0 <task2A2+0x2e0>)
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f00e fec7 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001f3e:	f107 0308 	add.w	r3, r7, #8
 8001f42:	461a      	mov	r2, r3
 8001f44:	2114      	movs	r1, #20
 8001f46:	200a      	movs	r0, #10
 8001f48:	f004 fb52 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001f4c:	f004 f9dc 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 8001f50:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <task2A2+0x2d0>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1d9      	bne.n	8001f0c <task2A2+0x10c>
 8001f58:	e000      	b.n	8001f5c <task2A2+0x15c>
					break;
 8001f5a:	bf00      	nop
			}

			moving = 0;
 8001f5c:	4b5c      	ldr	r3, [pc, #368]	; (80020d0 <task2A2+0x2d0>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(52.0, 1); // 50.0 for indoors
 8001f62:	2001      	movs	r0, #1
 8001f64:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80020e8 <task2A2+0x2e8>
 8001f68:	f002 fb6a 	bl	8004640 <moveGyroPIDOld>
			moving = 0;
 8001f6c:	4b58      	ldr	r3, [pc, #352]	; (80020d0 <task2A2+0x2d0>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = RIGHT;
 8001f72:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <task2A2+0x2c0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	22fa      	movs	r2, #250	; 0xfa
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001f7a:	4b50      	ldr	r3, [pc, #320]	; (80020bc <task2A2+0x2bc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f82:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001f84:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <task2A2+0x2bc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f8c:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8001f8e:	2064      	movs	r0, #100	; 0x64
 8001f90:	f7ff fc6e 	bl	8001870 <delay>
			moving = 1;
 8001f94:	4b4e      	ldr	r3, [pc, #312]	; (80020d0 <task2A2+0x2d0>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001f9a:	e021      	b.n	8001fe0 <task2A2+0x1e0>
				if ((int) totalAngle <= -100) //MAYBE 105 for indoors, 100 for outdoors?
 8001f9c:	4b4f      	ldr	r3, [pc, #316]	; (80020dc <task2A2+0x2dc>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fdd7 	bl	8000b58 <__aeabi_d2iz>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001fb0:	db1b      	blt.n	8001fea <task2A2+0x1ea>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	; (80020dc <task2A2+0x2dc>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7fe fdcc 	bl	8000b58 <__aeabi_d2iz>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f107 0308 	add.w	r3, r7, #8
 8001fc6:	4946      	ldr	r1, [pc, #280]	; (80020e0 <task2A2+0x2e0>)
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f00e fe7f 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2114      	movs	r1, #20
 8001fd6:	200a      	movs	r0, #10
 8001fd8:	f004 fb0a 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001fdc:	f004 f994 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 8001fe0:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <task2A2+0x2d0>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1d9      	bne.n	8001f9c <task2A2+0x19c>
 8001fe8:	e000      	b.n	8001fec <task2A2+0x1ec>
					break;
 8001fea:	bf00      	nop
			}
			actualAngle = 0;
 8001fec:	493a      	ldr	r1, [pc, #232]	; (80020d8 <task2A2+0x2d8>)
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	e9c1 2300 	strd	r2, r3, [r1]
			moving = 0;
 8001ffa:	4b35      	ldr	r3, [pc, #212]	; (80020d0 <task2A2+0x2d0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 8002000:	f001 fafa 	bl	80035f8 <moveUltraEndLeft>
 8002004:	e2b9      	b.n	800257a <task2A2+0x77a>

		} else if (data == 'r') {
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b72      	cmp	r3, #114	; 0x72
 800200a:	f040 82b6 	bne.w	800257a <task2A2+0x77a>
			htim1.Instance->CCR4 = RIGHT;
 800200e:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <task2A2+0x2c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	22fa      	movs	r2, #250	; 0xfa
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002016:	4b29      	ldr	r3, [pc, #164]	; (80020bc <task2A2+0x2bc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800201e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <task2A2+0x2bc>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002028:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 800202a:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <task2A2+0x2d0>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8002030:	e021      	b.n	8002076 <task2A2+0x276>
				if ((int) totalAngle <= -1 * 40) // was 55. was 48. was 43.
 8002032:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <task2A2+0x2dc>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f7fe fd8c 	bl	8000b58 <__aeabi_d2iz>
 8002040:	4603      	mov	r3, r0
 8002042:	f113 0f27 	cmn.w	r3, #39	; 0x27
 8002046:	db1b      	blt.n	8002080 <task2A2+0x280>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <task2A2+0x2dc>)
 800204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	f7fe fd81 	bl	8000b58 <__aeabi_d2iz>
 8002056:	4602      	mov	r2, r0
 8002058:	f107 0308 	add.w	r3, r7, #8
 800205c:	4920      	ldr	r1, [pc, #128]	; (80020e0 <task2A2+0x2e0>)
 800205e:	4618      	mov	r0, r3
 8002060:	f00e fe34 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8002064:	f107 0308 	add.w	r3, r7, #8
 8002068:	461a      	mov	r2, r3
 800206a:	2114      	movs	r1, #20
 800206c:	200a      	movs	r0, #10
 800206e:	f004 fabf 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002072:	f004 f949 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <task2A2+0x2d0>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1d9      	bne.n	8002032 <task2A2+0x232>
 800207e:	e000      	b.n	8002082 <task2A2+0x282>
					break;
 8002080:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <task2A2+0x2bc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2200      	movs	r2, #0
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <task2A2+0x2bc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2200      	movs	r2, #0
 8002090:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(45.0, 1);
 8002092:	2001      	movs	r0, #1
 8002094:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80020ec <task2A2+0x2ec>
 8002098:	f001 fec2 	bl	8003e20 <moveGyroPID>
			htim1.Instance->CCR4 = 110;
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <task2A2+0x2c0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	226e      	movs	r2, #110	; 0x6e
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <task2A2+0x2bc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ac:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 80020ae:	4b03      	ldr	r3, [pc, #12]	; (80020bc <task2A2+0x2bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80020b6:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving) {
 80020b8:	e03b      	b.n	8002132 <task2A2+0x332>
 80020ba:	bf00      	nop
 80020bc:	20000378 	.word	0x20000378
 80020c0:	20000258 	.word	0x20000258
 80020c4:	40020000 	.word	0x40020000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40020800 	.word	0x40020800
 80020d0:	20000414 	.word	0x20000414
 80020d4:	20000416 	.word	0x20000416
 80020d8:	20000420 	.word	0x20000420
 80020dc:	20000418 	.word	0x20000418
 80020e0:	080148e8 	.word	0x080148e8
 80020e4:	42aa0000 	.word	0x42aa0000
 80020e8:	42500000 	.word	0x42500000
 80020ec:	42340000 	.word	0x42340000
				if ((int) actualAngle >= 85) {
 80020f0:	4bae      	ldr	r3, [pc, #696]	; (80023ac <task2A2+0x5ac>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f7fe fd2d 	bl	8000b58 <__aeabi_d2iz>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b54      	cmp	r3, #84	; 0x54
 8002102:	dc1b      	bgt.n	800213c <task2A2+0x33c>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002104:	4baa      	ldr	r3, [pc, #680]	; (80023b0 <task2A2+0x5b0>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f7fe fd23 	bl	8000b58 <__aeabi_d2iz>
 8002112:	4602      	mov	r2, r0
 8002114:	f107 0308 	add.w	r3, r7, #8
 8002118:	49a6      	ldr	r1, [pc, #664]	; (80023b4 <task2A2+0x5b4>)
 800211a:	4618      	mov	r0, r3
 800211c:	f00e fdd6 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	461a      	mov	r2, r3
 8002126:	2114      	movs	r1, #20
 8002128:	200a      	movs	r0, #10
 800212a:	f004 fa61 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 800212e:	f004 f8eb 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 8002132:	4ba1      	ldr	r3, [pc, #644]	; (80023b8 <task2A2+0x5b8>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1da      	bne.n	80020f0 <task2A2+0x2f0>
 800213a:	e000      	b.n	800213e <task2A2+0x33e>
					break;
 800213c:	bf00      	nop
			}
			moving = 0;
 800213e:	4b9e      	ldr	r3, [pc, #632]	; (80023b8 <task2A2+0x5b8>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(50.0, 1); // prev 23
 8002144:	2001      	movs	r0, #1
 8002146:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80023bc <task2A2+0x5bc>
 800214a:	f002 fa79 	bl	8004640 <moveGyroPIDOld>
			moving = 0;
 800214e:	4b9a      	ldr	r3, [pc, #616]	; (80023b8 <task2A2+0x5b8>)
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = 115;
 8002154:	4b9a      	ldr	r3, [pc, #616]	; (80023c0 <task2A2+0x5c0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2273      	movs	r2, #115	; 0x73
 800215a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 800215c:	4b99      	ldr	r3, [pc, #612]	; (80023c4 <task2A2+0x5c4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002164:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8002166:	4b97      	ldr	r3, [pc, #604]	; (80023c4 <task2A2+0x5c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800216e:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8002170:	2064      	movs	r0, #100	; 0x64
 8002172:	f7ff fb7d 	bl	8001870 <delay>
			moving = 1;
 8002176:	4b90      	ldr	r3, [pc, #576]	; (80023b8 <task2A2+0x5b8>)
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
			while (moving) {
 800217c:	e020      	b.n	80021c0 <task2A2+0x3c0>
				if ((int) totalAngle >= 93) // 93 is too big for outdoors. changing to 88
 800217e:	4b8c      	ldr	r3, [pc, #560]	; (80023b0 <task2A2+0x5b0>)
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f7fe fce6 	bl	8000b58 <__aeabi_d2iz>
 800218c:	4603      	mov	r3, r0
 800218e:	2b5c      	cmp	r3, #92	; 0x5c
 8002190:	dc1b      	bgt.n	80021ca <task2A2+0x3ca>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002192:	4b87      	ldr	r3, [pc, #540]	; (80023b0 <task2A2+0x5b0>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	f7fe fcdc 	bl	8000b58 <__aeabi_d2iz>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f107 0308 	add.w	r3, r7, #8
 80021a6:	4983      	ldr	r1, [pc, #524]	; (80023b4 <task2A2+0x5b4>)
 80021a8:	4618      	mov	r0, r3
 80021aa:	f00e fd8f 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	461a      	mov	r2, r3
 80021b4:	2114      	movs	r1, #20
 80021b6:	200a      	movs	r0, #10
 80021b8:	f004 fa1a 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 80021bc:	f004 f8a4 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 80021c0:	4b7d      	ldr	r3, [pc, #500]	; (80023b8 <task2A2+0x5b8>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1da      	bne.n	800217e <task2A2+0x37e>
 80021c8:	e000      	b.n	80021cc <task2A2+0x3cc>
					break;
 80021ca:	bf00      	nop
			}
			actualAngle = 0;
 80021cc:	4977      	ldr	r1, [pc, #476]	; (80023ac <task2A2+0x5ac>)
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 80021da:	f000 fffd 	bl	80031d8 <moveUltraEnd>
 80021de:	e1cc      	b.n	800257a <task2A2+0x77a>
		}
	} else {
		// meaning continueMoving is 0, indicating that the car
		// stopped because ultrasonic distance hit before target angle hit
		//if picture detected is left Tln
		if (data == 'l') {
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b6c      	cmp	r3, #108	; 0x6c
 80021e4:	f040 80f2 	bne.w	80023cc <task2A2+0x5cc>
			htim1.Instance->CCR4 = 105;
 80021e8:	4b75      	ldr	r3, [pc, #468]	; (80023c0 <task2A2+0x5c0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2269      	movs	r2, #105	; 0x69
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 80021f0:	4b74      	ldr	r3, [pc, #464]	; (80023c4 <task2A2+0x5c4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021f8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 80021fa:	4b72      	ldr	r3, [pc, #456]	; (80023c4 <task2A2+0x5c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002202:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 0;
 8002204:	4b6c      	ldr	r3, [pc, #432]	; (80023b8 <task2A2+0x5b8>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
			osDelay(1);
 800220a:	2001      	movs	r0, #1
 800220c:	f00b f97f 	bl	800d50e <osDelay>
			moving = 1;
 8002210:	4b69      	ldr	r3, [pc, #420]	; (80023b8 <task2A2+0x5b8>)
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8002216:	e020      	b.n	800225a <task2A2+0x45a>
				if ((int) actualAngle >= 55) {
 8002218:	4b64      	ldr	r3, [pc, #400]	; (80023ac <task2A2+0x5ac>)
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	f7fe fc99 	bl	8000b58 <__aeabi_d2iz>
 8002226:	4603      	mov	r3, r0
 8002228:	2b36      	cmp	r3, #54	; 0x36
 800222a:	dc1b      	bgt.n	8002264 <task2A2+0x464>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 800222c:	4b60      	ldr	r3, [pc, #384]	; (80023b0 <task2A2+0x5b0>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f7fe fc8f 	bl	8000b58 <__aeabi_d2iz>
 800223a:	4602      	mov	r2, r0
 800223c:	f107 0308 	add.w	r3, r7, #8
 8002240:	495c      	ldr	r1, [pc, #368]	; (80023b4 <task2A2+0x5b4>)
 8002242:	4618      	mov	r0, r3
 8002244:	f00e fd42 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8002248:	f107 0308 	add.w	r3, r7, #8
 800224c:	461a      	mov	r2, r3
 800224e:	2114      	movs	r1, #20
 8002250:	200a      	movs	r0, #10
 8002252:	f004 f9cd 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002256:	f004 f857 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 800225a:	4b57      	ldr	r3, [pc, #348]	; (80023b8 <task2A2+0x5b8>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1da      	bne.n	8002218 <task2A2+0x418>
 8002262:	e000      	b.n	8002266 <task2A2+0x466>
					break;
 8002264:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002266:	4b57      	ldr	r3, [pc, #348]	; (80023c4 <task2A2+0x5c4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2200      	movs	r2, #0
 800226c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800226e:	4b55      	ldr	r3, [pc, #340]	; (80023c4 <task2A2+0x5c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2200      	movs	r2, #0
 8002274:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 0;
 8002276:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <task2A2+0x5b8>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(60, 1);
 800227c:	2001      	movs	r0, #1
 800227e:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80023c8 <task2A2+0x5c8>
 8002282:	f002 f9dd 	bl	8004640 <moveGyroPIDOld>
//			moveGyroPID(85,1);
			htim1.Instance->CCR4 = RIGHT;
 8002286:	4b4e      	ldr	r3, [pc, #312]	; (80023c0 <task2A2+0x5c0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	22fa      	movs	r2, #250	; 0xfa
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 800228e:	4b4d      	ldr	r3, [pc, #308]	; (80023c4 <task2A2+0x5c4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002296:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002298:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <task2A2+0x5c4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022a0:	63da      	str	r2, [r3, #60]	; 0x3c

			while (moving) {
 80022a2:	e021      	b.n	80022e8 <task2A2+0x4e8>
				if ((int) actualAngle <= -85) {
 80022a4:	4b41      	ldr	r3, [pc, #260]	; (80023ac <task2A2+0x5ac>)
 80022a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7fe fc53 	bl	8000b58 <__aeabi_d2iz>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80022b8:	db1b      	blt.n	80022f2 <task2A2+0x4f2>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <task2A2+0x5b0>)
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f7fe fc48 	bl	8000b58 <__aeabi_d2iz>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f107 0308 	add.w	r3, r7, #8
 80022ce:	4939      	ldr	r1, [pc, #228]	; (80023b4 <task2A2+0x5b4>)
 80022d0:	4618      	mov	r0, r3
 80022d2:	f00e fcfb 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	461a      	mov	r2, r3
 80022dc:	2114      	movs	r1, #20
 80022de:	200a      	movs	r0, #10
 80022e0:	f004 f986 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 80022e4:	f004 f810 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 80022e8:	4b33      	ldr	r3, [pc, #204]	; (80023b8 <task2A2+0x5b8>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1d9      	bne.n	80022a4 <task2A2+0x4a4>
 80022f0:	e000      	b.n	80022f4 <task2A2+0x4f4>
					break;
 80022f2:	bf00      	nop
			}

			moving = 0;
 80022f4:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <task2A2+0x5b8>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(50.0, 1); // was 60
 80022fa:	2001      	movs	r0, #1
 80022fc:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80023bc <task2A2+0x5bc>
 8002300:	f002 f99e 	bl	8004640 <moveGyroPIDOld>
			moving = 0;
 8002304:	4b2c      	ldr	r3, [pc, #176]	; (80023b8 <task2A2+0x5b8>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = RIGHT;
 800230a:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <task2A2+0x5c0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	22fa      	movs	r2, #250	; 0xfa
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002312:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <task2A2+0x5c4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800231a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 800231c:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <task2A2+0x5c4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002324:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8002326:	2064      	movs	r0, #100	; 0x64
 8002328:	f7ff faa2 	bl	8001870 <delay>
			moving = 0;
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <task2A2+0x5b8>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
			osDelay(1);
 8002332:	2001      	movs	r0, #1
 8002334:	f00b f8eb 	bl	800d50e <osDelay>
			moving = 1;
 8002338:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <task2A2+0x5b8>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
			while (moving) {
 800233e:	e021      	b.n	8002384 <task2A2+0x584>
				if ((int) totalAngle <= -102) //MAYBE 105 for indoors, 100 for outdoors?
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <task2A2+0x5b0>)
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f7fe fc05 	bl	8000b58 <__aeabi_d2iz>
 800234e:	4603      	mov	r3, r0
 8002350:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8002354:	db1b      	blt.n	800238e <task2A2+0x58e>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <task2A2+0x5b0>)
 8002358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f7fe fbfa 	bl	8000b58 <__aeabi_d2iz>
 8002364:	4602      	mov	r2, r0
 8002366:	f107 0308 	add.w	r3, r7, #8
 800236a:	4912      	ldr	r1, [pc, #72]	; (80023b4 <task2A2+0x5b4>)
 800236c:	4618      	mov	r0, r3
 800236e:	f00e fcad 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8002372:	f107 0308 	add.w	r3, r7, #8
 8002376:	461a      	mov	r2, r3
 8002378:	2114      	movs	r1, #20
 800237a:	200a      	movs	r0, #10
 800237c:	f004 f938 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002380:	f003 ffc2 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <task2A2+0x5b8>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1d9      	bne.n	8002340 <task2A2+0x540>
 800238c:	e000      	b.n	8002390 <task2A2+0x590>
					break;
 800238e:	bf00      	nop
			}
			actualAngle = 0;
 8002390:	4906      	ldr	r1, [pc, #24]	; (80023ac <task2A2+0x5ac>)
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	e9c1 2300 	strd	r2, r3, [r1]
			moving = 0;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <task2A2+0x5b8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 80023a4:	f001 f928 	bl	80035f8 <moveUltraEndLeft>
 80023a8:	e0e7      	b.n	800257a <task2A2+0x77a>
 80023aa:	bf00      	nop
 80023ac:	20000420 	.word	0x20000420
 80023b0:	20000418 	.word	0x20000418
 80023b4:	080148e8 	.word	0x080148e8
 80023b8:	20000414 	.word	0x20000414
 80023bc:	42480000 	.word	0x42480000
 80023c0:	20000258 	.word	0x20000258
 80023c4:	20000378 	.word	0x20000378
 80023c8:	42700000 	.word	0x42700000

		} else if (data == 'r') {
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b72      	cmp	r3, #114	; 0x72
 80023d0:	f040 80d3 	bne.w	800257a <task2A2+0x77a>
			htim1.Instance->CCR4 = RIGHT;
 80023d4:	4b7b      	ldr	r3, [pc, #492]	; (80025c4 <task2A2+0x7c4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	22fa      	movs	r2, #250	; 0xfa
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 80023dc:	4b7a      	ldr	r3, [pc, #488]	; (80025c8 <task2A2+0x7c8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80023e4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 80023e6:	4b78      	ldr	r3, [pc, #480]	; (80025c8 <task2A2+0x7c8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023ee:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 80023f0:	4b76      	ldr	r3, [pc, #472]	; (80025cc <task2A2+0x7cc>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
			while (moving) {
 80023f6:	e021      	b.n	800243c <task2A2+0x63c>
				if ((int) totalAngle <= -1 * 22) {
 80023f8:	4b75      	ldr	r3, [pc, #468]	; (80025d0 <task2A2+0x7d0>)
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	f7fe fba9 	bl	8000b58 <__aeabi_d2iz>
 8002406:	4603      	mov	r3, r0
 8002408:	f113 0f15 	cmn.w	r3, #21
 800240c:	db1b      	blt.n	8002446 <task2A2+0x646>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 800240e:	4b70      	ldr	r3, [pc, #448]	; (80025d0 <task2A2+0x7d0>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	f7fe fb9e 	bl	8000b58 <__aeabi_d2iz>
 800241c:	4602      	mov	r2, r0
 800241e:	f107 0308 	add.w	r3, r7, #8
 8002422:	496c      	ldr	r1, [pc, #432]	; (80025d4 <task2A2+0x7d4>)
 8002424:	4618      	mov	r0, r3
 8002426:	f00e fc51 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 800242a:	f107 0308 	add.w	r3, r7, #8
 800242e:	461a      	mov	r2, r3
 8002430:	2114      	movs	r1, #20
 8002432:	200a      	movs	r0, #10
 8002434:	f004 f8dc 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002438:	f003 ff66 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 800243c:	4b63      	ldr	r3, [pc, #396]	; (80025cc <task2A2+0x7cc>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1d9      	bne.n	80023f8 <task2A2+0x5f8>
 8002444:	e000      	b.n	8002448 <task2A2+0x648>
					break;
 8002446:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002448:	4b5f      	ldr	r3, [pc, #380]	; (80025c8 <task2A2+0x7c8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2200      	movs	r2, #0
 800244e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002450:	4b5d      	ldr	r3, [pc, #372]	; (80025c8 <task2A2+0x7c8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2200      	movs	r2, #0
 8002456:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(75.0, 1);
 8002458:	2001      	movs	r0, #1
 800245a:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 80025d8 <task2A2+0x7d8>
 800245e:	f001 fcdf 	bl	8003e20 <moveGyroPID>
			htim1.Instance->CCR4 = 110;
 8002462:	4b58      	ldr	r3, [pc, #352]	; (80025c4 <task2A2+0x7c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	226e      	movs	r2, #110	; 0x6e
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 800246a:	4b57      	ldr	r3, [pc, #348]	; (80025c8 <task2A2+0x7c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002472:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 8002474:	4b54      	ldr	r3, [pc, #336]	; (80025c8 <task2A2+0x7c8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800247c:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving) {
 800247e:	e020      	b.n	80024c2 <task2A2+0x6c2>
				if ((int) actualAngle >= 85) {
 8002480:	4b56      	ldr	r3, [pc, #344]	; (80025dc <task2A2+0x7dc>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	f7fe fb65 	bl	8000b58 <__aeabi_d2iz>
 800248e:	4603      	mov	r3, r0
 8002490:	2b54      	cmp	r3, #84	; 0x54
 8002492:	dc1b      	bgt.n	80024cc <task2A2+0x6cc>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002494:	4b4e      	ldr	r3, [pc, #312]	; (80025d0 <task2A2+0x7d0>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	f7fe fb5b 	bl	8000b58 <__aeabi_d2iz>
 80024a2:	4602      	mov	r2, r0
 80024a4:	f107 0308 	add.w	r3, r7, #8
 80024a8:	494a      	ldr	r1, [pc, #296]	; (80025d4 <task2A2+0x7d4>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00e fc0e 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 80024b0:	f107 0308 	add.w	r3, r7, #8
 80024b4:	461a      	mov	r2, r3
 80024b6:	2114      	movs	r1, #20
 80024b8:	200a      	movs	r0, #10
 80024ba:	f004 f899 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 80024be:	f003 ff23 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 80024c2:	4b42      	ldr	r3, [pc, #264]	; (80025cc <task2A2+0x7cc>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1da      	bne.n	8002480 <task2A2+0x680>
 80024ca:	e000      	b.n	80024ce <task2A2+0x6ce>
					break;
 80024cc:	bf00      	nop
			}
			moving = 0;
 80024ce:	4b3f      	ldr	r3, [pc, #252]	; (80025cc <task2A2+0x7cc>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(45.0, 1); // prev 23
 80024d4:	2001      	movs	r0, #1
 80024d6:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80025e0 <task2A2+0x7e0>
 80024da:	f002 f8b1 	bl	8004640 <moveGyroPIDOld>
			moving = 0;
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <task2A2+0x7cc>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = 115;
 80024e4:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <task2A2+0x7c4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2273      	movs	r2, #115	; 0x73
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 80024ec:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <task2A2+0x7c8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 80024f6:	4b34      	ldr	r3, [pc, #208]	; (80025c8 <task2A2+0x7c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80024fe:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8002500:	2064      	movs	r0, #100	; 0x64
 8002502:	f7ff f9b5 	bl	8001870 <delay>
			moving = 0;
 8002506:	4b31      	ldr	r3, [pc, #196]	; (80025cc <task2A2+0x7cc>)
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
			osDelay(1);
 800250c:	2001      	movs	r0, #1
 800250e:	f00a fffe 	bl	800d50e <osDelay>
			moving = 1;
 8002512:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <task2A2+0x7cc>)
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8002518:	e020      	b.n	800255c <task2A2+0x75c>
				if ((int) totalAngle >= 105) {
 800251a:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <task2A2+0x7d0>)
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	f7fe fb18 	bl	8000b58 <__aeabi_d2iz>
 8002528:	4603      	mov	r3, r0
 800252a:	2b68      	cmp	r3, #104	; 0x68
 800252c:	dc1b      	bgt.n	8002566 <task2A2+0x766>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 800252e:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <task2A2+0x7d0>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	f7fe fb0e 	bl	8000b58 <__aeabi_d2iz>
 800253c:	4602      	mov	r2, r0
 800253e:	f107 0308 	add.w	r3, r7, #8
 8002542:	4924      	ldr	r1, [pc, #144]	; (80025d4 <task2A2+0x7d4>)
 8002544:	4618      	mov	r0, r3
 8002546:	f00e fbc1 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 800254a:	f107 0308 	add.w	r3, r7, #8
 800254e:	461a      	mov	r2, r3
 8002550:	2114      	movs	r1, #20
 8002552:	200a      	movs	r0, #10
 8002554:	f004 f84c 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002558:	f003 fed6 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <task2A2+0x7cc>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1da      	bne.n	800251a <task2A2+0x71a>
 8002564:	e000      	b.n	8002568 <task2A2+0x768>
					break;
 8002566:	bf00      	nop
			}
			actualAngle = 0;
 8002568:	491c      	ldr	r1, [pc, #112]	; (80025dc <task2A2+0x7dc>)
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 8002576:	f000 fe2f 	bl	80031d8 <moveUltraEnd>
		}
	}

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <task2A2+0x7c8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2200      	movs	r2, #0
 8002580:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <task2A2+0x7c8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance->CCR4 = STRAIGHT;
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <task2A2+0x7c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2295      	movs	r2, #149	; 0x95
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002592:	2201      	movs	r2, #1
 8002594:	2108      	movs	r1, #8
 8002596:	4813      	ldr	r0, [pc, #76]	; (80025e4 <task2A2+0x7e4>)
 8002598:	f005 f950 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800259c:	2200      	movs	r2, #0
 800259e:	2104      	movs	r1, #4
 80025a0:	4810      	ldr	r0, [pc, #64]	; (80025e4 <task2A2+0x7e4>)
 80025a2:	f005 f94b 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80025a6:	2201      	movs	r2, #1
 80025a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025ac:	480e      	ldr	r0, [pc, #56]	; (80025e8 <task2A2+0x7e8>)
 80025ae:	f005 f945 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2120      	movs	r1, #32
 80025b6:	480d      	ldr	r0, [pc, #52]	; (80025ec <task2A2+0x7ec>)
 80025b8:	f005 f940 	bl	800783c <HAL_GPIO_WritePin>
}
 80025bc:	bf00      	nop
 80025be:	3780      	adds	r7, #128	; 0x80
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000258 	.word	0x20000258
 80025c8:	20000378 	.word	0x20000378
 80025cc:	20000414 	.word	0x20000414
 80025d0:	20000418 	.word	0x20000418
 80025d4:	080148e8 	.word	0x080148e8
 80025d8:	42960000 	.word	0x42960000
 80025dc:	20000420 	.word	0x20000420
 80025e0:	42340000 	.word	0x42340000
 80025e4:	40020000 	.word	0x40020000
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40020800 	.word	0x40020800

080025f0 <task2A2L>:

// 2nd obstacle after turning left
void task2A2L(uint32_t data) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b0a0      	sub	sp, #128	; 0x80
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	uint32_t offset_show[30];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80025f8:	2100      	movs	r1, #0
 80025fa:	48ac      	ldr	r0, [pc, #688]	; (80028ac <task2A2L+0x2bc>)
 80025fc:	f008 f9d4 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002600:	2108      	movs	r1, #8
 8002602:	48aa      	ldr	r0, [pc, #680]	; (80028ac <task2A2L+0x2bc>)
 8002604:	f008 f9d0 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002608:	210c      	movs	r1, #12
 800260a:	48a9      	ldr	r0, [pc, #676]	; (80028b0 <task2A2L+0x2c0>)
 800260c:	f008 f9cc 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002610:	2201      	movs	r2, #1
 8002612:	2108      	movs	r1, #8
 8002614:	48a7      	ldr	r0, [pc, #668]	; (80028b4 <task2A2L+0x2c4>)
 8002616:	f005 f911 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800261a:	2200      	movs	r2, #0
 800261c:	2104      	movs	r1, #4
 800261e:	48a5      	ldr	r0, [pc, #660]	; (80028b4 <task2A2L+0x2c4>)
 8002620:	f005 f90c 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8002624:	2201      	movs	r2, #1
 8002626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800262a:	48a3      	ldr	r0, [pc, #652]	; (80028b8 <task2A2L+0x2c8>)
 800262c:	f005 f906 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8002630:	2200      	movs	r2, #0
 8002632:	2120      	movs	r1, #32
 8002634:	48a1      	ldr	r0, [pc, #644]	; (80028bc <task2A2L+0x2cc>)
 8002636:	f005 f901 	bl	800783c <HAL_GPIO_WritePin>
	moving = 0;
 800263a:	4ba1      	ldr	r3, [pc, #644]	; (80028c0 <task2A2L+0x2d0>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]

	if (continueMoving) {
 8002640:	4ba0      	ldr	r3, [pc, #640]	; (80028c4 <task2A2L+0x2d4>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 81c3 	beq.w	80029d0 <task2A2L+0x3e0>
		//	uint8_t continueMoving;
		//if picture detected is left Yln
		if (data == 'l') {
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b6c      	cmp	r3, #108	; 0x6c
 800264e:	f040 80d2 	bne.w	80027f6 <task2A2L+0x206>
			htim1.Instance->CCR4 = 117;
 8002652:	4b97      	ldr	r3, [pc, #604]	; (80028b0 <task2A2L+0x2c0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2275      	movs	r2, #117	; 0x75
 8002658:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 800265a:	4b94      	ldr	r3, [pc, #592]	; (80028ac <task2A2L+0x2bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002662:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 8002664:	4b91      	ldr	r3, [pc, #580]	; (80028ac <task2A2L+0x2bc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800266c:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 800266e:	4b94      	ldr	r3, [pc, #592]	; (80028c0 <task2A2L+0x2d0>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8002674:	e020      	b.n	80026b8 <task2A2L+0xc8>
				if ((int) totalAngle >= 60) {
 8002676:	4b94      	ldr	r3, [pc, #592]	; (80028c8 <task2A2L+0x2d8>)
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	f7fe fa6a 	bl	8000b58 <__aeabi_d2iz>
 8002684:	4603      	mov	r3, r0
 8002686:	2b3b      	cmp	r3, #59	; 0x3b
 8002688:	dc1b      	bgt.n	80026c2 <task2A2L+0xd2>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 800268a:	4b8f      	ldr	r3, [pc, #572]	; (80028c8 <task2A2L+0x2d8>)
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	f7fe fa60 	bl	8000b58 <__aeabi_d2iz>
 8002698:	4602      	mov	r2, r0
 800269a:	f107 0308 	add.w	r3, r7, #8
 800269e:	498b      	ldr	r1, [pc, #556]	; (80028cc <task2A2L+0x2dc>)
 80026a0:	4618      	mov	r0, r3
 80026a2:	f00e fb13 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 80026a6:	f107 0308 	add.w	r3, r7, #8
 80026aa:	461a      	mov	r2, r3
 80026ac:	2114      	movs	r1, #20
 80026ae:	200a      	movs	r0, #10
 80026b0:	f003 ff9e 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 80026b4:	f003 fe28 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 80026b8:	4b81      	ldr	r3, [pc, #516]	; (80028c0 <task2A2L+0x2d0>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1da      	bne.n	8002676 <task2A2L+0x86>
 80026c0:	e000      	b.n	80026c4 <task2A2L+0xd4>
					break;
 80026c2:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80026c4:	4b79      	ldr	r3, [pc, #484]	; (80028ac <task2A2L+0x2bc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2200      	movs	r2, #0
 80026ca:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80026cc:	4b77      	ldr	r3, [pc, #476]	; (80028ac <task2A2L+0x2bc>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(60, 1);
 80026d4:	2001      	movs	r0, #1
 80026d6:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80028d0 <task2A2L+0x2e0>
 80026da:	f001 fba1 	bl	8003e20 <moveGyroPID>
			htim1.Instance->CCR4 = RIGHT;
 80026de:	4b74      	ldr	r3, [pc, #464]	; (80028b0 <task2A2L+0x2c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	22fa      	movs	r2, #250	; 0xfa
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 80026e6:	4b71      	ldr	r3, [pc, #452]	; (80028ac <task2A2L+0x2bc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80026ee:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 80026f0:	4b6e      	ldr	r3, [pc, #440]	; (80028ac <task2A2L+0x2bc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026f8:	63da      	str	r2, [r3, #60]	; 0x3c
			// 		continueMoving = 0;

			while (moving) {
 80026fa:	e021      	b.n	8002740 <task2A2L+0x150>
				if ((int) totalAngle <= -85) {
 80026fc:	4b72      	ldr	r3, [pc, #456]	; (80028c8 <task2A2L+0x2d8>)
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f7fe fa27 	bl	8000b58 <__aeabi_d2iz>
 800270a:	4603      	mov	r3, r0
 800270c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002710:	db1b      	blt.n	800274a <task2A2L+0x15a>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002712:	4b6d      	ldr	r3, [pc, #436]	; (80028c8 <task2A2L+0x2d8>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe fa1c 	bl	8000b58 <__aeabi_d2iz>
 8002720:	4602      	mov	r2, r0
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	4969      	ldr	r1, [pc, #420]	; (80028cc <task2A2L+0x2dc>)
 8002728:	4618      	mov	r0, r3
 800272a:	f00e facf 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 800272e:	f107 0308 	add.w	r3, r7, #8
 8002732:	461a      	mov	r2, r3
 8002734:	2114      	movs	r1, #20
 8002736:	200a      	movs	r0, #10
 8002738:	f003 ff5a 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 800273c:	f003 fde4 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 8002740:	4b5f      	ldr	r3, [pc, #380]	; (80028c0 <task2A2L+0x2d0>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1d9      	bne.n	80026fc <task2A2L+0x10c>
 8002748:	e000      	b.n	800274c <task2A2L+0x15c>
					break;
 800274a:	bf00      	nop
			}

			moving = 0;
 800274c:	4b5c      	ldr	r3, [pc, #368]	; (80028c0 <task2A2L+0x2d0>)
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(50.0, 1);
 8002752:	2001      	movs	r0, #1
 8002754:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 80028d4 <task2A2L+0x2e4>
 8002758:	f001 ff72 	bl	8004640 <moveGyroPIDOld>
			moving = 0;
 800275c:	4b58      	ldr	r3, [pc, #352]	; (80028c0 <task2A2L+0x2d0>)
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
			delay(100);
 8002762:	2064      	movs	r0, #100	; 0x64
 8002764:	f7ff f884 	bl	8001870 <delay>
			moving = 1;
 8002768:	4b55      	ldr	r3, [pc, #340]	; (80028c0 <task2A2L+0x2d0>)
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = RIGHT;
 800276e:	4b50      	ldr	r3, [pc, #320]	; (80028b0 <task2A2L+0x2c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	22fa      	movs	r2, #250	; 0xfa
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002776:	4b4d      	ldr	r3, [pc, #308]	; (80028ac <task2A2L+0x2bc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800277e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002780:	4b4a      	ldr	r3, [pc, #296]	; (80028ac <task2A2L+0x2bc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002788:	63da      	str	r2, [r3, #60]	; 0x3c

			while (moving) {
 800278a:	e021      	b.n	80027d0 <task2A2L+0x1e0>
				if ((int) totalAngle <= -90) // was 95. was 90
 800278c:	4b4e      	ldr	r3, [pc, #312]	; (80028c8 <task2A2L+0x2d8>)
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	f7fe f9df 	bl	8000b58 <__aeabi_d2iz>
 800279a:	4603      	mov	r3, r0
 800279c:	f113 0f59 	cmn.w	r3, #89	; 0x59
 80027a0:	db1b      	blt.n	80027da <task2A2L+0x1ea>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <task2A2L+0x2d8>)
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	f7fe f9d4 	bl	8000b58 <__aeabi_d2iz>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	4945      	ldr	r1, [pc, #276]	; (80028cc <task2A2L+0x2dc>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f00e fa87 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 80027be:	f107 0308 	add.w	r3, r7, #8
 80027c2:	461a      	mov	r2, r3
 80027c4:	2114      	movs	r1, #20
 80027c6:	200a      	movs	r0, #10
 80027c8:	f003 ff12 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 80027cc:	f003 fd9c 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 80027d0:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <task2A2L+0x2d0>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1d9      	bne.n	800278c <task2A2L+0x19c>
 80027d8:	e000      	b.n	80027dc <task2A2L+0x1ec>
					break;
 80027da:	bf00      	nop
			}
			actualAngle = 0;
 80027dc:	493e      	ldr	r1, [pc, #248]	; (80028d8 <task2A2L+0x2e8>)
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	e9c1 2300 	strd	r2, r3, [r1]
			moving = 0;
 80027ea:	4b35      	ldr	r3, [pc, #212]	; (80028c0 <task2A2L+0x2d0>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 80027f0:	f000 ff02 	bl	80035f8 <moveUltraEndLeft>
 80027f4:	e2ae      	b.n	8002d54 <task2A2L+0x764>

		} else if (data == 'r') {
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b72      	cmp	r3, #114	; 0x72
 80027fa:	f040 82ab 	bne.w	8002d54 <task2A2L+0x764>
			htim1.Instance->CCR4 = RIGHT;
 80027fe:	4b2c      	ldr	r3, [pc, #176]	; (80028b0 <task2A2L+0x2c0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	22fa      	movs	r2, #250	; 0xfa
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002806:	4b29      	ldr	r3, [pc, #164]	; (80028ac <task2A2L+0x2bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800280e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002810:	4b26      	ldr	r3, [pc, #152]	; (80028ac <task2A2L+0x2bc>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002818:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 800281a:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <task2A2L+0x2d0>)
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8002820:	e021      	b.n	8002866 <task2A2L+0x276>
				if ((int) totalAngle <= -1 * 60) {
 8002822:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <task2A2L+0x2d8>)
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	f7fe f994 	bl	8000b58 <__aeabi_d2iz>
 8002830:	4603      	mov	r3, r0
 8002832:	f113 0f3b 	cmn.w	r3, #59	; 0x3b
 8002836:	db1b      	blt.n	8002870 <task2A2L+0x280>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002838:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <task2A2L+0x2d8>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f7fe f989 	bl	8000b58 <__aeabi_d2iz>
 8002846:	4602      	mov	r2, r0
 8002848:	f107 0308 	add.w	r3, r7, #8
 800284c:	491f      	ldr	r1, [pc, #124]	; (80028cc <task2A2L+0x2dc>)
 800284e:	4618      	mov	r0, r3
 8002850:	f00e fa3c 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8002854:	f107 0308 	add.w	r3, r7, #8
 8002858:	461a      	mov	r2, r3
 800285a:	2114      	movs	r1, #20
 800285c:	200a      	movs	r0, #10
 800285e:	f003 fec7 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002862:	f003 fd51 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <task2A2L+0x2d0>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1d9      	bne.n	8002822 <task2A2L+0x232>
 800286e:	e000      	b.n	8002872 <task2A2L+0x282>
					break;
 8002870:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <task2A2L+0x2bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <task2A2L+0x2bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2200      	movs	r2, #0
 8002880:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(45.0, 1);
 8002882:	2001      	movs	r0, #1
 8002884:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80028dc <task2A2L+0x2ec>
 8002888:	f001 faca 	bl	8003e20 <moveGyroPID>
			htim1.Instance->CCR4 = 110;
 800288c:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <task2A2L+0x2c0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	226e      	movs	r2, #110	; 0x6e
 8002892:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <task2A2L+0x2bc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800289c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 800289e:	4b03      	ldr	r3, [pc, #12]	; (80028ac <task2A2L+0x2bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80028a6:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving) {
 80028a8:	e03b      	b.n	8002922 <task2A2L+0x332>
 80028aa:	bf00      	nop
 80028ac:	20000378 	.word	0x20000378
 80028b0:	20000258 	.word	0x20000258
 80028b4:	40020000 	.word	0x40020000
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40020800 	.word	0x40020800
 80028c0:	20000414 	.word	0x20000414
 80028c4:	20000416 	.word	0x20000416
 80028c8:	20000418 	.word	0x20000418
 80028cc:	080148e8 	.word	0x080148e8
 80028d0:	42700000 	.word	0x42700000
 80028d4:	42480000 	.word	0x42480000
 80028d8:	20000420 	.word	0x20000420
 80028dc:	42340000 	.word	0x42340000
				if ((int) totalAngle >= 85) {
 80028e0:	4ba9      	ldr	r3, [pc, #676]	; (8002b88 <task2A2L+0x598>)
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	f7fe f935 	bl	8000b58 <__aeabi_d2iz>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b54      	cmp	r3, #84	; 0x54
 80028f2:	dc1b      	bgt.n	800292c <task2A2L+0x33c>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 80028f4:	4ba4      	ldr	r3, [pc, #656]	; (8002b88 <task2A2L+0x598>)
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7fe f92b 	bl	8000b58 <__aeabi_d2iz>
 8002902:	4602      	mov	r2, r0
 8002904:	f107 0308 	add.w	r3, r7, #8
 8002908:	49a0      	ldr	r1, [pc, #640]	; (8002b8c <task2A2L+0x59c>)
 800290a:	4618      	mov	r0, r3
 800290c:	f00e f9de 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8002910:	f107 0308 	add.w	r3, r7, #8
 8002914:	461a      	mov	r2, r3
 8002916:	2114      	movs	r1, #20
 8002918:	200a      	movs	r0, #10
 800291a:	f003 fe69 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 800291e:	f003 fcf3 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 8002922:	4b9b      	ldr	r3, [pc, #620]	; (8002b90 <task2A2L+0x5a0>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1da      	bne.n	80028e0 <task2A2L+0x2f0>
 800292a:	e000      	b.n	800292e <task2A2L+0x33e>
					break;
 800292c:	bf00      	nop
			}
			moving = 0;
 800292e:	4b98      	ldr	r3, [pc, #608]	; (8002b90 <task2A2L+0x5a0>)
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(70.0, 1); // prev 23
 8002934:	2001      	movs	r0, #1
 8002936:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8002b94 <task2A2L+0x5a4>
 800293a:	f001 fe81 	bl	8004640 <moveGyroPIDOld>
			moving = 0;
 800293e:	4b94      	ldr	r3, [pc, #592]	; (8002b90 <task2A2L+0x5a0>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = 115;
 8002944:	4b94      	ldr	r3, [pc, #592]	; (8002b98 <task2A2L+0x5a8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2273      	movs	r2, #115	; 0x73
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 800294c:	4b93      	ldr	r3, [pc, #588]	; (8002b9c <task2A2L+0x5ac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002954:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8002956:	4b91      	ldr	r3, [pc, #580]	; (8002b9c <task2A2L+0x5ac>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800295e:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8002960:	2064      	movs	r0, #100	; 0x64
 8002962:	f7fe ff85 	bl	8001870 <delay>
			moving = 1;
 8002966:	4b8a      	ldr	r3, [pc, #552]	; (8002b90 <task2A2L+0x5a0>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
			while (moving) {
 800296c:	e020      	b.n	80029b0 <task2A2L+0x3c0>
				if ((int) totalAngle >= 92) {
 800296e:	4b86      	ldr	r3, [pc, #536]	; (8002b88 <task2A2L+0x598>)
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	f7fe f8ee 	bl	8000b58 <__aeabi_d2iz>
 800297c:	4603      	mov	r3, r0
 800297e:	2b5b      	cmp	r3, #91	; 0x5b
 8002980:	dc1b      	bgt.n	80029ba <task2A2L+0x3ca>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002982:	4b81      	ldr	r3, [pc, #516]	; (8002b88 <task2A2L+0x598>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f8e4 	bl	8000b58 <__aeabi_d2iz>
 8002990:	4602      	mov	r2, r0
 8002992:	f107 0308 	add.w	r3, r7, #8
 8002996:	497d      	ldr	r1, [pc, #500]	; (8002b8c <task2A2L+0x59c>)
 8002998:	4618      	mov	r0, r3
 800299a:	f00e f997 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 800299e:	f107 0308 	add.w	r3, r7, #8
 80029a2:	461a      	mov	r2, r3
 80029a4:	2114      	movs	r1, #20
 80029a6:	200a      	movs	r0, #10
 80029a8:	f003 fe22 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 80029ac:	f003 fcac 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 80029b0:	4b77      	ldr	r3, [pc, #476]	; (8002b90 <task2A2L+0x5a0>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1da      	bne.n	800296e <task2A2L+0x37e>
 80029b8:	e000      	b.n	80029bc <task2A2L+0x3cc>
					break;
 80029ba:	bf00      	nop
			}
			actualAngle = 0;
 80029bc:	4978      	ldr	r1, [pc, #480]	; (8002ba0 <task2A2L+0x5b0>)
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 80029ca:	f000 fc05 	bl	80031d8 <moveUltraEnd>
 80029ce:	e1c1      	b.n	8002d54 <task2A2L+0x764>
		}
	} else {
		// meaning continueMoving is 0, indicating that the car
		// stopped because ultrasonic distance hit before target angle hit
		//if picture detected is left Yln
		if (data == 'l') {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b6c      	cmp	r3, #108	; 0x6c
 80029d4:	f040 80ea 	bne.w	8002bac <task2A2L+0x5bc>
			htim1.Instance->CCR4 = 115;
 80029d8:	4b6f      	ldr	r3, [pc, #444]	; (8002b98 <task2A2L+0x5a8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2273      	movs	r2, #115	; 0x73
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 80029e0:	4b6e      	ldr	r3, [pc, #440]	; (8002b9c <task2A2L+0x5ac>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 80029ea:	4b6c      	ldr	r3, [pc, #432]	; (8002b9c <task2A2L+0x5ac>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80029f2:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 80029f4:	4b66      	ldr	r3, [pc, #408]	; (8002b90 <task2A2L+0x5a0>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
			while (moving) {
 80029fa:	e020      	b.n	8002a3e <task2A2L+0x44e>
				if ((int) actualAngle >= 40) {
 80029fc:	4b68      	ldr	r3, [pc, #416]	; (8002ba0 <task2A2L+0x5b0>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	f7fe f8a7 	bl	8000b58 <__aeabi_d2iz>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b27      	cmp	r3, #39	; 0x27
 8002a0e:	dc1b      	bgt.n	8002a48 <task2A2L+0x458>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002a10:	4b5d      	ldr	r3, [pc, #372]	; (8002b88 <task2A2L+0x598>)
 8002a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f7fe f89d 	bl	8000b58 <__aeabi_d2iz>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	f107 0308 	add.w	r3, r7, #8
 8002a24:	4959      	ldr	r1, [pc, #356]	; (8002b8c <task2A2L+0x59c>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	f00e f950 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8002a2c:	f107 0308 	add.w	r3, r7, #8
 8002a30:	461a      	mov	r2, r3
 8002a32:	2114      	movs	r1, #20
 8002a34:	200a      	movs	r0, #10
 8002a36:	f003 fddb 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002a3a:	f003 fc65 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 8002a3e:	4b54      	ldr	r3, [pc, #336]	; (8002b90 <task2A2L+0x5a0>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1da      	bne.n	80029fc <task2A2L+0x40c>
 8002a46:	e000      	b.n	8002a4a <task2A2L+0x45a>
					break;
 8002a48:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002a4a:	4b54      	ldr	r3, [pc, #336]	; (8002b9c <task2A2L+0x5ac>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002a52:	4b52      	ldr	r3, [pc, #328]	; (8002b9c <task2A2L+0x5ac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2200      	movs	r2, #0
 8002a58:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(73.0, 1);
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8002ba4 <task2A2L+0x5b4>
 8002a60:	f001 f9de 	bl	8003e20 <moveGyroPID>
			htim1.Instance->CCR4 = RIGHT;
 8002a64:	4b4c      	ldr	r3, [pc, #304]	; (8002b98 <task2A2L+0x5a8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	22fa      	movs	r2, #250	; 0xfa
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002a6c:	4b4b      	ldr	r3, [pc, #300]	; (8002b9c <task2A2L+0x5ac>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002a74:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002a76:	4b49      	ldr	r3, [pc, #292]	; (8002b9c <task2A2L+0x5ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a7e:	63da      	str	r2, [r3, #60]	; 0x3c
			// 		continueMoving = 0;

			while (moving) {
 8002a80:	e021      	b.n	8002ac6 <task2A2L+0x4d6>
				if ((int) actualAngle <= -1 * 90) {
 8002a82:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <task2A2L+0x5b0>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe f864 	bl	8000b58 <__aeabi_d2iz>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8002a96:	db1b      	blt.n	8002ad0 <task2A2L+0x4e0>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002a98:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <task2A2L+0x598>)
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f7fe f859 	bl	8000b58 <__aeabi_d2iz>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	f107 0308 	add.w	r3, r7, #8
 8002aac:	4937      	ldr	r1, [pc, #220]	; (8002b8c <task2A2L+0x59c>)
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f00e f90c 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8002ab4:	f107 0308 	add.w	r3, r7, #8
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2114      	movs	r1, #20
 8002abc:	200a      	movs	r0, #10
 8002abe:	f003 fd97 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002ac2:	f003 fc21 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 8002ac6:	4b32      	ldr	r3, [pc, #200]	; (8002b90 <task2A2L+0x5a0>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1d9      	bne.n	8002a82 <task2A2L+0x492>
 8002ace:	e000      	b.n	8002ad2 <task2A2L+0x4e2>
					break;
 8002ad0:	bf00      	nop
			}

			moving = 0;
 8002ad2:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <task2A2L+0x5a0>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(40.0, 1);
 8002ad8:	2001      	movs	r0, #1
 8002ada:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8002ba8 <task2A2L+0x5b8>
 8002ade:	f001 fdaf 	bl	8004640 <moveGyroPIDOld>
			moving = 0;
 8002ae2:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <task2A2L+0x5a0>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = RIGHT;
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <task2A2L+0x5a8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	22fa      	movs	r2, #250	; 0xfa
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002af0:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <task2A2L+0x5ac>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002af8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002afa:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <task2A2L+0x5ac>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b02:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8002b04:	2064      	movs	r0, #100	; 0x64
 8002b06:	f7fe feb3 	bl	8001870 <delay>
			moving = 0;
 8002b0a:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <task2A2L+0x5a0>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
			osDelay(1);
 8002b10:	2001      	movs	r0, #1
 8002b12:	f00a fcfc 	bl	800d50e <osDelay>
			moving = 1;
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <task2A2L+0x5a0>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8002b1c:	e021      	b.n	8002b62 <task2A2L+0x572>
				if ((int) totalAngle <= -1 * 90) // note: i changed to actualAngle to try, original was totalAngle = -100
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <task2A2L+0x598>)
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f7fe f816 	bl	8000b58 <__aeabi_d2iz>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8002b32:	db1b      	blt.n	8002b6c <task2A2L+0x57c>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <task2A2L+0x598>)
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f7fe f80b 	bl	8000b58 <__aeabi_d2iz>
 8002b42:	4602      	mov	r2, r0
 8002b44:	f107 0308 	add.w	r3, r7, #8
 8002b48:	4910      	ldr	r1, [pc, #64]	; (8002b8c <task2A2L+0x59c>)
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f00e f8be 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8002b50:	f107 0308 	add.w	r3, r7, #8
 8002b54:	461a      	mov	r2, r3
 8002b56:	2114      	movs	r1, #20
 8002b58:	200a      	movs	r0, #10
 8002b5a:	f003 fd49 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002b5e:	f003 fbd3 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <task2A2L+0x5a0>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1d9      	bne.n	8002b1e <task2A2L+0x52e>
 8002b6a:	e000      	b.n	8002b6e <task2A2L+0x57e>
					break;
 8002b6c:	bf00      	nop
			}
			actualAngle = 0;
 8002b6e:	490c      	ldr	r1, [pc, #48]	; (8002ba0 <task2A2L+0x5b0>)
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9c1 2300 	strd	r2, r3, [r1]
			moving = 0;
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <task2A2L+0x5a0>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 8002b82:	f000 fd39 	bl	80035f8 <moveUltraEndLeft>
 8002b86:	e0e5      	b.n	8002d54 <task2A2L+0x764>
 8002b88:	20000418 	.word	0x20000418
 8002b8c:	080148e8 	.word	0x080148e8
 8002b90:	20000414 	.word	0x20000414
 8002b94:	428c0000 	.word	0x428c0000
 8002b98:	20000258 	.word	0x20000258
 8002b9c:	20000378 	.word	0x20000378
 8002ba0:	20000420 	.word	0x20000420
 8002ba4:	42920000 	.word	0x42920000
 8002ba8:	42200000 	.word	0x42200000

		} else if (data == 'r') {
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b72      	cmp	r3, #114	; 0x72
 8002bb0:	f040 80d0 	bne.w	8002d54 <task2A2L+0x764>
			htim1.Instance->CCR4 = RIGHT;
 8002bb4:	4b7a      	ldr	r3, [pc, #488]	; (8002da0 <task2A2L+0x7b0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	22fa      	movs	r2, #250	; 0xfa
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002bbc:	4b79      	ldr	r3, [pc, #484]	; (8002da4 <task2A2L+0x7b4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002bc4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002bc6:	4b77      	ldr	r3, [pc, #476]	; (8002da4 <task2A2L+0x7b4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bce:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 8002bd0:	4b75      	ldr	r3, [pc, #468]	; (8002da8 <task2A2L+0x7b8>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8002bd6:	e021      	b.n	8002c1c <task2A2L+0x62c>
				if ((int) totalAngle <= -1 * 60) // was 65
 8002bd8:	4b74      	ldr	r3, [pc, #464]	; (8002dac <task2A2L+0x7bc>)
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	f7fd ffb9 	bl	8000b58 <__aeabi_d2iz>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f113 0f3b 	cmn.w	r3, #59	; 0x3b
 8002bec:	db1b      	blt.n	8002c26 <task2A2L+0x636>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002bee:	4b6f      	ldr	r3, [pc, #444]	; (8002dac <task2A2L+0x7bc>)
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f7fd ffae 	bl	8000b58 <__aeabi_d2iz>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	f107 0308 	add.w	r3, r7, #8
 8002c02:	496b      	ldr	r1, [pc, #428]	; (8002db0 <task2A2L+0x7c0>)
 8002c04:	4618      	mov	r0, r3
 8002c06:	f00e f861 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8002c0a:	f107 0308 	add.w	r3, r7, #8
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2114      	movs	r1, #20
 8002c12:	200a      	movs	r0, #10
 8002c14:	f003 fcec 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002c18:	f003 fb76 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 8002c1c:	4b62      	ldr	r3, [pc, #392]	; (8002da8 <task2A2L+0x7b8>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1d9      	bne.n	8002bd8 <task2A2L+0x5e8>
 8002c24:	e000      	b.n	8002c28 <task2A2L+0x638>
					break;
 8002c26:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002c28:	4b5e      	ldr	r3, [pc, #376]	; (8002da4 <task2A2L+0x7b4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002c30:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <task2A2L+0x7b4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2200      	movs	r2, #0
 8002c36:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 0;
 8002c38:	4b5b      	ldr	r3, [pc, #364]	; (8002da8 <task2A2L+0x7b8>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(45.0, 1); // was 55
 8002c3e:	2001      	movs	r0, #1
 8002c40:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8002db4 <task2A2L+0x7c4>
 8002c44:	f001 fcfc 	bl	8004640 <moveGyroPIDOld>
			htim1.Instance->CCR4 = 110;
 8002c48:	4b55      	ldr	r3, [pc, #340]	; (8002da0 <task2A2L+0x7b0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	226e      	movs	r2, #110	; 0x6e
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8002c50:	4b54      	ldr	r3, [pc, #336]	; (8002da4 <task2A2L+0x7b4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c58:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8002c5a:	4b52      	ldr	r3, [pc, #328]	; (8002da4 <task2A2L+0x7b4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002c62:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving) {
 8002c64:	e020      	b.n	8002ca8 <task2A2L+0x6b8>
				if ((int) actualAngle >= 83) {
 8002c66:	4b54      	ldr	r3, [pc, #336]	; (8002db8 <task2A2L+0x7c8>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	4619      	mov	r1, r3
 8002c70:	f7fd ff72 	bl	8000b58 <__aeabi_d2iz>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b52      	cmp	r3, #82	; 0x52
 8002c78:	dc1b      	bgt.n	8002cb2 <task2A2L+0x6c2>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002c7a:	4b4c      	ldr	r3, [pc, #304]	; (8002dac <task2A2L+0x7bc>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f7fd ff68 	bl	8000b58 <__aeabi_d2iz>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f107 0308 	add.w	r3, r7, #8
 8002c8e:	4948      	ldr	r1, [pc, #288]	; (8002db0 <task2A2L+0x7c0>)
 8002c90:	4618      	mov	r0, r3
 8002c92:	f00e f81b 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8002c96:	f107 0308 	add.w	r3, r7, #8
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2114      	movs	r1, #20
 8002c9e:	200a      	movs	r0, #10
 8002ca0:	f003 fca6 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002ca4:	f003 fb30 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 8002ca8:	4b3f      	ldr	r3, [pc, #252]	; (8002da8 <task2A2L+0x7b8>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1da      	bne.n	8002c66 <task2A2L+0x676>
 8002cb0:	e000      	b.n	8002cb4 <task2A2L+0x6c4>
					break;
 8002cb2:	bf00      	nop
			}
			moving = 0;
 8002cb4:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <task2A2L+0x7b8>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(60.0, 1); // prev 23
 8002cba:	2001      	movs	r0, #1
 8002cbc:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8002dbc <task2A2L+0x7cc>
 8002cc0:	f001 fcbe 	bl	8004640 <moveGyroPIDOld>
			moving = 0;
 8002cc4:	4b38      	ldr	r3, [pc, #224]	; (8002da8 <task2A2L+0x7b8>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = 115;
 8002cca:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <task2A2L+0x7b0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2273      	movs	r2, #115	; 0x73
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8002cd2:	4b34      	ldr	r3, [pc, #208]	; (8002da4 <task2A2L+0x7b4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8002cdc:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <task2A2L+0x7b4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002ce4:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100); // delay because gyro needs time to reset
 8002ce6:	2064      	movs	r0, #100	; 0x64
 8002ce8:	f7fe fdc2 	bl	8001870 <delay>
			moving = 1;
 8002cec:	4b2e      	ldr	r3, [pc, #184]	; (8002da8 <task2A2L+0x7b8>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8002cf2:	e020      	b.n	8002d36 <task2A2L+0x746>
				if ((int) totalAngle >= 105) {
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <task2A2L+0x7bc>)
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f7fd ff2b 	bl	8000b58 <__aeabi_d2iz>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b68      	cmp	r3, #104	; 0x68
 8002d06:	dc1b      	bgt.n	8002d40 <task2A2L+0x750>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002d08:	4b28      	ldr	r3, [pc, #160]	; (8002dac <task2A2L+0x7bc>)
 8002d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	f7fd ff21 	bl	8000b58 <__aeabi_d2iz>
 8002d16:	4602      	mov	r2, r0
 8002d18:	f107 0308 	add.w	r3, r7, #8
 8002d1c:	4924      	ldr	r1, [pc, #144]	; (8002db0 <task2A2L+0x7c0>)
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f00d ffd4 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8002d24:	f107 0308 	add.w	r3, r7, #8
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2114      	movs	r1, #20
 8002d2c:	200a      	movs	r0, #10
 8002d2e:	f003 fc5f 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002d32:	f003 fae9 	bl	8006308 <OLED_Refresh_Gram>
			while (moving) {
 8002d36:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <task2A2L+0x7b8>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1da      	bne.n	8002cf4 <task2A2L+0x704>
 8002d3e:	e000      	b.n	8002d42 <task2A2L+0x752>
					break;
 8002d40:	bf00      	nop
			}
			actualAngle = 0;
 8002d42:	491d      	ldr	r1, [pc, #116]	; (8002db8 <task2A2L+0x7c8>)
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 8002d50:	f000 fa42 	bl	80031d8 <moveUltraEnd>
		}
	}

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002d54:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <task2A2L+0x7b4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <task2A2L+0x7b4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2200      	movs	r2, #0
 8002d62:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance->CCR4 = STRAIGHT;
 8002d64:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <task2A2L+0x7b0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2295      	movs	r2, #149	; 0x95
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	2108      	movs	r1, #8
 8002d70:	4813      	ldr	r0, [pc, #76]	; (8002dc0 <task2A2L+0x7d0>)
 8002d72:	f004 fd63 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2104      	movs	r1, #4
 8002d7a:	4811      	ldr	r0, [pc, #68]	; (8002dc0 <task2A2L+0x7d0>)
 8002d7c:	f004 fd5e 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8002d80:	2201      	movs	r2, #1
 8002d82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d86:	480f      	ldr	r0, [pc, #60]	; (8002dc4 <task2A2L+0x7d4>)
 8002d88:	f004 fd58 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2120      	movs	r1, #32
 8002d90:	480d      	ldr	r0, [pc, #52]	; (8002dc8 <task2A2L+0x7d8>)
 8002d92:	f004 fd53 	bl	800783c <HAL_GPIO_WritePin>
}
 8002d96:	bf00      	nop
 8002d98:	3780      	adds	r7, #128	; 0x80
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000258 	.word	0x20000258
 8002da4:	20000378 	.word	0x20000378
 8002da8:	20000414 	.word	0x20000414
 8002dac:	20000418 	.word	0x20000418
 8002db0:	080148e8 	.word	0x080148e8
 8002db4:	42340000 	.word	0x42340000
 8002db8:	20000420 	.word	0x20000420
 8002dbc:	42700000 	.word	0x42700000
 8002dc0:	40020000 	.word	0x40020000
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40020800 	.word	0x40020800

08002dcc <moveUltra>:

void moveUltra() {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b0ae      	sub	sp, #184	; 0xb8
 8002dd0:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	488a      	ldr	r0, [pc, #552]	; (8003000 <moveUltra+0x234>)
 8002dd6:	f007 fde7 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002dda:	2108      	movs	r1, #8
 8002ddc:	4888      	ldr	r0, [pc, #544]	; (8003000 <moveUltra+0x234>)
 8002dde:	f007 fde3 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002de2:	210c      	movs	r1, #12
 8002de4:	4887      	ldr	r0, [pc, #540]	; (8003004 <moveUltra+0x238>)
 8002de6:	f007 fddf 	bl	800a9a8 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8002dea:	4b86      	ldr	r3, [pc, #536]	; (8003004 <moveUltra+0x238>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2295      	movs	r2, #149	; 0x95
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 8002df2:	2064      	movs	r0, #100	; 0x64
 8002df4:	f00a fb8b 	bl	800d50e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8002df8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002dfc:	2224      	movs	r2, #36	; 0x24
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f00d f8db 	bl	800ffbc <memset>
 8002e06:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002e0a:	653b      	str	r3, [r7, #80]	; 0x50
 8002e0c:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8002e10:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e12:	f640 3354 	movw	r3, #2900	; 0xb54
 8002e16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e18:	4b7b      	ldr	r3, [pc, #492]	; (8003008 <moveUltra+0x23c>)
 8002e1a:	663b      	str	r3, [r7, #96]	; 0x60
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8002e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e20:	2224      	movs	r2, #36	; 0x24
 8002e22:	2100      	movs	r1, #0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f00d f8c9 	bl	800ffbc <memset>
 8002e2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e30:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
 8002e36:	f640 3354 	movw	r3, #2900	; 0xb54
 8002e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e3c:	4b72      	ldr	r3, [pc, #456]	; (8003008 <moveUltra+0x23c>)
 8002e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8002e40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e44:	4618      	mov	r0, r3
 8002e46:	f003 fc91 	bl	800676c <PIDController_Init>
	PIDController_Init(&pidRight);
 8002e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f003 fc8c 	bl	800676c <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8002e54:	4b6d      	ldr	r3, [pc, #436]	; (800300c <moveUltra+0x240>)
 8002e56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8002e5a:	4b6d      	ldr	r3, [pc, #436]	; (8003010 <moveUltra+0x244>)
 8002e5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 23.56f; // NEED TO MEASURE AND CHANGE
 8002e60:	4b6c      	ldr	r3, [pc, #432]	; (8003014 <moveUltra+0x248>)
 8002e62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8002e66:	213c      	movs	r1, #60	; 0x3c
 8002e68:	486b      	ldr	r0, [pc, #428]	; (8003018 <moveUltra+0x24c>)
 8002e6a:	f008 f883 	bl	800af74 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8002e6e:	213c      	movs	r1, #60	; 0x3c
 8002e70:	486a      	ldr	r0, [pc, #424]	; (800301c <moveUltra+0x250>)
 8002e72:	f008 f87f 	bl	800af74 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8002e76:	4b68      	ldr	r3, [pc, #416]	; (8003018 <moveUltra+0x24c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8002e80:	4b66      	ldr	r3, [pc, #408]	; (800301c <moveUltra+0x250>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8002e8a:	f004 f959 	bl	8007140 <HAL_GetTick>
 8002e8e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 8002e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 3000;
 8002eb6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002eba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 3000;
 8002ebe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002ec2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	2108      	movs	r1, #8
 8002eca:	4855      	ldr	r0, [pc, #340]	; (8003020 <moveUltra+0x254>)
 8002ecc:	f004 fcb6 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2104      	movs	r1, #4
 8002ed4:	4852      	ldr	r0, [pc, #328]	; (8003020 <moveUltra+0x254>)
 8002ed6:	f004 fcb1 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8002eda:	2201      	movs	r2, #1
 8002edc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ee0:	4850      	ldr	r0, [pc, #320]	; (8003024 <moveUltra+0x258>)
 8002ee2:	f004 fcab 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2120      	movs	r1, #32
 8002eea:	484f      	ldr	r0, [pc, #316]	; (8003028 <moveUltra+0x25c>)
 8002eec:	f004 fca6 	bl	800783c <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002ef0:	4b43      	ldr	r3, [pc, #268]	; (8003000 <moveUltra+0x234>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8002efa:	4b41      	ldr	r3, [pc, #260]	; (8003000 <moveUltra+0x234>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8002f02:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 8002f04:	f004 f91c 	bl	8007140 <HAL_GetTick>
 8002f08:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 8002f0c:	4b47      	ldr	r3, [pc, #284]	; (800302c <moveUltra+0x260>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 8002f12:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b3c      	cmp	r3, #60	; 0x3c
 8002f1e:	d9e7      	bls.n	8002ef0 <moveUltra+0x124>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8002f20:	4b3d      	ldr	r3, [pc, #244]	; (8003018 <moveUltra+0x24c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8002f2a:	4b3c      	ldr	r3, [pc, #240]	; (800301c <moveUltra+0x250>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8002f3e:	4b36      	ldr	r3, [pc, #216]	; (8003018 <moveUltra+0x24c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d118      	bne.n	8002f7e <moveUltra+0x1b2>
				if (leftTick < leftTick_prev)
 8002f4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f54:	429a      	cmp	r2, r3
 8002f56:	da07      	bge.n	8002f68 <moveUltra+0x19c>
					diffLeft = leftTick_prev - leftTick;
 8002f58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f66:	e022      	b.n	8002fae <moveUltra+0x1e2>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8002f68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f6c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002f70:	33ff      	adds	r3, #255	; 0xff
 8002f72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f76:	4413      	add	r3, r2
 8002f78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f7c:	e017      	b.n	8002fae <moveUltra+0x1e2>
			} else {
				if (leftTick > leftTick_prev)
 8002f7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f86:	429a      	cmp	r2, r3
 8002f88:	dd07      	ble.n	8002f9a <moveUltra+0x1ce>
					diffLeft = leftTick - leftTick_prev;
 8002f8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f98:	e009      	b.n	8002fae <moveUltra+0x1e2>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8002f9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f9e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002fa2:	33ff      	adds	r3, #255	; 0xff
 8002fa4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fa8:	4413      	add	r3, r2
 8002faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8002fae:	4b1b      	ldr	r3, [pc, #108]	; (800301c <moveUltra+0x250>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	d115      	bne.n	8002fe8 <moveUltra+0x21c>
				if (rightTick < rightTick_prev)
 8002fbc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002fbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	da06      	bge.n	8002fd4 <moveUltra+0x208>
					diffRight = rightTick_prev - rightTick;
 8002fc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fd2:	e036      	b.n	8003042 <moveUltra+0x276>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 8002fd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fd6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002fda:	33ff      	adds	r3, #255	; 0xff
 8002fdc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fe6:	e02c      	b.n	8003042 <moveUltra+0x276>
			} else {
				if (rightTick > rightTick_prev)
 8002fe8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002fea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	dd1e      	ble.n	8003030 <moveUltra+0x264>
					diffRight = rightTick - rightTick_prev;
 8002ff2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002ff4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ffe:	e020      	b.n	8003042 <moveUltra+0x276>
 8003000:	20000378 	.word	0x20000378
 8003004:	20000258 	.word	0x20000258
 8003008:	3d4ccccd 	.word	0x3d4ccccd
 800300c:	44440000 	.word	0x44440000
 8003010:	4442c000 	.word	0x4442c000
 8003014:	41bc7ae1 	.word	0x41bc7ae1
 8003018:	200002a0 	.word	0x200002a0
 800301c:	20000330 	.word	0x20000330
 8003020:	40020000 	.word	0x40020000
 8003024:	40021000 	.word	0x40021000
 8003028:	40020800 	.word	0x40020800
 800302c:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8003030:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003034:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003038:	33ff      	adds	r3, #255	; 0xff
 800303a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800303c:	4413      	add	r3, r2
 800303e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8003042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003046:	ee07 3a90 	vmov	s15, r3
 800304a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800304e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003056:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800305a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 8003062:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8003066:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800306a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800306e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8003072:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003076:	ee07 3a90 	vmov	s15, r3
 800307a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800307e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003086:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800308a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 8003092:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003096:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800309a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (actualAngle < 0.00) //veering right
 80030a2:	4b46      	ldr	r3, [pc, #280]	; (80031bc <moveUltra+0x3f0>)
 80030a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	f7fd fd14 	bl	8000adc <__aeabi_dcmplt>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d006      	beq.n	80030c8 <moveUltra+0x2fc>
					{

				htim1.Instance->CCR4 = 138; //left abit
 80030ba:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <moveUltra+0x3f4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	228a      	movs	r2, #138	; 0x8a
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 80030c2:	200a      	movs	r0, #10
 80030c4:	f00a fa23 	bl	800d50e <osDelay>
			}
			if (actualAngle > 0.00) //veering left
 80030c8:	4b3c      	ldr	r3, [pc, #240]	; (80031bc <moveUltra+0x3f0>)
 80030ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	f7fd fd1f 	bl	8000b18 <__aeabi_dcmpgt>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d006      	beq.n	80030ee <moveUltra+0x322>
					{

				htim1.Instance->CCR4 = 152; //right a bit
 80030e0:	4b37      	ldr	r3, [pc, #220]	; (80031c0 <moveUltra+0x3f4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2298      	movs	r2, #152	; 0x98
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 80030e8:	200a      	movs	r0, #10
 80030ea:	f00a fa10 	bl	800d50e <osDelay>
			}
			if (actualAngle == 0.00) {
 80030ee:	4b33      	ldr	r3, [pc, #204]	; (80031bc <moveUltra+0x3f0>)
 80030f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	f7fd fce4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d006      	beq.n	8003114 <moveUltra+0x348>
//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 8003106:	4b2e      	ldr	r3, [pc, #184]	; (80031c0 <moveUltra+0x3f4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2295      	movs	r2, #149	; 0x95
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 800310e:	200a      	movs	r0, #10
 8003110:	f00a f9fd 	bl	800d50e <osDelay>
			}

			prevTime = currTime;
 8003114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 800311c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8003124:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 15) // prev was 10
 800312a:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <moveUltra+0x3f8>)
 800312c:	edd3 7a00 	vldr	s15, [r3]
 8003130:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313c:	d417      	bmi.n	800316e <moveUltra+0x3a2>
					{
				break;
			}
			sprintf(messageA, "angle %5d\0", (int) (actualAngle));
 800313e:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <moveUltra+0x3f0>)
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	f7fd fd06 	bl	8000b58 <__aeabi_d2iz>
 800314c:	4602      	mov	r2, r0
 800314e:	f107 0318 	add.w	r3, r7, #24
 8003152:	491d      	ldr	r1, [pc, #116]	; (80031c8 <moveUltra+0x3fc>)
 8003154:	4618      	mov	r0, r3
 8003156:	f00d fdb9 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 20, messageA);
 800315a:	f107 0318 	add.w	r3, r7, #24
 800315e:	461a      	mov	r2, r3
 8003160:	2114      	movs	r1, #20
 8003162:	200a      	movs	r0, #10
 8003164:	f003 fa44 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 8003168:	f003 f8ce 	bl	8006308 <OLED_Refresh_Gram>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800316c:	e6c0      	b.n	8002ef0 <moveUltra+0x124>
				break;
 800316e:	bf00      	nop
		}
	}

//	moving = 0;
	move(1, 0);
 8003170:	2000      	movs	r0, #0
 8003172:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003176:	f001 fd3d 	bl	8004bf4 <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800317a:	2201      	movs	r2, #1
 800317c:	2108      	movs	r1, #8
 800317e:	4813      	ldr	r0, [pc, #76]	; (80031cc <moveUltra+0x400>)
 8003180:	f004 fb5c 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003184:	2200      	movs	r2, #0
 8003186:	2104      	movs	r1, #4
 8003188:	4810      	ldr	r0, [pc, #64]	; (80031cc <moveUltra+0x400>)
 800318a:	f004 fb57 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800318e:	2201      	movs	r2, #1
 8003190:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003194:	480e      	ldr	r0, [pc, #56]	; (80031d0 <moveUltra+0x404>)
 8003196:	f004 fb51 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800319a:	2200      	movs	r2, #0
 800319c:	2120      	movs	r1, #32
 800319e:	480d      	ldr	r0, [pc, #52]	; (80031d4 <moveUltra+0x408>)
 80031a0:	f004 fb4c 	bl	800783c <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <moveUltra+0x3f4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2295      	movs	r2, #149	; 0x95
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 80031ac:	200a      	movs	r0, #10
 80031ae:	f00a f9ae 	bl	800d50e <osDelay>
	return;
 80031b2:	bf00      	nop

}
 80031b4:	37b8      	adds	r7, #184	; 0xb8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000420 	.word	0x20000420
 80031c0:	20000258 	.word	0x20000258
 80031c4:	20000444 	.word	0x20000444
 80031c8:	080148e8 	.word	0x080148e8
 80031cc:	40020000 	.word	0x40020000
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40020800 	.word	0x40020800

080031d8 <moveUltraEnd>:

void moveUltraEnd() {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b0ae      	sub	sp, #184	; 0xb8
 80031dc:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80031de:	2100      	movs	r1, #0
 80031e0:	488e      	ldr	r0, [pc, #568]	; (800341c <moveUltraEnd+0x244>)
 80031e2:	f007 fbe1 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80031e6:	2108      	movs	r1, #8
 80031e8:	488c      	ldr	r0, [pc, #560]	; (800341c <moveUltraEnd+0x244>)
 80031ea:	f007 fbdd 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80031ee:	210c      	movs	r1, #12
 80031f0:	488b      	ldr	r0, [pc, #556]	; (8003420 <moveUltraEnd+0x248>)
 80031f2:	f007 fbd9 	bl	800a9a8 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80031f6:	4b8a      	ldr	r3, [pc, #552]	; (8003420 <moveUltraEnd+0x248>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2295      	movs	r2, #149	; 0x95
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 80031fe:	2064      	movs	r0, #100	; 0x64
 8003200:	f00a f985 	bl	800d50e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8003204:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003208:	2224      	movs	r2, #36	; 0x24
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f00c fed5 	bl	800ffbc <memset>
 8003212:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003216:	653b      	str	r3, [r7, #80]	; 0x50
 8003218:	f240 53aa 	movw	r3, #1450	; 0x5aa
 800321c:	65bb      	str	r3, [r7, #88]	; 0x58
 800321e:	f640 3354 	movw	r3, #2900	; 0xb54
 8003222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003224:	4b7f      	ldr	r3, [pc, #508]	; (8003424 <moveUltraEnd+0x24c>)
 8003226:	663b      	str	r3, [r7, #96]	; 0x60
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8003228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800322c:	2224      	movs	r2, #36	; 0x24
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f00c fec3 	bl	800ffbc <memset>
 8003236:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323c:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003240:	637b      	str	r3, [r7, #52]	; 0x34
 8003242:	f640 3354 	movw	r3, #2900	; 0xb54
 8003246:	63bb      	str	r3, [r7, #56]	; 0x38
 8003248:	4b76      	ldr	r3, [pc, #472]	; (8003424 <moveUltraEnd+0x24c>)
 800324a:	63fb      	str	r3, [r7, #60]	; 0x3c
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 800324c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003250:	4618      	mov	r0, r3
 8003252:	f003 fa8b 	bl	800676c <PIDController_Init>
	PIDController_Init(&pidRight);
 8003256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800325a:	4618      	mov	r0, r3
 800325c:	f003 fa86 	bl	800676c <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8003260:	4b71      	ldr	r3, [pc, #452]	; (8003428 <moveUltraEnd+0x250>)
 8003262:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8003266:	4b71      	ldr	r3, [pc, #452]	; (800342c <moveUltraEnd+0x254>)
 8003268:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 800326c:	4b70      	ldr	r3, [pc, #448]	; (8003430 <moveUltraEnd+0x258>)
 800326e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8003272:	213c      	movs	r1, #60	; 0x3c
 8003274:	486f      	ldr	r0, [pc, #444]	; (8003434 <moveUltraEnd+0x25c>)
 8003276:	f007 fe7d 	bl	800af74 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 800327a:	213c      	movs	r1, #60	; 0x3c
 800327c:	486e      	ldr	r0, [pc, #440]	; (8003438 <moveUltraEnd+0x260>)
 800327e:	f007 fe79 	bl	800af74 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003282:	4b6c      	ldr	r3, [pc, #432]	; (8003434 <moveUltraEnd+0x25c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 800328c:	4b6a      	ldr	r3, [pc, #424]	; (8003438 <moveUltraEnd+0x260>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8003296:	f003 ff53 	bl	8007140 <HAL_GetTick>
 800329a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 800329e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	actualAngle = 0.00;
 80032c2:	495e      	ldr	r1, [pc, #376]	; (800343c <moveUltraEnd+0x264>)
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9c1 2300 	strd	r2, r3, [r1]
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 3000;
 80032d0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80032d4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 3000;
 80032d8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80032dc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80032e0:	2201      	movs	r2, #1
 80032e2:	2108      	movs	r1, #8
 80032e4:	4856      	ldr	r0, [pc, #344]	; (8003440 <moveUltraEnd+0x268>)
 80032e6:	f004 faa9 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80032ea:	2200      	movs	r2, #0
 80032ec:	2104      	movs	r1, #4
 80032ee:	4854      	ldr	r0, [pc, #336]	; (8003440 <moveUltraEnd+0x268>)
 80032f0:	f004 faa4 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80032f4:	2201      	movs	r2, #1
 80032f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032fa:	4852      	ldr	r0, [pc, #328]	; (8003444 <moveUltraEnd+0x26c>)
 80032fc:	f004 fa9e 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003300:	2200      	movs	r2, #0
 8003302:	2120      	movs	r1, #32
 8003304:	4850      	ldr	r0, [pc, #320]	; (8003448 <moveUltraEnd+0x270>)
 8003306:	f004 fa99 	bl	800783c <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800330a:	4b44      	ldr	r3, [pc, #272]	; (800341c <moveUltraEnd+0x244>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8003312:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8003314:	4b41      	ldr	r3, [pc, #260]	; (800341c <moveUltraEnd+0x244>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800331c:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 800331e:	f003 ff0f 	bl	8007140 <HAL_GetTick>
 8003322:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 8003326:	4b49      	ldr	r3, [pc, #292]	; (800344c <moveUltraEnd+0x274>)
 8003328:	2201      	movs	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 800332c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b3c      	cmp	r3, #60	; 0x3c
 8003338:	d9e7      	bls.n	800330a <moveUltraEnd+0x132>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 800333a:	4b3e      	ldr	r3, [pc, #248]	; (8003434 <moveUltraEnd+0x25c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8003344:	4b3c      	ldr	r3, [pc, #240]	; (8003438 <moveUltraEnd+0x260>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8003358:	4b36      	ldr	r3, [pc, #216]	; (8003434 <moveUltraEnd+0x25c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	2b10      	cmp	r3, #16
 8003364:	d118      	bne.n	8003398 <moveUltraEnd+0x1c0>
				if (leftTick < leftTick_prev)
 8003366:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800336a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800336e:	429a      	cmp	r2, r3
 8003370:	da07      	bge.n	8003382 <moveUltraEnd+0x1aa>
					diffLeft = leftTick_prev - leftTick;
 8003372:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003376:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003380:	e022      	b.n	80033c8 <moveUltraEnd+0x1f0>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8003382:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003386:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800338a:	33ff      	adds	r3, #255	; 0xff
 800338c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003390:	4413      	add	r3, r2
 8003392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003396:	e017      	b.n	80033c8 <moveUltraEnd+0x1f0>
			} else {
				if (leftTick > leftTick_prev)
 8003398:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800339c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033a0:	429a      	cmp	r2, r3
 80033a2:	dd07      	ble.n	80033b4 <moveUltraEnd+0x1dc>
					diffLeft = leftTick - leftTick_prev;
 80033a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033b2:	e009      	b.n	80033c8 <moveUltraEnd+0x1f0>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 80033b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033b8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80033bc:	33ff      	adds	r3, #255	; 0xff
 80033be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033c2:	4413      	add	r3, r2
 80033c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 80033c8:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <moveUltraEnd+0x260>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d115      	bne.n	8003402 <moveUltraEnd+0x22a>
				if (rightTick < rightTick_prev)
 80033d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80033d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033dc:	429a      	cmp	r2, r3
 80033de:	da06      	bge.n	80033ee <moveUltraEnd+0x216>
					diffRight = rightTick_prev - rightTick;
 80033e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033ec:	e039      	b.n	8003462 <moveUltraEnd+0x28a>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 80033ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033f0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80033f4:	33ff      	adds	r3, #255	; 0xff
 80033f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033fa:	4413      	add	r3, r2
 80033fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003400:	e02f      	b.n	8003462 <moveUltraEnd+0x28a>
			} else {
				if (rightTick > rightTick_prev)
 8003402:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003408:	429a      	cmp	r2, r3
 800340a:	dd21      	ble.n	8003450 <moveUltraEnd+0x278>
					diffRight = rightTick - rightTick_prev;
 800340c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800340e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003418:	e023      	b.n	8003462 <moveUltraEnd+0x28a>
 800341a:	bf00      	nop
 800341c:	20000378 	.word	0x20000378
 8003420:	20000258 	.word	0x20000258
 8003424:	3d4ccccd 	.word	0x3d4ccccd
 8003428:	44440000 	.word	0x44440000
 800342c:	4442c000 	.word	0x4442c000
 8003430:	41b33333 	.word	0x41b33333
 8003434:	200002a0 	.word	0x200002a0
 8003438:	20000330 	.word	0x20000330
 800343c:	20000420 	.word	0x20000420
 8003440:	40020000 	.word	0x40020000
 8003444:	40021000 	.word	0x40021000
 8003448:	40020800 	.word	0x40020800
 800344c:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8003450:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003454:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003458:	33ff      	adds	r3, #255	; 0xff
 800345a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800345c:	4413      	add	r3, r2
 800345e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8003462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800346e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003476:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800347a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 8003482:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8003486:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800348a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8003492:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800349e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80034a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034a6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80034aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ae:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 80034b2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80034b6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80034ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034be:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (actualAngle < 0.00) //veering right
 80034c2:	4b46      	ldr	r3, [pc, #280]	; (80035dc <moveUltraEnd+0x404>)
 80034c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	f7fd fb04 	bl	8000adc <__aeabi_dcmplt>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d006      	beq.n	80034e8 <moveUltraEnd+0x310>
					{

				htim1.Instance->CCR4 = 138; //left abit
 80034da:	4b41      	ldr	r3, [pc, #260]	; (80035e0 <moveUltraEnd+0x408>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	228a      	movs	r2, #138	; 0x8a
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 80034e2:	200a      	movs	r0, #10
 80034e4:	f00a f813 	bl	800d50e <osDelay>
			}
			if (actualAngle > 0.00) //veering left
 80034e8:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <moveUltraEnd+0x404>)
 80034ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	f7fd fb0f 	bl	8000b18 <__aeabi_dcmpgt>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d006      	beq.n	800350e <moveUltraEnd+0x336>
					{

				htim1.Instance->CCR4 = 152; //right a bit
 8003500:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <moveUltraEnd+0x408>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2298      	movs	r2, #152	; 0x98
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 8003508:	200a      	movs	r0, #10
 800350a:	f00a f800 	bl	800d50e <osDelay>
			}
			if (actualAngle == 0.00) {
 800350e:	4b33      	ldr	r3, [pc, #204]	; (80035dc <moveUltraEnd+0x404>)
 8003510:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	f7fd fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <moveUltraEnd+0x35c>
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 8003526:	4b2e      	ldr	r3, [pc, #184]	; (80035e0 <moveUltraEnd+0x408>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2295      	movs	r2, #149	; 0x95
 800352c:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 800352e:	200a      	movs	r0, #10
 8003530:	f009 ffed 	bl	800d50e <osDelay>
			}

			prevTime = currTime;
 8003534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003538:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 800353c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8003544:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 8) {
 800354a:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <moveUltraEnd+0x40c>)
 800354c:	edd3 7a00 	vldr	s15, [r3]
 8003550:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355c:	d417      	bmi.n	800358e <moveUltraEnd+0x3b6>
				break;
			}
			sprintf(messageA, "angle %5d\0", (int) (actualAngle));
 800355e:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <moveUltraEnd+0x404>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	f7fd faf6 	bl	8000b58 <__aeabi_d2iz>
 800356c:	4602      	mov	r2, r0
 800356e:	f107 0318 	add.w	r3, r7, #24
 8003572:	491d      	ldr	r1, [pc, #116]	; (80035e8 <moveUltraEnd+0x410>)
 8003574:	4618      	mov	r0, r3
 8003576:	f00d fba9 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 20, messageA);
 800357a:	f107 0318 	add.w	r3, r7, #24
 800357e:	461a      	mov	r2, r3
 8003580:	2114      	movs	r1, #20
 8003582:	200a      	movs	r0, #10
 8003584:	f003 f834 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 8003588:	f002 febe 	bl	8006308 <OLED_Refresh_Gram>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800358c:	e6bd      	b.n	800330a <moveUltraEnd+0x132>
				break;
 800358e:	bf00      	nop
		}
	}

//	moving = 0;
	move(1, 0);
 8003590:	2000      	movs	r0, #0
 8003592:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003596:	f001 fb2d 	bl	8004bf4 <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800359a:	2201      	movs	r2, #1
 800359c:	2108      	movs	r1, #8
 800359e:	4813      	ldr	r0, [pc, #76]	; (80035ec <moveUltraEnd+0x414>)
 80035a0:	f004 f94c 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80035a4:	2200      	movs	r2, #0
 80035a6:	2104      	movs	r1, #4
 80035a8:	4810      	ldr	r0, [pc, #64]	; (80035ec <moveUltraEnd+0x414>)
 80035aa:	f004 f947 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80035ae:	2201      	movs	r2, #1
 80035b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035b4:	480e      	ldr	r0, [pc, #56]	; (80035f0 <moveUltraEnd+0x418>)
 80035b6:	f004 f941 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80035ba:	2200      	movs	r2, #0
 80035bc:	2120      	movs	r1, #32
 80035be:	480d      	ldr	r0, [pc, #52]	; (80035f4 <moveUltraEnd+0x41c>)
 80035c0:	f004 f93c 	bl	800783c <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <moveUltraEnd+0x408>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2295      	movs	r2, #149	; 0x95
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 80035cc:	200a      	movs	r0, #10
 80035ce:	f009 ff9e 	bl	800d50e <osDelay>
	return;
 80035d2:	bf00      	nop

}
 80035d4:	37b8      	adds	r7, #184	; 0xb8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000420 	.word	0x20000420
 80035e0:	20000258 	.word	0x20000258
 80035e4:	20000444 	.word	0x20000444
 80035e8:	080148e8 	.word	0x080148e8
 80035ec:	40020000 	.word	0x40020000
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40020800 	.word	0x40020800

080035f8 <moveUltraEndLeft>:

void moveUltraEndLeft() {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b0ae      	sub	sp, #184	; 0xb8
 80035fc:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80035fe:	2100      	movs	r1, #0
 8003600:	488e      	ldr	r0, [pc, #568]	; (800383c <moveUltraEndLeft+0x244>)
 8003602:	f007 f9d1 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003606:	2108      	movs	r1, #8
 8003608:	488c      	ldr	r0, [pc, #560]	; (800383c <moveUltraEndLeft+0x244>)
 800360a:	f007 f9cd 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800360e:	210c      	movs	r1, #12
 8003610:	488b      	ldr	r0, [pc, #556]	; (8003840 <moveUltraEndLeft+0x248>)
 8003612:	f007 f9c9 	bl	800a9a8 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8003616:	4b8a      	ldr	r3, [pc, #552]	; (8003840 <moveUltraEndLeft+0x248>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2295      	movs	r2, #149	; 0x95
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 800361e:	2064      	movs	r0, #100	; 0x64
 8003620:	f009 ff75 	bl	800d50e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8003624:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003628:	2224      	movs	r2, #36	; 0x24
 800362a:	2100      	movs	r1, #0
 800362c:	4618      	mov	r0, r3
 800362e:	f00c fcc5 	bl	800ffbc <memset>
 8003632:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003636:	653b      	str	r3, [r7, #80]	; 0x50
 8003638:	f240 53aa 	movw	r3, #1450	; 0x5aa
 800363c:	65bb      	str	r3, [r7, #88]	; 0x58
 800363e:	f640 3354 	movw	r3, #2900	; 0xb54
 8003642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003644:	4b7f      	ldr	r3, [pc, #508]	; (8003844 <moveUltraEndLeft+0x24c>)
 8003646:	663b      	str	r3, [r7, #96]	; 0x60
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8003648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800364c:	2224      	movs	r2, #36	; 0x24
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f00c fcb3 	bl	800ffbc <memset>
 8003656:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800365c:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
 8003662:	f640 3354 	movw	r3, #2900	; 0xb54
 8003666:	63bb      	str	r3, [r7, #56]	; 0x38
 8003668:	4b76      	ldr	r3, [pc, #472]	; (8003844 <moveUltraEndLeft+0x24c>)
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 800366c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003670:	4618      	mov	r0, r3
 8003672:	f003 f87b 	bl	800676c <PIDController_Init>
	PIDController_Init(&pidRight);
 8003676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800367a:	4618      	mov	r0, r3
 800367c:	f003 f876 	bl	800676c <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8003680:	4b71      	ldr	r3, [pc, #452]	; (8003848 <moveUltraEndLeft+0x250>)
 8003682:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8003686:	4b71      	ldr	r3, [pc, #452]	; (800384c <moveUltraEndLeft+0x254>)
 8003688:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 800368c:	4b70      	ldr	r3, [pc, #448]	; (8003850 <moveUltraEndLeft+0x258>)
 800368e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8003692:	213c      	movs	r1, #60	; 0x3c
 8003694:	486f      	ldr	r0, [pc, #444]	; (8003854 <moveUltraEndLeft+0x25c>)
 8003696:	f007 fc6d 	bl	800af74 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 800369a:	213c      	movs	r1, #60	; 0x3c
 800369c:	486e      	ldr	r0, [pc, #440]	; (8003858 <moveUltraEndLeft+0x260>)
 800369e:	f007 fc69 	bl	800af74 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80036a2:	4b6c      	ldr	r3, [pc, #432]	; (8003854 <moveUltraEndLeft+0x25c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 80036ac:	4b6a      	ldr	r3, [pc, #424]	; (8003858 <moveUltraEndLeft+0x260>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 80036b6:	f003 fd43 	bl	8007140 <HAL_GetTick>
 80036ba:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 80036be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 3000;
 80036e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80036e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 3000;
 80036ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80036ee:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80036f2:	2201      	movs	r2, #1
 80036f4:	2108      	movs	r1, #8
 80036f6:	4859      	ldr	r0, [pc, #356]	; (800385c <moveUltraEndLeft+0x264>)
 80036f8:	f004 f8a0 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80036fc:	2200      	movs	r2, #0
 80036fe:	2104      	movs	r1, #4
 8003700:	4856      	ldr	r0, [pc, #344]	; (800385c <moveUltraEndLeft+0x264>)
 8003702:	f004 f89b 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003706:	2201      	movs	r2, #1
 8003708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800370c:	4854      	ldr	r0, [pc, #336]	; (8003860 <moveUltraEndLeft+0x268>)
 800370e:	f004 f895 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003712:	2200      	movs	r2, #0
 8003714:	2120      	movs	r1, #32
 8003716:	4853      	ldr	r0, [pc, #332]	; (8003864 <moveUltraEndLeft+0x26c>)
 8003718:	f004 f890 	bl	800783c <HAL_GPIO_WritePin>

	totalAngle = 0.0;
 800371c:	4952      	ldr	r1, [pc, #328]	; (8003868 <moveUltraEndLeft+0x270>)
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	e9c1 2300 	strd	r2, r3, [r1]

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800372a:	4b44      	ldr	r3, [pc, #272]	; (800383c <moveUltraEndLeft+0x244>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8003732:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8003734:	4b41      	ldr	r3, [pc, #260]	; (800383c <moveUltraEndLeft+0x244>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800373c:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 800373e:	f003 fcff 	bl	8007140 <HAL_GetTick>
 8003742:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 8003746:	4b49      	ldr	r3, [pc, #292]	; (800386c <moveUltraEndLeft+0x274>)
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 800374c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b3c      	cmp	r3, #60	; 0x3c
 8003758:	d9e7      	bls.n	800372a <moveUltraEndLeft+0x132>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 800375a:	4b3e      	ldr	r3, [pc, #248]	; (8003854 <moveUltraEndLeft+0x25c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8003764:	4b3c      	ldr	r3, [pc, #240]	; (8003858 <moveUltraEndLeft+0x260>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8003778:	4b36      	ldr	r3, [pc, #216]	; (8003854 <moveUltraEndLeft+0x25c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b10      	cmp	r3, #16
 8003784:	d118      	bne.n	80037b8 <moveUltraEndLeft+0x1c0>
				if (leftTick < leftTick_prev)
 8003786:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800378a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800378e:	429a      	cmp	r2, r3
 8003790:	da07      	bge.n	80037a2 <moveUltraEndLeft+0x1aa>
					diffLeft = leftTick_prev - leftTick;
 8003792:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003796:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037a0:	e022      	b.n	80037e8 <moveUltraEndLeft+0x1f0>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 80037a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037a6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80037aa:	33ff      	adds	r3, #255	; 0xff
 80037ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037b0:	4413      	add	r3, r2
 80037b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037b6:	e017      	b.n	80037e8 <moveUltraEndLeft+0x1f0>
			} else {
				if (leftTick > leftTick_prev)
 80037b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037c0:	429a      	cmp	r2, r3
 80037c2:	dd07      	ble.n	80037d4 <moveUltraEndLeft+0x1dc>
					diffLeft = leftTick - leftTick_prev;
 80037c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037d2:	e009      	b.n	80037e8 <moveUltraEndLeft+0x1f0>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 80037d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037d8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80037dc:	33ff      	adds	r3, #255	; 0xff
 80037de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037e2:	4413      	add	r3, r2
 80037e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <moveUltraEndLeft+0x260>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d115      	bne.n	8003822 <moveUltraEndLeft+0x22a>
				if (rightTick < rightTick_prev)
 80037f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80037f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037fc:	429a      	cmp	r2, r3
 80037fe:	da06      	bge.n	800380e <moveUltraEndLeft+0x216>
					diffRight = rightTick_prev - rightTick;
 8003800:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003804:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800380c:	e039      	b.n	8003882 <moveUltraEndLeft+0x28a>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 800380e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003810:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003814:	33ff      	adds	r3, #255	; 0xff
 8003816:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800381a:	4413      	add	r3, r2
 800381c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003820:	e02f      	b.n	8003882 <moveUltraEndLeft+0x28a>
			} else {
				if (rightTick > rightTick_prev)
 8003822:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003828:	429a      	cmp	r2, r3
 800382a:	dd21      	ble.n	8003870 <moveUltraEndLeft+0x278>
					diffRight = rightTick - rightTick_prev;
 800382c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800382e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003838:	e023      	b.n	8003882 <moveUltraEndLeft+0x28a>
 800383a:	bf00      	nop
 800383c:	20000378 	.word	0x20000378
 8003840:	20000258 	.word	0x20000258
 8003844:	3d4ccccd 	.word	0x3d4ccccd
 8003848:	44440000 	.word	0x44440000
 800384c:	4442c000 	.word	0x4442c000
 8003850:	41b33333 	.word	0x41b33333
 8003854:	200002a0 	.word	0x200002a0
 8003858:	20000330 	.word	0x20000330
 800385c:	40020000 	.word	0x40020000
 8003860:	40021000 	.word	0x40021000
 8003864:	40020800 	.word	0x40020800
 8003868:	20000418 	.word	0x20000418
 800386c:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8003870:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003874:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003878:	33ff      	adds	r3, #255	; 0xff
 800387a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800387c:	4413      	add	r3, r2
 800387e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8003882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800388e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003896:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800389a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 80038a2:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80038a6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80038aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ae:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 80038b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80038be:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80038c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80038ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ce:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 80038d2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80038d6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80038da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038de:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (totalAngle < 0.00) //veering right
 80038e2:	4b46      	ldr	r3, [pc, #280]	; (80039fc <moveUltraEndLeft+0x404>)
 80038e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	f7fd f8f4 	bl	8000adc <__aeabi_dcmplt>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d006      	beq.n	8003908 <moveUltraEndLeft+0x310>
					{

				htim1.Instance->CCR4 = 138; //left abit
 80038fa:	4b41      	ldr	r3, [pc, #260]	; (8003a00 <moveUltraEndLeft+0x408>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	228a      	movs	r2, #138	; 0x8a
 8003900:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 8003902:	200a      	movs	r0, #10
 8003904:	f009 fe03 	bl	800d50e <osDelay>
			}
			if (totalAngle > 0.00) //veering left
 8003908:	4b3c      	ldr	r3, [pc, #240]	; (80039fc <moveUltraEndLeft+0x404>)
 800390a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	f7fd f8ff 	bl	8000b18 <__aeabi_dcmpgt>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <moveUltraEndLeft+0x336>
					{

				htim1.Instance->CCR4 = 152; //right a bit
 8003920:	4b37      	ldr	r3, [pc, #220]	; (8003a00 <moveUltraEndLeft+0x408>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2298      	movs	r2, #152	; 0x98
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 8003928:	200a      	movs	r0, #10
 800392a:	f009 fdf0 	bl	800d50e <osDelay>
			}
			if (totalAngle == 0.00) {
 800392e:	4b33      	ldr	r3, [pc, #204]	; (80039fc <moveUltraEndLeft+0x404>)
 8003930:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	f7fd f8c4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d006      	beq.n	8003954 <moveUltraEndLeft+0x35c>
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 8003946:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <moveUltraEndLeft+0x408>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2295      	movs	r2, #149	; 0x95
 800394c:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 800394e:	200a      	movs	r0, #10
 8003950:	f009 fddd 	bl	800d50e <osDelay>
			}

			prevTime = currTime;
 8003954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 800395c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8003964:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003966:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 8) {
 800396a:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <moveUltraEndLeft+0x40c>)
 800396c:	edd3 7a00 	vldr	s15, [r3]
 8003970:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397c:	d417      	bmi.n	80039ae <moveUltraEndLeft+0x3b6>
				break;
			}
			sprintf(messageA, "angle %5d\0", (int) (actualAngle));
 800397e:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <moveUltraEndLeft+0x410>)
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	f7fd f8e6 	bl	8000b58 <__aeabi_d2iz>
 800398c:	4602      	mov	r2, r0
 800398e:	f107 0318 	add.w	r3, r7, #24
 8003992:	491e      	ldr	r1, [pc, #120]	; (8003a0c <moveUltraEndLeft+0x414>)
 8003994:	4618      	mov	r0, r3
 8003996:	f00d f999 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 20, messageA);
 800399a:	f107 0318 	add.w	r3, r7, #24
 800399e:	461a      	mov	r2, r3
 80039a0:	2114      	movs	r1, #20
 80039a2:	200a      	movs	r0, #10
 80039a4:	f002 fe24 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 80039a8:	f002 fcae 	bl	8006308 <OLED_Refresh_Gram>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80039ac:	e6bd      	b.n	800372a <moveUltraEndLeft+0x132>
				break;
 80039ae:	bf00      	nop
		}
	}

//	moving = 0;
	move(1, 0);
 80039b0:	2000      	movs	r0, #0
 80039b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80039b6:	f001 f91d 	bl	8004bf4 <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80039ba:	2201      	movs	r2, #1
 80039bc:	2108      	movs	r1, #8
 80039be:	4814      	ldr	r0, [pc, #80]	; (8003a10 <moveUltraEndLeft+0x418>)
 80039c0:	f003 ff3c 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80039c4:	2200      	movs	r2, #0
 80039c6:	2104      	movs	r1, #4
 80039c8:	4811      	ldr	r0, [pc, #68]	; (8003a10 <moveUltraEndLeft+0x418>)
 80039ca:	f003 ff37 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80039ce:	2201      	movs	r2, #1
 80039d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039d4:	480f      	ldr	r0, [pc, #60]	; (8003a14 <moveUltraEndLeft+0x41c>)
 80039d6:	f003 ff31 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80039da:	2200      	movs	r2, #0
 80039dc:	2120      	movs	r1, #32
 80039de:	480e      	ldr	r0, [pc, #56]	; (8003a18 <moveUltraEndLeft+0x420>)
 80039e0:	f003 ff2c 	bl	800783c <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 80039e4:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <moveUltraEndLeft+0x408>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2295      	movs	r2, #149	; 0x95
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 80039ec:	200a      	movs	r0, #10
 80039ee:	f009 fd8e 	bl	800d50e <osDelay>
	return;
 80039f2:	bf00      	nop

}
 80039f4:	37b8      	adds	r7, #184	; 0xb8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000418 	.word	0x20000418
 8003a00:	20000258 	.word	0x20000258
 8003a04:	20000444 	.word	0x20000444
 8003a08:	20000420 	.word	0x20000420
 8003a0c:	080148e8 	.word	0x080148e8
 8003a10:	40020000 	.word	0x40020000
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40020800 	.word	0x40020800

08003a1c <moveUltraExtreme>:

void moveUltraExtreme() {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b0ae      	sub	sp, #184	; 0xb8
 8003a20:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003a22:	2100      	movs	r1, #0
 8003a24:	488a      	ldr	r0, [pc, #552]	; (8003c50 <moveUltraExtreme+0x234>)
 8003a26:	f006 ffbf 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003a2a:	2108      	movs	r1, #8
 8003a2c:	4888      	ldr	r0, [pc, #544]	; (8003c50 <moveUltraExtreme+0x234>)
 8003a2e:	f006 ffbb 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003a32:	210c      	movs	r1, #12
 8003a34:	4887      	ldr	r0, [pc, #540]	; (8003c54 <moveUltraExtreme+0x238>)
 8003a36:	f006 ffb7 	bl	800a9a8 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8003a3a:	4b86      	ldr	r3, [pc, #536]	; (8003c54 <moveUltraExtreme+0x238>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2295      	movs	r2, #149	; 0x95
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 8003a42:	2064      	movs	r0, #100	; 0x64
 8003a44:	f009 fd63 	bl	800d50e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8003a48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a4c:	2224      	movs	r2, #36	; 0x24
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f00c fab3 	bl	800ffbc <memset>
 8003a56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a5c:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003a60:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a62:	f640 3354 	movw	r3, #2900	; 0xb54
 8003a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a68:	4b7b      	ldr	r3, [pc, #492]	; (8003c58 <moveUltraExtreme+0x23c>)
 8003a6a:	663b      	str	r3, [r7, #96]	; 0x60
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8003a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a70:	2224      	movs	r2, #36	; 0x24
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f00c faa1 	bl	800ffbc <memset>
 8003a7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a80:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
 8003a86:	f640 3354 	movw	r3, #2900	; 0xb54
 8003a8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a8c:	4b72      	ldr	r3, [pc, #456]	; (8003c58 <moveUltraExtreme+0x23c>)
 8003a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8003a90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a94:	4618      	mov	r0, r3
 8003a96:	f002 fe69 	bl	800676c <PIDController_Init>
	PIDController_Init(&pidRight);
 8003a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f002 fe64 	bl	800676c <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8003aa4:	4b6d      	ldr	r3, [pc, #436]	; (8003c5c <moveUltraExtreme+0x240>)
 8003aa6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8003aaa:	4b6d      	ldr	r3, [pc, #436]	; (8003c60 <moveUltraExtreme+0x244>)
 8003aac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 8003ab0:	4b6c      	ldr	r3, [pc, #432]	; (8003c64 <moveUltraExtreme+0x248>)
 8003ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8003ab6:	213c      	movs	r1, #60	; 0x3c
 8003ab8:	486b      	ldr	r0, [pc, #428]	; (8003c68 <moveUltraExtreme+0x24c>)
 8003aba:	f007 fa5b 	bl	800af74 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8003abe:	213c      	movs	r1, #60	; 0x3c
 8003ac0:	486a      	ldr	r0, [pc, #424]	; (8003c6c <moveUltraExtreme+0x250>)
 8003ac2:	f007 fa57 	bl	800af74 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003ac6:	4b68      	ldr	r3, [pc, #416]	; (8003c68 <moveUltraExtreme+0x24c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8003ad0:	4b66      	ldr	r3, [pc, #408]	; (8003c6c <moveUltraExtreme+0x250>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8003ada:	f003 fb31 	bl	8007140 <HAL_GetTick>
 8003ade:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 8003ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8003b06:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003b0a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 2000;
 8003b0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003b12:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003b16:	2201      	movs	r2, #1
 8003b18:	2108      	movs	r1, #8
 8003b1a:	4855      	ldr	r0, [pc, #340]	; (8003c70 <moveUltraExtreme+0x254>)
 8003b1c:	f003 fe8e 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003b20:	2200      	movs	r2, #0
 8003b22:	2104      	movs	r1, #4
 8003b24:	4852      	ldr	r0, [pc, #328]	; (8003c70 <moveUltraExtreme+0x254>)
 8003b26:	f003 fe89 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b30:	4850      	ldr	r0, [pc, #320]	; (8003c74 <moveUltraExtreme+0x258>)
 8003b32:	f003 fe83 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003b36:	2200      	movs	r2, #0
 8003b38:	2120      	movs	r1, #32
 8003b3a:	484f      	ldr	r0, [pc, #316]	; (8003c78 <moveUltraExtreme+0x25c>)
 8003b3c:	f003 fe7e 	bl	800783c <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8003b40:	4b43      	ldr	r3, [pc, #268]	; (8003c50 <moveUltraExtreme+0x234>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8003b48:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8003b4a:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <moveUltraExtreme+0x234>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8003b52:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 8003b54:	f003 faf4 	bl	8007140 <HAL_GetTick>
 8003b58:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 8003b5c:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <moveUltraExtreme+0x260>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 8003b62:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b3c      	cmp	r3, #60	; 0x3c
 8003b6e:	d9e7      	bls.n	8003b40 <moveUltraExtreme+0x124>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8003b70:	4b3d      	ldr	r3, [pc, #244]	; (8003c68 <moveUltraExtreme+0x24c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8003b7a:	4b3c      	ldr	r3, [pc, #240]	; (8003c6c <moveUltraExtreme+0x250>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8003b8e:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <moveUltraExtreme+0x24c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d118      	bne.n	8003bce <moveUltraExtreme+0x1b2>
				if (leftTick < leftTick_prev)
 8003b9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ba0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	da07      	bge.n	8003bb8 <moveUltraExtreme+0x19c>
					diffLeft = leftTick_prev - leftTick;
 8003ba8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bb6:	e022      	b.n	8003bfe <moveUltraExtreme+0x1e2>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8003bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bbc:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003bc0:	33ff      	adds	r3, #255	; 0xff
 8003bc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bcc:	e017      	b.n	8003bfe <moveUltraExtreme+0x1e2>
			} else {
				if (leftTick > leftTick_prev)
 8003bce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	dd07      	ble.n	8003bea <moveUltraExtreme+0x1ce>
					diffLeft = leftTick - leftTick_prev;
 8003bda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003be8:	e009      	b.n	8003bfe <moveUltraExtreme+0x1e2>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8003bea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bee:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003bf2:	33ff      	adds	r3, #255	; 0xff
 8003bf4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <moveUltraExtreme+0x250>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d115      	bne.n	8003c38 <moveUltraExtreme+0x21c>
				if (rightTick < rightTick_prev)
 8003c0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c12:	429a      	cmp	r2, r3
 8003c14:	da06      	bge.n	8003c24 <moveUltraExtreme+0x208>
					diffRight = rightTick_prev - rightTick;
 8003c16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c22:	e036      	b.n	8003c92 <moveUltraExtreme+0x276>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 8003c24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c26:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003c2a:	33ff      	adds	r3, #255	; 0xff
 8003c2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c30:	4413      	add	r3, r2
 8003c32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c36:	e02c      	b.n	8003c92 <moveUltraExtreme+0x276>
			} else {
				if (rightTick > rightTick_prev)
 8003c38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	dd1e      	ble.n	8003c80 <moveUltraExtreme+0x264>
					diffRight = rightTick - rightTick_prev;
 8003c42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c4e:	e020      	b.n	8003c92 <moveUltraExtreme+0x276>
 8003c50:	20000378 	.word	0x20000378
 8003c54:	20000258 	.word	0x20000258
 8003c58:	3d4ccccd 	.word	0x3d4ccccd
 8003c5c:	44440000 	.word	0x44440000
 8003c60:	4442c000 	.word	0x4442c000
 8003c64:	41b33333 	.word	0x41b33333
 8003c68:	200002a0 	.word	0x200002a0
 8003c6c:	20000330 	.word	0x20000330
 8003c70:	40020000 	.word	0x40020000
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40020800 	.word	0x40020800
 8003c7c:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8003c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c84:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003c88:	33ff      	adds	r3, #255	; 0xff
 8003c8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8003c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c9e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cae:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 8003cb2:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8003cb6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cbe:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8003cc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003cce:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cde:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 8003ce2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003ce6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cee:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (actualAngle < 0.00) //veering right
 8003cf2:	4b3a      	ldr	r3, [pc, #232]	; (8003ddc <moveUltraExtreme+0x3c0>)
 8003cf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	f7fc feec 	bl	8000adc <__aeabi_dcmplt>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d006      	beq.n	8003d18 <moveUltraExtreme+0x2fc>
					{

				htim1.Instance->CCR4 = 115; //left abit
 8003d0a:	4b35      	ldr	r3, [pc, #212]	; (8003de0 <moveUltraExtreme+0x3c4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2273      	movs	r2, #115	; 0x73
 8003d10:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 8003d12:	200a      	movs	r0, #10
 8003d14:	f009 fbfb 	bl	800d50e <osDelay>
			}
			if (actualAngle > 0.00) //veering left
 8003d18:	4b30      	ldr	r3, [pc, #192]	; (8003ddc <moveUltraExtreme+0x3c0>)
 8003d1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	f7fc fef7 	bl	8000b18 <__aeabi_dcmpgt>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <moveUltraExtreme+0x322>
					{

				htim1.Instance->CCR4 = 180; //right a bit
 8003d30:	4b2b      	ldr	r3, [pc, #172]	; (8003de0 <moveUltraExtreme+0x3c4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	22b4      	movs	r2, #180	; 0xb4
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 8003d38:	200a      	movs	r0, #10
 8003d3a:	f009 fbe8 	bl	800d50e <osDelay>
			}
			if (actualAngle == 0.00) {
 8003d3e:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <moveUltraExtreme+0x3c0>)
 8003d40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	f7fc febc 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d006      	beq.n	8003d64 <moveUltraExtreme+0x348>
//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 8003d56:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <moveUltraExtreme+0x3c4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2295      	movs	r2, #149	; 0x95
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 8003d5e:	200a      	movs	r0, #10
 8003d60:	f009 fbd5 	bl	800d50e <osDelay>
			}

			prevTime = currTime;
 8003d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 8003d6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8003d74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 16) // prev was 10
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <moveUltraExtreme+0x3c8>)
 8003d7c:	edd3 7a00 	vldr	s15, [r3]
 8003d80:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8c:	d400      	bmi.n	8003d90 <moveUltraExtreme+0x374>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8003d8e:	e6d7      	b.n	8003b40 <moveUltraExtreme+0x124>
					{
				break;
 8003d90:	bf00      	nop
			}
		}
	}

//	moving = 0;
	move(1, 0);
 8003d92:	2000      	movs	r0, #0
 8003d94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003d98:	f000 ff2c 	bl	8004bf4 <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	2108      	movs	r1, #8
 8003da0:	4811      	ldr	r0, [pc, #68]	; (8003de8 <moveUltraExtreme+0x3cc>)
 8003da2:	f003 fd4b 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003da6:	2200      	movs	r2, #0
 8003da8:	2104      	movs	r1, #4
 8003daa:	480f      	ldr	r0, [pc, #60]	; (8003de8 <moveUltraExtreme+0x3cc>)
 8003dac:	f003 fd46 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003db0:	2201      	movs	r2, #1
 8003db2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003db6:	480d      	ldr	r0, [pc, #52]	; (8003dec <moveUltraExtreme+0x3d0>)
 8003db8:	f003 fd40 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2120      	movs	r1, #32
 8003dc0:	480b      	ldr	r0, [pc, #44]	; (8003df0 <moveUltraExtreme+0x3d4>)
 8003dc2:	f003 fd3b 	bl	800783c <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8003dc6:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <moveUltraExtreme+0x3c4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2295      	movs	r2, #149	; 0x95
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8003dce:	200a      	movs	r0, #10
 8003dd0:	f009 fb9d 	bl	800d50e <osDelay>
	return;
 8003dd4:	bf00      	nop

}
 8003dd6:	37b8      	adds	r7, #184	; 0xb8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20000420 	.word	0x20000420
 8003de0:	20000258 	.word	0x20000258
 8003de4:	20000444 	.word	0x20000444
 8003de8:	40020000 	.word	0x40020000
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40020800 	.word	0x40020800

08003df4 <sendToRPI>:
/**
 * @brief send msg to RPI through UART after execute command
 * @param msg[] for the message to be sent
 * @retval None
 */
void sendToRPI(char *msg) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), 0xFFFF);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7fc f9e7 	bl	80001d0 <strlen>
 8003e02:	4603      	mov	r3, r0
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4803      	ldr	r0, [pc, #12]	; (8003e1c <sendToRPI+0x28>)
 8003e0e:	f008 fa42 	bl	800c296 <HAL_UART_Transmit>
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200003c0 	.word	0x200003c0

08003e20 <moveGyroPID>:

//gyro for straight

void moveGyroPID(float distance, int forward) {
 8003e20:	b5b0      	push	{r4, r5, r7, lr}
 8003e22:	b0b2      	sub	sp, #200	; 0xc8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	ed87 0a01 	vstr	s0, [r7, #4]
 8003e2a:	6038      	str	r0, [r7, #0]

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	489b      	ldr	r0, [pc, #620]	; (800409c <moveGyroPID+0x27c>)
 8003e30:	f006 fdba 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003e34:	2108      	movs	r1, #8
 8003e36:	4899      	ldr	r0, [pc, #612]	; (800409c <moveGyroPID+0x27c>)
 8003e38:	f006 fdb6 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003e3c:	210c      	movs	r1, #12
 8003e3e:	4898      	ldr	r0, [pc, #608]	; (80040a0 <moveGyroPID+0x280>)
 8003e40:	f006 fdb2 	bl	800a9a8 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8003e44:	4b96      	ldr	r3, [pc, #600]	; (80040a0 <moveGyroPID+0x280>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2295      	movs	r2, #149	; 0x95
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(40);
 8003e4c:	2028      	movs	r0, #40	; 0x28
 8003e4e:	f009 fb5e 	bl	800d50e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8003e52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e56:	2224      	movs	r2, #36	; 0x24
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f00c f8ae 	bl	800ffbc <memset>
 8003e60:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003e64:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e66:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003e6a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e6c:	f640 3354 	movw	r3, #2900	; 0xb54
 8003e70:	667b      	str	r3, [r7, #100]	; 0x64
 8003e72:	4b8c      	ldr	r3, [pc, #560]	; (80040a4 <moveGyroPID+0x284>)
 8003e74:	66bb      	str	r3, [r7, #104]	; 0x68
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8003e76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e7a:	2224      	movs	r2, #36	; 0x24
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f00c f89c 	bl	800ffbc <memset>
 8003e84:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003e88:	637b      	str	r3, [r7, #52]	; 0x34
 8003e8a:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e90:	f640 3354 	movw	r3, #2900	; 0xb54
 8003e94:	643b      	str	r3, [r7, #64]	; 0x40
 8003e96:	4b83      	ldr	r3, [pc, #524]	; (80040a4 <moveGyroPID+0x284>)
 8003e98:	647b      	str	r3, [r7, #68]	; 0x44
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8003e9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f002 fc64 	bl	800676c <PIDController_Init>
	PIDController_Init(&pidRight);
 8003ea4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f002 fc5f 	bl	800676c <PIDController_Init>

	//reset angle
	actualAngle = 0;
 8003eae:	497e      	ldr	r1, [pc, #504]	; (80040a8 <moveGyroPID+0x288>)
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9c1 2300 	strd	r2, r3, [r1]

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8003ebc:	4b7b      	ldr	r3, [pc, #492]	; (80040ac <moveGyroPID+0x28c>)
 8003ebe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float wheel_rotationTicksR = 779; // for back right wheel
 8003ec2:	4b7b      	ldr	r3, [pc, #492]	; (80040b0 <moveGyroPID+0x290>)
 8003ec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	float wheel_circumference = 21.1; // NEED TO MEASURE AND CHANGE
 8003ec8:	4b7a      	ldr	r3, [pc, #488]	; (80040b4 <moveGyroPID+0x294>)
 8003eca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8003ece:	213c      	movs	r1, #60	; 0x3c
 8003ed0:	4879      	ldr	r0, [pc, #484]	; (80040b8 <moveGyroPID+0x298>)
 8003ed2:	f007 f84f 	bl	800af74 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8003ed6:	213c      	movs	r1, #60	; 0x3c
 8003ed8:	4878      	ldr	r0, [pc, #480]	; (80040bc <moveGyroPID+0x29c>)
 8003eda:	f007 f84b 	bl	800af74 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003ede:	4b76      	ldr	r3, [pc, #472]	; (80040b8 <moveGyroPID+0x298>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8003ee8:	4b74      	ldr	r3, [pc, #464]	; (80040bc <moveGyroPID+0x29c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8003ef2:	f003 f925 	bl	8007140 <HAL_GetTick>
 8003ef6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	uint32_t prevTime = startTime;
 8003efa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003efe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float totalDistance_right = 0;
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int diffRight = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distErrOffset;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8003f1e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003f22:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	uint16_t pwmValC = 2000;
 8003f26:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003f2a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if (forward) {
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d015      	beq.n	8003f60 <moveGyroPID+0x140>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003f34:	2201      	movs	r2, #1
 8003f36:	2108      	movs	r1, #8
 8003f38:	4861      	ldr	r0, [pc, #388]	; (80040c0 <moveGyroPID+0x2a0>)
 8003f3a:	f003 fc7f 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2104      	movs	r1, #4
 8003f42:	485f      	ldr	r0, [pc, #380]	; (80040c0 <moveGyroPID+0x2a0>)
 8003f44:	f003 fc7a 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f4e:	485d      	ldr	r0, [pc, #372]	; (80040c4 <moveGyroPID+0x2a4>)
 8003f50:	f003 fc74 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003f54:	2200      	movs	r2, #0
 8003f56:	2120      	movs	r1, #32
 8003f58:	485b      	ldr	r0, [pc, #364]	; (80040c8 <moveGyroPID+0x2a8>)
 8003f5a:	f003 fc6f 	bl	800783c <HAL_GPIO_WritePin>
 8003f5e:	e014      	b.n	8003f8a <moveGyroPID+0x16a>
	} else {
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8003f60:	2200      	movs	r2, #0
 8003f62:	2108      	movs	r1, #8
 8003f64:	4856      	ldr	r0, [pc, #344]	; (80040c0 <moveGyroPID+0x2a0>)
 8003f66:	f003 fc69 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	2104      	movs	r1, #4
 8003f6e:	4854      	ldr	r0, [pc, #336]	; (80040c0 <moveGyroPID+0x2a0>)
 8003f70:	f003 fc64 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8003f74:	2200      	movs	r2, #0
 8003f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f7a:	4852      	ldr	r0, [pc, #328]	; (80040c4 <moveGyroPID+0x2a4>)
 8003f7c:	f003 fc5e 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8003f80:	2201      	movs	r2, #1
 8003f82:	2120      	movs	r1, #32
 8003f84:	4850      	ldr	r0, [pc, #320]	; (80040c8 <moveGyroPID+0x2a8>)
 8003f86:	f003 fc59 	bl	800783c <HAL_GPIO_WritePin>
	}

	// indoor
	if (forward) {
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d044      	beq.n	800401a <moveGyroPID+0x1fa>
		if (distance == 10)
 8003f90:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f94:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f98:	eef4 7a47 	vcmp.f32	s15, s14
 8003f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa0:	d103      	bne.n	8003faa <moveGyroPID+0x18a>
			distErrOffset = -0.154;
 8003fa2:	4b4a      	ldr	r3, [pc, #296]	; (80040cc <moveGyroPID+0x2ac>)
 8003fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003fa8:	e0ad      	b.n	8004106 <moveGyroPID+0x2e6>
		else if (distance == 20)
 8003faa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fae:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003fb2:	eef4 7a47 	vcmp.f32	s15, s14
 8003fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fba:	d103      	bne.n	8003fc4 <moveGyroPID+0x1a4>
			distErrOffset = -0.0745;
 8003fbc:	4b44      	ldr	r3, [pc, #272]	; (80040d0 <moveGyroPID+0x2b0>)
 8003fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003fc2:	e0a0      	b.n	8004106 <moveGyroPID+0x2e6>
		else if (distance == 30)
 8003fc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fc8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003fcc:	eef4 7a47 	vcmp.f32	s15, s14
 8003fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd4:	d103      	bne.n	8003fde <moveGyroPID+0x1be>
			distErrOffset = -0.035;
 8003fd6:	4b3f      	ldr	r3, [pc, #252]	; (80040d4 <moveGyroPID+0x2b4>)
 8003fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003fdc:	e093      	b.n	8004106 <moveGyroPID+0x2e6>
		else if (distance == 40)
 8003fde:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fe2:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80040d8 <moveGyroPID+0x2b8>
 8003fe6:	eef4 7a47 	vcmp.f32	s15, s14
 8003fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fee:	d103      	bne.n	8003ff8 <moveGyroPID+0x1d8>
			distErrOffset = -0.02;
 8003ff0:	4b3a      	ldr	r3, [pc, #232]	; (80040dc <moveGyroPID+0x2bc>)
 8003ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ff6:	e086      	b.n	8004106 <moveGyroPID+0x2e6>
		else if (distance == 50)
 8003ff8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ffc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80040e0 <moveGyroPID+0x2c0>
 8004000:	eef4 7a47 	vcmp.f32	s15, s14
 8004004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004008:	d103      	bne.n	8004012 <moveGyroPID+0x1f2>
			distErrOffset = -0.001;
 800400a:	4b36      	ldr	r3, [pc, #216]	; (80040e4 <moveGyroPID+0x2c4>)
 800400c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004010:	e079      	b.n	8004106 <moveGyroPID+0x2e6>
		else
			distErrOffset = DISTANCE_ERROR_OFFSETF;
 8004012:	4b35      	ldr	r3, [pc, #212]	; (80040e8 <moveGyroPID+0x2c8>)
 8004014:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004018:	e075      	b.n	8004106 <moveGyroPID+0x2e6>
	} else {
		if (distance == 10)
 800401a:	edd7 7a01 	vldr	s15, [r7, #4]
 800401e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004022:	eef4 7a47 	vcmp.f32	s15, s14
 8004026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402a:	d103      	bne.n	8004034 <moveGyroPID+0x214>
			distErrOffset = -0.1515;
 800402c:	4b2f      	ldr	r3, [pc, #188]	; (80040ec <moveGyroPID+0x2cc>)
 800402e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004032:	e068      	b.n	8004106 <moveGyroPID+0x2e6>
		else if (distance == 20)
 8004034:	edd7 7a01 	vldr	s15, [r7, #4]
 8004038:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800403c:	eef4 7a47 	vcmp.f32	s15, s14
 8004040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004044:	d103      	bne.n	800404e <moveGyroPID+0x22e>
			distErrOffset = -0.07;
 8004046:	4b2a      	ldr	r3, [pc, #168]	; (80040f0 <moveGyroPID+0x2d0>)
 8004048:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800404c:	e05b      	b.n	8004106 <moveGyroPID+0x2e6>
		else if (distance == 30)
 800404e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004052:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004056:	eef4 7a47 	vcmp.f32	s15, s14
 800405a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405e:	d103      	bne.n	8004068 <moveGyroPID+0x248>
			distErrOffset = 0.02;
 8004060:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <moveGyroPID+0x2d4>)
 8004062:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004066:	e04e      	b.n	8004106 <moveGyroPID+0x2e6>
		else if (distance == 40)
 8004068:	edd7 7a01 	vldr	s15, [r7, #4]
 800406c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80040d8 <moveGyroPID+0x2b8>
 8004070:	eef4 7a47 	vcmp.f32	s15, s14
 8004074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004078:	d103      	bne.n	8004082 <moveGyroPID+0x262>
			distErrOffset = 0.055;
 800407a:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <moveGyroPID+0x2d8>)
 800407c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004080:	e041      	b.n	8004106 <moveGyroPID+0x2e6>
		else if (distance == 50)
 8004082:	edd7 7a01 	vldr	s15, [r7, #4]
 8004086:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80040e0 <moveGyroPID+0x2c0>
 800408a:	eef4 7a47 	vcmp.f32	s15, s14
 800408e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004092:	d135      	bne.n	8004100 <moveGyroPID+0x2e0>
			distErrOffset = 0.085;
 8004094:	4b19      	ldr	r3, [pc, #100]	; (80040fc <moveGyroPID+0x2dc>)
 8004096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800409a:	e034      	b.n	8004106 <moveGyroPID+0x2e6>
 800409c:	20000378 	.word	0x20000378
 80040a0:	20000258 	.word	0x20000258
 80040a4:	3d4ccccd 	.word	0x3d4ccccd
 80040a8:	20000420 	.word	0x20000420
 80040ac:	44440000 	.word	0x44440000
 80040b0:	4442c000 	.word	0x4442c000
 80040b4:	41a8cccd 	.word	0x41a8cccd
 80040b8:	200002a0 	.word	0x200002a0
 80040bc:	20000330 	.word	0x20000330
 80040c0:	40020000 	.word	0x40020000
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40020800 	.word	0x40020800
 80040cc:	be1db22d 	.word	0xbe1db22d
 80040d0:	bd989375 	.word	0xbd989375
 80040d4:	bd0f5c29 	.word	0xbd0f5c29
 80040d8:	42200000 	.word	0x42200000
 80040dc:	bca3d70a 	.word	0xbca3d70a
 80040e0:	42480000 	.word	0x42480000
 80040e4:	ba83126f 	.word	0xba83126f
 80040e8:	bcf5c28f 	.word	0xbcf5c28f
 80040ec:	be1b22d1 	.word	0xbe1b22d1
 80040f0:	bd8f5c29 	.word	0xbd8f5c29
 80040f4:	3ca3d70a 	.word	0x3ca3d70a
 80040f8:	3d6147ae 	.word	0x3d6147ae
 80040fc:	3dae147b 	.word	0x3dae147b
		else
			distErrOffset = DISTANCE_ERROR_OFFSETR;
 8004100:	4bd3      	ldr	r3, [pc, #844]	; (8004450 <moveGyroPID+0x630>)
 8004102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
//				distErrOffset = DISTANCE_ERROR_OFFSETR;
//		}

	/*Infinite loop*/
	for (;;) {
		if (totalDistance_left >= (distance + distanceError) * 0.9
 8004106:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800410a:	f7fc fa1d 	bl	8000548 <__aeabi_f2d>
 800410e:	4604      	mov	r4, r0
 8004110:	460d      	mov	r5, r1
 8004112:	ed97 7a01 	vldr	s14, [r7, #4]
 8004116:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800411a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800411e:	ee17 0a90 	vmov	r0, s15
 8004122:	f7fc fa11 	bl	8000548 <__aeabi_f2d>
 8004126:	a3c8      	add	r3, pc, #800	; (adr r3, 8004448 <moveGyroPID+0x628>)
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f7fc fa64 	bl	80005f8 <__aeabi_dmul>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4620      	mov	r0, r4
 8004136:	4629      	mov	r1, r5
 8004138:	f7fc fce4 	bl	8000b04 <__aeabi_dcmpge>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d11d      	bne.n	800417e <moveGyroPID+0x35e>
				|| totalDistance_right >= (distance + distanceError) * 0.9) {
 8004142:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8004146:	f7fc f9ff 	bl	8000548 <__aeabi_f2d>
 800414a:	4604      	mov	r4, r0
 800414c:	460d      	mov	r5, r1
 800414e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004152:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800415a:	ee17 0a90 	vmov	r0, s15
 800415e:	f7fc f9f3 	bl	8000548 <__aeabi_f2d>
 8004162:	a3b9      	add	r3, pc, #740	; (adr r3, 8004448 <moveGyroPID+0x628>)
 8004164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004168:	f7fc fa46 	bl	80005f8 <__aeabi_dmul>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4620      	mov	r0, r4
 8004172:	4629      	mov	r1, r5
 8004174:	f7fc fcc6 	bl	8000b04 <__aeabi_dcmpge>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d007      	beq.n	800418e <moveGyroPID+0x36e>
			pwmValA = 1000;
 800417e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004182:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			pwmValC = 1000;
 8004186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800418a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

		}

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800418e:	4bb1      	ldr	r3, [pc, #708]	; (8004454 <moveGyroPID+0x634>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8004196:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8004198:	4bae      	ldr	r3, [pc, #696]	; (8004454 <moveGyroPID+0x634>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80041a0:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 80041a2:	f002 ffcd 	bl	8007140 <HAL_GetTick>
 80041a6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		moving = 1;
 80041aa:	4bab      	ldr	r3, [pc, #684]	; (8004458 <moveGyroPID+0x638>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 80041b0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80041b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b3c      	cmp	r3, #60	; 0x3c
 80041bc:	d9a3      	bls.n	8004106 <moveGyroPID+0x2e6>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 80041be:	4ba7      	ldr	r3, [pc, #668]	; (800445c <moveGyroPID+0x63c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 80041c8:	4ba5      	ldr	r3, [pc, #660]	; (8004460 <moveGyroPID+0x640>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			diffLeft = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			diffRight = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80041de:	4b9f      	ldr	r3, [pc, #636]	; (800445c <moveGyroPID+0x63c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b10      	cmp	r3, #16
 80041ea:	d118      	bne.n	800421e <moveGyroPID+0x3fe>
				if (leftTick < leftTick_prev)
 80041ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80041f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041f4:	429a      	cmp	r2, r3
 80041f6:	da07      	bge.n	8004208 <moveGyroPID+0x3e8>
					diffLeft = leftTick_prev - leftTick;
 80041f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004206:	e022      	b.n	800424e <moveGyroPID+0x42e>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8004208:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800420c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004210:	33ff      	adds	r3, #255	; 0xff
 8004212:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004216:	4413      	add	r3, r2
 8004218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800421c:	e017      	b.n	800424e <moveGyroPID+0x42e>
			} else {
				if (leftTick > leftTick_prev)
 800421e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004222:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004226:	429a      	cmp	r2, r3
 8004228:	dd07      	ble.n	800423a <moveGyroPID+0x41a>
					diffLeft = leftTick - leftTick_prev;
 800422a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800422e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004238:	e009      	b.n	800424e <moveGyroPID+0x42e>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 800423a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800423e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004242:	33ff      	adds	r3, #255	; 0xff
 8004244:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004248:	4413      	add	r3, r2
 800424a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 800424e:	4b84      	ldr	r3, [pc, #528]	; (8004460 <moveGyroPID+0x640>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2b10      	cmp	r3, #16
 800425a:	d118      	bne.n	800428e <moveGyroPID+0x46e>
				if (rightTick < rightTick_prev)
 800425c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004260:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004264:	429a      	cmp	r2, r3
 8004266:	da07      	bge.n	8004278 <moveGyroPID+0x458>
					diffRight = rightTick_prev - rightTick;
 8004268:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800426c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004276:	e022      	b.n	80042be <moveGyroPID+0x49e>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 8004278:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800427c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004280:	33ff      	adds	r3, #255	; 0xff
 8004282:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004286:	4413      	add	r3, r2
 8004288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800428c:	e017      	b.n	80042be <moveGyroPID+0x49e>
			} else {
				if (rightTick > rightTick_prev)
 800428e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004292:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004296:	429a      	cmp	r2, r3
 8004298:	dd07      	ble.n	80042aa <moveGyroPID+0x48a>
					diffRight = rightTick - rightTick_prev;
 800429a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800429e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042a8:	e009      	b.n	80042be <moveGyroPID+0x49e>
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 80042aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042ae:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80042b2:	33ff      	adds	r3, #255	; 0xff
 80042b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80042b8:	4413      	add	r3, r2
 80042ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 80042be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80042ca:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80042ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042d2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80042d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042da:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
					* wheel_circumference;
			totalDistance_left += distLeft;
 80042de:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80042e2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80042e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ea:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 80042ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80042fa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80042fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004302:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800430a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
					* wheel_circumference;
			totalDistance_right += distRight;
 800430e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004312:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8004316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800431a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
			// 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.

#define pwmValAadjust 300;
#define pwmValBadjust 525;

			if (forward) {
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d030      	beq.n	8004386 <moveGyroPID+0x566>

				pwmValA = PIDController_Update(&pidLeft,
 8004324:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8004328:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8004464 <moveGyroPID+0x644>
 800432c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004330:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8004334:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004338:	4611      	mov	r1, r2
 800433a:	edd7 0a2e 	vldr	s1, [r7, #184]	; 0xb8
 800433e:	eeb0 0a67 	vmov.f32	s0, s15
 8004342:	4618      	mov	r0, r3
 8004344:	f002 fa2a 	bl	800679c <PIDController_Update>
 8004348:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF,
						totalDistance_left, pwmValA) - pwmValAadjust
 800434a:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft,
 800434c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004350:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
				;

				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8004354:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8004358:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8004464 <moveGyroPID+0x644>
 800435c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004360:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8004364:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004368:	4611      	mov	r1, r2
 800436a:	eef0 0a67 	vmov.f32	s1, s15
 800436e:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 8004372:	4618      	mov	r0, r3
 8004374:	f002 fa12 	bl	800679c <PIDController_Update>
 8004378:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF, pwmValC)
						+ pwmValBadjust
 800437a:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 800437c:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8004380:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8004384:	e02f      	b.n	80043e6 <moveGyroPID+0x5c6>
				;
			} else {
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8004386:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800438a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004468 <moveGyroPID+0x648>
 800438e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004392:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8004396:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800439a:	4611      	mov	r1, r2
 800439c:	eef0 0a67 	vmov.f32	s1, s15
 80043a0:	ed97 0a2d 	vldr	s0, [r7, #180]	; 0xb4
 80043a4:	4618      	mov	r0, r3
 80043a6:	f002 f9f9 	bl	800679c <PIDController_Update>
 80043aa:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR, pwmValA)
						- pwmValAadjust
 80043ac:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 80043ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043b2:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
				;

				pwmValC = PIDController_Update(&pidRight,
 80043b6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80043ba:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004468 <moveGyroPID+0x648>
 80043be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043c2:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80043c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043ca:	4611      	mov	r1, r2
 80043cc:	edd7 0a2d 	vldr	s1, [r7, #180]	; 0xb4
 80043d0:	eeb0 0a67 	vmov.f32	s0, s15
 80043d4:	4618      	mov	r0, r3
 80043d6:	f002 f9e1 	bl	800679c <PIDController_Update>
 80043da:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR,
						totalDistance_right, pwmValC) + pwmValBadjust
 80043dc:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight,
 80043de:	f203 230d 	addw	r3, r3, #525	; 0x20d
 80043e2:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
				;
			}

			if (forward) {
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d03f      	beq.n	800446c <moveGyroPID+0x64c>

				pwmValA = PIDController_Update(&pidLeft,
 80043ec:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80043f0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004464 <moveGyroPID+0x644>
 80043f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043f8:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 80043fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004400:	4611      	mov	r1, r2
 8004402:	edd7 0a2e 	vldr	s1, [r7, #184]	; 0xb8
 8004406:	eeb0 0a67 	vmov.f32	s0, s15
 800440a:	4618      	mov	r0, r3
 800440c:	f002 f9c6 	bl	800679c <PIDController_Update>
 8004410:	4603      	mov	r3, r0
 8004412:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
						totalDistance_right * STRAIGHTRATIOF,
						totalDistance_left, pwmValA);

				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8004416:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800441a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004464 <moveGyroPID+0x644>
 800441e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004422:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8004426:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800442a:	4611      	mov	r1, r2
 800442c:	eef0 0a67 	vmov.f32	s1, s15
 8004430:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 8004434:	4618      	mov	r0, r3
 8004436:	f002 f9b1 	bl	800679c <PIDController_Update>
 800443a:	4603      	mov	r3, r0
 800443c:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8004440:	e03e      	b.n	80044c0 <moveGyroPID+0x6a0>
 8004442:	bf00      	nop
 8004444:	f3af 8000 	nop.w
 8004448:	cccccccd 	.word	0xcccccccd
 800444c:	3feccccc 	.word	0x3feccccc
 8004450:	3e19999a 	.word	0x3e19999a
 8004454:	20000378 	.word	0x20000378
 8004458:	20000414 	.word	0x20000414
 800445c:	200002a0 	.word	0x200002a0
 8004460:	20000330 	.word	0x20000330
 8004464:	3f83f7cf 	.word	0x3f83f7cf
 8004468:	3f81b717 	.word	0x3f81b717
						totalDistance_right * STRAIGHTRATIOF, pwmValC);
			} else {
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 800446c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004470:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8004468 <moveGyroPID+0x648>
 8004474:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004478:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 800447c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004480:	4611      	mov	r1, r2
 8004482:	eef0 0a67 	vmov.f32	s1, s15
 8004486:	ed97 0a2d 	vldr	s0, [r7, #180]	; 0xb4
 800448a:	4618      	mov	r0, r3
 800448c:	f002 f986 	bl	800679c <PIDController_Update>
 8004490:	4603      	mov	r3, r0
 8004492:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
						totalDistance_left * STRAIGHTRATIOR, pwmValA);

				pwmValC = PIDController_Update(&pidRight,
 8004496:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800449a:	ed1f 7a0d 	vldr	s14, [pc, #-52]	; 8004468 <moveGyroPID+0x648>
 800449e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044a2:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80044a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044aa:	4611      	mov	r1, r2
 80044ac:	edd7 0a2d 	vldr	s1, [r7, #180]	; 0xb4
 80044b0:	eeb0 0a67 	vmov.f32	s0, s15
 80044b4:	4618      	mov	r0, r3
 80044b6:	f002 f971 	bl	800679c <PIDController_Update>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
						totalDistance_left * STRAIGHTRATIOR,
						totalDistance_right, pwmValC);
			}

			distanceError = distErrOffset * distance;
 80044c0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80044c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80044c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044cc:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (forward) {
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d024      	beq.n	8004520 <moveGyroPID+0x700>
				if (actualAngle < -0.33) //veering right
 80044d6:	4b54      	ldr	r3, [pc, #336]	; (8004628 <moveGyroPID+0x808>)
 80044d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044dc:	a34e      	add	r3, pc, #312	; (adr r3, 8004618 <moveGyroPID+0x7f8>)
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f7fc fafb 	bl	8000adc <__aeabi_dcmplt>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d004      	beq.n	80044f6 <moveGyroPID+0x6d6>
						{

					htim1.Instance->CCR4 = 138; //left abit. prev: 138
 80044ec:	4b4f      	ldr	r3, [pc, #316]	; (800462c <moveGyroPID+0x80c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	228a      	movs	r2, #138	; 0x8a
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
 80044f4:	e038      	b.n	8004568 <moveGyroPID+0x748>
				} else if (actualAngle > 0.33) //veering left
 80044f6:	4b4c      	ldr	r3, [pc, #304]	; (8004628 <moveGyroPID+0x808>)
 80044f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044fc:	a348      	add	r3, pc, #288	; (adr r3, 8004620 <moveGyroPID+0x800>)
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	f7fc fb09 	bl	8000b18 <__aeabi_dcmpgt>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d004      	beq.n	8004516 <moveGyroPID+0x6f6>
						{

					htim1.Instance->CCR4 = 155; //right a bit. prev: 152
 800450c:	4b47      	ldr	r3, [pc, #284]	; (800462c <moveGyroPID+0x80c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	229b      	movs	r2, #155	; 0x9b
 8004512:	641a      	str	r2, [r3, #64]	; 0x40
 8004514:	e028      	b.n	8004568 <moveGyroPID+0x748>
				} else {
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 8004516:	4b45      	ldr	r3, [pc, #276]	; (800462c <moveGyroPID+0x80c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2295      	movs	r2, #149	; 0x95
 800451c:	641a      	str	r2, [r3, #64]	; 0x40
 800451e:	e023      	b.n	8004568 <moveGyroPID+0x748>
				}

			} else {
				if (actualAngle > 0.33) //veering left
 8004520:	4b41      	ldr	r3, [pc, #260]	; (8004628 <moveGyroPID+0x808>)
 8004522:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004526:	a33e      	add	r3, pc, #248	; (adr r3, 8004620 <moveGyroPID+0x800>)
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	f7fc faf4 	bl	8000b18 <__aeabi_dcmpgt>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d004      	beq.n	8004540 <moveGyroPID+0x720>
						{
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = 138; //left abit
 8004536:	4b3d      	ldr	r3, [pc, #244]	; (800462c <moveGyroPID+0x80c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	228a      	movs	r2, #138	; 0x8a
 800453c:	641a      	str	r2, [r3, #64]	; 0x40
 800453e:	e013      	b.n	8004568 <moveGyroPID+0x748>
				} else if (actualAngle < -0.33) //veering right
 8004540:	4b39      	ldr	r3, [pc, #228]	; (8004628 <moveGyroPID+0x808>)
 8004542:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004546:	a334      	add	r3, pc, #208	; (adr r3, 8004618 <moveGyroPID+0x7f8>)
 8004548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454c:	f7fc fac6 	bl	8000adc <__aeabi_dcmplt>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d004      	beq.n	8004560 <moveGyroPID+0x740>
						{
//					 servo = STRAIGHT;
					htim1.Instance->CCR4 = 155; //right a bit
 8004556:	4b35      	ldr	r3, [pc, #212]	; (800462c <moveGyroPID+0x80c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	229b      	movs	r2, #155	; 0x9b
 800455c:	641a      	str	r2, [r3, #64]	; 0x40
 800455e:	e003      	b.n	8004568 <moveGyroPID+0x748>
				} else {
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 8004560:	4b32      	ldr	r3, [pc, #200]	; (800462c <moveGyroPID+0x80c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2295      	movs	r2, #149	; 0x95
 8004566:	641a      	str	r2, [r3, #64]	; 0x40
				}
			}
			osDelay(10);
 8004568:	200a      	movs	r0, #10
 800456a:	f008 ffd0 	bl	800d50e <osDelay>

			if (totalDistance_left >= (distance + distanceError)
 800456e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004572:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800457a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800457e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004586:	da0c      	bge.n	80045a2 <moveGyroPID+0x782>
					|| totalDistance_right >= (distance + distanceError)) {
 8004588:	ed97 7a01 	vldr	s14, [r7, #4]
 800458c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004594:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800459c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a0:	db0c      	blt.n	80045bc <moveGyroPID+0x79c>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 80045a2:	4b23      	ldr	r3, [pc, #140]	; (8004630 <moveGyroPID+0x810>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2200      	movs	r2, #0
 80045a8:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 80045aa:	4b21      	ldr	r3, [pc, #132]	; (8004630 <moveGyroPID+0x810>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	63da      	str	r2, [r3, #60]	; 0x3c
				htim1.Instance->CCR4 = STRAIGHT; //centre
 80045b2:	4b1e      	ldr	r3, [pc, #120]	; (800462c <moveGyroPID+0x80c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2295      	movs	r2, #149	; 0x95
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40
//				sprintf(messageB, "SRight: %2d\0", pwmValC);
//				OLED_ShowString(10, 40, messageB);
//				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
//				OLED_ShowString(10, 50, messageB);
//				OLED_Refresh_Gram();
				break;
 80045ba:	e00c      	b.n	80045d6 <moveGyroPID+0x7b6>
//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
//			OLED_ShowString(10, 30, messageA);
//			sprintf(messageB, "SRight: %2d\0", diffRight);
//			OLED_ShowString(10, 40, messageB);

			prevTime = currTime;
 80045bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			leftTick_prev = leftTick;
 80045c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			rightTick_prev = rightTick;
 80045cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		if (totalDistance_left >= (distance + distanceError) * 0.9
 80045d4:	e597      	b.n	8004106 <moveGyroPID+0x2e6>
		}
	}
//	moving = 0;
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80045d6:	2201      	movs	r2, #1
 80045d8:	2108      	movs	r1, #8
 80045da:	4816      	ldr	r0, [pc, #88]	; (8004634 <moveGyroPID+0x814>)
 80045dc:	f003 f92e 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80045e0:	2200      	movs	r2, #0
 80045e2:	2104      	movs	r1, #4
 80045e4:	4813      	ldr	r0, [pc, #76]	; (8004634 <moveGyroPID+0x814>)
 80045e6:	f003 f929 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80045ea:	2201      	movs	r2, #1
 80045ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045f0:	4811      	ldr	r0, [pc, #68]	; (8004638 <moveGyroPID+0x818>)
 80045f2:	f003 f923 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80045f6:	2200      	movs	r2, #0
 80045f8:	2120      	movs	r1, #32
 80045fa:	4810      	ldr	r0, [pc, #64]	; (800463c <moveGyroPID+0x81c>)
 80045fc:	f003 f91e 	bl	800783c <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8004600:	4b0a      	ldr	r3, [pc, #40]	; (800462c <moveGyroPID+0x80c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2295      	movs	r2, #149	; 0x95
 8004606:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8004608:	200a      	movs	r0, #10
 800460a:	f008 ff80 	bl	800d50e <osDelay>
	return;
 800460e:	bf00      	nop
}
 8004610:	37c8      	adds	r7, #200	; 0xc8
 8004612:	46bd      	mov	sp, r7
 8004614:	bdb0      	pop	{r4, r5, r7, pc}
 8004616:	bf00      	nop
 8004618:	51eb851f 	.word	0x51eb851f
 800461c:	bfd51eb8 	.word	0xbfd51eb8
 8004620:	51eb851f 	.word	0x51eb851f
 8004624:	3fd51eb8 	.word	0x3fd51eb8
 8004628:	20000420 	.word	0x20000420
 800462c:	20000258 	.word	0x20000258
 8004630:	20000378 	.word	0x20000378
 8004634:	40020000 	.word	0x40020000
 8004638:	40021000 	.word	0x40021000
 800463c:	40020800 	.word	0x40020800

08004640 <moveGyroPIDOld>:

// this is without the drastic servo movement
void moveGyroPIDOld(float distance, int forward) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b0b2      	sub	sp, #200	; 0xc8
 8004644:	af00      	add	r7, sp, #0
 8004646:	ed87 0a01 	vstr	s0, [r7, #4]
 800464a:	6038      	str	r0, [r7, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800464c:	2100      	movs	r1, #0
 800464e:	48bc      	ldr	r0, [pc, #752]	; (8004940 <moveGyroPIDOld+0x300>)
 8004650:	f006 f9aa 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004654:	2108      	movs	r1, #8
 8004656:	48ba      	ldr	r0, [pc, #744]	; (8004940 <moveGyroPIDOld+0x300>)
 8004658:	f006 f9a6 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800465c:	210c      	movs	r1, #12
 800465e:	48b9      	ldr	r0, [pc, #740]	; (8004944 <moveGyroPIDOld+0x304>)
 8004660:	f006 f9a2 	bl	800a9a8 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8004664:	4bb7      	ldr	r3, [pc, #732]	; (8004944 <moveGyroPIDOld+0x304>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2295      	movs	r2, #149	; 0x95
 800466a:	641a      	str	r2, [r3, #64]	; 0x40

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 800466c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004670:	2224      	movs	r2, #36	; 0x24
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f00b fca1 	bl	800ffbc <memset>
 800467a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800467e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004680:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8004684:	663b      	str	r3, [r7, #96]	; 0x60
 8004686:	f640 3354 	movw	r3, #2900	; 0xb54
 800468a:	667b      	str	r3, [r7, #100]	; 0x64
 800468c:	4bae      	ldr	r3, [pc, #696]	; (8004948 <moveGyroPIDOld+0x308>)
 800468e:	66bb      	str	r3, [r7, #104]	; 0x68
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8004690:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004694:	2224      	movs	r2, #36	; 0x24
 8004696:	2100      	movs	r1, #0
 8004698:	4618      	mov	r0, r3
 800469a:	f00b fc8f 	bl	800ffbc <memset>
 800469e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80046a2:	637b      	str	r3, [r7, #52]	; 0x34
 80046a4:	f240 53aa 	movw	r3, #1450	; 0x5aa
 80046a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046aa:	f640 3354 	movw	r3, #2900	; 0xb54
 80046ae:	643b      	str	r3, [r7, #64]	; 0x40
 80046b0:	4ba5      	ldr	r3, [pc, #660]	; (8004948 <moveGyroPIDOld+0x308>)
 80046b2:	647b      	str	r3, [r7, #68]	; 0x44
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 80046b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046b8:	4618      	mov	r0, r3
 80046ba:	f002 f857 	bl	800676c <PIDController_Init>
	PIDController_Init(&pidRight);
 80046be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046c2:	4618      	mov	r0, r3
 80046c4:	f002 f852 	bl	800676c <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 80046c8:	4ba0      	ldr	r3, [pc, #640]	; (800494c <moveGyroPIDOld+0x30c>)
 80046ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float wheel_rotationTicksR = 779; // for back right wheel
 80046ce:	4ba0      	ldr	r3, [pc, #640]	; (8004950 <moveGyroPIDOld+0x310>)
 80046d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	float wheel_circumference = 21.1f; // NEED TO MEASURE AND CHANGE
 80046d4:	4b9f      	ldr	r3, [pc, #636]	; (8004954 <moveGyroPIDOld+0x314>)
 80046d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 80046da:	213c      	movs	r1, #60	; 0x3c
 80046dc:	489e      	ldr	r0, [pc, #632]	; (8004958 <moveGyroPIDOld+0x318>)
 80046de:	f006 fc49 	bl	800af74 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 80046e2:	213c      	movs	r1, #60	; 0x3c
 80046e4:	489d      	ldr	r0, [pc, #628]	; (800495c <moveGyroPIDOld+0x31c>)
 80046e6:	f006 fc45 	bl	800af74 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80046ea:	4b9b      	ldr	r3, [pc, #620]	; (8004958 <moveGyroPIDOld+0x318>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 80046f4:	4b99      	ldr	r3, [pc, #612]	; (800495c <moveGyroPIDOld+0x31c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 80046fe:	f002 fd1f 	bl	8007140 <HAL_GetTick>
 8004702:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	uint32_t prevTime = startTime;
 8004706:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800470a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float totalDistance_right = 0;
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int diffRight = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 800472a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800472e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint16_t pwmValC = 2000 * STRAIGHTRATIOF;
 8004732:	f640 030e 	movw	r3, #2062	; 0x80e
 8004736:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if (forward) {
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d015      	beq.n	800476c <moveGyroPIDOld+0x12c>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004740:	2201      	movs	r2, #1
 8004742:	2108      	movs	r1, #8
 8004744:	4886      	ldr	r0, [pc, #536]	; (8004960 <moveGyroPIDOld+0x320>)
 8004746:	f003 f879 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800474a:	2200      	movs	r2, #0
 800474c:	2104      	movs	r1, #4
 800474e:	4884      	ldr	r0, [pc, #528]	; (8004960 <moveGyroPIDOld+0x320>)
 8004750:	f003 f874 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004754:	2201      	movs	r2, #1
 8004756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800475a:	4882      	ldr	r0, [pc, #520]	; (8004964 <moveGyroPIDOld+0x324>)
 800475c:	f003 f86e 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004760:	2200      	movs	r2, #0
 8004762:	2120      	movs	r1, #32
 8004764:	4880      	ldr	r0, [pc, #512]	; (8004968 <moveGyroPIDOld+0x328>)
 8004766:	f003 f869 	bl	800783c <HAL_GPIO_WritePin>
 800476a:	e014      	b.n	8004796 <moveGyroPIDOld+0x156>
	} else {
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800476c:	2200      	movs	r2, #0
 800476e:	2108      	movs	r1, #8
 8004770:	487b      	ldr	r0, [pc, #492]	; (8004960 <moveGyroPIDOld+0x320>)
 8004772:	f003 f863 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8004776:	2201      	movs	r2, #1
 8004778:	2104      	movs	r1, #4
 800477a:	4879      	ldr	r0, [pc, #484]	; (8004960 <moveGyroPIDOld+0x320>)
 800477c:	f003 f85e 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8004780:	2200      	movs	r2, #0
 8004782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004786:	4877      	ldr	r0, [pc, #476]	; (8004964 <moveGyroPIDOld+0x324>)
 8004788:	f003 f858 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 800478c:	2201      	movs	r2, #1
 800478e:	2120      	movs	r1, #32
 8004790:	4875      	ldr	r0, [pc, #468]	; (8004968 <moveGyroPIDOld+0x328>)
 8004792:	f003 f853 	bl	800783c <HAL_GPIO_WritePin>
	}

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004796:	4b6a      	ldr	r3, [pc, #424]	; (8004940 <moveGyroPIDOld+0x300>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800479e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 80047a0:	4b67      	ldr	r3, [pc, #412]	; (8004940 <moveGyroPIDOld+0x300>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 80047a8:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 80047aa:	f002 fcc9 	bl	8007140 <HAL_GetTick>
 80047ae:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		moving = 1;
 80047b2:	4b6e      	ldr	r3, [pc, #440]	; (800496c <moveGyroPIDOld+0x32c>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 80047b8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80047bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b3c      	cmp	r3, #60	; 0x3c
 80047c4:	d9e7      	bls.n	8004796 <moveGyroPIDOld+0x156>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 80047c6:	4b64      	ldr	r3, [pc, #400]	; (8004958 <moveGyroPIDOld+0x318>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 80047d0:	4b62      	ldr	r3, [pc, #392]	; (800495c <moveGyroPIDOld+0x31c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

			diffLeft = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			diffRight = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80047e6:	4b5c      	ldr	r3, [pc, #368]	; (8004958 <moveGyroPIDOld+0x318>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d118      	bne.n	8004826 <moveGyroPIDOld+0x1e6>
				if (leftTick < leftTick_prev)
 80047f4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80047f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047fc:	429a      	cmp	r2, r3
 80047fe:	da07      	bge.n	8004810 <moveGyroPIDOld+0x1d0>
					diffLeft = leftTick_prev - leftTick;
 8004800:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004804:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800480e:	e022      	b.n	8004856 <moveGyroPIDOld+0x216>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8004810:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004814:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004818:	33ff      	adds	r3, #255	; 0xff
 800481a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800481e:	4413      	add	r3, r2
 8004820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004824:	e017      	b.n	8004856 <moveGyroPIDOld+0x216>
			} else {
				if (leftTick > leftTick_prev)
 8004826:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800482a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800482e:	429a      	cmp	r2, r3
 8004830:	dd07      	ble.n	8004842 <moveGyroPIDOld+0x202>
					diffLeft = leftTick - leftTick_prev;
 8004832:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004836:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004840:	e009      	b.n	8004856 <moveGyroPIDOld+0x216>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8004842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004846:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800484a:	33ff      	adds	r3, #255	; 0xff
 800484c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004850:	4413      	add	r3, r2
 8004852:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8004856:	4b41      	ldr	r3, [pc, #260]	; (800495c <moveGyroPIDOld+0x31c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b10      	cmp	r3, #16
 8004862:	d118      	bne.n	8004896 <moveGyroPIDOld+0x256>
				if (rightTick < rightTick_prev)
 8004864:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004868:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800486c:	429a      	cmp	r2, r3
 800486e:	da07      	bge.n	8004880 <moveGyroPIDOld+0x240>
					diffRight = rightTick_prev - rightTick;
 8004870:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004874:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800487e:	e022      	b.n	80048c6 <moveGyroPIDOld+0x286>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 8004880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004884:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004888:	33ff      	adds	r3, #255	; 0xff
 800488a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800488e:	4413      	add	r3, r2
 8004890:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004894:	e017      	b.n	80048c6 <moveGyroPIDOld+0x286>
			} else {
				if (rightTick > rightTick_prev)
 8004896:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800489a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800489e:	429a      	cmp	r2, r3
 80048a0:	dd07      	ble.n	80048b2 <moveGyroPIDOld+0x272>
					diffRight = rightTick - rightTick_prev;
 80048a2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80048a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048b0:	e009      	b.n	80048c6 <moveGyroPIDOld+0x286>
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 80048b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048b6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80048ba:	33ff      	adds	r3, #255	; 0xff
 80048bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80048c0:	4413      	add	r3, r2
 80048c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 80048c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80048d2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80048d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048da:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80048de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					* wheel_circumference;
			totalDistance_left += distLeft;
 80048e6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80048ea:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80048ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048f2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 80048f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004902:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8004906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800490a:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800490e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004912:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
					* wheel_circumference;
			totalDistance_right += distRight;
 8004916:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800491a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800491e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004922:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
//				 pwmValA = PIDController_Update(&pidLeft, totalDistance_right, totalDistance_left*STRAIGHTRATIOR, pwmValA);
//
//				 pwmValC = PIDController_Update(&pidRight, totalDistance_left*STRAIGHTRATIOR, totalDistance_right, pwmValC);
//			 }

			if (forward) {
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d025      	beq.n	8004978 <moveGyroPIDOld+0x338>
				distanceError = DISTANCE_ERROR_OFFSETF * distance;
 800492c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004930:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004970 <moveGyroPIDOld+0x330>
 8004934:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004938:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800493c:	e024      	b.n	8004988 <moveGyroPIDOld+0x348>
 800493e:	bf00      	nop
 8004940:	20000378 	.word	0x20000378
 8004944:	20000258 	.word	0x20000258
 8004948:	3d4ccccd 	.word	0x3d4ccccd
 800494c:	44440000 	.word	0x44440000
 8004950:	4442c000 	.word	0x4442c000
 8004954:	41a8cccd 	.word	0x41a8cccd
 8004958:	200002a0 	.word	0x200002a0
 800495c:	20000330 	.word	0x20000330
 8004960:	40020000 	.word	0x40020000
 8004964:	40021000 	.word	0x40021000
 8004968:	40020800 	.word	0x40020800
 800496c:	20000414 	.word	0x20000414
 8004970:	bcf5c28f 	.word	0xbcf5c28f
 8004974:	3e19999a 	.word	0x3e19999a
			} else {
				distanceError = DISTANCE_ERROR_OFFSETR * distance;
 8004978:	edd7 7a01 	vldr	s15, [r7, #4]
 800497c:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8004974 <moveGyroPIDOld+0x334>
 8004980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004984:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
			}

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (forward) {
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d030      	beq.n	80049f0 <moveGyroPIDOld+0x3b0>
				if (totalAngle < 0.00) //veering right
 800498e:	4b90      	ldr	r3, [pc, #576]	; (8004bd0 <moveGyroPIDOld+0x590>)
 8004990:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	f7fc f89e 	bl	8000adc <__aeabi_dcmplt>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <moveGyroPIDOld+0x36e>
						{

					htim1.Instance->CCR4 = 140; //left abit. prev: 138
 80049a6:	4b8b      	ldr	r3, [pc, #556]	; (8004bd4 <moveGyroPIDOld+0x594>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	228c      	movs	r2, #140	; 0x8c
 80049ac:	641a      	str	r2, [r3, #64]	; 0x40
				}
				if (totalAngle > 0.00) //veering left
 80049ae:	4b88      	ldr	r3, [pc, #544]	; (8004bd0 <moveGyroPIDOld+0x590>)
 80049b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	f7fc f8ac 	bl	8000b18 <__aeabi_dcmpgt>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <moveGyroPIDOld+0x38e>
						{

					htim1.Instance->CCR4 = 155; //right a bit. prev: 152
 80049c6:	4b83      	ldr	r3, [pc, #524]	; (8004bd4 <moveGyroPIDOld+0x594>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	229b      	movs	r2, #155	; 0x9b
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
				}
				if (totalAngle == 0.00) {
 80049ce:	4b80      	ldr	r3, [pc, #512]	; (8004bd0 <moveGyroPIDOld+0x590>)
 80049d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	f7fc f874 	bl	8000ac8 <__aeabi_dcmpeq>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d036      	beq.n	8004a54 <moveGyroPIDOld+0x414>
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 80049e6:	4b7b      	ldr	r3, [pc, #492]	; (8004bd4 <moveGyroPIDOld+0x594>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2295      	movs	r2, #149	; 0x95
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40
 80049ee:	e031      	b.n	8004a54 <moveGyroPIDOld+0x414>
				}

			} else {
				if (totalAngle > 0.00) //veering left
 80049f0:	4b77      	ldr	r3, [pc, #476]	; (8004bd0 <moveGyroPIDOld+0x590>)
 80049f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	f7fc f88b 	bl	8000b18 <__aeabi_dcmpgt>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <moveGyroPIDOld+0x3d0>
						{
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = 140; //left abit
 8004a08:	4b72      	ldr	r3, [pc, #456]	; (8004bd4 <moveGyroPIDOld+0x594>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	228c      	movs	r2, #140	; 0x8c
 8004a0e:	641a      	str	r2, [r3, #64]	; 0x40
				}
				if (totalAngle < 0.00) //veering right
 8004a10:	4b6f      	ldr	r3, [pc, #444]	; (8004bd0 <moveGyroPIDOld+0x590>)
 8004a12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	f7fc f85d 	bl	8000adc <__aeabi_dcmplt>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <moveGyroPIDOld+0x3f4>
						{
					servo = STRAIGHT;
 8004a28:	2395      	movs	r3, #149	; 0x95
 8004a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
					htim1.Instance->CCR4 = 155; //right a bit
 8004a2c:	4b69      	ldr	r3, [pc, #420]	; (8004bd4 <moveGyroPIDOld+0x594>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	229b      	movs	r2, #155	; 0x9b
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40
				}
				if (totalAngle == 0.00) {
 8004a34:	4b66      	ldr	r3, [pc, #408]	; (8004bd0 <moveGyroPIDOld+0x590>)
 8004a36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	f7fc f841 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <moveGyroPIDOld+0x414>
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 8004a4c:	4b61      	ldr	r3, [pc, #388]	; (8004bd4 <moveGyroPIDOld+0x594>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2295      	movs	r2, #149	; 0x95
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40
				}
			}
			osDelay(10);
 8004a54:	200a      	movs	r0, #10
 8004a56:	f008 fd5a 	bl	800d50e <osDelay>
			if (totalDistance_left >= (distance + distanceError)
 8004a5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a5e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a66:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a72:	da0c      	bge.n	8004a8e <moveGyroPIDOld+0x44e>
					|| totalDistance_right >= (distance + distanceError)) {
 8004a74:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a78:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a80:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8c:	db3f      	blt.n	8004b0e <moveGyroPIDOld+0x4ce>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8004a8e:	4b52      	ldr	r3, [pc, #328]	; (8004bd8 <moveGyroPIDOld+0x598>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2200      	movs	r2, #0
 8004a94:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 8004a96:	4b50      	ldr	r3, [pc, #320]	; (8004bd8 <moveGyroPIDOld+0x598>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	63da      	str	r2, [r3, #60]	; 0x3c
//				 moving = 0;
				sprintf(messageA, "dist: %.2f\0", distance);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fb fd52 	bl	8000548 <__aeabi_f2d>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	f107 0020 	add.w	r0, r7, #32
 8004aac:	494b      	ldr	r1, [pc, #300]	; (8004bdc <moveGyroPIDOld+0x59c>)
 8004aae:	f00c f90d 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 10, messageA);
 8004ab2:	f107 0320 	add.w	r3, r7, #32
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	210a      	movs	r1, #10
 8004aba:	200a      	movs	r0, #10
 8004abc:	f001 fd98 	bl	80065f0 <OLED_ShowString>
//				sprintf(messageA, "SLeft: %2d\0", pwmValA);
//				OLED_ShowString(10, 20, messageA);
				sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 8004ac0:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8004ac4:	f7fb fd40 	bl	8000548 <__aeabi_f2d>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	f107 0020 	add.w	r0, r7, #32
 8004ad0:	4943      	ldr	r1, [pc, #268]	; (8004be0 <moveGyroPIDOld+0x5a0>)
 8004ad2:	f00c f8fb 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 30, messageA);
 8004ad6:	f107 0320 	add.w	r3, r7, #32
 8004ada:	461a      	mov	r2, r3
 8004adc:	211e      	movs	r1, #30
 8004ade:	200a      	movs	r0, #10
 8004ae0:	f001 fd86 	bl	80065f0 <OLED_ShowString>
//
//				sprintf(messageB, "SRight: %2d\0", pwmValC);
//				OLED_ShowString(10, 40, messageB);
				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 8004ae4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8004ae8:	f7fb fd2e 	bl	8000548 <__aeabi_f2d>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	f107 000c 	add.w	r0, r7, #12
 8004af4:	493b      	ldr	r1, [pc, #236]	; (8004be4 <moveGyroPIDOld+0x5a4>)
 8004af6:	f00c f8e9 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 50, messageB);
 8004afa:	f107 030c 	add.w	r3, r7, #12
 8004afe:	461a      	mov	r2, r3
 8004b00:	2132      	movs	r1, #50	; 0x32
 8004b02:	200a      	movs	r0, #10
 8004b04:	f001 fd74 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8004b08:	f001 fbfe 	bl	8006308 <OLED_Refresh_Gram>
				break;
 8004b0c:	e043      	b.n	8004b96 <moveGyroPIDOld+0x556>
//			// OLED
//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
//			OLED_ShowString(10, 30, messageA);
//			sprintf(messageB, "SRight: %2d\0", diffRight);
//			OLED_ShowString(10, 40, messageB);
			sprintf(messageA, "dist: %.2f\0", distance);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fb fd1a 	bl	8000548 <__aeabi_f2d>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	f107 0020 	add.w	r0, r7, #32
 8004b1c:	492f      	ldr	r1, [pc, #188]	; (8004bdc <moveGyroPIDOld+0x59c>)
 8004b1e:	f00c f8d5 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 10, messageA);
 8004b22:	f107 0320 	add.w	r3, r7, #32
 8004b26:	461a      	mov	r2, r3
 8004b28:	210a      	movs	r1, #10
 8004b2a:	200a      	movs	r0, #10
 8004b2c:	f001 fd60 	bl	80065f0 <OLED_ShowString>

			sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 8004b30:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8004b34:	f7fb fd08 	bl	8000548 <__aeabi_f2d>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	f107 0020 	add.w	r0, r7, #32
 8004b40:	4927      	ldr	r1, [pc, #156]	; (8004be0 <moveGyroPIDOld+0x5a0>)
 8004b42:	f00c f8c3 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 30, messageA);
 8004b46:	f107 0320 	add.w	r3, r7, #32
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	211e      	movs	r1, #30
 8004b4e:	200a      	movs	r0, #10
 8004b50:	f001 fd4e 	bl	80065f0 <OLED_ShowString>

			sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 8004b54:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8004b58:	f7fb fcf6 	bl	8000548 <__aeabi_f2d>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	f107 000c 	add.w	r0, r7, #12
 8004b64:	491f      	ldr	r1, [pc, #124]	; (8004be4 <moveGyroPIDOld+0x5a4>)
 8004b66:	f00c f8b1 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 50, messageB);
 8004b6a:	f107 030c 	add.w	r3, r7, #12
 8004b6e:	461a      	mov	r2, r3
 8004b70:	2132      	movs	r1, #50	; 0x32
 8004b72:	200a      	movs	r0, #10
 8004b74:	f001 fd3c 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 8004b78:	f001 fbc6 	bl	8006308 <OLED_Refresh_Gram>

			prevTime = currTime;
 8004b7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			leftTick_prev = leftTick;
 8004b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			rightTick_prev = rightTick;
 8004b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004b94:	e5ff      	b.n	8004796 <moveGyroPIDOld+0x156>
		}
	}
//	moving = 0;
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004b96:	2201      	movs	r2, #1
 8004b98:	2108      	movs	r1, #8
 8004b9a:	4813      	ldr	r0, [pc, #76]	; (8004be8 <moveGyroPIDOld+0x5a8>)
 8004b9c:	f002 fe4e 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2104      	movs	r1, #4
 8004ba4:	4810      	ldr	r0, [pc, #64]	; (8004be8 <moveGyroPIDOld+0x5a8>)
 8004ba6:	f002 fe49 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004baa:	2201      	movs	r2, #1
 8004bac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004bb0:	480e      	ldr	r0, [pc, #56]	; (8004bec <moveGyroPIDOld+0x5ac>)
 8004bb2:	f002 fe43 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2120      	movs	r1, #32
 8004bba:	480d      	ldr	r0, [pc, #52]	; (8004bf0 <moveGyroPIDOld+0x5b0>)
 8004bbc:	f002 fe3e 	bl	800783c <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8004bc0:	4b04      	ldr	r3, [pc, #16]	; (8004bd4 <moveGyroPIDOld+0x594>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2295      	movs	r2, #149	; 0x95
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
	return;
 8004bc8:	bf00      	nop
}
 8004bca:	37c8      	adds	r7, #200	; 0xc8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	20000418 	.word	0x20000418
 8004bd4:	20000258 	.word	0x20000258
 8004bd8:	20000378 	.word	0x20000378
 8004bdc:	080148f4 	.word	0x080148f4
 8004be0:	08014900 	.word	0x08014900
 8004be4:	08014910 	.word	0x08014910
 8004be8:	40020000 	.word	0x40020000
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	40020800 	.word	0x40020800

08004bf4 <move>:

void move(float distance, int forward) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b0b0      	sub	sp, #192	; 0xc0
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	ed87 0a01 	vstr	s0, [r7, #4]
 8004bfe:	6038      	str	r0, [r7, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8004c00:	2100      	movs	r1, #0
 8004c02:	48d1      	ldr	r0, [pc, #836]	; (8004f48 <move+0x354>)
 8004c04:	f005 fed0 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004c08:	2108      	movs	r1, #8
 8004c0a:	48cf      	ldr	r0, [pc, #828]	; (8004f48 <move+0x354>)
 8004c0c:	f005 fecc 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004c10:	210c      	movs	r1, #12
 8004c12:	48ce      	ldr	r0, [pc, #824]	; (8004f4c <move+0x358>)
 8004c14:	f005 fec8 	bl	800a9a8 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8004c18:	4bcc      	ldr	r3, [pc, #816]	; (8004f4c <move+0x358>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2295      	movs	r2, #149	; 0x95
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 8004c20:	2064      	movs	r0, #100	; 0x64
 8004c22:	f008 fc74 	bl	800d50e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI, 500, 1500,
 8004c26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c2a:	2224      	movs	r2, #36	; 0x24
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f00b f9c4 	bl	800ffbc <memset>
 8004c34:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004c38:	657b      	str	r3, [r7, #84]	; 0x54
 8004c3a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c40:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004c44:	663b      	str	r3, [r7, #96]	; 0x60
 8004c46:	4bc2      	ldr	r3, [pc, #776]	; (8004f50 <move+0x35c>)
 8004c48:	667b      	str	r3, [r7, #100]	; 0x64
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI, 500, 1500,
 8004c4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c4e:	2224      	movs	r2, #36	; 0x24
 8004c50:	2100      	movs	r1, #0
 8004c52:	4618      	mov	r0, r3
 8004c54:	f00b f9b2 	bl	800ffbc <memset>
 8004c58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c5e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c64:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c6a:	4bb9      	ldr	r3, [pc, #740]	; (8004f50 <move+0x35c>)
 8004c6c:	643b      	str	r3, [r7, #64]	; 0x40
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8004c6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c72:	4618      	mov	r0, r3
 8004c74:	f001 fd7a 	bl	800676c <PIDController_Init>
	PIDController_Init(&pidRight);
 8004c78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f001 fd75 	bl	800676c <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8004c82:	4bb4      	ldr	r3, [pc, #720]	; (8004f54 <move+0x360>)
 8004c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8004c88:	4bb3      	ldr	r3, [pc, #716]	; (8004f58 <move+0x364>)
 8004c8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 8004c8e:	4bb3      	ldr	r3, [pc, #716]	; (8004f5c <move+0x368>)
 8004c90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8004c94:	213c      	movs	r1, #60	; 0x3c
 8004c96:	48b2      	ldr	r0, [pc, #712]	; (8004f60 <move+0x36c>)
 8004c98:	f006 f96c 	bl	800af74 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8004c9c:	213c      	movs	r1, #60	; 0x3c
 8004c9e:	48b1      	ldr	r0, [pc, #708]	; (8004f64 <move+0x370>)
 8004ca0:	f006 f968 	bl	800af74 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8004ca4:	4bae      	ldr	r3, [pc, #696]	; (8004f60 <move+0x36c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8004cae:	4bad      	ldr	r3, [pc, #692]	; (8004f64 <move+0x370>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8004cb8:	f002 fa42 	bl	8007140 <HAL_GetTick>
 8004cbc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 8004cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float totalDistance_right = 0;
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	int diffRight = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8004ce4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004ce8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	uint16_t pwmValC = 2000;
 8004cec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004cf0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if (forward) {
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d015      	beq.n	8004d26 <move+0x132>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	2108      	movs	r1, #8
 8004cfe:	489a      	ldr	r0, [pc, #616]	; (8004f68 <move+0x374>)
 8004d00:	f002 fd9c 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004d04:	2200      	movs	r2, #0
 8004d06:	2104      	movs	r1, #4
 8004d08:	4897      	ldr	r0, [pc, #604]	; (8004f68 <move+0x374>)
 8004d0a:	f002 fd97 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d14:	4895      	ldr	r0, [pc, #596]	; (8004f6c <move+0x378>)
 8004d16:	f002 fd91 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2120      	movs	r1, #32
 8004d1e:	4894      	ldr	r0, [pc, #592]	; (8004f70 <move+0x37c>)
 8004d20:	f002 fd8c 	bl	800783c <HAL_GPIO_WritePin>
 8004d24:	e014      	b.n	8004d50 <move+0x15c>
	} else {
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8004d26:	2200      	movs	r2, #0
 8004d28:	2108      	movs	r1, #8
 8004d2a:	488f      	ldr	r0, [pc, #572]	; (8004f68 <move+0x374>)
 8004d2c:	f002 fd86 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8004d30:	2201      	movs	r2, #1
 8004d32:	2104      	movs	r1, #4
 8004d34:	488c      	ldr	r0, [pc, #560]	; (8004f68 <move+0x374>)
 8004d36:	f002 fd81 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d40:	488a      	ldr	r0, [pc, #552]	; (8004f6c <move+0x378>)
 8004d42:	f002 fd7b 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8004d46:	2201      	movs	r2, #1
 8004d48:	2120      	movs	r1, #32
 8004d4a:	4889      	ldr	r0, [pc, #548]	; (8004f70 <move+0x37c>)
 8004d4c:	f002 fd76 	bl	800783c <HAL_GPIO_WritePin>
	}

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004d50:	4b7d      	ldr	r3, [pc, #500]	; (8004f48 <move+0x354>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004d58:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8004d5a:	4b7b      	ldr	r3, [pc, #492]	; (8004f48 <move+0x354>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004d62:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 8004d64:	f002 f9ec 	bl	8007140 <HAL_GetTick>
 8004d68:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		moving = 1;
 8004d6c:	4b81      	ldr	r3, [pc, #516]	; (8004f74 <move+0x380>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 8004d72:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004d76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b3c      	cmp	r3, #60	; 0x3c
 8004d7e:	d9e7      	bls.n	8004d50 <move+0x15c>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8004d80:	4b77      	ldr	r3, [pc, #476]	; (8004f60 <move+0x36c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8004d8a:	4b76      	ldr	r3, [pc, #472]	; (8004f64 <move+0x370>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			diffLeft = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			diffRight = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8004da0:	4b6f      	ldr	r3, [pc, #444]	; (8004f60 <move+0x36c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0310 	and.w	r3, r3, #16
 8004daa:	2b10      	cmp	r3, #16
 8004dac:	d118      	bne.n	8004de0 <move+0x1ec>
				if (leftTick < leftTick_prev)
 8004dae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004db2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004db6:	429a      	cmp	r2, r3
 8004db8:	da07      	bge.n	8004dca <move+0x1d6>
					diffLeft = leftTick_prev - leftTick;
 8004dba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004dbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004dc8:	e022      	b.n	8004e10 <move+0x21c>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8004dca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dce:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004dd2:	33ff      	adds	r3, #255	; 0xff
 8004dd4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004dd8:	4413      	add	r3, r2
 8004dda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004dde:	e017      	b.n	8004e10 <move+0x21c>
			} else {
				if (leftTick > leftTick_prev)
 8004de0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004de4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004de8:	429a      	cmp	r2, r3
 8004dea:	dd07      	ble.n	8004dfc <move+0x208>
					diffLeft = leftTick - leftTick_prev;
 8004dec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004df0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004dfa:	e009      	b.n	8004e10 <move+0x21c>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8004dfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e00:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004e04:	33ff      	adds	r3, #255	; 0xff
 8004e06:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8004e10:	4b54      	ldr	r3, [pc, #336]	; (8004f64 <move+0x370>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b10      	cmp	r3, #16
 8004e1c:	d118      	bne.n	8004e50 <move+0x25c>
				if (rightTick < rightTick_prev)
 8004e1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e26:	429a      	cmp	r2, r3
 8004e28:	da07      	bge.n	8004e3a <move+0x246>
					diffRight = rightTick_prev - rightTick;
 8004e2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004e38:	e022      	b.n	8004e80 <move+0x28c>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 8004e3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e3e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004e42:	33ff      	adds	r3, #255	; 0xff
 8004e44:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e48:	4413      	add	r3, r2
 8004e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004e4e:	e017      	b.n	8004e80 <move+0x28c>
			} else {
				if (rightTick > rightTick_prev)
 8004e50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	dd07      	ble.n	8004e6c <move+0x278>
					diffRight = rightTick - rightTick_prev;
 8004e5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004e6a:	e009      	b.n	8004e80 <move+0x28c>
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8004e6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e70:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004e74:	33ff      	adds	r3, #255	; 0xff
 8004e76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8004e80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e84:	ee07 3a90 	vmov	s15, r3
 8004e88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e8c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e94:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8004e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
					* wheel_circumference;
			totalDistance_left += distLeft;
 8004ea0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004ea4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8004ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eac:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8004eb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004eb4:	ee07 3a90 	vmov	s15, r3
 8004eb8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ebc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8004ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ecc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_right += distRight;
 8004ed0:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8004ed4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004edc:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
			// 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.

#define pwmValAadjust 300;
#define pwmValBadjust 525;

			if (forward) {
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d050      	beq.n	8004f88 <move+0x394>

				pwmValA = PIDController_Update(&pidLeft,
 8004ee6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004eea:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004f78 <move+0x384>
 8004eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ef2:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004ef6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004efa:	4611      	mov	r1, r2
 8004efc:	edd7 0a2c 	vldr	s1, [r7, #176]	; 0xb0
 8004f00:	eeb0 0a67 	vmov.f32	s0, s15
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 fc49 	bl	800679c <PIDController_Update>
 8004f0a:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF,
						totalDistance_left, pwmValA) - pwmValAadjust
 8004f0c:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft,
 8004f0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f12:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
				;

				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8004f16:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004f1a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004f78 <move+0x384>
 8004f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f22:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	eef0 0a67 	vmov.f32	s1, s15
 8004f30:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f001 fc31 	bl	800679c <PIDController_Update>
 8004f3a:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF, pwmValC)
						+ pwmValBadjust
 8004f3c:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8004f3e:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8004f42:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8004f46:	e04f      	b.n	8004fe8 <move+0x3f4>
 8004f48:	20000378 	.word	0x20000378
 8004f4c:	20000258 	.word	0x20000258
 8004f50:	3d4ccccd 	.word	0x3d4ccccd
 8004f54:	44440000 	.word	0x44440000
 8004f58:	4442c000 	.word	0x4442c000
 8004f5c:	41b33333 	.word	0x41b33333
 8004f60:	200002a0 	.word	0x200002a0
 8004f64:	20000330 	.word	0x20000330
 8004f68:	40020000 	.word	0x40020000
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	40020800 	.word	0x40020800
 8004f74:	20000414 	.word	0x20000414
 8004f78:	3f83f7cf 	.word	0x3f83f7cf
 8004f7c:	3f81b717 	.word	0x3f81b717
 8004f80:	bcf5c28f 	.word	0xbcf5c28f
 8004f84:	3e19999a 	.word	0x3e19999a
				;
			} else {
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8004f88:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004f8c:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8004f7c <move+0x388>
 8004f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f94:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004f98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	eef0 0a67 	vmov.f32	s1, s15
 8004fa2:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f001 fbf8 	bl	800679c <PIDController_Update>
 8004fac:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR, pwmValA)
						- pwmValAadjust
 8004fae:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8004fb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fb4:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
				;

				pwmValC = PIDController_Update(&pidRight,
 8004fb8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004fbc:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8004f7c <move+0x388>
 8004fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fc4:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004fc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fcc:	4611      	mov	r1, r2
 8004fce:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 8004fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f001 fbe0 	bl	800679c <PIDController_Update>
 8004fdc:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR,
						totalDistance_right, pwmValC) + pwmValBadjust
 8004fde:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight,
 8004fe0:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8004fe4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
				;
			}

			if (forward) {
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d008      	beq.n	8005000 <move+0x40c>
				distanceError = DISTANCE_ERROR_OFFSETF * distance;
 8004fee:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ff2:	ed1f 7a1d 	vldr	s14, [pc, #-116]	; 8004f80 <move+0x38c>
 8004ff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ffa:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8004ffe:	e007      	b.n	8005010 <move+0x41c>
			} else {
				distanceError = DISTANCE_ERROR_OFFSETR * distance;
 8005000:	edd7 7a01 	vldr	s15, [r7, #4]
 8005004:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 8004f84 <move+0x390>
 8005008:	ee67 7a87 	vmul.f32	s15, s15, s14
 800500c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
			}

			if (totalDistance_left >= (distance + distanceError)
 8005010:	ed97 7a01 	vldr	s14, [r7, #4]
 8005014:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800501c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005028:	da0c      	bge.n	8005044 <move+0x450>
					|| totalDistance_right >= (distance + distanceError)) {
 800502a:	ed97 7a01 	vldr	s14, [r7, #4]
 800502e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005036:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800503a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800503e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005042:	db60      	blt.n	8005106 <move+0x512>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8005044:	4b48      	ldr	r3, [pc, #288]	; (8005168 <move+0x574>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2200      	movs	r2, #0
 800504a:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 800504c:	4b46      	ldr	r3, [pc, #280]	; (8005168 <move+0x574>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2200      	movs	r2, #0
 8005052:	63da      	str	r2, [r3, #60]	; 0x3c
				moving = 0;
 8005054:	4b45      	ldr	r3, [pc, #276]	; (800516c <move+0x578>)
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]
				sprintf(messageA, "dist: %.2f\0", distance);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fb fa74 	bl	8000548 <__aeabi_f2d>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	f107 001c 	add.w	r0, r7, #28
 8005068:	4941      	ldr	r1, [pc, #260]	; (8005170 <move+0x57c>)
 800506a:	f00b fe2f 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 10, messageA);
 800506e:	f107 031c 	add.w	r3, r7, #28
 8005072:	461a      	mov	r2, r3
 8005074:	210a      	movs	r1, #10
 8005076:	200a      	movs	r0, #10
 8005078:	f001 faba 	bl	80065f0 <OLED_ShowString>
				sprintf(messageA, "SLeft: %2d\0", pwmValA);
 800507c:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8005080:	f107 031c 	add.w	r3, r7, #28
 8005084:	493b      	ldr	r1, [pc, #236]	; (8005174 <move+0x580>)
 8005086:	4618      	mov	r0, r3
 8005088:	f00b fe20 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 20, messageA);
 800508c:	f107 031c 	add.w	r3, r7, #28
 8005090:	461a      	mov	r2, r3
 8005092:	2114      	movs	r1, #20
 8005094:	200a      	movs	r0, #10
 8005096:	f001 faab 	bl	80065f0 <OLED_ShowString>
				sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 800509a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800509e:	f7fb fa53 	bl	8000548 <__aeabi_f2d>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	f107 001c 	add.w	r0, r7, #28
 80050aa:	4933      	ldr	r1, [pc, #204]	; (8005178 <move+0x584>)
 80050ac:	f00b fe0e 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 30, messageA);
 80050b0:	f107 031c 	add.w	r3, r7, #28
 80050b4:	461a      	mov	r2, r3
 80050b6:	211e      	movs	r1, #30
 80050b8:	200a      	movs	r0, #10
 80050ba:	f001 fa99 	bl	80065f0 <OLED_ShowString>

				sprintf(messageB, "SRight: %2d\0", pwmValC);
 80050be:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80050c2:	f107 0308 	add.w	r3, r7, #8
 80050c6:	492d      	ldr	r1, [pc, #180]	; (800517c <move+0x588>)
 80050c8:	4618      	mov	r0, r3
 80050ca:	f00b fdff 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 40, messageB);
 80050ce:	f107 0308 	add.w	r3, r7, #8
 80050d2:	461a      	mov	r2, r3
 80050d4:	2128      	movs	r1, #40	; 0x28
 80050d6:	200a      	movs	r0, #10
 80050d8:	f001 fa8a 	bl	80065f0 <OLED_ShowString>
				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 80050dc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80050e0:	f7fb fa32 	bl	8000548 <__aeabi_f2d>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	f107 0008 	add.w	r0, r7, #8
 80050ec:	4924      	ldr	r1, [pc, #144]	; (8005180 <move+0x58c>)
 80050ee:	f00b fded 	bl	8010ccc <siprintf>
				OLED_ShowString(10, 50, messageB);
 80050f2:	f107 0308 	add.w	r3, r7, #8
 80050f6:	461a      	mov	r2, r3
 80050f8:	2132      	movs	r1, #50	; 0x32
 80050fa:	200a      	movs	r0, #10
 80050fc:	f001 fa78 	bl	80065f0 <OLED_ShowString>
				OLED_Refresh_Gram();
 8005100:	f001 f902 	bl	8006308 <OLED_Refresh_Gram>
				break;
 8005104:	e00c      	b.n	8005120 <move+0x52c>
//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
//			OLED_ShowString(10, 30, messageA);
//			sprintf(messageB, "SRight: %2d\0", diffRight);
//			OLED_ShowString(10, 40, messageB);

			prevTime = currTime;
 8005106:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800510a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			leftTick_prev = leftTick;
 800510e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005112:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			rightTick_prev = rightTick;
 8005116:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800511a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800511e:	e617      	b.n	8004d50 <move+0x15c>
		}
	}
	moving = 0;
 8005120:	4b12      	ldr	r3, [pc, #72]	; (800516c <move+0x578>)
 8005122:	2200      	movs	r2, #0
 8005124:	701a      	strb	r2, [r3, #0]
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8005126:	2201      	movs	r2, #1
 8005128:	2108      	movs	r1, #8
 800512a:	4816      	ldr	r0, [pc, #88]	; (8005184 <move+0x590>)
 800512c:	f002 fb86 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005130:	2200      	movs	r2, #0
 8005132:	2104      	movs	r1, #4
 8005134:	4813      	ldr	r0, [pc, #76]	; (8005184 <move+0x590>)
 8005136:	f002 fb81 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800513a:	2201      	movs	r2, #1
 800513c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005140:	4811      	ldr	r0, [pc, #68]	; (8005188 <move+0x594>)
 8005142:	f002 fb7b 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005146:	2200      	movs	r2, #0
 8005148:	2120      	movs	r1, #32
 800514a:	4810      	ldr	r0, [pc, #64]	; (800518c <move+0x598>)
 800514c:	f002 fb76 	bl	800783c <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8005150:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <move+0x59c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2295      	movs	r2, #149	; 0x95
 8005156:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8005158:	200a      	movs	r0, #10
 800515a:	f008 f9d8 	bl	800d50e <osDelay>
	return;
 800515e:	bf00      	nop
}
 8005160:	37c0      	adds	r7, #192	; 0xc0
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000378 	.word	0x20000378
 800516c:	20000414 	.word	0x20000414
 8005170:	080148f4 	.word	0x080148f4
 8005174:	08014920 	.word	0x08014920
 8005178:	08014900 	.word	0x08014900
 800517c:	0801492c 	.word	0x0801492c
 8005180:	08014910 	.word	0x08014910
 8005184:	40020000 	.word	0x40020000
 8005188:	40021000 	.word	0x40021000
 800518c:	40020800 	.word	0x40020800
 8005190:	20000258 	.word	0x20000258
 8005194:	00000000 	.word	0x00000000

08005198 <bLeft90>:

void bLeft90() {
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
	// indoor
	totalAngle = 0;
 800519e:	4940      	ldr	r1, [pc, #256]	; (80052a0 <bLeft90+0x108>)
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80051ac:	2100      	movs	r1, #0
 80051ae:	483d      	ldr	r0, [pc, #244]	; (80052a4 <bLeft90+0x10c>)
 80051b0:	f005 fbfa 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80051b4:	2108      	movs	r1, #8
 80051b6:	483b      	ldr	r0, [pc, #236]	; (80052a4 <bLeft90+0x10c>)
 80051b8:	f005 fbf6 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80051bc:	210c      	movs	r1, #12
 80051be:	483a      	ldr	r0, [pc, #232]	; (80052a8 <bLeft90+0x110>)
 80051c0:	f005 fbf2 	bl	800a9a8 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80051c4:	4b38      	ldr	r3, [pc, #224]	; (80052a8 <bLeft90+0x110>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2295      	movs	r2, #149	; 0x95
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40
	moveGyroPID(3.6, 1);
 80051cc:	2001      	movs	r0, #1
 80051ce:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80052ac <bLeft90+0x114>
 80051d2:	f7fe fe25 	bl	8003e20 <moveGyroPID>

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80051d6:	2200      	movs	r2, #0
 80051d8:	2108      	movs	r1, #8
 80051da:	4835      	ldr	r0, [pc, #212]	; (80052b0 <bLeft90+0x118>)
 80051dc:	f002 fb2e 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80051e0:	2201      	movs	r2, #1
 80051e2:	2104      	movs	r1, #4
 80051e4:	4832      	ldr	r0, [pc, #200]	; (80052b0 <bLeft90+0x118>)
 80051e6:	f002 fb29 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 80051ea:	2200      	movs	r2, #0
 80051ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051f0:	4830      	ldr	r0, [pc, #192]	; (80052b4 <bLeft90+0x11c>)
 80051f2:	f002 fb23 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 80051f6:	2201      	movs	r2, #1
 80051f8:	2120      	movs	r1, #32
 80051fa:	482f      	ldr	r0, [pc, #188]	; (80052b8 <bLeft90+0x120>)
 80051fc:	f002 fb1e 	bl	800783c <HAL_GPIO_WritePin>
	moving = 1;
 8005200:	4b2e      	ldr	r3, [pc, #184]	; (80052bc <bLeft90+0x124>)
 8005202:	2201      	movs	r2, #1
 8005204:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 101;
 8005206:	4b28      	ldr	r3, [pc, #160]	; (80052a8 <bLeft90+0x110>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2265      	movs	r2, #101	; 0x65
 800520c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 500);
 800520e:	4b25      	ldr	r3, [pc, #148]	; (80052a4 <bLeft90+0x10c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005216:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2900);
 8005218:	4b22      	ldr	r3, [pc, #136]	; (80052a4 <bLeft90+0x10c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f640 3254 	movw	r2, #2900	; 0xb54
 8005220:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005222:	e017      	b.n	8005254 <bLeft90+0xbc>

		if (totalAngle < -85.5) {
 8005224:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <bLeft90+0x108>)
 8005226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800522a:	a31b      	add	r3, pc, #108	; (adr r3, 8005298 <bLeft90+0x100>)
 800522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005230:	f7fb fc54 	bl	8000adc <__aeabi_dcmplt>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d111      	bne.n	800525e <bLeft90+0xc6>
			break;
		}
		sprintf(messageA, "Langle %5d\0", (int) (totalAngle));
 800523a:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <bLeft90+0x108>)
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	4610      	mov	r0, r2
 8005242:	4619      	mov	r1, r3
 8005244:	f7fb fc88 	bl	8000b58 <__aeabi_d2iz>
 8005248:	4602      	mov	r2, r0
 800524a:	1d3b      	adds	r3, r7, #4
 800524c:	491c      	ldr	r1, [pc, #112]	; (80052c0 <bLeft90+0x128>)
 800524e:	4618      	mov	r0, r3
 8005250:	f00b fd3c 	bl	8010ccc <siprintf>
	while (moving) {
 8005254:	4b19      	ldr	r3, [pc, #100]	; (80052bc <bLeft90+0x124>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e3      	bne.n	8005224 <bLeft90+0x8c>
 800525c:	e000      	b.n	8005260 <bLeft90+0xc8>
			break;
 800525e:	bf00      	nop
		//     OLED_ShowString(10,30, messageA);
		//     OLED_Refresh_Gram();
	}
	//  stop();
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005260:	4b10      	ldr	r3, [pc, #64]	; (80052a4 <bLeft90+0x10c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2200      	movs	r2, #0
 8005266:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005268:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <bLeft90+0x10c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2200      	movs	r2, #0
 800526e:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 8005270:	4b12      	ldr	r3, [pc, #72]	; (80052bc <bLeft90+0x124>)
 8005272:	2200      	movs	r2, #0
 8005274:	701a      	strb	r2, [r3, #0]
	move(0,0);
 8005276:	2000      	movs	r0, #0
 8005278:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80052c4 <bLeft90+0x12c>
 800527c:	f7ff fcba 	bl	8004bf4 <move>
	moveGyroPID(5.3, 0);
 8005280:	2000      	movs	r0, #0
 8005282:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80052c8 <bLeft90+0x130>
 8005286:	f7fe fdcb 	bl	8003e20 <moveGyroPID>
//	//  dir = (dir + 3) % 4 ;
//	//  x += axis[dir][0] * left_90[xydir];
//	//  xydir = (xydir + 1) % 2;
//	//  y += axis[dir][1] * left_90[xydir];

}
 800528a:	bf00      	nop
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	f3af 8000 	nop.w
 8005298:	00000000 	.word	0x00000000
 800529c:	c0556000 	.word	0xc0556000
 80052a0:	20000418 	.word	0x20000418
 80052a4:	20000378 	.word	0x20000378
 80052a8:	20000258 	.word	0x20000258
 80052ac:	40666666 	.word	0x40666666
 80052b0:	40020000 	.word	0x40020000
 80052b4:	40021000 	.word	0x40021000
 80052b8:	40020800 	.word	0x40020800
 80052bc:	20000414 	.word	0x20000414
 80052c0:	0801493c 	.word	0x0801493c
 80052c4:	00000000 	.word	0x00000000
 80052c8:	40a9999a 	.word	0x40a9999a

080052cc <bRight90>:

void bRight90() {
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
	// indoor
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80052d2:	2100      	movs	r1, #0
 80052d4:	483d      	ldr	r0, [pc, #244]	; (80053cc <bRight90+0x100>)
 80052d6:	f005 fb67 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80052da:	2108      	movs	r1, #8
 80052dc:	483b      	ldr	r0, [pc, #236]	; (80053cc <bRight90+0x100>)
 80052de:	f005 fb63 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80052e2:	210c      	movs	r1, #12
 80052e4:	483a      	ldr	r0, [pc, #232]	; (80053d0 <bRight90+0x104>)
 80052e6:	f005 fb5f 	bl	800a9a8 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80052ea:	4b39      	ldr	r3, [pc, #228]	; (80053d0 <bRight90+0x104>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2295      	movs	r2, #149	; 0x95
 80052f0:	641a      	str	r2, [r3, #64]	; 0x40

	moveGyroPID(10, 1);
 80052f2:	2001      	movs	r0, #1
 80052f4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80052f8:	f7fe fd92 	bl	8003e20 <moveGyroPID>
	totalAngle = 0;
 80052fc:	4935      	ldr	r1, [pc, #212]	; (80053d4 <bRight90+0x108>)
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	e9c1 2300 	strd	r2, r3, [r1]
	osDelay(100);
 800530a:	2064      	movs	r0, #100	; 0x64
 800530c:	f008 f8ff 	bl	800d50e <osDelay>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8005310:	2200      	movs	r2, #0
 8005312:	2108      	movs	r1, #8
 8005314:	4830      	ldr	r0, [pc, #192]	; (80053d8 <bRight90+0x10c>)
 8005316:	f002 fa91 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800531a:	2201      	movs	r2, #1
 800531c:	2104      	movs	r1, #4
 800531e:	482e      	ldr	r0, [pc, #184]	; (80053d8 <bRight90+0x10c>)
 8005320:	f002 fa8c 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8005324:	2200      	movs	r2, #0
 8005326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800532a:	482c      	ldr	r0, [pc, #176]	; (80053dc <bRight90+0x110>)
 800532c:	f002 fa86 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8005330:	2201      	movs	r2, #1
 8005332:	2120      	movs	r1, #32
 8005334:	482a      	ldr	r0, [pc, #168]	; (80053e0 <bRight90+0x114>)
 8005336:	f002 fa81 	bl	800783c <HAL_GPIO_WritePin>
	moving = 1;
 800533a:	4b2a      	ldr	r3, [pc, #168]	; (80053e4 <bRight90+0x118>)
 800533c:	2201      	movs	r2, #1
 800533e:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 250;
 8005340:	4b23      	ldr	r3, [pc, #140]	; (80053d0 <bRight90+0x104>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	22fa      	movs	r2, #250	; 0xfa
 8005346:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2900);
 8005348:	4b20      	ldr	r3, [pc, #128]	; (80053cc <bRight90+0x100>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f640 3254 	movw	r2, #2900	; 0xb54
 8005350:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 500);
 8005352:	4b1e      	ldr	r3, [pc, #120]	; (80053cc <bRight90+0x100>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800535a:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 800535c:	e017      	b.n	800538e <bRight90+0xc2>

		if (totalAngle > 82) {
 800535e:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <bRight90+0x108>)
 8005360:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	4b1f      	ldr	r3, [pc, #124]	; (80053e8 <bRight90+0x11c>)
 800536a:	f7fb fbd5 	bl	8000b18 <__aeabi_dcmpgt>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d111      	bne.n	8005398 <bRight90+0xcc>
			break;
		}
		sprintf(messageA, "Langle %5d\0", (int) (totalAngle));
 8005374:	4b17      	ldr	r3, [pc, #92]	; (80053d4 <bRight90+0x108>)
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	4610      	mov	r0, r2
 800537c:	4619      	mov	r1, r3
 800537e:	f7fb fbeb 	bl	8000b58 <__aeabi_d2iz>
 8005382:	4602      	mov	r2, r0
 8005384:	1d3b      	adds	r3, r7, #4
 8005386:	4919      	ldr	r1, [pc, #100]	; (80053ec <bRight90+0x120>)
 8005388:	4618      	mov	r0, r3
 800538a:	f00b fc9f 	bl	8010ccc <siprintf>
	while (moving) {
 800538e:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <bRight90+0x118>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e3      	bne.n	800535e <bRight90+0x92>
 8005396:	e000      	b.n	800539a <bRight90+0xce>
			break;
 8005398:	bf00      	nop
		//     OLED_ShowString(10,30, messageA);
		//     OLED_Refresh_Gram();
	}
	//  stop();
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800539a:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <bRight90+0x100>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2200      	movs	r2, #0
 80053a0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80053a2:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <bRight90+0x100>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2200      	movs	r2, #0
 80053a8:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80053aa:	4b0e      	ldr	r3, [pc, #56]	; (80053e4 <bRight90+0x118>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	701a      	strb	r2, [r3, #0]
	move(0, 0);
 80053b0:	2000      	movs	r0, #0
 80053b2:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80053f0 <bRight90+0x124>
 80053b6:	f7ff fc1d 	bl	8004bf4 <move>
	moveGyroPID(1, 0);
 80053ba:	2000      	movs	r0, #0
 80053bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80053c0:	f7fe fd2e 	bl	8003e20 <moveGyroPID>
//	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
//	moving = 0;
//	move(0, 0);
//	moveGyroPID(2.5, 0);

}
 80053c4:	bf00      	nop
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20000378 	.word	0x20000378
 80053d0:	20000258 	.word	0x20000258
 80053d4:	20000418 	.word	0x20000418
 80053d8:	40020000 	.word	0x40020000
 80053dc:	40021000 	.word	0x40021000
 80053e0:	40020800 	.word	0x40020800
 80053e4:	20000414 	.word	0x20000414
 80053e8:	40548000 	.word	0x40548000
 80053ec:	0801493c 	.word	0x0801493c
 80053f0:	00000000 	.word	0x00000000

080053f4 <left90>:

void left90() {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
	// indoor
		totalAngle = 0;
 80053fa:	493e      	ldr	r1, [pc, #248]	; (80054f4 <left90+0x100>)
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	e9c1 2300 	strd	r2, r3, [r1]
		uint8_t messageA[20];
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8005408:	2100      	movs	r1, #0
 800540a:	483b      	ldr	r0, [pc, #236]	; (80054f8 <left90+0x104>)
 800540c:	f005 facc 	bl	800a9a8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8005410:	2108      	movs	r1, #8
 8005412:	4839      	ldr	r0, [pc, #228]	; (80054f8 <left90+0x104>)
 8005414:	f005 fac8 	bl	800a9a8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005418:	210c      	movs	r1, #12
 800541a:	4838      	ldr	r0, [pc, #224]	; (80054fc <left90+0x108>)
 800541c:	f005 fac4 	bl	800a9a8 <HAL_TIM_PWM_Start>
		htim1.Instance->CCR4 = STRAIGHT; //centre
 8005420:	4b36      	ldr	r3, [pc, #216]	; (80054fc <left90+0x108>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2295      	movs	r2, #149	; 0x95
 8005426:	641a      	str	r2, [r3, #64]	; 0x40

		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8005428:	2201      	movs	r2, #1
 800542a:	2108      	movs	r1, #8
 800542c:	4834      	ldr	r0, [pc, #208]	; (8005500 <left90+0x10c>)
 800542e:	f002 fa05 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005432:	2200      	movs	r2, #0
 8005434:	2104      	movs	r1, #4
 8005436:	4832      	ldr	r0, [pc, #200]	; (8005500 <left90+0x10c>)
 8005438:	f002 fa00 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800543c:	2201      	movs	r2, #1
 800543e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005442:	4830      	ldr	r0, [pc, #192]	; (8005504 <left90+0x110>)
 8005444:	f002 f9fa 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005448:	2200      	movs	r2, #0
 800544a:	2120      	movs	r1, #32
 800544c:	482e      	ldr	r0, [pc, #184]	; (8005508 <left90+0x114>)
 800544e:	f002 f9f5 	bl	800783c <HAL_GPIO_WritePin>
		moving = 1;
 8005452:	4b2e      	ldr	r3, [pc, #184]	; (800550c <left90+0x118>)
 8005454:	2201      	movs	r2, #1
 8005456:	701a      	strb	r2, [r3, #0]
		htim1.Instance->CCR4 = 100;
 8005458:	4b28      	ldr	r3, [pc, #160]	; (80054fc <left90+0x108>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2264      	movs	r2, #100	; 0x64
 800545e:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 450);
 8005460:	4b25      	ldr	r3, [pc, #148]	; (80054f8 <left90+0x104>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8005468:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2700);
 800546a:	4b23      	ldr	r3, [pc, #140]	; (80054f8 <left90+0x104>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f640 228c 	movw	r2, #2700	; 0xa8c
 8005472:	63da      	str	r2, [r3, #60]	; 0x3c
		;
		while (moving) {
 8005474:	e01f      	b.n	80054b6 <left90+0xc2>

			if (totalAngle > 80) {
 8005476:	4b1f      	ldr	r3, [pc, #124]	; (80054f4 <left90+0x100>)
 8005478:	e9d3 0100 	ldrd	r0, r1, [r3]
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	4b23      	ldr	r3, [pc, #140]	; (8005510 <left90+0x11c>)
 8005482:	f7fb fb49 	bl	8000b18 <__aeabi_dcmpgt>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d119      	bne.n	80054c0 <left90+0xcc>
				break;
			}
			sprintf(messageA, "Langle %5d\0", (int) (totalAngle));
 800548c:	4b19      	ldr	r3, [pc, #100]	; (80054f4 <left90+0x100>)
 800548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005492:	4610      	mov	r0, r2
 8005494:	4619      	mov	r1, r3
 8005496:	f7fb fb5f 	bl	8000b58 <__aeabi_d2iz>
 800549a:	4602      	mov	r2, r0
 800549c:	1d3b      	adds	r3, r7, #4
 800549e:	491d      	ldr	r1, [pc, #116]	; (8005514 <left90+0x120>)
 80054a0:	4618      	mov	r0, r3
 80054a2:	f00b fc13 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 30, messageA);
 80054a6:	1d3b      	adds	r3, r7, #4
 80054a8:	461a      	mov	r2, r3
 80054aa:	211e      	movs	r1, #30
 80054ac:	200a      	movs	r0, #10
 80054ae:	f001 f89f 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 80054b2:	f000 ff29 	bl	8006308 <OLED_Refresh_Gram>
		while (moving) {
 80054b6:	4b15      	ldr	r3, [pc, #84]	; (800550c <left90+0x118>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1db      	bne.n	8005476 <left90+0x82>
 80054be:	e000      	b.n	80054c2 <left90+0xce>
				break;
 80054c0:	bf00      	nop
		}
	//  stop();
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80054c2:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <left90+0x104>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2200      	movs	r2, #0
 80054c8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80054ca:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <left90+0x104>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2200      	movs	r2, #0
 80054d0:	63da      	str	r2, [r3, #60]	; 0x3c
		moving = 0;
 80054d2:	4b0e      	ldr	r3, [pc, #56]	; (800550c <left90+0x118>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	701a      	strb	r2, [r3, #0]
		move(0, 0);
 80054d8:	2000      	movs	r0, #0
 80054da:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8005518 <left90+0x124>
 80054de:	f7ff fb89 	bl	8004bf4 <move>
		moveGyroPID(10, 0);
 80054e2:	2000      	movs	r0, #0
 80054e4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80054e8:	f7fe fc9a 	bl	8003e20 <moveGyroPID>
//	moveGyroPID(12.25, 0);
//  dir = (dir + 3) % 4 ;
//  x += axis[dir][0] * left_90[xydir];
//  xydir = (xydir + 1) % 2;
//  y += axis[dir][1] * left_90[xydir];
}
 80054ec:	bf00      	nop
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	20000418 	.word	0x20000418
 80054f8:	20000378 	.word	0x20000378
 80054fc:	20000258 	.word	0x20000258
 8005500:	40020000 	.word	0x40020000
 8005504:	40021000 	.word	0x40021000
 8005508:	40020800 	.word	0x40020800
 800550c:	20000414 	.word	0x20000414
 8005510:	40540000 	.word	0x40540000
 8005514:	0801493c 	.word	0x0801493c
	...

08005520 <right90>:

void right90() {
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
	//indoor
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8005526:	2100      	movs	r1, #0
 8005528:	4839      	ldr	r0, [pc, #228]	; (8005610 <right90+0xf0>)
 800552a:	f005 fa3d 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800552e:	2108      	movs	r1, #8
 8005530:	4837      	ldr	r0, [pc, #220]	; (8005610 <right90+0xf0>)
 8005532:	f005 fa39 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005536:	210c      	movs	r1, #12
 8005538:	4836      	ldr	r0, [pc, #216]	; (8005614 <right90+0xf4>)
 800553a:	f005 fa35 	bl	800a9a8 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 800553e:	4b35      	ldr	r3, [pc, #212]	; (8005614 <right90+0xf4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2295      	movs	r2, #149	; 0x95
 8005544:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8005546:	2201      	movs	r2, #1
 8005548:	2108      	movs	r1, #8
 800554a:	4833      	ldr	r0, [pc, #204]	; (8005618 <right90+0xf8>)
 800554c:	f002 f976 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005550:	2200      	movs	r2, #0
 8005552:	2104      	movs	r1, #4
 8005554:	4830      	ldr	r0, [pc, #192]	; (8005618 <right90+0xf8>)
 8005556:	f002 f971 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800555a:	2201      	movs	r2, #1
 800555c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005560:	482e      	ldr	r0, [pc, #184]	; (800561c <right90+0xfc>)
 8005562:	f002 f96b 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005566:	2200      	movs	r2, #0
 8005568:	2120      	movs	r1, #32
 800556a:	482d      	ldr	r0, [pc, #180]	; (8005620 <right90+0x100>)
 800556c:	f002 f966 	bl	800783c <HAL_GPIO_WritePin>
	moving = 1;
 8005570:	4b2c      	ldr	r3, [pc, #176]	; (8005624 <right90+0x104>)
 8005572:	2201      	movs	r2, #1
 8005574:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 250;
 8005576:	4b27      	ldr	r3, [pc, #156]	; (8005614 <right90+0xf4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	22fa      	movs	r2, #250	; 0xfa
 800557c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2000);
 800557e:	4b24      	ldr	r3, [pc, #144]	; (8005610 <right90+0xf0>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005586:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1100);
 8005588:	4b21      	ldr	r3, [pc, #132]	; (8005610 <right90+0xf0>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f240 424c 	movw	r2, #1100	; 0x44c
 8005590:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005592:	e017      	b.n	80055c4 <right90+0xa4>

		if (totalAngle < -89.5) {
 8005594:	4b24      	ldr	r3, [pc, #144]	; (8005628 <right90+0x108>)
 8005596:	e9d3 0100 	ldrd	r0, r1, [r3]
 800559a:	a31b      	add	r3, pc, #108	; (adr r3, 8005608 <right90+0xe8>)
 800559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a0:	f7fb fa9c 	bl	8000adc <__aeabi_dcmplt>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d111      	bne.n	80055ce <right90+0xae>
			break;
		}
		sprintf(messageA, "Rangle %5d\0", (int) (totalAngle));
 80055aa:	4b1f      	ldr	r3, [pc, #124]	; (8005628 <right90+0x108>)
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	4610      	mov	r0, r2
 80055b2:	4619      	mov	r1, r3
 80055b4:	f7fb fad0 	bl	8000b58 <__aeabi_d2iz>
 80055b8:	4602      	mov	r2, r0
 80055ba:	1d3b      	adds	r3, r7, #4
 80055bc:	491b      	ldr	r1, [pc, #108]	; (800562c <right90+0x10c>)
 80055be:	4618      	mov	r0, r3
 80055c0:	f00b fb84 	bl	8010ccc <siprintf>
	while (moving) {
 80055c4:	4b17      	ldr	r3, [pc, #92]	; (8005624 <right90+0x104>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e3      	bne.n	8005594 <right90+0x74>
 80055cc:	e000      	b.n	80055d0 <right90+0xb0>
			break;
 80055ce:	bf00      	nop
//     OLED_ShowString(10,40, messageA);
//     OLED_Refresh_Gram();
	}
//  stop();
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80055d0:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <right90+0xf0>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2200      	movs	r2, #0
 80055d6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80055d8:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <right90+0xf0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2200      	movs	r2, #0
 80055de:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80055e0:	4b10      	ldr	r3, [pc, #64]	; (8005624 <right90+0x104>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	701a      	strb	r2, [r3, #0]
	move(0, 0);
 80055e6:	2000      	movs	r0, #0
 80055e8:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8005630 <right90+0x110>
 80055ec:	f7ff fb02 	bl	8004bf4 <move>
	moveGyroPID(10, 0);
 80055f0:	2000      	movs	r0, #0
 80055f2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80055f6:	f7fe fc13 	bl	8003e20 <moveGyroPID>

//  x += axis[dir][0] * right_90[xydir];
//  xydir = (xydir + 1) % 2;
//  y += axis[dir][1] * right_90[xydir];
//  dir = (dir + 1) % 4 ;
}
 80055fa:	bf00      	nop
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	f3af 8000 	nop.w
 8005608:	00000000 	.word	0x00000000
 800560c:	c0566000 	.word	0xc0566000
 8005610:	20000378 	.word	0x20000378
 8005614:	20000258 	.word	0x20000258
 8005618:	40020000 	.word	0x40020000
 800561c:	40021000 	.word	0x40021000
 8005620:	40020800 	.word	0x40020800
 8005624:	20000414 	.word	0x20000414
 8005628:	20000418 	.word	0x20000418
 800562c:	08014948 	.word	0x08014948
 8005630:	00000000 	.word	0x00000000

08005634 <spotTurn>:

	osDelay(1000);
	return;
}

void spotTurn(uint8_t direction) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b08c      	sub	sp, #48	; 0x30
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	71fb      	strb	r3, [r7, #7]
	uint16_t offset_show[20];

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800563e:	2100      	movs	r1, #0
 8005640:	48b2      	ldr	r0, [pc, #712]	; (800590c <spotTurn+0x2d8>)
 8005642:	f005 f9b1 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8005646:	2108      	movs	r1, #8
 8005648:	48b0      	ldr	r0, [pc, #704]	; (800590c <spotTurn+0x2d8>)
 800564a:	f005 f9ad 	bl	800a9a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800564e:	210c      	movs	r1, #12
 8005650:	48af      	ldr	r0, [pc, #700]	; (8005910 <spotTurn+0x2dc>)
 8005652:	f005 f9a9 	bl	800a9a8 <HAL_TIM_PWM_Start>
	htim1.Instance->CCR4 = STRAIGHT;
 8005656:	4bae      	ldr	r3, [pc, #696]	; (8005910 <spotTurn+0x2dc>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2295      	movs	r2, #149	; 0x95
 800565c:	641a      	str	r2, [r3, #64]	; 0x40

	//move forward
	if (direction) // spot turn left
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 816b 	beq.w	800593c <spotTurn+0x308>
	{
//		targetAngle += 90;
//		if(targetAngle > 360) targetAngle -= 360;
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8005666:	2201      	movs	r2, #1
 8005668:	2108      	movs	r1, #8
 800566a:	48aa      	ldr	r0, [pc, #680]	; (8005914 <spotTurn+0x2e0>)
 800566c:	f002 f8e6 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005670:	2200      	movs	r2, #0
 8005672:	2104      	movs	r1, #4
 8005674:	48a7      	ldr	r0, [pc, #668]	; (8005914 <spotTurn+0x2e0>)
 8005676:	f002 f8e1 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800567a:	2201      	movs	r2, #1
 800567c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005680:	48a5      	ldr	r0, [pc, #660]	; (8005918 <spotTurn+0x2e4>)
 8005682:	f002 f8db 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005686:	2200      	movs	r2, #0
 8005688:	2120      	movs	r1, #32
 800568a:	48a4      	ldr	r0, [pc, #656]	; (800591c <spotTurn+0x2e8>)
 800568c:	f002 f8d6 	bl	800783c <HAL_GPIO_WritePin>
		htim1.Instance->CCR4 = LEFT;
 8005690:	4b9f      	ldr	r3, [pc, #636]	; (8005910 <spotTurn+0x2dc>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2269      	movs	r2, #105	; 0x69
 8005696:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 800);
 8005698:	4b9c      	ldr	r3, [pc, #624]	; (800590c <spotTurn+0x2d8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80056a0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1500);
 80056a2:	4b9a      	ldr	r3, [pc, #616]	; (800590c <spotTurn+0x2d8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80056aa:	63da      	str	r2, [r3, #60]	; 0x3c
		moving = 1;
 80056ac:	4b9c      	ldr	r3, [pc, #624]	; (8005920 <spotTurn+0x2ec>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	701a      	strb	r2, [r3, #0]
		while (moving) {
 80056b2:	e021      	b.n	80056f8 <spotTurn+0xc4>
			if (totalAngle >= 18) {
 80056b4:	4b9b      	ldr	r3, [pc, #620]	; (8005924 <spotTurn+0x2f0>)
 80056b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	4b9a      	ldr	r3, [pc, #616]	; (8005928 <spotTurn+0x2f4>)
 80056c0:	f7fb fa20 	bl	8000b04 <__aeabi_dcmpge>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d11b      	bne.n	8005702 <spotTurn+0xce>
			}
//				 else
//				 {
//					 break;
//				 }
			sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 80056ca:	4b96      	ldr	r3, [pc, #600]	; (8005924 <spotTurn+0x2f0>)
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	4610      	mov	r0, r2
 80056d2:	4619      	mov	r1, r3
 80056d4:	f7fb fa40 	bl	8000b58 <__aeabi_d2iz>
 80056d8:	4602      	mov	r2, r0
 80056da:	f107 0308 	add.w	r3, r7, #8
 80056de:	4993      	ldr	r1, [pc, #588]	; (800592c <spotTurn+0x2f8>)
 80056e0:	4618      	mov	r0, r3
 80056e2:	f00b faf3 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 20, offset_show);
 80056e6:	f107 0308 	add.w	r3, r7, #8
 80056ea:	461a      	mov	r2, r3
 80056ec:	2114      	movs	r1, #20
 80056ee:	200a      	movs	r0, #10
 80056f0:	f000 ff7e 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 80056f4:	f000 fe08 	bl	8006308 <OLED_Refresh_Gram>
		while (moving) {
 80056f8:	4b89      	ldr	r3, [pc, #548]	; (8005920 <spotTurn+0x2ec>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1d9      	bne.n	80056b4 <spotTurn+0x80>
 8005700:	e000      	b.n	8005704 <spotTurn+0xd0>
				break;
 8005702:	bf00      	nop
		}
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8005704:	2200      	movs	r2, #0
 8005706:	2108      	movs	r1, #8
 8005708:	4882      	ldr	r0, [pc, #520]	; (8005914 <spotTurn+0x2e0>)
 800570a:	f002 f897 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800570e:	2201      	movs	r2, #1
 8005710:	2104      	movs	r1, #4
 8005712:	4880      	ldr	r0, [pc, #512]	; (8005914 <spotTurn+0x2e0>)
 8005714:	f002 f892 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8005718:	2200      	movs	r2, #0
 800571a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800571e:	487e      	ldr	r0, [pc, #504]	; (8005918 <spotTurn+0x2e4>)
 8005720:	f002 f88c 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8005724:	2201      	movs	r2, #1
 8005726:	2120      	movs	r1, #32
 8005728:	487c      	ldr	r0, [pc, #496]	; (800591c <spotTurn+0x2e8>)
 800572a:	f002 f887 	bl	800783c <HAL_GPIO_WritePin>
		//robot forward left to reduce turning radius
		htim1.Instance->CCR4 = RIGHT;
 800572e:	4b78      	ldr	r3, [pc, #480]	; (8005910 <spotTurn+0x2dc>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	22fa      	movs	r2, #250	; 0xfa
 8005734:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1500);
 8005736:	4b75      	ldr	r3, [pc, #468]	; (800590c <spotTurn+0x2d8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800573e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 500);
 8005740:	4b72      	ldr	r3, [pc, #456]	; (800590c <spotTurn+0x2d8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005748:	63da      	str	r2, [r3, #60]	; 0x3c
		while (moving) {
 800574a:	e021      	b.n	8005790 <spotTurn+0x15c>
			if (totalAngle >= 38) {
 800574c:	4b75      	ldr	r3, [pc, #468]	; (8005924 <spotTurn+0x2f0>)
 800574e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005752:	f04f 0200 	mov.w	r2, #0
 8005756:	4b76      	ldr	r3, [pc, #472]	; (8005930 <spotTurn+0x2fc>)
 8005758:	f7fb f9d4 	bl	8000b04 <__aeabi_dcmpge>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d11b      	bne.n	800579a <spotTurn+0x166>
				break;
			}
			sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8005762:	4b70      	ldr	r3, [pc, #448]	; (8005924 <spotTurn+0x2f0>)
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	4610      	mov	r0, r2
 800576a:	4619      	mov	r1, r3
 800576c:	f7fb f9f4 	bl	8000b58 <__aeabi_d2iz>
 8005770:	4602      	mov	r2, r0
 8005772:	f107 0308 	add.w	r3, r7, #8
 8005776:	496d      	ldr	r1, [pc, #436]	; (800592c <spotTurn+0x2f8>)
 8005778:	4618      	mov	r0, r3
 800577a:	f00b faa7 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 20, offset_show);
 800577e:	f107 0308 	add.w	r3, r7, #8
 8005782:	461a      	mov	r2, r3
 8005784:	2114      	movs	r1, #20
 8005786:	200a      	movs	r0, #10
 8005788:	f000 ff32 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 800578c:	f000 fdbc 	bl	8006308 <OLED_Refresh_Gram>
		while (moving) {
 8005790:	4b63      	ldr	r3, [pc, #396]	; (8005920 <spotTurn+0x2ec>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1d9      	bne.n	800574c <spotTurn+0x118>
 8005798:	e000      	b.n	800579c <spotTurn+0x168>
				break;
 800579a:	bf00      	nop
		}
		htim1.Instance->CCR4 = STRAIGHT;
 800579c:	4b5c      	ldr	r3, [pc, #368]	; (8005910 <spotTurn+0x2dc>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2295      	movs	r2, #149	; 0x95
 80057a2:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80057a4:	4b59      	ldr	r3, [pc, #356]	; (800590c <spotTurn+0x2d8>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2200      	movs	r2, #0
 80057aa:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80057ac:	4b57      	ldr	r3, [pc, #348]	; (800590c <spotTurn+0x2d8>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2200      	movs	r2, #0
 80057b2:	63da      	str	r2, [r3, #60]	; 0x3c
		osDelay(100);
 80057b4:	2064      	movs	r0, #100	; 0x64
 80057b6:	f007 feaa 	bl	800d50e <osDelay>
		move(5, 1);
 80057ba:	2001      	movs	r0, #1
 80057bc:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80057c0:	f7ff fa18 	bl	8004bf4 <move>
		osDelay(100);
 80057c4:	2064      	movs	r0, #100	; 0x64
 80057c6:	f007 fea2 	bl	800d50e <osDelay>
		moving = 1;
 80057ca:	4b55      	ldr	r3, [pc, #340]	; (8005920 <spotTurn+0x2ec>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	701a      	strb	r2, [r3, #0]
		//continue forward left
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80057d0:	2201      	movs	r2, #1
 80057d2:	2108      	movs	r1, #8
 80057d4:	484f      	ldr	r0, [pc, #316]	; (8005914 <spotTurn+0x2e0>)
 80057d6:	f002 f831 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80057da:	2200      	movs	r2, #0
 80057dc:	2104      	movs	r1, #4
 80057de:	484d      	ldr	r0, [pc, #308]	; (8005914 <spotTurn+0x2e0>)
 80057e0:	f002 f82c 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80057e4:	2201      	movs	r2, #1
 80057e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80057ea:	484b      	ldr	r0, [pc, #300]	; (8005918 <spotTurn+0x2e4>)
 80057ec:	f002 f826 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80057f0:	2200      	movs	r2, #0
 80057f2:	2120      	movs	r1, #32
 80057f4:	4849      	ldr	r0, [pc, #292]	; (800591c <spotTurn+0x2e8>)
 80057f6:	f002 f821 	bl	800783c <HAL_GPIO_WritePin>
		htim1.Instance->CCR4 = LEFT;
 80057fa:	4b45      	ldr	r3, [pc, #276]	; (8005910 <spotTurn+0x2dc>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2269      	movs	r2, #105	; 0x69
 8005800:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 800);
 8005802:	4b42      	ldr	r3, [pc, #264]	; (800590c <spotTurn+0x2d8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f44f 7248 	mov.w	r2, #800	; 0x320
 800580a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1500);
 800580c:	4b3f      	ldr	r3, [pc, #252]	; (800590c <spotTurn+0x2d8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005814:	63da      	str	r2, [r3, #60]	; 0x3c
		while (moving) {
 8005816:	e021      	b.n	800585c <spotTurn+0x228>
			if (totalAngle >= 23) {
 8005818:	4b42      	ldr	r3, [pc, #264]	; (8005924 <spotTurn+0x2f0>)
 800581a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800581e:	f04f 0200 	mov.w	r2, #0
 8005822:	4b44      	ldr	r3, [pc, #272]	; (8005934 <spotTurn+0x300>)
 8005824:	f7fb f96e 	bl	8000b04 <__aeabi_dcmpge>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d11b      	bne.n	8005866 <spotTurn+0x232>
				break;
			}
			sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 800582e:	4b3d      	ldr	r3, [pc, #244]	; (8005924 <spotTurn+0x2f0>)
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	4610      	mov	r0, r2
 8005836:	4619      	mov	r1, r3
 8005838:	f7fb f98e 	bl	8000b58 <__aeabi_d2iz>
 800583c:	4602      	mov	r2, r0
 800583e:	f107 0308 	add.w	r3, r7, #8
 8005842:	493a      	ldr	r1, [pc, #232]	; (800592c <spotTurn+0x2f8>)
 8005844:	4618      	mov	r0, r3
 8005846:	f00b fa41 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 20, offset_show);
 800584a:	f107 0308 	add.w	r3, r7, #8
 800584e:	461a      	mov	r2, r3
 8005850:	2114      	movs	r1, #20
 8005852:	200a      	movs	r0, #10
 8005854:	f000 fecc 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 8005858:	f000 fd56 	bl	8006308 <OLED_Refresh_Gram>
		while (moving) {
 800585c:	4b30      	ldr	r3, [pc, #192]	; (8005920 <spotTurn+0x2ec>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1d9      	bne.n	8005818 <spotTurn+0x1e4>
 8005864:	e000      	b.n	8005868 <spotTurn+0x234>
				break;
 8005866:	bf00      	nop
		}
		//continue reverse right
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8005868:	2200      	movs	r2, #0
 800586a:	2108      	movs	r1, #8
 800586c:	4829      	ldr	r0, [pc, #164]	; (8005914 <spotTurn+0x2e0>)
 800586e:	f001 ffe5 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8005872:	2201      	movs	r2, #1
 8005874:	2104      	movs	r1, #4
 8005876:	4827      	ldr	r0, [pc, #156]	; (8005914 <spotTurn+0x2e0>)
 8005878:	f001 ffe0 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 800587c:	2200      	movs	r2, #0
 800587e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005882:	4825      	ldr	r0, [pc, #148]	; (8005918 <spotTurn+0x2e4>)
 8005884:	f001 ffda 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8005888:	2201      	movs	r2, #1
 800588a:	2120      	movs	r1, #32
 800588c:	4823      	ldr	r0, [pc, #140]	; (800591c <spotTurn+0x2e8>)
 800588e:	f001 ffd5 	bl	800783c <HAL_GPIO_WritePin>
		htim1.Instance->CCR4 = RIGHT;
 8005892:	4b1f      	ldr	r3, [pc, #124]	; (8005910 <spotTurn+0x2dc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	22fa      	movs	r2, #250	; 0xfa
 8005898:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1500);
 800589a:	4b1c      	ldr	r3, [pc, #112]	; (800590c <spotTurn+0x2d8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80058a2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 500);
 80058a4:	4b19      	ldr	r3, [pc, #100]	; (800590c <spotTurn+0x2d8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80058ac:	63da      	str	r2, [r3, #60]	; 0x3c
		while (moving) {
 80058ae:	e021      	b.n	80058f4 <spotTurn+0x2c0>
			if (totalAngle >= 50) //prev:50
 80058b0:	4b1c      	ldr	r3, [pc, #112]	; (8005924 <spotTurn+0x2f0>)
 80058b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	4b1f      	ldr	r3, [pc, #124]	; (8005938 <spotTurn+0x304>)
 80058bc:	f7fb f922 	bl	8000b04 <__aeabi_dcmpge>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d11b      	bne.n	80058fe <spotTurn+0x2ca>
//			 if (totalAngle >= 53 + (targetAngle - actualAngle))//prev:50
					{
				break;
			}
			sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 80058c6:	4b17      	ldr	r3, [pc, #92]	; (8005924 <spotTurn+0x2f0>)
 80058c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058cc:	4610      	mov	r0, r2
 80058ce:	4619      	mov	r1, r3
 80058d0:	f7fb f942 	bl	8000b58 <__aeabi_d2iz>
 80058d4:	4602      	mov	r2, r0
 80058d6:	f107 0308 	add.w	r3, r7, #8
 80058da:	4914      	ldr	r1, [pc, #80]	; (800592c <spotTurn+0x2f8>)
 80058dc:	4618      	mov	r0, r3
 80058de:	f00b f9f5 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 20, offset_show);
 80058e2:	f107 0308 	add.w	r3, r7, #8
 80058e6:	461a      	mov	r2, r3
 80058e8:	2114      	movs	r1, #20
 80058ea:	200a      	movs	r0, #10
 80058ec:	f000 fe80 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 80058f0:	f000 fd0a 	bl	8006308 <OLED_Refresh_Gram>
		while (moving) {
 80058f4:	4b0a      	ldr	r3, [pc, #40]	; (8005920 <spotTurn+0x2ec>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1d9      	bne.n	80058b0 <spotTurn+0x27c>
 80058fc:	e000      	b.n	8005900 <spotTurn+0x2cc>
				break;
 80058fe:	bf00      	nop
		}
		move(2, 1);
 8005900:	2001      	movs	r0, #1
 8005902:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005906:	f7ff f975 	bl	8004bf4 <move>
 800590a:	e166      	b.n	8005bda <spotTurn+0x5a6>
 800590c:	20000378 	.word	0x20000378
 8005910:	20000258 	.word	0x20000258
 8005914:	40020000 	.word	0x40020000
 8005918:	40021000 	.word	0x40021000
 800591c:	40020800 	.word	0x40020800
 8005920:	20000414 	.word	0x20000414
 8005924:	20000418 	.word	0x20000418
 8005928:	40320000 	.word	0x40320000
 800592c:	080148e8 	.word	0x080148e8
 8005930:	40430000 	.word	0x40430000
 8005934:	40370000 	.word	0x40370000
 8005938:	40490000 	.word	0x40490000
	} else //spot turn right
	{
//		targetAngle -= 90;
//		if(targetAngle < 0) targetAngle += 360;
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800593c:	2201      	movs	r2, #1
 800593e:	2108      	movs	r1, #8
 8005940:	48b1      	ldr	r0, [pc, #708]	; (8005c08 <spotTurn+0x5d4>)
 8005942:	f001 ff7b 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005946:	2200      	movs	r2, #0
 8005948:	2104      	movs	r1, #4
 800594a:	48af      	ldr	r0, [pc, #700]	; (8005c08 <spotTurn+0x5d4>)
 800594c:	f001 ff76 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005950:	2201      	movs	r2, #1
 8005952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005956:	48ad      	ldr	r0, [pc, #692]	; (8005c0c <spotTurn+0x5d8>)
 8005958:	f001 ff70 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800595c:	2200      	movs	r2, #0
 800595e:	2120      	movs	r1, #32
 8005960:	48ab      	ldr	r0, [pc, #684]	; (8005c10 <spotTurn+0x5dc>)
 8005962:	f001 ff6b 	bl	800783c <HAL_GPIO_WritePin>
		htim1.Instance->CCR4 = RIGHT;
 8005966:	4bab      	ldr	r3, [pc, #684]	; (8005c14 <spotTurn+0x5e0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	22fa      	movs	r2, #250	; 0xfa
 800596c:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1500);
 800596e:	4baa      	ldr	r3, [pc, #680]	; (8005c18 <spotTurn+0x5e4>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005976:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 500);
 8005978:	4ba7      	ldr	r3, [pc, #668]	; (8005c18 <spotTurn+0x5e4>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005980:	63da      	str	r2, [r3, #60]	; 0x3c
		moving = 1;
 8005982:	4ba6      	ldr	r3, [pc, #664]	; (8005c1c <spotTurn+0x5e8>)
 8005984:	2201      	movs	r2, #1
 8005986:	701a      	strb	r2, [r3, #0]
		while (moving) {
 8005988:	e021      	b.n	80059ce <spotTurn+0x39a>
			if (totalAngle <= -1 * 20) {
 800598a:	4ba5      	ldr	r3, [pc, #660]	; (8005c20 <spotTurn+0x5ec>)
 800598c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	4ba3      	ldr	r3, [pc, #652]	; (8005c24 <spotTurn+0x5f0>)
 8005996:	f7fb f8ab 	bl	8000af0 <__aeabi_dcmple>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d11b      	bne.n	80059d8 <spotTurn+0x3a4>
				break;
			}
			sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 80059a0:	4b9f      	ldr	r3, [pc, #636]	; (8005c20 <spotTurn+0x5ec>)
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	4610      	mov	r0, r2
 80059a8:	4619      	mov	r1, r3
 80059aa:	f7fb f8d5 	bl	8000b58 <__aeabi_d2iz>
 80059ae:	4602      	mov	r2, r0
 80059b0:	f107 0308 	add.w	r3, r7, #8
 80059b4:	499c      	ldr	r1, [pc, #624]	; (8005c28 <spotTurn+0x5f4>)
 80059b6:	4618      	mov	r0, r3
 80059b8:	f00b f988 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 20, offset_show);
 80059bc:	f107 0308 	add.w	r3, r7, #8
 80059c0:	461a      	mov	r2, r3
 80059c2:	2114      	movs	r1, #20
 80059c4:	200a      	movs	r0, #10
 80059c6:	f000 fe13 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 80059ca:	f000 fc9d 	bl	8006308 <OLED_Refresh_Gram>
		while (moving) {
 80059ce:	4b93      	ldr	r3, [pc, #588]	; (8005c1c <spotTurn+0x5e8>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1d9      	bne.n	800598a <spotTurn+0x356>
 80059d6:	e000      	b.n	80059da <spotTurn+0x3a6>
				break;
 80059d8:	bf00      	nop
		}
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80059da:	2200      	movs	r2, #0
 80059dc:	2108      	movs	r1, #8
 80059de:	488a      	ldr	r0, [pc, #552]	; (8005c08 <spotTurn+0x5d4>)
 80059e0:	f001 ff2c 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80059e4:	2201      	movs	r2, #1
 80059e6:	2104      	movs	r1, #4
 80059e8:	4887      	ldr	r0, [pc, #540]	; (8005c08 <spotTurn+0x5d4>)
 80059ea:	f001 ff27 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 80059ee:	2200      	movs	r2, #0
 80059f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059f4:	4885      	ldr	r0, [pc, #532]	; (8005c0c <spotTurn+0x5d8>)
 80059f6:	f001 ff21 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 80059fa:	2201      	movs	r2, #1
 80059fc:	2120      	movs	r1, #32
 80059fe:	4884      	ldr	r0, [pc, #528]	; (8005c10 <spotTurn+0x5dc>)
 8005a00:	f001 ff1c 	bl	800783c <HAL_GPIO_WritePin>
		//robot reverse left
		htim1.Instance->CCR4 = LEFT;
 8005a04:	4b83      	ldr	r3, [pc, #524]	; (8005c14 <spotTurn+0x5e0>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2269      	movs	r2, #105	; 0x69
 8005a0a:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 800);
 8005a0c:	4b82      	ldr	r3, [pc, #520]	; (8005c18 <spotTurn+0x5e4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005a14:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1500);
 8005a16:	4b80      	ldr	r3, [pc, #512]	; (8005c18 <spotTurn+0x5e4>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005a1e:	63da      	str	r2, [r3, #60]	; 0x3c
		while (moving) {
 8005a20:	e021      	b.n	8005a66 <spotTurn+0x432>
			if (totalAngle <= -1 * 35) {
 8005a22:	4b7f      	ldr	r3, [pc, #508]	; (8005c20 <spotTurn+0x5ec>)
 8005a24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	4b7f      	ldr	r3, [pc, #508]	; (8005c2c <spotTurn+0x5f8>)
 8005a2e:	f7fb f85f 	bl	8000af0 <__aeabi_dcmple>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d11b      	bne.n	8005a70 <spotTurn+0x43c>
				break;
			}
			sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8005a38:	4b79      	ldr	r3, [pc, #484]	; (8005c20 <spotTurn+0x5ec>)
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	4610      	mov	r0, r2
 8005a40:	4619      	mov	r1, r3
 8005a42:	f7fb f889 	bl	8000b58 <__aeabi_d2iz>
 8005a46:	4602      	mov	r2, r0
 8005a48:	f107 0308 	add.w	r3, r7, #8
 8005a4c:	4976      	ldr	r1, [pc, #472]	; (8005c28 <spotTurn+0x5f4>)
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f00b f93c 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 20, offset_show);
 8005a54:	f107 0308 	add.w	r3, r7, #8
 8005a58:	461a      	mov	r2, r3
 8005a5a:	2114      	movs	r1, #20
 8005a5c:	200a      	movs	r0, #10
 8005a5e:	f000 fdc7 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 8005a62:	f000 fc51 	bl	8006308 <OLED_Refresh_Gram>
		while (moving) {
 8005a66:	4b6d      	ldr	r3, [pc, #436]	; (8005c1c <spotTurn+0x5e8>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1d9      	bne.n	8005a22 <spotTurn+0x3ee>
 8005a6e:	e000      	b.n	8005a72 <spotTurn+0x43e>
				break;
 8005a70:	bf00      	nop
		}
		htim1.Instance->CCR4 = STRAIGHT;
 8005a72:	4b68      	ldr	r3, [pc, #416]	; (8005c14 <spotTurn+0x5e0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2295      	movs	r2, #149	; 0x95
 8005a78:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005a7a:	4b67      	ldr	r3, [pc, #412]	; (8005c18 <spotTurn+0x5e4>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005a82:	4b65      	ldr	r3, [pc, #404]	; (8005c18 <spotTurn+0x5e4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2200      	movs	r2, #0
 8005a88:	63da      	str	r2, [r3, #60]	; 0x3c
		move(9.5, 1);
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	eeb2 0a03 	vmov.f32	s0, #35	; 0x41180000  9.5
 8005a90:	f7ff f8b0 	bl	8004bf4 <move>
		osDelay(100);
 8005a94:	2064      	movs	r0, #100	; 0x64
 8005a96:	f007 fd3a 	bl	800d50e <osDelay>
		moving = 1;
 8005a9a:	4b60      	ldr	r3, [pc, #384]	; (8005c1c <spotTurn+0x5e8>)
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	701a      	strb	r2, [r3, #0]
		//continue forward right
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	2108      	movs	r1, #8
 8005aa4:	4858      	ldr	r0, [pc, #352]	; (8005c08 <spotTurn+0x5d4>)
 8005aa6:	f001 fec9 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005aaa:	2200      	movs	r2, #0
 8005aac:	2104      	movs	r1, #4
 8005aae:	4856      	ldr	r0, [pc, #344]	; (8005c08 <spotTurn+0x5d4>)
 8005ab0:	f001 fec4 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005aba:	4854      	ldr	r0, [pc, #336]	; (8005c0c <spotTurn+0x5d8>)
 8005abc:	f001 febe 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2120      	movs	r1, #32
 8005ac4:	4852      	ldr	r0, [pc, #328]	; (8005c10 <spotTurn+0x5dc>)
 8005ac6:	f001 feb9 	bl	800783c <HAL_GPIO_WritePin>
		htim1.Instance->CCR4 = RIGHT;
 8005aca:	4b52      	ldr	r3, [pc, #328]	; (8005c14 <spotTurn+0x5e0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	22fa      	movs	r2, #250	; 0xfa
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1500);
 8005ad2:	4b51      	ldr	r3, [pc, #324]	; (8005c18 <spotTurn+0x5e4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005ada:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 500);
 8005adc:	4b4e      	ldr	r3, [pc, #312]	; (8005c18 <spotTurn+0x5e4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005ae4:	63da      	str	r2, [r3, #60]	; 0x3c
		while (moving) {
 8005ae6:	e021      	b.n	8005b2c <spotTurn+0x4f8>
			if (totalAngle <= -1 * 16) {
 8005ae8:	4b4d      	ldr	r3, [pc, #308]	; (8005c20 <spotTurn+0x5ec>)
 8005aea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	4b4f      	ldr	r3, [pc, #316]	; (8005c30 <spotTurn+0x5fc>)
 8005af4:	f7fa fffc 	bl	8000af0 <__aeabi_dcmple>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d11b      	bne.n	8005b36 <spotTurn+0x502>
				break;
			}
			sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8005afe:	4b48      	ldr	r3, [pc, #288]	; (8005c20 <spotTurn+0x5ec>)
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	4610      	mov	r0, r2
 8005b06:	4619      	mov	r1, r3
 8005b08:	f7fb f826 	bl	8000b58 <__aeabi_d2iz>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	f107 0308 	add.w	r3, r7, #8
 8005b12:	4945      	ldr	r1, [pc, #276]	; (8005c28 <spotTurn+0x5f4>)
 8005b14:	4618      	mov	r0, r3
 8005b16:	f00b f8d9 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 20, offset_show);
 8005b1a:	f107 0308 	add.w	r3, r7, #8
 8005b1e:	461a      	mov	r2, r3
 8005b20:	2114      	movs	r1, #20
 8005b22:	200a      	movs	r0, #10
 8005b24:	f000 fd64 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 8005b28:	f000 fbee 	bl	8006308 <OLED_Refresh_Gram>
		while (moving) {
 8005b2c:	4b3b      	ldr	r3, [pc, #236]	; (8005c1c <spotTurn+0x5e8>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1d9      	bne.n	8005ae8 <spotTurn+0x4b4>
 8005b34:	e000      	b.n	8005b38 <spotTurn+0x504>
				break;
 8005b36:	bf00      	nop
		}

		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2108      	movs	r1, #8
 8005b3c:	4832      	ldr	r0, [pc, #200]	; (8005c08 <spotTurn+0x5d4>)
 8005b3e:	f001 fe7d 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8005b42:	2201      	movs	r2, #1
 8005b44:	2104      	movs	r1, #4
 8005b46:	4830      	ldr	r0, [pc, #192]	; (8005c08 <spotTurn+0x5d4>)
 8005b48:	f001 fe78 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b52:	482e      	ldr	r0, [pc, #184]	; (8005c0c <spotTurn+0x5d8>)
 8005b54:	f001 fe72 	bl	800783c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8005b58:	2201      	movs	r2, #1
 8005b5a:	2120      	movs	r1, #32
 8005b5c:	482c      	ldr	r0, [pc, #176]	; (8005c10 <spotTurn+0x5dc>)
 8005b5e:	f001 fe6d 	bl	800783c <HAL_GPIO_WritePin>
		htim1.Instance->CCR4 = LEFT;
 8005b62:	4b2c      	ldr	r3, [pc, #176]	; (8005c14 <spotTurn+0x5e0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2269      	movs	r2, #105	; 0x69
 8005b68:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 800);
 8005b6a:	4b2b      	ldr	r3, [pc, #172]	; (8005c18 <spotTurn+0x5e4>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005b72:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1500);
 8005b74:	4b28      	ldr	r3, [pc, #160]	; (8005c18 <spotTurn+0x5e4>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005b7c:	63da      	str	r2, [r3, #60]	; 0x3c
		while (moving) {
 8005b7e:	e021      	b.n	8005bc4 <spotTurn+0x590>
			if (totalAngle <= -1 * 46) //previous: 48
 8005b80:	4b27      	ldr	r3, [pc, #156]	; (8005c20 <spotTurn+0x5ec>)
 8005b82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b86:	f04f 0200 	mov.w	r2, #0
 8005b8a:	4b2a      	ldr	r3, [pc, #168]	; (8005c34 <spotTurn+0x600>)
 8005b8c:	f7fa ffb0 	bl	8000af0 <__aeabi_dcmple>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d11b      	bne.n	8005bce <spotTurn+0x59a>
//			 if (totalAngle <= -1*45 - (targetAngle - actualAngle))//previous: 48
					{
				break;
			}
			sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8005b96:	4b22      	ldr	r3, [pc, #136]	; (8005c20 <spotTurn+0x5ec>)
 8005b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	f7fa ffda 	bl	8000b58 <__aeabi_d2iz>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	f107 0308 	add.w	r3, r7, #8
 8005baa:	491f      	ldr	r1, [pc, #124]	; (8005c28 <spotTurn+0x5f4>)
 8005bac:	4618      	mov	r0, r3
 8005bae:	f00b f88d 	bl	8010ccc <siprintf>
			OLED_ShowString(10, 20, offset_show);
 8005bb2:	f107 0308 	add.w	r3, r7, #8
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2114      	movs	r1, #20
 8005bba:	200a      	movs	r0, #10
 8005bbc:	f000 fd18 	bl	80065f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 8005bc0:	f000 fba2 	bl	8006308 <OLED_Refresh_Gram>
		while (moving) {
 8005bc4:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <spotTurn+0x5e8>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1d9      	bne.n	8005b80 <spotTurn+0x54c>
 8005bcc:	e000      	b.n	8005bd0 <spotTurn+0x59c>
				break;
 8005bce:	bf00      	nop
		}
		move(0.5, 0);
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8005bd6:	f7ff f80d 	bl	8004bf4 <move>
	}
	//Stop wheels and let wheels be straight
	htim1.Instance->CCR4 = STRAIGHT;
 8005bda:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <spotTurn+0x5e0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2295      	movs	r2, #149	; 0x95
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005be2:	4b0d      	ldr	r3, [pc, #52]	; (8005c18 <spotTurn+0x5e4>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2200      	movs	r2, #0
 8005be8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005bea:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <spotTurn+0x5e4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <spotTurn+0x5e8>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	701a      	strb	r2, [r3, #0]
//	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);

	osDelay(100);
 8005bf8:	2064      	movs	r0, #100	; 0x64
 8005bfa:	f007 fc88 	bl	800d50e <osDelay>
}
 8005bfe:	bf00      	nop
 8005c00:	3730      	adds	r7, #48	; 0x30
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	40020000 	.word	0x40020000
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	40020800 	.word	0x40020800
 8005c14:	20000258 	.word	0x20000258
 8005c18:	20000378 	.word	0x20000378
 8005c1c:	20000414 	.word	0x20000414
 8005c20:	20000418 	.word	0x20000418
 8005c24:	c0340000 	.word	0xc0340000
 8005c28:	080148e8 	.word	0x080148e8
 8005c2c:	c0418000 	.word	0xc0418000
 8005c30:	c0300000 	.word	0xc0300000
 8005c34:	c0470000 	.word	0xc0470000

08005c38 <readByte>:

////////////////////GYRO FUNCTIONS//////////////////////////
void readByte(uint8_t addr, uint8_t *data) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	4603      	mov	r3, r0
 8005c40:	6039      	str	r1, [r7, #0]
 8005c42:	71fb      	strb	r3, [r7, #7]
	buff[0] = addr;
 8005c44:	4a0f      	ldr	r2, [pc, #60]	; (8005c84 <readByte+0x4c>)
 8005c46:	79fb      	ldrb	r3, [r7, #7]
 8005c48:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, buff, 1, 10);
 8005c4a:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <readByte+0x50>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	b299      	uxth	r1, r3
 8005c54:	230a      	movs	r3, #10
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	2301      	movs	r3, #1
 8005c5a:	4a0a      	ldr	r2, [pc, #40]	; (8005c84 <readByte+0x4c>)
 8005c5c:	480b      	ldr	r0, [pc, #44]	; (8005c8c <readByte+0x54>)
 8005c5e:	f001 ff65 	bl	8007b2c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddr << 1, data, 2, 20);
 8005c62:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <readByte+0x50>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	b299      	uxth	r1, r3
 8005c6c:	2314      	movs	r3, #20
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	2302      	movs	r3, #2
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	4805      	ldr	r0, [pc, #20]	; (8005c8c <readByte+0x54>)
 8005c76:	f002 f857 	bl	8007d28 <HAL_I2C_Master_Receive>

}
 8005c7a:	bf00      	nop
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20000448 	.word	0x20000448
 8005c88:	20000000 	.word	0x20000000
 8005c8c:	20000204 	.word	0x20000204

08005c90 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	4603      	mov	r3, r0
 8005c98:	460a      	mov	r2, r1
 8005c9a:	71fb      	strb	r3, [r7, #7]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	71bb      	strb	r3, [r7, #6]
	buff[0] = addr;
 8005ca0:	4a0a      	ldr	r2, [pc, #40]	; (8005ccc <writeByte+0x3c>)
 8005ca2:	79fb      	ldrb	r3, [r7, #7]
 8005ca4:	7013      	strb	r3, [r2, #0]
	buff[1] = data;
 8005ca6:	4a09      	ldr	r2, [pc, #36]	; (8005ccc <writeByte+0x3c>)
 8005ca8:	79bb      	ldrb	r3, [r7, #6]
 8005caa:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, buff, 2, 20);
 8005cac:	4b08      	ldr	r3, [pc, #32]	; (8005cd0 <writeByte+0x40>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	b299      	uxth	r1, r3
 8005cb6:	2314      	movs	r3, #20
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	2302      	movs	r3, #2
 8005cbc:	4a03      	ldr	r2, [pc, #12]	; (8005ccc <writeByte+0x3c>)
 8005cbe:	4805      	ldr	r0, [pc, #20]	; (8005cd4 <writeByte+0x44>)
 8005cc0:	f001 ff34 	bl	8007b2c <HAL_I2C_Master_Transmit>
}
 8005cc4:	bf00      	nop
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	20000448 	.word	0x20000448
 8005cd0:	20000000 	.word	0x20000000
 8005cd4:	20000204 	.word	0x20000204

08005cd8 <gyroStart>:

void gyroStart() {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
	writeByte(0x07, 0x07);
 8005cdc:	2107      	movs	r1, #7
 8005cde:	2007      	movs	r0, #7
 8005ce0:	f7ff ffd6 	bl	8005c90 <writeByte>
	osDelayUntil(10);
 8005ce4:	200a      	movs	r0, #10
 8005ce6:	f007 fc2d 	bl	800d544 <osDelayUntil>

	writeByte(0x07, 0x00);
 8005cea:	2100      	movs	r1, #0
 8005cec:	2007      	movs	r0, #7
 8005cee:	f7ff ffcf 	bl	8005c90 <writeByte>
	osDelayUntil(10);
 8005cf2:	200a      	movs	r0, #10
 8005cf4:	f007 fc26 	bl	800d544 <osDelayUntil>
}
 8005cf8:	bf00      	nop
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <gyroInit>:

void gyroInit() {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0

	writeByte(0x06, 0x00);
 8005d00:	2100      	movs	r1, #0
 8005d02:	2006      	movs	r0, #6
 8005d04:	f7ff ffc4 	bl	8005c90 <writeByte>
	osDelayUntil(10);
 8005d08:	200a      	movs	r0, #10
 8005d0a:	f007 fc1b 	bl	800d544 <osDelayUntil>
	writeByte(0x03, 0x80);
 8005d0e:	2180      	movs	r1, #128	; 0x80
 8005d10:	2003      	movs	r0, #3
 8005d12:	f7ff ffbd 	bl	8005c90 <writeByte>
	osDelayUntil(10);
 8005d16:	200a      	movs	r0, #10
 8005d18:	f007 fc14 	bl	800d544 <osDelayUntil>
	writeByte(0x07, 0x07);
 8005d1c:	2107      	movs	r1, #7
 8005d1e:	2007      	movs	r0, #7
 8005d20:	f7ff ffb6 	bl	8005c90 <writeByte>
	osDelayUntil(10);
 8005d24:	200a      	movs	r0, #10
 8005d26:	f007 fc0d 	bl	800d544 <osDelayUntil>
	writeByte(0x06, 0x01);
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	2006      	movs	r0, #6
 8005d2e:	f7ff ffaf 	bl	8005c90 <writeByte>
	osDelayUntil(10);
 8005d32:	200a      	movs	r0, #10
 8005d34:	f007 fc06 	bl	800d544 <osDelayUntil>
	writeByte(0x7F, 0x20);
 8005d38:	2120      	movs	r1, #32
 8005d3a:	207f      	movs	r0, #127	; 0x7f
 8005d3c:	f7ff ffa8 	bl	8005c90 <writeByte>
	osDelayUntil(10);
 8005d40:	200a      	movs	r0, #10
 8005d42:	f007 fbff 	bl	800d544 <osDelayUntil>
	writeByte(0x01, 0x2F);
 8005d46:	212f      	movs	r1, #47	; 0x2f
 8005d48:	2001      	movs	r0, #1
 8005d4a:	f7ff ffa1 	bl	8005c90 <writeByte>
	osDelayUntil(10);
 8005d4e:	200a      	movs	r0, #10
 8005d50:	f007 fbf8 	bl	800d544 <osDelayUntil>
	writeByte(0x0, 0x00);
 8005d54:	2100      	movs	r1, #0
 8005d56:	2000      	movs	r0, #0
 8005d58:	f7ff ff9a 	bl	8005c90 <writeByte>
	osDelayUntil(10);
 8005d5c:	200a      	movs	r0, #10
 8005d5e:	f007 fbf1 	bl	800d544 <osDelayUntil>
	writeByte(0x7F, 0x00);
 8005d62:	2100      	movs	r1, #0
 8005d64:	207f      	movs	r0, #127	; 0x7f
 8005d66:	f7ff ff93 	bl	8005c90 <writeByte>
	osDelayUntil(10);
 8005d6a:	200a      	movs	r0, #10
 8005d6c:	f007 fbea 	bl	800d544 <osDelayUntil>
	writeByte(0x07, 0x00);
 8005d70:	2100      	movs	r1, #0
 8005d72:	2007      	movs	r0, #7
 8005d74:	f7ff ff8c 	bl	8005c90 <writeByte>
	osDelayUntil(10);
 8005d78:	200a      	movs	r0, #10
 8005d7a:	f007 fbe3 	bl	800d544 <osDelayUntil>

}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b090      	sub	sp, #64	; 0x40
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t instrBuffer[40], angle;
	uint16_t i = 0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	86fb      	strh	r3, [r7, #54]	; 0x36
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 1);
 8005d90:	2201      	movs	r2, #1
 8005d92:	49c1      	ldr	r1, [pc, #772]	; (8006098 <StartDefaultTask+0x314>)
 8005d94:	48c1      	ldr	r0, [pc, #772]	; (800609c <StartDefaultTask+0x318>)
 8005d96:	f006 fb10 	bl	800c3ba <HAL_UART_Receive_IT>

	moving = 0;
 8005d9a:	4bc1      	ldr	r3, [pc, #772]	; (80060a0 <StartDefaultTask+0x31c>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	701a      	strb	r2, [r3, #0]
	cmd = data = newCmdReceived = 0;
 8005da0:	4bc0      	ldr	r3, [pc, #768]	; (80060a4 <StartDefaultTask+0x320>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	4bc0      	ldr	r3, [pc, #768]	; (80060a8 <StartDefaultTask+0x324>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	4bbe      	ldr	r3, [pc, #760]	; (80060a8 <StartDefaultTask+0x324>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	4bbe      	ldr	r3, [pc, #760]	; (80060ac <StartDefaultTask+0x328>)
 8005db4:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	for (;;) {

		//Toggle LED just to see if the code is running
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8005db6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005dba:	48bd      	ldr	r0, [pc, #756]	; (80060b0 <StartDefaultTask+0x32c>)
 8005dbc:	f001 fd57 	bl	800786e <HAL_GPIO_TogglePin>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005dc0:	210c      	movs	r1, #12
 8005dc2:	48bc      	ldr	r0, [pc, #752]	; (80060b4 <StartDefaultTask+0x330>)
 8005dc4:	f004 fdf0 	bl	800a9a8 <HAL_TIM_PWM_Start>

		htim1.Instance->CCR4 = STRAIGHT; //centre
 8005dc8:	4bba      	ldr	r3, [pc, #744]	; (80060b4 <StartDefaultTask+0x330>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2295      	movs	r2, #149	; 0x95
 8005dce:	641a      	str	r2, [r3, #64]	; 0x40
		// 1: forward
		// 2: left
		// 3: right
		// 4: reverse
		// 5: shortest path
		if (newCmdReceived == 1) {
 8005dd0:	4bb4      	ldr	r3, [pc, #720]	; (80060a4 <StartDefaultTask+0x320>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	f040 817f 	bne.w	80060d8 <StartDefaultTask+0x354>
			newCmdReceived = 0;
 8005dda:	4bb2      	ldr	r3, [pc, #712]	; (80060a4 <StartDefaultTask+0x320>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	701a      	strb	r2, [r3, #0]
//		sprintf(instrBuffer, "d: %d\0", data);
//		sendToRPI(instrBuffer);
//		OLED_ShowString(10, 30, instrBuffer);
//		OLED_Refresh_Gram();
//		cmd = 'w';
			switch (cmd) {
 8005de0:	4bb2      	ldr	r3, [pc, #712]	; (80060ac <StartDefaultTask+0x328>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	3b4c      	subs	r3, #76	; 0x4c
 8005de6:	2b2c      	cmp	r3, #44	; 0x2c
 8005de8:	f200 8172 	bhi.w	80060d0 <StartDefaultTask+0x34c>
 8005dec:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <StartDefaultTask+0x70>)
 8005dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df2:	bf00      	nop
 8005df4:	08005fed 	.word	0x08005fed
 8005df8:	080060d1 	.word	0x080060d1
 8005dfc:	080060d1 	.word	0x080060d1
 8005e00:	080060d1 	.word	0x080060d1
 8005e04:	080060d1 	.word	0x080060d1
 8005e08:	080060d1 	.word	0x080060d1
 8005e0c:	08005ff9 	.word	0x08005ff9
 8005e10:	080060d1 	.word	0x080060d1
 8005e14:	08006075 	.word	0x08006075
 8005e18:	080060d1 	.word	0x080060d1
 8005e1c:	080060d1 	.word	0x080060d1
 8005e20:	080060d1 	.word	0x080060d1
 8005e24:	08006013 	.word	0x08006013
 8005e28:	08006087 	.word	0x08006087
 8005e2c:	080060d1 	.word	0x080060d1
 8005e30:	080060d1 	.word	0x080060d1
 8005e34:	080060d1 	.word	0x080060d1
 8005e38:	080060d1 	.word	0x080060d1
 8005e3c:	080060d1 	.word	0x080060d1
 8005e40:	080060d1 	.word	0x080060d1
 8005e44:	080060d1 	.word	0x080060d1
 8005e48:	08005fd1 	.word	0x08005fd1
 8005e4c:	080060d1 	.word	0x080060d1
 8005e50:	080060d1 	.word	0x080060d1
 8005e54:	08005fdf 	.word	0x08005fdf
 8005e58:	080060d1 	.word	0x080060d1
 8005e5c:	080060d1 	.word	0x080060d1
 8005e60:	080060d1 	.word	0x080060d1
 8005e64:	080060d1 	.word	0x080060d1
 8005e68:	080060d1 	.word	0x080060d1
 8005e6c:	080060d1 	.word	0x080060d1
 8005e70:	080060d1 	.word	0x080060d1
 8005e74:	08005f31 	.word	0x08005f31
 8005e78:	080060d1 	.word	0x080060d1
 8005e7c:	080060d1 	.word	0x080060d1
 8005e80:	080060d1 	.word	0x080060d1
 8005e84:	08006021 	.word	0x08006021
 8005e88:	080060d1 	.word	0x080060d1
 8005e8c:	08005f3d 	.word	0x08005f3d
 8005e90:	08005f49 	.word	0x08005f49
 8005e94:	08006057 	.word	0x08006057
 8005e98:	0800603f 	.word	0x0800603f
 8005e9c:	080060d1 	.word	0x080060d1
 8005ea0:	08005ea9 	.word	0x08005ea9
 8005ea4:	08006005 	.word	0x08006005
			case 'w':
				num_loops = floor(data / 50);
 8005ea8:	4b7f      	ldr	r3, [pc, #508]	; (80060a8 <StartDefaultTask+0x324>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a82      	ldr	r2, [pc, #520]	; (80060b8 <StartDefaultTask+0x334>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	091b      	lsrs	r3, r3, #4
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fa fb25 	bl	8000504 <__aeabi_ui2d>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	f7fa fe71 	bl	8000ba8 <__aeabi_d2uiz>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	4b7c      	ldr	r3, [pc, #496]	; (80060bc <StartDefaultTask+0x338>)
 8005ecc:	701a      	strb	r2, [r3, #0]
				remainder_dist = data % 50;
 8005ece:	4b76      	ldr	r3, [pc, #472]	; (80060a8 <StartDefaultTask+0x324>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	4b79      	ldr	r3, [pc, #484]	; (80060b8 <StartDefaultTask+0x334>)
 8005ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed8:	091b      	lsrs	r3, r3, #4
 8005eda:	2132      	movs	r1, #50	; 0x32
 8005edc:	fb01 f303 	mul.w	r3, r1, r3
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	4b76      	ldr	r3, [pc, #472]	; (80060c0 <StartDefaultTask+0x33c>)
 8005ee6:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < num_loops; i++) {
 8005ee8:	2300      	movs	r3, #0
 8005eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eec:	e007      	b.n	8005efe <StartDefaultTask+0x17a>
					moveGyroPID(50, 1);
 8005eee:	2001      	movs	r0, #1
 8005ef0:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80060c4 <StartDefaultTask+0x340>
 8005ef4:	f7fd ff94 	bl	8003e20 <moveGyroPID>
				for (int i = 0; i < num_loops; i++) {
 8005ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005efa:	3301      	adds	r3, #1
 8005efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005efe:	4b6f      	ldr	r3, [pc, #444]	; (80060bc <StartDefaultTask+0x338>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f06:	4293      	cmp	r3, r2
 8005f08:	dbf1      	blt.n	8005eee <StartDefaultTask+0x16a>
				}
				if (remainder_dist != 0)
 8005f0a:	4b6d      	ldr	r3, [pc, #436]	; (80060c0 <StartDefaultTask+0x33c>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <StartDefaultTask+0x1a4>
					moveGyroPID(remainder_dist, 1);
 8005f12:	4b6b      	ldr	r3, [pc, #428]	; (80060c0 <StartDefaultTask+0x33c>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1e:	2001      	movs	r0, #1
 8005f20:	eeb0 0a67 	vmov.f32	s0, s15
 8005f24:	f7fd ff7c 	bl	8003e20 <moveGyroPID>
//			moveGyroPIDOld(10,1);
//			gyro_move(data, 1);
//			sendToRPI("Forward done!f\n\0");
				sendToRPI("RPI:d");
 8005f28:	4867      	ldr	r0, [pc, #412]	; (80060c8 <StartDefaultTask+0x344>)
 8005f2a:	f7fd ff63 	bl	8003df4 <sendToRPI>
				break;
 8005f2e:	e0d0      	b.n	80060d2 <StartDefaultTask+0x34e>
			case 'l':
//			turn(1, 1);
				left90();
 8005f30:	f7ff fa60 	bl	80053f4 <left90>
//			sendToRPI("Left done!\0");
				sendToRPI("RPI:d");
 8005f34:	4864      	ldr	r0, [pc, #400]	; (80060c8 <StartDefaultTask+0x344>)
 8005f36:	f7fd ff5d 	bl	8003df4 <sendToRPI>
				break;
 8005f3a:	e0ca      	b.n	80060d2 <StartDefaultTask+0x34e>
			case 'r':
//			turn(0, 1);
				right90();
 8005f3c:	f7ff faf0 	bl	8005520 <right90>
//			sendToRPI("Right done!\0");
				sendToRPI("RPI:d");
 8005f40:	4861      	ldr	r0, [pc, #388]	; (80060c8 <StartDefaultTask+0x344>)
 8005f42:	f7fd ff57 	bl	8003df4 <sendToRPI>
				break;
 8005f46:	e0c4      	b.n	80060d2 <StartDefaultTask+0x34e>
			case 's':
				num_loops = floor(data / 50);
 8005f48:	4b57      	ldr	r3, [pc, #348]	; (80060a8 <StartDefaultTask+0x324>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a5a      	ldr	r2, [pc, #360]	; (80060b8 <StartDefaultTask+0x334>)
 8005f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f52:	091b      	lsrs	r3, r3, #4
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fa fad5 	bl	8000504 <__aeabi_ui2d>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4610      	mov	r0, r2
 8005f60:	4619      	mov	r1, r3
 8005f62:	f7fa fe21 	bl	8000ba8 <__aeabi_d2uiz>
 8005f66:	4603      	mov	r3, r0
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	4b54      	ldr	r3, [pc, #336]	; (80060bc <StartDefaultTask+0x338>)
 8005f6c:	701a      	strb	r2, [r3, #0]
				remainder_dist = data % 50;
 8005f6e:	4b4e      	ldr	r3, [pc, #312]	; (80060a8 <StartDefaultTask+0x324>)
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	4b51      	ldr	r3, [pc, #324]	; (80060b8 <StartDefaultTask+0x334>)
 8005f74:	fba3 1302 	umull	r1, r3, r3, r2
 8005f78:	091b      	lsrs	r3, r3, #4
 8005f7a:	2132      	movs	r1, #50	; 0x32
 8005f7c:	fb01 f303 	mul.w	r3, r1, r3
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	4b4e      	ldr	r3, [pc, #312]	; (80060c0 <StartDefaultTask+0x33c>)
 8005f86:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < num_loops; i++) {
 8005f88:	2300      	movs	r3, #0
 8005f8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f8c:	e007      	b.n	8005f9e <StartDefaultTask+0x21a>
					moveGyroPID(50, 0);
 8005f8e:	2000      	movs	r0, #0
 8005f90:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80060c4 <StartDefaultTask+0x340>
 8005f94:	f7fd ff44 	bl	8003e20 <moveGyroPID>
				for (int i = 0; i < num_loops; i++) {
 8005f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f9e:	4b47      	ldr	r3, [pc, #284]	; (80060bc <StartDefaultTask+0x338>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	dbf1      	blt.n	8005f8e <StartDefaultTask+0x20a>
				}
				if (remainder_dist != 0)
 8005faa:	4b45      	ldr	r3, [pc, #276]	; (80060c0 <StartDefaultTask+0x33c>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <StartDefaultTask+0x244>
					moveGyroPID(remainder_dist, 0);
 8005fb2:	4b43      	ldr	r3, [pc, #268]	; (80060c0 <StartDefaultTask+0x33c>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8005fc4:	f7fd ff2c 	bl	8003e20 <moveGyroPID>
//			moveGyroPIDOld(10, 0);
//			sendToRPI("Reverse done!\0");
				sendToRPI("RPI:d");
 8005fc8:	483f      	ldr	r0, [pc, #252]	; (80060c8 <StartDefaultTask+0x344>)
 8005fca:	f7fd ff13 	bl	8003df4 <sendToRPI>
				break;
 8005fce:	e080      	b.n	80060d2 <StartDefaultTask+0x34e>
			case 'a':
				spotTurn(1);
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	f7ff fb2f 	bl	8005634 <spotTurn>
				sendToRPI("RPI:d");
 8005fd6:	483c      	ldr	r0, [pc, #240]	; (80060c8 <StartDefaultTask+0x344>)
 8005fd8:	f7fd ff0c 	bl	8003df4 <sendToRPI>
				break;
 8005fdc:	e079      	b.n	80060d2 <StartDefaultTask+0x34e>
			case 'd':
				spotTurn(0);
 8005fde:	2000      	movs	r0, #0
 8005fe0:	f7ff fb28 	bl	8005634 <spotTurn>
				sendToRPI("RPI:d");
 8005fe4:	4838      	ldr	r0, [pc, #224]	; (80060c8 <StartDefaultTask+0x344>)
 8005fe6:	f7fd ff05 	bl	8003df4 <sendToRPI>
				break;
 8005fea:	e072      	b.n	80060d2 <StartDefaultTask+0x34e>
			case 'L':
				bLeft90();
 8005fec:	f7ff f8d4 	bl	8005198 <bLeft90>
//			sendToRPI("Reverse Left done!\0");
				sendToRPI("RPI:d");
 8005ff0:	4835      	ldr	r0, [pc, #212]	; (80060c8 <StartDefaultTask+0x344>)
 8005ff2:	f7fd feff 	bl	8003df4 <sendToRPI>
				break;
 8005ff6:	e06c      	b.n	80060d2 <StartDefaultTask+0x34e>
			case 'R':
				bRight90();
 8005ff8:	f7ff f968 	bl	80052cc <bRight90>
//			sendToRPI("Reverse Right done!\0");
				sendToRPI("RPI:d");
 8005ffc:	4832      	ldr	r0, [pc, #200]	; (80060c8 <StartDefaultTask+0x344>)
 8005ffe:	f7fd fef9 	bl	8003df4 <sendToRPI>
				break;
 8006002:	e066      	b.n	80060d2 <StartDefaultTask+0x34e>
			case 'x':
				spotTurn(1); //spotTurn left
 8006004:	2001      	movs	r0, #1
 8006006:	f7ff fb15 	bl	8005634 <spotTurn>
				sendToRPI("RPI:d");
 800600a:	482f      	ldr	r0, [pc, #188]	; (80060c8 <StartDefaultTask+0x344>)
 800600c:	f7fd fef2 	bl	8003df4 <sendToRPI>
				break;
 8006010:	e05f      	b.n	80060d2 <StartDefaultTask+0x34e>
			case 'X':
				spotTurn(0); //spotTurn right
 8006012:	2000      	movs	r0, #0
 8006014:	f7ff fb0e 	bl	8005634 <spotTurn>
				sendToRPI("RPI:d");
 8006018:	482b      	ldr	r0, [pc, #172]	; (80060c8 <StartDefaultTask+0x344>)
 800601a:	f7fd feeb 	bl	8003df4 <sendToRPI>
				break;
 800601e:	e058      	b.n	80060d2 <StartDefaultTask+0x34e>
			case 'p': // take photo
				sendToRPI("RPI:d");
 8006020:	4829      	ldr	r0, [pc, #164]	; (80060c8 <StartDefaultTask+0x344>)
 8006022:	f7fd fee7 	bl	8003df4 <sendToRPI>
				osDelay(1000);
 8006026:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800602a:	f007 fa70 	bl	800d50e <osDelay>
				sendToRPI("RPI:s"); // command for rpi to take photo
 800602e:	4827      	ldr	r0, [pc, #156]	; (80060cc <StartDefaultTask+0x348>)
 8006030:	f7fd fee0 	bl	8003df4 <sendToRPI>
				osDelay(1000);
 8006034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006038:	f007 fa69 	bl	800d50e <osDelay>
				break;
 800603c:	e049      	b.n	80060d2 <StartDefaultTask+0x34e>
			case 'u':
				moveUltra();
 800603e:	f7fc fec5 	bl	8002dcc <moveUltra>
				sendToRPI("RPI:d");
 8006042:	4821      	ldr	r0, [pc, #132]	; (80060c8 <StartDefaultTask+0x344>)
 8006044:	f7fd fed6 	bl	8003df4 <sendToRPI>
				osDelay(50);
 8006048:	2032      	movs	r0, #50	; 0x32
 800604a:	f007 fa60 	bl	800d50e <osDelay>
				sendToRPI("RPI:s"); // command for rpi to take photo
 800604e:	481f      	ldr	r0, [pc, #124]	; (80060cc <StartDefaultTask+0x348>)
 8006050:	f7fd fed0 	bl	8003df4 <sendToRPI>
//			osDelay(1000);
				break;
 8006054:	e03d      	b.n	80060d2 <StartDefaultTask+0x34e>
			case 't': // tln or trn
				task2A(data);
 8006056:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <StartDefaultTask+0x324>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f7fb fce4 	bl	8001a28 <task2A>
				sendToRPI("RPI:d");
 8006060:	4819      	ldr	r0, [pc, #100]	; (80060c8 <StartDefaultTask+0x344>)
 8006062:	f7fd fec7 	bl	8003df4 <sendToRPI>
				osDelay(50);
 8006066:	2032      	movs	r0, #50	; 0x32
 8006068:	f007 fa51 	bl	800d50e <osDelay>
				sendToRPI("RPI:s"); // command for rpi to take photo
 800606c:	4817      	ldr	r0, [pc, #92]	; (80060cc <StartDefaultTask+0x348>)
 800606e:	f7fd fec1 	bl	8003df4 <sendToRPI>
//			osDelay(1000);
				break;
 8006072:	e02e      	b.n	80060d2 <StartDefaultTask+0x34e>
			case 'T': // when first obstacle goes right-> Tln or Trn
				task2A2(data);
 8006074:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <StartDefaultTask+0x324>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4618      	mov	r0, r3
 800607a:	f7fb fec1 	bl	8001e00 <task2A2>
				sendToRPI("RPI:d");
 800607e:	4812      	ldr	r0, [pc, #72]	; (80060c8 <StartDefaultTask+0x344>)
 8006080:	f7fd feb8 	bl	8003df4 <sendToRPI>
				break;
 8006084:	e025      	b.n	80060d2 <StartDefaultTask+0x34e>
			case 'Y': // when first obstacle goes left-> Yln or Yrn
				task2A2L(data);
 8006086:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <StartDefaultTask+0x324>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f7fc fab0 	bl	80025f0 <task2A2L>
				sendToRPI("RPI:d");
 8006090:	480d      	ldr	r0, [pc, #52]	; (80060c8 <StartDefaultTask+0x344>)
 8006092:	f7fd feaf 	bl	8003df4 <sendToRPI>
				break;
 8006096:	e01c      	b.n	80060d2 <StartDefaultTask+0x34e>
 8006098:	20000428 	.word	0x20000428
 800609c:	200003c0 	.word	0x200003c0
 80060a0:	20000414 	.word	0x20000414
 80060a4:	20000429 	.word	0x20000429
 80060a8:	2000042c 	.word	0x2000042c
 80060ac:	2000042a 	.word	0x2000042a
 80060b0:	40021000 	.word	0x40021000
 80060b4:	20000258 	.word	0x20000258
 80060b8:	51eb851f 	.word	0x51eb851f
 80060bc:	20000430 	.word	0x20000430
 80060c0:	20000431 	.word	0x20000431
 80060c4:	42480000 	.word	0x42480000
 80060c8:	08014954 	.word	0x08014954
 80060cc:	0801495c 	.word	0x0801495c
			default:
				break;
 80060d0:	bf00      	nop
			}

			data = 0;
 80060d2:	4b03      	ldr	r3, [pc, #12]	; (80060e0 <StartDefaultTask+0x35c>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]
		}
		osDelay(50);
 80060d8:	2032      	movs	r0, #50	; 0x32
 80060da:	f007 fa18 	bl	800d50e <osDelay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80060de:	e66a      	b.n	8005db6 <StartDefaultTask+0x32>
 80060e0:	2000042c 	.word	0x2000042c

080060e4 <oled_show>:
 * @brief Function implementing the OLEDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_oled_show */
void oled_show(void *argument) {
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN oled_show */
	/* Infinite loop */

	for (;;) {
 80060ec:	e7fe      	b.n	80060ec <oled_show+0x8>
	...

080060f0 <gyro_read>:
 * @brief Function implementing the myTask09 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_gyro_read */
void gyro_read(void *argument) {
 80060f0:	b5b0      	push	{r4, r5, r7, lr}
 80060f2:	b090      	sub	sp, #64	; 0x40
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN gyro_read */
	/* Infinite loop */
	uint8_t val[2] = { 0, 0 };
 80060f8:	2300      	movs	r3, #0
 80060fa:	863b      	strh	r3, [r7, #48]	; 0x30
	uint16_t offset_show[20];
	int16_t angularSpeed = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint32_t tick = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	63fb      	str	r3, [r7, #60]	; 0x3c
	int dir, offset;
	offset = 0;
 8006104:	2300      	movs	r3, #0
 8006106:	637b      	str	r3, [r7, #52]	; 0x34

	gyroInit();
 8006108:	f7ff fdf8 	bl	8005cfc <gyroInit>
	gyroStart();
 800610c:	f7ff fde4 	bl	8005cd8 <gyroStart>
	tick = HAL_GetTick();
 8006110:	f001 f816 	bl	8007140 <HAL_GetTick>
 8006114:	63f8      	str	r0, [r7, #60]	; 0x3c
	osDelayUntil(10);
 8006116:	200a      	movs	r0, #10
 8006118:	f007 fa14 	bl	800d544 <osDelayUntil>
	actualAngle = 0;
 800611c:	4966      	ldr	r1, [pc, #408]	; (80062b8 <gyro_read+0x1c8>)
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	e9c1 2300 	strd	r2, r3, [r1]

	for (;;) {

		if (HAL_GetTick() - tick >= 100L) {
 800612a:	f001 f809 	bl	8007140 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b63      	cmp	r3, #99	; 0x63
 8006136:	d9f8      	bls.n	800612a <gyro_read+0x3a>

			//read gyro value Z-axis
			readByte(0x37, val);
 8006138:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800613c:	4619      	mov	r1, r3
 800613e:	2037      	movs	r0, #55	; 0x37
 8006140:	f7ff fd7a 	bl	8005c38 <readByte>
			//Angle per >100 ticks
			angularSpeed = (val[0] << 8) | val[1];
 8006144:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	b21a      	sxth	r2, r3
 800614c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006150:	b21b      	sxth	r3, r3
 8006152:	4313      	orrs	r3, r2
 8006154:	877b      	strh	r3, [r7, #58]	; 0x3a

			if (moving || moveStraight) {
 8006156:	4b59      	ldr	r3, [pc, #356]	; (80062bc <gyro_read+0x1cc>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d104      	bne.n	8006168 <gyro_read+0x78>
 800615e:	4b58      	ldr	r3, [pc, #352]	; (80062c0 <gyro_read+0x1d0>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 8095 	beq.w	8006292 <gyro_read+0x1a2>
//			  actualAngle += (double)(angularSpeed + 0.5)*((HAL_GetTick() - tick)/16400.0)*1.02;
				totalAngle += (double) (angularSpeed + 0.5)
 8006168:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800616c:	4618      	mov	r0, r3
 800616e:	f7fa f9d9 	bl	8000524 <__aeabi_i2d>
 8006172:	f04f 0200 	mov.w	r2, #0
 8006176:	4b53      	ldr	r3, [pc, #332]	; (80062c4 <gyro_read+0x1d4>)
 8006178:	f7fa f888 	bl	800028c <__adddf3>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4614      	mov	r4, r2
 8006182:	461d      	mov	r5, r3
						* ((HAL_GetTick() - tick) / 16400.0) * 1.02;
 8006184:	f000 ffdc 	bl	8007140 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	4618      	mov	r0, r3
 8006190:	f7fa f9b8 	bl	8000504 <__aeabi_ui2d>
 8006194:	a344      	add	r3, pc, #272	; (adr r3, 80062a8 <gyro_read+0x1b8>)
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	f7fa fb57 	bl	800084c <__aeabi_ddiv>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4620      	mov	r0, r4
 80061a4:	4629      	mov	r1, r5
 80061a6:	f7fa fa27 	bl	80005f8 <__aeabi_dmul>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4610      	mov	r0, r2
 80061b0:	4619      	mov	r1, r3
 80061b2:	a33f      	add	r3, pc, #252	; (adr r3, 80062b0 <gyro_read+0x1c0>)
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f7fa fa1e 	bl	80005f8 <__aeabi_dmul>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4610      	mov	r0, r2
 80061c2:	4619      	mov	r1, r3
				totalAngle += (double) (angularSpeed + 0.5)
 80061c4:	4b40      	ldr	r3, [pc, #256]	; (80062c8 <gyro_read+0x1d8>)
 80061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ca:	f7fa f85f 	bl	800028c <__adddf3>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	493d      	ldr	r1, [pc, #244]	; (80062c8 <gyro_read+0x1d8>)
 80061d4:	e9c1 2300 	strd	r2, r3, [r1]
				actualAngle += (double) (angularSpeed + 0.5)
 80061d8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fa f9a1 	bl	8000524 <__aeabi_i2d>
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	4b37      	ldr	r3, [pc, #220]	; (80062c4 <gyro_read+0x1d4>)
 80061e8:	f7fa f850 	bl	800028c <__adddf3>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4614      	mov	r4, r2
 80061f2:	461d      	mov	r5, r3
						* ((HAL_GetTick() - tick) / 16400.0) * 1.02;
 80061f4:	f000 ffa4 	bl	8007140 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fa f980 	bl	8000504 <__aeabi_ui2d>
 8006204:	a328      	add	r3, pc, #160	; (adr r3, 80062a8 <gyro_read+0x1b8>)
 8006206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620a:	f7fa fb1f 	bl	800084c <__aeabi_ddiv>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4620      	mov	r0, r4
 8006214:	4629      	mov	r1, r5
 8006216:	f7fa f9ef 	bl	80005f8 <__aeabi_dmul>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4610      	mov	r0, r2
 8006220:	4619      	mov	r1, r3
 8006222:	a323      	add	r3, pc, #140	; (adr r3, 80062b0 <gyro_read+0x1c0>)
 8006224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006228:	f7fa f9e6 	bl	80005f8 <__aeabi_dmul>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4610      	mov	r0, r2
 8006232:	4619      	mov	r1, r3
				actualAngle += (double) (angularSpeed + 0.5)
 8006234:	4b20      	ldr	r3, [pc, #128]	; (80062b8 <gyro_read+0x1c8>)
 8006236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623a:	f7fa f827 	bl	800028c <__adddf3>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	491d      	ldr	r1, [pc, #116]	; (80062b8 <gyro_read+0x1c8>)
 8006244:	e9c1 2300 	strd	r2, r3, [r1]

//			  if(actualAngle >= 720)
//			  {
//				  actualAngle = 0;
//			  }
				if (totalAngle >= 720) {
 8006248:	4b1f      	ldr	r3, [pc, #124]	; (80062c8 <gyro_read+0x1d8>)
 800624a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	4b1e      	ldr	r3, [pc, #120]	; (80062cc <gyro_read+0x1dc>)
 8006254:	f7fa fc56 	bl	8000b04 <__aeabi_dcmpge>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d006      	beq.n	800626c <gyro_read+0x17c>
					totalAngle = 0;
 800625e:	491a      	ldr	r1, [pc, #104]	; (80062c8 <gyro_read+0x1d8>)
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (actualAngle >= 720) {
 800626c:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <gyro_read+0x1c8>)
 800626e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006272:	f04f 0200 	mov.w	r2, #0
 8006276:	4b15      	ldr	r3, [pc, #84]	; (80062cc <gyro_read+0x1dc>)
 8006278:	f7fa fc44 	bl	8000b04 <__aeabi_dcmpge>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00e      	beq.n	80062a0 <gyro_read+0x1b0>
					actualAngle = 0;
 8006282:	490d      	ldr	r1, [pc, #52]	; (80062b8 <gyro_read+0x1c8>)
 8006284:	f04f 0200 	mov.w	r2, #0
 8006288:	f04f 0300 	mov.w	r3, #0
 800628c:	e9c1 2300 	strd	r2, r3, [r1]
				if (actualAngle >= 720) {
 8006290:	e006      	b.n	80062a0 <gyro_read+0x1b0>
				}
			} else {
				totalAngle = 0;
 8006292:	490d      	ldr	r1, [pc, #52]	; (80062c8 <gyro_read+0x1d8>)
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	e9c1 2300 	strd	r2, r3, [r1]
//

//		  sprintf(offset_show, "angle:: %5d\0", (int)(actualAngle));
//		  OLED_ShowString(10,10, offset_show);
//		  OLED_Refresh_Gram();
			tick = HAL_GetTick();
 80062a0:	f000 ff4e 	bl	8007140 <HAL_GetTick>
 80062a4:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (HAL_GetTick() - tick >= 100L) {
 80062a6:	e740      	b.n	800612a <gyro_read+0x3a>
 80062a8:	00000000 	.word	0x00000000
 80062ac:	40d00400 	.word	0x40d00400
 80062b0:	851eb852 	.word	0x851eb852
 80062b4:	3ff051eb 	.word	0x3ff051eb
 80062b8:	20000420 	.word	0x20000420
 80062bc:	20000414 	.word	0x20000414
 80062c0:	20000415 	.word	0x20000415
 80062c4:	3fe00000 	.word	0x3fe00000
 80062c8:	20000418 	.word	0x20000418
 80062cc:	40868000 	.word	0x40868000

080062d0 <servoMotor>:
 * @brief Function implementing the ServoMotor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_servoMotor */
void servoMotor(void *argument) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN servoMotor */
	uint8_t message[20];
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); //will call callback function when interrupt is detected
 80062d8:	2100      	movs	r1, #0
 80062da:	4806      	ldr	r0, [pc, #24]	; (80062f4 <servoMotor+0x24>)
 80062dc:	f004 fc7c 	bl	800abd8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80062e0:	210c      	movs	r1, #12
 80062e2:	4805      	ldr	r0, [pc, #20]	; (80062f8 <servoMotor+0x28>)
 80062e4:	f004 fb60 	bl	800a9a8 <HAL_TIM_PWM_Start>
//		osDelay(2000);
//		htim1.Instance -> CCR4 = LEFT; //left
//		osDelay(2000);
//		htim1.Instance -> CCR4 = STRAIGHT; //centre
//		osDelay(2000);
		HCSR04_Read();
 80062e8:	f7fb fadc 	bl	80018a4 <HCSR04_Read>
//		sprintf(message, "distance: %5.2f\0", Distance);
//		OLED_ShowString(10, 50, message);
//		OLED_Refresh_Gram(); //Refresh Ram
		HAL_Delay(200);
 80062ec:	20c8      	movs	r0, #200	; 0xc8
 80062ee:	f000 ff33 	bl	8007158 <HAL_Delay>
		HCSR04_Read();
 80062f2:	e7f9      	b.n	80062e8 <servoMotor+0x18>
 80062f4:	200002e8 	.word	0x200002e8
 80062f8:	20000258 	.word	0x20000258

080062fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006300:	b672      	cpsid	i
}
 8006302:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8006304:	e7fe      	b.n	8006304 <Error_Handler+0x8>
	...

08006308 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800630e:	2300      	movs	r3, #0
 8006310:	71fb      	strb	r3, [r7, #7]
 8006312:	e026      	b.n	8006362 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8006314:	79fb      	ldrb	r3, [r7, #7]
 8006316:	3b50      	subs	r3, #80	; 0x50
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2100      	movs	r1, #0
 800631c:	4618      	mov	r0, r3
 800631e:	f000 f82b 	bl	8006378 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8006322:	2100      	movs	r1, #0
 8006324:	2000      	movs	r0, #0
 8006326:	f000 f827 	bl	8006378 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800632a:	2100      	movs	r1, #0
 800632c:	2010      	movs	r0, #16
 800632e:	f000 f823 	bl	8006378 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8006332:	2300      	movs	r3, #0
 8006334:	71bb      	strb	r3, [r7, #6]
 8006336:	e00d      	b.n	8006354 <OLED_Refresh_Gram+0x4c>
 8006338:	79ba      	ldrb	r2, [r7, #6]
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	490d      	ldr	r1, [pc, #52]	; (8006374 <OLED_Refresh_Gram+0x6c>)
 800633e:	00d2      	lsls	r2, r2, #3
 8006340:	440a      	add	r2, r1
 8006342:	4413      	add	r3, r2
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2101      	movs	r1, #1
 8006348:	4618      	mov	r0, r3
 800634a:	f000 f815 	bl	8006378 <OLED_WR_Byte>
 800634e:	79bb      	ldrb	r3, [r7, #6]
 8006350:	3301      	adds	r3, #1
 8006352:	71bb      	strb	r3, [r7, #6]
 8006354:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006358:	2b00      	cmp	r3, #0
 800635a:	daed      	bge.n	8006338 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	3301      	adds	r3, #1
 8006360:	71fb      	strb	r3, [r7, #7]
 8006362:	79fb      	ldrb	r3, [r7, #7]
 8006364:	2b07      	cmp	r3, #7
 8006366:	d9d5      	bls.n	8006314 <OLED_Refresh_Gram+0xc>
	}   
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20000460 	.word	0x20000460

08006378 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	460a      	mov	r2, r1
 8006382:	71fb      	strb	r3, [r7, #7]
 8006384:	4613      	mov	r3, r2
 8006386:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8006388:	79bb      	ldrb	r3, [r7, #6]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d006      	beq.n	800639c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800638e:	2201      	movs	r2, #1
 8006390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006394:	481c      	ldr	r0, [pc, #112]	; (8006408 <OLED_WR_Byte+0x90>)
 8006396:	f001 fa51 	bl	800783c <HAL_GPIO_WritePin>
 800639a:	e005      	b.n	80063a8 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800639c:	2200      	movs	r2, #0
 800639e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063a2:	4819      	ldr	r0, [pc, #100]	; (8006408 <OLED_WR_Byte+0x90>)
 80063a4:	f001 fa4a 	bl	800783c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80063a8:	2300      	movs	r3, #0
 80063aa:	73fb      	strb	r3, [r7, #15]
 80063ac:	e01e      	b.n	80063ec <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80063ae:	2200      	movs	r2, #0
 80063b0:	2120      	movs	r1, #32
 80063b2:	4815      	ldr	r0, [pc, #84]	; (8006408 <OLED_WR_Byte+0x90>)
 80063b4:	f001 fa42 	bl	800783c <HAL_GPIO_WritePin>
		if(dat&0x80)
 80063b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	da05      	bge.n	80063cc <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80063c0:	2201      	movs	r2, #1
 80063c2:	2140      	movs	r1, #64	; 0x40
 80063c4:	4810      	ldr	r0, [pc, #64]	; (8006408 <OLED_WR_Byte+0x90>)
 80063c6:	f001 fa39 	bl	800783c <HAL_GPIO_WritePin>
 80063ca:	e004      	b.n	80063d6 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 80063cc:	2200      	movs	r2, #0
 80063ce:	2140      	movs	r1, #64	; 0x40
 80063d0:	480d      	ldr	r0, [pc, #52]	; (8006408 <OLED_WR_Byte+0x90>)
 80063d2:	f001 fa33 	bl	800783c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80063d6:	2201      	movs	r2, #1
 80063d8:	2120      	movs	r1, #32
 80063da:	480b      	ldr	r0, [pc, #44]	; (8006408 <OLED_WR_Byte+0x90>)
 80063dc:	f001 fa2e 	bl	800783c <HAL_GPIO_WritePin>
		dat<<=1;   
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
 80063e8:	3301      	adds	r3, #1
 80063ea:	73fb      	strb	r3, [r7, #15]
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	2b07      	cmp	r3, #7
 80063f0:	d9dd      	bls.n	80063ae <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80063f2:	2201      	movs	r2, #1
 80063f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063f8:	4803      	ldr	r0, [pc, #12]	; (8006408 <OLED_WR_Byte+0x90>)
 80063fa:	f001 fa1f 	bl	800783c <HAL_GPIO_WritePin>
} 
 80063fe:	bf00      	nop
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	40021000 	.word	0x40021000

0800640c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8006412:	2300      	movs	r3, #0
 8006414:	71fb      	strb	r3, [r7, #7]
 8006416:	e014      	b.n	8006442 <OLED_Clear+0x36>
 8006418:	2300      	movs	r3, #0
 800641a:	71bb      	strb	r3, [r7, #6]
 800641c:	e00a      	b.n	8006434 <OLED_Clear+0x28>
 800641e:	79ba      	ldrb	r2, [r7, #6]
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	490c      	ldr	r1, [pc, #48]	; (8006454 <OLED_Clear+0x48>)
 8006424:	00d2      	lsls	r2, r2, #3
 8006426:	440a      	add	r2, r1
 8006428:	4413      	add	r3, r2
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	79bb      	ldrb	r3, [r7, #6]
 8006430:	3301      	adds	r3, #1
 8006432:	71bb      	strb	r3, [r7, #6]
 8006434:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006438:	2b00      	cmp	r3, #0
 800643a:	daf0      	bge.n	800641e <OLED_Clear+0x12>
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	3301      	adds	r3, #1
 8006440:	71fb      	strb	r3, [r7, #7]
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	2b07      	cmp	r3, #7
 8006446:	d9e7      	bls.n	8006418 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8006448:	f7ff ff5e 	bl	8006308 <OLED_Refresh_Gram>
}
 800644c:	bf00      	nop
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	20000460 	.word	0x20000460

08006458 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	71fb      	strb	r3, [r7, #7]
 8006462:	460b      	mov	r3, r1
 8006464:	71bb      	strb	r3, [r7, #6]
 8006466:	4613      	mov	r3, r2
 8006468:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800646a:	2300      	movs	r3, #0
 800646c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800646e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006472:	2b00      	cmp	r3, #0
 8006474:	db41      	blt.n	80064fa <OLED_DrawPoint+0xa2>
 8006476:	79bb      	ldrb	r3, [r7, #6]
 8006478:	2b3f      	cmp	r3, #63	; 0x3f
 800647a:	d83e      	bhi.n	80064fa <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800647c:	79bb      	ldrb	r3, [r7, #6]
 800647e:	08db      	lsrs	r3, r3, #3
 8006480:	b2db      	uxtb	r3, r3
 8006482:	f1c3 0307 	rsb	r3, r3, #7
 8006486:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8006488:	79bb      	ldrb	r3, [r7, #6]
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8006490:	7b7b      	ldrb	r3, [r7, #13]
 8006492:	f1c3 0307 	rsb	r3, r3, #7
 8006496:	2201      	movs	r2, #1
 8006498:	fa02 f303 	lsl.w	r3, r2, r3
 800649c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800649e:	797b      	ldrb	r3, [r7, #5]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d012      	beq.n	80064ca <OLED_DrawPoint+0x72>
 80064a4:	79fa      	ldrb	r2, [r7, #7]
 80064a6:	7bbb      	ldrb	r3, [r7, #14]
 80064a8:	4917      	ldr	r1, [pc, #92]	; (8006508 <OLED_DrawPoint+0xb0>)
 80064aa:	00d2      	lsls	r2, r2, #3
 80064ac:	440a      	add	r2, r1
 80064ae:	4413      	add	r3, r2
 80064b0:	7818      	ldrb	r0, [r3, #0]
 80064b2:	79fa      	ldrb	r2, [r7, #7]
 80064b4:	7bbb      	ldrb	r3, [r7, #14]
 80064b6:	7bf9      	ldrb	r1, [r7, #15]
 80064b8:	4301      	orrs	r1, r0
 80064ba:	b2c8      	uxtb	r0, r1
 80064bc:	4912      	ldr	r1, [pc, #72]	; (8006508 <OLED_DrawPoint+0xb0>)
 80064be:	00d2      	lsls	r2, r2, #3
 80064c0:	440a      	add	r2, r1
 80064c2:	4413      	add	r3, r2
 80064c4:	4602      	mov	r2, r0
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	e018      	b.n	80064fc <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80064ca:	79fa      	ldrb	r2, [r7, #7]
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
 80064ce:	490e      	ldr	r1, [pc, #56]	; (8006508 <OLED_DrawPoint+0xb0>)
 80064d0:	00d2      	lsls	r2, r2, #3
 80064d2:	440a      	add	r2, r1
 80064d4:	4413      	add	r3, r2
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	b25a      	sxtb	r2, r3
 80064da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064de:	43db      	mvns	r3, r3
 80064e0:	b25b      	sxtb	r3, r3
 80064e2:	4013      	ands	r3, r2
 80064e4:	b259      	sxtb	r1, r3
 80064e6:	79fa      	ldrb	r2, [r7, #7]
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	b2c8      	uxtb	r0, r1
 80064ec:	4906      	ldr	r1, [pc, #24]	; (8006508 <OLED_DrawPoint+0xb0>)
 80064ee:	00d2      	lsls	r2, r2, #3
 80064f0:	440a      	add	r2, r1
 80064f2:	4413      	add	r3, r2
 80064f4:	4602      	mov	r2, r0
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	e000      	b.n	80064fc <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80064fa:	bf00      	nop
}
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	20000460 	.word	0x20000460

0800650c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800650c:	b590      	push	{r4, r7, lr}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	4604      	mov	r4, r0
 8006514:	4608      	mov	r0, r1
 8006516:	4611      	mov	r1, r2
 8006518:	461a      	mov	r2, r3
 800651a:	4623      	mov	r3, r4
 800651c:	71fb      	strb	r3, [r7, #7]
 800651e:	4603      	mov	r3, r0
 8006520:	71bb      	strb	r3, [r7, #6]
 8006522:	460b      	mov	r3, r1
 8006524:	717b      	strb	r3, [r7, #5]
 8006526:	4613      	mov	r3, r2
 8006528:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800652a:	79bb      	ldrb	r3, [r7, #6]
 800652c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800652e:	797b      	ldrb	r3, [r7, #5]
 8006530:	3b20      	subs	r3, #32
 8006532:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8006534:	2300      	movs	r3, #0
 8006536:	73bb      	strb	r3, [r7, #14]
 8006538:	e04d      	b.n	80065d6 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800653a:	793b      	ldrb	r3, [r7, #4]
 800653c:	2b0c      	cmp	r3, #12
 800653e:	d10b      	bne.n	8006558 <OLED_ShowChar+0x4c>
 8006540:	797a      	ldrb	r2, [r7, #5]
 8006542:	7bb9      	ldrb	r1, [r7, #14]
 8006544:	4828      	ldr	r0, [pc, #160]	; (80065e8 <OLED_ShowChar+0xdc>)
 8006546:	4613      	mov	r3, r2
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4403      	add	r3, r0
 8006550:	440b      	add	r3, r1
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	73fb      	strb	r3, [r7, #15]
 8006556:	e007      	b.n	8006568 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8006558:	797a      	ldrb	r2, [r7, #5]
 800655a:	7bbb      	ldrb	r3, [r7, #14]
 800655c:	4923      	ldr	r1, [pc, #140]	; (80065ec <OLED_ShowChar+0xe0>)
 800655e:	0112      	lsls	r2, r2, #4
 8006560:	440a      	add	r2, r1
 8006562:	4413      	add	r3, r2
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8006568:	2300      	movs	r3, #0
 800656a:	737b      	strb	r3, [r7, #13]
 800656c:	e02d      	b.n	80065ca <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800656e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006572:	2b00      	cmp	r3, #0
 8006574:	da07      	bge.n	8006586 <OLED_ShowChar+0x7a>
 8006576:	f897 2020 	ldrb.w	r2, [r7, #32]
 800657a:	79b9      	ldrb	r1, [r7, #6]
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff ff6a 	bl	8006458 <OLED_DrawPoint>
 8006584:	e00c      	b.n	80065a0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8006586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800658a:	2b00      	cmp	r3, #0
 800658c:	bf0c      	ite	eq
 800658e:	2301      	moveq	r3, #1
 8006590:	2300      	movne	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	461a      	mov	r2, r3
 8006596:	79b9      	ldrb	r1, [r7, #6]
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff ff5c 	bl	8006458 <OLED_DrawPoint>
			temp<<=1;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	73fb      	strb	r3, [r7, #15]
			y++;
 80065a6:	79bb      	ldrb	r3, [r7, #6]
 80065a8:	3301      	adds	r3, #1
 80065aa:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80065ac:	79ba      	ldrb	r2, [r7, #6]
 80065ae:	7b3b      	ldrb	r3, [r7, #12]
 80065b0:	1ad2      	subs	r2, r2, r3
 80065b2:	793b      	ldrb	r3, [r7, #4]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d105      	bne.n	80065c4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80065b8:	7b3b      	ldrb	r3, [r7, #12]
 80065ba:	71bb      	strb	r3, [r7, #6]
				x++;
 80065bc:	79fb      	ldrb	r3, [r7, #7]
 80065be:	3301      	adds	r3, #1
 80065c0:	71fb      	strb	r3, [r7, #7]
				break;
 80065c2:	e005      	b.n	80065d0 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80065c4:	7b7b      	ldrb	r3, [r7, #13]
 80065c6:	3301      	adds	r3, #1
 80065c8:	737b      	strb	r3, [r7, #13]
 80065ca:	7b7b      	ldrb	r3, [r7, #13]
 80065cc:	2b07      	cmp	r3, #7
 80065ce:	d9ce      	bls.n	800656e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80065d0:	7bbb      	ldrb	r3, [r7, #14]
 80065d2:	3301      	adds	r3, #1
 80065d4:	73bb      	strb	r3, [r7, #14]
 80065d6:	7bba      	ldrb	r2, [r7, #14]
 80065d8:	793b      	ldrb	r3, [r7, #4]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d3ad      	bcc.n	800653a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80065de:	bf00      	nop
 80065e0:	bf00      	nop
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd90      	pop	{r4, r7, pc}
 80065e8:	08014a0c 	.word	0x08014a0c
 80065ec:	08014e80 	.word	0x08014e80

080065f0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af02      	add	r7, sp, #8
 80065f6:	4603      	mov	r3, r0
 80065f8:	603a      	str	r2, [r7, #0]
 80065fa:	71fb      	strb	r3, [r7, #7]
 80065fc:	460b      	mov	r3, r1
 80065fe:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8006600:	e01f      	b.n	8006642 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	2b7a      	cmp	r3, #122	; 0x7a
 8006606:	d904      	bls.n	8006612 <OLED_ShowString+0x22>
 8006608:	2300      	movs	r3, #0
 800660a:	71fb      	strb	r3, [r7, #7]
 800660c:	79bb      	ldrb	r3, [r7, #6]
 800660e:	3310      	adds	r3, #16
 8006610:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8006612:	79bb      	ldrb	r3, [r7, #6]
 8006614:	2b3a      	cmp	r3, #58	; 0x3a
 8006616:	d905      	bls.n	8006624 <OLED_ShowString+0x34>
 8006618:	2300      	movs	r3, #0
 800661a:	71fb      	strb	r3, [r7, #7]
 800661c:	79fb      	ldrb	r3, [r7, #7]
 800661e:	71bb      	strb	r3, [r7, #6]
 8006620:	f7ff fef4 	bl	800640c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781a      	ldrb	r2, [r3, #0]
 8006628:	79b9      	ldrb	r1, [r7, #6]
 800662a:	79f8      	ldrb	r0, [r7, #7]
 800662c:	2301      	movs	r3, #1
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	230c      	movs	r3, #12
 8006632:	f7ff ff6b 	bl	800650c <OLED_ShowChar>
        x+=8;
 8006636:	79fb      	ldrb	r3, [r7, #7]
 8006638:	3308      	adds	r3, #8
 800663a:	71fb      	strb	r3, [r7, #7]
        p++;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	3301      	adds	r3, #1
 8006640:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1db      	bne.n	8006602 <OLED_ShowString+0x12>
    }  
}	 
 800664a:	bf00      	nop
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <OLED_Init>:

void OLED_Init(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8006658:	f003 fc7e 	bl	8009f58 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800665c:	4b41      	ldr	r3, [pc, #260]	; (8006764 <OLED_Init+0x110>)
 800665e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006660:	4a40      	ldr	r2, [pc, #256]	; (8006764 <OLED_Init+0x110>)
 8006662:	f023 0301 	bic.w	r3, r3, #1
 8006666:	6713      	str	r3, [r2, #112]	; 0x70
 8006668:	4b3e      	ldr	r3, [pc, #248]	; (8006764 <OLED_Init+0x110>)
 800666a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666c:	4a3d      	ldr	r2, [pc, #244]	; (8006764 <OLED_Init+0x110>)
 800666e:	f023 0304 	bic.w	r3, r3, #4
 8006672:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8006674:	f003 fc84 	bl	8009f80 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8006678:	2200      	movs	r2, #0
 800667a:	2180      	movs	r1, #128	; 0x80
 800667c:	483a      	ldr	r0, [pc, #232]	; (8006768 <OLED_Init+0x114>)
 800667e:	f001 f8dd 	bl	800783c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8006682:	2064      	movs	r0, #100	; 0x64
 8006684:	f000 fd68 	bl	8007158 <HAL_Delay>
	OLED_RST_Set();
 8006688:	2201      	movs	r2, #1
 800668a:	2180      	movs	r1, #128	; 0x80
 800668c:	4836      	ldr	r0, [pc, #216]	; (8006768 <OLED_Init+0x114>)
 800668e:	f001 f8d5 	bl	800783c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8006692:	2100      	movs	r1, #0
 8006694:	20ae      	movs	r0, #174	; 0xae
 8006696:	f7ff fe6f 	bl	8006378 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800669a:	2100      	movs	r1, #0
 800669c:	20d5      	movs	r0, #213	; 0xd5
 800669e:	f7ff fe6b 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80066a2:	2100      	movs	r1, #0
 80066a4:	2050      	movs	r0, #80	; 0x50
 80066a6:	f7ff fe67 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80066aa:	2100      	movs	r1, #0
 80066ac:	20a8      	movs	r0, #168	; 0xa8
 80066ae:	f7ff fe63 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80066b2:	2100      	movs	r1, #0
 80066b4:	203f      	movs	r0, #63	; 0x3f
 80066b6:	f7ff fe5f 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80066ba:	2100      	movs	r1, #0
 80066bc:	20d3      	movs	r0, #211	; 0xd3
 80066be:	f7ff fe5b 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80066c2:	2100      	movs	r1, #0
 80066c4:	2000      	movs	r0, #0
 80066c6:	f7ff fe57 	bl	8006378 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80066ca:	2100      	movs	r1, #0
 80066cc:	2040      	movs	r0, #64	; 0x40
 80066ce:	f7ff fe53 	bl	8006378 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80066d2:	2100      	movs	r1, #0
 80066d4:	208d      	movs	r0, #141	; 0x8d
 80066d6:	f7ff fe4f 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80066da:	2100      	movs	r1, #0
 80066dc:	2014      	movs	r0, #20
 80066de:	f7ff fe4b 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80066e2:	2100      	movs	r1, #0
 80066e4:	2020      	movs	r0, #32
 80066e6:	f7ff fe47 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80066ea:	2100      	movs	r1, #0
 80066ec:	2002      	movs	r0, #2
 80066ee:	f7ff fe43 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80066f2:	2100      	movs	r1, #0
 80066f4:	20a1      	movs	r0, #161	; 0xa1
 80066f6:	f7ff fe3f 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80066fa:	2100      	movs	r1, #0
 80066fc:	20c0      	movs	r0, #192	; 0xc0
 80066fe:	f7ff fe3b 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8006702:	2100      	movs	r1, #0
 8006704:	20da      	movs	r0, #218	; 0xda
 8006706:	f7ff fe37 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800670a:	2100      	movs	r1, #0
 800670c:	2012      	movs	r0, #18
 800670e:	f7ff fe33 	bl	8006378 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8006712:	2100      	movs	r1, #0
 8006714:	2081      	movs	r0, #129	; 0x81
 8006716:	f7ff fe2f 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800671a:	2100      	movs	r1, #0
 800671c:	20ef      	movs	r0, #239	; 0xef
 800671e:	f7ff fe2b 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8006722:	2100      	movs	r1, #0
 8006724:	20d9      	movs	r0, #217	; 0xd9
 8006726:	f7ff fe27 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800672a:	2100      	movs	r1, #0
 800672c:	20f1      	movs	r0, #241	; 0xf1
 800672e:	f7ff fe23 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8006732:	2100      	movs	r1, #0
 8006734:	20db      	movs	r0, #219	; 0xdb
 8006736:	f7ff fe1f 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800673a:	2100      	movs	r1, #0
 800673c:	2030      	movs	r0, #48	; 0x30
 800673e:	f7ff fe1b 	bl	8006378 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8006742:	2100      	movs	r1, #0
 8006744:	20a4      	movs	r0, #164	; 0xa4
 8006746:	f7ff fe17 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800674a:	2100      	movs	r1, #0
 800674c:	20a6      	movs	r0, #166	; 0xa6
 800674e:	f7ff fe13 	bl	8006378 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8006752:	2100      	movs	r1, #0
 8006754:	20af      	movs	r0, #175	; 0xaf
 8006756:	f7ff fe0f 	bl	8006378 <OLED_WR_Byte>
	OLED_Clear(); 
 800675a:	f7ff fe57 	bl	800640c <OLED_Clear>
}
 800675e:	bf00      	nop
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40023800 	.word	0x40023800
 8006768:	40021000 	.word	0x40021000

0800676c <PIDController_Init>:
#include "pid.h"
#include "math.h"

void PIDController_Init(PIDController *pid) {
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	615a      	str	r2, [r3, #20]
	pid->prevError  = 0.0f;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f04f 0200 	mov.w	r2, #0
 8006780:	619a      	str	r2, [r3, #24]
	pid->prevMeasurement = 0.0f;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	61da      	str	r2, [r3, #28]
	pid->out = 0;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	621a      	str	r2, [r3, #32]

}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <PIDController_Update>:

int PIDController_Update(PIDController *pid, float setpoint, float measurement, int currentpwm) {
 800679c:	b480      	push	{r7}
 800679e:	b089      	sub	sp, #36	; 0x24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80067a8:	edc7 0a01 	vstr	s1, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 80067ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80067b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80067b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067ba:	edc7 7a07 	vstr	s15, [r7, #28]
    if (isnan(error) == 1) error = 0;
 80067be:	ed97 7a07 	vldr	s14, [r7, #28]
 80067c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80067c6:	eeb4 7a67 	vcmp.f32	s14, s15
 80067ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ce:	d702      	bvc.n	80067d6 <PIDController_Update+0x3a>
 80067d0:	f04f 0300 	mov.w	r3, #0
 80067d4:	61fb      	str	r3, [r7, #28]
	// Proportional
    //int proportional = pid->Kp * error * currentpwm;

    // velocity implementation (instead of distance)
    int proportional;
    if (error >= 0) // positive error, need to increase pwm
 80067d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80067da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e2:	db1b      	blt.n	800681c <PIDController_Update+0x80>
    {
    	 proportional = (int)((1 + pid->Kp * (error / setpoint)) * currentpwm); // kP * (1 + percentage of error based on setpoint) * currentpwm
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	ed93 7a00 	vldr	s14, [r3]
 80067ea:	ed97 6a07 	vldr	s12, [r7, #28]
 80067ee:	edd7 6a02 	vldr	s13, [r7, #8]
 80067f2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80067f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	ee07 3a90 	vmov	s15, r3
 8006808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800680c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006814:	ee17 3a90 	vmov	r3, s15
 8006818:	61bb      	str	r3, [r7, #24]
 800681a:	e01a      	b.n	8006852 <PIDController_Update+0xb6>
    }
    else // negative error, need to decrease pwm
    {
    	proportional = (int)((1 + pid->Kp * (error / measurement)) * currentpwm); // kP * (1 + percentage of error based on measurement) * currentpwm
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	ed93 7a00 	vldr	s14, [r3]
 8006822:	ed97 6a07 	vldr	s12, [r7, #28]
 8006826:	edd7 6a01 	vldr	s13, [r7, #4]
 800682a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800682e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006832:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006836:	ee37 7a87 	vadd.f32	s14, s15, s14
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	ee07 3a90 	vmov	s15, r3
 8006840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006848:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800684c:	ee17 3a90 	vmov	r3, s15
 8006850:	61bb      	str	r3, [r7, #24]
    }

	// Integral
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError) * currentpwm;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	edd3 7a01 	vldr	s15, [r3, #4]
 8006864:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006868:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	edd3 7a04 	vldr	s15, [r3, #16]
 8006872:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	ed93 6a06 	vldr	s12, [r3, #24]
 800687c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006880:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006884:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006892:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800689a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800689e:	ee17 2a90 	vmov	r2, s15
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	615a      	str	r2, [r3, #20]

	// Anti-wind-up via dynamic integrator clamping
	int limMinInt, limMaxInt;

	// Compute integrator limits
	if (pid->limMax > proportional) {
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	da05      	bge.n	80068bc <PIDController_Update+0x120>

		limMaxInt = pid->limMax - proportional;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	613b      	str	r3, [r7, #16]
 80068ba:	e001      	b.n	80068c0 <PIDController_Update+0x124>

	} else {

		limMaxInt = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	613b      	str	r3, [r7, #16]

	}

	if (pid->limMin < proportional) {
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	dd05      	ble.n	80068d6 <PIDController_Update+0x13a>

		limMinInt = pid->limMin - proportional;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	e001      	b.n	80068da <PIDController_Update+0x13e>

	} else {

		limMinInt = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	617b      	str	r3, [r7, #20]

	}

	// Clamp integrator
    if (pid->integrator > limMaxInt) {
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	da03      	bge.n	80068ec <PIDController_Update+0x150>

        pid->integrator = limMaxInt;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	615a      	str	r2, [r3, #20]
 80068ea:	e007      	b.n	80068fc <PIDController_Update+0x160>

    } else if (pid->integrator < limMinInt) {
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	dd02      	ble.n	80068fc <PIDController_Update+0x160>

        pid->integrator = limMinInt;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	615a      	str	r2, [r3, #20]

	/*
	* Compute output and apply limits
	*/

    pid->out = proportional + pid->integrator;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	695a      	ldr	r2, [r3, #20]
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	441a      	add	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	621a      	str	r2, [r3, #32]

    if (pid->out > pid->limMax) {
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1a      	ldr	r2, [r3, #32]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	429a      	cmp	r2, r3
 8006912:	dd04      	ble.n	800691e <PIDController_Update+0x182>

        pid->out = pid->limMax;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	621a      	str	r2, [r3, #32]
 800691c:	e009      	b.n	8006932 <PIDController_Update+0x196>

    } else if (pid->out < pid->limMin) {
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6a1a      	ldr	r2, [r3, #32]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	429a      	cmp	r2, r3
 8006928:	da03      	bge.n	8006932 <PIDController_Update+0x196>

        pid->out = pid->limMin;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	621a      	str	r2, [r3, #32]

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	619a      	str	r2, [r3, #24]
    pid->prevMeasurement = measurement;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	61da      	str	r2, [r3, #28]

	/* Return controller output */
    return pid->out;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a1b      	ldr	r3, [r3, #32]

}
 8006942:	4618      	mov	r0, r3
 8006944:	3724      	adds	r7, #36	; 0x24
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
	...

08006950 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006956:	2300      	movs	r3, #0
 8006958:	607b      	str	r3, [r7, #4]
 800695a:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <HAL_MspInit+0x54>)
 800695c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695e:	4a11      	ldr	r2, [pc, #68]	; (80069a4 <HAL_MspInit+0x54>)
 8006960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006964:	6453      	str	r3, [r2, #68]	; 0x44
 8006966:	4b0f      	ldr	r3, [pc, #60]	; (80069a4 <HAL_MspInit+0x54>)
 8006968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800696e:	607b      	str	r3, [r7, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006972:	2300      	movs	r3, #0
 8006974:	603b      	str	r3, [r7, #0]
 8006976:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <HAL_MspInit+0x54>)
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	4a0a      	ldr	r2, [pc, #40]	; (80069a4 <HAL_MspInit+0x54>)
 800697c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006980:	6413      	str	r3, [r2, #64]	; 0x40
 8006982:	4b08      	ldr	r3, [pc, #32]	; (80069a4 <HAL_MspInit+0x54>)
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800698a:	603b      	str	r3, [r7, #0]
 800698c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800698e:	2200      	movs	r2, #0
 8006990:	210f      	movs	r1, #15
 8006992:	f06f 0001 	mvn.w	r0, #1
 8006996:	f000 fcde 	bl	8007356 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800699a:	bf00      	nop
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	40023800 	.word	0x40023800

080069a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	; 0x28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069b0:	f107 0314 	add.w	r3, r7, #20
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]
 80069b8:	605a      	str	r2, [r3, #4]
 80069ba:	609a      	str	r2, [r3, #8]
 80069bc:	60da      	str	r2, [r3, #12]
 80069be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1d      	ldr	r2, [pc, #116]	; (8006a3c <HAL_I2C_MspInit+0x94>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d134      	bne.n	8006a34 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069ca:	2300      	movs	r3, #0
 80069cc:	613b      	str	r3, [r7, #16]
 80069ce:	4b1c      	ldr	r3, [pc, #112]	; (8006a40 <HAL_I2C_MspInit+0x98>)
 80069d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d2:	4a1b      	ldr	r2, [pc, #108]	; (8006a40 <HAL_I2C_MspInit+0x98>)
 80069d4:	f043 0302 	orr.w	r3, r3, #2
 80069d8:	6313      	str	r3, [r2, #48]	; 0x30
 80069da:	4b19      	ldr	r3, [pc, #100]	; (8006a40 <HAL_I2C_MspInit+0x98>)
 80069dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GYRO_SCL_Pin|GYRO_SDA_Pin;
 80069e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80069ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069ec:	2312      	movs	r3, #18
 80069ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f0:	2300      	movs	r3, #0
 80069f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069f4:	2303      	movs	r3, #3
 80069f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80069f8:	2304      	movs	r3, #4
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	4619      	mov	r1, r3
 8006a02:	4810      	ldr	r0, [pc, #64]	; (8006a44 <HAL_I2C_MspInit+0x9c>)
 8006a04:	f000 fd7e 	bl	8007504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	4b0c      	ldr	r3, [pc, #48]	; (8006a40 <HAL_I2C_MspInit+0x98>)
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	4a0b      	ldr	r2, [pc, #44]	; (8006a40 <HAL_I2C_MspInit+0x98>)
 8006a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a16:	6413      	str	r3, [r2, #64]	; 0x40
 8006a18:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <HAL_I2C_MspInit+0x98>)
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8006a24:	2200      	movs	r2, #0
 8006a26:	2105      	movs	r1, #5
 8006a28:	201f      	movs	r0, #31
 8006a2a:	f000 fc94 	bl	8007356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006a2e:	201f      	movs	r0, #31
 8006a30:	f000 fcad 	bl	800738e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006a34:	bf00      	nop
 8006a36:	3728      	adds	r7, #40	; 0x28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40005400 	.word	0x40005400
 8006a40:	40023800 	.word	0x40023800
 8006a44:	40020400 	.word	0x40020400

08006a48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08a      	sub	sp, #40	; 0x28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a50:	f107 0314 	add.w	r3, r7, #20
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	605a      	str	r2, [r3, #4]
 8006a5a:	609a      	str	r2, [r3, #8]
 8006a5c:	60da      	str	r2, [r3, #12]
 8006a5e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a23      	ldr	r2, [pc, #140]	; (8006af4 <HAL_TIM_Base_MspInit+0xac>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d10e      	bne.n	8006a88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	613b      	str	r3, [r7, #16]
 8006a6e:	4b22      	ldr	r3, [pc, #136]	; (8006af8 <HAL_TIM_Base_MspInit+0xb0>)
 8006a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a72:	4a21      	ldr	r2, [pc, #132]	; (8006af8 <HAL_TIM_Base_MspInit+0xb0>)
 8006a74:	f043 0301 	orr.w	r3, r3, #1
 8006a78:	6453      	str	r3, [r2, #68]	; 0x44
 8006a7a:	4b1f      	ldr	r3, [pc, #124]	; (8006af8 <HAL_TIM_Base_MspInit+0xb0>)
 8006a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	613b      	str	r3, [r7, #16]
 8006a84:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006a86:	e031      	b.n	8006aec <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM8)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1b      	ldr	r2, [pc, #108]	; (8006afc <HAL_TIM_Base_MspInit+0xb4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d12c      	bne.n	8006aec <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006a92:	2300      	movs	r3, #0
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	4b18      	ldr	r3, [pc, #96]	; (8006af8 <HAL_TIM_Base_MspInit+0xb0>)
 8006a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9a:	4a17      	ldr	r2, [pc, #92]	; (8006af8 <HAL_TIM_Base_MspInit+0xb0>)
 8006a9c:	f043 0302 	orr.w	r3, r3, #2
 8006aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8006aa2:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <HAL_TIM_Base_MspInit+0xb0>)
 8006aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60bb      	str	r3, [r7, #8]
 8006ab2:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <HAL_TIM_Base_MspInit+0xb0>)
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab6:	4a10      	ldr	r2, [pc, #64]	; (8006af8 <HAL_TIM_Base_MspInit+0xb0>)
 8006ab8:	f043 0304 	orr.w	r3, r3, #4
 8006abc:	6313      	str	r3, [r2, #48]	; 0x30
 8006abe:	4b0e      	ldr	r3, [pc, #56]	; (8006af8 <HAL_TIM_Base_MspInit+0xb0>)
 8006ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	60bb      	str	r3, [r7, #8]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin|PWMC_Pin|PWMD_Pin;
 8006aca:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006adc:	2303      	movs	r3, #3
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ae0:	f107 0314 	add.w	r3, r7, #20
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4806      	ldr	r0, [pc, #24]	; (8006b00 <HAL_TIM_Base_MspInit+0xb8>)
 8006ae8:	f000 fd0c 	bl	8007504 <HAL_GPIO_Init>
}
 8006aec:	bf00      	nop
 8006aee:	3728      	adds	r7, #40	; 0x28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	40010000 	.word	0x40010000
 8006af8:	40023800 	.word	0x40023800
 8006afc:	40010400 	.word	0x40010400
 8006b00:	40020800 	.word	0x40020800

08006b04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08c      	sub	sp, #48	; 0x30
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b0c:	f107 031c 	add.w	r3, r7, #28
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	605a      	str	r2, [r3, #4]
 8006b16:	609a      	str	r2, [r3, #8]
 8006b18:	60da      	str	r2, [r3, #12]
 8006b1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b24:	d14b      	bne.n	8006bbe <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006b26:	2300      	movs	r3, #0
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	4b3f      	ldr	r3, [pc, #252]	; (8006c28 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	4a3e      	ldr	r2, [pc, #248]	; (8006c28 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b30:	f043 0301 	orr.w	r3, r3, #1
 8006b34:	6413      	str	r3, [r2, #64]	; 0x40
 8006b36:	4b3c      	ldr	r3, [pc, #240]	; (8006c28 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	61bb      	str	r3, [r7, #24]
 8006b40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b42:	2300      	movs	r3, #0
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	4b38      	ldr	r3, [pc, #224]	; (8006c28 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4a:	4a37      	ldr	r2, [pc, #220]	; (8006c28 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b4c:	f043 0301 	orr.w	r3, r3, #1
 8006b50:	6313      	str	r3, [r2, #48]	; 0x30
 8006b52:	4b35      	ldr	r3, [pc, #212]	; (8006c28 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b5e:	2300      	movs	r3, #0
 8006b60:	613b      	str	r3, [r7, #16]
 8006b62:	4b31      	ldr	r3, [pc, #196]	; (8006c28 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	4a30      	ldr	r2, [pc, #192]	; (8006c28 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b68:	f043 0302 	orr.w	r3, r3, #2
 8006b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b6e:	4b2e      	ldr	r3, [pc, #184]	; (8006c28 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA1_Pin;
 8006b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b80:	2302      	movs	r3, #2
 8006b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA1_GPIO_Port, &GPIO_InitStruct);
 8006b90:	f107 031c 	add.w	r3, r7, #28
 8006b94:	4619      	mov	r1, r3
 8006b96:	4825      	ldr	r0, [pc, #148]	; (8006c2c <HAL_TIM_Encoder_MspInit+0x128>)
 8006b98:	f000 fcb4 	bl	8007504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA2_Pin;
 8006b9c:	2308      	movs	r3, #8
 8006b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006bac:	2301      	movs	r3, #1
 8006bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA2_GPIO_Port, &GPIO_InitStruct);
 8006bb0:	f107 031c 	add.w	r3, r7, #28
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	481e      	ldr	r0, [pc, #120]	; (8006c30 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006bb8:	f000 fca4 	bl	8007504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006bbc:	e030      	b.n	8006c20 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a1c      	ldr	r2, [pc, #112]	; (8006c34 <HAL_TIM_Encoder_MspInit+0x130>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d12b      	bne.n	8006c20 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	4b16      	ldr	r3, [pc, #88]	; (8006c28 <HAL_TIM_Encoder_MspInit+0x124>)
 8006bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd0:	4a15      	ldr	r2, [pc, #84]	; (8006c28 <HAL_TIM_Encoder_MspInit+0x124>)
 8006bd2:	f043 0304 	orr.w	r3, r3, #4
 8006bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8006bd8:	4b13      	ldr	r3, [pc, #76]	; (8006c28 <HAL_TIM_Encoder_MspInit+0x124>)
 8006bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	60fb      	str	r3, [r7, #12]
 8006be2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006be4:	2300      	movs	r3, #0
 8006be6:	60bb      	str	r3, [r7, #8]
 8006be8:	4b0f      	ldr	r3, [pc, #60]	; (8006c28 <HAL_TIM_Encoder_MspInit+0x124>)
 8006bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bec:	4a0e      	ldr	r2, [pc, #56]	; (8006c28 <HAL_TIM_Encoder_MspInit+0x124>)
 8006bee:	f043 0302 	orr.w	r3, r3, #2
 8006bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8006bf4:	4b0c      	ldr	r3, [pc, #48]	; (8006c28 <HAL_TIM_Encoder_MspInit+0x124>)
 8006bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	60bb      	str	r3, [r7, #8]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderC1_Pin|EncoderC2_Pin;
 8006c00:	23c0      	movs	r3, #192	; 0xc0
 8006c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c04:	2302      	movs	r3, #2
 8006c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006c10:	2302      	movs	r3, #2
 8006c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c14:	f107 031c 	add.w	r3, r7, #28
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4805      	ldr	r0, [pc, #20]	; (8006c30 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006c1c:	f000 fc72 	bl	8007504 <HAL_GPIO_Init>
}
 8006c20:	bf00      	nop
 8006c22:	3730      	adds	r7, #48	; 0x30
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	40023800 	.word	0x40023800
 8006c2c:	40020000 	.word	0x40020000
 8006c30:	40020400 	.word	0x40020400
 8006c34:	40000800 	.word	0x40000800

08006c38 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08a      	sub	sp, #40	; 0x28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c40:	f107 0314 	add.w	r3, r7, #20
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	605a      	str	r2, [r3, #4]
 8006c4a:	609a      	str	r2, [r3, #8]
 8006c4c:	60da      	str	r2, [r3, #12]
 8006c4e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a1d      	ldr	r2, [pc, #116]	; (8006ccc <HAL_TIM_IC_MspInit+0x94>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d133      	bne.n	8006cc2 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	613b      	str	r3, [r7, #16]
 8006c5e:	4b1c      	ldr	r3, [pc, #112]	; (8006cd0 <HAL_TIM_IC_MspInit+0x98>)
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	4a1b      	ldr	r2, [pc, #108]	; (8006cd0 <HAL_TIM_IC_MspInit+0x98>)
 8006c64:	f043 0302 	orr.w	r3, r3, #2
 8006c68:	6413      	str	r3, [r2, #64]	; 0x40
 8006c6a:	4b19      	ldr	r3, [pc, #100]	; (8006cd0 <HAL_TIM_IC_MspInit+0x98>)
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	613b      	str	r3, [r7, #16]
 8006c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c76:	2300      	movs	r3, #0
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	4b15      	ldr	r3, [pc, #84]	; (8006cd0 <HAL_TIM_IC_MspInit+0x98>)
 8006c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7e:	4a14      	ldr	r2, [pc, #80]	; (8006cd0 <HAL_TIM_IC_MspInit+0x98>)
 8006c80:	f043 0302 	orr.w	r3, r3, #2
 8006c84:	6313      	str	r3, [r2, #48]	; 0x30
 8006c86:	4b12      	ldr	r3, [pc, #72]	; (8006cd0 <HAL_TIM_IC_MspInit+0x98>)
 8006c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = UltraSensor_Echo_Pin;
 8006c92:	2310      	movs	r3, #16
 8006c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c96:	2302      	movs	r3, #2
 8006c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(UltraSensor_Echo_GPIO_Port, &GPIO_InitStruct);
 8006ca6:	f107 0314 	add.w	r3, r7, #20
 8006caa:	4619      	mov	r1, r3
 8006cac:	4809      	ldr	r0, [pc, #36]	; (8006cd4 <HAL_TIM_IC_MspInit+0x9c>)
 8006cae:	f000 fc29 	bl	8007504 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2105      	movs	r1, #5
 8006cb6:	201d      	movs	r0, #29
 8006cb8:	f000 fb4d 	bl	8007356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006cbc:	201d      	movs	r0, #29
 8006cbe:	f000 fb66 	bl	800738e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006cc2:	bf00      	nop
 8006cc4:	3728      	adds	r7, #40	; 0x28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	40000400 	.word	0x40000400
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	40020400 	.word	0x40020400

08006cd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b088      	sub	sp, #32
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ce0:	f107 030c 	add.w	r3, r7, #12
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	605a      	str	r2, [r3, #4]
 8006cea:	609a      	str	r2, [r3, #8]
 8006cec:	60da      	str	r2, [r3, #12]
 8006cee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a12      	ldr	r2, [pc, #72]	; (8006d40 <HAL_TIM_MspPostInit+0x68>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d11e      	bne.n	8006d38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60bb      	str	r3, [r7, #8]
 8006cfe:	4b11      	ldr	r3, [pc, #68]	; (8006d44 <HAL_TIM_MspPostInit+0x6c>)
 8006d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d02:	4a10      	ldr	r2, [pc, #64]	; (8006d44 <HAL_TIM_MspPostInit+0x6c>)
 8006d04:	f043 0310 	orr.w	r3, r3, #16
 8006d08:	6313      	str	r3, [r2, #48]	; 0x30
 8006d0a:	4b0e      	ldr	r3, [pc, #56]	; (8006d44 <HAL_TIM_MspPostInit+0x6c>)
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0e:	f003 0310 	and.w	r3, r3, #16
 8006d12:	60bb      	str	r3, [r7, #8]
 8006d14:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8006d16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d24:	2300      	movs	r3, #0
 8006d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8006d2c:	f107 030c 	add.w	r3, r7, #12
 8006d30:	4619      	mov	r1, r3
 8006d32:	4805      	ldr	r0, [pc, #20]	; (8006d48 <HAL_TIM_MspPostInit+0x70>)
 8006d34:	f000 fbe6 	bl	8007504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006d38:	bf00      	nop
 8006d3a:	3720      	adds	r7, #32
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	40010000 	.word	0x40010000
 8006d44:	40023800 	.word	0x40023800
 8006d48:	40021000 	.word	0x40021000

08006d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08a      	sub	sp, #40	; 0x28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d54:	f107 0314 	add.w	r3, r7, #20
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	605a      	str	r2, [r3, #4]
 8006d5e:	609a      	str	r2, [r3, #8]
 8006d60:	60da      	str	r2, [r3, #12]
 8006d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a1d      	ldr	r2, [pc, #116]	; (8006de0 <HAL_UART_MspInit+0x94>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d134      	bne.n	8006dd8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006d6e:	2300      	movs	r3, #0
 8006d70:	613b      	str	r3, [r7, #16]
 8006d72:	4b1c      	ldr	r3, [pc, #112]	; (8006de4 <HAL_UART_MspInit+0x98>)
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	4a1b      	ldr	r2, [pc, #108]	; (8006de4 <HAL_UART_MspInit+0x98>)
 8006d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d7e:	4b19      	ldr	r3, [pc, #100]	; (8006de4 <HAL_UART_MspInit+0x98>)
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d86:	613b      	str	r3, [r7, #16]
 8006d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <HAL_UART_MspInit+0x98>)
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d92:	4a14      	ldr	r2, [pc, #80]	; (8006de4 <HAL_UART_MspInit+0x98>)
 8006d94:	f043 0304 	orr.w	r3, r3, #4
 8006d98:	6313      	str	r3, [r2, #48]	; 0x30
 8006d9a:	4b12      	ldr	r3, [pc, #72]	; (8006de4 <HAL_UART_MspInit+0x98>)
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9e:	f003 0304 	and.w	r3, r3, #4
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006da6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dac:	2302      	movs	r3, #2
 8006dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db0:	2300      	movs	r3, #0
 8006db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006db4:	2303      	movs	r3, #3
 8006db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006db8:	2307      	movs	r3, #7
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dbc:	f107 0314 	add.w	r3, r7, #20
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	4809      	ldr	r0, [pc, #36]	; (8006de8 <HAL_UART_MspInit+0x9c>)
 8006dc4:	f000 fb9e 	bl	8007504 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2105      	movs	r1, #5
 8006dcc:	2027      	movs	r0, #39	; 0x27
 8006dce:	f000 fac2 	bl	8007356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006dd2:	2027      	movs	r0, #39	; 0x27
 8006dd4:	f000 fadb 	bl	800738e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006dd8:	bf00      	nop
 8006dda:	3728      	adds	r7, #40	; 0x28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	40004800 	.word	0x40004800
 8006de4:	40023800 	.word	0x40023800
 8006de8:	40020800 	.word	0x40020800

08006dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006df0:	e7fe      	b.n	8006df0 <NMI_Handler+0x4>

08006df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006df2:	b480      	push	{r7}
 8006df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006df6:	e7fe      	b.n	8006df6 <HardFault_Handler+0x4>

08006df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006dfc:	e7fe      	b.n	8006dfc <MemManage_Handler+0x4>

08006dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006e02:	e7fe      	b.n	8006e02 <BusFault_Handler+0x4>

08006e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006e08:	e7fe      	b.n	8006e08 <UsageFault_Handler+0x4>

08006e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006e0e:	bf00      	nop
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e1c:	f000 f97c 	bl	8007118 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006e20:	f008 f82e 	bl	800ee80 <xTaskGetSchedulerState>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d001      	beq.n	8006e2e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006e2a:	f008 fe15 	bl	800fa58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006e2e:	bf00      	nop
 8006e30:	bd80      	pop	{r7, pc}
	...

08006e34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006e38:	4802      	ldr	r0, [pc, #8]	; (8006e44 <TIM3_IRQHandler+0x10>)
 8006e3a:	f004 f929 	bl	800b090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006e3e:	bf00      	nop
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	200002e8 	.word	0x200002e8

08006e48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006e4c:	4802      	ldr	r0, [pc, #8]	; (8006e58 <I2C1_EV_IRQHandler+0x10>)
 8006e4e:	f001 f991 	bl	8008174 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006e52:	bf00      	nop
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000204 	.word	0x20000204

08006e5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006e60:	4802      	ldr	r0, [pc, #8]	; (8006e6c <USART3_IRQHandler+0x10>)
 8006e62:	f005 fadb 	bl	800c41c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006e66:	bf00      	nop
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	200003c0 	.word	0x200003c0

08006e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
	return 1;
 8006e74:	2301      	movs	r3, #1
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <_kill>:

int _kill(int pid, int sig)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006e8a:	f009 f85f 	bl	800ff4c <__errno>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2216      	movs	r2, #22
 8006e92:	601a      	str	r2, [r3, #0]
	return -1;
 8006e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <_exit>:

void _exit (int status)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff ffe7 	bl	8006e80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006eb2:	e7fe      	b.n	8006eb2 <_exit+0x12>

08006eb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]
 8006ec4:	e00a      	b.n	8006edc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006ec6:	f3af 8000 	nop.w
 8006eca:	4601      	mov	r1, r0
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	60ba      	str	r2, [r7, #8]
 8006ed2:	b2ca      	uxtb	r2, r1
 8006ed4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	dbf0      	blt.n	8006ec6 <_read+0x12>
	}

return len;
 8006ee4:	687b      	ldr	r3, [r7, #4]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b086      	sub	sp, #24
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	60f8      	str	r0, [r7, #12]
 8006ef6:	60b9      	str	r1, [r7, #8]
 8006ef8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006efa:	2300      	movs	r3, #0
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	e009      	b.n	8006f14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	60ba      	str	r2, [r7, #8]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	3301      	adds	r3, #1
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	dbf1      	blt.n	8006f00 <_write+0x12>
	}
	return len;
 8006f1c:	687b      	ldr	r3, [r7, #4]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <_close>:

int _close(int file)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
	return -1;
 8006f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f4e:	605a      	str	r2, [r3, #4]
	return 0;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <_isatty>:

int _isatty(int file)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
	return 1;
 8006f66:	2301      	movs	r3, #1
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
	return 0;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f98:	4a14      	ldr	r2, [pc, #80]	; (8006fec <_sbrk+0x5c>)
 8006f9a:	4b15      	ldr	r3, [pc, #84]	; (8006ff0 <_sbrk+0x60>)
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006fa4:	4b13      	ldr	r3, [pc, #76]	; (8006ff4 <_sbrk+0x64>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d102      	bne.n	8006fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006fac:	4b11      	ldr	r3, [pc, #68]	; (8006ff4 <_sbrk+0x64>)
 8006fae:	4a12      	ldr	r2, [pc, #72]	; (8006ff8 <_sbrk+0x68>)
 8006fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006fb2:	4b10      	ldr	r3, [pc, #64]	; (8006ff4 <_sbrk+0x64>)
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4413      	add	r3, r2
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d207      	bcs.n	8006fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006fc0:	f008 ffc4 	bl	800ff4c <__errno>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	220c      	movs	r2, #12
 8006fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fce:	e009      	b.n	8006fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006fd0:	4b08      	ldr	r3, [pc, #32]	; (8006ff4 <_sbrk+0x64>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006fd6:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <_sbrk+0x64>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4413      	add	r3, r2
 8006fde:	4a05      	ldr	r2, [pc, #20]	; (8006ff4 <_sbrk+0x64>)
 8006fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3718      	adds	r7, #24
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	20020000 	.word	0x20020000
 8006ff0:	00000400 	.word	0x00000400
 8006ff4:	20000860 	.word	0x20000860
 8006ff8:	200063c8 	.word	0x200063c8

08006ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007000:	4b06      	ldr	r3, [pc, #24]	; (800701c <SystemInit+0x20>)
 8007002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007006:	4a05      	ldr	r2, [pc, #20]	; (800701c <SystemInit+0x20>)
 8007008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800700c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007010:	bf00      	nop
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	e000ed00 	.word	0xe000ed00

08007020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007058 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007024:	480d      	ldr	r0, [pc, #52]	; (800705c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007026:	490e      	ldr	r1, [pc, #56]	; (8007060 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007028:	4a0e      	ldr	r2, [pc, #56]	; (8007064 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800702a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800702c:	e002      	b.n	8007034 <LoopCopyDataInit>

0800702e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800702e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007032:	3304      	adds	r3, #4

08007034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007038:	d3f9      	bcc.n	800702e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800703a:	4a0b      	ldr	r2, [pc, #44]	; (8007068 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800703c:	4c0b      	ldr	r4, [pc, #44]	; (800706c <LoopFillZerobss+0x26>)
  movs r3, #0
 800703e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007040:	e001      	b.n	8007046 <LoopFillZerobss>

08007042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007044:	3204      	adds	r2, #4

08007046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007048:	d3fb      	bcc.n	8007042 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800704a:	f7ff ffd7 	bl	8006ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800704e:	f008 ff83 	bl	800ff58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007052:	f7f9 ffd1 	bl	8000ff8 <main>
  bx  lr    
 8007056:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007058:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800705c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007060:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8007064:	0801593c 	.word	0x0801593c
  ldr r2, =_sbss
 8007068:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800706c:	200063c8 	.word	0x200063c8

08007070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007070:	e7fe      	b.n	8007070 <ADC_IRQHandler>
	...

08007074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007078:	4b0e      	ldr	r3, [pc, #56]	; (80070b4 <HAL_Init+0x40>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a0d      	ldr	r2, [pc, #52]	; (80070b4 <HAL_Init+0x40>)
 800707e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007084:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <HAL_Init+0x40>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a0a      	ldr	r2, [pc, #40]	; (80070b4 <HAL_Init+0x40>)
 800708a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800708e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007090:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <HAL_Init+0x40>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a07      	ldr	r2, [pc, #28]	; (80070b4 <HAL_Init+0x40>)
 8007096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800709a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800709c:	2003      	movs	r0, #3
 800709e:	f000 f94f 	bl	8007340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80070a2:	200f      	movs	r0, #15
 80070a4:	f000 f808 	bl	80070b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80070a8:	f7ff fc52 	bl	8006950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	40023c00 	.word	0x40023c00

080070b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80070c0:	4b12      	ldr	r3, [pc, #72]	; (800710c <HAL_InitTick+0x54>)
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	4b12      	ldr	r3, [pc, #72]	; (8007110 <HAL_InitTick+0x58>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	4619      	mov	r1, r3
 80070ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80070d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 f967 	bl	80073aa <HAL_SYSTICK_Config>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e00e      	b.n	8007104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b0f      	cmp	r3, #15
 80070ea:	d80a      	bhi.n	8007102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80070ec:	2200      	movs	r2, #0
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070f4:	f000 f92f 	bl	8007356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80070f8:	4a06      	ldr	r2, [pc, #24]	; (8007114 <HAL_InitTick+0x5c>)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	e000      	b.n	8007104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20000004 	.word	0x20000004
 8007110:	2000000c 	.word	0x2000000c
 8007114:	20000008 	.word	0x20000008

08007118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800711c:	4b06      	ldr	r3, [pc, #24]	; (8007138 <HAL_IncTick+0x20>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	4b06      	ldr	r3, [pc, #24]	; (800713c <HAL_IncTick+0x24>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4413      	add	r3, r2
 8007128:	4a04      	ldr	r2, [pc, #16]	; (800713c <HAL_IncTick+0x24>)
 800712a:	6013      	str	r3, [r2, #0]
}
 800712c:	bf00      	nop
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	2000000c 	.word	0x2000000c
 800713c:	20000864 	.word	0x20000864

08007140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0
  return uwTick;
 8007144:	4b03      	ldr	r3, [pc, #12]	; (8007154 <HAL_GetTick+0x14>)
 8007146:	681b      	ldr	r3, [r3, #0]
}
 8007148:	4618      	mov	r0, r3
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	20000864 	.word	0x20000864

08007158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007160:	f7ff ffee 	bl	8007140 <HAL_GetTick>
 8007164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007170:	d005      	beq.n	800717e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007172:	4b0a      	ldr	r3, [pc, #40]	; (800719c <HAL_Delay+0x44>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800717e:	bf00      	nop
 8007180:	f7ff ffde 	bl	8007140 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	429a      	cmp	r2, r3
 800718e:	d8f7      	bhi.n	8007180 <HAL_Delay+0x28>
  {
  }
}
 8007190:	bf00      	nop
 8007192:	bf00      	nop
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	2000000c 	.word	0x2000000c

080071a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f003 0307 	and.w	r3, r3, #7
 80071ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071b0:	4b0c      	ldr	r3, [pc, #48]	; (80071e4 <__NVIC_SetPriorityGrouping+0x44>)
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80071bc:	4013      	ands	r3, r2
 80071be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80071c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80071cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80071d2:	4a04      	ldr	r2, [pc, #16]	; (80071e4 <__NVIC_SetPriorityGrouping+0x44>)
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	60d3      	str	r3, [r2, #12]
}
 80071d8:	bf00      	nop
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	e000ed00 	.word	0xe000ed00

080071e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80071e8:	b480      	push	{r7}
 80071ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071ec:	4b04      	ldr	r3, [pc, #16]	; (8007200 <__NVIC_GetPriorityGrouping+0x18>)
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	0a1b      	lsrs	r3, r3, #8
 80071f2:	f003 0307 	and.w	r3, r3, #7
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	e000ed00 	.word	0xe000ed00

08007204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	4603      	mov	r3, r0
 800720c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800720e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007212:	2b00      	cmp	r3, #0
 8007214:	db0b      	blt.n	800722e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	f003 021f 	and.w	r2, r3, #31
 800721c:	4907      	ldr	r1, [pc, #28]	; (800723c <__NVIC_EnableIRQ+0x38>)
 800721e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	2001      	movs	r0, #1
 8007226:	fa00 f202 	lsl.w	r2, r0, r2
 800722a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	e000e100 	.word	0xe000e100

08007240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	4603      	mov	r3, r0
 8007248:	6039      	str	r1, [r7, #0]
 800724a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800724c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007250:	2b00      	cmp	r3, #0
 8007252:	db0a      	blt.n	800726a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	b2da      	uxtb	r2, r3
 8007258:	490c      	ldr	r1, [pc, #48]	; (800728c <__NVIC_SetPriority+0x4c>)
 800725a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800725e:	0112      	lsls	r2, r2, #4
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	440b      	add	r3, r1
 8007264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007268:	e00a      	b.n	8007280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	b2da      	uxtb	r2, r3
 800726e:	4908      	ldr	r1, [pc, #32]	; (8007290 <__NVIC_SetPriority+0x50>)
 8007270:	79fb      	ldrb	r3, [r7, #7]
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	3b04      	subs	r3, #4
 8007278:	0112      	lsls	r2, r2, #4
 800727a:	b2d2      	uxtb	r2, r2
 800727c:	440b      	add	r3, r1
 800727e:	761a      	strb	r2, [r3, #24]
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	e000e100 	.word	0xe000e100
 8007290:	e000ed00 	.word	0xe000ed00

08007294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007294:	b480      	push	{r7}
 8007296:	b089      	sub	sp, #36	; 0x24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f003 0307 	and.w	r3, r3, #7
 80072a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	f1c3 0307 	rsb	r3, r3, #7
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	bf28      	it	cs
 80072b2:	2304      	movcs	r3, #4
 80072b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	3304      	adds	r3, #4
 80072ba:	2b06      	cmp	r3, #6
 80072bc:	d902      	bls.n	80072c4 <NVIC_EncodePriority+0x30>
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	3b03      	subs	r3, #3
 80072c2:	e000      	b.n	80072c6 <NVIC_EncodePriority+0x32>
 80072c4:	2300      	movs	r3, #0
 80072c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	fa02 f303 	lsl.w	r3, r2, r3
 80072d2:	43da      	mvns	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	401a      	ands	r2, r3
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80072dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	fa01 f303 	lsl.w	r3, r1, r3
 80072e6:	43d9      	mvns	r1, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072ec:	4313      	orrs	r3, r2
         );
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3724      	adds	r7, #36	; 0x24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
	...

080072fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3b01      	subs	r3, #1
 8007308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800730c:	d301      	bcc.n	8007312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800730e:	2301      	movs	r3, #1
 8007310:	e00f      	b.n	8007332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007312:	4a0a      	ldr	r2, [pc, #40]	; (800733c <SysTick_Config+0x40>)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	3b01      	subs	r3, #1
 8007318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800731a:	210f      	movs	r1, #15
 800731c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007320:	f7ff ff8e 	bl	8007240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007324:	4b05      	ldr	r3, [pc, #20]	; (800733c <SysTick_Config+0x40>)
 8007326:	2200      	movs	r2, #0
 8007328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800732a:	4b04      	ldr	r3, [pc, #16]	; (800733c <SysTick_Config+0x40>)
 800732c:	2207      	movs	r2, #7
 800732e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	e000e010 	.word	0xe000e010

08007340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff ff29 	bl	80071a0 <__NVIC_SetPriorityGrouping>
}
 800734e:	bf00      	nop
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007356:	b580      	push	{r7, lr}
 8007358:	b086      	sub	sp, #24
 800735a:	af00      	add	r7, sp, #0
 800735c:	4603      	mov	r3, r0
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	607a      	str	r2, [r7, #4]
 8007362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007364:	2300      	movs	r3, #0
 8007366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007368:	f7ff ff3e 	bl	80071e8 <__NVIC_GetPriorityGrouping>
 800736c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	68b9      	ldr	r1, [r7, #8]
 8007372:	6978      	ldr	r0, [r7, #20]
 8007374:	f7ff ff8e 	bl	8007294 <NVIC_EncodePriority>
 8007378:	4602      	mov	r2, r0
 800737a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800737e:	4611      	mov	r1, r2
 8007380:	4618      	mov	r0, r3
 8007382:	f7ff ff5d 	bl	8007240 <__NVIC_SetPriority>
}
 8007386:	bf00      	nop
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b082      	sub	sp, #8
 8007392:	af00      	add	r7, sp, #0
 8007394:	4603      	mov	r3, r0
 8007396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff ff31 	bl	8007204 <__NVIC_EnableIRQ>
}
 80073a2:	bf00      	nop
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b082      	sub	sp, #8
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff ffa2 	bl	80072fc <SysTick_Config>
 80073b8:	4603      	mov	r3, r0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80073d0:	f7ff feb6 	bl	8007140 <HAL_GetTick>
 80073d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d008      	beq.n	80073f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2280      	movs	r2, #128	; 0x80
 80073e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e052      	b.n	800749a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0216 	bic.w	r2, r2, #22
 8007402:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	695a      	ldr	r2, [r3, #20]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007412:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007418:	2b00      	cmp	r3, #0
 800741a:	d103      	bne.n	8007424 <HAL_DMA_Abort+0x62>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007420:	2b00      	cmp	r3, #0
 8007422:	d007      	beq.n	8007434 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0208 	bic.w	r2, r2, #8
 8007432:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 0201 	bic.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007444:	e013      	b.n	800746e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007446:	f7ff fe7b 	bl	8007140 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b05      	cmp	r3, #5
 8007452:	d90c      	bls.n	800746e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2220      	movs	r2, #32
 8007458:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2203      	movs	r2, #3
 800745e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e015      	b.n	800749a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e4      	bne.n	8007446 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007480:	223f      	movs	r2, #63	; 0x3f
 8007482:	409a      	lsls	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d004      	beq.n	80074c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2280      	movs	r2, #128	; 0x80
 80074ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e00c      	b.n	80074da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2205      	movs	r2, #5
 80074c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 0201 	bic.w	r2, r2, #1
 80074d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074f4:	b2db      	uxtb	r3, r3
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
	...

08007504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007504:	b480      	push	{r7}
 8007506:	b089      	sub	sp, #36	; 0x24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800750e:	2300      	movs	r3, #0
 8007510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007512:	2300      	movs	r3, #0
 8007514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007516:	2300      	movs	r3, #0
 8007518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800751a:	2300      	movs	r3, #0
 800751c:	61fb      	str	r3, [r7, #28]
 800751e:	e16b      	b.n	80077f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007520:	2201      	movs	r2, #1
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	fa02 f303 	lsl.w	r3, r2, r3
 8007528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	4013      	ands	r3, r2
 8007532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	429a      	cmp	r2, r3
 800753a:	f040 815a 	bne.w	80077f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f003 0303 	and.w	r3, r3, #3
 8007546:	2b01      	cmp	r3, #1
 8007548:	d005      	beq.n	8007556 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007552:	2b02      	cmp	r3, #2
 8007554:	d130      	bne.n	80075b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	2203      	movs	r2, #3
 8007562:	fa02 f303 	lsl.w	r3, r2, r3
 8007566:	43db      	mvns	r3, r3
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	4013      	ands	r3, r2
 800756c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	fa02 f303 	lsl.w	r3, r2, r3
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	4313      	orrs	r3, r2
 800757e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	69ba      	ldr	r2, [r7, #24]
 8007584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800758c:	2201      	movs	r2, #1
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	fa02 f303 	lsl.w	r3, r2, r3
 8007594:	43db      	mvns	r3, r3
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	4013      	ands	r3, r2
 800759a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	091b      	lsrs	r3, r3, #4
 80075a2:	f003 0201 	and.w	r2, r3, #1
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f003 0303 	and.w	r3, r3, #3
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d017      	beq.n	80075f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	2203      	movs	r2, #3
 80075d0:	fa02 f303 	lsl.w	r3, r2, r3
 80075d4:	43db      	mvns	r3, r3
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	4013      	ands	r3, r2
 80075da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	005b      	lsls	r3, r3, #1
 80075e4:	fa02 f303 	lsl.w	r3, r2, r3
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	69ba      	ldr	r2, [r7, #24]
 80075f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f003 0303 	and.w	r3, r3, #3
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d123      	bne.n	8007648 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	08da      	lsrs	r2, r3, #3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3208      	adds	r2, #8
 8007608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	220f      	movs	r2, #15
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	43db      	mvns	r3, r3
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	4013      	ands	r3, r2
 8007622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	fa02 f303 	lsl.w	r3, r2, r3
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	4313      	orrs	r3, r2
 8007638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	08da      	lsrs	r2, r3, #3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	3208      	adds	r2, #8
 8007642:	69b9      	ldr	r1, [r7, #24]
 8007644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	2203      	movs	r2, #3
 8007654:	fa02 f303 	lsl.w	r3, r2, r3
 8007658:	43db      	mvns	r3, r3
 800765a:	69ba      	ldr	r2, [r7, #24]
 800765c:	4013      	ands	r3, r2
 800765e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f003 0203 	and.w	r2, r3, #3
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	fa02 f303 	lsl.w	r3, r2, r3
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	4313      	orrs	r3, r2
 8007674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 80b4 	beq.w	80077f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	4b60      	ldr	r3, [pc, #384]	; (8007810 <HAL_GPIO_Init+0x30c>)
 8007690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007692:	4a5f      	ldr	r2, [pc, #380]	; (8007810 <HAL_GPIO_Init+0x30c>)
 8007694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007698:	6453      	str	r3, [r2, #68]	; 0x44
 800769a:	4b5d      	ldr	r3, [pc, #372]	; (8007810 <HAL_GPIO_Init+0x30c>)
 800769c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076a2:	60fb      	str	r3, [r7, #12]
 80076a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80076a6:	4a5b      	ldr	r2, [pc, #364]	; (8007814 <HAL_GPIO_Init+0x310>)
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	089b      	lsrs	r3, r3, #2
 80076ac:	3302      	adds	r3, #2
 80076ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	f003 0303 	and.w	r3, r3, #3
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	220f      	movs	r2, #15
 80076be:	fa02 f303 	lsl.w	r3, r2, r3
 80076c2:	43db      	mvns	r3, r3
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	4013      	ands	r3, r2
 80076c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a52      	ldr	r2, [pc, #328]	; (8007818 <HAL_GPIO_Init+0x314>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d02b      	beq.n	800772a <HAL_GPIO_Init+0x226>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a51      	ldr	r2, [pc, #324]	; (800781c <HAL_GPIO_Init+0x318>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d025      	beq.n	8007726 <HAL_GPIO_Init+0x222>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a50      	ldr	r2, [pc, #320]	; (8007820 <HAL_GPIO_Init+0x31c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d01f      	beq.n	8007722 <HAL_GPIO_Init+0x21e>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a4f      	ldr	r2, [pc, #316]	; (8007824 <HAL_GPIO_Init+0x320>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d019      	beq.n	800771e <HAL_GPIO_Init+0x21a>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a4e      	ldr	r2, [pc, #312]	; (8007828 <HAL_GPIO_Init+0x324>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d013      	beq.n	800771a <HAL_GPIO_Init+0x216>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a4d      	ldr	r2, [pc, #308]	; (800782c <HAL_GPIO_Init+0x328>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d00d      	beq.n	8007716 <HAL_GPIO_Init+0x212>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a4c      	ldr	r2, [pc, #304]	; (8007830 <HAL_GPIO_Init+0x32c>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d007      	beq.n	8007712 <HAL_GPIO_Init+0x20e>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a4b      	ldr	r2, [pc, #300]	; (8007834 <HAL_GPIO_Init+0x330>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d101      	bne.n	800770e <HAL_GPIO_Init+0x20a>
 800770a:	2307      	movs	r3, #7
 800770c:	e00e      	b.n	800772c <HAL_GPIO_Init+0x228>
 800770e:	2308      	movs	r3, #8
 8007710:	e00c      	b.n	800772c <HAL_GPIO_Init+0x228>
 8007712:	2306      	movs	r3, #6
 8007714:	e00a      	b.n	800772c <HAL_GPIO_Init+0x228>
 8007716:	2305      	movs	r3, #5
 8007718:	e008      	b.n	800772c <HAL_GPIO_Init+0x228>
 800771a:	2304      	movs	r3, #4
 800771c:	e006      	b.n	800772c <HAL_GPIO_Init+0x228>
 800771e:	2303      	movs	r3, #3
 8007720:	e004      	b.n	800772c <HAL_GPIO_Init+0x228>
 8007722:	2302      	movs	r3, #2
 8007724:	e002      	b.n	800772c <HAL_GPIO_Init+0x228>
 8007726:	2301      	movs	r3, #1
 8007728:	e000      	b.n	800772c <HAL_GPIO_Init+0x228>
 800772a:	2300      	movs	r3, #0
 800772c:	69fa      	ldr	r2, [r7, #28]
 800772e:	f002 0203 	and.w	r2, r2, #3
 8007732:	0092      	lsls	r2, r2, #2
 8007734:	4093      	lsls	r3, r2
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	4313      	orrs	r3, r2
 800773a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800773c:	4935      	ldr	r1, [pc, #212]	; (8007814 <HAL_GPIO_Init+0x310>)
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	089b      	lsrs	r3, r3, #2
 8007742:	3302      	adds	r3, #2
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800774a:	4b3b      	ldr	r3, [pc, #236]	; (8007838 <HAL_GPIO_Init+0x334>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	43db      	mvns	r3, r3
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	4013      	ands	r3, r2
 8007758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800776e:	4a32      	ldr	r2, [pc, #200]	; (8007838 <HAL_GPIO_Init+0x334>)
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007774:	4b30      	ldr	r3, [pc, #192]	; (8007838 <HAL_GPIO_Init+0x334>)
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	43db      	mvns	r3, r3
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	4013      	ands	r3, r2
 8007782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007790:	69ba      	ldr	r2, [r7, #24]
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	4313      	orrs	r3, r2
 8007796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007798:	4a27      	ldr	r2, [pc, #156]	; (8007838 <HAL_GPIO_Init+0x334>)
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800779e:	4b26      	ldr	r3, [pc, #152]	; (8007838 <HAL_GPIO_Init+0x334>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	43db      	mvns	r3, r3
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	4013      	ands	r3, r2
 80077ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	4313      	orrs	r3, r2
 80077c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80077c2:	4a1d      	ldr	r2, [pc, #116]	; (8007838 <HAL_GPIO_Init+0x334>)
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80077c8:	4b1b      	ldr	r3, [pc, #108]	; (8007838 <HAL_GPIO_Init+0x334>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	43db      	mvns	r3, r3
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	4013      	ands	r3, r2
 80077d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80077ec:	4a12      	ldr	r2, [pc, #72]	; (8007838 <HAL_GPIO_Init+0x334>)
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	3301      	adds	r3, #1
 80077f6:	61fb      	str	r3, [r7, #28]
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	2b0f      	cmp	r3, #15
 80077fc:	f67f ae90 	bls.w	8007520 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007800:	bf00      	nop
 8007802:	bf00      	nop
 8007804:	3724      	adds	r7, #36	; 0x24
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	40023800 	.word	0x40023800
 8007814:	40013800 	.word	0x40013800
 8007818:	40020000 	.word	0x40020000
 800781c:	40020400 	.word	0x40020400
 8007820:	40020800 	.word	0x40020800
 8007824:	40020c00 	.word	0x40020c00
 8007828:	40021000 	.word	0x40021000
 800782c:	40021400 	.word	0x40021400
 8007830:	40021800 	.word	0x40021800
 8007834:	40021c00 	.word	0x40021c00
 8007838:	40013c00 	.word	0x40013c00

0800783c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	807b      	strh	r3, [r7, #2]
 8007848:	4613      	mov	r3, r2
 800784a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800784c:	787b      	ldrb	r3, [r7, #1]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007852:	887a      	ldrh	r2, [r7, #2]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007858:	e003      	b.n	8007862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800785a:	887b      	ldrh	r3, [r7, #2]
 800785c:	041a      	lsls	r2, r3, #16
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	619a      	str	r2, [r3, #24]
}
 8007862:	bf00      	nop
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800786e:	b480      	push	{r7}
 8007870:	b085      	sub	sp, #20
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007880:	887a      	ldrh	r2, [r7, #2]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4013      	ands	r3, r2
 8007886:	041a      	lsls	r2, r3, #16
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	43d9      	mvns	r1, r3
 800788c:	887b      	ldrh	r3, [r7, #2]
 800788e:	400b      	ands	r3, r1
 8007890:	431a      	orrs	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	619a      	str	r2, [r3, #24]
}
 8007896:	bf00      	nop
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
	...

080078a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e12b      	b.n	8007b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d106      	bne.n	80078d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7ff f86c 	bl	80069a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2224      	movs	r2, #36	; 0x24
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 0201 	bic.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007908:	f002 ff7e 	bl	800a808 <HAL_RCC_GetPCLK1Freq>
 800790c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	4a81      	ldr	r2, [pc, #516]	; (8007b18 <HAL_I2C_Init+0x274>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d807      	bhi.n	8007928 <HAL_I2C_Init+0x84>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4a80      	ldr	r2, [pc, #512]	; (8007b1c <HAL_I2C_Init+0x278>)
 800791c:	4293      	cmp	r3, r2
 800791e:	bf94      	ite	ls
 8007920:	2301      	movls	r3, #1
 8007922:	2300      	movhi	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	e006      	b.n	8007936 <HAL_I2C_Init+0x92>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4a7d      	ldr	r2, [pc, #500]	; (8007b20 <HAL_I2C_Init+0x27c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	bf94      	ite	ls
 8007930:	2301      	movls	r3, #1
 8007932:	2300      	movhi	r3, #0
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e0e7      	b.n	8007b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4a78      	ldr	r2, [pc, #480]	; (8007b24 <HAL_I2C_Init+0x280>)
 8007942:	fba2 2303 	umull	r2, r3, r2, r3
 8007946:	0c9b      	lsrs	r3, r3, #18
 8007948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	430a      	orrs	r2, r1
 800795c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	4a6a      	ldr	r2, [pc, #424]	; (8007b18 <HAL_I2C_Init+0x274>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d802      	bhi.n	8007978 <HAL_I2C_Init+0xd4>
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	3301      	adds	r3, #1
 8007976:	e009      	b.n	800798c <HAL_I2C_Init+0xe8>
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800797e:	fb02 f303 	mul.w	r3, r2, r3
 8007982:	4a69      	ldr	r2, [pc, #420]	; (8007b28 <HAL_I2C_Init+0x284>)
 8007984:	fba2 2303 	umull	r2, r3, r2, r3
 8007988:	099b      	lsrs	r3, r3, #6
 800798a:	3301      	adds	r3, #1
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	430b      	orrs	r3, r1
 8007992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800799e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	495c      	ldr	r1, [pc, #368]	; (8007b18 <HAL_I2C_Init+0x274>)
 80079a8:	428b      	cmp	r3, r1
 80079aa:	d819      	bhi.n	80079e0 <HAL_I2C_Init+0x13c>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	1e59      	subs	r1, r3, #1
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80079ba:	1c59      	adds	r1, r3, #1
 80079bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80079c0:	400b      	ands	r3, r1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <HAL_I2C_Init+0x138>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	1e59      	subs	r1, r3, #1
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80079d4:	3301      	adds	r3, #1
 80079d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079da:	e051      	b.n	8007a80 <HAL_I2C_Init+0x1dc>
 80079dc:	2304      	movs	r3, #4
 80079de:	e04f      	b.n	8007a80 <HAL_I2C_Init+0x1dc>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d111      	bne.n	8007a0c <HAL_I2C_Init+0x168>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	1e58      	subs	r0, r3, #1
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6859      	ldr	r1, [r3, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	440b      	add	r3, r1
 80079f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80079fa:	3301      	adds	r3, #1
 80079fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	bf0c      	ite	eq
 8007a04:	2301      	moveq	r3, #1
 8007a06:	2300      	movne	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	e012      	b.n	8007a32 <HAL_I2C_Init+0x18e>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	1e58      	subs	r0, r3, #1
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6859      	ldr	r1, [r3, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	440b      	add	r3, r1
 8007a1a:	0099      	lsls	r1, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a22:	3301      	adds	r3, #1
 8007a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	bf0c      	ite	eq
 8007a2c:	2301      	moveq	r3, #1
 8007a2e:	2300      	movne	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <HAL_I2C_Init+0x196>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e022      	b.n	8007a80 <HAL_I2C_Init+0x1dc>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10e      	bne.n	8007a60 <HAL_I2C_Init+0x1bc>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	1e58      	subs	r0, r3, #1
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6859      	ldr	r1, [r3, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	440b      	add	r3, r1
 8007a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a54:	3301      	adds	r3, #1
 8007a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a5e:	e00f      	b.n	8007a80 <HAL_I2C_Init+0x1dc>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	1e58      	subs	r0, r3, #1
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6859      	ldr	r1, [r3, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	440b      	add	r3, r1
 8007a6e:	0099      	lsls	r1, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a76:	3301      	adds	r3, #1
 8007a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a80:	6879      	ldr	r1, [r7, #4]
 8007a82:	6809      	ldr	r1, [r1, #0]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	69da      	ldr	r2, [r3, #28]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007aae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6911      	ldr	r1, [r2, #16]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	68d2      	ldr	r2, [r2, #12]
 8007aba:	4311      	orrs	r1, r2
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	6812      	ldr	r2, [r2, #0]
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	695a      	ldr	r2, [r3, #20]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0201 	orr.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2220      	movs	r2, #32
 8007afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	000186a0 	.word	0x000186a0
 8007b1c:	001e847f 	.word	0x001e847f
 8007b20:	003d08ff 	.word	0x003d08ff
 8007b24:	431bde83 	.word	0x431bde83
 8007b28:	10624dd3 	.word	0x10624dd3

08007b2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	607a      	str	r2, [r7, #4]
 8007b36:	461a      	mov	r2, r3
 8007b38:	460b      	mov	r3, r1
 8007b3a:	817b      	strh	r3, [r7, #10]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b40:	f7ff fafe 	bl	8007140 <HAL_GetTick>
 8007b44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	f040 80e0 	bne.w	8007d14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	2319      	movs	r3, #25
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	4970      	ldr	r1, [pc, #448]	; (8007d20 <HAL_I2C_Master_Transmit+0x1f4>)
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f001 ffd0 	bl	8009b04 <I2C_WaitOnFlagUntilTimeout>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	e0d3      	b.n	8007d16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d101      	bne.n	8007b7c <HAL_I2C_Master_Transmit+0x50>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e0cc      	b.n	8007d16 <HAL_I2C_Master_Transmit+0x1ea>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d007      	beq.n	8007ba2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f042 0201 	orr.w	r2, r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2221      	movs	r2, #33	; 0x21
 8007bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2210      	movs	r2, #16
 8007bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	893a      	ldrh	r2, [r7, #8]
 8007bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4a50      	ldr	r2, [pc, #320]	; (8007d24 <HAL_I2C_Master_Transmit+0x1f8>)
 8007be2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007be4:	8979      	ldrh	r1, [r7, #10]
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	6a3a      	ldr	r2, [r7, #32]
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f001 fd92 	bl	8009714 <I2C_MasterRequestWrite>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e08d      	b.n	8007d16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	613b      	str	r3, [r7, #16]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	613b      	str	r3, [r7, #16]
 8007c0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007c10:	e066      	b.n	8007ce0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	6a39      	ldr	r1, [r7, #32]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f002 f84a 	bl	8009cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00d      	beq.n	8007c3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d107      	bne.n	8007c3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e06b      	b.n	8007d16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c42:	781a      	ldrb	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c66:	3b01      	subs	r3, #1
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d11b      	bne.n	8007cb4 <HAL_I2C_Master_Transmit+0x188>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d017      	beq.n	8007cb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c88:	781a      	ldrb	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	1c5a      	adds	r2, r3, #1
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cac:	3b01      	subs	r3, #1
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	6a39      	ldr	r1, [r7, #32]
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f002 f83a 	bl	8009d32 <I2C_WaitOnBTFFlagUntilTimeout>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00d      	beq.n	8007ce0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d107      	bne.n	8007cdc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e01a      	b.n	8007d16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d194      	bne.n	8007c12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	e000      	b.n	8007d16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007d14:	2302      	movs	r3, #2
  }
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	00100002 	.word	0x00100002
 8007d24:	ffff0000 	.word	0xffff0000

08007d28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b08c      	sub	sp, #48	; 0x30
 8007d2c:	af02      	add	r7, sp, #8
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	607a      	str	r2, [r7, #4]
 8007d32:	461a      	mov	r2, r3
 8007d34:	460b      	mov	r3, r1
 8007d36:	817b      	strh	r3, [r7, #10]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d3c:	f7ff fa00 	bl	8007140 <HAL_GetTick>
 8007d40:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b20      	cmp	r3, #32
 8007d4c:	f040 820b 	bne.w	8008166 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	2319      	movs	r3, #25
 8007d56:	2201      	movs	r2, #1
 8007d58:	497c      	ldr	r1, [pc, #496]	; (8007f4c <HAL_I2C_Master_Receive+0x224>)
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f001 fed2 	bl	8009b04 <I2C_WaitOnFlagUntilTimeout>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007d66:	2302      	movs	r3, #2
 8007d68:	e1fe      	b.n	8008168 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d101      	bne.n	8007d78 <HAL_I2C_Master_Receive+0x50>
 8007d74:	2302      	movs	r3, #2
 8007d76:	e1f7      	b.n	8008168 <HAL_I2C_Master_Receive+0x440>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d007      	beq.n	8007d9e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f042 0201 	orr.w	r2, r2, #1
 8007d9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2222      	movs	r2, #34	; 0x22
 8007db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2210      	movs	r2, #16
 8007dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	893a      	ldrh	r2, [r7, #8]
 8007dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	4a5c      	ldr	r2, [pc, #368]	; (8007f50 <HAL_I2C_Master_Receive+0x228>)
 8007dde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007de0:	8979      	ldrh	r1, [r7, #10]
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f001 fd16 	bl	8009818 <I2C_MasterRequestRead>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e1b8      	b.n	8008168 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d113      	bne.n	8007e26 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dfe:	2300      	movs	r3, #0
 8007e00:	623b      	str	r3, [r7, #32]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	623b      	str	r3, [r7, #32]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	623b      	str	r3, [r7, #32]
 8007e12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	e18c      	b.n	8008140 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d11b      	bne.n	8007e66 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61fb      	str	r3, [r7, #28]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	61fb      	str	r3, [r7, #28]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	61fb      	str	r3, [r7, #28]
 8007e52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	e16c      	b.n	8008140 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d11b      	bne.n	8007ea6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61bb      	str	r3, [r7, #24]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	61bb      	str	r3, [r7, #24]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	61bb      	str	r3, [r7, #24]
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	e14c      	b.n	8008140 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007eb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	617b      	str	r3, [r7, #20]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	617b      	str	r3, [r7, #20]
 8007eca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007ecc:	e138      	b.n	8008140 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	f200 80f1 	bhi.w	80080ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d123      	bne.n	8007f28 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ee2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f001 ff97 	bl	8009e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e139      	b.n	8008168 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	691a      	ldr	r2, [r3, #16]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	b2d2      	uxtb	r2, r2
 8007f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f10:	3b01      	subs	r3, #1
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f26:	e10b      	b.n	8008140 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d14e      	bne.n	8007fce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	2200      	movs	r2, #0
 8007f38:	4906      	ldr	r1, [pc, #24]	; (8007f54 <HAL_I2C_Master_Receive+0x22c>)
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f001 fde2 	bl	8009b04 <I2C_WaitOnFlagUntilTimeout>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d008      	beq.n	8007f58 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e10e      	b.n	8008168 <HAL_I2C_Master_Receive+0x440>
 8007f4a:	bf00      	nop
 8007f4c:	00100002 	.word	0x00100002
 8007f50:	ffff0000 	.word	0xffff0000
 8007f54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	691a      	ldr	r2, [r3, #16]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	b2d2      	uxtb	r2, r2
 8007f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	1c5a      	adds	r2, r3, #1
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	b2d2      	uxtb	r2, r2
 8007fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007fcc:	e0b8      	b.n	8008140 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	4966      	ldr	r1, [pc, #408]	; (8008170 <HAL_I2C_Master_Receive+0x448>)
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f001 fd93 	bl	8009b04 <I2C_WaitOnFlagUntilTimeout>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e0bf      	b.n	8008168 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	691a      	ldr	r2, [r3, #16]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	b2d2      	uxtb	r2, r2
 8008004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008014:	3b01      	subs	r3, #1
 8008016:	b29a      	uxth	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008020:	b29b      	uxth	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	b29a      	uxth	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008030:	2200      	movs	r2, #0
 8008032:	494f      	ldr	r1, [pc, #316]	; (8008170 <HAL_I2C_Master_Receive+0x448>)
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f001 fd65 	bl	8009b04 <I2C_WaitOnFlagUntilTimeout>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e091      	b.n	8008168 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008052:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	691a      	ldr	r2, [r3, #16]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	b2d2      	uxtb	r2, r2
 8008060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008070:	3b01      	subs	r3, #1
 8008072:	b29a      	uxth	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800807c:	b29b      	uxth	r3, r3
 800807e:	3b01      	subs	r3, #1
 8008080:	b29a      	uxth	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	691a      	ldr	r2, [r3, #16]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	b2d2      	uxtb	r2, r2
 8008092:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080a2:	3b01      	subs	r3, #1
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	3b01      	subs	r3, #1
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080b8:	e042      	b.n	8008140 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f001 feaa 	bl	8009e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e04c      	b.n	8008168 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	691a      	ldr	r2, [r3, #16]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	b2d2      	uxtb	r2, r2
 80080da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	1c5a      	adds	r2, r3, #1
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	3b01      	subs	r3, #1
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	f003 0304 	and.w	r3, r3, #4
 800810a:	2b04      	cmp	r3, #4
 800810c:	d118      	bne.n	8008140 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	691a      	ldr	r2, [r3, #16]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	b2d2      	uxtb	r2, r2
 800811a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800812a:	3b01      	subs	r3, #1
 800812c:	b29a      	uxth	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008136:	b29b      	uxth	r3, r3
 8008138:	3b01      	subs	r3, #1
 800813a:	b29a      	uxth	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008144:	2b00      	cmp	r3, #0
 8008146:	f47f aec2 	bne.w	8007ece <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2220      	movs	r2, #32
 800814e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	e000      	b.n	8008168 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008166:	2302      	movs	r3, #2
  }
}
 8008168:	4618      	mov	r0, r3
 800816a:	3728      	adds	r7, #40	; 0x28
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	00010004 	.word	0x00010004

08008174 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b088      	sub	sp, #32
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008194:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800819c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800819e:	7bfb      	ldrb	r3, [r7, #15]
 80081a0:	2b10      	cmp	r3, #16
 80081a2:	d003      	beq.n	80081ac <HAL_I2C_EV_IRQHandler+0x38>
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	2b40      	cmp	r3, #64	; 0x40
 80081a8:	f040 80c1 	bne.w	800832e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10d      	bne.n	80081e2 <HAL_I2C_EV_IRQHandler+0x6e>
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80081cc:	d003      	beq.n	80081d6 <HAL_I2C_EV_IRQHandler+0x62>
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80081d4:	d101      	bne.n	80081da <HAL_I2C_EV_IRQHandler+0x66>
 80081d6:	2301      	movs	r3, #1
 80081d8:	e000      	b.n	80081dc <HAL_I2C_EV_IRQHandler+0x68>
 80081da:	2300      	movs	r3, #0
 80081dc:	2b01      	cmp	r3, #1
 80081de:	f000 8132 	beq.w	8008446 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00c      	beq.n	8008206 <HAL_I2C_EV_IRQHandler+0x92>
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	0a5b      	lsrs	r3, r3, #9
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d006      	beq.n	8008206 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f001 fe92 	bl	8009f22 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fcdc 	bl	8008bbc <I2C_Master_SB>
 8008204:	e092      	b.n	800832c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	08db      	lsrs	r3, r3, #3
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	2b00      	cmp	r3, #0
 8008210:	d009      	beq.n	8008226 <HAL_I2C_EV_IRQHandler+0xb2>
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	0a5b      	lsrs	r3, r3, #9
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fd52 	bl	8008cc8 <I2C_Master_ADD10>
 8008224:	e082      	b.n	800832c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	085b      	lsrs	r3, r3, #1
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d009      	beq.n	8008246 <HAL_I2C_EV_IRQHandler+0xd2>
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	0a5b      	lsrs	r3, r3, #9
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fd6c 	bl	8008d1c <I2C_Master_ADDR>
 8008244:	e072      	b.n	800832c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	089b      	lsrs	r3, r3, #2
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	2b00      	cmp	r3, #0
 8008250:	d03b      	beq.n	80082ca <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800825c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008260:	f000 80f3 	beq.w	800844a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	09db      	lsrs	r3, r3, #7
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00f      	beq.n	8008290 <HAL_I2C_EV_IRQHandler+0x11c>
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	0a9b      	lsrs	r3, r3, #10
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d009      	beq.n	8008290 <HAL_I2C_EV_IRQHandler+0x11c>
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	089b      	lsrs	r3, r3, #2
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	2b00      	cmp	r3, #0
 8008286:	d103      	bne.n	8008290 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f94c 	bl	8008526 <I2C_MasterTransmit_TXE>
 800828e:	e04d      	b.n	800832c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	089b      	lsrs	r3, r3, #2
 8008294:	f003 0301 	and.w	r3, r3, #1
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 80d6 	beq.w	800844a <HAL_I2C_EV_IRQHandler+0x2d6>
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	0a5b      	lsrs	r3, r3, #9
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 80cf 	beq.w	800844a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	2b21      	cmp	r3, #33	; 0x21
 80082b0:	d103      	bne.n	80082ba <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f9d3 	bl	800865e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082b8:	e0c7      	b.n	800844a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
 80082bc:	2b40      	cmp	r3, #64	; 0x40
 80082be:	f040 80c4 	bne.w	800844a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fa41 	bl	800874a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082c8:	e0bf      	b.n	800844a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082d8:	f000 80b7 	beq.w	800844a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	099b      	lsrs	r3, r3, #6
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00f      	beq.n	8008308 <HAL_I2C_EV_IRQHandler+0x194>
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	0a9b      	lsrs	r3, r3, #10
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d009      	beq.n	8008308 <HAL_I2C_EV_IRQHandler+0x194>
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	089b      	lsrs	r3, r3, #2
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d103      	bne.n	8008308 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fab6 	bl	8008872 <I2C_MasterReceive_RXNE>
 8008306:	e011      	b.n	800832c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	089b      	lsrs	r3, r3, #2
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 809a 	beq.w	800844a <HAL_I2C_EV_IRQHandler+0x2d6>
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	0a5b      	lsrs	r3, r3, #9
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 8093 	beq.w	800844a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fb5f 	bl	80089e8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800832a:	e08e      	b.n	800844a <HAL_I2C_EV_IRQHandler+0x2d6>
 800832c:	e08d      	b.n	800844a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	d004      	beq.n	8008340 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	61fb      	str	r3, [r7, #28]
 800833e:	e007      	b.n	8008350 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	085b      	lsrs	r3, r3, #1
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	d012      	beq.n	8008382 <HAL_I2C_EV_IRQHandler+0x20e>
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	0a5b      	lsrs	r3, r3, #9
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00c      	beq.n	8008382 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836c:	2b00      	cmp	r3, #0
 800836e:	d003      	beq.n	8008378 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008378:	69b9      	ldr	r1, [r7, #24]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 ff1d 	bl	80091ba <I2C_Slave_ADDR>
 8008380:	e066      	b.n	8008450 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	091b      	lsrs	r3, r3, #4
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	d009      	beq.n	80083a2 <HAL_I2C_EV_IRQHandler+0x22e>
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	0a5b      	lsrs	r3, r3, #9
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 ff58 	bl	8009250 <I2C_Slave_STOPF>
 80083a0:	e056      	b.n	8008450 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	2b21      	cmp	r3, #33	; 0x21
 80083a6:	d002      	beq.n	80083ae <HAL_I2C_EV_IRQHandler+0x23a>
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
 80083aa:	2b29      	cmp	r3, #41	; 0x29
 80083ac:	d125      	bne.n	80083fa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	09db      	lsrs	r3, r3, #7
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00f      	beq.n	80083da <HAL_I2C_EV_IRQHandler+0x266>
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	0a9b      	lsrs	r3, r3, #10
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d009      	beq.n	80083da <HAL_I2C_EV_IRQHandler+0x266>
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	089b      	lsrs	r3, r3, #2
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d103      	bne.n	80083da <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fe33 	bl	800903e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80083d8:	e039      	b.n	800844e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	089b      	lsrs	r3, r3, #2
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d033      	beq.n	800844e <HAL_I2C_EV_IRQHandler+0x2da>
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	0a5b      	lsrs	r3, r3, #9
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d02d      	beq.n	800844e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fe60 	bl	80090b8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80083f8:	e029      	b.n	800844e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	099b      	lsrs	r3, r3, #6
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00f      	beq.n	8008426 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	0a9b      	lsrs	r3, r3, #10
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	d009      	beq.n	8008426 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	089b      	lsrs	r3, r3, #2
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d103      	bne.n	8008426 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fe6b 	bl	80090fa <I2C_SlaveReceive_RXNE>
 8008424:	e014      	b.n	8008450 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	089b      	lsrs	r3, r3, #2
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00e      	beq.n	8008450 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	0a5b      	lsrs	r3, r3, #9
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d008      	beq.n	8008450 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fe99 	bl	8009176 <I2C_SlaveReceive_BTF>
 8008444:	e004      	b.n	8008450 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008446:	bf00      	nop
 8008448:	e002      	b.n	8008450 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800844a:	bf00      	nop
 800844c:	e000      	b.n	8008450 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800844e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008450:	3720      	adds	r7, #32
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800845e:	bf00      	nop
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800846a:	b480      	push	{r7}
 800846c:	b083      	sub	sp, #12
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008472:	bf00      	nop
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	70fb      	strb	r3, [r7, #3]
 80084b2:	4613      	mov	r3, r2
 80084b4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80084b6:	bf00      	nop
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084c2:	b480      	push	{r7}
 80084c4:	b083      	sub	sp, #12
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80084ca:	bf00      	nop
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b083      	sub	sp, #12
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80084de:	bf00      	nop
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b083      	sub	sp, #12
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80084f2:	bf00      	nop
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80084fe:	b480      	push	{r7}
 8008500:	b083      	sub	sp, #12
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008506:	bf00      	nop
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800851a:	bf00      	nop
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b084      	sub	sp, #16
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008534:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800853c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008542:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008548:	2b00      	cmp	r3, #0
 800854a:	d150      	bne.n	80085ee <I2C_MasterTransmit_TXE+0xc8>
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	2b21      	cmp	r3, #33	; 0x21
 8008550:	d14d      	bne.n	80085ee <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2b08      	cmp	r3, #8
 8008556:	d01d      	beq.n	8008594 <I2C_MasterTransmit_TXE+0x6e>
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2b20      	cmp	r3, #32
 800855c:	d01a      	beq.n	8008594 <I2C_MasterTransmit_TXE+0x6e>
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008564:	d016      	beq.n	8008594 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008574:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2211      	movs	r2, #17
 800857a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2220      	movs	r2, #32
 8008588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff ff62 	bl	8008456 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008592:	e060      	b.n	8008656 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80085a2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085b2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2220      	movs	r2, #32
 80085be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b40      	cmp	r3, #64	; 0x40
 80085cc:	d107      	bne.n	80085de <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff ff7d 	bl	80084d6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80085dc:	e03b      	b.n	8008656 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7ff ff35 	bl	8008456 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80085ec:	e033      	b.n	8008656 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	2b21      	cmp	r3, #33	; 0x21
 80085f2:	d005      	beq.n	8008600 <I2C_MasterTransmit_TXE+0xda>
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	2b40      	cmp	r3, #64	; 0x40
 80085f8:	d12d      	bne.n	8008656 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
 80085fc:	2b22      	cmp	r3, #34	; 0x22
 80085fe:	d12a      	bne.n	8008656 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008604:	b29b      	uxth	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d108      	bne.n	800861c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008618:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800861a:	e01c      	b.n	8008656 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b40      	cmp	r3, #64	; 0x40
 8008626:	d103      	bne.n	8008630 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f88e 	bl	800874a <I2C_MemoryTransmit_TXE_BTF>
}
 800862e:	e012      	b.n	8008656 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	781a      	ldrb	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800864a:	b29b      	uxth	r3, r3
 800864c:	3b01      	subs	r3, #1
 800864e:	b29a      	uxth	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008654:	e7ff      	b.n	8008656 <I2C_MasterTransmit_TXE+0x130>
 8008656:	bf00      	nop
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b21      	cmp	r3, #33	; 0x21
 8008676:	d164      	bne.n	8008742 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800867c:	b29b      	uxth	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d012      	beq.n	80086a8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	781a      	ldrb	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	1c5a      	adds	r2, r3, #1
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800869c:	b29b      	uxth	r3, r3
 800869e:	3b01      	subs	r3, #1
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80086a6:	e04c      	b.n	8008742 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b08      	cmp	r3, #8
 80086ac:	d01d      	beq.n	80086ea <I2C_MasterTransmit_BTF+0x8c>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b20      	cmp	r3, #32
 80086b2:	d01a      	beq.n	80086ea <I2C_MasterTransmit_BTF+0x8c>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086ba:	d016      	beq.n	80086ea <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80086ca:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2211      	movs	r2, #17
 80086d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2220      	movs	r2, #32
 80086de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7ff feb7 	bl	8008456 <HAL_I2C_MasterTxCpltCallback>
}
 80086e8:	e02b      	b.n	8008742 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80086f8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008708:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2220      	movs	r2, #32
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b40      	cmp	r3, #64	; 0x40
 8008722:	d107      	bne.n	8008734 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f7ff fed2 	bl	80084d6 <HAL_I2C_MemTxCpltCallback>
}
 8008732:	e006      	b.n	8008742 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff fe8a 	bl	8008456 <HAL_I2C_MasterTxCpltCallback>
}
 8008742:	bf00      	nop
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b084      	sub	sp, #16
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008758:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800875e:	2b00      	cmp	r3, #0
 8008760:	d11d      	bne.n	800879e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008766:	2b01      	cmp	r3, #1
 8008768:	d10b      	bne.n	8008782 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800876e:	b2da      	uxtb	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800877a:	1c9a      	adds	r2, r3, #2
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8008780:	e073      	b.n	800886a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008786:	b29b      	uxth	r3, r3
 8008788:	121b      	asrs	r3, r3, #8
 800878a:	b2da      	uxtb	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800879c:	e065      	b.n	800886a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d10b      	bne.n	80087be <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b6:	1c5a      	adds	r2, r3, #1
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80087bc:	e055      	b.n	800886a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d151      	bne.n	800886a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	2b22      	cmp	r3, #34	; 0x22
 80087ca:	d10d      	bne.n	80087e8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087da:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80087e6:	e040      	b.n	800886a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d015      	beq.n	800881e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
 80087f4:	2b21      	cmp	r3, #33	; 0x21
 80087f6:	d112      	bne.n	800881e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fc:	781a      	ldrb	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	1c5a      	adds	r2, r3, #1
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008812:	b29b      	uxth	r3, r3
 8008814:	3b01      	subs	r3, #1
 8008816:	b29a      	uxth	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800881c:	e025      	b.n	800886a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008822:	b29b      	uxth	r3, r3
 8008824:	2b00      	cmp	r3, #0
 8008826:	d120      	bne.n	800886a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8008828:	7bfb      	ldrb	r3, [r7, #15]
 800882a:	2b21      	cmp	r3, #33	; 0x21
 800882c:	d11d      	bne.n	800886a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800883c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800884c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7ff fe36 	bl	80084d6 <HAL_I2C_MemTxCpltCallback>
}
 800886a:	bf00      	nop
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b22      	cmp	r3, #34	; 0x22
 8008884:	f040 80ac 	bne.w	80089e0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800888c:	b29b      	uxth	r3, r3
 800888e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b03      	cmp	r3, #3
 8008894:	d921      	bls.n	80088da <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	691a      	ldr	r2, [r3, #16]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	b2d2      	uxtb	r2, r2
 80088a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	3b01      	subs	r3, #1
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	f040 808c 	bne.w	80089e0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088d6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80088d8:	e082      	b.n	80089e0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d075      	beq.n	80089ce <I2C_MasterReceive_RXNE+0x15c>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d002      	beq.n	80088ee <I2C_MasterReceive_RXNE+0x7c>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d16f      	bne.n	80089ce <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 fa60 	bl	8009db4 <I2C_WaitOnSTOPRequestThroughIT>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d142      	bne.n	8008980 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008908:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008918:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	691a      	ldr	r2, [r3, #16]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	b2d2      	uxtb	r2, r2
 8008926:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008936:	b29b      	uxth	r3, r3
 8008938:	3b01      	subs	r3, #1
 800893a:	b29a      	uxth	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2220      	movs	r2, #32
 8008944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b40      	cmp	r3, #64	; 0x40
 8008952:	d10a      	bne.n	800896a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff fdc1 	bl	80084ea <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008968:	e03a      	b.n	80089e0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2212      	movs	r2, #18
 8008976:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7ff fd76 	bl	800846a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800897e:	e02f      	b.n	80089e0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800898e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	691a      	ldr	r2, [r3, #16]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	b2d2      	uxtb	r2, r2
 800899c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	1c5a      	adds	r2, r3, #1
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	3b01      	subs	r3, #1
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff fd99 	bl	80084fe <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80089cc:	e008      	b.n	80089e0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089dc:	605a      	str	r2, [r3, #4]
}
 80089de:	e7ff      	b.n	80089e0 <I2C_MasterReceive_RXNE+0x16e>
 80089e0:	bf00      	nop
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	2b04      	cmp	r3, #4
 80089fe:	d11b      	bne.n	8008a38 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685a      	ldr	r2, [r3, #4]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a0e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	691a      	ldr	r2, [r3, #16]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1a:	b2d2      	uxtb	r2, r2
 8008a1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008a36:	e0bd      	b.n	8008bb4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	d129      	bne.n	8008a96 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a50:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2b04      	cmp	r3, #4
 8008a56:	d00a      	beq.n	8008a6e <I2C_MasterReceive_BTF+0x86>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d007      	beq.n	8008a6e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a6c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	691a      	ldr	r2, [r3, #16]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	b2d2      	uxtb	r2, r2
 8008a7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008a94:	e08e      	b.n	8008bb4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d176      	bne.n	8008b8e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d002      	beq.n	8008aac <I2C_MasterReceive_BTF+0xc4>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2b10      	cmp	r3, #16
 8008aaa:	d108      	bne.n	8008abe <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aba:	601a      	str	r2, [r3, #0]
 8008abc:	e019      	b.n	8008af2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2b04      	cmp	r3, #4
 8008ac2:	d002      	beq.n	8008aca <I2C_MasterReceive_BTF+0xe2>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d108      	bne.n	8008adc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	e00a      	b.n	8008af2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b10      	cmp	r3, #16
 8008ae0:	d007      	beq.n	8008af2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008af0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	691a      	ldr	r2, [r3, #16]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	b2d2      	uxtb	r2, r2
 8008afe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	3b01      	subs	r3, #1
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	691a      	ldr	r2, [r3, #16]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	b2d2      	uxtb	r2, r2
 8008b24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	3b01      	subs	r3, #1
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008b4c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b40      	cmp	r3, #64	; 0x40
 8008b60:	d10a      	bne.n	8008b78 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7ff fcba 	bl	80084ea <HAL_I2C_MemRxCpltCallback>
}
 8008b76:	e01d      	b.n	8008bb4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2212      	movs	r2, #18
 8008b84:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7ff fc6f 	bl	800846a <HAL_I2C_MasterRxCpltCallback>
}
 8008b8c:	e012      	b.n	8008bb4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	691a      	ldr	r2, [r3, #16]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	b2d2      	uxtb	r2, r2
 8008b9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	1c5a      	adds	r2, r3, #1
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	3b01      	subs	r3, #1
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008bb4:	bf00      	nop
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b40      	cmp	r3, #64	; 0x40
 8008bce:	d117      	bne.n	8008c00 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d109      	bne.n	8008bec <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	461a      	mov	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008be8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008bea:	e067      	b.n	8008cbc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	f043 0301 	orr.w	r3, r3, #1
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	611a      	str	r2, [r3, #16]
}
 8008bfe:	e05d      	b.n	8008cbc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c08:	d133      	bne.n	8008c72 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b21      	cmp	r3, #33	; 0x21
 8008c14:	d109      	bne.n	8008c2a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008c26:	611a      	str	r2, [r3, #16]
 8008c28:	e008      	b.n	8008c3c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	f043 0301 	orr.w	r3, r3, #1
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d004      	beq.n	8008c4e <I2C_Master_SB+0x92>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d108      	bne.n	8008c60 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d032      	beq.n	8008cbc <I2C_Master_SB+0x100>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d02d      	beq.n	8008cbc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c6e:	605a      	str	r2, [r3, #4]
}
 8008c70:	e024      	b.n	8008cbc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10e      	bne.n	8008c98 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	11db      	asrs	r3, r3, #7
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	f003 0306 	and.w	r3, r3, #6
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	f063 030f 	orn	r3, r3, #15
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	611a      	str	r2, [r3, #16]
}
 8008c96:	e011      	b.n	8008cbc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d10d      	bne.n	8008cbc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	11db      	asrs	r3, r3, #7
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	f003 0306 	and.w	r3, r3, #6
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	f063 030e 	orn	r3, r3, #14
 8008cb4:	b2da      	uxtb	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	611a      	str	r2, [r3, #16]
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d004      	beq.n	8008cee <I2C_Master_ADD10+0x26>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d108      	bne.n	8008d00 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00c      	beq.n	8008d10 <I2C_Master_ADD10+0x48>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d007      	beq.n	8008d10 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d0e:	605a      	str	r2, [r3, #4]
  }
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b091      	sub	sp, #68	; 0x44
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d32:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d38:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b22      	cmp	r3, #34	; 0x22
 8008d44:	f040 8169 	bne.w	800901a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10f      	bne.n	8008d70 <I2C_Master_ADDR+0x54>
 8008d50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d54:	2b40      	cmp	r3, #64	; 0x40
 8008d56:	d10b      	bne.n	8008d70 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d58:	2300      	movs	r3, #0
 8008d5a:	633b      	str	r3, [r7, #48]	; 0x30
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	633b      	str	r3, [r7, #48]	; 0x30
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	633b      	str	r3, [r7, #48]	; 0x30
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	e160      	b.n	8009032 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d11d      	bne.n	8008db4 <I2C_Master_ADDR+0x98>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d80:	d118      	bne.n	8008db4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d82:	2300      	movs	r3, #0
 8008d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	695b      	ldr	r3, [r3, #20]
 8008d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008da6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	651a      	str	r2, [r3, #80]	; 0x50
 8008db2:	e13e      	b.n	8009032 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d113      	bne.n	8008de6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	e115      	b.n	8009012 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	f040 808a 	bne.w	8008f06 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008df8:	d137      	bne.n	8008e6a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e08:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e18:	d113      	bne.n	8008e42 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e28:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	627b      	str	r3, [r7, #36]	; 0x24
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	e0e7      	b.n	8009012 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e42:	2300      	movs	r3, #0
 8008e44:	623b      	str	r3, [r7, #32]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	623b      	str	r3, [r7, #32]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	623b      	str	r3, [r7, #32]
 8008e56:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	e0d3      	b.n	8009012 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	2b08      	cmp	r3, #8
 8008e6e:	d02e      	beq.n	8008ece <I2C_Master_ADDR+0x1b2>
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	2b20      	cmp	r3, #32
 8008e74:	d02b      	beq.n	8008ece <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e78:	2b12      	cmp	r3, #18
 8008e7a:	d102      	bne.n	8008e82 <I2C_Master_ADDR+0x166>
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d125      	bne.n	8008ece <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	d00e      	beq.n	8008ea6 <I2C_Master_ADDR+0x18a>
 8008e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d00b      	beq.n	8008ea6 <I2C_Master_ADDR+0x18a>
 8008e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e90:	2b10      	cmp	r3, #16
 8008e92:	d008      	beq.n	8008ea6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	e007      	b.n	8008eb6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008eb4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	61fb      	str	r3, [r7, #28]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	61fb      	str	r3, [r7, #28]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	61fb      	str	r3, [r7, #28]
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	e0a1      	b.n	8009012 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008edc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ede:	2300      	movs	r3, #0
 8008ee0:	61bb      	str	r3, [r7, #24]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	61bb      	str	r3, [r7, #24]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	61bb      	str	r3, [r7, #24]
 8008ef2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	e085      	b.n	8009012 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d14d      	bne.n	8008fac <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f12:	2b04      	cmp	r3, #4
 8008f14:	d016      	beq.n	8008f44 <I2C_Master_ADDR+0x228>
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d013      	beq.n	8008f44 <I2C_Master_ADDR+0x228>
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1e:	2b10      	cmp	r3, #16
 8008f20:	d010      	beq.n	8008f44 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f30:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f40:	601a      	str	r2, [r3, #0]
 8008f42:	e007      	b.n	8008f54 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f52:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f62:	d117      	bne.n	8008f94 <I2C_Master_ADDR+0x278>
 8008f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f6a:	d00b      	beq.n	8008f84 <I2C_Master_ADDR+0x268>
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d008      	beq.n	8008f84 <I2C_Master_ADDR+0x268>
 8008f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f74:	2b08      	cmp	r3, #8
 8008f76:	d005      	beq.n	8008f84 <I2C_Master_ADDR+0x268>
 8008f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7a:	2b10      	cmp	r3, #16
 8008f7c:	d002      	beq.n	8008f84 <I2C_Master_ADDR+0x268>
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f80:	2b20      	cmp	r3, #32
 8008f82:	d107      	bne.n	8008f94 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	685a      	ldr	r2, [r3, #4]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f92:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f94:	2300      	movs	r3, #0
 8008f96:	617b      	str	r3, [r7, #20]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	617b      	str	r3, [r7, #20]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	617b      	str	r3, [r7, #20]
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	e032      	b.n	8009012 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008fba:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fca:	d117      	bne.n	8008ffc <I2C_Master_ADDR+0x2e0>
 8008fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008fd2:	d00b      	beq.n	8008fec <I2C_Master_ADDR+0x2d0>
 8008fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d008      	beq.n	8008fec <I2C_Master_ADDR+0x2d0>
 8008fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fdc:	2b08      	cmp	r3, #8
 8008fde:	d005      	beq.n	8008fec <I2C_Master_ADDR+0x2d0>
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe2:	2b10      	cmp	r3, #16
 8008fe4:	d002      	beq.n	8008fec <I2C_Master_ADDR+0x2d0>
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe8:	2b20      	cmp	r3, #32
 8008fea:	d107      	bne.n	8008ffc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685a      	ldr	r2, [r3, #4]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ffa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	613b      	str	r3, [r7, #16]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	613b      	str	r3, [r7, #16]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	613b      	str	r3, [r7, #16]
 8009010:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009018:	e00b      	b.n	8009032 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800901a:	2300      	movs	r3, #0
 800901c:	60fb      	str	r3, [r7, #12]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	60fb      	str	r3, [r7, #12]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	60fb      	str	r3, [r7, #12]
 800902e:	68fb      	ldr	r3, [r7, #12]
}
 8009030:	e7ff      	b.n	8009032 <I2C_Master_ADDR+0x316>
 8009032:	bf00      	nop
 8009034:	3744      	adds	r7, #68	; 0x44
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b084      	sub	sp, #16
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800904c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009052:	b29b      	uxth	r3, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d02b      	beq.n	80090b0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905c:	781a      	ldrb	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009068:	1c5a      	adds	r2, r3, #1
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009072:	b29b      	uxth	r3, r3
 8009074:	3b01      	subs	r3, #1
 8009076:	b29a      	uxth	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009080:	b29b      	uxth	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	d114      	bne.n	80090b0 <I2C_SlaveTransmit_TXE+0x72>
 8009086:	7bfb      	ldrb	r3, [r7, #15]
 8009088:	2b29      	cmp	r3, #41	; 0x29
 800908a:	d111      	bne.n	80090b0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800909a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2221      	movs	r2, #33	; 0x21
 80090a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2228      	movs	r2, #40	; 0x28
 80090a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7ff f9e7 	bl	800847e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80090b0:	bf00      	nop
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d011      	beq.n	80090ee <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	781a      	ldrb	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	3b01      	subs	r3, #1
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b084      	sub	sp, #16
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009108:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800910e:	b29b      	uxth	r3, r3
 8009110:	2b00      	cmp	r3, #0
 8009112:	d02c      	beq.n	800916e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	691a      	ldr	r2, [r3, #16]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911e:	b2d2      	uxtb	r2, r2
 8009120:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	1c5a      	adds	r2, r3, #1
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009130:	b29b      	uxth	r3, r3
 8009132:	3b01      	subs	r3, #1
 8009134:	b29a      	uxth	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800913e:	b29b      	uxth	r3, r3
 8009140:	2b00      	cmp	r3, #0
 8009142:	d114      	bne.n	800916e <I2C_SlaveReceive_RXNE+0x74>
 8009144:	7bfb      	ldrb	r3, [r7, #15]
 8009146:	2b2a      	cmp	r3, #42	; 0x2a
 8009148:	d111      	bne.n	800916e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	685a      	ldr	r2, [r3, #4]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009158:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2222      	movs	r2, #34	; 0x22
 800915e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2228      	movs	r2, #40	; 0x28
 8009164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f7ff f992 	bl	8008492 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800916e:	bf00      	nop
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009176:	b480      	push	{r7}
 8009178:	b083      	sub	sp, #12
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009182:	b29b      	uxth	r3, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	d012      	beq.n	80091ae <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	691a      	ldr	r2, [r3, #16]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009192:	b2d2      	uxtb	r2, r2
 8009194:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919a:	1c5a      	adds	r2, r3, #1
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	3b01      	subs	r3, #1
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80091ae:	bf00      	nop
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80091d4:	2b28      	cmp	r3, #40	; 0x28
 80091d6:	d127      	bne.n	8009228 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091e6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	089b      	lsrs	r3, r3, #2
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80091f4:	2301      	movs	r3, #1
 80091f6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	09db      	lsrs	r3, r3, #7
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	2b00      	cmp	r3, #0
 8009202:	d103      	bne.n	800920c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	81bb      	strh	r3, [r7, #12]
 800920a:	e002      	b.n	8009212 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800921a:	89ba      	ldrh	r2, [r7, #12]
 800921c:	7bfb      	ldrb	r3, [r7, #15]
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7ff f940 	bl	80084a6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009226:	e00e      	b.n	8009246 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009228:	2300      	movs	r3, #0
 800922a:	60bb      	str	r3, [r7, #8]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	60bb      	str	r3, [r7, #8]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	60bb      	str	r3, [r7, #8]
 800923c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009246:	bf00      	nop
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800925e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800926e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009270:	2300      	movs	r3, #0
 8009272:	60bb      	str	r3, [r7, #8]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	695b      	ldr	r3, [r3, #20]
 800927a:	60bb      	str	r3, [r7, #8]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f042 0201 	orr.w	r2, r2, #1
 800928a:	601a      	str	r2, [r3, #0]
 800928c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800929c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092ac:	d172      	bne.n	8009394 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
 80092b0:	2b22      	cmp	r3, #34	; 0x22
 80092b2:	d002      	beq.n	80092ba <I2C_Slave_STOPF+0x6a>
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	2b2a      	cmp	r3, #42	; 0x2a
 80092b8:	d135      	bne.n	8009326 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d005      	beq.n	80092de <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d6:	f043 0204 	orr.w	r2, r3, #4
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fe f8f7 	bl	80074e6 <HAL_DMA_GetState>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d049      	beq.n	8009392 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009302:	4a69      	ldr	r2, [pc, #420]	; (80094a8 <I2C_Slave_STOPF+0x258>)
 8009304:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930a:	4618      	mov	r0, r3
 800930c:	f7fe f8c9 	bl	80074a2 <HAL_DMA_Abort_IT>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d03d      	beq.n	8009392 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009324:	e035      	b.n	8009392 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	b29a      	uxth	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009338:	b29b      	uxth	r3, r3
 800933a:	2b00      	cmp	r3, #0
 800933c:	d005      	beq.n	800934a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009342:	f043 0204 	orr.w	r2, r3, #4
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009358:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800935e:	4618      	mov	r0, r3
 8009360:	f7fe f8c1 	bl	80074e6 <HAL_DMA_GetState>
 8009364:	4603      	mov	r3, r0
 8009366:	2b01      	cmp	r3, #1
 8009368:	d014      	beq.n	8009394 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800936e:	4a4e      	ldr	r2, [pc, #312]	; (80094a8 <I2C_Slave_STOPF+0x258>)
 8009370:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe f893 	bl	80074a2 <HAL_DMA_Abort_IT>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d008      	beq.n	8009394 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800938c:	4610      	mov	r0, r2
 800938e:	4798      	blx	r3
 8009390:	e000      	b.n	8009394 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009392:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009398:	b29b      	uxth	r3, r3
 800939a:	2b00      	cmp	r3, #0
 800939c:	d03e      	beq.n	800941c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	f003 0304 	and.w	r3, r3, #4
 80093a8:	2b04      	cmp	r3, #4
 80093aa:	d112      	bne.n	80093d2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	691a      	ldr	r2, [r3, #16]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b6:	b2d2      	uxtb	r2, r2
 80093b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	3b01      	subs	r3, #1
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093dc:	2b40      	cmp	r3, #64	; 0x40
 80093de:	d112      	bne.n	8009406 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691a      	ldr	r2, [r3, #16]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ea:	b2d2      	uxtb	r2, r2
 80093ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	3b01      	subs	r3, #1
 8009400:	b29a      	uxth	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800940a:	b29b      	uxth	r3, r3
 800940c:	2b00      	cmp	r3, #0
 800940e:	d005      	beq.n	800941c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009414:	f043 0204 	orr.w	r2, r3, #4
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009420:	2b00      	cmp	r3, #0
 8009422:	d003      	beq.n	800942c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f843 	bl	80094b0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800942a:	e039      	b.n	80094a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	2b2a      	cmp	r3, #42	; 0x2a
 8009430:	d109      	bne.n	8009446 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2228      	movs	r2, #40	; 0x28
 800943c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7ff f826 	bl	8008492 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b28      	cmp	r3, #40	; 0x28
 8009450:	d111      	bne.n	8009476 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a15      	ldr	r2, [pc, #84]	; (80094ac <I2C_Slave_STOPF+0x25c>)
 8009456:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2220      	movs	r2, #32
 8009462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7ff f827 	bl	80084c2 <HAL_I2C_ListenCpltCallback>
}
 8009474:	e014      	b.n	80094a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947a:	2b22      	cmp	r3, #34	; 0x22
 800947c:	d002      	beq.n	8009484 <I2C_Slave_STOPF+0x234>
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	2b22      	cmp	r3, #34	; 0x22
 8009482:	d10d      	bne.n	80094a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2220      	movs	r2, #32
 800948e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7fe fff9 	bl	8008492 <HAL_I2C_SlaveRxCpltCallback>
}
 80094a0:	bf00      	nop
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	080099b5 	.word	0x080099b5
 80094ac:	ffff0000 	.word	0xffff0000

080094b0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80094c8:	7bbb      	ldrb	r3, [r7, #14]
 80094ca:	2b10      	cmp	r3, #16
 80094cc:	d002      	beq.n	80094d4 <I2C_ITError+0x24>
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	2b40      	cmp	r3, #64	; 0x40
 80094d2:	d10a      	bne.n	80094ea <I2C_ITError+0x3a>
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
 80094d6:	2b22      	cmp	r3, #34	; 0x22
 80094d8:	d107      	bne.n	80094ea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094e8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
 80094ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80094f0:	2b28      	cmp	r3, #40	; 0x28
 80094f2:	d107      	bne.n	8009504 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2228      	movs	r2, #40	; 0x28
 80094fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009502:	e015      	b.n	8009530 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800950e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009512:	d00a      	beq.n	800952a <I2C_ITError+0x7a>
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	2b60      	cmp	r3, #96	; 0x60
 8009518:	d007      	beq.n	800952a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2220      	movs	r2, #32
 800951e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800953a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800953e:	d162      	bne.n	8009606 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800954e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009558:	b2db      	uxtb	r3, r3
 800955a:	2b01      	cmp	r3, #1
 800955c:	d020      	beq.n	80095a0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009562:	4a6a      	ldr	r2, [pc, #424]	; (800970c <I2C_ITError+0x25c>)
 8009564:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956a:	4618      	mov	r0, r3
 800956c:	f7fd ff99 	bl	80074a2 <HAL_DMA_Abort_IT>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 8089 	beq.w	800968a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f022 0201 	bic.w	r2, r2, #1
 8009586:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2220      	movs	r2, #32
 800958c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800959a:	4610      	mov	r0, r2
 800959c:	4798      	blx	r3
 800959e:	e074      	b.n	800968a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a4:	4a59      	ldr	r2, [pc, #356]	; (800970c <I2C_ITError+0x25c>)
 80095a6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fd ff78 	bl	80074a2 <HAL_DMA_Abort_IT>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d068      	beq.n	800968a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c2:	2b40      	cmp	r3, #64	; 0x40
 80095c4:	d10b      	bne.n	80095de <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	691a      	ldr	r2, [r3, #16]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	b2d2      	uxtb	r2, r2
 80095d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d8:	1c5a      	adds	r2, r3, #1
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f022 0201 	bic.w	r2, r2, #1
 80095ec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2220      	movs	r2, #32
 80095f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009600:	4610      	mov	r0, r2
 8009602:	4798      	blx	r3
 8009604:	e041      	b.n	800968a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b60      	cmp	r3, #96	; 0x60
 8009610:	d125      	bne.n	800965e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2220      	movs	r2, #32
 8009616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962a:	2b40      	cmp	r3, #64	; 0x40
 800962c:	d10b      	bne.n	8009646 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	691a      	ldr	r2, [r3, #16]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009638:	b2d2      	uxtb	r2, r2
 800963a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009640:	1c5a      	adds	r2, r3, #1
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 0201 	bic.w	r2, r2, #1
 8009654:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7fe ff5b 	bl	8008512 <HAL_I2C_AbortCpltCallback>
 800965c:	e015      	b.n	800968a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	695b      	ldr	r3, [r3, #20]
 8009664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009668:	2b40      	cmp	r3, #64	; 0x40
 800966a:	d10b      	bne.n	8009684 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	691a      	ldr	r2, [r3, #16]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009676:	b2d2      	uxtb	r2, r2
 8009678:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967e:	1c5a      	adds	r2, r3, #1
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7fe ff3a 	bl	80084fe <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10e      	bne.n	80096b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d109      	bne.n	80096b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d104      	bne.n	80096b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d007      	beq.n	80096c8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80096c6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ce:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d4:	f003 0304 	and.w	r3, r3, #4
 80096d8:	2b04      	cmp	r3, #4
 80096da:	d113      	bne.n	8009704 <I2C_ITError+0x254>
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	2b28      	cmp	r3, #40	; 0x28
 80096e0:	d110      	bne.n	8009704 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a0a      	ldr	r2, [pc, #40]	; (8009710 <I2C_ITError+0x260>)
 80096e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2220      	movs	r2, #32
 80096f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7fe fedf 	bl	80084c2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009704:	bf00      	nop
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	080099b5 	.word	0x080099b5
 8009710:	ffff0000 	.word	0xffff0000

08009714 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b088      	sub	sp, #32
 8009718:	af02      	add	r7, sp, #8
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	607a      	str	r2, [r7, #4]
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	460b      	mov	r3, r1
 8009722:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009728:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	2b08      	cmp	r3, #8
 800972e:	d006      	beq.n	800973e <I2C_MasterRequestWrite+0x2a>
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d003      	beq.n	800973e <I2C_MasterRequestWrite+0x2a>
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800973c:	d108      	bne.n	8009750 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800974c:	601a      	str	r2, [r3, #0]
 800974e:	e00b      	b.n	8009768 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009754:	2b12      	cmp	r3, #18
 8009756:	d107      	bne.n	8009768 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009766:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 f9c5 	bl	8009b04 <I2C_WaitOnFlagUntilTimeout>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00d      	beq.n	800979c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800978a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800978e:	d103      	bne.n	8009798 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009796:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009798:	2303      	movs	r3, #3
 800979a:	e035      	b.n	8009808 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097a4:	d108      	bne.n	80097b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80097a6:	897b      	ldrh	r3, [r7, #10]
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	461a      	mov	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80097b4:	611a      	str	r2, [r3, #16]
 80097b6:	e01b      	b.n	80097f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80097b8:	897b      	ldrh	r3, [r7, #10]
 80097ba:	11db      	asrs	r3, r3, #7
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	f003 0306 	and.w	r3, r3, #6
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	f063 030f 	orn	r3, r3, #15
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	490e      	ldr	r1, [pc, #56]	; (8009810 <I2C_MasterRequestWrite+0xfc>)
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f000 f9eb 	bl	8009bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d001      	beq.n	80097e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e010      	b.n	8009808 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80097e6:	897b      	ldrh	r3, [r7, #10]
 80097e8:	b2da      	uxtb	r2, r3
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	4907      	ldr	r1, [pc, #28]	; (8009814 <I2C_MasterRequestWrite+0x100>)
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f000 f9db 	bl	8009bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e000      	b.n	8009808 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3718      	adds	r7, #24
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	00010008 	.word	0x00010008
 8009814:	00010002 	.word	0x00010002

08009818 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b088      	sub	sp, #32
 800981c:	af02      	add	r7, sp, #8
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	607a      	str	r2, [r7, #4]
 8009822:	603b      	str	r3, [r7, #0]
 8009824:	460b      	mov	r3, r1
 8009826:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800983c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	2b08      	cmp	r3, #8
 8009842:	d006      	beq.n	8009852 <I2C_MasterRequestRead+0x3a>
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d003      	beq.n	8009852 <I2C_MasterRequestRead+0x3a>
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009850:	d108      	bne.n	8009864 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	e00b      	b.n	800987c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009868:	2b11      	cmp	r3, #17
 800986a:	d107      	bne.n	800987c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800987a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f000 f93b 	bl	8009b04 <I2C_WaitOnFlagUntilTimeout>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00d      	beq.n	80098b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800989e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098a2:	d103      	bne.n	80098ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e079      	b.n	80099a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098b8:	d108      	bne.n	80098cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80098ba:	897b      	ldrh	r3, [r7, #10]
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	f043 0301 	orr.w	r3, r3, #1
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	611a      	str	r2, [r3, #16]
 80098ca:	e05f      	b.n	800998c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80098cc:	897b      	ldrh	r3, [r7, #10]
 80098ce:	11db      	asrs	r3, r3, #7
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	f003 0306 	and.w	r3, r3, #6
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	f063 030f 	orn	r3, r3, #15
 80098dc:	b2da      	uxtb	r2, r3
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	4930      	ldr	r1, [pc, #192]	; (80099ac <I2C_MasterRequestRead+0x194>)
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 f961 	bl	8009bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e054      	b.n	80099a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80098fa:	897b      	ldrh	r3, [r7, #10]
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	4929      	ldr	r1, [pc, #164]	; (80099b0 <I2C_MasterRequestRead+0x198>)
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f000 f951 	bl	8009bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e044      	b.n	80099a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800991a:	2300      	movs	r3, #0
 800991c:	613b      	str	r3, [r7, #16]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	613b      	str	r3, [r7, #16]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	613b      	str	r3, [r7, #16]
 800992e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800993e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 f8d9 	bl	8009b04 <I2C_WaitOnFlagUntilTimeout>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00d      	beq.n	8009974 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009966:	d103      	bne.n	8009970 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800996e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e017      	b.n	80099a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009974:	897b      	ldrh	r3, [r7, #10]
 8009976:	11db      	asrs	r3, r3, #7
 8009978:	b2db      	uxtb	r3, r3
 800997a:	f003 0306 	and.w	r3, r3, #6
 800997e:	b2db      	uxtb	r3, r3
 8009980:	f063 030e 	orn	r3, r3, #14
 8009984:	b2da      	uxtb	r2, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	4907      	ldr	r1, [pc, #28]	; (80099b0 <I2C_MasterRequestRead+0x198>)
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 f90d 	bl	8009bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e000      	b.n	80099a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	00010008 	.word	0x00010008
 80099b0:	00010002 	.word	0x00010002

080099b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099bc:	2300      	movs	r3, #0
 80099be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80099ce:	4b4b      	ldr	r3, [pc, #300]	; (8009afc <I2C_DMAAbort+0x148>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	08db      	lsrs	r3, r3, #3
 80099d4:	4a4a      	ldr	r2, [pc, #296]	; (8009b00 <I2C_DMAAbort+0x14c>)
 80099d6:	fba2 2303 	umull	r2, r3, r2, r3
 80099da:	0a1a      	lsrs	r2, r3, #8
 80099dc:	4613      	mov	r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	00da      	lsls	r2, r3, #3
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d106      	bne.n	80099fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	f043 0220 	orr.w	r2, r3, #32
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80099fa:	e00a      	b.n	8009a12 <I2C_DMAAbort+0x5e>
    }
    count--;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	3b01      	subs	r3, #1
 8009a00:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a10:	d0ea      	beq.n	80099e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d003      	beq.n	8009a22 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a1e:	2200      	movs	r2, #0
 8009a20:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d003      	beq.n	8009a32 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2e:	2200      	movs	r2, #0
 8009a30:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a40:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	2200      	movs	r2, #0
 8009a46:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d003      	beq.n	8009a58 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a54:	2200      	movs	r2, #0
 8009a56:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d003      	beq.n	8009a68 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a64:	2200      	movs	r2, #0
 8009a66:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f022 0201 	bic.w	r2, r2, #1
 8009a76:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b60      	cmp	r3, #96	; 0x60
 8009a82:	d10e      	bne.n	8009aa2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2220      	movs	r2, #32
 8009a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	2200      	movs	r2, #0
 8009a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009a9a:	6978      	ldr	r0, [r7, #20]
 8009a9c:	f7fe fd39 	bl	8008512 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009aa0:	e027      	b.n	8009af2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009aa2:	7cfb      	ldrb	r3, [r7, #19]
 8009aa4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009aa8:	2b28      	cmp	r3, #40	; 0x28
 8009aaa:	d117      	bne.n	8009adc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f042 0201 	orr.w	r2, r2, #1
 8009aba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009aca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2228      	movs	r2, #40	; 0x28
 8009ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009ada:	e007      	b.n	8009aec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	2220      	movs	r2, #32
 8009ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009aec:	6978      	ldr	r0, [r7, #20]
 8009aee:	f7fe fd06 	bl	80084fe <HAL_I2C_ErrorCallback>
}
 8009af2:	bf00      	nop
 8009af4:	3718      	adds	r7, #24
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	20000004 	.word	0x20000004
 8009b00:	14f8b589 	.word	0x14f8b589

08009b04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	603b      	str	r3, [r7, #0]
 8009b10:	4613      	mov	r3, r2
 8009b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b14:	e025      	b.n	8009b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b1c:	d021      	beq.n	8009b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b1e:	f7fd fb0f 	bl	8007140 <HAL_GetTick>
 8009b22:	4602      	mov	r2, r0
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d302      	bcc.n	8009b34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d116      	bne.n	8009b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2220      	movs	r2, #32
 8009b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4e:	f043 0220 	orr.w	r2, r3, #32
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e023      	b.n	8009baa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	0c1b      	lsrs	r3, r3, #16
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d10d      	bne.n	8009b88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	43da      	mvns	r2, r3
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	4013      	ands	r3, r2
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	bf0c      	ite	eq
 8009b7e:	2301      	moveq	r3, #1
 8009b80:	2300      	movne	r3, #0
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	461a      	mov	r2, r3
 8009b86:	e00c      	b.n	8009ba2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	43da      	mvns	r2, r3
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	4013      	ands	r3, r2
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	bf0c      	ite	eq
 8009b9a:	2301      	moveq	r3, #1
 8009b9c:	2300      	movne	r3, #0
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	79fb      	ldrb	r3, [r7, #7]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d0b6      	beq.n	8009b16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ba8:	2300      	movs	r3, #0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b084      	sub	sp, #16
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	60f8      	str	r0, [r7, #12]
 8009bba:	60b9      	str	r1, [r7, #8]
 8009bbc:	607a      	str	r2, [r7, #4]
 8009bbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009bc0:	e051      	b.n	8009c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	695b      	ldr	r3, [r3, #20]
 8009bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bd0:	d123      	bne.n	8009c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009be0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009bea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c06:	f043 0204 	orr.w	r2, r3, #4
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e046      	b.n	8009ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c20:	d021      	beq.n	8009c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c22:	f7fd fa8d 	bl	8007140 <HAL_GetTick>
 8009c26:	4602      	mov	r2, r0
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d302      	bcc.n	8009c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d116      	bne.n	8009c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2220      	movs	r2, #32
 8009c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c52:	f043 0220 	orr.w	r2, r3, #32
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e020      	b.n	8009ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	0c1b      	lsrs	r3, r3, #16
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d10c      	bne.n	8009c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	43da      	mvns	r2, r3
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	bf14      	ite	ne
 8009c82:	2301      	movne	r3, #1
 8009c84:	2300      	moveq	r3, #0
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	e00b      	b.n	8009ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	43da      	mvns	r2, r3
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	4013      	ands	r3, r2
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	bf14      	ite	ne
 8009c9c:	2301      	movne	r3, #1
 8009c9e:	2300      	moveq	r3, #0
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d18d      	bne.n	8009bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009cbc:	e02d      	b.n	8009d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f000 f900 	bl	8009ec4 <I2C_IsAcknowledgeFailed>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d001      	beq.n	8009cce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e02d      	b.n	8009d2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cd4:	d021      	beq.n	8009d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cd6:	f7fd fa33 	bl	8007140 <HAL_GetTick>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d302      	bcc.n	8009cec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d116      	bne.n	8009d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2220      	movs	r2, #32
 8009cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d06:	f043 0220 	orr.w	r2, r3, #32
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e007      	b.n	8009d2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d24:	2b80      	cmp	r3, #128	; 0x80
 8009d26:	d1ca      	bne.n	8009cbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b084      	sub	sp, #16
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	60f8      	str	r0, [r7, #12]
 8009d3a:	60b9      	str	r1, [r7, #8]
 8009d3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d3e:	e02d      	b.n	8009d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f000 f8bf 	bl	8009ec4 <I2C_IsAcknowledgeFailed>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e02d      	b.n	8009dac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d56:	d021      	beq.n	8009d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d58:	f7fd f9f2 	bl	8007140 <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d302      	bcc.n	8009d6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d116      	bne.n	8009d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2220      	movs	r2, #32
 8009d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d88:	f043 0220 	orr.w	r2, r3, #32
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e007      	b.n	8009dac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	f003 0304 	and.w	r3, r3, #4
 8009da6:	2b04      	cmp	r3, #4
 8009da8:	d1ca      	bne.n	8009d40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009dc0:	4b13      	ldr	r3, [pc, #76]	; (8009e10 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	08db      	lsrs	r3, r3, #3
 8009dc6:	4a13      	ldr	r2, [pc, #76]	; (8009e14 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dcc:	0a1a      	lsrs	r2, r3, #8
 8009dce:	4613      	mov	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d107      	bne.n	8009df2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de6:	f043 0220 	orr.w	r2, r3, #32
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e008      	b.n	8009e04 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e00:	d0e9      	beq.n	8009dd6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3714      	adds	r7, #20
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	20000004 	.word	0x20000004
 8009e14:	14f8b589 	.word	0x14f8b589

08009e18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e24:	e042      	b.n	8009eac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	695b      	ldr	r3, [r3, #20]
 8009e2c:	f003 0310 	and.w	r3, r3, #16
 8009e30:	2b10      	cmp	r3, #16
 8009e32:	d119      	bne.n	8009e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f06f 0210 	mvn.w	r2, #16
 8009e3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2220      	movs	r2, #32
 8009e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e029      	b.n	8009ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e68:	f7fd f96a 	bl	8007140 <HAL_GetTick>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d302      	bcc.n	8009e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d116      	bne.n	8009eac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2220      	movs	r2, #32
 8009e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e98:	f043 0220 	orr.w	r2, r3, #32
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e007      	b.n	8009ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	695b      	ldr	r3, [r3, #20]
 8009eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb6:	2b40      	cmp	r3, #64	; 0x40
 8009eb8:	d1b5      	bne.n	8009e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eda:	d11b      	bne.n	8009f14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009ee4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2220      	movs	r2, #32
 8009ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f00:	f043 0204 	orr.w	r2, r3, #4
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e000      	b.n	8009f16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	370c      	adds	r7, #12
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009f22:	b480      	push	{r7}
 8009f24:	b083      	sub	sp, #12
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009f32:	d103      	bne.n	8009f3c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009f3a:	e007      	b.n	8009f4c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f40:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009f44:	d102      	bne.n	8009f4c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2208      	movs	r2, #8
 8009f4a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009f5e:	4b06      	ldr	r3, [pc, #24]	; (8009f78 <HAL_PWR_EnableBkUpAccess+0x20>)
 8009f60:	2201      	movs	r2, #1
 8009f62:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8009f64:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <HAL_PWR_EnableBkUpAccess+0x24>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8009f6a:	687b      	ldr	r3, [r7, #4]
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	420e0020 	.word	0x420e0020
 8009f7c:	40007000 	.word	0x40007000

08009f80 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8009f86:	4b06      	ldr	r3, [pc, #24]	; (8009fa0 <HAL_PWR_DisableBkUpAccess+0x20>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8009f8c:	4b05      	ldr	r3, [pc, #20]	; (8009fa4 <HAL_PWR_DisableBkUpAccess+0x24>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8009f92:	687b      	ldr	r3, [r7, #4]
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	420e0020 	.word	0x420e0020
 8009fa4:	40007000 	.word	0x40007000

08009fa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d101      	bne.n	8009fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e267      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f003 0301 	and.w	r3, r3, #1
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d075      	beq.n	800a0b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009fc6:	4b88      	ldr	r3, [pc, #544]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	f003 030c 	and.w	r3, r3, #12
 8009fce:	2b04      	cmp	r3, #4
 8009fd0:	d00c      	beq.n	8009fec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009fd2:	4b85      	ldr	r3, [pc, #532]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009fda:	2b08      	cmp	r3, #8
 8009fdc:	d112      	bne.n	800a004 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009fde:	4b82      	ldr	r3, [pc, #520]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fea:	d10b      	bne.n	800a004 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fec:	4b7e      	ldr	r3, [pc, #504]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d05b      	beq.n	800a0b0 <HAL_RCC_OscConfig+0x108>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d157      	bne.n	800a0b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e242      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a00c:	d106      	bne.n	800a01c <HAL_RCC_OscConfig+0x74>
 800a00e:	4b76      	ldr	r3, [pc, #472]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a75      	ldr	r2, [pc, #468]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a018:	6013      	str	r3, [r2, #0]
 800a01a:	e01d      	b.n	800a058 <HAL_RCC_OscConfig+0xb0>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a024:	d10c      	bne.n	800a040 <HAL_RCC_OscConfig+0x98>
 800a026:	4b70      	ldr	r3, [pc, #448]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a6f      	ldr	r2, [pc, #444]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a02c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a030:	6013      	str	r3, [r2, #0]
 800a032:	4b6d      	ldr	r3, [pc, #436]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a6c      	ldr	r2, [pc, #432]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a03c:	6013      	str	r3, [r2, #0]
 800a03e:	e00b      	b.n	800a058 <HAL_RCC_OscConfig+0xb0>
 800a040:	4b69      	ldr	r3, [pc, #420]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a68      	ldr	r2, [pc, #416]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a04a:	6013      	str	r3, [r2, #0]
 800a04c:	4b66      	ldr	r3, [pc, #408]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a65      	ldr	r2, [pc, #404]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d013      	beq.n	800a088 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a060:	f7fd f86e 	bl	8007140 <HAL_GetTick>
 800a064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a066:	e008      	b.n	800a07a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a068:	f7fd f86a 	bl	8007140 <HAL_GetTick>
 800a06c:	4602      	mov	r2, r0
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	2b64      	cmp	r3, #100	; 0x64
 800a074:	d901      	bls.n	800a07a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a076:	2303      	movs	r3, #3
 800a078:	e207      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a07a:	4b5b      	ldr	r3, [pc, #364]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a082:	2b00      	cmp	r3, #0
 800a084:	d0f0      	beq.n	800a068 <HAL_RCC_OscConfig+0xc0>
 800a086:	e014      	b.n	800a0b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a088:	f7fd f85a 	bl	8007140 <HAL_GetTick>
 800a08c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a08e:	e008      	b.n	800a0a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a090:	f7fd f856 	bl	8007140 <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	2b64      	cmp	r3, #100	; 0x64
 800a09c:	d901      	bls.n	800a0a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e1f3      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a0a2:	4b51      	ldr	r3, [pc, #324]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1f0      	bne.n	800a090 <HAL_RCC_OscConfig+0xe8>
 800a0ae:	e000      	b.n	800a0b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0302 	and.w	r3, r3, #2
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d063      	beq.n	800a186 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a0be:	4b4a      	ldr	r3, [pc, #296]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	f003 030c 	and.w	r3, r3, #12
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00b      	beq.n	800a0e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a0ca:	4b47      	ldr	r3, [pc, #284]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a0d2:	2b08      	cmp	r3, #8
 800a0d4:	d11c      	bne.n	800a110 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a0d6:	4b44      	ldr	r3, [pc, #272]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d116      	bne.n	800a110 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0e2:	4b41      	ldr	r3, [pc, #260]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0302 	and.w	r3, r3, #2
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d005      	beq.n	800a0fa <HAL_RCC_OscConfig+0x152>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d001      	beq.n	800a0fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e1c7      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0fa:	4b3b      	ldr	r3, [pc, #236]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	00db      	lsls	r3, r3, #3
 800a108:	4937      	ldr	r1, [pc, #220]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a10a:	4313      	orrs	r3, r2
 800a10c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a10e:	e03a      	b.n	800a186 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d020      	beq.n	800a15a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a118:	4b34      	ldr	r3, [pc, #208]	; (800a1ec <HAL_RCC_OscConfig+0x244>)
 800a11a:	2201      	movs	r2, #1
 800a11c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a11e:	f7fd f80f 	bl	8007140 <HAL_GetTick>
 800a122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a124:	e008      	b.n	800a138 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a126:	f7fd f80b 	bl	8007140 <HAL_GetTick>
 800a12a:	4602      	mov	r2, r0
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	1ad3      	subs	r3, r2, r3
 800a130:	2b02      	cmp	r3, #2
 800a132:	d901      	bls.n	800a138 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a134:	2303      	movs	r3, #3
 800a136:	e1a8      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a138:	4b2b      	ldr	r3, [pc, #172]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0302 	and.w	r3, r3, #2
 800a140:	2b00      	cmp	r3, #0
 800a142:	d0f0      	beq.n	800a126 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a144:	4b28      	ldr	r3, [pc, #160]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	00db      	lsls	r3, r3, #3
 800a152:	4925      	ldr	r1, [pc, #148]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a154:	4313      	orrs	r3, r2
 800a156:	600b      	str	r3, [r1, #0]
 800a158:	e015      	b.n	800a186 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a15a:	4b24      	ldr	r3, [pc, #144]	; (800a1ec <HAL_RCC_OscConfig+0x244>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a160:	f7fc ffee 	bl	8007140 <HAL_GetTick>
 800a164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a166:	e008      	b.n	800a17a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a168:	f7fc ffea 	bl	8007140 <HAL_GetTick>
 800a16c:	4602      	mov	r2, r0
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	2b02      	cmp	r3, #2
 800a174:	d901      	bls.n	800a17a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	e187      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a17a:	4b1b      	ldr	r3, [pc, #108]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 0302 	and.w	r3, r3, #2
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1f0      	bne.n	800a168 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 0308 	and.w	r3, r3, #8
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d036      	beq.n	800a200 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	695b      	ldr	r3, [r3, #20]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d016      	beq.n	800a1c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a19a:	4b15      	ldr	r3, [pc, #84]	; (800a1f0 <HAL_RCC_OscConfig+0x248>)
 800a19c:	2201      	movs	r2, #1
 800a19e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1a0:	f7fc ffce 	bl	8007140 <HAL_GetTick>
 800a1a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a1a6:	e008      	b.n	800a1ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a1a8:	f7fc ffca 	bl	8007140 <HAL_GetTick>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d901      	bls.n	800a1ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a1b6:	2303      	movs	r3, #3
 800a1b8:	e167      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a1ba:	4b0b      	ldr	r3, [pc, #44]	; (800a1e8 <HAL_RCC_OscConfig+0x240>)
 800a1bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1be:	f003 0302 	and.w	r3, r3, #2
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0f0      	beq.n	800a1a8 <HAL_RCC_OscConfig+0x200>
 800a1c6:	e01b      	b.n	800a200 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a1c8:	4b09      	ldr	r3, [pc, #36]	; (800a1f0 <HAL_RCC_OscConfig+0x248>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a1ce:	f7fc ffb7 	bl	8007140 <HAL_GetTick>
 800a1d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1d4:	e00e      	b.n	800a1f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a1d6:	f7fc ffb3 	bl	8007140 <HAL_GetTick>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d907      	bls.n	800a1f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e150      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
 800a1e8:	40023800 	.word	0x40023800
 800a1ec:	42470000 	.word	0x42470000
 800a1f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1f4:	4b88      	ldr	r3, [pc, #544]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a1f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1f8:	f003 0302 	and.w	r3, r3, #2
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1ea      	bne.n	800a1d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0304 	and.w	r3, r3, #4
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f000 8097 	beq.w	800a33c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a20e:	2300      	movs	r3, #0
 800a210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a212:	4b81      	ldr	r3, [pc, #516]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10f      	bne.n	800a23e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a21e:	2300      	movs	r3, #0
 800a220:	60bb      	str	r3, [r7, #8]
 800a222:	4b7d      	ldr	r3, [pc, #500]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a226:	4a7c      	ldr	r2, [pc, #496]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a22c:	6413      	str	r3, [r2, #64]	; 0x40
 800a22e:	4b7a      	ldr	r3, [pc, #488]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a236:	60bb      	str	r3, [r7, #8]
 800a238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a23a:	2301      	movs	r3, #1
 800a23c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a23e:	4b77      	ldr	r3, [pc, #476]	; (800a41c <HAL_RCC_OscConfig+0x474>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a246:	2b00      	cmp	r3, #0
 800a248:	d118      	bne.n	800a27c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a24a:	4b74      	ldr	r3, [pc, #464]	; (800a41c <HAL_RCC_OscConfig+0x474>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a73      	ldr	r2, [pc, #460]	; (800a41c <HAL_RCC_OscConfig+0x474>)
 800a250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a256:	f7fc ff73 	bl	8007140 <HAL_GetTick>
 800a25a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a25c:	e008      	b.n	800a270 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a25e:	f7fc ff6f 	bl	8007140 <HAL_GetTick>
 800a262:	4602      	mov	r2, r0
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d901      	bls.n	800a270 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e10c      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a270:	4b6a      	ldr	r3, [pc, #424]	; (800a41c <HAL_RCC_OscConfig+0x474>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d0f0      	beq.n	800a25e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	2b01      	cmp	r3, #1
 800a282:	d106      	bne.n	800a292 <HAL_RCC_OscConfig+0x2ea>
 800a284:	4b64      	ldr	r3, [pc, #400]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a288:	4a63      	ldr	r2, [pc, #396]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a28a:	f043 0301 	orr.w	r3, r3, #1
 800a28e:	6713      	str	r3, [r2, #112]	; 0x70
 800a290:	e01c      	b.n	800a2cc <HAL_RCC_OscConfig+0x324>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	2b05      	cmp	r3, #5
 800a298:	d10c      	bne.n	800a2b4 <HAL_RCC_OscConfig+0x30c>
 800a29a:	4b5f      	ldr	r3, [pc, #380]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a29e:	4a5e      	ldr	r2, [pc, #376]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a2a0:	f043 0304 	orr.w	r3, r3, #4
 800a2a4:	6713      	str	r3, [r2, #112]	; 0x70
 800a2a6:	4b5c      	ldr	r3, [pc, #368]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a2a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2aa:	4a5b      	ldr	r2, [pc, #364]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a2ac:	f043 0301 	orr.w	r3, r3, #1
 800a2b0:	6713      	str	r3, [r2, #112]	; 0x70
 800a2b2:	e00b      	b.n	800a2cc <HAL_RCC_OscConfig+0x324>
 800a2b4:	4b58      	ldr	r3, [pc, #352]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a2b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2b8:	4a57      	ldr	r2, [pc, #348]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a2ba:	f023 0301 	bic.w	r3, r3, #1
 800a2be:	6713      	str	r3, [r2, #112]	; 0x70
 800a2c0:	4b55      	ldr	r3, [pc, #340]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a2c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c4:	4a54      	ldr	r2, [pc, #336]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a2c6:	f023 0304 	bic.w	r3, r3, #4
 800a2ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d015      	beq.n	800a300 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2d4:	f7fc ff34 	bl	8007140 <HAL_GetTick>
 800a2d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2da:	e00a      	b.n	800a2f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2dc:	f7fc ff30 	bl	8007140 <HAL_GetTick>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d901      	bls.n	800a2f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	e0cb      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2f2:	4b49      	ldr	r3, [pc, #292]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2f6:	f003 0302 	and.w	r3, r3, #2
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d0ee      	beq.n	800a2dc <HAL_RCC_OscConfig+0x334>
 800a2fe:	e014      	b.n	800a32a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a300:	f7fc ff1e 	bl	8007140 <HAL_GetTick>
 800a304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a306:	e00a      	b.n	800a31e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a308:	f7fc ff1a 	bl	8007140 <HAL_GetTick>
 800a30c:	4602      	mov	r2, r0
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	f241 3288 	movw	r2, #5000	; 0x1388
 800a316:	4293      	cmp	r3, r2
 800a318:	d901      	bls.n	800a31e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a31a:	2303      	movs	r3, #3
 800a31c:	e0b5      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a31e:	4b3e      	ldr	r3, [pc, #248]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a322:	f003 0302 	and.w	r3, r3, #2
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1ee      	bne.n	800a308 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a32a:	7dfb      	ldrb	r3, [r7, #23]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d105      	bne.n	800a33c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a330:	4b39      	ldr	r3, [pc, #228]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a334:	4a38      	ldr	r2, [pc, #224]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a33a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 80a1 	beq.w	800a488 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a346:	4b34      	ldr	r3, [pc, #208]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	f003 030c 	and.w	r3, r3, #12
 800a34e:	2b08      	cmp	r3, #8
 800a350:	d05c      	beq.n	800a40c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	2b02      	cmp	r3, #2
 800a358:	d141      	bne.n	800a3de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a35a:	4b31      	ldr	r3, [pc, #196]	; (800a420 <HAL_RCC_OscConfig+0x478>)
 800a35c:	2200      	movs	r2, #0
 800a35e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a360:	f7fc feee 	bl	8007140 <HAL_GetTick>
 800a364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a366:	e008      	b.n	800a37a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a368:	f7fc feea 	bl	8007140 <HAL_GetTick>
 800a36c:	4602      	mov	r2, r0
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	2b02      	cmp	r3, #2
 800a374:	d901      	bls.n	800a37a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	e087      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a37a:	4b27      	ldr	r3, [pc, #156]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1f0      	bne.n	800a368 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	69da      	ldr	r2, [r3, #28]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	431a      	orrs	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a394:	019b      	lsls	r3, r3, #6
 800a396:	431a      	orrs	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a39c:	085b      	lsrs	r3, r3, #1
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	041b      	lsls	r3, r3, #16
 800a3a2:	431a      	orrs	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a8:	061b      	lsls	r3, r3, #24
 800a3aa:	491b      	ldr	r1, [pc, #108]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a3b0:	4b1b      	ldr	r3, [pc, #108]	; (800a420 <HAL_RCC_OscConfig+0x478>)
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3b6:	f7fc fec3 	bl	8007140 <HAL_GetTick>
 800a3ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3bc:	e008      	b.n	800a3d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a3be:	f7fc febf 	bl	8007140 <HAL_GetTick>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d901      	bls.n	800a3d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	e05c      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3d0:	4b11      	ldr	r3, [pc, #68]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d0f0      	beq.n	800a3be <HAL_RCC_OscConfig+0x416>
 800a3dc:	e054      	b.n	800a488 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3de:	4b10      	ldr	r3, [pc, #64]	; (800a420 <HAL_RCC_OscConfig+0x478>)
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3e4:	f7fc feac 	bl	8007140 <HAL_GetTick>
 800a3e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3ea:	e008      	b.n	800a3fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a3ec:	f7fc fea8 	bl	8007140 <HAL_GetTick>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d901      	bls.n	800a3fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e045      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3fe:	4b06      	ldr	r3, [pc, #24]	; (800a418 <HAL_RCC_OscConfig+0x470>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1f0      	bne.n	800a3ec <HAL_RCC_OscConfig+0x444>
 800a40a:	e03d      	b.n	800a488 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d107      	bne.n	800a424 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	e038      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
 800a418:	40023800 	.word	0x40023800
 800a41c:	40007000 	.word	0x40007000
 800a420:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a424:	4b1b      	ldr	r3, [pc, #108]	; (800a494 <HAL_RCC_OscConfig+0x4ec>)
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d028      	beq.n	800a484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d121      	bne.n	800a484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d11a      	bne.n	800a484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a454:	4013      	ands	r3, r2
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a45a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d111      	bne.n	800a484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46a:	085b      	lsrs	r3, r3, #1
 800a46c:	3b01      	subs	r3, #1
 800a46e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a470:	429a      	cmp	r2, r3
 800a472:	d107      	bne.n	800a484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a480:	429a      	cmp	r2, r3
 800a482:	d001      	beq.n	800a488 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e000      	b.n	800a48a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3718      	adds	r7, #24
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	40023800 	.word	0x40023800

0800a498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e0cc      	b.n	800a646 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a4ac:	4b68      	ldr	r3, [pc, #416]	; (800a650 <HAL_RCC_ClockConfig+0x1b8>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 0307 	and.w	r3, r3, #7
 800a4b4:	683a      	ldr	r2, [r7, #0]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d90c      	bls.n	800a4d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4ba:	4b65      	ldr	r3, [pc, #404]	; (800a650 <HAL_RCC_ClockConfig+0x1b8>)
 800a4bc:	683a      	ldr	r2, [r7, #0]
 800a4be:	b2d2      	uxtb	r2, r2
 800a4c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4c2:	4b63      	ldr	r3, [pc, #396]	; (800a650 <HAL_RCC_ClockConfig+0x1b8>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f003 0307 	and.w	r3, r3, #7
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d001      	beq.n	800a4d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e0b8      	b.n	800a646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 0302 	and.w	r3, r3, #2
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d020      	beq.n	800a522 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 0304 	and.w	r3, r3, #4
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d005      	beq.n	800a4f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a4ec:	4b59      	ldr	r3, [pc, #356]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	4a58      	ldr	r2, [pc, #352]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a4f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a4f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0308 	and.w	r3, r3, #8
 800a500:	2b00      	cmp	r3, #0
 800a502:	d005      	beq.n	800a510 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a504:	4b53      	ldr	r3, [pc, #332]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	4a52      	ldr	r2, [pc, #328]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a50a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a50e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a510:	4b50      	ldr	r3, [pc, #320]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	494d      	ldr	r1, [pc, #308]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d044      	beq.n	800a5b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	2b01      	cmp	r3, #1
 800a534:	d107      	bne.n	800a546 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a536:	4b47      	ldr	r3, [pc, #284]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d119      	bne.n	800a576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e07f      	b.n	800a646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d003      	beq.n	800a556 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a552:	2b03      	cmp	r3, #3
 800a554:	d107      	bne.n	800a566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a556:	4b3f      	ldr	r3, [pc, #252]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d109      	bne.n	800a576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	e06f      	b.n	800a646 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a566:	4b3b      	ldr	r3, [pc, #236]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 0302 	and.w	r3, r3, #2
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e067      	b.n	800a646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a576:	4b37      	ldr	r3, [pc, #220]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	f023 0203 	bic.w	r2, r3, #3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	4934      	ldr	r1, [pc, #208]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a584:	4313      	orrs	r3, r2
 800a586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a588:	f7fc fdda 	bl	8007140 <HAL_GetTick>
 800a58c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a58e:	e00a      	b.n	800a5a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a590:	f7fc fdd6 	bl	8007140 <HAL_GetTick>
 800a594:	4602      	mov	r2, r0
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d901      	bls.n	800a5a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e04f      	b.n	800a646 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5a6:	4b2b      	ldr	r3, [pc, #172]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	f003 020c 	and.w	r2, r3, #12
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d1eb      	bne.n	800a590 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a5b8:	4b25      	ldr	r3, [pc, #148]	; (800a650 <HAL_RCC_ClockConfig+0x1b8>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 0307 	and.w	r3, r3, #7
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d20c      	bcs.n	800a5e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5c6:	4b22      	ldr	r3, [pc, #136]	; (800a650 <HAL_RCC_ClockConfig+0x1b8>)
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	b2d2      	uxtb	r2, r2
 800a5cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5ce:	4b20      	ldr	r3, [pc, #128]	; (800a650 <HAL_RCC_ClockConfig+0x1b8>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 0307 	and.w	r3, r3, #7
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d001      	beq.n	800a5e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e032      	b.n	800a646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0304 	and.w	r3, r3, #4
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d008      	beq.n	800a5fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a5ec:	4b19      	ldr	r3, [pc, #100]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	4916      	ldr	r1, [pc, #88]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 0308 	and.w	r3, r3, #8
 800a606:	2b00      	cmp	r3, #0
 800a608:	d009      	beq.n	800a61e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a60a:	4b12      	ldr	r3, [pc, #72]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	00db      	lsls	r3, r3, #3
 800a618:	490e      	ldr	r1, [pc, #56]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a61a:	4313      	orrs	r3, r2
 800a61c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a61e:	f000 f821 	bl	800a664 <HAL_RCC_GetSysClockFreq>
 800a622:	4602      	mov	r2, r0
 800a624:	4b0b      	ldr	r3, [pc, #44]	; (800a654 <HAL_RCC_ClockConfig+0x1bc>)
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	091b      	lsrs	r3, r3, #4
 800a62a:	f003 030f 	and.w	r3, r3, #15
 800a62e:	490a      	ldr	r1, [pc, #40]	; (800a658 <HAL_RCC_ClockConfig+0x1c0>)
 800a630:	5ccb      	ldrb	r3, [r1, r3]
 800a632:	fa22 f303 	lsr.w	r3, r2, r3
 800a636:	4a09      	ldr	r2, [pc, #36]	; (800a65c <HAL_RCC_ClockConfig+0x1c4>)
 800a638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a63a:	4b09      	ldr	r3, [pc, #36]	; (800a660 <HAL_RCC_ClockConfig+0x1c8>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fc fd3a 	bl	80070b8 <HAL_InitTick>

  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	40023c00 	.word	0x40023c00
 800a654:	40023800 	.word	0x40023800
 800a658:	08015470 	.word	0x08015470
 800a65c:	20000004 	.word	0x20000004
 800a660:	20000008 	.word	0x20000008

0800a664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a668:	b090      	sub	sp, #64	; 0x40
 800a66a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a66c:	2300      	movs	r3, #0
 800a66e:	637b      	str	r3, [r7, #52]	; 0x34
 800a670:	2300      	movs	r3, #0
 800a672:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a674:	2300      	movs	r3, #0
 800a676:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800a678:	2300      	movs	r3, #0
 800a67a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a67c:	4b59      	ldr	r3, [pc, #356]	; (800a7e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	f003 030c 	and.w	r3, r3, #12
 800a684:	2b08      	cmp	r3, #8
 800a686:	d00d      	beq.n	800a6a4 <HAL_RCC_GetSysClockFreq+0x40>
 800a688:	2b08      	cmp	r3, #8
 800a68a:	f200 80a1 	bhi.w	800a7d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <HAL_RCC_GetSysClockFreq+0x34>
 800a692:	2b04      	cmp	r3, #4
 800a694:	d003      	beq.n	800a69e <HAL_RCC_GetSysClockFreq+0x3a>
 800a696:	e09b      	b.n	800a7d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a698:	4b53      	ldr	r3, [pc, #332]	; (800a7e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800a69a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800a69c:	e09b      	b.n	800a7d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a69e:	4b53      	ldr	r3, [pc, #332]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x188>)
 800a6a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a6a2:	e098      	b.n	800a7d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a6a4:	4b4f      	ldr	r3, [pc, #316]	; (800a7e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a6ae:	4b4d      	ldr	r3, [pc, #308]	; (800a7e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d028      	beq.n	800a70c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a6ba:	4b4a      	ldr	r3, [pc, #296]	; (800a7e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	099b      	lsrs	r3, r3, #6
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	623b      	str	r3, [r7, #32]
 800a6c4:	627a      	str	r2, [r7, #36]	; 0x24
 800a6c6:	6a3b      	ldr	r3, [r7, #32]
 800a6c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	4b47      	ldr	r3, [pc, #284]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x188>)
 800a6d0:	fb03 f201 	mul.w	r2, r3, r1
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	fb00 f303 	mul.w	r3, r0, r3
 800a6da:	4413      	add	r3, r2
 800a6dc:	4a43      	ldr	r2, [pc, #268]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x188>)
 800a6de:	fba0 1202 	umull	r1, r2, r0, r2
 800a6e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a6e4:	460a      	mov	r2, r1
 800a6e6:	62ba      	str	r2, [r7, #40]	; 0x28
 800a6e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ea:	4413      	add	r3, r2
 800a6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	61bb      	str	r3, [r7, #24]
 800a6f4:	61fa      	str	r2, [r7, #28]
 800a6f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a6fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a6fe:	f7f6 fac3 	bl	8000c88 <__aeabi_uldivmod>
 800a702:	4602      	mov	r2, r0
 800a704:	460b      	mov	r3, r1
 800a706:	4613      	mov	r3, r2
 800a708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a70a:	e053      	b.n	800a7b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a70c:	4b35      	ldr	r3, [pc, #212]	; (800a7e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	099b      	lsrs	r3, r3, #6
 800a712:	2200      	movs	r2, #0
 800a714:	613b      	str	r3, [r7, #16]
 800a716:	617a      	str	r2, [r7, #20]
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a71e:	f04f 0b00 	mov.w	fp, #0
 800a722:	4652      	mov	r2, sl
 800a724:	465b      	mov	r3, fp
 800a726:	f04f 0000 	mov.w	r0, #0
 800a72a:	f04f 0100 	mov.w	r1, #0
 800a72e:	0159      	lsls	r1, r3, #5
 800a730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a734:	0150      	lsls	r0, r2, #5
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	ebb2 080a 	subs.w	r8, r2, sl
 800a73e:	eb63 090b 	sbc.w	r9, r3, fp
 800a742:	f04f 0200 	mov.w	r2, #0
 800a746:	f04f 0300 	mov.w	r3, #0
 800a74a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a74e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a752:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a756:	ebb2 0408 	subs.w	r4, r2, r8
 800a75a:	eb63 0509 	sbc.w	r5, r3, r9
 800a75e:	f04f 0200 	mov.w	r2, #0
 800a762:	f04f 0300 	mov.w	r3, #0
 800a766:	00eb      	lsls	r3, r5, #3
 800a768:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a76c:	00e2      	lsls	r2, r4, #3
 800a76e:	4614      	mov	r4, r2
 800a770:	461d      	mov	r5, r3
 800a772:	eb14 030a 	adds.w	r3, r4, sl
 800a776:	603b      	str	r3, [r7, #0]
 800a778:	eb45 030b 	adc.w	r3, r5, fp
 800a77c:	607b      	str	r3, [r7, #4]
 800a77e:	f04f 0200 	mov.w	r2, #0
 800a782:	f04f 0300 	mov.w	r3, #0
 800a786:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a78a:	4629      	mov	r1, r5
 800a78c:	028b      	lsls	r3, r1, #10
 800a78e:	4621      	mov	r1, r4
 800a790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a794:	4621      	mov	r1, r4
 800a796:	028a      	lsls	r2, r1, #10
 800a798:	4610      	mov	r0, r2
 800a79a:	4619      	mov	r1, r3
 800a79c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a79e:	2200      	movs	r2, #0
 800a7a0:	60bb      	str	r3, [r7, #8]
 800a7a2:	60fa      	str	r2, [r7, #12]
 800a7a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a7a8:	f7f6 fa6e 	bl	8000c88 <__aeabi_uldivmod>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a7b4:	4b0b      	ldr	r3, [pc, #44]	; (800a7e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	0c1b      	lsrs	r3, r3, #16
 800a7ba:	f003 0303 	and.w	r3, r3, #3
 800a7be:	3301      	adds	r3, #1
 800a7c0:	005b      	lsls	r3, r3, #1
 800a7c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800a7c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a7ce:	e002      	b.n	800a7d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a7d0:	4b05      	ldr	r3, [pc, #20]	; (800a7e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800a7d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a7d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3740      	adds	r7, #64	; 0x40
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7e2:	bf00      	nop
 800a7e4:	40023800 	.word	0x40023800
 800a7e8:	00f42400 	.word	0x00f42400
 800a7ec:	017d7840 	.word	0x017d7840

0800a7f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a7f4:	4b03      	ldr	r3, [pc, #12]	; (800a804 <HAL_RCC_GetHCLKFreq+0x14>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	20000004 	.word	0x20000004

0800a808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a80c:	f7ff fff0 	bl	800a7f0 <HAL_RCC_GetHCLKFreq>
 800a810:	4602      	mov	r2, r0
 800a812:	4b05      	ldr	r3, [pc, #20]	; (800a828 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	0a9b      	lsrs	r3, r3, #10
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	4903      	ldr	r1, [pc, #12]	; (800a82c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a81e:	5ccb      	ldrb	r3, [r1, r3]
 800a820:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a824:	4618      	mov	r0, r3
 800a826:	bd80      	pop	{r7, pc}
 800a828:	40023800 	.word	0x40023800
 800a82c:	08015480 	.word	0x08015480

0800a830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a834:	f7ff ffdc 	bl	800a7f0 <HAL_RCC_GetHCLKFreq>
 800a838:	4602      	mov	r2, r0
 800a83a:	4b05      	ldr	r3, [pc, #20]	; (800a850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	0b5b      	lsrs	r3, r3, #13
 800a840:	f003 0307 	and.w	r3, r3, #7
 800a844:	4903      	ldr	r1, [pc, #12]	; (800a854 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a846:	5ccb      	ldrb	r3, [r1, r3]
 800a848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	40023800 	.word	0x40023800
 800a854:	08015480 	.word	0x08015480

0800a858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d101      	bne.n	800a86a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e041      	b.n	800a8ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b00      	cmp	r3, #0
 800a874:	d106      	bne.n	800a884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7fc f8e2 	bl	8006a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2202      	movs	r2, #2
 800a888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	3304      	adds	r3, #4
 800a894:	4619      	mov	r1, r3
 800a896:	4610      	mov	r0, r2
 800a898:	f000 ff94 	bl	800b7c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b082      	sub	sp, #8
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d101      	bne.n	800a908 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	e041      	b.n	800a98c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	2b00      	cmp	r3, #0
 800a912:	d106      	bne.n	800a922 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f839 	bl	800a994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2202      	movs	r2, #2
 800a926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	3304      	adds	r3, #4
 800a932:	4619      	mov	r1, r3
 800a934:	4610      	mov	r0, r2
 800a936:	f000 ff45 	bl	800b7c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2201      	movs	r2, #1
 800a93e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2201      	movs	r2, #1
 800a96e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2201      	movs	r2, #1
 800a976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d109      	bne.n	800a9cc <HAL_TIM_PWM_Start+0x24>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	bf14      	ite	ne
 800a9c4:	2301      	movne	r3, #1
 800a9c6:	2300      	moveq	r3, #0
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	e022      	b.n	800aa12 <HAL_TIM_PWM_Start+0x6a>
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	2b04      	cmp	r3, #4
 800a9d0:	d109      	bne.n	800a9e6 <HAL_TIM_PWM_Start+0x3e>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	bf14      	ite	ne
 800a9de:	2301      	movne	r3, #1
 800a9e0:	2300      	moveq	r3, #0
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	e015      	b.n	800aa12 <HAL_TIM_PWM_Start+0x6a>
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	2b08      	cmp	r3, #8
 800a9ea:	d109      	bne.n	800aa00 <HAL_TIM_PWM_Start+0x58>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	bf14      	ite	ne
 800a9f8:	2301      	movne	r3, #1
 800a9fa:	2300      	moveq	r3, #0
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	e008      	b.n	800aa12 <HAL_TIM_PWM_Start+0x6a>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	bf14      	ite	ne
 800aa0c:	2301      	movne	r3, #1
 800aa0e:	2300      	moveq	r3, #0
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e07c      	b.n	800ab14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d104      	bne.n	800aa2a <HAL_TIM_PWM_Start+0x82>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2202      	movs	r2, #2
 800aa24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa28:	e013      	b.n	800aa52 <HAL_TIM_PWM_Start+0xaa>
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	d104      	bne.n	800aa3a <HAL_TIM_PWM_Start+0x92>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2202      	movs	r2, #2
 800aa34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa38:	e00b      	b.n	800aa52 <HAL_TIM_PWM_Start+0xaa>
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	2b08      	cmp	r3, #8
 800aa3e:	d104      	bne.n	800aa4a <HAL_TIM_PWM_Start+0xa2>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2202      	movs	r2, #2
 800aa44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa48:	e003      	b.n	800aa52 <HAL_TIM_PWM_Start+0xaa>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2202      	movs	r2, #2
 800aa4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2201      	movs	r2, #1
 800aa58:	6839      	ldr	r1, [r7, #0]
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f001 fac6 	bl	800bfec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a2d      	ldr	r2, [pc, #180]	; (800ab1c <HAL_TIM_PWM_Start+0x174>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d004      	beq.n	800aa74 <HAL_TIM_PWM_Start+0xcc>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a2c      	ldr	r2, [pc, #176]	; (800ab20 <HAL_TIM_PWM_Start+0x178>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d101      	bne.n	800aa78 <HAL_TIM_PWM_Start+0xd0>
 800aa74:	2301      	movs	r3, #1
 800aa76:	e000      	b.n	800aa7a <HAL_TIM_PWM_Start+0xd2>
 800aa78:	2300      	movs	r3, #0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d007      	beq.n	800aa8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a22      	ldr	r2, [pc, #136]	; (800ab1c <HAL_TIM_PWM_Start+0x174>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d022      	beq.n	800aade <HAL_TIM_PWM_Start+0x136>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaa0:	d01d      	beq.n	800aade <HAL_TIM_PWM_Start+0x136>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a1f      	ldr	r2, [pc, #124]	; (800ab24 <HAL_TIM_PWM_Start+0x17c>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d018      	beq.n	800aade <HAL_TIM_PWM_Start+0x136>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a1d      	ldr	r2, [pc, #116]	; (800ab28 <HAL_TIM_PWM_Start+0x180>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d013      	beq.n	800aade <HAL_TIM_PWM_Start+0x136>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a1c      	ldr	r2, [pc, #112]	; (800ab2c <HAL_TIM_PWM_Start+0x184>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d00e      	beq.n	800aade <HAL_TIM_PWM_Start+0x136>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a16      	ldr	r2, [pc, #88]	; (800ab20 <HAL_TIM_PWM_Start+0x178>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d009      	beq.n	800aade <HAL_TIM_PWM_Start+0x136>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a18      	ldr	r2, [pc, #96]	; (800ab30 <HAL_TIM_PWM_Start+0x188>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d004      	beq.n	800aade <HAL_TIM_PWM_Start+0x136>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a16      	ldr	r2, [pc, #88]	; (800ab34 <HAL_TIM_PWM_Start+0x18c>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d111      	bne.n	800ab02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	f003 0307 	and.w	r3, r3, #7
 800aae8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2b06      	cmp	r3, #6
 800aaee:	d010      	beq.n	800ab12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f042 0201 	orr.w	r2, r2, #1
 800aafe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab00:	e007      	b.n	800ab12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f042 0201 	orr.w	r2, r2, #1
 800ab10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	40010000 	.word	0x40010000
 800ab20:	40010400 	.word	0x40010400
 800ab24:	40000400 	.word	0x40000400
 800ab28:	40000800 	.word	0x40000800
 800ab2c:	40000c00 	.word	0x40000c00
 800ab30:	40014000 	.word	0x40014000
 800ab34:	40001800 	.word	0x40001800

0800ab38 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d101      	bne.n	800ab4a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	e041      	b.n	800abce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d106      	bne.n	800ab64 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7fc f86a 	bl	8006c38 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2202      	movs	r2, #2
 800ab68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	3304      	adds	r3, #4
 800ab74:	4619      	mov	r1, r3
 800ab76:	4610      	mov	r0, r2
 800ab78:	f000 fe24 	bl	800b7c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
	...

0800abd8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d104      	bne.n	800abf6 <HAL_TIM_IC_Start_IT+0x1e>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	e013      	b.n	800ac1e <HAL_TIM_IC_Start_IT+0x46>
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b04      	cmp	r3, #4
 800abfa:	d104      	bne.n	800ac06 <HAL_TIM_IC_Start_IT+0x2e>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	e00b      	b.n	800ac1e <HAL_TIM_IC_Start_IT+0x46>
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	2b08      	cmp	r3, #8
 800ac0a:	d104      	bne.n	800ac16 <HAL_TIM_IC_Start_IT+0x3e>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	e003      	b.n	800ac1e <HAL_TIM_IC_Start_IT+0x46>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d104      	bne.n	800ac30 <HAL_TIM_IC_Start_IT+0x58>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	e013      	b.n	800ac58 <HAL_TIM_IC_Start_IT+0x80>
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	2b04      	cmp	r3, #4
 800ac34:	d104      	bne.n	800ac40 <HAL_TIM_IC_Start_IT+0x68>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	e00b      	b.n	800ac58 <HAL_TIM_IC_Start_IT+0x80>
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	2b08      	cmp	r3, #8
 800ac44:	d104      	bne.n	800ac50 <HAL_TIM_IC_Start_IT+0x78>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	e003      	b.n	800ac58 <HAL_TIM_IC_Start_IT+0x80>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800ac5a:	7bbb      	ldrb	r3, [r7, #14]
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d102      	bne.n	800ac66 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800ac60:	7b7b      	ldrb	r3, [r7, #13]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d001      	beq.n	800ac6a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	e0cc      	b.n	800ae04 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d104      	bne.n	800ac7a <HAL_TIM_IC_Start_IT+0xa2>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac78:	e013      	b.n	800aca2 <HAL_TIM_IC_Start_IT+0xca>
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	2b04      	cmp	r3, #4
 800ac7e:	d104      	bne.n	800ac8a <HAL_TIM_IC_Start_IT+0xb2>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2202      	movs	r2, #2
 800ac84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac88:	e00b      	b.n	800aca2 <HAL_TIM_IC_Start_IT+0xca>
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	2b08      	cmp	r3, #8
 800ac8e:	d104      	bne.n	800ac9a <HAL_TIM_IC_Start_IT+0xc2>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2202      	movs	r2, #2
 800ac94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac98:	e003      	b.n	800aca2 <HAL_TIM_IC_Start_IT+0xca>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d104      	bne.n	800acb2 <HAL_TIM_IC_Start_IT+0xda>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2202      	movs	r2, #2
 800acac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acb0:	e013      	b.n	800acda <HAL_TIM_IC_Start_IT+0x102>
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	2b04      	cmp	r3, #4
 800acb6:	d104      	bne.n	800acc2 <HAL_TIM_IC_Start_IT+0xea>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2202      	movs	r2, #2
 800acbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800acc0:	e00b      	b.n	800acda <HAL_TIM_IC_Start_IT+0x102>
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	2b08      	cmp	r3, #8
 800acc6:	d104      	bne.n	800acd2 <HAL_TIM_IC_Start_IT+0xfa>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2202      	movs	r2, #2
 800accc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acd0:	e003      	b.n	800acda <HAL_TIM_IC_Start_IT+0x102>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2202      	movs	r2, #2
 800acd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2b0c      	cmp	r3, #12
 800acde:	d841      	bhi.n	800ad64 <HAL_TIM_IC_Start_IT+0x18c>
 800ace0:	a201      	add	r2, pc, #4	; (adr r2, 800ace8 <HAL_TIM_IC_Start_IT+0x110>)
 800ace2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace6:	bf00      	nop
 800ace8:	0800ad1d 	.word	0x0800ad1d
 800acec:	0800ad65 	.word	0x0800ad65
 800acf0:	0800ad65 	.word	0x0800ad65
 800acf4:	0800ad65 	.word	0x0800ad65
 800acf8:	0800ad2f 	.word	0x0800ad2f
 800acfc:	0800ad65 	.word	0x0800ad65
 800ad00:	0800ad65 	.word	0x0800ad65
 800ad04:	0800ad65 	.word	0x0800ad65
 800ad08:	0800ad41 	.word	0x0800ad41
 800ad0c:	0800ad65 	.word	0x0800ad65
 800ad10:	0800ad65 	.word	0x0800ad65
 800ad14:	0800ad65 	.word	0x0800ad65
 800ad18:	0800ad53 	.word	0x0800ad53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68da      	ldr	r2, [r3, #12]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f042 0202 	orr.w	r2, r2, #2
 800ad2a:	60da      	str	r2, [r3, #12]
      break;
 800ad2c:	e01d      	b.n	800ad6a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68da      	ldr	r2, [r3, #12]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f042 0204 	orr.w	r2, r2, #4
 800ad3c:	60da      	str	r2, [r3, #12]
      break;
 800ad3e:	e014      	b.n	800ad6a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68da      	ldr	r2, [r3, #12]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f042 0208 	orr.w	r2, r2, #8
 800ad4e:	60da      	str	r2, [r3, #12]
      break;
 800ad50:	e00b      	b.n	800ad6a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68da      	ldr	r2, [r3, #12]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f042 0210 	orr.w	r2, r2, #16
 800ad60:	60da      	str	r2, [r3, #12]
      break;
 800ad62:	e002      	b.n	800ad6a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	73fb      	strb	r3, [r7, #15]
      break;
 800ad68:	bf00      	nop
  }

  if (status == HAL_OK)
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d148      	bne.n	800ae02 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2201      	movs	r2, #1
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f001 f937 	bl	800bfec <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a22      	ldr	r2, [pc, #136]	; (800ae0c <HAL_TIM_IC_Start_IT+0x234>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d022      	beq.n	800adce <HAL_TIM_IC_Start_IT+0x1f6>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad90:	d01d      	beq.n	800adce <HAL_TIM_IC_Start_IT+0x1f6>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a1e      	ldr	r2, [pc, #120]	; (800ae10 <HAL_TIM_IC_Start_IT+0x238>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d018      	beq.n	800adce <HAL_TIM_IC_Start_IT+0x1f6>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a1c      	ldr	r2, [pc, #112]	; (800ae14 <HAL_TIM_IC_Start_IT+0x23c>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d013      	beq.n	800adce <HAL_TIM_IC_Start_IT+0x1f6>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a1b      	ldr	r2, [pc, #108]	; (800ae18 <HAL_TIM_IC_Start_IT+0x240>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d00e      	beq.n	800adce <HAL_TIM_IC_Start_IT+0x1f6>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a19      	ldr	r2, [pc, #100]	; (800ae1c <HAL_TIM_IC_Start_IT+0x244>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d009      	beq.n	800adce <HAL_TIM_IC_Start_IT+0x1f6>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a18      	ldr	r2, [pc, #96]	; (800ae20 <HAL_TIM_IC_Start_IT+0x248>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d004      	beq.n	800adce <HAL_TIM_IC_Start_IT+0x1f6>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a16      	ldr	r2, [pc, #88]	; (800ae24 <HAL_TIM_IC_Start_IT+0x24c>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d111      	bne.n	800adf2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	f003 0307 	and.w	r3, r3, #7
 800add8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	2b06      	cmp	r3, #6
 800adde:	d010      	beq.n	800ae02 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f042 0201 	orr.w	r2, r2, #1
 800adee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adf0:	e007      	b.n	800ae02 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f042 0201 	orr.w	r2, r2, #1
 800ae00:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3710      	adds	r7, #16
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	40010000 	.word	0x40010000
 800ae10:	40000400 	.word	0x40000400
 800ae14:	40000800 	.word	0x40000800
 800ae18:	40000c00 	.word	0x40000c00
 800ae1c:	40010400 	.word	0x40010400
 800ae20:	40014000 	.word	0x40014000
 800ae24:	40001800 	.word	0x40001800

0800ae28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d101      	bne.n	800ae3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e097      	b.n	800af6c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d106      	bne.n	800ae56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7fb fe57 	bl	8006b04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2202      	movs	r2, #2
 800ae5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	6812      	ldr	r2, [r2, #0]
 800ae68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae6c:	f023 0307 	bic.w	r3, r3, #7
 800ae70:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	3304      	adds	r3, #4
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	f000 fca1 	bl	800b7c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	6a1b      	ldr	r3, [r3, #32]
 800ae98:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	697a      	ldr	r2, [r7, #20]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aeaa:	f023 0303 	bic.w	r3, r3, #3
 800aeae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	689a      	ldr	r2, [r3, #8]
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	021b      	lsls	r3, r3, #8
 800aeba:	4313      	orrs	r3, r2
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800aec8:	f023 030c 	bic.w	r3, r3, #12
 800aecc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aed4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	68da      	ldr	r2, [r3, #12]
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	69db      	ldr	r3, [r3, #28]
 800aee2:	021b      	lsls	r3, r3, #8
 800aee4:	4313      	orrs	r3, r2
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	011a      	lsls	r2, r3, #4
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	031b      	lsls	r3, r3, #12
 800aef8:	4313      	orrs	r3, r2
 800aefa:	693a      	ldr	r2, [r7, #16]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800af06:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800af0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	685a      	ldr	r2, [r3, #4]
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	695b      	ldr	r3, [r3, #20]
 800af18:	011b      	lsls	r3, r3, #4
 800af1a:	4313      	orrs	r3, r2
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	4313      	orrs	r3, r2
 800af20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2201      	movs	r2, #1
 800af56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2201      	movs	r2, #1
 800af5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2201      	movs	r2, #1
 800af66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3718      	adds	r7, #24
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800af8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800af9c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d110      	bne.n	800afc6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800afa4:	7bfb      	ldrb	r3, [r7, #15]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d102      	bne.n	800afb0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800afaa:	7b7b      	ldrb	r3, [r7, #13]
 800afac:	2b01      	cmp	r3, #1
 800afae:	d001      	beq.n	800afb4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	e069      	b.n	800b088 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2202      	movs	r2, #2
 800afb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2202      	movs	r2, #2
 800afc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afc4:	e031      	b.n	800b02a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	2b04      	cmp	r3, #4
 800afca:	d110      	bne.n	800afee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800afcc:	7bbb      	ldrb	r3, [r7, #14]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d102      	bne.n	800afd8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800afd2:	7b3b      	ldrb	r3, [r7, #12]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d001      	beq.n	800afdc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	e055      	b.n	800b088 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2202      	movs	r2, #2
 800afe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2202      	movs	r2, #2
 800afe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800afec:	e01d      	b.n	800b02a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800afee:	7bfb      	ldrb	r3, [r7, #15]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d108      	bne.n	800b006 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aff4:	7bbb      	ldrb	r3, [r7, #14]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d105      	bne.n	800b006 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800affa:	7b7b      	ldrb	r3, [r7, #13]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d102      	bne.n	800b006 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b000:	7b3b      	ldrb	r3, [r7, #12]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d001      	beq.n	800b00a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	e03e      	b.n	800b088 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2202      	movs	r2, #2
 800b00e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2202      	movs	r2, #2
 800b016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2202      	movs	r2, #2
 800b01e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2202      	movs	r2, #2
 800b026:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d003      	beq.n	800b038 <HAL_TIM_Encoder_Start+0xc4>
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	2b04      	cmp	r3, #4
 800b034:	d008      	beq.n	800b048 <HAL_TIM_Encoder_Start+0xd4>
 800b036:	e00f      	b.n	800b058 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2201      	movs	r2, #1
 800b03e:	2100      	movs	r1, #0
 800b040:	4618      	mov	r0, r3
 800b042:	f000 ffd3 	bl	800bfec <TIM_CCxChannelCmd>
      break;
 800b046:	e016      	b.n	800b076 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2201      	movs	r2, #1
 800b04e:	2104      	movs	r1, #4
 800b050:	4618      	mov	r0, r3
 800b052:	f000 ffcb 	bl	800bfec <TIM_CCxChannelCmd>
      break;
 800b056:	e00e      	b.n	800b076 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2201      	movs	r2, #1
 800b05e:	2100      	movs	r1, #0
 800b060:	4618      	mov	r0, r3
 800b062:	f000 ffc3 	bl	800bfec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2201      	movs	r2, #1
 800b06c:	2104      	movs	r1, #4
 800b06e:	4618      	mov	r0, r3
 800b070:	f000 ffbc 	bl	800bfec <TIM_CCxChannelCmd>
      break;
 800b074:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f042 0201 	orr.w	r2, r2, #1
 800b084:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	f003 0302 	and.w	r3, r3, #2
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d122      	bne.n	800b0ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	f003 0302 	and.w	r3, r3, #2
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d11b      	bne.n	800b0ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f06f 0202 	mvn.w	r2, #2
 800b0bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	f003 0303 	and.w	r3, r3, #3
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d003      	beq.n	800b0da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7f6 fc08 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800b0d8:	e005      	b.n	800b0e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 fb54 	bl	800b788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fb5b 	bl	800b79c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	691b      	ldr	r3, [r3, #16]
 800b0f2:	f003 0304 	and.w	r3, r3, #4
 800b0f6:	2b04      	cmp	r3, #4
 800b0f8:	d122      	bne.n	800b140 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	f003 0304 	and.w	r3, r3, #4
 800b104:	2b04      	cmp	r3, #4
 800b106:	d11b      	bne.n	800b140 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f06f 0204 	mvn.w	r2, #4
 800b110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2202      	movs	r2, #2
 800b116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	699b      	ldr	r3, [r3, #24]
 800b11e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b122:	2b00      	cmp	r3, #0
 800b124:	d003      	beq.n	800b12e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7f6 fbde 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800b12c:	e005      	b.n	800b13a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 fb2a 	bl	800b788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fb31 	bl	800b79c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	f003 0308 	and.w	r3, r3, #8
 800b14a:	2b08      	cmp	r3, #8
 800b14c:	d122      	bne.n	800b194 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	f003 0308 	and.w	r3, r3, #8
 800b158:	2b08      	cmp	r3, #8
 800b15a:	d11b      	bne.n	800b194 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f06f 0208 	mvn.w	r2, #8
 800b164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2204      	movs	r2, #4
 800b16a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	69db      	ldr	r3, [r3, #28]
 800b172:	f003 0303 	and.w	r3, r3, #3
 800b176:	2b00      	cmp	r3, #0
 800b178:	d003      	beq.n	800b182 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f7f6 fbb4 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800b180:	e005      	b.n	800b18e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fb00 	bl	800b788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fb07 	bl	800b79c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	f003 0310 	and.w	r3, r3, #16
 800b19e:	2b10      	cmp	r3, #16
 800b1a0:	d122      	bne.n	800b1e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	f003 0310 	and.w	r3, r3, #16
 800b1ac:	2b10      	cmp	r3, #16
 800b1ae:	d11b      	bne.n	800b1e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f06f 0210 	mvn.w	r2, #16
 800b1b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2208      	movs	r2, #8
 800b1be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	69db      	ldr	r3, [r3, #28]
 800b1c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d003      	beq.n	800b1d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f7f6 fb8a 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800b1d4:	e005      	b.n	800b1e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fad6 	bl	800b788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fadd 	bl	800b79c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	691b      	ldr	r3, [r3, #16]
 800b1ee:	f003 0301 	and.w	r3, r3, #1
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d10e      	bne.n	800b214 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	f003 0301 	and.w	r3, r3, #1
 800b200:	2b01      	cmp	r3, #1
 800b202:	d107      	bne.n	800b214 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f06f 0201 	mvn.w	r2, #1
 800b20c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fab0 	bl	800b774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b21e:	2b80      	cmp	r3, #128	; 0x80
 800b220:	d10e      	bne.n	800b240 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b22c:	2b80      	cmp	r3, #128	; 0x80
 800b22e:	d107      	bne.n	800b240 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 ffd4 	bl	800c1e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b24a:	2b40      	cmp	r3, #64	; 0x40
 800b24c:	d10e      	bne.n	800b26c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b258:	2b40      	cmp	r3, #64	; 0x40
 800b25a:	d107      	bne.n	800b26c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 faa2 	bl	800b7b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	f003 0320 	and.w	r3, r3, #32
 800b276:	2b20      	cmp	r3, #32
 800b278:	d10e      	bne.n	800b298 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	f003 0320 	and.w	r3, r3, #32
 800b284:	2b20      	cmp	r3, #32
 800b286:	d107      	bne.n	800b298 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f06f 0220 	mvn.w	r2, #32
 800b290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 ff9e 	bl	800c1d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b298:	bf00      	nop
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b086      	sub	sp, #24
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d101      	bne.n	800b2be <HAL_TIM_IC_ConfigChannel+0x1e>
 800b2ba:	2302      	movs	r3, #2
 800b2bc:	e088      	b.n	800b3d0 <HAL_TIM_IC_ConfigChannel+0x130>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d11b      	bne.n	800b304 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6818      	ldr	r0, [r3, #0]
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	6819      	ldr	r1, [r3, #0]
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	f000 fcc2 	bl	800bc64 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	699a      	ldr	r2, [r3, #24]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f022 020c 	bic.w	r2, r2, #12
 800b2ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	6999      	ldr	r1, [r3, #24]
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	689a      	ldr	r2, [r3, #8]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	430a      	orrs	r2, r1
 800b300:	619a      	str	r2, [r3, #24]
 800b302:	e060      	b.n	800b3c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b04      	cmp	r3, #4
 800b308:	d11c      	bne.n	800b344 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6818      	ldr	r0, [r3, #0]
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	6819      	ldr	r1, [r3, #0]
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	f000 fd46 	bl	800bdaa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	699a      	ldr	r2, [r3, #24]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b32c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	6999      	ldr	r1, [r3, #24]
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	021a      	lsls	r2, r3, #8
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	430a      	orrs	r2, r1
 800b340:	619a      	str	r2, [r3, #24]
 800b342:	e040      	b.n	800b3c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b08      	cmp	r3, #8
 800b348:	d11b      	bne.n	800b382 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6818      	ldr	r0, [r3, #0]
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	6819      	ldr	r1, [r3, #0]
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	685a      	ldr	r2, [r3, #4]
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	f000 fd93 	bl	800be84 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	69da      	ldr	r2, [r3, #28]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f022 020c 	bic.w	r2, r2, #12
 800b36c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	69d9      	ldr	r1, [r3, #28]
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	689a      	ldr	r2, [r3, #8]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	430a      	orrs	r2, r1
 800b37e:	61da      	str	r2, [r3, #28]
 800b380:	e021      	b.n	800b3c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2b0c      	cmp	r3, #12
 800b386:	d11c      	bne.n	800b3c2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6818      	ldr	r0, [r3, #0]
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	6819      	ldr	r1, [r3, #0]
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	685a      	ldr	r2, [r3, #4]
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	f000 fdb0 	bl	800befc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	69da      	ldr	r2, [r3, #28]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b3aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	69d9      	ldr	r1, [r3, #28]
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	021a      	lsls	r2, r3, #8
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	430a      	orrs	r2, r1
 800b3be:	61da      	str	r2, [r3, #28]
 800b3c0:	e001      	b.n	800b3c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b3ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3718      	adds	r7, #24
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b086      	sub	sp, #24
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d101      	bne.n	800b3f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b3f2:	2302      	movs	r3, #2
 800b3f4:	e0ae      	b.n	800b554 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b0c      	cmp	r3, #12
 800b402:	f200 809f 	bhi.w	800b544 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b406:	a201      	add	r2, pc, #4	; (adr r2, 800b40c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b40c:	0800b441 	.word	0x0800b441
 800b410:	0800b545 	.word	0x0800b545
 800b414:	0800b545 	.word	0x0800b545
 800b418:	0800b545 	.word	0x0800b545
 800b41c:	0800b481 	.word	0x0800b481
 800b420:	0800b545 	.word	0x0800b545
 800b424:	0800b545 	.word	0x0800b545
 800b428:	0800b545 	.word	0x0800b545
 800b42c:	0800b4c3 	.word	0x0800b4c3
 800b430:	0800b545 	.word	0x0800b545
 800b434:	0800b545 	.word	0x0800b545
 800b438:	0800b545 	.word	0x0800b545
 800b43c:	0800b503 	.word	0x0800b503
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	68b9      	ldr	r1, [r7, #8]
 800b446:	4618      	mov	r0, r3
 800b448:	f000 fa5c 	bl	800b904 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	699a      	ldr	r2, [r3, #24]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f042 0208 	orr.w	r2, r2, #8
 800b45a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	699a      	ldr	r2, [r3, #24]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f022 0204 	bic.w	r2, r2, #4
 800b46a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	6999      	ldr	r1, [r3, #24]
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	691a      	ldr	r2, [r3, #16]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	430a      	orrs	r2, r1
 800b47c:	619a      	str	r2, [r3, #24]
      break;
 800b47e:	e064      	b.n	800b54a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68b9      	ldr	r1, [r7, #8]
 800b486:	4618      	mov	r0, r3
 800b488:	f000 faac 	bl	800b9e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	699a      	ldr	r2, [r3, #24]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b49a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	699a      	ldr	r2, [r3, #24]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	6999      	ldr	r1, [r3, #24]
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	021a      	lsls	r2, r3, #8
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	430a      	orrs	r2, r1
 800b4be:	619a      	str	r2, [r3, #24]
      break;
 800b4c0:	e043      	b.n	800b54a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	68b9      	ldr	r1, [r7, #8]
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f000 fb01 	bl	800bad0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	69da      	ldr	r2, [r3, #28]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f042 0208 	orr.w	r2, r2, #8
 800b4dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	69da      	ldr	r2, [r3, #28]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f022 0204 	bic.w	r2, r2, #4
 800b4ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	69d9      	ldr	r1, [r3, #28]
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	691a      	ldr	r2, [r3, #16]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	430a      	orrs	r2, r1
 800b4fe:	61da      	str	r2, [r3, #28]
      break;
 800b500:	e023      	b.n	800b54a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	68b9      	ldr	r1, [r7, #8]
 800b508:	4618      	mov	r0, r3
 800b50a:	f000 fb55 	bl	800bbb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	69da      	ldr	r2, [r3, #28]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b51c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	69da      	ldr	r2, [r3, #28]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b52c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	69d9      	ldr	r1, [r3, #28]
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	691b      	ldr	r3, [r3, #16]
 800b538:	021a      	lsls	r2, r3, #8
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	430a      	orrs	r2, r1
 800b540:	61da      	str	r2, [r3, #28]
      break;
 800b542:	e002      	b.n	800b54a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	75fb      	strb	r3, [r7, #23]
      break;
 800b548:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b552:	7dfb      	ldrb	r3, [r7, #23]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3718      	adds	r7, #24
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b566:	2300      	movs	r3, #0
 800b568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b570:	2b01      	cmp	r3, #1
 800b572:	d101      	bne.n	800b578 <HAL_TIM_ConfigClockSource+0x1c>
 800b574:	2302      	movs	r3, #2
 800b576:	e0b4      	b.n	800b6e2 <HAL_TIM_ConfigClockSource+0x186>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2202      	movs	r2, #2
 800b584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b59e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	68ba      	ldr	r2, [r7, #8]
 800b5a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5b0:	d03e      	beq.n	800b630 <HAL_TIM_ConfigClockSource+0xd4>
 800b5b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5b6:	f200 8087 	bhi.w	800b6c8 <HAL_TIM_ConfigClockSource+0x16c>
 800b5ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5be:	f000 8086 	beq.w	800b6ce <HAL_TIM_ConfigClockSource+0x172>
 800b5c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5c6:	d87f      	bhi.n	800b6c8 <HAL_TIM_ConfigClockSource+0x16c>
 800b5c8:	2b70      	cmp	r3, #112	; 0x70
 800b5ca:	d01a      	beq.n	800b602 <HAL_TIM_ConfigClockSource+0xa6>
 800b5cc:	2b70      	cmp	r3, #112	; 0x70
 800b5ce:	d87b      	bhi.n	800b6c8 <HAL_TIM_ConfigClockSource+0x16c>
 800b5d0:	2b60      	cmp	r3, #96	; 0x60
 800b5d2:	d050      	beq.n	800b676 <HAL_TIM_ConfigClockSource+0x11a>
 800b5d4:	2b60      	cmp	r3, #96	; 0x60
 800b5d6:	d877      	bhi.n	800b6c8 <HAL_TIM_ConfigClockSource+0x16c>
 800b5d8:	2b50      	cmp	r3, #80	; 0x50
 800b5da:	d03c      	beq.n	800b656 <HAL_TIM_ConfigClockSource+0xfa>
 800b5dc:	2b50      	cmp	r3, #80	; 0x50
 800b5de:	d873      	bhi.n	800b6c8 <HAL_TIM_ConfigClockSource+0x16c>
 800b5e0:	2b40      	cmp	r3, #64	; 0x40
 800b5e2:	d058      	beq.n	800b696 <HAL_TIM_ConfigClockSource+0x13a>
 800b5e4:	2b40      	cmp	r3, #64	; 0x40
 800b5e6:	d86f      	bhi.n	800b6c8 <HAL_TIM_ConfigClockSource+0x16c>
 800b5e8:	2b30      	cmp	r3, #48	; 0x30
 800b5ea:	d064      	beq.n	800b6b6 <HAL_TIM_ConfigClockSource+0x15a>
 800b5ec:	2b30      	cmp	r3, #48	; 0x30
 800b5ee:	d86b      	bhi.n	800b6c8 <HAL_TIM_ConfigClockSource+0x16c>
 800b5f0:	2b20      	cmp	r3, #32
 800b5f2:	d060      	beq.n	800b6b6 <HAL_TIM_ConfigClockSource+0x15a>
 800b5f4:	2b20      	cmp	r3, #32
 800b5f6:	d867      	bhi.n	800b6c8 <HAL_TIM_ConfigClockSource+0x16c>
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d05c      	beq.n	800b6b6 <HAL_TIM_ConfigClockSource+0x15a>
 800b5fc:	2b10      	cmp	r3, #16
 800b5fe:	d05a      	beq.n	800b6b6 <HAL_TIM_ConfigClockSource+0x15a>
 800b600:	e062      	b.n	800b6c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6818      	ldr	r0, [r3, #0]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	6899      	ldr	r1, [r3, #8]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	685a      	ldr	r2, [r3, #4]
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	f000 fccb 	bl	800bfac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68ba      	ldr	r2, [r7, #8]
 800b62c:	609a      	str	r2, [r3, #8]
      break;
 800b62e:	e04f      	b.n	800b6d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6818      	ldr	r0, [r3, #0]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	6899      	ldr	r1, [r3, #8]
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	685a      	ldr	r2, [r3, #4]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	f000 fcb4 	bl	800bfac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	689a      	ldr	r2, [r3, #8]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b652:	609a      	str	r2, [r3, #8]
      break;
 800b654:	e03c      	b.n	800b6d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6818      	ldr	r0, [r3, #0]
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	6859      	ldr	r1, [r3, #4]
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	461a      	mov	r2, r3
 800b664:	f000 fb72 	bl	800bd4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2150      	movs	r1, #80	; 0x50
 800b66e:	4618      	mov	r0, r3
 800b670:	f000 fc81 	bl	800bf76 <TIM_ITRx_SetConfig>
      break;
 800b674:	e02c      	b.n	800b6d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6818      	ldr	r0, [r3, #0]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	6859      	ldr	r1, [r3, #4]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	461a      	mov	r2, r3
 800b684:	f000 fbce 	bl	800be24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2160      	movs	r1, #96	; 0x60
 800b68e:	4618      	mov	r0, r3
 800b690:	f000 fc71 	bl	800bf76 <TIM_ITRx_SetConfig>
      break;
 800b694:	e01c      	b.n	800b6d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6818      	ldr	r0, [r3, #0]
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	6859      	ldr	r1, [r3, #4]
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	f000 fb52 	bl	800bd4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2140      	movs	r1, #64	; 0x40
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f000 fc61 	bl	800bf76 <TIM_ITRx_SetConfig>
      break;
 800b6b4:	e00c      	b.n	800b6d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4619      	mov	r1, r3
 800b6c0:	4610      	mov	r0, r2
 800b6c2:	f000 fc58 	bl	800bf76 <TIM_ITRx_SetConfig>
      break;
 800b6c6:	e003      	b.n	800b6d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	73fb      	strb	r3, [r7, #15]
      break;
 800b6cc:	e000      	b.n	800b6d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b6ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
	...

0800b6ec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	2b0c      	cmp	r3, #12
 800b6fe:	d831      	bhi.n	800b764 <HAL_TIM_ReadCapturedValue+0x78>
 800b700:	a201      	add	r2, pc, #4	; (adr r2, 800b708 <HAL_TIM_ReadCapturedValue+0x1c>)
 800b702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b706:	bf00      	nop
 800b708:	0800b73d 	.word	0x0800b73d
 800b70c:	0800b765 	.word	0x0800b765
 800b710:	0800b765 	.word	0x0800b765
 800b714:	0800b765 	.word	0x0800b765
 800b718:	0800b747 	.word	0x0800b747
 800b71c:	0800b765 	.word	0x0800b765
 800b720:	0800b765 	.word	0x0800b765
 800b724:	0800b765 	.word	0x0800b765
 800b728:	0800b751 	.word	0x0800b751
 800b72c:	0800b765 	.word	0x0800b765
 800b730:	0800b765 	.word	0x0800b765
 800b734:	0800b765 	.word	0x0800b765
 800b738:	0800b75b 	.word	0x0800b75b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b742:	60fb      	str	r3, [r7, #12]

      break;
 800b744:	e00f      	b.n	800b766 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74c:	60fb      	str	r3, [r7, #12]

      break;
 800b74e:	e00a      	b.n	800b766 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b756:	60fb      	str	r3, [r7, #12]

      break;
 800b758:	e005      	b.n	800b766 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b760:	60fb      	str	r3, [r7, #12]

      break;
 800b762:	e000      	b.n	800b766 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800b764:	bf00      	nop
  }

  return tmpreg;
 800b766:	68fb      	ldr	r3, [r7, #12]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3714      	adds	r7, #20
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b77c:	bf00      	nop
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b7a4:	bf00      	nop
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b7b8:	bf00      	nop
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a40      	ldr	r2, [pc, #256]	; (800b8d8 <TIM_Base_SetConfig+0x114>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d013      	beq.n	800b804 <TIM_Base_SetConfig+0x40>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7e2:	d00f      	beq.n	800b804 <TIM_Base_SetConfig+0x40>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a3d      	ldr	r2, [pc, #244]	; (800b8dc <TIM_Base_SetConfig+0x118>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d00b      	beq.n	800b804 <TIM_Base_SetConfig+0x40>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a3c      	ldr	r2, [pc, #240]	; (800b8e0 <TIM_Base_SetConfig+0x11c>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d007      	beq.n	800b804 <TIM_Base_SetConfig+0x40>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	4a3b      	ldr	r2, [pc, #236]	; (800b8e4 <TIM_Base_SetConfig+0x120>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d003      	beq.n	800b804 <TIM_Base_SetConfig+0x40>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a3a      	ldr	r2, [pc, #232]	; (800b8e8 <TIM_Base_SetConfig+0x124>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d108      	bne.n	800b816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b80a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	4313      	orrs	r3, r2
 800b814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	4a2f      	ldr	r2, [pc, #188]	; (800b8d8 <TIM_Base_SetConfig+0x114>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d02b      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b824:	d027      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4a2c      	ldr	r2, [pc, #176]	; (800b8dc <TIM_Base_SetConfig+0x118>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d023      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	4a2b      	ldr	r2, [pc, #172]	; (800b8e0 <TIM_Base_SetConfig+0x11c>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d01f      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4a2a      	ldr	r2, [pc, #168]	; (800b8e4 <TIM_Base_SetConfig+0x120>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d01b      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a29      	ldr	r2, [pc, #164]	; (800b8e8 <TIM_Base_SetConfig+0x124>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d017      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4a28      	ldr	r2, [pc, #160]	; (800b8ec <TIM_Base_SetConfig+0x128>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d013      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4a27      	ldr	r2, [pc, #156]	; (800b8f0 <TIM_Base_SetConfig+0x12c>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d00f      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a26      	ldr	r2, [pc, #152]	; (800b8f4 <TIM_Base_SetConfig+0x130>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d00b      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4a25      	ldr	r2, [pc, #148]	; (800b8f8 <TIM_Base_SetConfig+0x134>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d007      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4a24      	ldr	r2, [pc, #144]	; (800b8fc <TIM_Base_SetConfig+0x138>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d003      	beq.n	800b876 <TIM_Base_SetConfig+0xb2>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a23      	ldr	r2, [pc, #140]	; (800b900 <TIM_Base_SetConfig+0x13c>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d108      	bne.n	800b888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b87c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	4313      	orrs	r3, r2
 800b886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	695b      	ldr	r3, [r3, #20]
 800b892:	4313      	orrs	r3, r2
 800b894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	689a      	ldr	r2, [r3, #8]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a0a      	ldr	r2, [pc, #40]	; (800b8d8 <TIM_Base_SetConfig+0x114>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d003      	beq.n	800b8bc <TIM_Base_SetConfig+0xf8>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a0c      	ldr	r2, [pc, #48]	; (800b8e8 <TIM_Base_SetConfig+0x124>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d103      	bne.n	800b8c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	691a      	ldr	r2, [r3, #16]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	615a      	str	r2, [r3, #20]
}
 800b8ca:	bf00      	nop
 800b8cc:	3714      	adds	r7, #20
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr
 800b8d6:	bf00      	nop
 800b8d8:	40010000 	.word	0x40010000
 800b8dc:	40000400 	.word	0x40000400
 800b8e0:	40000800 	.word	0x40000800
 800b8e4:	40000c00 	.word	0x40000c00
 800b8e8:	40010400 	.word	0x40010400
 800b8ec:	40014000 	.word	0x40014000
 800b8f0:	40014400 	.word	0x40014400
 800b8f4:	40014800 	.word	0x40014800
 800b8f8:	40001800 	.word	0x40001800
 800b8fc:	40001c00 	.word	0x40001c00
 800b900:	40002000 	.word	0x40002000

0800b904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b904:	b480      	push	{r7}
 800b906:	b087      	sub	sp, #28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a1b      	ldr	r3, [r3, #32]
 800b912:	f023 0201 	bic.w	r2, r3, #1
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6a1b      	ldr	r3, [r3, #32]
 800b91e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	699b      	ldr	r3, [r3, #24]
 800b92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f023 0303 	bic.w	r3, r3, #3
 800b93a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	4313      	orrs	r3, r2
 800b944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	f023 0302 	bic.w	r3, r3, #2
 800b94c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	697a      	ldr	r2, [r7, #20]
 800b954:	4313      	orrs	r3, r2
 800b956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a20      	ldr	r2, [pc, #128]	; (800b9dc <TIM_OC1_SetConfig+0xd8>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d003      	beq.n	800b968 <TIM_OC1_SetConfig+0x64>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a1f      	ldr	r2, [pc, #124]	; (800b9e0 <TIM_OC1_SetConfig+0xdc>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d10c      	bne.n	800b982 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	f023 0308 	bic.w	r3, r3, #8
 800b96e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	697a      	ldr	r2, [r7, #20]
 800b976:	4313      	orrs	r3, r2
 800b978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	f023 0304 	bic.w	r3, r3, #4
 800b980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a15      	ldr	r2, [pc, #84]	; (800b9dc <TIM_OC1_SetConfig+0xd8>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d003      	beq.n	800b992 <TIM_OC1_SetConfig+0x8e>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4a14      	ldr	r2, [pc, #80]	; (800b9e0 <TIM_OC1_SetConfig+0xdc>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d111      	bne.n	800b9b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b9a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	693a      	ldr	r2, [r7, #16]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	693a      	ldr	r2, [r7, #16]
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	693a      	ldr	r2, [r7, #16]
 800b9ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	685a      	ldr	r2, [r3, #4]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	697a      	ldr	r2, [r7, #20]
 800b9ce:	621a      	str	r2, [r3, #32]
}
 800b9d0:	bf00      	nop
 800b9d2:	371c      	adds	r7, #28
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	40010000 	.word	0x40010000
 800b9e0:	40010400 	.word	0x40010400

0800b9e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b087      	sub	sp, #28
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a1b      	ldr	r3, [r3, #32]
 800b9f2:	f023 0210 	bic.w	r2, r3, #16
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a1b      	ldr	r3, [r3, #32]
 800b9fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	699b      	ldr	r3, [r3, #24]
 800ba0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	021b      	lsls	r3, r3, #8
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	4313      	orrs	r3, r2
 800ba26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	f023 0320 	bic.w	r3, r3, #32
 800ba2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	011b      	lsls	r3, r3, #4
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4a22      	ldr	r2, [pc, #136]	; (800bac8 <TIM_OC2_SetConfig+0xe4>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d003      	beq.n	800ba4c <TIM_OC2_SetConfig+0x68>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4a21      	ldr	r2, [pc, #132]	; (800bacc <TIM_OC2_SetConfig+0xe8>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d10d      	bne.n	800ba68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	011b      	lsls	r3, r3, #4
 800ba5a:	697a      	ldr	r2, [r7, #20]
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4a17      	ldr	r2, [pc, #92]	; (800bac8 <TIM_OC2_SetConfig+0xe4>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d003      	beq.n	800ba78 <TIM_OC2_SetConfig+0x94>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4a16      	ldr	r2, [pc, #88]	; (800bacc <TIM_OC2_SetConfig+0xe8>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d113      	bne.n	800baa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	695b      	ldr	r3, [r3, #20]
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	693a      	ldr	r2, [r7, #16]
 800ba90:	4313      	orrs	r3, r2
 800ba92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	699b      	ldr	r3, [r3, #24]
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	693a      	ldr	r2, [r7, #16]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	693a      	ldr	r2, [r7, #16]
 800baa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	685a      	ldr	r2, [r3, #4]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	621a      	str	r2, [r3, #32]
}
 800baba:	bf00      	nop
 800babc:	371c      	adds	r7, #28
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr
 800bac6:	bf00      	nop
 800bac8:	40010000 	.word	0x40010000
 800bacc:	40010400 	.word	0x40010400

0800bad0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b087      	sub	sp, #28
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a1b      	ldr	r3, [r3, #32]
 800baea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	69db      	ldr	r3, [r3, #28]
 800baf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bafe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f023 0303 	bic.w	r3, r3, #3
 800bb06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	021b      	lsls	r3, r3, #8
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a21      	ldr	r2, [pc, #132]	; (800bbb0 <TIM_OC3_SetConfig+0xe0>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d003      	beq.n	800bb36 <TIM_OC3_SetConfig+0x66>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a20      	ldr	r2, [pc, #128]	; (800bbb4 <TIM_OC3_SetConfig+0xe4>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d10d      	bne.n	800bb52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	021b      	lsls	r3, r3, #8
 800bb44:	697a      	ldr	r2, [r7, #20]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4a16      	ldr	r2, [pc, #88]	; (800bbb0 <TIM_OC3_SetConfig+0xe0>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d003      	beq.n	800bb62 <TIM_OC3_SetConfig+0x92>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a15      	ldr	r2, [pc, #84]	; (800bbb4 <TIM_OC3_SetConfig+0xe4>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d113      	bne.n	800bb8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	695b      	ldr	r3, [r3, #20]
 800bb76:	011b      	lsls	r3, r3, #4
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	011b      	lsls	r3, r3, #4
 800bb84:	693a      	ldr	r2, [r7, #16]
 800bb86:	4313      	orrs	r3, r2
 800bb88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	693a      	ldr	r2, [r7, #16]
 800bb8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	685a      	ldr	r2, [r3, #4]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	621a      	str	r2, [r3, #32]
}
 800bba4:	bf00      	nop
 800bba6:	371c      	adds	r7, #28
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr
 800bbb0:	40010000 	.word	0x40010000
 800bbb4:	40010400 	.word	0x40010400

0800bbb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b087      	sub	sp, #28
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a1b      	ldr	r3, [r3, #32]
 800bbc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	69db      	ldr	r3, [r3, #28]
 800bbde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	021b      	lsls	r3, r3, #8
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	031b      	lsls	r3, r3, #12
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4a12      	ldr	r2, [pc, #72]	; (800bc5c <TIM_OC4_SetConfig+0xa4>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d003      	beq.n	800bc20 <TIM_OC4_SetConfig+0x68>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	4a11      	ldr	r2, [pc, #68]	; (800bc60 <TIM_OC4_SetConfig+0xa8>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d109      	bne.n	800bc34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	695b      	ldr	r3, [r3, #20]
 800bc2c:	019b      	lsls	r3, r3, #6
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	4313      	orrs	r3, r2
 800bc32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	697a      	ldr	r2, [r7, #20]
 800bc38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	685a      	ldr	r2, [r3, #4]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	693a      	ldr	r2, [r7, #16]
 800bc4c:	621a      	str	r2, [r3, #32]
}
 800bc4e:	bf00      	nop
 800bc50:	371c      	adds	r7, #28
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	40010000 	.word	0x40010000
 800bc60:	40010400 	.word	0x40010400

0800bc64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b087      	sub	sp, #28
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
 800bc70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	f023 0201 	bic.w	r2, r3, #1
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	699b      	ldr	r3, [r3, #24]
 800bc82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6a1b      	ldr	r3, [r3, #32]
 800bc88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	4a28      	ldr	r2, [pc, #160]	; (800bd30 <TIM_TI1_SetConfig+0xcc>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d01b      	beq.n	800bcca <TIM_TI1_SetConfig+0x66>
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc98:	d017      	beq.n	800bcca <TIM_TI1_SetConfig+0x66>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	4a25      	ldr	r2, [pc, #148]	; (800bd34 <TIM_TI1_SetConfig+0xd0>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d013      	beq.n	800bcca <TIM_TI1_SetConfig+0x66>
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	4a24      	ldr	r2, [pc, #144]	; (800bd38 <TIM_TI1_SetConfig+0xd4>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d00f      	beq.n	800bcca <TIM_TI1_SetConfig+0x66>
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	4a23      	ldr	r2, [pc, #140]	; (800bd3c <TIM_TI1_SetConfig+0xd8>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d00b      	beq.n	800bcca <TIM_TI1_SetConfig+0x66>
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	4a22      	ldr	r2, [pc, #136]	; (800bd40 <TIM_TI1_SetConfig+0xdc>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d007      	beq.n	800bcca <TIM_TI1_SetConfig+0x66>
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	4a21      	ldr	r2, [pc, #132]	; (800bd44 <TIM_TI1_SetConfig+0xe0>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d003      	beq.n	800bcca <TIM_TI1_SetConfig+0x66>
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	4a20      	ldr	r2, [pc, #128]	; (800bd48 <TIM_TI1_SetConfig+0xe4>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d101      	bne.n	800bcce <TIM_TI1_SetConfig+0x6a>
 800bcca:	2301      	movs	r3, #1
 800bccc:	e000      	b.n	800bcd0 <TIM_TI1_SetConfig+0x6c>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d008      	beq.n	800bce6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	f023 0303 	bic.w	r3, r3, #3
 800bcda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800bcdc:	697a      	ldr	r2, [r7, #20]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4313      	orrs	r3, r2
 800bce2:	617b      	str	r3, [r7, #20]
 800bce4:	e003      	b.n	800bcee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	f043 0301 	orr.w	r3, r3, #1
 800bcec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bcf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	011b      	lsls	r3, r3, #4
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	697a      	ldr	r2, [r7, #20]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	f023 030a 	bic.w	r3, r3, #10
 800bd08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	f003 030a 	and.w	r3, r3, #10
 800bd10:	693a      	ldr	r2, [r7, #16]
 800bd12:	4313      	orrs	r3, r2
 800bd14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	621a      	str	r2, [r3, #32]
}
 800bd22:	bf00      	nop
 800bd24:	371c      	adds	r7, #28
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	40010000 	.word	0x40010000
 800bd34:	40000400 	.word	0x40000400
 800bd38:	40000800 	.word	0x40000800
 800bd3c:	40000c00 	.word	0x40000c00
 800bd40:	40010400 	.word	0x40010400
 800bd44:	40014000 	.word	0x40014000
 800bd48:	40001800 	.word	0x40001800

0800bd4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6a1b      	ldr	r3, [r3, #32]
 800bd5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6a1b      	ldr	r3, [r3, #32]
 800bd62:	f023 0201 	bic.w	r2, r3, #1
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	699b      	ldr	r3, [r3, #24]
 800bd6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	011b      	lsls	r3, r3, #4
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f023 030a 	bic.w	r3, r3, #10
 800bd88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd8a:	697a      	ldr	r2, [r7, #20]
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	693a      	ldr	r2, [r7, #16]
 800bd96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	697a      	ldr	r2, [r7, #20]
 800bd9c:	621a      	str	r2, [r3, #32]
}
 800bd9e:	bf00      	nop
 800bda0:	371c      	adds	r7, #28
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b087      	sub	sp, #28
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	60f8      	str	r0, [r7, #12]
 800bdb2:	60b9      	str	r1, [r7, #8]
 800bdb4:	607a      	str	r2, [r7, #4]
 800bdb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6a1b      	ldr	r3, [r3, #32]
 800bdbc:	f023 0210 	bic.w	r2, r3, #16
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	699b      	ldr	r3, [r3, #24]
 800bdc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6a1b      	ldr	r3, [r3, #32]
 800bdce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	021b      	lsls	r3, r3, #8
 800bddc:	697a      	ldr	r2, [r7, #20]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bde8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	031b      	lsls	r3, r3, #12
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	697a      	ldr	r2, [r7, #20]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bdfc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	011b      	lsls	r3, r3, #4
 800be02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	4313      	orrs	r3, r2
 800be0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	697a      	ldr	r2, [r7, #20]
 800be10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	693a      	ldr	r2, [r7, #16]
 800be16:	621a      	str	r2, [r3, #32]
}
 800be18:	bf00      	nop
 800be1a:	371c      	adds	r7, #28
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be24:	b480      	push	{r7}
 800be26:	b087      	sub	sp, #28
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6a1b      	ldr	r3, [r3, #32]
 800be34:	f023 0210 	bic.w	r2, r3, #16
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	699b      	ldr	r3, [r3, #24]
 800be40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	6a1b      	ldr	r3, [r3, #32]
 800be46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	031b      	lsls	r3, r3, #12
 800be54:	697a      	ldr	r2, [r7, #20]
 800be56:	4313      	orrs	r3, r2
 800be58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	011b      	lsls	r3, r3, #4
 800be66:	693a      	ldr	r2, [r7, #16]
 800be68:	4313      	orrs	r3, r2
 800be6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	697a      	ldr	r2, [r7, #20]
 800be70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	693a      	ldr	r2, [r7, #16]
 800be76:	621a      	str	r2, [r3, #32]
}
 800be78:	bf00      	nop
 800be7a:	371c      	adds	r7, #28
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800be84:	b480      	push	{r7}
 800be86:	b087      	sub	sp, #28
 800be88:	af00      	add	r7, sp, #0
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	607a      	str	r2, [r7, #4]
 800be90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6a1b      	ldr	r3, [r3, #32]
 800be96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	69db      	ldr	r3, [r3, #28]
 800bea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6a1b      	ldr	r3, [r3, #32]
 800bea8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	f023 0303 	bic.w	r3, r3, #3
 800beb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800beb2:	697a      	ldr	r2, [r7, #20]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bec0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	011b      	lsls	r3, r3, #4
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	697a      	ldr	r2, [r7, #20]
 800beca:	4313      	orrs	r3, r2
 800becc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800bed4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	021b      	lsls	r3, r3, #8
 800beda:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800bede:	693a      	ldr	r2, [r7, #16]
 800bee0:	4313      	orrs	r3, r2
 800bee2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	697a      	ldr	r2, [r7, #20]
 800bee8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	693a      	ldr	r2, [r7, #16]
 800beee:	621a      	str	r2, [r3, #32]
}
 800bef0:	bf00      	nop
 800bef2:	371c      	adds	r7, #28
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800befc:	b480      	push	{r7}
 800befe:	b087      	sub	sp, #28
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
 800bf08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6a1b      	ldr	r3, [r3, #32]
 800bf0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	69db      	ldr	r3, [r3, #28]
 800bf1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	6a1b      	ldr	r3, [r3, #32]
 800bf20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	021b      	lsls	r3, r3, #8
 800bf2e:	697a      	ldr	r2, [r7, #20]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bf3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	031b      	lsls	r3, r3, #12
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	4313      	orrs	r3, r2
 800bf46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bf4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	031b      	lsls	r3, r3, #12
 800bf54:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bf58:	693a      	ldr	r2, [r7, #16]
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	697a      	ldr	r2, [r7, #20]
 800bf62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	693a      	ldr	r2, [r7, #16]
 800bf68:	621a      	str	r2, [r3, #32]
}
 800bf6a:	bf00      	nop
 800bf6c:	371c      	adds	r7, #28
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr

0800bf76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf76:	b480      	push	{r7}
 800bf78:	b085      	sub	sp, #20
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf8e:	683a      	ldr	r2, [r7, #0]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	f043 0307 	orr.w	r3, r3, #7
 800bf98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	609a      	str	r2, [r3, #8]
}
 800bfa0:	bf00      	nop
 800bfa2:	3714      	adds	r7, #20
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b087      	sub	sp, #28
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
 800bfb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bfc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	021a      	lsls	r2, r3, #8
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	431a      	orrs	r2, r3
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	697a      	ldr	r2, [r7, #20]
 800bfde:	609a      	str	r2, [r3, #8]
}
 800bfe0:	bf00      	nop
 800bfe2:	371c      	adds	r7, #28
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b087      	sub	sp, #28
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	f003 031f 	and.w	r3, r3, #31
 800bffe:	2201      	movs	r2, #1
 800c000:	fa02 f303 	lsl.w	r3, r2, r3
 800c004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6a1a      	ldr	r2, [r3, #32]
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	43db      	mvns	r3, r3
 800c00e:	401a      	ands	r2, r3
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6a1a      	ldr	r2, [r3, #32]
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	f003 031f 	and.w	r3, r3, #31
 800c01e:	6879      	ldr	r1, [r7, #4]
 800c020:	fa01 f303 	lsl.w	r3, r1, r3
 800c024:	431a      	orrs	r2, r3
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	621a      	str	r2, [r3, #32]
}
 800c02a:	bf00      	nop
 800c02c:	371c      	adds	r7, #28
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
	...

0800c038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c048:	2b01      	cmp	r3, #1
 800c04a:	d101      	bne.n	800c050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c04c:	2302      	movs	r3, #2
 800c04e:	e05a      	b.n	800c106 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2202      	movs	r2, #2
 800c05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	4313      	orrs	r3, r2
 800c080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a21      	ldr	r2, [pc, #132]	; (800c114 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d022      	beq.n	800c0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c09c:	d01d      	beq.n	800c0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a1d      	ldr	r2, [pc, #116]	; (800c118 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d018      	beq.n	800c0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a1b      	ldr	r2, [pc, #108]	; (800c11c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d013      	beq.n	800c0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a1a      	ldr	r2, [pc, #104]	; (800c120 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d00e      	beq.n	800c0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a18      	ldr	r2, [pc, #96]	; (800c124 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d009      	beq.n	800c0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a17      	ldr	r2, [pc, #92]	; (800c128 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d004      	beq.n	800c0da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a15      	ldr	r2, [pc, #84]	; (800c12c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d10c      	bne.n	800c0f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	68ba      	ldr	r2, [r7, #8]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68ba      	ldr	r2, [r7, #8]
 800c0f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3714      	adds	r7, #20
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	40010000 	.word	0x40010000
 800c118:	40000400 	.word	0x40000400
 800c11c:	40000800 	.word	0x40000800
 800c120:	40000c00 	.word	0x40000c00
 800c124:	40010400 	.word	0x40010400
 800c128:	40014000 	.word	0x40014000
 800c12c:	40001800 	.word	0x40001800

0800c130 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c13a:	2300      	movs	r3, #0
 800c13c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c144:	2b01      	cmp	r3, #1
 800c146:	d101      	bne.n	800c14c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c148:	2302      	movs	r3, #2
 800c14a:	e03d      	b.n	800c1c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2201      	movs	r2, #1
 800c150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	4313      	orrs	r3, r2
 800c160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	4313      	orrs	r3, r2
 800c16e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	4313      	orrs	r3, r2
 800c17c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4313      	orrs	r3, r2
 800c18a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	4313      	orrs	r3, r2
 800c198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	69db      	ldr	r3, [r3, #28]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c1c6:	2300      	movs	r3, #0
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3714      	adds	r7, #20
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1dc:	bf00      	nop
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1f0:	bf00      	nop
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d101      	bne.n	800c20e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	e03f      	b.n	800c28e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c214:	b2db      	uxtb	r3, r3
 800c216:	2b00      	cmp	r3, #0
 800c218:	d106      	bne.n	800c228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f7fa fd92 	bl	8006d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2224      	movs	r2, #36	; 0x24
 800c22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	68da      	ldr	r2, [r3, #12]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c23e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 fddf 	bl	800ce04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	691a      	ldr	r2, [r3, #16]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c254:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	695a      	ldr	r2, [r3, #20]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c264:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	68da      	ldr	r2, [r3, #12]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c274:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2220      	movs	r2, #32
 800c280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2220      	movs	r2, #32
 800c288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3708      	adds	r7, #8
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c296:	b580      	push	{r7, lr}
 800c298:	b08a      	sub	sp, #40	; 0x28
 800c29a:	af02      	add	r7, sp, #8
 800c29c:	60f8      	str	r0, [r7, #12]
 800c29e:	60b9      	str	r1, [r7, #8]
 800c2a0:	603b      	str	r3, [r7, #0]
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	2b20      	cmp	r3, #32
 800c2b4:	d17c      	bne.n	800c3b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d002      	beq.n	800c2c2 <HAL_UART_Transmit+0x2c>
 800c2bc:	88fb      	ldrh	r3, [r7, #6]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d101      	bne.n	800c2c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e075      	b.n	800c3b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d101      	bne.n	800c2d4 <HAL_UART_Transmit+0x3e>
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	e06e      	b.n	800c3b2 <HAL_UART_Transmit+0x11c>
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2221      	movs	r2, #33	; 0x21
 800c2e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c2ea:	f7fa ff29 	bl	8007140 <HAL_GetTick>
 800c2ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	88fa      	ldrh	r2, [r7, #6]
 800c2f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	88fa      	ldrh	r2, [r7, #6]
 800c2fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c304:	d108      	bne.n	800c318 <HAL_UART_Transmit+0x82>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	691b      	ldr	r3, [r3, #16]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d104      	bne.n	800c318 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c30e:	2300      	movs	r3, #0
 800c310:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	61bb      	str	r3, [r7, #24]
 800c316:	e003      	b.n	800c320 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c31c:	2300      	movs	r3, #0
 800c31e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2200      	movs	r2, #0
 800c324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c328:	e02a      	b.n	800c380 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	2200      	movs	r2, #0
 800c332:	2180      	movs	r1, #128	; 0x80
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f000 fb1f 	bl	800c978 <UART_WaitOnFlagUntilTimeout>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d001      	beq.n	800c344 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c340:	2303      	movs	r3, #3
 800c342:	e036      	b.n	800c3b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10b      	bne.n	800c362 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	881b      	ldrh	r3, [r3, #0]
 800c34e:	461a      	mov	r2, r3
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c358:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	3302      	adds	r3, #2
 800c35e:	61bb      	str	r3, [r7, #24]
 800c360:	e007      	b.n	800c372 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	781a      	ldrb	r2, [r3, #0]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	3301      	adds	r3, #1
 800c370:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c376:	b29b      	uxth	r3, r3
 800c378:	3b01      	subs	r3, #1
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c384:	b29b      	uxth	r3, r3
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1cf      	bne.n	800c32a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	9300      	str	r3, [sp, #0]
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	2200      	movs	r2, #0
 800c392:	2140      	movs	r1, #64	; 0x40
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f000 faef 	bl	800c978 <UART_WaitOnFlagUntilTimeout>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d001      	beq.n	800c3a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c3a0:	2303      	movs	r3, #3
 800c3a2:	e006      	b.n	800c3b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2220      	movs	r2, #32
 800c3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	e000      	b.n	800c3b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c3b0:	2302      	movs	r3, #2
  }
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3720      	adds	r7, #32
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b084      	sub	sp, #16
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	60f8      	str	r0, [r7, #12]
 800c3c2:	60b9      	str	r1, [r7, #8]
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	2b20      	cmp	r3, #32
 800c3d2:	d11d      	bne.n	800c410 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d002      	beq.n	800c3e0 <HAL_UART_Receive_IT+0x26>
 800c3da:	88fb      	ldrh	r3, [r7, #6]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d101      	bne.n	800c3e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e016      	b.n	800c412 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d101      	bne.n	800c3f2 <HAL_UART_Receive_IT+0x38>
 800c3ee:	2302      	movs	r3, #2
 800c3f0:	e00f      	b.n	800c412 <HAL_UART_Receive_IT+0x58>
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c400:	88fb      	ldrh	r3, [r7, #6]
 800c402:	461a      	mov	r2, r3
 800c404:	68b9      	ldr	r1, [r7, #8]
 800c406:	68f8      	ldr	r0, [r7, #12]
 800c408:	f000 fb24 	bl	800ca54 <UART_Start_Receive_IT>
 800c40c:	4603      	mov	r3, r0
 800c40e:	e000      	b.n	800c412 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c410:	2302      	movs	r3, #2
  }
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
	...

0800c41c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b0ba      	sub	sp, #232	; 0xe8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	695b      	ldr	r3, [r3, #20]
 800c43e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c442:	2300      	movs	r3, #0
 800c444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c448:	2300      	movs	r3, #0
 800c44a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c44e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c452:	f003 030f 	and.w	r3, r3, #15
 800c456:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c45a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d10f      	bne.n	800c482 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c466:	f003 0320 	and.w	r3, r3, #32
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d009      	beq.n	800c482 <HAL_UART_IRQHandler+0x66>
 800c46e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c472:	f003 0320 	and.w	r3, r3, #32
 800c476:	2b00      	cmp	r3, #0
 800c478:	d003      	beq.n	800c482 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 fc07 	bl	800cc8e <UART_Receive_IT>
      return;
 800c480:	e256      	b.n	800c930 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c486:	2b00      	cmp	r3, #0
 800c488:	f000 80de 	beq.w	800c648 <HAL_UART_IRQHandler+0x22c>
 800c48c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c490:	f003 0301 	and.w	r3, r3, #1
 800c494:	2b00      	cmp	r3, #0
 800c496:	d106      	bne.n	800c4a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c49c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f000 80d1 	beq.w	800c648 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c4a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4aa:	f003 0301 	and.w	r3, r3, #1
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00b      	beq.n	800c4ca <HAL_UART_IRQHandler+0xae>
 800c4b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d005      	beq.n	800c4ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c2:	f043 0201 	orr.w	r2, r3, #1
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c4ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4ce:	f003 0304 	and.w	r3, r3, #4
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00b      	beq.n	800c4ee <HAL_UART_IRQHandler+0xd2>
 800c4d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4da:	f003 0301 	and.w	r3, r3, #1
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d005      	beq.n	800c4ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4e6:	f043 0202 	orr.w	r2, r3, #2
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4f2:	f003 0302 	and.w	r3, r3, #2
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00b      	beq.n	800c512 <HAL_UART_IRQHandler+0xf6>
 800c4fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4fe:	f003 0301 	and.w	r3, r3, #1
 800c502:	2b00      	cmp	r3, #0
 800c504:	d005      	beq.n	800c512 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50a:	f043 0204 	orr.w	r2, r3, #4
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c516:	f003 0308 	and.w	r3, r3, #8
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d011      	beq.n	800c542 <HAL_UART_IRQHandler+0x126>
 800c51e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c522:	f003 0320 	and.w	r3, r3, #32
 800c526:	2b00      	cmp	r3, #0
 800c528:	d105      	bne.n	800c536 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c52a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c52e:	f003 0301 	and.w	r3, r3, #1
 800c532:	2b00      	cmp	r3, #0
 800c534:	d005      	beq.n	800c542 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c53a:	f043 0208 	orr.w	r2, r3, #8
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c546:	2b00      	cmp	r3, #0
 800c548:	f000 81ed 	beq.w	800c926 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c54c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c550:	f003 0320 	and.w	r3, r3, #32
 800c554:	2b00      	cmp	r3, #0
 800c556:	d008      	beq.n	800c56a <HAL_UART_IRQHandler+0x14e>
 800c558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c55c:	f003 0320 	and.w	r3, r3, #32
 800c560:	2b00      	cmp	r3, #0
 800c562:	d002      	beq.n	800c56a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 fb92 	bl	800cc8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	695b      	ldr	r3, [r3, #20]
 800c570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c574:	2b40      	cmp	r3, #64	; 0x40
 800c576:	bf0c      	ite	eq
 800c578:	2301      	moveq	r3, #1
 800c57a:	2300      	movne	r3, #0
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c586:	f003 0308 	and.w	r3, r3, #8
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d103      	bne.n	800c596 <HAL_UART_IRQHandler+0x17a>
 800c58e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c592:	2b00      	cmp	r3, #0
 800c594:	d04f      	beq.n	800c636 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 fa9a 	bl	800cad0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	695b      	ldr	r3, [r3, #20]
 800c5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5a6:	2b40      	cmp	r3, #64	; 0x40
 800c5a8:	d141      	bne.n	800c62e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	3314      	adds	r3, #20
 800c5b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5b8:	e853 3f00 	ldrex	r3, [r3]
 800c5bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c5c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	3314      	adds	r3, #20
 800c5d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c5d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c5da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c5e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c5e6:	e841 2300 	strex	r3, r2, [r1]
 800c5ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c5ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d1d9      	bne.n	800c5aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d013      	beq.n	800c626 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c602:	4a7d      	ldr	r2, [pc, #500]	; (800c7f8 <HAL_UART_IRQHandler+0x3dc>)
 800c604:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7fa ff49 	bl	80074a2 <HAL_DMA_Abort_IT>
 800c610:	4603      	mov	r3, r0
 800c612:	2b00      	cmp	r3, #0
 800c614:	d016      	beq.n	800c644 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c61a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c620:	4610      	mov	r0, r2
 800c622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c624:	e00e      	b.n	800c644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 f990 	bl	800c94c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c62c:	e00a      	b.n	800c644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 f98c 	bl	800c94c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c634:	e006      	b.n	800c644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 f988 	bl	800c94c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c642:	e170      	b.n	800c926 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c644:	bf00      	nop
    return;
 800c646:	e16e      	b.n	800c926 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	f040 814a 	bne.w	800c8e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c656:	f003 0310 	and.w	r3, r3, #16
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f000 8143 	beq.w	800c8e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c664:	f003 0310 	and.w	r3, r3, #16
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f000 813c 	beq.w	800c8e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c66e:	2300      	movs	r3, #0
 800c670:	60bb      	str	r3, [r7, #8]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	60bb      	str	r3, [r7, #8]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	60bb      	str	r3, [r7, #8]
 800c682:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	695b      	ldr	r3, [r3, #20]
 800c68a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c68e:	2b40      	cmp	r3, #64	; 0x40
 800c690:	f040 80b4 	bne.w	800c7fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c6a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f000 8140 	beq.w	800c92a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c6ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	f080 8139 	bcs.w	800c92a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c6be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c4:	69db      	ldr	r3, [r3, #28]
 800c6c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6ca:	f000 8088 	beq.w	800c7de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	330c      	adds	r3, #12
 800c6d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c6dc:	e853 3f00 	ldrex	r3, [r3]
 800c6e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c6e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c6e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	330c      	adds	r3, #12
 800c6f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c6fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c6fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c702:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c706:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c70a:	e841 2300 	strex	r3, r2, [r1]
 800c70e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c716:	2b00      	cmp	r3, #0
 800c718:	d1d9      	bne.n	800c6ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	3314      	adds	r3, #20
 800c720:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c724:	e853 3f00 	ldrex	r3, [r3]
 800c728:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c72a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c72c:	f023 0301 	bic.w	r3, r3, #1
 800c730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	3314      	adds	r3, #20
 800c73a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c73e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c742:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c744:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c746:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c74a:	e841 2300 	strex	r3, r2, [r1]
 800c74e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1e1      	bne.n	800c71a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	3314      	adds	r3, #20
 800c75c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c760:	e853 3f00 	ldrex	r3, [r3]
 800c764:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c76c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	3314      	adds	r3, #20
 800c776:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c77a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c77c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c780:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c782:	e841 2300 	strex	r3, r2, [r1]
 800c786:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1e3      	bne.n	800c756 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2220      	movs	r2, #32
 800c792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	330c      	adds	r3, #12
 800c7a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7a6:	e853 3f00 	ldrex	r3, [r3]
 800c7aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c7ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7ae:	f023 0310 	bic.w	r3, r3, #16
 800c7b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	330c      	adds	r3, #12
 800c7bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c7c0:	65ba      	str	r2, [r7, #88]	; 0x58
 800c7c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c7c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c7c8:	e841 2300 	strex	r3, r2, [r1]
 800c7cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c7ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d1e3      	bne.n	800c79c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7fa fdf2 	bl	80073c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	1ad3      	subs	r3, r2, r3
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 f8b6 	bl	800c960 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c7f4:	e099      	b.n	800c92a <HAL_UART_IRQHandler+0x50e>
 800c7f6:	bf00      	nop
 800c7f8:	0800cb97 	.word	0x0800cb97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c804:	b29b      	uxth	r3, r3
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c810:	b29b      	uxth	r3, r3
 800c812:	2b00      	cmp	r3, #0
 800c814:	f000 808b 	beq.w	800c92e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f000 8086 	beq.w	800c92e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	330c      	adds	r3, #12
 800c828:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82c:	e853 3f00 	ldrex	r3, [r3]
 800c830:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c834:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c838:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	330c      	adds	r3, #12
 800c842:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c846:	647a      	str	r2, [r7, #68]	; 0x44
 800c848:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c84a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c84c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c84e:	e841 2300 	strex	r3, r2, [r1]
 800c852:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c856:	2b00      	cmp	r3, #0
 800c858:	d1e3      	bne.n	800c822 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	3314      	adds	r3, #20
 800c860:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c864:	e853 3f00 	ldrex	r3, [r3]
 800c868:	623b      	str	r3, [r7, #32]
   return(result);
 800c86a:	6a3b      	ldr	r3, [r7, #32]
 800c86c:	f023 0301 	bic.w	r3, r3, #1
 800c870:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	3314      	adds	r3, #20
 800c87a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c87e:	633a      	str	r2, [r7, #48]	; 0x30
 800c880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c886:	e841 2300 	strex	r3, r2, [r1]
 800c88a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1e3      	bne.n	800c85a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2220      	movs	r2, #32
 800c896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2200      	movs	r2, #0
 800c89e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	330c      	adds	r3, #12
 800c8a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	e853 3f00 	ldrex	r3, [r3]
 800c8ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f023 0310 	bic.w	r3, r3, #16
 800c8b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	330c      	adds	r3, #12
 800c8c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c8c4:	61fa      	str	r2, [r7, #28]
 800c8c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c8:	69b9      	ldr	r1, [r7, #24]
 800c8ca:	69fa      	ldr	r2, [r7, #28]
 800c8cc:	e841 2300 	strex	r3, r2, [r1]
 800c8d0:	617b      	str	r3, [r7, #20]
   return(result);
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d1e3      	bne.n	800c8a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c8d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c8dc:	4619      	mov	r1, r3
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 f83e 	bl	800c960 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c8e4:	e023      	b.n	800c92e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d009      	beq.n	800c906 <HAL_UART_IRQHandler+0x4ea>
 800c8f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d003      	beq.n	800c906 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f95d 	bl	800cbbe <UART_Transmit_IT>
    return;
 800c904:	e014      	b.n	800c930 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c90a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00e      	beq.n	800c930 <HAL_UART_IRQHandler+0x514>
 800c912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d008      	beq.n	800c930 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 f99d 	bl	800cc5e <UART_EndTransmit_IT>
    return;
 800c924:	e004      	b.n	800c930 <HAL_UART_IRQHandler+0x514>
    return;
 800c926:	bf00      	nop
 800c928:	e002      	b.n	800c930 <HAL_UART_IRQHandler+0x514>
      return;
 800c92a:	bf00      	nop
 800c92c:	e000      	b.n	800c930 <HAL_UART_IRQHandler+0x514>
      return;
 800c92e:	bf00      	nop
  }
}
 800c930:	37e8      	adds	r7, #232	; 0xe8
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop

0800c938 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c940:	bf00      	nop
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c954:	bf00      	nop
 800c956:	370c      	adds	r7, #12
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	460b      	mov	r3, r1
 800c96a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c96c:	bf00      	nop
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b090      	sub	sp, #64	; 0x40
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	60b9      	str	r1, [r7, #8]
 800c982:	603b      	str	r3, [r7, #0]
 800c984:	4613      	mov	r3, r2
 800c986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c988:	e050      	b.n	800ca2c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c98a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c98c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c990:	d04c      	beq.n	800ca2c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c994:	2b00      	cmp	r3, #0
 800c996:	d007      	beq.n	800c9a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c998:	f7fa fbd2 	bl	8007140 <HAL_GetTick>
 800c99c:	4602      	mov	r2, r0
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d241      	bcs.n	800ca2c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	330c      	adds	r3, #12
 800c9ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b2:	e853 3f00 	ldrex	r3, [r3]
 800c9b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c9be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	330c      	adds	r3, #12
 800c9c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9c8:	637a      	str	r2, [r7, #52]	; 0x34
 800c9ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9d0:	e841 2300 	strex	r3, r2, [r1]
 800c9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1e5      	bne.n	800c9a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	3314      	adds	r3, #20
 800c9e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	e853 3f00 	ldrex	r3, [r3]
 800c9ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	f023 0301 	bic.w	r3, r3, #1
 800c9f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	3314      	adds	r3, #20
 800c9fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9fc:	623a      	str	r2, [r7, #32]
 800c9fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca00:	69f9      	ldr	r1, [r7, #28]
 800ca02:	6a3a      	ldr	r2, [r7, #32]
 800ca04:	e841 2300 	strex	r3, r2, [r1]
 800ca08:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1e5      	bne.n	800c9dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2220      	movs	r2, #32
 800ca14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2220      	movs	r2, #32
 800ca1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ca28:	2303      	movs	r3, #3
 800ca2a:	e00f      	b.n	800ca4c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	4013      	ands	r3, r2
 800ca36:	68ba      	ldr	r2, [r7, #8]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	bf0c      	ite	eq
 800ca3c:	2301      	moveq	r3, #1
 800ca3e:	2300      	movne	r3, #0
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	461a      	mov	r2, r3
 800ca44:	79fb      	ldrb	r3, [r7, #7]
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d09f      	beq.n	800c98a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3740      	adds	r7, #64	; 0x40
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	4613      	mov	r3, r2
 800ca60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	68ba      	ldr	r2, [r7, #8]
 800ca66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	88fa      	ldrh	r2, [r7, #6]
 800ca6c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	88fa      	ldrh	r2, [r7, #6]
 800ca72:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2200      	movs	r2, #0
 800ca78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2222      	movs	r2, #34	; 0x22
 800ca7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	691b      	ldr	r3, [r3, #16]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d007      	beq.n	800caa2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	68da      	ldr	r2, [r3, #12]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800caa0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	695a      	ldr	r2, [r3, #20]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f042 0201 	orr.w	r2, r2, #1
 800cab0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	68da      	ldr	r2, [r3, #12]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f042 0220 	orr.w	r2, r2, #32
 800cac0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cac2:	2300      	movs	r3, #0
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3714      	adds	r7, #20
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr

0800cad0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b095      	sub	sp, #84	; 0x54
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	330c      	adds	r3, #12
 800cade:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae2:	e853 3f00 	ldrex	r3, [r3]
 800cae6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800caee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	330c      	adds	r3, #12
 800caf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800caf8:	643a      	str	r2, [r7, #64]	; 0x40
 800cafa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cafc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cafe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb00:	e841 2300 	strex	r3, r2, [r1]
 800cb04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1e5      	bne.n	800cad8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	3314      	adds	r3, #20
 800cb12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb14:	6a3b      	ldr	r3, [r7, #32]
 800cb16:	e853 3f00 	ldrex	r3, [r3]
 800cb1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	f023 0301 	bic.w	r3, r3, #1
 800cb22:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	3314      	adds	r3, #20
 800cb2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb34:	e841 2300 	strex	r3, r2, [r1]
 800cb38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d1e5      	bne.n	800cb0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d119      	bne.n	800cb7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	330c      	adds	r3, #12
 800cb4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	e853 3f00 	ldrex	r3, [r3]
 800cb56:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	f023 0310 	bic.w	r3, r3, #16
 800cb5e:	647b      	str	r3, [r7, #68]	; 0x44
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	330c      	adds	r3, #12
 800cb66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb68:	61ba      	str	r2, [r7, #24]
 800cb6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb6c:	6979      	ldr	r1, [r7, #20]
 800cb6e:	69ba      	ldr	r2, [r7, #24]
 800cb70:	e841 2300 	strex	r3, r2, [r1]
 800cb74:	613b      	str	r3, [r7, #16]
   return(result);
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1e5      	bne.n	800cb48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2220      	movs	r2, #32
 800cb80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cb8a:	bf00      	nop
 800cb8c:	3754      	adds	r7, #84	; 0x54
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr

0800cb96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b084      	sub	sp, #16
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2200      	movs	r2, #0
 800cba8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2200      	movs	r2, #0
 800cbae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f7ff fecb 	bl	800c94c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbb6:	bf00      	nop
 800cbb8:	3710      	adds	r7, #16
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cbbe:	b480      	push	{r7}
 800cbc0:	b085      	sub	sp, #20
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	2b21      	cmp	r3, #33	; 0x21
 800cbd0:	d13e      	bne.n	800cc50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbda:	d114      	bne.n	800cc06 <UART_Transmit_IT+0x48>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	691b      	ldr	r3, [r3, #16]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d110      	bne.n	800cc06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6a1b      	ldr	r3, [r3, #32]
 800cbe8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	881b      	ldrh	r3, [r3, #0]
 800cbee:	461a      	mov	r2, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbf8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6a1b      	ldr	r3, [r3, #32]
 800cbfe:	1c9a      	adds	r2, r3, #2
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	621a      	str	r2, [r3, #32]
 800cc04:	e008      	b.n	800cc18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a1b      	ldr	r3, [r3, #32]
 800cc0a:	1c59      	adds	r1, r3, #1
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	6211      	str	r1, [r2, #32]
 800cc10:	781a      	ldrb	r2, [r3, #0]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	3b01      	subs	r3, #1
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	4619      	mov	r1, r3
 800cc26:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d10f      	bne.n	800cc4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	68da      	ldr	r2, [r3, #12]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	68da      	ldr	r2, [r3, #12]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	e000      	b.n	800cc52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cc50:	2302      	movs	r3, #2
  }
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3714      	adds	r7, #20
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr

0800cc5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b082      	sub	sp, #8
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	68da      	ldr	r2, [r3, #12]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2220      	movs	r2, #32
 800cc7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f7ff fe5a 	bl	800c938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cc84:	2300      	movs	r3, #0
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b08c      	sub	sp, #48	; 0x30
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	2b22      	cmp	r3, #34	; 0x22
 800cca0:	f040 80ab 	bne.w	800cdfa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccac:	d117      	bne.n	800ccde <UART_Receive_IT+0x50>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	691b      	ldr	r3, [r3, #16]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d113      	bne.n	800ccde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cccc:	b29a      	uxth	r2, r3
 800ccce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd6:	1c9a      	adds	r2, r3, #2
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	629a      	str	r2, [r3, #40]	; 0x28
 800ccdc:	e026      	b.n	800cd2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cce2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cce4:	2300      	movs	r3, #0
 800cce6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccf0:	d007      	beq.n	800cd02 <UART_Receive_IT+0x74>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10a      	bne.n	800cd10 <UART_Receive_IT+0x82>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	691b      	ldr	r3, [r3, #16]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d106      	bne.n	800cd10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	b2da      	uxtb	r2, r3
 800cd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0c:	701a      	strb	r2, [r3, #0]
 800cd0e:	e008      	b.n	800cd22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd26:	1c5a      	adds	r2, r3, #1
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	3b01      	subs	r3, #1
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	4619      	mov	r1, r3
 800cd3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d15a      	bne.n	800cdf6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	68da      	ldr	r2, [r3, #12]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f022 0220 	bic.w	r2, r2, #32
 800cd4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68da      	ldr	r2, [r3, #12]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	695a      	ldr	r2, [r3, #20]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f022 0201 	bic.w	r2, r2, #1
 800cd6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2220      	movs	r2, #32
 800cd74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d135      	bne.n	800cdec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	330c      	adds	r3, #12
 800cd8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	e853 3f00 	ldrex	r3, [r3]
 800cd94:	613b      	str	r3, [r7, #16]
   return(result);
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	f023 0310 	bic.w	r3, r3, #16
 800cd9c:	627b      	str	r3, [r7, #36]	; 0x24
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	330c      	adds	r3, #12
 800cda4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cda6:	623a      	str	r2, [r7, #32]
 800cda8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdaa:	69f9      	ldr	r1, [r7, #28]
 800cdac:	6a3a      	ldr	r2, [r7, #32]
 800cdae:	e841 2300 	strex	r3, r2, [r1]
 800cdb2:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d1e5      	bne.n	800cd86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f003 0310 	and.w	r3, r3, #16
 800cdc4:	2b10      	cmp	r3, #16
 800cdc6:	d10a      	bne.n	800cdde <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cdc8:	2300      	movs	r3, #0
 800cdca:	60fb      	str	r3, [r7, #12]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	60fb      	str	r3, [r7, #12]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	60fb      	str	r3, [r7, #12]
 800cddc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cde2:	4619      	mov	r1, r3
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f7ff fdbb 	bl	800c960 <HAL_UARTEx_RxEventCallback>
 800cdea:	e002      	b.n	800cdf2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f7f4 fcdd 	bl	80017ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	e002      	b.n	800cdfc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	e000      	b.n	800cdfc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800cdfa:	2302      	movs	r3, #2
  }
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3730      	adds	r7, #48	; 0x30
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce08:	b0c0      	sub	sp, #256	; 0x100
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	691b      	ldr	r3, [r3, #16]
 800ce18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ce1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce20:	68d9      	ldr	r1, [r3, #12]
 800ce22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	ea40 0301 	orr.w	r3, r0, r1
 800ce2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ce2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce32:	689a      	ldr	r2, [r3, #8]
 800ce34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce38:	691b      	ldr	r3, [r3, #16]
 800ce3a:	431a      	orrs	r2, r3
 800ce3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce40:	695b      	ldr	r3, [r3, #20]
 800ce42:	431a      	orrs	r2, r3
 800ce44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce48:	69db      	ldr	r3, [r3, #28]
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ce50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ce5c:	f021 010c 	bic.w	r1, r1, #12
 800ce60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ce6a:	430b      	orrs	r3, r1
 800ce6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	695b      	ldr	r3, [r3, #20]
 800ce76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ce7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce7e:	6999      	ldr	r1, [r3, #24]
 800ce80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	ea40 0301 	orr.w	r3, r0, r1
 800ce8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ce8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	4b8f      	ldr	r3, [pc, #572]	; (800d0d0 <UART_SetConfig+0x2cc>)
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d005      	beq.n	800cea4 <UART_SetConfig+0xa0>
 800ce98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	4b8d      	ldr	r3, [pc, #564]	; (800d0d4 <UART_SetConfig+0x2d0>)
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d104      	bne.n	800ceae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cea4:	f7fd fcc4 	bl	800a830 <HAL_RCC_GetPCLK2Freq>
 800cea8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ceac:	e003      	b.n	800ceb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ceae:	f7fd fcab 	bl	800a808 <HAL_RCC_GetPCLK1Freq>
 800ceb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ceb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceba:	69db      	ldr	r3, [r3, #28]
 800cebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cec0:	f040 810c 	bne.w	800d0dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cec8:	2200      	movs	r2, #0
 800ceca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cece:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ced2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ced6:	4622      	mov	r2, r4
 800ced8:	462b      	mov	r3, r5
 800ceda:	1891      	adds	r1, r2, r2
 800cedc:	65b9      	str	r1, [r7, #88]	; 0x58
 800cede:	415b      	adcs	r3, r3
 800cee0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cee2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cee6:	4621      	mov	r1, r4
 800cee8:	eb12 0801 	adds.w	r8, r2, r1
 800ceec:	4629      	mov	r1, r5
 800ceee:	eb43 0901 	adc.w	r9, r3, r1
 800cef2:	f04f 0200 	mov.w	r2, #0
 800cef6:	f04f 0300 	mov.w	r3, #0
 800cefa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cefe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cf02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cf06:	4690      	mov	r8, r2
 800cf08:	4699      	mov	r9, r3
 800cf0a:	4623      	mov	r3, r4
 800cf0c:	eb18 0303 	adds.w	r3, r8, r3
 800cf10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cf14:	462b      	mov	r3, r5
 800cf16:	eb49 0303 	adc.w	r3, r9, r3
 800cf1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cf1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cf2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cf2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cf32:	460b      	mov	r3, r1
 800cf34:	18db      	adds	r3, r3, r3
 800cf36:	653b      	str	r3, [r7, #80]	; 0x50
 800cf38:	4613      	mov	r3, r2
 800cf3a:	eb42 0303 	adc.w	r3, r2, r3
 800cf3e:	657b      	str	r3, [r7, #84]	; 0x54
 800cf40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cf44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cf48:	f7f3 fe9e 	bl	8000c88 <__aeabi_uldivmod>
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	460b      	mov	r3, r1
 800cf50:	4b61      	ldr	r3, [pc, #388]	; (800d0d8 <UART_SetConfig+0x2d4>)
 800cf52:	fba3 2302 	umull	r2, r3, r3, r2
 800cf56:	095b      	lsrs	r3, r3, #5
 800cf58:	011c      	lsls	r4, r3, #4
 800cf5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cf64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cf68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cf6c:	4642      	mov	r2, r8
 800cf6e:	464b      	mov	r3, r9
 800cf70:	1891      	adds	r1, r2, r2
 800cf72:	64b9      	str	r1, [r7, #72]	; 0x48
 800cf74:	415b      	adcs	r3, r3
 800cf76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cf7c:	4641      	mov	r1, r8
 800cf7e:	eb12 0a01 	adds.w	sl, r2, r1
 800cf82:	4649      	mov	r1, r9
 800cf84:	eb43 0b01 	adc.w	fp, r3, r1
 800cf88:	f04f 0200 	mov.w	r2, #0
 800cf8c:	f04f 0300 	mov.w	r3, #0
 800cf90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cf94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cf98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf9c:	4692      	mov	sl, r2
 800cf9e:	469b      	mov	fp, r3
 800cfa0:	4643      	mov	r3, r8
 800cfa2:	eb1a 0303 	adds.w	r3, sl, r3
 800cfa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cfaa:	464b      	mov	r3, r9
 800cfac:	eb4b 0303 	adc.w	r3, fp, r3
 800cfb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cfb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cfc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cfc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cfc8:	460b      	mov	r3, r1
 800cfca:	18db      	adds	r3, r3, r3
 800cfcc:	643b      	str	r3, [r7, #64]	; 0x40
 800cfce:	4613      	mov	r3, r2
 800cfd0:	eb42 0303 	adc.w	r3, r2, r3
 800cfd4:	647b      	str	r3, [r7, #68]	; 0x44
 800cfd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cfda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cfde:	f7f3 fe53 	bl	8000c88 <__aeabi_uldivmod>
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	4611      	mov	r1, r2
 800cfe8:	4b3b      	ldr	r3, [pc, #236]	; (800d0d8 <UART_SetConfig+0x2d4>)
 800cfea:	fba3 2301 	umull	r2, r3, r3, r1
 800cfee:	095b      	lsrs	r3, r3, #5
 800cff0:	2264      	movs	r2, #100	; 0x64
 800cff2:	fb02 f303 	mul.w	r3, r2, r3
 800cff6:	1acb      	subs	r3, r1, r3
 800cff8:	00db      	lsls	r3, r3, #3
 800cffa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cffe:	4b36      	ldr	r3, [pc, #216]	; (800d0d8 <UART_SetConfig+0x2d4>)
 800d000:	fba3 2302 	umull	r2, r3, r3, r2
 800d004:	095b      	lsrs	r3, r3, #5
 800d006:	005b      	lsls	r3, r3, #1
 800d008:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d00c:	441c      	add	r4, r3
 800d00e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d012:	2200      	movs	r2, #0
 800d014:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d018:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d01c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d020:	4642      	mov	r2, r8
 800d022:	464b      	mov	r3, r9
 800d024:	1891      	adds	r1, r2, r2
 800d026:	63b9      	str	r1, [r7, #56]	; 0x38
 800d028:	415b      	adcs	r3, r3
 800d02a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d02c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d030:	4641      	mov	r1, r8
 800d032:	1851      	adds	r1, r2, r1
 800d034:	6339      	str	r1, [r7, #48]	; 0x30
 800d036:	4649      	mov	r1, r9
 800d038:	414b      	adcs	r3, r1
 800d03a:	637b      	str	r3, [r7, #52]	; 0x34
 800d03c:	f04f 0200 	mov.w	r2, #0
 800d040:	f04f 0300 	mov.w	r3, #0
 800d044:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d048:	4659      	mov	r1, fp
 800d04a:	00cb      	lsls	r3, r1, #3
 800d04c:	4651      	mov	r1, sl
 800d04e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d052:	4651      	mov	r1, sl
 800d054:	00ca      	lsls	r2, r1, #3
 800d056:	4610      	mov	r0, r2
 800d058:	4619      	mov	r1, r3
 800d05a:	4603      	mov	r3, r0
 800d05c:	4642      	mov	r2, r8
 800d05e:	189b      	adds	r3, r3, r2
 800d060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d064:	464b      	mov	r3, r9
 800d066:	460a      	mov	r2, r1
 800d068:	eb42 0303 	adc.w	r3, r2, r3
 800d06c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d07c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d080:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d084:	460b      	mov	r3, r1
 800d086:	18db      	adds	r3, r3, r3
 800d088:	62bb      	str	r3, [r7, #40]	; 0x28
 800d08a:	4613      	mov	r3, r2
 800d08c:	eb42 0303 	adc.w	r3, r2, r3
 800d090:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d092:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d096:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d09a:	f7f3 fdf5 	bl	8000c88 <__aeabi_uldivmod>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	4b0d      	ldr	r3, [pc, #52]	; (800d0d8 <UART_SetConfig+0x2d4>)
 800d0a4:	fba3 1302 	umull	r1, r3, r3, r2
 800d0a8:	095b      	lsrs	r3, r3, #5
 800d0aa:	2164      	movs	r1, #100	; 0x64
 800d0ac:	fb01 f303 	mul.w	r3, r1, r3
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	00db      	lsls	r3, r3, #3
 800d0b4:	3332      	adds	r3, #50	; 0x32
 800d0b6:	4a08      	ldr	r2, [pc, #32]	; (800d0d8 <UART_SetConfig+0x2d4>)
 800d0b8:	fba2 2303 	umull	r2, r3, r2, r3
 800d0bc:	095b      	lsrs	r3, r3, #5
 800d0be:	f003 0207 	and.w	r2, r3, #7
 800d0c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4422      	add	r2, r4
 800d0ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d0cc:	e105      	b.n	800d2da <UART_SetConfig+0x4d6>
 800d0ce:	bf00      	nop
 800d0d0:	40011000 	.word	0x40011000
 800d0d4:	40011400 	.word	0x40011400
 800d0d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d0dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d0e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d0ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d0ee:	4642      	mov	r2, r8
 800d0f0:	464b      	mov	r3, r9
 800d0f2:	1891      	adds	r1, r2, r2
 800d0f4:	6239      	str	r1, [r7, #32]
 800d0f6:	415b      	adcs	r3, r3
 800d0f8:	627b      	str	r3, [r7, #36]	; 0x24
 800d0fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d0fe:	4641      	mov	r1, r8
 800d100:	1854      	adds	r4, r2, r1
 800d102:	4649      	mov	r1, r9
 800d104:	eb43 0501 	adc.w	r5, r3, r1
 800d108:	f04f 0200 	mov.w	r2, #0
 800d10c:	f04f 0300 	mov.w	r3, #0
 800d110:	00eb      	lsls	r3, r5, #3
 800d112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d116:	00e2      	lsls	r2, r4, #3
 800d118:	4614      	mov	r4, r2
 800d11a:	461d      	mov	r5, r3
 800d11c:	4643      	mov	r3, r8
 800d11e:	18e3      	adds	r3, r4, r3
 800d120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d124:	464b      	mov	r3, r9
 800d126:	eb45 0303 	adc.w	r3, r5, r3
 800d12a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d13a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d13e:	f04f 0200 	mov.w	r2, #0
 800d142:	f04f 0300 	mov.w	r3, #0
 800d146:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d14a:	4629      	mov	r1, r5
 800d14c:	008b      	lsls	r3, r1, #2
 800d14e:	4621      	mov	r1, r4
 800d150:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d154:	4621      	mov	r1, r4
 800d156:	008a      	lsls	r2, r1, #2
 800d158:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d15c:	f7f3 fd94 	bl	8000c88 <__aeabi_uldivmod>
 800d160:	4602      	mov	r2, r0
 800d162:	460b      	mov	r3, r1
 800d164:	4b60      	ldr	r3, [pc, #384]	; (800d2e8 <UART_SetConfig+0x4e4>)
 800d166:	fba3 2302 	umull	r2, r3, r3, r2
 800d16a:	095b      	lsrs	r3, r3, #5
 800d16c:	011c      	lsls	r4, r3, #4
 800d16e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d172:	2200      	movs	r2, #0
 800d174:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d178:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d17c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d180:	4642      	mov	r2, r8
 800d182:	464b      	mov	r3, r9
 800d184:	1891      	adds	r1, r2, r2
 800d186:	61b9      	str	r1, [r7, #24]
 800d188:	415b      	adcs	r3, r3
 800d18a:	61fb      	str	r3, [r7, #28]
 800d18c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d190:	4641      	mov	r1, r8
 800d192:	1851      	adds	r1, r2, r1
 800d194:	6139      	str	r1, [r7, #16]
 800d196:	4649      	mov	r1, r9
 800d198:	414b      	adcs	r3, r1
 800d19a:	617b      	str	r3, [r7, #20]
 800d19c:	f04f 0200 	mov.w	r2, #0
 800d1a0:	f04f 0300 	mov.w	r3, #0
 800d1a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d1a8:	4659      	mov	r1, fp
 800d1aa:	00cb      	lsls	r3, r1, #3
 800d1ac:	4651      	mov	r1, sl
 800d1ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1b2:	4651      	mov	r1, sl
 800d1b4:	00ca      	lsls	r2, r1, #3
 800d1b6:	4610      	mov	r0, r2
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	4642      	mov	r2, r8
 800d1be:	189b      	adds	r3, r3, r2
 800d1c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d1c4:	464b      	mov	r3, r9
 800d1c6:	460a      	mov	r2, r1
 800d1c8:	eb42 0303 	adc.w	r3, r2, r3
 800d1cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d1d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800d1da:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d1dc:	f04f 0200 	mov.w	r2, #0
 800d1e0:	f04f 0300 	mov.w	r3, #0
 800d1e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d1e8:	4649      	mov	r1, r9
 800d1ea:	008b      	lsls	r3, r1, #2
 800d1ec:	4641      	mov	r1, r8
 800d1ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d1f2:	4641      	mov	r1, r8
 800d1f4:	008a      	lsls	r2, r1, #2
 800d1f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d1fa:	f7f3 fd45 	bl	8000c88 <__aeabi_uldivmod>
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	4b39      	ldr	r3, [pc, #228]	; (800d2e8 <UART_SetConfig+0x4e4>)
 800d204:	fba3 1302 	umull	r1, r3, r3, r2
 800d208:	095b      	lsrs	r3, r3, #5
 800d20a:	2164      	movs	r1, #100	; 0x64
 800d20c:	fb01 f303 	mul.w	r3, r1, r3
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	011b      	lsls	r3, r3, #4
 800d214:	3332      	adds	r3, #50	; 0x32
 800d216:	4a34      	ldr	r2, [pc, #208]	; (800d2e8 <UART_SetConfig+0x4e4>)
 800d218:	fba2 2303 	umull	r2, r3, r2, r3
 800d21c:	095b      	lsrs	r3, r3, #5
 800d21e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d222:	441c      	add	r4, r3
 800d224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d228:	2200      	movs	r2, #0
 800d22a:	673b      	str	r3, [r7, #112]	; 0x70
 800d22c:	677a      	str	r2, [r7, #116]	; 0x74
 800d22e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d232:	4642      	mov	r2, r8
 800d234:	464b      	mov	r3, r9
 800d236:	1891      	adds	r1, r2, r2
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	415b      	adcs	r3, r3
 800d23c:	60fb      	str	r3, [r7, #12]
 800d23e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d242:	4641      	mov	r1, r8
 800d244:	1851      	adds	r1, r2, r1
 800d246:	6039      	str	r1, [r7, #0]
 800d248:	4649      	mov	r1, r9
 800d24a:	414b      	adcs	r3, r1
 800d24c:	607b      	str	r3, [r7, #4]
 800d24e:	f04f 0200 	mov.w	r2, #0
 800d252:	f04f 0300 	mov.w	r3, #0
 800d256:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d25a:	4659      	mov	r1, fp
 800d25c:	00cb      	lsls	r3, r1, #3
 800d25e:	4651      	mov	r1, sl
 800d260:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d264:	4651      	mov	r1, sl
 800d266:	00ca      	lsls	r2, r1, #3
 800d268:	4610      	mov	r0, r2
 800d26a:	4619      	mov	r1, r3
 800d26c:	4603      	mov	r3, r0
 800d26e:	4642      	mov	r2, r8
 800d270:	189b      	adds	r3, r3, r2
 800d272:	66bb      	str	r3, [r7, #104]	; 0x68
 800d274:	464b      	mov	r3, r9
 800d276:	460a      	mov	r2, r1
 800d278:	eb42 0303 	adc.w	r3, r2, r3
 800d27c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d27e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	663b      	str	r3, [r7, #96]	; 0x60
 800d288:	667a      	str	r2, [r7, #100]	; 0x64
 800d28a:	f04f 0200 	mov.w	r2, #0
 800d28e:	f04f 0300 	mov.w	r3, #0
 800d292:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d296:	4649      	mov	r1, r9
 800d298:	008b      	lsls	r3, r1, #2
 800d29a:	4641      	mov	r1, r8
 800d29c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2a0:	4641      	mov	r1, r8
 800d2a2:	008a      	lsls	r2, r1, #2
 800d2a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d2a8:	f7f3 fcee 	bl	8000c88 <__aeabi_uldivmod>
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	460b      	mov	r3, r1
 800d2b0:	4b0d      	ldr	r3, [pc, #52]	; (800d2e8 <UART_SetConfig+0x4e4>)
 800d2b2:	fba3 1302 	umull	r1, r3, r3, r2
 800d2b6:	095b      	lsrs	r3, r3, #5
 800d2b8:	2164      	movs	r1, #100	; 0x64
 800d2ba:	fb01 f303 	mul.w	r3, r1, r3
 800d2be:	1ad3      	subs	r3, r2, r3
 800d2c0:	011b      	lsls	r3, r3, #4
 800d2c2:	3332      	adds	r3, #50	; 0x32
 800d2c4:	4a08      	ldr	r2, [pc, #32]	; (800d2e8 <UART_SetConfig+0x4e4>)
 800d2c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ca:	095b      	lsrs	r3, r3, #5
 800d2cc:	f003 020f 	and.w	r2, r3, #15
 800d2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4422      	add	r2, r4
 800d2d8:	609a      	str	r2, [r3, #8]
}
 800d2da:	bf00      	nop
 800d2dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2e6:	bf00      	nop
 800d2e8:	51eb851f 	.word	0x51eb851f

0800d2ec <__NVIC_SetPriority>:
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	6039      	str	r1, [r7, #0]
 800d2f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d2f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	db0a      	blt.n	800d316 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	b2da      	uxtb	r2, r3
 800d304:	490c      	ldr	r1, [pc, #48]	; (800d338 <__NVIC_SetPriority+0x4c>)
 800d306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d30a:	0112      	lsls	r2, r2, #4
 800d30c:	b2d2      	uxtb	r2, r2
 800d30e:	440b      	add	r3, r1
 800d310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d314:	e00a      	b.n	800d32c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	b2da      	uxtb	r2, r3
 800d31a:	4908      	ldr	r1, [pc, #32]	; (800d33c <__NVIC_SetPriority+0x50>)
 800d31c:	79fb      	ldrb	r3, [r7, #7]
 800d31e:	f003 030f 	and.w	r3, r3, #15
 800d322:	3b04      	subs	r3, #4
 800d324:	0112      	lsls	r2, r2, #4
 800d326:	b2d2      	uxtb	r2, r2
 800d328:	440b      	add	r3, r1
 800d32a:	761a      	strb	r2, [r3, #24]
}
 800d32c:	bf00      	nop
 800d32e:	370c      	adds	r7, #12
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr
 800d338:	e000e100 	.word	0xe000e100
 800d33c:	e000ed00 	.word	0xe000ed00

0800d340 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d340:	b580      	push	{r7, lr}
 800d342:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d344:	2100      	movs	r1, #0
 800d346:	f06f 0004 	mvn.w	r0, #4
 800d34a:	f7ff ffcf 	bl	800d2ec <__NVIC_SetPriority>
#endif
}
 800d34e:	bf00      	nop
 800d350:	bd80      	pop	{r7, pc}
	...

0800d354 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d35a:	f3ef 8305 	mrs	r3, IPSR
 800d35e:	603b      	str	r3, [r7, #0]
  return(result);
 800d360:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d362:	2b00      	cmp	r3, #0
 800d364:	d003      	beq.n	800d36e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d366:	f06f 0305 	mvn.w	r3, #5
 800d36a:	607b      	str	r3, [r7, #4]
 800d36c:	e00c      	b.n	800d388 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d36e:	4b0a      	ldr	r3, [pc, #40]	; (800d398 <osKernelInitialize+0x44>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d105      	bne.n	800d382 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d376:	4b08      	ldr	r3, [pc, #32]	; (800d398 <osKernelInitialize+0x44>)
 800d378:	2201      	movs	r2, #1
 800d37a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d37c:	2300      	movs	r3, #0
 800d37e:	607b      	str	r3, [r7, #4]
 800d380:	e002      	b.n	800d388 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d386:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d388:	687b      	ldr	r3, [r7, #4]
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr
 800d396:	bf00      	nop
 800d398:	20000868 	.word	0x20000868

0800d39c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3a2:	f3ef 8305 	mrs	r3, IPSR
 800d3a6:	603b      	str	r3, [r7, #0]
  return(result);
 800d3a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d003      	beq.n	800d3b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d3ae:	f06f 0305 	mvn.w	r3, #5
 800d3b2:	607b      	str	r3, [r7, #4]
 800d3b4:	e010      	b.n	800d3d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d3b6:	4b0b      	ldr	r3, [pc, #44]	; (800d3e4 <osKernelStart+0x48>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d109      	bne.n	800d3d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d3be:	f7ff ffbf 	bl	800d340 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d3c2:	4b08      	ldr	r3, [pc, #32]	; (800d3e4 <osKernelStart+0x48>)
 800d3c4:	2202      	movs	r2, #2
 800d3c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d3c8:	f001 f912 	bl	800e5f0 <vTaskStartScheduler>
      stat = osOK;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	607b      	str	r3, [r7, #4]
 800d3d0:	e002      	b.n	800d3d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d3d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d3d8:	687b      	ldr	r3, [r7, #4]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	20000868 	.word	0x20000868

0800d3e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b08e      	sub	sp, #56	; 0x38
 800d3ec:	af04      	add	r7, sp, #16
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3f8:	f3ef 8305 	mrs	r3, IPSR
 800d3fc:	617b      	str	r3, [r7, #20]
  return(result);
 800d3fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d400:	2b00      	cmp	r3, #0
 800d402:	d17f      	bne.n	800d504 <osThreadNew+0x11c>
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d07c      	beq.n	800d504 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800d40a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d40e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d410:	2318      	movs	r3, #24
 800d412:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d414:	2300      	movs	r3, #0
 800d416:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d41c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d045      	beq.n	800d4b0 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d002      	beq.n	800d432 <osThreadNew+0x4a>
        name = attr->name;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	699b      	ldr	r3, [r3, #24]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d002      	beq.n	800d440 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	699b      	ldr	r3, [r3, #24]
 800d43e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d008      	beq.n	800d458 <osThreadNew+0x70>
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	2b38      	cmp	r3, #56	; 0x38
 800d44a:	d805      	bhi.n	800d458 <osThreadNew+0x70>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	f003 0301 	and.w	r3, r3, #1
 800d454:	2b00      	cmp	r3, #0
 800d456:	d001      	beq.n	800d45c <osThreadNew+0x74>
        return (NULL);
 800d458:	2300      	movs	r3, #0
 800d45a:	e054      	b.n	800d506 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	695b      	ldr	r3, [r3, #20]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d003      	beq.n	800d46c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	695b      	ldr	r3, [r3, #20]
 800d468:	089b      	lsrs	r3, r3, #2
 800d46a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	689b      	ldr	r3, [r3, #8]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d00e      	beq.n	800d492 <osThreadNew+0xaa>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	2b5b      	cmp	r3, #91	; 0x5b
 800d47a:	d90a      	bls.n	800d492 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d480:	2b00      	cmp	r3, #0
 800d482:	d006      	beq.n	800d492 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	695b      	ldr	r3, [r3, #20]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d002      	beq.n	800d492 <osThreadNew+0xaa>
        mem = 1;
 800d48c:	2301      	movs	r3, #1
 800d48e:	61bb      	str	r3, [r7, #24]
 800d490:	e010      	b.n	800d4b4 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	689b      	ldr	r3, [r3, #8]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d10c      	bne.n	800d4b4 <osThreadNew+0xcc>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d108      	bne.n	800d4b4 <osThreadNew+0xcc>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d104      	bne.n	800d4b4 <osThreadNew+0xcc>
          mem = 0;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	61bb      	str	r3, [r7, #24]
 800d4ae:	e001      	b.n	800d4b4 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d4b4:	69bb      	ldr	r3, [r7, #24]
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d110      	bne.n	800d4dc <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d4c2:	9202      	str	r2, [sp, #8]
 800d4c4:	9301      	str	r3, [sp, #4]
 800d4c6:	69fb      	ldr	r3, [r7, #28]
 800d4c8:	9300      	str	r3, [sp, #0]
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	6a3a      	ldr	r2, [r7, #32]
 800d4ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f000 fe39 	bl	800e148 <xTaskCreateStatic>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	613b      	str	r3, [r7, #16]
 800d4da:	e013      	b.n	800d504 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d110      	bne.n	800d504 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d4e2:	6a3b      	ldr	r3, [r7, #32]
 800d4e4:	b29a      	uxth	r2, r3
 800d4e6:	f107 0310 	add.w	r3, r7, #16
 800d4ea:	9301      	str	r3, [sp, #4]
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	9300      	str	r3, [sp, #0]
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f000 fe84 	bl	800e202 <xTaskCreate>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d001      	beq.n	800d504 <osThreadNew+0x11c>
            hTask = NULL;
 800d500:	2300      	movs	r3, #0
 800d502:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d504:	693b      	ldr	r3, [r7, #16]
}
 800d506:	4618      	mov	r0, r3
 800d508:	3728      	adds	r7, #40	; 0x28
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d50e:	b580      	push	{r7, lr}
 800d510:	b084      	sub	sp, #16
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d516:	f3ef 8305 	mrs	r3, IPSR
 800d51a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d51c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d003      	beq.n	800d52a <osDelay+0x1c>
    stat = osErrorISR;
 800d522:	f06f 0305 	mvn.w	r3, #5
 800d526:	60fb      	str	r3, [r7, #12]
 800d528:	e007      	b.n	800d53a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d52a:	2300      	movs	r3, #0
 800d52c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d002      	beq.n	800d53a <osDelay+0x2c>
      vTaskDelay(ticks);
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f001 f827 	bl	800e588 <vTaskDelay>
    }
  }

  return (stat);
 800d53a:	68fb      	ldr	r3, [r7, #12]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3710      	adds	r7, #16
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800d544:	b580      	push	{r7, lr}
 800d546:	b086      	sub	sp, #24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d54c:	f3ef 8305 	mrs	r3, IPSR
 800d550:	60fb      	str	r3, [r7, #12]
  return(result);
 800d552:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800d554:	2b00      	cmp	r3, #0
 800d556:	d003      	beq.n	800d560 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800d558:	f06f 0305 	mvn.w	r3, #5
 800d55c:	617b      	str	r3, [r7, #20]
 800d55e:	e019      	b.n	800d594 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800d560:	2300      	movs	r3, #0
 800d562:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800d564:	f001 f956 	bl	800e814 <xTaskGetTickCount>
 800d568:	4603      	mov	r3, r0
 800d56a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d009      	beq.n	800d58e <osDelayUntil+0x4a>
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	db06      	blt.n	800d58e <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800d580:	f107 0308 	add.w	r3, r7, #8
 800d584:	6939      	ldr	r1, [r7, #16]
 800d586:	4618      	mov	r0, r3
 800d588:	f000 ff80 	bl	800e48c <vTaskDelayUntil>
 800d58c:	e002      	b.n	800d594 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800d58e:	f06f 0303 	mvn.w	r3, #3
 800d592:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d594:	697b      	ldr	r3, [r7, #20]
}
 800d596:	4618      	mov	r0, r3
 800d598:	3718      	adds	r7, #24
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
	...

0800d5a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	60b9      	str	r1, [r7, #8]
 800d5aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	4a07      	ldr	r2, [pc, #28]	; (800d5cc <vApplicationGetIdleTaskMemory+0x2c>)
 800d5b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	4a06      	ldr	r2, [pc, #24]	; (800d5d0 <vApplicationGetIdleTaskMemory+0x30>)
 800d5b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5be:	601a      	str	r2, [r3, #0]
}
 800d5c0:	bf00      	nop
 800d5c2:	3714      	adds	r7, #20
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr
 800d5cc:	2000086c 	.word	0x2000086c
 800d5d0:	200008c8 	.word	0x200008c8

0800d5d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d5d4:	b480      	push	{r7}
 800d5d6:	b085      	sub	sp, #20
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	4a07      	ldr	r2, [pc, #28]	; (800d600 <vApplicationGetTimerTaskMemory+0x2c>)
 800d5e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	4a06      	ldr	r2, [pc, #24]	; (800d604 <vApplicationGetTimerTaskMemory+0x30>)
 800d5ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d5f2:	601a      	str	r2, [r3, #0]
}
 800d5f4:	bf00      	nop
 800d5f6:	3714      	adds	r7, #20
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr
 800d600:	200010c8 	.word	0x200010c8
 800d604:	20001124 	.word	0x20001124

0800d608 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d608:	b480      	push	{r7}
 800d60a:	b083      	sub	sp, #12
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f103 0208 	add.w	r2, r3, #8
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d620:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f103 0208 	add.w	r2, r3, #8
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f103 0208 	add.w	r2, r3, #8
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d63c:	bf00      	nop
 800d63e:	370c      	adds	r7, #12
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr

0800d648 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d648:	b480      	push	{r7}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d656:	bf00      	nop
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d662:	b480      	push	{r7}
 800d664:	b085      	sub	sp, #20
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
 800d66a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	689a      	ldr	r2, [r3, #8]
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	689b      	ldr	r3, [r3, #8]
 800d684:	683a      	ldr	r2, [r7, #0]
 800d686:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	683a      	ldr	r2, [r7, #0]
 800d68c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	1c5a      	adds	r2, r3, #1
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	601a      	str	r2, [r3, #0]
}
 800d69e:	bf00      	nop
 800d6a0:	3714      	adds	r7, #20
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr

0800d6aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d6aa:	b480      	push	{r7}
 800d6ac:	b085      	sub	sp, #20
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
 800d6b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6c0:	d103      	bne.n	800d6ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	691b      	ldr	r3, [r3, #16]
 800d6c6:	60fb      	str	r3, [r7, #12]
 800d6c8:	e00c      	b.n	800d6e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	3308      	adds	r3, #8
 800d6ce:	60fb      	str	r3, [r7, #12]
 800d6d0:	e002      	b.n	800d6d8 <vListInsert+0x2e>
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	60fb      	str	r3, [r7, #12]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d2f6      	bcs.n	800d6d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	685a      	ldr	r2, [r3, #4]
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	683a      	ldr	r2, [r7, #0]
 800d6f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	68fa      	ldr	r2, [r7, #12]
 800d6f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	683a      	ldr	r2, [r7, #0]
 800d6fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	1c5a      	adds	r2, r3, #1
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	601a      	str	r2, [r3, #0]
}
 800d710:	bf00      	nop
 800d712:	3714      	adds	r7, #20
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr

0800d71c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d71c:	b480      	push	{r7}
 800d71e:	b085      	sub	sp, #20
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	691b      	ldr	r3, [r3, #16]
 800d728:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	6892      	ldr	r2, [r2, #8]
 800d732:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	689b      	ldr	r3, [r3, #8]
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	6852      	ldr	r2, [r2, #4]
 800d73c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	429a      	cmp	r2, r3
 800d746:	d103      	bne.n	800d750 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	689a      	ldr	r2, [r3, #8]
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2200      	movs	r2, #0
 800d754:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	1e5a      	subs	r2, r3, #1
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3714      	adds	r7, #20
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr

0800d770 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d10a      	bne.n	800d79a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d788:	f383 8811 	msr	BASEPRI, r3
 800d78c:	f3bf 8f6f 	isb	sy
 800d790:	f3bf 8f4f 	dsb	sy
 800d794:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d796:	bf00      	nop
 800d798:	e7fe      	b.n	800d798 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d79a:	f002 f8cb 	bl	800f934 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7a6:	68f9      	ldr	r1, [r7, #12]
 800d7a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d7aa:	fb01 f303 	mul.w	r3, r1, r3
 800d7ae:	441a      	add	r2, r3
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7ca:	3b01      	subs	r3, #1
 800d7cc:	68f9      	ldr	r1, [r7, #12]
 800d7ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d7d0:	fb01 f303 	mul.w	r3, r1, r3
 800d7d4:	441a      	add	r2, r3
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	22ff      	movs	r2, #255	; 0xff
 800d7de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	22ff      	movs	r2, #255	; 0xff
 800d7e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d114      	bne.n	800d81a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d01a      	beq.n	800d82e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	3310      	adds	r3, #16
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f001 f981 	bl	800eb04 <xTaskRemoveFromEventList>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d012      	beq.n	800d82e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d808:	4b0c      	ldr	r3, [pc, #48]	; (800d83c <xQueueGenericReset+0xcc>)
 800d80a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d80e:	601a      	str	r2, [r3, #0]
 800d810:	f3bf 8f4f 	dsb	sy
 800d814:	f3bf 8f6f 	isb	sy
 800d818:	e009      	b.n	800d82e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	3310      	adds	r3, #16
 800d81e:	4618      	mov	r0, r3
 800d820:	f7ff fef2 	bl	800d608 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	3324      	adds	r3, #36	; 0x24
 800d828:	4618      	mov	r0, r3
 800d82a:	f7ff feed 	bl	800d608 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d82e:	f002 f8b1 	bl	800f994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d832:	2301      	movs	r3, #1
}
 800d834:	4618      	mov	r0, r3
 800d836:	3710      	adds	r7, #16
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	e000ed04 	.word	0xe000ed04

0800d840 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d840:	b580      	push	{r7, lr}
 800d842:	b08e      	sub	sp, #56	; 0x38
 800d844:	af02      	add	r7, sp, #8
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	60b9      	str	r1, [r7, #8]
 800d84a:	607a      	str	r2, [r7, #4]
 800d84c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10a      	bne.n	800d86a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d858:	f383 8811 	msr	BASEPRI, r3
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d866:	bf00      	nop
 800d868:	e7fe      	b.n	800d868 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d10a      	bne.n	800d886 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d874:	f383 8811 	msr	BASEPRI, r3
 800d878:	f3bf 8f6f 	isb	sy
 800d87c:	f3bf 8f4f 	dsb	sy
 800d880:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d882:	bf00      	nop
 800d884:	e7fe      	b.n	800d884 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d002      	beq.n	800d892 <xQueueGenericCreateStatic+0x52>
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d001      	beq.n	800d896 <xQueueGenericCreateStatic+0x56>
 800d892:	2301      	movs	r3, #1
 800d894:	e000      	b.n	800d898 <xQueueGenericCreateStatic+0x58>
 800d896:	2300      	movs	r3, #0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10a      	bne.n	800d8b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	623b      	str	r3, [r7, #32]
}
 800d8ae:	bf00      	nop
 800d8b0:	e7fe      	b.n	800d8b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d102      	bne.n	800d8be <xQueueGenericCreateStatic+0x7e>
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d101      	bne.n	800d8c2 <xQueueGenericCreateStatic+0x82>
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e000      	b.n	800d8c4 <xQueueGenericCreateStatic+0x84>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10a      	bne.n	800d8de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	f3bf 8f6f 	isb	sy
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	61fb      	str	r3, [r7, #28]
}
 800d8da:	bf00      	nop
 800d8dc:	e7fe      	b.n	800d8dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d8de:	2350      	movs	r3, #80	; 0x50
 800d8e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	2b50      	cmp	r3, #80	; 0x50
 800d8e6:	d00a      	beq.n	800d8fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ec:	f383 8811 	msr	BASEPRI, r3
 800d8f0:	f3bf 8f6f 	isb	sy
 800d8f4:	f3bf 8f4f 	dsb	sy
 800d8f8:	61bb      	str	r3, [r7, #24]
}
 800d8fa:	bf00      	nop
 800d8fc:	e7fe      	b.n	800d8fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d8fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00d      	beq.n	800d926 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90c:	2201      	movs	r2, #1
 800d90e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d912:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	4613      	mov	r3, r2
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	68b9      	ldr	r1, [r7, #8]
 800d920:	68f8      	ldr	r0, [r7, #12]
 800d922:	f000 f805 	bl	800d930 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d928:	4618      	mov	r0, r3
 800d92a:	3730      	adds	r7, #48	; 0x30
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	60b9      	str	r1, [r7, #8]
 800d93a:	607a      	str	r2, [r7, #4]
 800d93c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d103      	bne.n	800d94c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d944:	69bb      	ldr	r3, [r7, #24]
 800d946:	69ba      	ldr	r2, [r7, #24]
 800d948:	601a      	str	r2, [r3, #0]
 800d94a:	e002      	b.n	800d952 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	68fa      	ldr	r2, [r7, #12]
 800d956:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	68ba      	ldr	r2, [r7, #8]
 800d95c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d95e:	2101      	movs	r1, #1
 800d960:	69b8      	ldr	r0, [r7, #24]
 800d962:	f7ff ff05 	bl	800d770 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d966:	69bb      	ldr	r3, [r7, #24]
 800d968:	78fa      	ldrb	r2, [r7, #3]
 800d96a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d96e:	bf00      	nop
 800d970:	3710      	adds	r7, #16
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
	...

0800d978 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b08e      	sub	sp, #56	; 0x38
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	607a      	str	r2, [r7, #4]
 800d984:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d986:	2300      	movs	r3, #0
 800d988:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10a      	bne.n	800d9aa <xQueueGenericSend+0x32>
	__asm volatile
 800d994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d998:	f383 8811 	msr	BASEPRI, r3
 800d99c:	f3bf 8f6f 	isb	sy
 800d9a0:	f3bf 8f4f 	dsb	sy
 800d9a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d9a6:	bf00      	nop
 800d9a8:	e7fe      	b.n	800d9a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d103      	bne.n	800d9b8 <xQueueGenericSend+0x40>
 800d9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d101      	bne.n	800d9bc <xQueueGenericSend+0x44>
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	e000      	b.n	800d9be <xQueueGenericSend+0x46>
 800d9bc:	2300      	movs	r3, #0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d10a      	bne.n	800d9d8 <xQueueGenericSend+0x60>
	__asm volatile
 800d9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c6:	f383 8811 	msr	BASEPRI, r3
 800d9ca:	f3bf 8f6f 	isb	sy
 800d9ce:	f3bf 8f4f 	dsb	sy
 800d9d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d9d4:	bf00      	nop
 800d9d6:	e7fe      	b.n	800d9d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	2b02      	cmp	r3, #2
 800d9dc:	d103      	bne.n	800d9e6 <xQueueGenericSend+0x6e>
 800d9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d101      	bne.n	800d9ea <xQueueGenericSend+0x72>
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	e000      	b.n	800d9ec <xQueueGenericSend+0x74>
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d10a      	bne.n	800da06 <xQueueGenericSend+0x8e>
	__asm volatile
 800d9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f4:	f383 8811 	msr	BASEPRI, r3
 800d9f8:	f3bf 8f6f 	isb	sy
 800d9fc:	f3bf 8f4f 	dsb	sy
 800da00:	623b      	str	r3, [r7, #32]
}
 800da02:	bf00      	nop
 800da04:	e7fe      	b.n	800da04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da06:	f001 fa3b 	bl	800ee80 <xTaskGetSchedulerState>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d102      	bne.n	800da16 <xQueueGenericSend+0x9e>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d101      	bne.n	800da1a <xQueueGenericSend+0xa2>
 800da16:	2301      	movs	r3, #1
 800da18:	e000      	b.n	800da1c <xQueueGenericSend+0xa4>
 800da1a:	2300      	movs	r3, #0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d10a      	bne.n	800da36 <xQueueGenericSend+0xbe>
	__asm volatile
 800da20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da24:	f383 8811 	msr	BASEPRI, r3
 800da28:	f3bf 8f6f 	isb	sy
 800da2c:	f3bf 8f4f 	dsb	sy
 800da30:	61fb      	str	r3, [r7, #28]
}
 800da32:	bf00      	nop
 800da34:	e7fe      	b.n	800da34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da36:	f001 ff7d 	bl	800f934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da42:	429a      	cmp	r2, r3
 800da44:	d302      	bcc.n	800da4c <xQueueGenericSend+0xd4>
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	2b02      	cmp	r3, #2
 800da4a:	d129      	bne.n	800daa0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800da4c:	683a      	ldr	r2, [r7, #0]
 800da4e:	68b9      	ldr	r1, [r7, #8]
 800da50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da52:	f000 fa0b 	bl	800de6c <prvCopyDataToQueue>
 800da56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d010      	beq.n	800da82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da62:	3324      	adds	r3, #36	; 0x24
 800da64:	4618      	mov	r0, r3
 800da66:	f001 f84d 	bl	800eb04 <xTaskRemoveFromEventList>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d013      	beq.n	800da98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800da70:	4b3f      	ldr	r3, [pc, #252]	; (800db70 <xQueueGenericSend+0x1f8>)
 800da72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da76:	601a      	str	r2, [r3, #0]
 800da78:	f3bf 8f4f 	dsb	sy
 800da7c:	f3bf 8f6f 	isb	sy
 800da80:	e00a      	b.n	800da98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800da82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da84:	2b00      	cmp	r3, #0
 800da86:	d007      	beq.n	800da98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800da88:	4b39      	ldr	r3, [pc, #228]	; (800db70 <xQueueGenericSend+0x1f8>)
 800da8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da8e:	601a      	str	r2, [r3, #0]
 800da90:	f3bf 8f4f 	dsb	sy
 800da94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800da98:	f001 ff7c 	bl	800f994 <vPortExitCritical>
				return pdPASS;
 800da9c:	2301      	movs	r3, #1
 800da9e:	e063      	b.n	800db68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d103      	bne.n	800daae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800daa6:	f001 ff75 	bl	800f994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800daaa:	2300      	movs	r3, #0
 800daac:	e05c      	b.n	800db68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800daae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d106      	bne.n	800dac2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dab4:	f107 0314 	add.w	r3, r7, #20
 800dab8:	4618      	mov	r0, r3
 800daba:	f001 f887 	bl	800ebcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dabe:	2301      	movs	r3, #1
 800dac0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dac2:	f001 ff67 	bl	800f994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dac6:	f000 fdf9 	bl	800e6bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800daca:	f001 ff33 	bl	800f934 <vPortEnterCritical>
 800dace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dad4:	b25b      	sxtb	r3, r3
 800dad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dada:	d103      	bne.n	800dae4 <xQueueGenericSend+0x16c>
 800dadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dade:	2200      	movs	r2, #0
 800dae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800daea:	b25b      	sxtb	r3, r3
 800daec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800daf0:	d103      	bne.n	800dafa <xQueueGenericSend+0x182>
 800daf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf4:	2200      	movs	r2, #0
 800daf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dafa:	f001 ff4b 	bl	800f994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dafe:	1d3a      	adds	r2, r7, #4
 800db00:	f107 0314 	add.w	r3, r7, #20
 800db04:	4611      	mov	r1, r2
 800db06:	4618      	mov	r0, r3
 800db08:	f001 f876 	bl	800ebf8 <xTaskCheckForTimeOut>
 800db0c:	4603      	mov	r3, r0
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d124      	bne.n	800db5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800db12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db14:	f000 faa2 	bl	800e05c <prvIsQueueFull>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d018      	beq.n	800db50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800db1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db20:	3310      	adds	r3, #16
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	4611      	mov	r1, r2
 800db26:	4618      	mov	r0, r3
 800db28:	f000 ff9c 	bl	800ea64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800db2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db2e:	f000 fa2d 	bl	800df8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800db32:	f000 fdd1 	bl	800e6d8 <xTaskResumeAll>
 800db36:	4603      	mov	r3, r0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	f47f af7c 	bne.w	800da36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800db3e:	4b0c      	ldr	r3, [pc, #48]	; (800db70 <xQueueGenericSend+0x1f8>)
 800db40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db44:	601a      	str	r2, [r3, #0]
 800db46:	f3bf 8f4f 	dsb	sy
 800db4a:	f3bf 8f6f 	isb	sy
 800db4e:	e772      	b.n	800da36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800db50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db52:	f000 fa1b 	bl	800df8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db56:	f000 fdbf 	bl	800e6d8 <xTaskResumeAll>
 800db5a:	e76c      	b.n	800da36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800db5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db5e:	f000 fa15 	bl	800df8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db62:	f000 fdb9 	bl	800e6d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800db66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3738      	adds	r7, #56	; 0x38
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	e000ed04 	.word	0xe000ed04

0800db74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b090      	sub	sp, #64	; 0x40
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
 800db80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800db86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d10a      	bne.n	800dba2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800db8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db90:	f383 8811 	msr	BASEPRI, r3
 800db94:	f3bf 8f6f 	isb	sy
 800db98:	f3bf 8f4f 	dsb	sy
 800db9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800db9e:	bf00      	nop
 800dba0:	e7fe      	b.n	800dba0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d103      	bne.n	800dbb0 <xQueueGenericSendFromISR+0x3c>
 800dba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d101      	bne.n	800dbb4 <xQueueGenericSendFromISR+0x40>
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e000      	b.n	800dbb6 <xQueueGenericSendFromISR+0x42>
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d10a      	bne.n	800dbd0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800dbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbbe:	f383 8811 	msr	BASEPRI, r3
 800dbc2:	f3bf 8f6f 	isb	sy
 800dbc6:	f3bf 8f4f 	dsb	sy
 800dbca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dbcc:	bf00      	nop
 800dbce:	e7fe      	b.n	800dbce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	2b02      	cmp	r3, #2
 800dbd4:	d103      	bne.n	800dbde <xQueueGenericSendFromISR+0x6a>
 800dbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d101      	bne.n	800dbe2 <xQueueGenericSendFromISR+0x6e>
 800dbde:	2301      	movs	r3, #1
 800dbe0:	e000      	b.n	800dbe4 <xQueueGenericSendFromISR+0x70>
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d10a      	bne.n	800dbfe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800dbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbec:	f383 8811 	msr	BASEPRI, r3
 800dbf0:	f3bf 8f6f 	isb	sy
 800dbf4:	f3bf 8f4f 	dsb	sy
 800dbf8:	623b      	str	r3, [r7, #32]
}
 800dbfa:	bf00      	nop
 800dbfc:	e7fe      	b.n	800dbfc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbfe:	f001 ff7b 	bl	800faf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dc02:	f3ef 8211 	mrs	r2, BASEPRI
 800dc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc0a:	f383 8811 	msr	BASEPRI, r3
 800dc0e:	f3bf 8f6f 	isb	sy
 800dc12:	f3bf 8f4f 	dsb	sy
 800dc16:	61fa      	str	r2, [r7, #28]
 800dc18:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dc1a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dc1c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d302      	bcc.n	800dc30 <xQueueGenericSendFromISR+0xbc>
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	2b02      	cmp	r3, #2
 800dc2e:	d12f      	bne.n	800dc90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dc40:	683a      	ldr	r2, [r7, #0]
 800dc42:	68b9      	ldr	r1, [r7, #8]
 800dc44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc46:	f000 f911 	bl	800de6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dc4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800dc4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc52:	d112      	bne.n	800dc7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d016      	beq.n	800dc8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5e:	3324      	adds	r3, #36	; 0x24
 800dc60:	4618      	mov	r0, r3
 800dc62:	f000 ff4f 	bl	800eb04 <xTaskRemoveFromEventList>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d00e      	beq.n	800dc8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d00b      	beq.n	800dc8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2201      	movs	r2, #1
 800dc76:	601a      	str	r2, [r3, #0]
 800dc78:	e007      	b.n	800dc8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dc7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dc7e:	3301      	adds	r3, #1
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	b25a      	sxtb	r2, r3
 800dc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800dc8e:	e001      	b.n	800dc94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dc90:	2300      	movs	r3, #0
 800dc92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc96:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dc9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3740      	adds	r7, #64	; 0x40
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
	...

0800dcac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b08c      	sub	sp, #48	; 0x30
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	60b9      	str	r1, [r7, #8]
 800dcb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d10a      	bne.n	800dcdc <xQueueReceive+0x30>
	__asm volatile
 800dcc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcca:	f383 8811 	msr	BASEPRI, r3
 800dcce:	f3bf 8f6f 	isb	sy
 800dcd2:	f3bf 8f4f 	dsb	sy
 800dcd6:	623b      	str	r3, [r7, #32]
}
 800dcd8:	bf00      	nop
 800dcda:	e7fe      	b.n	800dcda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d103      	bne.n	800dcea <xQueueReceive+0x3e>
 800dce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d101      	bne.n	800dcee <xQueueReceive+0x42>
 800dcea:	2301      	movs	r3, #1
 800dcec:	e000      	b.n	800dcf0 <xQueueReceive+0x44>
 800dcee:	2300      	movs	r3, #0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d10a      	bne.n	800dd0a <xQueueReceive+0x5e>
	__asm volatile
 800dcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf8:	f383 8811 	msr	BASEPRI, r3
 800dcfc:	f3bf 8f6f 	isb	sy
 800dd00:	f3bf 8f4f 	dsb	sy
 800dd04:	61fb      	str	r3, [r7, #28]
}
 800dd06:	bf00      	nop
 800dd08:	e7fe      	b.n	800dd08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd0a:	f001 f8b9 	bl	800ee80 <xTaskGetSchedulerState>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d102      	bne.n	800dd1a <xQueueReceive+0x6e>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d101      	bne.n	800dd1e <xQueueReceive+0x72>
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	e000      	b.n	800dd20 <xQueueReceive+0x74>
 800dd1e:	2300      	movs	r3, #0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d10a      	bne.n	800dd3a <xQueueReceive+0x8e>
	__asm volatile
 800dd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd28:	f383 8811 	msr	BASEPRI, r3
 800dd2c:	f3bf 8f6f 	isb	sy
 800dd30:	f3bf 8f4f 	dsb	sy
 800dd34:	61bb      	str	r3, [r7, #24]
}
 800dd36:	bf00      	nop
 800dd38:	e7fe      	b.n	800dd38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd3a:	f001 fdfb 	bl	800f934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d01f      	beq.n	800dd8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd4a:	68b9      	ldr	r1, [r7, #8]
 800dd4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd4e:	f000 f8f7 	bl	800df40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd54:	1e5a      	subs	r2, r3, #1
 800dd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5c:	691b      	ldr	r3, [r3, #16]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00f      	beq.n	800dd82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd64:	3310      	adds	r3, #16
 800dd66:	4618      	mov	r0, r3
 800dd68:	f000 fecc 	bl	800eb04 <xTaskRemoveFromEventList>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d007      	beq.n	800dd82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dd72:	4b3d      	ldr	r3, [pc, #244]	; (800de68 <xQueueReceive+0x1bc>)
 800dd74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd78:	601a      	str	r2, [r3, #0]
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dd82:	f001 fe07 	bl	800f994 <vPortExitCritical>
				return pdPASS;
 800dd86:	2301      	movs	r3, #1
 800dd88:	e069      	b.n	800de5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d103      	bne.n	800dd98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dd90:	f001 fe00 	bl	800f994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dd94:	2300      	movs	r3, #0
 800dd96:	e062      	b.n	800de5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d106      	bne.n	800ddac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd9e:	f107 0310 	add.w	r3, r7, #16
 800dda2:	4618      	mov	r0, r3
 800dda4:	f000 ff12 	bl	800ebcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ddac:	f001 fdf2 	bl	800f994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ddb0:	f000 fc84 	bl	800e6bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ddb4:	f001 fdbe 	bl	800f934 <vPortEnterCritical>
 800ddb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ddbe:	b25b      	sxtb	r3, r3
 800ddc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddc4:	d103      	bne.n	800ddce <xQueueReceive+0x122>
 800ddc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc8:	2200      	movs	r2, #0
 800ddca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ddce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ddd4:	b25b      	sxtb	r3, r3
 800ddd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddda:	d103      	bne.n	800dde4 <xQueueReceive+0x138>
 800dddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddde:	2200      	movs	r2, #0
 800dde0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dde4:	f001 fdd6 	bl	800f994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dde8:	1d3a      	adds	r2, r7, #4
 800ddea:	f107 0310 	add.w	r3, r7, #16
 800ddee:	4611      	mov	r1, r2
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f000 ff01 	bl	800ebf8 <xTaskCheckForTimeOut>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d123      	bne.n	800de44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ddfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddfe:	f000 f917 	bl	800e030 <prvIsQueueEmpty>
 800de02:	4603      	mov	r3, r0
 800de04:	2b00      	cmp	r3, #0
 800de06:	d017      	beq.n	800de38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0a:	3324      	adds	r3, #36	; 0x24
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	4611      	mov	r1, r2
 800de10:	4618      	mov	r0, r3
 800de12:	f000 fe27 	bl	800ea64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de18:	f000 f8b8 	bl	800df8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de1c:	f000 fc5c 	bl	800e6d8 <xTaskResumeAll>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d189      	bne.n	800dd3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800de26:	4b10      	ldr	r3, [pc, #64]	; (800de68 <xQueueReceive+0x1bc>)
 800de28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de2c:	601a      	str	r2, [r3, #0]
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	f3bf 8f6f 	isb	sy
 800de36:	e780      	b.n	800dd3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800de38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de3a:	f000 f8a7 	bl	800df8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de3e:	f000 fc4b 	bl	800e6d8 <xTaskResumeAll>
 800de42:	e77a      	b.n	800dd3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800de44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de46:	f000 f8a1 	bl	800df8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de4a:	f000 fc45 	bl	800e6d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de50:	f000 f8ee 	bl	800e030 <prvIsQueueEmpty>
 800de54:	4603      	mov	r3, r0
 800de56:	2b00      	cmp	r3, #0
 800de58:	f43f af6f 	beq.w	800dd3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800de5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3730      	adds	r7, #48	; 0x30
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	e000ed04 	.word	0xe000ed04

0800de6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b086      	sub	sp, #24
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800de78:	2300      	movs	r3, #0
 800de7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de86:	2b00      	cmp	r3, #0
 800de88:	d10d      	bne.n	800dea6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d14d      	bne.n	800df2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	689b      	ldr	r3, [r3, #8]
 800de96:	4618      	mov	r0, r3
 800de98:	f001 f810 	bl	800eebc <xTaskPriorityDisinherit>
 800de9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2200      	movs	r2, #0
 800dea2:	609a      	str	r2, [r3, #8]
 800dea4:	e043      	b.n	800df2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d119      	bne.n	800dee0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	6858      	ldr	r0, [r3, #4]
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb4:	461a      	mov	r2, r3
 800deb6:	68b9      	ldr	r1, [r7, #8]
 800deb8:	f002 f872 	bl	800ffa0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	685a      	ldr	r2, [r3, #4]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec4:	441a      	add	r2, r3
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	685a      	ldr	r2, [r3, #4]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d32b      	bcc.n	800df2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	605a      	str	r2, [r3, #4]
 800dede:	e026      	b.n	800df2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	68d8      	ldr	r0, [r3, #12]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dee8:	461a      	mov	r2, r3
 800deea:	68b9      	ldr	r1, [r7, #8]
 800deec:	f002 f858 	bl	800ffa0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	68da      	ldr	r2, [r3, #12]
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800def8:	425b      	negs	r3, r3
 800defa:	441a      	add	r2, r3
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	68da      	ldr	r2, [r3, #12]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d207      	bcs.n	800df1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	689a      	ldr	r2, [r3, #8]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df14:	425b      	negs	r3, r3
 800df16:	441a      	add	r2, r3
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b02      	cmp	r3, #2
 800df20:	d105      	bne.n	800df2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d002      	beq.n	800df2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	3b01      	subs	r3, #1
 800df2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	1c5a      	adds	r2, r3, #1
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800df36:	697b      	ldr	r3, [r7, #20]
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3718      	adds	r7, #24
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}

0800df40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d018      	beq.n	800df84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	68da      	ldr	r2, [r3, #12]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df5a:	441a      	add	r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	68da      	ldr	r2, [r3, #12]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	689b      	ldr	r3, [r3, #8]
 800df68:	429a      	cmp	r2, r3
 800df6a:	d303      	bcc.n	800df74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681a      	ldr	r2, [r3, #0]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	68d9      	ldr	r1, [r3, #12]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df7c:	461a      	mov	r2, r3
 800df7e:	6838      	ldr	r0, [r7, #0]
 800df80:	f002 f80e 	bl	800ffa0 <memcpy>
	}
}
 800df84:	bf00      	nop
 800df86:	3708      	adds	r7, #8
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800df94:	f001 fcce 	bl	800f934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dfa0:	e011      	b.n	800dfc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d012      	beq.n	800dfd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	3324      	adds	r3, #36	; 0x24
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f000 fda8 	bl	800eb04 <xTaskRemoveFromEventList>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d001      	beq.n	800dfbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dfba:	f000 fe7f 	bl	800ecbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dfbe:	7bfb      	ldrb	r3, [r7, #15]
 800dfc0:	3b01      	subs	r3, #1
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dfc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	dce9      	bgt.n	800dfa2 <prvUnlockQueue+0x16>
 800dfce:	e000      	b.n	800dfd2 <prvUnlockQueue+0x46>
					break;
 800dfd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	22ff      	movs	r2, #255	; 0xff
 800dfd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dfda:	f001 fcdb 	bl	800f994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dfde:	f001 fca9 	bl	800f934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfe8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dfea:	e011      	b.n	800e010 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	691b      	ldr	r3, [r3, #16]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d012      	beq.n	800e01a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	3310      	adds	r3, #16
 800dff8:	4618      	mov	r0, r3
 800dffa:	f000 fd83 	bl	800eb04 <xTaskRemoveFromEventList>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d001      	beq.n	800e008 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e004:	f000 fe5a 	bl	800ecbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e008:	7bbb      	ldrb	r3, [r7, #14]
 800e00a:	3b01      	subs	r3, #1
 800e00c:	b2db      	uxtb	r3, r3
 800e00e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e014:	2b00      	cmp	r3, #0
 800e016:	dce9      	bgt.n	800dfec <prvUnlockQueue+0x60>
 800e018:	e000      	b.n	800e01c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e01a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	22ff      	movs	r2, #255	; 0xff
 800e020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e024:	f001 fcb6 	bl	800f994 <vPortExitCritical>
}
 800e028:	bf00      	nop
 800e02a:	3710      	adds	r7, #16
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e038:	f001 fc7c 	bl	800f934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e040:	2b00      	cmp	r3, #0
 800e042:	d102      	bne.n	800e04a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e044:	2301      	movs	r3, #1
 800e046:	60fb      	str	r3, [r7, #12]
 800e048:	e001      	b.n	800e04e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e04a:	2300      	movs	r3, #0
 800e04c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e04e:	f001 fca1 	bl	800f994 <vPortExitCritical>

	return xReturn;
 800e052:	68fb      	ldr	r3, [r7, #12]
}
 800e054:	4618      	mov	r0, r3
 800e056:	3710      	adds	r7, #16
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e064:	f001 fc66 	bl	800f934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e070:	429a      	cmp	r2, r3
 800e072:	d102      	bne.n	800e07a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e074:	2301      	movs	r3, #1
 800e076:	60fb      	str	r3, [r7, #12]
 800e078:	e001      	b.n	800e07e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e07a:	2300      	movs	r3, #0
 800e07c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e07e:	f001 fc89 	bl	800f994 <vPortExitCritical>

	return xReturn;
 800e082:	68fb      	ldr	r3, [r7, #12]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3710      	adds	r7, #16
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e08c:	b480      	push	{r7}
 800e08e:	b085      	sub	sp, #20
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e096:	2300      	movs	r3, #0
 800e098:	60fb      	str	r3, [r7, #12]
 800e09a:	e014      	b.n	800e0c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e09c:	4a0f      	ldr	r2, [pc, #60]	; (800e0dc <vQueueAddToRegistry+0x50>)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d10b      	bne.n	800e0c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e0a8:	490c      	ldr	r1, [pc, #48]	; (800e0dc <vQueueAddToRegistry+0x50>)
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	683a      	ldr	r2, [r7, #0]
 800e0ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e0b2:	4a0a      	ldr	r2, [pc, #40]	; (800e0dc <vQueueAddToRegistry+0x50>)
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	00db      	lsls	r3, r3, #3
 800e0b8:	4413      	add	r3, r2
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e0be:	e006      	b.n	800e0ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	60fb      	str	r3, [r7, #12]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2b07      	cmp	r3, #7
 800e0ca:	d9e7      	bls.n	800e09c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e0cc:	bf00      	nop
 800e0ce:	bf00      	nop
 800e0d0:	3714      	adds	r7, #20
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr
 800e0da:	bf00      	nop
 800e0dc:	20002124 	.word	0x20002124

0800e0e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e0f0:	f001 fc20 	bl	800f934 <vPortEnterCritical>
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0fa:	b25b      	sxtb	r3, r3
 800e0fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e100:	d103      	bne.n	800e10a <vQueueWaitForMessageRestricted+0x2a>
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	2200      	movs	r2, #0
 800e106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e110:	b25b      	sxtb	r3, r3
 800e112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e116:	d103      	bne.n	800e120 <vQueueWaitForMessageRestricted+0x40>
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	2200      	movs	r2, #0
 800e11c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e120:	f001 fc38 	bl	800f994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d106      	bne.n	800e13a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	3324      	adds	r3, #36	; 0x24
 800e130:	687a      	ldr	r2, [r7, #4]
 800e132:	68b9      	ldr	r1, [r7, #8]
 800e134:	4618      	mov	r0, r3
 800e136:	f000 fcb9 	bl	800eaac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e13a:	6978      	ldr	r0, [r7, #20]
 800e13c:	f7ff ff26 	bl	800df8c <prvUnlockQueue>
	}
 800e140:	bf00      	nop
 800e142:	3718      	adds	r7, #24
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b08e      	sub	sp, #56	; 0x38
 800e14c:	af04      	add	r7, sp, #16
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	60b9      	str	r1, [r7, #8]
 800e152:	607a      	str	r2, [r7, #4]
 800e154:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d10a      	bne.n	800e172 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e160:	f383 8811 	msr	BASEPRI, r3
 800e164:	f3bf 8f6f 	isb	sy
 800e168:	f3bf 8f4f 	dsb	sy
 800e16c:	623b      	str	r3, [r7, #32]
}
 800e16e:	bf00      	nop
 800e170:	e7fe      	b.n	800e170 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e174:	2b00      	cmp	r3, #0
 800e176:	d10a      	bne.n	800e18e <xTaskCreateStatic+0x46>
	__asm volatile
 800e178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17c:	f383 8811 	msr	BASEPRI, r3
 800e180:	f3bf 8f6f 	isb	sy
 800e184:	f3bf 8f4f 	dsb	sy
 800e188:	61fb      	str	r3, [r7, #28]
}
 800e18a:	bf00      	nop
 800e18c:	e7fe      	b.n	800e18c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e18e:	235c      	movs	r3, #92	; 0x5c
 800e190:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	2b5c      	cmp	r3, #92	; 0x5c
 800e196:	d00a      	beq.n	800e1ae <xTaskCreateStatic+0x66>
	__asm volatile
 800e198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19c:	f383 8811 	msr	BASEPRI, r3
 800e1a0:	f3bf 8f6f 	isb	sy
 800e1a4:	f3bf 8f4f 	dsb	sy
 800e1a8:	61bb      	str	r3, [r7, #24]
}
 800e1aa:	bf00      	nop
 800e1ac:	e7fe      	b.n	800e1ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e1ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d01e      	beq.n	800e1f4 <xTaskCreateStatic+0xac>
 800e1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d01b      	beq.n	800e1f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c8:	2202      	movs	r2, #2
 800e1ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	9303      	str	r3, [sp, #12]
 800e1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d4:	9302      	str	r3, [sp, #8]
 800e1d6:	f107 0314 	add.w	r3, r7, #20
 800e1da:	9301      	str	r3, [sp, #4]
 800e1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1de:	9300      	str	r3, [sp, #0]
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	68b9      	ldr	r1, [r7, #8]
 800e1e6:	68f8      	ldr	r0, [r7, #12]
 800e1e8:	f000 f850 	bl	800e28c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e1ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1ee:	f000 f8dd 	bl	800e3ac <prvAddNewTaskToReadyList>
 800e1f2:	e001      	b.n	800e1f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e1f8:	697b      	ldr	r3, [r7, #20]
	}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3728      	adds	r7, #40	; 0x28
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}

0800e202 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e202:	b580      	push	{r7, lr}
 800e204:	b08c      	sub	sp, #48	; 0x30
 800e206:	af04      	add	r7, sp, #16
 800e208:	60f8      	str	r0, [r7, #12]
 800e20a:	60b9      	str	r1, [r7, #8]
 800e20c:	603b      	str	r3, [r7, #0]
 800e20e:	4613      	mov	r3, r2
 800e210:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e212:	88fb      	ldrh	r3, [r7, #6]
 800e214:	009b      	lsls	r3, r3, #2
 800e216:	4618      	mov	r0, r3
 800e218:	f001 fcae 	bl	800fb78 <pvPortMalloc>
 800e21c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d00e      	beq.n	800e242 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e224:	205c      	movs	r0, #92	; 0x5c
 800e226:	f001 fca7 	bl	800fb78 <pvPortMalloc>
 800e22a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d003      	beq.n	800e23a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	697a      	ldr	r2, [r7, #20]
 800e236:	631a      	str	r2, [r3, #48]	; 0x30
 800e238:	e005      	b.n	800e246 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e23a:	6978      	ldr	r0, [r7, #20]
 800e23c:	f001 fd68 	bl	800fd10 <vPortFree>
 800e240:	e001      	b.n	800e246 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e242:	2300      	movs	r3, #0
 800e244:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d017      	beq.n	800e27c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	2200      	movs	r2, #0
 800e250:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e254:	88fa      	ldrh	r2, [r7, #6]
 800e256:	2300      	movs	r3, #0
 800e258:	9303      	str	r3, [sp, #12]
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	9302      	str	r3, [sp, #8]
 800e25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e260:	9301      	str	r3, [sp, #4]
 800e262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e264:	9300      	str	r3, [sp, #0]
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	68b9      	ldr	r1, [r7, #8]
 800e26a:	68f8      	ldr	r0, [r7, #12]
 800e26c:	f000 f80e 	bl	800e28c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e270:	69f8      	ldr	r0, [r7, #28]
 800e272:	f000 f89b 	bl	800e3ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e276:	2301      	movs	r3, #1
 800e278:	61bb      	str	r3, [r7, #24]
 800e27a:	e002      	b.n	800e282 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e27c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e280:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e282:	69bb      	ldr	r3, [r7, #24]
	}
 800e284:	4618      	mov	r0, r3
 800e286:	3720      	adds	r7, #32
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b088      	sub	sp, #32
 800e290:	af00      	add	r7, sp, #0
 800e292:	60f8      	str	r0, [r7, #12]
 800e294:	60b9      	str	r1, [r7, #8]
 800e296:	607a      	str	r2, [r7, #4]
 800e298:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	21a5      	movs	r1, #165	; 0xa5
 800e2a6:	f001 fe89 	bl	800ffbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e2b4:	3b01      	subs	r3, #1
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	4413      	add	r3, r2
 800e2ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e2bc:	69bb      	ldr	r3, [r7, #24]
 800e2be:	f023 0307 	bic.w	r3, r3, #7
 800e2c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e2c4:	69bb      	ldr	r3, [r7, #24]
 800e2c6:	f003 0307 	and.w	r3, r3, #7
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00a      	beq.n	800e2e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d2:	f383 8811 	msr	BASEPRI, r3
 800e2d6:	f3bf 8f6f 	isb	sy
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	617b      	str	r3, [r7, #20]
}
 800e2e0:	bf00      	nop
 800e2e2:	e7fe      	b.n	800e2e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d01f      	beq.n	800e32a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	61fb      	str	r3, [r7, #28]
 800e2ee:	e012      	b.n	800e316 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e2f0:	68ba      	ldr	r2, [r7, #8]
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	7819      	ldrb	r1, [r3, #0]
 800e2f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	4413      	add	r3, r2
 800e2fe:	3334      	adds	r3, #52	; 0x34
 800e300:	460a      	mov	r2, r1
 800e302:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e304:	68ba      	ldr	r2, [r7, #8]
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	4413      	add	r3, r2
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d006      	beq.n	800e31e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	3301      	adds	r3, #1
 800e314:	61fb      	str	r3, [r7, #28]
 800e316:	69fb      	ldr	r3, [r7, #28]
 800e318:	2b0f      	cmp	r3, #15
 800e31a:	d9e9      	bls.n	800e2f0 <prvInitialiseNewTask+0x64>
 800e31c:	e000      	b.n	800e320 <prvInitialiseNewTask+0x94>
			{
				break;
 800e31e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e322:	2200      	movs	r2, #0
 800e324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e328:	e003      	b.n	800e332 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e32c:	2200      	movs	r2, #0
 800e32e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e334:	2b37      	cmp	r3, #55	; 0x37
 800e336:	d901      	bls.n	800e33c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e338:	2337      	movs	r3, #55	; 0x37
 800e33a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e340:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e346:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34a:	2200      	movs	r2, #0
 800e34c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e350:	3304      	adds	r3, #4
 800e352:	4618      	mov	r0, r3
 800e354:	f7ff f978 	bl	800d648 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e35a:	3318      	adds	r3, #24
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7ff f973 	bl	800d648 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e366:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e370:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e376:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e37a:	2200      	movs	r2, #0
 800e37c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e380:	2200      	movs	r2, #0
 800e382:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e386:	683a      	ldr	r2, [r7, #0]
 800e388:	68f9      	ldr	r1, [r7, #12]
 800e38a:	69b8      	ldr	r0, [r7, #24]
 800e38c:	f001 f9a6 	bl	800f6dc <pxPortInitialiseStack>
 800e390:	4602      	mov	r2, r0
 800e392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e394:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d002      	beq.n	800e3a2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3a2:	bf00      	nop
 800e3a4:	3720      	adds	r7, #32
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
	...

0800e3ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e3b4:	f001 fabe 	bl	800f934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e3b8:	4b2d      	ldr	r3, [pc, #180]	; (800e470 <prvAddNewTaskToReadyList+0xc4>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3301      	adds	r3, #1
 800e3be:	4a2c      	ldr	r2, [pc, #176]	; (800e470 <prvAddNewTaskToReadyList+0xc4>)
 800e3c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e3c2:	4b2c      	ldr	r3, [pc, #176]	; (800e474 <prvAddNewTaskToReadyList+0xc8>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d109      	bne.n	800e3de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e3ca:	4a2a      	ldr	r2, [pc, #168]	; (800e474 <prvAddNewTaskToReadyList+0xc8>)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e3d0:	4b27      	ldr	r3, [pc, #156]	; (800e470 <prvAddNewTaskToReadyList+0xc4>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d110      	bne.n	800e3fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e3d8:	f000 fc94 	bl	800ed04 <prvInitialiseTaskLists>
 800e3dc:	e00d      	b.n	800e3fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e3de:	4b26      	ldr	r3, [pc, #152]	; (800e478 <prvAddNewTaskToReadyList+0xcc>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d109      	bne.n	800e3fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e3e6:	4b23      	ldr	r3, [pc, #140]	; (800e474 <prvAddNewTaskToReadyList+0xc8>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d802      	bhi.n	800e3fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e3f4:	4a1f      	ldr	r2, [pc, #124]	; (800e474 <prvAddNewTaskToReadyList+0xc8>)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e3fa:	4b20      	ldr	r3, [pc, #128]	; (800e47c <prvAddNewTaskToReadyList+0xd0>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	3301      	adds	r3, #1
 800e400:	4a1e      	ldr	r2, [pc, #120]	; (800e47c <prvAddNewTaskToReadyList+0xd0>)
 800e402:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e404:	4b1d      	ldr	r3, [pc, #116]	; (800e47c <prvAddNewTaskToReadyList+0xd0>)
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e410:	4b1b      	ldr	r3, [pc, #108]	; (800e480 <prvAddNewTaskToReadyList+0xd4>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	429a      	cmp	r2, r3
 800e416:	d903      	bls.n	800e420 <prvAddNewTaskToReadyList+0x74>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e41c:	4a18      	ldr	r2, [pc, #96]	; (800e480 <prvAddNewTaskToReadyList+0xd4>)
 800e41e:	6013      	str	r3, [r2, #0]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e424:	4613      	mov	r3, r2
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	4413      	add	r3, r2
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	4a15      	ldr	r2, [pc, #84]	; (800e484 <prvAddNewTaskToReadyList+0xd8>)
 800e42e:	441a      	add	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	3304      	adds	r3, #4
 800e434:	4619      	mov	r1, r3
 800e436:	4610      	mov	r0, r2
 800e438:	f7ff f913 	bl	800d662 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e43c:	f001 faaa 	bl	800f994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e440:	4b0d      	ldr	r3, [pc, #52]	; (800e478 <prvAddNewTaskToReadyList+0xcc>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d00e      	beq.n	800e466 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e448:	4b0a      	ldr	r3, [pc, #40]	; (800e474 <prvAddNewTaskToReadyList+0xc8>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e452:	429a      	cmp	r2, r3
 800e454:	d207      	bcs.n	800e466 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e456:	4b0c      	ldr	r3, [pc, #48]	; (800e488 <prvAddNewTaskToReadyList+0xdc>)
 800e458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e45c:	601a      	str	r2, [r3, #0]
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e466:	bf00      	nop
 800e468:	3708      	adds	r7, #8
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	20002638 	.word	0x20002638
 800e474:	20002164 	.word	0x20002164
 800e478:	20002644 	.word	0x20002644
 800e47c:	20002654 	.word	0x20002654
 800e480:	20002640 	.word	0x20002640
 800e484:	20002168 	.word	0x20002168
 800e488:	e000ed04 	.word	0xe000ed04

0800e48c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b08a      	sub	sp, #40	; 0x28
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e496:	2300      	movs	r3, #0
 800e498:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d10a      	bne.n	800e4b6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800e4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a4:	f383 8811 	msr	BASEPRI, r3
 800e4a8:	f3bf 8f6f 	isb	sy
 800e4ac:	f3bf 8f4f 	dsb	sy
 800e4b0:	617b      	str	r3, [r7, #20]
}
 800e4b2:	bf00      	nop
 800e4b4:	e7fe      	b.n	800e4b4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d10a      	bne.n	800e4d2 <vTaskDelayUntil+0x46>
	__asm volatile
 800e4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c0:	f383 8811 	msr	BASEPRI, r3
 800e4c4:	f3bf 8f6f 	isb	sy
 800e4c8:	f3bf 8f4f 	dsb	sy
 800e4cc:	613b      	str	r3, [r7, #16]
}
 800e4ce:	bf00      	nop
 800e4d0:	e7fe      	b.n	800e4d0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e4d2:	4b2a      	ldr	r3, [pc, #168]	; (800e57c <vTaskDelayUntil+0xf0>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00a      	beq.n	800e4f0 <vTaskDelayUntil+0x64>
	__asm volatile
 800e4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4de:	f383 8811 	msr	BASEPRI, r3
 800e4e2:	f3bf 8f6f 	isb	sy
 800e4e6:	f3bf 8f4f 	dsb	sy
 800e4ea:	60fb      	str	r3, [r7, #12]
}
 800e4ec:	bf00      	nop
 800e4ee:	e7fe      	b.n	800e4ee <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e4f0:	f000 f8e4 	bl	800e6bc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e4f4:	4b22      	ldr	r3, [pc, #136]	; (800e580 <vTaskDelayUntil+0xf4>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	683a      	ldr	r2, [r7, #0]
 800e500:	4413      	add	r3, r2
 800e502:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	6a3a      	ldr	r2, [r7, #32]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d20b      	bcs.n	800e526 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	69fa      	ldr	r2, [r7, #28]
 800e514:	429a      	cmp	r2, r3
 800e516:	d211      	bcs.n	800e53c <vTaskDelayUntil+0xb0>
 800e518:	69fa      	ldr	r2, [r7, #28]
 800e51a:	6a3b      	ldr	r3, [r7, #32]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d90d      	bls.n	800e53c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e520:	2301      	movs	r3, #1
 800e522:	627b      	str	r3, [r7, #36]	; 0x24
 800e524:	e00a      	b.n	800e53c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	69fa      	ldr	r2, [r7, #28]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d303      	bcc.n	800e538 <vTaskDelayUntil+0xac>
 800e530:	69fa      	ldr	r2, [r7, #28]
 800e532:	6a3b      	ldr	r3, [r7, #32]
 800e534:	429a      	cmp	r2, r3
 800e536:	d901      	bls.n	800e53c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e538:	2301      	movs	r3, #1
 800e53a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	69fa      	ldr	r2, [r7, #28]
 800e540:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e544:	2b00      	cmp	r3, #0
 800e546:	d006      	beq.n	800e556 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e548:	69fa      	ldr	r2, [r7, #28]
 800e54a:	6a3b      	ldr	r3, [r7, #32]
 800e54c:	1ad3      	subs	r3, r2, r3
 800e54e:	2100      	movs	r1, #0
 800e550:	4618      	mov	r0, r3
 800e552:	f000 fd21 	bl	800ef98 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e556:	f000 f8bf 	bl	800e6d8 <xTaskResumeAll>
 800e55a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e55c:	69bb      	ldr	r3, [r7, #24]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d107      	bne.n	800e572 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e562:	4b08      	ldr	r3, [pc, #32]	; (800e584 <vTaskDelayUntil+0xf8>)
 800e564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e568:	601a      	str	r2, [r3, #0]
 800e56a:	f3bf 8f4f 	dsb	sy
 800e56e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e572:	bf00      	nop
 800e574:	3728      	adds	r7, #40	; 0x28
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	20002660 	.word	0x20002660
 800e580:	2000263c 	.word	0x2000263c
 800e584:	e000ed04 	.word	0xe000ed04

0800e588 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e590:	2300      	movs	r3, #0
 800e592:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d017      	beq.n	800e5ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e59a:	4b13      	ldr	r3, [pc, #76]	; (800e5e8 <vTaskDelay+0x60>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00a      	beq.n	800e5b8 <vTaskDelay+0x30>
	__asm volatile
 800e5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a6:	f383 8811 	msr	BASEPRI, r3
 800e5aa:	f3bf 8f6f 	isb	sy
 800e5ae:	f3bf 8f4f 	dsb	sy
 800e5b2:	60bb      	str	r3, [r7, #8]
}
 800e5b4:	bf00      	nop
 800e5b6:	e7fe      	b.n	800e5b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e5b8:	f000 f880 	bl	800e6bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e5bc:	2100      	movs	r1, #0
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f000 fcea 	bl	800ef98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e5c4:	f000 f888 	bl	800e6d8 <xTaskResumeAll>
 800e5c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d107      	bne.n	800e5e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e5d0:	4b06      	ldr	r3, [pc, #24]	; (800e5ec <vTaskDelay+0x64>)
 800e5d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5d6:	601a      	str	r2, [r3, #0]
 800e5d8:	f3bf 8f4f 	dsb	sy
 800e5dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e5e0:	bf00      	nop
 800e5e2:	3710      	adds	r7, #16
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	20002660 	.word	0x20002660
 800e5ec:	e000ed04 	.word	0xe000ed04

0800e5f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b08a      	sub	sp, #40	; 0x28
 800e5f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e5fe:	463a      	mov	r2, r7
 800e600:	1d39      	adds	r1, r7, #4
 800e602:	f107 0308 	add.w	r3, r7, #8
 800e606:	4618      	mov	r0, r3
 800e608:	f7fe ffca 	bl	800d5a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e60c:	6839      	ldr	r1, [r7, #0]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	68ba      	ldr	r2, [r7, #8]
 800e612:	9202      	str	r2, [sp, #8]
 800e614:	9301      	str	r3, [sp, #4]
 800e616:	2300      	movs	r3, #0
 800e618:	9300      	str	r3, [sp, #0]
 800e61a:	2300      	movs	r3, #0
 800e61c:	460a      	mov	r2, r1
 800e61e:	4921      	ldr	r1, [pc, #132]	; (800e6a4 <vTaskStartScheduler+0xb4>)
 800e620:	4821      	ldr	r0, [pc, #132]	; (800e6a8 <vTaskStartScheduler+0xb8>)
 800e622:	f7ff fd91 	bl	800e148 <xTaskCreateStatic>
 800e626:	4603      	mov	r3, r0
 800e628:	4a20      	ldr	r2, [pc, #128]	; (800e6ac <vTaskStartScheduler+0xbc>)
 800e62a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e62c:	4b1f      	ldr	r3, [pc, #124]	; (800e6ac <vTaskStartScheduler+0xbc>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d002      	beq.n	800e63a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e634:	2301      	movs	r3, #1
 800e636:	617b      	str	r3, [r7, #20]
 800e638:	e001      	b.n	800e63e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e63a:	2300      	movs	r3, #0
 800e63c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	2b01      	cmp	r3, #1
 800e642:	d102      	bne.n	800e64a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e644:	f000 fcfc 	bl	800f040 <xTimerCreateTimerTask>
 800e648:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d116      	bne.n	800e67e <vTaskStartScheduler+0x8e>
	__asm volatile
 800e650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e654:	f383 8811 	msr	BASEPRI, r3
 800e658:	f3bf 8f6f 	isb	sy
 800e65c:	f3bf 8f4f 	dsb	sy
 800e660:	613b      	str	r3, [r7, #16]
}
 800e662:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e664:	4b12      	ldr	r3, [pc, #72]	; (800e6b0 <vTaskStartScheduler+0xc0>)
 800e666:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e66a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e66c:	4b11      	ldr	r3, [pc, #68]	; (800e6b4 <vTaskStartScheduler+0xc4>)
 800e66e:	2201      	movs	r2, #1
 800e670:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e672:	4b11      	ldr	r3, [pc, #68]	; (800e6b8 <vTaskStartScheduler+0xc8>)
 800e674:	2200      	movs	r2, #0
 800e676:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e678:	f001 f8ba 	bl	800f7f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e67c:	e00e      	b.n	800e69c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e684:	d10a      	bne.n	800e69c <vTaskStartScheduler+0xac>
	__asm volatile
 800e686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68a:	f383 8811 	msr	BASEPRI, r3
 800e68e:	f3bf 8f6f 	isb	sy
 800e692:	f3bf 8f4f 	dsb	sy
 800e696:	60fb      	str	r3, [r7, #12]
}
 800e698:	bf00      	nop
 800e69a:	e7fe      	b.n	800e69a <vTaskStartScheduler+0xaa>
}
 800e69c:	bf00      	nop
 800e69e:	3718      	adds	r7, #24
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	08014964 	.word	0x08014964
 800e6a8:	0800ecd5 	.word	0x0800ecd5
 800e6ac:	2000265c 	.word	0x2000265c
 800e6b0:	20002658 	.word	0x20002658
 800e6b4:	20002644 	.word	0x20002644
 800e6b8:	2000263c 	.word	0x2000263c

0800e6bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e6bc:	b480      	push	{r7}
 800e6be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e6c0:	4b04      	ldr	r3, [pc, #16]	; (800e6d4 <vTaskSuspendAll+0x18>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	4a03      	ldr	r2, [pc, #12]	; (800e6d4 <vTaskSuspendAll+0x18>)
 800e6c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e6ca:	bf00      	nop
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr
 800e6d4:	20002660 	.word	0x20002660

0800e6d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e6e6:	4b42      	ldr	r3, [pc, #264]	; (800e7f0 <xTaskResumeAll+0x118>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d10a      	bne.n	800e704 <xTaskResumeAll+0x2c>
	__asm volatile
 800e6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f2:	f383 8811 	msr	BASEPRI, r3
 800e6f6:	f3bf 8f6f 	isb	sy
 800e6fa:	f3bf 8f4f 	dsb	sy
 800e6fe:	603b      	str	r3, [r7, #0]
}
 800e700:	bf00      	nop
 800e702:	e7fe      	b.n	800e702 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e704:	f001 f916 	bl	800f934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e708:	4b39      	ldr	r3, [pc, #228]	; (800e7f0 <xTaskResumeAll+0x118>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	3b01      	subs	r3, #1
 800e70e:	4a38      	ldr	r2, [pc, #224]	; (800e7f0 <xTaskResumeAll+0x118>)
 800e710:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e712:	4b37      	ldr	r3, [pc, #220]	; (800e7f0 <xTaskResumeAll+0x118>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d162      	bne.n	800e7e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e71a:	4b36      	ldr	r3, [pc, #216]	; (800e7f4 <xTaskResumeAll+0x11c>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d05e      	beq.n	800e7e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e722:	e02f      	b.n	800e784 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e724:	4b34      	ldr	r3, [pc, #208]	; (800e7f8 <xTaskResumeAll+0x120>)
 800e726:	68db      	ldr	r3, [r3, #12]
 800e728:	68db      	ldr	r3, [r3, #12]
 800e72a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	3318      	adds	r3, #24
 800e730:	4618      	mov	r0, r3
 800e732:	f7fe fff3 	bl	800d71c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	3304      	adds	r3, #4
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7fe ffee 	bl	800d71c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e744:	4b2d      	ldr	r3, [pc, #180]	; (800e7fc <xTaskResumeAll+0x124>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d903      	bls.n	800e754 <xTaskResumeAll+0x7c>
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e750:	4a2a      	ldr	r2, [pc, #168]	; (800e7fc <xTaskResumeAll+0x124>)
 800e752:	6013      	str	r3, [r2, #0]
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e758:	4613      	mov	r3, r2
 800e75a:	009b      	lsls	r3, r3, #2
 800e75c:	4413      	add	r3, r2
 800e75e:	009b      	lsls	r3, r3, #2
 800e760:	4a27      	ldr	r2, [pc, #156]	; (800e800 <xTaskResumeAll+0x128>)
 800e762:	441a      	add	r2, r3
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	3304      	adds	r3, #4
 800e768:	4619      	mov	r1, r3
 800e76a:	4610      	mov	r0, r2
 800e76c:	f7fe ff79 	bl	800d662 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e774:	4b23      	ldr	r3, [pc, #140]	; (800e804 <xTaskResumeAll+0x12c>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d302      	bcc.n	800e784 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e77e:	4b22      	ldr	r3, [pc, #136]	; (800e808 <xTaskResumeAll+0x130>)
 800e780:	2201      	movs	r2, #1
 800e782:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e784:	4b1c      	ldr	r3, [pc, #112]	; (800e7f8 <xTaskResumeAll+0x120>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d1cb      	bne.n	800e724 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d001      	beq.n	800e796 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e792:	f000 fb55 	bl	800ee40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e796:	4b1d      	ldr	r3, [pc, #116]	; (800e80c <xTaskResumeAll+0x134>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d010      	beq.n	800e7c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e7a2:	f000 f847 	bl	800e834 <xTaskIncrementTick>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d002      	beq.n	800e7b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e7ac:	4b16      	ldr	r3, [pc, #88]	; (800e808 <xTaskResumeAll+0x130>)
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	3b01      	subs	r3, #1
 800e7b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d1f1      	bne.n	800e7a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e7be:	4b13      	ldr	r3, [pc, #76]	; (800e80c <xTaskResumeAll+0x134>)
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e7c4:	4b10      	ldr	r3, [pc, #64]	; (800e808 <xTaskResumeAll+0x130>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d009      	beq.n	800e7e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e7d0:	4b0f      	ldr	r3, [pc, #60]	; (800e810 <xTaskResumeAll+0x138>)
 800e7d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7d6:	601a      	str	r2, [r3, #0]
 800e7d8:	f3bf 8f4f 	dsb	sy
 800e7dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e7e0:	f001 f8d8 	bl	800f994 <vPortExitCritical>

	return xAlreadyYielded;
 800e7e4:	68bb      	ldr	r3, [r7, #8]
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3710      	adds	r7, #16
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	20002660 	.word	0x20002660
 800e7f4:	20002638 	.word	0x20002638
 800e7f8:	200025f8 	.word	0x200025f8
 800e7fc:	20002640 	.word	0x20002640
 800e800:	20002168 	.word	0x20002168
 800e804:	20002164 	.word	0x20002164
 800e808:	2000264c 	.word	0x2000264c
 800e80c:	20002648 	.word	0x20002648
 800e810:	e000ed04 	.word	0xe000ed04

0800e814 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e814:	b480      	push	{r7}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e81a:	4b05      	ldr	r3, [pc, #20]	; (800e830 <xTaskGetTickCount+0x1c>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e820:	687b      	ldr	r3, [r7, #4]
}
 800e822:	4618      	mov	r0, r3
 800e824:	370c      	adds	r7, #12
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr
 800e82e:	bf00      	nop
 800e830:	2000263c 	.word	0x2000263c

0800e834 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b086      	sub	sp, #24
 800e838:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e83a:	2300      	movs	r3, #0
 800e83c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e83e:	4b4f      	ldr	r3, [pc, #316]	; (800e97c <xTaskIncrementTick+0x148>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	2b00      	cmp	r3, #0
 800e844:	f040 808f 	bne.w	800e966 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e848:	4b4d      	ldr	r3, [pc, #308]	; (800e980 <xTaskIncrementTick+0x14c>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	3301      	adds	r3, #1
 800e84e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e850:	4a4b      	ldr	r2, [pc, #300]	; (800e980 <xTaskIncrementTick+0x14c>)
 800e852:	693b      	ldr	r3, [r7, #16]
 800e854:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d120      	bne.n	800e89e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e85c:	4b49      	ldr	r3, [pc, #292]	; (800e984 <xTaskIncrementTick+0x150>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d00a      	beq.n	800e87c <xTaskIncrementTick+0x48>
	__asm volatile
 800e866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e86a:	f383 8811 	msr	BASEPRI, r3
 800e86e:	f3bf 8f6f 	isb	sy
 800e872:	f3bf 8f4f 	dsb	sy
 800e876:	603b      	str	r3, [r7, #0]
}
 800e878:	bf00      	nop
 800e87a:	e7fe      	b.n	800e87a <xTaskIncrementTick+0x46>
 800e87c:	4b41      	ldr	r3, [pc, #260]	; (800e984 <xTaskIncrementTick+0x150>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	60fb      	str	r3, [r7, #12]
 800e882:	4b41      	ldr	r3, [pc, #260]	; (800e988 <xTaskIncrementTick+0x154>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4a3f      	ldr	r2, [pc, #252]	; (800e984 <xTaskIncrementTick+0x150>)
 800e888:	6013      	str	r3, [r2, #0]
 800e88a:	4a3f      	ldr	r2, [pc, #252]	; (800e988 <xTaskIncrementTick+0x154>)
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	6013      	str	r3, [r2, #0]
 800e890:	4b3e      	ldr	r3, [pc, #248]	; (800e98c <xTaskIncrementTick+0x158>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	3301      	adds	r3, #1
 800e896:	4a3d      	ldr	r2, [pc, #244]	; (800e98c <xTaskIncrementTick+0x158>)
 800e898:	6013      	str	r3, [r2, #0]
 800e89a:	f000 fad1 	bl	800ee40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e89e:	4b3c      	ldr	r3, [pc, #240]	; (800e990 <xTaskIncrementTick+0x15c>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	693a      	ldr	r2, [r7, #16]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d349      	bcc.n	800e93c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8a8:	4b36      	ldr	r3, [pc, #216]	; (800e984 <xTaskIncrementTick+0x150>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d104      	bne.n	800e8bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8b2:	4b37      	ldr	r3, [pc, #220]	; (800e990 <xTaskIncrementTick+0x15c>)
 800e8b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8b8:	601a      	str	r2, [r3, #0]
					break;
 800e8ba:	e03f      	b.n	800e93c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8bc:	4b31      	ldr	r3, [pc, #196]	; (800e984 <xTaskIncrementTick+0x150>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	68db      	ldr	r3, [r3, #12]
 800e8c2:	68db      	ldr	r3, [r3, #12]
 800e8c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e8cc:	693a      	ldr	r2, [r7, #16]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d203      	bcs.n	800e8dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e8d4:	4a2e      	ldr	r2, [pc, #184]	; (800e990 <xTaskIncrementTick+0x15c>)
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e8da:	e02f      	b.n	800e93c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	3304      	adds	r3, #4
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7fe ff1b 	bl	800d71c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d004      	beq.n	800e8f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	3318      	adds	r3, #24
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7fe ff12 	bl	800d71c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8fc:	4b25      	ldr	r3, [pc, #148]	; (800e994 <xTaskIncrementTick+0x160>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	429a      	cmp	r2, r3
 800e902:	d903      	bls.n	800e90c <xTaskIncrementTick+0xd8>
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e908:	4a22      	ldr	r2, [pc, #136]	; (800e994 <xTaskIncrementTick+0x160>)
 800e90a:	6013      	str	r3, [r2, #0]
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e910:	4613      	mov	r3, r2
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	4413      	add	r3, r2
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	4a1f      	ldr	r2, [pc, #124]	; (800e998 <xTaskIncrementTick+0x164>)
 800e91a:	441a      	add	r2, r3
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	3304      	adds	r3, #4
 800e920:	4619      	mov	r1, r3
 800e922:	4610      	mov	r0, r2
 800e924:	f7fe fe9d 	bl	800d662 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e92c:	4b1b      	ldr	r3, [pc, #108]	; (800e99c <xTaskIncrementTick+0x168>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e932:	429a      	cmp	r2, r3
 800e934:	d3b8      	bcc.n	800e8a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e936:	2301      	movs	r3, #1
 800e938:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e93a:	e7b5      	b.n	800e8a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e93c:	4b17      	ldr	r3, [pc, #92]	; (800e99c <xTaskIncrementTick+0x168>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e942:	4915      	ldr	r1, [pc, #84]	; (800e998 <xTaskIncrementTick+0x164>)
 800e944:	4613      	mov	r3, r2
 800e946:	009b      	lsls	r3, r3, #2
 800e948:	4413      	add	r3, r2
 800e94a:	009b      	lsls	r3, r3, #2
 800e94c:	440b      	add	r3, r1
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2b01      	cmp	r3, #1
 800e952:	d901      	bls.n	800e958 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e954:	2301      	movs	r3, #1
 800e956:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e958:	4b11      	ldr	r3, [pc, #68]	; (800e9a0 <xTaskIncrementTick+0x16c>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d007      	beq.n	800e970 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e960:	2301      	movs	r3, #1
 800e962:	617b      	str	r3, [r7, #20]
 800e964:	e004      	b.n	800e970 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e966:	4b0f      	ldr	r3, [pc, #60]	; (800e9a4 <xTaskIncrementTick+0x170>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	3301      	adds	r3, #1
 800e96c:	4a0d      	ldr	r2, [pc, #52]	; (800e9a4 <xTaskIncrementTick+0x170>)
 800e96e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e970:	697b      	ldr	r3, [r7, #20]
}
 800e972:	4618      	mov	r0, r3
 800e974:	3718      	adds	r7, #24
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	20002660 	.word	0x20002660
 800e980:	2000263c 	.word	0x2000263c
 800e984:	200025f0 	.word	0x200025f0
 800e988:	200025f4 	.word	0x200025f4
 800e98c:	20002650 	.word	0x20002650
 800e990:	20002658 	.word	0x20002658
 800e994:	20002640 	.word	0x20002640
 800e998:	20002168 	.word	0x20002168
 800e99c:	20002164 	.word	0x20002164
 800e9a0:	2000264c 	.word	0x2000264c
 800e9a4:	20002648 	.word	0x20002648

0800e9a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b085      	sub	sp, #20
 800e9ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e9ae:	4b28      	ldr	r3, [pc, #160]	; (800ea50 <vTaskSwitchContext+0xa8>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d003      	beq.n	800e9be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e9b6:	4b27      	ldr	r3, [pc, #156]	; (800ea54 <vTaskSwitchContext+0xac>)
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e9bc:	e041      	b.n	800ea42 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e9be:	4b25      	ldr	r3, [pc, #148]	; (800ea54 <vTaskSwitchContext+0xac>)
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9c4:	4b24      	ldr	r3, [pc, #144]	; (800ea58 <vTaskSwitchContext+0xb0>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	60fb      	str	r3, [r7, #12]
 800e9ca:	e010      	b.n	800e9ee <vTaskSwitchContext+0x46>
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d10a      	bne.n	800e9e8 <vTaskSwitchContext+0x40>
	__asm volatile
 800e9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d6:	f383 8811 	msr	BASEPRI, r3
 800e9da:	f3bf 8f6f 	isb	sy
 800e9de:	f3bf 8f4f 	dsb	sy
 800e9e2:	607b      	str	r3, [r7, #4]
}
 800e9e4:	bf00      	nop
 800e9e6:	e7fe      	b.n	800e9e6 <vTaskSwitchContext+0x3e>
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	3b01      	subs	r3, #1
 800e9ec:	60fb      	str	r3, [r7, #12]
 800e9ee:	491b      	ldr	r1, [pc, #108]	; (800ea5c <vTaskSwitchContext+0xb4>)
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4413      	add	r3, r2
 800e9f8:	009b      	lsls	r3, r3, #2
 800e9fa:	440b      	add	r3, r1
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d0e4      	beq.n	800e9cc <vTaskSwitchContext+0x24>
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	4613      	mov	r3, r2
 800ea06:	009b      	lsls	r3, r3, #2
 800ea08:	4413      	add	r3, r2
 800ea0a:	009b      	lsls	r3, r3, #2
 800ea0c:	4a13      	ldr	r2, [pc, #76]	; (800ea5c <vTaskSwitchContext+0xb4>)
 800ea0e:	4413      	add	r3, r2
 800ea10:	60bb      	str	r3, [r7, #8]
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	685a      	ldr	r2, [r3, #4]
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	605a      	str	r2, [r3, #4]
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	685a      	ldr	r2, [r3, #4]
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	3308      	adds	r3, #8
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d104      	bne.n	800ea32 <vTaskSwitchContext+0x8a>
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	685a      	ldr	r2, [r3, #4]
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	605a      	str	r2, [r3, #4]
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	4a09      	ldr	r2, [pc, #36]	; (800ea60 <vTaskSwitchContext+0xb8>)
 800ea3a:	6013      	str	r3, [r2, #0]
 800ea3c:	4a06      	ldr	r2, [pc, #24]	; (800ea58 <vTaskSwitchContext+0xb0>)
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	6013      	str	r3, [r2, #0]
}
 800ea42:	bf00      	nop
 800ea44:	3714      	adds	r7, #20
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr
 800ea4e:	bf00      	nop
 800ea50:	20002660 	.word	0x20002660
 800ea54:	2000264c 	.word	0x2000264c
 800ea58:	20002640 	.word	0x20002640
 800ea5c:	20002168 	.word	0x20002168
 800ea60:	20002164 	.word	0x20002164

0800ea64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d10a      	bne.n	800ea8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ea74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea78:	f383 8811 	msr	BASEPRI, r3
 800ea7c:	f3bf 8f6f 	isb	sy
 800ea80:	f3bf 8f4f 	dsb	sy
 800ea84:	60fb      	str	r3, [r7, #12]
}
 800ea86:	bf00      	nop
 800ea88:	e7fe      	b.n	800ea88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea8a:	4b07      	ldr	r3, [pc, #28]	; (800eaa8 <vTaskPlaceOnEventList+0x44>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	3318      	adds	r3, #24
 800ea90:	4619      	mov	r1, r3
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f7fe fe09 	bl	800d6aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ea98:	2101      	movs	r1, #1
 800ea9a:	6838      	ldr	r0, [r7, #0]
 800ea9c:	f000 fa7c 	bl	800ef98 <prvAddCurrentTaskToDelayedList>
}
 800eaa0:	bf00      	nop
 800eaa2:	3710      	adds	r7, #16
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	20002164 	.word	0x20002164

0800eaac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b086      	sub	sp, #24
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d10a      	bne.n	800ead4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800eabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac2:	f383 8811 	msr	BASEPRI, r3
 800eac6:	f3bf 8f6f 	isb	sy
 800eaca:	f3bf 8f4f 	dsb	sy
 800eace:	617b      	str	r3, [r7, #20]
}
 800ead0:	bf00      	nop
 800ead2:	e7fe      	b.n	800ead2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ead4:	4b0a      	ldr	r3, [pc, #40]	; (800eb00 <vTaskPlaceOnEventListRestricted+0x54>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	3318      	adds	r3, #24
 800eada:	4619      	mov	r1, r3
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	f7fe fdc0 	bl	800d662 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d002      	beq.n	800eaee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800eae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eaec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800eaee:	6879      	ldr	r1, [r7, #4]
 800eaf0:	68b8      	ldr	r0, [r7, #8]
 800eaf2:	f000 fa51 	bl	800ef98 <prvAddCurrentTaskToDelayedList>
	}
 800eaf6:	bf00      	nop
 800eaf8:	3718      	adds	r7, #24
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	20002164 	.word	0x20002164

0800eb04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b086      	sub	sp, #24
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	68db      	ldr	r3, [r3, #12]
 800eb10:	68db      	ldr	r3, [r3, #12]
 800eb12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d10a      	bne.n	800eb30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800eb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb1e:	f383 8811 	msr	BASEPRI, r3
 800eb22:	f3bf 8f6f 	isb	sy
 800eb26:	f3bf 8f4f 	dsb	sy
 800eb2a:	60fb      	str	r3, [r7, #12]
}
 800eb2c:	bf00      	nop
 800eb2e:	e7fe      	b.n	800eb2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	3318      	adds	r3, #24
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7fe fdf1 	bl	800d71c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb3a:	4b1e      	ldr	r3, [pc, #120]	; (800ebb4 <xTaskRemoveFromEventList+0xb0>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d11d      	bne.n	800eb7e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	3304      	adds	r3, #4
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7fe fde8 	bl	800d71c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb50:	4b19      	ldr	r3, [pc, #100]	; (800ebb8 <xTaskRemoveFromEventList+0xb4>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d903      	bls.n	800eb60 <xTaskRemoveFromEventList+0x5c>
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb5c:	4a16      	ldr	r2, [pc, #88]	; (800ebb8 <xTaskRemoveFromEventList+0xb4>)
 800eb5e:	6013      	str	r3, [r2, #0]
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb64:	4613      	mov	r3, r2
 800eb66:	009b      	lsls	r3, r3, #2
 800eb68:	4413      	add	r3, r2
 800eb6a:	009b      	lsls	r3, r3, #2
 800eb6c:	4a13      	ldr	r2, [pc, #76]	; (800ebbc <xTaskRemoveFromEventList+0xb8>)
 800eb6e:	441a      	add	r2, r3
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	3304      	adds	r3, #4
 800eb74:	4619      	mov	r1, r3
 800eb76:	4610      	mov	r0, r2
 800eb78:	f7fe fd73 	bl	800d662 <vListInsertEnd>
 800eb7c:	e005      	b.n	800eb8a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	3318      	adds	r3, #24
 800eb82:	4619      	mov	r1, r3
 800eb84:	480e      	ldr	r0, [pc, #56]	; (800ebc0 <xTaskRemoveFromEventList+0xbc>)
 800eb86:	f7fe fd6c 	bl	800d662 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb8e:	4b0d      	ldr	r3, [pc, #52]	; (800ebc4 <xTaskRemoveFromEventList+0xc0>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d905      	bls.n	800eba4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eb98:	2301      	movs	r3, #1
 800eb9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eb9c:	4b0a      	ldr	r3, [pc, #40]	; (800ebc8 <xTaskRemoveFromEventList+0xc4>)
 800eb9e:	2201      	movs	r2, #1
 800eba0:	601a      	str	r2, [r3, #0]
 800eba2:	e001      	b.n	800eba8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800eba4:	2300      	movs	r3, #0
 800eba6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eba8:	697b      	ldr	r3, [r7, #20]
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3718      	adds	r7, #24
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	20002660 	.word	0x20002660
 800ebb8:	20002640 	.word	0x20002640
 800ebbc:	20002168 	.word	0x20002168
 800ebc0:	200025f8 	.word	0x200025f8
 800ebc4:	20002164 	.word	0x20002164
 800ebc8:	2000264c 	.word	0x2000264c

0800ebcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ebd4:	4b06      	ldr	r3, [pc, #24]	; (800ebf0 <vTaskInternalSetTimeOutState+0x24>)
 800ebd6:	681a      	ldr	r2, [r3, #0]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ebdc:	4b05      	ldr	r3, [pc, #20]	; (800ebf4 <vTaskInternalSetTimeOutState+0x28>)
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	605a      	str	r2, [r3, #4]
}
 800ebe4:	bf00      	nop
 800ebe6:	370c      	adds	r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr
 800ebf0:	20002650 	.word	0x20002650
 800ebf4:	2000263c 	.word	0x2000263c

0800ebf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b088      	sub	sp, #32
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d10a      	bne.n	800ec1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ec08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec0c:	f383 8811 	msr	BASEPRI, r3
 800ec10:	f3bf 8f6f 	isb	sy
 800ec14:	f3bf 8f4f 	dsb	sy
 800ec18:	613b      	str	r3, [r7, #16]
}
 800ec1a:	bf00      	nop
 800ec1c:	e7fe      	b.n	800ec1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d10a      	bne.n	800ec3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ec24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec28:	f383 8811 	msr	BASEPRI, r3
 800ec2c:	f3bf 8f6f 	isb	sy
 800ec30:	f3bf 8f4f 	dsb	sy
 800ec34:	60fb      	str	r3, [r7, #12]
}
 800ec36:	bf00      	nop
 800ec38:	e7fe      	b.n	800ec38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ec3a:	f000 fe7b 	bl	800f934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ec3e:	4b1d      	ldr	r3, [pc, #116]	; (800ecb4 <xTaskCheckForTimeOut+0xbc>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	69ba      	ldr	r2, [r7, #24]
 800ec4a:	1ad3      	subs	r3, r2, r3
 800ec4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec56:	d102      	bne.n	800ec5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	61fb      	str	r3, [r7, #28]
 800ec5c:	e023      	b.n	800eca6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	4b15      	ldr	r3, [pc, #84]	; (800ecb8 <xTaskCheckForTimeOut+0xc0>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d007      	beq.n	800ec7a <xTaskCheckForTimeOut+0x82>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	69ba      	ldr	r2, [r7, #24]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d302      	bcc.n	800ec7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ec74:	2301      	movs	r3, #1
 800ec76:	61fb      	str	r3, [r7, #28]
 800ec78:	e015      	b.n	800eca6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	697a      	ldr	r2, [r7, #20]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d20b      	bcs.n	800ec9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	1ad2      	subs	r2, r2, r3
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f7ff ff9b 	bl	800ebcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ec96:	2300      	movs	r3, #0
 800ec98:	61fb      	str	r3, [r7, #28]
 800ec9a:	e004      	b.n	800eca6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eca2:	2301      	movs	r3, #1
 800eca4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eca6:	f000 fe75 	bl	800f994 <vPortExitCritical>

	return xReturn;
 800ecaa:	69fb      	ldr	r3, [r7, #28]
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3720      	adds	r7, #32
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	2000263c 	.word	0x2000263c
 800ecb8:	20002650 	.word	0x20002650

0800ecbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ecc0:	4b03      	ldr	r3, [pc, #12]	; (800ecd0 <vTaskMissedYield+0x14>)
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	601a      	str	r2, [r3, #0]
}
 800ecc6:	bf00      	nop
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr
 800ecd0:	2000264c 	.word	0x2000264c

0800ecd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ecdc:	f000 f852 	bl	800ed84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ece0:	4b06      	ldr	r3, [pc, #24]	; (800ecfc <prvIdleTask+0x28>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d9f9      	bls.n	800ecdc <prvIdleTask+0x8>
			{
				taskYIELD();
 800ece8:	4b05      	ldr	r3, [pc, #20]	; (800ed00 <prvIdleTask+0x2c>)
 800ecea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecee:	601a      	str	r2, [r3, #0]
 800ecf0:	f3bf 8f4f 	dsb	sy
 800ecf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ecf8:	e7f0      	b.n	800ecdc <prvIdleTask+0x8>
 800ecfa:	bf00      	nop
 800ecfc:	20002168 	.word	0x20002168
 800ed00:	e000ed04 	.word	0xe000ed04

0800ed04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	607b      	str	r3, [r7, #4]
 800ed0e:	e00c      	b.n	800ed2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	4613      	mov	r3, r2
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	4413      	add	r3, r2
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	4a12      	ldr	r2, [pc, #72]	; (800ed64 <prvInitialiseTaskLists+0x60>)
 800ed1c:	4413      	add	r3, r2
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7fe fc72 	bl	800d608 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	3301      	adds	r3, #1
 800ed28:	607b      	str	r3, [r7, #4]
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2b37      	cmp	r3, #55	; 0x37
 800ed2e:	d9ef      	bls.n	800ed10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ed30:	480d      	ldr	r0, [pc, #52]	; (800ed68 <prvInitialiseTaskLists+0x64>)
 800ed32:	f7fe fc69 	bl	800d608 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ed36:	480d      	ldr	r0, [pc, #52]	; (800ed6c <prvInitialiseTaskLists+0x68>)
 800ed38:	f7fe fc66 	bl	800d608 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ed3c:	480c      	ldr	r0, [pc, #48]	; (800ed70 <prvInitialiseTaskLists+0x6c>)
 800ed3e:	f7fe fc63 	bl	800d608 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ed42:	480c      	ldr	r0, [pc, #48]	; (800ed74 <prvInitialiseTaskLists+0x70>)
 800ed44:	f7fe fc60 	bl	800d608 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ed48:	480b      	ldr	r0, [pc, #44]	; (800ed78 <prvInitialiseTaskLists+0x74>)
 800ed4a:	f7fe fc5d 	bl	800d608 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ed4e:	4b0b      	ldr	r3, [pc, #44]	; (800ed7c <prvInitialiseTaskLists+0x78>)
 800ed50:	4a05      	ldr	r2, [pc, #20]	; (800ed68 <prvInitialiseTaskLists+0x64>)
 800ed52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed54:	4b0a      	ldr	r3, [pc, #40]	; (800ed80 <prvInitialiseTaskLists+0x7c>)
 800ed56:	4a05      	ldr	r2, [pc, #20]	; (800ed6c <prvInitialiseTaskLists+0x68>)
 800ed58:	601a      	str	r2, [r3, #0]
}
 800ed5a:	bf00      	nop
 800ed5c:	3708      	adds	r7, #8
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	20002168 	.word	0x20002168
 800ed68:	200025c8 	.word	0x200025c8
 800ed6c:	200025dc 	.word	0x200025dc
 800ed70:	200025f8 	.word	0x200025f8
 800ed74:	2000260c 	.word	0x2000260c
 800ed78:	20002624 	.word	0x20002624
 800ed7c:	200025f0 	.word	0x200025f0
 800ed80:	200025f4 	.word	0x200025f4

0800ed84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed8a:	e019      	b.n	800edc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ed8c:	f000 fdd2 	bl	800f934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed90:	4b10      	ldr	r3, [pc, #64]	; (800edd4 <prvCheckTasksWaitingTermination+0x50>)
 800ed92:	68db      	ldr	r3, [r3, #12]
 800ed94:	68db      	ldr	r3, [r3, #12]
 800ed96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	3304      	adds	r3, #4
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7fe fcbd 	bl	800d71c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eda2:	4b0d      	ldr	r3, [pc, #52]	; (800edd8 <prvCheckTasksWaitingTermination+0x54>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	3b01      	subs	r3, #1
 800eda8:	4a0b      	ldr	r2, [pc, #44]	; (800edd8 <prvCheckTasksWaitingTermination+0x54>)
 800edaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800edac:	4b0b      	ldr	r3, [pc, #44]	; (800eddc <prvCheckTasksWaitingTermination+0x58>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	3b01      	subs	r3, #1
 800edb2:	4a0a      	ldr	r2, [pc, #40]	; (800eddc <prvCheckTasksWaitingTermination+0x58>)
 800edb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800edb6:	f000 fded 	bl	800f994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f000 f810 	bl	800ede0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800edc0:	4b06      	ldr	r3, [pc, #24]	; (800eddc <prvCheckTasksWaitingTermination+0x58>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d1e1      	bne.n	800ed8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800edc8:	bf00      	nop
 800edca:	bf00      	nop
 800edcc:	3708      	adds	r7, #8
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	bf00      	nop
 800edd4:	2000260c 	.word	0x2000260c
 800edd8:	20002638 	.word	0x20002638
 800eddc:	20002620 	.word	0x20002620

0800ede0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d108      	bne.n	800ee04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edf6:	4618      	mov	r0, r3
 800edf8:	f000 ff8a 	bl	800fd10 <vPortFree>
				vPortFree( pxTCB );
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 ff87 	bl	800fd10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ee02:	e018      	b.n	800ee36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d103      	bne.n	800ee16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f000 ff7e 	bl	800fd10 <vPortFree>
	}
 800ee14:	e00f      	b.n	800ee36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ee1c:	2b02      	cmp	r3, #2
 800ee1e:	d00a      	beq.n	800ee36 <prvDeleteTCB+0x56>
	__asm volatile
 800ee20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee24:	f383 8811 	msr	BASEPRI, r3
 800ee28:	f3bf 8f6f 	isb	sy
 800ee2c:	f3bf 8f4f 	dsb	sy
 800ee30:	60fb      	str	r3, [r7, #12]
}
 800ee32:	bf00      	nop
 800ee34:	e7fe      	b.n	800ee34 <prvDeleteTCB+0x54>
	}
 800ee36:	bf00      	nop
 800ee38:	3710      	adds	r7, #16
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
	...

0800ee40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ee40:	b480      	push	{r7}
 800ee42:	b083      	sub	sp, #12
 800ee44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee46:	4b0c      	ldr	r3, [pc, #48]	; (800ee78 <prvResetNextTaskUnblockTime+0x38>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d104      	bne.n	800ee5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ee50:	4b0a      	ldr	r3, [pc, #40]	; (800ee7c <prvResetNextTaskUnblockTime+0x3c>)
 800ee52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ee58:	e008      	b.n	800ee6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee5a:	4b07      	ldr	r3, [pc, #28]	; (800ee78 <prvResetNextTaskUnblockTime+0x38>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	68db      	ldr	r3, [r3, #12]
 800ee60:	68db      	ldr	r3, [r3, #12]
 800ee62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	685b      	ldr	r3, [r3, #4]
 800ee68:	4a04      	ldr	r2, [pc, #16]	; (800ee7c <prvResetNextTaskUnblockTime+0x3c>)
 800ee6a:	6013      	str	r3, [r2, #0]
}
 800ee6c:	bf00      	nop
 800ee6e:	370c      	adds	r7, #12
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr
 800ee78:	200025f0 	.word	0x200025f0
 800ee7c:	20002658 	.word	0x20002658

0800ee80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ee80:	b480      	push	{r7}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ee86:	4b0b      	ldr	r3, [pc, #44]	; (800eeb4 <xTaskGetSchedulerState+0x34>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d102      	bne.n	800ee94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	607b      	str	r3, [r7, #4]
 800ee92:	e008      	b.n	800eea6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee94:	4b08      	ldr	r3, [pc, #32]	; (800eeb8 <xTaskGetSchedulerState+0x38>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d102      	bne.n	800eea2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ee9c:	2302      	movs	r3, #2
 800ee9e:	607b      	str	r3, [r7, #4]
 800eea0:	e001      	b.n	800eea6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eea2:	2300      	movs	r3, #0
 800eea4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eea6:	687b      	ldr	r3, [r7, #4]
	}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	370c      	adds	r7, #12
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr
 800eeb4:	20002644 	.word	0x20002644
 800eeb8:	20002660 	.word	0x20002660

0800eebc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b086      	sub	sp, #24
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eec8:	2300      	movs	r3, #0
 800eeca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d056      	beq.n	800ef80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eed2:	4b2e      	ldr	r3, [pc, #184]	; (800ef8c <xTaskPriorityDisinherit+0xd0>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	693a      	ldr	r2, [r7, #16]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d00a      	beq.n	800eef2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800eedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee0:	f383 8811 	msr	BASEPRI, r3
 800eee4:	f3bf 8f6f 	isb	sy
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	60fb      	str	r3, [r7, #12]
}
 800eeee:	bf00      	nop
 800eef0:	e7fe      	b.n	800eef0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d10a      	bne.n	800ef10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800eefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eefe:	f383 8811 	msr	BASEPRI, r3
 800ef02:	f3bf 8f6f 	isb	sy
 800ef06:	f3bf 8f4f 	dsb	sy
 800ef0a:	60bb      	str	r3, [r7, #8]
}
 800ef0c:	bf00      	nop
 800ef0e:	e7fe      	b.n	800ef0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef14:	1e5a      	subs	r2, r3, #1
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d02c      	beq.n	800ef80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ef26:	693b      	ldr	r3, [r7, #16]
 800ef28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d128      	bne.n	800ef80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	3304      	adds	r3, #4
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fe fbf2 	bl	800d71c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef3c:	693b      	ldr	r3, [r7, #16]
 800ef3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef50:	4b0f      	ldr	r3, [pc, #60]	; (800ef90 <xTaskPriorityDisinherit+0xd4>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d903      	bls.n	800ef60 <xTaskPriorityDisinherit+0xa4>
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef5c:	4a0c      	ldr	r2, [pc, #48]	; (800ef90 <xTaskPriorityDisinherit+0xd4>)
 800ef5e:	6013      	str	r3, [r2, #0]
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef64:	4613      	mov	r3, r2
 800ef66:	009b      	lsls	r3, r3, #2
 800ef68:	4413      	add	r3, r2
 800ef6a:	009b      	lsls	r3, r3, #2
 800ef6c:	4a09      	ldr	r2, [pc, #36]	; (800ef94 <xTaskPriorityDisinherit+0xd8>)
 800ef6e:	441a      	add	r2, r3
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	3304      	adds	r3, #4
 800ef74:	4619      	mov	r1, r3
 800ef76:	4610      	mov	r0, r2
 800ef78:	f7fe fb73 	bl	800d662 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef80:	697b      	ldr	r3, [r7, #20]
	}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3718      	adds	r7, #24
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	20002164 	.word	0x20002164
 800ef90:	20002640 	.word	0x20002640
 800ef94:	20002168 	.word	0x20002168

0800ef98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b084      	sub	sp, #16
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800efa2:	4b21      	ldr	r3, [pc, #132]	; (800f028 <prvAddCurrentTaskToDelayedList+0x90>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efa8:	4b20      	ldr	r3, [pc, #128]	; (800f02c <prvAddCurrentTaskToDelayedList+0x94>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	3304      	adds	r3, #4
 800efae:	4618      	mov	r0, r3
 800efb0:	f7fe fbb4 	bl	800d71c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efba:	d10a      	bne.n	800efd2 <prvAddCurrentTaskToDelayedList+0x3a>
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d007      	beq.n	800efd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efc2:	4b1a      	ldr	r3, [pc, #104]	; (800f02c <prvAddCurrentTaskToDelayedList+0x94>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	3304      	adds	r3, #4
 800efc8:	4619      	mov	r1, r3
 800efca:	4819      	ldr	r0, [pc, #100]	; (800f030 <prvAddCurrentTaskToDelayedList+0x98>)
 800efcc:	f7fe fb49 	bl	800d662 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800efd0:	e026      	b.n	800f020 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800efd2:	68fa      	ldr	r2, [r7, #12]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4413      	add	r3, r2
 800efd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800efda:	4b14      	ldr	r3, [pc, #80]	; (800f02c <prvAddCurrentTaskToDelayedList+0x94>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800efe2:	68ba      	ldr	r2, [r7, #8]
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d209      	bcs.n	800effe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efea:	4b12      	ldr	r3, [pc, #72]	; (800f034 <prvAddCurrentTaskToDelayedList+0x9c>)
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	4b0f      	ldr	r3, [pc, #60]	; (800f02c <prvAddCurrentTaskToDelayedList+0x94>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	3304      	adds	r3, #4
 800eff4:	4619      	mov	r1, r3
 800eff6:	4610      	mov	r0, r2
 800eff8:	f7fe fb57 	bl	800d6aa <vListInsert>
}
 800effc:	e010      	b.n	800f020 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800effe:	4b0e      	ldr	r3, [pc, #56]	; (800f038 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	4b0a      	ldr	r3, [pc, #40]	; (800f02c <prvAddCurrentTaskToDelayedList+0x94>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	3304      	adds	r3, #4
 800f008:	4619      	mov	r1, r3
 800f00a:	4610      	mov	r0, r2
 800f00c:	f7fe fb4d 	bl	800d6aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f010:	4b0a      	ldr	r3, [pc, #40]	; (800f03c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	68ba      	ldr	r2, [r7, #8]
 800f016:	429a      	cmp	r2, r3
 800f018:	d202      	bcs.n	800f020 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f01a:	4a08      	ldr	r2, [pc, #32]	; (800f03c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	6013      	str	r3, [r2, #0]
}
 800f020:	bf00      	nop
 800f022:	3710      	adds	r7, #16
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}
 800f028:	2000263c 	.word	0x2000263c
 800f02c:	20002164 	.word	0x20002164
 800f030:	20002624 	.word	0x20002624
 800f034:	200025f4 	.word	0x200025f4
 800f038:	200025f0 	.word	0x200025f0
 800f03c:	20002658 	.word	0x20002658

0800f040 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b08a      	sub	sp, #40	; 0x28
 800f044:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f046:	2300      	movs	r3, #0
 800f048:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f04a:	f000 fb07 	bl	800f65c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f04e:	4b1c      	ldr	r3, [pc, #112]	; (800f0c0 <xTimerCreateTimerTask+0x80>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d021      	beq.n	800f09a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f056:	2300      	movs	r3, #0
 800f058:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f05a:	2300      	movs	r3, #0
 800f05c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f05e:	1d3a      	adds	r2, r7, #4
 800f060:	f107 0108 	add.w	r1, r7, #8
 800f064:	f107 030c 	add.w	r3, r7, #12
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fe fab3 	bl	800d5d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f06e:	6879      	ldr	r1, [r7, #4]
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	68fa      	ldr	r2, [r7, #12]
 800f074:	9202      	str	r2, [sp, #8]
 800f076:	9301      	str	r3, [sp, #4]
 800f078:	2302      	movs	r3, #2
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	2300      	movs	r3, #0
 800f07e:	460a      	mov	r2, r1
 800f080:	4910      	ldr	r1, [pc, #64]	; (800f0c4 <xTimerCreateTimerTask+0x84>)
 800f082:	4811      	ldr	r0, [pc, #68]	; (800f0c8 <xTimerCreateTimerTask+0x88>)
 800f084:	f7ff f860 	bl	800e148 <xTaskCreateStatic>
 800f088:	4603      	mov	r3, r0
 800f08a:	4a10      	ldr	r2, [pc, #64]	; (800f0cc <xTimerCreateTimerTask+0x8c>)
 800f08c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f08e:	4b0f      	ldr	r3, [pc, #60]	; (800f0cc <xTimerCreateTimerTask+0x8c>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d001      	beq.n	800f09a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f096:	2301      	movs	r3, #1
 800f098:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d10a      	bne.n	800f0b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a4:	f383 8811 	msr	BASEPRI, r3
 800f0a8:	f3bf 8f6f 	isb	sy
 800f0ac:	f3bf 8f4f 	dsb	sy
 800f0b0:	613b      	str	r3, [r7, #16]
}
 800f0b2:	bf00      	nop
 800f0b4:	e7fe      	b.n	800f0b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f0b6:	697b      	ldr	r3, [r7, #20]
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3718      	adds	r7, #24
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	20002694 	.word	0x20002694
 800f0c4:	0801496c 	.word	0x0801496c
 800f0c8:	0800f205 	.word	0x0800f205
 800f0cc:	20002698 	.word	0x20002698

0800f0d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b08a      	sub	sp, #40	; 0x28
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	60b9      	str	r1, [r7, #8]
 800f0da:	607a      	str	r2, [r7, #4]
 800f0dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d10a      	bne.n	800f0fe <xTimerGenericCommand+0x2e>
	__asm volatile
 800f0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ec:	f383 8811 	msr	BASEPRI, r3
 800f0f0:	f3bf 8f6f 	isb	sy
 800f0f4:	f3bf 8f4f 	dsb	sy
 800f0f8:	623b      	str	r3, [r7, #32]
}
 800f0fa:	bf00      	nop
 800f0fc:	e7fe      	b.n	800f0fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f0fe:	4b1a      	ldr	r3, [pc, #104]	; (800f168 <xTimerGenericCommand+0x98>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d02a      	beq.n	800f15c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	2b05      	cmp	r3, #5
 800f116:	dc18      	bgt.n	800f14a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f118:	f7ff feb2 	bl	800ee80 <xTaskGetSchedulerState>
 800f11c:	4603      	mov	r3, r0
 800f11e:	2b02      	cmp	r3, #2
 800f120:	d109      	bne.n	800f136 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f122:	4b11      	ldr	r3, [pc, #68]	; (800f168 <xTimerGenericCommand+0x98>)
 800f124:	6818      	ldr	r0, [r3, #0]
 800f126:	f107 0110 	add.w	r1, r7, #16
 800f12a:	2300      	movs	r3, #0
 800f12c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f12e:	f7fe fc23 	bl	800d978 <xQueueGenericSend>
 800f132:	6278      	str	r0, [r7, #36]	; 0x24
 800f134:	e012      	b.n	800f15c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f136:	4b0c      	ldr	r3, [pc, #48]	; (800f168 <xTimerGenericCommand+0x98>)
 800f138:	6818      	ldr	r0, [r3, #0]
 800f13a:	f107 0110 	add.w	r1, r7, #16
 800f13e:	2300      	movs	r3, #0
 800f140:	2200      	movs	r2, #0
 800f142:	f7fe fc19 	bl	800d978 <xQueueGenericSend>
 800f146:	6278      	str	r0, [r7, #36]	; 0x24
 800f148:	e008      	b.n	800f15c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f14a:	4b07      	ldr	r3, [pc, #28]	; (800f168 <xTimerGenericCommand+0x98>)
 800f14c:	6818      	ldr	r0, [r3, #0]
 800f14e:	f107 0110 	add.w	r1, r7, #16
 800f152:	2300      	movs	r3, #0
 800f154:	683a      	ldr	r2, [r7, #0]
 800f156:	f7fe fd0d 	bl	800db74 <xQueueGenericSendFromISR>
 800f15a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3728      	adds	r7, #40	; 0x28
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}
 800f166:	bf00      	nop
 800f168:	20002694 	.word	0x20002694

0800f16c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b088      	sub	sp, #32
 800f170:	af02      	add	r7, sp, #8
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f176:	4b22      	ldr	r3, [pc, #136]	; (800f200 <prvProcessExpiredTimer+0x94>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	68db      	ldr	r3, [r3, #12]
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	3304      	adds	r3, #4
 800f184:	4618      	mov	r0, r3
 800f186:	f7fe fac9 	bl	800d71c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f18a:	697b      	ldr	r3, [r7, #20]
 800f18c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f190:	f003 0304 	and.w	r3, r3, #4
 800f194:	2b00      	cmp	r3, #0
 800f196:	d022      	beq.n	800f1de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	699a      	ldr	r2, [r3, #24]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	18d1      	adds	r1, r2, r3
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	683a      	ldr	r2, [r7, #0]
 800f1a4:	6978      	ldr	r0, [r7, #20]
 800f1a6:	f000 f8d1 	bl	800f34c <prvInsertTimerInActiveList>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d01f      	beq.n	800f1f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	9300      	str	r3, [sp, #0]
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	6978      	ldr	r0, [r7, #20]
 800f1bc:	f7ff ff88 	bl	800f0d0 <xTimerGenericCommand>
 800f1c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d113      	bne.n	800f1f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1cc:	f383 8811 	msr	BASEPRI, r3
 800f1d0:	f3bf 8f6f 	isb	sy
 800f1d4:	f3bf 8f4f 	dsb	sy
 800f1d8:	60fb      	str	r3, [r7, #12]
}
 800f1da:	bf00      	nop
 800f1dc:	e7fe      	b.n	800f1dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1e4:	f023 0301 	bic.w	r3, r3, #1
 800f1e8:	b2da      	uxtb	r2, r3
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1f0:	697b      	ldr	r3, [r7, #20]
 800f1f2:	6a1b      	ldr	r3, [r3, #32]
 800f1f4:	6978      	ldr	r0, [r7, #20]
 800f1f6:	4798      	blx	r3
}
 800f1f8:	bf00      	nop
 800f1fa:	3718      	adds	r7, #24
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}
 800f200:	2000268c 	.word	0x2000268c

0800f204 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f20c:	f107 0308 	add.w	r3, r7, #8
 800f210:	4618      	mov	r0, r3
 800f212:	f000 f857 	bl	800f2c4 <prvGetNextExpireTime>
 800f216:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	4619      	mov	r1, r3
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f000 f803 	bl	800f228 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f222:	f000 f8d5 	bl	800f3d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f226:	e7f1      	b.n	800f20c <prvTimerTask+0x8>

0800f228 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f232:	f7ff fa43 	bl	800e6bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f236:	f107 0308 	add.w	r3, r7, #8
 800f23a:	4618      	mov	r0, r3
 800f23c:	f000 f866 	bl	800f30c <prvSampleTimeNow>
 800f240:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d130      	bne.n	800f2aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d10a      	bne.n	800f264 <prvProcessTimerOrBlockTask+0x3c>
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	429a      	cmp	r2, r3
 800f254:	d806      	bhi.n	800f264 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f256:	f7ff fa3f 	bl	800e6d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f25a:	68f9      	ldr	r1, [r7, #12]
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7ff ff85 	bl	800f16c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f262:	e024      	b.n	800f2ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d008      	beq.n	800f27c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f26a:	4b13      	ldr	r3, [pc, #76]	; (800f2b8 <prvProcessTimerOrBlockTask+0x90>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d101      	bne.n	800f278 <prvProcessTimerOrBlockTask+0x50>
 800f274:	2301      	movs	r3, #1
 800f276:	e000      	b.n	800f27a <prvProcessTimerOrBlockTask+0x52>
 800f278:	2300      	movs	r3, #0
 800f27a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f27c:	4b0f      	ldr	r3, [pc, #60]	; (800f2bc <prvProcessTimerOrBlockTask+0x94>)
 800f27e:	6818      	ldr	r0, [r3, #0]
 800f280:	687a      	ldr	r2, [r7, #4]
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	1ad3      	subs	r3, r2, r3
 800f286:	683a      	ldr	r2, [r7, #0]
 800f288:	4619      	mov	r1, r3
 800f28a:	f7fe ff29 	bl	800e0e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f28e:	f7ff fa23 	bl	800e6d8 <xTaskResumeAll>
 800f292:	4603      	mov	r3, r0
 800f294:	2b00      	cmp	r3, #0
 800f296:	d10a      	bne.n	800f2ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f298:	4b09      	ldr	r3, [pc, #36]	; (800f2c0 <prvProcessTimerOrBlockTask+0x98>)
 800f29a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f29e:	601a      	str	r2, [r3, #0]
 800f2a0:	f3bf 8f4f 	dsb	sy
 800f2a4:	f3bf 8f6f 	isb	sy
}
 800f2a8:	e001      	b.n	800f2ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f2aa:	f7ff fa15 	bl	800e6d8 <xTaskResumeAll>
}
 800f2ae:	bf00      	nop
 800f2b0:	3710      	adds	r7, #16
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	20002690 	.word	0x20002690
 800f2bc:	20002694 	.word	0x20002694
 800f2c0:	e000ed04 	.word	0xe000ed04

0800f2c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b085      	sub	sp, #20
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f2cc:	4b0e      	ldr	r3, [pc, #56]	; (800f308 <prvGetNextExpireTime+0x44>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d101      	bne.n	800f2da <prvGetNextExpireTime+0x16>
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	e000      	b.n	800f2dc <prvGetNextExpireTime+0x18>
 800f2da:	2200      	movs	r2, #0
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d105      	bne.n	800f2f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f2e8:	4b07      	ldr	r3, [pc, #28]	; (800f308 <prvGetNextExpireTime+0x44>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	68db      	ldr	r3, [r3, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	60fb      	str	r3, [r7, #12]
 800f2f2:	e001      	b.n	800f2f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3714      	adds	r7, #20
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr
 800f306:	bf00      	nop
 800f308:	2000268c 	.word	0x2000268c

0800f30c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b084      	sub	sp, #16
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f314:	f7ff fa7e 	bl	800e814 <xTaskGetTickCount>
 800f318:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f31a:	4b0b      	ldr	r3, [pc, #44]	; (800f348 <prvSampleTimeNow+0x3c>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	68fa      	ldr	r2, [r7, #12]
 800f320:	429a      	cmp	r2, r3
 800f322:	d205      	bcs.n	800f330 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f324:	f000 f936 	bl	800f594 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2201      	movs	r2, #1
 800f32c:	601a      	str	r2, [r3, #0]
 800f32e:	e002      	b.n	800f336 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2200      	movs	r2, #0
 800f334:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f336:	4a04      	ldr	r2, [pc, #16]	; (800f348 <prvSampleTimeNow+0x3c>)
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f33c:	68fb      	ldr	r3, [r7, #12]
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3710      	adds	r7, #16
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
 800f346:	bf00      	nop
 800f348:	2000269c 	.word	0x2000269c

0800f34c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b086      	sub	sp, #24
 800f350:	af00      	add	r7, sp, #0
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	607a      	str	r2, [r7, #4]
 800f358:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f35a:	2300      	movs	r3, #0
 800f35c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	68ba      	ldr	r2, [r7, #8]
 800f362:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	68fa      	ldr	r2, [r7, #12]
 800f368:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f36a:	68ba      	ldr	r2, [r7, #8]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d812      	bhi.n	800f398 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	1ad2      	subs	r2, r2, r3
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	699b      	ldr	r3, [r3, #24]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d302      	bcc.n	800f386 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f380:	2301      	movs	r3, #1
 800f382:	617b      	str	r3, [r7, #20]
 800f384:	e01b      	b.n	800f3be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f386:	4b10      	ldr	r3, [pc, #64]	; (800f3c8 <prvInsertTimerInActiveList+0x7c>)
 800f388:	681a      	ldr	r2, [r3, #0]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	3304      	adds	r3, #4
 800f38e:	4619      	mov	r1, r3
 800f390:	4610      	mov	r0, r2
 800f392:	f7fe f98a 	bl	800d6aa <vListInsert>
 800f396:	e012      	b.n	800f3be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d206      	bcs.n	800f3ae <prvInsertTimerInActiveList+0x62>
 800f3a0:	68ba      	ldr	r2, [r7, #8]
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d302      	bcc.n	800f3ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	617b      	str	r3, [r7, #20]
 800f3ac:	e007      	b.n	800f3be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f3ae:	4b07      	ldr	r3, [pc, #28]	; (800f3cc <prvInsertTimerInActiveList+0x80>)
 800f3b0:	681a      	ldr	r2, [r3, #0]
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	3304      	adds	r3, #4
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	4610      	mov	r0, r2
 800f3ba:	f7fe f976 	bl	800d6aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f3be:	697b      	ldr	r3, [r7, #20]
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3718      	adds	r7, #24
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	20002690 	.word	0x20002690
 800f3cc:	2000268c 	.word	0x2000268c

0800f3d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b08e      	sub	sp, #56	; 0x38
 800f3d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f3d6:	e0ca      	b.n	800f56e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	da18      	bge.n	800f410 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f3de:	1d3b      	adds	r3, r7, #4
 800f3e0:	3304      	adds	r3, #4
 800f3e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d10a      	bne.n	800f400 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ee:	f383 8811 	msr	BASEPRI, r3
 800f3f2:	f3bf 8f6f 	isb	sy
 800f3f6:	f3bf 8f4f 	dsb	sy
 800f3fa:	61fb      	str	r3, [r7, #28]
}
 800f3fc:	bf00      	nop
 800f3fe:	e7fe      	b.n	800f3fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f406:	6850      	ldr	r0, [r2, #4]
 800f408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f40a:	6892      	ldr	r2, [r2, #8]
 800f40c:	4611      	mov	r1, r2
 800f40e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2b00      	cmp	r3, #0
 800f414:	f2c0 80aa 	blt.w	800f56c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41e:	695b      	ldr	r3, [r3, #20]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d004      	beq.n	800f42e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f426:	3304      	adds	r3, #4
 800f428:	4618      	mov	r0, r3
 800f42a:	f7fe f977 	bl	800d71c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f42e:	463b      	mov	r3, r7
 800f430:	4618      	mov	r0, r3
 800f432:	f7ff ff6b 	bl	800f30c <prvSampleTimeNow>
 800f436:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2b09      	cmp	r3, #9
 800f43c:	f200 8097 	bhi.w	800f56e <prvProcessReceivedCommands+0x19e>
 800f440:	a201      	add	r2, pc, #4	; (adr r2, 800f448 <prvProcessReceivedCommands+0x78>)
 800f442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f446:	bf00      	nop
 800f448:	0800f471 	.word	0x0800f471
 800f44c:	0800f471 	.word	0x0800f471
 800f450:	0800f471 	.word	0x0800f471
 800f454:	0800f4e5 	.word	0x0800f4e5
 800f458:	0800f4f9 	.word	0x0800f4f9
 800f45c:	0800f543 	.word	0x0800f543
 800f460:	0800f471 	.word	0x0800f471
 800f464:	0800f471 	.word	0x0800f471
 800f468:	0800f4e5 	.word	0x0800f4e5
 800f46c:	0800f4f9 	.word	0x0800f4f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f476:	f043 0301 	orr.w	r3, r3, #1
 800f47a:	b2da      	uxtb	r2, r3
 800f47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f482:	68ba      	ldr	r2, [r7, #8]
 800f484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f486:	699b      	ldr	r3, [r3, #24]
 800f488:	18d1      	adds	r1, r2, r3
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f48e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f490:	f7ff ff5c 	bl	800f34c <prvInsertTimerInActiveList>
 800f494:	4603      	mov	r3, r0
 800f496:	2b00      	cmp	r3, #0
 800f498:	d069      	beq.n	800f56e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49c:	6a1b      	ldr	r3, [r3, #32]
 800f49e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4a8:	f003 0304 	and.w	r3, r3, #4
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d05e      	beq.n	800f56e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f4b0:	68ba      	ldr	r2, [r7, #8]
 800f4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b4:	699b      	ldr	r3, [r3, #24]
 800f4b6:	441a      	add	r2, r3
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	9300      	str	r3, [sp, #0]
 800f4bc:	2300      	movs	r3, #0
 800f4be:	2100      	movs	r1, #0
 800f4c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4c2:	f7ff fe05 	bl	800f0d0 <xTimerGenericCommand>
 800f4c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f4c8:	6a3b      	ldr	r3, [r7, #32]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d14f      	bne.n	800f56e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d2:	f383 8811 	msr	BASEPRI, r3
 800f4d6:	f3bf 8f6f 	isb	sy
 800f4da:	f3bf 8f4f 	dsb	sy
 800f4de:	61bb      	str	r3, [r7, #24]
}
 800f4e0:	bf00      	nop
 800f4e2:	e7fe      	b.n	800f4e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4ea:	f023 0301 	bic.w	r3, r3, #1
 800f4ee:	b2da      	uxtb	r2, r3
 800f4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f4f6:	e03a      	b.n	800f56e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4fe:	f043 0301 	orr.w	r3, r3, #1
 800f502:	b2da      	uxtb	r2, r3
 800f504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f50a:	68ba      	ldr	r2, [r7, #8]
 800f50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f512:	699b      	ldr	r3, [r3, #24]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d10a      	bne.n	800f52e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f51c:	f383 8811 	msr	BASEPRI, r3
 800f520:	f3bf 8f6f 	isb	sy
 800f524:	f3bf 8f4f 	dsb	sy
 800f528:	617b      	str	r3, [r7, #20]
}
 800f52a:	bf00      	nop
 800f52c:	e7fe      	b.n	800f52c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f530:	699a      	ldr	r2, [r3, #24]
 800f532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f534:	18d1      	adds	r1, r2, r3
 800f536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f53a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f53c:	f7ff ff06 	bl	800f34c <prvInsertTimerInActiveList>
					break;
 800f540:	e015      	b.n	800f56e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f548:	f003 0302 	and.w	r3, r3, #2
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d103      	bne.n	800f558 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f552:	f000 fbdd 	bl	800fd10 <vPortFree>
 800f556:	e00a      	b.n	800f56e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f55e:	f023 0301 	bic.w	r3, r3, #1
 800f562:	b2da      	uxtb	r2, r3
 800f564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f56a:	e000      	b.n	800f56e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f56c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f56e:	4b08      	ldr	r3, [pc, #32]	; (800f590 <prvProcessReceivedCommands+0x1c0>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	1d39      	adds	r1, r7, #4
 800f574:	2200      	movs	r2, #0
 800f576:	4618      	mov	r0, r3
 800f578:	f7fe fb98 	bl	800dcac <xQueueReceive>
 800f57c:	4603      	mov	r3, r0
 800f57e:	2b00      	cmp	r3, #0
 800f580:	f47f af2a 	bne.w	800f3d8 <prvProcessReceivedCommands+0x8>
	}
}
 800f584:	bf00      	nop
 800f586:	bf00      	nop
 800f588:	3730      	adds	r7, #48	; 0x30
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	20002694 	.word	0x20002694

0800f594 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b088      	sub	sp, #32
 800f598:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f59a:	e048      	b.n	800f62e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f59c:	4b2d      	ldr	r3, [pc, #180]	; (800f654 <prvSwitchTimerLists+0xc0>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	68db      	ldr	r3, [r3, #12]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5a6:	4b2b      	ldr	r3, [pc, #172]	; (800f654 <prvSwitchTimerLists+0xc0>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	68db      	ldr	r3, [r3, #12]
 800f5ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	3304      	adds	r3, #4
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7fe f8b1 	bl	800d71c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	6a1b      	ldr	r3, [r3, #32]
 800f5be:	68f8      	ldr	r0, [r7, #12]
 800f5c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5c8:	f003 0304 	and.w	r3, r3, #4
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d02e      	beq.n	800f62e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	699b      	ldr	r3, [r3, #24]
 800f5d4:	693a      	ldr	r2, [r7, #16]
 800f5d6:	4413      	add	r3, r2
 800f5d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f5da:	68ba      	ldr	r2, [r7, #8]
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d90e      	bls.n	800f600 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	68ba      	ldr	r2, [r7, #8]
 800f5e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	68fa      	ldr	r2, [r7, #12]
 800f5ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f5ee:	4b19      	ldr	r3, [pc, #100]	; (800f654 <prvSwitchTimerLists+0xc0>)
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	3304      	adds	r3, #4
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	4610      	mov	r0, r2
 800f5fa:	f7fe f856 	bl	800d6aa <vListInsert>
 800f5fe:	e016      	b.n	800f62e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f600:	2300      	movs	r3, #0
 800f602:	9300      	str	r3, [sp, #0]
 800f604:	2300      	movs	r3, #0
 800f606:	693a      	ldr	r2, [r7, #16]
 800f608:	2100      	movs	r1, #0
 800f60a:	68f8      	ldr	r0, [r7, #12]
 800f60c:	f7ff fd60 	bl	800f0d0 <xTimerGenericCommand>
 800f610:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d10a      	bne.n	800f62e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f61c:	f383 8811 	msr	BASEPRI, r3
 800f620:	f3bf 8f6f 	isb	sy
 800f624:	f3bf 8f4f 	dsb	sy
 800f628:	603b      	str	r3, [r7, #0]
}
 800f62a:	bf00      	nop
 800f62c:	e7fe      	b.n	800f62c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f62e:	4b09      	ldr	r3, [pc, #36]	; (800f654 <prvSwitchTimerLists+0xc0>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d1b1      	bne.n	800f59c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f638:	4b06      	ldr	r3, [pc, #24]	; (800f654 <prvSwitchTimerLists+0xc0>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f63e:	4b06      	ldr	r3, [pc, #24]	; (800f658 <prvSwitchTimerLists+0xc4>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	4a04      	ldr	r2, [pc, #16]	; (800f654 <prvSwitchTimerLists+0xc0>)
 800f644:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f646:	4a04      	ldr	r2, [pc, #16]	; (800f658 <prvSwitchTimerLists+0xc4>)
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	6013      	str	r3, [r2, #0]
}
 800f64c:	bf00      	nop
 800f64e:	3718      	adds	r7, #24
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}
 800f654:	2000268c 	.word	0x2000268c
 800f658:	20002690 	.word	0x20002690

0800f65c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f662:	f000 f967 	bl	800f934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f666:	4b15      	ldr	r3, [pc, #84]	; (800f6bc <prvCheckForValidListAndQueue+0x60>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d120      	bne.n	800f6b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f66e:	4814      	ldr	r0, [pc, #80]	; (800f6c0 <prvCheckForValidListAndQueue+0x64>)
 800f670:	f7fd ffca 	bl	800d608 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f674:	4813      	ldr	r0, [pc, #76]	; (800f6c4 <prvCheckForValidListAndQueue+0x68>)
 800f676:	f7fd ffc7 	bl	800d608 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f67a:	4b13      	ldr	r3, [pc, #76]	; (800f6c8 <prvCheckForValidListAndQueue+0x6c>)
 800f67c:	4a10      	ldr	r2, [pc, #64]	; (800f6c0 <prvCheckForValidListAndQueue+0x64>)
 800f67e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f680:	4b12      	ldr	r3, [pc, #72]	; (800f6cc <prvCheckForValidListAndQueue+0x70>)
 800f682:	4a10      	ldr	r2, [pc, #64]	; (800f6c4 <prvCheckForValidListAndQueue+0x68>)
 800f684:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f686:	2300      	movs	r3, #0
 800f688:	9300      	str	r3, [sp, #0]
 800f68a:	4b11      	ldr	r3, [pc, #68]	; (800f6d0 <prvCheckForValidListAndQueue+0x74>)
 800f68c:	4a11      	ldr	r2, [pc, #68]	; (800f6d4 <prvCheckForValidListAndQueue+0x78>)
 800f68e:	2110      	movs	r1, #16
 800f690:	200a      	movs	r0, #10
 800f692:	f7fe f8d5 	bl	800d840 <xQueueGenericCreateStatic>
 800f696:	4603      	mov	r3, r0
 800f698:	4a08      	ldr	r2, [pc, #32]	; (800f6bc <prvCheckForValidListAndQueue+0x60>)
 800f69a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f69c:	4b07      	ldr	r3, [pc, #28]	; (800f6bc <prvCheckForValidListAndQueue+0x60>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d005      	beq.n	800f6b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f6a4:	4b05      	ldr	r3, [pc, #20]	; (800f6bc <prvCheckForValidListAndQueue+0x60>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	490b      	ldr	r1, [pc, #44]	; (800f6d8 <prvCheckForValidListAndQueue+0x7c>)
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7fe fcee 	bl	800e08c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f6b0:	f000 f970 	bl	800f994 <vPortExitCritical>
}
 800f6b4:	bf00      	nop
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	20002694 	.word	0x20002694
 800f6c0:	20002664 	.word	0x20002664
 800f6c4:	20002678 	.word	0x20002678
 800f6c8:	2000268c 	.word	0x2000268c
 800f6cc:	20002690 	.word	0x20002690
 800f6d0:	20002740 	.word	0x20002740
 800f6d4:	200026a0 	.word	0x200026a0
 800f6d8:	08014974 	.word	0x08014974

0800f6dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b085      	sub	sp, #20
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	60f8      	str	r0, [r7, #12]
 800f6e4:	60b9      	str	r1, [r7, #8]
 800f6e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	3b04      	subs	r3, #4
 800f6ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f6f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	3b04      	subs	r3, #4
 800f6fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	f023 0201 	bic.w	r2, r3, #1
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	3b04      	subs	r3, #4
 800f70a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f70c:	4a0c      	ldr	r2, [pc, #48]	; (800f740 <pxPortInitialiseStack+0x64>)
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	3b14      	subs	r3, #20
 800f716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f718:	687a      	ldr	r2, [r7, #4]
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	3b04      	subs	r3, #4
 800f722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f06f 0202 	mvn.w	r2, #2
 800f72a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	3b20      	subs	r3, #32
 800f730:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f732:	68fb      	ldr	r3, [r7, #12]
}
 800f734:	4618      	mov	r0, r3
 800f736:	3714      	adds	r7, #20
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr
 800f740:	0800f745 	.word	0x0800f745

0800f744 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f744:	b480      	push	{r7}
 800f746:	b085      	sub	sp, #20
 800f748:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f74a:	2300      	movs	r3, #0
 800f74c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f74e:	4b12      	ldr	r3, [pc, #72]	; (800f798 <prvTaskExitError+0x54>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f756:	d00a      	beq.n	800f76e <prvTaskExitError+0x2a>
	__asm volatile
 800f758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f75c:	f383 8811 	msr	BASEPRI, r3
 800f760:	f3bf 8f6f 	isb	sy
 800f764:	f3bf 8f4f 	dsb	sy
 800f768:	60fb      	str	r3, [r7, #12]
}
 800f76a:	bf00      	nop
 800f76c:	e7fe      	b.n	800f76c <prvTaskExitError+0x28>
	__asm volatile
 800f76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f772:	f383 8811 	msr	BASEPRI, r3
 800f776:	f3bf 8f6f 	isb	sy
 800f77a:	f3bf 8f4f 	dsb	sy
 800f77e:	60bb      	str	r3, [r7, #8]
}
 800f780:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f782:	bf00      	nop
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d0fc      	beq.n	800f784 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f78a:	bf00      	nop
 800f78c:	bf00      	nop
 800f78e:	3714      	adds	r7, #20
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr
 800f798:	20000010 	.word	0x20000010
 800f79c:	00000000 	.word	0x00000000

0800f7a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f7a0:	4b07      	ldr	r3, [pc, #28]	; (800f7c0 <pxCurrentTCBConst2>)
 800f7a2:	6819      	ldr	r1, [r3, #0]
 800f7a4:	6808      	ldr	r0, [r1, #0]
 800f7a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7aa:	f380 8809 	msr	PSP, r0
 800f7ae:	f3bf 8f6f 	isb	sy
 800f7b2:	f04f 0000 	mov.w	r0, #0
 800f7b6:	f380 8811 	msr	BASEPRI, r0
 800f7ba:	4770      	bx	lr
 800f7bc:	f3af 8000 	nop.w

0800f7c0 <pxCurrentTCBConst2>:
 800f7c0:	20002164 	.word	0x20002164
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f7c4:	bf00      	nop
 800f7c6:	bf00      	nop

0800f7c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f7c8:	4808      	ldr	r0, [pc, #32]	; (800f7ec <prvPortStartFirstTask+0x24>)
 800f7ca:	6800      	ldr	r0, [r0, #0]
 800f7cc:	6800      	ldr	r0, [r0, #0]
 800f7ce:	f380 8808 	msr	MSP, r0
 800f7d2:	f04f 0000 	mov.w	r0, #0
 800f7d6:	f380 8814 	msr	CONTROL, r0
 800f7da:	b662      	cpsie	i
 800f7dc:	b661      	cpsie	f
 800f7de:	f3bf 8f4f 	dsb	sy
 800f7e2:	f3bf 8f6f 	isb	sy
 800f7e6:	df00      	svc	0
 800f7e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f7ea:	bf00      	nop
 800f7ec:	e000ed08 	.word	0xe000ed08

0800f7f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b086      	sub	sp, #24
 800f7f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f7f6:	4b46      	ldr	r3, [pc, #280]	; (800f910 <xPortStartScheduler+0x120>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4a46      	ldr	r2, [pc, #280]	; (800f914 <xPortStartScheduler+0x124>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d10a      	bne.n	800f816 <xPortStartScheduler+0x26>
	__asm volatile
 800f800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f804:	f383 8811 	msr	BASEPRI, r3
 800f808:	f3bf 8f6f 	isb	sy
 800f80c:	f3bf 8f4f 	dsb	sy
 800f810:	613b      	str	r3, [r7, #16]
}
 800f812:	bf00      	nop
 800f814:	e7fe      	b.n	800f814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f816:	4b3e      	ldr	r3, [pc, #248]	; (800f910 <xPortStartScheduler+0x120>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	4a3f      	ldr	r2, [pc, #252]	; (800f918 <xPortStartScheduler+0x128>)
 800f81c:	4293      	cmp	r3, r2
 800f81e:	d10a      	bne.n	800f836 <xPortStartScheduler+0x46>
	__asm volatile
 800f820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f824:	f383 8811 	msr	BASEPRI, r3
 800f828:	f3bf 8f6f 	isb	sy
 800f82c:	f3bf 8f4f 	dsb	sy
 800f830:	60fb      	str	r3, [r7, #12]
}
 800f832:	bf00      	nop
 800f834:	e7fe      	b.n	800f834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f836:	4b39      	ldr	r3, [pc, #228]	; (800f91c <xPortStartScheduler+0x12c>)
 800f838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	22ff      	movs	r2, #255	; 0xff
 800f846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	b2db      	uxtb	r3, r3
 800f84e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f850:	78fb      	ldrb	r3, [r7, #3]
 800f852:	b2db      	uxtb	r3, r3
 800f854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f858:	b2da      	uxtb	r2, r3
 800f85a:	4b31      	ldr	r3, [pc, #196]	; (800f920 <xPortStartScheduler+0x130>)
 800f85c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f85e:	4b31      	ldr	r3, [pc, #196]	; (800f924 <xPortStartScheduler+0x134>)
 800f860:	2207      	movs	r2, #7
 800f862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f864:	e009      	b.n	800f87a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f866:	4b2f      	ldr	r3, [pc, #188]	; (800f924 <xPortStartScheduler+0x134>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	3b01      	subs	r3, #1
 800f86c:	4a2d      	ldr	r2, [pc, #180]	; (800f924 <xPortStartScheduler+0x134>)
 800f86e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f870:	78fb      	ldrb	r3, [r7, #3]
 800f872:	b2db      	uxtb	r3, r3
 800f874:	005b      	lsls	r3, r3, #1
 800f876:	b2db      	uxtb	r3, r3
 800f878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f87a:	78fb      	ldrb	r3, [r7, #3]
 800f87c:	b2db      	uxtb	r3, r3
 800f87e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f882:	2b80      	cmp	r3, #128	; 0x80
 800f884:	d0ef      	beq.n	800f866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f886:	4b27      	ldr	r3, [pc, #156]	; (800f924 <xPortStartScheduler+0x134>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	f1c3 0307 	rsb	r3, r3, #7
 800f88e:	2b04      	cmp	r3, #4
 800f890:	d00a      	beq.n	800f8a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f896:	f383 8811 	msr	BASEPRI, r3
 800f89a:	f3bf 8f6f 	isb	sy
 800f89e:	f3bf 8f4f 	dsb	sy
 800f8a2:	60bb      	str	r3, [r7, #8]
}
 800f8a4:	bf00      	nop
 800f8a6:	e7fe      	b.n	800f8a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f8a8:	4b1e      	ldr	r3, [pc, #120]	; (800f924 <xPortStartScheduler+0x134>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	021b      	lsls	r3, r3, #8
 800f8ae:	4a1d      	ldr	r2, [pc, #116]	; (800f924 <xPortStartScheduler+0x134>)
 800f8b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f8b2:	4b1c      	ldr	r3, [pc, #112]	; (800f924 <xPortStartScheduler+0x134>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f8ba:	4a1a      	ldr	r2, [pc, #104]	; (800f924 <xPortStartScheduler+0x134>)
 800f8bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	b2da      	uxtb	r2, r3
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f8c6:	4b18      	ldr	r3, [pc, #96]	; (800f928 <xPortStartScheduler+0x138>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	4a17      	ldr	r2, [pc, #92]	; (800f928 <xPortStartScheduler+0x138>)
 800f8cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f8d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f8d2:	4b15      	ldr	r3, [pc, #84]	; (800f928 <xPortStartScheduler+0x138>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4a14      	ldr	r2, [pc, #80]	; (800f928 <xPortStartScheduler+0x138>)
 800f8d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f8dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f8de:	f000 f8dd 	bl	800fa9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f8e2:	4b12      	ldr	r3, [pc, #72]	; (800f92c <xPortStartScheduler+0x13c>)
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f8e8:	f000 f8fc 	bl	800fae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f8ec:	4b10      	ldr	r3, [pc, #64]	; (800f930 <xPortStartScheduler+0x140>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	4a0f      	ldr	r2, [pc, #60]	; (800f930 <xPortStartScheduler+0x140>)
 800f8f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f8f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f8f8:	f7ff ff66 	bl	800f7c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f8fc:	f7ff f854 	bl	800e9a8 <vTaskSwitchContext>
	prvTaskExitError();
 800f900:	f7ff ff20 	bl	800f744 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f904:	2300      	movs	r3, #0
}
 800f906:	4618      	mov	r0, r3
 800f908:	3718      	adds	r7, #24
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	bf00      	nop
 800f910:	e000ed00 	.word	0xe000ed00
 800f914:	410fc271 	.word	0x410fc271
 800f918:	410fc270 	.word	0x410fc270
 800f91c:	e000e400 	.word	0xe000e400
 800f920:	20002790 	.word	0x20002790
 800f924:	20002794 	.word	0x20002794
 800f928:	e000ed20 	.word	0xe000ed20
 800f92c:	20000010 	.word	0x20000010
 800f930:	e000ef34 	.word	0xe000ef34

0800f934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
	__asm volatile
 800f93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f93e:	f383 8811 	msr	BASEPRI, r3
 800f942:	f3bf 8f6f 	isb	sy
 800f946:	f3bf 8f4f 	dsb	sy
 800f94a:	607b      	str	r3, [r7, #4]
}
 800f94c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f94e:	4b0f      	ldr	r3, [pc, #60]	; (800f98c <vPortEnterCritical+0x58>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	3301      	adds	r3, #1
 800f954:	4a0d      	ldr	r2, [pc, #52]	; (800f98c <vPortEnterCritical+0x58>)
 800f956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f958:	4b0c      	ldr	r3, [pc, #48]	; (800f98c <vPortEnterCritical+0x58>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	2b01      	cmp	r3, #1
 800f95e:	d10f      	bne.n	800f980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f960:	4b0b      	ldr	r3, [pc, #44]	; (800f990 <vPortEnterCritical+0x5c>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	b2db      	uxtb	r3, r3
 800f966:	2b00      	cmp	r3, #0
 800f968:	d00a      	beq.n	800f980 <vPortEnterCritical+0x4c>
	__asm volatile
 800f96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f96e:	f383 8811 	msr	BASEPRI, r3
 800f972:	f3bf 8f6f 	isb	sy
 800f976:	f3bf 8f4f 	dsb	sy
 800f97a:	603b      	str	r3, [r7, #0]
}
 800f97c:	bf00      	nop
 800f97e:	e7fe      	b.n	800f97e <vPortEnterCritical+0x4a>
	}
}
 800f980:	bf00      	nop
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr
 800f98c:	20000010 	.word	0x20000010
 800f990:	e000ed04 	.word	0xe000ed04

0800f994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f994:	b480      	push	{r7}
 800f996:	b083      	sub	sp, #12
 800f998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f99a:	4b12      	ldr	r3, [pc, #72]	; (800f9e4 <vPortExitCritical+0x50>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d10a      	bne.n	800f9b8 <vPortExitCritical+0x24>
	__asm volatile
 800f9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a6:	f383 8811 	msr	BASEPRI, r3
 800f9aa:	f3bf 8f6f 	isb	sy
 800f9ae:	f3bf 8f4f 	dsb	sy
 800f9b2:	607b      	str	r3, [r7, #4]
}
 800f9b4:	bf00      	nop
 800f9b6:	e7fe      	b.n	800f9b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f9b8:	4b0a      	ldr	r3, [pc, #40]	; (800f9e4 <vPortExitCritical+0x50>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	3b01      	subs	r3, #1
 800f9be:	4a09      	ldr	r2, [pc, #36]	; (800f9e4 <vPortExitCritical+0x50>)
 800f9c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f9c2:	4b08      	ldr	r3, [pc, #32]	; (800f9e4 <vPortExitCritical+0x50>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d105      	bne.n	800f9d6 <vPortExitCritical+0x42>
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	f383 8811 	msr	BASEPRI, r3
}
 800f9d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f9d6:	bf00      	nop
 800f9d8:	370c      	adds	r7, #12
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr
 800f9e2:	bf00      	nop
 800f9e4:	20000010 	.word	0x20000010
	...

0800f9f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f9f0:	f3ef 8009 	mrs	r0, PSP
 800f9f4:	f3bf 8f6f 	isb	sy
 800f9f8:	4b15      	ldr	r3, [pc, #84]	; (800fa50 <pxCurrentTCBConst>)
 800f9fa:	681a      	ldr	r2, [r3, #0]
 800f9fc:	f01e 0f10 	tst.w	lr, #16
 800fa00:	bf08      	it	eq
 800fa02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fa06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa0a:	6010      	str	r0, [r2, #0]
 800fa0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fa10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fa14:	f380 8811 	msr	BASEPRI, r0
 800fa18:	f3bf 8f4f 	dsb	sy
 800fa1c:	f3bf 8f6f 	isb	sy
 800fa20:	f7fe ffc2 	bl	800e9a8 <vTaskSwitchContext>
 800fa24:	f04f 0000 	mov.w	r0, #0
 800fa28:	f380 8811 	msr	BASEPRI, r0
 800fa2c:	bc09      	pop	{r0, r3}
 800fa2e:	6819      	ldr	r1, [r3, #0]
 800fa30:	6808      	ldr	r0, [r1, #0]
 800fa32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa36:	f01e 0f10 	tst.w	lr, #16
 800fa3a:	bf08      	it	eq
 800fa3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fa40:	f380 8809 	msr	PSP, r0
 800fa44:	f3bf 8f6f 	isb	sy
 800fa48:	4770      	bx	lr
 800fa4a:	bf00      	nop
 800fa4c:	f3af 8000 	nop.w

0800fa50 <pxCurrentTCBConst>:
 800fa50:	20002164 	.word	0x20002164
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fa54:	bf00      	nop
 800fa56:	bf00      	nop

0800fa58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa62:	f383 8811 	msr	BASEPRI, r3
 800fa66:	f3bf 8f6f 	isb	sy
 800fa6a:	f3bf 8f4f 	dsb	sy
 800fa6e:	607b      	str	r3, [r7, #4]
}
 800fa70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fa72:	f7fe fedf 	bl	800e834 <xTaskIncrementTick>
 800fa76:	4603      	mov	r3, r0
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d003      	beq.n	800fa84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fa7c:	4b06      	ldr	r3, [pc, #24]	; (800fa98 <xPortSysTickHandler+0x40>)
 800fa7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa82:	601a      	str	r2, [r3, #0]
 800fa84:	2300      	movs	r3, #0
 800fa86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	f383 8811 	msr	BASEPRI, r3
}
 800fa8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fa90:	bf00      	nop
 800fa92:	3708      	adds	r7, #8
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	e000ed04 	.word	0xe000ed04

0800fa9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800faa0:	4b0b      	ldr	r3, [pc, #44]	; (800fad0 <vPortSetupTimerInterrupt+0x34>)
 800faa2:	2200      	movs	r2, #0
 800faa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800faa6:	4b0b      	ldr	r3, [pc, #44]	; (800fad4 <vPortSetupTimerInterrupt+0x38>)
 800faa8:	2200      	movs	r2, #0
 800faaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800faac:	4b0a      	ldr	r3, [pc, #40]	; (800fad8 <vPortSetupTimerInterrupt+0x3c>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	4a0a      	ldr	r2, [pc, #40]	; (800fadc <vPortSetupTimerInterrupt+0x40>)
 800fab2:	fba2 2303 	umull	r2, r3, r2, r3
 800fab6:	099b      	lsrs	r3, r3, #6
 800fab8:	4a09      	ldr	r2, [pc, #36]	; (800fae0 <vPortSetupTimerInterrupt+0x44>)
 800faba:	3b01      	subs	r3, #1
 800fabc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fabe:	4b04      	ldr	r3, [pc, #16]	; (800fad0 <vPortSetupTimerInterrupt+0x34>)
 800fac0:	2207      	movs	r2, #7
 800fac2:	601a      	str	r2, [r3, #0]
}
 800fac4:	bf00      	nop
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr
 800face:	bf00      	nop
 800fad0:	e000e010 	.word	0xe000e010
 800fad4:	e000e018 	.word	0xe000e018
 800fad8:	20000004 	.word	0x20000004
 800fadc:	10624dd3 	.word	0x10624dd3
 800fae0:	e000e014 	.word	0xe000e014

0800fae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800faf4 <vPortEnableVFP+0x10>
 800fae8:	6801      	ldr	r1, [r0, #0]
 800faea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800faee:	6001      	str	r1, [r0, #0]
 800faf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800faf2:	bf00      	nop
 800faf4:	e000ed88 	.word	0xe000ed88

0800faf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800faf8:	b480      	push	{r7}
 800fafa:	b085      	sub	sp, #20
 800fafc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fafe:	f3ef 8305 	mrs	r3, IPSR
 800fb02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	2b0f      	cmp	r3, #15
 800fb08:	d914      	bls.n	800fb34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fb0a:	4a17      	ldr	r2, [pc, #92]	; (800fb68 <vPortValidateInterruptPriority+0x70>)
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	4413      	add	r3, r2
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fb14:	4b15      	ldr	r3, [pc, #84]	; (800fb6c <vPortValidateInterruptPriority+0x74>)
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	7afa      	ldrb	r2, [r7, #11]
 800fb1a:	429a      	cmp	r2, r3
 800fb1c:	d20a      	bcs.n	800fb34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb22:	f383 8811 	msr	BASEPRI, r3
 800fb26:	f3bf 8f6f 	isb	sy
 800fb2a:	f3bf 8f4f 	dsb	sy
 800fb2e:	607b      	str	r3, [r7, #4]
}
 800fb30:	bf00      	nop
 800fb32:	e7fe      	b.n	800fb32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fb34:	4b0e      	ldr	r3, [pc, #56]	; (800fb70 <vPortValidateInterruptPriority+0x78>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fb3c:	4b0d      	ldr	r3, [pc, #52]	; (800fb74 <vPortValidateInterruptPriority+0x7c>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d90a      	bls.n	800fb5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb48:	f383 8811 	msr	BASEPRI, r3
 800fb4c:	f3bf 8f6f 	isb	sy
 800fb50:	f3bf 8f4f 	dsb	sy
 800fb54:	603b      	str	r3, [r7, #0]
}
 800fb56:	bf00      	nop
 800fb58:	e7fe      	b.n	800fb58 <vPortValidateInterruptPriority+0x60>
	}
 800fb5a:	bf00      	nop
 800fb5c:	3714      	adds	r7, #20
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb64:	4770      	bx	lr
 800fb66:	bf00      	nop
 800fb68:	e000e3f0 	.word	0xe000e3f0
 800fb6c:	20002790 	.word	0x20002790
 800fb70:	e000ed0c 	.word	0xe000ed0c
 800fb74:	20002794 	.word	0x20002794

0800fb78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b08a      	sub	sp, #40	; 0x28
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fb80:	2300      	movs	r3, #0
 800fb82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fb84:	f7fe fd9a 	bl	800e6bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fb88:	4b5b      	ldr	r3, [pc, #364]	; (800fcf8 <pvPortMalloc+0x180>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d101      	bne.n	800fb94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fb90:	f000 f920 	bl	800fdd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fb94:	4b59      	ldr	r3, [pc, #356]	; (800fcfc <pvPortMalloc+0x184>)
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	4013      	ands	r3, r2
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	f040 8093 	bne.w	800fcc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d01d      	beq.n	800fbe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fba8:	2208      	movs	r2, #8
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	4413      	add	r3, r2
 800fbae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f003 0307 	and.w	r3, r3, #7
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d014      	beq.n	800fbe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f023 0307 	bic.w	r3, r3, #7
 800fbc0:	3308      	adds	r3, #8
 800fbc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f003 0307 	and.w	r3, r3, #7
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d00a      	beq.n	800fbe4 <pvPortMalloc+0x6c>
	__asm volatile
 800fbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd2:	f383 8811 	msr	BASEPRI, r3
 800fbd6:	f3bf 8f6f 	isb	sy
 800fbda:	f3bf 8f4f 	dsb	sy
 800fbde:	617b      	str	r3, [r7, #20]
}
 800fbe0:	bf00      	nop
 800fbe2:	e7fe      	b.n	800fbe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d06e      	beq.n	800fcc8 <pvPortMalloc+0x150>
 800fbea:	4b45      	ldr	r3, [pc, #276]	; (800fd00 <pvPortMalloc+0x188>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d869      	bhi.n	800fcc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fbf4:	4b43      	ldr	r3, [pc, #268]	; (800fd04 <pvPortMalloc+0x18c>)
 800fbf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fbf8:	4b42      	ldr	r3, [pc, #264]	; (800fd04 <pvPortMalloc+0x18c>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbfe:	e004      	b.n	800fc0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	687a      	ldr	r2, [r7, #4]
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d903      	bls.n	800fc1c <pvPortMalloc+0xa4>
 800fc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d1f1      	bne.n	800fc00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fc1c:	4b36      	ldr	r3, [pc, #216]	; (800fcf8 <pvPortMalloc+0x180>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d050      	beq.n	800fcc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fc26:	6a3b      	ldr	r3, [r7, #32]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	2208      	movs	r2, #8
 800fc2c:	4413      	add	r3, r2
 800fc2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc32:	681a      	ldr	r2, [r3, #0]
 800fc34:	6a3b      	ldr	r3, [r7, #32]
 800fc36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3a:	685a      	ldr	r2, [r3, #4]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	1ad2      	subs	r2, r2, r3
 800fc40:	2308      	movs	r3, #8
 800fc42:	005b      	lsls	r3, r3, #1
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d91f      	bls.n	800fc88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fc48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	4413      	add	r3, r2
 800fc4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc50:	69bb      	ldr	r3, [r7, #24]
 800fc52:	f003 0307 	and.w	r3, r3, #7
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d00a      	beq.n	800fc70 <pvPortMalloc+0xf8>
	__asm volatile
 800fc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc5e:	f383 8811 	msr	BASEPRI, r3
 800fc62:	f3bf 8f6f 	isb	sy
 800fc66:	f3bf 8f4f 	dsb	sy
 800fc6a:	613b      	str	r3, [r7, #16]
}
 800fc6c:	bf00      	nop
 800fc6e:	e7fe      	b.n	800fc6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc72:	685a      	ldr	r2, [r3, #4]
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	1ad2      	subs	r2, r2, r3
 800fc78:	69bb      	ldr	r3, [r7, #24]
 800fc7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fc82:	69b8      	ldr	r0, [r7, #24]
 800fc84:	f000 f908 	bl	800fe98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fc88:	4b1d      	ldr	r3, [pc, #116]	; (800fd00 <pvPortMalloc+0x188>)
 800fc8a:	681a      	ldr	r2, [r3, #0]
 800fc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	1ad3      	subs	r3, r2, r3
 800fc92:	4a1b      	ldr	r2, [pc, #108]	; (800fd00 <pvPortMalloc+0x188>)
 800fc94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fc96:	4b1a      	ldr	r3, [pc, #104]	; (800fd00 <pvPortMalloc+0x188>)
 800fc98:	681a      	ldr	r2, [r3, #0]
 800fc9a:	4b1b      	ldr	r3, [pc, #108]	; (800fd08 <pvPortMalloc+0x190>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d203      	bcs.n	800fcaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fca2:	4b17      	ldr	r3, [pc, #92]	; (800fd00 <pvPortMalloc+0x188>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	4a18      	ldr	r2, [pc, #96]	; (800fd08 <pvPortMalloc+0x190>)
 800fca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcac:	685a      	ldr	r2, [r3, #4]
 800fcae:	4b13      	ldr	r3, [pc, #76]	; (800fcfc <pvPortMalloc+0x184>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	431a      	orrs	r2, r3
 800fcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcba:	2200      	movs	r2, #0
 800fcbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fcbe:	4b13      	ldr	r3, [pc, #76]	; (800fd0c <pvPortMalloc+0x194>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	4a11      	ldr	r2, [pc, #68]	; (800fd0c <pvPortMalloc+0x194>)
 800fcc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fcc8:	f7fe fd06 	bl	800e6d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fccc:	69fb      	ldr	r3, [r7, #28]
 800fcce:	f003 0307 	and.w	r3, r3, #7
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d00a      	beq.n	800fcec <pvPortMalloc+0x174>
	__asm volatile
 800fcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcda:	f383 8811 	msr	BASEPRI, r3
 800fcde:	f3bf 8f6f 	isb	sy
 800fce2:	f3bf 8f4f 	dsb	sy
 800fce6:	60fb      	str	r3, [r7, #12]
}
 800fce8:	bf00      	nop
 800fcea:	e7fe      	b.n	800fcea <pvPortMalloc+0x172>
	return pvReturn;
 800fcec:	69fb      	ldr	r3, [r7, #28]
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3728      	adds	r7, #40	; 0x28
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
 800fcf6:	bf00      	nop
 800fcf8:	200063a0 	.word	0x200063a0
 800fcfc:	200063b4 	.word	0x200063b4
 800fd00:	200063a4 	.word	0x200063a4
 800fd04:	20006398 	.word	0x20006398
 800fd08:	200063a8 	.word	0x200063a8
 800fd0c:	200063ac 	.word	0x200063ac

0800fd10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b086      	sub	sp, #24
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d04d      	beq.n	800fdbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fd22:	2308      	movs	r3, #8
 800fd24:	425b      	negs	r3, r3
 800fd26:	697a      	ldr	r2, [r7, #20]
 800fd28:	4413      	add	r3, r2
 800fd2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	685a      	ldr	r2, [r3, #4]
 800fd34:	4b24      	ldr	r3, [pc, #144]	; (800fdc8 <vPortFree+0xb8>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	4013      	ands	r3, r2
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d10a      	bne.n	800fd54 <vPortFree+0x44>
	__asm volatile
 800fd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd42:	f383 8811 	msr	BASEPRI, r3
 800fd46:	f3bf 8f6f 	isb	sy
 800fd4a:	f3bf 8f4f 	dsb	sy
 800fd4e:	60fb      	str	r3, [r7, #12]
}
 800fd50:	bf00      	nop
 800fd52:	e7fe      	b.n	800fd52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d00a      	beq.n	800fd72 <vPortFree+0x62>
	__asm volatile
 800fd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd60:	f383 8811 	msr	BASEPRI, r3
 800fd64:	f3bf 8f6f 	isb	sy
 800fd68:	f3bf 8f4f 	dsb	sy
 800fd6c:	60bb      	str	r3, [r7, #8]
}
 800fd6e:	bf00      	nop
 800fd70:	e7fe      	b.n	800fd70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fd72:	693b      	ldr	r3, [r7, #16]
 800fd74:	685a      	ldr	r2, [r3, #4]
 800fd76:	4b14      	ldr	r3, [pc, #80]	; (800fdc8 <vPortFree+0xb8>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4013      	ands	r3, r2
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d01e      	beq.n	800fdbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d11a      	bne.n	800fdbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	685a      	ldr	r2, [r3, #4]
 800fd8c:	4b0e      	ldr	r3, [pc, #56]	; (800fdc8 <vPortFree+0xb8>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	43db      	mvns	r3, r3
 800fd92:	401a      	ands	r2, r3
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fd98:	f7fe fc90 	bl	800e6bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	685a      	ldr	r2, [r3, #4]
 800fda0:	4b0a      	ldr	r3, [pc, #40]	; (800fdcc <vPortFree+0xbc>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4413      	add	r3, r2
 800fda6:	4a09      	ldr	r2, [pc, #36]	; (800fdcc <vPortFree+0xbc>)
 800fda8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fdaa:	6938      	ldr	r0, [r7, #16]
 800fdac:	f000 f874 	bl	800fe98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fdb0:	4b07      	ldr	r3, [pc, #28]	; (800fdd0 <vPortFree+0xc0>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	4a06      	ldr	r2, [pc, #24]	; (800fdd0 <vPortFree+0xc0>)
 800fdb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fdba:	f7fe fc8d 	bl	800e6d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fdbe:	bf00      	nop
 800fdc0:	3718      	adds	r7, #24
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop
 800fdc8:	200063b4 	.word	0x200063b4
 800fdcc:	200063a4 	.word	0x200063a4
 800fdd0:	200063b0 	.word	0x200063b0

0800fdd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b085      	sub	sp, #20
 800fdd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fdda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fdde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fde0:	4b27      	ldr	r3, [pc, #156]	; (800fe80 <prvHeapInit+0xac>)
 800fde2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f003 0307 	and.w	r3, r3, #7
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d00c      	beq.n	800fe08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	3307      	adds	r3, #7
 800fdf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	f023 0307 	bic.w	r3, r3, #7
 800fdfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fdfc:	68ba      	ldr	r2, [r7, #8]
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	1ad3      	subs	r3, r2, r3
 800fe02:	4a1f      	ldr	r2, [pc, #124]	; (800fe80 <prvHeapInit+0xac>)
 800fe04:	4413      	add	r3, r2
 800fe06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fe0c:	4a1d      	ldr	r2, [pc, #116]	; (800fe84 <prvHeapInit+0xb0>)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fe12:	4b1c      	ldr	r3, [pc, #112]	; (800fe84 <prvHeapInit+0xb0>)
 800fe14:	2200      	movs	r2, #0
 800fe16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	68ba      	ldr	r2, [r7, #8]
 800fe1c:	4413      	add	r3, r2
 800fe1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fe20:	2208      	movs	r2, #8
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	1a9b      	subs	r3, r3, r2
 800fe26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f023 0307 	bic.w	r3, r3, #7
 800fe2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	4a15      	ldr	r2, [pc, #84]	; (800fe88 <prvHeapInit+0xb4>)
 800fe34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fe36:	4b14      	ldr	r3, [pc, #80]	; (800fe88 <prvHeapInit+0xb4>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fe3e:	4b12      	ldr	r3, [pc, #72]	; (800fe88 <prvHeapInit+0xb4>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	2200      	movs	r2, #0
 800fe44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	68fa      	ldr	r2, [r7, #12]
 800fe4e:	1ad2      	subs	r2, r2, r3
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fe54:	4b0c      	ldr	r3, [pc, #48]	; (800fe88 <prvHeapInit+0xb4>)
 800fe56:	681a      	ldr	r2, [r3, #0]
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	685b      	ldr	r3, [r3, #4]
 800fe60:	4a0a      	ldr	r2, [pc, #40]	; (800fe8c <prvHeapInit+0xb8>)
 800fe62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	4a09      	ldr	r2, [pc, #36]	; (800fe90 <prvHeapInit+0xbc>)
 800fe6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fe6c:	4b09      	ldr	r3, [pc, #36]	; (800fe94 <prvHeapInit+0xc0>)
 800fe6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fe72:	601a      	str	r2, [r3, #0]
}
 800fe74:	bf00      	nop
 800fe76:	3714      	adds	r7, #20
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr
 800fe80:	20002798 	.word	0x20002798
 800fe84:	20006398 	.word	0x20006398
 800fe88:	200063a0 	.word	0x200063a0
 800fe8c:	200063a8 	.word	0x200063a8
 800fe90:	200063a4 	.word	0x200063a4
 800fe94:	200063b4 	.word	0x200063b4

0800fe98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b085      	sub	sp, #20
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fea0:	4b28      	ldr	r3, [pc, #160]	; (800ff44 <prvInsertBlockIntoFreeList+0xac>)
 800fea2:	60fb      	str	r3, [r7, #12]
 800fea4:	e002      	b.n	800feac <prvInsertBlockIntoFreeList+0x14>
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	60fb      	str	r3, [r7, #12]
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	687a      	ldr	r2, [r7, #4]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d8f7      	bhi.n	800fea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	68ba      	ldr	r2, [r7, #8]
 800fec0:	4413      	add	r3, r2
 800fec2:	687a      	ldr	r2, [r7, #4]
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d108      	bne.n	800feda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	685a      	ldr	r2, [r3, #4]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	441a      	add	r2, r3
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	68ba      	ldr	r2, [r7, #8]
 800fee4:	441a      	add	r2, r3
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	429a      	cmp	r2, r3
 800feec:	d118      	bne.n	800ff20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	681a      	ldr	r2, [r3, #0]
 800fef2:	4b15      	ldr	r3, [pc, #84]	; (800ff48 <prvInsertBlockIntoFreeList+0xb0>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	429a      	cmp	r2, r3
 800fef8:	d00d      	beq.n	800ff16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	685a      	ldr	r2, [r3, #4]
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	441a      	add	r2, r3
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	681a      	ldr	r2, [r3, #0]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	601a      	str	r2, [r3, #0]
 800ff14:	e008      	b.n	800ff28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ff16:	4b0c      	ldr	r3, [pc, #48]	; (800ff48 <prvInsertBlockIntoFreeList+0xb0>)
 800ff18:	681a      	ldr	r2, [r3, #0]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	601a      	str	r2, [r3, #0]
 800ff1e:	e003      	b.n	800ff28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681a      	ldr	r2, [r3, #0]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ff28:	68fa      	ldr	r2, [r7, #12]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d002      	beq.n	800ff36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	687a      	ldr	r2, [r7, #4]
 800ff34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff36:	bf00      	nop
 800ff38:	3714      	adds	r7, #20
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr
 800ff42:	bf00      	nop
 800ff44:	20006398 	.word	0x20006398
 800ff48:	200063a0 	.word	0x200063a0

0800ff4c <__errno>:
 800ff4c:	4b01      	ldr	r3, [pc, #4]	; (800ff54 <__errno+0x8>)
 800ff4e:	6818      	ldr	r0, [r3, #0]
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop
 800ff54:	20000014 	.word	0x20000014

0800ff58 <__libc_init_array>:
 800ff58:	b570      	push	{r4, r5, r6, lr}
 800ff5a:	4d0d      	ldr	r5, [pc, #52]	; (800ff90 <__libc_init_array+0x38>)
 800ff5c:	4c0d      	ldr	r4, [pc, #52]	; (800ff94 <__libc_init_array+0x3c>)
 800ff5e:	1b64      	subs	r4, r4, r5
 800ff60:	10a4      	asrs	r4, r4, #2
 800ff62:	2600      	movs	r6, #0
 800ff64:	42a6      	cmp	r6, r4
 800ff66:	d109      	bne.n	800ff7c <__libc_init_array+0x24>
 800ff68:	4d0b      	ldr	r5, [pc, #44]	; (800ff98 <__libc_init_array+0x40>)
 800ff6a:	4c0c      	ldr	r4, [pc, #48]	; (800ff9c <__libc_init_array+0x44>)
 800ff6c:	f004 fc90 	bl	8014890 <_init>
 800ff70:	1b64      	subs	r4, r4, r5
 800ff72:	10a4      	asrs	r4, r4, #2
 800ff74:	2600      	movs	r6, #0
 800ff76:	42a6      	cmp	r6, r4
 800ff78:	d105      	bne.n	800ff86 <__libc_init_array+0x2e>
 800ff7a:	bd70      	pop	{r4, r5, r6, pc}
 800ff7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff80:	4798      	blx	r3
 800ff82:	3601      	adds	r6, #1
 800ff84:	e7ee      	b.n	800ff64 <__libc_init_array+0xc>
 800ff86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff8a:	4798      	blx	r3
 800ff8c:	3601      	adds	r6, #1
 800ff8e:	e7f2      	b.n	800ff76 <__libc_init_array+0x1e>
 800ff90:	08015934 	.word	0x08015934
 800ff94:	08015934 	.word	0x08015934
 800ff98:	08015934 	.word	0x08015934
 800ff9c:	08015938 	.word	0x08015938

0800ffa0 <memcpy>:
 800ffa0:	440a      	add	r2, r1
 800ffa2:	4291      	cmp	r1, r2
 800ffa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ffa8:	d100      	bne.n	800ffac <memcpy+0xc>
 800ffaa:	4770      	bx	lr
 800ffac:	b510      	push	{r4, lr}
 800ffae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffb6:	4291      	cmp	r1, r2
 800ffb8:	d1f9      	bne.n	800ffae <memcpy+0xe>
 800ffba:	bd10      	pop	{r4, pc}

0800ffbc <memset>:
 800ffbc:	4402      	add	r2, r0
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	4293      	cmp	r3, r2
 800ffc2:	d100      	bne.n	800ffc6 <memset+0xa>
 800ffc4:	4770      	bx	lr
 800ffc6:	f803 1b01 	strb.w	r1, [r3], #1
 800ffca:	e7f9      	b.n	800ffc0 <memset+0x4>

0800ffcc <__cvt>:
 800ffcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffd0:	ec55 4b10 	vmov	r4, r5, d0
 800ffd4:	2d00      	cmp	r5, #0
 800ffd6:	460e      	mov	r6, r1
 800ffd8:	4619      	mov	r1, r3
 800ffda:	462b      	mov	r3, r5
 800ffdc:	bfbb      	ittet	lt
 800ffde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ffe2:	461d      	movlt	r5, r3
 800ffe4:	2300      	movge	r3, #0
 800ffe6:	232d      	movlt	r3, #45	; 0x2d
 800ffe8:	700b      	strb	r3, [r1, #0]
 800ffea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fff0:	4691      	mov	r9, r2
 800fff2:	f023 0820 	bic.w	r8, r3, #32
 800fff6:	bfbc      	itt	lt
 800fff8:	4622      	movlt	r2, r4
 800fffa:	4614      	movlt	r4, r2
 800fffc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010000:	d005      	beq.n	801000e <__cvt+0x42>
 8010002:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010006:	d100      	bne.n	801000a <__cvt+0x3e>
 8010008:	3601      	adds	r6, #1
 801000a:	2102      	movs	r1, #2
 801000c:	e000      	b.n	8010010 <__cvt+0x44>
 801000e:	2103      	movs	r1, #3
 8010010:	ab03      	add	r3, sp, #12
 8010012:	9301      	str	r3, [sp, #4]
 8010014:	ab02      	add	r3, sp, #8
 8010016:	9300      	str	r3, [sp, #0]
 8010018:	ec45 4b10 	vmov	d0, r4, r5
 801001c:	4653      	mov	r3, sl
 801001e:	4632      	mov	r2, r6
 8010020:	f001 fdae 	bl	8011b80 <_dtoa_r>
 8010024:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010028:	4607      	mov	r7, r0
 801002a:	d102      	bne.n	8010032 <__cvt+0x66>
 801002c:	f019 0f01 	tst.w	r9, #1
 8010030:	d022      	beq.n	8010078 <__cvt+0xac>
 8010032:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010036:	eb07 0906 	add.w	r9, r7, r6
 801003a:	d110      	bne.n	801005e <__cvt+0x92>
 801003c:	783b      	ldrb	r3, [r7, #0]
 801003e:	2b30      	cmp	r3, #48	; 0x30
 8010040:	d10a      	bne.n	8010058 <__cvt+0x8c>
 8010042:	2200      	movs	r2, #0
 8010044:	2300      	movs	r3, #0
 8010046:	4620      	mov	r0, r4
 8010048:	4629      	mov	r1, r5
 801004a:	f7f0 fd3d 	bl	8000ac8 <__aeabi_dcmpeq>
 801004e:	b918      	cbnz	r0, 8010058 <__cvt+0x8c>
 8010050:	f1c6 0601 	rsb	r6, r6, #1
 8010054:	f8ca 6000 	str.w	r6, [sl]
 8010058:	f8da 3000 	ldr.w	r3, [sl]
 801005c:	4499      	add	r9, r3
 801005e:	2200      	movs	r2, #0
 8010060:	2300      	movs	r3, #0
 8010062:	4620      	mov	r0, r4
 8010064:	4629      	mov	r1, r5
 8010066:	f7f0 fd2f 	bl	8000ac8 <__aeabi_dcmpeq>
 801006a:	b108      	cbz	r0, 8010070 <__cvt+0xa4>
 801006c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010070:	2230      	movs	r2, #48	; 0x30
 8010072:	9b03      	ldr	r3, [sp, #12]
 8010074:	454b      	cmp	r3, r9
 8010076:	d307      	bcc.n	8010088 <__cvt+0xbc>
 8010078:	9b03      	ldr	r3, [sp, #12]
 801007a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801007c:	1bdb      	subs	r3, r3, r7
 801007e:	4638      	mov	r0, r7
 8010080:	6013      	str	r3, [r2, #0]
 8010082:	b004      	add	sp, #16
 8010084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010088:	1c59      	adds	r1, r3, #1
 801008a:	9103      	str	r1, [sp, #12]
 801008c:	701a      	strb	r2, [r3, #0]
 801008e:	e7f0      	b.n	8010072 <__cvt+0xa6>

08010090 <__exponent>:
 8010090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010092:	4603      	mov	r3, r0
 8010094:	2900      	cmp	r1, #0
 8010096:	bfb8      	it	lt
 8010098:	4249      	neglt	r1, r1
 801009a:	f803 2b02 	strb.w	r2, [r3], #2
 801009e:	bfb4      	ite	lt
 80100a0:	222d      	movlt	r2, #45	; 0x2d
 80100a2:	222b      	movge	r2, #43	; 0x2b
 80100a4:	2909      	cmp	r1, #9
 80100a6:	7042      	strb	r2, [r0, #1]
 80100a8:	dd2a      	ble.n	8010100 <__exponent+0x70>
 80100aa:	f10d 0407 	add.w	r4, sp, #7
 80100ae:	46a4      	mov	ip, r4
 80100b0:	270a      	movs	r7, #10
 80100b2:	46a6      	mov	lr, r4
 80100b4:	460a      	mov	r2, r1
 80100b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80100ba:	fb07 1516 	mls	r5, r7, r6, r1
 80100be:	3530      	adds	r5, #48	; 0x30
 80100c0:	2a63      	cmp	r2, #99	; 0x63
 80100c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80100c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80100ca:	4631      	mov	r1, r6
 80100cc:	dcf1      	bgt.n	80100b2 <__exponent+0x22>
 80100ce:	3130      	adds	r1, #48	; 0x30
 80100d0:	f1ae 0502 	sub.w	r5, lr, #2
 80100d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80100d8:	1c44      	adds	r4, r0, #1
 80100da:	4629      	mov	r1, r5
 80100dc:	4561      	cmp	r1, ip
 80100de:	d30a      	bcc.n	80100f6 <__exponent+0x66>
 80100e0:	f10d 0209 	add.w	r2, sp, #9
 80100e4:	eba2 020e 	sub.w	r2, r2, lr
 80100e8:	4565      	cmp	r5, ip
 80100ea:	bf88      	it	hi
 80100ec:	2200      	movhi	r2, #0
 80100ee:	4413      	add	r3, r2
 80100f0:	1a18      	subs	r0, r3, r0
 80100f2:	b003      	add	sp, #12
 80100f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80100fe:	e7ed      	b.n	80100dc <__exponent+0x4c>
 8010100:	2330      	movs	r3, #48	; 0x30
 8010102:	3130      	adds	r1, #48	; 0x30
 8010104:	7083      	strb	r3, [r0, #2]
 8010106:	70c1      	strb	r1, [r0, #3]
 8010108:	1d03      	adds	r3, r0, #4
 801010a:	e7f1      	b.n	80100f0 <__exponent+0x60>

0801010c <_printf_float>:
 801010c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010110:	ed2d 8b02 	vpush	{d8}
 8010114:	b08d      	sub	sp, #52	; 0x34
 8010116:	460c      	mov	r4, r1
 8010118:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801011c:	4616      	mov	r6, r2
 801011e:	461f      	mov	r7, r3
 8010120:	4605      	mov	r5, r0
 8010122:	f002 fe8b 	bl	8012e3c <_localeconv_r>
 8010126:	f8d0 a000 	ldr.w	sl, [r0]
 801012a:	4650      	mov	r0, sl
 801012c:	f7f0 f850 	bl	80001d0 <strlen>
 8010130:	2300      	movs	r3, #0
 8010132:	930a      	str	r3, [sp, #40]	; 0x28
 8010134:	6823      	ldr	r3, [r4, #0]
 8010136:	9305      	str	r3, [sp, #20]
 8010138:	f8d8 3000 	ldr.w	r3, [r8]
 801013c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010140:	3307      	adds	r3, #7
 8010142:	f023 0307 	bic.w	r3, r3, #7
 8010146:	f103 0208 	add.w	r2, r3, #8
 801014a:	f8c8 2000 	str.w	r2, [r8]
 801014e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010152:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010156:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801015a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801015e:	9307      	str	r3, [sp, #28]
 8010160:	f8cd 8018 	str.w	r8, [sp, #24]
 8010164:	ee08 0a10 	vmov	s16, r0
 8010168:	4b9f      	ldr	r3, [pc, #636]	; (80103e8 <_printf_float+0x2dc>)
 801016a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801016e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010172:	f7f0 fcdb 	bl	8000b2c <__aeabi_dcmpun>
 8010176:	bb88      	cbnz	r0, 80101dc <_printf_float+0xd0>
 8010178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801017c:	4b9a      	ldr	r3, [pc, #616]	; (80103e8 <_printf_float+0x2dc>)
 801017e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010182:	f7f0 fcb5 	bl	8000af0 <__aeabi_dcmple>
 8010186:	bb48      	cbnz	r0, 80101dc <_printf_float+0xd0>
 8010188:	2200      	movs	r2, #0
 801018a:	2300      	movs	r3, #0
 801018c:	4640      	mov	r0, r8
 801018e:	4649      	mov	r1, r9
 8010190:	f7f0 fca4 	bl	8000adc <__aeabi_dcmplt>
 8010194:	b110      	cbz	r0, 801019c <_printf_float+0x90>
 8010196:	232d      	movs	r3, #45	; 0x2d
 8010198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801019c:	4b93      	ldr	r3, [pc, #588]	; (80103ec <_printf_float+0x2e0>)
 801019e:	4894      	ldr	r0, [pc, #592]	; (80103f0 <_printf_float+0x2e4>)
 80101a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80101a4:	bf94      	ite	ls
 80101a6:	4698      	movls	r8, r3
 80101a8:	4680      	movhi	r8, r0
 80101aa:	2303      	movs	r3, #3
 80101ac:	6123      	str	r3, [r4, #16]
 80101ae:	9b05      	ldr	r3, [sp, #20]
 80101b0:	f023 0204 	bic.w	r2, r3, #4
 80101b4:	6022      	str	r2, [r4, #0]
 80101b6:	f04f 0900 	mov.w	r9, #0
 80101ba:	9700      	str	r7, [sp, #0]
 80101bc:	4633      	mov	r3, r6
 80101be:	aa0b      	add	r2, sp, #44	; 0x2c
 80101c0:	4621      	mov	r1, r4
 80101c2:	4628      	mov	r0, r5
 80101c4:	f000 f9d8 	bl	8010578 <_printf_common>
 80101c8:	3001      	adds	r0, #1
 80101ca:	f040 8090 	bne.w	80102ee <_printf_float+0x1e2>
 80101ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101d2:	b00d      	add	sp, #52	; 0x34
 80101d4:	ecbd 8b02 	vpop	{d8}
 80101d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101dc:	4642      	mov	r2, r8
 80101de:	464b      	mov	r3, r9
 80101e0:	4640      	mov	r0, r8
 80101e2:	4649      	mov	r1, r9
 80101e4:	f7f0 fca2 	bl	8000b2c <__aeabi_dcmpun>
 80101e8:	b140      	cbz	r0, 80101fc <_printf_float+0xf0>
 80101ea:	464b      	mov	r3, r9
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	bfbc      	itt	lt
 80101f0:	232d      	movlt	r3, #45	; 0x2d
 80101f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80101f6:	487f      	ldr	r0, [pc, #508]	; (80103f4 <_printf_float+0x2e8>)
 80101f8:	4b7f      	ldr	r3, [pc, #508]	; (80103f8 <_printf_float+0x2ec>)
 80101fa:	e7d1      	b.n	80101a0 <_printf_float+0x94>
 80101fc:	6863      	ldr	r3, [r4, #4]
 80101fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010202:	9206      	str	r2, [sp, #24]
 8010204:	1c5a      	adds	r2, r3, #1
 8010206:	d13f      	bne.n	8010288 <_printf_float+0x17c>
 8010208:	2306      	movs	r3, #6
 801020a:	6063      	str	r3, [r4, #4]
 801020c:	9b05      	ldr	r3, [sp, #20]
 801020e:	6861      	ldr	r1, [r4, #4]
 8010210:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010214:	2300      	movs	r3, #0
 8010216:	9303      	str	r3, [sp, #12]
 8010218:	ab0a      	add	r3, sp, #40	; 0x28
 801021a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801021e:	ab09      	add	r3, sp, #36	; 0x24
 8010220:	ec49 8b10 	vmov	d0, r8, r9
 8010224:	9300      	str	r3, [sp, #0]
 8010226:	6022      	str	r2, [r4, #0]
 8010228:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801022c:	4628      	mov	r0, r5
 801022e:	f7ff fecd 	bl	800ffcc <__cvt>
 8010232:	9b06      	ldr	r3, [sp, #24]
 8010234:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010236:	2b47      	cmp	r3, #71	; 0x47
 8010238:	4680      	mov	r8, r0
 801023a:	d108      	bne.n	801024e <_printf_float+0x142>
 801023c:	1cc8      	adds	r0, r1, #3
 801023e:	db02      	blt.n	8010246 <_printf_float+0x13a>
 8010240:	6863      	ldr	r3, [r4, #4]
 8010242:	4299      	cmp	r1, r3
 8010244:	dd41      	ble.n	80102ca <_printf_float+0x1be>
 8010246:	f1ab 0b02 	sub.w	fp, fp, #2
 801024a:	fa5f fb8b 	uxtb.w	fp, fp
 801024e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010252:	d820      	bhi.n	8010296 <_printf_float+0x18a>
 8010254:	3901      	subs	r1, #1
 8010256:	465a      	mov	r2, fp
 8010258:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801025c:	9109      	str	r1, [sp, #36]	; 0x24
 801025e:	f7ff ff17 	bl	8010090 <__exponent>
 8010262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010264:	1813      	adds	r3, r2, r0
 8010266:	2a01      	cmp	r2, #1
 8010268:	4681      	mov	r9, r0
 801026a:	6123      	str	r3, [r4, #16]
 801026c:	dc02      	bgt.n	8010274 <_printf_float+0x168>
 801026e:	6822      	ldr	r2, [r4, #0]
 8010270:	07d2      	lsls	r2, r2, #31
 8010272:	d501      	bpl.n	8010278 <_printf_float+0x16c>
 8010274:	3301      	adds	r3, #1
 8010276:	6123      	str	r3, [r4, #16]
 8010278:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801027c:	2b00      	cmp	r3, #0
 801027e:	d09c      	beq.n	80101ba <_printf_float+0xae>
 8010280:	232d      	movs	r3, #45	; 0x2d
 8010282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010286:	e798      	b.n	80101ba <_printf_float+0xae>
 8010288:	9a06      	ldr	r2, [sp, #24]
 801028a:	2a47      	cmp	r2, #71	; 0x47
 801028c:	d1be      	bne.n	801020c <_printf_float+0x100>
 801028e:	2b00      	cmp	r3, #0
 8010290:	d1bc      	bne.n	801020c <_printf_float+0x100>
 8010292:	2301      	movs	r3, #1
 8010294:	e7b9      	b.n	801020a <_printf_float+0xfe>
 8010296:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801029a:	d118      	bne.n	80102ce <_printf_float+0x1c2>
 801029c:	2900      	cmp	r1, #0
 801029e:	6863      	ldr	r3, [r4, #4]
 80102a0:	dd0b      	ble.n	80102ba <_printf_float+0x1ae>
 80102a2:	6121      	str	r1, [r4, #16]
 80102a4:	b913      	cbnz	r3, 80102ac <_printf_float+0x1a0>
 80102a6:	6822      	ldr	r2, [r4, #0]
 80102a8:	07d0      	lsls	r0, r2, #31
 80102aa:	d502      	bpl.n	80102b2 <_printf_float+0x1a6>
 80102ac:	3301      	adds	r3, #1
 80102ae:	440b      	add	r3, r1
 80102b0:	6123      	str	r3, [r4, #16]
 80102b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80102b4:	f04f 0900 	mov.w	r9, #0
 80102b8:	e7de      	b.n	8010278 <_printf_float+0x16c>
 80102ba:	b913      	cbnz	r3, 80102c2 <_printf_float+0x1b6>
 80102bc:	6822      	ldr	r2, [r4, #0]
 80102be:	07d2      	lsls	r2, r2, #31
 80102c0:	d501      	bpl.n	80102c6 <_printf_float+0x1ba>
 80102c2:	3302      	adds	r3, #2
 80102c4:	e7f4      	b.n	80102b0 <_printf_float+0x1a4>
 80102c6:	2301      	movs	r3, #1
 80102c8:	e7f2      	b.n	80102b0 <_printf_float+0x1a4>
 80102ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80102ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102d0:	4299      	cmp	r1, r3
 80102d2:	db05      	blt.n	80102e0 <_printf_float+0x1d4>
 80102d4:	6823      	ldr	r3, [r4, #0]
 80102d6:	6121      	str	r1, [r4, #16]
 80102d8:	07d8      	lsls	r0, r3, #31
 80102da:	d5ea      	bpl.n	80102b2 <_printf_float+0x1a6>
 80102dc:	1c4b      	adds	r3, r1, #1
 80102de:	e7e7      	b.n	80102b0 <_printf_float+0x1a4>
 80102e0:	2900      	cmp	r1, #0
 80102e2:	bfd4      	ite	le
 80102e4:	f1c1 0202 	rsble	r2, r1, #2
 80102e8:	2201      	movgt	r2, #1
 80102ea:	4413      	add	r3, r2
 80102ec:	e7e0      	b.n	80102b0 <_printf_float+0x1a4>
 80102ee:	6823      	ldr	r3, [r4, #0]
 80102f0:	055a      	lsls	r2, r3, #21
 80102f2:	d407      	bmi.n	8010304 <_printf_float+0x1f8>
 80102f4:	6923      	ldr	r3, [r4, #16]
 80102f6:	4642      	mov	r2, r8
 80102f8:	4631      	mov	r1, r6
 80102fa:	4628      	mov	r0, r5
 80102fc:	47b8      	blx	r7
 80102fe:	3001      	adds	r0, #1
 8010300:	d12c      	bne.n	801035c <_printf_float+0x250>
 8010302:	e764      	b.n	80101ce <_printf_float+0xc2>
 8010304:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010308:	f240 80e0 	bls.w	80104cc <_printf_float+0x3c0>
 801030c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010310:	2200      	movs	r2, #0
 8010312:	2300      	movs	r3, #0
 8010314:	f7f0 fbd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8010318:	2800      	cmp	r0, #0
 801031a:	d034      	beq.n	8010386 <_printf_float+0x27a>
 801031c:	4a37      	ldr	r2, [pc, #220]	; (80103fc <_printf_float+0x2f0>)
 801031e:	2301      	movs	r3, #1
 8010320:	4631      	mov	r1, r6
 8010322:	4628      	mov	r0, r5
 8010324:	47b8      	blx	r7
 8010326:	3001      	adds	r0, #1
 8010328:	f43f af51 	beq.w	80101ce <_printf_float+0xc2>
 801032c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010330:	429a      	cmp	r2, r3
 8010332:	db02      	blt.n	801033a <_printf_float+0x22e>
 8010334:	6823      	ldr	r3, [r4, #0]
 8010336:	07d8      	lsls	r0, r3, #31
 8010338:	d510      	bpl.n	801035c <_printf_float+0x250>
 801033a:	ee18 3a10 	vmov	r3, s16
 801033e:	4652      	mov	r2, sl
 8010340:	4631      	mov	r1, r6
 8010342:	4628      	mov	r0, r5
 8010344:	47b8      	blx	r7
 8010346:	3001      	adds	r0, #1
 8010348:	f43f af41 	beq.w	80101ce <_printf_float+0xc2>
 801034c:	f04f 0800 	mov.w	r8, #0
 8010350:	f104 091a 	add.w	r9, r4, #26
 8010354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010356:	3b01      	subs	r3, #1
 8010358:	4543      	cmp	r3, r8
 801035a:	dc09      	bgt.n	8010370 <_printf_float+0x264>
 801035c:	6823      	ldr	r3, [r4, #0]
 801035e:	079b      	lsls	r3, r3, #30
 8010360:	f100 8105 	bmi.w	801056e <_printf_float+0x462>
 8010364:	68e0      	ldr	r0, [r4, #12]
 8010366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010368:	4298      	cmp	r0, r3
 801036a:	bfb8      	it	lt
 801036c:	4618      	movlt	r0, r3
 801036e:	e730      	b.n	80101d2 <_printf_float+0xc6>
 8010370:	2301      	movs	r3, #1
 8010372:	464a      	mov	r2, r9
 8010374:	4631      	mov	r1, r6
 8010376:	4628      	mov	r0, r5
 8010378:	47b8      	blx	r7
 801037a:	3001      	adds	r0, #1
 801037c:	f43f af27 	beq.w	80101ce <_printf_float+0xc2>
 8010380:	f108 0801 	add.w	r8, r8, #1
 8010384:	e7e6      	b.n	8010354 <_printf_float+0x248>
 8010386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010388:	2b00      	cmp	r3, #0
 801038a:	dc39      	bgt.n	8010400 <_printf_float+0x2f4>
 801038c:	4a1b      	ldr	r2, [pc, #108]	; (80103fc <_printf_float+0x2f0>)
 801038e:	2301      	movs	r3, #1
 8010390:	4631      	mov	r1, r6
 8010392:	4628      	mov	r0, r5
 8010394:	47b8      	blx	r7
 8010396:	3001      	adds	r0, #1
 8010398:	f43f af19 	beq.w	80101ce <_printf_float+0xc2>
 801039c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103a0:	4313      	orrs	r3, r2
 80103a2:	d102      	bne.n	80103aa <_printf_float+0x29e>
 80103a4:	6823      	ldr	r3, [r4, #0]
 80103a6:	07d9      	lsls	r1, r3, #31
 80103a8:	d5d8      	bpl.n	801035c <_printf_float+0x250>
 80103aa:	ee18 3a10 	vmov	r3, s16
 80103ae:	4652      	mov	r2, sl
 80103b0:	4631      	mov	r1, r6
 80103b2:	4628      	mov	r0, r5
 80103b4:	47b8      	blx	r7
 80103b6:	3001      	adds	r0, #1
 80103b8:	f43f af09 	beq.w	80101ce <_printf_float+0xc2>
 80103bc:	f04f 0900 	mov.w	r9, #0
 80103c0:	f104 0a1a 	add.w	sl, r4, #26
 80103c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103c6:	425b      	negs	r3, r3
 80103c8:	454b      	cmp	r3, r9
 80103ca:	dc01      	bgt.n	80103d0 <_printf_float+0x2c4>
 80103cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103ce:	e792      	b.n	80102f6 <_printf_float+0x1ea>
 80103d0:	2301      	movs	r3, #1
 80103d2:	4652      	mov	r2, sl
 80103d4:	4631      	mov	r1, r6
 80103d6:	4628      	mov	r0, r5
 80103d8:	47b8      	blx	r7
 80103da:	3001      	adds	r0, #1
 80103dc:	f43f aef7 	beq.w	80101ce <_printf_float+0xc2>
 80103e0:	f109 0901 	add.w	r9, r9, #1
 80103e4:	e7ee      	b.n	80103c4 <_printf_float+0x2b8>
 80103e6:	bf00      	nop
 80103e8:	7fefffff 	.word	0x7fefffff
 80103ec:	0801548c 	.word	0x0801548c
 80103f0:	08015490 	.word	0x08015490
 80103f4:	08015498 	.word	0x08015498
 80103f8:	08015494 	.word	0x08015494
 80103fc:	0801549c 	.word	0x0801549c
 8010400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010402:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010404:	429a      	cmp	r2, r3
 8010406:	bfa8      	it	ge
 8010408:	461a      	movge	r2, r3
 801040a:	2a00      	cmp	r2, #0
 801040c:	4691      	mov	r9, r2
 801040e:	dc37      	bgt.n	8010480 <_printf_float+0x374>
 8010410:	f04f 0b00 	mov.w	fp, #0
 8010414:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010418:	f104 021a 	add.w	r2, r4, #26
 801041c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801041e:	9305      	str	r3, [sp, #20]
 8010420:	eba3 0309 	sub.w	r3, r3, r9
 8010424:	455b      	cmp	r3, fp
 8010426:	dc33      	bgt.n	8010490 <_printf_float+0x384>
 8010428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801042c:	429a      	cmp	r2, r3
 801042e:	db3b      	blt.n	80104a8 <_printf_float+0x39c>
 8010430:	6823      	ldr	r3, [r4, #0]
 8010432:	07da      	lsls	r2, r3, #31
 8010434:	d438      	bmi.n	80104a8 <_printf_float+0x39c>
 8010436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010438:	9a05      	ldr	r2, [sp, #20]
 801043a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801043c:	1a9a      	subs	r2, r3, r2
 801043e:	eba3 0901 	sub.w	r9, r3, r1
 8010442:	4591      	cmp	r9, r2
 8010444:	bfa8      	it	ge
 8010446:	4691      	movge	r9, r2
 8010448:	f1b9 0f00 	cmp.w	r9, #0
 801044c:	dc35      	bgt.n	80104ba <_printf_float+0x3ae>
 801044e:	f04f 0800 	mov.w	r8, #0
 8010452:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010456:	f104 0a1a 	add.w	sl, r4, #26
 801045a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801045e:	1a9b      	subs	r3, r3, r2
 8010460:	eba3 0309 	sub.w	r3, r3, r9
 8010464:	4543      	cmp	r3, r8
 8010466:	f77f af79 	ble.w	801035c <_printf_float+0x250>
 801046a:	2301      	movs	r3, #1
 801046c:	4652      	mov	r2, sl
 801046e:	4631      	mov	r1, r6
 8010470:	4628      	mov	r0, r5
 8010472:	47b8      	blx	r7
 8010474:	3001      	adds	r0, #1
 8010476:	f43f aeaa 	beq.w	80101ce <_printf_float+0xc2>
 801047a:	f108 0801 	add.w	r8, r8, #1
 801047e:	e7ec      	b.n	801045a <_printf_float+0x34e>
 8010480:	4613      	mov	r3, r2
 8010482:	4631      	mov	r1, r6
 8010484:	4642      	mov	r2, r8
 8010486:	4628      	mov	r0, r5
 8010488:	47b8      	blx	r7
 801048a:	3001      	adds	r0, #1
 801048c:	d1c0      	bne.n	8010410 <_printf_float+0x304>
 801048e:	e69e      	b.n	80101ce <_printf_float+0xc2>
 8010490:	2301      	movs	r3, #1
 8010492:	4631      	mov	r1, r6
 8010494:	4628      	mov	r0, r5
 8010496:	9205      	str	r2, [sp, #20]
 8010498:	47b8      	blx	r7
 801049a:	3001      	adds	r0, #1
 801049c:	f43f ae97 	beq.w	80101ce <_printf_float+0xc2>
 80104a0:	9a05      	ldr	r2, [sp, #20]
 80104a2:	f10b 0b01 	add.w	fp, fp, #1
 80104a6:	e7b9      	b.n	801041c <_printf_float+0x310>
 80104a8:	ee18 3a10 	vmov	r3, s16
 80104ac:	4652      	mov	r2, sl
 80104ae:	4631      	mov	r1, r6
 80104b0:	4628      	mov	r0, r5
 80104b2:	47b8      	blx	r7
 80104b4:	3001      	adds	r0, #1
 80104b6:	d1be      	bne.n	8010436 <_printf_float+0x32a>
 80104b8:	e689      	b.n	80101ce <_printf_float+0xc2>
 80104ba:	9a05      	ldr	r2, [sp, #20]
 80104bc:	464b      	mov	r3, r9
 80104be:	4442      	add	r2, r8
 80104c0:	4631      	mov	r1, r6
 80104c2:	4628      	mov	r0, r5
 80104c4:	47b8      	blx	r7
 80104c6:	3001      	adds	r0, #1
 80104c8:	d1c1      	bne.n	801044e <_printf_float+0x342>
 80104ca:	e680      	b.n	80101ce <_printf_float+0xc2>
 80104cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104ce:	2a01      	cmp	r2, #1
 80104d0:	dc01      	bgt.n	80104d6 <_printf_float+0x3ca>
 80104d2:	07db      	lsls	r3, r3, #31
 80104d4:	d538      	bpl.n	8010548 <_printf_float+0x43c>
 80104d6:	2301      	movs	r3, #1
 80104d8:	4642      	mov	r2, r8
 80104da:	4631      	mov	r1, r6
 80104dc:	4628      	mov	r0, r5
 80104de:	47b8      	blx	r7
 80104e0:	3001      	adds	r0, #1
 80104e2:	f43f ae74 	beq.w	80101ce <_printf_float+0xc2>
 80104e6:	ee18 3a10 	vmov	r3, s16
 80104ea:	4652      	mov	r2, sl
 80104ec:	4631      	mov	r1, r6
 80104ee:	4628      	mov	r0, r5
 80104f0:	47b8      	blx	r7
 80104f2:	3001      	adds	r0, #1
 80104f4:	f43f ae6b 	beq.w	80101ce <_printf_float+0xc2>
 80104f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80104fc:	2200      	movs	r2, #0
 80104fe:	2300      	movs	r3, #0
 8010500:	f7f0 fae2 	bl	8000ac8 <__aeabi_dcmpeq>
 8010504:	b9d8      	cbnz	r0, 801053e <_printf_float+0x432>
 8010506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010508:	f108 0201 	add.w	r2, r8, #1
 801050c:	3b01      	subs	r3, #1
 801050e:	4631      	mov	r1, r6
 8010510:	4628      	mov	r0, r5
 8010512:	47b8      	blx	r7
 8010514:	3001      	adds	r0, #1
 8010516:	d10e      	bne.n	8010536 <_printf_float+0x42a>
 8010518:	e659      	b.n	80101ce <_printf_float+0xc2>
 801051a:	2301      	movs	r3, #1
 801051c:	4652      	mov	r2, sl
 801051e:	4631      	mov	r1, r6
 8010520:	4628      	mov	r0, r5
 8010522:	47b8      	blx	r7
 8010524:	3001      	adds	r0, #1
 8010526:	f43f ae52 	beq.w	80101ce <_printf_float+0xc2>
 801052a:	f108 0801 	add.w	r8, r8, #1
 801052e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010530:	3b01      	subs	r3, #1
 8010532:	4543      	cmp	r3, r8
 8010534:	dcf1      	bgt.n	801051a <_printf_float+0x40e>
 8010536:	464b      	mov	r3, r9
 8010538:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801053c:	e6dc      	b.n	80102f8 <_printf_float+0x1ec>
 801053e:	f04f 0800 	mov.w	r8, #0
 8010542:	f104 0a1a 	add.w	sl, r4, #26
 8010546:	e7f2      	b.n	801052e <_printf_float+0x422>
 8010548:	2301      	movs	r3, #1
 801054a:	4642      	mov	r2, r8
 801054c:	e7df      	b.n	801050e <_printf_float+0x402>
 801054e:	2301      	movs	r3, #1
 8010550:	464a      	mov	r2, r9
 8010552:	4631      	mov	r1, r6
 8010554:	4628      	mov	r0, r5
 8010556:	47b8      	blx	r7
 8010558:	3001      	adds	r0, #1
 801055a:	f43f ae38 	beq.w	80101ce <_printf_float+0xc2>
 801055e:	f108 0801 	add.w	r8, r8, #1
 8010562:	68e3      	ldr	r3, [r4, #12]
 8010564:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010566:	1a5b      	subs	r3, r3, r1
 8010568:	4543      	cmp	r3, r8
 801056a:	dcf0      	bgt.n	801054e <_printf_float+0x442>
 801056c:	e6fa      	b.n	8010364 <_printf_float+0x258>
 801056e:	f04f 0800 	mov.w	r8, #0
 8010572:	f104 0919 	add.w	r9, r4, #25
 8010576:	e7f4      	b.n	8010562 <_printf_float+0x456>

08010578 <_printf_common>:
 8010578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801057c:	4616      	mov	r6, r2
 801057e:	4699      	mov	r9, r3
 8010580:	688a      	ldr	r2, [r1, #8]
 8010582:	690b      	ldr	r3, [r1, #16]
 8010584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010588:	4293      	cmp	r3, r2
 801058a:	bfb8      	it	lt
 801058c:	4613      	movlt	r3, r2
 801058e:	6033      	str	r3, [r6, #0]
 8010590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010594:	4607      	mov	r7, r0
 8010596:	460c      	mov	r4, r1
 8010598:	b10a      	cbz	r2, 801059e <_printf_common+0x26>
 801059a:	3301      	adds	r3, #1
 801059c:	6033      	str	r3, [r6, #0]
 801059e:	6823      	ldr	r3, [r4, #0]
 80105a0:	0699      	lsls	r1, r3, #26
 80105a2:	bf42      	ittt	mi
 80105a4:	6833      	ldrmi	r3, [r6, #0]
 80105a6:	3302      	addmi	r3, #2
 80105a8:	6033      	strmi	r3, [r6, #0]
 80105aa:	6825      	ldr	r5, [r4, #0]
 80105ac:	f015 0506 	ands.w	r5, r5, #6
 80105b0:	d106      	bne.n	80105c0 <_printf_common+0x48>
 80105b2:	f104 0a19 	add.w	sl, r4, #25
 80105b6:	68e3      	ldr	r3, [r4, #12]
 80105b8:	6832      	ldr	r2, [r6, #0]
 80105ba:	1a9b      	subs	r3, r3, r2
 80105bc:	42ab      	cmp	r3, r5
 80105be:	dc26      	bgt.n	801060e <_printf_common+0x96>
 80105c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80105c4:	1e13      	subs	r3, r2, #0
 80105c6:	6822      	ldr	r2, [r4, #0]
 80105c8:	bf18      	it	ne
 80105ca:	2301      	movne	r3, #1
 80105cc:	0692      	lsls	r2, r2, #26
 80105ce:	d42b      	bmi.n	8010628 <_printf_common+0xb0>
 80105d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80105d4:	4649      	mov	r1, r9
 80105d6:	4638      	mov	r0, r7
 80105d8:	47c0      	blx	r8
 80105da:	3001      	adds	r0, #1
 80105dc:	d01e      	beq.n	801061c <_printf_common+0xa4>
 80105de:	6823      	ldr	r3, [r4, #0]
 80105e0:	68e5      	ldr	r5, [r4, #12]
 80105e2:	6832      	ldr	r2, [r6, #0]
 80105e4:	f003 0306 	and.w	r3, r3, #6
 80105e8:	2b04      	cmp	r3, #4
 80105ea:	bf08      	it	eq
 80105ec:	1aad      	subeq	r5, r5, r2
 80105ee:	68a3      	ldr	r3, [r4, #8]
 80105f0:	6922      	ldr	r2, [r4, #16]
 80105f2:	bf0c      	ite	eq
 80105f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105f8:	2500      	movne	r5, #0
 80105fa:	4293      	cmp	r3, r2
 80105fc:	bfc4      	itt	gt
 80105fe:	1a9b      	subgt	r3, r3, r2
 8010600:	18ed      	addgt	r5, r5, r3
 8010602:	2600      	movs	r6, #0
 8010604:	341a      	adds	r4, #26
 8010606:	42b5      	cmp	r5, r6
 8010608:	d11a      	bne.n	8010640 <_printf_common+0xc8>
 801060a:	2000      	movs	r0, #0
 801060c:	e008      	b.n	8010620 <_printf_common+0xa8>
 801060e:	2301      	movs	r3, #1
 8010610:	4652      	mov	r2, sl
 8010612:	4649      	mov	r1, r9
 8010614:	4638      	mov	r0, r7
 8010616:	47c0      	blx	r8
 8010618:	3001      	adds	r0, #1
 801061a:	d103      	bne.n	8010624 <_printf_common+0xac>
 801061c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010624:	3501      	adds	r5, #1
 8010626:	e7c6      	b.n	80105b6 <_printf_common+0x3e>
 8010628:	18e1      	adds	r1, r4, r3
 801062a:	1c5a      	adds	r2, r3, #1
 801062c:	2030      	movs	r0, #48	; 0x30
 801062e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010632:	4422      	add	r2, r4
 8010634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801063c:	3302      	adds	r3, #2
 801063e:	e7c7      	b.n	80105d0 <_printf_common+0x58>
 8010640:	2301      	movs	r3, #1
 8010642:	4622      	mov	r2, r4
 8010644:	4649      	mov	r1, r9
 8010646:	4638      	mov	r0, r7
 8010648:	47c0      	blx	r8
 801064a:	3001      	adds	r0, #1
 801064c:	d0e6      	beq.n	801061c <_printf_common+0xa4>
 801064e:	3601      	adds	r6, #1
 8010650:	e7d9      	b.n	8010606 <_printf_common+0x8e>
	...

08010654 <_printf_i>:
 8010654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010658:	7e0f      	ldrb	r7, [r1, #24]
 801065a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801065c:	2f78      	cmp	r7, #120	; 0x78
 801065e:	4691      	mov	r9, r2
 8010660:	4680      	mov	r8, r0
 8010662:	460c      	mov	r4, r1
 8010664:	469a      	mov	sl, r3
 8010666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801066a:	d807      	bhi.n	801067c <_printf_i+0x28>
 801066c:	2f62      	cmp	r7, #98	; 0x62
 801066e:	d80a      	bhi.n	8010686 <_printf_i+0x32>
 8010670:	2f00      	cmp	r7, #0
 8010672:	f000 80d8 	beq.w	8010826 <_printf_i+0x1d2>
 8010676:	2f58      	cmp	r7, #88	; 0x58
 8010678:	f000 80a3 	beq.w	80107c2 <_printf_i+0x16e>
 801067c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010684:	e03a      	b.n	80106fc <_printf_i+0xa8>
 8010686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801068a:	2b15      	cmp	r3, #21
 801068c:	d8f6      	bhi.n	801067c <_printf_i+0x28>
 801068e:	a101      	add	r1, pc, #4	; (adr r1, 8010694 <_printf_i+0x40>)
 8010690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010694:	080106ed 	.word	0x080106ed
 8010698:	08010701 	.word	0x08010701
 801069c:	0801067d 	.word	0x0801067d
 80106a0:	0801067d 	.word	0x0801067d
 80106a4:	0801067d 	.word	0x0801067d
 80106a8:	0801067d 	.word	0x0801067d
 80106ac:	08010701 	.word	0x08010701
 80106b0:	0801067d 	.word	0x0801067d
 80106b4:	0801067d 	.word	0x0801067d
 80106b8:	0801067d 	.word	0x0801067d
 80106bc:	0801067d 	.word	0x0801067d
 80106c0:	0801080d 	.word	0x0801080d
 80106c4:	08010731 	.word	0x08010731
 80106c8:	080107ef 	.word	0x080107ef
 80106cc:	0801067d 	.word	0x0801067d
 80106d0:	0801067d 	.word	0x0801067d
 80106d4:	0801082f 	.word	0x0801082f
 80106d8:	0801067d 	.word	0x0801067d
 80106dc:	08010731 	.word	0x08010731
 80106e0:	0801067d 	.word	0x0801067d
 80106e4:	0801067d 	.word	0x0801067d
 80106e8:	080107f7 	.word	0x080107f7
 80106ec:	682b      	ldr	r3, [r5, #0]
 80106ee:	1d1a      	adds	r2, r3, #4
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	602a      	str	r2, [r5, #0]
 80106f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80106fc:	2301      	movs	r3, #1
 80106fe:	e0a3      	b.n	8010848 <_printf_i+0x1f4>
 8010700:	6820      	ldr	r0, [r4, #0]
 8010702:	6829      	ldr	r1, [r5, #0]
 8010704:	0606      	lsls	r6, r0, #24
 8010706:	f101 0304 	add.w	r3, r1, #4
 801070a:	d50a      	bpl.n	8010722 <_printf_i+0xce>
 801070c:	680e      	ldr	r6, [r1, #0]
 801070e:	602b      	str	r3, [r5, #0]
 8010710:	2e00      	cmp	r6, #0
 8010712:	da03      	bge.n	801071c <_printf_i+0xc8>
 8010714:	232d      	movs	r3, #45	; 0x2d
 8010716:	4276      	negs	r6, r6
 8010718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801071c:	485e      	ldr	r0, [pc, #376]	; (8010898 <_printf_i+0x244>)
 801071e:	230a      	movs	r3, #10
 8010720:	e019      	b.n	8010756 <_printf_i+0x102>
 8010722:	680e      	ldr	r6, [r1, #0]
 8010724:	602b      	str	r3, [r5, #0]
 8010726:	f010 0f40 	tst.w	r0, #64	; 0x40
 801072a:	bf18      	it	ne
 801072c:	b236      	sxthne	r6, r6
 801072e:	e7ef      	b.n	8010710 <_printf_i+0xbc>
 8010730:	682b      	ldr	r3, [r5, #0]
 8010732:	6820      	ldr	r0, [r4, #0]
 8010734:	1d19      	adds	r1, r3, #4
 8010736:	6029      	str	r1, [r5, #0]
 8010738:	0601      	lsls	r1, r0, #24
 801073a:	d501      	bpl.n	8010740 <_printf_i+0xec>
 801073c:	681e      	ldr	r6, [r3, #0]
 801073e:	e002      	b.n	8010746 <_printf_i+0xf2>
 8010740:	0646      	lsls	r6, r0, #25
 8010742:	d5fb      	bpl.n	801073c <_printf_i+0xe8>
 8010744:	881e      	ldrh	r6, [r3, #0]
 8010746:	4854      	ldr	r0, [pc, #336]	; (8010898 <_printf_i+0x244>)
 8010748:	2f6f      	cmp	r7, #111	; 0x6f
 801074a:	bf0c      	ite	eq
 801074c:	2308      	moveq	r3, #8
 801074e:	230a      	movne	r3, #10
 8010750:	2100      	movs	r1, #0
 8010752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010756:	6865      	ldr	r5, [r4, #4]
 8010758:	60a5      	str	r5, [r4, #8]
 801075a:	2d00      	cmp	r5, #0
 801075c:	bfa2      	ittt	ge
 801075e:	6821      	ldrge	r1, [r4, #0]
 8010760:	f021 0104 	bicge.w	r1, r1, #4
 8010764:	6021      	strge	r1, [r4, #0]
 8010766:	b90e      	cbnz	r6, 801076c <_printf_i+0x118>
 8010768:	2d00      	cmp	r5, #0
 801076a:	d04d      	beq.n	8010808 <_printf_i+0x1b4>
 801076c:	4615      	mov	r5, r2
 801076e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010772:	fb03 6711 	mls	r7, r3, r1, r6
 8010776:	5dc7      	ldrb	r7, [r0, r7]
 8010778:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801077c:	4637      	mov	r7, r6
 801077e:	42bb      	cmp	r3, r7
 8010780:	460e      	mov	r6, r1
 8010782:	d9f4      	bls.n	801076e <_printf_i+0x11a>
 8010784:	2b08      	cmp	r3, #8
 8010786:	d10b      	bne.n	80107a0 <_printf_i+0x14c>
 8010788:	6823      	ldr	r3, [r4, #0]
 801078a:	07de      	lsls	r6, r3, #31
 801078c:	d508      	bpl.n	80107a0 <_printf_i+0x14c>
 801078e:	6923      	ldr	r3, [r4, #16]
 8010790:	6861      	ldr	r1, [r4, #4]
 8010792:	4299      	cmp	r1, r3
 8010794:	bfde      	ittt	le
 8010796:	2330      	movle	r3, #48	; 0x30
 8010798:	f805 3c01 	strble.w	r3, [r5, #-1]
 801079c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80107a0:	1b52      	subs	r2, r2, r5
 80107a2:	6122      	str	r2, [r4, #16]
 80107a4:	f8cd a000 	str.w	sl, [sp]
 80107a8:	464b      	mov	r3, r9
 80107aa:	aa03      	add	r2, sp, #12
 80107ac:	4621      	mov	r1, r4
 80107ae:	4640      	mov	r0, r8
 80107b0:	f7ff fee2 	bl	8010578 <_printf_common>
 80107b4:	3001      	adds	r0, #1
 80107b6:	d14c      	bne.n	8010852 <_printf_i+0x1fe>
 80107b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107bc:	b004      	add	sp, #16
 80107be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107c2:	4835      	ldr	r0, [pc, #212]	; (8010898 <_printf_i+0x244>)
 80107c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80107c8:	6829      	ldr	r1, [r5, #0]
 80107ca:	6823      	ldr	r3, [r4, #0]
 80107cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80107d0:	6029      	str	r1, [r5, #0]
 80107d2:	061d      	lsls	r5, r3, #24
 80107d4:	d514      	bpl.n	8010800 <_printf_i+0x1ac>
 80107d6:	07df      	lsls	r7, r3, #31
 80107d8:	bf44      	itt	mi
 80107da:	f043 0320 	orrmi.w	r3, r3, #32
 80107de:	6023      	strmi	r3, [r4, #0]
 80107e0:	b91e      	cbnz	r6, 80107ea <_printf_i+0x196>
 80107e2:	6823      	ldr	r3, [r4, #0]
 80107e4:	f023 0320 	bic.w	r3, r3, #32
 80107e8:	6023      	str	r3, [r4, #0]
 80107ea:	2310      	movs	r3, #16
 80107ec:	e7b0      	b.n	8010750 <_printf_i+0xfc>
 80107ee:	6823      	ldr	r3, [r4, #0]
 80107f0:	f043 0320 	orr.w	r3, r3, #32
 80107f4:	6023      	str	r3, [r4, #0]
 80107f6:	2378      	movs	r3, #120	; 0x78
 80107f8:	4828      	ldr	r0, [pc, #160]	; (801089c <_printf_i+0x248>)
 80107fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80107fe:	e7e3      	b.n	80107c8 <_printf_i+0x174>
 8010800:	0659      	lsls	r1, r3, #25
 8010802:	bf48      	it	mi
 8010804:	b2b6      	uxthmi	r6, r6
 8010806:	e7e6      	b.n	80107d6 <_printf_i+0x182>
 8010808:	4615      	mov	r5, r2
 801080a:	e7bb      	b.n	8010784 <_printf_i+0x130>
 801080c:	682b      	ldr	r3, [r5, #0]
 801080e:	6826      	ldr	r6, [r4, #0]
 8010810:	6961      	ldr	r1, [r4, #20]
 8010812:	1d18      	adds	r0, r3, #4
 8010814:	6028      	str	r0, [r5, #0]
 8010816:	0635      	lsls	r5, r6, #24
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	d501      	bpl.n	8010820 <_printf_i+0x1cc>
 801081c:	6019      	str	r1, [r3, #0]
 801081e:	e002      	b.n	8010826 <_printf_i+0x1d2>
 8010820:	0670      	lsls	r0, r6, #25
 8010822:	d5fb      	bpl.n	801081c <_printf_i+0x1c8>
 8010824:	8019      	strh	r1, [r3, #0]
 8010826:	2300      	movs	r3, #0
 8010828:	6123      	str	r3, [r4, #16]
 801082a:	4615      	mov	r5, r2
 801082c:	e7ba      	b.n	80107a4 <_printf_i+0x150>
 801082e:	682b      	ldr	r3, [r5, #0]
 8010830:	1d1a      	adds	r2, r3, #4
 8010832:	602a      	str	r2, [r5, #0]
 8010834:	681d      	ldr	r5, [r3, #0]
 8010836:	6862      	ldr	r2, [r4, #4]
 8010838:	2100      	movs	r1, #0
 801083a:	4628      	mov	r0, r5
 801083c:	f7ef fcd0 	bl	80001e0 <memchr>
 8010840:	b108      	cbz	r0, 8010846 <_printf_i+0x1f2>
 8010842:	1b40      	subs	r0, r0, r5
 8010844:	6060      	str	r0, [r4, #4]
 8010846:	6863      	ldr	r3, [r4, #4]
 8010848:	6123      	str	r3, [r4, #16]
 801084a:	2300      	movs	r3, #0
 801084c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010850:	e7a8      	b.n	80107a4 <_printf_i+0x150>
 8010852:	6923      	ldr	r3, [r4, #16]
 8010854:	462a      	mov	r2, r5
 8010856:	4649      	mov	r1, r9
 8010858:	4640      	mov	r0, r8
 801085a:	47d0      	blx	sl
 801085c:	3001      	adds	r0, #1
 801085e:	d0ab      	beq.n	80107b8 <_printf_i+0x164>
 8010860:	6823      	ldr	r3, [r4, #0]
 8010862:	079b      	lsls	r3, r3, #30
 8010864:	d413      	bmi.n	801088e <_printf_i+0x23a>
 8010866:	68e0      	ldr	r0, [r4, #12]
 8010868:	9b03      	ldr	r3, [sp, #12]
 801086a:	4298      	cmp	r0, r3
 801086c:	bfb8      	it	lt
 801086e:	4618      	movlt	r0, r3
 8010870:	e7a4      	b.n	80107bc <_printf_i+0x168>
 8010872:	2301      	movs	r3, #1
 8010874:	4632      	mov	r2, r6
 8010876:	4649      	mov	r1, r9
 8010878:	4640      	mov	r0, r8
 801087a:	47d0      	blx	sl
 801087c:	3001      	adds	r0, #1
 801087e:	d09b      	beq.n	80107b8 <_printf_i+0x164>
 8010880:	3501      	adds	r5, #1
 8010882:	68e3      	ldr	r3, [r4, #12]
 8010884:	9903      	ldr	r1, [sp, #12]
 8010886:	1a5b      	subs	r3, r3, r1
 8010888:	42ab      	cmp	r3, r5
 801088a:	dcf2      	bgt.n	8010872 <_printf_i+0x21e>
 801088c:	e7eb      	b.n	8010866 <_printf_i+0x212>
 801088e:	2500      	movs	r5, #0
 8010890:	f104 0619 	add.w	r6, r4, #25
 8010894:	e7f5      	b.n	8010882 <_printf_i+0x22e>
 8010896:	bf00      	nop
 8010898:	0801549e 	.word	0x0801549e
 801089c:	080154af 	.word	0x080154af

080108a0 <_scanf_float>:
 80108a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108a4:	b087      	sub	sp, #28
 80108a6:	4617      	mov	r7, r2
 80108a8:	9303      	str	r3, [sp, #12]
 80108aa:	688b      	ldr	r3, [r1, #8]
 80108ac:	1e5a      	subs	r2, r3, #1
 80108ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80108b2:	bf83      	ittte	hi
 80108b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80108b8:	195b      	addhi	r3, r3, r5
 80108ba:	9302      	strhi	r3, [sp, #8]
 80108bc:	2300      	movls	r3, #0
 80108be:	bf86      	itte	hi
 80108c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80108c4:	608b      	strhi	r3, [r1, #8]
 80108c6:	9302      	strls	r3, [sp, #8]
 80108c8:	680b      	ldr	r3, [r1, #0]
 80108ca:	468b      	mov	fp, r1
 80108cc:	2500      	movs	r5, #0
 80108ce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80108d2:	f84b 3b1c 	str.w	r3, [fp], #28
 80108d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80108da:	4680      	mov	r8, r0
 80108dc:	460c      	mov	r4, r1
 80108de:	465e      	mov	r6, fp
 80108e0:	46aa      	mov	sl, r5
 80108e2:	46a9      	mov	r9, r5
 80108e4:	9501      	str	r5, [sp, #4]
 80108e6:	68a2      	ldr	r2, [r4, #8]
 80108e8:	b152      	cbz	r2, 8010900 <_scanf_float+0x60>
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	781b      	ldrb	r3, [r3, #0]
 80108ee:	2b4e      	cmp	r3, #78	; 0x4e
 80108f0:	d864      	bhi.n	80109bc <_scanf_float+0x11c>
 80108f2:	2b40      	cmp	r3, #64	; 0x40
 80108f4:	d83c      	bhi.n	8010970 <_scanf_float+0xd0>
 80108f6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80108fa:	b2c8      	uxtb	r0, r1
 80108fc:	280e      	cmp	r0, #14
 80108fe:	d93a      	bls.n	8010976 <_scanf_float+0xd6>
 8010900:	f1b9 0f00 	cmp.w	r9, #0
 8010904:	d003      	beq.n	801090e <_scanf_float+0x6e>
 8010906:	6823      	ldr	r3, [r4, #0]
 8010908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801090c:	6023      	str	r3, [r4, #0]
 801090e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010912:	f1ba 0f01 	cmp.w	sl, #1
 8010916:	f200 8113 	bhi.w	8010b40 <_scanf_float+0x2a0>
 801091a:	455e      	cmp	r6, fp
 801091c:	f200 8105 	bhi.w	8010b2a <_scanf_float+0x28a>
 8010920:	2501      	movs	r5, #1
 8010922:	4628      	mov	r0, r5
 8010924:	b007      	add	sp, #28
 8010926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801092a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801092e:	2a0d      	cmp	r2, #13
 8010930:	d8e6      	bhi.n	8010900 <_scanf_float+0x60>
 8010932:	a101      	add	r1, pc, #4	; (adr r1, 8010938 <_scanf_float+0x98>)
 8010934:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010938:	08010a77 	.word	0x08010a77
 801093c:	08010901 	.word	0x08010901
 8010940:	08010901 	.word	0x08010901
 8010944:	08010901 	.word	0x08010901
 8010948:	08010ad7 	.word	0x08010ad7
 801094c:	08010aaf 	.word	0x08010aaf
 8010950:	08010901 	.word	0x08010901
 8010954:	08010901 	.word	0x08010901
 8010958:	08010a85 	.word	0x08010a85
 801095c:	08010901 	.word	0x08010901
 8010960:	08010901 	.word	0x08010901
 8010964:	08010901 	.word	0x08010901
 8010968:	08010901 	.word	0x08010901
 801096c:	08010a3d 	.word	0x08010a3d
 8010970:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010974:	e7db      	b.n	801092e <_scanf_float+0x8e>
 8010976:	290e      	cmp	r1, #14
 8010978:	d8c2      	bhi.n	8010900 <_scanf_float+0x60>
 801097a:	a001      	add	r0, pc, #4	; (adr r0, 8010980 <_scanf_float+0xe0>)
 801097c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010980:	08010a2f 	.word	0x08010a2f
 8010984:	08010901 	.word	0x08010901
 8010988:	08010a2f 	.word	0x08010a2f
 801098c:	08010ac3 	.word	0x08010ac3
 8010990:	08010901 	.word	0x08010901
 8010994:	080109dd 	.word	0x080109dd
 8010998:	08010a19 	.word	0x08010a19
 801099c:	08010a19 	.word	0x08010a19
 80109a0:	08010a19 	.word	0x08010a19
 80109a4:	08010a19 	.word	0x08010a19
 80109a8:	08010a19 	.word	0x08010a19
 80109ac:	08010a19 	.word	0x08010a19
 80109b0:	08010a19 	.word	0x08010a19
 80109b4:	08010a19 	.word	0x08010a19
 80109b8:	08010a19 	.word	0x08010a19
 80109bc:	2b6e      	cmp	r3, #110	; 0x6e
 80109be:	d809      	bhi.n	80109d4 <_scanf_float+0x134>
 80109c0:	2b60      	cmp	r3, #96	; 0x60
 80109c2:	d8b2      	bhi.n	801092a <_scanf_float+0x8a>
 80109c4:	2b54      	cmp	r3, #84	; 0x54
 80109c6:	d077      	beq.n	8010ab8 <_scanf_float+0x218>
 80109c8:	2b59      	cmp	r3, #89	; 0x59
 80109ca:	d199      	bne.n	8010900 <_scanf_float+0x60>
 80109cc:	2d07      	cmp	r5, #7
 80109ce:	d197      	bne.n	8010900 <_scanf_float+0x60>
 80109d0:	2508      	movs	r5, #8
 80109d2:	e029      	b.n	8010a28 <_scanf_float+0x188>
 80109d4:	2b74      	cmp	r3, #116	; 0x74
 80109d6:	d06f      	beq.n	8010ab8 <_scanf_float+0x218>
 80109d8:	2b79      	cmp	r3, #121	; 0x79
 80109da:	e7f6      	b.n	80109ca <_scanf_float+0x12a>
 80109dc:	6821      	ldr	r1, [r4, #0]
 80109de:	05c8      	lsls	r0, r1, #23
 80109e0:	d51a      	bpl.n	8010a18 <_scanf_float+0x178>
 80109e2:	9b02      	ldr	r3, [sp, #8]
 80109e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80109e8:	6021      	str	r1, [r4, #0]
 80109ea:	f109 0901 	add.w	r9, r9, #1
 80109ee:	b11b      	cbz	r3, 80109f8 <_scanf_float+0x158>
 80109f0:	3b01      	subs	r3, #1
 80109f2:	3201      	adds	r2, #1
 80109f4:	9302      	str	r3, [sp, #8]
 80109f6:	60a2      	str	r2, [r4, #8]
 80109f8:	68a3      	ldr	r3, [r4, #8]
 80109fa:	3b01      	subs	r3, #1
 80109fc:	60a3      	str	r3, [r4, #8]
 80109fe:	6923      	ldr	r3, [r4, #16]
 8010a00:	3301      	adds	r3, #1
 8010a02:	6123      	str	r3, [r4, #16]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	3b01      	subs	r3, #1
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	607b      	str	r3, [r7, #4]
 8010a0c:	f340 8084 	ble.w	8010b18 <_scanf_float+0x278>
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	3301      	adds	r3, #1
 8010a14:	603b      	str	r3, [r7, #0]
 8010a16:	e766      	b.n	80108e6 <_scanf_float+0x46>
 8010a18:	eb1a 0f05 	cmn.w	sl, r5
 8010a1c:	f47f af70 	bne.w	8010900 <_scanf_float+0x60>
 8010a20:	6822      	ldr	r2, [r4, #0]
 8010a22:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010a26:	6022      	str	r2, [r4, #0]
 8010a28:	f806 3b01 	strb.w	r3, [r6], #1
 8010a2c:	e7e4      	b.n	80109f8 <_scanf_float+0x158>
 8010a2e:	6822      	ldr	r2, [r4, #0]
 8010a30:	0610      	lsls	r0, r2, #24
 8010a32:	f57f af65 	bpl.w	8010900 <_scanf_float+0x60>
 8010a36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010a3a:	e7f4      	b.n	8010a26 <_scanf_float+0x186>
 8010a3c:	f1ba 0f00 	cmp.w	sl, #0
 8010a40:	d10e      	bne.n	8010a60 <_scanf_float+0x1c0>
 8010a42:	f1b9 0f00 	cmp.w	r9, #0
 8010a46:	d10e      	bne.n	8010a66 <_scanf_float+0x1c6>
 8010a48:	6822      	ldr	r2, [r4, #0]
 8010a4a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010a4e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010a52:	d108      	bne.n	8010a66 <_scanf_float+0x1c6>
 8010a54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010a58:	6022      	str	r2, [r4, #0]
 8010a5a:	f04f 0a01 	mov.w	sl, #1
 8010a5e:	e7e3      	b.n	8010a28 <_scanf_float+0x188>
 8010a60:	f1ba 0f02 	cmp.w	sl, #2
 8010a64:	d055      	beq.n	8010b12 <_scanf_float+0x272>
 8010a66:	2d01      	cmp	r5, #1
 8010a68:	d002      	beq.n	8010a70 <_scanf_float+0x1d0>
 8010a6a:	2d04      	cmp	r5, #4
 8010a6c:	f47f af48 	bne.w	8010900 <_scanf_float+0x60>
 8010a70:	3501      	adds	r5, #1
 8010a72:	b2ed      	uxtb	r5, r5
 8010a74:	e7d8      	b.n	8010a28 <_scanf_float+0x188>
 8010a76:	f1ba 0f01 	cmp.w	sl, #1
 8010a7a:	f47f af41 	bne.w	8010900 <_scanf_float+0x60>
 8010a7e:	f04f 0a02 	mov.w	sl, #2
 8010a82:	e7d1      	b.n	8010a28 <_scanf_float+0x188>
 8010a84:	b97d      	cbnz	r5, 8010aa6 <_scanf_float+0x206>
 8010a86:	f1b9 0f00 	cmp.w	r9, #0
 8010a8a:	f47f af3c 	bne.w	8010906 <_scanf_float+0x66>
 8010a8e:	6822      	ldr	r2, [r4, #0]
 8010a90:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010a94:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010a98:	f47f af39 	bne.w	801090e <_scanf_float+0x6e>
 8010a9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010aa0:	6022      	str	r2, [r4, #0]
 8010aa2:	2501      	movs	r5, #1
 8010aa4:	e7c0      	b.n	8010a28 <_scanf_float+0x188>
 8010aa6:	2d03      	cmp	r5, #3
 8010aa8:	d0e2      	beq.n	8010a70 <_scanf_float+0x1d0>
 8010aaa:	2d05      	cmp	r5, #5
 8010aac:	e7de      	b.n	8010a6c <_scanf_float+0x1cc>
 8010aae:	2d02      	cmp	r5, #2
 8010ab0:	f47f af26 	bne.w	8010900 <_scanf_float+0x60>
 8010ab4:	2503      	movs	r5, #3
 8010ab6:	e7b7      	b.n	8010a28 <_scanf_float+0x188>
 8010ab8:	2d06      	cmp	r5, #6
 8010aba:	f47f af21 	bne.w	8010900 <_scanf_float+0x60>
 8010abe:	2507      	movs	r5, #7
 8010ac0:	e7b2      	b.n	8010a28 <_scanf_float+0x188>
 8010ac2:	6822      	ldr	r2, [r4, #0]
 8010ac4:	0591      	lsls	r1, r2, #22
 8010ac6:	f57f af1b 	bpl.w	8010900 <_scanf_float+0x60>
 8010aca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010ace:	6022      	str	r2, [r4, #0]
 8010ad0:	f8cd 9004 	str.w	r9, [sp, #4]
 8010ad4:	e7a8      	b.n	8010a28 <_scanf_float+0x188>
 8010ad6:	6822      	ldr	r2, [r4, #0]
 8010ad8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010adc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010ae0:	d006      	beq.n	8010af0 <_scanf_float+0x250>
 8010ae2:	0550      	lsls	r0, r2, #21
 8010ae4:	f57f af0c 	bpl.w	8010900 <_scanf_float+0x60>
 8010ae8:	f1b9 0f00 	cmp.w	r9, #0
 8010aec:	f43f af0f 	beq.w	801090e <_scanf_float+0x6e>
 8010af0:	0591      	lsls	r1, r2, #22
 8010af2:	bf58      	it	pl
 8010af4:	9901      	ldrpl	r1, [sp, #4]
 8010af6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010afa:	bf58      	it	pl
 8010afc:	eba9 0101 	subpl.w	r1, r9, r1
 8010b00:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010b04:	bf58      	it	pl
 8010b06:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010b0a:	6022      	str	r2, [r4, #0]
 8010b0c:	f04f 0900 	mov.w	r9, #0
 8010b10:	e78a      	b.n	8010a28 <_scanf_float+0x188>
 8010b12:	f04f 0a03 	mov.w	sl, #3
 8010b16:	e787      	b.n	8010a28 <_scanf_float+0x188>
 8010b18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010b1c:	4639      	mov	r1, r7
 8010b1e:	4640      	mov	r0, r8
 8010b20:	4798      	blx	r3
 8010b22:	2800      	cmp	r0, #0
 8010b24:	f43f aedf 	beq.w	80108e6 <_scanf_float+0x46>
 8010b28:	e6ea      	b.n	8010900 <_scanf_float+0x60>
 8010b2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010b32:	463a      	mov	r2, r7
 8010b34:	4640      	mov	r0, r8
 8010b36:	4798      	blx	r3
 8010b38:	6923      	ldr	r3, [r4, #16]
 8010b3a:	3b01      	subs	r3, #1
 8010b3c:	6123      	str	r3, [r4, #16]
 8010b3e:	e6ec      	b.n	801091a <_scanf_float+0x7a>
 8010b40:	1e6b      	subs	r3, r5, #1
 8010b42:	2b06      	cmp	r3, #6
 8010b44:	d825      	bhi.n	8010b92 <_scanf_float+0x2f2>
 8010b46:	2d02      	cmp	r5, #2
 8010b48:	d836      	bhi.n	8010bb8 <_scanf_float+0x318>
 8010b4a:	455e      	cmp	r6, fp
 8010b4c:	f67f aee8 	bls.w	8010920 <_scanf_float+0x80>
 8010b50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b54:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010b58:	463a      	mov	r2, r7
 8010b5a:	4640      	mov	r0, r8
 8010b5c:	4798      	blx	r3
 8010b5e:	6923      	ldr	r3, [r4, #16]
 8010b60:	3b01      	subs	r3, #1
 8010b62:	6123      	str	r3, [r4, #16]
 8010b64:	e7f1      	b.n	8010b4a <_scanf_float+0x2aa>
 8010b66:	9802      	ldr	r0, [sp, #8]
 8010b68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b6c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010b70:	9002      	str	r0, [sp, #8]
 8010b72:	463a      	mov	r2, r7
 8010b74:	4640      	mov	r0, r8
 8010b76:	4798      	blx	r3
 8010b78:	6923      	ldr	r3, [r4, #16]
 8010b7a:	3b01      	subs	r3, #1
 8010b7c:	6123      	str	r3, [r4, #16]
 8010b7e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010b82:	fa5f fa8a 	uxtb.w	sl, sl
 8010b86:	f1ba 0f02 	cmp.w	sl, #2
 8010b8a:	d1ec      	bne.n	8010b66 <_scanf_float+0x2c6>
 8010b8c:	3d03      	subs	r5, #3
 8010b8e:	b2ed      	uxtb	r5, r5
 8010b90:	1b76      	subs	r6, r6, r5
 8010b92:	6823      	ldr	r3, [r4, #0]
 8010b94:	05da      	lsls	r2, r3, #23
 8010b96:	d52f      	bpl.n	8010bf8 <_scanf_float+0x358>
 8010b98:	055b      	lsls	r3, r3, #21
 8010b9a:	d510      	bpl.n	8010bbe <_scanf_float+0x31e>
 8010b9c:	455e      	cmp	r6, fp
 8010b9e:	f67f aebf 	bls.w	8010920 <_scanf_float+0x80>
 8010ba2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ba6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010baa:	463a      	mov	r2, r7
 8010bac:	4640      	mov	r0, r8
 8010bae:	4798      	blx	r3
 8010bb0:	6923      	ldr	r3, [r4, #16]
 8010bb2:	3b01      	subs	r3, #1
 8010bb4:	6123      	str	r3, [r4, #16]
 8010bb6:	e7f1      	b.n	8010b9c <_scanf_float+0x2fc>
 8010bb8:	46aa      	mov	sl, r5
 8010bba:	9602      	str	r6, [sp, #8]
 8010bbc:	e7df      	b.n	8010b7e <_scanf_float+0x2de>
 8010bbe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010bc2:	6923      	ldr	r3, [r4, #16]
 8010bc4:	2965      	cmp	r1, #101	; 0x65
 8010bc6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010bca:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8010bce:	6123      	str	r3, [r4, #16]
 8010bd0:	d00c      	beq.n	8010bec <_scanf_float+0x34c>
 8010bd2:	2945      	cmp	r1, #69	; 0x45
 8010bd4:	d00a      	beq.n	8010bec <_scanf_float+0x34c>
 8010bd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010bda:	463a      	mov	r2, r7
 8010bdc:	4640      	mov	r0, r8
 8010bde:	4798      	blx	r3
 8010be0:	6923      	ldr	r3, [r4, #16]
 8010be2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010be6:	3b01      	subs	r3, #1
 8010be8:	1eb5      	subs	r5, r6, #2
 8010bea:	6123      	str	r3, [r4, #16]
 8010bec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010bf0:	463a      	mov	r2, r7
 8010bf2:	4640      	mov	r0, r8
 8010bf4:	4798      	blx	r3
 8010bf6:	462e      	mov	r6, r5
 8010bf8:	6825      	ldr	r5, [r4, #0]
 8010bfa:	f015 0510 	ands.w	r5, r5, #16
 8010bfe:	d159      	bne.n	8010cb4 <_scanf_float+0x414>
 8010c00:	7035      	strb	r5, [r6, #0]
 8010c02:	6823      	ldr	r3, [r4, #0]
 8010c04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c0c:	d11b      	bne.n	8010c46 <_scanf_float+0x3a6>
 8010c0e:	9b01      	ldr	r3, [sp, #4]
 8010c10:	454b      	cmp	r3, r9
 8010c12:	eba3 0209 	sub.w	r2, r3, r9
 8010c16:	d123      	bne.n	8010c60 <_scanf_float+0x3c0>
 8010c18:	2200      	movs	r2, #0
 8010c1a:	4659      	mov	r1, fp
 8010c1c:	4640      	mov	r0, r8
 8010c1e:	f000 fe99 	bl	8011954 <_strtod_r>
 8010c22:	6822      	ldr	r2, [r4, #0]
 8010c24:	9b03      	ldr	r3, [sp, #12]
 8010c26:	f012 0f02 	tst.w	r2, #2
 8010c2a:	ec57 6b10 	vmov	r6, r7, d0
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	d021      	beq.n	8010c76 <_scanf_float+0x3d6>
 8010c32:	9903      	ldr	r1, [sp, #12]
 8010c34:	1d1a      	adds	r2, r3, #4
 8010c36:	600a      	str	r2, [r1, #0]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	e9c3 6700 	strd	r6, r7, [r3]
 8010c3e:	68e3      	ldr	r3, [r4, #12]
 8010c40:	3301      	adds	r3, #1
 8010c42:	60e3      	str	r3, [r4, #12]
 8010c44:	e66d      	b.n	8010922 <_scanf_float+0x82>
 8010c46:	9b04      	ldr	r3, [sp, #16]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d0e5      	beq.n	8010c18 <_scanf_float+0x378>
 8010c4c:	9905      	ldr	r1, [sp, #20]
 8010c4e:	230a      	movs	r3, #10
 8010c50:	462a      	mov	r2, r5
 8010c52:	3101      	adds	r1, #1
 8010c54:	4640      	mov	r0, r8
 8010c56:	f000 ff05 	bl	8011a64 <_strtol_r>
 8010c5a:	9b04      	ldr	r3, [sp, #16]
 8010c5c:	9e05      	ldr	r6, [sp, #20]
 8010c5e:	1ac2      	subs	r2, r0, r3
 8010c60:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010c64:	429e      	cmp	r6, r3
 8010c66:	bf28      	it	cs
 8010c68:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010c6c:	4912      	ldr	r1, [pc, #72]	; (8010cb8 <_scanf_float+0x418>)
 8010c6e:	4630      	mov	r0, r6
 8010c70:	f000 f82c 	bl	8010ccc <siprintf>
 8010c74:	e7d0      	b.n	8010c18 <_scanf_float+0x378>
 8010c76:	9903      	ldr	r1, [sp, #12]
 8010c78:	f012 0f04 	tst.w	r2, #4
 8010c7c:	f103 0204 	add.w	r2, r3, #4
 8010c80:	600a      	str	r2, [r1, #0]
 8010c82:	d1d9      	bne.n	8010c38 <_scanf_float+0x398>
 8010c84:	f8d3 8000 	ldr.w	r8, [r3]
 8010c88:	ee10 2a10 	vmov	r2, s0
 8010c8c:	ee10 0a10 	vmov	r0, s0
 8010c90:	463b      	mov	r3, r7
 8010c92:	4639      	mov	r1, r7
 8010c94:	f7ef ff4a 	bl	8000b2c <__aeabi_dcmpun>
 8010c98:	b128      	cbz	r0, 8010ca6 <_scanf_float+0x406>
 8010c9a:	4808      	ldr	r0, [pc, #32]	; (8010cbc <_scanf_float+0x41c>)
 8010c9c:	f000 f810 	bl	8010cc0 <nanf>
 8010ca0:	ed88 0a00 	vstr	s0, [r8]
 8010ca4:	e7cb      	b.n	8010c3e <_scanf_float+0x39e>
 8010ca6:	4630      	mov	r0, r6
 8010ca8:	4639      	mov	r1, r7
 8010caa:	f7ef ff9d 	bl	8000be8 <__aeabi_d2f>
 8010cae:	f8c8 0000 	str.w	r0, [r8]
 8010cb2:	e7c4      	b.n	8010c3e <_scanf_float+0x39e>
 8010cb4:	2500      	movs	r5, #0
 8010cb6:	e634      	b.n	8010922 <_scanf_float+0x82>
 8010cb8:	080154c0 	.word	0x080154c0
 8010cbc:	080158c8 	.word	0x080158c8

08010cc0 <nanf>:
 8010cc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010cc8 <nanf+0x8>
 8010cc4:	4770      	bx	lr
 8010cc6:	bf00      	nop
 8010cc8:	7fc00000 	.word	0x7fc00000

08010ccc <siprintf>:
 8010ccc:	b40e      	push	{r1, r2, r3}
 8010cce:	b500      	push	{lr}
 8010cd0:	b09c      	sub	sp, #112	; 0x70
 8010cd2:	ab1d      	add	r3, sp, #116	; 0x74
 8010cd4:	9002      	str	r0, [sp, #8]
 8010cd6:	9006      	str	r0, [sp, #24]
 8010cd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010cdc:	4809      	ldr	r0, [pc, #36]	; (8010d04 <siprintf+0x38>)
 8010cde:	9107      	str	r1, [sp, #28]
 8010ce0:	9104      	str	r1, [sp, #16]
 8010ce2:	4909      	ldr	r1, [pc, #36]	; (8010d08 <siprintf+0x3c>)
 8010ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ce8:	9105      	str	r1, [sp, #20]
 8010cea:	6800      	ldr	r0, [r0, #0]
 8010cec:	9301      	str	r3, [sp, #4]
 8010cee:	a902      	add	r1, sp, #8
 8010cf0:	f002 fed6 	bl	8013aa0 <_svfiprintf_r>
 8010cf4:	9b02      	ldr	r3, [sp, #8]
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	701a      	strb	r2, [r3, #0]
 8010cfa:	b01c      	add	sp, #112	; 0x70
 8010cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d00:	b003      	add	sp, #12
 8010d02:	4770      	bx	lr
 8010d04:	20000014 	.word	0x20000014
 8010d08:	ffff0208 	.word	0xffff0208

08010d0c <sulp>:
 8010d0c:	b570      	push	{r4, r5, r6, lr}
 8010d0e:	4604      	mov	r4, r0
 8010d10:	460d      	mov	r5, r1
 8010d12:	ec45 4b10 	vmov	d0, r4, r5
 8010d16:	4616      	mov	r6, r2
 8010d18:	f002 fc20 	bl	801355c <__ulp>
 8010d1c:	ec51 0b10 	vmov	r0, r1, d0
 8010d20:	b17e      	cbz	r6, 8010d42 <sulp+0x36>
 8010d22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010d26:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	dd09      	ble.n	8010d42 <sulp+0x36>
 8010d2e:	051b      	lsls	r3, r3, #20
 8010d30:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010d34:	2400      	movs	r4, #0
 8010d36:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010d3a:	4622      	mov	r2, r4
 8010d3c:	462b      	mov	r3, r5
 8010d3e:	f7ef fc5b 	bl	80005f8 <__aeabi_dmul>
 8010d42:	bd70      	pop	{r4, r5, r6, pc}
 8010d44:	0000      	movs	r0, r0
	...

08010d48 <_strtod_l>:
 8010d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d4c:	ed2d 8b02 	vpush	{d8}
 8010d50:	b09d      	sub	sp, #116	; 0x74
 8010d52:	461f      	mov	r7, r3
 8010d54:	2300      	movs	r3, #0
 8010d56:	9318      	str	r3, [sp, #96]	; 0x60
 8010d58:	4ba2      	ldr	r3, [pc, #648]	; (8010fe4 <_strtod_l+0x29c>)
 8010d5a:	9213      	str	r2, [sp, #76]	; 0x4c
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	9305      	str	r3, [sp, #20]
 8010d60:	4604      	mov	r4, r0
 8010d62:	4618      	mov	r0, r3
 8010d64:	4688      	mov	r8, r1
 8010d66:	f7ef fa33 	bl	80001d0 <strlen>
 8010d6a:	f04f 0a00 	mov.w	sl, #0
 8010d6e:	4605      	mov	r5, r0
 8010d70:	f04f 0b00 	mov.w	fp, #0
 8010d74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010d78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d7a:	781a      	ldrb	r2, [r3, #0]
 8010d7c:	2a2b      	cmp	r2, #43	; 0x2b
 8010d7e:	d04e      	beq.n	8010e1e <_strtod_l+0xd6>
 8010d80:	d83b      	bhi.n	8010dfa <_strtod_l+0xb2>
 8010d82:	2a0d      	cmp	r2, #13
 8010d84:	d834      	bhi.n	8010df0 <_strtod_l+0xa8>
 8010d86:	2a08      	cmp	r2, #8
 8010d88:	d834      	bhi.n	8010df4 <_strtod_l+0xac>
 8010d8a:	2a00      	cmp	r2, #0
 8010d8c:	d03e      	beq.n	8010e0c <_strtod_l+0xc4>
 8010d8e:	2300      	movs	r3, #0
 8010d90:	930a      	str	r3, [sp, #40]	; 0x28
 8010d92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010d94:	7833      	ldrb	r3, [r6, #0]
 8010d96:	2b30      	cmp	r3, #48	; 0x30
 8010d98:	f040 80b0 	bne.w	8010efc <_strtod_l+0x1b4>
 8010d9c:	7873      	ldrb	r3, [r6, #1]
 8010d9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010da2:	2b58      	cmp	r3, #88	; 0x58
 8010da4:	d168      	bne.n	8010e78 <_strtod_l+0x130>
 8010da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010da8:	9301      	str	r3, [sp, #4]
 8010daa:	ab18      	add	r3, sp, #96	; 0x60
 8010dac:	9702      	str	r7, [sp, #8]
 8010dae:	9300      	str	r3, [sp, #0]
 8010db0:	4a8d      	ldr	r2, [pc, #564]	; (8010fe8 <_strtod_l+0x2a0>)
 8010db2:	ab19      	add	r3, sp, #100	; 0x64
 8010db4:	a917      	add	r1, sp, #92	; 0x5c
 8010db6:	4620      	mov	r0, r4
 8010db8:	f001 fd38 	bl	801282c <__gethex>
 8010dbc:	f010 0707 	ands.w	r7, r0, #7
 8010dc0:	4605      	mov	r5, r0
 8010dc2:	d005      	beq.n	8010dd0 <_strtod_l+0x88>
 8010dc4:	2f06      	cmp	r7, #6
 8010dc6:	d12c      	bne.n	8010e22 <_strtod_l+0xda>
 8010dc8:	3601      	adds	r6, #1
 8010dca:	2300      	movs	r3, #0
 8010dcc:	9617      	str	r6, [sp, #92]	; 0x5c
 8010dce:	930a      	str	r3, [sp, #40]	; 0x28
 8010dd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	f040 8590 	bne.w	80118f8 <_strtod_l+0xbb0>
 8010dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dda:	b1eb      	cbz	r3, 8010e18 <_strtod_l+0xd0>
 8010ddc:	4652      	mov	r2, sl
 8010dde:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010de2:	ec43 2b10 	vmov	d0, r2, r3
 8010de6:	b01d      	add	sp, #116	; 0x74
 8010de8:	ecbd 8b02 	vpop	{d8}
 8010dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df0:	2a20      	cmp	r2, #32
 8010df2:	d1cc      	bne.n	8010d8e <_strtod_l+0x46>
 8010df4:	3301      	adds	r3, #1
 8010df6:	9317      	str	r3, [sp, #92]	; 0x5c
 8010df8:	e7be      	b.n	8010d78 <_strtod_l+0x30>
 8010dfa:	2a2d      	cmp	r2, #45	; 0x2d
 8010dfc:	d1c7      	bne.n	8010d8e <_strtod_l+0x46>
 8010dfe:	2201      	movs	r2, #1
 8010e00:	920a      	str	r2, [sp, #40]	; 0x28
 8010e02:	1c5a      	adds	r2, r3, #1
 8010e04:	9217      	str	r2, [sp, #92]	; 0x5c
 8010e06:	785b      	ldrb	r3, [r3, #1]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d1c2      	bne.n	8010d92 <_strtod_l+0x4a>
 8010e0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010e0e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	f040 856e 	bne.w	80118f4 <_strtod_l+0xbac>
 8010e18:	4652      	mov	r2, sl
 8010e1a:	465b      	mov	r3, fp
 8010e1c:	e7e1      	b.n	8010de2 <_strtod_l+0x9a>
 8010e1e:	2200      	movs	r2, #0
 8010e20:	e7ee      	b.n	8010e00 <_strtod_l+0xb8>
 8010e22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010e24:	b13a      	cbz	r2, 8010e36 <_strtod_l+0xee>
 8010e26:	2135      	movs	r1, #53	; 0x35
 8010e28:	a81a      	add	r0, sp, #104	; 0x68
 8010e2a:	f002 fca2 	bl	8013772 <__copybits>
 8010e2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010e30:	4620      	mov	r0, r4
 8010e32:	f002 f861 	bl	8012ef8 <_Bfree>
 8010e36:	3f01      	subs	r7, #1
 8010e38:	2f04      	cmp	r7, #4
 8010e3a:	d806      	bhi.n	8010e4a <_strtod_l+0x102>
 8010e3c:	e8df f007 	tbb	[pc, r7]
 8010e40:	1714030a 	.word	0x1714030a
 8010e44:	0a          	.byte	0x0a
 8010e45:	00          	.byte	0x00
 8010e46:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010e4a:	0728      	lsls	r0, r5, #28
 8010e4c:	d5c0      	bpl.n	8010dd0 <_strtod_l+0x88>
 8010e4e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010e52:	e7bd      	b.n	8010dd0 <_strtod_l+0x88>
 8010e54:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010e58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010e5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010e5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010e62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010e66:	e7f0      	b.n	8010e4a <_strtod_l+0x102>
 8010e68:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010fec <_strtod_l+0x2a4>
 8010e6c:	e7ed      	b.n	8010e4a <_strtod_l+0x102>
 8010e6e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010e72:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010e76:	e7e8      	b.n	8010e4a <_strtod_l+0x102>
 8010e78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e7a:	1c5a      	adds	r2, r3, #1
 8010e7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8010e7e:	785b      	ldrb	r3, [r3, #1]
 8010e80:	2b30      	cmp	r3, #48	; 0x30
 8010e82:	d0f9      	beq.n	8010e78 <_strtod_l+0x130>
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d0a3      	beq.n	8010dd0 <_strtod_l+0x88>
 8010e88:	2301      	movs	r3, #1
 8010e8a:	f04f 0900 	mov.w	r9, #0
 8010e8e:	9304      	str	r3, [sp, #16]
 8010e90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e92:	9308      	str	r3, [sp, #32]
 8010e94:	f8cd 901c 	str.w	r9, [sp, #28]
 8010e98:	464f      	mov	r7, r9
 8010e9a:	220a      	movs	r2, #10
 8010e9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010e9e:	7806      	ldrb	r6, [r0, #0]
 8010ea0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010ea4:	b2d9      	uxtb	r1, r3
 8010ea6:	2909      	cmp	r1, #9
 8010ea8:	d92a      	bls.n	8010f00 <_strtod_l+0x1b8>
 8010eaa:	9905      	ldr	r1, [sp, #20]
 8010eac:	462a      	mov	r2, r5
 8010eae:	f002 ff0f 	bl	8013cd0 <strncmp>
 8010eb2:	b398      	cbz	r0, 8010f1c <_strtod_l+0x1d4>
 8010eb4:	2000      	movs	r0, #0
 8010eb6:	4632      	mov	r2, r6
 8010eb8:	463d      	mov	r5, r7
 8010eba:	9005      	str	r0, [sp, #20]
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	2a65      	cmp	r2, #101	; 0x65
 8010ec0:	d001      	beq.n	8010ec6 <_strtod_l+0x17e>
 8010ec2:	2a45      	cmp	r2, #69	; 0x45
 8010ec4:	d118      	bne.n	8010ef8 <_strtod_l+0x1b0>
 8010ec6:	b91d      	cbnz	r5, 8010ed0 <_strtod_l+0x188>
 8010ec8:	9a04      	ldr	r2, [sp, #16]
 8010eca:	4302      	orrs	r2, r0
 8010ecc:	d09e      	beq.n	8010e0c <_strtod_l+0xc4>
 8010ece:	2500      	movs	r5, #0
 8010ed0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8010ed4:	f108 0201 	add.w	r2, r8, #1
 8010ed8:	9217      	str	r2, [sp, #92]	; 0x5c
 8010eda:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010ede:	2a2b      	cmp	r2, #43	; 0x2b
 8010ee0:	d075      	beq.n	8010fce <_strtod_l+0x286>
 8010ee2:	2a2d      	cmp	r2, #45	; 0x2d
 8010ee4:	d07b      	beq.n	8010fde <_strtod_l+0x296>
 8010ee6:	f04f 0c00 	mov.w	ip, #0
 8010eea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010eee:	2909      	cmp	r1, #9
 8010ef0:	f240 8082 	bls.w	8010ff8 <_strtod_l+0x2b0>
 8010ef4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010ef8:	2600      	movs	r6, #0
 8010efa:	e09d      	b.n	8011038 <_strtod_l+0x2f0>
 8010efc:	2300      	movs	r3, #0
 8010efe:	e7c4      	b.n	8010e8a <_strtod_l+0x142>
 8010f00:	2f08      	cmp	r7, #8
 8010f02:	bfd8      	it	le
 8010f04:	9907      	ldrle	r1, [sp, #28]
 8010f06:	f100 0001 	add.w	r0, r0, #1
 8010f0a:	bfda      	itte	le
 8010f0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010f10:	9307      	strle	r3, [sp, #28]
 8010f12:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010f16:	3701      	adds	r7, #1
 8010f18:	9017      	str	r0, [sp, #92]	; 0x5c
 8010f1a:	e7bf      	b.n	8010e9c <_strtod_l+0x154>
 8010f1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f1e:	195a      	adds	r2, r3, r5
 8010f20:	9217      	str	r2, [sp, #92]	; 0x5c
 8010f22:	5d5a      	ldrb	r2, [r3, r5]
 8010f24:	2f00      	cmp	r7, #0
 8010f26:	d037      	beq.n	8010f98 <_strtod_l+0x250>
 8010f28:	9005      	str	r0, [sp, #20]
 8010f2a:	463d      	mov	r5, r7
 8010f2c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010f30:	2b09      	cmp	r3, #9
 8010f32:	d912      	bls.n	8010f5a <_strtod_l+0x212>
 8010f34:	2301      	movs	r3, #1
 8010f36:	e7c2      	b.n	8010ebe <_strtod_l+0x176>
 8010f38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f3a:	1c5a      	adds	r2, r3, #1
 8010f3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8010f3e:	785a      	ldrb	r2, [r3, #1]
 8010f40:	3001      	adds	r0, #1
 8010f42:	2a30      	cmp	r2, #48	; 0x30
 8010f44:	d0f8      	beq.n	8010f38 <_strtod_l+0x1f0>
 8010f46:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010f4a:	2b08      	cmp	r3, #8
 8010f4c:	f200 84d9 	bhi.w	8011902 <_strtod_l+0xbba>
 8010f50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f52:	9005      	str	r0, [sp, #20]
 8010f54:	2000      	movs	r0, #0
 8010f56:	9308      	str	r3, [sp, #32]
 8010f58:	4605      	mov	r5, r0
 8010f5a:	3a30      	subs	r2, #48	; 0x30
 8010f5c:	f100 0301 	add.w	r3, r0, #1
 8010f60:	d014      	beq.n	8010f8c <_strtod_l+0x244>
 8010f62:	9905      	ldr	r1, [sp, #20]
 8010f64:	4419      	add	r1, r3
 8010f66:	9105      	str	r1, [sp, #20]
 8010f68:	462b      	mov	r3, r5
 8010f6a:	eb00 0e05 	add.w	lr, r0, r5
 8010f6e:	210a      	movs	r1, #10
 8010f70:	4573      	cmp	r3, lr
 8010f72:	d113      	bne.n	8010f9c <_strtod_l+0x254>
 8010f74:	182b      	adds	r3, r5, r0
 8010f76:	2b08      	cmp	r3, #8
 8010f78:	f105 0501 	add.w	r5, r5, #1
 8010f7c:	4405      	add	r5, r0
 8010f7e:	dc1c      	bgt.n	8010fba <_strtod_l+0x272>
 8010f80:	9907      	ldr	r1, [sp, #28]
 8010f82:	230a      	movs	r3, #10
 8010f84:	fb03 2301 	mla	r3, r3, r1, r2
 8010f88:	9307      	str	r3, [sp, #28]
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010f8e:	1c51      	adds	r1, r2, #1
 8010f90:	9117      	str	r1, [sp, #92]	; 0x5c
 8010f92:	7852      	ldrb	r2, [r2, #1]
 8010f94:	4618      	mov	r0, r3
 8010f96:	e7c9      	b.n	8010f2c <_strtod_l+0x1e4>
 8010f98:	4638      	mov	r0, r7
 8010f9a:	e7d2      	b.n	8010f42 <_strtod_l+0x1fa>
 8010f9c:	2b08      	cmp	r3, #8
 8010f9e:	dc04      	bgt.n	8010faa <_strtod_l+0x262>
 8010fa0:	9e07      	ldr	r6, [sp, #28]
 8010fa2:	434e      	muls	r6, r1
 8010fa4:	9607      	str	r6, [sp, #28]
 8010fa6:	3301      	adds	r3, #1
 8010fa8:	e7e2      	b.n	8010f70 <_strtod_l+0x228>
 8010faa:	f103 0c01 	add.w	ip, r3, #1
 8010fae:	f1bc 0f10 	cmp.w	ip, #16
 8010fb2:	bfd8      	it	le
 8010fb4:	fb01 f909 	mulle.w	r9, r1, r9
 8010fb8:	e7f5      	b.n	8010fa6 <_strtod_l+0x25e>
 8010fba:	2d10      	cmp	r5, #16
 8010fbc:	bfdc      	itt	le
 8010fbe:	230a      	movle	r3, #10
 8010fc0:	fb03 2909 	mlale	r9, r3, r9, r2
 8010fc4:	e7e1      	b.n	8010f8a <_strtod_l+0x242>
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	9305      	str	r3, [sp, #20]
 8010fca:	2301      	movs	r3, #1
 8010fcc:	e77c      	b.n	8010ec8 <_strtod_l+0x180>
 8010fce:	f04f 0c00 	mov.w	ip, #0
 8010fd2:	f108 0202 	add.w	r2, r8, #2
 8010fd6:	9217      	str	r2, [sp, #92]	; 0x5c
 8010fd8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010fdc:	e785      	b.n	8010eea <_strtod_l+0x1a2>
 8010fde:	f04f 0c01 	mov.w	ip, #1
 8010fe2:	e7f6      	b.n	8010fd2 <_strtod_l+0x28a>
 8010fe4:	08015710 	.word	0x08015710
 8010fe8:	080154c8 	.word	0x080154c8
 8010fec:	7ff00000 	.word	0x7ff00000
 8010ff0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010ff2:	1c51      	adds	r1, r2, #1
 8010ff4:	9117      	str	r1, [sp, #92]	; 0x5c
 8010ff6:	7852      	ldrb	r2, [r2, #1]
 8010ff8:	2a30      	cmp	r2, #48	; 0x30
 8010ffa:	d0f9      	beq.n	8010ff0 <_strtod_l+0x2a8>
 8010ffc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011000:	2908      	cmp	r1, #8
 8011002:	f63f af79 	bhi.w	8010ef8 <_strtod_l+0x1b0>
 8011006:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801100a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801100c:	9206      	str	r2, [sp, #24]
 801100e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011010:	1c51      	adds	r1, r2, #1
 8011012:	9117      	str	r1, [sp, #92]	; 0x5c
 8011014:	7852      	ldrb	r2, [r2, #1]
 8011016:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801101a:	2e09      	cmp	r6, #9
 801101c:	d937      	bls.n	801108e <_strtod_l+0x346>
 801101e:	9e06      	ldr	r6, [sp, #24]
 8011020:	1b89      	subs	r1, r1, r6
 8011022:	2908      	cmp	r1, #8
 8011024:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011028:	dc02      	bgt.n	8011030 <_strtod_l+0x2e8>
 801102a:	4576      	cmp	r6, lr
 801102c:	bfa8      	it	ge
 801102e:	4676      	movge	r6, lr
 8011030:	f1bc 0f00 	cmp.w	ip, #0
 8011034:	d000      	beq.n	8011038 <_strtod_l+0x2f0>
 8011036:	4276      	negs	r6, r6
 8011038:	2d00      	cmp	r5, #0
 801103a:	d14d      	bne.n	80110d8 <_strtod_l+0x390>
 801103c:	9904      	ldr	r1, [sp, #16]
 801103e:	4301      	orrs	r1, r0
 8011040:	f47f aec6 	bne.w	8010dd0 <_strtod_l+0x88>
 8011044:	2b00      	cmp	r3, #0
 8011046:	f47f aee1 	bne.w	8010e0c <_strtod_l+0xc4>
 801104a:	2a69      	cmp	r2, #105	; 0x69
 801104c:	d027      	beq.n	801109e <_strtod_l+0x356>
 801104e:	dc24      	bgt.n	801109a <_strtod_l+0x352>
 8011050:	2a49      	cmp	r2, #73	; 0x49
 8011052:	d024      	beq.n	801109e <_strtod_l+0x356>
 8011054:	2a4e      	cmp	r2, #78	; 0x4e
 8011056:	f47f aed9 	bne.w	8010e0c <_strtod_l+0xc4>
 801105a:	499f      	ldr	r1, [pc, #636]	; (80112d8 <_strtod_l+0x590>)
 801105c:	a817      	add	r0, sp, #92	; 0x5c
 801105e:	f001 fe3d 	bl	8012cdc <__match>
 8011062:	2800      	cmp	r0, #0
 8011064:	f43f aed2 	beq.w	8010e0c <_strtod_l+0xc4>
 8011068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	2b28      	cmp	r3, #40	; 0x28
 801106e:	d12d      	bne.n	80110cc <_strtod_l+0x384>
 8011070:	499a      	ldr	r1, [pc, #616]	; (80112dc <_strtod_l+0x594>)
 8011072:	aa1a      	add	r2, sp, #104	; 0x68
 8011074:	a817      	add	r0, sp, #92	; 0x5c
 8011076:	f001 fe45 	bl	8012d04 <__hexnan>
 801107a:	2805      	cmp	r0, #5
 801107c:	d126      	bne.n	80110cc <_strtod_l+0x384>
 801107e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011080:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8011084:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011088:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801108c:	e6a0      	b.n	8010dd0 <_strtod_l+0x88>
 801108e:	210a      	movs	r1, #10
 8011090:	fb01 2e0e 	mla	lr, r1, lr, r2
 8011094:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011098:	e7b9      	b.n	801100e <_strtod_l+0x2c6>
 801109a:	2a6e      	cmp	r2, #110	; 0x6e
 801109c:	e7db      	b.n	8011056 <_strtod_l+0x30e>
 801109e:	4990      	ldr	r1, [pc, #576]	; (80112e0 <_strtod_l+0x598>)
 80110a0:	a817      	add	r0, sp, #92	; 0x5c
 80110a2:	f001 fe1b 	bl	8012cdc <__match>
 80110a6:	2800      	cmp	r0, #0
 80110a8:	f43f aeb0 	beq.w	8010e0c <_strtod_l+0xc4>
 80110ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80110ae:	498d      	ldr	r1, [pc, #564]	; (80112e4 <_strtod_l+0x59c>)
 80110b0:	3b01      	subs	r3, #1
 80110b2:	a817      	add	r0, sp, #92	; 0x5c
 80110b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80110b6:	f001 fe11 	bl	8012cdc <__match>
 80110ba:	b910      	cbnz	r0, 80110c2 <_strtod_l+0x37a>
 80110bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80110be:	3301      	adds	r3, #1
 80110c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80110c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80112f4 <_strtod_l+0x5ac>
 80110c6:	f04f 0a00 	mov.w	sl, #0
 80110ca:	e681      	b.n	8010dd0 <_strtod_l+0x88>
 80110cc:	4886      	ldr	r0, [pc, #536]	; (80112e8 <_strtod_l+0x5a0>)
 80110ce:	f002 fde7 	bl	8013ca0 <nan>
 80110d2:	ec5b ab10 	vmov	sl, fp, d0
 80110d6:	e67b      	b.n	8010dd0 <_strtod_l+0x88>
 80110d8:	9b05      	ldr	r3, [sp, #20]
 80110da:	9807      	ldr	r0, [sp, #28]
 80110dc:	1af3      	subs	r3, r6, r3
 80110de:	2f00      	cmp	r7, #0
 80110e0:	bf08      	it	eq
 80110e2:	462f      	moveq	r7, r5
 80110e4:	2d10      	cmp	r5, #16
 80110e6:	9306      	str	r3, [sp, #24]
 80110e8:	46a8      	mov	r8, r5
 80110ea:	bfa8      	it	ge
 80110ec:	f04f 0810 	movge.w	r8, #16
 80110f0:	f7ef fa08 	bl	8000504 <__aeabi_ui2d>
 80110f4:	2d09      	cmp	r5, #9
 80110f6:	4682      	mov	sl, r0
 80110f8:	468b      	mov	fp, r1
 80110fa:	dd13      	ble.n	8011124 <_strtod_l+0x3dc>
 80110fc:	4b7b      	ldr	r3, [pc, #492]	; (80112ec <_strtod_l+0x5a4>)
 80110fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011102:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011106:	f7ef fa77 	bl	80005f8 <__aeabi_dmul>
 801110a:	4682      	mov	sl, r0
 801110c:	4648      	mov	r0, r9
 801110e:	468b      	mov	fp, r1
 8011110:	f7ef f9f8 	bl	8000504 <__aeabi_ui2d>
 8011114:	4602      	mov	r2, r0
 8011116:	460b      	mov	r3, r1
 8011118:	4650      	mov	r0, sl
 801111a:	4659      	mov	r1, fp
 801111c:	f7ef f8b6 	bl	800028c <__adddf3>
 8011120:	4682      	mov	sl, r0
 8011122:	468b      	mov	fp, r1
 8011124:	2d0f      	cmp	r5, #15
 8011126:	dc38      	bgt.n	801119a <_strtod_l+0x452>
 8011128:	9b06      	ldr	r3, [sp, #24]
 801112a:	2b00      	cmp	r3, #0
 801112c:	f43f ae50 	beq.w	8010dd0 <_strtod_l+0x88>
 8011130:	dd24      	ble.n	801117c <_strtod_l+0x434>
 8011132:	2b16      	cmp	r3, #22
 8011134:	dc0b      	bgt.n	801114e <_strtod_l+0x406>
 8011136:	496d      	ldr	r1, [pc, #436]	; (80112ec <_strtod_l+0x5a4>)
 8011138:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801113c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011140:	4652      	mov	r2, sl
 8011142:	465b      	mov	r3, fp
 8011144:	f7ef fa58 	bl	80005f8 <__aeabi_dmul>
 8011148:	4682      	mov	sl, r0
 801114a:	468b      	mov	fp, r1
 801114c:	e640      	b.n	8010dd0 <_strtod_l+0x88>
 801114e:	9a06      	ldr	r2, [sp, #24]
 8011150:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011154:	4293      	cmp	r3, r2
 8011156:	db20      	blt.n	801119a <_strtod_l+0x452>
 8011158:	4c64      	ldr	r4, [pc, #400]	; (80112ec <_strtod_l+0x5a4>)
 801115a:	f1c5 050f 	rsb	r5, r5, #15
 801115e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011162:	4652      	mov	r2, sl
 8011164:	465b      	mov	r3, fp
 8011166:	e9d1 0100 	ldrd	r0, r1, [r1]
 801116a:	f7ef fa45 	bl	80005f8 <__aeabi_dmul>
 801116e:	9b06      	ldr	r3, [sp, #24]
 8011170:	1b5d      	subs	r5, r3, r5
 8011172:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011176:	e9d4 2300 	ldrd	r2, r3, [r4]
 801117a:	e7e3      	b.n	8011144 <_strtod_l+0x3fc>
 801117c:	9b06      	ldr	r3, [sp, #24]
 801117e:	3316      	adds	r3, #22
 8011180:	db0b      	blt.n	801119a <_strtod_l+0x452>
 8011182:	9b05      	ldr	r3, [sp, #20]
 8011184:	1b9e      	subs	r6, r3, r6
 8011186:	4b59      	ldr	r3, [pc, #356]	; (80112ec <_strtod_l+0x5a4>)
 8011188:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801118c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011190:	4650      	mov	r0, sl
 8011192:	4659      	mov	r1, fp
 8011194:	f7ef fb5a 	bl	800084c <__aeabi_ddiv>
 8011198:	e7d6      	b.n	8011148 <_strtod_l+0x400>
 801119a:	9b06      	ldr	r3, [sp, #24]
 801119c:	eba5 0808 	sub.w	r8, r5, r8
 80111a0:	4498      	add	r8, r3
 80111a2:	f1b8 0f00 	cmp.w	r8, #0
 80111a6:	dd74      	ble.n	8011292 <_strtod_l+0x54a>
 80111a8:	f018 030f 	ands.w	r3, r8, #15
 80111ac:	d00a      	beq.n	80111c4 <_strtod_l+0x47c>
 80111ae:	494f      	ldr	r1, [pc, #316]	; (80112ec <_strtod_l+0x5a4>)
 80111b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80111b4:	4652      	mov	r2, sl
 80111b6:	465b      	mov	r3, fp
 80111b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111bc:	f7ef fa1c 	bl	80005f8 <__aeabi_dmul>
 80111c0:	4682      	mov	sl, r0
 80111c2:	468b      	mov	fp, r1
 80111c4:	f038 080f 	bics.w	r8, r8, #15
 80111c8:	d04f      	beq.n	801126a <_strtod_l+0x522>
 80111ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80111ce:	dd22      	ble.n	8011216 <_strtod_l+0x4ce>
 80111d0:	2500      	movs	r5, #0
 80111d2:	462e      	mov	r6, r5
 80111d4:	9507      	str	r5, [sp, #28]
 80111d6:	9505      	str	r5, [sp, #20]
 80111d8:	2322      	movs	r3, #34	; 0x22
 80111da:	f8df b118 	ldr.w	fp, [pc, #280]	; 80112f4 <_strtod_l+0x5ac>
 80111de:	6023      	str	r3, [r4, #0]
 80111e0:	f04f 0a00 	mov.w	sl, #0
 80111e4:	9b07      	ldr	r3, [sp, #28]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	f43f adf2 	beq.w	8010dd0 <_strtod_l+0x88>
 80111ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80111ee:	4620      	mov	r0, r4
 80111f0:	f001 fe82 	bl	8012ef8 <_Bfree>
 80111f4:	9905      	ldr	r1, [sp, #20]
 80111f6:	4620      	mov	r0, r4
 80111f8:	f001 fe7e 	bl	8012ef8 <_Bfree>
 80111fc:	4631      	mov	r1, r6
 80111fe:	4620      	mov	r0, r4
 8011200:	f001 fe7a 	bl	8012ef8 <_Bfree>
 8011204:	9907      	ldr	r1, [sp, #28]
 8011206:	4620      	mov	r0, r4
 8011208:	f001 fe76 	bl	8012ef8 <_Bfree>
 801120c:	4629      	mov	r1, r5
 801120e:	4620      	mov	r0, r4
 8011210:	f001 fe72 	bl	8012ef8 <_Bfree>
 8011214:	e5dc      	b.n	8010dd0 <_strtod_l+0x88>
 8011216:	4b36      	ldr	r3, [pc, #216]	; (80112f0 <_strtod_l+0x5a8>)
 8011218:	9304      	str	r3, [sp, #16]
 801121a:	2300      	movs	r3, #0
 801121c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011220:	4650      	mov	r0, sl
 8011222:	4659      	mov	r1, fp
 8011224:	4699      	mov	r9, r3
 8011226:	f1b8 0f01 	cmp.w	r8, #1
 801122a:	dc21      	bgt.n	8011270 <_strtod_l+0x528>
 801122c:	b10b      	cbz	r3, 8011232 <_strtod_l+0x4ea>
 801122e:	4682      	mov	sl, r0
 8011230:	468b      	mov	fp, r1
 8011232:	4b2f      	ldr	r3, [pc, #188]	; (80112f0 <_strtod_l+0x5a8>)
 8011234:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011238:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801123c:	4652      	mov	r2, sl
 801123e:	465b      	mov	r3, fp
 8011240:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011244:	f7ef f9d8 	bl	80005f8 <__aeabi_dmul>
 8011248:	4b2a      	ldr	r3, [pc, #168]	; (80112f4 <_strtod_l+0x5ac>)
 801124a:	460a      	mov	r2, r1
 801124c:	400b      	ands	r3, r1
 801124e:	492a      	ldr	r1, [pc, #168]	; (80112f8 <_strtod_l+0x5b0>)
 8011250:	428b      	cmp	r3, r1
 8011252:	4682      	mov	sl, r0
 8011254:	d8bc      	bhi.n	80111d0 <_strtod_l+0x488>
 8011256:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801125a:	428b      	cmp	r3, r1
 801125c:	bf86      	itte	hi
 801125e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80112fc <_strtod_l+0x5b4>
 8011262:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8011266:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801126a:	2300      	movs	r3, #0
 801126c:	9304      	str	r3, [sp, #16]
 801126e:	e084      	b.n	801137a <_strtod_l+0x632>
 8011270:	f018 0f01 	tst.w	r8, #1
 8011274:	d005      	beq.n	8011282 <_strtod_l+0x53a>
 8011276:	9b04      	ldr	r3, [sp, #16]
 8011278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127c:	f7ef f9bc 	bl	80005f8 <__aeabi_dmul>
 8011280:	2301      	movs	r3, #1
 8011282:	9a04      	ldr	r2, [sp, #16]
 8011284:	3208      	adds	r2, #8
 8011286:	f109 0901 	add.w	r9, r9, #1
 801128a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801128e:	9204      	str	r2, [sp, #16]
 8011290:	e7c9      	b.n	8011226 <_strtod_l+0x4de>
 8011292:	d0ea      	beq.n	801126a <_strtod_l+0x522>
 8011294:	f1c8 0800 	rsb	r8, r8, #0
 8011298:	f018 020f 	ands.w	r2, r8, #15
 801129c:	d00a      	beq.n	80112b4 <_strtod_l+0x56c>
 801129e:	4b13      	ldr	r3, [pc, #76]	; (80112ec <_strtod_l+0x5a4>)
 80112a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80112a4:	4650      	mov	r0, sl
 80112a6:	4659      	mov	r1, fp
 80112a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ac:	f7ef face 	bl	800084c <__aeabi_ddiv>
 80112b0:	4682      	mov	sl, r0
 80112b2:	468b      	mov	fp, r1
 80112b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80112b8:	d0d7      	beq.n	801126a <_strtod_l+0x522>
 80112ba:	f1b8 0f1f 	cmp.w	r8, #31
 80112be:	dd1f      	ble.n	8011300 <_strtod_l+0x5b8>
 80112c0:	2500      	movs	r5, #0
 80112c2:	462e      	mov	r6, r5
 80112c4:	9507      	str	r5, [sp, #28]
 80112c6:	9505      	str	r5, [sp, #20]
 80112c8:	2322      	movs	r3, #34	; 0x22
 80112ca:	f04f 0a00 	mov.w	sl, #0
 80112ce:	f04f 0b00 	mov.w	fp, #0
 80112d2:	6023      	str	r3, [r4, #0]
 80112d4:	e786      	b.n	80111e4 <_strtod_l+0x49c>
 80112d6:	bf00      	nop
 80112d8:	08015499 	.word	0x08015499
 80112dc:	080154dc 	.word	0x080154dc
 80112e0:	08015491 	.word	0x08015491
 80112e4:	0801561c 	.word	0x0801561c
 80112e8:	080158c8 	.word	0x080158c8
 80112ec:	080157a8 	.word	0x080157a8
 80112f0:	08015780 	.word	0x08015780
 80112f4:	7ff00000 	.word	0x7ff00000
 80112f8:	7ca00000 	.word	0x7ca00000
 80112fc:	7fefffff 	.word	0x7fefffff
 8011300:	f018 0310 	ands.w	r3, r8, #16
 8011304:	bf18      	it	ne
 8011306:	236a      	movne	r3, #106	; 0x6a
 8011308:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80116b8 <_strtod_l+0x970>
 801130c:	9304      	str	r3, [sp, #16]
 801130e:	4650      	mov	r0, sl
 8011310:	4659      	mov	r1, fp
 8011312:	2300      	movs	r3, #0
 8011314:	f018 0f01 	tst.w	r8, #1
 8011318:	d004      	beq.n	8011324 <_strtod_l+0x5dc>
 801131a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801131e:	f7ef f96b 	bl	80005f8 <__aeabi_dmul>
 8011322:	2301      	movs	r3, #1
 8011324:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011328:	f109 0908 	add.w	r9, r9, #8
 801132c:	d1f2      	bne.n	8011314 <_strtod_l+0x5cc>
 801132e:	b10b      	cbz	r3, 8011334 <_strtod_l+0x5ec>
 8011330:	4682      	mov	sl, r0
 8011332:	468b      	mov	fp, r1
 8011334:	9b04      	ldr	r3, [sp, #16]
 8011336:	b1c3      	cbz	r3, 801136a <_strtod_l+0x622>
 8011338:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801133c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011340:	2b00      	cmp	r3, #0
 8011342:	4659      	mov	r1, fp
 8011344:	dd11      	ble.n	801136a <_strtod_l+0x622>
 8011346:	2b1f      	cmp	r3, #31
 8011348:	f340 8124 	ble.w	8011594 <_strtod_l+0x84c>
 801134c:	2b34      	cmp	r3, #52	; 0x34
 801134e:	bfde      	ittt	le
 8011350:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011354:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8011358:	fa03 f202 	lslle.w	r2, r3, r2
 801135c:	f04f 0a00 	mov.w	sl, #0
 8011360:	bfcc      	ite	gt
 8011362:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011366:	ea02 0b01 	andle.w	fp, r2, r1
 801136a:	2200      	movs	r2, #0
 801136c:	2300      	movs	r3, #0
 801136e:	4650      	mov	r0, sl
 8011370:	4659      	mov	r1, fp
 8011372:	f7ef fba9 	bl	8000ac8 <__aeabi_dcmpeq>
 8011376:	2800      	cmp	r0, #0
 8011378:	d1a2      	bne.n	80112c0 <_strtod_l+0x578>
 801137a:	9b07      	ldr	r3, [sp, #28]
 801137c:	9300      	str	r3, [sp, #0]
 801137e:	9908      	ldr	r1, [sp, #32]
 8011380:	462b      	mov	r3, r5
 8011382:	463a      	mov	r2, r7
 8011384:	4620      	mov	r0, r4
 8011386:	f001 fe1f 	bl	8012fc8 <__s2b>
 801138a:	9007      	str	r0, [sp, #28]
 801138c:	2800      	cmp	r0, #0
 801138e:	f43f af1f 	beq.w	80111d0 <_strtod_l+0x488>
 8011392:	9b05      	ldr	r3, [sp, #20]
 8011394:	1b9e      	subs	r6, r3, r6
 8011396:	9b06      	ldr	r3, [sp, #24]
 8011398:	2b00      	cmp	r3, #0
 801139a:	bfb4      	ite	lt
 801139c:	4633      	movlt	r3, r6
 801139e:	2300      	movge	r3, #0
 80113a0:	930c      	str	r3, [sp, #48]	; 0x30
 80113a2:	9b06      	ldr	r3, [sp, #24]
 80113a4:	2500      	movs	r5, #0
 80113a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80113aa:	9312      	str	r3, [sp, #72]	; 0x48
 80113ac:	462e      	mov	r6, r5
 80113ae:	9b07      	ldr	r3, [sp, #28]
 80113b0:	4620      	mov	r0, r4
 80113b2:	6859      	ldr	r1, [r3, #4]
 80113b4:	f001 fd60 	bl	8012e78 <_Balloc>
 80113b8:	9005      	str	r0, [sp, #20]
 80113ba:	2800      	cmp	r0, #0
 80113bc:	f43f af0c 	beq.w	80111d8 <_strtod_l+0x490>
 80113c0:	9b07      	ldr	r3, [sp, #28]
 80113c2:	691a      	ldr	r2, [r3, #16]
 80113c4:	3202      	adds	r2, #2
 80113c6:	f103 010c 	add.w	r1, r3, #12
 80113ca:	0092      	lsls	r2, r2, #2
 80113cc:	300c      	adds	r0, #12
 80113ce:	f7fe fde7 	bl	800ffa0 <memcpy>
 80113d2:	ec4b ab10 	vmov	d0, sl, fp
 80113d6:	aa1a      	add	r2, sp, #104	; 0x68
 80113d8:	a919      	add	r1, sp, #100	; 0x64
 80113da:	4620      	mov	r0, r4
 80113dc:	f002 f93a 	bl	8013654 <__d2b>
 80113e0:	ec4b ab18 	vmov	d8, sl, fp
 80113e4:	9018      	str	r0, [sp, #96]	; 0x60
 80113e6:	2800      	cmp	r0, #0
 80113e8:	f43f aef6 	beq.w	80111d8 <_strtod_l+0x490>
 80113ec:	2101      	movs	r1, #1
 80113ee:	4620      	mov	r0, r4
 80113f0:	f001 fe84 	bl	80130fc <__i2b>
 80113f4:	4606      	mov	r6, r0
 80113f6:	2800      	cmp	r0, #0
 80113f8:	f43f aeee 	beq.w	80111d8 <_strtod_l+0x490>
 80113fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80113fe:	9904      	ldr	r1, [sp, #16]
 8011400:	2b00      	cmp	r3, #0
 8011402:	bfab      	itete	ge
 8011404:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8011406:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011408:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801140a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801140e:	bfac      	ite	ge
 8011410:	eb03 0902 	addge.w	r9, r3, r2
 8011414:	1ad7      	sublt	r7, r2, r3
 8011416:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011418:	eba3 0801 	sub.w	r8, r3, r1
 801141c:	4490      	add	r8, r2
 801141e:	4ba1      	ldr	r3, [pc, #644]	; (80116a4 <_strtod_l+0x95c>)
 8011420:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011424:	4598      	cmp	r8, r3
 8011426:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801142a:	f280 80c7 	bge.w	80115bc <_strtod_l+0x874>
 801142e:	eba3 0308 	sub.w	r3, r3, r8
 8011432:	2b1f      	cmp	r3, #31
 8011434:	eba2 0203 	sub.w	r2, r2, r3
 8011438:	f04f 0101 	mov.w	r1, #1
 801143c:	f300 80b1 	bgt.w	80115a2 <_strtod_l+0x85a>
 8011440:	fa01 f303 	lsl.w	r3, r1, r3
 8011444:	930d      	str	r3, [sp, #52]	; 0x34
 8011446:	2300      	movs	r3, #0
 8011448:	9308      	str	r3, [sp, #32]
 801144a:	eb09 0802 	add.w	r8, r9, r2
 801144e:	9b04      	ldr	r3, [sp, #16]
 8011450:	45c1      	cmp	r9, r8
 8011452:	4417      	add	r7, r2
 8011454:	441f      	add	r7, r3
 8011456:	464b      	mov	r3, r9
 8011458:	bfa8      	it	ge
 801145a:	4643      	movge	r3, r8
 801145c:	42bb      	cmp	r3, r7
 801145e:	bfa8      	it	ge
 8011460:	463b      	movge	r3, r7
 8011462:	2b00      	cmp	r3, #0
 8011464:	bfc2      	ittt	gt
 8011466:	eba8 0803 	subgt.w	r8, r8, r3
 801146a:	1aff      	subgt	r7, r7, r3
 801146c:	eba9 0903 	subgt.w	r9, r9, r3
 8011470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011472:	2b00      	cmp	r3, #0
 8011474:	dd17      	ble.n	80114a6 <_strtod_l+0x75e>
 8011476:	4631      	mov	r1, r6
 8011478:	461a      	mov	r2, r3
 801147a:	4620      	mov	r0, r4
 801147c:	f001 fefe 	bl	801327c <__pow5mult>
 8011480:	4606      	mov	r6, r0
 8011482:	2800      	cmp	r0, #0
 8011484:	f43f aea8 	beq.w	80111d8 <_strtod_l+0x490>
 8011488:	4601      	mov	r1, r0
 801148a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801148c:	4620      	mov	r0, r4
 801148e:	f001 fe4b 	bl	8013128 <__multiply>
 8011492:	900b      	str	r0, [sp, #44]	; 0x2c
 8011494:	2800      	cmp	r0, #0
 8011496:	f43f ae9f 	beq.w	80111d8 <_strtod_l+0x490>
 801149a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801149c:	4620      	mov	r0, r4
 801149e:	f001 fd2b 	bl	8012ef8 <_Bfree>
 80114a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114a4:	9318      	str	r3, [sp, #96]	; 0x60
 80114a6:	f1b8 0f00 	cmp.w	r8, #0
 80114aa:	f300 808c 	bgt.w	80115c6 <_strtod_l+0x87e>
 80114ae:	9b06      	ldr	r3, [sp, #24]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	dd08      	ble.n	80114c6 <_strtod_l+0x77e>
 80114b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80114b6:	9905      	ldr	r1, [sp, #20]
 80114b8:	4620      	mov	r0, r4
 80114ba:	f001 fedf 	bl	801327c <__pow5mult>
 80114be:	9005      	str	r0, [sp, #20]
 80114c0:	2800      	cmp	r0, #0
 80114c2:	f43f ae89 	beq.w	80111d8 <_strtod_l+0x490>
 80114c6:	2f00      	cmp	r7, #0
 80114c8:	dd08      	ble.n	80114dc <_strtod_l+0x794>
 80114ca:	9905      	ldr	r1, [sp, #20]
 80114cc:	463a      	mov	r2, r7
 80114ce:	4620      	mov	r0, r4
 80114d0:	f001 ff2e 	bl	8013330 <__lshift>
 80114d4:	9005      	str	r0, [sp, #20]
 80114d6:	2800      	cmp	r0, #0
 80114d8:	f43f ae7e 	beq.w	80111d8 <_strtod_l+0x490>
 80114dc:	f1b9 0f00 	cmp.w	r9, #0
 80114e0:	dd08      	ble.n	80114f4 <_strtod_l+0x7ac>
 80114e2:	4631      	mov	r1, r6
 80114e4:	464a      	mov	r2, r9
 80114e6:	4620      	mov	r0, r4
 80114e8:	f001 ff22 	bl	8013330 <__lshift>
 80114ec:	4606      	mov	r6, r0
 80114ee:	2800      	cmp	r0, #0
 80114f0:	f43f ae72 	beq.w	80111d8 <_strtod_l+0x490>
 80114f4:	9a05      	ldr	r2, [sp, #20]
 80114f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80114f8:	4620      	mov	r0, r4
 80114fa:	f001 ffa5 	bl	8013448 <__mdiff>
 80114fe:	4605      	mov	r5, r0
 8011500:	2800      	cmp	r0, #0
 8011502:	f43f ae69 	beq.w	80111d8 <_strtod_l+0x490>
 8011506:	68c3      	ldr	r3, [r0, #12]
 8011508:	930b      	str	r3, [sp, #44]	; 0x2c
 801150a:	2300      	movs	r3, #0
 801150c:	60c3      	str	r3, [r0, #12]
 801150e:	4631      	mov	r1, r6
 8011510:	f001 ff7e 	bl	8013410 <__mcmp>
 8011514:	2800      	cmp	r0, #0
 8011516:	da60      	bge.n	80115da <_strtod_l+0x892>
 8011518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801151a:	ea53 030a 	orrs.w	r3, r3, sl
 801151e:	f040 8082 	bne.w	8011626 <_strtod_l+0x8de>
 8011522:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011526:	2b00      	cmp	r3, #0
 8011528:	d17d      	bne.n	8011626 <_strtod_l+0x8de>
 801152a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801152e:	0d1b      	lsrs	r3, r3, #20
 8011530:	051b      	lsls	r3, r3, #20
 8011532:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011536:	d976      	bls.n	8011626 <_strtod_l+0x8de>
 8011538:	696b      	ldr	r3, [r5, #20]
 801153a:	b913      	cbnz	r3, 8011542 <_strtod_l+0x7fa>
 801153c:	692b      	ldr	r3, [r5, #16]
 801153e:	2b01      	cmp	r3, #1
 8011540:	dd71      	ble.n	8011626 <_strtod_l+0x8de>
 8011542:	4629      	mov	r1, r5
 8011544:	2201      	movs	r2, #1
 8011546:	4620      	mov	r0, r4
 8011548:	f001 fef2 	bl	8013330 <__lshift>
 801154c:	4631      	mov	r1, r6
 801154e:	4605      	mov	r5, r0
 8011550:	f001 ff5e 	bl	8013410 <__mcmp>
 8011554:	2800      	cmp	r0, #0
 8011556:	dd66      	ble.n	8011626 <_strtod_l+0x8de>
 8011558:	9904      	ldr	r1, [sp, #16]
 801155a:	4a53      	ldr	r2, [pc, #332]	; (80116a8 <_strtod_l+0x960>)
 801155c:	465b      	mov	r3, fp
 801155e:	2900      	cmp	r1, #0
 8011560:	f000 8081 	beq.w	8011666 <_strtod_l+0x91e>
 8011564:	ea02 010b 	and.w	r1, r2, fp
 8011568:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801156c:	dc7b      	bgt.n	8011666 <_strtod_l+0x91e>
 801156e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011572:	f77f aea9 	ble.w	80112c8 <_strtod_l+0x580>
 8011576:	4b4d      	ldr	r3, [pc, #308]	; (80116ac <_strtod_l+0x964>)
 8011578:	4650      	mov	r0, sl
 801157a:	4659      	mov	r1, fp
 801157c:	2200      	movs	r2, #0
 801157e:	f7ef f83b 	bl	80005f8 <__aeabi_dmul>
 8011582:	460b      	mov	r3, r1
 8011584:	4303      	orrs	r3, r0
 8011586:	bf08      	it	eq
 8011588:	2322      	moveq	r3, #34	; 0x22
 801158a:	4682      	mov	sl, r0
 801158c:	468b      	mov	fp, r1
 801158e:	bf08      	it	eq
 8011590:	6023      	streq	r3, [r4, #0]
 8011592:	e62b      	b.n	80111ec <_strtod_l+0x4a4>
 8011594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011598:	fa02 f303 	lsl.w	r3, r2, r3
 801159c:	ea03 0a0a 	and.w	sl, r3, sl
 80115a0:	e6e3      	b.n	801136a <_strtod_l+0x622>
 80115a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80115a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80115aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80115ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80115b2:	fa01 f308 	lsl.w	r3, r1, r8
 80115b6:	9308      	str	r3, [sp, #32]
 80115b8:	910d      	str	r1, [sp, #52]	; 0x34
 80115ba:	e746      	b.n	801144a <_strtod_l+0x702>
 80115bc:	2300      	movs	r3, #0
 80115be:	9308      	str	r3, [sp, #32]
 80115c0:	2301      	movs	r3, #1
 80115c2:	930d      	str	r3, [sp, #52]	; 0x34
 80115c4:	e741      	b.n	801144a <_strtod_l+0x702>
 80115c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80115c8:	4642      	mov	r2, r8
 80115ca:	4620      	mov	r0, r4
 80115cc:	f001 feb0 	bl	8013330 <__lshift>
 80115d0:	9018      	str	r0, [sp, #96]	; 0x60
 80115d2:	2800      	cmp	r0, #0
 80115d4:	f47f af6b 	bne.w	80114ae <_strtod_l+0x766>
 80115d8:	e5fe      	b.n	80111d8 <_strtod_l+0x490>
 80115da:	465f      	mov	r7, fp
 80115dc:	d16e      	bne.n	80116bc <_strtod_l+0x974>
 80115de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80115e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80115e4:	b342      	cbz	r2, 8011638 <_strtod_l+0x8f0>
 80115e6:	4a32      	ldr	r2, [pc, #200]	; (80116b0 <_strtod_l+0x968>)
 80115e8:	4293      	cmp	r3, r2
 80115ea:	d128      	bne.n	801163e <_strtod_l+0x8f6>
 80115ec:	9b04      	ldr	r3, [sp, #16]
 80115ee:	4651      	mov	r1, sl
 80115f0:	b1eb      	cbz	r3, 801162e <_strtod_l+0x8e6>
 80115f2:	4b2d      	ldr	r3, [pc, #180]	; (80116a8 <_strtod_l+0x960>)
 80115f4:	403b      	ands	r3, r7
 80115f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80115fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80115fe:	d819      	bhi.n	8011634 <_strtod_l+0x8ec>
 8011600:	0d1b      	lsrs	r3, r3, #20
 8011602:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011606:	fa02 f303 	lsl.w	r3, r2, r3
 801160a:	4299      	cmp	r1, r3
 801160c:	d117      	bne.n	801163e <_strtod_l+0x8f6>
 801160e:	4b29      	ldr	r3, [pc, #164]	; (80116b4 <_strtod_l+0x96c>)
 8011610:	429f      	cmp	r7, r3
 8011612:	d102      	bne.n	801161a <_strtod_l+0x8d2>
 8011614:	3101      	adds	r1, #1
 8011616:	f43f addf 	beq.w	80111d8 <_strtod_l+0x490>
 801161a:	4b23      	ldr	r3, [pc, #140]	; (80116a8 <_strtod_l+0x960>)
 801161c:	403b      	ands	r3, r7
 801161e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011622:	f04f 0a00 	mov.w	sl, #0
 8011626:	9b04      	ldr	r3, [sp, #16]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d1a4      	bne.n	8011576 <_strtod_l+0x82e>
 801162c:	e5de      	b.n	80111ec <_strtod_l+0x4a4>
 801162e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011632:	e7ea      	b.n	801160a <_strtod_l+0x8c2>
 8011634:	4613      	mov	r3, r2
 8011636:	e7e8      	b.n	801160a <_strtod_l+0x8c2>
 8011638:	ea53 030a 	orrs.w	r3, r3, sl
 801163c:	d08c      	beq.n	8011558 <_strtod_l+0x810>
 801163e:	9b08      	ldr	r3, [sp, #32]
 8011640:	b1db      	cbz	r3, 801167a <_strtod_l+0x932>
 8011642:	423b      	tst	r3, r7
 8011644:	d0ef      	beq.n	8011626 <_strtod_l+0x8de>
 8011646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011648:	9a04      	ldr	r2, [sp, #16]
 801164a:	4650      	mov	r0, sl
 801164c:	4659      	mov	r1, fp
 801164e:	b1c3      	cbz	r3, 8011682 <_strtod_l+0x93a>
 8011650:	f7ff fb5c 	bl	8010d0c <sulp>
 8011654:	4602      	mov	r2, r0
 8011656:	460b      	mov	r3, r1
 8011658:	ec51 0b18 	vmov	r0, r1, d8
 801165c:	f7ee fe16 	bl	800028c <__adddf3>
 8011660:	4682      	mov	sl, r0
 8011662:	468b      	mov	fp, r1
 8011664:	e7df      	b.n	8011626 <_strtod_l+0x8de>
 8011666:	4013      	ands	r3, r2
 8011668:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801166c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011670:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011674:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011678:	e7d5      	b.n	8011626 <_strtod_l+0x8de>
 801167a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801167c:	ea13 0f0a 	tst.w	r3, sl
 8011680:	e7e0      	b.n	8011644 <_strtod_l+0x8fc>
 8011682:	f7ff fb43 	bl	8010d0c <sulp>
 8011686:	4602      	mov	r2, r0
 8011688:	460b      	mov	r3, r1
 801168a:	ec51 0b18 	vmov	r0, r1, d8
 801168e:	f7ee fdfb 	bl	8000288 <__aeabi_dsub>
 8011692:	2200      	movs	r2, #0
 8011694:	2300      	movs	r3, #0
 8011696:	4682      	mov	sl, r0
 8011698:	468b      	mov	fp, r1
 801169a:	f7ef fa15 	bl	8000ac8 <__aeabi_dcmpeq>
 801169e:	2800      	cmp	r0, #0
 80116a0:	d0c1      	beq.n	8011626 <_strtod_l+0x8de>
 80116a2:	e611      	b.n	80112c8 <_strtod_l+0x580>
 80116a4:	fffffc02 	.word	0xfffffc02
 80116a8:	7ff00000 	.word	0x7ff00000
 80116ac:	39500000 	.word	0x39500000
 80116b0:	000fffff 	.word	0x000fffff
 80116b4:	7fefffff 	.word	0x7fefffff
 80116b8:	080154f0 	.word	0x080154f0
 80116bc:	4631      	mov	r1, r6
 80116be:	4628      	mov	r0, r5
 80116c0:	f002 f824 	bl	801370c <__ratio>
 80116c4:	ec59 8b10 	vmov	r8, r9, d0
 80116c8:	ee10 0a10 	vmov	r0, s0
 80116cc:	2200      	movs	r2, #0
 80116ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80116d2:	4649      	mov	r1, r9
 80116d4:	f7ef fa0c 	bl	8000af0 <__aeabi_dcmple>
 80116d8:	2800      	cmp	r0, #0
 80116da:	d07a      	beq.n	80117d2 <_strtod_l+0xa8a>
 80116dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d04a      	beq.n	8011778 <_strtod_l+0xa30>
 80116e2:	4b95      	ldr	r3, [pc, #596]	; (8011938 <_strtod_l+0xbf0>)
 80116e4:	2200      	movs	r2, #0
 80116e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80116ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011938 <_strtod_l+0xbf0>
 80116ee:	f04f 0800 	mov.w	r8, #0
 80116f2:	4b92      	ldr	r3, [pc, #584]	; (801193c <_strtod_l+0xbf4>)
 80116f4:	403b      	ands	r3, r7
 80116f6:	930d      	str	r3, [sp, #52]	; 0x34
 80116f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80116fa:	4b91      	ldr	r3, [pc, #580]	; (8011940 <_strtod_l+0xbf8>)
 80116fc:	429a      	cmp	r2, r3
 80116fe:	f040 80b0 	bne.w	8011862 <_strtod_l+0xb1a>
 8011702:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011706:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801170a:	ec4b ab10 	vmov	d0, sl, fp
 801170e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011712:	f001 ff23 	bl	801355c <__ulp>
 8011716:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801171a:	ec53 2b10 	vmov	r2, r3, d0
 801171e:	f7ee ff6b 	bl	80005f8 <__aeabi_dmul>
 8011722:	4652      	mov	r2, sl
 8011724:	465b      	mov	r3, fp
 8011726:	f7ee fdb1 	bl	800028c <__adddf3>
 801172a:	460b      	mov	r3, r1
 801172c:	4983      	ldr	r1, [pc, #524]	; (801193c <_strtod_l+0xbf4>)
 801172e:	4a85      	ldr	r2, [pc, #532]	; (8011944 <_strtod_l+0xbfc>)
 8011730:	4019      	ands	r1, r3
 8011732:	4291      	cmp	r1, r2
 8011734:	4682      	mov	sl, r0
 8011736:	d960      	bls.n	80117fa <_strtod_l+0xab2>
 8011738:	ee18 3a90 	vmov	r3, s17
 801173c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011740:	4293      	cmp	r3, r2
 8011742:	d104      	bne.n	801174e <_strtod_l+0xa06>
 8011744:	ee18 3a10 	vmov	r3, s16
 8011748:	3301      	adds	r3, #1
 801174a:	f43f ad45 	beq.w	80111d8 <_strtod_l+0x490>
 801174e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8011950 <_strtod_l+0xc08>
 8011752:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011756:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011758:	4620      	mov	r0, r4
 801175a:	f001 fbcd 	bl	8012ef8 <_Bfree>
 801175e:	9905      	ldr	r1, [sp, #20]
 8011760:	4620      	mov	r0, r4
 8011762:	f001 fbc9 	bl	8012ef8 <_Bfree>
 8011766:	4631      	mov	r1, r6
 8011768:	4620      	mov	r0, r4
 801176a:	f001 fbc5 	bl	8012ef8 <_Bfree>
 801176e:	4629      	mov	r1, r5
 8011770:	4620      	mov	r0, r4
 8011772:	f001 fbc1 	bl	8012ef8 <_Bfree>
 8011776:	e61a      	b.n	80113ae <_strtod_l+0x666>
 8011778:	f1ba 0f00 	cmp.w	sl, #0
 801177c:	d11b      	bne.n	80117b6 <_strtod_l+0xa6e>
 801177e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011782:	b9f3      	cbnz	r3, 80117c2 <_strtod_l+0xa7a>
 8011784:	4b6c      	ldr	r3, [pc, #432]	; (8011938 <_strtod_l+0xbf0>)
 8011786:	2200      	movs	r2, #0
 8011788:	4640      	mov	r0, r8
 801178a:	4649      	mov	r1, r9
 801178c:	f7ef f9a6 	bl	8000adc <__aeabi_dcmplt>
 8011790:	b9d0      	cbnz	r0, 80117c8 <_strtod_l+0xa80>
 8011792:	4640      	mov	r0, r8
 8011794:	4649      	mov	r1, r9
 8011796:	4b6c      	ldr	r3, [pc, #432]	; (8011948 <_strtod_l+0xc00>)
 8011798:	2200      	movs	r2, #0
 801179a:	f7ee ff2d 	bl	80005f8 <__aeabi_dmul>
 801179e:	4680      	mov	r8, r0
 80117a0:	4689      	mov	r9, r1
 80117a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80117a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80117aa:	9315      	str	r3, [sp, #84]	; 0x54
 80117ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80117b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80117b4:	e79d      	b.n	80116f2 <_strtod_l+0x9aa>
 80117b6:	f1ba 0f01 	cmp.w	sl, #1
 80117ba:	d102      	bne.n	80117c2 <_strtod_l+0xa7a>
 80117bc:	2f00      	cmp	r7, #0
 80117be:	f43f ad83 	beq.w	80112c8 <_strtod_l+0x580>
 80117c2:	4b62      	ldr	r3, [pc, #392]	; (801194c <_strtod_l+0xc04>)
 80117c4:	2200      	movs	r2, #0
 80117c6:	e78e      	b.n	80116e6 <_strtod_l+0x99e>
 80117c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8011948 <_strtod_l+0xc00>
 80117cc:	f04f 0800 	mov.w	r8, #0
 80117d0:	e7e7      	b.n	80117a2 <_strtod_l+0xa5a>
 80117d2:	4b5d      	ldr	r3, [pc, #372]	; (8011948 <_strtod_l+0xc00>)
 80117d4:	4640      	mov	r0, r8
 80117d6:	4649      	mov	r1, r9
 80117d8:	2200      	movs	r2, #0
 80117da:	f7ee ff0d 	bl	80005f8 <__aeabi_dmul>
 80117de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117e0:	4680      	mov	r8, r0
 80117e2:	4689      	mov	r9, r1
 80117e4:	b933      	cbnz	r3, 80117f4 <_strtod_l+0xaac>
 80117e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80117ea:	900e      	str	r0, [sp, #56]	; 0x38
 80117ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80117ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80117f2:	e7dd      	b.n	80117b0 <_strtod_l+0xa68>
 80117f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80117f8:	e7f9      	b.n	80117ee <_strtod_l+0xaa6>
 80117fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80117fe:	9b04      	ldr	r3, [sp, #16]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d1a8      	bne.n	8011756 <_strtod_l+0xa0e>
 8011804:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011808:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801180a:	0d1b      	lsrs	r3, r3, #20
 801180c:	051b      	lsls	r3, r3, #20
 801180e:	429a      	cmp	r2, r3
 8011810:	d1a1      	bne.n	8011756 <_strtod_l+0xa0e>
 8011812:	4640      	mov	r0, r8
 8011814:	4649      	mov	r1, r9
 8011816:	f7ef fa4f 	bl	8000cb8 <__aeabi_d2lz>
 801181a:	f7ee febf 	bl	800059c <__aeabi_l2d>
 801181e:	4602      	mov	r2, r0
 8011820:	460b      	mov	r3, r1
 8011822:	4640      	mov	r0, r8
 8011824:	4649      	mov	r1, r9
 8011826:	f7ee fd2f 	bl	8000288 <__aeabi_dsub>
 801182a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801182c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011830:	ea43 030a 	orr.w	r3, r3, sl
 8011834:	4313      	orrs	r3, r2
 8011836:	4680      	mov	r8, r0
 8011838:	4689      	mov	r9, r1
 801183a:	d055      	beq.n	80118e8 <_strtod_l+0xba0>
 801183c:	a336      	add	r3, pc, #216	; (adr r3, 8011918 <_strtod_l+0xbd0>)
 801183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011842:	f7ef f94b 	bl	8000adc <__aeabi_dcmplt>
 8011846:	2800      	cmp	r0, #0
 8011848:	f47f acd0 	bne.w	80111ec <_strtod_l+0x4a4>
 801184c:	a334      	add	r3, pc, #208	; (adr r3, 8011920 <_strtod_l+0xbd8>)
 801184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011852:	4640      	mov	r0, r8
 8011854:	4649      	mov	r1, r9
 8011856:	f7ef f95f 	bl	8000b18 <__aeabi_dcmpgt>
 801185a:	2800      	cmp	r0, #0
 801185c:	f43f af7b 	beq.w	8011756 <_strtod_l+0xa0e>
 8011860:	e4c4      	b.n	80111ec <_strtod_l+0x4a4>
 8011862:	9b04      	ldr	r3, [sp, #16]
 8011864:	b333      	cbz	r3, 80118b4 <_strtod_l+0xb6c>
 8011866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011868:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801186c:	d822      	bhi.n	80118b4 <_strtod_l+0xb6c>
 801186e:	a32e      	add	r3, pc, #184	; (adr r3, 8011928 <_strtod_l+0xbe0>)
 8011870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011874:	4640      	mov	r0, r8
 8011876:	4649      	mov	r1, r9
 8011878:	f7ef f93a 	bl	8000af0 <__aeabi_dcmple>
 801187c:	b1a0      	cbz	r0, 80118a8 <_strtod_l+0xb60>
 801187e:	4649      	mov	r1, r9
 8011880:	4640      	mov	r0, r8
 8011882:	f7ef f991 	bl	8000ba8 <__aeabi_d2uiz>
 8011886:	2801      	cmp	r0, #1
 8011888:	bf38      	it	cc
 801188a:	2001      	movcc	r0, #1
 801188c:	f7ee fe3a 	bl	8000504 <__aeabi_ui2d>
 8011890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011892:	4680      	mov	r8, r0
 8011894:	4689      	mov	r9, r1
 8011896:	bb23      	cbnz	r3, 80118e2 <_strtod_l+0xb9a>
 8011898:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801189c:	9010      	str	r0, [sp, #64]	; 0x40
 801189e:	9311      	str	r3, [sp, #68]	; 0x44
 80118a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80118a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80118a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80118ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80118b0:	1a9b      	subs	r3, r3, r2
 80118b2:	9309      	str	r3, [sp, #36]	; 0x24
 80118b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80118b8:	eeb0 0a48 	vmov.f32	s0, s16
 80118bc:	eef0 0a68 	vmov.f32	s1, s17
 80118c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80118c4:	f001 fe4a 	bl	801355c <__ulp>
 80118c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80118cc:	ec53 2b10 	vmov	r2, r3, d0
 80118d0:	f7ee fe92 	bl	80005f8 <__aeabi_dmul>
 80118d4:	ec53 2b18 	vmov	r2, r3, d8
 80118d8:	f7ee fcd8 	bl	800028c <__adddf3>
 80118dc:	4682      	mov	sl, r0
 80118de:	468b      	mov	fp, r1
 80118e0:	e78d      	b.n	80117fe <_strtod_l+0xab6>
 80118e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80118e6:	e7db      	b.n	80118a0 <_strtod_l+0xb58>
 80118e8:	a311      	add	r3, pc, #68	; (adr r3, 8011930 <_strtod_l+0xbe8>)
 80118ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ee:	f7ef f8f5 	bl	8000adc <__aeabi_dcmplt>
 80118f2:	e7b2      	b.n	801185a <_strtod_l+0xb12>
 80118f4:	2300      	movs	r3, #0
 80118f6:	930a      	str	r3, [sp, #40]	; 0x28
 80118f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80118fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80118fc:	6013      	str	r3, [r2, #0]
 80118fe:	f7ff ba6b 	b.w	8010dd8 <_strtod_l+0x90>
 8011902:	2a65      	cmp	r2, #101	; 0x65
 8011904:	f43f ab5f 	beq.w	8010fc6 <_strtod_l+0x27e>
 8011908:	2a45      	cmp	r2, #69	; 0x45
 801190a:	f43f ab5c 	beq.w	8010fc6 <_strtod_l+0x27e>
 801190e:	2301      	movs	r3, #1
 8011910:	f7ff bb94 	b.w	801103c <_strtod_l+0x2f4>
 8011914:	f3af 8000 	nop.w
 8011918:	94a03595 	.word	0x94a03595
 801191c:	3fdfffff 	.word	0x3fdfffff
 8011920:	35afe535 	.word	0x35afe535
 8011924:	3fe00000 	.word	0x3fe00000
 8011928:	ffc00000 	.word	0xffc00000
 801192c:	41dfffff 	.word	0x41dfffff
 8011930:	94a03595 	.word	0x94a03595
 8011934:	3fcfffff 	.word	0x3fcfffff
 8011938:	3ff00000 	.word	0x3ff00000
 801193c:	7ff00000 	.word	0x7ff00000
 8011940:	7fe00000 	.word	0x7fe00000
 8011944:	7c9fffff 	.word	0x7c9fffff
 8011948:	3fe00000 	.word	0x3fe00000
 801194c:	bff00000 	.word	0xbff00000
 8011950:	7fefffff 	.word	0x7fefffff

08011954 <_strtod_r>:
 8011954:	4b01      	ldr	r3, [pc, #4]	; (801195c <_strtod_r+0x8>)
 8011956:	f7ff b9f7 	b.w	8010d48 <_strtod_l>
 801195a:	bf00      	nop
 801195c:	2000007c 	.word	0x2000007c

08011960 <_strtol_l.constprop.0>:
 8011960:	2b01      	cmp	r3, #1
 8011962:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011966:	d001      	beq.n	801196c <_strtol_l.constprop.0+0xc>
 8011968:	2b24      	cmp	r3, #36	; 0x24
 801196a:	d906      	bls.n	801197a <_strtol_l.constprop.0+0x1a>
 801196c:	f7fe faee 	bl	800ff4c <__errno>
 8011970:	2316      	movs	r3, #22
 8011972:	6003      	str	r3, [r0, #0]
 8011974:	2000      	movs	r0, #0
 8011976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801197a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011a60 <_strtol_l.constprop.0+0x100>
 801197e:	460d      	mov	r5, r1
 8011980:	462e      	mov	r6, r5
 8011982:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011986:	f814 700c 	ldrb.w	r7, [r4, ip]
 801198a:	f017 0708 	ands.w	r7, r7, #8
 801198e:	d1f7      	bne.n	8011980 <_strtol_l.constprop.0+0x20>
 8011990:	2c2d      	cmp	r4, #45	; 0x2d
 8011992:	d132      	bne.n	80119fa <_strtol_l.constprop.0+0x9a>
 8011994:	782c      	ldrb	r4, [r5, #0]
 8011996:	2701      	movs	r7, #1
 8011998:	1cb5      	adds	r5, r6, #2
 801199a:	2b00      	cmp	r3, #0
 801199c:	d05b      	beq.n	8011a56 <_strtol_l.constprop.0+0xf6>
 801199e:	2b10      	cmp	r3, #16
 80119a0:	d109      	bne.n	80119b6 <_strtol_l.constprop.0+0x56>
 80119a2:	2c30      	cmp	r4, #48	; 0x30
 80119a4:	d107      	bne.n	80119b6 <_strtol_l.constprop.0+0x56>
 80119a6:	782c      	ldrb	r4, [r5, #0]
 80119a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80119ac:	2c58      	cmp	r4, #88	; 0x58
 80119ae:	d14d      	bne.n	8011a4c <_strtol_l.constprop.0+0xec>
 80119b0:	786c      	ldrb	r4, [r5, #1]
 80119b2:	2310      	movs	r3, #16
 80119b4:	3502      	adds	r5, #2
 80119b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80119ba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80119be:	f04f 0c00 	mov.w	ip, #0
 80119c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80119c6:	4666      	mov	r6, ip
 80119c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80119cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80119d0:	f1be 0f09 	cmp.w	lr, #9
 80119d4:	d816      	bhi.n	8011a04 <_strtol_l.constprop.0+0xa4>
 80119d6:	4674      	mov	r4, lr
 80119d8:	42a3      	cmp	r3, r4
 80119da:	dd24      	ble.n	8011a26 <_strtol_l.constprop.0+0xc6>
 80119dc:	f1bc 0f00 	cmp.w	ip, #0
 80119e0:	db1e      	blt.n	8011a20 <_strtol_l.constprop.0+0xc0>
 80119e2:	45b1      	cmp	r9, r6
 80119e4:	d31c      	bcc.n	8011a20 <_strtol_l.constprop.0+0xc0>
 80119e6:	d101      	bne.n	80119ec <_strtol_l.constprop.0+0x8c>
 80119e8:	45a2      	cmp	sl, r4
 80119ea:	db19      	blt.n	8011a20 <_strtol_l.constprop.0+0xc0>
 80119ec:	fb06 4603 	mla	r6, r6, r3, r4
 80119f0:	f04f 0c01 	mov.w	ip, #1
 80119f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80119f8:	e7e8      	b.n	80119cc <_strtol_l.constprop.0+0x6c>
 80119fa:	2c2b      	cmp	r4, #43	; 0x2b
 80119fc:	bf04      	itt	eq
 80119fe:	782c      	ldrbeq	r4, [r5, #0]
 8011a00:	1cb5      	addeq	r5, r6, #2
 8011a02:	e7ca      	b.n	801199a <_strtol_l.constprop.0+0x3a>
 8011a04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011a08:	f1be 0f19 	cmp.w	lr, #25
 8011a0c:	d801      	bhi.n	8011a12 <_strtol_l.constprop.0+0xb2>
 8011a0e:	3c37      	subs	r4, #55	; 0x37
 8011a10:	e7e2      	b.n	80119d8 <_strtol_l.constprop.0+0x78>
 8011a12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011a16:	f1be 0f19 	cmp.w	lr, #25
 8011a1a:	d804      	bhi.n	8011a26 <_strtol_l.constprop.0+0xc6>
 8011a1c:	3c57      	subs	r4, #87	; 0x57
 8011a1e:	e7db      	b.n	80119d8 <_strtol_l.constprop.0+0x78>
 8011a20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8011a24:	e7e6      	b.n	80119f4 <_strtol_l.constprop.0+0x94>
 8011a26:	f1bc 0f00 	cmp.w	ip, #0
 8011a2a:	da05      	bge.n	8011a38 <_strtol_l.constprop.0+0xd8>
 8011a2c:	2322      	movs	r3, #34	; 0x22
 8011a2e:	6003      	str	r3, [r0, #0]
 8011a30:	4646      	mov	r6, r8
 8011a32:	b942      	cbnz	r2, 8011a46 <_strtol_l.constprop.0+0xe6>
 8011a34:	4630      	mov	r0, r6
 8011a36:	e79e      	b.n	8011976 <_strtol_l.constprop.0+0x16>
 8011a38:	b107      	cbz	r7, 8011a3c <_strtol_l.constprop.0+0xdc>
 8011a3a:	4276      	negs	r6, r6
 8011a3c:	2a00      	cmp	r2, #0
 8011a3e:	d0f9      	beq.n	8011a34 <_strtol_l.constprop.0+0xd4>
 8011a40:	f1bc 0f00 	cmp.w	ip, #0
 8011a44:	d000      	beq.n	8011a48 <_strtol_l.constprop.0+0xe8>
 8011a46:	1e69      	subs	r1, r5, #1
 8011a48:	6011      	str	r1, [r2, #0]
 8011a4a:	e7f3      	b.n	8011a34 <_strtol_l.constprop.0+0xd4>
 8011a4c:	2430      	movs	r4, #48	; 0x30
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d1b1      	bne.n	80119b6 <_strtol_l.constprop.0+0x56>
 8011a52:	2308      	movs	r3, #8
 8011a54:	e7af      	b.n	80119b6 <_strtol_l.constprop.0+0x56>
 8011a56:	2c30      	cmp	r4, #48	; 0x30
 8011a58:	d0a5      	beq.n	80119a6 <_strtol_l.constprop.0+0x46>
 8011a5a:	230a      	movs	r3, #10
 8011a5c:	e7ab      	b.n	80119b6 <_strtol_l.constprop.0+0x56>
 8011a5e:	bf00      	nop
 8011a60:	08015519 	.word	0x08015519

08011a64 <_strtol_r>:
 8011a64:	f7ff bf7c 	b.w	8011960 <_strtol_l.constprop.0>

08011a68 <quorem>:
 8011a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a6c:	6903      	ldr	r3, [r0, #16]
 8011a6e:	690c      	ldr	r4, [r1, #16]
 8011a70:	42a3      	cmp	r3, r4
 8011a72:	4607      	mov	r7, r0
 8011a74:	f2c0 8081 	blt.w	8011b7a <quorem+0x112>
 8011a78:	3c01      	subs	r4, #1
 8011a7a:	f101 0814 	add.w	r8, r1, #20
 8011a7e:	f100 0514 	add.w	r5, r0, #20
 8011a82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a86:	9301      	str	r3, [sp, #4]
 8011a88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011a8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a90:	3301      	adds	r3, #1
 8011a92:	429a      	cmp	r2, r3
 8011a94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011a98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011a9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011aa0:	d331      	bcc.n	8011b06 <quorem+0x9e>
 8011aa2:	f04f 0e00 	mov.w	lr, #0
 8011aa6:	4640      	mov	r0, r8
 8011aa8:	46ac      	mov	ip, r5
 8011aaa:	46f2      	mov	sl, lr
 8011aac:	f850 2b04 	ldr.w	r2, [r0], #4
 8011ab0:	b293      	uxth	r3, r2
 8011ab2:	fb06 e303 	mla	r3, r6, r3, lr
 8011ab6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	ebaa 0303 	sub.w	r3, sl, r3
 8011ac0:	f8dc a000 	ldr.w	sl, [ip]
 8011ac4:	0c12      	lsrs	r2, r2, #16
 8011ac6:	fa13 f38a 	uxtah	r3, r3, sl
 8011aca:	fb06 e202 	mla	r2, r6, r2, lr
 8011ace:	9300      	str	r3, [sp, #0]
 8011ad0:	9b00      	ldr	r3, [sp, #0]
 8011ad2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011ad6:	b292      	uxth	r2, r2
 8011ad8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011adc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011ae0:	f8bd 3000 	ldrh.w	r3, [sp]
 8011ae4:	4581      	cmp	r9, r0
 8011ae6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011aea:	f84c 3b04 	str.w	r3, [ip], #4
 8011aee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011af2:	d2db      	bcs.n	8011aac <quorem+0x44>
 8011af4:	f855 300b 	ldr.w	r3, [r5, fp]
 8011af8:	b92b      	cbnz	r3, 8011b06 <quorem+0x9e>
 8011afa:	9b01      	ldr	r3, [sp, #4]
 8011afc:	3b04      	subs	r3, #4
 8011afe:	429d      	cmp	r5, r3
 8011b00:	461a      	mov	r2, r3
 8011b02:	d32e      	bcc.n	8011b62 <quorem+0xfa>
 8011b04:	613c      	str	r4, [r7, #16]
 8011b06:	4638      	mov	r0, r7
 8011b08:	f001 fc82 	bl	8013410 <__mcmp>
 8011b0c:	2800      	cmp	r0, #0
 8011b0e:	db24      	blt.n	8011b5a <quorem+0xf2>
 8011b10:	3601      	adds	r6, #1
 8011b12:	4628      	mov	r0, r5
 8011b14:	f04f 0c00 	mov.w	ip, #0
 8011b18:	f858 2b04 	ldr.w	r2, [r8], #4
 8011b1c:	f8d0 e000 	ldr.w	lr, [r0]
 8011b20:	b293      	uxth	r3, r2
 8011b22:	ebac 0303 	sub.w	r3, ip, r3
 8011b26:	0c12      	lsrs	r2, r2, #16
 8011b28:	fa13 f38e 	uxtah	r3, r3, lr
 8011b2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011b30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011b34:	b29b      	uxth	r3, r3
 8011b36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011b3a:	45c1      	cmp	r9, r8
 8011b3c:	f840 3b04 	str.w	r3, [r0], #4
 8011b40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011b44:	d2e8      	bcs.n	8011b18 <quorem+0xb0>
 8011b46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011b4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011b4e:	b922      	cbnz	r2, 8011b5a <quorem+0xf2>
 8011b50:	3b04      	subs	r3, #4
 8011b52:	429d      	cmp	r5, r3
 8011b54:	461a      	mov	r2, r3
 8011b56:	d30a      	bcc.n	8011b6e <quorem+0x106>
 8011b58:	613c      	str	r4, [r7, #16]
 8011b5a:	4630      	mov	r0, r6
 8011b5c:	b003      	add	sp, #12
 8011b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b62:	6812      	ldr	r2, [r2, #0]
 8011b64:	3b04      	subs	r3, #4
 8011b66:	2a00      	cmp	r2, #0
 8011b68:	d1cc      	bne.n	8011b04 <quorem+0x9c>
 8011b6a:	3c01      	subs	r4, #1
 8011b6c:	e7c7      	b.n	8011afe <quorem+0x96>
 8011b6e:	6812      	ldr	r2, [r2, #0]
 8011b70:	3b04      	subs	r3, #4
 8011b72:	2a00      	cmp	r2, #0
 8011b74:	d1f0      	bne.n	8011b58 <quorem+0xf0>
 8011b76:	3c01      	subs	r4, #1
 8011b78:	e7eb      	b.n	8011b52 <quorem+0xea>
 8011b7a:	2000      	movs	r0, #0
 8011b7c:	e7ee      	b.n	8011b5c <quorem+0xf4>
	...

08011b80 <_dtoa_r>:
 8011b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b84:	ed2d 8b04 	vpush	{d8-d9}
 8011b88:	ec57 6b10 	vmov	r6, r7, d0
 8011b8c:	b093      	sub	sp, #76	; 0x4c
 8011b8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011b90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011b94:	9106      	str	r1, [sp, #24]
 8011b96:	ee10 aa10 	vmov	sl, s0
 8011b9a:	4604      	mov	r4, r0
 8011b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8011b9e:	930c      	str	r3, [sp, #48]	; 0x30
 8011ba0:	46bb      	mov	fp, r7
 8011ba2:	b975      	cbnz	r5, 8011bc2 <_dtoa_r+0x42>
 8011ba4:	2010      	movs	r0, #16
 8011ba6:	f001 f94d 	bl	8012e44 <malloc>
 8011baa:	4602      	mov	r2, r0
 8011bac:	6260      	str	r0, [r4, #36]	; 0x24
 8011bae:	b920      	cbnz	r0, 8011bba <_dtoa_r+0x3a>
 8011bb0:	4ba7      	ldr	r3, [pc, #668]	; (8011e50 <_dtoa_r+0x2d0>)
 8011bb2:	21ea      	movs	r1, #234	; 0xea
 8011bb4:	48a7      	ldr	r0, [pc, #668]	; (8011e54 <_dtoa_r+0x2d4>)
 8011bb6:	f002 f8ad 	bl	8013d14 <__assert_func>
 8011bba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011bbe:	6005      	str	r5, [r0, #0]
 8011bc0:	60c5      	str	r5, [r0, #12]
 8011bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011bc4:	6819      	ldr	r1, [r3, #0]
 8011bc6:	b151      	cbz	r1, 8011bde <_dtoa_r+0x5e>
 8011bc8:	685a      	ldr	r2, [r3, #4]
 8011bca:	604a      	str	r2, [r1, #4]
 8011bcc:	2301      	movs	r3, #1
 8011bce:	4093      	lsls	r3, r2
 8011bd0:	608b      	str	r3, [r1, #8]
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	f001 f990 	bl	8012ef8 <_Bfree>
 8011bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011bda:	2200      	movs	r2, #0
 8011bdc:	601a      	str	r2, [r3, #0]
 8011bde:	1e3b      	subs	r3, r7, #0
 8011be0:	bfaa      	itet	ge
 8011be2:	2300      	movge	r3, #0
 8011be4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011be8:	f8c8 3000 	strge.w	r3, [r8]
 8011bec:	4b9a      	ldr	r3, [pc, #616]	; (8011e58 <_dtoa_r+0x2d8>)
 8011bee:	bfbc      	itt	lt
 8011bf0:	2201      	movlt	r2, #1
 8011bf2:	f8c8 2000 	strlt.w	r2, [r8]
 8011bf6:	ea33 030b 	bics.w	r3, r3, fp
 8011bfa:	d11b      	bne.n	8011c34 <_dtoa_r+0xb4>
 8011bfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bfe:	f242 730f 	movw	r3, #9999	; 0x270f
 8011c02:	6013      	str	r3, [r2, #0]
 8011c04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011c08:	4333      	orrs	r3, r6
 8011c0a:	f000 8592 	beq.w	8012732 <_dtoa_r+0xbb2>
 8011c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c10:	b963      	cbnz	r3, 8011c2c <_dtoa_r+0xac>
 8011c12:	4b92      	ldr	r3, [pc, #584]	; (8011e5c <_dtoa_r+0x2dc>)
 8011c14:	e022      	b.n	8011c5c <_dtoa_r+0xdc>
 8011c16:	4b92      	ldr	r3, [pc, #584]	; (8011e60 <_dtoa_r+0x2e0>)
 8011c18:	9301      	str	r3, [sp, #4]
 8011c1a:	3308      	adds	r3, #8
 8011c1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011c1e:	6013      	str	r3, [r2, #0]
 8011c20:	9801      	ldr	r0, [sp, #4]
 8011c22:	b013      	add	sp, #76	; 0x4c
 8011c24:	ecbd 8b04 	vpop	{d8-d9}
 8011c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c2c:	4b8b      	ldr	r3, [pc, #556]	; (8011e5c <_dtoa_r+0x2dc>)
 8011c2e:	9301      	str	r3, [sp, #4]
 8011c30:	3303      	adds	r3, #3
 8011c32:	e7f3      	b.n	8011c1c <_dtoa_r+0x9c>
 8011c34:	2200      	movs	r2, #0
 8011c36:	2300      	movs	r3, #0
 8011c38:	4650      	mov	r0, sl
 8011c3a:	4659      	mov	r1, fp
 8011c3c:	f7ee ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c40:	ec4b ab19 	vmov	d9, sl, fp
 8011c44:	4680      	mov	r8, r0
 8011c46:	b158      	cbz	r0, 8011c60 <_dtoa_r+0xe0>
 8011c48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	6013      	str	r3, [r2, #0]
 8011c4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	f000 856b 	beq.w	801272c <_dtoa_r+0xbac>
 8011c56:	4883      	ldr	r0, [pc, #524]	; (8011e64 <_dtoa_r+0x2e4>)
 8011c58:	6018      	str	r0, [r3, #0]
 8011c5a:	1e43      	subs	r3, r0, #1
 8011c5c:	9301      	str	r3, [sp, #4]
 8011c5e:	e7df      	b.n	8011c20 <_dtoa_r+0xa0>
 8011c60:	ec4b ab10 	vmov	d0, sl, fp
 8011c64:	aa10      	add	r2, sp, #64	; 0x40
 8011c66:	a911      	add	r1, sp, #68	; 0x44
 8011c68:	4620      	mov	r0, r4
 8011c6a:	f001 fcf3 	bl	8013654 <__d2b>
 8011c6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011c72:	ee08 0a10 	vmov	s16, r0
 8011c76:	2d00      	cmp	r5, #0
 8011c78:	f000 8084 	beq.w	8011d84 <_dtoa_r+0x204>
 8011c7c:	ee19 3a90 	vmov	r3, s19
 8011c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011c84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011c88:	4656      	mov	r6, sl
 8011c8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011c8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011c92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011c96:	4b74      	ldr	r3, [pc, #464]	; (8011e68 <_dtoa_r+0x2e8>)
 8011c98:	2200      	movs	r2, #0
 8011c9a:	4630      	mov	r0, r6
 8011c9c:	4639      	mov	r1, r7
 8011c9e:	f7ee faf3 	bl	8000288 <__aeabi_dsub>
 8011ca2:	a365      	add	r3, pc, #404	; (adr r3, 8011e38 <_dtoa_r+0x2b8>)
 8011ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca8:	f7ee fca6 	bl	80005f8 <__aeabi_dmul>
 8011cac:	a364      	add	r3, pc, #400	; (adr r3, 8011e40 <_dtoa_r+0x2c0>)
 8011cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb2:	f7ee faeb 	bl	800028c <__adddf3>
 8011cb6:	4606      	mov	r6, r0
 8011cb8:	4628      	mov	r0, r5
 8011cba:	460f      	mov	r7, r1
 8011cbc:	f7ee fc32 	bl	8000524 <__aeabi_i2d>
 8011cc0:	a361      	add	r3, pc, #388	; (adr r3, 8011e48 <_dtoa_r+0x2c8>)
 8011cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc6:	f7ee fc97 	bl	80005f8 <__aeabi_dmul>
 8011cca:	4602      	mov	r2, r0
 8011ccc:	460b      	mov	r3, r1
 8011cce:	4630      	mov	r0, r6
 8011cd0:	4639      	mov	r1, r7
 8011cd2:	f7ee fadb 	bl	800028c <__adddf3>
 8011cd6:	4606      	mov	r6, r0
 8011cd8:	460f      	mov	r7, r1
 8011cda:	f7ee ff3d 	bl	8000b58 <__aeabi_d2iz>
 8011cde:	2200      	movs	r2, #0
 8011ce0:	9000      	str	r0, [sp, #0]
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	4630      	mov	r0, r6
 8011ce6:	4639      	mov	r1, r7
 8011ce8:	f7ee fef8 	bl	8000adc <__aeabi_dcmplt>
 8011cec:	b150      	cbz	r0, 8011d04 <_dtoa_r+0x184>
 8011cee:	9800      	ldr	r0, [sp, #0]
 8011cf0:	f7ee fc18 	bl	8000524 <__aeabi_i2d>
 8011cf4:	4632      	mov	r2, r6
 8011cf6:	463b      	mov	r3, r7
 8011cf8:	f7ee fee6 	bl	8000ac8 <__aeabi_dcmpeq>
 8011cfc:	b910      	cbnz	r0, 8011d04 <_dtoa_r+0x184>
 8011cfe:	9b00      	ldr	r3, [sp, #0]
 8011d00:	3b01      	subs	r3, #1
 8011d02:	9300      	str	r3, [sp, #0]
 8011d04:	9b00      	ldr	r3, [sp, #0]
 8011d06:	2b16      	cmp	r3, #22
 8011d08:	d85a      	bhi.n	8011dc0 <_dtoa_r+0x240>
 8011d0a:	9a00      	ldr	r2, [sp, #0]
 8011d0c:	4b57      	ldr	r3, [pc, #348]	; (8011e6c <_dtoa_r+0x2ec>)
 8011d0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d16:	ec51 0b19 	vmov	r0, r1, d9
 8011d1a:	f7ee fedf 	bl	8000adc <__aeabi_dcmplt>
 8011d1e:	2800      	cmp	r0, #0
 8011d20:	d050      	beq.n	8011dc4 <_dtoa_r+0x244>
 8011d22:	9b00      	ldr	r3, [sp, #0]
 8011d24:	3b01      	subs	r3, #1
 8011d26:	9300      	str	r3, [sp, #0]
 8011d28:	2300      	movs	r3, #0
 8011d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d2e:	1b5d      	subs	r5, r3, r5
 8011d30:	1e6b      	subs	r3, r5, #1
 8011d32:	9305      	str	r3, [sp, #20]
 8011d34:	bf45      	ittet	mi
 8011d36:	f1c5 0301 	rsbmi	r3, r5, #1
 8011d3a:	9304      	strmi	r3, [sp, #16]
 8011d3c:	2300      	movpl	r3, #0
 8011d3e:	2300      	movmi	r3, #0
 8011d40:	bf4c      	ite	mi
 8011d42:	9305      	strmi	r3, [sp, #20]
 8011d44:	9304      	strpl	r3, [sp, #16]
 8011d46:	9b00      	ldr	r3, [sp, #0]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	db3d      	blt.n	8011dc8 <_dtoa_r+0x248>
 8011d4c:	9b05      	ldr	r3, [sp, #20]
 8011d4e:	9a00      	ldr	r2, [sp, #0]
 8011d50:	920a      	str	r2, [sp, #40]	; 0x28
 8011d52:	4413      	add	r3, r2
 8011d54:	9305      	str	r3, [sp, #20]
 8011d56:	2300      	movs	r3, #0
 8011d58:	9307      	str	r3, [sp, #28]
 8011d5a:	9b06      	ldr	r3, [sp, #24]
 8011d5c:	2b09      	cmp	r3, #9
 8011d5e:	f200 8089 	bhi.w	8011e74 <_dtoa_r+0x2f4>
 8011d62:	2b05      	cmp	r3, #5
 8011d64:	bfc4      	itt	gt
 8011d66:	3b04      	subgt	r3, #4
 8011d68:	9306      	strgt	r3, [sp, #24]
 8011d6a:	9b06      	ldr	r3, [sp, #24]
 8011d6c:	f1a3 0302 	sub.w	r3, r3, #2
 8011d70:	bfcc      	ite	gt
 8011d72:	2500      	movgt	r5, #0
 8011d74:	2501      	movle	r5, #1
 8011d76:	2b03      	cmp	r3, #3
 8011d78:	f200 8087 	bhi.w	8011e8a <_dtoa_r+0x30a>
 8011d7c:	e8df f003 	tbb	[pc, r3]
 8011d80:	59383a2d 	.word	0x59383a2d
 8011d84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011d88:	441d      	add	r5, r3
 8011d8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011d8e:	2b20      	cmp	r3, #32
 8011d90:	bfc1      	itttt	gt
 8011d92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011d96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011d9a:	fa0b f303 	lslgt.w	r3, fp, r3
 8011d9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011da2:	bfda      	itte	le
 8011da4:	f1c3 0320 	rsble	r3, r3, #32
 8011da8:	fa06 f003 	lslle.w	r0, r6, r3
 8011dac:	4318      	orrgt	r0, r3
 8011dae:	f7ee fba9 	bl	8000504 <__aeabi_ui2d>
 8011db2:	2301      	movs	r3, #1
 8011db4:	4606      	mov	r6, r0
 8011db6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011dba:	3d01      	subs	r5, #1
 8011dbc:	930e      	str	r3, [sp, #56]	; 0x38
 8011dbe:	e76a      	b.n	8011c96 <_dtoa_r+0x116>
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	e7b2      	b.n	8011d2a <_dtoa_r+0x1aa>
 8011dc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8011dc6:	e7b1      	b.n	8011d2c <_dtoa_r+0x1ac>
 8011dc8:	9b04      	ldr	r3, [sp, #16]
 8011dca:	9a00      	ldr	r2, [sp, #0]
 8011dcc:	1a9b      	subs	r3, r3, r2
 8011dce:	9304      	str	r3, [sp, #16]
 8011dd0:	4253      	negs	r3, r2
 8011dd2:	9307      	str	r3, [sp, #28]
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8011dd8:	e7bf      	b.n	8011d5a <_dtoa_r+0x1da>
 8011dda:	2300      	movs	r3, #0
 8011ddc:	9308      	str	r3, [sp, #32]
 8011dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	dc55      	bgt.n	8011e90 <_dtoa_r+0x310>
 8011de4:	2301      	movs	r3, #1
 8011de6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011dea:	461a      	mov	r2, r3
 8011dec:	9209      	str	r2, [sp, #36]	; 0x24
 8011dee:	e00c      	b.n	8011e0a <_dtoa_r+0x28a>
 8011df0:	2301      	movs	r3, #1
 8011df2:	e7f3      	b.n	8011ddc <_dtoa_r+0x25c>
 8011df4:	2300      	movs	r3, #0
 8011df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011df8:	9308      	str	r3, [sp, #32]
 8011dfa:	9b00      	ldr	r3, [sp, #0]
 8011dfc:	4413      	add	r3, r2
 8011dfe:	9302      	str	r3, [sp, #8]
 8011e00:	3301      	adds	r3, #1
 8011e02:	2b01      	cmp	r3, #1
 8011e04:	9303      	str	r3, [sp, #12]
 8011e06:	bfb8      	it	lt
 8011e08:	2301      	movlt	r3, #1
 8011e0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	6042      	str	r2, [r0, #4]
 8011e10:	2204      	movs	r2, #4
 8011e12:	f102 0614 	add.w	r6, r2, #20
 8011e16:	429e      	cmp	r6, r3
 8011e18:	6841      	ldr	r1, [r0, #4]
 8011e1a:	d93d      	bls.n	8011e98 <_dtoa_r+0x318>
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	f001 f82b 	bl	8012e78 <_Balloc>
 8011e22:	9001      	str	r0, [sp, #4]
 8011e24:	2800      	cmp	r0, #0
 8011e26:	d13b      	bne.n	8011ea0 <_dtoa_r+0x320>
 8011e28:	4b11      	ldr	r3, [pc, #68]	; (8011e70 <_dtoa_r+0x2f0>)
 8011e2a:	4602      	mov	r2, r0
 8011e2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011e30:	e6c0      	b.n	8011bb4 <_dtoa_r+0x34>
 8011e32:	2301      	movs	r3, #1
 8011e34:	e7df      	b.n	8011df6 <_dtoa_r+0x276>
 8011e36:	bf00      	nop
 8011e38:	636f4361 	.word	0x636f4361
 8011e3c:	3fd287a7 	.word	0x3fd287a7
 8011e40:	8b60c8b3 	.word	0x8b60c8b3
 8011e44:	3fc68a28 	.word	0x3fc68a28
 8011e48:	509f79fb 	.word	0x509f79fb
 8011e4c:	3fd34413 	.word	0x3fd34413
 8011e50:	08015626 	.word	0x08015626
 8011e54:	0801563d 	.word	0x0801563d
 8011e58:	7ff00000 	.word	0x7ff00000
 8011e5c:	08015622 	.word	0x08015622
 8011e60:	08015619 	.word	0x08015619
 8011e64:	0801549d 	.word	0x0801549d
 8011e68:	3ff80000 	.word	0x3ff80000
 8011e6c:	080157a8 	.word	0x080157a8
 8011e70:	08015698 	.word	0x08015698
 8011e74:	2501      	movs	r5, #1
 8011e76:	2300      	movs	r3, #0
 8011e78:	9306      	str	r3, [sp, #24]
 8011e7a:	9508      	str	r5, [sp, #32]
 8011e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011e84:	2200      	movs	r2, #0
 8011e86:	2312      	movs	r3, #18
 8011e88:	e7b0      	b.n	8011dec <_dtoa_r+0x26c>
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	9308      	str	r3, [sp, #32]
 8011e8e:	e7f5      	b.n	8011e7c <_dtoa_r+0x2fc>
 8011e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011e96:	e7b8      	b.n	8011e0a <_dtoa_r+0x28a>
 8011e98:	3101      	adds	r1, #1
 8011e9a:	6041      	str	r1, [r0, #4]
 8011e9c:	0052      	lsls	r2, r2, #1
 8011e9e:	e7b8      	b.n	8011e12 <_dtoa_r+0x292>
 8011ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ea2:	9a01      	ldr	r2, [sp, #4]
 8011ea4:	601a      	str	r2, [r3, #0]
 8011ea6:	9b03      	ldr	r3, [sp, #12]
 8011ea8:	2b0e      	cmp	r3, #14
 8011eaa:	f200 809d 	bhi.w	8011fe8 <_dtoa_r+0x468>
 8011eae:	2d00      	cmp	r5, #0
 8011eb0:	f000 809a 	beq.w	8011fe8 <_dtoa_r+0x468>
 8011eb4:	9b00      	ldr	r3, [sp, #0]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	dd32      	ble.n	8011f20 <_dtoa_r+0x3a0>
 8011eba:	4ab7      	ldr	r2, [pc, #732]	; (8012198 <_dtoa_r+0x618>)
 8011ebc:	f003 030f 	and.w	r3, r3, #15
 8011ec0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011ec4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011ec8:	9b00      	ldr	r3, [sp, #0]
 8011eca:	05d8      	lsls	r0, r3, #23
 8011ecc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011ed0:	d516      	bpl.n	8011f00 <_dtoa_r+0x380>
 8011ed2:	4bb2      	ldr	r3, [pc, #712]	; (801219c <_dtoa_r+0x61c>)
 8011ed4:	ec51 0b19 	vmov	r0, r1, d9
 8011ed8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011edc:	f7ee fcb6 	bl	800084c <__aeabi_ddiv>
 8011ee0:	f007 070f 	and.w	r7, r7, #15
 8011ee4:	4682      	mov	sl, r0
 8011ee6:	468b      	mov	fp, r1
 8011ee8:	2503      	movs	r5, #3
 8011eea:	4eac      	ldr	r6, [pc, #688]	; (801219c <_dtoa_r+0x61c>)
 8011eec:	b957      	cbnz	r7, 8011f04 <_dtoa_r+0x384>
 8011eee:	4642      	mov	r2, r8
 8011ef0:	464b      	mov	r3, r9
 8011ef2:	4650      	mov	r0, sl
 8011ef4:	4659      	mov	r1, fp
 8011ef6:	f7ee fca9 	bl	800084c <__aeabi_ddiv>
 8011efa:	4682      	mov	sl, r0
 8011efc:	468b      	mov	fp, r1
 8011efe:	e028      	b.n	8011f52 <_dtoa_r+0x3d2>
 8011f00:	2502      	movs	r5, #2
 8011f02:	e7f2      	b.n	8011eea <_dtoa_r+0x36a>
 8011f04:	07f9      	lsls	r1, r7, #31
 8011f06:	d508      	bpl.n	8011f1a <_dtoa_r+0x39a>
 8011f08:	4640      	mov	r0, r8
 8011f0a:	4649      	mov	r1, r9
 8011f0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011f10:	f7ee fb72 	bl	80005f8 <__aeabi_dmul>
 8011f14:	3501      	adds	r5, #1
 8011f16:	4680      	mov	r8, r0
 8011f18:	4689      	mov	r9, r1
 8011f1a:	107f      	asrs	r7, r7, #1
 8011f1c:	3608      	adds	r6, #8
 8011f1e:	e7e5      	b.n	8011eec <_dtoa_r+0x36c>
 8011f20:	f000 809b 	beq.w	801205a <_dtoa_r+0x4da>
 8011f24:	9b00      	ldr	r3, [sp, #0]
 8011f26:	4f9d      	ldr	r7, [pc, #628]	; (801219c <_dtoa_r+0x61c>)
 8011f28:	425e      	negs	r6, r3
 8011f2a:	4b9b      	ldr	r3, [pc, #620]	; (8012198 <_dtoa_r+0x618>)
 8011f2c:	f006 020f 	and.w	r2, r6, #15
 8011f30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f38:	ec51 0b19 	vmov	r0, r1, d9
 8011f3c:	f7ee fb5c 	bl	80005f8 <__aeabi_dmul>
 8011f40:	1136      	asrs	r6, r6, #4
 8011f42:	4682      	mov	sl, r0
 8011f44:	468b      	mov	fp, r1
 8011f46:	2300      	movs	r3, #0
 8011f48:	2502      	movs	r5, #2
 8011f4a:	2e00      	cmp	r6, #0
 8011f4c:	d17a      	bne.n	8012044 <_dtoa_r+0x4c4>
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d1d3      	bne.n	8011efa <_dtoa_r+0x37a>
 8011f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	f000 8082 	beq.w	801205e <_dtoa_r+0x4de>
 8011f5a:	4b91      	ldr	r3, [pc, #580]	; (80121a0 <_dtoa_r+0x620>)
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	4650      	mov	r0, sl
 8011f60:	4659      	mov	r1, fp
 8011f62:	f7ee fdbb 	bl	8000adc <__aeabi_dcmplt>
 8011f66:	2800      	cmp	r0, #0
 8011f68:	d079      	beq.n	801205e <_dtoa_r+0x4de>
 8011f6a:	9b03      	ldr	r3, [sp, #12]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d076      	beq.n	801205e <_dtoa_r+0x4de>
 8011f70:	9b02      	ldr	r3, [sp, #8]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	dd36      	ble.n	8011fe4 <_dtoa_r+0x464>
 8011f76:	9b00      	ldr	r3, [sp, #0]
 8011f78:	4650      	mov	r0, sl
 8011f7a:	4659      	mov	r1, fp
 8011f7c:	1e5f      	subs	r7, r3, #1
 8011f7e:	2200      	movs	r2, #0
 8011f80:	4b88      	ldr	r3, [pc, #544]	; (80121a4 <_dtoa_r+0x624>)
 8011f82:	f7ee fb39 	bl	80005f8 <__aeabi_dmul>
 8011f86:	9e02      	ldr	r6, [sp, #8]
 8011f88:	4682      	mov	sl, r0
 8011f8a:	468b      	mov	fp, r1
 8011f8c:	3501      	adds	r5, #1
 8011f8e:	4628      	mov	r0, r5
 8011f90:	f7ee fac8 	bl	8000524 <__aeabi_i2d>
 8011f94:	4652      	mov	r2, sl
 8011f96:	465b      	mov	r3, fp
 8011f98:	f7ee fb2e 	bl	80005f8 <__aeabi_dmul>
 8011f9c:	4b82      	ldr	r3, [pc, #520]	; (80121a8 <_dtoa_r+0x628>)
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	f7ee f974 	bl	800028c <__adddf3>
 8011fa4:	46d0      	mov	r8, sl
 8011fa6:	46d9      	mov	r9, fp
 8011fa8:	4682      	mov	sl, r0
 8011faa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011fae:	2e00      	cmp	r6, #0
 8011fb0:	d158      	bne.n	8012064 <_dtoa_r+0x4e4>
 8011fb2:	4b7e      	ldr	r3, [pc, #504]	; (80121ac <_dtoa_r+0x62c>)
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	4640      	mov	r0, r8
 8011fb8:	4649      	mov	r1, r9
 8011fba:	f7ee f965 	bl	8000288 <__aeabi_dsub>
 8011fbe:	4652      	mov	r2, sl
 8011fc0:	465b      	mov	r3, fp
 8011fc2:	4680      	mov	r8, r0
 8011fc4:	4689      	mov	r9, r1
 8011fc6:	f7ee fda7 	bl	8000b18 <__aeabi_dcmpgt>
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	f040 8295 	bne.w	80124fa <_dtoa_r+0x97a>
 8011fd0:	4652      	mov	r2, sl
 8011fd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011fd6:	4640      	mov	r0, r8
 8011fd8:	4649      	mov	r1, r9
 8011fda:	f7ee fd7f 	bl	8000adc <__aeabi_dcmplt>
 8011fde:	2800      	cmp	r0, #0
 8011fe0:	f040 8289 	bne.w	80124f6 <_dtoa_r+0x976>
 8011fe4:	ec5b ab19 	vmov	sl, fp, d9
 8011fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	f2c0 8148 	blt.w	8012280 <_dtoa_r+0x700>
 8011ff0:	9a00      	ldr	r2, [sp, #0]
 8011ff2:	2a0e      	cmp	r2, #14
 8011ff4:	f300 8144 	bgt.w	8012280 <_dtoa_r+0x700>
 8011ff8:	4b67      	ldr	r3, [pc, #412]	; (8012198 <_dtoa_r+0x618>)
 8011ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ffe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012004:	2b00      	cmp	r3, #0
 8012006:	f280 80d5 	bge.w	80121b4 <_dtoa_r+0x634>
 801200a:	9b03      	ldr	r3, [sp, #12]
 801200c:	2b00      	cmp	r3, #0
 801200e:	f300 80d1 	bgt.w	80121b4 <_dtoa_r+0x634>
 8012012:	f040 826f 	bne.w	80124f4 <_dtoa_r+0x974>
 8012016:	4b65      	ldr	r3, [pc, #404]	; (80121ac <_dtoa_r+0x62c>)
 8012018:	2200      	movs	r2, #0
 801201a:	4640      	mov	r0, r8
 801201c:	4649      	mov	r1, r9
 801201e:	f7ee faeb 	bl	80005f8 <__aeabi_dmul>
 8012022:	4652      	mov	r2, sl
 8012024:	465b      	mov	r3, fp
 8012026:	f7ee fd6d 	bl	8000b04 <__aeabi_dcmpge>
 801202a:	9e03      	ldr	r6, [sp, #12]
 801202c:	4637      	mov	r7, r6
 801202e:	2800      	cmp	r0, #0
 8012030:	f040 8245 	bne.w	80124be <_dtoa_r+0x93e>
 8012034:	9d01      	ldr	r5, [sp, #4]
 8012036:	2331      	movs	r3, #49	; 0x31
 8012038:	f805 3b01 	strb.w	r3, [r5], #1
 801203c:	9b00      	ldr	r3, [sp, #0]
 801203e:	3301      	adds	r3, #1
 8012040:	9300      	str	r3, [sp, #0]
 8012042:	e240      	b.n	80124c6 <_dtoa_r+0x946>
 8012044:	07f2      	lsls	r2, r6, #31
 8012046:	d505      	bpl.n	8012054 <_dtoa_r+0x4d4>
 8012048:	e9d7 2300 	ldrd	r2, r3, [r7]
 801204c:	f7ee fad4 	bl	80005f8 <__aeabi_dmul>
 8012050:	3501      	adds	r5, #1
 8012052:	2301      	movs	r3, #1
 8012054:	1076      	asrs	r6, r6, #1
 8012056:	3708      	adds	r7, #8
 8012058:	e777      	b.n	8011f4a <_dtoa_r+0x3ca>
 801205a:	2502      	movs	r5, #2
 801205c:	e779      	b.n	8011f52 <_dtoa_r+0x3d2>
 801205e:	9f00      	ldr	r7, [sp, #0]
 8012060:	9e03      	ldr	r6, [sp, #12]
 8012062:	e794      	b.n	8011f8e <_dtoa_r+0x40e>
 8012064:	9901      	ldr	r1, [sp, #4]
 8012066:	4b4c      	ldr	r3, [pc, #304]	; (8012198 <_dtoa_r+0x618>)
 8012068:	4431      	add	r1, r6
 801206a:	910d      	str	r1, [sp, #52]	; 0x34
 801206c:	9908      	ldr	r1, [sp, #32]
 801206e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012072:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012076:	2900      	cmp	r1, #0
 8012078:	d043      	beq.n	8012102 <_dtoa_r+0x582>
 801207a:	494d      	ldr	r1, [pc, #308]	; (80121b0 <_dtoa_r+0x630>)
 801207c:	2000      	movs	r0, #0
 801207e:	f7ee fbe5 	bl	800084c <__aeabi_ddiv>
 8012082:	4652      	mov	r2, sl
 8012084:	465b      	mov	r3, fp
 8012086:	f7ee f8ff 	bl	8000288 <__aeabi_dsub>
 801208a:	9d01      	ldr	r5, [sp, #4]
 801208c:	4682      	mov	sl, r0
 801208e:	468b      	mov	fp, r1
 8012090:	4649      	mov	r1, r9
 8012092:	4640      	mov	r0, r8
 8012094:	f7ee fd60 	bl	8000b58 <__aeabi_d2iz>
 8012098:	4606      	mov	r6, r0
 801209a:	f7ee fa43 	bl	8000524 <__aeabi_i2d>
 801209e:	4602      	mov	r2, r0
 80120a0:	460b      	mov	r3, r1
 80120a2:	4640      	mov	r0, r8
 80120a4:	4649      	mov	r1, r9
 80120a6:	f7ee f8ef 	bl	8000288 <__aeabi_dsub>
 80120aa:	3630      	adds	r6, #48	; 0x30
 80120ac:	f805 6b01 	strb.w	r6, [r5], #1
 80120b0:	4652      	mov	r2, sl
 80120b2:	465b      	mov	r3, fp
 80120b4:	4680      	mov	r8, r0
 80120b6:	4689      	mov	r9, r1
 80120b8:	f7ee fd10 	bl	8000adc <__aeabi_dcmplt>
 80120bc:	2800      	cmp	r0, #0
 80120be:	d163      	bne.n	8012188 <_dtoa_r+0x608>
 80120c0:	4642      	mov	r2, r8
 80120c2:	464b      	mov	r3, r9
 80120c4:	4936      	ldr	r1, [pc, #216]	; (80121a0 <_dtoa_r+0x620>)
 80120c6:	2000      	movs	r0, #0
 80120c8:	f7ee f8de 	bl	8000288 <__aeabi_dsub>
 80120cc:	4652      	mov	r2, sl
 80120ce:	465b      	mov	r3, fp
 80120d0:	f7ee fd04 	bl	8000adc <__aeabi_dcmplt>
 80120d4:	2800      	cmp	r0, #0
 80120d6:	f040 80b5 	bne.w	8012244 <_dtoa_r+0x6c4>
 80120da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120dc:	429d      	cmp	r5, r3
 80120de:	d081      	beq.n	8011fe4 <_dtoa_r+0x464>
 80120e0:	4b30      	ldr	r3, [pc, #192]	; (80121a4 <_dtoa_r+0x624>)
 80120e2:	2200      	movs	r2, #0
 80120e4:	4650      	mov	r0, sl
 80120e6:	4659      	mov	r1, fp
 80120e8:	f7ee fa86 	bl	80005f8 <__aeabi_dmul>
 80120ec:	4b2d      	ldr	r3, [pc, #180]	; (80121a4 <_dtoa_r+0x624>)
 80120ee:	4682      	mov	sl, r0
 80120f0:	468b      	mov	fp, r1
 80120f2:	4640      	mov	r0, r8
 80120f4:	4649      	mov	r1, r9
 80120f6:	2200      	movs	r2, #0
 80120f8:	f7ee fa7e 	bl	80005f8 <__aeabi_dmul>
 80120fc:	4680      	mov	r8, r0
 80120fe:	4689      	mov	r9, r1
 8012100:	e7c6      	b.n	8012090 <_dtoa_r+0x510>
 8012102:	4650      	mov	r0, sl
 8012104:	4659      	mov	r1, fp
 8012106:	f7ee fa77 	bl	80005f8 <__aeabi_dmul>
 801210a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801210c:	9d01      	ldr	r5, [sp, #4]
 801210e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012110:	4682      	mov	sl, r0
 8012112:	468b      	mov	fp, r1
 8012114:	4649      	mov	r1, r9
 8012116:	4640      	mov	r0, r8
 8012118:	f7ee fd1e 	bl	8000b58 <__aeabi_d2iz>
 801211c:	4606      	mov	r6, r0
 801211e:	f7ee fa01 	bl	8000524 <__aeabi_i2d>
 8012122:	3630      	adds	r6, #48	; 0x30
 8012124:	4602      	mov	r2, r0
 8012126:	460b      	mov	r3, r1
 8012128:	4640      	mov	r0, r8
 801212a:	4649      	mov	r1, r9
 801212c:	f7ee f8ac 	bl	8000288 <__aeabi_dsub>
 8012130:	f805 6b01 	strb.w	r6, [r5], #1
 8012134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012136:	429d      	cmp	r5, r3
 8012138:	4680      	mov	r8, r0
 801213a:	4689      	mov	r9, r1
 801213c:	f04f 0200 	mov.w	r2, #0
 8012140:	d124      	bne.n	801218c <_dtoa_r+0x60c>
 8012142:	4b1b      	ldr	r3, [pc, #108]	; (80121b0 <_dtoa_r+0x630>)
 8012144:	4650      	mov	r0, sl
 8012146:	4659      	mov	r1, fp
 8012148:	f7ee f8a0 	bl	800028c <__adddf3>
 801214c:	4602      	mov	r2, r0
 801214e:	460b      	mov	r3, r1
 8012150:	4640      	mov	r0, r8
 8012152:	4649      	mov	r1, r9
 8012154:	f7ee fce0 	bl	8000b18 <__aeabi_dcmpgt>
 8012158:	2800      	cmp	r0, #0
 801215a:	d173      	bne.n	8012244 <_dtoa_r+0x6c4>
 801215c:	4652      	mov	r2, sl
 801215e:	465b      	mov	r3, fp
 8012160:	4913      	ldr	r1, [pc, #76]	; (80121b0 <_dtoa_r+0x630>)
 8012162:	2000      	movs	r0, #0
 8012164:	f7ee f890 	bl	8000288 <__aeabi_dsub>
 8012168:	4602      	mov	r2, r0
 801216a:	460b      	mov	r3, r1
 801216c:	4640      	mov	r0, r8
 801216e:	4649      	mov	r1, r9
 8012170:	f7ee fcb4 	bl	8000adc <__aeabi_dcmplt>
 8012174:	2800      	cmp	r0, #0
 8012176:	f43f af35 	beq.w	8011fe4 <_dtoa_r+0x464>
 801217a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801217c:	1e6b      	subs	r3, r5, #1
 801217e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012180:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012184:	2b30      	cmp	r3, #48	; 0x30
 8012186:	d0f8      	beq.n	801217a <_dtoa_r+0x5fa>
 8012188:	9700      	str	r7, [sp, #0]
 801218a:	e049      	b.n	8012220 <_dtoa_r+0x6a0>
 801218c:	4b05      	ldr	r3, [pc, #20]	; (80121a4 <_dtoa_r+0x624>)
 801218e:	f7ee fa33 	bl	80005f8 <__aeabi_dmul>
 8012192:	4680      	mov	r8, r0
 8012194:	4689      	mov	r9, r1
 8012196:	e7bd      	b.n	8012114 <_dtoa_r+0x594>
 8012198:	080157a8 	.word	0x080157a8
 801219c:	08015780 	.word	0x08015780
 80121a0:	3ff00000 	.word	0x3ff00000
 80121a4:	40240000 	.word	0x40240000
 80121a8:	401c0000 	.word	0x401c0000
 80121ac:	40140000 	.word	0x40140000
 80121b0:	3fe00000 	.word	0x3fe00000
 80121b4:	9d01      	ldr	r5, [sp, #4]
 80121b6:	4656      	mov	r6, sl
 80121b8:	465f      	mov	r7, fp
 80121ba:	4642      	mov	r2, r8
 80121bc:	464b      	mov	r3, r9
 80121be:	4630      	mov	r0, r6
 80121c0:	4639      	mov	r1, r7
 80121c2:	f7ee fb43 	bl	800084c <__aeabi_ddiv>
 80121c6:	f7ee fcc7 	bl	8000b58 <__aeabi_d2iz>
 80121ca:	4682      	mov	sl, r0
 80121cc:	f7ee f9aa 	bl	8000524 <__aeabi_i2d>
 80121d0:	4642      	mov	r2, r8
 80121d2:	464b      	mov	r3, r9
 80121d4:	f7ee fa10 	bl	80005f8 <__aeabi_dmul>
 80121d8:	4602      	mov	r2, r0
 80121da:	460b      	mov	r3, r1
 80121dc:	4630      	mov	r0, r6
 80121de:	4639      	mov	r1, r7
 80121e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80121e4:	f7ee f850 	bl	8000288 <__aeabi_dsub>
 80121e8:	f805 6b01 	strb.w	r6, [r5], #1
 80121ec:	9e01      	ldr	r6, [sp, #4]
 80121ee:	9f03      	ldr	r7, [sp, #12]
 80121f0:	1bae      	subs	r6, r5, r6
 80121f2:	42b7      	cmp	r7, r6
 80121f4:	4602      	mov	r2, r0
 80121f6:	460b      	mov	r3, r1
 80121f8:	d135      	bne.n	8012266 <_dtoa_r+0x6e6>
 80121fa:	f7ee f847 	bl	800028c <__adddf3>
 80121fe:	4642      	mov	r2, r8
 8012200:	464b      	mov	r3, r9
 8012202:	4606      	mov	r6, r0
 8012204:	460f      	mov	r7, r1
 8012206:	f7ee fc87 	bl	8000b18 <__aeabi_dcmpgt>
 801220a:	b9d0      	cbnz	r0, 8012242 <_dtoa_r+0x6c2>
 801220c:	4642      	mov	r2, r8
 801220e:	464b      	mov	r3, r9
 8012210:	4630      	mov	r0, r6
 8012212:	4639      	mov	r1, r7
 8012214:	f7ee fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 8012218:	b110      	cbz	r0, 8012220 <_dtoa_r+0x6a0>
 801221a:	f01a 0f01 	tst.w	sl, #1
 801221e:	d110      	bne.n	8012242 <_dtoa_r+0x6c2>
 8012220:	4620      	mov	r0, r4
 8012222:	ee18 1a10 	vmov	r1, s16
 8012226:	f000 fe67 	bl	8012ef8 <_Bfree>
 801222a:	2300      	movs	r3, #0
 801222c:	9800      	ldr	r0, [sp, #0]
 801222e:	702b      	strb	r3, [r5, #0]
 8012230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012232:	3001      	adds	r0, #1
 8012234:	6018      	str	r0, [r3, #0]
 8012236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012238:	2b00      	cmp	r3, #0
 801223a:	f43f acf1 	beq.w	8011c20 <_dtoa_r+0xa0>
 801223e:	601d      	str	r5, [r3, #0]
 8012240:	e4ee      	b.n	8011c20 <_dtoa_r+0xa0>
 8012242:	9f00      	ldr	r7, [sp, #0]
 8012244:	462b      	mov	r3, r5
 8012246:	461d      	mov	r5, r3
 8012248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801224c:	2a39      	cmp	r2, #57	; 0x39
 801224e:	d106      	bne.n	801225e <_dtoa_r+0x6de>
 8012250:	9a01      	ldr	r2, [sp, #4]
 8012252:	429a      	cmp	r2, r3
 8012254:	d1f7      	bne.n	8012246 <_dtoa_r+0x6c6>
 8012256:	9901      	ldr	r1, [sp, #4]
 8012258:	2230      	movs	r2, #48	; 0x30
 801225a:	3701      	adds	r7, #1
 801225c:	700a      	strb	r2, [r1, #0]
 801225e:	781a      	ldrb	r2, [r3, #0]
 8012260:	3201      	adds	r2, #1
 8012262:	701a      	strb	r2, [r3, #0]
 8012264:	e790      	b.n	8012188 <_dtoa_r+0x608>
 8012266:	4ba6      	ldr	r3, [pc, #664]	; (8012500 <_dtoa_r+0x980>)
 8012268:	2200      	movs	r2, #0
 801226a:	f7ee f9c5 	bl	80005f8 <__aeabi_dmul>
 801226e:	2200      	movs	r2, #0
 8012270:	2300      	movs	r3, #0
 8012272:	4606      	mov	r6, r0
 8012274:	460f      	mov	r7, r1
 8012276:	f7ee fc27 	bl	8000ac8 <__aeabi_dcmpeq>
 801227a:	2800      	cmp	r0, #0
 801227c:	d09d      	beq.n	80121ba <_dtoa_r+0x63a>
 801227e:	e7cf      	b.n	8012220 <_dtoa_r+0x6a0>
 8012280:	9a08      	ldr	r2, [sp, #32]
 8012282:	2a00      	cmp	r2, #0
 8012284:	f000 80d7 	beq.w	8012436 <_dtoa_r+0x8b6>
 8012288:	9a06      	ldr	r2, [sp, #24]
 801228a:	2a01      	cmp	r2, #1
 801228c:	f300 80ba 	bgt.w	8012404 <_dtoa_r+0x884>
 8012290:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012292:	2a00      	cmp	r2, #0
 8012294:	f000 80b2 	beq.w	80123fc <_dtoa_r+0x87c>
 8012298:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801229c:	9e07      	ldr	r6, [sp, #28]
 801229e:	9d04      	ldr	r5, [sp, #16]
 80122a0:	9a04      	ldr	r2, [sp, #16]
 80122a2:	441a      	add	r2, r3
 80122a4:	9204      	str	r2, [sp, #16]
 80122a6:	9a05      	ldr	r2, [sp, #20]
 80122a8:	2101      	movs	r1, #1
 80122aa:	441a      	add	r2, r3
 80122ac:	4620      	mov	r0, r4
 80122ae:	9205      	str	r2, [sp, #20]
 80122b0:	f000 ff24 	bl	80130fc <__i2b>
 80122b4:	4607      	mov	r7, r0
 80122b6:	2d00      	cmp	r5, #0
 80122b8:	dd0c      	ble.n	80122d4 <_dtoa_r+0x754>
 80122ba:	9b05      	ldr	r3, [sp, #20]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	dd09      	ble.n	80122d4 <_dtoa_r+0x754>
 80122c0:	42ab      	cmp	r3, r5
 80122c2:	9a04      	ldr	r2, [sp, #16]
 80122c4:	bfa8      	it	ge
 80122c6:	462b      	movge	r3, r5
 80122c8:	1ad2      	subs	r2, r2, r3
 80122ca:	9204      	str	r2, [sp, #16]
 80122cc:	9a05      	ldr	r2, [sp, #20]
 80122ce:	1aed      	subs	r5, r5, r3
 80122d0:	1ad3      	subs	r3, r2, r3
 80122d2:	9305      	str	r3, [sp, #20]
 80122d4:	9b07      	ldr	r3, [sp, #28]
 80122d6:	b31b      	cbz	r3, 8012320 <_dtoa_r+0x7a0>
 80122d8:	9b08      	ldr	r3, [sp, #32]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	f000 80af 	beq.w	801243e <_dtoa_r+0x8be>
 80122e0:	2e00      	cmp	r6, #0
 80122e2:	dd13      	ble.n	801230c <_dtoa_r+0x78c>
 80122e4:	4639      	mov	r1, r7
 80122e6:	4632      	mov	r2, r6
 80122e8:	4620      	mov	r0, r4
 80122ea:	f000 ffc7 	bl	801327c <__pow5mult>
 80122ee:	ee18 2a10 	vmov	r2, s16
 80122f2:	4601      	mov	r1, r0
 80122f4:	4607      	mov	r7, r0
 80122f6:	4620      	mov	r0, r4
 80122f8:	f000 ff16 	bl	8013128 <__multiply>
 80122fc:	ee18 1a10 	vmov	r1, s16
 8012300:	4680      	mov	r8, r0
 8012302:	4620      	mov	r0, r4
 8012304:	f000 fdf8 	bl	8012ef8 <_Bfree>
 8012308:	ee08 8a10 	vmov	s16, r8
 801230c:	9b07      	ldr	r3, [sp, #28]
 801230e:	1b9a      	subs	r2, r3, r6
 8012310:	d006      	beq.n	8012320 <_dtoa_r+0x7a0>
 8012312:	ee18 1a10 	vmov	r1, s16
 8012316:	4620      	mov	r0, r4
 8012318:	f000 ffb0 	bl	801327c <__pow5mult>
 801231c:	ee08 0a10 	vmov	s16, r0
 8012320:	2101      	movs	r1, #1
 8012322:	4620      	mov	r0, r4
 8012324:	f000 feea 	bl	80130fc <__i2b>
 8012328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801232a:	2b00      	cmp	r3, #0
 801232c:	4606      	mov	r6, r0
 801232e:	f340 8088 	ble.w	8012442 <_dtoa_r+0x8c2>
 8012332:	461a      	mov	r2, r3
 8012334:	4601      	mov	r1, r0
 8012336:	4620      	mov	r0, r4
 8012338:	f000 ffa0 	bl	801327c <__pow5mult>
 801233c:	9b06      	ldr	r3, [sp, #24]
 801233e:	2b01      	cmp	r3, #1
 8012340:	4606      	mov	r6, r0
 8012342:	f340 8081 	ble.w	8012448 <_dtoa_r+0x8c8>
 8012346:	f04f 0800 	mov.w	r8, #0
 801234a:	6933      	ldr	r3, [r6, #16]
 801234c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012350:	6918      	ldr	r0, [r3, #16]
 8012352:	f000 fe83 	bl	801305c <__hi0bits>
 8012356:	f1c0 0020 	rsb	r0, r0, #32
 801235a:	9b05      	ldr	r3, [sp, #20]
 801235c:	4418      	add	r0, r3
 801235e:	f010 001f 	ands.w	r0, r0, #31
 8012362:	f000 8092 	beq.w	801248a <_dtoa_r+0x90a>
 8012366:	f1c0 0320 	rsb	r3, r0, #32
 801236a:	2b04      	cmp	r3, #4
 801236c:	f340 808a 	ble.w	8012484 <_dtoa_r+0x904>
 8012370:	f1c0 001c 	rsb	r0, r0, #28
 8012374:	9b04      	ldr	r3, [sp, #16]
 8012376:	4403      	add	r3, r0
 8012378:	9304      	str	r3, [sp, #16]
 801237a:	9b05      	ldr	r3, [sp, #20]
 801237c:	4403      	add	r3, r0
 801237e:	4405      	add	r5, r0
 8012380:	9305      	str	r3, [sp, #20]
 8012382:	9b04      	ldr	r3, [sp, #16]
 8012384:	2b00      	cmp	r3, #0
 8012386:	dd07      	ble.n	8012398 <_dtoa_r+0x818>
 8012388:	ee18 1a10 	vmov	r1, s16
 801238c:	461a      	mov	r2, r3
 801238e:	4620      	mov	r0, r4
 8012390:	f000 ffce 	bl	8013330 <__lshift>
 8012394:	ee08 0a10 	vmov	s16, r0
 8012398:	9b05      	ldr	r3, [sp, #20]
 801239a:	2b00      	cmp	r3, #0
 801239c:	dd05      	ble.n	80123aa <_dtoa_r+0x82a>
 801239e:	4631      	mov	r1, r6
 80123a0:	461a      	mov	r2, r3
 80123a2:	4620      	mov	r0, r4
 80123a4:	f000 ffc4 	bl	8013330 <__lshift>
 80123a8:	4606      	mov	r6, r0
 80123aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d06e      	beq.n	801248e <_dtoa_r+0x90e>
 80123b0:	ee18 0a10 	vmov	r0, s16
 80123b4:	4631      	mov	r1, r6
 80123b6:	f001 f82b 	bl	8013410 <__mcmp>
 80123ba:	2800      	cmp	r0, #0
 80123bc:	da67      	bge.n	801248e <_dtoa_r+0x90e>
 80123be:	9b00      	ldr	r3, [sp, #0]
 80123c0:	3b01      	subs	r3, #1
 80123c2:	ee18 1a10 	vmov	r1, s16
 80123c6:	9300      	str	r3, [sp, #0]
 80123c8:	220a      	movs	r2, #10
 80123ca:	2300      	movs	r3, #0
 80123cc:	4620      	mov	r0, r4
 80123ce:	f000 fdb5 	bl	8012f3c <__multadd>
 80123d2:	9b08      	ldr	r3, [sp, #32]
 80123d4:	ee08 0a10 	vmov	s16, r0
 80123d8:	2b00      	cmp	r3, #0
 80123da:	f000 81b1 	beq.w	8012740 <_dtoa_r+0xbc0>
 80123de:	2300      	movs	r3, #0
 80123e0:	4639      	mov	r1, r7
 80123e2:	220a      	movs	r2, #10
 80123e4:	4620      	mov	r0, r4
 80123e6:	f000 fda9 	bl	8012f3c <__multadd>
 80123ea:	9b02      	ldr	r3, [sp, #8]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	4607      	mov	r7, r0
 80123f0:	f300 808e 	bgt.w	8012510 <_dtoa_r+0x990>
 80123f4:	9b06      	ldr	r3, [sp, #24]
 80123f6:	2b02      	cmp	r3, #2
 80123f8:	dc51      	bgt.n	801249e <_dtoa_r+0x91e>
 80123fa:	e089      	b.n	8012510 <_dtoa_r+0x990>
 80123fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80123fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012402:	e74b      	b.n	801229c <_dtoa_r+0x71c>
 8012404:	9b03      	ldr	r3, [sp, #12]
 8012406:	1e5e      	subs	r6, r3, #1
 8012408:	9b07      	ldr	r3, [sp, #28]
 801240a:	42b3      	cmp	r3, r6
 801240c:	bfbf      	itttt	lt
 801240e:	9b07      	ldrlt	r3, [sp, #28]
 8012410:	9607      	strlt	r6, [sp, #28]
 8012412:	1af2      	sublt	r2, r6, r3
 8012414:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012416:	bfb6      	itet	lt
 8012418:	189b      	addlt	r3, r3, r2
 801241a:	1b9e      	subge	r6, r3, r6
 801241c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801241e:	9b03      	ldr	r3, [sp, #12]
 8012420:	bfb8      	it	lt
 8012422:	2600      	movlt	r6, #0
 8012424:	2b00      	cmp	r3, #0
 8012426:	bfb7      	itett	lt
 8012428:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801242c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012430:	1a9d      	sublt	r5, r3, r2
 8012432:	2300      	movlt	r3, #0
 8012434:	e734      	b.n	80122a0 <_dtoa_r+0x720>
 8012436:	9e07      	ldr	r6, [sp, #28]
 8012438:	9d04      	ldr	r5, [sp, #16]
 801243a:	9f08      	ldr	r7, [sp, #32]
 801243c:	e73b      	b.n	80122b6 <_dtoa_r+0x736>
 801243e:	9a07      	ldr	r2, [sp, #28]
 8012440:	e767      	b.n	8012312 <_dtoa_r+0x792>
 8012442:	9b06      	ldr	r3, [sp, #24]
 8012444:	2b01      	cmp	r3, #1
 8012446:	dc18      	bgt.n	801247a <_dtoa_r+0x8fa>
 8012448:	f1ba 0f00 	cmp.w	sl, #0
 801244c:	d115      	bne.n	801247a <_dtoa_r+0x8fa>
 801244e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012452:	b993      	cbnz	r3, 801247a <_dtoa_r+0x8fa>
 8012454:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012458:	0d1b      	lsrs	r3, r3, #20
 801245a:	051b      	lsls	r3, r3, #20
 801245c:	b183      	cbz	r3, 8012480 <_dtoa_r+0x900>
 801245e:	9b04      	ldr	r3, [sp, #16]
 8012460:	3301      	adds	r3, #1
 8012462:	9304      	str	r3, [sp, #16]
 8012464:	9b05      	ldr	r3, [sp, #20]
 8012466:	3301      	adds	r3, #1
 8012468:	9305      	str	r3, [sp, #20]
 801246a:	f04f 0801 	mov.w	r8, #1
 801246e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012470:	2b00      	cmp	r3, #0
 8012472:	f47f af6a 	bne.w	801234a <_dtoa_r+0x7ca>
 8012476:	2001      	movs	r0, #1
 8012478:	e76f      	b.n	801235a <_dtoa_r+0x7da>
 801247a:	f04f 0800 	mov.w	r8, #0
 801247e:	e7f6      	b.n	801246e <_dtoa_r+0x8ee>
 8012480:	4698      	mov	r8, r3
 8012482:	e7f4      	b.n	801246e <_dtoa_r+0x8ee>
 8012484:	f43f af7d 	beq.w	8012382 <_dtoa_r+0x802>
 8012488:	4618      	mov	r0, r3
 801248a:	301c      	adds	r0, #28
 801248c:	e772      	b.n	8012374 <_dtoa_r+0x7f4>
 801248e:	9b03      	ldr	r3, [sp, #12]
 8012490:	2b00      	cmp	r3, #0
 8012492:	dc37      	bgt.n	8012504 <_dtoa_r+0x984>
 8012494:	9b06      	ldr	r3, [sp, #24]
 8012496:	2b02      	cmp	r3, #2
 8012498:	dd34      	ble.n	8012504 <_dtoa_r+0x984>
 801249a:	9b03      	ldr	r3, [sp, #12]
 801249c:	9302      	str	r3, [sp, #8]
 801249e:	9b02      	ldr	r3, [sp, #8]
 80124a0:	b96b      	cbnz	r3, 80124be <_dtoa_r+0x93e>
 80124a2:	4631      	mov	r1, r6
 80124a4:	2205      	movs	r2, #5
 80124a6:	4620      	mov	r0, r4
 80124a8:	f000 fd48 	bl	8012f3c <__multadd>
 80124ac:	4601      	mov	r1, r0
 80124ae:	4606      	mov	r6, r0
 80124b0:	ee18 0a10 	vmov	r0, s16
 80124b4:	f000 ffac 	bl	8013410 <__mcmp>
 80124b8:	2800      	cmp	r0, #0
 80124ba:	f73f adbb 	bgt.w	8012034 <_dtoa_r+0x4b4>
 80124be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124c0:	9d01      	ldr	r5, [sp, #4]
 80124c2:	43db      	mvns	r3, r3
 80124c4:	9300      	str	r3, [sp, #0]
 80124c6:	f04f 0800 	mov.w	r8, #0
 80124ca:	4631      	mov	r1, r6
 80124cc:	4620      	mov	r0, r4
 80124ce:	f000 fd13 	bl	8012ef8 <_Bfree>
 80124d2:	2f00      	cmp	r7, #0
 80124d4:	f43f aea4 	beq.w	8012220 <_dtoa_r+0x6a0>
 80124d8:	f1b8 0f00 	cmp.w	r8, #0
 80124dc:	d005      	beq.n	80124ea <_dtoa_r+0x96a>
 80124de:	45b8      	cmp	r8, r7
 80124e0:	d003      	beq.n	80124ea <_dtoa_r+0x96a>
 80124e2:	4641      	mov	r1, r8
 80124e4:	4620      	mov	r0, r4
 80124e6:	f000 fd07 	bl	8012ef8 <_Bfree>
 80124ea:	4639      	mov	r1, r7
 80124ec:	4620      	mov	r0, r4
 80124ee:	f000 fd03 	bl	8012ef8 <_Bfree>
 80124f2:	e695      	b.n	8012220 <_dtoa_r+0x6a0>
 80124f4:	2600      	movs	r6, #0
 80124f6:	4637      	mov	r7, r6
 80124f8:	e7e1      	b.n	80124be <_dtoa_r+0x93e>
 80124fa:	9700      	str	r7, [sp, #0]
 80124fc:	4637      	mov	r7, r6
 80124fe:	e599      	b.n	8012034 <_dtoa_r+0x4b4>
 8012500:	40240000 	.word	0x40240000
 8012504:	9b08      	ldr	r3, [sp, #32]
 8012506:	2b00      	cmp	r3, #0
 8012508:	f000 80ca 	beq.w	80126a0 <_dtoa_r+0xb20>
 801250c:	9b03      	ldr	r3, [sp, #12]
 801250e:	9302      	str	r3, [sp, #8]
 8012510:	2d00      	cmp	r5, #0
 8012512:	dd05      	ble.n	8012520 <_dtoa_r+0x9a0>
 8012514:	4639      	mov	r1, r7
 8012516:	462a      	mov	r2, r5
 8012518:	4620      	mov	r0, r4
 801251a:	f000 ff09 	bl	8013330 <__lshift>
 801251e:	4607      	mov	r7, r0
 8012520:	f1b8 0f00 	cmp.w	r8, #0
 8012524:	d05b      	beq.n	80125de <_dtoa_r+0xa5e>
 8012526:	6879      	ldr	r1, [r7, #4]
 8012528:	4620      	mov	r0, r4
 801252a:	f000 fca5 	bl	8012e78 <_Balloc>
 801252e:	4605      	mov	r5, r0
 8012530:	b928      	cbnz	r0, 801253e <_dtoa_r+0x9be>
 8012532:	4b87      	ldr	r3, [pc, #540]	; (8012750 <_dtoa_r+0xbd0>)
 8012534:	4602      	mov	r2, r0
 8012536:	f240 21ea 	movw	r1, #746	; 0x2ea
 801253a:	f7ff bb3b 	b.w	8011bb4 <_dtoa_r+0x34>
 801253e:	693a      	ldr	r2, [r7, #16]
 8012540:	3202      	adds	r2, #2
 8012542:	0092      	lsls	r2, r2, #2
 8012544:	f107 010c 	add.w	r1, r7, #12
 8012548:	300c      	adds	r0, #12
 801254a:	f7fd fd29 	bl	800ffa0 <memcpy>
 801254e:	2201      	movs	r2, #1
 8012550:	4629      	mov	r1, r5
 8012552:	4620      	mov	r0, r4
 8012554:	f000 feec 	bl	8013330 <__lshift>
 8012558:	9b01      	ldr	r3, [sp, #4]
 801255a:	f103 0901 	add.w	r9, r3, #1
 801255e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012562:	4413      	add	r3, r2
 8012564:	9305      	str	r3, [sp, #20]
 8012566:	f00a 0301 	and.w	r3, sl, #1
 801256a:	46b8      	mov	r8, r7
 801256c:	9304      	str	r3, [sp, #16]
 801256e:	4607      	mov	r7, r0
 8012570:	4631      	mov	r1, r6
 8012572:	ee18 0a10 	vmov	r0, s16
 8012576:	f7ff fa77 	bl	8011a68 <quorem>
 801257a:	4641      	mov	r1, r8
 801257c:	9002      	str	r0, [sp, #8]
 801257e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012582:	ee18 0a10 	vmov	r0, s16
 8012586:	f000 ff43 	bl	8013410 <__mcmp>
 801258a:	463a      	mov	r2, r7
 801258c:	9003      	str	r0, [sp, #12]
 801258e:	4631      	mov	r1, r6
 8012590:	4620      	mov	r0, r4
 8012592:	f000 ff59 	bl	8013448 <__mdiff>
 8012596:	68c2      	ldr	r2, [r0, #12]
 8012598:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801259c:	4605      	mov	r5, r0
 801259e:	bb02      	cbnz	r2, 80125e2 <_dtoa_r+0xa62>
 80125a0:	4601      	mov	r1, r0
 80125a2:	ee18 0a10 	vmov	r0, s16
 80125a6:	f000 ff33 	bl	8013410 <__mcmp>
 80125aa:	4602      	mov	r2, r0
 80125ac:	4629      	mov	r1, r5
 80125ae:	4620      	mov	r0, r4
 80125b0:	9207      	str	r2, [sp, #28]
 80125b2:	f000 fca1 	bl	8012ef8 <_Bfree>
 80125b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80125ba:	ea43 0102 	orr.w	r1, r3, r2
 80125be:	9b04      	ldr	r3, [sp, #16]
 80125c0:	430b      	orrs	r3, r1
 80125c2:	464d      	mov	r5, r9
 80125c4:	d10f      	bne.n	80125e6 <_dtoa_r+0xa66>
 80125c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80125ca:	d02a      	beq.n	8012622 <_dtoa_r+0xaa2>
 80125cc:	9b03      	ldr	r3, [sp, #12]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	dd02      	ble.n	80125d8 <_dtoa_r+0xa58>
 80125d2:	9b02      	ldr	r3, [sp, #8]
 80125d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80125d8:	f88b a000 	strb.w	sl, [fp]
 80125dc:	e775      	b.n	80124ca <_dtoa_r+0x94a>
 80125de:	4638      	mov	r0, r7
 80125e0:	e7ba      	b.n	8012558 <_dtoa_r+0x9d8>
 80125e2:	2201      	movs	r2, #1
 80125e4:	e7e2      	b.n	80125ac <_dtoa_r+0xa2c>
 80125e6:	9b03      	ldr	r3, [sp, #12]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	db04      	blt.n	80125f6 <_dtoa_r+0xa76>
 80125ec:	9906      	ldr	r1, [sp, #24]
 80125ee:	430b      	orrs	r3, r1
 80125f0:	9904      	ldr	r1, [sp, #16]
 80125f2:	430b      	orrs	r3, r1
 80125f4:	d122      	bne.n	801263c <_dtoa_r+0xabc>
 80125f6:	2a00      	cmp	r2, #0
 80125f8:	ddee      	ble.n	80125d8 <_dtoa_r+0xa58>
 80125fa:	ee18 1a10 	vmov	r1, s16
 80125fe:	2201      	movs	r2, #1
 8012600:	4620      	mov	r0, r4
 8012602:	f000 fe95 	bl	8013330 <__lshift>
 8012606:	4631      	mov	r1, r6
 8012608:	ee08 0a10 	vmov	s16, r0
 801260c:	f000 ff00 	bl	8013410 <__mcmp>
 8012610:	2800      	cmp	r0, #0
 8012612:	dc03      	bgt.n	801261c <_dtoa_r+0xa9c>
 8012614:	d1e0      	bne.n	80125d8 <_dtoa_r+0xa58>
 8012616:	f01a 0f01 	tst.w	sl, #1
 801261a:	d0dd      	beq.n	80125d8 <_dtoa_r+0xa58>
 801261c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012620:	d1d7      	bne.n	80125d2 <_dtoa_r+0xa52>
 8012622:	2339      	movs	r3, #57	; 0x39
 8012624:	f88b 3000 	strb.w	r3, [fp]
 8012628:	462b      	mov	r3, r5
 801262a:	461d      	mov	r5, r3
 801262c:	3b01      	subs	r3, #1
 801262e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012632:	2a39      	cmp	r2, #57	; 0x39
 8012634:	d071      	beq.n	801271a <_dtoa_r+0xb9a>
 8012636:	3201      	adds	r2, #1
 8012638:	701a      	strb	r2, [r3, #0]
 801263a:	e746      	b.n	80124ca <_dtoa_r+0x94a>
 801263c:	2a00      	cmp	r2, #0
 801263e:	dd07      	ble.n	8012650 <_dtoa_r+0xad0>
 8012640:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012644:	d0ed      	beq.n	8012622 <_dtoa_r+0xaa2>
 8012646:	f10a 0301 	add.w	r3, sl, #1
 801264a:	f88b 3000 	strb.w	r3, [fp]
 801264e:	e73c      	b.n	80124ca <_dtoa_r+0x94a>
 8012650:	9b05      	ldr	r3, [sp, #20]
 8012652:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012656:	4599      	cmp	r9, r3
 8012658:	d047      	beq.n	80126ea <_dtoa_r+0xb6a>
 801265a:	ee18 1a10 	vmov	r1, s16
 801265e:	2300      	movs	r3, #0
 8012660:	220a      	movs	r2, #10
 8012662:	4620      	mov	r0, r4
 8012664:	f000 fc6a 	bl	8012f3c <__multadd>
 8012668:	45b8      	cmp	r8, r7
 801266a:	ee08 0a10 	vmov	s16, r0
 801266e:	f04f 0300 	mov.w	r3, #0
 8012672:	f04f 020a 	mov.w	r2, #10
 8012676:	4641      	mov	r1, r8
 8012678:	4620      	mov	r0, r4
 801267a:	d106      	bne.n	801268a <_dtoa_r+0xb0a>
 801267c:	f000 fc5e 	bl	8012f3c <__multadd>
 8012680:	4680      	mov	r8, r0
 8012682:	4607      	mov	r7, r0
 8012684:	f109 0901 	add.w	r9, r9, #1
 8012688:	e772      	b.n	8012570 <_dtoa_r+0x9f0>
 801268a:	f000 fc57 	bl	8012f3c <__multadd>
 801268e:	4639      	mov	r1, r7
 8012690:	4680      	mov	r8, r0
 8012692:	2300      	movs	r3, #0
 8012694:	220a      	movs	r2, #10
 8012696:	4620      	mov	r0, r4
 8012698:	f000 fc50 	bl	8012f3c <__multadd>
 801269c:	4607      	mov	r7, r0
 801269e:	e7f1      	b.n	8012684 <_dtoa_r+0xb04>
 80126a0:	9b03      	ldr	r3, [sp, #12]
 80126a2:	9302      	str	r3, [sp, #8]
 80126a4:	9d01      	ldr	r5, [sp, #4]
 80126a6:	ee18 0a10 	vmov	r0, s16
 80126aa:	4631      	mov	r1, r6
 80126ac:	f7ff f9dc 	bl	8011a68 <quorem>
 80126b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80126b4:	9b01      	ldr	r3, [sp, #4]
 80126b6:	f805 ab01 	strb.w	sl, [r5], #1
 80126ba:	1aea      	subs	r2, r5, r3
 80126bc:	9b02      	ldr	r3, [sp, #8]
 80126be:	4293      	cmp	r3, r2
 80126c0:	dd09      	ble.n	80126d6 <_dtoa_r+0xb56>
 80126c2:	ee18 1a10 	vmov	r1, s16
 80126c6:	2300      	movs	r3, #0
 80126c8:	220a      	movs	r2, #10
 80126ca:	4620      	mov	r0, r4
 80126cc:	f000 fc36 	bl	8012f3c <__multadd>
 80126d0:	ee08 0a10 	vmov	s16, r0
 80126d4:	e7e7      	b.n	80126a6 <_dtoa_r+0xb26>
 80126d6:	9b02      	ldr	r3, [sp, #8]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	bfc8      	it	gt
 80126dc:	461d      	movgt	r5, r3
 80126de:	9b01      	ldr	r3, [sp, #4]
 80126e0:	bfd8      	it	le
 80126e2:	2501      	movle	r5, #1
 80126e4:	441d      	add	r5, r3
 80126e6:	f04f 0800 	mov.w	r8, #0
 80126ea:	ee18 1a10 	vmov	r1, s16
 80126ee:	2201      	movs	r2, #1
 80126f0:	4620      	mov	r0, r4
 80126f2:	f000 fe1d 	bl	8013330 <__lshift>
 80126f6:	4631      	mov	r1, r6
 80126f8:	ee08 0a10 	vmov	s16, r0
 80126fc:	f000 fe88 	bl	8013410 <__mcmp>
 8012700:	2800      	cmp	r0, #0
 8012702:	dc91      	bgt.n	8012628 <_dtoa_r+0xaa8>
 8012704:	d102      	bne.n	801270c <_dtoa_r+0xb8c>
 8012706:	f01a 0f01 	tst.w	sl, #1
 801270a:	d18d      	bne.n	8012628 <_dtoa_r+0xaa8>
 801270c:	462b      	mov	r3, r5
 801270e:	461d      	mov	r5, r3
 8012710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012714:	2a30      	cmp	r2, #48	; 0x30
 8012716:	d0fa      	beq.n	801270e <_dtoa_r+0xb8e>
 8012718:	e6d7      	b.n	80124ca <_dtoa_r+0x94a>
 801271a:	9a01      	ldr	r2, [sp, #4]
 801271c:	429a      	cmp	r2, r3
 801271e:	d184      	bne.n	801262a <_dtoa_r+0xaaa>
 8012720:	9b00      	ldr	r3, [sp, #0]
 8012722:	3301      	adds	r3, #1
 8012724:	9300      	str	r3, [sp, #0]
 8012726:	2331      	movs	r3, #49	; 0x31
 8012728:	7013      	strb	r3, [r2, #0]
 801272a:	e6ce      	b.n	80124ca <_dtoa_r+0x94a>
 801272c:	4b09      	ldr	r3, [pc, #36]	; (8012754 <_dtoa_r+0xbd4>)
 801272e:	f7ff ba95 	b.w	8011c5c <_dtoa_r+0xdc>
 8012732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012734:	2b00      	cmp	r3, #0
 8012736:	f47f aa6e 	bne.w	8011c16 <_dtoa_r+0x96>
 801273a:	4b07      	ldr	r3, [pc, #28]	; (8012758 <_dtoa_r+0xbd8>)
 801273c:	f7ff ba8e 	b.w	8011c5c <_dtoa_r+0xdc>
 8012740:	9b02      	ldr	r3, [sp, #8]
 8012742:	2b00      	cmp	r3, #0
 8012744:	dcae      	bgt.n	80126a4 <_dtoa_r+0xb24>
 8012746:	9b06      	ldr	r3, [sp, #24]
 8012748:	2b02      	cmp	r3, #2
 801274a:	f73f aea8 	bgt.w	801249e <_dtoa_r+0x91e>
 801274e:	e7a9      	b.n	80126a4 <_dtoa_r+0xb24>
 8012750:	08015698 	.word	0x08015698
 8012754:	0801549c 	.word	0x0801549c
 8012758:	08015619 	.word	0x08015619

0801275c <rshift>:
 801275c:	6903      	ldr	r3, [r0, #16]
 801275e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012762:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012766:	ea4f 1261 	mov.w	r2, r1, asr #5
 801276a:	f100 0414 	add.w	r4, r0, #20
 801276e:	dd45      	ble.n	80127fc <rshift+0xa0>
 8012770:	f011 011f 	ands.w	r1, r1, #31
 8012774:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012778:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801277c:	d10c      	bne.n	8012798 <rshift+0x3c>
 801277e:	f100 0710 	add.w	r7, r0, #16
 8012782:	4629      	mov	r1, r5
 8012784:	42b1      	cmp	r1, r6
 8012786:	d334      	bcc.n	80127f2 <rshift+0x96>
 8012788:	1a9b      	subs	r3, r3, r2
 801278a:	009b      	lsls	r3, r3, #2
 801278c:	1eea      	subs	r2, r5, #3
 801278e:	4296      	cmp	r6, r2
 8012790:	bf38      	it	cc
 8012792:	2300      	movcc	r3, #0
 8012794:	4423      	add	r3, r4
 8012796:	e015      	b.n	80127c4 <rshift+0x68>
 8012798:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801279c:	f1c1 0820 	rsb	r8, r1, #32
 80127a0:	40cf      	lsrs	r7, r1
 80127a2:	f105 0e04 	add.w	lr, r5, #4
 80127a6:	46a1      	mov	r9, r4
 80127a8:	4576      	cmp	r6, lr
 80127aa:	46f4      	mov	ip, lr
 80127ac:	d815      	bhi.n	80127da <rshift+0x7e>
 80127ae:	1a9a      	subs	r2, r3, r2
 80127b0:	0092      	lsls	r2, r2, #2
 80127b2:	3a04      	subs	r2, #4
 80127b4:	3501      	adds	r5, #1
 80127b6:	42ae      	cmp	r6, r5
 80127b8:	bf38      	it	cc
 80127ba:	2200      	movcc	r2, #0
 80127bc:	18a3      	adds	r3, r4, r2
 80127be:	50a7      	str	r7, [r4, r2]
 80127c0:	b107      	cbz	r7, 80127c4 <rshift+0x68>
 80127c2:	3304      	adds	r3, #4
 80127c4:	1b1a      	subs	r2, r3, r4
 80127c6:	42a3      	cmp	r3, r4
 80127c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80127cc:	bf08      	it	eq
 80127ce:	2300      	moveq	r3, #0
 80127d0:	6102      	str	r2, [r0, #16]
 80127d2:	bf08      	it	eq
 80127d4:	6143      	streq	r3, [r0, #20]
 80127d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127da:	f8dc c000 	ldr.w	ip, [ip]
 80127de:	fa0c fc08 	lsl.w	ip, ip, r8
 80127e2:	ea4c 0707 	orr.w	r7, ip, r7
 80127e6:	f849 7b04 	str.w	r7, [r9], #4
 80127ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80127ee:	40cf      	lsrs	r7, r1
 80127f0:	e7da      	b.n	80127a8 <rshift+0x4c>
 80127f2:	f851 cb04 	ldr.w	ip, [r1], #4
 80127f6:	f847 cf04 	str.w	ip, [r7, #4]!
 80127fa:	e7c3      	b.n	8012784 <rshift+0x28>
 80127fc:	4623      	mov	r3, r4
 80127fe:	e7e1      	b.n	80127c4 <rshift+0x68>

08012800 <__hexdig_fun>:
 8012800:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012804:	2b09      	cmp	r3, #9
 8012806:	d802      	bhi.n	801280e <__hexdig_fun+0xe>
 8012808:	3820      	subs	r0, #32
 801280a:	b2c0      	uxtb	r0, r0
 801280c:	4770      	bx	lr
 801280e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012812:	2b05      	cmp	r3, #5
 8012814:	d801      	bhi.n	801281a <__hexdig_fun+0x1a>
 8012816:	3847      	subs	r0, #71	; 0x47
 8012818:	e7f7      	b.n	801280a <__hexdig_fun+0xa>
 801281a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801281e:	2b05      	cmp	r3, #5
 8012820:	d801      	bhi.n	8012826 <__hexdig_fun+0x26>
 8012822:	3827      	subs	r0, #39	; 0x27
 8012824:	e7f1      	b.n	801280a <__hexdig_fun+0xa>
 8012826:	2000      	movs	r0, #0
 8012828:	4770      	bx	lr
	...

0801282c <__gethex>:
 801282c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012830:	ed2d 8b02 	vpush	{d8}
 8012834:	b089      	sub	sp, #36	; 0x24
 8012836:	ee08 0a10 	vmov	s16, r0
 801283a:	9304      	str	r3, [sp, #16]
 801283c:	4bb4      	ldr	r3, [pc, #720]	; (8012b10 <__gethex+0x2e4>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	9301      	str	r3, [sp, #4]
 8012842:	4618      	mov	r0, r3
 8012844:	468b      	mov	fp, r1
 8012846:	4690      	mov	r8, r2
 8012848:	f7ed fcc2 	bl	80001d0 <strlen>
 801284c:	9b01      	ldr	r3, [sp, #4]
 801284e:	f8db 2000 	ldr.w	r2, [fp]
 8012852:	4403      	add	r3, r0
 8012854:	4682      	mov	sl, r0
 8012856:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801285a:	9305      	str	r3, [sp, #20]
 801285c:	1c93      	adds	r3, r2, #2
 801285e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012862:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012866:	32fe      	adds	r2, #254	; 0xfe
 8012868:	18d1      	adds	r1, r2, r3
 801286a:	461f      	mov	r7, r3
 801286c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012870:	9100      	str	r1, [sp, #0]
 8012872:	2830      	cmp	r0, #48	; 0x30
 8012874:	d0f8      	beq.n	8012868 <__gethex+0x3c>
 8012876:	f7ff ffc3 	bl	8012800 <__hexdig_fun>
 801287a:	4604      	mov	r4, r0
 801287c:	2800      	cmp	r0, #0
 801287e:	d13a      	bne.n	80128f6 <__gethex+0xca>
 8012880:	9901      	ldr	r1, [sp, #4]
 8012882:	4652      	mov	r2, sl
 8012884:	4638      	mov	r0, r7
 8012886:	f001 fa23 	bl	8013cd0 <strncmp>
 801288a:	4605      	mov	r5, r0
 801288c:	2800      	cmp	r0, #0
 801288e:	d168      	bne.n	8012962 <__gethex+0x136>
 8012890:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012894:	eb07 060a 	add.w	r6, r7, sl
 8012898:	f7ff ffb2 	bl	8012800 <__hexdig_fun>
 801289c:	2800      	cmp	r0, #0
 801289e:	d062      	beq.n	8012966 <__gethex+0x13a>
 80128a0:	4633      	mov	r3, r6
 80128a2:	7818      	ldrb	r0, [r3, #0]
 80128a4:	2830      	cmp	r0, #48	; 0x30
 80128a6:	461f      	mov	r7, r3
 80128a8:	f103 0301 	add.w	r3, r3, #1
 80128ac:	d0f9      	beq.n	80128a2 <__gethex+0x76>
 80128ae:	f7ff ffa7 	bl	8012800 <__hexdig_fun>
 80128b2:	2301      	movs	r3, #1
 80128b4:	fab0 f480 	clz	r4, r0
 80128b8:	0964      	lsrs	r4, r4, #5
 80128ba:	4635      	mov	r5, r6
 80128bc:	9300      	str	r3, [sp, #0]
 80128be:	463a      	mov	r2, r7
 80128c0:	4616      	mov	r6, r2
 80128c2:	3201      	adds	r2, #1
 80128c4:	7830      	ldrb	r0, [r6, #0]
 80128c6:	f7ff ff9b 	bl	8012800 <__hexdig_fun>
 80128ca:	2800      	cmp	r0, #0
 80128cc:	d1f8      	bne.n	80128c0 <__gethex+0x94>
 80128ce:	9901      	ldr	r1, [sp, #4]
 80128d0:	4652      	mov	r2, sl
 80128d2:	4630      	mov	r0, r6
 80128d4:	f001 f9fc 	bl	8013cd0 <strncmp>
 80128d8:	b980      	cbnz	r0, 80128fc <__gethex+0xd0>
 80128da:	b94d      	cbnz	r5, 80128f0 <__gethex+0xc4>
 80128dc:	eb06 050a 	add.w	r5, r6, sl
 80128e0:	462a      	mov	r2, r5
 80128e2:	4616      	mov	r6, r2
 80128e4:	3201      	adds	r2, #1
 80128e6:	7830      	ldrb	r0, [r6, #0]
 80128e8:	f7ff ff8a 	bl	8012800 <__hexdig_fun>
 80128ec:	2800      	cmp	r0, #0
 80128ee:	d1f8      	bne.n	80128e2 <__gethex+0xb6>
 80128f0:	1bad      	subs	r5, r5, r6
 80128f2:	00ad      	lsls	r5, r5, #2
 80128f4:	e004      	b.n	8012900 <__gethex+0xd4>
 80128f6:	2400      	movs	r4, #0
 80128f8:	4625      	mov	r5, r4
 80128fa:	e7e0      	b.n	80128be <__gethex+0x92>
 80128fc:	2d00      	cmp	r5, #0
 80128fe:	d1f7      	bne.n	80128f0 <__gethex+0xc4>
 8012900:	7833      	ldrb	r3, [r6, #0]
 8012902:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012906:	2b50      	cmp	r3, #80	; 0x50
 8012908:	d13b      	bne.n	8012982 <__gethex+0x156>
 801290a:	7873      	ldrb	r3, [r6, #1]
 801290c:	2b2b      	cmp	r3, #43	; 0x2b
 801290e:	d02c      	beq.n	801296a <__gethex+0x13e>
 8012910:	2b2d      	cmp	r3, #45	; 0x2d
 8012912:	d02e      	beq.n	8012972 <__gethex+0x146>
 8012914:	1c71      	adds	r1, r6, #1
 8012916:	f04f 0900 	mov.w	r9, #0
 801291a:	7808      	ldrb	r0, [r1, #0]
 801291c:	f7ff ff70 	bl	8012800 <__hexdig_fun>
 8012920:	1e43      	subs	r3, r0, #1
 8012922:	b2db      	uxtb	r3, r3
 8012924:	2b18      	cmp	r3, #24
 8012926:	d82c      	bhi.n	8012982 <__gethex+0x156>
 8012928:	f1a0 0210 	sub.w	r2, r0, #16
 801292c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012930:	f7ff ff66 	bl	8012800 <__hexdig_fun>
 8012934:	1e43      	subs	r3, r0, #1
 8012936:	b2db      	uxtb	r3, r3
 8012938:	2b18      	cmp	r3, #24
 801293a:	d91d      	bls.n	8012978 <__gethex+0x14c>
 801293c:	f1b9 0f00 	cmp.w	r9, #0
 8012940:	d000      	beq.n	8012944 <__gethex+0x118>
 8012942:	4252      	negs	r2, r2
 8012944:	4415      	add	r5, r2
 8012946:	f8cb 1000 	str.w	r1, [fp]
 801294a:	b1e4      	cbz	r4, 8012986 <__gethex+0x15a>
 801294c:	9b00      	ldr	r3, [sp, #0]
 801294e:	2b00      	cmp	r3, #0
 8012950:	bf14      	ite	ne
 8012952:	2700      	movne	r7, #0
 8012954:	2706      	moveq	r7, #6
 8012956:	4638      	mov	r0, r7
 8012958:	b009      	add	sp, #36	; 0x24
 801295a:	ecbd 8b02 	vpop	{d8}
 801295e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012962:	463e      	mov	r6, r7
 8012964:	4625      	mov	r5, r4
 8012966:	2401      	movs	r4, #1
 8012968:	e7ca      	b.n	8012900 <__gethex+0xd4>
 801296a:	f04f 0900 	mov.w	r9, #0
 801296e:	1cb1      	adds	r1, r6, #2
 8012970:	e7d3      	b.n	801291a <__gethex+0xee>
 8012972:	f04f 0901 	mov.w	r9, #1
 8012976:	e7fa      	b.n	801296e <__gethex+0x142>
 8012978:	230a      	movs	r3, #10
 801297a:	fb03 0202 	mla	r2, r3, r2, r0
 801297e:	3a10      	subs	r2, #16
 8012980:	e7d4      	b.n	801292c <__gethex+0x100>
 8012982:	4631      	mov	r1, r6
 8012984:	e7df      	b.n	8012946 <__gethex+0x11a>
 8012986:	1bf3      	subs	r3, r6, r7
 8012988:	3b01      	subs	r3, #1
 801298a:	4621      	mov	r1, r4
 801298c:	2b07      	cmp	r3, #7
 801298e:	dc0b      	bgt.n	80129a8 <__gethex+0x17c>
 8012990:	ee18 0a10 	vmov	r0, s16
 8012994:	f000 fa70 	bl	8012e78 <_Balloc>
 8012998:	4604      	mov	r4, r0
 801299a:	b940      	cbnz	r0, 80129ae <__gethex+0x182>
 801299c:	4b5d      	ldr	r3, [pc, #372]	; (8012b14 <__gethex+0x2e8>)
 801299e:	4602      	mov	r2, r0
 80129a0:	21de      	movs	r1, #222	; 0xde
 80129a2:	485d      	ldr	r0, [pc, #372]	; (8012b18 <__gethex+0x2ec>)
 80129a4:	f001 f9b6 	bl	8013d14 <__assert_func>
 80129a8:	3101      	adds	r1, #1
 80129aa:	105b      	asrs	r3, r3, #1
 80129ac:	e7ee      	b.n	801298c <__gethex+0x160>
 80129ae:	f100 0914 	add.w	r9, r0, #20
 80129b2:	f04f 0b00 	mov.w	fp, #0
 80129b6:	f1ca 0301 	rsb	r3, sl, #1
 80129ba:	f8cd 9008 	str.w	r9, [sp, #8]
 80129be:	f8cd b000 	str.w	fp, [sp]
 80129c2:	9306      	str	r3, [sp, #24]
 80129c4:	42b7      	cmp	r7, r6
 80129c6:	d340      	bcc.n	8012a4a <__gethex+0x21e>
 80129c8:	9802      	ldr	r0, [sp, #8]
 80129ca:	9b00      	ldr	r3, [sp, #0]
 80129cc:	f840 3b04 	str.w	r3, [r0], #4
 80129d0:	eba0 0009 	sub.w	r0, r0, r9
 80129d4:	1080      	asrs	r0, r0, #2
 80129d6:	0146      	lsls	r6, r0, #5
 80129d8:	6120      	str	r0, [r4, #16]
 80129da:	4618      	mov	r0, r3
 80129dc:	f000 fb3e 	bl	801305c <__hi0bits>
 80129e0:	1a30      	subs	r0, r6, r0
 80129e2:	f8d8 6000 	ldr.w	r6, [r8]
 80129e6:	42b0      	cmp	r0, r6
 80129e8:	dd63      	ble.n	8012ab2 <__gethex+0x286>
 80129ea:	1b87      	subs	r7, r0, r6
 80129ec:	4639      	mov	r1, r7
 80129ee:	4620      	mov	r0, r4
 80129f0:	f000 fee2 	bl	80137b8 <__any_on>
 80129f4:	4682      	mov	sl, r0
 80129f6:	b1a8      	cbz	r0, 8012a24 <__gethex+0x1f8>
 80129f8:	1e7b      	subs	r3, r7, #1
 80129fa:	1159      	asrs	r1, r3, #5
 80129fc:	f003 021f 	and.w	r2, r3, #31
 8012a00:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012a04:	f04f 0a01 	mov.w	sl, #1
 8012a08:	fa0a f202 	lsl.w	r2, sl, r2
 8012a0c:	420a      	tst	r2, r1
 8012a0e:	d009      	beq.n	8012a24 <__gethex+0x1f8>
 8012a10:	4553      	cmp	r3, sl
 8012a12:	dd05      	ble.n	8012a20 <__gethex+0x1f4>
 8012a14:	1eb9      	subs	r1, r7, #2
 8012a16:	4620      	mov	r0, r4
 8012a18:	f000 fece 	bl	80137b8 <__any_on>
 8012a1c:	2800      	cmp	r0, #0
 8012a1e:	d145      	bne.n	8012aac <__gethex+0x280>
 8012a20:	f04f 0a02 	mov.w	sl, #2
 8012a24:	4639      	mov	r1, r7
 8012a26:	4620      	mov	r0, r4
 8012a28:	f7ff fe98 	bl	801275c <rshift>
 8012a2c:	443d      	add	r5, r7
 8012a2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012a32:	42ab      	cmp	r3, r5
 8012a34:	da4c      	bge.n	8012ad0 <__gethex+0x2a4>
 8012a36:	ee18 0a10 	vmov	r0, s16
 8012a3a:	4621      	mov	r1, r4
 8012a3c:	f000 fa5c 	bl	8012ef8 <_Bfree>
 8012a40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012a42:	2300      	movs	r3, #0
 8012a44:	6013      	str	r3, [r2, #0]
 8012a46:	27a3      	movs	r7, #163	; 0xa3
 8012a48:	e785      	b.n	8012956 <__gethex+0x12a>
 8012a4a:	1e73      	subs	r3, r6, #1
 8012a4c:	9a05      	ldr	r2, [sp, #20]
 8012a4e:	9303      	str	r3, [sp, #12]
 8012a50:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012a54:	4293      	cmp	r3, r2
 8012a56:	d019      	beq.n	8012a8c <__gethex+0x260>
 8012a58:	f1bb 0f20 	cmp.w	fp, #32
 8012a5c:	d107      	bne.n	8012a6e <__gethex+0x242>
 8012a5e:	9b02      	ldr	r3, [sp, #8]
 8012a60:	9a00      	ldr	r2, [sp, #0]
 8012a62:	f843 2b04 	str.w	r2, [r3], #4
 8012a66:	9302      	str	r3, [sp, #8]
 8012a68:	2300      	movs	r3, #0
 8012a6a:	9300      	str	r3, [sp, #0]
 8012a6c:	469b      	mov	fp, r3
 8012a6e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012a72:	f7ff fec5 	bl	8012800 <__hexdig_fun>
 8012a76:	9b00      	ldr	r3, [sp, #0]
 8012a78:	f000 000f 	and.w	r0, r0, #15
 8012a7c:	fa00 f00b 	lsl.w	r0, r0, fp
 8012a80:	4303      	orrs	r3, r0
 8012a82:	9300      	str	r3, [sp, #0]
 8012a84:	f10b 0b04 	add.w	fp, fp, #4
 8012a88:	9b03      	ldr	r3, [sp, #12]
 8012a8a:	e00d      	b.n	8012aa8 <__gethex+0x27c>
 8012a8c:	9b03      	ldr	r3, [sp, #12]
 8012a8e:	9a06      	ldr	r2, [sp, #24]
 8012a90:	4413      	add	r3, r2
 8012a92:	42bb      	cmp	r3, r7
 8012a94:	d3e0      	bcc.n	8012a58 <__gethex+0x22c>
 8012a96:	4618      	mov	r0, r3
 8012a98:	9901      	ldr	r1, [sp, #4]
 8012a9a:	9307      	str	r3, [sp, #28]
 8012a9c:	4652      	mov	r2, sl
 8012a9e:	f001 f917 	bl	8013cd0 <strncmp>
 8012aa2:	9b07      	ldr	r3, [sp, #28]
 8012aa4:	2800      	cmp	r0, #0
 8012aa6:	d1d7      	bne.n	8012a58 <__gethex+0x22c>
 8012aa8:	461e      	mov	r6, r3
 8012aaa:	e78b      	b.n	80129c4 <__gethex+0x198>
 8012aac:	f04f 0a03 	mov.w	sl, #3
 8012ab0:	e7b8      	b.n	8012a24 <__gethex+0x1f8>
 8012ab2:	da0a      	bge.n	8012aca <__gethex+0x29e>
 8012ab4:	1a37      	subs	r7, r6, r0
 8012ab6:	4621      	mov	r1, r4
 8012ab8:	ee18 0a10 	vmov	r0, s16
 8012abc:	463a      	mov	r2, r7
 8012abe:	f000 fc37 	bl	8013330 <__lshift>
 8012ac2:	1bed      	subs	r5, r5, r7
 8012ac4:	4604      	mov	r4, r0
 8012ac6:	f100 0914 	add.w	r9, r0, #20
 8012aca:	f04f 0a00 	mov.w	sl, #0
 8012ace:	e7ae      	b.n	8012a2e <__gethex+0x202>
 8012ad0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012ad4:	42a8      	cmp	r0, r5
 8012ad6:	dd72      	ble.n	8012bbe <__gethex+0x392>
 8012ad8:	1b45      	subs	r5, r0, r5
 8012ada:	42ae      	cmp	r6, r5
 8012adc:	dc36      	bgt.n	8012b4c <__gethex+0x320>
 8012ade:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012ae2:	2b02      	cmp	r3, #2
 8012ae4:	d02a      	beq.n	8012b3c <__gethex+0x310>
 8012ae6:	2b03      	cmp	r3, #3
 8012ae8:	d02c      	beq.n	8012b44 <__gethex+0x318>
 8012aea:	2b01      	cmp	r3, #1
 8012aec:	d11c      	bne.n	8012b28 <__gethex+0x2fc>
 8012aee:	42ae      	cmp	r6, r5
 8012af0:	d11a      	bne.n	8012b28 <__gethex+0x2fc>
 8012af2:	2e01      	cmp	r6, #1
 8012af4:	d112      	bne.n	8012b1c <__gethex+0x2f0>
 8012af6:	9a04      	ldr	r2, [sp, #16]
 8012af8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012afc:	6013      	str	r3, [r2, #0]
 8012afe:	2301      	movs	r3, #1
 8012b00:	6123      	str	r3, [r4, #16]
 8012b02:	f8c9 3000 	str.w	r3, [r9]
 8012b06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012b08:	2762      	movs	r7, #98	; 0x62
 8012b0a:	601c      	str	r4, [r3, #0]
 8012b0c:	e723      	b.n	8012956 <__gethex+0x12a>
 8012b0e:	bf00      	nop
 8012b10:	08015710 	.word	0x08015710
 8012b14:	08015698 	.word	0x08015698
 8012b18:	080156a9 	.word	0x080156a9
 8012b1c:	1e71      	subs	r1, r6, #1
 8012b1e:	4620      	mov	r0, r4
 8012b20:	f000 fe4a 	bl	80137b8 <__any_on>
 8012b24:	2800      	cmp	r0, #0
 8012b26:	d1e6      	bne.n	8012af6 <__gethex+0x2ca>
 8012b28:	ee18 0a10 	vmov	r0, s16
 8012b2c:	4621      	mov	r1, r4
 8012b2e:	f000 f9e3 	bl	8012ef8 <_Bfree>
 8012b32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012b34:	2300      	movs	r3, #0
 8012b36:	6013      	str	r3, [r2, #0]
 8012b38:	2750      	movs	r7, #80	; 0x50
 8012b3a:	e70c      	b.n	8012956 <__gethex+0x12a>
 8012b3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d1f2      	bne.n	8012b28 <__gethex+0x2fc>
 8012b42:	e7d8      	b.n	8012af6 <__gethex+0x2ca>
 8012b44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d1d5      	bne.n	8012af6 <__gethex+0x2ca>
 8012b4a:	e7ed      	b.n	8012b28 <__gethex+0x2fc>
 8012b4c:	1e6f      	subs	r7, r5, #1
 8012b4e:	f1ba 0f00 	cmp.w	sl, #0
 8012b52:	d131      	bne.n	8012bb8 <__gethex+0x38c>
 8012b54:	b127      	cbz	r7, 8012b60 <__gethex+0x334>
 8012b56:	4639      	mov	r1, r7
 8012b58:	4620      	mov	r0, r4
 8012b5a:	f000 fe2d 	bl	80137b8 <__any_on>
 8012b5e:	4682      	mov	sl, r0
 8012b60:	117b      	asrs	r3, r7, #5
 8012b62:	2101      	movs	r1, #1
 8012b64:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012b68:	f007 071f 	and.w	r7, r7, #31
 8012b6c:	fa01 f707 	lsl.w	r7, r1, r7
 8012b70:	421f      	tst	r7, r3
 8012b72:	4629      	mov	r1, r5
 8012b74:	4620      	mov	r0, r4
 8012b76:	bf18      	it	ne
 8012b78:	f04a 0a02 	orrne.w	sl, sl, #2
 8012b7c:	1b76      	subs	r6, r6, r5
 8012b7e:	f7ff fded 	bl	801275c <rshift>
 8012b82:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012b86:	2702      	movs	r7, #2
 8012b88:	f1ba 0f00 	cmp.w	sl, #0
 8012b8c:	d048      	beq.n	8012c20 <__gethex+0x3f4>
 8012b8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012b92:	2b02      	cmp	r3, #2
 8012b94:	d015      	beq.n	8012bc2 <__gethex+0x396>
 8012b96:	2b03      	cmp	r3, #3
 8012b98:	d017      	beq.n	8012bca <__gethex+0x39e>
 8012b9a:	2b01      	cmp	r3, #1
 8012b9c:	d109      	bne.n	8012bb2 <__gethex+0x386>
 8012b9e:	f01a 0f02 	tst.w	sl, #2
 8012ba2:	d006      	beq.n	8012bb2 <__gethex+0x386>
 8012ba4:	f8d9 0000 	ldr.w	r0, [r9]
 8012ba8:	ea4a 0a00 	orr.w	sl, sl, r0
 8012bac:	f01a 0f01 	tst.w	sl, #1
 8012bb0:	d10e      	bne.n	8012bd0 <__gethex+0x3a4>
 8012bb2:	f047 0710 	orr.w	r7, r7, #16
 8012bb6:	e033      	b.n	8012c20 <__gethex+0x3f4>
 8012bb8:	f04f 0a01 	mov.w	sl, #1
 8012bbc:	e7d0      	b.n	8012b60 <__gethex+0x334>
 8012bbe:	2701      	movs	r7, #1
 8012bc0:	e7e2      	b.n	8012b88 <__gethex+0x35c>
 8012bc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012bc4:	f1c3 0301 	rsb	r3, r3, #1
 8012bc8:	9315      	str	r3, [sp, #84]	; 0x54
 8012bca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d0f0      	beq.n	8012bb2 <__gethex+0x386>
 8012bd0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012bd4:	f104 0314 	add.w	r3, r4, #20
 8012bd8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012bdc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012be0:	f04f 0c00 	mov.w	ip, #0
 8012be4:	4618      	mov	r0, r3
 8012be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bea:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8012bee:	d01c      	beq.n	8012c2a <__gethex+0x3fe>
 8012bf0:	3201      	adds	r2, #1
 8012bf2:	6002      	str	r2, [r0, #0]
 8012bf4:	2f02      	cmp	r7, #2
 8012bf6:	f104 0314 	add.w	r3, r4, #20
 8012bfa:	d13f      	bne.n	8012c7c <__gethex+0x450>
 8012bfc:	f8d8 2000 	ldr.w	r2, [r8]
 8012c00:	3a01      	subs	r2, #1
 8012c02:	42b2      	cmp	r2, r6
 8012c04:	d10a      	bne.n	8012c1c <__gethex+0x3f0>
 8012c06:	1171      	asrs	r1, r6, #5
 8012c08:	2201      	movs	r2, #1
 8012c0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012c0e:	f006 061f 	and.w	r6, r6, #31
 8012c12:	fa02 f606 	lsl.w	r6, r2, r6
 8012c16:	421e      	tst	r6, r3
 8012c18:	bf18      	it	ne
 8012c1a:	4617      	movne	r7, r2
 8012c1c:	f047 0720 	orr.w	r7, r7, #32
 8012c20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012c22:	601c      	str	r4, [r3, #0]
 8012c24:	9b04      	ldr	r3, [sp, #16]
 8012c26:	601d      	str	r5, [r3, #0]
 8012c28:	e695      	b.n	8012956 <__gethex+0x12a>
 8012c2a:	4299      	cmp	r1, r3
 8012c2c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012c30:	d8d8      	bhi.n	8012be4 <__gethex+0x3b8>
 8012c32:	68a3      	ldr	r3, [r4, #8]
 8012c34:	459b      	cmp	fp, r3
 8012c36:	db19      	blt.n	8012c6c <__gethex+0x440>
 8012c38:	6861      	ldr	r1, [r4, #4]
 8012c3a:	ee18 0a10 	vmov	r0, s16
 8012c3e:	3101      	adds	r1, #1
 8012c40:	f000 f91a 	bl	8012e78 <_Balloc>
 8012c44:	4681      	mov	r9, r0
 8012c46:	b918      	cbnz	r0, 8012c50 <__gethex+0x424>
 8012c48:	4b1a      	ldr	r3, [pc, #104]	; (8012cb4 <__gethex+0x488>)
 8012c4a:	4602      	mov	r2, r0
 8012c4c:	2184      	movs	r1, #132	; 0x84
 8012c4e:	e6a8      	b.n	80129a2 <__gethex+0x176>
 8012c50:	6922      	ldr	r2, [r4, #16]
 8012c52:	3202      	adds	r2, #2
 8012c54:	f104 010c 	add.w	r1, r4, #12
 8012c58:	0092      	lsls	r2, r2, #2
 8012c5a:	300c      	adds	r0, #12
 8012c5c:	f7fd f9a0 	bl	800ffa0 <memcpy>
 8012c60:	4621      	mov	r1, r4
 8012c62:	ee18 0a10 	vmov	r0, s16
 8012c66:	f000 f947 	bl	8012ef8 <_Bfree>
 8012c6a:	464c      	mov	r4, r9
 8012c6c:	6923      	ldr	r3, [r4, #16]
 8012c6e:	1c5a      	adds	r2, r3, #1
 8012c70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012c74:	6122      	str	r2, [r4, #16]
 8012c76:	2201      	movs	r2, #1
 8012c78:	615a      	str	r2, [r3, #20]
 8012c7a:	e7bb      	b.n	8012bf4 <__gethex+0x3c8>
 8012c7c:	6922      	ldr	r2, [r4, #16]
 8012c7e:	455a      	cmp	r2, fp
 8012c80:	dd0b      	ble.n	8012c9a <__gethex+0x46e>
 8012c82:	2101      	movs	r1, #1
 8012c84:	4620      	mov	r0, r4
 8012c86:	f7ff fd69 	bl	801275c <rshift>
 8012c8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012c8e:	3501      	adds	r5, #1
 8012c90:	42ab      	cmp	r3, r5
 8012c92:	f6ff aed0 	blt.w	8012a36 <__gethex+0x20a>
 8012c96:	2701      	movs	r7, #1
 8012c98:	e7c0      	b.n	8012c1c <__gethex+0x3f0>
 8012c9a:	f016 061f 	ands.w	r6, r6, #31
 8012c9e:	d0fa      	beq.n	8012c96 <__gethex+0x46a>
 8012ca0:	4453      	add	r3, sl
 8012ca2:	f1c6 0620 	rsb	r6, r6, #32
 8012ca6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012caa:	f000 f9d7 	bl	801305c <__hi0bits>
 8012cae:	42b0      	cmp	r0, r6
 8012cb0:	dbe7      	blt.n	8012c82 <__gethex+0x456>
 8012cb2:	e7f0      	b.n	8012c96 <__gethex+0x46a>
 8012cb4:	08015698 	.word	0x08015698

08012cb8 <L_shift>:
 8012cb8:	f1c2 0208 	rsb	r2, r2, #8
 8012cbc:	0092      	lsls	r2, r2, #2
 8012cbe:	b570      	push	{r4, r5, r6, lr}
 8012cc0:	f1c2 0620 	rsb	r6, r2, #32
 8012cc4:	6843      	ldr	r3, [r0, #4]
 8012cc6:	6804      	ldr	r4, [r0, #0]
 8012cc8:	fa03 f506 	lsl.w	r5, r3, r6
 8012ccc:	432c      	orrs	r4, r5
 8012cce:	40d3      	lsrs	r3, r2
 8012cd0:	6004      	str	r4, [r0, #0]
 8012cd2:	f840 3f04 	str.w	r3, [r0, #4]!
 8012cd6:	4288      	cmp	r0, r1
 8012cd8:	d3f4      	bcc.n	8012cc4 <L_shift+0xc>
 8012cda:	bd70      	pop	{r4, r5, r6, pc}

08012cdc <__match>:
 8012cdc:	b530      	push	{r4, r5, lr}
 8012cde:	6803      	ldr	r3, [r0, #0]
 8012ce0:	3301      	adds	r3, #1
 8012ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ce6:	b914      	cbnz	r4, 8012cee <__match+0x12>
 8012ce8:	6003      	str	r3, [r0, #0]
 8012cea:	2001      	movs	r0, #1
 8012cec:	bd30      	pop	{r4, r5, pc}
 8012cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cf2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012cf6:	2d19      	cmp	r5, #25
 8012cf8:	bf98      	it	ls
 8012cfa:	3220      	addls	r2, #32
 8012cfc:	42a2      	cmp	r2, r4
 8012cfe:	d0f0      	beq.n	8012ce2 <__match+0x6>
 8012d00:	2000      	movs	r0, #0
 8012d02:	e7f3      	b.n	8012cec <__match+0x10>

08012d04 <__hexnan>:
 8012d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d08:	680b      	ldr	r3, [r1, #0]
 8012d0a:	115e      	asrs	r6, r3, #5
 8012d0c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012d10:	f013 031f 	ands.w	r3, r3, #31
 8012d14:	b087      	sub	sp, #28
 8012d16:	bf18      	it	ne
 8012d18:	3604      	addne	r6, #4
 8012d1a:	2500      	movs	r5, #0
 8012d1c:	1f37      	subs	r7, r6, #4
 8012d1e:	4690      	mov	r8, r2
 8012d20:	6802      	ldr	r2, [r0, #0]
 8012d22:	9301      	str	r3, [sp, #4]
 8012d24:	4682      	mov	sl, r0
 8012d26:	f846 5c04 	str.w	r5, [r6, #-4]
 8012d2a:	46b9      	mov	r9, r7
 8012d2c:	463c      	mov	r4, r7
 8012d2e:	9502      	str	r5, [sp, #8]
 8012d30:	46ab      	mov	fp, r5
 8012d32:	7851      	ldrb	r1, [r2, #1]
 8012d34:	1c53      	adds	r3, r2, #1
 8012d36:	9303      	str	r3, [sp, #12]
 8012d38:	b341      	cbz	r1, 8012d8c <__hexnan+0x88>
 8012d3a:	4608      	mov	r0, r1
 8012d3c:	9205      	str	r2, [sp, #20]
 8012d3e:	9104      	str	r1, [sp, #16]
 8012d40:	f7ff fd5e 	bl	8012800 <__hexdig_fun>
 8012d44:	2800      	cmp	r0, #0
 8012d46:	d14f      	bne.n	8012de8 <__hexnan+0xe4>
 8012d48:	9904      	ldr	r1, [sp, #16]
 8012d4a:	9a05      	ldr	r2, [sp, #20]
 8012d4c:	2920      	cmp	r1, #32
 8012d4e:	d818      	bhi.n	8012d82 <__hexnan+0x7e>
 8012d50:	9b02      	ldr	r3, [sp, #8]
 8012d52:	459b      	cmp	fp, r3
 8012d54:	dd13      	ble.n	8012d7e <__hexnan+0x7a>
 8012d56:	454c      	cmp	r4, r9
 8012d58:	d206      	bcs.n	8012d68 <__hexnan+0x64>
 8012d5a:	2d07      	cmp	r5, #7
 8012d5c:	dc04      	bgt.n	8012d68 <__hexnan+0x64>
 8012d5e:	462a      	mov	r2, r5
 8012d60:	4649      	mov	r1, r9
 8012d62:	4620      	mov	r0, r4
 8012d64:	f7ff ffa8 	bl	8012cb8 <L_shift>
 8012d68:	4544      	cmp	r4, r8
 8012d6a:	d950      	bls.n	8012e0e <__hexnan+0x10a>
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	f1a4 0904 	sub.w	r9, r4, #4
 8012d72:	f844 3c04 	str.w	r3, [r4, #-4]
 8012d76:	f8cd b008 	str.w	fp, [sp, #8]
 8012d7a:	464c      	mov	r4, r9
 8012d7c:	461d      	mov	r5, r3
 8012d7e:	9a03      	ldr	r2, [sp, #12]
 8012d80:	e7d7      	b.n	8012d32 <__hexnan+0x2e>
 8012d82:	2929      	cmp	r1, #41	; 0x29
 8012d84:	d156      	bne.n	8012e34 <__hexnan+0x130>
 8012d86:	3202      	adds	r2, #2
 8012d88:	f8ca 2000 	str.w	r2, [sl]
 8012d8c:	f1bb 0f00 	cmp.w	fp, #0
 8012d90:	d050      	beq.n	8012e34 <__hexnan+0x130>
 8012d92:	454c      	cmp	r4, r9
 8012d94:	d206      	bcs.n	8012da4 <__hexnan+0xa0>
 8012d96:	2d07      	cmp	r5, #7
 8012d98:	dc04      	bgt.n	8012da4 <__hexnan+0xa0>
 8012d9a:	462a      	mov	r2, r5
 8012d9c:	4649      	mov	r1, r9
 8012d9e:	4620      	mov	r0, r4
 8012da0:	f7ff ff8a 	bl	8012cb8 <L_shift>
 8012da4:	4544      	cmp	r4, r8
 8012da6:	d934      	bls.n	8012e12 <__hexnan+0x10e>
 8012da8:	f1a8 0204 	sub.w	r2, r8, #4
 8012dac:	4623      	mov	r3, r4
 8012dae:	f853 1b04 	ldr.w	r1, [r3], #4
 8012db2:	f842 1f04 	str.w	r1, [r2, #4]!
 8012db6:	429f      	cmp	r7, r3
 8012db8:	d2f9      	bcs.n	8012dae <__hexnan+0xaa>
 8012dba:	1b3b      	subs	r3, r7, r4
 8012dbc:	f023 0303 	bic.w	r3, r3, #3
 8012dc0:	3304      	adds	r3, #4
 8012dc2:	3401      	adds	r4, #1
 8012dc4:	3e03      	subs	r6, #3
 8012dc6:	42b4      	cmp	r4, r6
 8012dc8:	bf88      	it	hi
 8012dca:	2304      	movhi	r3, #4
 8012dcc:	4443      	add	r3, r8
 8012dce:	2200      	movs	r2, #0
 8012dd0:	f843 2b04 	str.w	r2, [r3], #4
 8012dd4:	429f      	cmp	r7, r3
 8012dd6:	d2fb      	bcs.n	8012dd0 <__hexnan+0xcc>
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	b91b      	cbnz	r3, 8012de4 <__hexnan+0xe0>
 8012ddc:	4547      	cmp	r7, r8
 8012dde:	d127      	bne.n	8012e30 <__hexnan+0x12c>
 8012de0:	2301      	movs	r3, #1
 8012de2:	603b      	str	r3, [r7, #0]
 8012de4:	2005      	movs	r0, #5
 8012de6:	e026      	b.n	8012e36 <__hexnan+0x132>
 8012de8:	3501      	adds	r5, #1
 8012dea:	2d08      	cmp	r5, #8
 8012dec:	f10b 0b01 	add.w	fp, fp, #1
 8012df0:	dd06      	ble.n	8012e00 <__hexnan+0xfc>
 8012df2:	4544      	cmp	r4, r8
 8012df4:	d9c3      	bls.n	8012d7e <__hexnan+0x7a>
 8012df6:	2300      	movs	r3, #0
 8012df8:	f844 3c04 	str.w	r3, [r4, #-4]
 8012dfc:	2501      	movs	r5, #1
 8012dfe:	3c04      	subs	r4, #4
 8012e00:	6822      	ldr	r2, [r4, #0]
 8012e02:	f000 000f 	and.w	r0, r0, #15
 8012e06:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012e0a:	6022      	str	r2, [r4, #0]
 8012e0c:	e7b7      	b.n	8012d7e <__hexnan+0x7a>
 8012e0e:	2508      	movs	r5, #8
 8012e10:	e7b5      	b.n	8012d7e <__hexnan+0x7a>
 8012e12:	9b01      	ldr	r3, [sp, #4]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d0df      	beq.n	8012dd8 <__hexnan+0xd4>
 8012e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e1c:	f1c3 0320 	rsb	r3, r3, #32
 8012e20:	fa22 f303 	lsr.w	r3, r2, r3
 8012e24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012e28:	401a      	ands	r2, r3
 8012e2a:	f846 2c04 	str.w	r2, [r6, #-4]
 8012e2e:	e7d3      	b.n	8012dd8 <__hexnan+0xd4>
 8012e30:	3f04      	subs	r7, #4
 8012e32:	e7d1      	b.n	8012dd8 <__hexnan+0xd4>
 8012e34:	2004      	movs	r0, #4
 8012e36:	b007      	add	sp, #28
 8012e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e3c <_localeconv_r>:
 8012e3c:	4800      	ldr	r0, [pc, #0]	; (8012e40 <_localeconv_r+0x4>)
 8012e3e:	4770      	bx	lr
 8012e40:	2000016c 	.word	0x2000016c

08012e44 <malloc>:
 8012e44:	4b02      	ldr	r3, [pc, #8]	; (8012e50 <malloc+0xc>)
 8012e46:	4601      	mov	r1, r0
 8012e48:	6818      	ldr	r0, [r3, #0]
 8012e4a:	f000 bd59 	b.w	8013900 <_malloc_r>
 8012e4e:	bf00      	nop
 8012e50:	20000014 	.word	0x20000014

08012e54 <__ascii_mbtowc>:
 8012e54:	b082      	sub	sp, #8
 8012e56:	b901      	cbnz	r1, 8012e5a <__ascii_mbtowc+0x6>
 8012e58:	a901      	add	r1, sp, #4
 8012e5a:	b142      	cbz	r2, 8012e6e <__ascii_mbtowc+0x1a>
 8012e5c:	b14b      	cbz	r3, 8012e72 <__ascii_mbtowc+0x1e>
 8012e5e:	7813      	ldrb	r3, [r2, #0]
 8012e60:	600b      	str	r3, [r1, #0]
 8012e62:	7812      	ldrb	r2, [r2, #0]
 8012e64:	1e10      	subs	r0, r2, #0
 8012e66:	bf18      	it	ne
 8012e68:	2001      	movne	r0, #1
 8012e6a:	b002      	add	sp, #8
 8012e6c:	4770      	bx	lr
 8012e6e:	4610      	mov	r0, r2
 8012e70:	e7fb      	b.n	8012e6a <__ascii_mbtowc+0x16>
 8012e72:	f06f 0001 	mvn.w	r0, #1
 8012e76:	e7f8      	b.n	8012e6a <__ascii_mbtowc+0x16>

08012e78 <_Balloc>:
 8012e78:	b570      	push	{r4, r5, r6, lr}
 8012e7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012e7c:	4604      	mov	r4, r0
 8012e7e:	460d      	mov	r5, r1
 8012e80:	b976      	cbnz	r6, 8012ea0 <_Balloc+0x28>
 8012e82:	2010      	movs	r0, #16
 8012e84:	f7ff ffde 	bl	8012e44 <malloc>
 8012e88:	4602      	mov	r2, r0
 8012e8a:	6260      	str	r0, [r4, #36]	; 0x24
 8012e8c:	b920      	cbnz	r0, 8012e98 <_Balloc+0x20>
 8012e8e:	4b18      	ldr	r3, [pc, #96]	; (8012ef0 <_Balloc+0x78>)
 8012e90:	4818      	ldr	r0, [pc, #96]	; (8012ef4 <_Balloc+0x7c>)
 8012e92:	2166      	movs	r1, #102	; 0x66
 8012e94:	f000 ff3e 	bl	8013d14 <__assert_func>
 8012e98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e9c:	6006      	str	r6, [r0, #0]
 8012e9e:	60c6      	str	r6, [r0, #12]
 8012ea0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012ea2:	68f3      	ldr	r3, [r6, #12]
 8012ea4:	b183      	cbz	r3, 8012ec8 <_Balloc+0x50>
 8012ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ea8:	68db      	ldr	r3, [r3, #12]
 8012eaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012eae:	b9b8      	cbnz	r0, 8012ee0 <_Balloc+0x68>
 8012eb0:	2101      	movs	r1, #1
 8012eb2:	fa01 f605 	lsl.w	r6, r1, r5
 8012eb6:	1d72      	adds	r2, r6, #5
 8012eb8:	0092      	lsls	r2, r2, #2
 8012eba:	4620      	mov	r0, r4
 8012ebc:	f000 fc9d 	bl	80137fa <_calloc_r>
 8012ec0:	b160      	cbz	r0, 8012edc <_Balloc+0x64>
 8012ec2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012ec6:	e00e      	b.n	8012ee6 <_Balloc+0x6e>
 8012ec8:	2221      	movs	r2, #33	; 0x21
 8012eca:	2104      	movs	r1, #4
 8012ecc:	4620      	mov	r0, r4
 8012ece:	f000 fc94 	bl	80137fa <_calloc_r>
 8012ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ed4:	60f0      	str	r0, [r6, #12]
 8012ed6:	68db      	ldr	r3, [r3, #12]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d1e4      	bne.n	8012ea6 <_Balloc+0x2e>
 8012edc:	2000      	movs	r0, #0
 8012ede:	bd70      	pop	{r4, r5, r6, pc}
 8012ee0:	6802      	ldr	r2, [r0, #0]
 8012ee2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012eec:	e7f7      	b.n	8012ede <_Balloc+0x66>
 8012eee:	bf00      	nop
 8012ef0:	08015626 	.word	0x08015626
 8012ef4:	08015724 	.word	0x08015724

08012ef8 <_Bfree>:
 8012ef8:	b570      	push	{r4, r5, r6, lr}
 8012efa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012efc:	4605      	mov	r5, r0
 8012efe:	460c      	mov	r4, r1
 8012f00:	b976      	cbnz	r6, 8012f20 <_Bfree+0x28>
 8012f02:	2010      	movs	r0, #16
 8012f04:	f7ff ff9e 	bl	8012e44 <malloc>
 8012f08:	4602      	mov	r2, r0
 8012f0a:	6268      	str	r0, [r5, #36]	; 0x24
 8012f0c:	b920      	cbnz	r0, 8012f18 <_Bfree+0x20>
 8012f0e:	4b09      	ldr	r3, [pc, #36]	; (8012f34 <_Bfree+0x3c>)
 8012f10:	4809      	ldr	r0, [pc, #36]	; (8012f38 <_Bfree+0x40>)
 8012f12:	218a      	movs	r1, #138	; 0x8a
 8012f14:	f000 fefe 	bl	8013d14 <__assert_func>
 8012f18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012f1c:	6006      	str	r6, [r0, #0]
 8012f1e:	60c6      	str	r6, [r0, #12]
 8012f20:	b13c      	cbz	r4, 8012f32 <_Bfree+0x3a>
 8012f22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012f24:	6862      	ldr	r2, [r4, #4]
 8012f26:	68db      	ldr	r3, [r3, #12]
 8012f28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012f2c:	6021      	str	r1, [r4, #0]
 8012f2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012f32:	bd70      	pop	{r4, r5, r6, pc}
 8012f34:	08015626 	.word	0x08015626
 8012f38:	08015724 	.word	0x08015724

08012f3c <__multadd>:
 8012f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f40:	690d      	ldr	r5, [r1, #16]
 8012f42:	4607      	mov	r7, r0
 8012f44:	460c      	mov	r4, r1
 8012f46:	461e      	mov	r6, r3
 8012f48:	f101 0c14 	add.w	ip, r1, #20
 8012f4c:	2000      	movs	r0, #0
 8012f4e:	f8dc 3000 	ldr.w	r3, [ip]
 8012f52:	b299      	uxth	r1, r3
 8012f54:	fb02 6101 	mla	r1, r2, r1, r6
 8012f58:	0c1e      	lsrs	r6, r3, #16
 8012f5a:	0c0b      	lsrs	r3, r1, #16
 8012f5c:	fb02 3306 	mla	r3, r2, r6, r3
 8012f60:	b289      	uxth	r1, r1
 8012f62:	3001      	adds	r0, #1
 8012f64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012f68:	4285      	cmp	r5, r0
 8012f6a:	f84c 1b04 	str.w	r1, [ip], #4
 8012f6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012f72:	dcec      	bgt.n	8012f4e <__multadd+0x12>
 8012f74:	b30e      	cbz	r6, 8012fba <__multadd+0x7e>
 8012f76:	68a3      	ldr	r3, [r4, #8]
 8012f78:	42ab      	cmp	r3, r5
 8012f7a:	dc19      	bgt.n	8012fb0 <__multadd+0x74>
 8012f7c:	6861      	ldr	r1, [r4, #4]
 8012f7e:	4638      	mov	r0, r7
 8012f80:	3101      	adds	r1, #1
 8012f82:	f7ff ff79 	bl	8012e78 <_Balloc>
 8012f86:	4680      	mov	r8, r0
 8012f88:	b928      	cbnz	r0, 8012f96 <__multadd+0x5a>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	4b0c      	ldr	r3, [pc, #48]	; (8012fc0 <__multadd+0x84>)
 8012f8e:	480d      	ldr	r0, [pc, #52]	; (8012fc4 <__multadd+0x88>)
 8012f90:	21b5      	movs	r1, #181	; 0xb5
 8012f92:	f000 febf 	bl	8013d14 <__assert_func>
 8012f96:	6922      	ldr	r2, [r4, #16]
 8012f98:	3202      	adds	r2, #2
 8012f9a:	f104 010c 	add.w	r1, r4, #12
 8012f9e:	0092      	lsls	r2, r2, #2
 8012fa0:	300c      	adds	r0, #12
 8012fa2:	f7fc fffd 	bl	800ffa0 <memcpy>
 8012fa6:	4621      	mov	r1, r4
 8012fa8:	4638      	mov	r0, r7
 8012faa:	f7ff ffa5 	bl	8012ef8 <_Bfree>
 8012fae:	4644      	mov	r4, r8
 8012fb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012fb4:	3501      	adds	r5, #1
 8012fb6:	615e      	str	r6, [r3, #20]
 8012fb8:	6125      	str	r5, [r4, #16]
 8012fba:	4620      	mov	r0, r4
 8012fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fc0:	08015698 	.word	0x08015698
 8012fc4:	08015724 	.word	0x08015724

08012fc8 <__s2b>:
 8012fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fcc:	460c      	mov	r4, r1
 8012fce:	4615      	mov	r5, r2
 8012fd0:	461f      	mov	r7, r3
 8012fd2:	2209      	movs	r2, #9
 8012fd4:	3308      	adds	r3, #8
 8012fd6:	4606      	mov	r6, r0
 8012fd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012fdc:	2100      	movs	r1, #0
 8012fde:	2201      	movs	r2, #1
 8012fe0:	429a      	cmp	r2, r3
 8012fe2:	db09      	blt.n	8012ff8 <__s2b+0x30>
 8012fe4:	4630      	mov	r0, r6
 8012fe6:	f7ff ff47 	bl	8012e78 <_Balloc>
 8012fea:	b940      	cbnz	r0, 8012ffe <__s2b+0x36>
 8012fec:	4602      	mov	r2, r0
 8012fee:	4b19      	ldr	r3, [pc, #100]	; (8013054 <__s2b+0x8c>)
 8012ff0:	4819      	ldr	r0, [pc, #100]	; (8013058 <__s2b+0x90>)
 8012ff2:	21ce      	movs	r1, #206	; 0xce
 8012ff4:	f000 fe8e 	bl	8013d14 <__assert_func>
 8012ff8:	0052      	lsls	r2, r2, #1
 8012ffa:	3101      	adds	r1, #1
 8012ffc:	e7f0      	b.n	8012fe0 <__s2b+0x18>
 8012ffe:	9b08      	ldr	r3, [sp, #32]
 8013000:	6143      	str	r3, [r0, #20]
 8013002:	2d09      	cmp	r5, #9
 8013004:	f04f 0301 	mov.w	r3, #1
 8013008:	6103      	str	r3, [r0, #16]
 801300a:	dd16      	ble.n	801303a <__s2b+0x72>
 801300c:	f104 0909 	add.w	r9, r4, #9
 8013010:	46c8      	mov	r8, r9
 8013012:	442c      	add	r4, r5
 8013014:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013018:	4601      	mov	r1, r0
 801301a:	3b30      	subs	r3, #48	; 0x30
 801301c:	220a      	movs	r2, #10
 801301e:	4630      	mov	r0, r6
 8013020:	f7ff ff8c 	bl	8012f3c <__multadd>
 8013024:	45a0      	cmp	r8, r4
 8013026:	d1f5      	bne.n	8013014 <__s2b+0x4c>
 8013028:	f1a5 0408 	sub.w	r4, r5, #8
 801302c:	444c      	add	r4, r9
 801302e:	1b2d      	subs	r5, r5, r4
 8013030:	1963      	adds	r3, r4, r5
 8013032:	42bb      	cmp	r3, r7
 8013034:	db04      	blt.n	8013040 <__s2b+0x78>
 8013036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801303a:	340a      	adds	r4, #10
 801303c:	2509      	movs	r5, #9
 801303e:	e7f6      	b.n	801302e <__s2b+0x66>
 8013040:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013044:	4601      	mov	r1, r0
 8013046:	3b30      	subs	r3, #48	; 0x30
 8013048:	220a      	movs	r2, #10
 801304a:	4630      	mov	r0, r6
 801304c:	f7ff ff76 	bl	8012f3c <__multadd>
 8013050:	e7ee      	b.n	8013030 <__s2b+0x68>
 8013052:	bf00      	nop
 8013054:	08015698 	.word	0x08015698
 8013058:	08015724 	.word	0x08015724

0801305c <__hi0bits>:
 801305c:	0c03      	lsrs	r3, r0, #16
 801305e:	041b      	lsls	r3, r3, #16
 8013060:	b9d3      	cbnz	r3, 8013098 <__hi0bits+0x3c>
 8013062:	0400      	lsls	r0, r0, #16
 8013064:	2310      	movs	r3, #16
 8013066:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801306a:	bf04      	itt	eq
 801306c:	0200      	lsleq	r0, r0, #8
 801306e:	3308      	addeq	r3, #8
 8013070:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013074:	bf04      	itt	eq
 8013076:	0100      	lsleq	r0, r0, #4
 8013078:	3304      	addeq	r3, #4
 801307a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801307e:	bf04      	itt	eq
 8013080:	0080      	lsleq	r0, r0, #2
 8013082:	3302      	addeq	r3, #2
 8013084:	2800      	cmp	r0, #0
 8013086:	db05      	blt.n	8013094 <__hi0bits+0x38>
 8013088:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801308c:	f103 0301 	add.w	r3, r3, #1
 8013090:	bf08      	it	eq
 8013092:	2320      	moveq	r3, #32
 8013094:	4618      	mov	r0, r3
 8013096:	4770      	bx	lr
 8013098:	2300      	movs	r3, #0
 801309a:	e7e4      	b.n	8013066 <__hi0bits+0xa>

0801309c <__lo0bits>:
 801309c:	6803      	ldr	r3, [r0, #0]
 801309e:	f013 0207 	ands.w	r2, r3, #7
 80130a2:	4601      	mov	r1, r0
 80130a4:	d00b      	beq.n	80130be <__lo0bits+0x22>
 80130a6:	07da      	lsls	r2, r3, #31
 80130a8:	d423      	bmi.n	80130f2 <__lo0bits+0x56>
 80130aa:	0798      	lsls	r0, r3, #30
 80130ac:	bf49      	itett	mi
 80130ae:	085b      	lsrmi	r3, r3, #1
 80130b0:	089b      	lsrpl	r3, r3, #2
 80130b2:	2001      	movmi	r0, #1
 80130b4:	600b      	strmi	r3, [r1, #0]
 80130b6:	bf5c      	itt	pl
 80130b8:	600b      	strpl	r3, [r1, #0]
 80130ba:	2002      	movpl	r0, #2
 80130bc:	4770      	bx	lr
 80130be:	b298      	uxth	r0, r3
 80130c0:	b9a8      	cbnz	r0, 80130ee <__lo0bits+0x52>
 80130c2:	0c1b      	lsrs	r3, r3, #16
 80130c4:	2010      	movs	r0, #16
 80130c6:	b2da      	uxtb	r2, r3
 80130c8:	b90a      	cbnz	r2, 80130ce <__lo0bits+0x32>
 80130ca:	3008      	adds	r0, #8
 80130cc:	0a1b      	lsrs	r3, r3, #8
 80130ce:	071a      	lsls	r2, r3, #28
 80130d0:	bf04      	itt	eq
 80130d2:	091b      	lsreq	r3, r3, #4
 80130d4:	3004      	addeq	r0, #4
 80130d6:	079a      	lsls	r2, r3, #30
 80130d8:	bf04      	itt	eq
 80130da:	089b      	lsreq	r3, r3, #2
 80130dc:	3002      	addeq	r0, #2
 80130de:	07da      	lsls	r2, r3, #31
 80130e0:	d403      	bmi.n	80130ea <__lo0bits+0x4e>
 80130e2:	085b      	lsrs	r3, r3, #1
 80130e4:	f100 0001 	add.w	r0, r0, #1
 80130e8:	d005      	beq.n	80130f6 <__lo0bits+0x5a>
 80130ea:	600b      	str	r3, [r1, #0]
 80130ec:	4770      	bx	lr
 80130ee:	4610      	mov	r0, r2
 80130f0:	e7e9      	b.n	80130c6 <__lo0bits+0x2a>
 80130f2:	2000      	movs	r0, #0
 80130f4:	4770      	bx	lr
 80130f6:	2020      	movs	r0, #32
 80130f8:	4770      	bx	lr
	...

080130fc <__i2b>:
 80130fc:	b510      	push	{r4, lr}
 80130fe:	460c      	mov	r4, r1
 8013100:	2101      	movs	r1, #1
 8013102:	f7ff feb9 	bl	8012e78 <_Balloc>
 8013106:	4602      	mov	r2, r0
 8013108:	b928      	cbnz	r0, 8013116 <__i2b+0x1a>
 801310a:	4b05      	ldr	r3, [pc, #20]	; (8013120 <__i2b+0x24>)
 801310c:	4805      	ldr	r0, [pc, #20]	; (8013124 <__i2b+0x28>)
 801310e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013112:	f000 fdff 	bl	8013d14 <__assert_func>
 8013116:	2301      	movs	r3, #1
 8013118:	6144      	str	r4, [r0, #20]
 801311a:	6103      	str	r3, [r0, #16]
 801311c:	bd10      	pop	{r4, pc}
 801311e:	bf00      	nop
 8013120:	08015698 	.word	0x08015698
 8013124:	08015724 	.word	0x08015724

08013128 <__multiply>:
 8013128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801312c:	4691      	mov	r9, r2
 801312e:	690a      	ldr	r2, [r1, #16]
 8013130:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013134:	429a      	cmp	r2, r3
 8013136:	bfb8      	it	lt
 8013138:	460b      	movlt	r3, r1
 801313a:	460c      	mov	r4, r1
 801313c:	bfbc      	itt	lt
 801313e:	464c      	movlt	r4, r9
 8013140:	4699      	movlt	r9, r3
 8013142:	6927      	ldr	r7, [r4, #16]
 8013144:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013148:	68a3      	ldr	r3, [r4, #8]
 801314a:	6861      	ldr	r1, [r4, #4]
 801314c:	eb07 060a 	add.w	r6, r7, sl
 8013150:	42b3      	cmp	r3, r6
 8013152:	b085      	sub	sp, #20
 8013154:	bfb8      	it	lt
 8013156:	3101      	addlt	r1, #1
 8013158:	f7ff fe8e 	bl	8012e78 <_Balloc>
 801315c:	b930      	cbnz	r0, 801316c <__multiply+0x44>
 801315e:	4602      	mov	r2, r0
 8013160:	4b44      	ldr	r3, [pc, #272]	; (8013274 <__multiply+0x14c>)
 8013162:	4845      	ldr	r0, [pc, #276]	; (8013278 <__multiply+0x150>)
 8013164:	f240 115d 	movw	r1, #349	; 0x15d
 8013168:	f000 fdd4 	bl	8013d14 <__assert_func>
 801316c:	f100 0514 	add.w	r5, r0, #20
 8013170:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013174:	462b      	mov	r3, r5
 8013176:	2200      	movs	r2, #0
 8013178:	4543      	cmp	r3, r8
 801317a:	d321      	bcc.n	80131c0 <__multiply+0x98>
 801317c:	f104 0314 	add.w	r3, r4, #20
 8013180:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013184:	f109 0314 	add.w	r3, r9, #20
 8013188:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801318c:	9202      	str	r2, [sp, #8]
 801318e:	1b3a      	subs	r2, r7, r4
 8013190:	3a15      	subs	r2, #21
 8013192:	f022 0203 	bic.w	r2, r2, #3
 8013196:	3204      	adds	r2, #4
 8013198:	f104 0115 	add.w	r1, r4, #21
 801319c:	428f      	cmp	r7, r1
 801319e:	bf38      	it	cc
 80131a0:	2204      	movcc	r2, #4
 80131a2:	9201      	str	r2, [sp, #4]
 80131a4:	9a02      	ldr	r2, [sp, #8]
 80131a6:	9303      	str	r3, [sp, #12]
 80131a8:	429a      	cmp	r2, r3
 80131aa:	d80c      	bhi.n	80131c6 <__multiply+0x9e>
 80131ac:	2e00      	cmp	r6, #0
 80131ae:	dd03      	ble.n	80131b8 <__multiply+0x90>
 80131b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d05a      	beq.n	801326e <__multiply+0x146>
 80131b8:	6106      	str	r6, [r0, #16]
 80131ba:	b005      	add	sp, #20
 80131bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131c0:	f843 2b04 	str.w	r2, [r3], #4
 80131c4:	e7d8      	b.n	8013178 <__multiply+0x50>
 80131c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80131ca:	f1ba 0f00 	cmp.w	sl, #0
 80131ce:	d024      	beq.n	801321a <__multiply+0xf2>
 80131d0:	f104 0e14 	add.w	lr, r4, #20
 80131d4:	46a9      	mov	r9, r5
 80131d6:	f04f 0c00 	mov.w	ip, #0
 80131da:	f85e 2b04 	ldr.w	r2, [lr], #4
 80131de:	f8d9 1000 	ldr.w	r1, [r9]
 80131e2:	fa1f fb82 	uxth.w	fp, r2
 80131e6:	b289      	uxth	r1, r1
 80131e8:	fb0a 110b 	mla	r1, sl, fp, r1
 80131ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80131f0:	f8d9 2000 	ldr.w	r2, [r9]
 80131f4:	4461      	add	r1, ip
 80131f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80131fa:	fb0a c20b 	mla	r2, sl, fp, ip
 80131fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013202:	b289      	uxth	r1, r1
 8013204:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013208:	4577      	cmp	r7, lr
 801320a:	f849 1b04 	str.w	r1, [r9], #4
 801320e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013212:	d8e2      	bhi.n	80131da <__multiply+0xb2>
 8013214:	9a01      	ldr	r2, [sp, #4]
 8013216:	f845 c002 	str.w	ip, [r5, r2]
 801321a:	9a03      	ldr	r2, [sp, #12]
 801321c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013220:	3304      	adds	r3, #4
 8013222:	f1b9 0f00 	cmp.w	r9, #0
 8013226:	d020      	beq.n	801326a <__multiply+0x142>
 8013228:	6829      	ldr	r1, [r5, #0]
 801322a:	f104 0c14 	add.w	ip, r4, #20
 801322e:	46ae      	mov	lr, r5
 8013230:	f04f 0a00 	mov.w	sl, #0
 8013234:	f8bc b000 	ldrh.w	fp, [ip]
 8013238:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801323c:	fb09 220b 	mla	r2, r9, fp, r2
 8013240:	4492      	add	sl, r2
 8013242:	b289      	uxth	r1, r1
 8013244:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013248:	f84e 1b04 	str.w	r1, [lr], #4
 801324c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013250:	f8be 1000 	ldrh.w	r1, [lr]
 8013254:	0c12      	lsrs	r2, r2, #16
 8013256:	fb09 1102 	mla	r1, r9, r2, r1
 801325a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801325e:	4567      	cmp	r7, ip
 8013260:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013264:	d8e6      	bhi.n	8013234 <__multiply+0x10c>
 8013266:	9a01      	ldr	r2, [sp, #4]
 8013268:	50a9      	str	r1, [r5, r2]
 801326a:	3504      	adds	r5, #4
 801326c:	e79a      	b.n	80131a4 <__multiply+0x7c>
 801326e:	3e01      	subs	r6, #1
 8013270:	e79c      	b.n	80131ac <__multiply+0x84>
 8013272:	bf00      	nop
 8013274:	08015698 	.word	0x08015698
 8013278:	08015724 	.word	0x08015724

0801327c <__pow5mult>:
 801327c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013280:	4615      	mov	r5, r2
 8013282:	f012 0203 	ands.w	r2, r2, #3
 8013286:	4606      	mov	r6, r0
 8013288:	460f      	mov	r7, r1
 801328a:	d007      	beq.n	801329c <__pow5mult+0x20>
 801328c:	4c25      	ldr	r4, [pc, #148]	; (8013324 <__pow5mult+0xa8>)
 801328e:	3a01      	subs	r2, #1
 8013290:	2300      	movs	r3, #0
 8013292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013296:	f7ff fe51 	bl	8012f3c <__multadd>
 801329a:	4607      	mov	r7, r0
 801329c:	10ad      	asrs	r5, r5, #2
 801329e:	d03d      	beq.n	801331c <__pow5mult+0xa0>
 80132a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80132a2:	b97c      	cbnz	r4, 80132c4 <__pow5mult+0x48>
 80132a4:	2010      	movs	r0, #16
 80132a6:	f7ff fdcd 	bl	8012e44 <malloc>
 80132aa:	4602      	mov	r2, r0
 80132ac:	6270      	str	r0, [r6, #36]	; 0x24
 80132ae:	b928      	cbnz	r0, 80132bc <__pow5mult+0x40>
 80132b0:	4b1d      	ldr	r3, [pc, #116]	; (8013328 <__pow5mult+0xac>)
 80132b2:	481e      	ldr	r0, [pc, #120]	; (801332c <__pow5mult+0xb0>)
 80132b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80132b8:	f000 fd2c 	bl	8013d14 <__assert_func>
 80132bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80132c0:	6004      	str	r4, [r0, #0]
 80132c2:	60c4      	str	r4, [r0, #12]
 80132c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80132c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80132cc:	b94c      	cbnz	r4, 80132e2 <__pow5mult+0x66>
 80132ce:	f240 2171 	movw	r1, #625	; 0x271
 80132d2:	4630      	mov	r0, r6
 80132d4:	f7ff ff12 	bl	80130fc <__i2b>
 80132d8:	2300      	movs	r3, #0
 80132da:	f8c8 0008 	str.w	r0, [r8, #8]
 80132de:	4604      	mov	r4, r0
 80132e0:	6003      	str	r3, [r0, #0]
 80132e2:	f04f 0900 	mov.w	r9, #0
 80132e6:	07eb      	lsls	r3, r5, #31
 80132e8:	d50a      	bpl.n	8013300 <__pow5mult+0x84>
 80132ea:	4639      	mov	r1, r7
 80132ec:	4622      	mov	r2, r4
 80132ee:	4630      	mov	r0, r6
 80132f0:	f7ff ff1a 	bl	8013128 <__multiply>
 80132f4:	4639      	mov	r1, r7
 80132f6:	4680      	mov	r8, r0
 80132f8:	4630      	mov	r0, r6
 80132fa:	f7ff fdfd 	bl	8012ef8 <_Bfree>
 80132fe:	4647      	mov	r7, r8
 8013300:	106d      	asrs	r5, r5, #1
 8013302:	d00b      	beq.n	801331c <__pow5mult+0xa0>
 8013304:	6820      	ldr	r0, [r4, #0]
 8013306:	b938      	cbnz	r0, 8013318 <__pow5mult+0x9c>
 8013308:	4622      	mov	r2, r4
 801330a:	4621      	mov	r1, r4
 801330c:	4630      	mov	r0, r6
 801330e:	f7ff ff0b 	bl	8013128 <__multiply>
 8013312:	6020      	str	r0, [r4, #0]
 8013314:	f8c0 9000 	str.w	r9, [r0]
 8013318:	4604      	mov	r4, r0
 801331a:	e7e4      	b.n	80132e6 <__pow5mult+0x6a>
 801331c:	4638      	mov	r0, r7
 801331e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013322:	bf00      	nop
 8013324:	08015870 	.word	0x08015870
 8013328:	08015626 	.word	0x08015626
 801332c:	08015724 	.word	0x08015724

08013330 <__lshift>:
 8013330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013334:	460c      	mov	r4, r1
 8013336:	6849      	ldr	r1, [r1, #4]
 8013338:	6923      	ldr	r3, [r4, #16]
 801333a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801333e:	68a3      	ldr	r3, [r4, #8]
 8013340:	4607      	mov	r7, r0
 8013342:	4691      	mov	r9, r2
 8013344:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013348:	f108 0601 	add.w	r6, r8, #1
 801334c:	42b3      	cmp	r3, r6
 801334e:	db0b      	blt.n	8013368 <__lshift+0x38>
 8013350:	4638      	mov	r0, r7
 8013352:	f7ff fd91 	bl	8012e78 <_Balloc>
 8013356:	4605      	mov	r5, r0
 8013358:	b948      	cbnz	r0, 801336e <__lshift+0x3e>
 801335a:	4602      	mov	r2, r0
 801335c:	4b2a      	ldr	r3, [pc, #168]	; (8013408 <__lshift+0xd8>)
 801335e:	482b      	ldr	r0, [pc, #172]	; (801340c <__lshift+0xdc>)
 8013360:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013364:	f000 fcd6 	bl	8013d14 <__assert_func>
 8013368:	3101      	adds	r1, #1
 801336a:	005b      	lsls	r3, r3, #1
 801336c:	e7ee      	b.n	801334c <__lshift+0x1c>
 801336e:	2300      	movs	r3, #0
 8013370:	f100 0114 	add.w	r1, r0, #20
 8013374:	f100 0210 	add.w	r2, r0, #16
 8013378:	4618      	mov	r0, r3
 801337a:	4553      	cmp	r3, sl
 801337c:	db37      	blt.n	80133ee <__lshift+0xbe>
 801337e:	6920      	ldr	r0, [r4, #16]
 8013380:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013384:	f104 0314 	add.w	r3, r4, #20
 8013388:	f019 091f 	ands.w	r9, r9, #31
 801338c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013390:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013394:	d02f      	beq.n	80133f6 <__lshift+0xc6>
 8013396:	f1c9 0e20 	rsb	lr, r9, #32
 801339a:	468a      	mov	sl, r1
 801339c:	f04f 0c00 	mov.w	ip, #0
 80133a0:	681a      	ldr	r2, [r3, #0]
 80133a2:	fa02 f209 	lsl.w	r2, r2, r9
 80133a6:	ea42 020c 	orr.w	r2, r2, ip
 80133aa:	f84a 2b04 	str.w	r2, [sl], #4
 80133ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80133b2:	4298      	cmp	r0, r3
 80133b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80133b8:	d8f2      	bhi.n	80133a0 <__lshift+0x70>
 80133ba:	1b03      	subs	r3, r0, r4
 80133bc:	3b15      	subs	r3, #21
 80133be:	f023 0303 	bic.w	r3, r3, #3
 80133c2:	3304      	adds	r3, #4
 80133c4:	f104 0215 	add.w	r2, r4, #21
 80133c8:	4290      	cmp	r0, r2
 80133ca:	bf38      	it	cc
 80133cc:	2304      	movcc	r3, #4
 80133ce:	f841 c003 	str.w	ip, [r1, r3]
 80133d2:	f1bc 0f00 	cmp.w	ip, #0
 80133d6:	d001      	beq.n	80133dc <__lshift+0xac>
 80133d8:	f108 0602 	add.w	r6, r8, #2
 80133dc:	3e01      	subs	r6, #1
 80133de:	4638      	mov	r0, r7
 80133e0:	612e      	str	r6, [r5, #16]
 80133e2:	4621      	mov	r1, r4
 80133e4:	f7ff fd88 	bl	8012ef8 <_Bfree>
 80133e8:	4628      	mov	r0, r5
 80133ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80133f2:	3301      	adds	r3, #1
 80133f4:	e7c1      	b.n	801337a <__lshift+0x4a>
 80133f6:	3904      	subs	r1, #4
 80133f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80133fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8013400:	4298      	cmp	r0, r3
 8013402:	d8f9      	bhi.n	80133f8 <__lshift+0xc8>
 8013404:	e7ea      	b.n	80133dc <__lshift+0xac>
 8013406:	bf00      	nop
 8013408:	08015698 	.word	0x08015698
 801340c:	08015724 	.word	0x08015724

08013410 <__mcmp>:
 8013410:	b530      	push	{r4, r5, lr}
 8013412:	6902      	ldr	r2, [r0, #16]
 8013414:	690c      	ldr	r4, [r1, #16]
 8013416:	1b12      	subs	r2, r2, r4
 8013418:	d10e      	bne.n	8013438 <__mcmp+0x28>
 801341a:	f100 0314 	add.w	r3, r0, #20
 801341e:	3114      	adds	r1, #20
 8013420:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013424:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013428:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801342c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013430:	42a5      	cmp	r5, r4
 8013432:	d003      	beq.n	801343c <__mcmp+0x2c>
 8013434:	d305      	bcc.n	8013442 <__mcmp+0x32>
 8013436:	2201      	movs	r2, #1
 8013438:	4610      	mov	r0, r2
 801343a:	bd30      	pop	{r4, r5, pc}
 801343c:	4283      	cmp	r3, r0
 801343e:	d3f3      	bcc.n	8013428 <__mcmp+0x18>
 8013440:	e7fa      	b.n	8013438 <__mcmp+0x28>
 8013442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013446:	e7f7      	b.n	8013438 <__mcmp+0x28>

08013448 <__mdiff>:
 8013448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801344c:	460c      	mov	r4, r1
 801344e:	4606      	mov	r6, r0
 8013450:	4611      	mov	r1, r2
 8013452:	4620      	mov	r0, r4
 8013454:	4690      	mov	r8, r2
 8013456:	f7ff ffdb 	bl	8013410 <__mcmp>
 801345a:	1e05      	subs	r5, r0, #0
 801345c:	d110      	bne.n	8013480 <__mdiff+0x38>
 801345e:	4629      	mov	r1, r5
 8013460:	4630      	mov	r0, r6
 8013462:	f7ff fd09 	bl	8012e78 <_Balloc>
 8013466:	b930      	cbnz	r0, 8013476 <__mdiff+0x2e>
 8013468:	4b3a      	ldr	r3, [pc, #232]	; (8013554 <__mdiff+0x10c>)
 801346a:	4602      	mov	r2, r0
 801346c:	f240 2132 	movw	r1, #562	; 0x232
 8013470:	4839      	ldr	r0, [pc, #228]	; (8013558 <__mdiff+0x110>)
 8013472:	f000 fc4f 	bl	8013d14 <__assert_func>
 8013476:	2301      	movs	r3, #1
 8013478:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801347c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013480:	bfa4      	itt	ge
 8013482:	4643      	movge	r3, r8
 8013484:	46a0      	movge	r8, r4
 8013486:	4630      	mov	r0, r6
 8013488:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801348c:	bfa6      	itte	ge
 801348e:	461c      	movge	r4, r3
 8013490:	2500      	movge	r5, #0
 8013492:	2501      	movlt	r5, #1
 8013494:	f7ff fcf0 	bl	8012e78 <_Balloc>
 8013498:	b920      	cbnz	r0, 80134a4 <__mdiff+0x5c>
 801349a:	4b2e      	ldr	r3, [pc, #184]	; (8013554 <__mdiff+0x10c>)
 801349c:	4602      	mov	r2, r0
 801349e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80134a2:	e7e5      	b.n	8013470 <__mdiff+0x28>
 80134a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80134a8:	6926      	ldr	r6, [r4, #16]
 80134aa:	60c5      	str	r5, [r0, #12]
 80134ac:	f104 0914 	add.w	r9, r4, #20
 80134b0:	f108 0514 	add.w	r5, r8, #20
 80134b4:	f100 0e14 	add.w	lr, r0, #20
 80134b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80134bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80134c0:	f108 0210 	add.w	r2, r8, #16
 80134c4:	46f2      	mov	sl, lr
 80134c6:	2100      	movs	r1, #0
 80134c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80134cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80134d0:	fa1f f883 	uxth.w	r8, r3
 80134d4:	fa11 f18b 	uxtah	r1, r1, fp
 80134d8:	0c1b      	lsrs	r3, r3, #16
 80134da:	eba1 0808 	sub.w	r8, r1, r8
 80134de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80134e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80134e6:	fa1f f888 	uxth.w	r8, r8
 80134ea:	1419      	asrs	r1, r3, #16
 80134ec:	454e      	cmp	r6, r9
 80134ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80134f2:	f84a 3b04 	str.w	r3, [sl], #4
 80134f6:	d8e7      	bhi.n	80134c8 <__mdiff+0x80>
 80134f8:	1b33      	subs	r3, r6, r4
 80134fa:	3b15      	subs	r3, #21
 80134fc:	f023 0303 	bic.w	r3, r3, #3
 8013500:	3304      	adds	r3, #4
 8013502:	3415      	adds	r4, #21
 8013504:	42a6      	cmp	r6, r4
 8013506:	bf38      	it	cc
 8013508:	2304      	movcc	r3, #4
 801350a:	441d      	add	r5, r3
 801350c:	4473      	add	r3, lr
 801350e:	469e      	mov	lr, r3
 8013510:	462e      	mov	r6, r5
 8013512:	4566      	cmp	r6, ip
 8013514:	d30e      	bcc.n	8013534 <__mdiff+0xec>
 8013516:	f10c 0203 	add.w	r2, ip, #3
 801351a:	1b52      	subs	r2, r2, r5
 801351c:	f022 0203 	bic.w	r2, r2, #3
 8013520:	3d03      	subs	r5, #3
 8013522:	45ac      	cmp	ip, r5
 8013524:	bf38      	it	cc
 8013526:	2200      	movcc	r2, #0
 8013528:	441a      	add	r2, r3
 801352a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801352e:	b17b      	cbz	r3, 8013550 <__mdiff+0x108>
 8013530:	6107      	str	r7, [r0, #16]
 8013532:	e7a3      	b.n	801347c <__mdiff+0x34>
 8013534:	f856 8b04 	ldr.w	r8, [r6], #4
 8013538:	fa11 f288 	uxtah	r2, r1, r8
 801353c:	1414      	asrs	r4, r2, #16
 801353e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013542:	b292      	uxth	r2, r2
 8013544:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013548:	f84e 2b04 	str.w	r2, [lr], #4
 801354c:	1421      	asrs	r1, r4, #16
 801354e:	e7e0      	b.n	8013512 <__mdiff+0xca>
 8013550:	3f01      	subs	r7, #1
 8013552:	e7ea      	b.n	801352a <__mdiff+0xe2>
 8013554:	08015698 	.word	0x08015698
 8013558:	08015724 	.word	0x08015724

0801355c <__ulp>:
 801355c:	b082      	sub	sp, #8
 801355e:	ed8d 0b00 	vstr	d0, [sp]
 8013562:	9b01      	ldr	r3, [sp, #4]
 8013564:	4912      	ldr	r1, [pc, #72]	; (80135b0 <__ulp+0x54>)
 8013566:	4019      	ands	r1, r3
 8013568:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801356c:	2900      	cmp	r1, #0
 801356e:	dd05      	ble.n	801357c <__ulp+0x20>
 8013570:	2200      	movs	r2, #0
 8013572:	460b      	mov	r3, r1
 8013574:	ec43 2b10 	vmov	d0, r2, r3
 8013578:	b002      	add	sp, #8
 801357a:	4770      	bx	lr
 801357c:	4249      	negs	r1, r1
 801357e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013582:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013586:	f04f 0200 	mov.w	r2, #0
 801358a:	f04f 0300 	mov.w	r3, #0
 801358e:	da04      	bge.n	801359a <__ulp+0x3e>
 8013590:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013594:	fa41 f300 	asr.w	r3, r1, r0
 8013598:	e7ec      	b.n	8013574 <__ulp+0x18>
 801359a:	f1a0 0114 	sub.w	r1, r0, #20
 801359e:	291e      	cmp	r1, #30
 80135a0:	bfda      	itte	le
 80135a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80135a6:	fa20 f101 	lsrle.w	r1, r0, r1
 80135aa:	2101      	movgt	r1, #1
 80135ac:	460a      	mov	r2, r1
 80135ae:	e7e1      	b.n	8013574 <__ulp+0x18>
 80135b0:	7ff00000 	.word	0x7ff00000

080135b4 <__b2d>:
 80135b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135b6:	6905      	ldr	r5, [r0, #16]
 80135b8:	f100 0714 	add.w	r7, r0, #20
 80135bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80135c0:	1f2e      	subs	r6, r5, #4
 80135c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80135c6:	4620      	mov	r0, r4
 80135c8:	f7ff fd48 	bl	801305c <__hi0bits>
 80135cc:	f1c0 0320 	rsb	r3, r0, #32
 80135d0:	280a      	cmp	r0, #10
 80135d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013650 <__b2d+0x9c>
 80135d6:	600b      	str	r3, [r1, #0]
 80135d8:	dc14      	bgt.n	8013604 <__b2d+0x50>
 80135da:	f1c0 0e0b 	rsb	lr, r0, #11
 80135de:	fa24 f10e 	lsr.w	r1, r4, lr
 80135e2:	42b7      	cmp	r7, r6
 80135e4:	ea41 030c 	orr.w	r3, r1, ip
 80135e8:	bf34      	ite	cc
 80135ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80135ee:	2100      	movcs	r1, #0
 80135f0:	3015      	adds	r0, #21
 80135f2:	fa04 f000 	lsl.w	r0, r4, r0
 80135f6:	fa21 f10e 	lsr.w	r1, r1, lr
 80135fa:	ea40 0201 	orr.w	r2, r0, r1
 80135fe:	ec43 2b10 	vmov	d0, r2, r3
 8013602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013604:	42b7      	cmp	r7, r6
 8013606:	bf3a      	itte	cc
 8013608:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801360c:	f1a5 0608 	subcc.w	r6, r5, #8
 8013610:	2100      	movcs	r1, #0
 8013612:	380b      	subs	r0, #11
 8013614:	d017      	beq.n	8013646 <__b2d+0x92>
 8013616:	f1c0 0c20 	rsb	ip, r0, #32
 801361a:	fa04 f500 	lsl.w	r5, r4, r0
 801361e:	42be      	cmp	r6, r7
 8013620:	fa21 f40c 	lsr.w	r4, r1, ip
 8013624:	ea45 0504 	orr.w	r5, r5, r4
 8013628:	bf8c      	ite	hi
 801362a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801362e:	2400      	movls	r4, #0
 8013630:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013634:	fa01 f000 	lsl.w	r0, r1, r0
 8013638:	fa24 f40c 	lsr.w	r4, r4, ip
 801363c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013640:	ea40 0204 	orr.w	r2, r0, r4
 8013644:	e7db      	b.n	80135fe <__b2d+0x4a>
 8013646:	ea44 030c 	orr.w	r3, r4, ip
 801364a:	460a      	mov	r2, r1
 801364c:	e7d7      	b.n	80135fe <__b2d+0x4a>
 801364e:	bf00      	nop
 8013650:	3ff00000 	.word	0x3ff00000

08013654 <__d2b>:
 8013654:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013658:	4689      	mov	r9, r1
 801365a:	2101      	movs	r1, #1
 801365c:	ec57 6b10 	vmov	r6, r7, d0
 8013660:	4690      	mov	r8, r2
 8013662:	f7ff fc09 	bl	8012e78 <_Balloc>
 8013666:	4604      	mov	r4, r0
 8013668:	b930      	cbnz	r0, 8013678 <__d2b+0x24>
 801366a:	4602      	mov	r2, r0
 801366c:	4b25      	ldr	r3, [pc, #148]	; (8013704 <__d2b+0xb0>)
 801366e:	4826      	ldr	r0, [pc, #152]	; (8013708 <__d2b+0xb4>)
 8013670:	f240 310a 	movw	r1, #778	; 0x30a
 8013674:	f000 fb4e 	bl	8013d14 <__assert_func>
 8013678:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801367c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013680:	bb35      	cbnz	r5, 80136d0 <__d2b+0x7c>
 8013682:	2e00      	cmp	r6, #0
 8013684:	9301      	str	r3, [sp, #4]
 8013686:	d028      	beq.n	80136da <__d2b+0x86>
 8013688:	4668      	mov	r0, sp
 801368a:	9600      	str	r6, [sp, #0]
 801368c:	f7ff fd06 	bl	801309c <__lo0bits>
 8013690:	9900      	ldr	r1, [sp, #0]
 8013692:	b300      	cbz	r0, 80136d6 <__d2b+0x82>
 8013694:	9a01      	ldr	r2, [sp, #4]
 8013696:	f1c0 0320 	rsb	r3, r0, #32
 801369a:	fa02 f303 	lsl.w	r3, r2, r3
 801369e:	430b      	orrs	r3, r1
 80136a0:	40c2      	lsrs	r2, r0
 80136a2:	6163      	str	r3, [r4, #20]
 80136a4:	9201      	str	r2, [sp, #4]
 80136a6:	9b01      	ldr	r3, [sp, #4]
 80136a8:	61a3      	str	r3, [r4, #24]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	bf14      	ite	ne
 80136ae:	2202      	movne	r2, #2
 80136b0:	2201      	moveq	r2, #1
 80136b2:	6122      	str	r2, [r4, #16]
 80136b4:	b1d5      	cbz	r5, 80136ec <__d2b+0x98>
 80136b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80136ba:	4405      	add	r5, r0
 80136bc:	f8c9 5000 	str.w	r5, [r9]
 80136c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80136c4:	f8c8 0000 	str.w	r0, [r8]
 80136c8:	4620      	mov	r0, r4
 80136ca:	b003      	add	sp, #12
 80136cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80136d4:	e7d5      	b.n	8013682 <__d2b+0x2e>
 80136d6:	6161      	str	r1, [r4, #20]
 80136d8:	e7e5      	b.n	80136a6 <__d2b+0x52>
 80136da:	a801      	add	r0, sp, #4
 80136dc:	f7ff fcde 	bl	801309c <__lo0bits>
 80136e0:	9b01      	ldr	r3, [sp, #4]
 80136e2:	6163      	str	r3, [r4, #20]
 80136e4:	2201      	movs	r2, #1
 80136e6:	6122      	str	r2, [r4, #16]
 80136e8:	3020      	adds	r0, #32
 80136ea:	e7e3      	b.n	80136b4 <__d2b+0x60>
 80136ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80136f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80136f4:	f8c9 0000 	str.w	r0, [r9]
 80136f8:	6918      	ldr	r0, [r3, #16]
 80136fa:	f7ff fcaf 	bl	801305c <__hi0bits>
 80136fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013702:	e7df      	b.n	80136c4 <__d2b+0x70>
 8013704:	08015698 	.word	0x08015698
 8013708:	08015724 	.word	0x08015724

0801370c <__ratio>:
 801370c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013710:	4688      	mov	r8, r1
 8013712:	4669      	mov	r1, sp
 8013714:	4681      	mov	r9, r0
 8013716:	f7ff ff4d 	bl	80135b4 <__b2d>
 801371a:	a901      	add	r1, sp, #4
 801371c:	4640      	mov	r0, r8
 801371e:	ec55 4b10 	vmov	r4, r5, d0
 8013722:	f7ff ff47 	bl	80135b4 <__b2d>
 8013726:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801372a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801372e:	eba3 0c02 	sub.w	ip, r3, r2
 8013732:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013736:	1a9b      	subs	r3, r3, r2
 8013738:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801373c:	ec51 0b10 	vmov	r0, r1, d0
 8013740:	2b00      	cmp	r3, #0
 8013742:	bfd6      	itet	le
 8013744:	460a      	movle	r2, r1
 8013746:	462a      	movgt	r2, r5
 8013748:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801374c:	468b      	mov	fp, r1
 801374e:	462f      	mov	r7, r5
 8013750:	bfd4      	ite	le
 8013752:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013756:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801375a:	4620      	mov	r0, r4
 801375c:	ee10 2a10 	vmov	r2, s0
 8013760:	465b      	mov	r3, fp
 8013762:	4639      	mov	r1, r7
 8013764:	f7ed f872 	bl	800084c <__aeabi_ddiv>
 8013768:	ec41 0b10 	vmov	d0, r0, r1
 801376c:	b003      	add	sp, #12
 801376e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013772 <__copybits>:
 8013772:	3901      	subs	r1, #1
 8013774:	b570      	push	{r4, r5, r6, lr}
 8013776:	1149      	asrs	r1, r1, #5
 8013778:	6914      	ldr	r4, [r2, #16]
 801377a:	3101      	adds	r1, #1
 801377c:	f102 0314 	add.w	r3, r2, #20
 8013780:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013784:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013788:	1f05      	subs	r5, r0, #4
 801378a:	42a3      	cmp	r3, r4
 801378c:	d30c      	bcc.n	80137a8 <__copybits+0x36>
 801378e:	1aa3      	subs	r3, r4, r2
 8013790:	3b11      	subs	r3, #17
 8013792:	f023 0303 	bic.w	r3, r3, #3
 8013796:	3211      	adds	r2, #17
 8013798:	42a2      	cmp	r2, r4
 801379a:	bf88      	it	hi
 801379c:	2300      	movhi	r3, #0
 801379e:	4418      	add	r0, r3
 80137a0:	2300      	movs	r3, #0
 80137a2:	4288      	cmp	r0, r1
 80137a4:	d305      	bcc.n	80137b2 <__copybits+0x40>
 80137a6:	bd70      	pop	{r4, r5, r6, pc}
 80137a8:	f853 6b04 	ldr.w	r6, [r3], #4
 80137ac:	f845 6f04 	str.w	r6, [r5, #4]!
 80137b0:	e7eb      	b.n	801378a <__copybits+0x18>
 80137b2:	f840 3b04 	str.w	r3, [r0], #4
 80137b6:	e7f4      	b.n	80137a2 <__copybits+0x30>

080137b8 <__any_on>:
 80137b8:	f100 0214 	add.w	r2, r0, #20
 80137bc:	6900      	ldr	r0, [r0, #16]
 80137be:	114b      	asrs	r3, r1, #5
 80137c0:	4298      	cmp	r0, r3
 80137c2:	b510      	push	{r4, lr}
 80137c4:	db11      	blt.n	80137ea <__any_on+0x32>
 80137c6:	dd0a      	ble.n	80137de <__any_on+0x26>
 80137c8:	f011 011f 	ands.w	r1, r1, #31
 80137cc:	d007      	beq.n	80137de <__any_on+0x26>
 80137ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80137d2:	fa24 f001 	lsr.w	r0, r4, r1
 80137d6:	fa00 f101 	lsl.w	r1, r0, r1
 80137da:	428c      	cmp	r4, r1
 80137dc:	d10b      	bne.n	80137f6 <__any_on+0x3e>
 80137de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80137e2:	4293      	cmp	r3, r2
 80137e4:	d803      	bhi.n	80137ee <__any_on+0x36>
 80137e6:	2000      	movs	r0, #0
 80137e8:	bd10      	pop	{r4, pc}
 80137ea:	4603      	mov	r3, r0
 80137ec:	e7f7      	b.n	80137de <__any_on+0x26>
 80137ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80137f2:	2900      	cmp	r1, #0
 80137f4:	d0f5      	beq.n	80137e2 <__any_on+0x2a>
 80137f6:	2001      	movs	r0, #1
 80137f8:	e7f6      	b.n	80137e8 <__any_on+0x30>

080137fa <_calloc_r>:
 80137fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80137fc:	fba1 2402 	umull	r2, r4, r1, r2
 8013800:	b94c      	cbnz	r4, 8013816 <_calloc_r+0x1c>
 8013802:	4611      	mov	r1, r2
 8013804:	9201      	str	r2, [sp, #4]
 8013806:	f000 f87b 	bl	8013900 <_malloc_r>
 801380a:	9a01      	ldr	r2, [sp, #4]
 801380c:	4605      	mov	r5, r0
 801380e:	b930      	cbnz	r0, 801381e <_calloc_r+0x24>
 8013810:	4628      	mov	r0, r5
 8013812:	b003      	add	sp, #12
 8013814:	bd30      	pop	{r4, r5, pc}
 8013816:	220c      	movs	r2, #12
 8013818:	6002      	str	r2, [r0, #0]
 801381a:	2500      	movs	r5, #0
 801381c:	e7f8      	b.n	8013810 <_calloc_r+0x16>
 801381e:	4621      	mov	r1, r4
 8013820:	f7fc fbcc 	bl	800ffbc <memset>
 8013824:	e7f4      	b.n	8013810 <_calloc_r+0x16>
	...

08013828 <_free_r>:
 8013828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801382a:	2900      	cmp	r1, #0
 801382c:	d044      	beq.n	80138b8 <_free_r+0x90>
 801382e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013832:	9001      	str	r0, [sp, #4]
 8013834:	2b00      	cmp	r3, #0
 8013836:	f1a1 0404 	sub.w	r4, r1, #4
 801383a:	bfb8      	it	lt
 801383c:	18e4      	addlt	r4, r4, r3
 801383e:	f000 fab3 	bl	8013da8 <__malloc_lock>
 8013842:	4a1e      	ldr	r2, [pc, #120]	; (80138bc <_free_r+0x94>)
 8013844:	9801      	ldr	r0, [sp, #4]
 8013846:	6813      	ldr	r3, [r2, #0]
 8013848:	b933      	cbnz	r3, 8013858 <_free_r+0x30>
 801384a:	6063      	str	r3, [r4, #4]
 801384c:	6014      	str	r4, [r2, #0]
 801384e:	b003      	add	sp, #12
 8013850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013854:	f000 baae 	b.w	8013db4 <__malloc_unlock>
 8013858:	42a3      	cmp	r3, r4
 801385a:	d908      	bls.n	801386e <_free_r+0x46>
 801385c:	6825      	ldr	r5, [r4, #0]
 801385e:	1961      	adds	r1, r4, r5
 8013860:	428b      	cmp	r3, r1
 8013862:	bf01      	itttt	eq
 8013864:	6819      	ldreq	r1, [r3, #0]
 8013866:	685b      	ldreq	r3, [r3, #4]
 8013868:	1949      	addeq	r1, r1, r5
 801386a:	6021      	streq	r1, [r4, #0]
 801386c:	e7ed      	b.n	801384a <_free_r+0x22>
 801386e:	461a      	mov	r2, r3
 8013870:	685b      	ldr	r3, [r3, #4]
 8013872:	b10b      	cbz	r3, 8013878 <_free_r+0x50>
 8013874:	42a3      	cmp	r3, r4
 8013876:	d9fa      	bls.n	801386e <_free_r+0x46>
 8013878:	6811      	ldr	r1, [r2, #0]
 801387a:	1855      	adds	r5, r2, r1
 801387c:	42a5      	cmp	r5, r4
 801387e:	d10b      	bne.n	8013898 <_free_r+0x70>
 8013880:	6824      	ldr	r4, [r4, #0]
 8013882:	4421      	add	r1, r4
 8013884:	1854      	adds	r4, r2, r1
 8013886:	42a3      	cmp	r3, r4
 8013888:	6011      	str	r1, [r2, #0]
 801388a:	d1e0      	bne.n	801384e <_free_r+0x26>
 801388c:	681c      	ldr	r4, [r3, #0]
 801388e:	685b      	ldr	r3, [r3, #4]
 8013890:	6053      	str	r3, [r2, #4]
 8013892:	4421      	add	r1, r4
 8013894:	6011      	str	r1, [r2, #0]
 8013896:	e7da      	b.n	801384e <_free_r+0x26>
 8013898:	d902      	bls.n	80138a0 <_free_r+0x78>
 801389a:	230c      	movs	r3, #12
 801389c:	6003      	str	r3, [r0, #0]
 801389e:	e7d6      	b.n	801384e <_free_r+0x26>
 80138a0:	6825      	ldr	r5, [r4, #0]
 80138a2:	1961      	adds	r1, r4, r5
 80138a4:	428b      	cmp	r3, r1
 80138a6:	bf04      	itt	eq
 80138a8:	6819      	ldreq	r1, [r3, #0]
 80138aa:	685b      	ldreq	r3, [r3, #4]
 80138ac:	6063      	str	r3, [r4, #4]
 80138ae:	bf04      	itt	eq
 80138b0:	1949      	addeq	r1, r1, r5
 80138b2:	6021      	streq	r1, [r4, #0]
 80138b4:	6054      	str	r4, [r2, #4]
 80138b6:	e7ca      	b.n	801384e <_free_r+0x26>
 80138b8:	b003      	add	sp, #12
 80138ba:	bd30      	pop	{r4, r5, pc}
 80138bc:	200063b8 	.word	0x200063b8

080138c0 <sbrk_aligned>:
 80138c0:	b570      	push	{r4, r5, r6, lr}
 80138c2:	4e0e      	ldr	r6, [pc, #56]	; (80138fc <sbrk_aligned+0x3c>)
 80138c4:	460c      	mov	r4, r1
 80138c6:	6831      	ldr	r1, [r6, #0]
 80138c8:	4605      	mov	r5, r0
 80138ca:	b911      	cbnz	r1, 80138d2 <sbrk_aligned+0x12>
 80138cc:	f000 f9f0 	bl	8013cb0 <_sbrk_r>
 80138d0:	6030      	str	r0, [r6, #0]
 80138d2:	4621      	mov	r1, r4
 80138d4:	4628      	mov	r0, r5
 80138d6:	f000 f9eb 	bl	8013cb0 <_sbrk_r>
 80138da:	1c43      	adds	r3, r0, #1
 80138dc:	d00a      	beq.n	80138f4 <sbrk_aligned+0x34>
 80138de:	1cc4      	adds	r4, r0, #3
 80138e0:	f024 0403 	bic.w	r4, r4, #3
 80138e4:	42a0      	cmp	r0, r4
 80138e6:	d007      	beq.n	80138f8 <sbrk_aligned+0x38>
 80138e8:	1a21      	subs	r1, r4, r0
 80138ea:	4628      	mov	r0, r5
 80138ec:	f000 f9e0 	bl	8013cb0 <_sbrk_r>
 80138f0:	3001      	adds	r0, #1
 80138f2:	d101      	bne.n	80138f8 <sbrk_aligned+0x38>
 80138f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80138f8:	4620      	mov	r0, r4
 80138fa:	bd70      	pop	{r4, r5, r6, pc}
 80138fc:	200063bc 	.word	0x200063bc

08013900 <_malloc_r>:
 8013900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013904:	1ccd      	adds	r5, r1, #3
 8013906:	f025 0503 	bic.w	r5, r5, #3
 801390a:	3508      	adds	r5, #8
 801390c:	2d0c      	cmp	r5, #12
 801390e:	bf38      	it	cc
 8013910:	250c      	movcc	r5, #12
 8013912:	2d00      	cmp	r5, #0
 8013914:	4607      	mov	r7, r0
 8013916:	db01      	blt.n	801391c <_malloc_r+0x1c>
 8013918:	42a9      	cmp	r1, r5
 801391a:	d905      	bls.n	8013928 <_malloc_r+0x28>
 801391c:	230c      	movs	r3, #12
 801391e:	603b      	str	r3, [r7, #0]
 8013920:	2600      	movs	r6, #0
 8013922:	4630      	mov	r0, r6
 8013924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013928:	4e2e      	ldr	r6, [pc, #184]	; (80139e4 <_malloc_r+0xe4>)
 801392a:	f000 fa3d 	bl	8013da8 <__malloc_lock>
 801392e:	6833      	ldr	r3, [r6, #0]
 8013930:	461c      	mov	r4, r3
 8013932:	bb34      	cbnz	r4, 8013982 <_malloc_r+0x82>
 8013934:	4629      	mov	r1, r5
 8013936:	4638      	mov	r0, r7
 8013938:	f7ff ffc2 	bl	80138c0 <sbrk_aligned>
 801393c:	1c43      	adds	r3, r0, #1
 801393e:	4604      	mov	r4, r0
 8013940:	d14d      	bne.n	80139de <_malloc_r+0xde>
 8013942:	6834      	ldr	r4, [r6, #0]
 8013944:	4626      	mov	r6, r4
 8013946:	2e00      	cmp	r6, #0
 8013948:	d140      	bne.n	80139cc <_malloc_r+0xcc>
 801394a:	6823      	ldr	r3, [r4, #0]
 801394c:	4631      	mov	r1, r6
 801394e:	4638      	mov	r0, r7
 8013950:	eb04 0803 	add.w	r8, r4, r3
 8013954:	f000 f9ac 	bl	8013cb0 <_sbrk_r>
 8013958:	4580      	cmp	r8, r0
 801395a:	d13a      	bne.n	80139d2 <_malloc_r+0xd2>
 801395c:	6821      	ldr	r1, [r4, #0]
 801395e:	3503      	adds	r5, #3
 8013960:	1a6d      	subs	r5, r5, r1
 8013962:	f025 0503 	bic.w	r5, r5, #3
 8013966:	3508      	adds	r5, #8
 8013968:	2d0c      	cmp	r5, #12
 801396a:	bf38      	it	cc
 801396c:	250c      	movcc	r5, #12
 801396e:	4629      	mov	r1, r5
 8013970:	4638      	mov	r0, r7
 8013972:	f7ff ffa5 	bl	80138c0 <sbrk_aligned>
 8013976:	3001      	adds	r0, #1
 8013978:	d02b      	beq.n	80139d2 <_malloc_r+0xd2>
 801397a:	6823      	ldr	r3, [r4, #0]
 801397c:	442b      	add	r3, r5
 801397e:	6023      	str	r3, [r4, #0]
 8013980:	e00e      	b.n	80139a0 <_malloc_r+0xa0>
 8013982:	6822      	ldr	r2, [r4, #0]
 8013984:	1b52      	subs	r2, r2, r5
 8013986:	d41e      	bmi.n	80139c6 <_malloc_r+0xc6>
 8013988:	2a0b      	cmp	r2, #11
 801398a:	d916      	bls.n	80139ba <_malloc_r+0xba>
 801398c:	1961      	adds	r1, r4, r5
 801398e:	42a3      	cmp	r3, r4
 8013990:	6025      	str	r5, [r4, #0]
 8013992:	bf18      	it	ne
 8013994:	6059      	strne	r1, [r3, #4]
 8013996:	6863      	ldr	r3, [r4, #4]
 8013998:	bf08      	it	eq
 801399a:	6031      	streq	r1, [r6, #0]
 801399c:	5162      	str	r2, [r4, r5]
 801399e:	604b      	str	r3, [r1, #4]
 80139a0:	4638      	mov	r0, r7
 80139a2:	f104 060b 	add.w	r6, r4, #11
 80139a6:	f000 fa05 	bl	8013db4 <__malloc_unlock>
 80139aa:	f026 0607 	bic.w	r6, r6, #7
 80139ae:	1d23      	adds	r3, r4, #4
 80139b0:	1af2      	subs	r2, r6, r3
 80139b2:	d0b6      	beq.n	8013922 <_malloc_r+0x22>
 80139b4:	1b9b      	subs	r3, r3, r6
 80139b6:	50a3      	str	r3, [r4, r2]
 80139b8:	e7b3      	b.n	8013922 <_malloc_r+0x22>
 80139ba:	6862      	ldr	r2, [r4, #4]
 80139bc:	42a3      	cmp	r3, r4
 80139be:	bf0c      	ite	eq
 80139c0:	6032      	streq	r2, [r6, #0]
 80139c2:	605a      	strne	r2, [r3, #4]
 80139c4:	e7ec      	b.n	80139a0 <_malloc_r+0xa0>
 80139c6:	4623      	mov	r3, r4
 80139c8:	6864      	ldr	r4, [r4, #4]
 80139ca:	e7b2      	b.n	8013932 <_malloc_r+0x32>
 80139cc:	4634      	mov	r4, r6
 80139ce:	6876      	ldr	r6, [r6, #4]
 80139d0:	e7b9      	b.n	8013946 <_malloc_r+0x46>
 80139d2:	230c      	movs	r3, #12
 80139d4:	603b      	str	r3, [r7, #0]
 80139d6:	4638      	mov	r0, r7
 80139d8:	f000 f9ec 	bl	8013db4 <__malloc_unlock>
 80139dc:	e7a1      	b.n	8013922 <_malloc_r+0x22>
 80139de:	6025      	str	r5, [r4, #0]
 80139e0:	e7de      	b.n	80139a0 <_malloc_r+0xa0>
 80139e2:	bf00      	nop
 80139e4:	200063b8 	.word	0x200063b8

080139e8 <__ssputs_r>:
 80139e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139ec:	688e      	ldr	r6, [r1, #8]
 80139ee:	429e      	cmp	r6, r3
 80139f0:	4682      	mov	sl, r0
 80139f2:	460c      	mov	r4, r1
 80139f4:	4690      	mov	r8, r2
 80139f6:	461f      	mov	r7, r3
 80139f8:	d838      	bhi.n	8013a6c <__ssputs_r+0x84>
 80139fa:	898a      	ldrh	r2, [r1, #12]
 80139fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013a00:	d032      	beq.n	8013a68 <__ssputs_r+0x80>
 8013a02:	6825      	ldr	r5, [r4, #0]
 8013a04:	6909      	ldr	r1, [r1, #16]
 8013a06:	eba5 0901 	sub.w	r9, r5, r1
 8013a0a:	6965      	ldr	r5, [r4, #20]
 8013a0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013a14:	3301      	adds	r3, #1
 8013a16:	444b      	add	r3, r9
 8013a18:	106d      	asrs	r5, r5, #1
 8013a1a:	429d      	cmp	r5, r3
 8013a1c:	bf38      	it	cc
 8013a1e:	461d      	movcc	r5, r3
 8013a20:	0553      	lsls	r3, r2, #21
 8013a22:	d531      	bpl.n	8013a88 <__ssputs_r+0xa0>
 8013a24:	4629      	mov	r1, r5
 8013a26:	f7ff ff6b 	bl	8013900 <_malloc_r>
 8013a2a:	4606      	mov	r6, r0
 8013a2c:	b950      	cbnz	r0, 8013a44 <__ssputs_r+0x5c>
 8013a2e:	230c      	movs	r3, #12
 8013a30:	f8ca 3000 	str.w	r3, [sl]
 8013a34:	89a3      	ldrh	r3, [r4, #12]
 8013a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a3a:	81a3      	strh	r3, [r4, #12]
 8013a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a44:	6921      	ldr	r1, [r4, #16]
 8013a46:	464a      	mov	r2, r9
 8013a48:	f7fc faaa 	bl	800ffa0 <memcpy>
 8013a4c:	89a3      	ldrh	r3, [r4, #12]
 8013a4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a56:	81a3      	strh	r3, [r4, #12]
 8013a58:	6126      	str	r6, [r4, #16]
 8013a5a:	6165      	str	r5, [r4, #20]
 8013a5c:	444e      	add	r6, r9
 8013a5e:	eba5 0509 	sub.w	r5, r5, r9
 8013a62:	6026      	str	r6, [r4, #0]
 8013a64:	60a5      	str	r5, [r4, #8]
 8013a66:	463e      	mov	r6, r7
 8013a68:	42be      	cmp	r6, r7
 8013a6a:	d900      	bls.n	8013a6e <__ssputs_r+0x86>
 8013a6c:	463e      	mov	r6, r7
 8013a6e:	6820      	ldr	r0, [r4, #0]
 8013a70:	4632      	mov	r2, r6
 8013a72:	4641      	mov	r1, r8
 8013a74:	f000 f97e 	bl	8013d74 <memmove>
 8013a78:	68a3      	ldr	r3, [r4, #8]
 8013a7a:	1b9b      	subs	r3, r3, r6
 8013a7c:	60a3      	str	r3, [r4, #8]
 8013a7e:	6823      	ldr	r3, [r4, #0]
 8013a80:	4433      	add	r3, r6
 8013a82:	6023      	str	r3, [r4, #0]
 8013a84:	2000      	movs	r0, #0
 8013a86:	e7db      	b.n	8013a40 <__ssputs_r+0x58>
 8013a88:	462a      	mov	r2, r5
 8013a8a:	f000 f999 	bl	8013dc0 <_realloc_r>
 8013a8e:	4606      	mov	r6, r0
 8013a90:	2800      	cmp	r0, #0
 8013a92:	d1e1      	bne.n	8013a58 <__ssputs_r+0x70>
 8013a94:	6921      	ldr	r1, [r4, #16]
 8013a96:	4650      	mov	r0, sl
 8013a98:	f7ff fec6 	bl	8013828 <_free_r>
 8013a9c:	e7c7      	b.n	8013a2e <__ssputs_r+0x46>
	...

08013aa0 <_svfiprintf_r>:
 8013aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aa4:	4698      	mov	r8, r3
 8013aa6:	898b      	ldrh	r3, [r1, #12]
 8013aa8:	061b      	lsls	r3, r3, #24
 8013aaa:	b09d      	sub	sp, #116	; 0x74
 8013aac:	4607      	mov	r7, r0
 8013aae:	460d      	mov	r5, r1
 8013ab0:	4614      	mov	r4, r2
 8013ab2:	d50e      	bpl.n	8013ad2 <_svfiprintf_r+0x32>
 8013ab4:	690b      	ldr	r3, [r1, #16]
 8013ab6:	b963      	cbnz	r3, 8013ad2 <_svfiprintf_r+0x32>
 8013ab8:	2140      	movs	r1, #64	; 0x40
 8013aba:	f7ff ff21 	bl	8013900 <_malloc_r>
 8013abe:	6028      	str	r0, [r5, #0]
 8013ac0:	6128      	str	r0, [r5, #16]
 8013ac2:	b920      	cbnz	r0, 8013ace <_svfiprintf_r+0x2e>
 8013ac4:	230c      	movs	r3, #12
 8013ac6:	603b      	str	r3, [r7, #0]
 8013ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013acc:	e0d1      	b.n	8013c72 <_svfiprintf_r+0x1d2>
 8013ace:	2340      	movs	r3, #64	; 0x40
 8013ad0:	616b      	str	r3, [r5, #20]
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8013ad6:	2320      	movs	r3, #32
 8013ad8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ae0:	2330      	movs	r3, #48	; 0x30
 8013ae2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013c8c <_svfiprintf_r+0x1ec>
 8013ae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013aea:	f04f 0901 	mov.w	r9, #1
 8013aee:	4623      	mov	r3, r4
 8013af0:	469a      	mov	sl, r3
 8013af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013af6:	b10a      	cbz	r2, 8013afc <_svfiprintf_r+0x5c>
 8013af8:	2a25      	cmp	r2, #37	; 0x25
 8013afa:	d1f9      	bne.n	8013af0 <_svfiprintf_r+0x50>
 8013afc:	ebba 0b04 	subs.w	fp, sl, r4
 8013b00:	d00b      	beq.n	8013b1a <_svfiprintf_r+0x7a>
 8013b02:	465b      	mov	r3, fp
 8013b04:	4622      	mov	r2, r4
 8013b06:	4629      	mov	r1, r5
 8013b08:	4638      	mov	r0, r7
 8013b0a:	f7ff ff6d 	bl	80139e8 <__ssputs_r>
 8013b0e:	3001      	adds	r0, #1
 8013b10:	f000 80aa 	beq.w	8013c68 <_svfiprintf_r+0x1c8>
 8013b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b16:	445a      	add	r2, fp
 8013b18:	9209      	str	r2, [sp, #36]	; 0x24
 8013b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	f000 80a2 	beq.w	8013c68 <_svfiprintf_r+0x1c8>
 8013b24:	2300      	movs	r3, #0
 8013b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b2e:	f10a 0a01 	add.w	sl, sl, #1
 8013b32:	9304      	str	r3, [sp, #16]
 8013b34:	9307      	str	r3, [sp, #28]
 8013b36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b3a:	931a      	str	r3, [sp, #104]	; 0x68
 8013b3c:	4654      	mov	r4, sl
 8013b3e:	2205      	movs	r2, #5
 8013b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b44:	4851      	ldr	r0, [pc, #324]	; (8013c8c <_svfiprintf_r+0x1ec>)
 8013b46:	f7ec fb4b 	bl	80001e0 <memchr>
 8013b4a:	9a04      	ldr	r2, [sp, #16]
 8013b4c:	b9d8      	cbnz	r0, 8013b86 <_svfiprintf_r+0xe6>
 8013b4e:	06d0      	lsls	r0, r2, #27
 8013b50:	bf44      	itt	mi
 8013b52:	2320      	movmi	r3, #32
 8013b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b58:	0711      	lsls	r1, r2, #28
 8013b5a:	bf44      	itt	mi
 8013b5c:	232b      	movmi	r3, #43	; 0x2b
 8013b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b62:	f89a 3000 	ldrb.w	r3, [sl]
 8013b66:	2b2a      	cmp	r3, #42	; 0x2a
 8013b68:	d015      	beq.n	8013b96 <_svfiprintf_r+0xf6>
 8013b6a:	9a07      	ldr	r2, [sp, #28]
 8013b6c:	4654      	mov	r4, sl
 8013b6e:	2000      	movs	r0, #0
 8013b70:	f04f 0c0a 	mov.w	ip, #10
 8013b74:	4621      	mov	r1, r4
 8013b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b7a:	3b30      	subs	r3, #48	; 0x30
 8013b7c:	2b09      	cmp	r3, #9
 8013b7e:	d94e      	bls.n	8013c1e <_svfiprintf_r+0x17e>
 8013b80:	b1b0      	cbz	r0, 8013bb0 <_svfiprintf_r+0x110>
 8013b82:	9207      	str	r2, [sp, #28]
 8013b84:	e014      	b.n	8013bb0 <_svfiprintf_r+0x110>
 8013b86:	eba0 0308 	sub.w	r3, r0, r8
 8013b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8013b8e:	4313      	orrs	r3, r2
 8013b90:	9304      	str	r3, [sp, #16]
 8013b92:	46a2      	mov	sl, r4
 8013b94:	e7d2      	b.n	8013b3c <_svfiprintf_r+0x9c>
 8013b96:	9b03      	ldr	r3, [sp, #12]
 8013b98:	1d19      	adds	r1, r3, #4
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	9103      	str	r1, [sp, #12]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	bfbb      	ittet	lt
 8013ba2:	425b      	neglt	r3, r3
 8013ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8013ba8:	9307      	strge	r3, [sp, #28]
 8013baa:	9307      	strlt	r3, [sp, #28]
 8013bac:	bfb8      	it	lt
 8013bae:	9204      	strlt	r2, [sp, #16]
 8013bb0:	7823      	ldrb	r3, [r4, #0]
 8013bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8013bb4:	d10c      	bne.n	8013bd0 <_svfiprintf_r+0x130>
 8013bb6:	7863      	ldrb	r3, [r4, #1]
 8013bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8013bba:	d135      	bne.n	8013c28 <_svfiprintf_r+0x188>
 8013bbc:	9b03      	ldr	r3, [sp, #12]
 8013bbe:	1d1a      	adds	r2, r3, #4
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	9203      	str	r2, [sp, #12]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	bfb8      	it	lt
 8013bc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013bcc:	3402      	adds	r4, #2
 8013bce:	9305      	str	r3, [sp, #20]
 8013bd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013c9c <_svfiprintf_r+0x1fc>
 8013bd4:	7821      	ldrb	r1, [r4, #0]
 8013bd6:	2203      	movs	r2, #3
 8013bd8:	4650      	mov	r0, sl
 8013bda:	f7ec fb01 	bl	80001e0 <memchr>
 8013bde:	b140      	cbz	r0, 8013bf2 <_svfiprintf_r+0x152>
 8013be0:	2340      	movs	r3, #64	; 0x40
 8013be2:	eba0 000a 	sub.w	r0, r0, sl
 8013be6:	fa03 f000 	lsl.w	r0, r3, r0
 8013bea:	9b04      	ldr	r3, [sp, #16]
 8013bec:	4303      	orrs	r3, r0
 8013bee:	3401      	adds	r4, #1
 8013bf0:	9304      	str	r3, [sp, #16]
 8013bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bf6:	4826      	ldr	r0, [pc, #152]	; (8013c90 <_svfiprintf_r+0x1f0>)
 8013bf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013bfc:	2206      	movs	r2, #6
 8013bfe:	f7ec faef 	bl	80001e0 <memchr>
 8013c02:	2800      	cmp	r0, #0
 8013c04:	d038      	beq.n	8013c78 <_svfiprintf_r+0x1d8>
 8013c06:	4b23      	ldr	r3, [pc, #140]	; (8013c94 <_svfiprintf_r+0x1f4>)
 8013c08:	bb1b      	cbnz	r3, 8013c52 <_svfiprintf_r+0x1b2>
 8013c0a:	9b03      	ldr	r3, [sp, #12]
 8013c0c:	3307      	adds	r3, #7
 8013c0e:	f023 0307 	bic.w	r3, r3, #7
 8013c12:	3308      	adds	r3, #8
 8013c14:	9303      	str	r3, [sp, #12]
 8013c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c18:	4433      	add	r3, r6
 8013c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8013c1c:	e767      	b.n	8013aee <_svfiprintf_r+0x4e>
 8013c1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c22:	460c      	mov	r4, r1
 8013c24:	2001      	movs	r0, #1
 8013c26:	e7a5      	b.n	8013b74 <_svfiprintf_r+0xd4>
 8013c28:	2300      	movs	r3, #0
 8013c2a:	3401      	adds	r4, #1
 8013c2c:	9305      	str	r3, [sp, #20]
 8013c2e:	4619      	mov	r1, r3
 8013c30:	f04f 0c0a 	mov.w	ip, #10
 8013c34:	4620      	mov	r0, r4
 8013c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c3a:	3a30      	subs	r2, #48	; 0x30
 8013c3c:	2a09      	cmp	r2, #9
 8013c3e:	d903      	bls.n	8013c48 <_svfiprintf_r+0x1a8>
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d0c5      	beq.n	8013bd0 <_svfiprintf_r+0x130>
 8013c44:	9105      	str	r1, [sp, #20]
 8013c46:	e7c3      	b.n	8013bd0 <_svfiprintf_r+0x130>
 8013c48:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c4c:	4604      	mov	r4, r0
 8013c4e:	2301      	movs	r3, #1
 8013c50:	e7f0      	b.n	8013c34 <_svfiprintf_r+0x194>
 8013c52:	ab03      	add	r3, sp, #12
 8013c54:	9300      	str	r3, [sp, #0]
 8013c56:	462a      	mov	r2, r5
 8013c58:	4b0f      	ldr	r3, [pc, #60]	; (8013c98 <_svfiprintf_r+0x1f8>)
 8013c5a:	a904      	add	r1, sp, #16
 8013c5c:	4638      	mov	r0, r7
 8013c5e:	f7fc fa55 	bl	801010c <_printf_float>
 8013c62:	1c42      	adds	r2, r0, #1
 8013c64:	4606      	mov	r6, r0
 8013c66:	d1d6      	bne.n	8013c16 <_svfiprintf_r+0x176>
 8013c68:	89ab      	ldrh	r3, [r5, #12]
 8013c6a:	065b      	lsls	r3, r3, #25
 8013c6c:	f53f af2c 	bmi.w	8013ac8 <_svfiprintf_r+0x28>
 8013c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c72:	b01d      	add	sp, #116	; 0x74
 8013c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c78:	ab03      	add	r3, sp, #12
 8013c7a:	9300      	str	r3, [sp, #0]
 8013c7c:	462a      	mov	r2, r5
 8013c7e:	4b06      	ldr	r3, [pc, #24]	; (8013c98 <_svfiprintf_r+0x1f8>)
 8013c80:	a904      	add	r1, sp, #16
 8013c82:	4638      	mov	r0, r7
 8013c84:	f7fc fce6 	bl	8010654 <_printf_i>
 8013c88:	e7eb      	b.n	8013c62 <_svfiprintf_r+0x1c2>
 8013c8a:	bf00      	nop
 8013c8c:	0801587c 	.word	0x0801587c
 8013c90:	08015886 	.word	0x08015886
 8013c94:	0801010d 	.word	0x0801010d
 8013c98:	080139e9 	.word	0x080139e9
 8013c9c:	08015882 	.word	0x08015882

08013ca0 <nan>:
 8013ca0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013ca8 <nan+0x8>
 8013ca4:	4770      	bx	lr
 8013ca6:	bf00      	nop
 8013ca8:	00000000 	.word	0x00000000
 8013cac:	7ff80000 	.word	0x7ff80000

08013cb0 <_sbrk_r>:
 8013cb0:	b538      	push	{r3, r4, r5, lr}
 8013cb2:	4d06      	ldr	r5, [pc, #24]	; (8013ccc <_sbrk_r+0x1c>)
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	4604      	mov	r4, r0
 8013cb8:	4608      	mov	r0, r1
 8013cba:	602b      	str	r3, [r5, #0]
 8013cbc:	f7f3 f968 	bl	8006f90 <_sbrk>
 8013cc0:	1c43      	adds	r3, r0, #1
 8013cc2:	d102      	bne.n	8013cca <_sbrk_r+0x1a>
 8013cc4:	682b      	ldr	r3, [r5, #0]
 8013cc6:	b103      	cbz	r3, 8013cca <_sbrk_r+0x1a>
 8013cc8:	6023      	str	r3, [r4, #0]
 8013cca:	bd38      	pop	{r3, r4, r5, pc}
 8013ccc:	200063c0 	.word	0x200063c0

08013cd0 <strncmp>:
 8013cd0:	b510      	push	{r4, lr}
 8013cd2:	b17a      	cbz	r2, 8013cf4 <strncmp+0x24>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	3901      	subs	r1, #1
 8013cd8:	1884      	adds	r4, r0, r2
 8013cda:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013cde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013ce2:	4290      	cmp	r0, r2
 8013ce4:	d101      	bne.n	8013cea <strncmp+0x1a>
 8013ce6:	42a3      	cmp	r3, r4
 8013ce8:	d101      	bne.n	8013cee <strncmp+0x1e>
 8013cea:	1a80      	subs	r0, r0, r2
 8013cec:	bd10      	pop	{r4, pc}
 8013cee:	2800      	cmp	r0, #0
 8013cf0:	d1f3      	bne.n	8013cda <strncmp+0xa>
 8013cf2:	e7fa      	b.n	8013cea <strncmp+0x1a>
 8013cf4:	4610      	mov	r0, r2
 8013cf6:	e7f9      	b.n	8013cec <strncmp+0x1c>

08013cf8 <__ascii_wctomb>:
 8013cf8:	b149      	cbz	r1, 8013d0e <__ascii_wctomb+0x16>
 8013cfa:	2aff      	cmp	r2, #255	; 0xff
 8013cfc:	bf85      	ittet	hi
 8013cfe:	238a      	movhi	r3, #138	; 0x8a
 8013d00:	6003      	strhi	r3, [r0, #0]
 8013d02:	700a      	strbls	r2, [r1, #0]
 8013d04:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013d08:	bf98      	it	ls
 8013d0a:	2001      	movls	r0, #1
 8013d0c:	4770      	bx	lr
 8013d0e:	4608      	mov	r0, r1
 8013d10:	4770      	bx	lr
	...

08013d14 <__assert_func>:
 8013d14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013d16:	4614      	mov	r4, r2
 8013d18:	461a      	mov	r2, r3
 8013d1a:	4b09      	ldr	r3, [pc, #36]	; (8013d40 <__assert_func+0x2c>)
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	4605      	mov	r5, r0
 8013d20:	68d8      	ldr	r0, [r3, #12]
 8013d22:	b14c      	cbz	r4, 8013d38 <__assert_func+0x24>
 8013d24:	4b07      	ldr	r3, [pc, #28]	; (8013d44 <__assert_func+0x30>)
 8013d26:	9100      	str	r1, [sp, #0]
 8013d28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013d2c:	4906      	ldr	r1, [pc, #24]	; (8013d48 <__assert_func+0x34>)
 8013d2e:	462b      	mov	r3, r5
 8013d30:	f000 f80e 	bl	8013d50 <fiprintf>
 8013d34:	f000 fa8c 	bl	8014250 <abort>
 8013d38:	4b04      	ldr	r3, [pc, #16]	; (8013d4c <__assert_func+0x38>)
 8013d3a:	461c      	mov	r4, r3
 8013d3c:	e7f3      	b.n	8013d26 <__assert_func+0x12>
 8013d3e:	bf00      	nop
 8013d40:	20000014 	.word	0x20000014
 8013d44:	0801588d 	.word	0x0801588d
 8013d48:	0801589a 	.word	0x0801589a
 8013d4c:	080158c8 	.word	0x080158c8

08013d50 <fiprintf>:
 8013d50:	b40e      	push	{r1, r2, r3}
 8013d52:	b503      	push	{r0, r1, lr}
 8013d54:	4601      	mov	r1, r0
 8013d56:	ab03      	add	r3, sp, #12
 8013d58:	4805      	ldr	r0, [pc, #20]	; (8013d70 <fiprintf+0x20>)
 8013d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d5e:	6800      	ldr	r0, [r0, #0]
 8013d60:	9301      	str	r3, [sp, #4]
 8013d62:	f000 f885 	bl	8013e70 <_vfiprintf_r>
 8013d66:	b002      	add	sp, #8
 8013d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d6c:	b003      	add	sp, #12
 8013d6e:	4770      	bx	lr
 8013d70:	20000014 	.word	0x20000014

08013d74 <memmove>:
 8013d74:	4288      	cmp	r0, r1
 8013d76:	b510      	push	{r4, lr}
 8013d78:	eb01 0402 	add.w	r4, r1, r2
 8013d7c:	d902      	bls.n	8013d84 <memmove+0x10>
 8013d7e:	4284      	cmp	r4, r0
 8013d80:	4623      	mov	r3, r4
 8013d82:	d807      	bhi.n	8013d94 <memmove+0x20>
 8013d84:	1e43      	subs	r3, r0, #1
 8013d86:	42a1      	cmp	r1, r4
 8013d88:	d008      	beq.n	8013d9c <memmove+0x28>
 8013d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013d92:	e7f8      	b.n	8013d86 <memmove+0x12>
 8013d94:	4402      	add	r2, r0
 8013d96:	4601      	mov	r1, r0
 8013d98:	428a      	cmp	r2, r1
 8013d9a:	d100      	bne.n	8013d9e <memmove+0x2a>
 8013d9c:	bd10      	pop	{r4, pc}
 8013d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013da2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013da6:	e7f7      	b.n	8013d98 <memmove+0x24>

08013da8 <__malloc_lock>:
 8013da8:	4801      	ldr	r0, [pc, #4]	; (8013db0 <__malloc_lock+0x8>)
 8013daa:	f000 bc11 	b.w	80145d0 <__retarget_lock_acquire_recursive>
 8013dae:	bf00      	nop
 8013db0:	200063c4 	.word	0x200063c4

08013db4 <__malloc_unlock>:
 8013db4:	4801      	ldr	r0, [pc, #4]	; (8013dbc <__malloc_unlock+0x8>)
 8013db6:	f000 bc0c 	b.w	80145d2 <__retarget_lock_release_recursive>
 8013dba:	bf00      	nop
 8013dbc:	200063c4 	.word	0x200063c4

08013dc0 <_realloc_r>:
 8013dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dc4:	4680      	mov	r8, r0
 8013dc6:	4614      	mov	r4, r2
 8013dc8:	460e      	mov	r6, r1
 8013dca:	b921      	cbnz	r1, 8013dd6 <_realloc_r+0x16>
 8013dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd0:	4611      	mov	r1, r2
 8013dd2:	f7ff bd95 	b.w	8013900 <_malloc_r>
 8013dd6:	b92a      	cbnz	r2, 8013de4 <_realloc_r+0x24>
 8013dd8:	f7ff fd26 	bl	8013828 <_free_r>
 8013ddc:	4625      	mov	r5, r4
 8013dde:	4628      	mov	r0, r5
 8013de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013de4:	f000 fc5c 	bl	80146a0 <_malloc_usable_size_r>
 8013de8:	4284      	cmp	r4, r0
 8013dea:	4607      	mov	r7, r0
 8013dec:	d802      	bhi.n	8013df4 <_realloc_r+0x34>
 8013dee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013df2:	d812      	bhi.n	8013e1a <_realloc_r+0x5a>
 8013df4:	4621      	mov	r1, r4
 8013df6:	4640      	mov	r0, r8
 8013df8:	f7ff fd82 	bl	8013900 <_malloc_r>
 8013dfc:	4605      	mov	r5, r0
 8013dfe:	2800      	cmp	r0, #0
 8013e00:	d0ed      	beq.n	8013dde <_realloc_r+0x1e>
 8013e02:	42bc      	cmp	r4, r7
 8013e04:	4622      	mov	r2, r4
 8013e06:	4631      	mov	r1, r6
 8013e08:	bf28      	it	cs
 8013e0a:	463a      	movcs	r2, r7
 8013e0c:	f7fc f8c8 	bl	800ffa0 <memcpy>
 8013e10:	4631      	mov	r1, r6
 8013e12:	4640      	mov	r0, r8
 8013e14:	f7ff fd08 	bl	8013828 <_free_r>
 8013e18:	e7e1      	b.n	8013dde <_realloc_r+0x1e>
 8013e1a:	4635      	mov	r5, r6
 8013e1c:	e7df      	b.n	8013dde <_realloc_r+0x1e>

08013e1e <__sfputc_r>:
 8013e1e:	6893      	ldr	r3, [r2, #8]
 8013e20:	3b01      	subs	r3, #1
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	b410      	push	{r4}
 8013e26:	6093      	str	r3, [r2, #8]
 8013e28:	da08      	bge.n	8013e3c <__sfputc_r+0x1e>
 8013e2a:	6994      	ldr	r4, [r2, #24]
 8013e2c:	42a3      	cmp	r3, r4
 8013e2e:	db01      	blt.n	8013e34 <__sfputc_r+0x16>
 8013e30:	290a      	cmp	r1, #10
 8013e32:	d103      	bne.n	8013e3c <__sfputc_r+0x1e>
 8013e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e38:	f000 b94a 	b.w	80140d0 <__swbuf_r>
 8013e3c:	6813      	ldr	r3, [r2, #0]
 8013e3e:	1c58      	adds	r0, r3, #1
 8013e40:	6010      	str	r0, [r2, #0]
 8013e42:	7019      	strb	r1, [r3, #0]
 8013e44:	4608      	mov	r0, r1
 8013e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e4a:	4770      	bx	lr

08013e4c <__sfputs_r>:
 8013e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e4e:	4606      	mov	r6, r0
 8013e50:	460f      	mov	r7, r1
 8013e52:	4614      	mov	r4, r2
 8013e54:	18d5      	adds	r5, r2, r3
 8013e56:	42ac      	cmp	r4, r5
 8013e58:	d101      	bne.n	8013e5e <__sfputs_r+0x12>
 8013e5a:	2000      	movs	r0, #0
 8013e5c:	e007      	b.n	8013e6e <__sfputs_r+0x22>
 8013e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e62:	463a      	mov	r2, r7
 8013e64:	4630      	mov	r0, r6
 8013e66:	f7ff ffda 	bl	8013e1e <__sfputc_r>
 8013e6a:	1c43      	adds	r3, r0, #1
 8013e6c:	d1f3      	bne.n	8013e56 <__sfputs_r+0xa>
 8013e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013e70 <_vfiprintf_r>:
 8013e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e74:	460d      	mov	r5, r1
 8013e76:	b09d      	sub	sp, #116	; 0x74
 8013e78:	4614      	mov	r4, r2
 8013e7a:	4698      	mov	r8, r3
 8013e7c:	4606      	mov	r6, r0
 8013e7e:	b118      	cbz	r0, 8013e88 <_vfiprintf_r+0x18>
 8013e80:	6983      	ldr	r3, [r0, #24]
 8013e82:	b90b      	cbnz	r3, 8013e88 <_vfiprintf_r+0x18>
 8013e84:	f000 fb06 	bl	8014494 <__sinit>
 8013e88:	4b89      	ldr	r3, [pc, #548]	; (80140b0 <_vfiprintf_r+0x240>)
 8013e8a:	429d      	cmp	r5, r3
 8013e8c:	d11b      	bne.n	8013ec6 <_vfiprintf_r+0x56>
 8013e8e:	6875      	ldr	r5, [r6, #4]
 8013e90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e92:	07d9      	lsls	r1, r3, #31
 8013e94:	d405      	bmi.n	8013ea2 <_vfiprintf_r+0x32>
 8013e96:	89ab      	ldrh	r3, [r5, #12]
 8013e98:	059a      	lsls	r2, r3, #22
 8013e9a:	d402      	bmi.n	8013ea2 <_vfiprintf_r+0x32>
 8013e9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e9e:	f000 fb97 	bl	80145d0 <__retarget_lock_acquire_recursive>
 8013ea2:	89ab      	ldrh	r3, [r5, #12]
 8013ea4:	071b      	lsls	r3, r3, #28
 8013ea6:	d501      	bpl.n	8013eac <_vfiprintf_r+0x3c>
 8013ea8:	692b      	ldr	r3, [r5, #16]
 8013eaa:	b9eb      	cbnz	r3, 8013ee8 <_vfiprintf_r+0x78>
 8013eac:	4629      	mov	r1, r5
 8013eae:	4630      	mov	r0, r6
 8013eb0:	f000 f960 	bl	8014174 <__swsetup_r>
 8013eb4:	b1c0      	cbz	r0, 8013ee8 <_vfiprintf_r+0x78>
 8013eb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013eb8:	07dc      	lsls	r4, r3, #31
 8013eba:	d50e      	bpl.n	8013eda <_vfiprintf_r+0x6a>
 8013ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ec0:	b01d      	add	sp, #116	; 0x74
 8013ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ec6:	4b7b      	ldr	r3, [pc, #492]	; (80140b4 <_vfiprintf_r+0x244>)
 8013ec8:	429d      	cmp	r5, r3
 8013eca:	d101      	bne.n	8013ed0 <_vfiprintf_r+0x60>
 8013ecc:	68b5      	ldr	r5, [r6, #8]
 8013ece:	e7df      	b.n	8013e90 <_vfiprintf_r+0x20>
 8013ed0:	4b79      	ldr	r3, [pc, #484]	; (80140b8 <_vfiprintf_r+0x248>)
 8013ed2:	429d      	cmp	r5, r3
 8013ed4:	bf08      	it	eq
 8013ed6:	68f5      	ldreq	r5, [r6, #12]
 8013ed8:	e7da      	b.n	8013e90 <_vfiprintf_r+0x20>
 8013eda:	89ab      	ldrh	r3, [r5, #12]
 8013edc:	0598      	lsls	r0, r3, #22
 8013ede:	d4ed      	bmi.n	8013ebc <_vfiprintf_r+0x4c>
 8013ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013ee2:	f000 fb76 	bl	80145d2 <__retarget_lock_release_recursive>
 8013ee6:	e7e9      	b.n	8013ebc <_vfiprintf_r+0x4c>
 8013ee8:	2300      	movs	r3, #0
 8013eea:	9309      	str	r3, [sp, #36]	; 0x24
 8013eec:	2320      	movs	r3, #32
 8013eee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ef2:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ef6:	2330      	movs	r3, #48	; 0x30
 8013ef8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80140bc <_vfiprintf_r+0x24c>
 8013efc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013f00:	f04f 0901 	mov.w	r9, #1
 8013f04:	4623      	mov	r3, r4
 8013f06:	469a      	mov	sl, r3
 8013f08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f0c:	b10a      	cbz	r2, 8013f12 <_vfiprintf_r+0xa2>
 8013f0e:	2a25      	cmp	r2, #37	; 0x25
 8013f10:	d1f9      	bne.n	8013f06 <_vfiprintf_r+0x96>
 8013f12:	ebba 0b04 	subs.w	fp, sl, r4
 8013f16:	d00b      	beq.n	8013f30 <_vfiprintf_r+0xc0>
 8013f18:	465b      	mov	r3, fp
 8013f1a:	4622      	mov	r2, r4
 8013f1c:	4629      	mov	r1, r5
 8013f1e:	4630      	mov	r0, r6
 8013f20:	f7ff ff94 	bl	8013e4c <__sfputs_r>
 8013f24:	3001      	adds	r0, #1
 8013f26:	f000 80aa 	beq.w	801407e <_vfiprintf_r+0x20e>
 8013f2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f2c:	445a      	add	r2, fp
 8013f2e:	9209      	str	r2, [sp, #36]	; 0x24
 8013f30:	f89a 3000 	ldrb.w	r3, [sl]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	f000 80a2 	beq.w	801407e <_vfiprintf_r+0x20e>
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013f40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f44:	f10a 0a01 	add.w	sl, sl, #1
 8013f48:	9304      	str	r3, [sp, #16]
 8013f4a:	9307      	str	r3, [sp, #28]
 8013f4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013f50:	931a      	str	r3, [sp, #104]	; 0x68
 8013f52:	4654      	mov	r4, sl
 8013f54:	2205      	movs	r2, #5
 8013f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f5a:	4858      	ldr	r0, [pc, #352]	; (80140bc <_vfiprintf_r+0x24c>)
 8013f5c:	f7ec f940 	bl	80001e0 <memchr>
 8013f60:	9a04      	ldr	r2, [sp, #16]
 8013f62:	b9d8      	cbnz	r0, 8013f9c <_vfiprintf_r+0x12c>
 8013f64:	06d1      	lsls	r1, r2, #27
 8013f66:	bf44      	itt	mi
 8013f68:	2320      	movmi	r3, #32
 8013f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f6e:	0713      	lsls	r3, r2, #28
 8013f70:	bf44      	itt	mi
 8013f72:	232b      	movmi	r3, #43	; 0x2b
 8013f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f78:	f89a 3000 	ldrb.w	r3, [sl]
 8013f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8013f7e:	d015      	beq.n	8013fac <_vfiprintf_r+0x13c>
 8013f80:	9a07      	ldr	r2, [sp, #28]
 8013f82:	4654      	mov	r4, sl
 8013f84:	2000      	movs	r0, #0
 8013f86:	f04f 0c0a 	mov.w	ip, #10
 8013f8a:	4621      	mov	r1, r4
 8013f8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f90:	3b30      	subs	r3, #48	; 0x30
 8013f92:	2b09      	cmp	r3, #9
 8013f94:	d94e      	bls.n	8014034 <_vfiprintf_r+0x1c4>
 8013f96:	b1b0      	cbz	r0, 8013fc6 <_vfiprintf_r+0x156>
 8013f98:	9207      	str	r2, [sp, #28]
 8013f9a:	e014      	b.n	8013fc6 <_vfiprintf_r+0x156>
 8013f9c:	eba0 0308 	sub.w	r3, r0, r8
 8013fa0:	fa09 f303 	lsl.w	r3, r9, r3
 8013fa4:	4313      	orrs	r3, r2
 8013fa6:	9304      	str	r3, [sp, #16]
 8013fa8:	46a2      	mov	sl, r4
 8013faa:	e7d2      	b.n	8013f52 <_vfiprintf_r+0xe2>
 8013fac:	9b03      	ldr	r3, [sp, #12]
 8013fae:	1d19      	adds	r1, r3, #4
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	9103      	str	r1, [sp, #12]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	bfbb      	ittet	lt
 8013fb8:	425b      	neglt	r3, r3
 8013fba:	f042 0202 	orrlt.w	r2, r2, #2
 8013fbe:	9307      	strge	r3, [sp, #28]
 8013fc0:	9307      	strlt	r3, [sp, #28]
 8013fc2:	bfb8      	it	lt
 8013fc4:	9204      	strlt	r2, [sp, #16]
 8013fc6:	7823      	ldrb	r3, [r4, #0]
 8013fc8:	2b2e      	cmp	r3, #46	; 0x2e
 8013fca:	d10c      	bne.n	8013fe6 <_vfiprintf_r+0x176>
 8013fcc:	7863      	ldrb	r3, [r4, #1]
 8013fce:	2b2a      	cmp	r3, #42	; 0x2a
 8013fd0:	d135      	bne.n	801403e <_vfiprintf_r+0x1ce>
 8013fd2:	9b03      	ldr	r3, [sp, #12]
 8013fd4:	1d1a      	adds	r2, r3, #4
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	9203      	str	r2, [sp, #12]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	bfb8      	it	lt
 8013fde:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013fe2:	3402      	adds	r4, #2
 8013fe4:	9305      	str	r3, [sp, #20]
 8013fe6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80140cc <_vfiprintf_r+0x25c>
 8013fea:	7821      	ldrb	r1, [r4, #0]
 8013fec:	2203      	movs	r2, #3
 8013fee:	4650      	mov	r0, sl
 8013ff0:	f7ec f8f6 	bl	80001e0 <memchr>
 8013ff4:	b140      	cbz	r0, 8014008 <_vfiprintf_r+0x198>
 8013ff6:	2340      	movs	r3, #64	; 0x40
 8013ff8:	eba0 000a 	sub.w	r0, r0, sl
 8013ffc:	fa03 f000 	lsl.w	r0, r3, r0
 8014000:	9b04      	ldr	r3, [sp, #16]
 8014002:	4303      	orrs	r3, r0
 8014004:	3401      	adds	r4, #1
 8014006:	9304      	str	r3, [sp, #16]
 8014008:	f814 1b01 	ldrb.w	r1, [r4], #1
 801400c:	482c      	ldr	r0, [pc, #176]	; (80140c0 <_vfiprintf_r+0x250>)
 801400e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014012:	2206      	movs	r2, #6
 8014014:	f7ec f8e4 	bl	80001e0 <memchr>
 8014018:	2800      	cmp	r0, #0
 801401a:	d03f      	beq.n	801409c <_vfiprintf_r+0x22c>
 801401c:	4b29      	ldr	r3, [pc, #164]	; (80140c4 <_vfiprintf_r+0x254>)
 801401e:	bb1b      	cbnz	r3, 8014068 <_vfiprintf_r+0x1f8>
 8014020:	9b03      	ldr	r3, [sp, #12]
 8014022:	3307      	adds	r3, #7
 8014024:	f023 0307 	bic.w	r3, r3, #7
 8014028:	3308      	adds	r3, #8
 801402a:	9303      	str	r3, [sp, #12]
 801402c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801402e:	443b      	add	r3, r7
 8014030:	9309      	str	r3, [sp, #36]	; 0x24
 8014032:	e767      	b.n	8013f04 <_vfiprintf_r+0x94>
 8014034:	fb0c 3202 	mla	r2, ip, r2, r3
 8014038:	460c      	mov	r4, r1
 801403a:	2001      	movs	r0, #1
 801403c:	e7a5      	b.n	8013f8a <_vfiprintf_r+0x11a>
 801403e:	2300      	movs	r3, #0
 8014040:	3401      	adds	r4, #1
 8014042:	9305      	str	r3, [sp, #20]
 8014044:	4619      	mov	r1, r3
 8014046:	f04f 0c0a 	mov.w	ip, #10
 801404a:	4620      	mov	r0, r4
 801404c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014050:	3a30      	subs	r2, #48	; 0x30
 8014052:	2a09      	cmp	r2, #9
 8014054:	d903      	bls.n	801405e <_vfiprintf_r+0x1ee>
 8014056:	2b00      	cmp	r3, #0
 8014058:	d0c5      	beq.n	8013fe6 <_vfiprintf_r+0x176>
 801405a:	9105      	str	r1, [sp, #20]
 801405c:	e7c3      	b.n	8013fe6 <_vfiprintf_r+0x176>
 801405e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014062:	4604      	mov	r4, r0
 8014064:	2301      	movs	r3, #1
 8014066:	e7f0      	b.n	801404a <_vfiprintf_r+0x1da>
 8014068:	ab03      	add	r3, sp, #12
 801406a:	9300      	str	r3, [sp, #0]
 801406c:	462a      	mov	r2, r5
 801406e:	4b16      	ldr	r3, [pc, #88]	; (80140c8 <_vfiprintf_r+0x258>)
 8014070:	a904      	add	r1, sp, #16
 8014072:	4630      	mov	r0, r6
 8014074:	f7fc f84a 	bl	801010c <_printf_float>
 8014078:	4607      	mov	r7, r0
 801407a:	1c78      	adds	r0, r7, #1
 801407c:	d1d6      	bne.n	801402c <_vfiprintf_r+0x1bc>
 801407e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014080:	07d9      	lsls	r1, r3, #31
 8014082:	d405      	bmi.n	8014090 <_vfiprintf_r+0x220>
 8014084:	89ab      	ldrh	r3, [r5, #12]
 8014086:	059a      	lsls	r2, r3, #22
 8014088:	d402      	bmi.n	8014090 <_vfiprintf_r+0x220>
 801408a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801408c:	f000 faa1 	bl	80145d2 <__retarget_lock_release_recursive>
 8014090:	89ab      	ldrh	r3, [r5, #12]
 8014092:	065b      	lsls	r3, r3, #25
 8014094:	f53f af12 	bmi.w	8013ebc <_vfiprintf_r+0x4c>
 8014098:	9809      	ldr	r0, [sp, #36]	; 0x24
 801409a:	e711      	b.n	8013ec0 <_vfiprintf_r+0x50>
 801409c:	ab03      	add	r3, sp, #12
 801409e:	9300      	str	r3, [sp, #0]
 80140a0:	462a      	mov	r2, r5
 80140a2:	4b09      	ldr	r3, [pc, #36]	; (80140c8 <_vfiprintf_r+0x258>)
 80140a4:	a904      	add	r1, sp, #16
 80140a6:	4630      	mov	r0, r6
 80140a8:	f7fc fad4 	bl	8010654 <_printf_i>
 80140ac:	e7e4      	b.n	8014078 <_vfiprintf_r+0x208>
 80140ae:	bf00      	nop
 80140b0:	080158ec 	.word	0x080158ec
 80140b4:	0801590c 	.word	0x0801590c
 80140b8:	080158cc 	.word	0x080158cc
 80140bc:	0801587c 	.word	0x0801587c
 80140c0:	08015886 	.word	0x08015886
 80140c4:	0801010d 	.word	0x0801010d
 80140c8:	08013e4d 	.word	0x08013e4d
 80140cc:	08015882 	.word	0x08015882

080140d0 <__swbuf_r>:
 80140d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140d2:	460e      	mov	r6, r1
 80140d4:	4614      	mov	r4, r2
 80140d6:	4605      	mov	r5, r0
 80140d8:	b118      	cbz	r0, 80140e2 <__swbuf_r+0x12>
 80140da:	6983      	ldr	r3, [r0, #24]
 80140dc:	b90b      	cbnz	r3, 80140e2 <__swbuf_r+0x12>
 80140de:	f000 f9d9 	bl	8014494 <__sinit>
 80140e2:	4b21      	ldr	r3, [pc, #132]	; (8014168 <__swbuf_r+0x98>)
 80140e4:	429c      	cmp	r4, r3
 80140e6:	d12b      	bne.n	8014140 <__swbuf_r+0x70>
 80140e8:	686c      	ldr	r4, [r5, #4]
 80140ea:	69a3      	ldr	r3, [r4, #24]
 80140ec:	60a3      	str	r3, [r4, #8]
 80140ee:	89a3      	ldrh	r3, [r4, #12]
 80140f0:	071a      	lsls	r2, r3, #28
 80140f2:	d52f      	bpl.n	8014154 <__swbuf_r+0x84>
 80140f4:	6923      	ldr	r3, [r4, #16]
 80140f6:	b36b      	cbz	r3, 8014154 <__swbuf_r+0x84>
 80140f8:	6923      	ldr	r3, [r4, #16]
 80140fa:	6820      	ldr	r0, [r4, #0]
 80140fc:	1ac0      	subs	r0, r0, r3
 80140fe:	6963      	ldr	r3, [r4, #20]
 8014100:	b2f6      	uxtb	r6, r6
 8014102:	4283      	cmp	r3, r0
 8014104:	4637      	mov	r7, r6
 8014106:	dc04      	bgt.n	8014112 <__swbuf_r+0x42>
 8014108:	4621      	mov	r1, r4
 801410a:	4628      	mov	r0, r5
 801410c:	f000 f92e 	bl	801436c <_fflush_r>
 8014110:	bb30      	cbnz	r0, 8014160 <__swbuf_r+0x90>
 8014112:	68a3      	ldr	r3, [r4, #8]
 8014114:	3b01      	subs	r3, #1
 8014116:	60a3      	str	r3, [r4, #8]
 8014118:	6823      	ldr	r3, [r4, #0]
 801411a:	1c5a      	adds	r2, r3, #1
 801411c:	6022      	str	r2, [r4, #0]
 801411e:	701e      	strb	r6, [r3, #0]
 8014120:	6963      	ldr	r3, [r4, #20]
 8014122:	3001      	adds	r0, #1
 8014124:	4283      	cmp	r3, r0
 8014126:	d004      	beq.n	8014132 <__swbuf_r+0x62>
 8014128:	89a3      	ldrh	r3, [r4, #12]
 801412a:	07db      	lsls	r3, r3, #31
 801412c:	d506      	bpl.n	801413c <__swbuf_r+0x6c>
 801412e:	2e0a      	cmp	r6, #10
 8014130:	d104      	bne.n	801413c <__swbuf_r+0x6c>
 8014132:	4621      	mov	r1, r4
 8014134:	4628      	mov	r0, r5
 8014136:	f000 f919 	bl	801436c <_fflush_r>
 801413a:	b988      	cbnz	r0, 8014160 <__swbuf_r+0x90>
 801413c:	4638      	mov	r0, r7
 801413e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014140:	4b0a      	ldr	r3, [pc, #40]	; (801416c <__swbuf_r+0x9c>)
 8014142:	429c      	cmp	r4, r3
 8014144:	d101      	bne.n	801414a <__swbuf_r+0x7a>
 8014146:	68ac      	ldr	r4, [r5, #8]
 8014148:	e7cf      	b.n	80140ea <__swbuf_r+0x1a>
 801414a:	4b09      	ldr	r3, [pc, #36]	; (8014170 <__swbuf_r+0xa0>)
 801414c:	429c      	cmp	r4, r3
 801414e:	bf08      	it	eq
 8014150:	68ec      	ldreq	r4, [r5, #12]
 8014152:	e7ca      	b.n	80140ea <__swbuf_r+0x1a>
 8014154:	4621      	mov	r1, r4
 8014156:	4628      	mov	r0, r5
 8014158:	f000 f80c 	bl	8014174 <__swsetup_r>
 801415c:	2800      	cmp	r0, #0
 801415e:	d0cb      	beq.n	80140f8 <__swbuf_r+0x28>
 8014160:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014164:	e7ea      	b.n	801413c <__swbuf_r+0x6c>
 8014166:	bf00      	nop
 8014168:	080158ec 	.word	0x080158ec
 801416c:	0801590c 	.word	0x0801590c
 8014170:	080158cc 	.word	0x080158cc

08014174 <__swsetup_r>:
 8014174:	4b32      	ldr	r3, [pc, #200]	; (8014240 <__swsetup_r+0xcc>)
 8014176:	b570      	push	{r4, r5, r6, lr}
 8014178:	681d      	ldr	r5, [r3, #0]
 801417a:	4606      	mov	r6, r0
 801417c:	460c      	mov	r4, r1
 801417e:	b125      	cbz	r5, 801418a <__swsetup_r+0x16>
 8014180:	69ab      	ldr	r3, [r5, #24]
 8014182:	b913      	cbnz	r3, 801418a <__swsetup_r+0x16>
 8014184:	4628      	mov	r0, r5
 8014186:	f000 f985 	bl	8014494 <__sinit>
 801418a:	4b2e      	ldr	r3, [pc, #184]	; (8014244 <__swsetup_r+0xd0>)
 801418c:	429c      	cmp	r4, r3
 801418e:	d10f      	bne.n	80141b0 <__swsetup_r+0x3c>
 8014190:	686c      	ldr	r4, [r5, #4]
 8014192:	89a3      	ldrh	r3, [r4, #12]
 8014194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014198:	0719      	lsls	r1, r3, #28
 801419a:	d42c      	bmi.n	80141f6 <__swsetup_r+0x82>
 801419c:	06dd      	lsls	r5, r3, #27
 801419e:	d411      	bmi.n	80141c4 <__swsetup_r+0x50>
 80141a0:	2309      	movs	r3, #9
 80141a2:	6033      	str	r3, [r6, #0]
 80141a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80141a8:	81a3      	strh	r3, [r4, #12]
 80141aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141ae:	e03e      	b.n	801422e <__swsetup_r+0xba>
 80141b0:	4b25      	ldr	r3, [pc, #148]	; (8014248 <__swsetup_r+0xd4>)
 80141b2:	429c      	cmp	r4, r3
 80141b4:	d101      	bne.n	80141ba <__swsetup_r+0x46>
 80141b6:	68ac      	ldr	r4, [r5, #8]
 80141b8:	e7eb      	b.n	8014192 <__swsetup_r+0x1e>
 80141ba:	4b24      	ldr	r3, [pc, #144]	; (801424c <__swsetup_r+0xd8>)
 80141bc:	429c      	cmp	r4, r3
 80141be:	bf08      	it	eq
 80141c0:	68ec      	ldreq	r4, [r5, #12]
 80141c2:	e7e6      	b.n	8014192 <__swsetup_r+0x1e>
 80141c4:	0758      	lsls	r0, r3, #29
 80141c6:	d512      	bpl.n	80141ee <__swsetup_r+0x7a>
 80141c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80141ca:	b141      	cbz	r1, 80141de <__swsetup_r+0x6a>
 80141cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141d0:	4299      	cmp	r1, r3
 80141d2:	d002      	beq.n	80141da <__swsetup_r+0x66>
 80141d4:	4630      	mov	r0, r6
 80141d6:	f7ff fb27 	bl	8013828 <_free_r>
 80141da:	2300      	movs	r3, #0
 80141dc:	6363      	str	r3, [r4, #52]	; 0x34
 80141de:	89a3      	ldrh	r3, [r4, #12]
 80141e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80141e4:	81a3      	strh	r3, [r4, #12]
 80141e6:	2300      	movs	r3, #0
 80141e8:	6063      	str	r3, [r4, #4]
 80141ea:	6923      	ldr	r3, [r4, #16]
 80141ec:	6023      	str	r3, [r4, #0]
 80141ee:	89a3      	ldrh	r3, [r4, #12]
 80141f0:	f043 0308 	orr.w	r3, r3, #8
 80141f4:	81a3      	strh	r3, [r4, #12]
 80141f6:	6923      	ldr	r3, [r4, #16]
 80141f8:	b94b      	cbnz	r3, 801420e <__swsetup_r+0x9a>
 80141fa:	89a3      	ldrh	r3, [r4, #12]
 80141fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014204:	d003      	beq.n	801420e <__swsetup_r+0x9a>
 8014206:	4621      	mov	r1, r4
 8014208:	4630      	mov	r0, r6
 801420a:	f000 fa09 	bl	8014620 <__smakebuf_r>
 801420e:	89a0      	ldrh	r0, [r4, #12]
 8014210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014214:	f010 0301 	ands.w	r3, r0, #1
 8014218:	d00a      	beq.n	8014230 <__swsetup_r+0xbc>
 801421a:	2300      	movs	r3, #0
 801421c:	60a3      	str	r3, [r4, #8]
 801421e:	6963      	ldr	r3, [r4, #20]
 8014220:	425b      	negs	r3, r3
 8014222:	61a3      	str	r3, [r4, #24]
 8014224:	6923      	ldr	r3, [r4, #16]
 8014226:	b943      	cbnz	r3, 801423a <__swsetup_r+0xc6>
 8014228:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801422c:	d1ba      	bne.n	80141a4 <__swsetup_r+0x30>
 801422e:	bd70      	pop	{r4, r5, r6, pc}
 8014230:	0781      	lsls	r1, r0, #30
 8014232:	bf58      	it	pl
 8014234:	6963      	ldrpl	r3, [r4, #20]
 8014236:	60a3      	str	r3, [r4, #8]
 8014238:	e7f4      	b.n	8014224 <__swsetup_r+0xb0>
 801423a:	2000      	movs	r0, #0
 801423c:	e7f7      	b.n	801422e <__swsetup_r+0xba>
 801423e:	bf00      	nop
 8014240:	20000014 	.word	0x20000014
 8014244:	080158ec 	.word	0x080158ec
 8014248:	0801590c 	.word	0x0801590c
 801424c:	080158cc 	.word	0x080158cc

08014250 <abort>:
 8014250:	b508      	push	{r3, lr}
 8014252:	2006      	movs	r0, #6
 8014254:	f000 fa54 	bl	8014700 <raise>
 8014258:	2001      	movs	r0, #1
 801425a:	f7f2 fe21 	bl	8006ea0 <_exit>
	...

08014260 <__sflush_r>:
 8014260:	898a      	ldrh	r2, [r1, #12]
 8014262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014266:	4605      	mov	r5, r0
 8014268:	0710      	lsls	r0, r2, #28
 801426a:	460c      	mov	r4, r1
 801426c:	d458      	bmi.n	8014320 <__sflush_r+0xc0>
 801426e:	684b      	ldr	r3, [r1, #4]
 8014270:	2b00      	cmp	r3, #0
 8014272:	dc05      	bgt.n	8014280 <__sflush_r+0x20>
 8014274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014276:	2b00      	cmp	r3, #0
 8014278:	dc02      	bgt.n	8014280 <__sflush_r+0x20>
 801427a:	2000      	movs	r0, #0
 801427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014282:	2e00      	cmp	r6, #0
 8014284:	d0f9      	beq.n	801427a <__sflush_r+0x1a>
 8014286:	2300      	movs	r3, #0
 8014288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801428c:	682f      	ldr	r7, [r5, #0]
 801428e:	602b      	str	r3, [r5, #0]
 8014290:	d032      	beq.n	80142f8 <__sflush_r+0x98>
 8014292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014294:	89a3      	ldrh	r3, [r4, #12]
 8014296:	075a      	lsls	r2, r3, #29
 8014298:	d505      	bpl.n	80142a6 <__sflush_r+0x46>
 801429a:	6863      	ldr	r3, [r4, #4]
 801429c:	1ac0      	subs	r0, r0, r3
 801429e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80142a0:	b10b      	cbz	r3, 80142a6 <__sflush_r+0x46>
 80142a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80142a4:	1ac0      	subs	r0, r0, r3
 80142a6:	2300      	movs	r3, #0
 80142a8:	4602      	mov	r2, r0
 80142aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142ac:	6a21      	ldr	r1, [r4, #32]
 80142ae:	4628      	mov	r0, r5
 80142b0:	47b0      	blx	r6
 80142b2:	1c43      	adds	r3, r0, #1
 80142b4:	89a3      	ldrh	r3, [r4, #12]
 80142b6:	d106      	bne.n	80142c6 <__sflush_r+0x66>
 80142b8:	6829      	ldr	r1, [r5, #0]
 80142ba:	291d      	cmp	r1, #29
 80142bc:	d82c      	bhi.n	8014318 <__sflush_r+0xb8>
 80142be:	4a2a      	ldr	r2, [pc, #168]	; (8014368 <__sflush_r+0x108>)
 80142c0:	40ca      	lsrs	r2, r1
 80142c2:	07d6      	lsls	r6, r2, #31
 80142c4:	d528      	bpl.n	8014318 <__sflush_r+0xb8>
 80142c6:	2200      	movs	r2, #0
 80142c8:	6062      	str	r2, [r4, #4]
 80142ca:	04d9      	lsls	r1, r3, #19
 80142cc:	6922      	ldr	r2, [r4, #16]
 80142ce:	6022      	str	r2, [r4, #0]
 80142d0:	d504      	bpl.n	80142dc <__sflush_r+0x7c>
 80142d2:	1c42      	adds	r2, r0, #1
 80142d4:	d101      	bne.n	80142da <__sflush_r+0x7a>
 80142d6:	682b      	ldr	r3, [r5, #0]
 80142d8:	b903      	cbnz	r3, 80142dc <__sflush_r+0x7c>
 80142da:	6560      	str	r0, [r4, #84]	; 0x54
 80142dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80142de:	602f      	str	r7, [r5, #0]
 80142e0:	2900      	cmp	r1, #0
 80142e2:	d0ca      	beq.n	801427a <__sflush_r+0x1a>
 80142e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80142e8:	4299      	cmp	r1, r3
 80142ea:	d002      	beq.n	80142f2 <__sflush_r+0x92>
 80142ec:	4628      	mov	r0, r5
 80142ee:	f7ff fa9b 	bl	8013828 <_free_r>
 80142f2:	2000      	movs	r0, #0
 80142f4:	6360      	str	r0, [r4, #52]	; 0x34
 80142f6:	e7c1      	b.n	801427c <__sflush_r+0x1c>
 80142f8:	6a21      	ldr	r1, [r4, #32]
 80142fa:	2301      	movs	r3, #1
 80142fc:	4628      	mov	r0, r5
 80142fe:	47b0      	blx	r6
 8014300:	1c41      	adds	r1, r0, #1
 8014302:	d1c7      	bne.n	8014294 <__sflush_r+0x34>
 8014304:	682b      	ldr	r3, [r5, #0]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d0c4      	beq.n	8014294 <__sflush_r+0x34>
 801430a:	2b1d      	cmp	r3, #29
 801430c:	d001      	beq.n	8014312 <__sflush_r+0xb2>
 801430e:	2b16      	cmp	r3, #22
 8014310:	d101      	bne.n	8014316 <__sflush_r+0xb6>
 8014312:	602f      	str	r7, [r5, #0]
 8014314:	e7b1      	b.n	801427a <__sflush_r+0x1a>
 8014316:	89a3      	ldrh	r3, [r4, #12]
 8014318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801431c:	81a3      	strh	r3, [r4, #12]
 801431e:	e7ad      	b.n	801427c <__sflush_r+0x1c>
 8014320:	690f      	ldr	r7, [r1, #16]
 8014322:	2f00      	cmp	r7, #0
 8014324:	d0a9      	beq.n	801427a <__sflush_r+0x1a>
 8014326:	0793      	lsls	r3, r2, #30
 8014328:	680e      	ldr	r6, [r1, #0]
 801432a:	bf08      	it	eq
 801432c:	694b      	ldreq	r3, [r1, #20]
 801432e:	600f      	str	r7, [r1, #0]
 8014330:	bf18      	it	ne
 8014332:	2300      	movne	r3, #0
 8014334:	eba6 0807 	sub.w	r8, r6, r7
 8014338:	608b      	str	r3, [r1, #8]
 801433a:	f1b8 0f00 	cmp.w	r8, #0
 801433e:	dd9c      	ble.n	801427a <__sflush_r+0x1a>
 8014340:	6a21      	ldr	r1, [r4, #32]
 8014342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014344:	4643      	mov	r3, r8
 8014346:	463a      	mov	r2, r7
 8014348:	4628      	mov	r0, r5
 801434a:	47b0      	blx	r6
 801434c:	2800      	cmp	r0, #0
 801434e:	dc06      	bgt.n	801435e <__sflush_r+0xfe>
 8014350:	89a3      	ldrh	r3, [r4, #12]
 8014352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014356:	81a3      	strh	r3, [r4, #12]
 8014358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801435c:	e78e      	b.n	801427c <__sflush_r+0x1c>
 801435e:	4407      	add	r7, r0
 8014360:	eba8 0800 	sub.w	r8, r8, r0
 8014364:	e7e9      	b.n	801433a <__sflush_r+0xda>
 8014366:	bf00      	nop
 8014368:	20400001 	.word	0x20400001

0801436c <_fflush_r>:
 801436c:	b538      	push	{r3, r4, r5, lr}
 801436e:	690b      	ldr	r3, [r1, #16]
 8014370:	4605      	mov	r5, r0
 8014372:	460c      	mov	r4, r1
 8014374:	b913      	cbnz	r3, 801437c <_fflush_r+0x10>
 8014376:	2500      	movs	r5, #0
 8014378:	4628      	mov	r0, r5
 801437a:	bd38      	pop	{r3, r4, r5, pc}
 801437c:	b118      	cbz	r0, 8014386 <_fflush_r+0x1a>
 801437e:	6983      	ldr	r3, [r0, #24]
 8014380:	b90b      	cbnz	r3, 8014386 <_fflush_r+0x1a>
 8014382:	f000 f887 	bl	8014494 <__sinit>
 8014386:	4b14      	ldr	r3, [pc, #80]	; (80143d8 <_fflush_r+0x6c>)
 8014388:	429c      	cmp	r4, r3
 801438a:	d11b      	bne.n	80143c4 <_fflush_r+0x58>
 801438c:	686c      	ldr	r4, [r5, #4]
 801438e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d0ef      	beq.n	8014376 <_fflush_r+0xa>
 8014396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014398:	07d0      	lsls	r0, r2, #31
 801439a:	d404      	bmi.n	80143a6 <_fflush_r+0x3a>
 801439c:	0599      	lsls	r1, r3, #22
 801439e:	d402      	bmi.n	80143a6 <_fflush_r+0x3a>
 80143a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80143a2:	f000 f915 	bl	80145d0 <__retarget_lock_acquire_recursive>
 80143a6:	4628      	mov	r0, r5
 80143a8:	4621      	mov	r1, r4
 80143aa:	f7ff ff59 	bl	8014260 <__sflush_r>
 80143ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80143b0:	07da      	lsls	r2, r3, #31
 80143b2:	4605      	mov	r5, r0
 80143b4:	d4e0      	bmi.n	8014378 <_fflush_r+0xc>
 80143b6:	89a3      	ldrh	r3, [r4, #12]
 80143b8:	059b      	lsls	r3, r3, #22
 80143ba:	d4dd      	bmi.n	8014378 <_fflush_r+0xc>
 80143bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80143be:	f000 f908 	bl	80145d2 <__retarget_lock_release_recursive>
 80143c2:	e7d9      	b.n	8014378 <_fflush_r+0xc>
 80143c4:	4b05      	ldr	r3, [pc, #20]	; (80143dc <_fflush_r+0x70>)
 80143c6:	429c      	cmp	r4, r3
 80143c8:	d101      	bne.n	80143ce <_fflush_r+0x62>
 80143ca:	68ac      	ldr	r4, [r5, #8]
 80143cc:	e7df      	b.n	801438e <_fflush_r+0x22>
 80143ce:	4b04      	ldr	r3, [pc, #16]	; (80143e0 <_fflush_r+0x74>)
 80143d0:	429c      	cmp	r4, r3
 80143d2:	bf08      	it	eq
 80143d4:	68ec      	ldreq	r4, [r5, #12]
 80143d6:	e7da      	b.n	801438e <_fflush_r+0x22>
 80143d8:	080158ec 	.word	0x080158ec
 80143dc:	0801590c 	.word	0x0801590c
 80143e0:	080158cc 	.word	0x080158cc

080143e4 <std>:
 80143e4:	2300      	movs	r3, #0
 80143e6:	b510      	push	{r4, lr}
 80143e8:	4604      	mov	r4, r0
 80143ea:	e9c0 3300 	strd	r3, r3, [r0]
 80143ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80143f2:	6083      	str	r3, [r0, #8]
 80143f4:	8181      	strh	r1, [r0, #12]
 80143f6:	6643      	str	r3, [r0, #100]	; 0x64
 80143f8:	81c2      	strh	r2, [r0, #14]
 80143fa:	6183      	str	r3, [r0, #24]
 80143fc:	4619      	mov	r1, r3
 80143fe:	2208      	movs	r2, #8
 8014400:	305c      	adds	r0, #92	; 0x5c
 8014402:	f7fb fddb 	bl	800ffbc <memset>
 8014406:	4b05      	ldr	r3, [pc, #20]	; (801441c <std+0x38>)
 8014408:	6263      	str	r3, [r4, #36]	; 0x24
 801440a:	4b05      	ldr	r3, [pc, #20]	; (8014420 <std+0x3c>)
 801440c:	62a3      	str	r3, [r4, #40]	; 0x28
 801440e:	4b05      	ldr	r3, [pc, #20]	; (8014424 <std+0x40>)
 8014410:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014412:	4b05      	ldr	r3, [pc, #20]	; (8014428 <std+0x44>)
 8014414:	6224      	str	r4, [r4, #32]
 8014416:	6323      	str	r3, [r4, #48]	; 0x30
 8014418:	bd10      	pop	{r4, pc}
 801441a:	bf00      	nop
 801441c:	08014739 	.word	0x08014739
 8014420:	0801475b 	.word	0x0801475b
 8014424:	08014793 	.word	0x08014793
 8014428:	080147b7 	.word	0x080147b7

0801442c <_cleanup_r>:
 801442c:	4901      	ldr	r1, [pc, #4]	; (8014434 <_cleanup_r+0x8>)
 801442e:	f000 b8af 	b.w	8014590 <_fwalk_reent>
 8014432:	bf00      	nop
 8014434:	0801436d 	.word	0x0801436d

08014438 <__sfmoreglue>:
 8014438:	b570      	push	{r4, r5, r6, lr}
 801443a:	2268      	movs	r2, #104	; 0x68
 801443c:	1e4d      	subs	r5, r1, #1
 801443e:	4355      	muls	r5, r2
 8014440:	460e      	mov	r6, r1
 8014442:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014446:	f7ff fa5b 	bl	8013900 <_malloc_r>
 801444a:	4604      	mov	r4, r0
 801444c:	b140      	cbz	r0, 8014460 <__sfmoreglue+0x28>
 801444e:	2100      	movs	r1, #0
 8014450:	e9c0 1600 	strd	r1, r6, [r0]
 8014454:	300c      	adds	r0, #12
 8014456:	60a0      	str	r0, [r4, #8]
 8014458:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801445c:	f7fb fdae 	bl	800ffbc <memset>
 8014460:	4620      	mov	r0, r4
 8014462:	bd70      	pop	{r4, r5, r6, pc}

08014464 <__sfp_lock_acquire>:
 8014464:	4801      	ldr	r0, [pc, #4]	; (801446c <__sfp_lock_acquire+0x8>)
 8014466:	f000 b8b3 	b.w	80145d0 <__retarget_lock_acquire_recursive>
 801446a:	bf00      	nop
 801446c:	200063c5 	.word	0x200063c5

08014470 <__sfp_lock_release>:
 8014470:	4801      	ldr	r0, [pc, #4]	; (8014478 <__sfp_lock_release+0x8>)
 8014472:	f000 b8ae 	b.w	80145d2 <__retarget_lock_release_recursive>
 8014476:	bf00      	nop
 8014478:	200063c5 	.word	0x200063c5

0801447c <__sinit_lock_acquire>:
 801447c:	4801      	ldr	r0, [pc, #4]	; (8014484 <__sinit_lock_acquire+0x8>)
 801447e:	f000 b8a7 	b.w	80145d0 <__retarget_lock_acquire_recursive>
 8014482:	bf00      	nop
 8014484:	200063c6 	.word	0x200063c6

08014488 <__sinit_lock_release>:
 8014488:	4801      	ldr	r0, [pc, #4]	; (8014490 <__sinit_lock_release+0x8>)
 801448a:	f000 b8a2 	b.w	80145d2 <__retarget_lock_release_recursive>
 801448e:	bf00      	nop
 8014490:	200063c6 	.word	0x200063c6

08014494 <__sinit>:
 8014494:	b510      	push	{r4, lr}
 8014496:	4604      	mov	r4, r0
 8014498:	f7ff fff0 	bl	801447c <__sinit_lock_acquire>
 801449c:	69a3      	ldr	r3, [r4, #24]
 801449e:	b11b      	cbz	r3, 80144a8 <__sinit+0x14>
 80144a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144a4:	f7ff bff0 	b.w	8014488 <__sinit_lock_release>
 80144a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80144ac:	6523      	str	r3, [r4, #80]	; 0x50
 80144ae:	4b13      	ldr	r3, [pc, #76]	; (80144fc <__sinit+0x68>)
 80144b0:	4a13      	ldr	r2, [pc, #76]	; (8014500 <__sinit+0x6c>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80144b6:	42a3      	cmp	r3, r4
 80144b8:	bf04      	itt	eq
 80144ba:	2301      	moveq	r3, #1
 80144bc:	61a3      	streq	r3, [r4, #24]
 80144be:	4620      	mov	r0, r4
 80144c0:	f000 f820 	bl	8014504 <__sfp>
 80144c4:	6060      	str	r0, [r4, #4]
 80144c6:	4620      	mov	r0, r4
 80144c8:	f000 f81c 	bl	8014504 <__sfp>
 80144cc:	60a0      	str	r0, [r4, #8]
 80144ce:	4620      	mov	r0, r4
 80144d0:	f000 f818 	bl	8014504 <__sfp>
 80144d4:	2200      	movs	r2, #0
 80144d6:	60e0      	str	r0, [r4, #12]
 80144d8:	2104      	movs	r1, #4
 80144da:	6860      	ldr	r0, [r4, #4]
 80144dc:	f7ff ff82 	bl	80143e4 <std>
 80144e0:	68a0      	ldr	r0, [r4, #8]
 80144e2:	2201      	movs	r2, #1
 80144e4:	2109      	movs	r1, #9
 80144e6:	f7ff ff7d 	bl	80143e4 <std>
 80144ea:	68e0      	ldr	r0, [r4, #12]
 80144ec:	2202      	movs	r2, #2
 80144ee:	2112      	movs	r1, #18
 80144f0:	f7ff ff78 	bl	80143e4 <std>
 80144f4:	2301      	movs	r3, #1
 80144f6:	61a3      	str	r3, [r4, #24]
 80144f8:	e7d2      	b.n	80144a0 <__sinit+0xc>
 80144fa:	bf00      	nop
 80144fc:	08015488 	.word	0x08015488
 8014500:	0801442d 	.word	0x0801442d

08014504 <__sfp>:
 8014504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014506:	4607      	mov	r7, r0
 8014508:	f7ff ffac 	bl	8014464 <__sfp_lock_acquire>
 801450c:	4b1e      	ldr	r3, [pc, #120]	; (8014588 <__sfp+0x84>)
 801450e:	681e      	ldr	r6, [r3, #0]
 8014510:	69b3      	ldr	r3, [r6, #24]
 8014512:	b913      	cbnz	r3, 801451a <__sfp+0x16>
 8014514:	4630      	mov	r0, r6
 8014516:	f7ff ffbd 	bl	8014494 <__sinit>
 801451a:	3648      	adds	r6, #72	; 0x48
 801451c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014520:	3b01      	subs	r3, #1
 8014522:	d503      	bpl.n	801452c <__sfp+0x28>
 8014524:	6833      	ldr	r3, [r6, #0]
 8014526:	b30b      	cbz	r3, 801456c <__sfp+0x68>
 8014528:	6836      	ldr	r6, [r6, #0]
 801452a:	e7f7      	b.n	801451c <__sfp+0x18>
 801452c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014530:	b9d5      	cbnz	r5, 8014568 <__sfp+0x64>
 8014532:	4b16      	ldr	r3, [pc, #88]	; (801458c <__sfp+0x88>)
 8014534:	60e3      	str	r3, [r4, #12]
 8014536:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801453a:	6665      	str	r5, [r4, #100]	; 0x64
 801453c:	f000 f847 	bl	80145ce <__retarget_lock_init_recursive>
 8014540:	f7ff ff96 	bl	8014470 <__sfp_lock_release>
 8014544:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014548:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801454c:	6025      	str	r5, [r4, #0]
 801454e:	61a5      	str	r5, [r4, #24]
 8014550:	2208      	movs	r2, #8
 8014552:	4629      	mov	r1, r5
 8014554:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014558:	f7fb fd30 	bl	800ffbc <memset>
 801455c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014560:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014564:	4620      	mov	r0, r4
 8014566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014568:	3468      	adds	r4, #104	; 0x68
 801456a:	e7d9      	b.n	8014520 <__sfp+0x1c>
 801456c:	2104      	movs	r1, #4
 801456e:	4638      	mov	r0, r7
 8014570:	f7ff ff62 	bl	8014438 <__sfmoreglue>
 8014574:	4604      	mov	r4, r0
 8014576:	6030      	str	r0, [r6, #0]
 8014578:	2800      	cmp	r0, #0
 801457a:	d1d5      	bne.n	8014528 <__sfp+0x24>
 801457c:	f7ff ff78 	bl	8014470 <__sfp_lock_release>
 8014580:	230c      	movs	r3, #12
 8014582:	603b      	str	r3, [r7, #0]
 8014584:	e7ee      	b.n	8014564 <__sfp+0x60>
 8014586:	bf00      	nop
 8014588:	08015488 	.word	0x08015488
 801458c:	ffff0001 	.word	0xffff0001

08014590 <_fwalk_reent>:
 8014590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014594:	4606      	mov	r6, r0
 8014596:	4688      	mov	r8, r1
 8014598:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801459c:	2700      	movs	r7, #0
 801459e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80145a2:	f1b9 0901 	subs.w	r9, r9, #1
 80145a6:	d505      	bpl.n	80145b4 <_fwalk_reent+0x24>
 80145a8:	6824      	ldr	r4, [r4, #0]
 80145aa:	2c00      	cmp	r4, #0
 80145ac:	d1f7      	bne.n	801459e <_fwalk_reent+0xe>
 80145ae:	4638      	mov	r0, r7
 80145b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145b4:	89ab      	ldrh	r3, [r5, #12]
 80145b6:	2b01      	cmp	r3, #1
 80145b8:	d907      	bls.n	80145ca <_fwalk_reent+0x3a>
 80145ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80145be:	3301      	adds	r3, #1
 80145c0:	d003      	beq.n	80145ca <_fwalk_reent+0x3a>
 80145c2:	4629      	mov	r1, r5
 80145c4:	4630      	mov	r0, r6
 80145c6:	47c0      	blx	r8
 80145c8:	4307      	orrs	r7, r0
 80145ca:	3568      	adds	r5, #104	; 0x68
 80145cc:	e7e9      	b.n	80145a2 <_fwalk_reent+0x12>

080145ce <__retarget_lock_init_recursive>:
 80145ce:	4770      	bx	lr

080145d0 <__retarget_lock_acquire_recursive>:
 80145d0:	4770      	bx	lr

080145d2 <__retarget_lock_release_recursive>:
 80145d2:	4770      	bx	lr

080145d4 <__swhatbuf_r>:
 80145d4:	b570      	push	{r4, r5, r6, lr}
 80145d6:	460e      	mov	r6, r1
 80145d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145dc:	2900      	cmp	r1, #0
 80145de:	b096      	sub	sp, #88	; 0x58
 80145e0:	4614      	mov	r4, r2
 80145e2:	461d      	mov	r5, r3
 80145e4:	da08      	bge.n	80145f8 <__swhatbuf_r+0x24>
 80145e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80145ea:	2200      	movs	r2, #0
 80145ec:	602a      	str	r2, [r5, #0]
 80145ee:	061a      	lsls	r2, r3, #24
 80145f0:	d410      	bmi.n	8014614 <__swhatbuf_r+0x40>
 80145f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80145f6:	e00e      	b.n	8014616 <__swhatbuf_r+0x42>
 80145f8:	466a      	mov	r2, sp
 80145fa:	f000 f903 	bl	8014804 <_fstat_r>
 80145fe:	2800      	cmp	r0, #0
 8014600:	dbf1      	blt.n	80145e6 <__swhatbuf_r+0x12>
 8014602:	9a01      	ldr	r2, [sp, #4]
 8014604:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014608:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801460c:	425a      	negs	r2, r3
 801460e:	415a      	adcs	r2, r3
 8014610:	602a      	str	r2, [r5, #0]
 8014612:	e7ee      	b.n	80145f2 <__swhatbuf_r+0x1e>
 8014614:	2340      	movs	r3, #64	; 0x40
 8014616:	2000      	movs	r0, #0
 8014618:	6023      	str	r3, [r4, #0]
 801461a:	b016      	add	sp, #88	; 0x58
 801461c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014620 <__smakebuf_r>:
 8014620:	898b      	ldrh	r3, [r1, #12]
 8014622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014624:	079d      	lsls	r5, r3, #30
 8014626:	4606      	mov	r6, r0
 8014628:	460c      	mov	r4, r1
 801462a:	d507      	bpl.n	801463c <__smakebuf_r+0x1c>
 801462c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014630:	6023      	str	r3, [r4, #0]
 8014632:	6123      	str	r3, [r4, #16]
 8014634:	2301      	movs	r3, #1
 8014636:	6163      	str	r3, [r4, #20]
 8014638:	b002      	add	sp, #8
 801463a:	bd70      	pop	{r4, r5, r6, pc}
 801463c:	ab01      	add	r3, sp, #4
 801463e:	466a      	mov	r2, sp
 8014640:	f7ff ffc8 	bl	80145d4 <__swhatbuf_r>
 8014644:	9900      	ldr	r1, [sp, #0]
 8014646:	4605      	mov	r5, r0
 8014648:	4630      	mov	r0, r6
 801464a:	f7ff f959 	bl	8013900 <_malloc_r>
 801464e:	b948      	cbnz	r0, 8014664 <__smakebuf_r+0x44>
 8014650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014654:	059a      	lsls	r2, r3, #22
 8014656:	d4ef      	bmi.n	8014638 <__smakebuf_r+0x18>
 8014658:	f023 0303 	bic.w	r3, r3, #3
 801465c:	f043 0302 	orr.w	r3, r3, #2
 8014660:	81a3      	strh	r3, [r4, #12]
 8014662:	e7e3      	b.n	801462c <__smakebuf_r+0xc>
 8014664:	4b0d      	ldr	r3, [pc, #52]	; (801469c <__smakebuf_r+0x7c>)
 8014666:	62b3      	str	r3, [r6, #40]	; 0x28
 8014668:	89a3      	ldrh	r3, [r4, #12]
 801466a:	6020      	str	r0, [r4, #0]
 801466c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014670:	81a3      	strh	r3, [r4, #12]
 8014672:	9b00      	ldr	r3, [sp, #0]
 8014674:	6163      	str	r3, [r4, #20]
 8014676:	9b01      	ldr	r3, [sp, #4]
 8014678:	6120      	str	r0, [r4, #16]
 801467a:	b15b      	cbz	r3, 8014694 <__smakebuf_r+0x74>
 801467c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014680:	4630      	mov	r0, r6
 8014682:	f000 f8d1 	bl	8014828 <_isatty_r>
 8014686:	b128      	cbz	r0, 8014694 <__smakebuf_r+0x74>
 8014688:	89a3      	ldrh	r3, [r4, #12]
 801468a:	f023 0303 	bic.w	r3, r3, #3
 801468e:	f043 0301 	orr.w	r3, r3, #1
 8014692:	81a3      	strh	r3, [r4, #12]
 8014694:	89a0      	ldrh	r0, [r4, #12]
 8014696:	4305      	orrs	r5, r0
 8014698:	81a5      	strh	r5, [r4, #12]
 801469a:	e7cd      	b.n	8014638 <__smakebuf_r+0x18>
 801469c:	0801442d 	.word	0x0801442d

080146a0 <_malloc_usable_size_r>:
 80146a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80146a4:	1f18      	subs	r0, r3, #4
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	bfbc      	itt	lt
 80146aa:	580b      	ldrlt	r3, [r1, r0]
 80146ac:	18c0      	addlt	r0, r0, r3
 80146ae:	4770      	bx	lr

080146b0 <_raise_r>:
 80146b0:	291f      	cmp	r1, #31
 80146b2:	b538      	push	{r3, r4, r5, lr}
 80146b4:	4604      	mov	r4, r0
 80146b6:	460d      	mov	r5, r1
 80146b8:	d904      	bls.n	80146c4 <_raise_r+0x14>
 80146ba:	2316      	movs	r3, #22
 80146bc:	6003      	str	r3, [r0, #0]
 80146be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80146c2:	bd38      	pop	{r3, r4, r5, pc}
 80146c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80146c6:	b112      	cbz	r2, 80146ce <_raise_r+0x1e>
 80146c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80146cc:	b94b      	cbnz	r3, 80146e2 <_raise_r+0x32>
 80146ce:	4620      	mov	r0, r4
 80146d0:	f000 f830 	bl	8014734 <_getpid_r>
 80146d4:	462a      	mov	r2, r5
 80146d6:	4601      	mov	r1, r0
 80146d8:	4620      	mov	r0, r4
 80146da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80146de:	f000 b817 	b.w	8014710 <_kill_r>
 80146e2:	2b01      	cmp	r3, #1
 80146e4:	d00a      	beq.n	80146fc <_raise_r+0x4c>
 80146e6:	1c59      	adds	r1, r3, #1
 80146e8:	d103      	bne.n	80146f2 <_raise_r+0x42>
 80146ea:	2316      	movs	r3, #22
 80146ec:	6003      	str	r3, [r0, #0]
 80146ee:	2001      	movs	r0, #1
 80146f0:	e7e7      	b.n	80146c2 <_raise_r+0x12>
 80146f2:	2400      	movs	r4, #0
 80146f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80146f8:	4628      	mov	r0, r5
 80146fa:	4798      	blx	r3
 80146fc:	2000      	movs	r0, #0
 80146fe:	e7e0      	b.n	80146c2 <_raise_r+0x12>

08014700 <raise>:
 8014700:	4b02      	ldr	r3, [pc, #8]	; (801470c <raise+0xc>)
 8014702:	4601      	mov	r1, r0
 8014704:	6818      	ldr	r0, [r3, #0]
 8014706:	f7ff bfd3 	b.w	80146b0 <_raise_r>
 801470a:	bf00      	nop
 801470c:	20000014 	.word	0x20000014

08014710 <_kill_r>:
 8014710:	b538      	push	{r3, r4, r5, lr}
 8014712:	4d07      	ldr	r5, [pc, #28]	; (8014730 <_kill_r+0x20>)
 8014714:	2300      	movs	r3, #0
 8014716:	4604      	mov	r4, r0
 8014718:	4608      	mov	r0, r1
 801471a:	4611      	mov	r1, r2
 801471c:	602b      	str	r3, [r5, #0]
 801471e:	f7f2 fbaf 	bl	8006e80 <_kill>
 8014722:	1c43      	adds	r3, r0, #1
 8014724:	d102      	bne.n	801472c <_kill_r+0x1c>
 8014726:	682b      	ldr	r3, [r5, #0]
 8014728:	b103      	cbz	r3, 801472c <_kill_r+0x1c>
 801472a:	6023      	str	r3, [r4, #0]
 801472c:	bd38      	pop	{r3, r4, r5, pc}
 801472e:	bf00      	nop
 8014730:	200063c0 	.word	0x200063c0

08014734 <_getpid_r>:
 8014734:	f7f2 bb9c 	b.w	8006e70 <_getpid>

08014738 <__sread>:
 8014738:	b510      	push	{r4, lr}
 801473a:	460c      	mov	r4, r1
 801473c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014740:	f000 f894 	bl	801486c <_read_r>
 8014744:	2800      	cmp	r0, #0
 8014746:	bfab      	itete	ge
 8014748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801474a:	89a3      	ldrhlt	r3, [r4, #12]
 801474c:	181b      	addge	r3, r3, r0
 801474e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014752:	bfac      	ite	ge
 8014754:	6563      	strge	r3, [r4, #84]	; 0x54
 8014756:	81a3      	strhlt	r3, [r4, #12]
 8014758:	bd10      	pop	{r4, pc}

0801475a <__swrite>:
 801475a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801475e:	461f      	mov	r7, r3
 8014760:	898b      	ldrh	r3, [r1, #12]
 8014762:	05db      	lsls	r3, r3, #23
 8014764:	4605      	mov	r5, r0
 8014766:	460c      	mov	r4, r1
 8014768:	4616      	mov	r6, r2
 801476a:	d505      	bpl.n	8014778 <__swrite+0x1e>
 801476c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014770:	2302      	movs	r3, #2
 8014772:	2200      	movs	r2, #0
 8014774:	f000 f868 	bl	8014848 <_lseek_r>
 8014778:	89a3      	ldrh	r3, [r4, #12]
 801477a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801477e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014782:	81a3      	strh	r3, [r4, #12]
 8014784:	4632      	mov	r2, r6
 8014786:	463b      	mov	r3, r7
 8014788:	4628      	mov	r0, r5
 801478a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801478e:	f000 b817 	b.w	80147c0 <_write_r>

08014792 <__sseek>:
 8014792:	b510      	push	{r4, lr}
 8014794:	460c      	mov	r4, r1
 8014796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801479a:	f000 f855 	bl	8014848 <_lseek_r>
 801479e:	1c43      	adds	r3, r0, #1
 80147a0:	89a3      	ldrh	r3, [r4, #12]
 80147a2:	bf15      	itete	ne
 80147a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80147a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80147aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80147ae:	81a3      	strheq	r3, [r4, #12]
 80147b0:	bf18      	it	ne
 80147b2:	81a3      	strhne	r3, [r4, #12]
 80147b4:	bd10      	pop	{r4, pc}

080147b6 <__sclose>:
 80147b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147ba:	f000 b813 	b.w	80147e4 <_close_r>
	...

080147c0 <_write_r>:
 80147c0:	b538      	push	{r3, r4, r5, lr}
 80147c2:	4d07      	ldr	r5, [pc, #28]	; (80147e0 <_write_r+0x20>)
 80147c4:	4604      	mov	r4, r0
 80147c6:	4608      	mov	r0, r1
 80147c8:	4611      	mov	r1, r2
 80147ca:	2200      	movs	r2, #0
 80147cc:	602a      	str	r2, [r5, #0]
 80147ce:	461a      	mov	r2, r3
 80147d0:	f7f2 fb8d 	bl	8006eee <_write>
 80147d4:	1c43      	adds	r3, r0, #1
 80147d6:	d102      	bne.n	80147de <_write_r+0x1e>
 80147d8:	682b      	ldr	r3, [r5, #0]
 80147da:	b103      	cbz	r3, 80147de <_write_r+0x1e>
 80147dc:	6023      	str	r3, [r4, #0]
 80147de:	bd38      	pop	{r3, r4, r5, pc}
 80147e0:	200063c0 	.word	0x200063c0

080147e4 <_close_r>:
 80147e4:	b538      	push	{r3, r4, r5, lr}
 80147e6:	4d06      	ldr	r5, [pc, #24]	; (8014800 <_close_r+0x1c>)
 80147e8:	2300      	movs	r3, #0
 80147ea:	4604      	mov	r4, r0
 80147ec:	4608      	mov	r0, r1
 80147ee:	602b      	str	r3, [r5, #0]
 80147f0:	f7f2 fb99 	bl	8006f26 <_close>
 80147f4:	1c43      	adds	r3, r0, #1
 80147f6:	d102      	bne.n	80147fe <_close_r+0x1a>
 80147f8:	682b      	ldr	r3, [r5, #0]
 80147fa:	b103      	cbz	r3, 80147fe <_close_r+0x1a>
 80147fc:	6023      	str	r3, [r4, #0]
 80147fe:	bd38      	pop	{r3, r4, r5, pc}
 8014800:	200063c0 	.word	0x200063c0

08014804 <_fstat_r>:
 8014804:	b538      	push	{r3, r4, r5, lr}
 8014806:	4d07      	ldr	r5, [pc, #28]	; (8014824 <_fstat_r+0x20>)
 8014808:	2300      	movs	r3, #0
 801480a:	4604      	mov	r4, r0
 801480c:	4608      	mov	r0, r1
 801480e:	4611      	mov	r1, r2
 8014810:	602b      	str	r3, [r5, #0]
 8014812:	f7f2 fb94 	bl	8006f3e <_fstat>
 8014816:	1c43      	adds	r3, r0, #1
 8014818:	d102      	bne.n	8014820 <_fstat_r+0x1c>
 801481a:	682b      	ldr	r3, [r5, #0]
 801481c:	b103      	cbz	r3, 8014820 <_fstat_r+0x1c>
 801481e:	6023      	str	r3, [r4, #0]
 8014820:	bd38      	pop	{r3, r4, r5, pc}
 8014822:	bf00      	nop
 8014824:	200063c0 	.word	0x200063c0

08014828 <_isatty_r>:
 8014828:	b538      	push	{r3, r4, r5, lr}
 801482a:	4d06      	ldr	r5, [pc, #24]	; (8014844 <_isatty_r+0x1c>)
 801482c:	2300      	movs	r3, #0
 801482e:	4604      	mov	r4, r0
 8014830:	4608      	mov	r0, r1
 8014832:	602b      	str	r3, [r5, #0]
 8014834:	f7f2 fb93 	bl	8006f5e <_isatty>
 8014838:	1c43      	adds	r3, r0, #1
 801483a:	d102      	bne.n	8014842 <_isatty_r+0x1a>
 801483c:	682b      	ldr	r3, [r5, #0]
 801483e:	b103      	cbz	r3, 8014842 <_isatty_r+0x1a>
 8014840:	6023      	str	r3, [r4, #0]
 8014842:	bd38      	pop	{r3, r4, r5, pc}
 8014844:	200063c0 	.word	0x200063c0

08014848 <_lseek_r>:
 8014848:	b538      	push	{r3, r4, r5, lr}
 801484a:	4d07      	ldr	r5, [pc, #28]	; (8014868 <_lseek_r+0x20>)
 801484c:	4604      	mov	r4, r0
 801484e:	4608      	mov	r0, r1
 8014850:	4611      	mov	r1, r2
 8014852:	2200      	movs	r2, #0
 8014854:	602a      	str	r2, [r5, #0]
 8014856:	461a      	mov	r2, r3
 8014858:	f7f2 fb8c 	bl	8006f74 <_lseek>
 801485c:	1c43      	adds	r3, r0, #1
 801485e:	d102      	bne.n	8014866 <_lseek_r+0x1e>
 8014860:	682b      	ldr	r3, [r5, #0]
 8014862:	b103      	cbz	r3, 8014866 <_lseek_r+0x1e>
 8014864:	6023      	str	r3, [r4, #0]
 8014866:	bd38      	pop	{r3, r4, r5, pc}
 8014868:	200063c0 	.word	0x200063c0

0801486c <_read_r>:
 801486c:	b538      	push	{r3, r4, r5, lr}
 801486e:	4d07      	ldr	r5, [pc, #28]	; (801488c <_read_r+0x20>)
 8014870:	4604      	mov	r4, r0
 8014872:	4608      	mov	r0, r1
 8014874:	4611      	mov	r1, r2
 8014876:	2200      	movs	r2, #0
 8014878:	602a      	str	r2, [r5, #0]
 801487a:	461a      	mov	r2, r3
 801487c:	f7f2 fb1a 	bl	8006eb4 <_read>
 8014880:	1c43      	adds	r3, r0, #1
 8014882:	d102      	bne.n	801488a <_read_r+0x1e>
 8014884:	682b      	ldr	r3, [r5, #0]
 8014886:	b103      	cbz	r3, 801488a <_read_r+0x1e>
 8014888:	6023      	str	r3, [r4, #0]
 801488a:	bd38      	pop	{r3, r4, r5, pc}
 801488c:	200063c0 	.word	0x200063c0

08014890 <_init>:
 8014890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014892:	bf00      	nop
 8014894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014896:	bc08      	pop	{r3}
 8014898:	469e      	mov	lr, r3
 801489a:	4770      	bx	lr

0801489c <_fini>:
 801489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801489e:	bf00      	nop
 80148a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148a2:	bc08      	pop	{r3}
 80148a4:	469e      	mov	lr, r3
 80148a6:	4770      	bx	lr
