
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014598  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001084  08014728  08014728  00024728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080157ac  080157ac  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  080157ac  080157ac  000257ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080157b4  080157b4  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080157b4  080157b4  000257b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080157b8  080157b8  000257b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080157bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          000061e0  200001e8  200001e8  000301e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200063c8  200063c8  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e064  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a01  00000000  00000000  0004e27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e8  00000000  00000000  00051c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d30  00000000  00000000  00053668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004ab1  00000000  00000000  00055398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db5b  00000000  00000000  00059e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db45f  00000000  00000000  000779a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00152e03  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000083f8  00000000  00000000  00152e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014710 	.word	0x08014710

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08014710 	.word	0x08014710

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffc:	f005 ff7a 	bl	8006ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001000:	f000 f850 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001004:	f000 fb48 	bl	8001698 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001008:	f000 fa72 	bl	80014f0 <MX_TIM8_Init>
  MX_TIM1_Init();
 800100c:	f000 f8d6 	bl	80011bc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001010:	f000 fb18 	bl	8001644 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001014:	f000 f8a4 	bl	8001160 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001018:	f000 f96e 	bl	80012f8 <MX_TIM2_Init>
  MX_TIM4_Init();
 800101c:	f000 fa14 	bl	8001448 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001020:	f000 f9be 	bl	80013a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8001024:	f005 fa56 	bl	80064d4 <OLED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001028:	f00c f8d4 	bl	800d1d4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <main+0x7c>)
 800102e:	2100      	movs	r1, #0
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <main+0x80>)
 8001032:	f00c f919 	bl	800d268 <osThreadNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a10      	ldr	r2, [pc, #64]	; (800107c <main+0x84>)
 800103a:	6013      	str	r3, [r2, #0]

  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(oled_show, NULL, &OLEDTask_attributes);
 800103c:	4a10      	ldr	r2, [pc, #64]	; (8001080 <main+0x88>)
 800103e:	2100      	movs	r1, #0
 8001040:	4810      	ldr	r0, [pc, #64]	; (8001084 <main+0x8c>)
 8001042:	f00c f911 	bl	800d268 <osThreadNew>
 8001046:	4603      	mov	r3, r0
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <main+0x90>)
 800104a:	6013      	str	r3, [r2, #0]

  /* creation of GyroRead */
  GyroReadHandle = osThreadNew(gyro_read, NULL, &GyroRead_attributes);
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <main+0x94>)
 800104e:	2100      	movs	r1, #0
 8001050:	480f      	ldr	r0, [pc, #60]	; (8001090 <main+0x98>)
 8001052:	f00c f909 	bl	800d268 <osThreadNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <main+0x9c>)
 800105a:	6013      	str	r3, [r2, #0]

  /* creation of ServoMotor */
  ServoMotorHandle = osThreadNew(servoMotor, NULL, &ServoMotor_attributes);
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <main+0xa0>)
 800105e:	2100      	movs	r1, #0
 8001060:	480e      	ldr	r0, [pc, #56]	; (800109c <main+0xa4>)
 8001062:	f00c f901 	bl	800d268 <osThreadNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <main+0xa8>)
 800106a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800106c:	f00c f8d6 	bl	800d21c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001070:	e7fe      	b.n	8001070 <main+0x78>
 8001072:	bf00      	nop
 8001074:	080147fc 	.word	0x080147fc
 8001078:	08005c01 	.word	0x08005c01
 800107c:	20000404 	.word	0x20000404
 8001080:	08014820 	.word	0x08014820
 8001084:	08005f61 	.word	0x08005f61
 8001088:	20000408 	.word	0x20000408
 800108c:	08014844 	.word	0x08014844
 8001090:	08005f71 	.word	0x08005f71
 8001094:	2000040c 	.word	0x2000040c
 8001098:	08014868 	.word	0x08014868
 800109c:	08006151 	.word	0x08006151
 80010a0:	20000410 	.word	0x20000410

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2230      	movs	r2, #48	; 0x30
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f00e fec2 	bl	800fe3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <SystemClock_Config+0xb4>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <SystemClock_Config+0xb4>)
 80010d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <SystemClock_Config+0xb4>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <SystemClock_Config+0xb8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <SystemClock_Config+0xb8>)
 80010ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <SystemClock_Config+0xb8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001100:	2302      	movs	r3, #2
 8001102:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001108:	2310      	movs	r3, #16
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f008 fe87 	bl	8009e28 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001120:	f005 f82c 	bl	800617c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f009 f8ea 	bl	800a318 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800114a:	f005 f817 	bl	800617c <Error_Handler>
  }
}
 800114e:	bf00      	nop
 8001150:	3750      	adds	r7, #80	; 0x50
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <MX_I2C1_Init+0x54>)
 8001168:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_I2C1_Init+0x50>)
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x58>)
 800116e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_I2C1_Init+0x50>)
 800117e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001182:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_I2C1_Init+0x50>)
 800119e:	f006 fac1 	bl	8007724 <HAL_I2C_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a8:	f004 ffe8 	bl	800617c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000204 	.word	0x20000204
 80011b4:	40005400 	.word	0x40005400
 80011b8:	00061a80 	.word	0x00061a80

080011bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b096      	sub	sp, #88	; 0x58
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2220      	movs	r2, #32
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00e fe21 	bl	800fe3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <MX_TIM1_Init+0x134>)
 80011fc:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <MX_TIM1_Init+0x138>)
 80011fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001200:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001202:	22a0      	movs	r2, #160	; 0xa0
 8001204:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800120c:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <MX_TIM1_Init+0x134>)
 800120e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001212:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <MX_TIM1_Init+0x134>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001226:	4832      	ldr	r0, [pc, #200]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001228:	f009 fa56 	bl	800a6d8 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001232:	f004 ffa3 	bl	800617c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800123c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001240:	4619      	mov	r1, r3
 8001242:	482b      	ldr	r0, [pc, #172]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001244:	f00a f8ca 	bl	800b3dc <HAL_TIM_ConfigClockSource>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800124e:	f004 ff95 	bl	800617c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001252:	4827      	ldr	r0, [pc, #156]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001254:	f009 fa8f 	bl	800a776 <HAL_TIM_PWM_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800125e:	f004 ff8d 	bl	800617c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800126a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800126e:	4619      	mov	r1, r3
 8001270:	481f      	ldr	r0, [pc, #124]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001272:	f00a fe21 	bl	800beb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800127c:	f004 ff7e 	bl	800617c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001280:	2360      	movs	r3, #96	; 0x60
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	220c      	movs	r2, #12
 800129e:	4619      	mov	r1, r3
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012a2:	f009 ffd9 	bl	800b258 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80012ac:	f004 ff66 	bl	800617c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012d4:	f00a fe6c 	bl	800bfb0 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80012de:	f004 ff4d 	bl	800617c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012e2:	4803      	ldr	r0, [pc, #12]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012e4:	f005 fc38 	bl	8006b58 <HAL_TIM_MspPostInit>

}
 80012e8:	bf00      	nop
 80012ea:	3758      	adds	r7, #88	; 0x58
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000258 	.word	0x20000258
 80012f4:	40010000 	.word	0x40010000

080012f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	; 0x30
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	2224      	movs	r2, #36	; 0x24
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f00e fd98 	bl	800fe3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_TIM2_Init+0xa4>)
 8001316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_TIM2_Init+0xa4>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_TIM2_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_TIM2_Init+0xa4>)
 800132a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM2_Init+0xa4>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_TIM2_Init+0xa4>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800133c:	2301      	movs	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001344:	2301      	movs	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001354:	2301      	movs	r3, #1
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_TIM2_Init+0xa4>)
 8001368:	f009 fc9e 	bl	800aca8 <HAL_TIM_Encoder_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001372:	f004 ff03 	bl	800617c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_TIM2_Init+0xa4>)
 8001384:	f00a fd98 	bl	800beb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800138e:	f004 fef5 	bl	800617c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3730      	adds	r7, #48	; 0x30
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200002a0 	.word	0x200002a0

080013a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013be:	4a21      	ldr	r2, [pc, #132]	; (8001444 <MX_TIM3_Init+0xa4>)
 80013c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013c4:	2247      	movs	r2, #71	; 0x47
 80013c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80013e2:	4817      	ldr	r0, [pc, #92]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013e4:	f009 fae8 	bl	800a9b8 <HAL_TIM_IC_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80013ee:	f004 fec5 	bl	800617c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4619      	mov	r1, r3
 8001400:	480f      	ldr	r0, [pc, #60]	; (8001440 <MX_TIM3_Init+0xa0>)
 8001402:	f00a fd59 	bl	800beb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800140c:	f004 feb6 	bl	800617c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_TIM3_Init+0xa0>)
 8001428:	f009 fe7a 	bl	800b120 <HAL_TIM_IC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001432:	f004 fea3 	bl	800617c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200002e8 	.word	0x200002e8
 8001444:	40000400 	.word	0x40000400

08001448 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2224      	movs	r2, #36	; 0x24
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f00e fcf0 	bl	800fe3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001466:	4a21      	ldr	r2, [pc, #132]	; (80014ec <MX_TIM4_Init+0xa4>)
 8001468:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <MX_TIM4_Init+0xa0>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800148a:	2301      	movs	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014a2:	2301      	movs	r3, #1
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	4619      	mov	r1, r3
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <MX_TIM4_Init+0xa0>)
 80014b6:	f009 fbf7 	bl	800aca8 <HAL_TIM_Encoder_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80014c0:	f004 fe5c 	bl	800617c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_TIM4_Init+0xa0>)
 80014d2:	f00a fcf1 	bl	800beb8 <HAL_TIMEx_MasterConfigSynchronization>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80014dc:	f004 fe4e 	bl	800617c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	3730      	adds	r7, #48	; 0x30
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000330 	.word	0x20000330
 80014ec:	40000800 	.word	0x40000800

080014f0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b096      	sub	sp, #88	; 0x58
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2220      	movs	r2, #32
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f00e fc87 	bl	800fe3c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800152e:	4b43      	ldr	r3, [pc, #268]	; (800163c <MX_TIM8_Init+0x14c>)
 8001530:	4a43      	ldr	r2, [pc, #268]	; (8001640 <MX_TIM8_Init+0x150>)
 8001532:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001534:	4b41      	ldr	r3, [pc, #260]	; (800163c <MX_TIM8_Init+0x14c>)
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b40      	ldr	r3, [pc, #256]	; (800163c <MX_TIM8_Init+0x14c>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001540:	4b3e      	ldr	r3, [pc, #248]	; (800163c <MX_TIM8_Init+0x14c>)
 8001542:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001546:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001548:	4b3c      	ldr	r3, [pc, #240]	; (800163c <MX_TIM8_Init+0x14c>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <MX_TIM8_Init+0x14c>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001554:	4b39      	ldr	r3, [pc, #228]	; (800163c <MX_TIM8_Init+0x14c>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800155a:	4838      	ldr	r0, [pc, #224]	; (800163c <MX_TIM8_Init+0x14c>)
 800155c:	f009 f8bc 	bl	800a6d8 <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001566:	f004 fe09 	bl	800617c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001570:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001574:	4619      	mov	r1, r3
 8001576:	4831      	ldr	r0, [pc, #196]	; (800163c <MX_TIM8_Init+0x14c>)
 8001578:	f009 ff30 	bl	800b3dc <HAL_TIM_ConfigClockSource>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001582:	f004 fdfb 	bl	800617c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001586:	482d      	ldr	r0, [pc, #180]	; (800163c <MX_TIM8_Init+0x14c>)
 8001588:	f009 f8f5 	bl	800a776 <HAL_TIM_PWM_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001592:	f004 fdf3 	bl	800617c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800159e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015a2:	4619      	mov	r1, r3
 80015a4:	4825      	ldr	r0, [pc, #148]	; (800163c <MX_TIM8_Init+0x14c>)
 80015a6:	f00a fc87 	bl	800beb8 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80015b0:	f004 fde4 	bl	800617c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b4:	2360      	movs	r3, #96	; 0x60
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4818      	ldr	r0, [pc, #96]	; (800163c <MX_TIM8_Init+0x14c>)
 80015da:	f009 fe3d 	bl	800b258 <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80015e4:	f004 fdca 	bl	800617c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	2208      	movs	r2, #8
 80015ee:	4619      	mov	r1, r3
 80015f0:	4812      	ldr	r0, [pc, #72]	; (800163c <MX_TIM8_Init+0x14c>)
 80015f2:	f009 fe31 	bl	800b258 <HAL_TIM_PWM_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80015fc:	f004 fdbe 	bl	800617c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001618:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <MX_TIM8_Init+0x14c>)
 8001624:	f00a fcc4 	bl	800bfb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800162e:	f004 fda5 	bl	800617c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	3758      	adds	r7, #88	; 0x58
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000378 	.word	0x20000378
 8001640:	40010400 	.word	0x40010400

08001644 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_USART3_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800167c:	f00a fcfe 	bl	800c07c <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001686:	f004 fd79 	bl	800617c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200003c0 	.word	0x200003c0
 8001694:	40004800 	.word	0x40004800

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b3a      	ldr	r3, [pc, #232]	; (800179c <MX_GPIO_Init+0x104>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a39      	ldr	r2, [pc, #228]	; (800179c <MX_GPIO_Init+0x104>)
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <MX_GPIO_Init+0x104>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b33      	ldr	r3, [pc, #204]	; (800179c <MX_GPIO_Init+0x104>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a32      	ldr	r2, [pc, #200]	; (800179c <MX_GPIO_Init+0x104>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b30      	ldr	r3, [pc, #192]	; (800179c <MX_GPIO_Init+0x104>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <MX_GPIO_Init+0x104>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a2b      	ldr	r2, [pc, #172]	; (800179c <MX_GPIO_Init+0x104>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <MX_GPIO_Init+0x104>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <MX_GPIO_Init+0x104>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a24      	ldr	r2, [pc, #144]	; (800179c <MX_GPIO_Init+0x104>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <MX_GPIO_Init+0x104>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800171e:	2200      	movs	r2, #0
 8001720:	f44f 51bf 	mov.w	r1, #6112	; 0x17e0
 8001724:	481e      	ldr	r0, [pc, #120]	; (80017a0 <MX_GPIO_Init+0x108>)
 8001726:	f005 ffc9 	bl	80076bc <HAL_GPIO_WritePin>
                          |UltraSensor_Trigger_Pin|LED3_Pin|CIN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	210c      	movs	r1, #12
 800172e:	481d      	ldr	r0, [pc, #116]	; (80017a4 <MX_GPIO_Init+0x10c>)
 8001730:	f005 ffc4 	bl	80076bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2120      	movs	r1, #32
 8001738:	481b      	ldr	r0, [pc, #108]	; (80017a8 <MX_GPIO_Init+0x110>)
 800173a:	f005 ffbf 	bl	80076bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           UltraSensor_Trigger_Pin LED3_Pin CIN1_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800173e:	f44f 53bf 	mov.w	r3, #6112	; 0x17e0
 8001742:	617b      	str	r3, [r7, #20]
                          |UltraSensor_Trigger_Pin|LED3_Pin|CIN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4812      	ldr	r0, [pc, #72]	; (80017a0 <MX_GPIO_Init+0x108>)
 8001758:	f005 fe14 	bl	8007384 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin;
 800175c:	230c      	movs	r3, #12
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001768:	2302      	movs	r3, #2
 800176a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	480c      	ldr	r0, [pc, #48]	; (80017a4 <MX_GPIO_Init+0x10c>)
 8001774:	f005 fe06 	bl	8007384 <HAL_GPIO_Init>

  /*Configure GPIO pin : CIN2_Pin */
  GPIO_InitStruct.Pin = CIN2_Pin;
 8001778:	2320      	movs	r3, #32
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CIN2_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_GPIO_Init+0x110>)
 8001790:	f005 fdf8 	bl	8007384 <HAL_GPIO_Init>

}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40020800 	.word	0x40020800

080017ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// For own reference, this function seems to be called after
// interrupt from the HAL_UART_Receive_IT function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b08b      	sub	sp, #44	; 0x2c
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	6078      	str	r0, [r7, #4]
	//Prevent unused argument(s) compilation warning
	UNUSED(huart);
	static i = 0; //static means it doesn't get erase after every loop

	if (aRxBuffer[0] == 'n'){
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b6e      	cmp	r3, #110	; 0x6e
 80017ba:	d106      	bne.n	80017ca <HAL_UART_RxCpltCallback+0x1e>
		i = 0;
 80017bc:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
		newCmdReceived = 1;
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_UART_RxCpltCallback+0xb0>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
 80017c8:	e01e      	b.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
	}
	else if (i==0)
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_UART_RxCpltCallback+0x3a>
	{
		cmd = aRxBuffer[0];
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_UART_RxCpltCallback+0xb4>)
 80017d8:	701a      	strb	r2, [r3, #0]
		i++;
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	e010      	b.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
	}
	else if (i > 0)
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	dd0c      	ble.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
	{
		data = data*10 + (aRxBuffer[0] - '0');
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4413      	add	r3, r2
 8001802:	3b30      	subs	r3, #48	; 0x30
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 8001806:	6013      	str	r3, [r2, #0]
//		data = aRxBuffer[0];
	}

	uint8_t message1[20];
	HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer, 1);
 8001808:	2201      	movs	r2, #1
 800180a:	4912      	ldr	r1, [pc, #72]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 800180c:	4816      	ldr	r0, [pc, #88]	; (8001868 <HAL_UART_RxCpltCallback+0xbc>)
 800180e:	f00a fd14 	bl	800c23a <HAL_UART_Receive_IT>
//	HAL_UART_Transmit(&huart3, (uint8_t *) aRxBuffer, 1, 0xFFFF);


	sprintf(message1, "%c %d %c %d\0", aRxBuffer[0], newCmdReceived, cmd, data);
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_UART_RxCpltCallback+0xb0>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461c      	mov	r4, r3
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_UART_RxCpltCallback+0xb4>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f107 000c 	add.w	r0, r7, #12
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	9200      	str	r2, [sp, #0]
 8001830:	4623      	mov	r3, r4
 8001832:	460a      	mov	r2, r1
 8001834:	490d      	ldr	r1, [pc, #52]	; (800186c <HAL_UART_RxCpltCallback+0xc0>)
 8001836:	f00f f989 	bl	8010b4c <siprintf>
	OLED_ShowString(10, 40, message1);
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	461a      	mov	r2, r3
 8001840:	2128      	movs	r1, #40	; 0x28
 8001842:	200a      	movs	r0, #10
 8001844:	f004 fe14 	bl	8006470 <OLED_ShowString>
	OLED_Refresh_Gram(); //Refresh Ram
 8001848:	f004 fc9e 	bl	8006188 <OLED_Refresh_Gram>
}
 800184c:	bf00      	nop
 800184e:	3724      	adds	r7, #36	; 0x24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}
 8001854:	20000428 	.word	0x20000428
 8001858:	2000045c 	.word	0x2000045c
 800185c:	20000429 	.word	0x20000429
 8001860:	2000042a 	.word	0x2000042a
 8001864:	2000042c 	.word	0x2000042c
 8001868:	200003c0 	.word	0x200003c0
 800186c:	08014758 	.word	0x08014758

08001870 <delay>:

//reference: https://controllerstech.com/hcsr04-ultrasonic-sensor-and-stm32/
void delay(uint16_t time)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <delay+0x30>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
 8001882:	bf00      	nop
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <delay+0x30>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	429a      	cmp	r2, r3
 800188e:	d3f9      	bcc.n	8001884 <delay+0x14>

}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	200002e8 	.word	0x200002e8

080018a4 <HCSR04_Read>:
void HCSR04_Read (void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UltraSensor_Trigger_GPIO_Port, UltraSensor_Trigger_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ae:	480b      	ldr	r0, [pc, #44]	; (80018dc <HCSR04_Read+0x38>)
 80018b0:	f005 ff04 	bl	80076bc <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80018b4:	200a      	movs	r0, #10
 80018b6:	f7ff ffdb 	bl	8001870 <delay>
	HAL_GPIO_WritePin(UltraSensor_Trigger_GPIO_Port, UltraSensor_Trigger_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c0:	4806      	ldr	r0, [pc, #24]	; (80018dc <HCSR04_Read+0x38>)
 80018c2:	f005 fefb 	bl	80076bc <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HCSR04_Read+0x3c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <HCSR04_Read+0x3c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0202 	orr.w	r2, r2, #2
 80018d4:	60da      	str	r2, [r3, #12]
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	200002e8 	.word	0x200002e8
 80018e4:	00000000 	.word	0x00000000

080018e8 <HAL_TIM_IC_CaptureCallback>:

//Called whenever falling or rising edge is captured
// Let's write the callback function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7f1b      	ldrb	r3, [r3, #28]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	f040 8082 	bne.w	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80018fa:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11a      	bne.n	8001938 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001902:	2100      	movs	r1, #0
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f009 fe31 	bl	800b56c <HAL_TIM_ReadCapturedValue>
 800190a:	4603      	mov	r3, r0
 800190c:	4a41      	ldr	r2, [pc, #260]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800190e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001910:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6a1a      	ldr	r2, [r3, #32]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 020a 	bic.w	r2, r2, #10
 8001924:	621a      	str	r2, [r3, #32]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6a1a      	ldr	r2, [r3, #32]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0202 	orr.w	r2, r2, #2
 8001934:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8001936:	e062      	b.n	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d15e      	bne.n	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001940:	2100      	movs	r1, #0
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f009 fe12 	bl	800b56c <HAL_TIM_ReadCapturedValue>
 8001948:	4603      	mov	r3, r0
 800194a:	4a33      	ldr	r2, [pc, #204]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 800194c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8001956:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d907      	bls.n	8001972 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8001962:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	4a2b      	ldr	r2, [pc, #172]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e00f      	b.n	8001992 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8001972:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d909      	bls.n	8001992 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800198c:	33ff      	adds	r3, #255	; 0xff
 800198e:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001990:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.034/2;
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdb4 	bl	8000504 <__aeabi_ui2d>
 800199c:	a31a      	add	r3, pc, #104	; (adr r3, 8001a08 <HAL_TIM_IC_CaptureCallback+0x120>)
 800199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a2:	f7fe fe29 	bl	80005f8 <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b6:	f7fe ff49 	bl	800084c <__aeabi_ddiv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f911 	bl	8000be8 <__aeabi_d2f>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x138>)
 80019ca:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6a1a      	ldr	r2, [r3, #32]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 020a 	bic.w	r2, r2, #10
 80019e0:	621a      	str	r2, [r3, #32]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6a12      	ldr	r2, [r2, #32]
 80019ec:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0202 	bic.w	r2, r2, #2
 80019fc:	60da      	str	r2, [r3, #12]
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	b020c49c 	.word	0xb020c49c
 8001a0c:	3fa16872 	.word	0x3fa16872
 8001a10:	20000440 	.word	0x20000440
 8001a14:	20000434 	.word	0x20000434
 8001a18:	20000438 	.word	0x20000438
 8001a1c:	2000043c 	.word	0x2000043c
 8001a20:	20000444 	.word	0x20000444
 8001a24:	20000258 	.word	0x20000258

08001a28 <task2A>:


void task2A(uint32_t data)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b0a0      	sub	sp, #128	; 0x80
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	uint32_t offset_show[30];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001a30:	2100      	movs	r1, #0
 8001a32:	48b4      	ldr	r0, [pc, #720]	; (8001d04 <task2A+0x2dc>)
 8001a34:	f008 fef8 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001a38:	2108      	movs	r1, #8
 8001a3a:	48b2      	ldr	r0, [pc, #712]	; (8001d04 <task2A+0x2dc>)
 8001a3c:	f008 fef4 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001a40:	210c      	movs	r1, #12
 8001a42:	48b1      	ldr	r0, [pc, #708]	; (8001d08 <task2A+0x2e0>)
 8001a44:	f008 fef0 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2108      	movs	r1, #8
 8001a4c:	48af      	ldr	r0, [pc, #700]	; (8001d0c <task2A+0x2e4>)
 8001a4e:	f005 fe35 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2104      	movs	r1, #4
 8001a56:	48ad      	ldr	r0, [pc, #692]	; (8001d0c <task2A+0x2e4>)
 8001a58:	f005 fe30 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a62:	48ab      	ldr	r0, [pc, #684]	; (8001d10 <task2A+0x2e8>)
 8001a64:	f005 fe2a 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	48a9      	ldr	r0, [pc, #676]	; (8001d14 <task2A+0x2ec>)
 8001a6e:	f005 fe25 	bl	80076bc <HAL_GPIO_WritePin>

 	//if picture detected is left tln
 	if (data == 'l')
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b6c      	cmp	r3, #108	; 0x6c
 8001a76:	f040 8088 	bne.w	8001b8a <task2A+0x162>
 	{
 		htim1.Instance -> CCR4 = 115;
 8001a7a:	4ba3      	ldr	r3, [pc, #652]	; (8001d08 <task2A+0x2e0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2273      	movs	r2, #115	; 0x73
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
 		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001a82:	4ba0      	ldr	r3, [pc, #640]	; (8001d04 <task2A+0x2dc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a8a:	635a      	str	r2, [r3, #52]	; 0x34
 		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 8001a8c:	4b9d      	ldr	r3, [pc, #628]	; (8001d04 <task2A+0x2dc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a94:	63da      	str	r2, [r3, #60]	; 0x3c
 		 moving = 1;
 8001a96:	4ba0      	ldr	r3, [pc, #640]	; (8001d18 <task2A+0x2f0>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
 		 while (moving)
 8001a9c:	e020      	b.n	8001ae0 <task2A+0xb8>
 		 {
 			 if ((int)totalAngle >= 27)
 8001a9e:	4b9f      	ldr	r3, [pc, #636]	; (8001d1c <task2A+0x2f4>)
 8001aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7ff f856 	bl	8000b58 <__aeabi_d2iz>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b1a      	cmp	r3, #26
 8001ab0:	dc1b      	bgt.n	8001aea <task2A+0xc2>
 			 {
 				break;
 			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8001ab2:	4b9a      	ldr	r3, [pc, #616]	; (8001d1c <task2A+0x2f4>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7ff f84c 	bl	8000b58 <__aeabi_d2iz>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	4996      	ldr	r1, [pc, #600]	; (8001d20 <task2A+0x2f8>)
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f00f f83f 	bl	8010b4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2114      	movs	r1, #20
 8001ad6:	200a      	movs	r0, #10
 8001ad8:	f004 fcca 	bl	8006470 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8001adc:	f004 fb54 	bl	8006188 <OLED_Refresh_Gram>
 		 while (moving)
 8001ae0:	4b8d      	ldr	r3, [pc, #564]	; (8001d18 <task2A+0x2f0>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1da      	bne.n	8001a9e <task2A+0x76>
 8001ae8:	e000      	b.n	8001aec <task2A+0xc4>
 				break;
 8001aea:	bf00      	nop
 		 }
 		 moveGyroPID(60, 1);
 8001aec:	2001      	movs	r0, #1
 8001aee:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8001d24 <task2A+0x2fc>
 8001af2:	f002 f995 	bl	8003e20 <moveGyroPID>
 		htim1.Instance -> CCR4 = RIGHT;
 8001af6:	4b84      	ldr	r3, [pc, #528]	; (8001d08 <task2A+0x2e0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	22fa      	movs	r2, #250	; 0xfa
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
 		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2000);
 8001afe:	4b81      	ldr	r3, [pc, #516]	; (8001d04 <task2A+0x2dc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b06:	635a      	str	r2, [r3, #52]	; 0x34
 		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001b08:	4b7e      	ldr	r3, [pc, #504]	; (8001d04 <task2A+0x2dc>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b10:	63da      	str	r2, [r3, #60]	; 0x3c
 		continueMoving = 0;
 8001b12:	4b85      	ldr	r3, [pc, #532]	; (8001d28 <task2A+0x300>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
 		while (Distance > 14)
 8001b18:	e025      	b.n	8001b66 <task2A+0x13e>
 		{
 			if (totalAngle <= -1*15){
 8001b1a:	4b80      	ldr	r3, [pc, #512]	; (8001d1c <task2A+0x2f4>)
 8001b1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b81      	ldr	r3, [pc, #516]	; (8001d2c <task2A+0x304>)
 8001b26:	f7fe ffe3 	bl	8000af0 <__aeabi_dcmple>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <task2A+0x110>
 				continueMoving = 1;
 8001b30:	4b7d      	ldr	r3, [pc, #500]	; (8001d28 <task2A+0x300>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
// 				sendToRPI("here");
 				break;
 8001b36:	e020      	b.n	8001b7a <task2A+0x152>
 			}


			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8001b38:	4b78      	ldr	r3, [pc, #480]	; (8001d1c <task2A+0x2f4>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7ff f809 	bl	8000b58 <__aeabi_d2iz>
 8001b46:	4602      	mov	r2, r0
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	4974      	ldr	r1, [pc, #464]	; (8001d20 <task2A+0x2f8>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00e fffc 	bl	8010b4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2114      	movs	r1, #20
 8001b5c:	200a      	movs	r0, #10
 8001b5e:	f004 fc87 	bl	8006470 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8001b62:	f004 fb11 	bl	8006188 <OLED_Refresh_Gram>
 		while (Distance > 14)
 8001b66:	4b72      	ldr	r3, [pc, #456]	; (8001d30 <task2A+0x308>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	dccf      	bgt.n	8001b1a <task2A+0xf2>
 		 }
 		if(continueMoving)
 8001b7a:	4b6b      	ldr	r3, [pc, #428]	; (8001d28 <task2A+0x300>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 808e 	beq.w	8001ca0 <task2A+0x278>
 		{
 			moveUltraExtreme();
 8001b84:	f001 ff4a 	bl	8003a1c <moveUltraExtreme>
 8001b88:	e08a      	b.n	8001ca0 <task2A+0x278>
 		}


 	}
 	else if (data == 'r')
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b72      	cmp	r3, #114	; 0x72
 8001b8e:	f040 8087 	bne.w	8001ca0 <task2A+0x278>
 	{
 		htim1.Instance -> CCR4 = RIGHT;
 8001b92:	4b5d      	ldr	r3, [pc, #372]	; (8001d08 <task2A+0x2e0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	22fa      	movs	r2, #250	; 0xfa
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
 		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2000);
 8001b9a:	4b5a      	ldr	r3, [pc, #360]	; (8001d04 <task2A+0x2dc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34
 		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001ba4:	4b57      	ldr	r3, [pc, #348]	; (8001d04 <task2A+0x2dc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bac:	63da      	str	r2, [r3, #60]	; 0x3c
 		 moving = 1;
 8001bae:	4b5a      	ldr	r3, [pc, #360]	; (8001d18 <task2A+0x2f0>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
 		 while (moving)
 8001bb4:	e021      	b.n	8001bfa <task2A+0x1d2>
 		 {
 			 if ((int)totalAngle <= -1*23) // prev was 30
 8001bb6:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <task2A+0x2f4>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7fe ffca 	bl	8000b58 <__aeabi_d2iz>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f113 0f16 	cmn.w	r3, #22
 8001bca:	db1b      	blt.n	8001c04 <task2A+0x1dc>
 			 {
 				break;
 			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8001bcc:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <task2A+0x2f4>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7fe ffbf 	bl	8000b58 <__aeabi_d2iz>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	f107 0308 	add.w	r3, r7, #8
 8001be0:	494f      	ldr	r1, [pc, #316]	; (8001d20 <task2A+0x2f8>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f00e ffb2 	bl	8010b4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	461a      	mov	r2, r3
 8001bee:	2114      	movs	r1, #20
 8001bf0:	200a      	movs	r0, #10
 8001bf2:	f004 fc3d 	bl	8006470 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8001bf6:	f004 fac7 	bl	8006188 <OLED_Refresh_Gram>
 		 while (moving)
 8001bfa:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <task2A+0x2f0>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1d9      	bne.n	8001bb6 <task2A+0x18e>
 8001c02:	e000      	b.n	8001c06 <task2A+0x1de>
 				break;
 8001c04:	bf00      	nop
 		 }
 		moveGyroPID(58, 1);
 8001c06:	2001      	movs	r0, #1
 8001c08:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8001d34 <task2A+0x30c>
 8001c0c:	f002 f908 	bl	8003e20 <moveGyroPID>
 		htim1.Instance -> CCR4 = LEFT;
 8001c10:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <task2A+0x2e0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2269      	movs	r2, #105	; 0x69
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40
 		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001c18:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <task2A+0x2dc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c20:	635a      	str	r2, [r3, #52]	; 0x34
 		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 8001c22:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <task2A+0x2dc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c2a:	63da      	str	r2, [r3, #60]	; 0x3c
 		continueMoving = 0;
 8001c2c:	4b3e      	ldr	r3, [pc, #248]	; (8001d28 <task2A+0x300>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]

 		while (Distance > 14)
 8001c32:	e025      	b.n	8001c80 <task2A+0x258>
 		{
 			if (totalAngle >= 25){
 8001c34:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <task2A+0x2f4>)
 8001c36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <task2A+0x310>)
 8001c40:	f7fe ff60 	bl	8000b04 <__aeabi_dcmpge>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <task2A+0x22a>
 				continueMoving = 1;
 8001c4a:	4b37      	ldr	r3, [pc, #220]	; (8001d28 <task2A+0x300>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
 				break;
 8001c50:	e020      	b.n	8001c94 <task2A+0x26c>
 			}
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8001c52:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <task2A+0x2f4>)
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe ff7c 	bl	8000b58 <__aeabi_d2iz>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	492e      	ldr	r1, [pc, #184]	; (8001d20 <task2A+0x2f8>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f00e ff6f 	bl	8010b4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	461a      	mov	r2, r3
 8001c74:	2114      	movs	r1, #20
 8001c76:	200a      	movs	r0, #10
 8001c78:	f004 fbfa 	bl	8006470 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8001c7c:	f004 fa84 	bl	8006188 <OLED_Refresh_Gram>
 		while (Distance > 14)
 8001c80:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <task2A+0x308>)
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	dccf      	bgt.n	8001c34 <task2A+0x20c>
 		 }
 		if(continueMoving)
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <task2A+0x300>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <task2A+0x278>
 		{
 			moveUltraExtreme();
 8001c9c:	f001 febe 	bl	8003a1c <moveUltraExtreme>
// 	 		continueMoving = 0;
// 		}
 	}

 	// straighten STM back to be perpendicular to 2nd obstacle
 		if(continueMoving){
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <task2A+0x300>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d078      	beq.n	8001d9a <task2A+0x372>
 			if(actualAngle > 0) {
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <task2A+0x314>)
 8001caa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	f7fe ff2f 	bl	8000b18 <__aeabi_dcmpgt>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d03f      	beq.n	8001d40 <task2A+0x318>
				while(actualAngle > 0){
 8001cc0:	e013      	b.n	8001cea <task2A+0x2c2>
					moving = 1;
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <task2A+0x2f0>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
					htim1.Instance -> CCR4 = RIGHT;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <task2A+0x2e0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	22fa      	movs	r2, #250	; 0xfa
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <task2A+0x2dc>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cd8:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 400);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <task2A+0x2dc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c
					delay(1);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f7ff fdc3 	bl	8001870 <delay>
				while(actualAngle > 0){
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <task2A+0x314>)
 8001cec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	f7fe ff0e 	bl	8000b18 <__aeabi_dcmpgt>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1df      	bne.n	8001cc2 <task2A+0x29a>
 8001d02:	e04a      	b.n	8001d9a <task2A+0x372>
 8001d04:	20000378 	.word	0x20000378
 8001d08:	20000258 	.word	0x20000258
 8001d0c:	40020000 	.word	0x40020000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40020800 	.word	0x40020800
 8001d18:	20000414 	.word	0x20000414
 8001d1c:	20000418 	.word	0x20000418
 8001d20:	08014768 	.word	0x08014768
 8001d24:	42700000 	.word	0x42700000
 8001d28:	20000416 	.word	0x20000416
 8001d2c:	c02e0000 	.word	0xc02e0000
 8001d30:	20000444 	.word	0x20000444
 8001d34:	42680000 	.word	0x42680000
 8001d38:	40390000 	.word	0x40390000
 8001d3c:	20000420 	.word	0x20000420
				}
			}
			else if(actualAngle < 0) {
 8001d40:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <task2A+0x3bc>)
 8001d42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	f7fe fec5 	bl	8000adc <__aeabi_dcmplt>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <task2A+0x372>
				while(actualAngle < 0) {
 8001d58:	e013      	b.n	8001d82 <task2A+0x35a>
					moving = 1;
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <task2A+0x3c0>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]
					htim1.Instance -> CCR4 = LEFT;
 8001d60:	4b22      	ldr	r3, [pc, #136]	; (8001dec <task2A+0x3c4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2269      	movs	r2, #105	; 0x69
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 400);
 8001d68:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <task2A+0x3c8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001d70:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <task2A+0x3c8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d7a:	63da      	str	r2, [r3, #60]	; 0x3c
					delay(1);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff fd77 	bl	8001870 <delay>
				while(actualAngle < 0) {
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <task2A+0x3bc>)
 8001d84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	f7fe fea4 	bl	8000adc <__aeabi_dcmplt>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1df      	bne.n	8001d5a <task2A+0x332>
				}
			}
 		}

		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <task2A+0x3c8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <task2A+0x3c8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2200      	movs	r2, #0
 8001da8:	63da      	str	r2, [r3, #60]	; 0x3c
		htim1.Instance -> CCR4 = STRAIGHT;
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <task2A+0x3c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2295      	movs	r2, #149	; 0x95
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001db2:	2201      	movs	r2, #1
 8001db4:	2108      	movs	r1, #8
 8001db6:	480f      	ldr	r0, [pc, #60]	; (8001df4 <task2A+0x3cc>)
 8001db8:	f005 fc80 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	480c      	ldr	r0, [pc, #48]	; (8001df4 <task2A+0x3cc>)
 8001dc2:	f005 fc7b 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dcc:	480a      	ldr	r0, [pc, #40]	; (8001df8 <task2A+0x3d0>)
 8001dce:	f005 fc75 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2120      	movs	r1, #32
 8001dd6:	4809      	ldr	r0, [pc, #36]	; (8001dfc <task2A+0x3d4>)
 8001dd8:	f005 fc70 	bl	80076bc <HAL_GPIO_WritePin>
}
 8001ddc:	bf00      	nop
 8001dde:	3780      	adds	r7, #128	; 0x80
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000420 	.word	0x20000420
 8001de8:	20000414 	.word	0x20000414
 8001dec:	20000258 	.word	0x20000258
 8001df0:	20000378 	.word	0x20000378
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40020800 	.word	0x40020800

08001e00 <task2A2>:

void task2A2(uint32_t data)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0a0      	sub	sp, #128	; 0x80
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	uint32_t offset_show[30];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	48ac      	ldr	r0, [pc, #688]	; (80020bc <task2A2+0x2bc>)
 8001e0c:	f008 fd0c 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001e10:	2108      	movs	r1, #8
 8001e12:	48aa      	ldr	r0, [pc, #680]	; (80020bc <task2A2+0x2bc>)
 8001e14:	f008 fd08 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001e18:	210c      	movs	r1, #12
 8001e1a:	48a9      	ldr	r0, [pc, #676]	; (80020c0 <task2A2+0x2c0>)
 8001e1c:	f008 fd04 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	2108      	movs	r1, #8
 8001e24:	48a7      	ldr	r0, [pc, #668]	; (80020c4 <task2A2+0x2c4>)
 8001e26:	f005 fc49 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	48a5      	ldr	r0, [pc, #660]	; (80020c4 <task2A2+0x2c4>)
 8001e30:	f005 fc44 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8001e34:	2201      	movs	r2, #1
 8001e36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e3a:	48a3      	ldr	r0, [pc, #652]	; (80020c8 <task2A2+0x2c8>)
 8001e3c:	f005 fc3e 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2120      	movs	r1, #32
 8001e44:	48a1      	ldr	r0, [pc, #644]	; (80020cc <task2A2+0x2cc>)
 8001e46:	f005 fc39 	bl	80076bc <HAL_GPIO_WritePin>
	moving = 0;
 8001e4a:	4ba1      	ldr	r3, [pc, #644]	; (80020d0 <task2A2+0x2d0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]

	if(continueMoving){
 8001e50:	4ba0      	ldr	r3, [pc, #640]	; (80020d4 <task2A2+0x2d4>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 81c3 	beq.w	80021e0 <task2A2+0x3e0>
		//if picture detected is left Tln
		if (data == 'l')
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b6c      	cmp	r3, #108	; 0x6c
 8001e5e:	f040 80d2 	bne.w	8002006 <task2A2+0x206>
		{
			htim1.Instance -> CCR4 = 105;
 8001e62:	4b97      	ldr	r3, [pc, #604]	; (80020c0 <task2A2+0x2c0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2269      	movs	r2, #105	; 0x69
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001e6a:	4b94      	ldr	r3, [pc, #592]	; (80020bc <task2A2+0x2bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e72:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8001e74:	4b91      	ldr	r3, [pc, #580]	; (80020bc <task2A2+0x2bc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e7c:	63da      	str	r2, [r3, #60]	; 0x3c
			 moving = 1;
 8001e7e:	4b94      	ldr	r3, [pc, #592]	; (80020d0 <task2A2+0x2d0>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
			 while (moving)
 8001e84:	e020      	b.n	8001ec8 <task2A2+0xc8>
			 {
				 if ((int)actualAngle >= 60) // was 65
 8001e86:	4b94      	ldr	r3, [pc, #592]	; (80020d8 <task2A2+0x2d8>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7fe fe62 	bl	8000b58 <__aeabi_d2iz>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b3b      	cmp	r3, #59	; 0x3b
 8001e98:	dc1b      	bgt.n	8001ed2 <task2A2+0xd2>
				 {
					break;
				 }
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8001e9a:	4b90      	ldr	r3, [pc, #576]	; (80020dc <task2A2+0x2dc>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7fe fe58 	bl	8000b58 <__aeabi_d2iz>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	498c      	ldr	r1, [pc, #560]	; (80020e0 <task2A2+0x2e0>)
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f00e fe4b 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2114      	movs	r1, #20
 8001ebe:	200a      	movs	r0, #10
 8001ec0:	f004 fad6 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8001ec4:	f004 f960 	bl	8006188 <OLED_Refresh_Gram>
			 while (moving)
 8001ec8:	4b81      	ldr	r3, [pc, #516]	; (80020d0 <task2A2+0x2d0>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1da      	bne.n	8001e86 <task2A2+0x86>
 8001ed0:	e000      	b.n	8001ed4 <task2A2+0xd4>
					break;
 8001ed2:	bf00      	nop
			 }
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001ed4:	4b79      	ldr	r3, [pc, #484]	; (80020bc <task2A2+0x2bc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8001edc:	4b77      	ldr	r3, [pc, #476]	; (80020bc <task2A2+0x2bc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(85,1);
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 80020e4 <task2A2+0x2e4>
 8001eea:	f001 ff99 	bl	8003e20 <moveGyroPID>
			htim1.Instance -> CCR4 = RIGHT;
 8001eee:	4b74      	ldr	r3, [pc, #464]	; (80020c0 <task2A2+0x2c0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	22fa      	movs	r2, #250	; 0xfa
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001ef6:	4b71      	ldr	r3, [pc, #452]	; (80020bc <task2A2+0x2bc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001efe:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001f00:	4b6e      	ldr	r3, [pc, #440]	; (80020bc <task2A2+0x2bc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f08:	63da      	str	r2, [r3, #60]	; 0x3c
	// 		continueMoving = 0;

			while (moving)
 8001f0a:	e021      	b.n	8001f50 <task2A2+0x150>
			{
				if ((int)actualAngle <= -83)
 8001f0c:	4b72      	ldr	r3, [pc, #456]	; (80020d8 <task2A2+0x2d8>)
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f7fe fe1f 	bl	8000b58 <__aeabi_d2iz>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f113 0f52 	cmn.w	r3, #82	; 0x52
 8001f20:	db1b      	blt.n	8001f5a <task2A2+0x15a>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8001f22:	4b6e      	ldr	r3, [pc, #440]	; (80020dc <task2A2+0x2dc>)
 8001f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fe14 	bl	8000b58 <__aeabi_d2iz>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f107 0308 	add.w	r3, r7, #8
 8001f36:	496a      	ldr	r1, [pc, #424]	; (80020e0 <task2A2+0x2e0>)
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f00e fe07 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8001f3e:	f107 0308 	add.w	r3, r7, #8
 8001f42:	461a      	mov	r2, r3
 8001f44:	2114      	movs	r1, #20
 8001f46:	200a      	movs	r0, #10
 8001f48:	f004 fa92 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8001f4c:	f004 f91c 	bl	8006188 <OLED_Refresh_Gram>
			while (moving)
 8001f50:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <task2A2+0x2d0>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1d9      	bne.n	8001f0c <task2A2+0x10c>
 8001f58:	e000      	b.n	8001f5c <task2A2+0x15c>
					break;
 8001f5a:	bf00      	nop
			 }

			 moving = 0;
 8001f5c:	4b5c      	ldr	r3, [pc, #368]	; (80020d0 <task2A2+0x2d0>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
			 moveGyroPIDOld(52.0,1); // 50.0 for indoors
 8001f62:	2001      	movs	r0, #1
 8001f64:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80020e8 <task2A2+0x2e8>
 8001f68:	f002 fa72 	bl	8004450 <moveGyroPIDOld>
			 moving = 0;
 8001f6c:	4b58      	ldr	r3, [pc, #352]	; (80020d0 <task2A2+0x2d0>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
			htim1.Instance -> CCR4 = RIGHT;
 8001f72:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <task2A2+0x2c0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	22fa      	movs	r2, #250	; 0xfa
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001f7a:	4b50      	ldr	r3, [pc, #320]	; (80020bc <task2A2+0x2bc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f82:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001f84:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <task2A2+0x2bc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f8c:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8001f8e:	2064      	movs	r0, #100	; 0x64
 8001f90:	f7ff fc6e 	bl	8001870 <delay>
			moving = 1;
 8001f94:	4b4e      	ldr	r3, [pc, #312]	; (80020d0 <task2A2+0x2d0>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
			while (moving)
 8001f9a:	e021      	b.n	8001fe0 <task2A2+0x1e0>
			{
				if ((int)totalAngle <= -100) //MAYBE 105 for indoors, 100 for outdoors?
 8001f9c:	4b4f      	ldr	r3, [pc, #316]	; (80020dc <task2A2+0x2dc>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fdd7 	bl	8000b58 <__aeabi_d2iz>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001fb0:	db1b      	blt.n	8001fea <task2A2+0x1ea>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	; (80020dc <task2A2+0x2dc>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7fe fdcc 	bl	8000b58 <__aeabi_d2iz>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f107 0308 	add.w	r3, r7, #8
 8001fc6:	4946      	ldr	r1, [pc, #280]	; (80020e0 <task2A2+0x2e0>)
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f00e fdbf 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2114      	movs	r1, #20
 8001fd6:	200a      	movs	r0, #10
 8001fd8:	f004 fa4a 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8001fdc:	f004 f8d4 	bl	8006188 <OLED_Refresh_Gram>
			while (moving)
 8001fe0:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <task2A2+0x2d0>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1d9      	bne.n	8001f9c <task2A2+0x19c>
 8001fe8:	e000      	b.n	8001fec <task2A2+0x1ec>
					break;
 8001fea:	bf00      	nop
			 }
			actualAngle = 0;
 8001fec:	493a      	ldr	r1, [pc, #232]	; (80020d8 <task2A2+0x2d8>)
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	e9c1 2300 	strd	r2, r3, [r1]
			moving=0;
 8001ffa:	4b35      	ldr	r3, [pc, #212]	; (80020d0 <task2A2+0x2d0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 8002000:	f001 fafa 	bl	80035f8 <moveUltraEndLeft>
 8002004:	e2b9      	b.n	800257a <task2A2+0x77a>

		}
		else if (data == 'r')
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b72      	cmp	r3, #114	; 0x72
 800200a:	f040 82b6 	bne.w	800257a <task2A2+0x77a>
		{
			htim1.Instance -> CCR4 = RIGHT;
 800200e:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <task2A2+0x2c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	22fa      	movs	r2, #250	; 0xfa
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002016:	4b29      	ldr	r3, [pc, #164]	; (80020bc <task2A2+0x2bc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800201e:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <task2A2+0x2bc>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002028:	63da      	str	r2, [r3, #60]	; 0x3c
			 moving = 1;
 800202a:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <task2A2+0x2d0>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
			 while (moving)
 8002030:	e021      	b.n	8002076 <task2A2+0x276>
			 {
				 if ((int)totalAngle <= -1*40) // was 55. was 48. was 43.
 8002032:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <task2A2+0x2dc>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f7fe fd8c 	bl	8000b58 <__aeabi_d2iz>
 8002040:	4603      	mov	r3, r0
 8002042:	f113 0f27 	cmn.w	r3, #39	; 0x27
 8002046:	db1b      	blt.n	8002080 <task2A2+0x280>
				 {
					break;
				 }
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <task2A2+0x2dc>)
 800204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	f7fe fd81 	bl	8000b58 <__aeabi_d2iz>
 8002056:	4602      	mov	r2, r0
 8002058:	f107 0308 	add.w	r3, r7, #8
 800205c:	4920      	ldr	r1, [pc, #128]	; (80020e0 <task2A2+0x2e0>)
 800205e:	4618      	mov	r0, r3
 8002060:	f00e fd74 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002064:	f107 0308 	add.w	r3, r7, #8
 8002068:	461a      	mov	r2, r3
 800206a:	2114      	movs	r1, #20
 800206c:	200a      	movs	r0, #10
 800206e:	f004 f9ff 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002072:	f004 f889 	bl	8006188 <OLED_Refresh_Gram>
			 while (moving)
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <task2A2+0x2d0>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1d9      	bne.n	8002032 <task2A2+0x232>
 800207e:	e000      	b.n	8002082 <task2A2+0x282>
					break;
 8002080:	bf00      	nop
			 }
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <task2A2+0x2bc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2200      	movs	r2, #0
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <task2A2+0x2bc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2200      	movs	r2, #0
 8002090:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(45.0,1);
 8002092:	2001      	movs	r0, #1
 8002094:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80020ec <task2A2+0x2ec>
 8002098:	f001 fec2 	bl	8003e20 <moveGyroPID>
			htim1.Instance -> CCR4 = 110;
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <task2A2+0x2c0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	226e      	movs	r2, #110	; 0x6e
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <task2A2+0x2bc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ac:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 80020ae:	4b03      	ldr	r3, [pc, #12]	; (80020bc <task2A2+0x2bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80020b6:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving)
 80020b8:	e03b      	b.n	8002132 <task2A2+0x332>
 80020ba:	bf00      	nop
 80020bc:	20000378 	.word	0x20000378
 80020c0:	20000258 	.word	0x20000258
 80020c4:	40020000 	.word	0x40020000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40020800 	.word	0x40020800
 80020d0:	20000414 	.word	0x20000414
 80020d4:	20000416 	.word	0x20000416
 80020d8:	20000420 	.word	0x20000420
 80020dc:	20000418 	.word	0x20000418
 80020e0:	08014768 	.word	0x08014768
 80020e4:	42aa0000 	.word	0x42aa0000
 80020e8:	42500000 	.word	0x42500000
 80020ec:	42340000 	.word	0x42340000
			{
				if ((int)actualAngle >= 85)
 80020f0:	4bae      	ldr	r3, [pc, #696]	; (80023ac <task2A2+0x5ac>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f7fe fd2d 	bl	8000b58 <__aeabi_d2iz>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b54      	cmp	r3, #84	; 0x54
 8002102:	dc1b      	bgt.n	800213c <task2A2+0x33c>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002104:	4baa      	ldr	r3, [pc, #680]	; (80023b0 <task2A2+0x5b0>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f7fe fd23 	bl	8000b58 <__aeabi_d2iz>
 8002112:	4602      	mov	r2, r0
 8002114:	f107 0308 	add.w	r3, r7, #8
 8002118:	49a6      	ldr	r1, [pc, #664]	; (80023b4 <task2A2+0x5b4>)
 800211a:	4618      	mov	r0, r3
 800211c:	f00e fd16 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	461a      	mov	r2, r3
 8002126:	2114      	movs	r1, #20
 8002128:	200a      	movs	r0, #10
 800212a:	f004 f9a1 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 800212e:	f004 f82b 	bl	8006188 <OLED_Refresh_Gram>
			while (moving)
 8002132:	4ba1      	ldr	r3, [pc, #644]	; (80023b8 <task2A2+0x5b8>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1da      	bne.n	80020f0 <task2A2+0x2f0>
 800213a:	e000      	b.n	800213e <task2A2+0x33e>
					break;
 800213c:	bf00      	nop
			 }
			moving = 0;
 800213e:	4b9e      	ldr	r3, [pc, #632]	; (80023b8 <task2A2+0x5b8>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(50.0,1); // prev 23
 8002144:	2001      	movs	r0, #1
 8002146:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80023bc <task2A2+0x5bc>
 800214a:	f002 f981 	bl	8004450 <moveGyroPIDOld>
			moving = 0;
 800214e:	4b9a      	ldr	r3, [pc, #616]	; (80023b8 <task2A2+0x5b8>)
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
			htim1.Instance -> CCR4 = 115;
 8002154:	4b9a      	ldr	r3, [pc, #616]	; (80023c0 <task2A2+0x5c0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2273      	movs	r2, #115	; 0x73
 800215a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 800215c:	4b99      	ldr	r3, [pc, #612]	; (80023c4 <task2A2+0x5c4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002164:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8002166:	4b97      	ldr	r3, [pc, #604]	; (80023c4 <task2A2+0x5c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800216e:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8002170:	2064      	movs	r0, #100	; 0x64
 8002172:	f7ff fb7d 	bl	8001870 <delay>
			moving = 1;
 8002176:	4b90      	ldr	r3, [pc, #576]	; (80023b8 <task2A2+0x5b8>)
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
			while (moving)
 800217c:	e020      	b.n	80021c0 <task2A2+0x3c0>
			{
				if ((int)totalAngle >= 93) // 93 is too big for outdoors. changing to 88
 800217e:	4b8c      	ldr	r3, [pc, #560]	; (80023b0 <task2A2+0x5b0>)
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f7fe fce6 	bl	8000b58 <__aeabi_d2iz>
 800218c:	4603      	mov	r3, r0
 800218e:	2b5c      	cmp	r3, #92	; 0x5c
 8002190:	dc1b      	bgt.n	80021ca <task2A2+0x3ca>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002192:	4b87      	ldr	r3, [pc, #540]	; (80023b0 <task2A2+0x5b0>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	f7fe fcdc 	bl	8000b58 <__aeabi_d2iz>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f107 0308 	add.w	r3, r7, #8
 80021a6:	4983      	ldr	r1, [pc, #524]	; (80023b4 <task2A2+0x5b4>)
 80021a8:	4618      	mov	r0, r3
 80021aa:	f00e fccf 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	461a      	mov	r2, r3
 80021b4:	2114      	movs	r1, #20
 80021b6:	200a      	movs	r0, #10
 80021b8:	f004 f95a 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 80021bc:	f003 ffe4 	bl	8006188 <OLED_Refresh_Gram>
			while (moving)
 80021c0:	4b7d      	ldr	r3, [pc, #500]	; (80023b8 <task2A2+0x5b8>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1da      	bne.n	800217e <task2A2+0x37e>
 80021c8:	e000      	b.n	80021cc <task2A2+0x3cc>
					break;
 80021ca:	bf00      	nop
			 }
			actualAngle = 0;
 80021cc:	4977      	ldr	r1, [pc, #476]	; (80023ac <task2A2+0x5ac>)
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 80021da:	f000 fffd 	bl	80031d8 <moveUltraEnd>
 80021de:	e1cc      	b.n	800257a <task2A2+0x77a>
		}
	}else{
		 // meaning continueMoving is 0, indicating that the car
		 // stopped because ultrasonic distance hit before target angle hit
		//if picture detected is left Tln
		if (data == 'l')
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b6c      	cmp	r3, #108	; 0x6c
 80021e4:	f040 80f2 	bne.w	80023cc <task2A2+0x5cc>
		{
			htim1.Instance -> CCR4 = 105;
 80021e8:	4b75      	ldr	r3, [pc, #468]	; (80023c0 <task2A2+0x5c0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2269      	movs	r2, #105	; 0x69
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 80021f0:	4b74      	ldr	r3, [pc, #464]	; (80023c4 <task2A2+0x5c4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021f8:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 80021fa:	4b72      	ldr	r3, [pc, #456]	; (80023c4 <task2A2+0x5c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002202:	63da      	str	r2, [r3, #60]	; 0x3c
			 moving = 0;
 8002204:	4b6c      	ldr	r3, [pc, #432]	; (80023b8 <task2A2+0x5b8>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
			 osDelay(1);
 800220a:	2001      	movs	r0, #1
 800220c:	f00b f8bf 	bl	800d38e <osDelay>
			 moving = 1;
 8002210:	4b69      	ldr	r3, [pc, #420]	; (80023b8 <task2A2+0x5b8>)
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
			 while (moving)
 8002216:	e020      	b.n	800225a <task2A2+0x45a>
			 {
				 if ((int)actualAngle >= 55)
 8002218:	4b64      	ldr	r3, [pc, #400]	; (80023ac <task2A2+0x5ac>)
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	f7fe fc99 	bl	8000b58 <__aeabi_d2iz>
 8002226:	4603      	mov	r3, r0
 8002228:	2b36      	cmp	r3, #54	; 0x36
 800222a:	dc1b      	bgt.n	8002264 <task2A2+0x464>
				 {
					break;
				 }
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 800222c:	4b60      	ldr	r3, [pc, #384]	; (80023b0 <task2A2+0x5b0>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f7fe fc8f 	bl	8000b58 <__aeabi_d2iz>
 800223a:	4602      	mov	r2, r0
 800223c:	f107 0308 	add.w	r3, r7, #8
 8002240:	495c      	ldr	r1, [pc, #368]	; (80023b4 <task2A2+0x5b4>)
 8002242:	4618      	mov	r0, r3
 8002244:	f00e fc82 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002248:	f107 0308 	add.w	r3, r7, #8
 800224c:	461a      	mov	r2, r3
 800224e:	2114      	movs	r1, #20
 8002250:	200a      	movs	r0, #10
 8002252:	f004 f90d 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002256:	f003 ff97 	bl	8006188 <OLED_Refresh_Gram>
			 while (moving)
 800225a:	4b57      	ldr	r3, [pc, #348]	; (80023b8 <task2A2+0x5b8>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1da      	bne.n	8002218 <task2A2+0x418>
 8002262:	e000      	b.n	8002266 <task2A2+0x466>
					break;
 8002264:	bf00      	nop
			 }
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002266:	4b57      	ldr	r3, [pc, #348]	; (80023c4 <task2A2+0x5c4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2200      	movs	r2, #0
 800226c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800226e:	4b55      	ldr	r3, [pc, #340]	; (80023c4 <task2A2+0x5c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2200      	movs	r2, #0
 8002274:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 0;
 8002276:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <task2A2+0x5b8>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(60,1);
 800227c:	2001      	movs	r0, #1
 800227e:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80023c8 <task2A2+0x5c8>
 8002282:	f002 f8e5 	bl	8004450 <moveGyroPIDOld>
//			moveGyroPID(85,1);
			htim1.Instance -> CCR4 = RIGHT;
 8002286:	4b4e      	ldr	r3, [pc, #312]	; (80023c0 <task2A2+0x5c0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	22fa      	movs	r2, #250	; 0xfa
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 800228e:	4b4d      	ldr	r3, [pc, #308]	; (80023c4 <task2A2+0x5c4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002296:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002298:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <task2A2+0x5c4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022a0:	63da      	str	r2, [r3, #60]	; 0x3c

			while (moving)
 80022a2:	e021      	b.n	80022e8 <task2A2+0x4e8>
			{
				if ((int)actualAngle <= -85)
 80022a4:	4b41      	ldr	r3, [pc, #260]	; (80023ac <task2A2+0x5ac>)
 80022a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7fe fc53 	bl	8000b58 <__aeabi_d2iz>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80022b8:	db1b      	blt.n	80022f2 <task2A2+0x4f2>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <task2A2+0x5b0>)
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f7fe fc48 	bl	8000b58 <__aeabi_d2iz>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f107 0308 	add.w	r3, r7, #8
 80022ce:	4939      	ldr	r1, [pc, #228]	; (80023b4 <task2A2+0x5b4>)
 80022d0:	4618      	mov	r0, r3
 80022d2:	f00e fc3b 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	461a      	mov	r2, r3
 80022dc:	2114      	movs	r1, #20
 80022de:	200a      	movs	r0, #10
 80022e0:	f004 f8c6 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 80022e4:	f003 ff50 	bl	8006188 <OLED_Refresh_Gram>
			while (moving)
 80022e8:	4b33      	ldr	r3, [pc, #204]	; (80023b8 <task2A2+0x5b8>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1d9      	bne.n	80022a4 <task2A2+0x4a4>
 80022f0:	e000      	b.n	80022f4 <task2A2+0x4f4>
					break;
 80022f2:	bf00      	nop
			 }

			 moving = 0;
 80022f4:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <task2A2+0x5b8>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
			 moveGyroPIDOld(50.0,1); // was 60
 80022fa:	2001      	movs	r0, #1
 80022fc:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80023bc <task2A2+0x5bc>
 8002300:	f002 f8a6 	bl	8004450 <moveGyroPIDOld>
			 moving = 0;
 8002304:	4b2c      	ldr	r3, [pc, #176]	; (80023b8 <task2A2+0x5b8>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
			htim1.Instance -> CCR4 = RIGHT;
 800230a:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <task2A2+0x5c0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	22fa      	movs	r2, #250	; 0xfa
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002312:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <task2A2+0x5c4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800231a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 800231c:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <task2A2+0x5c4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002324:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8002326:	2064      	movs	r0, #100	; 0x64
 8002328:	f7ff faa2 	bl	8001870 <delay>
			moving=0;
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <task2A2+0x5b8>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
			osDelay(1);
 8002332:	2001      	movs	r0, #1
 8002334:	f00b f82b 	bl	800d38e <osDelay>
			moving = 1;
 8002338:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <task2A2+0x5b8>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
			while (moving)
 800233e:	e021      	b.n	8002384 <task2A2+0x584>
			{
				if ((int)totalAngle <= -102) //MAYBE 105 for indoors, 100 for outdoors?
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <task2A2+0x5b0>)
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f7fe fc05 	bl	8000b58 <__aeabi_d2iz>
 800234e:	4603      	mov	r3, r0
 8002350:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8002354:	db1b      	blt.n	800238e <task2A2+0x58e>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <task2A2+0x5b0>)
 8002358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f7fe fbfa 	bl	8000b58 <__aeabi_d2iz>
 8002364:	4602      	mov	r2, r0
 8002366:	f107 0308 	add.w	r3, r7, #8
 800236a:	4912      	ldr	r1, [pc, #72]	; (80023b4 <task2A2+0x5b4>)
 800236c:	4618      	mov	r0, r3
 800236e:	f00e fbed 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002372:	f107 0308 	add.w	r3, r7, #8
 8002376:	461a      	mov	r2, r3
 8002378:	2114      	movs	r1, #20
 800237a:	200a      	movs	r0, #10
 800237c:	f004 f878 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002380:	f003 ff02 	bl	8006188 <OLED_Refresh_Gram>
			while (moving)
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <task2A2+0x5b8>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1d9      	bne.n	8002340 <task2A2+0x540>
 800238c:	e000      	b.n	8002390 <task2A2+0x590>
					break;
 800238e:	bf00      	nop
			 }
			actualAngle = 0;
 8002390:	4906      	ldr	r1, [pc, #24]	; (80023ac <task2A2+0x5ac>)
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	e9c1 2300 	strd	r2, r3, [r1]
			moving = 0;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <task2A2+0x5b8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 80023a4:	f001 f928 	bl	80035f8 <moveUltraEndLeft>
 80023a8:	e0e7      	b.n	800257a <task2A2+0x77a>
 80023aa:	bf00      	nop
 80023ac:	20000420 	.word	0x20000420
 80023b0:	20000418 	.word	0x20000418
 80023b4:	08014768 	.word	0x08014768
 80023b8:	20000414 	.word	0x20000414
 80023bc:	42480000 	.word	0x42480000
 80023c0:	20000258 	.word	0x20000258
 80023c4:	20000378 	.word	0x20000378
 80023c8:	42700000 	.word	0x42700000

		}
		else if (data == 'r')
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b72      	cmp	r3, #114	; 0x72
 80023d0:	f040 80d3 	bne.w	800257a <task2A2+0x77a>
		{
			htim1.Instance -> CCR4 = RIGHT;
 80023d4:	4b7b      	ldr	r3, [pc, #492]	; (80025c4 <task2A2+0x7c4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	22fa      	movs	r2, #250	; 0xfa
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 80023dc:	4b7a      	ldr	r3, [pc, #488]	; (80025c8 <task2A2+0x7c8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80023e4:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 80023e6:	4b78      	ldr	r3, [pc, #480]	; (80025c8 <task2A2+0x7c8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023ee:	63da      	str	r2, [r3, #60]	; 0x3c
			 moving = 1;
 80023f0:	4b76      	ldr	r3, [pc, #472]	; (80025cc <task2A2+0x7cc>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
			 while (moving)
 80023f6:	e021      	b.n	800243c <task2A2+0x63c>
			 {
				 if ((int)totalAngle <= -1*22)
 80023f8:	4b75      	ldr	r3, [pc, #468]	; (80025d0 <task2A2+0x7d0>)
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	f7fe fba9 	bl	8000b58 <__aeabi_d2iz>
 8002406:	4603      	mov	r3, r0
 8002408:	f113 0f15 	cmn.w	r3, #21
 800240c:	db1b      	blt.n	8002446 <task2A2+0x646>
				 {
					break;
				 }
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 800240e:	4b70      	ldr	r3, [pc, #448]	; (80025d0 <task2A2+0x7d0>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	f7fe fb9e 	bl	8000b58 <__aeabi_d2iz>
 800241c:	4602      	mov	r2, r0
 800241e:	f107 0308 	add.w	r3, r7, #8
 8002422:	496c      	ldr	r1, [pc, #432]	; (80025d4 <task2A2+0x7d4>)
 8002424:	4618      	mov	r0, r3
 8002426:	f00e fb91 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 800242a:	f107 0308 	add.w	r3, r7, #8
 800242e:	461a      	mov	r2, r3
 8002430:	2114      	movs	r1, #20
 8002432:	200a      	movs	r0, #10
 8002434:	f004 f81c 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002438:	f003 fea6 	bl	8006188 <OLED_Refresh_Gram>
			 while (moving)
 800243c:	4b63      	ldr	r3, [pc, #396]	; (80025cc <task2A2+0x7cc>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1d9      	bne.n	80023f8 <task2A2+0x5f8>
 8002444:	e000      	b.n	8002448 <task2A2+0x648>
					break;
 8002446:	bf00      	nop
			 }
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002448:	4b5f      	ldr	r3, [pc, #380]	; (80025c8 <task2A2+0x7c8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2200      	movs	r2, #0
 800244e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002450:	4b5d      	ldr	r3, [pc, #372]	; (80025c8 <task2A2+0x7c8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2200      	movs	r2, #0
 8002456:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(75.0,1);
 8002458:	2001      	movs	r0, #1
 800245a:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 80025d8 <task2A2+0x7d8>
 800245e:	f001 fcdf 	bl	8003e20 <moveGyroPID>
			htim1.Instance -> CCR4 = 110;
 8002462:	4b58      	ldr	r3, [pc, #352]	; (80025c4 <task2A2+0x7c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	226e      	movs	r2, #110	; 0x6e
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 800246a:	4b57      	ldr	r3, [pc, #348]	; (80025c8 <task2A2+0x7c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002472:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 8002474:	4b54      	ldr	r3, [pc, #336]	; (80025c8 <task2A2+0x7c8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800247c:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving)
 800247e:	e020      	b.n	80024c2 <task2A2+0x6c2>
			{
				if ((int)actualAngle >= 85)
 8002480:	4b56      	ldr	r3, [pc, #344]	; (80025dc <task2A2+0x7dc>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	f7fe fb65 	bl	8000b58 <__aeabi_d2iz>
 800248e:	4603      	mov	r3, r0
 8002490:	2b54      	cmp	r3, #84	; 0x54
 8002492:	dc1b      	bgt.n	80024cc <task2A2+0x6cc>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002494:	4b4e      	ldr	r3, [pc, #312]	; (80025d0 <task2A2+0x7d0>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	f7fe fb5b 	bl	8000b58 <__aeabi_d2iz>
 80024a2:	4602      	mov	r2, r0
 80024a4:	f107 0308 	add.w	r3, r7, #8
 80024a8:	494a      	ldr	r1, [pc, #296]	; (80025d4 <task2A2+0x7d4>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00e fb4e 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 80024b0:	f107 0308 	add.w	r3, r7, #8
 80024b4:	461a      	mov	r2, r3
 80024b6:	2114      	movs	r1, #20
 80024b8:	200a      	movs	r0, #10
 80024ba:	f003 ffd9 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 80024be:	f003 fe63 	bl	8006188 <OLED_Refresh_Gram>
			while (moving)
 80024c2:	4b42      	ldr	r3, [pc, #264]	; (80025cc <task2A2+0x7cc>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1da      	bne.n	8002480 <task2A2+0x680>
 80024ca:	e000      	b.n	80024ce <task2A2+0x6ce>
					break;
 80024cc:	bf00      	nop
			 }
			moving = 0;
 80024ce:	4b3f      	ldr	r3, [pc, #252]	; (80025cc <task2A2+0x7cc>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(45.0,1); // prev 23
 80024d4:	2001      	movs	r0, #1
 80024d6:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80025e0 <task2A2+0x7e0>
 80024da:	f001 ffb9 	bl	8004450 <moveGyroPIDOld>
			moving = 0;
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <task2A2+0x7cc>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
			htim1.Instance -> CCR4 = 115;
 80024e4:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <task2A2+0x7c4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2273      	movs	r2, #115	; 0x73
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 80024ec:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <task2A2+0x7c8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 80024f6:	4b34      	ldr	r3, [pc, #208]	; (80025c8 <task2A2+0x7c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80024fe:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8002500:	2064      	movs	r0, #100	; 0x64
 8002502:	f7ff f9b5 	bl	8001870 <delay>
			moving = 0;
 8002506:	4b31      	ldr	r3, [pc, #196]	; (80025cc <task2A2+0x7cc>)
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
			osDelay(1);
 800250c:	2001      	movs	r0, #1
 800250e:	f00a ff3e 	bl	800d38e <osDelay>
			moving = 1;
 8002512:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <task2A2+0x7cc>)
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
			while (moving)
 8002518:	e020      	b.n	800255c <task2A2+0x75c>
			{
				if ((int)totalAngle >= 105)
 800251a:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <task2A2+0x7d0>)
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	f7fe fb18 	bl	8000b58 <__aeabi_d2iz>
 8002528:	4603      	mov	r3, r0
 800252a:	2b68      	cmp	r3, #104	; 0x68
 800252c:	dc1b      	bgt.n	8002566 <task2A2+0x766>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 800252e:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <task2A2+0x7d0>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	f7fe fb0e 	bl	8000b58 <__aeabi_d2iz>
 800253c:	4602      	mov	r2, r0
 800253e:	f107 0308 	add.w	r3, r7, #8
 8002542:	4924      	ldr	r1, [pc, #144]	; (80025d4 <task2A2+0x7d4>)
 8002544:	4618      	mov	r0, r3
 8002546:	f00e fb01 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 800254a:	f107 0308 	add.w	r3, r7, #8
 800254e:	461a      	mov	r2, r3
 8002550:	2114      	movs	r1, #20
 8002552:	200a      	movs	r0, #10
 8002554:	f003 ff8c 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002558:	f003 fe16 	bl	8006188 <OLED_Refresh_Gram>
			while (moving)
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <task2A2+0x7cc>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1da      	bne.n	800251a <task2A2+0x71a>
 8002564:	e000      	b.n	8002568 <task2A2+0x768>
					break;
 8002566:	bf00      	nop
			 }
			actualAngle = 0;
 8002568:	491c      	ldr	r1, [pc, #112]	; (80025dc <task2A2+0x7dc>)
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 8002576:	f000 fe2f 	bl	80031d8 <moveUltraEnd>
		}
	}

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <task2A2+0x7c8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2200      	movs	r2, #0
 8002580:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <task2A2+0x7c8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance -> CCR4 = STRAIGHT;
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <task2A2+0x7c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2295      	movs	r2, #149	; 0x95
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002592:	2201      	movs	r2, #1
 8002594:	2108      	movs	r1, #8
 8002596:	4813      	ldr	r0, [pc, #76]	; (80025e4 <task2A2+0x7e4>)
 8002598:	f005 f890 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800259c:	2200      	movs	r2, #0
 800259e:	2104      	movs	r1, #4
 80025a0:	4810      	ldr	r0, [pc, #64]	; (80025e4 <task2A2+0x7e4>)
 80025a2:	f005 f88b 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80025a6:	2201      	movs	r2, #1
 80025a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025ac:	480e      	ldr	r0, [pc, #56]	; (80025e8 <task2A2+0x7e8>)
 80025ae:	f005 f885 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2120      	movs	r1, #32
 80025b6:	480d      	ldr	r0, [pc, #52]	; (80025ec <task2A2+0x7ec>)
 80025b8:	f005 f880 	bl	80076bc <HAL_GPIO_WritePin>
}
 80025bc:	bf00      	nop
 80025be:	3780      	adds	r7, #128	; 0x80
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000258 	.word	0x20000258
 80025c8:	20000378 	.word	0x20000378
 80025cc:	20000414 	.word	0x20000414
 80025d0:	20000418 	.word	0x20000418
 80025d4:	08014768 	.word	0x08014768
 80025d8:	42960000 	.word	0x42960000
 80025dc:	20000420 	.word	0x20000420
 80025e0:	42340000 	.word	0x42340000
 80025e4:	40020000 	.word	0x40020000
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40020800 	.word	0x40020800

080025f0 <task2A2L>:

// 2nd obstacle after turning left
void task2A2L(uint32_t data)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b0a0      	sub	sp, #128	; 0x80
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	uint32_t offset_show[30];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80025f8:	2100      	movs	r1, #0
 80025fa:	48ac      	ldr	r0, [pc, #688]	; (80028ac <task2A2L+0x2bc>)
 80025fc:	f008 f914 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002600:	2108      	movs	r1, #8
 8002602:	48aa      	ldr	r0, [pc, #680]	; (80028ac <task2A2L+0x2bc>)
 8002604:	f008 f910 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002608:	210c      	movs	r1, #12
 800260a:	48a9      	ldr	r0, [pc, #676]	; (80028b0 <task2A2L+0x2c0>)
 800260c:	f008 f90c 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002610:	2201      	movs	r2, #1
 8002612:	2108      	movs	r1, #8
 8002614:	48a7      	ldr	r0, [pc, #668]	; (80028b4 <task2A2L+0x2c4>)
 8002616:	f005 f851 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800261a:	2200      	movs	r2, #0
 800261c:	2104      	movs	r1, #4
 800261e:	48a5      	ldr	r0, [pc, #660]	; (80028b4 <task2A2L+0x2c4>)
 8002620:	f005 f84c 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8002624:	2201      	movs	r2, #1
 8002626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800262a:	48a3      	ldr	r0, [pc, #652]	; (80028b8 <task2A2L+0x2c8>)
 800262c:	f005 f846 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8002630:	2200      	movs	r2, #0
 8002632:	2120      	movs	r1, #32
 8002634:	48a1      	ldr	r0, [pc, #644]	; (80028bc <task2A2L+0x2cc>)
 8002636:	f005 f841 	bl	80076bc <HAL_GPIO_WritePin>
	moving = 0;
 800263a:	4ba1      	ldr	r3, [pc, #644]	; (80028c0 <task2A2L+0x2d0>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]

	if (continueMoving){
 8002640:	4ba0      	ldr	r3, [pc, #640]	; (80028c4 <task2A2L+0x2d4>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 81c3 	beq.w	80029d0 <task2A2L+0x3e0>
		//	uint8_t continueMoving;
		//if picture detected is left Yln
		if (data == 'l')
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b6c      	cmp	r3, #108	; 0x6c
 800264e:	f040 80d2 	bne.w	80027f6 <task2A2L+0x206>
		{
			htim1.Instance -> CCR4 = 117;
 8002652:	4b97      	ldr	r3, [pc, #604]	; (80028b0 <task2A2L+0x2c0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2275      	movs	r2, #117	; 0x75
 8002658:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 800265a:	4b94      	ldr	r3, [pc, #592]	; (80028ac <task2A2L+0x2bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002662:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 8002664:	4b91      	ldr	r3, [pc, #580]	; (80028ac <task2A2L+0x2bc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800266c:	63da      	str	r2, [r3, #60]	; 0x3c
			 moving = 1;
 800266e:	4b94      	ldr	r3, [pc, #592]	; (80028c0 <task2A2L+0x2d0>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
			 while (moving)
 8002674:	e020      	b.n	80026b8 <task2A2L+0xc8>
			 {
				 if ((int)totalAngle >= 60)
 8002676:	4b94      	ldr	r3, [pc, #592]	; (80028c8 <task2A2L+0x2d8>)
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	f7fe fa6a 	bl	8000b58 <__aeabi_d2iz>
 8002684:	4603      	mov	r3, r0
 8002686:	2b3b      	cmp	r3, #59	; 0x3b
 8002688:	dc1b      	bgt.n	80026c2 <task2A2L+0xd2>
				 {
					break;
				 }
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 800268a:	4b8f      	ldr	r3, [pc, #572]	; (80028c8 <task2A2L+0x2d8>)
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	f7fe fa60 	bl	8000b58 <__aeabi_d2iz>
 8002698:	4602      	mov	r2, r0
 800269a:	f107 0308 	add.w	r3, r7, #8
 800269e:	498b      	ldr	r1, [pc, #556]	; (80028cc <task2A2L+0x2dc>)
 80026a0:	4618      	mov	r0, r3
 80026a2:	f00e fa53 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 80026a6:	f107 0308 	add.w	r3, r7, #8
 80026aa:	461a      	mov	r2, r3
 80026ac:	2114      	movs	r1, #20
 80026ae:	200a      	movs	r0, #10
 80026b0:	f003 fede 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 80026b4:	f003 fd68 	bl	8006188 <OLED_Refresh_Gram>
			 while (moving)
 80026b8:	4b81      	ldr	r3, [pc, #516]	; (80028c0 <task2A2L+0x2d0>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1da      	bne.n	8002676 <task2A2L+0x86>
 80026c0:	e000      	b.n	80026c4 <task2A2L+0xd4>
					break;
 80026c2:	bf00      	nop
			 }
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80026c4:	4b79      	ldr	r3, [pc, #484]	; (80028ac <task2A2L+0x2bc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2200      	movs	r2, #0
 80026ca:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80026cc:	4b77      	ldr	r3, [pc, #476]	; (80028ac <task2A2L+0x2bc>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(60,1);
 80026d4:	2001      	movs	r0, #1
 80026d6:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80028d0 <task2A2L+0x2e0>
 80026da:	f001 fba1 	bl	8003e20 <moveGyroPID>
			htim1.Instance -> CCR4 = RIGHT;
 80026de:	4b74      	ldr	r3, [pc, #464]	; (80028b0 <task2A2L+0x2c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	22fa      	movs	r2, #250	; 0xfa
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 80026e6:	4b71      	ldr	r3, [pc, #452]	; (80028ac <task2A2L+0x2bc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80026ee:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 80026f0:	4b6e      	ldr	r3, [pc, #440]	; (80028ac <task2A2L+0x2bc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026f8:	63da      	str	r2, [r3, #60]	; 0x3c
	// 		continueMoving = 0;

			while (moving)
 80026fa:	e021      	b.n	8002740 <task2A2L+0x150>
			{
				if ((int)totalAngle <= -85)
 80026fc:	4b72      	ldr	r3, [pc, #456]	; (80028c8 <task2A2L+0x2d8>)
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f7fe fa27 	bl	8000b58 <__aeabi_d2iz>
 800270a:	4603      	mov	r3, r0
 800270c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002710:	db1b      	blt.n	800274a <task2A2L+0x15a>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002712:	4b6d      	ldr	r3, [pc, #436]	; (80028c8 <task2A2L+0x2d8>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe fa1c 	bl	8000b58 <__aeabi_d2iz>
 8002720:	4602      	mov	r2, r0
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	4969      	ldr	r1, [pc, #420]	; (80028cc <task2A2L+0x2dc>)
 8002728:	4618      	mov	r0, r3
 800272a:	f00e fa0f 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 800272e:	f107 0308 	add.w	r3, r7, #8
 8002732:	461a      	mov	r2, r3
 8002734:	2114      	movs	r1, #20
 8002736:	200a      	movs	r0, #10
 8002738:	f003 fe9a 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 800273c:	f003 fd24 	bl	8006188 <OLED_Refresh_Gram>
			while (moving)
 8002740:	4b5f      	ldr	r3, [pc, #380]	; (80028c0 <task2A2L+0x2d0>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1d9      	bne.n	80026fc <task2A2L+0x10c>
 8002748:	e000      	b.n	800274c <task2A2L+0x15c>
					break;
 800274a:	bf00      	nop
			 }

			 moving = 0;
 800274c:	4b5c      	ldr	r3, [pc, #368]	; (80028c0 <task2A2L+0x2d0>)
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
			 moveGyroPIDOld(50.0,1);
 8002752:	2001      	movs	r0, #1
 8002754:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 80028d4 <task2A2L+0x2e4>
 8002758:	f001 fe7a 	bl	8004450 <moveGyroPIDOld>
			 moving = 0;
 800275c:	4b58      	ldr	r3, [pc, #352]	; (80028c0 <task2A2L+0x2d0>)
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
			 delay(100);
 8002762:	2064      	movs	r0, #100	; 0x64
 8002764:	f7ff f884 	bl	8001870 <delay>
			moving = 1;
 8002768:	4b55      	ldr	r3, [pc, #340]	; (80028c0 <task2A2L+0x2d0>)
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
			htim1.Instance -> CCR4 = RIGHT;
 800276e:	4b50      	ldr	r3, [pc, #320]	; (80028b0 <task2A2L+0x2c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	22fa      	movs	r2, #250	; 0xfa
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002776:	4b4d      	ldr	r3, [pc, #308]	; (80028ac <task2A2L+0x2bc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800277e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002780:	4b4a      	ldr	r3, [pc, #296]	; (80028ac <task2A2L+0x2bc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002788:	63da      	str	r2, [r3, #60]	; 0x3c

			while (moving)
 800278a:	e021      	b.n	80027d0 <task2A2L+0x1e0>
			{
				if ((int)totalAngle <= -90) // was 95. was 90
 800278c:	4b4e      	ldr	r3, [pc, #312]	; (80028c8 <task2A2L+0x2d8>)
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	f7fe f9df 	bl	8000b58 <__aeabi_d2iz>
 800279a:	4603      	mov	r3, r0
 800279c:	f113 0f59 	cmn.w	r3, #89	; 0x59
 80027a0:	db1b      	blt.n	80027da <task2A2L+0x1ea>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <task2A2L+0x2d8>)
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	f7fe f9d4 	bl	8000b58 <__aeabi_d2iz>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	4945      	ldr	r1, [pc, #276]	; (80028cc <task2A2L+0x2dc>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f00e f9c7 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 80027be:	f107 0308 	add.w	r3, r7, #8
 80027c2:	461a      	mov	r2, r3
 80027c4:	2114      	movs	r1, #20
 80027c6:	200a      	movs	r0, #10
 80027c8:	f003 fe52 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 80027cc:	f003 fcdc 	bl	8006188 <OLED_Refresh_Gram>
			while (moving)
 80027d0:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <task2A2L+0x2d0>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1d9      	bne.n	800278c <task2A2L+0x19c>
 80027d8:	e000      	b.n	80027dc <task2A2L+0x1ec>
					break;
 80027da:	bf00      	nop
			 }
			actualAngle = 0;
 80027dc:	493e      	ldr	r1, [pc, #248]	; (80028d8 <task2A2L+0x2e8>)
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	e9c1 2300 	strd	r2, r3, [r1]
			moving = 0;
 80027ea:	4b35      	ldr	r3, [pc, #212]	; (80028c0 <task2A2L+0x2d0>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 80027f0:	f000 ff02 	bl	80035f8 <moveUltraEndLeft>
 80027f4:	e2ae      	b.n	8002d54 <task2A2L+0x764>

		}
		else if (data == 'r')
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b72      	cmp	r3, #114	; 0x72
 80027fa:	f040 82ab 	bne.w	8002d54 <task2A2L+0x764>
		{
			htim1.Instance -> CCR4 = RIGHT;
 80027fe:	4b2c      	ldr	r3, [pc, #176]	; (80028b0 <task2A2L+0x2c0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	22fa      	movs	r2, #250	; 0xfa
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002806:	4b29      	ldr	r3, [pc, #164]	; (80028ac <task2A2L+0x2bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800280e:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002810:	4b26      	ldr	r3, [pc, #152]	; (80028ac <task2A2L+0x2bc>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002818:	63da      	str	r2, [r3, #60]	; 0x3c
			 moving = 1;
 800281a:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <task2A2L+0x2d0>)
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
			 while (moving)
 8002820:	e021      	b.n	8002866 <task2A2L+0x276>
			 {
				 if ((int)totalAngle <= -1*60)
 8002822:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <task2A2L+0x2d8>)
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	f7fe f994 	bl	8000b58 <__aeabi_d2iz>
 8002830:	4603      	mov	r3, r0
 8002832:	f113 0f3b 	cmn.w	r3, #59	; 0x3b
 8002836:	db1b      	blt.n	8002870 <task2A2L+0x280>
				 {
					break;
				 }
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002838:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <task2A2L+0x2d8>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f7fe f989 	bl	8000b58 <__aeabi_d2iz>
 8002846:	4602      	mov	r2, r0
 8002848:	f107 0308 	add.w	r3, r7, #8
 800284c:	491f      	ldr	r1, [pc, #124]	; (80028cc <task2A2L+0x2dc>)
 800284e:	4618      	mov	r0, r3
 8002850:	f00e f97c 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002854:	f107 0308 	add.w	r3, r7, #8
 8002858:	461a      	mov	r2, r3
 800285a:	2114      	movs	r1, #20
 800285c:	200a      	movs	r0, #10
 800285e:	f003 fe07 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002862:	f003 fc91 	bl	8006188 <OLED_Refresh_Gram>
			 while (moving)
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <task2A2L+0x2d0>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1d9      	bne.n	8002822 <task2A2L+0x232>
 800286e:	e000      	b.n	8002872 <task2A2L+0x282>
					break;
 8002870:	bf00      	nop
			 }
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <task2A2L+0x2bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <task2A2L+0x2bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2200      	movs	r2, #0
 8002880:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(45.0, 1);
 8002882:	2001      	movs	r0, #1
 8002884:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80028dc <task2A2L+0x2ec>
 8002888:	f001 faca 	bl	8003e20 <moveGyroPID>
			htim1.Instance -> CCR4 = 110;
 800288c:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <task2A2L+0x2c0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	226e      	movs	r2, #110	; 0x6e
 8002892:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <task2A2L+0x2bc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800289c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 800289e:	4b03      	ldr	r3, [pc, #12]	; (80028ac <task2A2L+0x2bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80028a6:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving)
 80028a8:	e03b      	b.n	8002922 <task2A2L+0x332>
 80028aa:	bf00      	nop
 80028ac:	20000378 	.word	0x20000378
 80028b0:	20000258 	.word	0x20000258
 80028b4:	40020000 	.word	0x40020000
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40020800 	.word	0x40020800
 80028c0:	20000414 	.word	0x20000414
 80028c4:	20000416 	.word	0x20000416
 80028c8:	20000418 	.word	0x20000418
 80028cc:	08014768 	.word	0x08014768
 80028d0:	42700000 	.word	0x42700000
 80028d4:	42480000 	.word	0x42480000
 80028d8:	20000420 	.word	0x20000420
 80028dc:	42340000 	.word	0x42340000
			{
				if ((int)totalAngle >= 85)
 80028e0:	4ba9      	ldr	r3, [pc, #676]	; (8002b88 <task2A2L+0x598>)
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	f7fe f935 	bl	8000b58 <__aeabi_d2iz>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b54      	cmp	r3, #84	; 0x54
 80028f2:	dc1b      	bgt.n	800292c <task2A2L+0x33c>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 80028f4:	4ba4      	ldr	r3, [pc, #656]	; (8002b88 <task2A2L+0x598>)
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7fe f92b 	bl	8000b58 <__aeabi_d2iz>
 8002902:	4602      	mov	r2, r0
 8002904:	f107 0308 	add.w	r3, r7, #8
 8002908:	49a0      	ldr	r1, [pc, #640]	; (8002b8c <task2A2L+0x59c>)
 800290a:	4618      	mov	r0, r3
 800290c:	f00e f91e 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002910:	f107 0308 	add.w	r3, r7, #8
 8002914:	461a      	mov	r2, r3
 8002916:	2114      	movs	r1, #20
 8002918:	200a      	movs	r0, #10
 800291a:	f003 fda9 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 800291e:	f003 fc33 	bl	8006188 <OLED_Refresh_Gram>
			while (moving)
 8002922:	4b9b      	ldr	r3, [pc, #620]	; (8002b90 <task2A2L+0x5a0>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1da      	bne.n	80028e0 <task2A2L+0x2f0>
 800292a:	e000      	b.n	800292e <task2A2L+0x33e>
					break;
 800292c:	bf00      	nop
			 }
			moving = 0;
 800292e:	4b98      	ldr	r3, [pc, #608]	; (8002b90 <task2A2L+0x5a0>)
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(70.0,1); // prev 23
 8002934:	2001      	movs	r0, #1
 8002936:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8002b94 <task2A2L+0x5a4>
 800293a:	f001 fd89 	bl	8004450 <moveGyroPIDOld>
			moving = 0;
 800293e:	4b94      	ldr	r3, [pc, #592]	; (8002b90 <task2A2L+0x5a0>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
			htim1.Instance -> CCR4 = 115;
 8002944:	4b94      	ldr	r3, [pc, #592]	; (8002b98 <task2A2L+0x5a8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2273      	movs	r2, #115	; 0x73
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 800294c:	4b93      	ldr	r3, [pc, #588]	; (8002b9c <task2A2L+0x5ac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002954:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8002956:	4b91      	ldr	r3, [pc, #580]	; (8002b9c <task2A2L+0x5ac>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800295e:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8002960:	2064      	movs	r0, #100	; 0x64
 8002962:	f7fe ff85 	bl	8001870 <delay>
			moving = 1;
 8002966:	4b8a      	ldr	r3, [pc, #552]	; (8002b90 <task2A2L+0x5a0>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
			while (moving)
 800296c:	e020      	b.n	80029b0 <task2A2L+0x3c0>
			{
				if ((int)totalAngle >= 92)
 800296e:	4b86      	ldr	r3, [pc, #536]	; (8002b88 <task2A2L+0x598>)
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	f7fe f8ee 	bl	8000b58 <__aeabi_d2iz>
 800297c:	4603      	mov	r3, r0
 800297e:	2b5b      	cmp	r3, #91	; 0x5b
 8002980:	dc1b      	bgt.n	80029ba <task2A2L+0x3ca>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002982:	4b81      	ldr	r3, [pc, #516]	; (8002b88 <task2A2L+0x598>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f8e4 	bl	8000b58 <__aeabi_d2iz>
 8002990:	4602      	mov	r2, r0
 8002992:	f107 0308 	add.w	r3, r7, #8
 8002996:	497d      	ldr	r1, [pc, #500]	; (8002b8c <task2A2L+0x59c>)
 8002998:	4618      	mov	r0, r3
 800299a:	f00e f8d7 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 800299e:	f107 0308 	add.w	r3, r7, #8
 80029a2:	461a      	mov	r2, r3
 80029a4:	2114      	movs	r1, #20
 80029a6:	200a      	movs	r0, #10
 80029a8:	f003 fd62 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 80029ac:	f003 fbec 	bl	8006188 <OLED_Refresh_Gram>
			while (moving)
 80029b0:	4b77      	ldr	r3, [pc, #476]	; (8002b90 <task2A2L+0x5a0>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1da      	bne.n	800296e <task2A2L+0x37e>
 80029b8:	e000      	b.n	80029bc <task2A2L+0x3cc>
					break;
 80029ba:	bf00      	nop
			 }
			actualAngle = 0;
 80029bc:	4978      	ldr	r1, [pc, #480]	; (8002ba0 <task2A2L+0x5b0>)
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 80029ca:	f000 fc05 	bl	80031d8 <moveUltraEnd>
 80029ce:	e1c1      	b.n	8002d54 <task2A2L+0x764>
		}
	} else {
		// meaning continueMoving is 0, indicating that the car
		// stopped because ultrasonic distance hit before target angle hit
		//if picture detected is left Yln
		if (data == 'l')
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b6c      	cmp	r3, #108	; 0x6c
 80029d4:	f040 80ea 	bne.w	8002bac <task2A2L+0x5bc>
		{
			htim1.Instance -> CCR4 = 115;
 80029d8:	4b6f      	ldr	r3, [pc, #444]	; (8002b98 <task2A2L+0x5a8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2273      	movs	r2, #115	; 0x73
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 80029e0:	4b6e      	ldr	r3, [pc, #440]	; (8002b9c <task2A2L+0x5ac>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 80029ea:	4b6c      	ldr	r3, [pc, #432]	; (8002b9c <task2A2L+0x5ac>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80029f2:	63da      	str	r2, [r3, #60]	; 0x3c
			 moving = 1;
 80029f4:	4b66      	ldr	r3, [pc, #408]	; (8002b90 <task2A2L+0x5a0>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
			 while (moving)
 80029fa:	e020      	b.n	8002a3e <task2A2L+0x44e>
			 {
				 if ((int)actualAngle >= 40)
 80029fc:	4b68      	ldr	r3, [pc, #416]	; (8002ba0 <task2A2L+0x5b0>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	f7fe f8a7 	bl	8000b58 <__aeabi_d2iz>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b27      	cmp	r3, #39	; 0x27
 8002a0e:	dc1b      	bgt.n	8002a48 <task2A2L+0x458>
				 {
					break;
				 }
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002a10:	4b5d      	ldr	r3, [pc, #372]	; (8002b88 <task2A2L+0x598>)
 8002a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f7fe f89d 	bl	8000b58 <__aeabi_d2iz>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	f107 0308 	add.w	r3, r7, #8
 8002a24:	4959      	ldr	r1, [pc, #356]	; (8002b8c <task2A2L+0x59c>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	f00e f890 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002a2c:	f107 0308 	add.w	r3, r7, #8
 8002a30:	461a      	mov	r2, r3
 8002a32:	2114      	movs	r1, #20
 8002a34:	200a      	movs	r0, #10
 8002a36:	f003 fd1b 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002a3a:	f003 fba5 	bl	8006188 <OLED_Refresh_Gram>
			 while (moving)
 8002a3e:	4b54      	ldr	r3, [pc, #336]	; (8002b90 <task2A2L+0x5a0>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1da      	bne.n	80029fc <task2A2L+0x40c>
 8002a46:	e000      	b.n	8002a4a <task2A2L+0x45a>
					break;
 8002a48:	bf00      	nop
			 }
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002a4a:	4b54      	ldr	r3, [pc, #336]	; (8002b9c <task2A2L+0x5ac>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002a52:	4b52      	ldr	r3, [pc, #328]	; (8002b9c <task2A2L+0x5ac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2200      	movs	r2, #0
 8002a58:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(73.0,1);
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8002ba4 <task2A2L+0x5b4>
 8002a60:	f001 f9de 	bl	8003e20 <moveGyroPID>
			htim1.Instance -> CCR4 = RIGHT;
 8002a64:	4b4c      	ldr	r3, [pc, #304]	; (8002b98 <task2A2L+0x5a8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	22fa      	movs	r2, #250	; 0xfa
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002a6c:	4b4b      	ldr	r3, [pc, #300]	; (8002b9c <task2A2L+0x5ac>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002a74:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002a76:	4b49      	ldr	r3, [pc, #292]	; (8002b9c <task2A2L+0x5ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a7e:	63da      	str	r2, [r3, #60]	; 0x3c
	// 		continueMoving = 0;

			while (moving)
 8002a80:	e021      	b.n	8002ac6 <task2A2L+0x4d6>
			{
				if ((int)actualAngle <= -1*90)
 8002a82:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <task2A2L+0x5b0>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe f864 	bl	8000b58 <__aeabi_d2iz>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8002a96:	db1b      	blt.n	8002ad0 <task2A2L+0x4e0>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002a98:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <task2A2L+0x598>)
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f7fe f859 	bl	8000b58 <__aeabi_d2iz>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	f107 0308 	add.w	r3, r7, #8
 8002aac:	4937      	ldr	r1, [pc, #220]	; (8002b8c <task2A2L+0x59c>)
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f00e f84c 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002ab4:	f107 0308 	add.w	r3, r7, #8
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2114      	movs	r1, #20
 8002abc:	200a      	movs	r0, #10
 8002abe:	f003 fcd7 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002ac2:	f003 fb61 	bl	8006188 <OLED_Refresh_Gram>
			while (moving)
 8002ac6:	4b32      	ldr	r3, [pc, #200]	; (8002b90 <task2A2L+0x5a0>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1d9      	bne.n	8002a82 <task2A2L+0x492>
 8002ace:	e000      	b.n	8002ad2 <task2A2L+0x4e2>
					break;
 8002ad0:	bf00      	nop
			 }

			 moving = 0;
 8002ad2:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <task2A2L+0x5a0>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
			 moveGyroPIDOld(40.0,1);
 8002ad8:	2001      	movs	r0, #1
 8002ada:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8002ba8 <task2A2L+0x5b8>
 8002ade:	f001 fcb7 	bl	8004450 <moveGyroPIDOld>
			 moving = 0;
 8002ae2:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <task2A2L+0x5a0>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
			htim1.Instance -> CCR4 = RIGHT;
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <task2A2L+0x5a8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	22fa      	movs	r2, #250	; 0xfa
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002af0:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <task2A2L+0x5ac>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002af8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002afa:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <task2A2L+0x5ac>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b02:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8002b04:	2064      	movs	r0, #100	; 0x64
 8002b06:	f7fe feb3 	bl	8001870 <delay>
			moving=0;
 8002b0a:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <task2A2L+0x5a0>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
			osDelay(1);
 8002b10:	2001      	movs	r0, #1
 8002b12:	f00a fc3c 	bl	800d38e <osDelay>
			moving = 1;
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <task2A2L+0x5a0>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
			while (moving)
 8002b1c:	e021      	b.n	8002b62 <task2A2L+0x572>
			{
				if ((int)totalAngle <= -1*90) // note: i changed to actualAngle to try, original was totalAngle = -100
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <task2A2L+0x598>)
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f7fe f816 	bl	8000b58 <__aeabi_d2iz>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8002b32:	db1b      	blt.n	8002b6c <task2A2L+0x57c>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <task2A2L+0x598>)
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f7fe f80b 	bl	8000b58 <__aeabi_d2iz>
 8002b42:	4602      	mov	r2, r0
 8002b44:	f107 0308 	add.w	r3, r7, #8
 8002b48:	4910      	ldr	r1, [pc, #64]	; (8002b8c <task2A2L+0x59c>)
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f00d fffe 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002b50:	f107 0308 	add.w	r3, r7, #8
 8002b54:	461a      	mov	r2, r3
 8002b56:	2114      	movs	r1, #20
 8002b58:	200a      	movs	r0, #10
 8002b5a:	f003 fc89 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002b5e:	f003 fb13 	bl	8006188 <OLED_Refresh_Gram>
			while (moving)
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <task2A2L+0x5a0>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1d9      	bne.n	8002b1e <task2A2L+0x52e>
 8002b6a:	e000      	b.n	8002b6e <task2A2L+0x57e>
					break;
 8002b6c:	bf00      	nop
			 }
			actualAngle = 0;
 8002b6e:	490c      	ldr	r1, [pc, #48]	; (8002ba0 <task2A2L+0x5b0>)
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9c1 2300 	strd	r2, r3, [r1]
			moving = 0;
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <task2A2L+0x5a0>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 8002b82:	f000 fd39 	bl	80035f8 <moveUltraEndLeft>
 8002b86:	e0e5      	b.n	8002d54 <task2A2L+0x764>
 8002b88:	20000418 	.word	0x20000418
 8002b8c:	08014768 	.word	0x08014768
 8002b90:	20000414 	.word	0x20000414
 8002b94:	428c0000 	.word	0x428c0000
 8002b98:	20000258 	.word	0x20000258
 8002b9c:	20000378 	.word	0x20000378
 8002ba0:	20000420 	.word	0x20000420
 8002ba4:	42920000 	.word	0x42920000
 8002ba8:	42200000 	.word	0x42200000

		}
		else if (data == 'r')
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b72      	cmp	r3, #114	; 0x72
 8002bb0:	f040 80d0 	bne.w	8002d54 <task2A2L+0x764>
		{
			htim1.Instance -> CCR4 = RIGHT;
 8002bb4:	4b7a      	ldr	r3, [pc, #488]	; (8002da0 <task2A2L+0x7b0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	22fa      	movs	r2, #250	; 0xfa
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002bbc:	4b79      	ldr	r3, [pc, #484]	; (8002da4 <task2A2L+0x7b4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002bc4:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002bc6:	4b77      	ldr	r3, [pc, #476]	; (8002da4 <task2A2L+0x7b4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bce:	63da      	str	r2, [r3, #60]	; 0x3c
			 moving = 1;
 8002bd0:	4b75      	ldr	r3, [pc, #468]	; (8002da8 <task2A2L+0x7b8>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
			 while (moving)
 8002bd6:	e021      	b.n	8002c1c <task2A2L+0x62c>
			 {
				 if ((int)totalAngle <= -1*60) // was 65
 8002bd8:	4b74      	ldr	r3, [pc, #464]	; (8002dac <task2A2L+0x7bc>)
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	f7fd ffb9 	bl	8000b58 <__aeabi_d2iz>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f113 0f3b 	cmn.w	r3, #59	; 0x3b
 8002bec:	db1b      	blt.n	8002c26 <task2A2L+0x636>
				 {
					break;
				 }
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002bee:	4b6f      	ldr	r3, [pc, #444]	; (8002dac <task2A2L+0x7bc>)
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f7fd ffae 	bl	8000b58 <__aeabi_d2iz>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	f107 0308 	add.w	r3, r7, #8
 8002c02:	496b      	ldr	r1, [pc, #428]	; (8002db0 <task2A2L+0x7c0>)
 8002c04:	4618      	mov	r0, r3
 8002c06:	f00d ffa1 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002c0a:	f107 0308 	add.w	r3, r7, #8
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2114      	movs	r1, #20
 8002c12:	200a      	movs	r0, #10
 8002c14:	f003 fc2c 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002c18:	f003 fab6 	bl	8006188 <OLED_Refresh_Gram>
			 while (moving)
 8002c1c:	4b62      	ldr	r3, [pc, #392]	; (8002da8 <task2A2L+0x7b8>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1d9      	bne.n	8002bd8 <task2A2L+0x5e8>
 8002c24:	e000      	b.n	8002c28 <task2A2L+0x638>
					break;
 8002c26:	bf00      	nop
			 }
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002c28:	4b5e      	ldr	r3, [pc, #376]	; (8002da4 <task2A2L+0x7b4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002c30:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <task2A2L+0x7b4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2200      	movs	r2, #0
 8002c36:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 0;
 8002c38:	4b5b      	ldr	r3, [pc, #364]	; (8002da8 <task2A2L+0x7b8>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(45.0,1); // was 55
 8002c3e:	2001      	movs	r0, #1
 8002c40:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8002db4 <task2A2L+0x7c4>
 8002c44:	f001 fc04 	bl	8004450 <moveGyroPIDOld>
			htim1.Instance -> CCR4 = 110;
 8002c48:	4b55      	ldr	r3, [pc, #340]	; (8002da0 <task2A2L+0x7b0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	226e      	movs	r2, #110	; 0x6e
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8002c50:	4b54      	ldr	r3, [pc, #336]	; (8002da4 <task2A2L+0x7b4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c58:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8002c5a:	4b52      	ldr	r3, [pc, #328]	; (8002da4 <task2A2L+0x7b4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002c62:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving)
 8002c64:	e020      	b.n	8002ca8 <task2A2L+0x6b8>
			{
				if ((int)actualAngle >= 83)
 8002c66:	4b54      	ldr	r3, [pc, #336]	; (8002db8 <task2A2L+0x7c8>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	4619      	mov	r1, r3
 8002c70:	f7fd ff72 	bl	8000b58 <__aeabi_d2iz>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b52      	cmp	r3, #82	; 0x52
 8002c78:	dc1b      	bgt.n	8002cb2 <task2A2L+0x6c2>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002c7a:	4b4c      	ldr	r3, [pc, #304]	; (8002dac <task2A2L+0x7bc>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f7fd ff68 	bl	8000b58 <__aeabi_d2iz>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f107 0308 	add.w	r3, r7, #8
 8002c8e:	4948      	ldr	r1, [pc, #288]	; (8002db0 <task2A2L+0x7c0>)
 8002c90:	4618      	mov	r0, r3
 8002c92:	f00d ff5b 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002c96:	f107 0308 	add.w	r3, r7, #8
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2114      	movs	r1, #20
 8002c9e:	200a      	movs	r0, #10
 8002ca0:	f003 fbe6 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002ca4:	f003 fa70 	bl	8006188 <OLED_Refresh_Gram>
			while (moving)
 8002ca8:	4b3f      	ldr	r3, [pc, #252]	; (8002da8 <task2A2L+0x7b8>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1da      	bne.n	8002c66 <task2A2L+0x676>
 8002cb0:	e000      	b.n	8002cb4 <task2A2L+0x6c4>
					break;
 8002cb2:	bf00      	nop
			 }
			moving = 0;
 8002cb4:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <task2A2L+0x7b8>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(60.0,1); // prev 23
 8002cba:	2001      	movs	r0, #1
 8002cbc:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8002dbc <task2A2L+0x7cc>
 8002cc0:	f001 fbc6 	bl	8004450 <moveGyroPIDOld>
			moving = 0;
 8002cc4:	4b38      	ldr	r3, [pc, #224]	; (8002da8 <task2A2L+0x7b8>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
			htim1.Instance -> CCR4 = 115;
 8002cca:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <task2A2L+0x7b0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2273      	movs	r2, #115	; 0x73
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8002cd2:	4b34      	ldr	r3, [pc, #208]	; (8002da4 <task2A2L+0x7b4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8002cdc:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <task2A2L+0x7b4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002ce4:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100); // delay because gyro needs time to reset
 8002ce6:	2064      	movs	r0, #100	; 0x64
 8002ce8:	f7fe fdc2 	bl	8001870 <delay>
			moving = 1;
 8002cec:	4b2e      	ldr	r3, [pc, #184]	; (8002da8 <task2A2L+0x7b8>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
			while (moving)
 8002cf2:	e020      	b.n	8002d36 <task2A2L+0x746>
			{
				if ((int)totalAngle >= 105)
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <task2A2L+0x7bc>)
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f7fd ff2b 	bl	8000b58 <__aeabi_d2iz>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b68      	cmp	r3, #104	; 0x68
 8002d06:	dc1b      	bgt.n	8002d40 <task2A2L+0x750>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002d08:	4b28      	ldr	r3, [pc, #160]	; (8002dac <task2A2L+0x7bc>)
 8002d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	f7fd ff21 	bl	8000b58 <__aeabi_d2iz>
 8002d16:	4602      	mov	r2, r0
 8002d18:	f107 0308 	add.w	r3, r7, #8
 8002d1c:	4924      	ldr	r1, [pc, #144]	; (8002db0 <task2A2L+0x7c0>)
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f00d ff14 	bl	8010b4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002d24:	f107 0308 	add.w	r3, r7, #8
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2114      	movs	r1, #20
 8002d2c:	200a      	movs	r0, #10
 8002d2e:	f003 fb9f 	bl	8006470 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002d32:	f003 fa29 	bl	8006188 <OLED_Refresh_Gram>
			while (moving)
 8002d36:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <task2A2L+0x7b8>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1da      	bne.n	8002cf4 <task2A2L+0x704>
 8002d3e:	e000      	b.n	8002d42 <task2A2L+0x752>
					break;
 8002d40:	bf00      	nop
			 }
			actualAngle = 0;
 8002d42:	491d      	ldr	r1, [pc, #116]	; (8002db8 <task2A2L+0x7c8>)
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 8002d50:	f000 fa42 	bl	80031d8 <moveUltraEnd>
		}
	}

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002d54:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <task2A2L+0x7b4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <task2A2L+0x7b4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2200      	movs	r2, #0
 8002d62:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance -> CCR4 = STRAIGHT;
 8002d64:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <task2A2L+0x7b0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2295      	movs	r2, #149	; 0x95
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	2108      	movs	r1, #8
 8002d70:	4813      	ldr	r0, [pc, #76]	; (8002dc0 <task2A2L+0x7d0>)
 8002d72:	f004 fca3 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2104      	movs	r1, #4
 8002d7a:	4811      	ldr	r0, [pc, #68]	; (8002dc0 <task2A2L+0x7d0>)
 8002d7c:	f004 fc9e 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8002d80:	2201      	movs	r2, #1
 8002d82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d86:	480f      	ldr	r0, [pc, #60]	; (8002dc4 <task2A2L+0x7d4>)
 8002d88:	f004 fc98 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2120      	movs	r1, #32
 8002d90:	480d      	ldr	r0, [pc, #52]	; (8002dc8 <task2A2L+0x7d8>)
 8002d92:	f004 fc93 	bl	80076bc <HAL_GPIO_WritePin>
}
 8002d96:	bf00      	nop
 8002d98:	3780      	adds	r7, #128	; 0x80
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000258 	.word	0x20000258
 8002da4:	20000378 	.word	0x20000378
 8002da8:	20000414 	.word	0x20000414
 8002dac:	20000418 	.word	0x20000418
 8002db0:	08014768 	.word	0x08014768
 8002db4:	42340000 	.word	0x42340000
 8002db8:	20000420 	.word	0x20000420
 8002dbc:	42700000 	.word	0x42700000
 8002dc0:	40020000 	.word	0x40020000
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40020800 	.word	0x40020800

08002dcc <moveUltra>:

void moveUltra()
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b0ae      	sub	sp, #184	; 0xb8
 8002dd0:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	488a      	ldr	r0, [pc, #552]	; (8003000 <moveUltra+0x234>)
 8002dd6:	f007 fd27 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002dda:	2108      	movs	r1, #8
 8002ddc:	4888      	ldr	r0, [pc, #544]	; (8003000 <moveUltra+0x234>)
 8002dde:	f007 fd23 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002de2:	210c      	movs	r1, #12
 8002de4:	4887      	ldr	r0, [pc, #540]	; (8003004 <moveUltra+0x238>)
 8002de6:	f007 fd1f 	bl	800a828 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8002dea:	4b86      	ldr	r3, [pc, #536]	; (8003004 <moveUltra+0x238>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2295      	movs	r2, #149	; 0x95
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 8002df2:	2064      	movs	r0, #100	; 0x64
 8002df4:	f00a facb 	bl	800d38e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8002df8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002dfc:	2224      	movs	r2, #36	; 0x24
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f00d f81b 	bl	800fe3c <memset>
 8002e06:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002e0a:	653b      	str	r3, [r7, #80]	; 0x50
 8002e0c:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8002e10:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e12:	f640 3354 	movw	r3, #2900	; 0xb54
 8002e16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e18:	4b7b      	ldr	r3, [pc, #492]	; (8003008 <moveUltra+0x23c>)
 8002e1a:	663b      	str	r3, [r7, #96]	; 0x60
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };


	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8002e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e20:	2224      	movs	r2, #36	; 0x24
 8002e22:	2100      	movs	r1, #0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f00d f809 	bl	800fe3c <memset>
 8002e2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e30:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
 8002e36:	f640 3354 	movw	r3, #2900	; 0xb54
 8002e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e3c:	4b72      	ldr	r3, [pc, #456]	; (8003008 <moveUltra+0x23c>)
 8002e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8002e40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e44:	4618      	mov	r0, r3
 8002e46:	f003 fbd1 	bl	80065ec <PIDController_Init>
	PIDController_Init(&pidRight);
 8002e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f003 fbcc 	bl	80065ec <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8002e54:	4b6d      	ldr	r3, [pc, #436]	; (800300c <moveUltra+0x240>)
 8002e56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8002e5a:	4b6d      	ldr	r3, [pc, #436]	; (8003010 <moveUltra+0x244>)
 8002e5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 23.56f; // NEED TO MEASURE AND CHANGE
 8002e60:	4b6c      	ldr	r3, [pc, #432]	; (8003014 <moveUltra+0x248>)
 8002e62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8002e66:	213c      	movs	r1, #60	; 0x3c
 8002e68:	486b      	ldr	r0, [pc, #428]	; (8003018 <moveUltra+0x24c>)
 8002e6a:	f007 ffc3 	bl	800adf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8002e6e:	213c      	movs	r1, #60	; 0x3c
 8002e70:	486a      	ldr	r0, [pc, #424]	; (800301c <moveUltra+0x250>)
 8002e72:	f007 ffbf 	bl	800adf4 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8002e76:	4b68      	ldr	r3, [pc, #416]	; (8003018 <moveUltra+0x24c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8002e80:	4b66      	ldr	r3, [pc, #408]	; (800301c <moveUltra+0x250>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8002e8a:	f004 f899 	bl	8006fc0 <HAL_GetTick>
 8002e8e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 8002e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 3000;
 8002eb6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002eba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 3000;
 8002ebe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002ec2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	2108      	movs	r1, #8
 8002eca:	4855      	ldr	r0, [pc, #340]	; (8003020 <moveUltra+0x254>)
 8002ecc:	f004 fbf6 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2104      	movs	r1, #4
 8002ed4:	4852      	ldr	r0, [pc, #328]	; (8003020 <moveUltra+0x254>)
 8002ed6:	f004 fbf1 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8002eda:	2201      	movs	r2, #1
 8002edc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ee0:	4850      	ldr	r0, [pc, #320]	; (8003024 <moveUltra+0x258>)
 8002ee2:	f004 fbeb 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2120      	movs	r1, #32
 8002eea:	484f      	ldr	r0, [pc, #316]	; (8003028 <moveUltra+0x25c>)
 8002eec:	f004 fbe6 	bl	80076bc <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for(;;)
	{

		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002ef0:	4b43      	ldr	r3, [pc, #268]	; (8003000 <moveUltra+0x234>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8002efa:	4b41      	ldr	r3, [pc, #260]	; (8003000 <moveUltra+0x234>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8002f02:	63da      	str	r2, [r3, #60]	; 0x3c
		 currTime = HAL_GetTick();
 8002f04:	f004 f85c 	bl	8006fc0 <HAL_GetTick>
 8002f08:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		 moving = 1;
 8002f0c:	4b47      	ldr	r3, [pc, #284]	; (800302c <moveUltra+0x260>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]

		 if (currTime-prevTime > 60L)
 8002f12:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b3c      	cmp	r3, #60	; 0x3c
 8002f1e:	d9e7      	bls.n	8002ef0 <moveUltra+0x124>
		 {
			 leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8002f20:	4b3d      	ldr	r3, [pc, #244]	; (8003018 <moveUltra+0x24c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			 rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8002f2a:	4b3c      	ldr	r3, [pc, #240]	; (800301c <moveUltra+0x250>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	67fb      	str	r3, [r7, #124]	; 0x7c

			 diffLeft = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 diffRight = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8002f3e:	4b36      	ldr	r3, [pc, #216]	; (8003018 <moveUltra+0x24c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d118      	bne.n	8002f7e <moveUltra+0x1b2>
			 {
				 if (leftTick < leftTick_prev)
 8002f4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f54:	429a      	cmp	r2, r3
 8002f56:	da07      	bge.n	8002f68 <moveUltra+0x19c>
					 diffLeft = leftTick_prev - leftTick;
 8002f58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f66:	e022      	b.n	8002fae <moveUltra+0x1e2>
				 else
					 diffLeft = (65535 - leftTick) + leftTick_prev;
 8002f68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f6c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002f70:	33ff      	adds	r3, #255	; 0xff
 8002f72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f76:	4413      	add	r3, r2
 8002f78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f7c:	e017      	b.n	8002fae <moveUltra+0x1e2>
			 }
			 else
			 {
				 if (leftTick > leftTick_prev)
 8002f7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f86:	429a      	cmp	r2, r3
 8002f88:	dd07      	ble.n	8002f9a <moveUltra+0x1ce>
					 diffLeft = leftTick - leftTick_prev;
 8002f8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f98:	e009      	b.n	8002fae <moveUltra+0x1e2>
				 else
					 diffLeft = 65535 - leftTick_prev + leftTick;
 8002f9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f9e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002fa2:	33ff      	adds	r3, #255	; 0xff
 8002fa4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fa8:	4413      	add	r3, r2
 8002faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 }

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8002fae:	4b1b      	ldr	r3, [pc, #108]	; (800301c <moveUltra+0x250>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	d115      	bne.n	8002fe8 <moveUltra+0x21c>
			 {
				 if (rightTick < rightTick_prev)
 8002fbc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002fbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	da06      	bge.n	8002fd4 <moveUltra+0x208>
					 diffRight = rightTick_prev - rightTick;
 8002fc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fd2:	e036      	b.n	8003042 <moveUltra+0x276>
				 else
					 diffRight = (65535 - rightTick) + rightTick_prev;
 8002fd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fd6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002fda:	33ff      	adds	r3, #255	; 0xff
 8002fdc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fe6:	e02c      	b.n	8003042 <moveUltra+0x276>
			 }
			 else
			 {
				 if (rightTick > rightTick_prev)
 8002fe8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002fea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	dd1e      	ble.n	8003030 <moveUltra+0x264>
					 diffRight = rightTick - rightTick_prev;
 8002ff2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002ff4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ffe:	e020      	b.n	8003042 <moveUltra+0x276>
 8003000:	20000378 	.word	0x20000378
 8003004:	20000258 	.word	0x20000258
 8003008:	3d4ccccd 	.word	0x3d4ccccd
 800300c:	44440000 	.word	0x44440000
 8003010:	4442c000 	.word	0x4442c000
 8003014:	41bc7ae1 	.word	0x41bc7ae1
 8003018:	200002a0 	.word	0x200002a0
 800301c:	20000330 	.word	0x20000330
 8003020:	40020000 	.word	0x40020000
 8003024:	40021000 	.word	0x40021000
 8003028:	40020800 	.word	0x40020800
 800302c:	20000414 	.word	0x20000414
				 else
					 diffRight = 65535 - rightTick_prev + rightTick;
 8003030:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003034:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003038:	33ff      	adds	r3, #255	; 0xff
 800303a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800303c:	4413      	add	r3, r2
 800303e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			 }

			 // left measured distance
			 distLeft = ((float)diffLeft/wheel_rotationTicksL) * wheel_circumference;
 8003042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003046:	ee07 3a90 	vmov	s15, r3
 800304a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800304e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003056:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800305a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
			 totalDistance_left += distLeft;
 8003062:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8003066:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800306a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800306e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			 // right measured distance
			 distRight = ((float)diffRight/wheel_rotationTicksR) * wheel_circumference;
 8003072:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003076:	ee07 3a90 	vmov	s15, r3
 800307a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800307e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003086:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800308a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
			 totalDistance_right += distRight;
 8003092:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003096:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800309a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

			 //if robot doesnt go straight, using gyro to adjust, straight = 145
			 if (actualAngle < 0.00) //veering right
 80030a2:	4b46      	ldr	r3, [pc, #280]	; (80031bc <moveUltra+0x3f0>)
 80030a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	f7fd fd14 	bl	8000adc <__aeabi_dcmplt>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d006      	beq.n	80030c8 <moveUltra+0x2fc>
			 {

				 htim1.Instance -> CCR4 = 138; //left abit
 80030ba:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <moveUltra+0x3f4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	228a      	movs	r2, #138	; 0x8a
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
				 osDelay(10);
 80030c2:	200a      	movs	r0, #10
 80030c4:	f00a f963 	bl	800d38e <osDelay>
			 }
			 if (actualAngle > 0.00)//veering left
 80030c8:	4b3c      	ldr	r3, [pc, #240]	; (80031bc <moveUltra+0x3f0>)
 80030ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	f7fd fd1f 	bl	8000b18 <__aeabi_dcmpgt>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d006      	beq.n	80030ee <moveUltra+0x322>
			 {

				 htim1.Instance -> CCR4 = 152; //right a bit
 80030e0:	4b37      	ldr	r3, [pc, #220]	; (80031c0 <moveUltra+0x3f4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2298      	movs	r2, #152	; 0x98
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
				 osDelay(10);
 80030e8:	200a      	movs	r0, #10
 80030ea:	f00a f950 	bl	800d38e <osDelay>
			 }
			 if (actualAngle == 0.00)
 80030ee:	4b33      	ldr	r3, [pc, #204]	; (80031bc <moveUltra+0x3f0>)
 80030f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	f7fd fce4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d006      	beq.n	8003114 <moveUltra+0x348>
			 {
//				 servo = STRAIGHT;
				 htim1.Instance -> CCR4 = STRAIGHT; //Straight
 8003106:	4b2e      	ldr	r3, [pc, #184]	; (80031c0 <moveUltra+0x3f4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2295      	movs	r2, #149	; 0x95
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
				 osDelay(10);
 800310e:	200a      	movs	r0, #10
 8003110:	f00a f93d 	bl	800d38e <osDelay>
			 }

			prevTime = currTime;
 8003114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 800311c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8003124:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 15) // prev was 10
 800312a:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <moveUltra+0x3f8>)
 800312c:	edd3 7a00 	vldr	s15, [r3]
 8003130:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313c:	d417      	bmi.n	800316e <moveUltra+0x3a2>
			{
				break;
			}
			 sprintf(messageA, "angle %5d\0", (int)(actualAngle));
 800313e:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <moveUltra+0x3f0>)
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	f7fd fd06 	bl	8000b58 <__aeabi_d2iz>
 800314c:	4602      	mov	r2, r0
 800314e:	f107 0318 	add.w	r3, r7, #24
 8003152:	491d      	ldr	r1, [pc, #116]	; (80031c8 <moveUltra+0x3fc>)
 8003154:	4618      	mov	r0, r3
 8003156:	f00d fcf9 	bl	8010b4c <siprintf>
			 OLED_ShowString(10,20, messageA);
 800315a:	f107 0318 	add.w	r3, r7, #24
 800315e:	461a      	mov	r2, r3
 8003160:	2114      	movs	r1, #20
 8003162:	200a      	movs	r0, #10
 8003164:	f003 f984 	bl	8006470 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8003168:	f003 f80e 	bl	8006188 <OLED_Refresh_Gram>
		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800316c:	e6c0      	b.n	8002ef0 <moveUltra+0x124>
				break;
 800316e:	bf00      	nop
		 }
	}

//	moving = 0;
	move(1,0);
 8003170:	2000      	movs	r0, #0
 8003172:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003176:	f001 fcb9 	bl	8004aec <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800317a:	2201      	movs	r2, #1
 800317c:	2108      	movs	r1, #8
 800317e:	4813      	ldr	r0, [pc, #76]	; (80031cc <moveUltra+0x400>)
 8003180:	f004 fa9c 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003184:	2200      	movs	r2, #0
 8003186:	2104      	movs	r1, #4
 8003188:	4810      	ldr	r0, [pc, #64]	; (80031cc <moveUltra+0x400>)
 800318a:	f004 fa97 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800318e:	2201      	movs	r2, #1
 8003190:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003194:	480e      	ldr	r0, [pc, #56]	; (80031d0 <moveUltra+0x404>)
 8003196:	f004 fa91 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800319a:	2200      	movs	r2, #0
 800319c:	2120      	movs	r1, #32
 800319e:	480d      	ldr	r0, [pc, #52]	; (80031d4 <moveUltra+0x408>)
 80031a0:	f004 fa8c 	bl	80076bc <HAL_GPIO_WritePin>
	htim1.Instance -> CCR4 = STRAIGHT; //centre
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <moveUltra+0x3f4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2295      	movs	r2, #149	; 0x95
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 80031ac:	200a      	movs	r0, #10
 80031ae:	f00a f8ee 	bl	800d38e <osDelay>
	return;
 80031b2:	bf00      	nop

}
 80031b4:	37b8      	adds	r7, #184	; 0xb8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000420 	.word	0x20000420
 80031c0:	20000258 	.word	0x20000258
 80031c4:	20000444 	.word	0x20000444
 80031c8:	08014768 	.word	0x08014768
 80031cc:	40020000 	.word	0x40020000
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40020800 	.word	0x40020800

080031d8 <moveUltraEnd>:

void moveUltraEnd()
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b0ae      	sub	sp, #184	; 0xb8
 80031dc:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80031de:	2100      	movs	r1, #0
 80031e0:	488e      	ldr	r0, [pc, #568]	; (800341c <moveUltraEnd+0x244>)
 80031e2:	f007 fb21 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80031e6:	2108      	movs	r1, #8
 80031e8:	488c      	ldr	r0, [pc, #560]	; (800341c <moveUltraEnd+0x244>)
 80031ea:	f007 fb1d 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80031ee:	210c      	movs	r1, #12
 80031f0:	488b      	ldr	r0, [pc, #556]	; (8003420 <moveUltraEnd+0x248>)
 80031f2:	f007 fb19 	bl	800a828 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 80031f6:	4b8a      	ldr	r3, [pc, #552]	; (8003420 <moveUltraEnd+0x248>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2295      	movs	r2, #149	; 0x95
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 80031fe:	2064      	movs	r0, #100	; 0x64
 8003200:	f00a f8c5 	bl	800d38e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8003204:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003208:	2224      	movs	r2, #36	; 0x24
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f00c fe15 	bl	800fe3c <memset>
 8003212:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003216:	653b      	str	r3, [r7, #80]	; 0x50
 8003218:	f240 53aa 	movw	r3, #1450	; 0x5aa
 800321c:	65bb      	str	r3, [r7, #88]	; 0x58
 800321e:	f640 3354 	movw	r3, #2900	; 0xb54
 8003222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003224:	4b7f      	ldr	r3, [pc, #508]	; (8003424 <moveUltraEnd+0x24c>)
 8003226:	663b      	str	r3, [r7, #96]	; 0x60
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };


	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8003228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800322c:	2224      	movs	r2, #36	; 0x24
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f00c fe03 	bl	800fe3c <memset>
 8003236:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323c:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003240:	637b      	str	r3, [r7, #52]	; 0x34
 8003242:	f640 3354 	movw	r3, #2900	; 0xb54
 8003246:	63bb      	str	r3, [r7, #56]	; 0x38
 8003248:	4b76      	ldr	r3, [pc, #472]	; (8003424 <moveUltraEnd+0x24c>)
 800324a:	63fb      	str	r3, [r7, #60]	; 0x3c
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 800324c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003250:	4618      	mov	r0, r3
 8003252:	f003 f9cb 	bl	80065ec <PIDController_Init>
	PIDController_Init(&pidRight);
 8003256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800325a:	4618      	mov	r0, r3
 800325c:	f003 f9c6 	bl	80065ec <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8003260:	4b71      	ldr	r3, [pc, #452]	; (8003428 <moveUltraEnd+0x250>)
 8003262:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8003266:	4b71      	ldr	r3, [pc, #452]	; (800342c <moveUltraEnd+0x254>)
 8003268:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 800326c:	4b70      	ldr	r3, [pc, #448]	; (8003430 <moveUltraEnd+0x258>)
 800326e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8003272:	213c      	movs	r1, #60	; 0x3c
 8003274:	486f      	ldr	r0, [pc, #444]	; (8003434 <moveUltraEnd+0x25c>)
 8003276:	f007 fdbd 	bl	800adf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 800327a:	213c      	movs	r1, #60	; 0x3c
 800327c:	486e      	ldr	r0, [pc, #440]	; (8003438 <moveUltraEnd+0x260>)
 800327e:	f007 fdb9 	bl	800adf4 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003282:	4b6c      	ldr	r3, [pc, #432]	; (8003434 <moveUltraEnd+0x25c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 800328c:	4b6a      	ldr	r3, [pc, #424]	; (8003438 <moveUltraEnd+0x260>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8003296:	f003 fe93 	bl	8006fc0 <HAL_GetTick>
 800329a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 800329e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	actualAngle = 0.00;
 80032c2:	495e      	ldr	r1, [pc, #376]	; (800343c <moveUltraEnd+0x264>)
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9c1 2300 	strd	r2, r3, [r1]
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 3000;
 80032d0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80032d4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 3000;
 80032d8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80032dc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80032e0:	2201      	movs	r2, #1
 80032e2:	2108      	movs	r1, #8
 80032e4:	4856      	ldr	r0, [pc, #344]	; (8003440 <moveUltraEnd+0x268>)
 80032e6:	f004 f9e9 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80032ea:	2200      	movs	r2, #0
 80032ec:	2104      	movs	r1, #4
 80032ee:	4854      	ldr	r0, [pc, #336]	; (8003440 <moveUltraEnd+0x268>)
 80032f0:	f004 f9e4 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80032f4:	2201      	movs	r2, #1
 80032f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032fa:	4852      	ldr	r0, [pc, #328]	; (8003444 <moveUltraEnd+0x26c>)
 80032fc:	f004 f9de 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003300:	2200      	movs	r2, #0
 8003302:	2120      	movs	r1, #32
 8003304:	4850      	ldr	r0, [pc, #320]	; (8003448 <moveUltraEnd+0x270>)
 8003306:	f004 f9d9 	bl	80076bc <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for(;;)
	{

		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800330a:	4b44      	ldr	r3, [pc, #272]	; (800341c <moveUltraEnd+0x244>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8003312:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8003314:	4b41      	ldr	r3, [pc, #260]	; (800341c <moveUltraEnd+0x244>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800331c:	63da      	str	r2, [r3, #60]	; 0x3c
		 currTime = HAL_GetTick();
 800331e:	f003 fe4f 	bl	8006fc0 <HAL_GetTick>
 8003322:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		 moving = 1;
 8003326:	4b49      	ldr	r3, [pc, #292]	; (800344c <moveUltraEnd+0x274>)
 8003328:	2201      	movs	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]

		 if (currTime-prevTime > 60L)
 800332c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b3c      	cmp	r3, #60	; 0x3c
 8003338:	d9e7      	bls.n	800330a <moveUltraEnd+0x132>
		 {
			 leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 800333a:	4b3e      	ldr	r3, [pc, #248]	; (8003434 <moveUltraEnd+0x25c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			 rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8003344:	4b3c      	ldr	r3, [pc, #240]	; (8003438 <moveUltraEnd+0x260>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	67fb      	str	r3, [r7, #124]	; 0x7c

			 diffLeft = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 diffRight = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8003358:	4b36      	ldr	r3, [pc, #216]	; (8003434 <moveUltraEnd+0x25c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	2b10      	cmp	r3, #16
 8003364:	d118      	bne.n	8003398 <moveUltraEnd+0x1c0>
			 {
				 if (leftTick < leftTick_prev)
 8003366:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800336a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800336e:	429a      	cmp	r2, r3
 8003370:	da07      	bge.n	8003382 <moveUltraEnd+0x1aa>
					 diffLeft = leftTick_prev - leftTick;
 8003372:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003376:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003380:	e022      	b.n	80033c8 <moveUltraEnd+0x1f0>
				 else
					 diffLeft = (65535 - leftTick) + leftTick_prev;
 8003382:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003386:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800338a:	33ff      	adds	r3, #255	; 0xff
 800338c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003390:	4413      	add	r3, r2
 8003392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003396:	e017      	b.n	80033c8 <moveUltraEnd+0x1f0>
			 }
			 else
			 {
				 if (leftTick > leftTick_prev)
 8003398:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800339c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033a0:	429a      	cmp	r2, r3
 80033a2:	dd07      	ble.n	80033b4 <moveUltraEnd+0x1dc>
					 diffLeft = leftTick - leftTick_prev;
 80033a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033b2:	e009      	b.n	80033c8 <moveUltraEnd+0x1f0>
				 else
					 diffLeft = 65535 - leftTick_prev + leftTick;
 80033b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033b8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80033bc:	33ff      	adds	r3, #255	; 0xff
 80033be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033c2:	4413      	add	r3, r2
 80033c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 }

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 80033c8:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <moveUltraEnd+0x260>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d115      	bne.n	8003402 <moveUltraEnd+0x22a>
			 {
				 if (rightTick < rightTick_prev)
 80033d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80033d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033dc:	429a      	cmp	r2, r3
 80033de:	da06      	bge.n	80033ee <moveUltraEnd+0x216>
					 diffRight = rightTick_prev - rightTick;
 80033e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033ec:	e039      	b.n	8003462 <moveUltraEnd+0x28a>
				 else
					 diffRight = (65535 - rightTick) + rightTick_prev;
 80033ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033f0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80033f4:	33ff      	adds	r3, #255	; 0xff
 80033f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033fa:	4413      	add	r3, r2
 80033fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003400:	e02f      	b.n	8003462 <moveUltraEnd+0x28a>
			 }
			 else
			 {
				 if (rightTick > rightTick_prev)
 8003402:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003408:	429a      	cmp	r2, r3
 800340a:	dd21      	ble.n	8003450 <moveUltraEnd+0x278>
					 diffRight = rightTick - rightTick_prev;
 800340c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800340e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003418:	e023      	b.n	8003462 <moveUltraEnd+0x28a>
 800341a:	bf00      	nop
 800341c:	20000378 	.word	0x20000378
 8003420:	20000258 	.word	0x20000258
 8003424:	3d4ccccd 	.word	0x3d4ccccd
 8003428:	44440000 	.word	0x44440000
 800342c:	4442c000 	.word	0x4442c000
 8003430:	41b33333 	.word	0x41b33333
 8003434:	200002a0 	.word	0x200002a0
 8003438:	20000330 	.word	0x20000330
 800343c:	20000420 	.word	0x20000420
 8003440:	40020000 	.word	0x40020000
 8003444:	40021000 	.word	0x40021000
 8003448:	40020800 	.word	0x40020800
 800344c:	20000414 	.word	0x20000414
				 else
					 diffRight = 65535 - rightTick_prev + rightTick;
 8003450:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003454:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003458:	33ff      	adds	r3, #255	; 0xff
 800345a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800345c:	4413      	add	r3, r2
 800345e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			 }

			 // left measured distance
			 distLeft = ((float)diffLeft/wheel_rotationTicksL) * wheel_circumference;
 8003462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800346e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003476:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800347a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
			 totalDistance_left += distLeft;
 8003482:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8003486:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800348a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			 // right measured distance
			 distRight = ((float)diffRight/wheel_rotationTicksR) * wheel_circumference;
 8003492:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800349e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80034a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034a6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80034aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ae:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
			 totalDistance_right += distRight;
 80034b2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80034b6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80034ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034be:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

 			 //if robot doesnt go straight, using gyro to adjust, straight = 145
 			 if (actualAngle < 0.00) //veering right
 80034c2:	4b46      	ldr	r3, [pc, #280]	; (80035dc <moveUltraEnd+0x404>)
 80034c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	f7fd fb04 	bl	8000adc <__aeabi_dcmplt>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d006      	beq.n	80034e8 <moveUltraEnd+0x310>
 			 {

 				 htim1.Instance -> CCR4 = 138; //left abit
 80034da:	4b41      	ldr	r3, [pc, #260]	; (80035e0 <moveUltraEnd+0x408>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	228a      	movs	r2, #138	; 0x8a
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40
 				 osDelay(10);
 80034e2:	200a      	movs	r0, #10
 80034e4:	f009 ff53 	bl	800d38e <osDelay>
 			 }
 			 if (actualAngle > 0.00)//veering left
 80034e8:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <moveUltraEnd+0x404>)
 80034ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	f7fd fb0f 	bl	8000b18 <__aeabi_dcmpgt>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d006      	beq.n	800350e <moveUltraEnd+0x336>
 			 {

 				 htim1.Instance -> CCR4 = 152; //right a bit
 8003500:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <moveUltraEnd+0x408>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2298      	movs	r2, #152	; 0x98
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
 				 osDelay(10);
 8003508:	200a      	movs	r0, #10
 800350a:	f009 ff40 	bl	800d38e <osDelay>
 			 }
 			 if (actualAngle == 0.00)
 800350e:	4b33      	ldr	r3, [pc, #204]	; (80035dc <moveUltraEnd+0x404>)
 8003510:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	f7fd fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <moveUltraEnd+0x35c>
 			 {
 //				 servo = STRAIGHT;
 				 htim1.Instance -> CCR4 = STRAIGHT; //Straight
 8003526:	4b2e      	ldr	r3, [pc, #184]	; (80035e0 <moveUltraEnd+0x408>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2295      	movs	r2, #149	; 0x95
 800352c:	641a      	str	r2, [r3, #64]	; 0x40
 				 osDelay(10);
 800352e:	200a      	movs	r0, #10
 8003530:	f009 ff2d 	bl	800d38e <osDelay>
 			 }

			prevTime = currTime;
 8003534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003538:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 800353c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8003544:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 8)
 800354a:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <moveUltraEnd+0x40c>)
 800354c:	edd3 7a00 	vldr	s15, [r3]
 8003550:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355c:	d417      	bmi.n	800358e <moveUltraEnd+0x3b6>
			{
				break;
			}
			 sprintf(messageA, "angle %5d\0", (int)(actualAngle));
 800355e:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <moveUltraEnd+0x404>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	f7fd faf6 	bl	8000b58 <__aeabi_d2iz>
 800356c:	4602      	mov	r2, r0
 800356e:	f107 0318 	add.w	r3, r7, #24
 8003572:	491d      	ldr	r1, [pc, #116]	; (80035e8 <moveUltraEnd+0x410>)
 8003574:	4618      	mov	r0, r3
 8003576:	f00d fae9 	bl	8010b4c <siprintf>
			 OLED_ShowString(10,20, messageA);
 800357a:	f107 0318 	add.w	r3, r7, #24
 800357e:	461a      	mov	r2, r3
 8003580:	2114      	movs	r1, #20
 8003582:	200a      	movs	r0, #10
 8003584:	f002 ff74 	bl	8006470 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8003588:	f002 fdfe 	bl	8006188 <OLED_Refresh_Gram>
		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800358c:	e6bd      	b.n	800330a <moveUltraEnd+0x132>
				break;
 800358e:	bf00      	nop
		 }
	}

//	moving = 0;
	move(1,0);
 8003590:	2000      	movs	r0, #0
 8003592:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003596:	f001 faa9 	bl	8004aec <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800359a:	2201      	movs	r2, #1
 800359c:	2108      	movs	r1, #8
 800359e:	4813      	ldr	r0, [pc, #76]	; (80035ec <moveUltraEnd+0x414>)
 80035a0:	f004 f88c 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80035a4:	2200      	movs	r2, #0
 80035a6:	2104      	movs	r1, #4
 80035a8:	4810      	ldr	r0, [pc, #64]	; (80035ec <moveUltraEnd+0x414>)
 80035aa:	f004 f887 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80035ae:	2201      	movs	r2, #1
 80035b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035b4:	480e      	ldr	r0, [pc, #56]	; (80035f0 <moveUltraEnd+0x418>)
 80035b6:	f004 f881 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80035ba:	2200      	movs	r2, #0
 80035bc:	2120      	movs	r1, #32
 80035be:	480d      	ldr	r0, [pc, #52]	; (80035f4 <moveUltraEnd+0x41c>)
 80035c0:	f004 f87c 	bl	80076bc <HAL_GPIO_WritePin>
	htim1.Instance -> CCR4 = STRAIGHT; //centre
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <moveUltraEnd+0x408>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2295      	movs	r2, #149	; 0x95
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 80035cc:	200a      	movs	r0, #10
 80035ce:	f009 fede 	bl	800d38e <osDelay>
	return;
 80035d2:	bf00      	nop

}
 80035d4:	37b8      	adds	r7, #184	; 0xb8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000420 	.word	0x20000420
 80035e0:	20000258 	.word	0x20000258
 80035e4:	20000444 	.word	0x20000444
 80035e8:	08014768 	.word	0x08014768
 80035ec:	40020000 	.word	0x40020000
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40020800 	.word	0x40020800

080035f8 <moveUltraEndLeft>:

void moveUltraEndLeft()
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b0ae      	sub	sp, #184	; 0xb8
 80035fc:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80035fe:	2100      	movs	r1, #0
 8003600:	488e      	ldr	r0, [pc, #568]	; (800383c <moveUltraEndLeft+0x244>)
 8003602:	f007 f911 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003606:	2108      	movs	r1, #8
 8003608:	488c      	ldr	r0, [pc, #560]	; (800383c <moveUltraEndLeft+0x244>)
 800360a:	f007 f90d 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800360e:	210c      	movs	r1, #12
 8003610:	488b      	ldr	r0, [pc, #556]	; (8003840 <moveUltraEndLeft+0x248>)
 8003612:	f007 f909 	bl	800a828 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8003616:	4b8a      	ldr	r3, [pc, #552]	; (8003840 <moveUltraEndLeft+0x248>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2295      	movs	r2, #149	; 0x95
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 800361e:	2064      	movs	r0, #100	; 0x64
 8003620:	f009 feb5 	bl	800d38e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8003624:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003628:	2224      	movs	r2, #36	; 0x24
 800362a:	2100      	movs	r1, #0
 800362c:	4618      	mov	r0, r3
 800362e:	f00c fc05 	bl	800fe3c <memset>
 8003632:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003636:	653b      	str	r3, [r7, #80]	; 0x50
 8003638:	f240 53aa 	movw	r3, #1450	; 0x5aa
 800363c:	65bb      	str	r3, [r7, #88]	; 0x58
 800363e:	f640 3354 	movw	r3, #2900	; 0xb54
 8003642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003644:	4b7f      	ldr	r3, [pc, #508]	; (8003844 <moveUltraEndLeft+0x24c>)
 8003646:	663b      	str	r3, [r7, #96]	; 0x60
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };


	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8003648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800364c:	2224      	movs	r2, #36	; 0x24
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f00c fbf3 	bl	800fe3c <memset>
 8003656:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800365c:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
 8003662:	f640 3354 	movw	r3, #2900	; 0xb54
 8003666:	63bb      	str	r3, [r7, #56]	; 0x38
 8003668:	4b76      	ldr	r3, [pc, #472]	; (8003844 <moveUltraEndLeft+0x24c>)
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 800366c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003670:	4618      	mov	r0, r3
 8003672:	f002 ffbb 	bl	80065ec <PIDController_Init>
	PIDController_Init(&pidRight);
 8003676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800367a:	4618      	mov	r0, r3
 800367c:	f002 ffb6 	bl	80065ec <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8003680:	4b71      	ldr	r3, [pc, #452]	; (8003848 <moveUltraEndLeft+0x250>)
 8003682:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8003686:	4b71      	ldr	r3, [pc, #452]	; (800384c <moveUltraEndLeft+0x254>)
 8003688:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 800368c:	4b70      	ldr	r3, [pc, #448]	; (8003850 <moveUltraEndLeft+0x258>)
 800368e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8003692:	213c      	movs	r1, #60	; 0x3c
 8003694:	486f      	ldr	r0, [pc, #444]	; (8003854 <moveUltraEndLeft+0x25c>)
 8003696:	f007 fbad 	bl	800adf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 800369a:	213c      	movs	r1, #60	; 0x3c
 800369c:	486e      	ldr	r0, [pc, #440]	; (8003858 <moveUltraEndLeft+0x260>)
 800369e:	f007 fba9 	bl	800adf4 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80036a2:	4b6c      	ldr	r3, [pc, #432]	; (8003854 <moveUltraEndLeft+0x25c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 80036ac:	4b6a      	ldr	r3, [pc, #424]	; (8003858 <moveUltraEndLeft+0x260>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 80036b6:	f003 fc83 	bl	8006fc0 <HAL_GetTick>
 80036ba:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 80036be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 3000;
 80036e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80036e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 3000;
 80036ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80036ee:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80036f2:	2201      	movs	r2, #1
 80036f4:	2108      	movs	r1, #8
 80036f6:	4859      	ldr	r0, [pc, #356]	; (800385c <moveUltraEndLeft+0x264>)
 80036f8:	f003 ffe0 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80036fc:	2200      	movs	r2, #0
 80036fe:	2104      	movs	r1, #4
 8003700:	4856      	ldr	r0, [pc, #344]	; (800385c <moveUltraEndLeft+0x264>)
 8003702:	f003 ffdb 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003706:	2201      	movs	r2, #1
 8003708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800370c:	4854      	ldr	r0, [pc, #336]	; (8003860 <moveUltraEndLeft+0x268>)
 800370e:	f003 ffd5 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003712:	2200      	movs	r2, #0
 8003714:	2120      	movs	r1, #32
 8003716:	4853      	ldr	r0, [pc, #332]	; (8003864 <moveUltraEndLeft+0x26c>)
 8003718:	f003 ffd0 	bl	80076bc <HAL_GPIO_WritePin>

	totalAngle = 0.0;
 800371c:	4952      	ldr	r1, [pc, #328]	; (8003868 <moveUltraEndLeft+0x270>)
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	e9c1 2300 	strd	r2, r3, [r1]

	/*Infinite loop*/
	for(;;)
	{

		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800372a:	4b44      	ldr	r3, [pc, #272]	; (800383c <moveUltraEndLeft+0x244>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8003732:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8003734:	4b41      	ldr	r3, [pc, #260]	; (800383c <moveUltraEndLeft+0x244>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800373c:	63da      	str	r2, [r3, #60]	; 0x3c
		 currTime = HAL_GetTick();
 800373e:	f003 fc3f 	bl	8006fc0 <HAL_GetTick>
 8003742:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		 moving = 1;
 8003746:	4b49      	ldr	r3, [pc, #292]	; (800386c <moveUltraEndLeft+0x274>)
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]

		 if (currTime-prevTime > 60L)
 800374c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b3c      	cmp	r3, #60	; 0x3c
 8003758:	d9e7      	bls.n	800372a <moveUltraEndLeft+0x132>
		 {
			 leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 800375a:	4b3e      	ldr	r3, [pc, #248]	; (8003854 <moveUltraEndLeft+0x25c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			 rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8003764:	4b3c      	ldr	r3, [pc, #240]	; (8003858 <moveUltraEndLeft+0x260>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	67fb      	str	r3, [r7, #124]	; 0x7c

			 diffLeft = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 diffRight = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8003778:	4b36      	ldr	r3, [pc, #216]	; (8003854 <moveUltraEndLeft+0x25c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b10      	cmp	r3, #16
 8003784:	d118      	bne.n	80037b8 <moveUltraEndLeft+0x1c0>
			 {
				 if (leftTick < leftTick_prev)
 8003786:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800378a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800378e:	429a      	cmp	r2, r3
 8003790:	da07      	bge.n	80037a2 <moveUltraEndLeft+0x1aa>
					 diffLeft = leftTick_prev - leftTick;
 8003792:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003796:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037a0:	e022      	b.n	80037e8 <moveUltraEndLeft+0x1f0>
				 else
					 diffLeft = (65535 - leftTick) + leftTick_prev;
 80037a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037a6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80037aa:	33ff      	adds	r3, #255	; 0xff
 80037ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037b0:	4413      	add	r3, r2
 80037b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037b6:	e017      	b.n	80037e8 <moveUltraEndLeft+0x1f0>
			 }
			 else
			 {
				 if (leftTick > leftTick_prev)
 80037b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037c0:	429a      	cmp	r2, r3
 80037c2:	dd07      	ble.n	80037d4 <moveUltraEndLeft+0x1dc>
					 diffLeft = leftTick - leftTick_prev;
 80037c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037d2:	e009      	b.n	80037e8 <moveUltraEndLeft+0x1f0>
				 else
					 diffLeft = 65535 - leftTick_prev + leftTick;
 80037d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037d8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80037dc:	33ff      	adds	r3, #255	; 0xff
 80037de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037e2:	4413      	add	r3, r2
 80037e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 }

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <moveUltraEndLeft+0x260>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d115      	bne.n	8003822 <moveUltraEndLeft+0x22a>
			 {
				 if (rightTick < rightTick_prev)
 80037f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80037f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037fc:	429a      	cmp	r2, r3
 80037fe:	da06      	bge.n	800380e <moveUltraEndLeft+0x216>
					 diffRight = rightTick_prev - rightTick;
 8003800:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003804:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800380c:	e039      	b.n	8003882 <moveUltraEndLeft+0x28a>
				 else
					 diffRight = (65535 - rightTick) + rightTick_prev;
 800380e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003810:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003814:	33ff      	adds	r3, #255	; 0xff
 8003816:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800381a:	4413      	add	r3, r2
 800381c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003820:	e02f      	b.n	8003882 <moveUltraEndLeft+0x28a>
			 }
			 else
			 {
				 if (rightTick > rightTick_prev)
 8003822:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003828:	429a      	cmp	r2, r3
 800382a:	dd21      	ble.n	8003870 <moveUltraEndLeft+0x278>
					 diffRight = rightTick - rightTick_prev;
 800382c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800382e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003838:	e023      	b.n	8003882 <moveUltraEndLeft+0x28a>
 800383a:	bf00      	nop
 800383c:	20000378 	.word	0x20000378
 8003840:	20000258 	.word	0x20000258
 8003844:	3d4ccccd 	.word	0x3d4ccccd
 8003848:	44440000 	.word	0x44440000
 800384c:	4442c000 	.word	0x4442c000
 8003850:	41b33333 	.word	0x41b33333
 8003854:	200002a0 	.word	0x200002a0
 8003858:	20000330 	.word	0x20000330
 800385c:	40020000 	.word	0x40020000
 8003860:	40021000 	.word	0x40021000
 8003864:	40020800 	.word	0x40020800
 8003868:	20000418 	.word	0x20000418
 800386c:	20000414 	.word	0x20000414
				 else
					 diffRight = 65535 - rightTick_prev + rightTick;
 8003870:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003874:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003878:	33ff      	adds	r3, #255	; 0xff
 800387a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800387c:	4413      	add	r3, r2
 800387e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			 }

			 // left measured distance
			 distLeft = ((float)diffLeft/wheel_rotationTicksL) * wheel_circumference;
 8003882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800388e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003896:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800389a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
			 totalDistance_left += distLeft;
 80038a2:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80038a6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80038aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ae:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			 // right measured distance
			 distRight = ((float)diffRight/wheel_rotationTicksR) * wheel_circumference;
 80038b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80038be:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80038c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80038ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ce:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
			 totalDistance_right += distRight;
 80038d2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80038d6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80038da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038de:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

 			 //if robot doesnt go straight, using gyro to adjust, straight = 145
 			 if (totalAngle < 0.00) //veering right
 80038e2:	4b46      	ldr	r3, [pc, #280]	; (80039fc <moveUltraEndLeft+0x404>)
 80038e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	f7fd f8f4 	bl	8000adc <__aeabi_dcmplt>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d006      	beq.n	8003908 <moveUltraEndLeft+0x310>
 			 {

 				 htim1.Instance -> CCR4 = 138; //left abit
 80038fa:	4b41      	ldr	r3, [pc, #260]	; (8003a00 <moveUltraEndLeft+0x408>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	228a      	movs	r2, #138	; 0x8a
 8003900:	641a      	str	r2, [r3, #64]	; 0x40
 				 osDelay(10);
 8003902:	200a      	movs	r0, #10
 8003904:	f009 fd43 	bl	800d38e <osDelay>
 			 }
 			 if (totalAngle > 0.00)//veering left
 8003908:	4b3c      	ldr	r3, [pc, #240]	; (80039fc <moveUltraEndLeft+0x404>)
 800390a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	f7fd f8ff 	bl	8000b18 <__aeabi_dcmpgt>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <moveUltraEndLeft+0x336>
 			 {

 				 htim1.Instance -> CCR4 = 152; //right a bit
 8003920:	4b37      	ldr	r3, [pc, #220]	; (8003a00 <moveUltraEndLeft+0x408>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2298      	movs	r2, #152	; 0x98
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
 				 osDelay(10);
 8003928:	200a      	movs	r0, #10
 800392a:	f009 fd30 	bl	800d38e <osDelay>
 			 }
 			 if (totalAngle == 0.00)
 800392e:	4b33      	ldr	r3, [pc, #204]	; (80039fc <moveUltraEndLeft+0x404>)
 8003930:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	f7fd f8c4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d006      	beq.n	8003954 <moveUltraEndLeft+0x35c>
 			 {
 //				 servo = STRAIGHT;
 				 htim1.Instance -> CCR4 = STRAIGHT; //Straight
 8003946:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <moveUltraEndLeft+0x408>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2295      	movs	r2, #149	; 0x95
 800394c:	641a      	str	r2, [r3, #64]	; 0x40
 				 osDelay(10);
 800394e:	200a      	movs	r0, #10
 8003950:	f009 fd1d 	bl	800d38e <osDelay>
 			 }

			prevTime = currTime;
 8003954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 800395c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8003964:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003966:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 8)
 800396a:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <moveUltraEndLeft+0x40c>)
 800396c:	edd3 7a00 	vldr	s15, [r3]
 8003970:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397c:	d417      	bmi.n	80039ae <moveUltraEndLeft+0x3b6>
			{
				break;
			}
			 sprintf(messageA, "angle %5d\0", (int)(actualAngle));
 800397e:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <moveUltraEndLeft+0x410>)
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	f7fd f8e6 	bl	8000b58 <__aeabi_d2iz>
 800398c:	4602      	mov	r2, r0
 800398e:	f107 0318 	add.w	r3, r7, #24
 8003992:	491e      	ldr	r1, [pc, #120]	; (8003a0c <moveUltraEndLeft+0x414>)
 8003994:	4618      	mov	r0, r3
 8003996:	f00d f8d9 	bl	8010b4c <siprintf>
			 OLED_ShowString(10,20, messageA);
 800399a:	f107 0318 	add.w	r3, r7, #24
 800399e:	461a      	mov	r2, r3
 80039a0:	2114      	movs	r1, #20
 80039a2:	200a      	movs	r0, #10
 80039a4:	f002 fd64 	bl	8006470 <OLED_ShowString>
			 OLED_Refresh_Gram();
 80039a8:	f002 fbee 	bl	8006188 <OLED_Refresh_Gram>
		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80039ac:	e6bd      	b.n	800372a <moveUltraEndLeft+0x132>
				break;
 80039ae:	bf00      	nop
		 }
	}

//	moving = 0;
	move(1,0);
 80039b0:	2000      	movs	r0, #0
 80039b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80039b6:	f001 f899 	bl	8004aec <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80039ba:	2201      	movs	r2, #1
 80039bc:	2108      	movs	r1, #8
 80039be:	4814      	ldr	r0, [pc, #80]	; (8003a10 <moveUltraEndLeft+0x418>)
 80039c0:	f003 fe7c 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80039c4:	2200      	movs	r2, #0
 80039c6:	2104      	movs	r1, #4
 80039c8:	4811      	ldr	r0, [pc, #68]	; (8003a10 <moveUltraEndLeft+0x418>)
 80039ca:	f003 fe77 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80039ce:	2201      	movs	r2, #1
 80039d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039d4:	480f      	ldr	r0, [pc, #60]	; (8003a14 <moveUltraEndLeft+0x41c>)
 80039d6:	f003 fe71 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80039da:	2200      	movs	r2, #0
 80039dc:	2120      	movs	r1, #32
 80039de:	480e      	ldr	r0, [pc, #56]	; (8003a18 <moveUltraEndLeft+0x420>)
 80039e0:	f003 fe6c 	bl	80076bc <HAL_GPIO_WritePin>
	htim1.Instance -> CCR4 = STRAIGHT; //centre
 80039e4:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <moveUltraEndLeft+0x408>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2295      	movs	r2, #149	; 0x95
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 80039ec:	200a      	movs	r0, #10
 80039ee:	f009 fcce 	bl	800d38e <osDelay>
	return;
 80039f2:	bf00      	nop

}
 80039f4:	37b8      	adds	r7, #184	; 0xb8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000418 	.word	0x20000418
 8003a00:	20000258 	.word	0x20000258
 8003a04:	20000444 	.word	0x20000444
 8003a08:	20000420 	.word	0x20000420
 8003a0c:	08014768 	.word	0x08014768
 8003a10:	40020000 	.word	0x40020000
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40020800 	.word	0x40020800

08003a1c <moveUltraExtreme>:

void moveUltraExtreme()
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b0ae      	sub	sp, #184	; 0xb8
 8003a20:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003a22:	2100      	movs	r1, #0
 8003a24:	488a      	ldr	r0, [pc, #552]	; (8003c50 <moveUltraExtreme+0x234>)
 8003a26:	f006 feff 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003a2a:	2108      	movs	r1, #8
 8003a2c:	4888      	ldr	r0, [pc, #544]	; (8003c50 <moveUltraExtreme+0x234>)
 8003a2e:	f006 fefb 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003a32:	210c      	movs	r1, #12
 8003a34:	4887      	ldr	r0, [pc, #540]	; (8003c54 <moveUltraExtreme+0x238>)
 8003a36:	f006 fef7 	bl	800a828 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8003a3a:	4b86      	ldr	r3, [pc, #536]	; (8003c54 <moveUltraExtreme+0x238>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2295      	movs	r2, #149	; 0x95
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 8003a42:	2064      	movs	r0, #100	; 0x64
 8003a44:	f009 fca3 	bl	800d38e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8003a48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a4c:	2224      	movs	r2, #36	; 0x24
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f00c f9f3 	bl	800fe3c <memset>
 8003a56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a5c:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003a60:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a62:	f640 3354 	movw	r3, #2900	; 0xb54
 8003a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a68:	4b7b      	ldr	r3, [pc, #492]	; (8003c58 <moveUltraExtreme+0x23c>)
 8003a6a:	663b      	str	r3, [r7, #96]	; 0x60
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };


	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8003a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a70:	2224      	movs	r2, #36	; 0x24
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f00c f9e1 	bl	800fe3c <memset>
 8003a7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a80:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
 8003a86:	f640 3354 	movw	r3, #2900	; 0xb54
 8003a8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a8c:	4b72      	ldr	r3, [pc, #456]	; (8003c58 <moveUltraExtreme+0x23c>)
 8003a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8003a90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a94:	4618      	mov	r0, r3
 8003a96:	f002 fda9 	bl	80065ec <PIDController_Init>
	PIDController_Init(&pidRight);
 8003a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f002 fda4 	bl	80065ec <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8003aa4:	4b6d      	ldr	r3, [pc, #436]	; (8003c5c <moveUltraExtreme+0x240>)
 8003aa6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8003aaa:	4b6d      	ldr	r3, [pc, #436]	; (8003c60 <moveUltraExtreme+0x244>)
 8003aac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 8003ab0:	4b6c      	ldr	r3, [pc, #432]	; (8003c64 <moveUltraExtreme+0x248>)
 8003ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8003ab6:	213c      	movs	r1, #60	; 0x3c
 8003ab8:	486b      	ldr	r0, [pc, #428]	; (8003c68 <moveUltraExtreme+0x24c>)
 8003aba:	f007 f99b 	bl	800adf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8003abe:	213c      	movs	r1, #60	; 0x3c
 8003ac0:	486a      	ldr	r0, [pc, #424]	; (8003c6c <moveUltraExtreme+0x250>)
 8003ac2:	f007 f997 	bl	800adf4 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003ac6:	4b68      	ldr	r3, [pc, #416]	; (8003c68 <moveUltraExtreme+0x24c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8003ad0:	4b66      	ldr	r3, [pc, #408]	; (8003c6c <moveUltraExtreme+0x250>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8003ada:	f003 fa71 	bl	8006fc0 <HAL_GetTick>
 8003ade:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 8003ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8003b06:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003b0a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 2000;
 8003b0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003b12:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003b16:	2201      	movs	r2, #1
 8003b18:	2108      	movs	r1, #8
 8003b1a:	4855      	ldr	r0, [pc, #340]	; (8003c70 <moveUltraExtreme+0x254>)
 8003b1c:	f003 fdce 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003b20:	2200      	movs	r2, #0
 8003b22:	2104      	movs	r1, #4
 8003b24:	4852      	ldr	r0, [pc, #328]	; (8003c70 <moveUltraExtreme+0x254>)
 8003b26:	f003 fdc9 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b30:	4850      	ldr	r0, [pc, #320]	; (8003c74 <moveUltraExtreme+0x258>)
 8003b32:	f003 fdc3 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003b36:	2200      	movs	r2, #0
 8003b38:	2120      	movs	r1, #32
 8003b3a:	484f      	ldr	r0, [pc, #316]	; (8003c78 <moveUltraExtreme+0x25c>)
 8003b3c:	f003 fdbe 	bl	80076bc <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for(;;)
	{

		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8003b40:	4b43      	ldr	r3, [pc, #268]	; (8003c50 <moveUltraExtreme+0x234>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8003b48:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8003b4a:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <moveUltraExtreme+0x234>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8003b52:	63da      	str	r2, [r3, #60]	; 0x3c
		 currTime = HAL_GetTick();
 8003b54:	f003 fa34 	bl	8006fc0 <HAL_GetTick>
 8003b58:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		 moving = 1;
 8003b5c:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <moveUltraExtreme+0x260>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]

		 if (currTime-prevTime > 60L)
 8003b62:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b3c      	cmp	r3, #60	; 0x3c
 8003b6e:	d9e7      	bls.n	8003b40 <moveUltraExtreme+0x124>
		 {
			 leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8003b70:	4b3d      	ldr	r3, [pc, #244]	; (8003c68 <moveUltraExtreme+0x24c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			 rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8003b7a:	4b3c      	ldr	r3, [pc, #240]	; (8003c6c <moveUltraExtreme+0x250>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	67fb      	str	r3, [r7, #124]	; 0x7c

			 diffLeft = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 diffRight = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8003b8e:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <moveUltraExtreme+0x24c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d118      	bne.n	8003bce <moveUltraExtreme+0x1b2>
			 {
				 if (leftTick < leftTick_prev)
 8003b9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ba0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	da07      	bge.n	8003bb8 <moveUltraExtreme+0x19c>
					 diffLeft = leftTick_prev - leftTick;
 8003ba8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bb6:	e022      	b.n	8003bfe <moveUltraExtreme+0x1e2>
				 else
					 diffLeft = (65535 - leftTick) + leftTick_prev;
 8003bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bbc:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003bc0:	33ff      	adds	r3, #255	; 0xff
 8003bc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bcc:	e017      	b.n	8003bfe <moveUltraExtreme+0x1e2>
			 }
			 else
			 {
				 if (leftTick > leftTick_prev)
 8003bce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	dd07      	ble.n	8003bea <moveUltraExtreme+0x1ce>
					 diffLeft = leftTick - leftTick_prev;
 8003bda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003be8:	e009      	b.n	8003bfe <moveUltraExtreme+0x1e2>
				 else
					 diffLeft = 65535 - leftTick_prev + leftTick;
 8003bea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bee:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003bf2:	33ff      	adds	r3, #255	; 0xff
 8003bf4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 }

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <moveUltraExtreme+0x250>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d115      	bne.n	8003c38 <moveUltraExtreme+0x21c>
			 {
				 if (rightTick < rightTick_prev)
 8003c0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c12:	429a      	cmp	r2, r3
 8003c14:	da06      	bge.n	8003c24 <moveUltraExtreme+0x208>
					 diffRight = rightTick_prev - rightTick;
 8003c16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c22:	e036      	b.n	8003c92 <moveUltraExtreme+0x276>
				 else
					 diffRight = (65535 - rightTick) + rightTick_prev;
 8003c24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c26:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003c2a:	33ff      	adds	r3, #255	; 0xff
 8003c2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c30:	4413      	add	r3, r2
 8003c32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c36:	e02c      	b.n	8003c92 <moveUltraExtreme+0x276>
			 }
			 else
			 {
				 if (rightTick > rightTick_prev)
 8003c38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	dd1e      	ble.n	8003c80 <moveUltraExtreme+0x264>
					 diffRight = rightTick - rightTick_prev;
 8003c42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c4e:	e020      	b.n	8003c92 <moveUltraExtreme+0x276>
 8003c50:	20000378 	.word	0x20000378
 8003c54:	20000258 	.word	0x20000258
 8003c58:	3d4ccccd 	.word	0x3d4ccccd
 8003c5c:	44440000 	.word	0x44440000
 8003c60:	4442c000 	.word	0x4442c000
 8003c64:	41b33333 	.word	0x41b33333
 8003c68:	200002a0 	.word	0x200002a0
 8003c6c:	20000330 	.word	0x20000330
 8003c70:	40020000 	.word	0x40020000
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40020800 	.word	0x40020800
 8003c7c:	20000414 	.word	0x20000414
				 else
					 diffRight = 65535 - rightTick_prev + rightTick;
 8003c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c84:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003c88:	33ff      	adds	r3, #255	; 0xff
 8003c8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			 }

			 // left measured distance
			 distLeft = ((float)diffLeft/wheel_rotationTicksL) * wheel_circumference;
 8003c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c9e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cae:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
			 totalDistance_left += distLeft;
 8003cb2:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8003cb6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cbe:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			 // right measured distance
			 distRight = ((float)diffRight/wheel_rotationTicksR) * wheel_circumference;
 8003cc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003cce:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cde:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
			 totalDistance_right += distRight;
 8003ce2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003ce6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cee:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

			 //if robot doesnt go straight, using gyro to adjust, straight = 145
			 if (actualAngle < 0.00) //veering right
 8003cf2:	4b3a      	ldr	r3, [pc, #232]	; (8003ddc <moveUltraExtreme+0x3c0>)
 8003cf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	f7fc feec 	bl	8000adc <__aeabi_dcmplt>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d006      	beq.n	8003d18 <moveUltraExtreme+0x2fc>
			 {

				 htim1.Instance -> CCR4 = 115; //left abit
 8003d0a:	4b35      	ldr	r3, [pc, #212]	; (8003de0 <moveUltraExtreme+0x3c4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2273      	movs	r2, #115	; 0x73
 8003d10:	641a      	str	r2, [r3, #64]	; 0x40
				 osDelay(10);
 8003d12:	200a      	movs	r0, #10
 8003d14:	f009 fb3b 	bl	800d38e <osDelay>
			 }
			 if (actualAngle > 0.00)//veering left
 8003d18:	4b30      	ldr	r3, [pc, #192]	; (8003ddc <moveUltraExtreme+0x3c0>)
 8003d1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	f7fc fef7 	bl	8000b18 <__aeabi_dcmpgt>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <moveUltraExtreme+0x322>
			 {

				 htim1.Instance -> CCR4 = 180; //right a bit
 8003d30:	4b2b      	ldr	r3, [pc, #172]	; (8003de0 <moveUltraExtreme+0x3c4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	22b4      	movs	r2, #180	; 0xb4
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40
				 osDelay(10);
 8003d38:	200a      	movs	r0, #10
 8003d3a:	f009 fb28 	bl	800d38e <osDelay>
			 }
			 if (actualAngle == 0.00)
 8003d3e:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <moveUltraExtreme+0x3c0>)
 8003d40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	f7fc febc 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d006      	beq.n	8003d64 <moveUltraExtreme+0x348>
			 {
//				 servo = STRAIGHT;
				 htim1.Instance -> CCR4 = STRAIGHT; //Straight
 8003d56:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <moveUltraExtreme+0x3c4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2295      	movs	r2, #149	; 0x95
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
				 osDelay(10);
 8003d5e:	200a      	movs	r0, #10
 8003d60:	f009 fb15 	bl	800d38e <osDelay>
			 }

			prevTime = currTime;
 8003d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 8003d6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8003d74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 16) // prev was 10
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <moveUltraExtreme+0x3c8>)
 8003d7c:	edd3 7a00 	vldr	s15, [r3]
 8003d80:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8c:	d400      	bmi.n	8003d90 <moveUltraExtreme+0x374>
		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8003d8e:	e6d7      	b.n	8003b40 <moveUltraExtreme+0x124>
			{
				break;
 8003d90:	bf00      	nop
			}
		 }
	}

//	moving = 0;
	move(1,0);
 8003d92:	2000      	movs	r0, #0
 8003d94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003d98:	f000 fea8 	bl	8004aec <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	2108      	movs	r1, #8
 8003da0:	4811      	ldr	r0, [pc, #68]	; (8003de8 <moveUltraExtreme+0x3cc>)
 8003da2:	f003 fc8b 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003da6:	2200      	movs	r2, #0
 8003da8:	2104      	movs	r1, #4
 8003daa:	480f      	ldr	r0, [pc, #60]	; (8003de8 <moveUltraExtreme+0x3cc>)
 8003dac:	f003 fc86 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003db0:	2201      	movs	r2, #1
 8003db2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003db6:	480d      	ldr	r0, [pc, #52]	; (8003dec <moveUltraExtreme+0x3d0>)
 8003db8:	f003 fc80 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2120      	movs	r1, #32
 8003dc0:	480b      	ldr	r0, [pc, #44]	; (8003df0 <moveUltraExtreme+0x3d4>)
 8003dc2:	f003 fc7b 	bl	80076bc <HAL_GPIO_WritePin>
	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8003dc6:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <moveUltraExtreme+0x3c4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2295      	movs	r2, #149	; 0x95
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8003dce:	200a      	movs	r0, #10
 8003dd0:	f009 fadd 	bl	800d38e <osDelay>
	return;
 8003dd4:	bf00      	nop

}
 8003dd6:	37b8      	adds	r7, #184	; 0xb8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20000420 	.word	0x20000420
 8003de0:	20000258 	.word	0x20000258
 8003de4:	20000444 	.word	0x20000444
 8003de8:	40020000 	.word	0x40020000
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40020800 	.word	0x40020800

08003df4 <sendToRPI>:
  * @brief send msg to RPI through UART after execute command
  * @param msg[] for the message to be sent
  * @retval None
  */
void sendToRPI(char* msg)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t *) msg,strlen(msg),0xFFFF);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7fc f9e7 	bl	80001d0 <strlen>
 8003e02:	4603      	mov	r3, r0
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4803      	ldr	r0, [pc, #12]	; (8003e1c <sendToRPI+0x28>)
 8003e0e:	f008 f982 	bl	800c116 <HAL_UART_Transmit>
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200003c0 	.word	0x200003c0

08003e20 <moveGyroPID>:

//gyro for straight

void moveGyroPID(float distance, int forward)
{
 8003e20:	b5b0      	push	{r4, r5, r7, lr}
 8003e22:	b0b0      	sub	sp, #192	; 0xc0
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	ed87 0a01 	vstr	s0, [r7, #4]
 8003e2a:	6038      	str	r0, [r7, #0]


	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	48c2      	ldr	r0, [pc, #776]	; (8004138 <moveGyroPID+0x318>)
 8003e30:	f006 fcfa 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003e34:	2108      	movs	r1, #8
 8003e36:	48c0      	ldr	r0, [pc, #768]	; (8004138 <moveGyroPID+0x318>)
 8003e38:	f006 fcf6 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003e3c:	210c      	movs	r1, #12
 8003e3e:	48bf      	ldr	r0, [pc, #764]	; (800413c <moveGyroPID+0x31c>)
 8003e40:	f006 fcf2 	bl	800a828 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8003e44:	4bbd      	ldr	r3, [pc, #756]	; (800413c <moveGyroPID+0x31c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2295      	movs	r2, #149	; 0x95
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(40);
 8003e4c:	2028      	movs	r0, #40	; 0x28
 8003e4e:	f009 fa9e 	bl	800d38e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8003e52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e56:	2224      	movs	r2, #36	; 0x24
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f00b ffee 	bl	800fe3c <memset>
 8003e60:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003e64:	657b      	str	r3, [r7, #84]	; 0x54
 8003e66:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e6c:	f640 3354 	movw	r3, #2900	; 0xb54
 8003e70:	663b      	str	r3, [r7, #96]	; 0x60
 8003e72:	4bb3      	ldr	r3, [pc, #716]	; (8004140 <moveGyroPID+0x320>)
 8003e74:	667b      	str	r3, [r7, #100]	; 0x64
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };


	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8003e76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e7a:	2224      	movs	r2, #36	; 0x24
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f00b ffdc 	bl	800fe3c <memset>
 8003e84:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003e88:	633b      	str	r3, [r7, #48]	; 0x30
 8003e8a:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e90:	f640 3354 	movw	r3, #2900	; 0xb54
 8003e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e96:	4baa      	ldr	r3, [pc, #680]	; (8004140 <moveGyroPID+0x320>)
 8003e98:	643b      	str	r3, [r7, #64]	; 0x40
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8003e9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f002 fba4 	bl	80065ec <PIDController_Init>
	PIDController_Init(&pidRight);
 8003ea4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f002 fb9f 	bl	80065ec <PIDController_Init>

	//reset angle
	actualAngle = 0;
 8003eae:	49a5      	ldr	r1, [pc, #660]	; (8004144 <moveGyroPID+0x324>)
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9c1 2300 	strd	r2, r3, [r1]

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8003ebc:	4ba2      	ldr	r3, [pc, #648]	; (8004148 <moveGyroPID+0x328>)
 8003ebe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8003ec2:	4ba2      	ldr	r3, [pc, #648]	; (800414c <moveGyroPID+0x32c>)
 8003ec4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 21.1; // NEED TO MEASURE AND CHANGE
 8003ec8:	4ba1      	ldr	r3, [pc, #644]	; (8004150 <moveGyroPID+0x330>)
 8003eca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8003ece:	213c      	movs	r1, #60	; 0x3c
 8003ed0:	48a0      	ldr	r0, [pc, #640]	; (8004154 <moveGyroPID+0x334>)
 8003ed2:	f006 ff8f 	bl	800adf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8003ed6:	213c      	movs	r1, #60	; 0x3c
 8003ed8:	489f      	ldr	r0, [pc, #636]	; (8004158 <moveGyroPID+0x338>)
 8003eda:	f006 ff8b 	bl	800adf4 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003ede:	4b9d      	ldr	r3, [pc, #628]	; (8004154 <moveGyroPID+0x334>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8003ee8:	4b9b      	ldr	r3, [pc, #620]	; (8004158 <moveGyroPID+0x338>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8003ef2:	f003 f865 	bl	8006fc0 <HAL_GetTick>
 8003ef6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 8003efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float totalDistance_right = 0;
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	int diffRight = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8003f1e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003f22:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	uint16_t pwmValC = 2000;
 8003f26:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003f2a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if(forward){
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d015      	beq.n	8003f60 <moveGyroPID+0x140>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003f34:	2201      	movs	r2, #1
 8003f36:	2108      	movs	r1, #8
 8003f38:	4888      	ldr	r0, [pc, #544]	; (800415c <moveGyroPID+0x33c>)
 8003f3a:	f003 fbbf 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2104      	movs	r1, #4
 8003f42:	4886      	ldr	r0, [pc, #536]	; (800415c <moveGyroPID+0x33c>)
 8003f44:	f003 fbba 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f4e:	4884      	ldr	r0, [pc, #528]	; (8004160 <moveGyroPID+0x340>)
 8003f50:	f003 fbb4 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003f54:	2200      	movs	r2, #0
 8003f56:	2120      	movs	r1, #32
 8003f58:	4882      	ldr	r0, [pc, #520]	; (8004164 <moveGyroPID+0x344>)
 8003f5a:	f003 fbaf 	bl	80076bc <HAL_GPIO_WritePin>
 8003f5e:	e014      	b.n	8003f8a <moveGyroPID+0x16a>
	}else{
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8003f60:	2200      	movs	r2, #0
 8003f62:	2108      	movs	r1, #8
 8003f64:	487d      	ldr	r0, [pc, #500]	; (800415c <moveGyroPID+0x33c>)
 8003f66:	f003 fba9 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	2104      	movs	r1, #4
 8003f6e:	487b      	ldr	r0, [pc, #492]	; (800415c <moveGyroPID+0x33c>)
 8003f70:	f003 fba4 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8003f74:	2200      	movs	r2, #0
 8003f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f7a:	4879      	ldr	r0, [pc, #484]	; (8004160 <moveGyroPID+0x340>)
 8003f7c:	f003 fb9e 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8003f80:	2201      	movs	r2, #1
 8003f82:	2120      	movs	r1, #32
 8003f84:	4877      	ldr	r0, [pc, #476]	; (8004164 <moveGyroPID+0x344>)
 8003f86:	f003 fb99 	bl	80076bc <HAL_GPIO_WritePin>
	}

	/*Infinite loop*/
	for(;;)
	{
		if (totalDistance_left >= (distance+distanceError) * 0.9 || totalDistance_right >= (distance+distanceError) * 0.9) {
 8003f8a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003f8e:	f7fc fadb 	bl	8000548 <__aeabi_f2d>
 8003f92:	4604      	mov	r4, r0
 8003f94:	460d      	mov	r5, r1
 8003f96:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f9a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fa2:	ee17 0a90 	vmov	r0, s15
 8003fa6:	f7fc facf 	bl	8000548 <__aeabi_f2d>
 8003faa:	a361      	add	r3, pc, #388	; (adr r3, 8004130 <moveGyroPID+0x310>)
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	f7fc fb22 	bl	80005f8 <__aeabi_dmul>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4620      	mov	r0, r4
 8003fba:	4629      	mov	r1, r5
 8003fbc:	f7fc fda2 	bl	8000b04 <__aeabi_dcmpge>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11d      	bne.n	8004002 <moveGyroPID+0x1e2>
 8003fc6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003fca:	f7fc fabd 	bl	8000548 <__aeabi_f2d>
 8003fce:	4604      	mov	r4, r0
 8003fd0:	460d      	mov	r5, r1
 8003fd2:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fd6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fde:	ee17 0a90 	vmov	r0, s15
 8003fe2:	f7fc fab1 	bl	8000548 <__aeabi_f2d>
 8003fe6:	a352      	add	r3, pc, #328	; (adr r3, 8004130 <moveGyroPID+0x310>)
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f7fc fb04 	bl	80005f8 <__aeabi_dmul>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	f7fc fd84 	bl	8000b04 <__aeabi_dcmpge>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d007      	beq.n	8004012 <moveGyroPID+0x1f2>
			pwmValA = 1000;
 8004002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004006:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
			pwmValC = 1000;
 800400a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800400e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

		}

		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004012:	4b49      	ldr	r3, [pc, #292]	; (8004138 <moveGyroPID+0x318>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800401a:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 800401c:	4b46      	ldr	r3, [pc, #280]	; (8004138 <moveGyroPID+0x318>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004024:	63da      	str	r2, [r3, #60]	; 0x3c
		 currTime = HAL_GetTick();
 8004026:	f002 ffcb 	bl	8006fc0 <HAL_GetTick>
 800402a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		 moving = 1;
 800402e:	4b4e      	ldr	r3, [pc, #312]	; (8004168 <moveGyroPID+0x348>)
 8004030:	2201      	movs	r2, #1
 8004032:	701a      	strb	r2, [r3, #0]

		 if (currTime-prevTime > 60L)
 8004034:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004038:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b3c      	cmp	r3, #60	; 0x3c
 8004040:	d9a3      	bls.n	8003f8a <moveGyroPID+0x16a>
		 {
			 leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8004042:	4b44      	ldr	r3, [pc, #272]	; (8004154 <moveGyroPID+0x334>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			 rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 800404c:	4b42      	ldr	r3, [pc, #264]	; (8004158 <moveGyroPID+0x338>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			 diffLeft = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			 diffRight = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8004062:	4b3c      	ldr	r3, [pc, #240]	; (8004154 <moveGyroPID+0x334>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b10      	cmp	r3, #16
 800406e:	d118      	bne.n	80040a2 <moveGyroPID+0x282>
			 {
				 if (leftTick < leftTick_prev)
 8004070:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004074:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004078:	429a      	cmp	r2, r3
 800407a:	da07      	bge.n	800408c <moveGyroPID+0x26c>
					 diffLeft = leftTick_prev - leftTick;
 800407c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004080:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800408a:	e022      	b.n	80040d2 <moveGyroPID+0x2b2>
				 else
					 diffLeft = (65535 - leftTick) + leftTick_prev;
 800408c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004090:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004094:	33ff      	adds	r3, #255	; 0xff
 8004096:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800409a:	4413      	add	r3, r2
 800409c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040a0:	e017      	b.n	80040d2 <moveGyroPID+0x2b2>
			 }
			 else
			 {
				 if (leftTick > leftTick_prev)
 80040a2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80040a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040aa:	429a      	cmp	r2, r3
 80040ac:	dd07      	ble.n	80040be <moveGyroPID+0x29e>
					 diffLeft = leftTick - leftTick_prev;
 80040ae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80040b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040bc:	e009      	b.n	80040d2 <moveGyroPID+0x2b2>
				 else
					 diffLeft = 65535 - leftTick_prev + leftTick;
 80040be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040c2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80040c6:	33ff      	adds	r3, #255	; 0xff
 80040c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80040cc:	4413      	add	r3, r2
 80040ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			 }

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 80040d2:	4b21      	ldr	r3, [pc, #132]	; (8004158 <moveGyroPID+0x338>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d118      	bne.n	8004112 <moveGyroPID+0x2f2>
			 {
				 if (rightTick < rightTick_prev)
 80040e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80040e8:	429a      	cmp	r2, r3
 80040ea:	da07      	bge.n	80040fc <moveGyroPID+0x2dc>
					 diffRight = rightTick_prev - rightTick;
 80040ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80040f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80040fa:	e049      	b.n	8004190 <moveGyroPID+0x370>
				 else
					 diffRight = (65535 - rightTick) + rightTick_prev;
 80040fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004100:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004104:	33ff      	adds	r3, #255	; 0xff
 8004106:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800410a:	4413      	add	r3, r2
 800410c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004110:	e03e      	b.n	8004190 <moveGyroPID+0x370>
			 }
			 else
			 {
				 if (rightTick > rightTick_prev)
 8004112:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004116:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800411a:	429a      	cmp	r2, r3
 800411c:	dd2e      	ble.n	800417c <moveGyroPID+0x35c>
					 diffRight = rightTick - rightTick_prev;
 800411e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800412c:	e030      	b.n	8004190 <moveGyroPID+0x370>
 800412e:	bf00      	nop
 8004130:	cccccccd 	.word	0xcccccccd
 8004134:	3feccccc 	.word	0x3feccccc
 8004138:	20000378 	.word	0x20000378
 800413c:	20000258 	.word	0x20000258
 8004140:	3d4ccccd 	.word	0x3d4ccccd
 8004144:	20000420 	.word	0x20000420
 8004148:	44440000 	.word	0x44440000
 800414c:	4442c000 	.word	0x4442c000
 8004150:	41a8cccd 	.word	0x41a8cccd
 8004154:	200002a0 	.word	0x200002a0
 8004158:	20000330 	.word	0x20000330
 800415c:	40020000 	.word	0x40020000
 8004160:	40021000 	.word	0x40021000
 8004164:	40020800 	.word	0x40020800
 8004168:	20000414 	.word	0x20000414
 800416c:	3f83f7cf 	.word	0x3f83f7cf
 8004170:	3f81b717 	.word	0x3f81b717
 8004174:	be428f5c 	.word	0xbe428f5c
 8004178:	3dcccccd 	.word	0x3dcccccd
				 else
					 diffRight = 65535 - rightTick_prev + rightTick;
 800417c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004180:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004184:	33ff      	adds	r3, #255	; 0xff
 8004186:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800418a:	4413      	add	r3, r2
 800418c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			 }

			 // left measured distance
			 distLeft = ((float)diffLeft/wheel_rotationTicksL) * wheel_circumference;
 8004190:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800419c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80041a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80041a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ac:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
			 totalDistance_left += distLeft;
 80041b0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80041b4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80041b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041bc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

			 // right measured distance
			 distRight = ((float)diffRight/wheel_rotationTicksR) * wheel_circumference;
 80041c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041c4:	ee07 3a90 	vmov	s15, r3
 80041c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80041cc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80041d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041d4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80041d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041dc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
			 totalDistance_right += distRight;
 80041e0:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80041e4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80041e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ec:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac


#define pwmValAadjust 300;
#define pwmValBadjust 525;

			 if (forward){
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d030      	beq.n	8004258 <moveGyroPID+0x438>

				 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA) - pwmValAadjust;
 80041f6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80041fa:	ed1f 7a24 	vldr	s14, [pc, #-144]	; 800416c <moveGyroPID+0x34c>
 80041fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004202:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004206:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800420a:	4611      	mov	r1, r2
 800420c:	edd7 0a2c 	vldr	s1, [r7, #176]	; 0xb0
 8004210:	eeb0 0a67 	vmov.f32	s0, s15
 8004214:	4618      	mov	r0, r3
 8004216:	f002 fa01 	bl	800661c <PIDController_Update>
 800421a:	4603      	mov	r3, r0
 800421c:	b29b      	uxth	r3, r3
 800421e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004222:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

				 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC) + pwmValBadjust;
 8004226:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800422a:	ed1f 7a30 	vldr	s14, [pc, #-192]	; 800416c <moveGyroPID+0x34c>
 800422e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004232:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800423a:	4611      	mov	r1, r2
 800423c:	eef0 0a67 	vmov.f32	s1, s15
 8004240:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8004244:	4618      	mov	r0, r3
 8004246:	f002 f9e9 	bl	800661c <PIDController_Update>
 800424a:	4603      	mov	r3, r0
 800424c:	b29b      	uxth	r3, r3
 800424e:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8004252:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8004256:	e02f      	b.n	80042b8 <moveGyroPID+0x498>
			 }else{
				 pwmValA = PIDController_Update(&pidLeft, totalDistance_right, totalDistance_left*STRAIGHTRATIOR, pwmValA) - pwmValAadjust;
 8004258:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800425c:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 8004170 <moveGyroPID+0x350>
 8004260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004264:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004268:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800426c:	4611      	mov	r1, r2
 800426e:	eef0 0a67 	vmov.f32	s1, s15
 8004272:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 8004276:	4618      	mov	r0, r3
 8004278:	f002 f9d0 	bl	800661c <PIDController_Update>
 800427c:	4603      	mov	r3, r0
 800427e:	b29b      	uxth	r3, r3
 8004280:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004284:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

				 pwmValC = PIDController_Update(&pidRight, totalDistance_left*STRAIGHTRATIOR, totalDistance_right, pwmValC) + pwmValBadjust;
 8004288:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800428c:	ed1f 7a48 	vldr	s14, [pc, #-288]	; 8004170 <moveGyroPID+0x350>
 8004290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004294:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004298:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800429c:	4611      	mov	r1, r2
 800429e:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 80042a2:	eeb0 0a67 	vmov.f32	s0, s15
 80042a6:	4618      	mov	r0, r3
 80042a8:	f002 f9b8 	bl	800661c <PIDController_Update>
 80042ac:	4603      	mov	r3, r0
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	f203 230d 	addw	r3, r3, #525	; 0x20d
 80042b4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
//
//				 pwmValC = PIDController_Update(&pidRight, totalDistance_left*STRAIGHTRATIOR, totalDistance_right, pwmValC);
//			 }


			 if(forward)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <moveGyroPID+0x4b0>
			 {
				  distanceError = DISTANCE_ERROR_OFFSETF * distance;
 80042be:	edd7 7a01 	vldr	s15, [r7, #4]
 80042c2:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 8004174 <moveGyroPID+0x354>
 80042c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042ca:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 80042ce:	e007      	b.n	80042e0 <moveGyroPID+0x4c0>
			 }
			 else
			 {
				  distanceError = DISTANCE_ERROR_OFFSETR * distance;
 80042d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80042d4:	ed1f 7a58 	vldr	s14, [pc, #-352]	; 8004178 <moveGyroPID+0x358>
 80042d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042dc:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
			 }

			 //if robot doesnt go straight, using gyro to adjust, straight = 145
			 if (forward)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d024      	beq.n	8004330 <moveGyroPID+0x510>
			 {
				 if (actualAngle < -0.33) //veering right
 80042e6:	4b54      	ldr	r3, [pc, #336]	; (8004438 <moveGyroPID+0x618>)
 80042e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042ec:	a34e      	add	r3, pc, #312	; (adr r3, 8004428 <moveGyroPID+0x608>)
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	f7fc fbf3 	bl	8000adc <__aeabi_dcmplt>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d004      	beq.n	8004306 <moveGyroPID+0x4e6>
				 {

					 htim1.Instance -> CCR4 = 138; //left abit. prev: 138
 80042fc:	4b4f      	ldr	r3, [pc, #316]	; (800443c <moveGyroPID+0x61c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	228a      	movs	r2, #138	; 0x8a
 8004302:	641a      	str	r2, [r3, #64]	; 0x40
 8004304:	e038      	b.n	8004378 <moveGyroPID+0x558>
				 }
				 else if (actualAngle > 0.33)//veering left
 8004306:	4b4c      	ldr	r3, [pc, #304]	; (8004438 <moveGyroPID+0x618>)
 8004308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800430c:	a348      	add	r3, pc, #288	; (adr r3, 8004430 <moveGyroPID+0x610>)
 800430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004312:	f7fc fc01 	bl	8000b18 <__aeabi_dcmpgt>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d004      	beq.n	8004326 <moveGyroPID+0x506>
				 {

					 htim1.Instance -> CCR4 = 155; //right a bit. prev: 152
 800431c:	4b47      	ldr	r3, [pc, #284]	; (800443c <moveGyroPID+0x61c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	229b      	movs	r2, #155	; 0x9b
 8004322:	641a      	str	r2, [r3, #64]	; 0x40
 8004324:	e028      	b.n	8004378 <moveGyroPID+0x558>
				 }
				 else
				 {
	//				 servo = STRAIGHT;
					 htim1.Instance -> CCR4 = STRAIGHT; //Straight
 8004326:	4b45      	ldr	r3, [pc, #276]	; (800443c <moveGyroPID+0x61c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2295      	movs	r2, #149	; 0x95
 800432c:	641a      	str	r2, [r3, #64]	; 0x40
 800432e:	e023      	b.n	8004378 <moveGyroPID+0x558>


			 }
			 else
			 {
				 if (actualAngle > 0.33) //veering left
 8004330:	4b41      	ldr	r3, [pc, #260]	; (8004438 <moveGyroPID+0x618>)
 8004332:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004336:	a33e      	add	r3, pc, #248	; (adr r3, 8004430 <moveGyroPID+0x610>)
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	f7fc fbec 	bl	8000b18 <__aeabi_dcmpgt>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d004      	beq.n	8004350 <moveGyroPID+0x530>
				 {
	//				 servo = STRAIGHT;
					 htim1.Instance -> CCR4 = 138; //left abit
 8004346:	4b3d      	ldr	r3, [pc, #244]	; (800443c <moveGyroPID+0x61c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	228a      	movs	r2, #138	; 0x8a
 800434c:	641a      	str	r2, [r3, #64]	; 0x40
 800434e:	e013      	b.n	8004378 <moveGyroPID+0x558>
				 }
				 else if (actualAngle < -0.33)//veering right
 8004350:	4b39      	ldr	r3, [pc, #228]	; (8004438 <moveGyroPID+0x618>)
 8004352:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004356:	a334      	add	r3, pc, #208	; (adr r3, 8004428 <moveGyroPID+0x608>)
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f7fc fbbe 	bl	8000adc <__aeabi_dcmplt>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d004      	beq.n	8004370 <moveGyroPID+0x550>
				 {
//					 servo = STRAIGHT;
					 htim1.Instance -> CCR4 = 155; //right a bit
 8004366:	4b35      	ldr	r3, [pc, #212]	; (800443c <moveGyroPID+0x61c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	229b      	movs	r2, #155	; 0x9b
 800436c:	641a      	str	r2, [r3, #64]	; 0x40
 800436e:	e003      	b.n	8004378 <moveGyroPID+0x558>
				 }
				 else
				 {
	//				 servo = STRAIGHT;
					 htim1.Instance -> CCR4 = STRAIGHT; //Straight
 8004370:	4b32      	ldr	r3, [pc, #200]	; (800443c <moveGyroPID+0x61c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2295      	movs	r2, #149	; 0x95
 8004376:	641a      	str	r2, [r3, #64]	; 0x40
				 }
			 }
			 osDelay(10);
 8004378:	200a      	movs	r0, #10
 800437a:	f009 f808 	bl	800d38e <osDelay>

			 if (totalDistance_left >= (distance+distanceError) || totalDistance_right >= (distance+distanceError))
 800437e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004382:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800438a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800438e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004396:	da0c      	bge.n	80043b2 <moveGyroPID+0x592>
 8004398:	ed97 7a01 	vldr	s14, [r7, #4]
 800439c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80043a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043a4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80043a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b0:	db0c      	blt.n	80043cc <moveGyroPID+0x5ac>
			 {
				 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 80043b2:	4b23      	ldr	r3, [pc, #140]	; (8004440 <moveGyroPID+0x620>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2200      	movs	r2, #0
 80043b8:	635a      	str	r2, [r3, #52]	; 0x34
				 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 80043ba:	4b21      	ldr	r3, [pc, #132]	; (8004440 <moveGyroPID+0x620>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2200      	movs	r2, #0
 80043c0:	63da      	str	r2, [r3, #60]	; 0x3c
				 htim1.Instance -> CCR4 = STRAIGHT; //centre
 80043c2:	4b1e      	ldr	r3, [pc, #120]	; (800443c <moveGyroPID+0x61c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2295      	movs	r2, #149	; 0x95
 80043c8:	641a      	str	r2, [r3, #64]	; 0x40
//				sprintf(messageB, "SRight: %2d\0", pwmValC);
//				OLED_ShowString(10, 40, messageB);
//				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
//				OLED_ShowString(10, 50, messageB);
//				OLED_Refresh_Gram();
				 break;
 80043ca:	e00c      	b.n	80043e6 <moveGyroPID+0x5c6>
//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
//			OLED_ShowString(10, 30, messageA);
//			sprintf(messageB, "SRight: %2d\0", diffRight);
//			OLED_ShowString(10, 40, messageB);

			prevTime = currTime;
 80043cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			leftTick_prev = leftTick;
 80043d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			rightTick_prev = rightTick;
 80043dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		if (totalDistance_left >= (distance+distanceError) * 0.9 || totalDistance_right >= (distance+distanceError) * 0.9) {
 80043e4:	e5d1      	b.n	8003f8a <moveGyroPID+0x16a>
		 }
	}
//	moving = 0;
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80043e6:	2201      	movs	r2, #1
 80043e8:	2108      	movs	r1, #8
 80043ea:	4816      	ldr	r0, [pc, #88]	; (8004444 <moveGyroPID+0x624>)
 80043ec:	f003 f966 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80043f0:	2200      	movs	r2, #0
 80043f2:	2104      	movs	r1, #4
 80043f4:	4813      	ldr	r0, [pc, #76]	; (8004444 <moveGyroPID+0x624>)
 80043f6:	f003 f961 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80043fa:	2201      	movs	r2, #1
 80043fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004400:	4811      	ldr	r0, [pc, #68]	; (8004448 <moveGyroPID+0x628>)
 8004402:	f003 f95b 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004406:	2200      	movs	r2, #0
 8004408:	2120      	movs	r1, #32
 800440a:	4810      	ldr	r0, [pc, #64]	; (800444c <moveGyroPID+0x62c>)
 800440c:	f003 f956 	bl	80076bc <HAL_GPIO_WritePin>
	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <moveGyroPID+0x61c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2295      	movs	r2, #149	; 0x95
 8004416:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8004418:	200a      	movs	r0, #10
 800441a:	f008 ffb8 	bl	800d38e <osDelay>
	return;
 800441e:	bf00      	nop
}
 8004420:	37c0      	adds	r7, #192	; 0xc0
 8004422:	46bd      	mov	sp, r7
 8004424:	bdb0      	pop	{r4, r5, r7, pc}
 8004426:	bf00      	nop
 8004428:	51eb851f 	.word	0x51eb851f
 800442c:	bfd51eb8 	.word	0xbfd51eb8
 8004430:	51eb851f 	.word	0x51eb851f
 8004434:	3fd51eb8 	.word	0x3fd51eb8
 8004438:	20000420 	.word	0x20000420
 800443c:	20000258 	.word	0x20000258
 8004440:	20000378 	.word	0x20000378
 8004444:	40020000 	.word	0x40020000
 8004448:	40021000 	.word	0x40021000
 800444c:	40020800 	.word	0x40020800

08004450 <moveGyroPIDOld>:

// this is without the drastic servo movement
void moveGyroPIDOld(float distance, int forward)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b0b2      	sub	sp, #200	; 0xc8
 8004454:	af00      	add	r7, sp, #0
 8004456:	ed87 0a01 	vstr	s0, [r7, #4]
 800445a:	6038      	str	r0, [r7, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800445c:	2100      	movs	r1, #0
 800445e:	48c5      	ldr	r0, [pc, #788]	; (8004774 <moveGyroPIDOld+0x324>)
 8004460:	f006 f9e2 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004464:	2108      	movs	r1, #8
 8004466:	48c3      	ldr	r0, [pc, #780]	; (8004774 <moveGyroPIDOld+0x324>)
 8004468:	f006 f9de 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800446c:	210c      	movs	r1, #12
 800446e:	48c2      	ldr	r0, [pc, #776]	; (8004778 <moveGyroPIDOld+0x328>)
 8004470:	f006 f9da 	bl	800a828 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8004474:	4bc0      	ldr	r3, [pc, #768]	; (8004778 <moveGyroPIDOld+0x328>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2295      	movs	r2, #149	; 0x95
 800447a:	641a      	str	r2, [r3, #64]	; 0x40

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 800447c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004480:	2224      	movs	r2, #36	; 0x24
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f00b fcd9 	bl	800fe3c <memset>
 800448a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800448e:	657b      	str	r3, [r7, #84]	; 0x54
 8004490:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8004494:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004496:	f640 3354 	movw	r3, #2900	; 0xb54
 800449a:	663b      	str	r3, [r7, #96]	; 0x60
 800449c:	4bb7      	ldr	r3, [pc, #732]	; (800477c <moveGyroPIDOld+0x32c>)
 800449e:	667b      	str	r3, [r7, #100]	; 0x64
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };


	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 80044a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044a4:	2224      	movs	r2, #36	; 0x24
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f00b fcc7 	bl	800fe3c <memset>
 80044ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80044b2:	633b      	str	r3, [r7, #48]	; 0x30
 80044b4:	f240 53aa 	movw	r3, #1450	; 0x5aa
 80044b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80044ba:	f640 3354 	movw	r3, #2900	; 0xb54
 80044be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044c0:	4bae      	ldr	r3, [pc, #696]	; (800477c <moveGyroPIDOld+0x32c>)
 80044c2:	643b      	str	r3, [r7, #64]	; 0x40
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 80044c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044c8:	4618      	mov	r0, r3
 80044ca:	f002 f88f 	bl	80065ec <PIDController_Init>
	PIDController_Init(&pidRight);
 80044ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044d2:	4618      	mov	r0, r3
 80044d4:	f002 f88a 	bl	80065ec <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 80044d8:	4ba9      	ldr	r3, [pc, #676]	; (8004780 <moveGyroPIDOld+0x330>)
 80044da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float wheel_rotationTicksR = 779; // for back right wheel
 80044de:	4ba9      	ldr	r3, [pc, #676]	; (8004784 <moveGyroPIDOld+0x334>)
 80044e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	float wheel_circumference = 21.1f; // NEED TO MEASURE AND CHANGE
 80044e4:	4ba8      	ldr	r3, [pc, #672]	; (8004788 <moveGyroPIDOld+0x338>)
 80044e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 80044ea:	213c      	movs	r1, #60	; 0x3c
 80044ec:	48a7      	ldr	r0, [pc, #668]	; (800478c <moveGyroPIDOld+0x33c>)
 80044ee:	f006 fc81 	bl	800adf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 80044f2:	213c      	movs	r1, #60	; 0x3c
 80044f4:	48a6      	ldr	r0, [pc, #664]	; (8004790 <moveGyroPIDOld+0x340>)
 80044f6:	f006 fc7d 	bl	800adf4 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80044fa:	4ba4      	ldr	r3, [pc, #656]	; (800478c <moveGyroPIDOld+0x33c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8004504:	4ba2      	ldr	r3, [pc, #648]	; (8004790 <moveGyroPIDOld+0x340>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 800450e:	f002 fd57 	bl	8006fc0 <HAL_GetTick>
 8004512:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	uint32_t prevTime = startTime;
 8004516:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800451a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float totalDistance_right = 0;
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int diffRight = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distErrOffset;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 800453a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800453e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint16_t pwmValC = 2000 * STRAIGHTRATIOF;
 8004542:	f640 030e 	movw	r3, #2062	; 0x80e
 8004546:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if(forward){
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d015      	beq.n	800457c <moveGyroPIDOld+0x12c>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004550:	2201      	movs	r2, #1
 8004552:	2108      	movs	r1, #8
 8004554:	488f      	ldr	r0, [pc, #572]	; (8004794 <moveGyroPIDOld+0x344>)
 8004556:	f003 f8b1 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800455a:	2200      	movs	r2, #0
 800455c:	2104      	movs	r1, #4
 800455e:	488d      	ldr	r0, [pc, #564]	; (8004794 <moveGyroPIDOld+0x344>)
 8004560:	f003 f8ac 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004564:	2201      	movs	r2, #1
 8004566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800456a:	488b      	ldr	r0, [pc, #556]	; (8004798 <moveGyroPIDOld+0x348>)
 800456c:	f003 f8a6 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004570:	2200      	movs	r2, #0
 8004572:	2120      	movs	r1, #32
 8004574:	4889      	ldr	r0, [pc, #548]	; (800479c <moveGyroPIDOld+0x34c>)
 8004576:	f003 f8a1 	bl	80076bc <HAL_GPIO_WritePin>
 800457a:	e014      	b.n	80045a6 <moveGyroPIDOld+0x156>
	}else{
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800457c:	2200      	movs	r2, #0
 800457e:	2108      	movs	r1, #8
 8004580:	4884      	ldr	r0, [pc, #528]	; (8004794 <moveGyroPIDOld+0x344>)
 8004582:	f003 f89b 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8004586:	2201      	movs	r2, #1
 8004588:	2104      	movs	r1, #4
 800458a:	4882      	ldr	r0, [pc, #520]	; (8004794 <moveGyroPIDOld+0x344>)
 800458c:	f003 f896 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8004590:	2200      	movs	r2, #0
 8004592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004596:	4880      	ldr	r0, [pc, #512]	; (8004798 <moveGyroPIDOld+0x348>)
 8004598:	f003 f890 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 800459c:	2201      	movs	r2, #1
 800459e:	2120      	movs	r1, #32
 80045a0:	487e      	ldr	r0, [pc, #504]	; (800479c <moveGyroPIDOld+0x34c>)
 80045a2:	f003 f88b 	bl	80076bc <HAL_GPIO_WritePin>
	}

	if (forward) {
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d037      	beq.n	800461c <moveGyroPIDOld+0x1cc>
		if (distance <= 10) distErrOffset = -0.92;
 80045ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80045b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80045b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045bc:	d803      	bhi.n	80045c6 <moveGyroPIDOld+0x176>
 80045be:	4b78      	ldr	r3, [pc, #480]	; (80047a0 <moveGyroPIDOld+0x350>)
 80045c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045c4:	e061      	b.n	800468a <moveGyroPIDOld+0x23a>
		else if (distance <= 20) distErrOffset = -0.1;
 80045c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80045ca:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80045ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d6:	d803      	bhi.n	80045e0 <moveGyroPIDOld+0x190>
 80045d8:	4b72      	ldr	r3, [pc, #456]	; (80047a4 <moveGyroPIDOld+0x354>)
 80045da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045de:	e054      	b.n	800468a <moveGyroPIDOld+0x23a>
		else if (distance <= 30) distErrOffset = -0.06;
 80045e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80045e4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80045e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f0:	d803      	bhi.n	80045fa <moveGyroPIDOld+0x1aa>
 80045f2:	4b6d      	ldr	r3, [pc, #436]	; (80047a8 <moveGyroPIDOld+0x358>)
 80045f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045f8:	e047      	b.n	800468a <moveGyroPIDOld+0x23a>
		else if (distance <= 40) distErrOffset = -0.06;
 80045fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80045fe:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80047ac <moveGyroPIDOld+0x35c>
 8004602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460a:	d803      	bhi.n	8004614 <moveGyroPIDOld+0x1c4>
 800460c:	4b66      	ldr	r3, [pc, #408]	; (80047a8 <moveGyroPIDOld+0x358>)
 800460e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004612:	e03a      	b.n	800468a <moveGyroPIDOld+0x23a>
		else distErrOffset = DISTANCE_ERROR_OFFSETF;
 8004614:	4b66      	ldr	r3, [pc, #408]	; (80047b0 <moveGyroPIDOld+0x360>)
 8004616:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800461a:	e036      	b.n	800468a <moveGyroPIDOld+0x23a>
	} else {
		if (distance <= 10) distErrOffset = 0.0005;
 800461c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004620:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462c:	d803      	bhi.n	8004636 <moveGyroPIDOld+0x1e6>
 800462e:	4b61      	ldr	r3, [pc, #388]	; (80047b4 <moveGyroPIDOld+0x364>)
 8004630:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004634:	e029      	b.n	800468a <moveGyroPIDOld+0x23a>
		else if (distance <= 20) distErrOffset = -0.15;
 8004636:	edd7 7a01 	vldr	s15, [r7, #4]
 800463a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800463e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004646:	d803      	bhi.n	8004650 <moveGyroPIDOld+0x200>
 8004648:	4b5b      	ldr	r3, [pc, #364]	; (80047b8 <moveGyroPIDOld+0x368>)
 800464a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800464e:	e01c      	b.n	800468a <moveGyroPIDOld+0x23a>
		else if (distance <= 30) distErrOffset = -0.16;
 8004650:	edd7 7a01 	vldr	s15, [r7, #4]
 8004654:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800465c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004660:	d803      	bhi.n	800466a <moveGyroPIDOld+0x21a>
 8004662:	4b56      	ldr	r3, [pc, #344]	; (80047bc <moveGyroPIDOld+0x36c>)
 8004664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004668:	e00f      	b.n	800468a <moveGyroPIDOld+0x23a>
		else if (distance <= 40) distErrOffset = -0.15;
 800466a:	edd7 7a01 	vldr	s15, [r7, #4]
 800466e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80047ac <moveGyroPIDOld+0x35c>
 8004672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800467a:	d803      	bhi.n	8004684 <moveGyroPIDOld+0x234>
 800467c:	4b4e      	ldr	r3, [pc, #312]	; (80047b8 <moveGyroPIDOld+0x368>)
 800467e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004682:	e002      	b.n	800468a <moveGyroPIDOld+0x23a>
		else distErrOffset = DISTANCE_ERROR_OFFSETR;
 8004684:	4b4e      	ldr	r3, [pc, #312]	; (80047c0 <moveGyroPIDOld+0x370>)
 8004686:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	/*Infinite loop*/
	for(;;)
	{

		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800468a:	4b3a      	ldr	r3, [pc, #232]	; (8004774 <moveGyroPIDOld+0x324>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004692:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8004694:	4b37      	ldr	r3, [pc, #220]	; (8004774 <moveGyroPIDOld+0x324>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 800469c:	63da      	str	r2, [r3, #60]	; 0x3c
		 currTime = HAL_GetTick();
 800469e:	f002 fc8f 	bl	8006fc0 <HAL_GetTick>
 80046a2:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		 moving = 1;
 80046a6:	4b47      	ldr	r3, [pc, #284]	; (80047c4 <moveGyroPIDOld+0x374>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	701a      	strb	r2, [r3, #0]

		 if (currTime-prevTime > 60L)
 80046ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80046b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b3c      	cmp	r3, #60	; 0x3c
 80046b8:	d9e7      	bls.n	800468a <moveGyroPIDOld+0x23a>
		 {
			 leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 80046ba:	4b34      	ldr	r3, [pc, #208]	; (800478c <moveGyroPIDOld+0x33c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			 rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 80046c4:	4b32      	ldr	r3, [pc, #200]	; (8004790 <moveGyroPIDOld+0x340>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

			 diffLeft = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			 diffRight = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 80046da:	4b2c      	ldr	r3, [pc, #176]	; (800478c <moveGyroPIDOld+0x33c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d118      	bne.n	800471a <moveGyroPIDOld+0x2ca>
			 {
				 if (leftTick < leftTick_prev)
 80046e8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80046ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046f0:	429a      	cmp	r2, r3
 80046f2:	da07      	bge.n	8004704 <moveGyroPIDOld+0x2b4>
					 diffLeft = leftTick_prev - leftTick;
 80046f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004702:	e022      	b.n	800474a <moveGyroPIDOld+0x2fa>
				 else
					 diffLeft = (65535 - leftTick) + leftTick_prev;
 8004704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004708:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800470c:	33ff      	adds	r3, #255	; 0xff
 800470e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004712:	4413      	add	r3, r2
 8004714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004718:	e017      	b.n	800474a <moveGyroPIDOld+0x2fa>
			 }
			 else
			 {
				 if (leftTick > leftTick_prev)
 800471a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800471e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004722:	429a      	cmp	r2, r3
 8004724:	dd07      	ble.n	8004736 <moveGyroPIDOld+0x2e6>
					 diffLeft = leftTick - leftTick_prev;
 8004726:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800472a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004734:	e009      	b.n	800474a <moveGyroPIDOld+0x2fa>
				 else
					 diffLeft = 65535 - leftTick_prev + leftTick;
 8004736:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800473a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800473e:	33ff      	adds	r3, #255	; 0xff
 8004740:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004744:	4413      	add	r3, r2
 8004746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			 }

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 800474a:	4b11      	ldr	r3, [pc, #68]	; (8004790 <moveGyroPIDOld+0x340>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b10      	cmp	r3, #16
 8004756:	d142      	bne.n	80047de <moveGyroPIDOld+0x38e>
			 {
				 if (rightTick < rightTick_prev)
 8004758:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800475c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004760:	429a      	cmp	r2, r3
 8004762:	da31      	bge.n	80047c8 <moveGyroPIDOld+0x378>
					 diffRight = rightTick_prev - rightTick;
 8004764:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004768:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004772:	e04c      	b.n	800480e <moveGyroPIDOld+0x3be>
 8004774:	20000378 	.word	0x20000378
 8004778:	20000258 	.word	0x20000258
 800477c:	3d4ccccd 	.word	0x3d4ccccd
 8004780:	44440000 	.word	0x44440000
 8004784:	4442c000 	.word	0x4442c000
 8004788:	41a8cccd 	.word	0x41a8cccd
 800478c:	200002a0 	.word	0x200002a0
 8004790:	20000330 	.word	0x20000330
 8004794:	40020000 	.word	0x40020000
 8004798:	40021000 	.word	0x40021000
 800479c:	40020800 	.word	0x40020800
 80047a0:	bf6b851f 	.word	0xbf6b851f
 80047a4:	bdcccccd 	.word	0xbdcccccd
 80047a8:	bd75c28f 	.word	0xbd75c28f
 80047ac:	42200000 	.word	0x42200000
 80047b0:	be428f5c 	.word	0xbe428f5c
 80047b4:	3a03126f 	.word	0x3a03126f
 80047b8:	be19999a 	.word	0xbe19999a
 80047bc:	be23d70a 	.word	0xbe23d70a
 80047c0:	3dcccccd 	.word	0x3dcccccd
 80047c4:	20000414 	.word	0x20000414
				 else
					 diffRight = (65535 - rightTick) + rightTick_prev;
 80047c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047cc:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80047d0:	33ff      	adds	r3, #255	; 0xff
 80047d2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047d6:	4413      	add	r3, r2
 80047d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047dc:	e017      	b.n	800480e <moveGyroPIDOld+0x3be>
			 }
			 else
			 {
				 if (rightTick > rightTick_prev)
 80047de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80047e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047e6:	429a      	cmp	r2, r3
 80047e8:	dd07      	ble.n	80047fa <moveGyroPIDOld+0x3aa>
					 diffRight = rightTick - rightTick_prev;
 80047ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80047ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047f8:	e009      	b.n	800480e <moveGyroPIDOld+0x3be>
				 else
					 diffRight = 65535 - rightTick_prev + rightTick;
 80047fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047fe:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004802:	33ff      	adds	r3, #255	; 0xff
 8004804:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004808:	4413      	add	r3, r2
 800480a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 }

			 // left measured distance
			 distLeft = ((float)diffLeft/wheel_rotationTicksL) * wheel_circumference;
 800480e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800481a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800481e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004822:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8004826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
			 totalDistance_left += distLeft;
 800482e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004832:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800483a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

			 // right measured distance
			 distRight = ((float)diffRight/wheel_rotationTicksR) * wheel_circumference;
 800483e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800484a:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800484e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004852:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8004856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
			 totalDistance_right += distRight;
 800485e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004862:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800486a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
//				 pwmValC = PIDController_Update(&pidRight, totalDistance_left*STRAIGHTRATIOR, totalDistance_right, pwmValC);
//			 }



			 distanceError = distErrOffset * distance;
 800486e:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8004872:	edd7 7a01 	vldr	s15, [r7, #4]
 8004876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

			 //if robot doesnt go straight, using gyro to adjust, straight = 145
			 if (forward)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d030      	beq.n	80048e6 <moveGyroPIDOld+0x496>
			 {
				 if (totalAngle < 0.00) //veering right
 8004884:	4b90      	ldr	r3, [pc, #576]	; (8004ac8 <moveGyroPIDOld+0x678>)
 8004886:	e9d3 0100 	ldrd	r0, r1, [r3]
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	f7fc f923 	bl	8000adc <__aeabi_dcmplt>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <moveGyroPIDOld+0x454>
				 {

					 htim1.Instance -> CCR4 = 140; //left abit. prev: 138
 800489c:	4b8b      	ldr	r3, [pc, #556]	; (8004acc <moveGyroPIDOld+0x67c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	228c      	movs	r2, #140	; 0x8c
 80048a2:	641a      	str	r2, [r3, #64]	; 0x40
				 }
				 if (totalAngle > 0.00)//veering left
 80048a4:	4b88      	ldr	r3, [pc, #544]	; (8004ac8 <moveGyroPIDOld+0x678>)
 80048a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	f7fc f931 	bl	8000b18 <__aeabi_dcmpgt>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <moveGyroPIDOld+0x474>
				 {

					 htim1.Instance -> CCR4 = 155; //right a bit. prev: 152
 80048bc:	4b83      	ldr	r3, [pc, #524]	; (8004acc <moveGyroPIDOld+0x67c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	229b      	movs	r2, #155	; 0x9b
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40
				 }
				 if (totalAngle == 0.00)
 80048c4:	4b80      	ldr	r3, [pc, #512]	; (8004ac8 <moveGyroPIDOld+0x678>)
 80048c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	f7fc f8f9 	bl	8000ac8 <__aeabi_dcmpeq>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d036      	beq.n	800494a <moveGyroPIDOld+0x4fa>
				 {
	//				 servo = STRAIGHT;
					 htim1.Instance -> CCR4 = STRAIGHT; //Straight
 80048dc:	4b7b      	ldr	r3, [pc, #492]	; (8004acc <moveGyroPIDOld+0x67c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2295      	movs	r2, #149	; 0x95
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40
 80048e4:	e031      	b.n	800494a <moveGyroPIDOld+0x4fa>


			 }
			 else
			 {
				 if (totalAngle > 0.00) //veering left
 80048e6:	4b78      	ldr	r3, [pc, #480]	; (8004ac8 <moveGyroPIDOld+0x678>)
 80048e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	f7fc f910 	bl	8000b18 <__aeabi_dcmpgt>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <moveGyroPIDOld+0x4b6>
				 {
	//				 servo = STRAIGHT;
					 htim1.Instance -> CCR4 = 140; //left abit
 80048fe:	4b73      	ldr	r3, [pc, #460]	; (8004acc <moveGyroPIDOld+0x67c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	228c      	movs	r2, #140	; 0x8c
 8004904:	641a      	str	r2, [r3, #64]	; 0x40
				 }
				 if (totalAngle < 0.00)//veering right
 8004906:	4b70      	ldr	r3, [pc, #448]	; (8004ac8 <moveGyroPIDOld+0x678>)
 8004908:	e9d3 0100 	ldrd	r0, r1, [r3]
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	f7fc f8e2 	bl	8000adc <__aeabi_dcmplt>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d005      	beq.n	800492a <moveGyroPIDOld+0x4da>
				 {
					 servo = STRAIGHT;
 800491e:	2395      	movs	r3, #149	; 0x95
 8004920:	67bb      	str	r3, [r7, #120]	; 0x78
					 htim1.Instance -> CCR4 = 155; //right a bit
 8004922:	4b6a      	ldr	r3, [pc, #424]	; (8004acc <moveGyroPIDOld+0x67c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	229b      	movs	r2, #155	; 0x9b
 8004928:	641a      	str	r2, [r3, #64]	; 0x40
				 }
				 if (totalAngle == 0.00)
 800492a:	4b67      	ldr	r3, [pc, #412]	; (8004ac8 <moveGyroPIDOld+0x678>)
 800492c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	f7fc f8c6 	bl	8000ac8 <__aeabi_dcmpeq>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <moveGyroPIDOld+0x4fa>
				 {
	//				 servo = STRAIGHT;
					 htim1.Instance -> CCR4 = STRAIGHT; //Straight
 8004942:	4b62      	ldr	r3, [pc, #392]	; (8004acc <moveGyroPIDOld+0x67c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2295      	movs	r2, #149	; 0x95
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
				 }
			 }
			 osDelay(10);
 800494a:	200a      	movs	r0, #10
 800494c:	f008 fd1f 	bl	800d38e <osDelay>
			 if (totalDistance_left >= (distance+distanceError) || totalDistance_right >= (distance+distanceError))
 8004950:	ed97 7a01 	vldr	s14, [r7, #4]
 8004954:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8004958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800495c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004968:	da0c      	bge.n	8004984 <moveGyroPIDOld+0x534>
 800496a:	ed97 7a01 	vldr	s14, [r7, #4]
 800496e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8004972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004976:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800497a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800497e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004982:	db3f      	blt.n	8004a04 <moveGyroPIDOld+0x5b4>
			 {
				 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8004984:	4b52      	ldr	r3, [pc, #328]	; (8004ad0 <moveGyroPIDOld+0x680>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2200      	movs	r2, #0
 800498a:	635a      	str	r2, [r3, #52]	; 0x34
				 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 800498c:	4b50      	ldr	r3, [pc, #320]	; (8004ad0 <moveGyroPIDOld+0x680>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2200      	movs	r2, #0
 8004992:	63da      	str	r2, [r3, #60]	; 0x3c
//				 moving = 0;
				sprintf(messageA, "dist: %.2f\0", distance);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7fb fdd7 	bl	8000548 <__aeabi_f2d>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	f107 001c 	add.w	r0, r7, #28
 80049a2:	494c      	ldr	r1, [pc, #304]	; (8004ad4 <moveGyroPIDOld+0x684>)
 80049a4:	f00c f8d2 	bl	8010b4c <siprintf>
				OLED_ShowString(10, 10, messageA);
 80049a8:	f107 031c 	add.w	r3, r7, #28
 80049ac:	461a      	mov	r2, r3
 80049ae:	210a      	movs	r1, #10
 80049b0:	200a      	movs	r0, #10
 80049b2:	f001 fd5d 	bl	8006470 <OLED_ShowString>
//				sprintf(messageA, "SLeft: %2d\0", pwmValA);
//				OLED_ShowString(10, 20, messageA);
				sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 80049b6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80049ba:	f7fb fdc5 	bl	8000548 <__aeabi_f2d>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	f107 001c 	add.w	r0, r7, #28
 80049c6:	4944      	ldr	r1, [pc, #272]	; (8004ad8 <moveGyroPIDOld+0x688>)
 80049c8:	f00c f8c0 	bl	8010b4c <siprintf>
				OLED_ShowString(10, 30, messageA);
 80049cc:	f107 031c 	add.w	r3, r7, #28
 80049d0:	461a      	mov	r2, r3
 80049d2:	211e      	movs	r1, #30
 80049d4:	200a      	movs	r0, #10
 80049d6:	f001 fd4b 	bl	8006470 <OLED_ShowString>
//
//				sprintf(messageB, "SRight: %2d\0", pwmValC);
//				OLED_ShowString(10, 40, messageB);
				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 80049da:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80049de:	f7fb fdb3 	bl	8000548 <__aeabi_f2d>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	f107 0008 	add.w	r0, r7, #8
 80049ea:	493c      	ldr	r1, [pc, #240]	; (8004adc <moveGyroPIDOld+0x68c>)
 80049ec:	f00c f8ae 	bl	8010b4c <siprintf>
				OLED_ShowString(10, 50, messageB);
 80049f0:	f107 0308 	add.w	r3, r7, #8
 80049f4:	461a      	mov	r2, r3
 80049f6:	2132      	movs	r1, #50	; 0x32
 80049f8:	200a      	movs	r0, #10
 80049fa:	f001 fd39 	bl	8006470 <OLED_ShowString>
				OLED_Refresh_Gram();
 80049fe:	f001 fbc3 	bl	8006188 <OLED_Refresh_Gram>
				 break;
 8004a02:	e043      	b.n	8004a8c <moveGyroPIDOld+0x63c>
//			// OLED
//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
//			OLED_ShowString(10, 30, messageA);
//			sprintf(messageB, "SRight: %2d\0", diffRight);
//			OLED_ShowString(10, 40, messageB);
			sprintf(messageA, "dist: %.2f\0", distance);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7fb fd9f 	bl	8000548 <__aeabi_f2d>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	f107 001c 	add.w	r0, r7, #28
 8004a12:	4930      	ldr	r1, [pc, #192]	; (8004ad4 <moveGyroPIDOld+0x684>)
 8004a14:	f00c f89a 	bl	8010b4c <siprintf>
			OLED_ShowString(10, 10, messageA);
 8004a18:	f107 031c 	add.w	r3, r7, #28
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	210a      	movs	r1, #10
 8004a20:	200a      	movs	r0, #10
 8004a22:	f001 fd25 	bl	8006470 <OLED_ShowString>

			sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 8004a26:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8004a2a:	f7fb fd8d 	bl	8000548 <__aeabi_f2d>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	f107 001c 	add.w	r0, r7, #28
 8004a36:	4928      	ldr	r1, [pc, #160]	; (8004ad8 <moveGyroPIDOld+0x688>)
 8004a38:	f00c f888 	bl	8010b4c <siprintf>
			OLED_ShowString(10, 30, messageA);
 8004a3c:	f107 031c 	add.w	r3, r7, #28
 8004a40:	461a      	mov	r2, r3
 8004a42:	211e      	movs	r1, #30
 8004a44:	200a      	movs	r0, #10
 8004a46:	f001 fd13 	bl	8006470 <OLED_ShowString>

			sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 8004a4a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8004a4e:	f7fb fd7b 	bl	8000548 <__aeabi_f2d>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	f107 0008 	add.w	r0, r7, #8
 8004a5a:	4920      	ldr	r1, [pc, #128]	; (8004adc <moveGyroPIDOld+0x68c>)
 8004a5c:	f00c f876 	bl	8010b4c <siprintf>
			OLED_ShowString(10, 50, messageB);
 8004a60:	f107 0308 	add.w	r3, r7, #8
 8004a64:	461a      	mov	r2, r3
 8004a66:	2132      	movs	r1, #50	; 0x32
 8004a68:	200a      	movs	r0, #10
 8004a6a:	f001 fd01 	bl	8006470 <OLED_ShowString>
			OLED_Refresh_Gram();
 8004a6e:	f001 fb8b 	bl	8006188 <OLED_Refresh_Gram>

			prevTime = currTime;
 8004a72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			leftTick_prev = leftTick;
 8004a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			rightTick_prev = rightTick;
 8004a82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004a8a:	e5fe      	b.n	800468a <moveGyroPIDOld+0x23a>
		 }
	}
//	moving = 0;
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	2108      	movs	r1, #8
 8004a90:	4813      	ldr	r0, [pc, #76]	; (8004ae0 <moveGyroPIDOld+0x690>)
 8004a92:	f002 fe13 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004a96:	2200      	movs	r2, #0
 8004a98:	2104      	movs	r1, #4
 8004a9a:	4811      	ldr	r0, [pc, #68]	; (8004ae0 <moveGyroPIDOld+0x690>)
 8004a9c:	f002 fe0e 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004aa6:	480f      	ldr	r0, [pc, #60]	; (8004ae4 <moveGyroPIDOld+0x694>)
 8004aa8:	f002 fe08 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004aac:	2200      	movs	r2, #0
 8004aae:	2120      	movs	r1, #32
 8004ab0:	480d      	ldr	r0, [pc, #52]	; (8004ae8 <moveGyroPIDOld+0x698>)
 8004ab2:	f002 fe03 	bl	80076bc <HAL_GPIO_WritePin>
	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8004ab6:	4b05      	ldr	r3, [pc, #20]	; (8004acc <moveGyroPIDOld+0x67c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2295      	movs	r2, #149	; 0x95
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40
	return;
 8004abe:	bf00      	nop
}
 8004ac0:	37c8      	adds	r7, #200	; 0xc8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000418 	.word	0x20000418
 8004acc:	20000258 	.word	0x20000258
 8004ad0:	20000378 	.word	0x20000378
 8004ad4:	08014774 	.word	0x08014774
 8004ad8:	08014780 	.word	0x08014780
 8004adc:	08014790 	.word	0x08014790
 8004ae0:	40020000 	.word	0x40020000
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	40020800 	.word	0x40020800

08004aec <move>:

void move(float distance, int forward)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b0b2      	sub	sp, #200	; 0xc8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	ed87 0a01 	vstr	s0, [r7, #4]
 8004af6:	6038      	str	r0, [r7, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8004af8:	2100      	movs	r1, #0
 8004afa:	48d1      	ldr	r0, [pc, #836]	; (8004e40 <move+0x354>)
 8004afc:	f005 fe94 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004b00:	2108      	movs	r1, #8
 8004b02:	48cf      	ldr	r0, [pc, #828]	; (8004e40 <move+0x354>)
 8004b04:	f005 fe90 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004b08:	210c      	movs	r1, #12
 8004b0a:	48ce      	ldr	r0, [pc, #824]	; (8004e44 <move+0x358>)
 8004b0c:	f005 fe8c 	bl	800a828 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8004b10:	4bcc      	ldr	r3, [pc, #816]	; (8004e44 <move+0x358>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2295      	movs	r2, #149	; 0x95
 8004b16:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 8004b18:	2064      	movs	r0, #100	; 0x64
 8004b1a:	f008 fc38 	bl	800d38e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8004b1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b22:	2224      	movs	r2, #36	; 0x24
 8004b24:	2100      	movs	r1, #0
 8004b26:	4618      	mov	r0, r3
 8004b28:	f00b f988 	bl	800fe3c <memset>
 8004b2c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004b30:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004b36:	663b      	str	r3, [r7, #96]	; 0x60
 8004b38:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004b3c:	667b      	str	r3, [r7, #100]	; 0x64
 8004b3e:	4bc2      	ldr	r3, [pc, #776]	; (8004e48 <move+0x35c>)
 8004b40:	66bb      	str	r3, [r7, #104]	; 0x68
						  500, 1500,
						  SAMPLE_TIME_S };


	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8004b42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b46:	2224      	movs	r2, #36	; 0x24
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f00b f976 	bl	800fe3c <memset>
 8004b50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004b54:	637b      	str	r3, [r7, #52]	; 0x34
 8004b56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b5c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004b60:	643b      	str	r3, [r7, #64]	; 0x40
 8004b62:	4bb9      	ldr	r3, [pc, #740]	; (8004e48 <move+0x35c>)
 8004b64:	647b      	str	r3, [r7, #68]	; 0x44
							500, 1500,
						  SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8004b66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f001 fd3e 	bl	80065ec <PIDController_Init>
	PIDController_Init(&pidRight);
 8004b70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b74:	4618      	mov	r0, r3
 8004b76:	f001 fd39 	bl	80065ec <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8004b7a:	4bb4      	ldr	r3, [pc, #720]	; (8004e4c <move+0x360>)
 8004b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float wheel_rotationTicksR = 779; // for back right wheel
 8004b80:	4bb3      	ldr	r3, [pc, #716]	; (8004e50 <move+0x364>)
 8004b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 8004b86:	4bb3      	ldr	r3, [pc, #716]	; (8004e54 <move+0x368>)
 8004b88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8004b8c:	213c      	movs	r1, #60	; 0x3c
 8004b8e:	48b2      	ldr	r0, [pc, #712]	; (8004e58 <move+0x36c>)
 8004b90:	f006 f930 	bl	800adf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8004b94:	213c      	movs	r1, #60	; 0x3c
 8004b96:	48b1      	ldr	r0, [pc, #708]	; (8004e5c <move+0x370>)
 8004b98:	f006 f92c 	bl	800adf4 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8004b9c:	4bae      	ldr	r3, [pc, #696]	; (8004e58 <move+0x36c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8004ba6:	4bad      	ldr	r3, [pc, #692]	; (8004e5c <move+0x370>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8004bb0:	f002 fa06 	bl	8006fc0 <HAL_GetTick>
 8004bb4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	uint32_t prevTime = startTime;
 8004bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float totalDistance_right = 0;
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int diffRight = 0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distErrOffset;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8004bdc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004be0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
	uint16_t pwmValC = 2000;
 8004be4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004be8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if(forward){
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d015      	beq.n	8004c1e <move+0x132>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	2108      	movs	r1, #8
 8004bf6:	489a      	ldr	r0, [pc, #616]	; (8004e60 <move+0x374>)
 8004bf8:	f002 fd60 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2104      	movs	r1, #4
 8004c00:	4897      	ldr	r0, [pc, #604]	; (8004e60 <move+0x374>)
 8004c02:	f002 fd5b 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004c06:	2201      	movs	r2, #1
 8004c08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c0c:	4895      	ldr	r0, [pc, #596]	; (8004e64 <move+0x378>)
 8004c0e:	f002 fd55 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004c12:	2200      	movs	r2, #0
 8004c14:	2120      	movs	r1, #32
 8004c16:	4894      	ldr	r0, [pc, #592]	; (8004e68 <move+0x37c>)
 8004c18:	f002 fd50 	bl	80076bc <HAL_GPIO_WritePin>
 8004c1c:	e014      	b.n	8004c48 <move+0x15c>
	}else{
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8004c1e:	2200      	movs	r2, #0
 8004c20:	2108      	movs	r1, #8
 8004c22:	488f      	ldr	r0, [pc, #572]	; (8004e60 <move+0x374>)
 8004c24:	f002 fd4a 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8004c28:	2201      	movs	r2, #1
 8004c2a:	2104      	movs	r1, #4
 8004c2c:	488c      	ldr	r0, [pc, #560]	; (8004e60 <move+0x374>)
 8004c2e:	f002 fd45 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8004c32:	2200      	movs	r2, #0
 8004c34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c38:	488a      	ldr	r0, [pc, #552]	; (8004e64 <move+0x378>)
 8004c3a:	f002 fd3f 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8004c3e:	2201      	movs	r2, #1
 8004c40:	2120      	movs	r1, #32
 8004c42:	4889      	ldr	r0, [pc, #548]	; (8004e68 <move+0x37c>)
 8004c44:	f002 fd3a 	bl	80076bc <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for(;;)
	{

		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004c48:	4b7d      	ldr	r3, [pc, #500]	; (8004e40 <move+0x354>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8004c50:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8004c52:	4b7b      	ldr	r3, [pc, #492]	; (8004e40 <move+0x354>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8004c5a:	63da      	str	r2, [r3, #60]	; 0x3c
		 currTime = HAL_GetTick();
 8004c5c:	f002 f9b0 	bl	8006fc0 <HAL_GetTick>
 8004c60:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		 moving = 1;
 8004c64:	4b81      	ldr	r3, [pc, #516]	; (8004e6c <move+0x380>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	701a      	strb	r2, [r3, #0]

		 if (currTime-prevTime > 60L)
 8004c6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b3c      	cmp	r3, #60	; 0x3c
 8004c76:	d9e7      	bls.n	8004c48 <move+0x15c>
		 {
			 leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8004c78:	4b77      	ldr	r3, [pc, #476]	; (8004e58 <move+0x36c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			 rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8004c82:	4b76      	ldr	r3, [pc, #472]	; (8004e5c <move+0x370>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			 diffLeft = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			 diffRight = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8004c98:	4b6f      	ldr	r3, [pc, #444]	; (8004e58 <move+0x36c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b10      	cmp	r3, #16
 8004ca4:	d118      	bne.n	8004cd8 <move+0x1ec>
			 {
				 if (leftTick < leftTick_prev)
 8004ca6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	da07      	bge.n	8004cc2 <move+0x1d6>
					 diffLeft = leftTick_prev - leftTick;
 8004cb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cc0:	e022      	b.n	8004d08 <move+0x21c>
				 else
					 diffLeft = (65535 - leftTick) + leftTick_prev;
 8004cc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cc6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004cca:	33ff      	adds	r3, #255	; 0xff
 8004ccc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cd6:	e017      	b.n	8004d08 <move+0x21c>
			 }
			 else
			 {
				 if (leftTick > leftTick_prev)
 8004cd8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	dd07      	ble.n	8004cf4 <move+0x208>
					 diffLeft = leftTick - leftTick_prev;
 8004ce4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cf2:	e009      	b.n	8004d08 <move+0x21c>
				 else
					 diffLeft = 65535 - leftTick_prev + leftTick;
 8004cf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cf8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004cfc:	33ff      	adds	r3, #255	; 0xff
 8004cfe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004d02:	4413      	add	r3, r2
 8004d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			 }

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8004d08:	4b54      	ldr	r3, [pc, #336]	; (8004e5c <move+0x370>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b10      	cmp	r3, #16
 8004d14:	d118      	bne.n	8004d48 <move+0x25c>
			 {
				 if (rightTick < rightTick_prev)
 8004d16:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004d1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	da07      	bge.n	8004d32 <move+0x246>
					 diffRight = rightTick_prev - rightTick;
 8004d22:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d30:	e022      	b.n	8004d78 <move+0x28c>
				 else
					 diffRight = (65535 - rightTick) + rightTick_prev;
 8004d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d36:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004d3a:	33ff      	adds	r3, #255	; 0xff
 8004d3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d40:	4413      	add	r3, r2
 8004d42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d46:	e017      	b.n	8004d78 <move+0x28c>
			 }
			 else
			 {
				 if (rightTick > rightTick_prev)
 8004d48:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004d4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d50:	429a      	cmp	r2, r3
 8004d52:	dd07      	ble.n	8004d64 <move+0x278>
					 diffRight = rightTick - rightTick_prev;
 8004d54:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004d58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d62:	e009      	b.n	8004d78 <move+0x28c>
				 else
					 diffRight = 65535 - rightTick_prev + rightTick;
 8004d64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d68:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004d6c:	33ff      	adds	r3, #255	; 0xff
 8004d6e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004d72:	4413      	add	r3, r2
 8004d74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 }

			 // left measured distance
			 distLeft = ((float)diffLeft/wheel_rotationTicksL) * wheel_circumference;
 8004d78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d84:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8004d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d8c:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8004d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d94:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
			 totalDistance_left += distLeft;
 8004d98:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004d9c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8004da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004da4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

			 // right measured distance
			 distRight = ((float)diffRight/wheel_rotationTicksR) * wheel_circumference;
 8004da8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dac:	ee07 3a90 	vmov	s15, r3
 8004db0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004db4:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8004db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dbc:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8004dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
			 totalDistance_right += distRight;
 8004dc8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004dcc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dd4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
			 // 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.

#define pwmValAadjust 300;
#define pwmValBadjust 525;

			 if (forward){
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d04c      	beq.n	8004e78 <move+0x38c>

				 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA) - pwmValAadjust;
 8004dde:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8004de2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004e70 <move+0x384>
 8004de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dea:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8004dee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004df2:	4611      	mov	r1, r2
 8004df4:	edd7 0a2e 	vldr	s1, [r7, #184]	; 0xb8
 8004df8:	eeb0 0a67 	vmov.f32	s0, s15
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f001 fc0d 	bl	800661c <PIDController_Update>
 8004e02:	4603      	mov	r3, r0
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e0a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa

				 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC) + pwmValBadjust;
 8004e0e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8004e12:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004e70 <move+0x384>
 8004e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e1a:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8004e1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e22:	4611      	mov	r1, r2
 8004e24:	eef0 0a67 	vmov.f32	s1, s15
 8004e28:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f001 fbf5 	bl	800661c <PIDController_Update>
 8004e32:	4603      	mov	r3, r0
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8004e3a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004e3e:	e04b      	b.n	8004ed8 <move+0x3ec>
 8004e40:	20000378 	.word	0x20000378
 8004e44:	20000258 	.word	0x20000258
 8004e48:	3d4ccccd 	.word	0x3d4ccccd
 8004e4c:	44440000 	.word	0x44440000
 8004e50:	4442c000 	.word	0x4442c000
 8004e54:	41b33333 	.word	0x41b33333
 8004e58:	200002a0 	.word	0x200002a0
 8004e5c:	20000330 	.word	0x20000330
 8004e60:	40020000 	.word	0x40020000
 8004e64:	40021000 	.word	0x40021000
 8004e68:	40020800 	.word	0x40020800
 8004e6c:	20000414 	.word	0x20000414
 8004e70:	3f83f7cf 	.word	0x3f83f7cf
 8004e74:	3f81b717 	.word	0x3f81b717
			 }else{
				 pwmValA = PIDController_Update(&pidLeft, totalDistance_right, totalDistance_left*STRAIGHTRATIOR, pwmValA) - pwmValAadjust;
 8004e78:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004e7c:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8004e74 <move+0x388>
 8004e80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e84:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8004e88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	eef0 0a67 	vmov.f32	s1, s15
 8004e92:	ed97 0a2d 	vldr	s0, [r7, #180]	; 0xb4
 8004e96:	4618      	mov	r0, r3
 8004e98:	f001 fbc0 	bl	800661c <PIDController_Update>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ea4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa

				 pwmValC = PIDController_Update(&pidRight, totalDistance_left*STRAIGHTRATIOR, totalDistance_right, pwmValC) + pwmValBadjust;
 8004ea8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004eac:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 8004e74 <move+0x388>
 8004eb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004eb4:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8004eb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	edd7 0a2d 	vldr	s1, [r7, #180]	; 0xb4
 8004ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 fba8 	bl	800661c <PIDController_Update>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8004ed4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
			 }


			 distanceError = distErrOffset * distance;
 8004ed8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004edc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

			 if (totalDistance_left >= (distance+distanceError) || totalDistance_right >= (distance+distanceError))
 8004ee8:	ed97 7a01 	vldr	s14, [r7, #4]
 8004eec:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8004ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ef4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004ef8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f00:	da0c      	bge.n	8004f1c <move+0x430>
 8004f02:	ed97 7a01 	vldr	s14, [r7, #4]
 8004f06:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8004f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f0e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004f12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1a:	db60      	blt.n	8004fde <move+0x4f2>
			 {
				 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8004f1c:	4b48      	ldr	r3, [pc, #288]	; (8005040 <move+0x554>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2200      	movs	r2, #0
 8004f22:	635a      	str	r2, [r3, #52]	; 0x34
				 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 8004f24:	4b46      	ldr	r3, [pc, #280]	; (8005040 <move+0x554>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	63da      	str	r2, [r3, #60]	; 0x3c
				 moving = 0;
 8004f2c:	4b45      	ldr	r3, [pc, #276]	; (8005044 <move+0x558>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	701a      	strb	r2, [r3, #0]
				sprintf(messageA, "dist: %.2f\0", distance);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fb fb08 	bl	8000548 <__aeabi_f2d>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	f107 0020 	add.w	r0, r7, #32
 8004f40:	4941      	ldr	r1, [pc, #260]	; (8005048 <move+0x55c>)
 8004f42:	f00b fe03 	bl	8010b4c <siprintf>
				OLED_ShowString(10, 10, messageA);
 8004f46:	f107 0320 	add.w	r3, r7, #32
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	210a      	movs	r1, #10
 8004f4e:	200a      	movs	r0, #10
 8004f50:	f001 fa8e 	bl	8006470 <OLED_ShowString>
				sprintf(messageA, "SLeft: %2d\0", pwmValA);
 8004f54:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8004f58:	f107 0320 	add.w	r3, r7, #32
 8004f5c:	493b      	ldr	r1, [pc, #236]	; (800504c <move+0x560>)
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f00b fdf4 	bl	8010b4c <siprintf>
				OLED_ShowString(10, 20, messageA);
 8004f64:	f107 0320 	add.w	r3, r7, #32
 8004f68:	461a      	mov	r2, r3
 8004f6a:	2114      	movs	r1, #20
 8004f6c:	200a      	movs	r0, #10
 8004f6e:	f001 fa7f 	bl	8006470 <OLED_ShowString>
				sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 8004f72:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8004f76:	f7fb fae7 	bl	8000548 <__aeabi_f2d>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	f107 0020 	add.w	r0, r7, #32
 8004f82:	4933      	ldr	r1, [pc, #204]	; (8005050 <move+0x564>)
 8004f84:	f00b fde2 	bl	8010b4c <siprintf>
				OLED_ShowString(10, 30, messageA);
 8004f88:	f107 0320 	add.w	r3, r7, #32
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	211e      	movs	r1, #30
 8004f90:	200a      	movs	r0, #10
 8004f92:	f001 fa6d 	bl	8006470 <OLED_ShowString>

				sprintf(messageB, "SRight: %2d\0", pwmValC);
 8004f96:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8004f9a:	f107 030c 	add.w	r3, r7, #12
 8004f9e:	492d      	ldr	r1, [pc, #180]	; (8005054 <move+0x568>)
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f00b fdd3 	bl	8010b4c <siprintf>
				OLED_ShowString(10, 40, messageB);
 8004fa6:	f107 030c 	add.w	r3, r7, #12
 8004faa:	461a      	mov	r2, r3
 8004fac:	2128      	movs	r1, #40	; 0x28
 8004fae:	200a      	movs	r0, #10
 8004fb0:	f001 fa5e 	bl	8006470 <OLED_ShowString>
				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 8004fb4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8004fb8:	f7fb fac6 	bl	8000548 <__aeabi_f2d>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	f107 000c 	add.w	r0, r7, #12
 8004fc4:	4924      	ldr	r1, [pc, #144]	; (8005058 <move+0x56c>)
 8004fc6:	f00b fdc1 	bl	8010b4c <siprintf>
				OLED_ShowString(10, 50, messageB);
 8004fca:	f107 030c 	add.w	r3, r7, #12
 8004fce:	461a      	mov	r2, r3
 8004fd0:	2132      	movs	r1, #50	; 0x32
 8004fd2:	200a      	movs	r0, #10
 8004fd4:	f001 fa4c 	bl	8006470 <OLED_ShowString>
				OLED_Refresh_Gram();
 8004fd8:	f001 f8d6 	bl	8006188 <OLED_Refresh_Gram>
				 break;
 8004fdc:	e00c      	b.n	8004ff8 <move+0x50c>
//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
//			OLED_ShowString(10, 30, messageA);
//			sprintf(messageB, "SRight: %2d\0", diffRight);
//			OLED_ShowString(10, 40, messageB);

			prevTime = currTime;
 8004fde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004fe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			leftTick_prev = leftTick;
 8004fe6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			rightTick_prev = rightTick;
 8004fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ff2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004ff6:	e627      	b.n	8004c48 <move+0x15c>
		 }
	}
	moving = 0;
 8004ff8:	4b12      	ldr	r3, [pc, #72]	; (8005044 <move+0x558>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004ffe:	2201      	movs	r2, #1
 8005000:	2108      	movs	r1, #8
 8005002:	4816      	ldr	r0, [pc, #88]	; (800505c <move+0x570>)
 8005004:	f002 fb5a 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005008:	2200      	movs	r2, #0
 800500a:	2104      	movs	r1, #4
 800500c:	4813      	ldr	r0, [pc, #76]	; (800505c <move+0x570>)
 800500e:	f002 fb55 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005012:	2201      	movs	r2, #1
 8005014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005018:	4811      	ldr	r0, [pc, #68]	; (8005060 <move+0x574>)
 800501a:	f002 fb4f 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800501e:	2200      	movs	r2, #0
 8005020:	2120      	movs	r1, #32
 8005022:	4810      	ldr	r0, [pc, #64]	; (8005064 <move+0x578>)
 8005024:	f002 fb4a 	bl	80076bc <HAL_GPIO_WritePin>
	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8005028:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <move+0x57c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2295      	movs	r2, #149	; 0x95
 800502e:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8005030:	200a      	movs	r0, #10
 8005032:	f008 f9ac 	bl	800d38e <osDelay>
	return;
 8005036:	bf00      	nop
}
 8005038:	37c8      	adds	r7, #200	; 0xc8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000378 	.word	0x20000378
 8005044:	20000414 	.word	0x20000414
 8005048:	08014774 	.word	0x08014774
 800504c:	080147a0 	.word	0x080147a0
 8005050:	08014780 	.word	0x08014780
 8005054:	080147ac 	.word	0x080147ac
 8005058:	08014790 	.word	0x08014790
 800505c:	40020000 	.word	0x40020000
 8005060:	40021000 	.word	0x40021000
 8005064:	40020800 	.word	0x40020800
 8005068:	20000258 	.word	0x20000258
 800506c:	00000000 	.word	0x00000000

08005070 <bLeft90>:

void bLeft90()
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
	// indoor
	uint8_t messageA[20];
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8005076:	2100      	movs	r1, #0
 8005078:	4839      	ldr	r0, [pc, #228]	; (8005160 <bLeft90+0xf0>)
 800507a:	f005 fbd5 	bl	800a828 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800507e:	2108      	movs	r1, #8
 8005080:	4837      	ldr	r0, [pc, #220]	; (8005160 <bLeft90+0xf0>)
 8005082:	f005 fbd1 	bl	800a828 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005086:	210c      	movs	r1, #12
 8005088:	4836      	ldr	r0, [pc, #216]	; (8005164 <bLeft90+0xf4>)
 800508a:	f005 fbcd 	bl	800a828 <HAL_TIM_PWM_Start>

		htim1.Instance -> CCR4 = STRAIGHT; //centre
 800508e:	4b35      	ldr	r3, [pc, #212]	; (8005164 <bLeft90+0xf4>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2295      	movs	r2, #149	; 0x95
 8005094:	641a      	str	r2, [r3, #64]	; 0x40
		move(8.5,1);
 8005096:	2001      	movs	r0, #1
 8005098:	eeb2 0a01 	vmov.f32	s0, #33	; 0x41080000  8.5
 800509c:	f7ff fd26 	bl	8004aec <move>

	  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80050a0:	2200      	movs	r2, #0
 80050a2:	2108      	movs	r1, #8
 80050a4:	4830      	ldr	r0, [pc, #192]	; (8005168 <bLeft90+0xf8>)
 80050a6:	f002 fb09 	bl	80076bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80050aa:	2201      	movs	r2, #1
 80050ac:	2104      	movs	r1, #4
 80050ae:	482e      	ldr	r0, [pc, #184]	; (8005168 <bLeft90+0xf8>)
 80050b0:	f002 fb04 	bl	80076bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 80050b4:	2200      	movs	r2, #0
 80050b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050ba:	482c      	ldr	r0, [pc, #176]	; (800516c <bLeft90+0xfc>)
 80050bc:	f002 fafe 	bl	80076bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 80050c0:	2201      	movs	r2, #1
 80050c2:	2120      	movs	r1, #32
 80050c4:	482a      	ldr	r0, [pc, #168]	; (8005170 <bLeft90+0x100>)
 80050c6:	f002 faf9 	bl	80076bc <HAL_GPIO_WritePin>
	  moving = 1;
 80050ca:	4b2a      	ldr	r3, [pc, #168]	; (8005174 <bLeft90+0x104>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	701a      	strb	r2, [r3, #0]
	  htim1.Instance -> CCR4 = LEFT;
 80050d0:	4b24      	ldr	r3, [pc, #144]	; (8005164 <bLeft90+0xf4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2269      	movs	r2, #105	; 0x69
 80050d6:	641a      	str	r2, [r3, #64]	; 0x40
	   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 600);
 80050d8:	4b21      	ldr	r3, [pc, #132]	; (8005160 <bLeft90+0xf0>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80050e0:	635a      	str	r2, [r3, #52]	; 0x34
	   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3700);
 80050e2:	4b1f      	ldr	r3, [pc, #124]	; (8005160 <bLeft90+0xf0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f640 6274 	movw	r2, #3700	; 0xe74
 80050ea:	63da      	str	r2, [r3, #60]	; 0x3c
	  while (moving)
 80050ec:	e017      	b.n	800511e <bLeft90+0xae>
	  {

	     if (totalAngle <= -81.0)
 80050ee:	4b22      	ldr	r3, [pc, #136]	; (8005178 <bLeft90+0x108>)
 80050f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050f4:	a318      	add	r3, pc, #96	; (adr r3, 8005158 <bLeft90+0xe8>)
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	f7fb fcf9 	bl	8000af0 <__aeabi_dcmple>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d111      	bne.n	8005128 <bLeft90+0xb8>
	     {
	       break;
	     }
	     sprintf(messageA, "Langle %5d\0", (int)(totalAngle));
 8005104:	4b1c      	ldr	r3, [pc, #112]	; (8005178 <bLeft90+0x108>)
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	4610      	mov	r0, r2
 800510c:	4619      	mov	r1, r3
 800510e:	f7fb fd23 	bl	8000b58 <__aeabi_d2iz>
 8005112:	4602      	mov	r2, r0
 8005114:	1d3b      	adds	r3, r7, #4
 8005116:	4919      	ldr	r1, [pc, #100]	; (800517c <bLeft90+0x10c>)
 8005118:	4618      	mov	r0, r3
 800511a:	f00b fd17 	bl	8010b4c <siprintf>
	  while (moving)
 800511e:	4b15      	ldr	r3, [pc, #84]	; (8005174 <bLeft90+0x104>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e3      	bne.n	80050ee <bLeft90+0x7e>
 8005126:	e000      	b.n	800512a <bLeft90+0xba>
	       break;
 8005128:	bf00      	nop
	//     OLED_ShowString(10,30, messageA);
	//     OLED_Refresh_Gram();
	  }
	//  stop();
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800512a:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <bLeft90+0xf0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2200      	movs	r2, #0
 8005130:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <bLeft90+0xf0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2200      	movs	r2, #0
 8005138:	63da      	str	r2, [r3, #60]	; 0x3c
	  moving = 0;
 800513a:	4b0e      	ldr	r3, [pc, #56]	; (8005174 <bLeft90+0x104>)
 800513c:	2200      	movs	r2, #0
 800513e:	701a      	strb	r2, [r3, #0]
	  move(10.75, 0);
 8005140:	2000      	movs	r0, #0
 8005142:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8005180 <bLeft90+0x110>
 8005146:	f7ff fcd1 	bl	8004aec <move>
//	//  dir = (dir + 3) % 4 ;
//	//  x += axis[dir][0] * left_90[xydir];
//	//  xydir = (xydir + 1) % 2;
//	//  y += axis[dir][1] * left_90[xydir];

}
 800514a:	bf00      	nop
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	f3af 8000 	nop.w
 8005158:	00000000 	.word	0x00000000
 800515c:	c0544000 	.word	0xc0544000
 8005160:	20000378 	.word	0x20000378
 8005164:	20000258 	.word	0x20000258
 8005168:	40020000 	.word	0x40020000
 800516c:	40021000 	.word	0x40021000
 8005170:	40020800 	.word	0x40020800
 8005174:	20000414 	.word	0x20000414
 8005178:	20000418 	.word	0x20000418
 800517c:	080147bc 	.word	0x080147bc
 8005180:	412c0000 	.word	0x412c0000

08005184 <bRight90>:

void bRight90()
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
	// indoor
	uint8_t messageA[20];
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800518a:	2100      	movs	r1, #0
 800518c:	4836      	ldr	r0, [pc, #216]	; (8005268 <bRight90+0xe4>)
 800518e:	f005 fb4b 	bl	800a828 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8005192:	2108      	movs	r1, #8
 8005194:	4834      	ldr	r0, [pc, #208]	; (8005268 <bRight90+0xe4>)
 8005196:	f005 fb47 	bl	800a828 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800519a:	210c      	movs	r1, #12
 800519c:	4833      	ldr	r0, [pc, #204]	; (800526c <bRight90+0xe8>)
 800519e:	f005 fb43 	bl	800a828 <HAL_TIM_PWM_Start>

		htim1.Instance -> CCR4 = STRAIGHT; //centre
 80051a2:	4b32      	ldr	r3, [pc, #200]	; (800526c <bRight90+0xe8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2295      	movs	r2, #149	; 0x95
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
		move(7.35, 1);
 80051aa:	2001      	movs	r0, #1
 80051ac:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8005270 <bRight90+0xec>
 80051b0:	f7ff fc9c 	bl	8004aec <move>

	  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80051b4:	2200      	movs	r2, #0
 80051b6:	2108      	movs	r1, #8
 80051b8:	482e      	ldr	r0, [pc, #184]	; (8005274 <bRight90+0xf0>)
 80051ba:	f002 fa7f 	bl	80076bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80051be:	2201      	movs	r2, #1
 80051c0:	2104      	movs	r1, #4
 80051c2:	482c      	ldr	r0, [pc, #176]	; (8005274 <bRight90+0xf0>)
 80051c4:	f002 fa7a 	bl	80076bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 80051c8:	2200      	movs	r2, #0
 80051ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051ce:	482a      	ldr	r0, [pc, #168]	; (8005278 <bRight90+0xf4>)
 80051d0:	f002 fa74 	bl	80076bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 80051d4:	2201      	movs	r2, #1
 80051d6:	2120      	movs	r1, #32
 80051d8:	4828      	ldr	r0, [pc, #160]	; (800527c <bRight90+0xf8>)
 80051da:	f002 fa6f 	bl	80076bc <HAL_GPIO_WritePin>
	  moving = 1;
 80051de:	4b28      	ldr	r3, [pc, #160]	; (8005280 <bRight90+0xfc>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	701a      	strb	r2, [r3, #0]
	  htim1.Instance -> CCR4 = 250;
 80051e4:	4b21      	ldr	r3, [pc, #132]	; (800526c <bRight90+0xe8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	22fa      	movs	r2, #250	; 0xfa
 80051ea:	641a      	str	r2, [r3, #64]	; 0x40
	   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3400);
 80051ec:	4b1e      	ldr	r3, [pc, #120]	; (8005268 <bRight90+0xe4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f640 5248 	movw	r2, #3400	; 0xd48
 80051f4:	635a      	str	r2, [r3, #52]	; 0x34
	   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 500);
 80051f6:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <bRight90+0xe4>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80051fe:	63da      	str	r2, [r3, #60]	; 0x3c
	  while (moving)
 8005200:	e017      	b.n	8005232 <bRight90+0xae>
	  {

	     if (totalAngle > 77)
 8005202:	4b20      	ldr	r3, [pc, #128]	; (8005284 <bRight90+0x100>)
 8005204:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	4b1e      	ldr	r3, [pc, #120]	; (8005288 <bRight90+0x104>)
 800520e:	f7fb fc83 	bl	8000b18 <__aeabi_dcmpgt>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d111      	bne.n	800523c <bRight90+0xb8>
	     {
	       break;
	     }
	     sprintf(messageA, "Langle %5d\0", (int)(totalAngle));
 8005218:	4b1a      	ldr	r3, [pc, #104]	; (8005284 <bRight90+0x100>)
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	4610      	mov	r0, r2
 8005220:	4619      	mov	r1, r3
 8005222:	f7fb fc99 	bl	8000b58 <__aeabi_d2iz>
 8005226:	4602      	mov	r2, r0
 8005228:	1d3b      	adds	r3, r7, #4
 800522a:	4918      	ldr	r1, [pc, #96]	; (800528c <bRight90+0x108>)
 800522c:	4618      	mov	r0, r3
 800522e:	f00b fc8d 	bl	8010b4c <siprintf>
	  while (moving)
 8005232:	4b13      	ldr	r3, [pc, #76]	; (8005280 <bRight90+0xfc>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e3      	bne.n	8005202 <bRight90+0x7e>
 800523a:	e000      	b.n	800523e <bRight90+0xba>
	       break;
 800523c:	bf00      	nop
		//     OLED_ShowString(10,30, messageA);
		//     OLED_Refresh_Gram();
	  }
		//  stop();
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800523e:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <bRight90+0xe4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2200      	movs	r2, #0
 8005244:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005246:	4b08      	ldr	r3, [pc, #32]	; (8005268 <bRight90+0xe4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2200      	movs	r2, #0
 800524c:	63da      	str	r2, [r3, #60]	; 0x3c
	  moving = 0;
 800524e:	4b0c      	ldr	r3, [pc, #48]	; (8005280 <bRight90+0xfc>)
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]
	  move(6, 0);
 8005254:	2000      	movs	r0, #0
 8005256:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800525a:	f7ff fc47 	bl	8004aec <move>
//	//  stop();
//  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
//  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
//  moving = 0;
//  move(8, 0);
}
 800525e:	bf00      	nop
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000378 	.word	0x20000378
 800526c:	20000258 	.word	0x20000258
 8005270:	40eb3333 	.word	0x40eb3333
 8005274:	40020000 	.word	0x40020000
 8005278:	40021000 	.word	0x40021000
 800527c:	40020800 	.word	0x40020800
 8005280:	20000414 	.word	0x20000414
 8005284:	20000418 	.word	0x20000418
 8005288:	40534000 	.word	0x40534000
 800528c:	080147bc 	.word	0x080147bc

08005290 <left90>:

void left90()
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
	// indoor
	totalAngle = 0;
 8005296:	493c      	ldr	r1, [pc, #240]	; (8005388 <left90+0xf8>)
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80052a4:	2100      	movs	r1, #0
 80052a6:	4839      	ldr	r0, [pc, #228]	; (800538c <left90+0xfc>)
 80052a8:	f005 fabe 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80052ac:	2108      	movs	r1, #8
 80052ae:	4837      	ldr	r0, [pc, #220]	; (800538c <left90+0xfc>)
 80052b0:	f005 faba 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80052b4:	210c      	movs	r1, #12
 80052b6:	4836      	ldr	r0, [pc, #216]	; (8005390 <left90+0x100>)
 80052b8:	f005 fab6 	bl	800a828 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 80052bc:	4b34      	ldr	r3, [pc, #208]	; (8005390 <left90+0x100>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2295      	movs	r2, #149	; 0x95
 80052c2:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80052c4:	2201      	movs	r2, #1
 80052c6:	2108      	movs	r1, #8
 80052c8:	4832      	ldr	r0, [pc, #200]	; (8005394 <left90+0x104>)
 80052ca:	f002 f9f7 	bl	80076bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80052ce:	2200      	movs	r2, #0
 80052d0:	2104      	movs	r1, #4
 80052d2:	4830      	ldr	r0, [pc, #192]	; (8005394 <left90+0x104>)
 80052d4:	f002 f9f2 	bl	80076bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80052d8:	2201      	movs	r2, #1
 80052da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052de:	482e      	ldr	r0, [pc, #184]	; (8005398 <left90+0x108>)
 80052e0:	f002 f9ec 	bl	80076bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80052e4:	2200      	movs	r2, #0
 80052e6:	2120      	movs	r1, #32
 80052e8:	482c      	ldr	r0, [pc, #176]	; (800539c <left90+0x10c>)
 80052ea:	f002 f9e7 	bl	80076bc <HAL_GPIO_WritePin>
  moving = 1;
 80052ee:	4b2c      	ldr	r3, [pc, #176]	; (80053a0 <left90+0x110>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
  htim1.Instance -> CCR4 = LEFT;
 80052f4:	4b26      	ldr	r3, [pc, #152]	; (8005390 <left90+0x100>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2269      	movs	r2, #105	; 0x69
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40
   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 550);
 80052fc:	4b23      	ldr	r3, [pc, #140]	; (800538c <left90+0xfc>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f240 2226 	movw	r2, #550	; 0x226
 8005304:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3350);
 8005306:	4b21      	ldr	r3, [pc, #132]	; (800538c <left90+0xfc>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f640 5216 	movw	r2, #3350	; 0xd16
 800530e:	63da      	str	r2, [r3, #60]	; 0x3c
  while (moving)
 8005310:	e01f      	b.n	8005352 <left90+0xc2>
  {

     if (totalAngle >= 78)
 8005312:	4b1d      	ldr	r3, [pc, #116]	; (8005388 <left90+0xf8>)
 8005314:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	4b21      	ldr	r3, [pc, #132]	; (80053a4 <left90+0x114>)
 800531e:	f7fb fbf1 	bl	8000b04 <__aeabi_dcmpge>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d119      	bne.n	800535c <left90+0xcc>
     {
       break;
     }
     sprintf(messageA, "Langle %5d\0", (int)(totalAngle));
 8005328:	4b17      	ldr	r3, [pc, #92]	; (8005388 <left90+0xf8>)
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	4610      	mov	r0, r2
 8005330:	4619      	mov	r1, r3
 8005332:	f7fb fc11 	bl	8000b58 <__aeabi_d2iz>
 8005336:	4602      	mov	r2, r0
 8005338:	1d3b      	adds	r3, r7, #4
 800533a:	491b      	ldr	r1, [pc, #108]	; (80053a8 <left90+0x118>)
 800533c:	4618      	mov	r0, r3
 800533e:	f00b fc05 	bl	8010b4c <siprintf>
     OLED_ShowString(10,30, messageA);
 8005342:	1d3b      	adds	r3, r7, #4
 8005344:	461a      	mov	r2, r3
 8005346:	211e      	movs	r1, #30
 8005348:	200a      	movs	r0, #10
 800534a:	f001 f891 	bl	8006470 <OLED_ShowString>
     OLED_Refresh_Gram();
 800534e:	f000 ff1b 	bl	8006188 <OLED_Refresh_Gram>
  while (moving)
 8005352:	4b13      	ldr	r3, [pc, #76]	; (80053a0 <left90+0x110>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1db      	bne.n	8005312 <left90+0x82>
 800535a:	e000      	b.n	800535e <left90+0xce>
       break;
 800535c:	bf00      	nop
  }
//  stop();
  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800535e:	4b0b      	ldr	r3, [pc, #44]	; (800538c <left90+0xfc>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2200      	movs	r2, #0
 8005364:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005366:	4b09      	ldr	r3, [pc, #36]	; (800538c <left90+0xfc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2200      	movs	r2, #0
 800536c:	63da      	str	r2, [r3, #60]	; 0x3c
  move(6l,0);
 800536e:	2000      	movs	r0, #0
 8005370:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8005374:	f7ff fbba 	bl	8004aec <move>
  moving = 0;
 8005378:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <left90+0x110>)
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]
//  moveGyroPIDOld(12, 0);
//  dir = (dir + 3) % 4 ;
//  x += axis[dir][0] * left_90[xydir];
//  xydir = (xydir + 1) % 2;
//  y += axis[dir][1] * left_90[xydir];
}
 800537e:	bf00      	nop
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20000418 	.word	0x20000418
 800538c:	20000378 	.word	0x20000378
 8005390:	20000258 	.word	0x20000258
 8005394:	40020000 	.word	0x40020000
 8005398:	40021000 	.word	0x40021000
 800539c:	40020800 	.word	0x40020800
 80053a0:	20000414 	.word	0x20000414
 80053a4:	40538000 	.word	0x40538000
 80053a8:	080147bc 	.word	0x080147bc

080053ac <right90>:

void right90()
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
	//indoor
	uint8_t messageA[20];
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80053b2:	2100      	movs	r1, #0
 80053b4:	4835      	ldr	r0, [pc, #212]	; (800548c <right90+0xe0>)
 80053b6:	f005 fa37 	bl	800a828 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80053ba:	2108      	movs	r1, #8
 80053bc:	4833      	ldr	r0, [pc, #204]	; (800548c <right90+0xe0>)
 80053be:	f005 fa33 	bl	800a828 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80053c2:	210c      	movs	r1, #12
 80053c4:	4832      	ldr	r0, [pc, #200]	; (8005490 <right90+0xe4>)
 80053c6:	f005 fa2f 	bl	800a828 <HAL_TIM_PWM_Start>

		htim1.Instance -> CCR4 = STRAIGHT; //centre
 80053ca:	4b31      	ldr	r3, [pc, #196]	; (8005490 <right90+0xe4>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2295      	movs	r2, #149	; 0x95
 80053d0:	641a      	str	r2, [r3, #64]	; 0x40

	  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80053d2:	2201      	movs	r2, #1
 80053d4:	2108      	movs	r1, #8
 80053d6:	482f      	ldr	r0, [pc, #188]	; (8005494 <right90+0xe8>)
 80053d8:	f002 f970 	bl	80076bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80053dc:	2200      	movs	r2, #0
 80053de:	2104      	movs	r1, #4
 80053e0:	482c      	ldr	r0, [pc, #176]	; (8005494 <right90+0xe8>)
 80053e2:	f002 f96b 	bl	80076bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80053e6:	2201      	movs	r2, #1
 80053e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80053ec:	482a      	ldr	r0, [pc, #168]	; (8005498 <right90+0xec>)
 80053ee:	f002 f965 	bl	80076bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80053f2:	2200      	movs	r2, #0
 80053f4:	2120      	movs	r1, #32
 80053f6:	4829      	ldr	r0, [pc, #164]	; (800549c <right90+0xf0>)
 80053f8:	f002 f960 	bl	80076bc <HAL_GPIO_WritePin>
	  moving = 1;
 80053fc:	4b28      	ldr	r3, [pc, #160]	; (80054a0 <right90+0xf4>)
 80053fe:	2201      	movs	r2, #1
 8005400:	701a      	strb	r2, [r3, #0]
	  htim1.Instance -> CCR4 = 250;
 8005402:	4b23      	ldr	r3, [pc, #140]	; (8005490 <right90+0xe4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	22fa      	movs	r2, #250	; 0xfa
 8005408:	641a      	str	r2, [r3, #64]	; 0x40
	   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3500);
 800540a:	4b20      	ldr	r3, [pc, #128]	; (800548c <right90+0xe0>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8005412:	635a      	str	r2, [r3, #52]	; 0x34
	   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 700);
 8005414:	4b1d      	ldr	r3, [pc, #116]	; (800548c <right90+0xe0>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800541c:	63da      	str	r2, [r3, #60]	; 0x3c
	  while (moving)
 800541e:	e017      	b.n	8005450 <right90+0xa4>
	  {

	     if (totalAngle < -90)
 8005420:	4b20      	ldr	r3, [pc, #128]	; (80054a4 <right90+0xf8>)
 8005422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	4b1f      	ldr	r3, [pc, #124]	; (80054a8 <right90+0xfc>)
 800542c:	f7fb fb56 	bl	8000adc <__aeabi_dcmplt>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d111      	bne.n	800545a <right90+0xae>
	     {
	       break;
	     }
	     sprintf(messageA, "Rangle %5d\0", (int)(totalAngle));
 8005436:	4b1b      	ldr	r3, [pc, #108]	; (80054a4 <right90+0xf8>)
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	4610      	mov	r0, r2
 800543e:	4619      	mov	r1, r3
 8005440:	f7fb fb8a 	bl	8000b58 <__aeabi_d2iz>
 8005444:	4602      	mov	r2, r0
 8005446:	1d3b      	adds	r3, r7, #4
 8005448:	4918      	ldr	r1, [pc, #96]	; (80054ac <right90+0x100>)
 800544a:	4618      	mov	r0, r3
 800544c:	f00b fb7e 	bl	8010b4c <siprintf>
	  while (moving)
 8005450:	4b13      	ldr	r3, [pc, #76]	; (80054a0 <right90+0xf4>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e3      	bne.n	8005420 <right90+0x74>
 8005458:	e000      	b.n	800545c <right90+0xb0>
	       break;
 800545a:	bf00      	nop
	//     OLED_ShowString(10,40, messageA);
	//     OLED_Refresh_Gram();
	  }
	//  stop();
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <right90+0xe0>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2200      	movs	r2, #0
 8005462:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005464:	4b09      	ldr	r3, [pc, #36]	; (800548c <right90+0xe0>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2200      	movs	r2, #0
 800546a:	63da      	str	r2, [r3, #60]	; 0x3c
	  osDelay(200);
 800546c:	20c8      	movs	r0, #200	; 0xc8
 800546e:	f007 ff8e 	bl	800d38e <osDelay>
	  move(9,0);
 8005472:	2000      	movs	r0, #0
 8005474:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 8005478:	f7ff fb38 	bl	8004aec <move>
	  moving = 0;
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <right90+0xf4>)
 800547e:	2200      	movs	r2, #0
 8005480:	701a      	strb	r2, [r3, #0]
//  moving = 0;
//  x += axis[dir][0] * right_90[xydir];
//  xydir = (xydir + 1) % 2;
//  y += axis[dir][1] * right_90[xydir];
//  dir = (dir + 1) % 4 ;
}
 8005482:	bf00      	nop
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000378 	.word	0x20000378
 8005490:	20000258 	.word	0x20000258
 8005494:	40020000 	.word	0x40020000
 8005498:	40021000 	.word	0x40021000
 800549c:	40020800 	.word	0x40020800
 80054a0:	20000414 	.word	0x20000414
 80054a4:	20000418 	.word	0x20000418
 80054a8:	c0568000 	.word	0xc0568000
 80054ac:	080147c8 	.word	0x080147c8

080054b0 <spotTurn>:

	osDelay(1000);
	return;
}

void spotTurn(uint8_t direction){
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08c      	sub	sp, #48	; 0x30
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	4603      	mov	r3, r0
 80054b8:	71fb      	strb	r3, [r7, #7]
	uint16_t offset_show[20];

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80054ba:	2100      	movs	r1, #0
 80054bc:	48b2      	ldr	r0, [pc, #712]	; (8005788 <spotTurn+0x2d8>)
 80054be:	f005 f9b3 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80054c2:	2108      	movs	r1, #8
 80054c4:	48b0      	ldr	r0, [pc, #704]	; (8005788 <spotTurn+0x2d8>)
 80054c6:	f005 f9af 	bl	800a828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80054ca:	210c      	movs	r1, #12
 80054cc:	48af      	ldr	r0, [pc, #700]	; (800578c <spotTurn+0x2dc>)
 80054ce:	f005 f9ab 	bl	800a828 <HAL_TIM_PWM_Start>
	htim1.Instance -> CCR4 = STRAIGHT;
 80054d2:	4bae      	ldr	r3, [pc, #696]	; (800578c <spotTurn+0x2dc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2295      	movs	r2, #149	; 0x95
 80054d8:	641a      	str	r2, [r3, #64]	; 0x40

	//move forward
	if (direction) // spot turn left
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 816b 	beq.w	80057b8 <spotTurn+0x308>
	{
//		targetAngle += 90;
//		if(targetAngle > 360) targetAngle -= 360;
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80054e2:	2201      	movs	r2, #1
 80054e4:	2108      	movs	r1, #8
 80054e6:	48aa      	ldr	r0, [pc, #680]	; (8005790 <spotTurn+0x2e0>)
 80054e8:	f002 f8e8 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80054ec:	2200      	movs	r2, #0
 80054ee:	2104      	movs	r1, #4
 80054f0:	48a7      	ldr	r0, [pc, #668]	; (8005790 <spotTurn+0x2e0>)
 80054f2:	f002 f8e3 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80054f6:	2201      	movs	r2, #1
 80054f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054fc:	48a5      	ldr	r0, [pc, #660]	; (8005794 <spotTurn+0x2e4>)
 80054fe:	f002 f8dd 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005502:	2200      	movs	r2, #0
 8005504:	2120      	movs	r1, #32
 8005506:	48a4      	ldr	r0, [pc, #656]	; (8005798 <spotTurn+0x2e8>)
 8005508:	f002 f8d8 	bl	80076bc <HAL_GPIO_WritePin>
		 htim1.Instance -> CCR4 = LEFT;
 800550c:	4b9f      	ldr	r3, [pc, #636]	; (800578c <spotTurn+0x2dc>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2269      	movs	r2, #105	; 0x69
 8005512:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 800);
 8005514:	4b9c      	ldr	r3, [pc, #624]	; (8005788 <spotTurn+0x2d8>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f44f 7248 	mov.w	r2, #800	; 0x320
 800551c:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1500);
 800551e:	4b9a      	ldr	r3, [pc, #616]	; (8005788 <spotTurn+0x2d8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005526:	63da      	str	r2, [r3, #60]	; 0x3c
		 moving = 1;
 8005528:	4b9c      	ldr	r3, [pc, #624]	; (800579c <spotTurn+0x2ec>)
 800552a:	2201      	movs	r2, #1
 800552c:	701a      	strb	r2, [r3, #0]
		 while (moving)
 800552e:	e021      	b.n	8005574 <spotTurn+0xc4>
		 {
			 if (totalAngle >= 18)
 8005530:	4b9b      	ldr	r3, [pc, #620]	; (80057a0 <spotTurn+0x2f0>)
 8005532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	4b9a      	ldr	r3, [pc, #616]	; (80057a4 <spotTurn+0x2f4>)
 800553c:	f7fb fae2 	bl	8000b04 <__aeabi_dcmpge>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d11b      	bne.n	800557e <spotTurn+0xce>
			 }
//				 else
//				 {
//					 break;
//				 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8005546:	4b96      	ldr	r3, [pc, #600]	; (80057a0 <spotTurn+0x2f0>)
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	4610      	mov	r0, r2
 800554e:	4619      	mov	r1, r3
 8005550:	f7fb fb02 	bl	8000b58 <__aeabi_d2iz>
 8005554:	4602      	mov	r2, r0
 8005556:	f107 0308 	add.w	r3, r7, #8
 800555a:	4993      	ldr	r1, [pc, #588]	; (80057a8 <spotTurn+0x2f8>)
 800555c:	4618      	mov	r0, r3
 800555e:	f00b faf5 	bl	8010b4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 8005562:	f107 0308 	add.w	r3, r7, #8
 8005566:	461a      	mov	r2, r3
 8005568:	2114      	movs	r1, #20
 800556a:	200a      	movs	r0, #10
 800556c:	f000 ff80 	bl	8006470 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8005570:	f000 fe0a 	bl	8006188 <OLED_Refresh_Gram>
		 while (moving)
 8005574:	4b89      	ldr	r3, [pc, #548]	; (800579c <spotTurn+0x2ec>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1d9      	bne.n	8005530 <spotTurn+0x80>
 800557c:	e000      	b.n	8005580 <spotTurn+0xd0>
				 break;
 800557e:	bf00      	nop
		 }
		 HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8005580:	2200      	movs	r2, #0
 8005582:	2108      	movs	r1, #8
 8005584:	4882      	ldr	r0, [pc, #520]	; (8005790 <spotTurn+0x2e0>)
 8005586:	f002 f899 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800558a:	2201      	movs	r2, #1
 800558c:	2104      	movs	r1, #4
 800558e:	4880      	ldr	r0, [pc, #512]	; (8005790 <spotTurn+0x2e0>)
 8005590:	f002 f894 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8005594:	2200      	movs	r2, #0
 8005596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800559a:	487e      	ldr	r0, [pc, #504]	; (8005794 <spotTurn+0x2e4>)
 800559c:	f002 f88e 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 80055a0:	2201      	movs	r2, #1
 80055a2:	2120      	movs	r1, #32
 80055a4:	487c      	ldr	r0, [pc, #496]	; (8005798 <spotTurn+0x2e8>)
 80055a6:	f002 f889 	bl	80076bc <HAL_GPIO_WritePin>
		 //robot forward left to reduce turning radius
		 htim1.Instance -> CCR4 = RIGHT;
 80055aa:	4b78      	ldr	r3, [pc, #480]	; (800578c <spotTurn+0x2dc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	22fa      	movs	r2, #250	; 0xfa
 80055b0:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1500);
 80055b2:	4b75      	ldr	r3, [pc, #468]	; (8005788 <spotTurn+0x2d8>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80055ba:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 500);
 80055bc:	4b72      	ldr	r3, [pc, #456]	; (8005788 <spotTurn+0x2d8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80055c4:	63da      	str	r2, [r3, #60]	; 0x3c
		 while (moving)
 80055c6:	e021      	b.n	800560c <spotTurn+0x15c>
		 {
			 if (totalAngle >= 38)
 80055c8:	4b75      	ldr	r3, [pc, #468]	; (80057a0 <spotTurn+0x2f0>)
 80055ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055ce:	f04f 0200 	mov.w	r2, #0
 80055d2:	4b76      	ldr	r3, [pc, #472]	; (80057ac <spotTurn+0x2fc>)
 80055d4:	f7fb fa96 	bl	8000b04 <__aeabi_dcmpge>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d11b      	bne.n	8005616 <spotTurn+0x166>
			 {
				 break;
			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 80055de:	4b70      	ldr	r3, [pc, #448]	; (80057a0 <spotTurn+0x2f0>)
 80055e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e4:	4610      	mov	r0, r2
 80055e6:	4619      	mov	r1, r3
 80055e8:	f7fb fab6 	bl	8000b58 <__aeabi_d2iz>
 80055ec:	4602      	mov	r2, r0
 80055ee:	f107 0308 	add.w	r3, r7, #8
 80055f2:	496d      	ldr	r1, [pc, #436]	; (80057a8 <spotTurn+0x2f8>)
 80055f4:	4618      	mov	r0, r3
 80055f6:	f00b faa9 	bl	8010b4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 80055fa:	f107 0308 	add.w	r3, r7, #8
 80055fe:	461a      	mov	r2, r3
 8005600:	2114      	movs	r1, #20
 8005602:	200a      	movs	r0, #10
 8005604:	f000 ff34 	bl	8006470 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8005608:	f000 fdbe 	bl	8006188 <OLED_Refresh_Gram>
		 while (moving)
 800560c:	4b63      	ldr	r3, [pc, #396]	; (800579c <spotTurn+0x2ec>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1d9      	bne.n	80055c8 <spotTurn+0x118>
 8005614:	e000      	b.n	8005618 <spotTurn+0x168>
				 break;
 8005616:	bf00      	nop
		 }
		 htim1.Instance -> CCR4 = STRAIGHT;
 8005618:	4b5c      	ldr	r3, [pc, #368]	; (800578c <spotTurn+0x2dc>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2295      	movs	r2, #149	; 0x95
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005620:	4b59      	ldr	r3, [pc, #356]	; (8005788 <spotTurn+0x2d8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2200      	movs	r2, #0
 8005626:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005628:	4b57      	ldr	r3, [pc, #348]	; (8005788 <spotTurn+0x2d8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2200      	movs	r2, #0
 800562e:	63da      	str	r2, [r3, #60]	; 0x3c
		 osDelay(100);
 8005630:	2064      	movs	r0, #100	; 0x64
 8005632:	f007 feac 	bl	800d38e <osDelay>
		 move(5,1);
 8005636:	2001      	movs	r0, #1
 8005638:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800563c:	f7ff fa56 	bl	8004aec <move>
		 osDelay(100);
 8005640:	2064      	movs	r0, #100	; 0x64
 8005642:	f007 fea4 	bl	800d38e <osDelay>
		 moving=1;
 8005646:	4b55      	ldr	r3, [pc, #340]	; (800579c <spotTurn+0x2ec>)
 8005648:	2201      	movs	r2, #1
 800564a:	701a      	strb	r2, [r3, #0]
		 //continue forward left
		 HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800564c:	2201      	movs	r2, #1
 800564e:	2108      	movs	r1, #8
 8005650:	484f      	ldr	r0, [pc, #316]	; (8005790 <spotTurn+0x2e0>)
 8005652:	f002 f833 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005656:	2200      	movs	r2, #0
 8005658:	2104      	movs	r1, #4
 800565a:	484d      	ldr	r0, [pc, #308]	; (8005790 <spotTurn+0x2e0>)
 800565c:	f002 f82e 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005660:	2201      	movs	r2, #1
 8005662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005666:	484b      	ldr	r0, [pc, #300]	; (8005794 <spotTurn+0x2e4>)
 8005668:	f002 f828 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800566c:	2200      	movs	r2, #0
 800566e:	2120      	movs	r1, #32
 8005670:	4849      	ldr	r0, [pc, #292]	; (8005798 <spotTurn+0x2e8>)
 8005672:	f002 f823 	bl	80076bc <HAL_GPIO_WritePin>
		 htim1.Instance -> CCR4 = LEFT;
 8005676:	4b45      	ldr	r3, [pc, #276]	; (800578c <spotTurn+0x2dc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2269      	movs	r2, #105	; 0x69
 800567c:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 800);
 800567e:	4b42      	ldr	r3, [pc, #264]	; (8005788 <spotTurn+0x2d8>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005686:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1500);
 8005688:	4b3f      	ldr	r3, [pc, #252]	; (8005788 <spotTurn+0x2d8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005690:	63da      	str	r2, [r3, #60]	; 0x3c
		 while (moving)
 8005692:	e021      	b.n	80056d8 <spotTurn+0x228>
		 {
			 if (totalAngle >= 23)
 8005694:	4b42      	ldr	r3, [pc, #264]	; (80057a0 <spotTurn+0x2f0>)
 8005696:	e9d3 0100 	ldrd	r0, r1, [r3]
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	4b44      	ldr	r3, [pc, #272]	; (80057b0 <spotTurn+0x300>)
 80056a0:	f7fb fa30 	bl	8000b04 <__aeabi_dcmpge>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d11b      	bne.n	80056e2 <spotTurn+0x232>
			 {
				 break;
			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 80056aa:	4b3d      	ldr	r3, [pc, #244]	; (80057a0 <spotTurn+0x2f0>)
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	4610      	mov	r0, r2
 80056b2:	4619      	mov	r1, r3
 80056b4:	f7fb fa50 	bl	8000b58 <__aeabi_d2iz>
 80056b8:	4602      	mov	r2, r0
 80056ba:	f107 0308 	add.w	r3, r7, #8
 80056be:	493a      	ldr	r1, [pc, #232]	; (80057a8 <spotTurn+0x2f8>)
 80056c0:	4618      	mov	r0, r3
 80056c2:	f00b fa43 	bl	8010b4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 80056c6:	f107 0308 	add.w	r3, r7, #8
 80056ca:	461a      	mov	r2, r3
 80056cc:	2114      	movs	r1, #20
 80056ce:	200a      	movs	r0, #10
 80056d0:	f000 fece 	bl	8006470 <OLED_ShowString>
			 OLED_Refresh_Gram();
 80056d4:	f000 fd58 	bl	8006188 <OLED_Refresh_Gram>
		 while (moving)
 80056d8:	4b30      	ldr	r3, [pc, #192]	; (800579c <spotTurn+0x2ec>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1d9      	bne.n	8005694 <spotTurn+0x1e4>
 80056e0:	e000      	b.n	80056e4 <spotTurn+0x234>
				 break;
 80056e2:	bf00      	nop
		 }
		 //continue reverse right
		 HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80056e4:	2200      	movs	r2, #0
 80056e6:	2108      	movs	r1, #8
 80056e8:	4829      	ldr	r0, [pc, #164]	; (8005790 <spotTurn+0x2e0>)
 80056ea:	f001 ffe7 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80056ee:	2201      	movs	r2, #1
 80056f0:	2104      	movs	r1, #4
 80056f2:	4827      	ldr	r0, [pc, #156]	; (8005790 <spotTurn+0x2e0>)
 80056f4:	f001 ffe2 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 80056f8:	2200      	movs	r2, #0
 80056fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056fe:	4825      	ldr	r0, [pc, #148]	; (8005794 <spotTurn+0x2e4>)
 8005700:	f001 ffdc 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8005704:	2201      	movs	r2, #1
 8005706:	2120      	movs	r1, #32
 8005708:	4823      	ldr	r0, [pc, #140]	; (8005798 <spotTurn+0x2e8>)
 800570a:	f001 ffd7 	bl	80076bc <HAL_GPIO_WritePin>
		 htim1.Instance -> CCR4 = RIGHT;
 800570e:	4b1f      	ldr	r3, [pc, #124]	; (800578c <spotTurn+0x2dc>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	22fa      	movs	r2, #250	; 0xfa
 8005714:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1500);
 8005716:	4b1c      	ldr	r3, [pc, #112]	; (8005788 <spotTurn+0x2d8>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800571e:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 500);
 8005720:	4b19      	ldr	r3, [pc, #100]	; (8005788 <spotTurn+0x2d8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005728:	63da      	str	r2, [r3, #60]	; 0x3c
		 while (moving)
 800572a:	e021      	b.n	8005770 <spotTurn+0x2c0>
		 {
			 if (totalAngle >= 50)//prev:50
 800572c:	4b1c      	ldr	r3, [pc, #112]	; (80057a0 <spotTurn+0x2f0>)
 800572e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	4b1f      	ldr	r3, [pc, #124]	; (80057b4 <spotTurn+0x304>)
 8005738:	f7fb f9e4 	bl	8000b04 <__aeabi_dcmpge>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d11b      	bne.n	800577a <spotTurn+0x2ca>
//			 if (totalAngle >= 53 + (targetAngle - actualAngle))//prev:50
			 {
				 break;
			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8005742:	4b17      	ldr	r3, [pc, #92]	; (80057a0 <spotTurn+0x2f0>)
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	4610      	mov	r0, r2
 800574a:	4619      	mov	r1, r3
 800574c:	f7fb fa04 	bl	8000b58 <__aeabi_d2iz>
 8005750:	4602      	mov	r2, r0
 8005752:	f107 0308 	add.w	r3, r7, #8
 8005756:	4914      	ldr	r1, [pc, #80]	; (80057a8 <spotTurn+0x2f8>)
 8005758:	4618      	mov	r0, r3
 800575a:	f00b f9f7 	bl	8010b4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 800575e:	f107 0308 	add.w	r3, r7, #8
 8005762:	461a      	mov	r2, r3
 8005764:	2114      	movs	r1, #20
 8005766:	200a      	movs	r0, #10
 8005768:	f000 fe82 	bl	8006470 <OLED_ShowString>
			 OLED_Refresh_Gram();
 800576c:	f000 fd0c 	bl	8006188 <OLED_Refresh_Gram>
		 while (moving)
 8005770:	4b0a      	ldr	r3, [pc, #40]	; (800579c <spotTurn+0x2ec>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1d9      	bne.n	800572c <spotTurn+0x27c>
 8005778:	e000      	b.n	800577c <spotTurn+0x2cc>
				 break;
 800577a:	bf00      	nop
		 }
		 move(2,1);
 800577c:	2001      	movs	r0, #1
 800577e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005782:	f7ff f9b3 	bl	8004aec <move>
 8005786:	e166      	b.n	8005a56 <spotTurn+0x5a6>
 8005788:	20000378 	.word	0x20000378
 800578c:	20000258 	.word	0x20000258
 8005790:	40020000 	.word	0x40020000
 8005794:	40021000 	.word	0x40021000
 8005798:	40020800 	.word	0x40020800
 800579c:	20000414 	.word	0x20000414
 80057a0:	20000418 	.word	0x20000418
 80057a4:	40320000 	.word	0x40320000
 80057a8:	08014768 	.word	0x08014768
 80057ac:	40430000 	.word	0x40430000
 80057b0:	40370000 	.word	0x40370000
 80057b4:	40490000 	.word	0x40490000
	}
	else //spot turn right
	{
//		targetAngle -= 90;
//		if(targetAngle < 0) targetAngle += 360;
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80057b8:	2201      	movs	r2, #1
 80057ba:	2108      	movs	r1, #8
 80057bc:	48b1      	ldr	r0, [pc, #708]	; (8005a84 <spotTurn+0x5d4>)
 80057be:	f001 ff7d 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80057c2:	2200      	movs	r2, #0
 80057c4:	2104      	movs	r1, #4
 80057c6:	48af      	ldr	r0, [pc, #700]	; (8005a84 <spotTurn+0x5d4>)
 80057c8:	f001 ff78 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80057cc:	2201      	movs	r2, #1
 80057ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80057d2:	48ad      	ldr	r0, [pc, #692]	; (8005a88 <spotTurn+0x5d8>)
 80057d4:	f001 ff72 	bl	80076bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80057d8:	2200      	movs	r2, #0
 80057da:	2120      	movs	r1, #32
 80057dc:	48ab      	ldr	r0, [pc, #684]	; (8005a8c <spotTurn+0x5dc>)
 80057de:	f001 ff6d 	bl	80076bc <HAL_GPIO_WritePin>
		htim1.Instance -> CCR4 = RIGHT;
 80057e2:	4bab      	ldr	r3, [pc, #684]	; (8005a90 <spotTurn+0x5e0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	22fa      	movs	r2, #250	; 0xfa
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1500);
 80057ea:	4baa      	ldr	r3, [pc, #680]	; (8005a94 <spotTurn+0x5e4>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80057f2:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 500);
 80057f4:	4ba7      	ldr	r3, [pc, #668]	; (8005a94 <spotTurn+0x5e4>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80057fc:	63da      	str	r2, [r3, #60]	; 0x3c
		 moving = 1;
 80057fe:	4ba6      	ldr	r3, [pc, #664]	; (8005a98 <spotTurn+0x5e8>)
 8005800:	2201      	movs	r2, #1
 8005802:	701a      	strb	r2, [r3, #0]
		 while (moving)
 8005804:	e021      	b.n	800584a <spotTurn+0x39a>
		 {
			 if (totalAngle <= -1*20)
 8005806:	4ba5      	ldr	r3, [pc, #660]	; (8005a9c <spotTurn+0x5ec>)
 8005808:	e9d3 0100 	ldrd	r0, r1, [r3]
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	4ba3      	ldr	r3, [pc, #652]	; (8005aa0 <spotTurn+0x5f0>)
 8005812:	f7fb f96d 	bl	8000af0 <__aeabi_dcmple>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d11b      	bne.n	8005854 <spotTurn+0x3a4>
			 {
				 break;
			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 800581c:	4b9f      	ldr	r3, [pc, #636]	; (8005a9c <spotTurn+0x5ec>)
 800581e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005822:	4610      	mov	r0, r2
 8005824:	4619      	mov	r1, r3
 8005826:	f7fb f997 	bl	8000b58 <__aeabi_d2iz>
 800582a:	4602      	mov	r2, r0
 800582c:	f107 0308 	add.w	r3, r7, #8
 8005830:	499c      	ldr	r1, [pc, #624]	; (8005aa4 <spotTurn+0x5f4>)
 8005832:	4618      	mov	r0, r3
 8005834:	f00b f98a 	bl	8010b4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 8005838:	f107 0308 	add.w	r3, r7, #8
 800583c:	461a      	mov	r2, r3
 800583e:	2114      	movs	r1, #20
 8005840:	200a      	movs	r0, #10
 8005842:	f000 fe15 	bl	8006470 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8005846:	f000 fc9f 	bl	8006188 <OLED_Refresh_Gram>
		 while (moving)
 800584a:	4b93      	ldr	r3, [pc, #588]	; (8005a98 <spotTurn+0x5e8>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1d9      	bne.n	8005806 <spotTurn+0x356>
 8005852:	e000      	b.n	8005856 <spotTurn+0x3a6>
				 break;
 8005854:	bf00      	nop
		 }
		 HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8005856:	2200      	movs	r2, #0
 8005858:	2108      	movs	r1, #8
 800585a:	488a      	ldr	r0, [pc, #552]	; (8005a84 <spotTurn+0x5d4>)
 800585c:	f001 ff2e 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8005860:	2201      	movs	r2, #1
 8005862:	2104      	movs	r1, #4
 8005864:	4887      	ldr	r0, [pc, #540]	; (8005a84 <spotTurn+0x5d4>)
 8005866:	f001 ff29 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 800586a:	2200      	movs	r2, #0
 800586c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005870:	4885      	ldr	r0, [pc, #532]	; (8005a88 <spotTurn+0x5d8>)
 8005872:	f001 ff23 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8005876:	2201      	movs	r2, #1
 8005878:	2120      	movs	r1, #32
 800587a:	4884      	ldr	r0, [pc, #528]	; (8005a8c <spotTurn+0x5dc>)
 800587c:	f001 ff1e 	bl	80076bc <HAL_GPIO_WritePin>
		 //robot reverse left
		 htim1.Instance -> CCR4 = LEFT;
 8005880:	4b83      	ldr	r3, [pc, #524]	; (8005a90 <spotTurn+0x5e0>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2269      	movs	r2, #105	; 0x69
 8005886:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 800);
 8005888:	4b82      	ldr	r3, [pc, #520]	; (8005a94 <spotTurn+0x5e4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005890:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1500);
 8005892:	4b80      	ldr	r3, [pc, #512]	; (8005a94 <spotTurn+0x5e4>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800589a:	63da      	str	r2, [r3, #60]	; 0x3c
		 while (moving)
 800589c:	e021      	b.n	80058e2 <spotTurn+0x432>
		 {
			 if (totalAngle <= -1*35)
 800589e:	4b7f      	ldr	r3, [pc, #508]	; (8005a9c <spotTurn+0x5ec>)
 80058a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	4b7f      	ldr	r3, [pc, #508]	; (8005aa8 <spotTurn+0x5f8>)
 80058aa:	f7fb f921 	bl	8000af0 <__aeabi_dcmple>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d11b      	bne.n	80058ec <spotTurn+0x43c>
			 {
				 break;
			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 80058b4:	4b79      	ldr	r3, [pc, #484]	; (8005a9c <spotTurn+0x5ec>)
 80058b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ba:	4610      	mov	r0, r2
 80058bc:	4619      	mov	r1, r3
 80058be:	f7fb f94b 	bl	8000b58 <__aeabi_d2iz>
 80058c2:	4602      	mov	r2, r0
 80058c4:	f107 0308 	add.w	r3, r7, #8
 80058c8:	4976      	ldr	r1, [pc, #472]	; (8005aa4 <spotTurn+0x5f4>)
 80058ca:	4618      	mov	r0, r3
 80058cc:	f00b f93e 	bl	8010b4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 80058d0:	f107 0308 	add.w	r3, r7, #8
 80058d4:	461a      	mov	r2, r3
 80058d6:	2114      	movs	r1, #20
 80058d8:	200a      	movs	r0, #10
 80058da:	f000 fdc9 	bl	8006470 <OLED_ShowString>
			 OLED_Refresh_Gram();
 80058de:	f000 fc53 	bl	8006188 <OLED_Refresh_Gram>
		 while (moving)
 80058e2:	4b6d      	ldr	r3, [pc, #436]	; (8005a98 <spotTurn+0x5e8>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1d9      	bne.n	800589e <spotTurn+0x3ee>
 80058ea:	e000      	b.n	80058ee <spotTurn+0x43e>
				 break;
 80058ec:	bf00      	nop
		 }
		 htim1.Instance -> CCR4 = STRAIGHT;
 80058ee:	4b68      	ldr	r3, [pc, #416]	; (8005a90 <spotTurn+0x5e0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2295      	movs	r2, #149	; 0x95
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80058f6:	4b67      	ldr	r3, [pc, #412]	; (8005a94 <spotTurn+0x5e4>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2200      	movs	r2, #0
 80058fc:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80058fe:	4b65      	ldr	r3, [pc, #404]	; (8005a94 <spotTurn+0x5e4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2200      	movs	r2, #0
 8005904:	63da      	str	r2, [r3, #60]	; 0x3c
		 move(9.5,1);
 8005906:	2001      	movs	r0, #1
 8005908:	eeb2 0a03 	vmov.f32	s0, #35	; 0x41180000  9.5
 800590c:	f7ff f8ee 	bl	8004aec <move>
		 osDelay(100);
 8005910:	2064      	movs	r0, #100	; 0x64
 8005912:	f007 fd3c 	bl	800d38e <osDelay>
		 moving=1;
 8005916:	4b60      	ldr	r3, [pc, #384]	; (8005a98 <spotTurn+0x5e8>)
 8005918:	2201      	movs	r2, #1
 800591a:	701a      	strb	r2, [r3, #0]
		 //continue forward right
		 HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800591c:	2201      	movs	r2, #1
 800591e:	2108      	movs	r1, #8
 8005920:	4858      	ldr	r0, [pc, #352]	; (8005a84 <spotTurn+0x5d4>)
 8005922:	f001 fecb 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005926:	2200      	movs	r2, #0
 8005928:	2104      	movs	r1, #4
 800592a:	4856      	ldr	r0, [pc, #344]	; (8005a84 <spotTurn+0x5d4>)
 800592c:	f001 fec6 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005930:	2201      	movs	r2, #1
 8005932:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005936:	4854      	ldr	r0, [pc, #336]	; (8005a88 <spotTurn+0x5d8>)
 8005938:	f001 fec0 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800593c:	2200      	movs	r2, #0
 800593e:	2120      	movs	r1, #32
 8005940:	4852      	ldr	r0, [pc, #328]	; (8005a8c <spotTurn+0x5dc>)
 8005942:	f001 febb 	bl	80076bc <HAL_GPIO_WritePin>
		 htim1.Instance -> CCR4 = RIGHT;
 8005946:	4b52      	ldr	r3, [pc, #328]	; (8005a90 <spotTurn+0x5e0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	22fa      	movs	r2, #250	; 0xfa
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1500);
 800594e:	4b51      	ldr	r3, [pc, #324]	; (8005a94 <spotTurn+0x5e4>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005956:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 500);
 8005958:	4b4e      	ldr	r3, [pc, #312]	; (8005a94 <spotTurn+0x5e4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005960:	63da      	str	r2, [r3, #60]	; 0x3c
		 while (moving)
 8005962:	e021      	b.n	80059a8 <spotTurn+0x4f8>
		 {
			 if (totalAngle <= -1*16)
 8005964:	4b4d      	ldr	r3, [pc, #308]	; (8005a9c <spotTurn+0x5ec>)
 8005966:	e9d3 0100 	ldrd	r0, r1, [r3]
 800596a:	f04f 0200 	mov.w	r2, #0
 800596e:	4b4f      	ldr	r3, [pc, #316]	; (8005aac <spotTurn+0x5fc>)
 8005970:	f7fb f8be 	bl	8000af0 <__aeabi_dcmple>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d11b      	bne.n	80059b2 <spotTurn+0x502>
			 {
				 break;
			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 800597a:	4b48      	ldr	r3, [pc, #288]	; (8005a9c <spotTurn+0x5ec>)
 800597c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005980:	4610      	mov	r0, r2
 8005982:	4619      	mov	r1, r3
 8005984:	f7fb f8e8 	bl	8000b58 <__aeabi_d2iz>
 8005988:	4602      	mov	r2, r0
 800598a:	f107 0308 	add.w	r3, r7, #8
 800598e:	4945      	ldr	r1, [pc, #276]	; (8005aa4 <spotTurn+0x5f4>)
 8005990:	4618      	mov	r0, r3
 8005992:	f00b f8db 	bl	8010b4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 8005996:	f107 0308 	add.w	r3, r7, #8
 800599a:	461a      	mov	r2, r3
 800599c:	2114      	movs	r1, #20
 800599e:	200a      	movs	r0, #10
 80059a0:	f000 fd66 	bl	8006470 <OLED_ShowString>
			 OLED_Refresh_Gram();
 80059a4:	f000 fbf0 	bl	8006188 <OLED_Refresh_Gram>
		 while (moving)
 80059a8:	4b3b      	ldr	r3, [pc, #236]	; (8005a98 <spotTurn+0x5e8>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1d9      	bne.n	8005964 <spotTurn+0x4b4>
 80059b0:	e000      	b.n	80059b4 <spotTurn+0x504>
				 break;
 80059b2:	bf00      	nop
		 }

		 HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80059b4:	2200      	movs	r2, #0
 80059b6:	2108      	movs	r1, #8
 80059b8:	4832      	ldr	r0, [pc, #200]	; (8005a84 <spotTurn+0x5d4>)
 80059ba:	f001 fe7f 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80059be:	2201      	movs	r2, #1
 80059c0:	2104      	movs	r1, #4
 80059c2:	4830      	ldr	r0, [pc, #192]	; (8005a84 <spotTurn+0x5d4>)
 80059c4:	f001 fe7a 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 80059c8:	2200      	movs	r2, #0
 80059ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059ce:	482e      	ldr	r0, [pc, #184]	; (8005a88 <spotTurn+0x5d8>)
 80059d0:	f001 fe74 	bl	80076bc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 80059d4:	2201      	movs	r2, #1
 80059d6:	2120      	movs	r1, #32
 80059d8:	482c      	ldr	r0, [pc, #176]	; (8005a8c <spotTurn+0x5dc>)
 80059da:	f001 fe6f 	bl	80076bc <HAL_GPIO_WritePin>
		 htim1.Instance -> CCR4 = LEFT;
 80059de:	4b2c      	ldr	r3, [pc, #176]	; (8005a90 <spotTurn+0x5e0>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2269      	movs	r2, #105	; 0x69
 80059e4:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 800);
 80059e6:	4b2b      	ldr	r3, [pc, #172]	; (8005a94 <spotTurn+0x5e4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f44f 7248 	mov.w	r2, #800	; 0x320
 80059ee:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1500);
 80059f0:	4b28      	ldr	r3, [pc, #160]	; (8005a94 <spotTurn+0x5e4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80059f8:	63da      	str	r2, [r3, #60]	; 0x3c
		 while (moving)
 80059fa:	e021      	b.n	8005a40 <spotTurn+0x590>
		 {
			 if (totalAngle <= -1*46)//previous: 48
 80059fc:	4b27      	ldr	r3, [pc, #156]	; (8005a9c <spotTurn+0x5ec>)
 80059fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	4b2a      	ldr	r3, [pc, #168]	; (8005ab0 <spotTurn+0x600>)
 8005a08:	f7fb f872 	bl	8000af0 <__aeabi_dcmple>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d11b      	bne.n	8005a4a <spotTurn+0x59a>
//			 if (totalAngle <= -1*45 - (targetAngle - actualAngle))//previous: 48
			 {
				 break;
			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8005a12:	4b22      	ldr	r3, [pc, #136]	; (8005a9c <spotTurn+0x5ec>)
 8005a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	f7fb f89c 	bl	8000b58 <__aeabi_d2iz>
 8005a20:	4602      	mov	r2, r0
 8005a22:	f107 0308 	add.w	r3, r7, #8
 8005a26:	491f      	ldr	r1, [pc, #124]	; (8005aa4 <spotTurn+0x5f4>)
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f00b f88f 	bl	8010b4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 8005a2e:	f107 0308 	add.w	r3, r7, #8
 8005a32:	461a      	mov	r2, r3
 8005a34:	2114      	movs	r1, #20
 8005a36:	200a      	movs	r0, #10
 8005a38:	f000 fd1a 	bl	8006470 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8005a3c:	f000 fba4 	bl	8006188 <OLED_Refresh_Gram>
		 while (moving)
 8005a40:	4b15      	ldr	r3, [pc, #84]	; (8005a98 <spotTurn+0x5e8>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1d9      	bne.n	80059fc <spotTurn+0x54c>
 8005a48:	e000      	b.n	8005a4c <spotTurn+0x59c>
				 break;
 8005a4a:	bf00      	nop
		 }
		 move(0.5,0);
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8005a52:	f7ff f84b 	bl	8004aec <move>
	}
	//Stop wheels and let wheels be straight
	htim1.Instance -> CCR4 = STRAIGHT;
 8005a56:	4b0e      	ldr	r3, [pc, #56]	; (8005a90 <spotTurn+0x5e0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2295      	movs	r2, #149	; 0x95
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	; (8005a94 <spotTurn+0x5e4>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2200      	movs	r2, #0
 8005a64:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005a66:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <spotTurn+0x5e4>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 8005a6e:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <spotTurn+0x5e8>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]
//	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);

	osDelay(100);
 8005a74:	2064      	movs	r0, #100	; 0x64
 8005a76:	f007 fc8a 	bl	800d38e <osDelay>
}
 8005a7a:	bf00      	nop
 8005a7c:	3730      	adds	r7, #48	; 0x30
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40020000 	.word	0x40020000
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	40020800 	.word	0x40020800
 8005a90:	20000258 	.word	0x20000258
 8005a94:	20000378 	.word	0x20000378
 8005a98:	20000414 	.word	0x20000414
 8005a9c:	20000418 	.word	0x20000418
 8005aa0:	c0340000 	.word	0xc0340000
 8005aa4:	08014768 	.word	0x08014768
 8005aa8:	c0418000 	.word	0xc0418000
 8005aac:	c0300000 	.word	0xc0300000
 8005ab0:	c0470000 	.word	0xc0470000

08005ab4 <readByte>:


////////////////////GYRO FUNCTIONS//////////////////////////
void readByte(uint8_t addr, uint8_t* data){
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	4603      	mov	r3, r0
 8005abc:	6039      	str	r1, [r7, #0]
 8005abe:	71fb      	strb	r3, [r7, #7]
	buff[0] = addr;
 8005ac0:	4a0f      	ldr	r2, [pc, #60]	; (8005b00 <readByte+0x4c>)
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr<<1, buff, 1, 10);
 8005ac6:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <readByte+0x50>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	b299      	uxth	r1, r3
 8005ad0:	230a      	movs	r3, #10
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	; (8005b00 <readByte+0x4c>)
 8005ad8:	480b      	ldr	r0, [pc, #44]	; (8005b08 <readByte+0x54>)
 8005ada:	f001 ff67 	bl	80079ac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddr<<1, data, 2, 20);
 8005ade:	4b09      	ldr	r3, [pc, #36]	; (8005b04 <readByte+0x50>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	b299      	uxth	r1, r3
 8005ae8:	2314      	movs	r3, #20
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	2302      	movs	r3, #2
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	4805      	ldr	r0, [pc, #20]	; (8005b08 <readByte+0x54>)
 8005af2:	f002 f859 	bl	8007ba8 <HAL_I2C_Master_Receive>

}
 8005af6:	bf00      	nop
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20000448 	.word	0x20000448
 8005b04:	20000000 	.word	0x20000000
 8005b08:	20000204 	.word	0x20000204

08005b0c <writeByte>:

void writeByte(uint8_t addr, uint8_t data){
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	4603      	mov	r3, r0
 8005b14:	460a      	mov	r2, r1
 8005b16:	71fb      	strb	r3, [r7, #7]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	71bb      	strb	r3, [r7, #6]
	buff[0] = addr;
 8005b1c:	4a0a      	ldr	r2, [pc, #40]	; (8005b48 <writeByte+0x3c>)
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	7013      	strb	r3, [r2, #0]
	buff[1] = data;
 8005b22:	4a09      	ldr	r2, [pc, #36]	; (8005b48 <writeByte+0x3c>)
 8005b24:	79bb      	ldrb	r3, [r7, #6]
 8005b26:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, buff, 2, 20);
 8005b28:	4b08      	ldr	r3, [pc, #32]	; (8005b4c <writeByte+0x40>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	b299      	uxth	r1, r3
 8005b32:	2314      	movs	r3, #20
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	2302      	movs	r3, #2
 8005b38:	4a03      	ldr	r2, [pc, #12]	; (8005b48 <writeByte+0x3c>)
 8005b3a:	4805      	ldr	r0, [pc, #20]	; (8005b50 <writeByte+0x44>)
 8005b3c:	f001 ff36 	bl	80079ac <HAL_I2C_Master_Transmit>
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20000448 	.word	0x20000448
 8005b4c:	20000000 	.word	0x20000000
 8005b50:	20000204 	.word	0x20000204

08005b54 <gyroStart>:

void gyroStart(){
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
	writeByte(0x07, 0x07);
 8005b58:	2107      	movs	r1, #7
 8005b5a:	2007      	movs	r0, #7
 8005b5c:	f7ff ffd6 	bl	8005b0c <writeByte>
	osDelayUntil(10);
 8005b60:	200a      	movs	r0, #10
 8005b62:	f007 fc2f 	bl	800d3c4 <osDelayUntil>

	writeByte(0x07, 0x00);
 8005b66:	2100      	movs	r1, #0
 8005b68:	2007      	movs	r0, #7
 8005b6a:	f7ff ffcf 	bl	8005b0c <writeByte>
	osDelayUntil(10);
 8005b6e:	200a      	movs	r0, #10
 8005b70:	f007 fc28 	bl	800d3c4 <osDelayUntil>
}
 8005b74:	bf00      	nop
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <gyroInit>:


void gyroInit(){
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0

	writeByte(0x06, 0x00);
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	2006      	movs	r0, #6
 8005b80:	f7ff ffc4 	bl	8005b0c <writeByte>
	osDelayUntil(10);
 8005b84:	200a      	movs	r0, #10
 8005b86:	f007 fc1d 	bl	800d3c4 <osDelayUntil>
	writeByte(0x03, 0x80);
 8005b8a:	2180      	movs	r1, #128	; 0x80
 8005b8c:	2003      	movs	r0, #3
 8005b8e:	f7ff ffbd 	bl	8005b0c <writeByte>
	osDelayUntil(10);
 8005b92:	200a      	movs	r0, #10
 8005b94:	f007 fc16 	bl	800d3c4 <osDelayUntil>
	writeByte(0x07, 0x07);
 8005b98:	2107      	movs	r1, #7
 8005b9a:	2007      	movs	r0, #7
 8005b9c:	f7ff ffb6 	bl	8005b0c <writeByte>
	osDelayUntil(10);
 8005ba0:	200a      	movs	r0, #10
 8005ba2:	f007 fc0f 	bl	800d3c4 <osDelayUntil>
	writeByte(0x06, 0x01);
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	2006      	movs	r0, #6
 8005baa:	f7ff ffaf 	bl	8005b0c <writeByte>
	osDelayUntil(10);
 8005bae:	200a      	movs	r0, #10
 8005bb0:	f007 fc08 	bl	800d3c4 <osDelayUntil>
	writeByte(0x7F, 0x20);
 8005bb4:	2120      	movs	r1, #32
 8005bb6:	207f      	movs	r0, #127	; 0x7f
 8005bb8:	f7ff ffa8 	bl	8005b0c <writeByte>
	osDelayUntil(10);
 8005bbc:	200a      	movs	r0, #10
 8005bbe:	f007 fc01 	bl	800d3c4 <osDelayUntil>
	writeByte(0x01, 0x2F);
 8005bc2:	212f      	movs	r1, #47	; 0x2f
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	f7ff ffa1 	bl	8005b0c <writeByte>
	osDelayUntil(10);
 8005bca:	200a      	movs	r0, #10
 8005bcc:	f007 fbfa 	bl	800d3c4 <osDelayUntil>
	writeByte(0x0, 0x00);
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	f7ff ff9a 	bl	8005b0c <writeByte>
	osDelayUntil(10);
 8005bd8:	200a      	movs	r0, #10
 8005bda:	f007 fbf3 	bl	800d3c4 <osDelayUntil>
	writeByte(0x7F, 0x00);
 8005bde:	2100      	movs	r1, #0
 8005be0:	207f      	movs	r0, #127	; 0x7f
 8005be2:	f7ff ff93 	bl	8005b0c <writeByte>
	osDelayUntil(10);
 8005be6:	200a      	movs	r0, #10
 8005be8:	f007 fbec 	bl	800d3c4 <osDelayUntil>
	writeByte(0x07, 0x00);
 8005bec:	2100      	movs	r1, #0
 8005bee:	2007      	movs	r0, #7
 8005bf0:	f7ff ff8c 	bl	8005b0c <writeByte>
	osDelayUntil(10);
 8005bf4:	200a      	movs	r0, #10
 8005bf6:	f007 fbe5 	bl	800d3c4 <osDelayUntil>

}
 8005bfa:	bf00      	nop
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b090      	sub	sp, #64	; 0x40
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t instrBuffer[40], angle;
	uint16_t i = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	86fb      	strh	r3, [r7, #54]	; 0x36
	HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer, 1);
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	49c1      	ldr	r1, [pc, #772]	; (8005f14 <StartDefaultTask+0x314>)
 8005c10:	48c1      	ldr	r0, [pc, #772]	; (8005f18 <StartDefaultTask+0x318>)
 8005c12:	f006 fb12 	bl	800c23a <HAL_UART_Receive_IT>


	moving = 0;
 8005c16:	4bc1      	ldr	r3, [pc, #772]	; (8005f1c <StartDefaultTask+0x31c>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	701a      	strb	r2, [r3, #0]
	cmd = data = newCmdReceived = 0;
 8005c1c:	4bc0      	ldr	r3, [pc, #768]	; (8005f20 <StartDefaultTask+0x320>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	4bc0      	ldr	r3, [pc, #768]	; (8005f24 <StartDefaultTask+0x324>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	4bbe      	ldr	r3, [pc, #760]	; (8005f24 <StartDefaultTask+0x324>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	4bbe      	ldr	r3, [pc, #760]	; (8005f28 <StartDefaultTask+0x328>)
 8005c30:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {

	  //Toggle LED just to see if the code is running
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8005c32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c36:	48bd      	ldr	r0, [pc, #756]	; (8005f2c <StartDefaultTask+0x32c>)
 8005c38:	f001 fd59 	bl	80076ee <HAL_GPIO_TogglePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005c3c:	210c      	movs	r1, #12
 8005c3e:	48bc      	ldr	r0, [pc, #752]	; (8005f30 <StartDefaultTask+0x330>)
 8005c40:	f004 fdf2 	bl	800a828 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8005c44:	4bba      	ldr	r3, [pc, #744]	; (8005f30 <StartDefaultTask+0x330>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2295      	movs	r2, #149	; 0x95
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40
	// 1: forward
	// 2: left
	// 3: right
	// 4: reverse
	// 5: shortest path
	if (newCmdReceived == 1)
 8005c4c:	4bb4      	ldr	r3, [pc, #720]	; (8005f20 <StartDefaultTask+0x320>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	f040 817f 	bne.w	8005f54 <StartDefaultTask+0x354>
	{
		newCmdReceived = 0;
 8005c56:	4bb2      	ldr	r3, [pc, #712]	; (8005f20 <StartDefaultTask+0x320>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
//		sprintf(instrBuffer, "d: %d\0", data);
//		sendToRPI(instrBuffer);
//		OLED_ShowString(10, 30, instrBuffer);
//		OLED_Refresh_Gram();
//		cmd = 'w';
		switch(cmd)
 8005c5c:	4bb2      	ldr	r3, [pc, #712]	; (8005f28 <StartDefaultTask+0x328>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	3b4c      	subs	r3, #76	; 0x4c
 8005c62:	2b2c      	cmp	r3, #44	; 0x2c
 8005c64:	f200 8172 	bhi.w	8005f4c <StartDefaultTask+0x34c>
 8005c68:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <StartDefaultTask+0x70>)
 8005c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6e:	bf00      	nop
 8005c70:	08005e69 	.word	0x08005e69
 8005c74:	08005f4d 	.word	0x08005f4d
 8005c78:	08005f4d 	.word	0x08005f4d
 8005c7c:	08005f4d 	.word	0x08005f4d
 8005c80:	08005f4d 	.word	0x08005f4d
 8005c84:	08005f4d 	.word	0x08005f4d
 8005c88:	08005e75 	.word	0x08005e75
 8005c8c:	08005f4d 	.word	0x08005f4d
 8005c90:	08005ef1 	.word	0x08005ef1
 8005c94:	08005f4d 	.word	0x08005f4d
 8005c98:	08005f4d 	.word	0x08005f4d
 8005c9c:	08005f4d 	.word	0x08005f4d
 8005ca0:	08005e8f 	.word	0x08005e8f
 8005ca4:	08005f03 	.word	0x08005f03
 8005ca8:	08005f4d 	.word	0x08005f4d
 8005cac:	08005f4d 	.word	0x08005f4d
 8005cb0:	08005f4d 	.word	0x08005f4d
 8005cb4:	08005f4d 	.word	0x08005f4d
 8005cb8:	08005f4d 	.word	0x08005f4d
 8005cbc:	08005f4d 	.word	0x08005f4d
 8005cc0:	08005f4d 	.word	0x08005f4d
 8005cc4:	08005e4d 	.word	0x08005e4d
 8005cc8:	08005f4d 	.word	0x08005f4d
 8005ccc:	08005f4d 	.word	0x08005f4d
 8005cd0:	08005e5b 	.word	0x08005e5b
 8005cd4:	08005f4d 	.word	0x08005f4d
 8005cd8:	08005f4d 	.word	0x08005f4d
 8005cdc:	08005f4d 	.word	0x08005f4d
 8005ce0:	08005f4d 	.word	0x08005f4d
 8005ce4:	08005f4d 	.word	0x08005f4d
 8005ce8:	08005f4d 	.word	0x08005f4d
 8005cec:	08005f4d 	.word	0x08005f4d
 8005cf0:	08005dad 	.word	0x08005dad
 8005cf4:	08005f4d 	.word	0x08005f4d
 8005cf8:	08005f4d 	.word	0x08005f4d
 8005cfc:	08005f4d 	.word	0x08005f4d
 8005d00:	08005e9d 	.word	0x08005e9d
 8005d04:	08005f4d 	.word	0x08005f4d
 8005d08:	08005db9 	.word	0x08005db9
 8005d0c:	08005dc5 	.word	0x08005dc5
 8005d10:	08005ed3 	.word	0x08005ed3
 8005d14:	08005ebb 	.word	0x08005ebb
 8005d18:	08005f4d 	.word	0x08005f4d
 8005d1c:	08005d25 	.word	0x08005d25
 8005d20:	08005e81 	.word	0x08005e81
		{
		case 'w':
			num_loops = floor(data / 50);
 8005d24:	4b7f      	ldr	r3, [pc, #508]	; (8005f24 <StartDefaultTask+0x324>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a82      	ldr	r2, [pc, #520]	; (8005f34 <StartDefaultTask+0x334>)
 8005d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2e:	091b      	lsrs	r3, r3, #4
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fa fbe7 	bl	8000504 <__aeabi_ui2d>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	f7fa ff33 	bl	8000ba8 <__aeabi_d2uiz>
 8005d42:	4603      	mov	r3, r0
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	4b7c      	ldr	r3, [pc, #496]	; (8005f38 <StartDefaultTask+0x338>)
 8005d48:	701a      	strb	r2, [r3, #0]
			remainder_dist = data % 50;
 8005d4a:	4b76      	ldr	r3, [pc, #472]	; (8005f24 <StartDefaultTask+0x324>)
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	4b79      	ldr	r3, [pc, #484]	; (8005f34 <StartDefaultTask+0x334>)
 8005d50:	fba3 1302 	umull	r1, r3, r3, r2
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	2132      	movs	r1, #50	; 0x32
 8005d58:	fb01 f303 	mul.w	r3, r1, r3
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	4b76      	ldr	r3, [pc, #472]	; (8005f3c <StartDefaultTask+0x33c>)
 8005d62:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < num_loops; i++){
 8005d64:	2300      	movs	r3, #0
 8005d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d68:	e007      	b.n	8005d7a <StartDefaultTask+0x17a>
				moveGyroPIDOld(50, 1);
 8005d6a:	2001      	movs	r0, #1
 8005d6c:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8005f40 <StartDefaultTask+0x340>
 8005d70:	f7fe fb6e 	bl	8004450 <moveGyroPIDOld>
			for (int i = 0; i < num_loops; i++){
 8005d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d76:	3301      	adds	r3, #1
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d7a:	4b6f      	ldr	r3, [pc, #444]	; (8005f38 <StartDefaultTask+0x338>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d82:	4293      	cmp	r3, r2
 8005d84:	dbf1      	blt.n	8005d6a <StartDefaultTask+0x16a>
			}
			if (remainder_dist != 0){
 8005d86:	4b6d      	ldr	r3, [pc, #436]	; (8005f3c <StartDefaultTask+0x33c>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <StartDefaultTask+0x1a4>
			moveGyroPIDOld(remainder_dist, 1);
 8005d8e:	4b6b      	ldr	r3, [pc, #428]	; (8005f3c <StartDefaultTask+0x33c>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9a:	2001      	movs	r0, #1
 8005d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8005da0:	f7fe fb56 	bl	8004450 <moveGyroPIDOld>
			}
//			moveGyroPIDOld(10,1);
//			gyro_move(data, 1);
//			sendToRPI("Forward done!f\n\0");
			sendToRPI("RPI:d");
 8005da4:	4867      	ldr	r0, [pc, #412]	; (8005f44 <StartDefaultTask+0x344>)
 8005da6:	f7fe f825 	bl	8003df4 <sendToRPI>
			break;
 8005daa:	e0d0      	b.n	8005f4e <StartDefaultTask+0x34e>
		case 'l':
//			turn(1, 1);
			left90();
 8005dac:	f7ff fa70 	bl	8005290 <left90>
//			sendToRPI("Left done!\0");
			sendToRPI("RPI:d");
 8005db0:	4864      	ldr	r0, [pc, #400]	; (8005f44 <StartDefaultTask+0x344>)
 8005db2:	f7fe f81f 	bl	8003df4 <sendToRPI>
			break;
 8005db6:	e0ca      	b.n	8005f4e <StartDefaultTask+0x34e>
		case 'r':
//			turn(0, 1);
			right90();
 8005db8:	f7ff faf8 	bl	80053ac <right90>
//			sendToRPI("Right done!\0");
			sendToRPI("RPI:d");
 8005dbc:	4861      	ldr	r0, [pc, #388]	; (8005f44 <StartDefaultTask+0x344>)
 8005dbe:	f7fe f819 	bl	8003df4 <sendToRPI>
			break;
 8005dc2:	e0c4      	b.n	8005f4e <StartDefaultTask+0x34e>
		case 's':
			num_loops = floor(data / 50);
 8005dc4:	4b57      	ldr	r3, [pc, #348]	; (8005f24 <StartDefaultTask+0x324>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a5a      	ldr	r2, [pc, #360]	; (8005f34 <StartDefaultTask+0x334>)
 8005dca:	fba2 2303 	umull	r2, r3, r2, r3
 8005dce:	091b      	lsrs	r3, r3, #4
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fa fb97 	bl	8000504 <__aeabi_ui2d>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4610      	mov	r0, r2
 8005ddc:	4619      	mov	r1, r3
 8005dde:	f7fa fee3 	bl	8000ba8 <__aeabi_d2uiz>
 8005de2:	4603      	mov	r3, r0
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	4b54      	ldr	r3, [pc, #336]	; (8005f38 <StartDefaultTask+0x338>)
 8005de8:	701a      	strb	r2, [r3, #0]
			remainder_dist = data % 50;
 8005dea:	4b4e      	ldr	r3, [pc, #312]	; (8005f24 <StartDefaultTask+0x324>)
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	4b51      	ldr	r3, [pc, #324]	; (8005f34 <StartDefaultTask+0x334>)
 8005df0:	fba3 1302 	umull	r1, r3, r3, r2
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	2132      	movs	r1, #50	; 0x32
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	4b4e      	ldr	r3, [pc, #312]	; (8005f3c <StartDefaultTask+0x33c>)
 8005e02:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < num_loops; i++){
 8005e04:	2300      	movs	r3, #0
 8005e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e08:	e007      	b.n	8005e1a <StartDefaultTask+0x21a>
				moveGyroPIDOld(50, 0);
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8005f40 <StartDefaultTask+0x340>
 8005e10:	f7fe fb1e 	bl	8004450 <moveGyroPIDOld>
			for (int i = 0; i < num_loops; i++){
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	3301      	adds	r3, #1
 8005e18:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e1a:	4b47      	ldr	r3, [pc, #284]	; (8005f38 <StartDefaultTask+0x338>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e22:	4293      	cmp	r3, r2
 8005e24:	dbf1      	blt.n	8005e0a <StartDefaultTask+0x20a>
			}
			if (remainder_dist != 0){
 8005e26:	4b45      	ldr	r3, [pc, #276]	; (8005f3c <StartDefaultTask+0x33c>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <StartDefaultTask+0x244>
						moveGyroPIDOld(remainder_dist, 0);
 8005e2e:	4b43      	ldr	r3, [pc, #268]	; (8005f3c <StartDefaultTask+0x33c>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	ee07 3a90 	vmov	s15, r3
 8005e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005e40:	f7fe fb06 	bl	8004450 <moveGyroPIDOld>
						}
//			moveGyroPIDOld(10, 0);
//			sendToRPI("Reverse done!\0");
			sendToRPI("RPI:d");
 8005e44:	483f      	ldr	r0, [pc, #252]	; (8005f44 <StartDefaultTask+0x344>)
 8005e46:	f7fd ffd5 	bl	8003df4 <sendToRPI>
			break;
 8005e4a:	e080      	b.n	8005f4e <StartDefaultTask+0x34e>
		case 'a':
			spotTurn(1);
 8005e4c:	2001      	movs	r0, #1
 8005e4e:	f7ff fb2f 	bl	80054b0 <spotTurn>
			sendToRPI("RPI:d");
 8005e52:	483c      	ldr	r0, [pc, #240]	; (8005f44 <StartDefaultTask+0x344>)
 8005e54:	f7fd ffce 	bl	8003df4 <sendToRPI>
			break;
 8005e58:	e079      	b.n	8005f4e <StartDefaultTask+0x34e>
		case 'd':
			spotTurn(0);
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	f7ff fb28 	bl	80054b0 <spotTurn>
			sendToRPI("RPI:d");
 8005e60:	4838      	ldr	r0, [pc, #224]	; (8005f44 <StartDefaultTask+0x344>)
 8005e62:	f7fd ffc7 	bl	8003df4 <sendToRPI>
			break;
 8005e66:	e072      	b.n	8005f4e <StartDefaultTask+0x34e>
		case 'L':
			bLeft90();
 8005e68:	f7ff f902 	bl	8005070 <bLeft90>
//			sendToRPI("Reverse Left done!\0");
			sendToRPI("RPI:d");
 8005e6c:	4835      	ldr	r0, [pc, #212]	; (8005f44 <StartDefaultTask+0x344>)
 8005e6e:	f7fd ffc1 	bl	8003df4 <sendToRPI>
			break;
 8005e72:	e06c      	b.n	8005f4e <StartDefaultTask+0x34e>
		case 'R':
			bRight90();
 8005e74:	f7ff f986 	bl	8005184 <bRight90>
//			sendToRPI("Reverse Right done!\0");
			sendToRPI("RPI:d");
 8005e78:	4832      	ldr	r0, [pc, #200]	; (8005f44 <StartDefaultTask+0x344>)
 8005e7a:	f7fd ffbb 	bl	8003df4 <sendToRPI>
			break;
 8005e7e:	e066      	b.n	8005f4e <StartDefaultTask+0x34e>
		case 'x':
			spotTurn(1); //spotTurn left
 8005e80:	2001      	movs	r0, #1
 8005e82:	f7ff fb15 	bl	80054b0 <spotTurn>
			sendToRPI("RPI:d");
 8005e86:	482f      	ldr	r0, [pc, #188]	; (8005f44 <StartDefaultTask+0x344>)
 8005e88:	f7fd ffb4 	bl	8003df4 <sendToRPI>
			break;
 8005e8c:	e05f      	b.n	8005f4e <StartDefaultTask+0x34e>
		case 'X':
			spotTurn(0); //spotTurn right
 8005e8e:	2000      	movs	r0, #0
 8005e90:	f7ff fb0e 	bl	80054b0 <spotTurn>
			sendToRPI("RPI:d");
 8005e94:	482b      	ldr	r0, [pc, #172]	; (8005f44 <StartDefaultTask+0x344>)
 8005e96:	f7fd ffad 	bl	8003df4 <sendToRPI>
			break;
 8005e9a:	e058      	b.n	8005f4e <StartDefaultTask+0x34e>
		case 'p': // take photo
			sendToRPI("RPI:d");
 8005e9c:	4829      	ldr	r0, [pc, #164]	; (8005f44 <StartDefaultTask+0x344>)
 8005e9e:	f7fd ffa9 	bl	8003df4 <sendToRPI>
			osDelay(1000);
 8005ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ea6:	f007 fa72 	bl	800d38e <osDelay>
			sendToRPI("RPI:s"); // command for rpi to take photo
 8005eaa:	4827      	ldr	r0, [pc, #156]	; (8005f48 <StartDefaultTask+0x348>)
 8005eac:	f7fd ffa2 	bl	8003df4 <sendToRPI>
			osDelay(1000);
 8005eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005eb4:	f007 fa6b 	bl	800d38e <osDelay>
			break;
 8005eb8:	e049      	b.n	8005f4e <StartDefaultTask+0x34e>
		case 'u':
			moveUltra();
 8005eba:	f7fc ff87 	bl	8002dcc <moveUltra>
			sendToRPI("RPI:d");
 8005ebe:	4821      	ldr	r0, [pc, #132]	; (8005f44 <StartDefaultTask+0x344>)
 8005ec0:	f7fd ff98 	bl	8003df4 <sendToRPI>
			osDelay(50);
 8005ec4:	2032      	movs	r0, #50	; 0x32
 8005ec6:	f007 fa62 	bl	800d38e <osDelay>
			sendToRPI("RPI:s"); // command for rpi to take photo
 8005eca:	481f      	ldr	r0, [pc, #124]	; (8005f48 <StartDefaultTask+0x348>)
 8005ecc:	f7fd ff92 	bl	8003df4 <sendToRPI>
//			osDelay(1000);
			break;
 8005ed0:	e03d      	b.n	8005f4e <StartDefaultTask+0x34e>
		case 't': // tln or trn
			task2A(data);
 8005ed2:	4b14      	ldr	r3, [pc, #80]	; (8005f24 <StartDefaultTask+0x324>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fb fda6 	bl	8001a28 <task2A>
			sendToRPI("RPI:d");
 8005edc:	4819      	ldr	r0, [pc, #100]	; (8005f44 <StartDefaultTask+0x344>)
 8005ede:	f7fd ff89 	bl	8003df4 <sendToRPI>
			osDelay(50);
 8005ee2:	2032      	movs	r0, #50	; 0x32
 8005ee4:	f007 fa53 	bl	800d38e <osDelay>
			sendToRPI("RPI:s"); // command for rpi to take photo
 8005ee8:	4817      	ldr	r0, [pc, #92]	; (8005f48 <StartDefaultTask+0x348>)
 8005eea:	f7fd ff83 	bl	8003df4 <sendToRPI>
//			osDelay(1000);
			break;
 8005eee:	e02e      	b.n	8005f4e <StartDefaultTask+0x34e>
		case 'T': // when first obstacle goes right-> Tln or Trn
			task2A2(data);
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <StartDefaultTask+0x324>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fb ff83 	bl	8001e00 <task2A2>
			sendToRPI("RPI:d");
 8005efa:	4812      	ldr	r0, [pc, #72]	; (8005f44 <StartDefaultTask+0x344>)
 8005efc:	f7fd ff7a 	bl	8003df4 <sendToRPI>
			break;
 8005f00:	e025      	b.n	8005f4e <StartDefaultTask+0x34e>
		case 'Y': // when first obstacle goes left-> Yln or Yrn
			task2A2L(data);
 8005f02:	4b08      	ldr	r3, [pc, #32]	; (8005f24 <StartDefaultTask+0x324>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fc fb72 	bl	80025f0 <task2A2L>
			sendToRPI("RPI:d");
 8005f0c:	480d      	ldr	r0, [pc, #52]	; (8005f44 <StartDefaultTask+0x344>)
 8005f0e:	f7fd ff71 	bl	8003df4 <sendToRPI>
			break;
 8005f12:	e01c      	b.n	8005f4e <StartDefaultTask+0x34e>
 8005f14:	20000428 	.word	0x20000428
 8005f18:	200003c0 	.word	0x200003c0
 8005f1c:	20000414 	.word	0x20000414
 8005f20:	20000429 	.word	0x20000429
 8005f24:	2000042c 	.word	0x2000042c
 8005f28:	2000042a 	.word	0x2000042a
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	20000258 	.word	0x20000258
 8005f34:	51eb851f 	.word	0x51eb851f
 8005f38:	20000430 	.word	0x20000430
 8005f3c:	20000431 	.word	0x20000431
 8005f40:	42480000 	.word	0x42480000
 8005f44:	080147d4 	.word	0x080147d4
 8005f48:	080147dc 	.word	0x080147dc
		default:
			break;
 8005f4c:	bf00      	nop
		}

		data = 0;
 8005f4e:	4b03      	ldr	r3, [pc, #12]	; (8005f5c <StartDefaultTask+0x35c>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
	}
	osDelay(50);
 8005f54:	2032      	movs	r0, #50	; 0x32
 8005f56:	f007 fa1a 	bl	800d38e <osDelay>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8005f5a:	e66a      	b.n	8005c32 <StartDefaultTask+0x32>
 8005f5c:	2000042c 	.word	0x2000042c

08005f60 <oled_show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_oled_show */
void oled_show(void *argument)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN oled_show */
  /* Infinite loop */


	for(;;)
 8005f68:	e7fe      	b.n	8005f68 <oled_show+0x8>
 8005f6a:	0000      	movs	r0, r0
 8005f6c:	0000      	movs	r0, r0
	...

08005f70 <gyro_read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gyro_read */
void gyro_read(void *argument)
{
 8005f70:	b5b0      	push	{r4, r5, r7, lr}
 8005f72:	b090      	sub	sp, #64	; 0x40
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gyro_read */
  /* Infinite loop */
  uint8_t val[2] = {0,0};
 8005f78:	2300      	movs	r3, #0
 8005f7a:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t offset_show[20];
  int16_t angularSpeed = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint32_t tick = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  int dir, offset;
  offset = 0;
 8005f84:	2300      	movs	r3, #0
 8005f86:	637b      	str	r3, [r7, #52]	; 0x34

  gyroInit();
 8005f88:	f7ff fdf6 	bl	8005b78 <gyroInit>
  gyroStart();
 8005f8c:	f7ff fde2 	bl	8005b54 <gyroStart>
  tick = HAL_GetTick();
 8005f90:	f001 f816 	bl	8006fc0 <HAL_GetTick>
 8005f94:	63f8      	str	r0, [r7, #60]	; 0x3c
  osDelayUntil(10);
 8005f96:	200a      	movs	r0, #10
 8005f98:	f007 fa14 	bl	800d3c4 <osDelayUntil>
  actualAngle=0;
 8005f9c:	4966      	ldr	r1, [pc, #408]	; (8006138 <gyro_read+0x1c8>)
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	e9c1 2300 	strd	r2, r3, [r1]

  for(;;)
  {

	  if(HAL_GetTick() - tick >= 100L)
 8005faa:	f001 f809 	bl	8006fc0 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b63      	cmp	r3, #99	; 0x63
 8005fb6:	d9f8      	bls.n	8005faa <gyro_read+0x3a>
	  {

		  //read gyro value Z-axis
		  readByte(0x37, val);
 8005fb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	2037      	movs	r0, #55	; 0x37
 8005fc0:	f7ff fd78 	bl	8005ab4 <readByte>
		  //Angle per >100 ticks
		  angularSpeed = (val[0] << 8) | val[1];
 8005fc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	b21a      	sxth	r2, r3
 8005fcc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005fd0:	b21b      	sxth	r3, r3
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	877b      	strh	r3, [r7, #58]	; 0x3a


		  if(moving || moveStraight)
 8005fd6:	4b59      	ldr	r3, [pc, #356]	; (800613c <gyro_read+0x1cc>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d104      	bne.n	8005fe8 <gyro_read+0x78>
 8005fde:	4b58      	ldr	r3, [pc, #352]	; (8006140 <gyro_read+0x1d0>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 8095 	beq.w	8006112 <gyro_read+0x1a2>
		  {
//			  actualAngle += (double)(angularSpeed + 0.5)*((HAL_GetTick() - tick)/16400.0)*1.02;
			  totalAngle += (double)(angularSpeed + 0.5)*((HAL_GetTick() - tick)/16400.0)*1.02;
 8005fe8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fa fa99 	bl	8000524 <__aeabi_i2d>
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	4b53      	ldr	r3, [pc, #332]	; (8006144 <gyro_read+0x1d4>)
 8005ff8:	f7fa f948 	bl	800028c <__adddf3>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4614      	mov	r4, r2
 8006002:	461d      	mov	r5, r3
 8006004:	f000 ffdc 	bl	8006fc0 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	4618      	mov	r0, r3
 8006010:	f7fa fa78 	bl	8000504 <__aeabi_ui2d>
 8006014:	a344      	add	r3, pc, #272	; (adr r3, 8006128 <gyro_read+0x1b8>)
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	f7fa fc17 	bl	800084c <__aeabi_ddiv>
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	4620      	mov	r0, r4
 8006024:	4629      	mov	r1, r5
 8006026:	f7fa fae7 	bl	80005f8 <__aeabi_dmul>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4610      	mov	r0, r2
 8006030:	4619      	mov	r1, r3
 8006032:	a33f      	add	r3, pc, #252	; (adr r3, 8006130 <gyro_read+0x1c0>)
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f7fa fade 	bl	80005f8 <__aeabi_dmul>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4610      	mov	r0, r2
 8006042:	4619      	mov	r1, r3
 8006044:	4b40      	ldr	r3, [pc, #256]	; (8006148 <gyro_read+0x1d8>)
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f7fa f91f 	bl	800028c <__adddf3>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	493d      	ldr	r1, [pc, #244]	; (8006148 <gyro_read+0x1d8>)
 8006054:	e9c1 2300 	strd	r2, r3, [r1]
			  actualAngle += (double)(angularSpeed + 0.5)*((HAL_GetTick() - tick)/16400.0)*1.02;
 8006058:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800605c:	4618      	mov	r0, r3
 800605e:	f7fa fa61 	bl	8000524 <__aeabi_i2d>
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	4b37      	ldr	r3, [pc, #220]	; (8006144 <gyro_read+0x1d4>)
 8006068:	f7fa f910 	bl	800028c <__adddf3>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4614      	mov	r4, r2
 8006072:	461d      	mov	r5, r3
 8006074:	f000 ffa4 	bl	8006fc0 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	4618      	mov	r0, r3
 8006080:	f7fa fa40 	bl	8000504 <__aeabi_ui2d>
 8006084:	a328      	add	r3, pc, #160	; (adr r3, 8006128 <gyro_read+0x1b8>)
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	f7fa fbdf 	bl	800084c <__aeabi_ddiv>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4620      	mov	r0, r4
 8006094:	4629      	mov	r1, r5
 8006096:	f7fa faaf 	bl	80005f8 <__aeabi_dmul>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4610      	mov	r0, r2
 80060a0:	4619      	mov	r1, r3
 80060a2:	a323      	add	r3, pc, #140	; (adr r3, 8006130 <gyro_read+0x1c0>)
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f7fa faa6 	bl	80005f8 <__aeabi_dmul>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4610      	mov	r0, r2
 80060b2:	4619      	mov	r1, r3
 80060b4:	4b20      	ldr	r3, [pc, #128]	; (8006138 <gyro_read+0x1c8>)
 80060b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ba:	f7fa f8e7 	bl	800028c <__adddf3>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	491d      	ldr	r1, [pc, #116]	; (8006138 <gyro_read+0x1c8>)
 80060c4:	e9c1 2300 	strd	r2, r3, [r1]

//			  if(actualAngle >= 720)
//			  {
//				  actualAngle = 0;
//			  }
			  if(totalAngle >= 720)
 80060c8:	4b1f      	ldr	r3, [pc, #124]	; (8006148 <gyro_read+0x1d8>)
 80060ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060ce:	f04f 0200 	mov.w	r2, #0
 80060d2:	4b1e      	ldr	r3, [pc, #120]	; (800614c <gyro_read+0x1dc>)
 80060d4:	f7fa fd16 	bl	8000b04 <__aeabi_dcmpge>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d006      	beq.n	80060ec <gyro_read+0x17c>
			  {
				  totalAngle = 0;
 80060de:	491a      	ldr	r1, [pc, #104]	; (8006148 <gyro_read+0x1d8>)
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	e9c1 2300 	strd	r2, r3, [r1]
			  }
			  if(actualAngle >= 720)
 80060ec:	4b12      	ldr	r3, [pc, #72]	; (8006138 <gyro_read+0x1c8>)
 80060ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060f2:	f04f 0200 	mov.w	r2, #0
 80060f6:	4b15      	ldr	r3, [pc, #84]	; (800614c <gyro_read+0x1dc>)
 80060f8:	f7fa fd04 	bl	8000b04 <__aeabi_dcmpge>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00e      	beq.n	8006120 <gyro_read+0x1b0>
			  {
				  actualAngle = 0;
 8006102:	490d      	ldr	r1, [pc, #52]	; (8006138 <gyro_read+0x1c8>)
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	e9c1 2300 	strd	r2, r3, [r1]
			  if(actualAngle >= 720)
 8006110:	e006      	b.n	8006120 <gyro_read+0x1b0>
			  }
		  }
		  else
		  {
			  totalAngle = 0;
 8006112:	490d      	ldr	r1, [pc, #52]	; (8006148 <gyro_read+0x1d8>)
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	f04f 0300 	mov.w	r3, #0
 800611c:	e9c1 2300 	strd	r2, r3, [r1]
//

//		  sprintf(offset_show, "angle:: %5d\0", (int)(actualAngle));
//		  OLED_ShowString(10,10, offset_show);
//		  OLED_Refresh_Gram();
		  tick = HAL_GetTick();
 8006120:	f000 ff4e 	bl	8006fc0 <HAL_GetTick>
 8006124:	63f8      	str	r0, [r7, #60]	; 0x3c
	  if(HAL_GetTick() - tick >= 100L)
 8006126:	e740      	b.n	8005faa <gyro_read+0x3a>
 8006128:	00000000 	.word	0x00000000
 800612c:	40d00400 	.word	0x40d00400
 8006130:	851eb852 	.word	0x851eb852
 8006134:	3ff051eb 	.word	0x3ff051eb
 8006138:	20000420 	.word	0x20000420
 800613c:	20000414 	.word	0x20000414
 8006140:	20000415 	.word	0x20000415
 8006144:	3fe00000 	.word	0x3fe00000
 8006148:	20000418 	.word	0x20000418
 800614c:	40868000 	.word	0x40868000

08006150 <servoMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servoMotor */
void servoMotor(void *argument)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN servoMotor */
	uint8_t message[20];
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   //will call callback function when interrupt is detected
 8006158:	2100      	movs	r1, #0
 800615a:	4806      	ldr	r0, [pc, #24]	; (8006174 <servoMotor+0x24>)
 800615c:	f004 fc7c 	bl	800aa58 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8006160:	210c      	movs	r1, #12
 8006162:	4805      	ldr	r0, [pc, #20]	; (8006178 <servoMotor+0x28>)
 8006164:	f004 fb60 	bl	800a828 <HAL_TIM_PWM_Start>
//		osDelay(2000);
//		htim1.Instance -> CCR4 = LEFT; //left
//		osDelay(2000);
//		htim1.Instance -> CCR4 = STRAIGHT; //centre
//		osDelay(2000);
		HCSR04_Read();
 8006168:	f7fb fb9c 	bl	80018a4 <HCSR04_Read>
//		sprintf(message, "distance: %5.2f\0", Distance);
//		OLED_ShowString(10, 50, message);
//		OLED_Refresh_Gram(); //Refresh Ram
		HAL_Delay(200);
 800616c:	20c8      	movs	r0, #200	; 0xc8
 800616e:	f000 ff33 	bl	8006fd8 <HAL_Delay>
		HCSR04_Read();
 8006172:	e7f9      	b.n	8006168 <servoMotor+0x18>
 8006174:	200002e8 	.word	0x200002e8
 8006178:	20000258 	.word	0x20000258

0800617c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006180:	b672      	cpsid	i
}
 8006182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006184:	e7fe      	b.n	8006184 <Error_Handler+0x8>
	...

08006188 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800618e:	2300      	movs	r3, #0
 8006190:	71fb      	strb	r3, [r7, #7]
 8006192:	e026      	b.n	80061e2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8006194:	79fb      	ldrb	r3, [r7, #7]
 8006196:	3b50      	subs	r3, #80	; 0x50
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2100      	movs	r1, #0
 800619c:	4618      	mov	r0, r3
 800619e:	f000 f82b 	bl	80061f8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80061a2:	2100      	movs	r1, #0
 80061a4:	2000      	movs	r0, #0
 80061a6:	f000 f827 	bl	80061f8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80061aa:	2100      	movs	r1, #0
 80061ac:	2010      	movs	r0, #16
 80061ae:	f000 f823 	bl	80061f8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80061b2:	2300      	movs	r3, #0
 80061b4:	71bb      	strb	r3, [r7, #6]
 80061b6:	e00d      	b.n	80061d4 <OLED_Refresh_Gram+0x4c>
 80061b8:	79ba      	ldrb	r2, [r7, #6]
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	490d      	ldr	r1, [pc, #52]	; (80061f4 <OLED_Refresh_Gram+0x6c>)
 80061be:	00d2      	lsls	r2, r2, #3
 80061c0:	440a      	add	r2, r1
 80061c2:	4413      	add	r3, r2
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2101      	movs	r1, #1
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 f815 	bl	80061f8 <OLED_WR_Byte>
 80061ce:	79bb      	ldrb	r3, [r7, #6]
 80061d0:	3301      	adds	r3, #1
 80061d2:	71bb      	strb	r3, [r7, #6]
 80061d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	daed      	bge.n	80061b8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80061dc:	79fb      	ldrb	r3, [r7, #7]
 80061de:	3301      	adds	r3, #1
 80061e0:	71fb      	strb	r3, [r7, #7]
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	2b07      	cmp	r3, #7
 80061e6:	d9d5      	bls.n	8006194 <OLED_Refresh_Gram+0xc>
	}   
}
 80061e8:	bf00      	nop
 80061ea:	bf00      	nop
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20000460 	.word	0x20000460

080061f8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	460a      	mov	r2, r1
 8006202:	71fb      	strb	r3, [r7, #7]
 8006204:	4613      	mov	r3, r2
 8006206:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8006208:	79bb      	ldrb	r3, [r7, #6]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d006      	beq.n	800621c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800620e:	2201      	movs	r2, #1
 8006210:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006214:	481c      	ldr	r0, [pc, #112]	; (8006288 <OLED_WR_Byte+0x90>)
 8006216:	f001 fa51 	bl	80076bc <HAL_GPIO_WritePin>
 800621a:	e005      	b.n	8006228 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800621c:	2200      	movs	r2, #0
 800621e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006222:	4819      	ldr	r0, [pc, #100]	; (8006288 <OLED_WR_Byte+0x90>)
 8006224:	f001 fa4a 	bl	80076bc <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8006228:	2300      	movs	r3, #0
 800622a:	73fb      	strb	r3, [r7, #15]
 800622c:	e01e      	b.n	800626c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800622e:	2200      	movs	r2, #0
 8006230:	2120      	movs	r1, #32
 8006232:	4815      	ldr	r0, [pc, #84]	; (8006288 <OLED_WR_Byte+0x90>)
 8006234:	f001 fa42 	bl	80076bc <HAL_GPIO_WritePin>
		if(dat&0x80)
 8006238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800623c:	2b00      	cmp	r3, #0
 800623e:	da05      	bge.n	800624c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8006240:	2201      	movs	r2, #1
 8006242:	2140      	movs	r1, #64	; 0x40
 8006244:	4810      	ldr	r0, [pc, #64]	; (8006288 <OLED_WR_Byte+0x90>)
 8006246:	f001 fa39 	bl	80076bc <HAL_GPIO_WritePin>
 800624a:	e004      	b.n	8006256 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800624c:	2200      	movs	r2, #0
 800624e:	2140      	movs	r1, #64	; 0x40
 8006250:	480d      	ldr	r0, [pc, #52]	; (8006288 <OLED_WR_Byte+0x90>)
 8006252:	f001 fa33 	bl	80076bc <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8006256:	2201      	movs	r2, #1
 8006258:	2120      	movs	r1, #32
 800625a:	480b      	ldr	r0, [pc, #44]	; (8006288 <OLED_WR_Byte+0x90>)
 800625c:	f001 fa2e 	bl	80076bc <HAL_GPIO_WritePin>
		dat<<=1;   
 8006260:	79fb      	ldrb	r3, [r7, #7]
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8006266:	7bfb      	ldrb	r3, [r7, #15]
 8006268:	3301      	adds	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	2b07      	cmp	r3, #7
 8006270:	d9dd      	bls.n	800622e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8006272:	2201      	movs	r2, #1
 8006274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006278:	4803      	ldr	r0, [pc, #12]	; (8006288 <OLED_WR_Byte+0x90>)
 800627a:	f001 fa1f 	bl	80076bc <HAL_GPIO_WritePin>
} 
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	40021000 	.word	0x40021000

0800628c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8006292:	2300      	movs	r3, #0
 8006294:	71fb      	strb	r3, [r7, #7]
 8006296:	e014      	b.n	80062c2 <OLED_Clear+0x36>
 8006298:	2300      	movs	r3, #0
 800629a:	71bb      	strb	r3, [r7, #6]
 800629c:	e00a      	b.n	80062b4 <OLED_Clear+0x28>
 800629e:	79ba      	ldrb	r2, [r7, #6]
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	490c      	ldr	r1, [pc, #48]	; (80062d4 <OLED_Clear+0x48>)
 80062a4:	00d2      	lsls	r2, r2, #3
 80062a6:	440a      	add	r2, r1
 80062a8:	4413      	add	r3, r2
 80062aa:	2200      	movs	r2, #0
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	79bb      	ldrb	r3, [r7, #6]
 80062b0:	3301      	adds	r3, #1
 80062b2:	71bb      	strb	r3, [r7, #6]
 80062b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	daf0      	bge.n	800629e <OLED_Clear+0x12>
 80062bc:	79fb      	ldrb	r3, [r7, #7]
 80062be:	3301      	adds	r3, #1
 80062c0:	71fb      	strb	r3, [r7, #7]
 80062c2:	79fb      	ldrb	r3, [r7, #7]
 80062c4:	2b07      	cmp	r3, #7
 80062c6:	d9e7      	bls.n	8006298 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80062c8:	f7ff ff5e 	bl	8006188 <OLED_Refresh_Gram>
}
 80062cc:	bf00      	nop
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20000460 	.word	0x20000460

080062d8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4603      	mov	r3, r0
 80062e0:	71fb      	strb	r3, [r7, #7]
 80062e2:	460b      	mov	r3, r1
 80062e4:	71bb      	strb	r3, [r7, #6]
 80062e6:	4613      	mov	r3, r2
 80062e8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80062ea:	2300      	movs	r3, #0
 80062ec:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80062ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	db41      	blt.n	800637a <OLED_DrawPoint+0xa2>
 80062f6:	79bb      	ldrb	r3, [r7, #6]
 80062f8:	2b3f      	cmp	r3, #63	; 0x3f
 80062fa:	d83e      	bhi.n	800637a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80062fc:	79bb      	ldrb	r3, [r7, #6]
 80062fe:	08db      	lsrs	r3, r3, #3
 8006300:	b2db      	uxtb	r3, r3
 8006302:	f1c3 0307 	rsb	r3, r3, #7
 8006306:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8006308:	79bb      	ldrb	r3, [r7, #6]
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8006310:	7b7b      	ldrb	r3, [r7, #13]
 8006312:	f1c3 0307 	rsb	r3, r3, #7
 8006316:	2201      	movs	r2, #1
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800631e:	797b      	ldrb	r3, [r7, #5]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d012      	beq.n	800634a <OLED_DrawPoint+0x72>
 8006324:	79fa      	ldrb	r2, [r7, #7]
 8006326:	7bbb      	ldrb	r3, [r7, #14]
 8006328:	4917      	ldr	r1, [pc, #92]	; (8006388 <OLED_DrawPoint+0xb0>)
 800632a:	00d2      	lsls	r2, r2, #3
 800632c:	440a      	add	r2, r1
 800632e:	4413      	add	r3, r2
 8006330:	7818      	ldrb	r0, [r3, #0]
 8006332:	79fa      	ldrb	r2, [r7, #7]
 8006334:	7bbb      	ldrb	r3, [r7, #14]
 8006336:	7bf9      	ldrb	r1, [r7, #15]
 8006338:	4301      	orrs	r1, r0
 800633a:	b2c8      	uxtb	r0, r1
 800633c:	4912      	ldr	r1, [pc, #72]	; (8006388 <OLED_DrawPoint+0xb0>)
 800633e:	00d2      	lsls	r2, r2, #3
 8006340:	440a      	add	r2, r1
 8006342:	4413      	add	r3, r2
 8006344:	4602      	mov	r2, r0
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	e018      	b.n	800637c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800634a:	79fa      	ldrb	r2, [r7, #7]
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	490e      	ldr	r1, [pc, #56]	; (8006388 <OLED_DrawPoint+0xb0>)
 8006350:	00d2      	lsls	r2, r2, #3
 8006352:	440a      	add	r2, r1
 8006354:	4413      	add	r3, r2
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	b25a      	sxtb	r2, r3
 800635a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800635e:	43db      	mvns	r3, r3
 8006360:	b25b      	sxtb	r3, r3
 8006362:	4013      	ands	r3, r2
 8006364:	b259      	sxtb	r1, r3
 8006366:	79fa      	ldrb	r2, [r7, #7]
 8006368:	7bbb      	ldrb	r3, [r7, #14]
 800636a:	b2c8      	uxtb	r0, r1
 800636c:	4906      	ldr	r1, [pc, #24]	; (8006388 <OLED_DrawPoint+0xb0>)
 800636e:	00d2      	lsls	r2, r2, #3
 8006370:	440a      	add	r2, r1
 8006372:	4413      	add	r3, r2
 8006374:	4602      	mov	r2, r0
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	e000      	b.n	800637c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800637a:	bf00      	nop
}
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	20000460 	.word	0x20000460

0800638c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800638c:	b590      	push	{r4, r7, lr}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	4604      	mov	r4, r0
 8006394:	4608      	mov	r0, r1
 8006396:	4611      	mov	r1, r2
 8006398:	461a      	mov	r2, r3
 800639a:	4623      	mov	r3, r4
 800639c:	71fb      	strb	r3, [r7, #7]
 800639e:	4603      	mov	r3, r0
 80063a0:	71bb      	strb	r3, [r7, #6]
 80063a2:	460b      	mov	r3, r1
 80063a4:	717b      	strb	r3, [r7, #5]
 80063a6:	4613      	mov	r3, r2
 80063a8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80063aa:	79bb      	ldrb	r3, [r7, #6]
 80063ac:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80063ae:	797b      	ldrb	r3, [r7, #5]
 80063b0:	3b20      	subs	r3, #32
 80063b2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80063b4:	2300      	movs	r3, #0
 80063b6:	73bb      	strb	r3, [r7, #14]
 80063b8:	e04d      	b.n	8006456 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80063ba:	793b      	ldrb	r3, [r7, #4]
 80063bc:	2b0c      	cmp	r3, #12
 80063be:	d10b      	bne.n	80063d8 <OLED_ShowChar+0x4c>
 80063c0:	797a      	ldrb	r2, [r7, #5]
 80063c2:	7bb9      	ldrb	r1, [r7, #14]
 80063c4:	4828      	ldr	r0, [pc, #160]	; (8006468 <OLED_ShowChar+0xdc>)
 80063c6:	4613      	mov	r3, r2
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4403      	add	r3, r0
 80063d0:	440b      	add	r3, r1
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	73fb      	strb	r3, [r7, #15]
 80063d6:	e007      	b.n	80063e8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80063d8:	797a      	ldrb	r2, [r7, #5]
 80063da:	7bbb      	ldrb	r3, [r7, #14]
 80063dc:	4923      	ldr	r1, [pc, #140]	; (800646c <OLED_ShowChar+0xe0>)
 80063de:	0112      	lsls	r2, r2, #4
 80063e0:	440a      	add	r2, r1
 80063e2:	4413      	add	r3, r2
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80063e8:	2300      	movs	r3, #0
 80063ea:	737b      	strb	r3, [r7, #13]
 80063ec:	e02d      	b.n	800644a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80063ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	da07      	bge.n	8006406 <OLED_ShowChar+0x7a>
 80063f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80063fa:	79b9      	ldrb	r1, [r7, #6]
 80063fc:	79fb      	ldrb	r3, [r7, #7]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff ff6a 	bl	80062d8 <OLED_DrawPoint>
 8006404:	e00c      	b.n	8006420 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8006406:	f897 3020 	ldrb.w	r3, [r7, #32]
 800640a:	2b00      	cmp	r3, #0
 800640c:	bf0c      	ite	eq
 800640e:	2301      	moveq	r3, #1
 8006410:	2300      	movne	r3, #0
 8006412:	b2db      	uxtb	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	79b9      	ldrb	r1, [r7, #6]
 8006418:	79fb      	ldrb	r3, [r7, #7]
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff ff5c 	bl	80062d8 <OLED_DrawPoint>
			temp<<=1;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
			y++;
 8006426:	79bb      	ldrb	r3, [r7, #6]
 8006428:	3301      	adds	r3, #1
 800642a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800642c:	79ba      	ldrb	r2, [r7, #6]
 800642e:	7b3b      	ldrb	r3, [r7, #12]
 8006430:	1ad2      	subs	r2, r2, r3
 8006432:	793b      	ldrb	r3, [r7, #4]
 8006434:	429a      	cmp	r2, r3
 8006436:	d105      	bne.n	8006444 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8006438:	7b3b      	ldrb	r3, [r7, #12]
 800643a:	71bb      	strb	r3, [r7, #6]
				x++;
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	3301      	adds	r3, #1
 8006440:	71fb      	strb	r3, [r7, #7]
				break;
 8006442:	e005      	b.n	8006450 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8006444:	7b7b      	ldrb	r3, [r7, #13]
 8006446:	3301      	adds	r3, #1
 8006448:	737b      	strb	r3, [r7, #13]
 800644a:	7b7b      	ldrb	r3, [r7, #13]
 800644c:	2b07      	cmp	r3, #7
 800644e:	d9ce      	bls.n	80063ee <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	3301      	adds	r3, #1
 8006454:	73bb      	strb	r3, [r7, #14]
 8006456:	7bba      	ldrb	r2, [r7, #14]
 8006458:	793b      	ldrb	r3, [r7, #4]
 800645a:	429a      	cmp	r2, r3
 800645c:	d3ad      	bcc.n	80063ba <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800645e:	bf00      	nop
 8006460:	bf00      	nop
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	bd90      	pop	{r4, r7, pc}
 8006468:	0801488c 	.word	0x0801488c
 800646c:	08014d00 	.word	0x08014d00

08006470 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af02      	add	r7, sp, #8
 8006476:	4603      	mov	r3, r0
 8006478:	603a      	str	r2, [r7, #0]
 800647a:	71fb      	strb	r3, [r7, #7]
 800647c:	460b      	mov	r3, r1
 800647e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8006480:	e01f      	b.n	80064c2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8006482:	79fb      	ldrb	r3, [r7, #7]
 8006484:	2b7a      	cmp	r3, #122	; 0x7a
 8006486:	d904      	bls.n	8006492 <OLED_ShowString+0x22>
 8006488:	2300      	movs	r3, #0
 800648a:	71fb      	strb	r3, [r7, #7]
 800648c:	79bb      	ldrb	r3, [r7, #6]
 800648e:	3310      	adds	r3, #16
 8006490:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8006492:	79bb      	ldrb	r3, [r7, #6]
 8006494:	2b3a      	cmp	r3, #58	; 0x3a
 8006496:	d905      	bls.n	80064a4 <OLED_ShowString+0x34>
 8006498:	2300      	movs	r3, #0
 800649a:	71fb      	strb	r3, [r7, #7]
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	71bb      	strb	r3, [r7, #6]
 80064a0:	f7ff fef4 	bl	800628c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781a      	ldrb	r2, [r3, #0]
 80064a8:	79b9      	ldrb	r1, [r7, #6]
 80064aa:	79f8      	ldrb	r0, [r7, #7]
 80064ac:	2301      	movs	r3, #1
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	230c      	movs	r3, #12
 80064b2:	f7ff ff6b 	bl	800638c <OLED_ShowChar>
        x+=8;
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	3308      	adds	r3, #8
 80064ba:	71fb      	strb	r3, [r7, #7]
        p++;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	3301      	adds	r3, #1
 80064c0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1db      	bne.n	8006482 <OLED_ShowString+0x12>
    }  
}	 
 80064ca:	bf00      	nop
 80064cc:	bf00      	nop
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <OLED_Init>:

void OLED_Init(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80064d8:	f003 fc7e 	bl	8009dd8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80064dc:	4b41      	ldr	r3, [pc, #260]	; (80065e4 <OLED_Init+0x110>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e0:	4a40      	ldr	r2, [pc, #256]	; (80065e4 <OLED_Init+0x110>)
 80064e2:	f023 0301 	bic.w	r3, r3, #1
 80064e6:	6713      	str	r3, [r2, #112]	; 0x70
 80064e8:	4b3e      	ldr	r3, [pc, #248]	; (80065e4 <OLED_Init+0x110>)
 80064ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ec:	4a3d      	ldr	r2, [pc, #244]	; (80065e4 <OLED_Init+0x110>)
 80064ee:	f023 0304 	bic.w	r3, r3, #4
 80064f2:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80064f4:	f003 fc84 	bl	8009e00 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80064f8:	2200      	movs	r2, #0
 80064fa:	2180      	movs	r1, #128	; 0x80
 80064fc:	483a      	ldr	r0, [pc, #232]	; (80065e8 <OLED_Init+0x114>)
 80064fe:	f001 f8dd 	bl	80076bc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8006502:	2064      	movs	r0, #100	; 0x64
 8006504:	f000 fd68 	bl	8006fd8 <HAL_Delay>
	OLED_RST_Set();
 8006508:	2201      	movs	r2, #1
 800650a:	2180      	movs	r1, #128	; 0x80
 800650c:	4836      	ldr	r0, [pc, #216]	; (80065e8 <OLED_Init+0x114>)
 800650e:	f001 f8d5 	bl	80076bc <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8006512:	2100      	movs	r1, #0
 8006514:	20ae      	movs	r0, #174	; 0xae
 8006516:	f7ff fe6f 	bl	80061f8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800651a:	2100      	movs	r1, #0
 800651c:	20d5      	movs	r0, #213	; 0xd5
 800651e:	f7ff fe6b 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8006522:	2100      	movs	r1, #0
 8006524:	2050      	movs	r0, #80	; 0x50
 8006526:	f7ff fe67 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800652a:	2100      	movs	r1, #0
 800652c:	20a8      	movs	r0, #168	; 0xa8
 800652e:	f7ff fe63 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8006532:	2100      	movs	r1, #0
 8006534:	203f      	movs	r0, #63	; 0x3f
 8006536:	f7ff fe5f 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800653a:	2100      	movs	r1, #0
 800653c:	20d3      	movs	r0, #211	; 0xd3
 800653e:	f7ff fe5b 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8006542:	2100      	movs	r1, #0
 8006544:	2000      	movs	r0, #0
 8006546:	f7ff fe57 	bl	80061f8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800654a:	2100      	movs	r1, #0
 800654c:	2040      	movs	r0, #64	; 0x40
 800654e:	f7ff fe53 	bl	80061f8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8006552:	2100      	movs	r1, #0
 8006554:	208d      	movs	r0, #141	; 0x8d
 8006556:	f7ff fe4f 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800655a:	2100      	movs	r1, #0
 800655c:	2014      	movs	r0, #20
 800655e:	f7ff fe4b 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8006562:	2100      	movs	r1, #0
 8006564:	2020      	movs	r0, #32
 8006566:	f7ff fe47 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800656a:	2100      	movs	r1, #0
 800656c:	2002      	movs	r0, #2
 800656e:	f7ff fe43 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8006572:	2100      	movs	r1, #0
 8006574:	20a1      	movs	r0, #161	; 0xa1
 8006576:	f7ff fe3f 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800657a:	2100      	movs	r1, #0
 800657c:	20c0      	movs	r0, #192	; 0xc0
 800657e:	f7ff fe3b 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8006582:	2100      	movs	r1, #0
 8006584:	20da      	movs	r0, #218	; 0xda
 8006586:	f7ff fe37 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800658a:	2100      	movs	r1, #0
 800658c:	2012      	movs	r0, #18
 800658e:	f7ff fe33 	bl	80061f8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8006592:	2100      	movs	r1, #0
 8006594:	2081      	movs	r0, #129	; 0x81
 8006596:	f7ff fe2f 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800659a:	2100      	movs	r1, #0
 800659c:	20ef      	movs	r0, #239	; 0xef
 800659e:	f7ff fe2b 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80065a2:	2100      	movs	r1, #0
 80065a4:	20d9      	movs	r0, #217	; 0xd9
 80065a6:	f7ff fe27 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80065aa:	2100      	movs	r1, #0
 80065ac:	20f1      	movs	r0, #241	; 0xf1
 80065ae:	f7ff fe23 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80065b2:	2100      	movs	r1, #0
 80065b4:	20db      	movs	r0, #219	; 0xdb
 80065b6:	f7ff fe1f 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80065ba:	2100      	movs	r1, #0
 80065bc:	2030      	movs	r0, #48	; 0x30
 80065be:	f7ff fe1b 	bl	80061f8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80065c2:	2100      	movs	r1, #0
 80065c4:	20a4      	movs	r0, #164	; 0xa4
 80065c6:	f7ff fe17 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80065ca:	2100      	movs	r1, #0
 80065cc:	20a6      	movs	r0, #166	; 0xa6
 80065ce:	f7ff fe13 	bl	80061f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80065d2:	2100      	movs	r1, #0
 80065d4:	20af      	movs	r0, #175	; 0xaf
 80065d6:	f7ff fe0f 	bl	80061f8 <OLED_WR_Byte>
	OLED_Clear(); 
 80065da:	f7ff fe57 	bl	800628c <OLED_Clear>
}
 80065de:	bf00      	nop
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	40023800 	.word	0x40023800
 80065e8:	40021000 	.word	0x40021000

080065ec <PIDController_Init>:
#include "pid.h"
#include "math.h"

void PIDController_Init(PIDController *pid) {
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	615a      	str	r2, [r3, #20]
	pid->prevError  = 0.0f;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f04f 0200 	mov.w	r2, #0
 8006600:	619a      	str	r2, [r3, #24]
	pid->prevMeasurement = 0.0f;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	61da      	str	r2, [r3, #28]
	pid->out = 0;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	621a      	str	r2, [r3, #32]

}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <PIDController_Update>:

int PIDController_Update(PIDController *pid, float setpoint, float measurement, int currentpwm) {
 800661c:	b480      	push	{r7}
 800661e:	b089      	sub	sp, #36	; 0x24
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	ed87 0a02 	vstr	s0, [r7, #8]
 8006628:	edc7 0a01 	vstr	s1, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 800662e:	ed97 7a02 	vldr	s14, [r7, #8]
 8006632:	edd7 7a01 	vldr	s15, [r7, #4]
 8006636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800663a:	edc7 7a07 	vstr	s15, [r7, #28]
    if (isnan(error) == 1) error = 0;
 800663e:	ed97 7a07 	vldr	s14, [r7, #28]
 8006642:	edd7 7a07 	vldr	s15, [r7, #28]
 8006646:	eeb4 7a67 	vcmp.f32	s14, s15
 800664a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800664e:	d702      	bvc.n	8006656 <PIDController_Update+0x3a>
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	61fb      	str	r3, [r7, #28]
	// Proportional
    //int proportional = pid->Kp * error * currentpwm;

    // velocity implementation (instead of distance)
    int proportional;
    if (error >= 0) // positive error, need to increase pwm
 8006656:	edd7 7a07 	vldr	s15, [r7, #28]
 800665a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800665e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006662:	db1b      	blt.n	800669c <PIDController_Update+0x80>
    {
    	 proportional = (int)((1 + pid->Kp * (error / setpoint)) * currentpwm); // kP * (1 + percentage of error based on setpoint) * currentpwm
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	ed93 7a00 	vldr	s14, [r3]
 800666a:	ed97 6a07 	vldr	s12, [r7, #28]
 800666e:	edd7 6a02 	vldr	s13, [r7, #8]
 8006672:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800667e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	ee07 3a90 	vmov	s15, r3
 8006688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800668c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006694:	ee17 3a90 	vmov	r3, s15
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	e01a      	b.n	80066d2 <PIDController_Update+0xb6>
    }
    else // negative error, need to decrease pwm
    {
    	proportional = (int)((1 + pid->Kp * (error / measurement)) * currentpwm); // kP * (1 + percentage of error based on measurement) * currentpwm
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	ed93 7a00 	vldr	s14, [r3]
 80066a2:	ed97 6a07 	vldr	s12, [r7, #28]
 80066a6:	edd7 6a01 	vldr	s13, [r7, #4]
 80066aa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80066ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	ee07 3a90 	vmov	s15, r3
 80066c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066cc:	ee17 3a90 	vmov	r3, s15
 80066d0:	61bb      	str	r3, [r7, #24]
    }

	// Integral
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError) * currentpwm;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	ee07 3a90 	vmov	s15, r3
 80066da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80066e4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80066e8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80066f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	ed93 6a06 	vldr	s12, [r3, #24]
 80066fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8006700:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006704:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800671a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800671e:	ee17 2a90 	vmov	r2, s15
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	615a      	str	r2, [r3, #20]

	// Anti-wind-up via dynamic integrator clamping
	int limMinInt, limMaxInt;

	// Compute integrator limits
	if (pid->limMax > proportional) {
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	429a      	cmp	r2, r3
 800672e:	da05      	bge.n	800673c <PIDController_Update+0x120>

		limMaxInt = pid->limMax - proportional;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	e001      	b.n	8006740 <PIDController_Update+0x124>

	} else {

		limMaxInt = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	613b      	str	r3, [r7, #16]

	}

	if (pid->limMin < proportional) {
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	429a      	cmp	r2, r3
 8006748:	dd05      	ble.n	8006756 <PIDController_Update+0x13a>

		limMinInt = pid->limMin - proportional;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	e001      	b.n	800675a <PIDController_Update+0x13e>

	} else {

		limMinInt = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]

	}

	// Clamp integrator
    if (pid->integrator > limMaxInt) {
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	429a      	cmp	r2, r3
 8006762:	da03      	bge.n	800676c <PIDController_Update+0x150>

        pid->integrator = limMaxInt;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	615a      	str	r2, [r3, #20]
 800676a:	e007      	b.n	800677c <PIDController_Update+0x160>

    } else if (pid->integrator < limMinInt) {
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	429a      	cmp	r2, r3
 8006774:	dd02      	ble.n	800677c <PIDController_Update+0x160>

        pid->integrator = limMinInt;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	615a      	str	r2, [r3, #20]

	/*
	* Compute output and apply limits
	*/

    pid->out = proportional + pid->integrator;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	695a      	ldr	r2, [r3, #20]
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	441a      	add	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	621a      	str	r2, [r3, #32]

    if (pid->out > pid->limMax) {
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a1a      	ldr	r2, [r3, #32]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	429a      	cmp	r2, r3
 8006792:	dd04      	ble.n	800679e <PIDController_Update+0x182>

        pid->out = pid->limMax;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	621a      	str	r2, [r3, #32]
 800679c:	e009      	b.n	80067b2 <PIDController_Update+0x196>

    } else if (pid->out < pid->limMin) {
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a1a      	ldr	r2, [r3, #32]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	da03      	bge.n	80067b2 <PIDController_Update+0x196>

        pid->out = pid->limMin;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	621a      	str	r2, [r3, #32]

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	619a      	str	r2, [r3, #24]
    pid->prevMeasurement = measurement;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	61da      	str	r2, [r3, #28]

	/* Return controller output */
    return pid->out;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a1b      	ldr	r3, [r3, #32]

}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3724      	adds	r7, #36	; 0x24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
	...

080067d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067d6:	2300      	movs	r3, #0
 80067d8:	607b      	str	r3, [r7, #4]
 80067da:	4b12      	ldr	r3, [pc, #72]	; (8006824 <HAL_MspInit+0x54>)
 80067dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067de:	4a11      	ldr	r2, [pc, #68]	; (8006824 <HAL_MspInit+0x54>)
 80067e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067e4:	6453      	str	r3, [r2, #68]	; 0x44
 80067e6:	4b0f      	ldr	r3, [pc, #60]	; (8006824 <HAL_MspInit+0x54>)
 80067e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067ee:	607b      	str	r3, [r7, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80067f2:	2300      	movs	r3, #0
 80067f4:	603b      	str	r3, [r7, #0]
 80067f6:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <HAL_MspInit+0x54>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	4a0a      	ldr	r2, [pc, #40]	; (8006824 <HAL_MspInit+0x54>)
 80067fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006800:	6413      	str	r3, [r2, #64]	; 0x40
 8006802:	4b08      	ldr	r3, [pc, #32]	; (8006824 <HAL_MspInit+0x54>)
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800680e:	2200      	movs	r2, #0
 8006810:	210f      	movs	r1, #15
 8006812:	f06f 0001 	mvn.w	r0, #1
 8006816:	f000 fcde 	bl	80071d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800681a:	bf00      	nop
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40023800 	.word	0x40023800

08006828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	; 0x28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006830:	f107 0314 	add.w	r3, r7, #20
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	605a      	str	r2, [r3, #4]
 800683a:	609a      	str	r2, [r3, #8]
 800683c:	60da      	str	r2, [r3, #12]
 800683e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a1d      	ldr	r2, [pc, #116]	; (80068bc <HAL_I2C_MspInit+0x94>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d134      	bne.n	80068b4 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800684a:	2300      	movs	r3, #0
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <HAL_I2C_MspInit+0x98>)
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	4a1b      	ldr	r2, [pc, #108]	; (80068c0 <HAL_I2C_MspInit+0x98>)
 8006854:	f043 0302 	orr.w	r3, r3, #2
 8006858:	6313      	str	r3, [r2, #48]	; 0x30
 800685a:	4b19      	ldr	r3, [pc, #100]	; (80068c0 <HAL_I2C_MspInit+0x98>)
 800685c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	613b      	str	r3, [r7, #16]
 8006864:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GYRO_SCL_Pin|GYRO_SDA_Pin;
 8006866:	f44f 7340 	mov.w	r3, #768	; 0x300
 800686a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800686c:	2312      	movs	r3, #18
 800686e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006870:	2300      	movs	r3, #0
 8006872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006874:	2303      	movs	r3, #3
 8006876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006878:	2304      	movs	r3, #4
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800687c:	f107 0314 	add.w	r3, r7, #20
 8006880:	4619      	mov	r1, r3
 8006882:	4810      	ldr	r0, [pc, #64]	; (80068c4 <HAL_I2C_MspInit+0x9c>)
 8006884:	f000 fd7e 	bl	8007384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006888:	2300      	movs	r3, #0
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <HAL_I2C_MspInit+0x98>)
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	4a0b      	ldr	r2, [pc, #44]	; (80068c0 <HAL_I2C_MspInit+0x98>)
 8006892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006896:	6413      	str	r3, [r2, #64]	; 0x40
 8006898:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <HAL_I2C_MspInit+0x98>)
 800689a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80068a4:	2200      	movs	r2, #0
 80068a6:	2105      	movs	r1, #5
 80068a8:	201f      	movs	r0, #31
 80068aa:	f000 fc94 	bl	80071d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80068ae:	201f      	movs	r0, #31
 80068b0:	f000 fcad 	bl	800720e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80068b4:	bf00      	nop
 80068b6:	3728      	adds	r7, #40	; 0x28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	40005400 	.word	0x40005400
 80068c0:	40023800 	.word	0x40023800
 80068c4:	40020400 	.word	0x40020400

080068c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	; 0x28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068d0:	f107 0314 	add.w	r3, r7, #20
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	605a      	str	r2, [r3, #4]
 80068da:	609a      	str	r2, [r3, #8]
 80068dc:	60da      	str	r2, [r3, #12]
 80068de:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a23      	ldr	r2, [pc, #140]	; (8006974 <HAL_TIM_Base_MspInit+0xac>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d10e      	bne.n	8006908 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80068ea:	2300      	movs	r3, #0
 80068ec:	613b      	str	r3, [r7, #16]
 80068ee:	4b22      	ldr	r3, [pc, #136]	; (8006978 <HAL_TIM_Base_MspInit+0xb0>)
 80068f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f2:	4a21      	ldr	r2, [pc, #132]	; (8006978 <HAL_TIM_Base_MspInit+0xb0>)
 80068f4:	f043 0301 	orr.w	r3, r3, #1
 80068f8:	6453      	str	r3, [r2, #68]	; 0x44
 80068fa:	4b1f      	ldr	r3, [pc, #124]	; (8006978 <HAL_TIM_Base_MspInit+0xb0>)
 80068fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	613b      	str	r3, [r7, #16]
 8006904:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006906:	e031      	b.n	800696c <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM8)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a1b      	ldr	r2, [pc, #108]	; (800697c <HAL_TIM_Base_MspInit+0xb4>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d12c      	bne.n	800696c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	4b18      	ldr	r3, [pc, #96]	; (8006978 <HAL_TIM_Base_MspInit+0xb0>)
 8006918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691a:	4a17      	ldr	r2, [pc, #92]	; (8006978 <HAL_TIM_Base_MspInit+0xb0>)
 800691c:	f043 0302 	orr.w	r3, r3, #2
 8006920:	6453      	str	r3, [r2, #68]	; 0x44
 8006922:	4b15      	ldr	r3, [pc, #84]	; (8006978 <HAL_TIM_Base_MspInit+0xb0>)
 8006924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800692e:	2300      	movs	r3, #0
 8006930:	60bb      	str	r3, [r7, #8]
 8006932:	4b11      	ldr	r3, [pc, #68]	; (8006978 <HAL_TIM_Base_MspInit+0xb0>)
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	4a10      	ldr	r2, [pc, #64]	; (8006978 <HAL_TIM_Base_MspInit+0xb0>)
 8006938:	f043 0304 	orr.w	r3, r3, #4
 800693c:	6313      	str	r3, [r2, #48]	; 0x30
 800693e:	4b0e      	ldr	r3, [pc, #56]	; (8006978 <HAL_TIM_Base_MspInit+0xb0>)
 8006940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	60bb      	str	r3, [r7, #8]
 8006948:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin|PWMC_Pin|PWMD_Pin;
 800694a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800694e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006950:	2302      	movs	r3, #2
 8006952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006954:	2300      	movs	r3, #0
 8006956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006958:	2300      	movs	r3, #0
 800695a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800695c:	2303      	movs	r3, #3
 800695e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006960:	f107 0314 	add.w	r3, r7, #20
 8006964:	4619      	mov	r1, r3
 8006966:	4806      	ldr	r0, [pc, #24]	; (8006980 <HAL_TIM_Base_MspInit+0xb8>)
 8006968:	f000 fd0c 	bl	8007384 <HAL_GPIO_Init>
}
 800696c:	bf00      	nop
 800696e:	3728      	adds	r7, #40	; 0x28
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	40010000 	.word	0x40010000
 8006978:	40023800 	.word	0x40023800
 800697c:	40010400 	.word	0x40010400
 8006980:	40020800 	.word	0x40020800

08006984 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08c      	sub	sp, #48	; 0x30
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800698c:	f107 031c 	add.w	r3, r7, #28
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	605a      	str	r2, [r3, #4]
 8006996:	609a      	str	r2, [r3, #8]
 8006998:	60da      	str	r2, [r3, #12]
 800699a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a4:	d14b      	bne.n	8006a3e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80069a6:	2300      	movs	r3, #0
 80069a8:	61bb      	str	r3, [r7, #24]
 80069aa:	4b3f      	ldr	r3, [pc, #252]	; (8006aa8 <HAL_TIM_Encoder_MspInit+0x124>)
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	4a3e      	ldr	r2, [pc, #248]	; (8006aa8 <HAL_TIM_Encoder_MspInit+0x124>)
 80069b0:	f043 0301 	orr.w	r3, r3, #1
 80069b4:	6413      	str	r3, [r2, #64]	; 0x40
 80069b6:	4b3c      	ldr	r3, [pc, #240]	; (8006aa8 <HAL_TIM_Encoder_MspInit+0x124>)
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	61bb      	str	r3, [r7, #24]
 80069c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069c2:	2300      	movs	r3, #0
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	4b38      	ldr	r3, [pc, #224]	; (8006aa8 <HAL_TIM_Encoder_MspInit+0x124>)
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	4a37      	ldr	r2, [pc, #220]	; (8006aa8 <HAL_TIM_Encoder_MspInit+0x124>)
 80069cc:	f043 0301 	orr.w	r3, r3, #1
 80069d0:	6313      	str	r3, [r2, #48]	; 0x30
 80069d2:	4b35      	ldr	r3, [pc, #212]	; (8006aa8 <HAL_TIM_Encoder_MspInit+0x124>)
 80069d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069de:	2300      	movs	r3, #0
 80069e0:	613b      	str	r3, [r7, #16]
 80069e2:	4b31      	ldr	r3, [pc, #196]	; (8006aa8 <HAL_TIM_Encoder_MspInit+0x124>)
 80069e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e6:	4a30      	ldr	r2, [pc, #192]	; (8006aa8 <HAL_TIM_Encoder_MspInit+0x124>)
 80069e8:	f043 0302 	orr.w	r3, r3, #2
 80069ec:	6313      	str	r3, [r2, #48]	; 0x30
 80069ee:	4b2e      	ldr	r3, [pc, #184]	; (8006aa8 <HAL_TIM_Encoder_MspInit+0x124>)
 80069f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	613b      	str	r3, [r7, #16]
 80069f8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA1_Pin;
 80069fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a00:	2302      	movs	r3, #2
 8006a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a04:	2300      	movs	r3, #0
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA1_GPIO_Port, &GPIO_InitStruct);
 8006a10:	f107 031c 	add.w	r3, r7, #28
 8006a14:	4619      	mov	r1, r3
 8006a16:	4825      	ldr	r0, [pc, #148]	; (8006aac <HAL_TIM_Encoder_MspInit+0x128>)
 8006a18:	f000 fcb4 	bl	8007384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA2_Pin;
 8006a1c:	2308      	movs	r3, #8
 8006a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a20:	2302      	movs	r3, #2
 8006a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA2_GPIO_Port, &GPIO_InitStruct);
 8006a30:	f107 031c 	add.w	r3, r7, #28
 8006a34:	4619      	mov	r1, r3
 8006a36:	481e      	ldr	r0, [pc, #120]	; (8006ab0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006a38:	f000 fca4 	bl	8007384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006a3c:	e030      	b.n	8006aa0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a1c      	ldr	r2, [pc, #112]	; (8006ab4 <HAL_TIM_Encoder_MspInit+0x130>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d12b      	bne.n	8006aa0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	4b16      	ldr	r3, [pc, #88]	; (8006aa8 <HAL_TIM_Encoder_MspInit+0x124>)
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a50:	4a15      	ldr	r2, [pc, #84]	; (8006aa8 <HAL_TIM_Encoder_MspInit+0x124>)
 8006a52:	f043 0304 	orr.w	r3, r3, #4
 8006a56:	6413      	str	r3, [r2, #64]	; 0x40
 8006a58:	4b13      	ldr	r3, [pc, #76]	; (8006aa8 <HAL_TIM_Encoder_MspInit+0x124>)
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a64:	2300      	movs	r3, #0
 8006a66:	60bb      	str	r3, [r7, #8]
 8006a68:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <HAL_TIM_Encoder_MspInit+0x124>)
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6c:	4a0e      	ldr	r2, [pc, #56]	; (8006aa8 <HAL_TIM_Encoder_MspInit+0x124>)
 8006a6e:	f043 0302 	orr.w	r3, r3, #2
 8006a72:	6313      	str	r3, [r2, #48]	; 0x30
 8006a74:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <HAL_TIM_Encoder_MspInit+0x124>)
 8006a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	60bb      	str	r3, [r7, #8]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderC1_Pin|EncoderC2_Pin;
 8006a80:	23c0      	movs	r3, #192	; 0xc0
 8006a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a84:	2302      	movs	r3, #2
 8006a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006a90:	2302      	movs	r3, #2
 8006a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a94:	f107 031c 	add.w	r3, r7, #28
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4805      	ldr	r0, [pc, #20]	; (8006ab0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006a9c:	f000 fc72 	bl	8007384 <HAL_GPIO_Init>
}
 8006aa0:	bf00      	nop
 8006aa2:	3730      	adds	r7, #48	; 0x30
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	40020000 	.word	0x40020000
 8006ab0:	40020400 	.word	0x40020400
 8006ab4:	40000800 	.word	0x40000800

08006ab8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08a      	sub	sp, #40	; 0x28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ac0:	f107 0314 	add.w	r3, r7, #20
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	605a      	str	r2, [r3, #4]
 8006aca:	609a      	str	r2, [r3, #8]
 8006acc:	60da      	str	r2, [r3, #12]
 8006ace:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1d      	ldr	r2, [pc, #116]	; (8006b4c <HAL_TIM_IC_MspInit+0x94>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d133      	bne.n	8006b42 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006ada:	2300      	movs	r3, #0
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	4b1c      	ldr	r3, [pc, #112]	; (8006b50 <HAL_TIM_IC_MspInit+0x98>)
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	4a1b      	ldr	r2, [pc, #108]	; (8006b50 <HAL_TIM_IC_MspInit+0x98>)
 8006ae4:	f043 0302 	orr.w	r3, r3, #2
 8006ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8006aea:	4b19      	ldr	r3, [pc, #100]	; (8006b50 <HAL_TIM_IC_MspInit+0x98>)
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	4b15      	ldr	r3, [pc, #84]	; (8006b50 <HAL_TIM_IC_MspInit+0x98>)
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	4a14      	ldr	r2, [pc, #80]	; (8006b50 <HAL_TIM_IC_MspInit+0x98>)
 8006b00:	f043 0302 	orr.w	r3, r3, #2
 8006b04:	6313      	str	r3, [r2, #48]	; 0x30
 8006b06:	4b12      	ldr	r3, [pc, #72]	; (8006b50 <HAL_TIM_IC_MspInit+0x98>)
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = UltraSensor_Echo_Pin;
 8006b12:	2310      	movs	r3, #16
 8006b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b16:	2302      	movs	r3, #2
 8006b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006b22:	2302      	movs	r3, #2
 8006b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(UltraSensor_Echo_GPIO_Port, &GPIO_InitStruct);
 8006b26:	f107 0314 	add.w	r3, r7, #20
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4809      	ldr	r0, [pc, #36]	; (8006b54 <HAL_TIM_IC_MspInit+0x9c>)
 8006b2e:	f000 fc29 	bl	8007384 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8006b32:	2200      	movs	r2, #0
 8006b34:	2105      	movs	r1, #5
 8006b36:	201d      	movs	r0, #29
 8006b38:	f000 fb4d 	bl	80071d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006b3c:	201d      	movs	r0, #29
 8006b3e:	f000 fb66 	bl	800720e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006b42:	bf00      	nop
 8006b44:	3728      	adds	r7, #40	; 0x28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	40000400 	.word	0x40000400
 8006b50:	40023800 	.word	0x40023800
 8006b54:	40020400 	.word	0x40020400

08006b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b60:	f107 030c 	add.w	r3, r7, #12
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	605a      	str	r2, [r3, #4]
 8006b6a:	609a      	str	r2, [r3, #8]
 8006b6c:	60da      	str	r2, [r3, #12]
 8006b6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a12      	ldr	r2, [pc, #72]	; (8006bc0 <HAL_TIM_MspPostInit+0x68>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d11e      	bne.n	8006bb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60bb      	str	r3, [r7, #8]
 8006b7e:	4b11      	ldr	r3, [pc, #68]	; (8006bc4 <HAL_TIM_MspPostInit+0x6c>)
 8006b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b82:	4a10      	ldr	r2, [pc, #64]	; (8006bc4 <HAL_TIM_MspPostInit+0x6c>)
 8006b84:	f043 0310 	orr.w	r3, r3, #16
 8006b88:	6313      	str	r3, [r2, #48]	; 0x30
 8006b8a:	4b0e      	ldr	r3, [pc, #56]	; (8006bc4 <HAL_TIM_MspPostInit+0x6c>)
 8006b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8e:	f003 0310 	and.w	r3, r3, #16
 8006b92:	60bb      	str	r3, [r7, #8]
 8006b94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8006b96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8006bac:	f107 030c 	add.w	r3, r7, #12
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4805      	ldr	r0, [pc, #20]	; (8006bc8 <HAL_TIM_MspPostInit+0x70>)
 8006bb4:	f000 fbe6 	bl	8007384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006bb8:	bf00      	nop
 8006bba:	3720      	adds	r7, #32
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	40010000 	.word	0x40010000
 8006bc4:	40023800 	.word	0x40023800
 8006bc8:	40021000 	.word	0x40021000

08006bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08a      	sub	sp, #40	; 0x28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bd4:	f107 0314 	add.w	r3, r7, #20
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	605a      	str	r2, [r3, #4]
 8006bde:	609a      	str	r2, [r3, #8]
 8006be0:	60da      	str	r2, [r3, #12]
 8006be2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a1d      	ldr	r2, [pc, #116]	; (8006c60 <HAL_UART_MspInit+0x94>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d134      	bne.n	8006c58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006bee:	2300      	movs	r3, #0
 8006bf0:	613b      	str	r3, [r7, #16]
 8006bf2:	4b1c      	ldr	r3, [pc, #112]	; (8006c64 <HAL_UART_MspInit+0x98>)
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	4a1b      	ldr	r2, [pc, #108]	; (8006c64 <HAL_UART_MspInit+0x98>)
 8006bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8006bfe:	4b19      	ldr	r3, [pc, #100]	; (8006c64 <HAL_UART_MspInit+0x98>)
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c06:	613b      	str	r3, [r7, #16]
 8006c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	4b15      	ldr	r3, [pc, #84]	; (8006c64 <HAL_UART_MspInit+0x98>)
 8006c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c12:	4a14      	ldr	r2, [pc, #80]	; (8006c64 <HAL_UART_MspInit+0x98>)
 8006c14:	f043 0304 	orr.w	r3, r3, #4
 8006c18:	6313      	str	r3, [r2, #48]	; 0x30
 8006c1a:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <HAL_UART_MspInit+0x98>)
 8006c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1e:	f003 0304 	and.w	r3, r3, #4
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006c26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c34:	2303      	movs	r3, #3
 8006c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006c38:	2307      	movs	r3, #7
 8006c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c3c:	f107 0314 	add.w	r3, r7, #20
 8006c40:	4619      	mov	r1, r3
 8006c42:	4809      	ldr	r0, [pc, #36]	; (8006c68 <HAL_UART_MspInit+0x9c>)
 8006c44:	f000 fb9e 	bl	8007384 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2105      	movs	r1, #5
 8006c4c:	2027      	movs	r0, #39	; 0x27
 8006c4e:	f000 fac2 	bl	80071d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006c52:	2027      	movs	r0, #39	; 0x27
 8006c54:	f000 fadb 	bl	800720e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006c58:	bf00      	nop
 8006c5a:	3728      	adds	r7, #40	; 0x28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	40004800 	.word	0x40004800
 8006c64:	40023800 	.word	0x40023800
 8006c68:	40020800 	.word	0x40020800

08006c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006c70:	e7fe      	b.n	8006c70 <NMI_Handler+0x4>

08006c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c72:	b480      	push	{r7}
 8006c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c76:	e7fe      	b.n	8006c76 <HardFault_Handler+0x4>

08006c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c7c:	e7fe      	b.n	8006c7c <MemManage_Handler+0x4>

08006c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c82:	e7fe      	b.n	8006c82 <BusFault_Handler+0x4>

08006c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c88:	e7fe      	b.n	8006c88 <UsageFault_Handler+0x4>

08006c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006c8e:	bf00      	nop
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006c9c:	f000 f97c 	bl	8006f98 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006ca0:	f008 f82e 	bl	800ed00 <xTaskGetSchedulerState>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d001      	beq.n	8006cae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006caa:	f008 fe15 	bl	800f8d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006cae:	bf00      	nop
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006cb8:	4802      	ldr	r0, [pc, #8]	; (8006cc4 <TIM3_IRQHandler+0x10>)
 8006cba:	f004 f929 	bl	800af10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006cbe:	bf00      	nop
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	200002e8 	.word	0x200002e8

08006cc8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006ccc:	4802      	ldr	r0, [pc, #8]	; (8006cd8 <I2C1_EV_IRQHandler+0x10>)
 8006cce:	f001 f991 	bl	8007ff4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006cd2:	bf00      	nop
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000204 	.word	0x20000204

08006cdc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006ce0:	4802      	ldr	r0, [pc, #8]	; (8006cec <USART3_IRQHandler+0x10>)
 8006ce2:	f005 fadb 	bl	800c29c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006ce6:	bf00      	nop
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	200003c0 	.word	0x200003c0

08006cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
	return 1;
 8006cf4:	2301      	movs	r3, #1
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <_kill>:

int _kill(int pid, int sig)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006d0a:	f009 f85f 	bl	800fdcc <__errno>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2216      	movs	r2, #22
 8006d12:	601a      	str	r2, [r3, #0]
	return -1;
 8006d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <_exit>:

void _exit (int status)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006d28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff ffe7 	bl	8006d00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006d32:	e7fe      	b.n	8006d32 <_exit+0x12>

08006d34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d40:	2300      	movs	r3, #0
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	e00a      	b.n	8006d5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006d46:	f3af 8000 	nop.w
 8006d4a:	4601      	mov	r1, r0
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	60ba      	str	r2, [r7, #8]
 8006d52:	b2ca      	uxtb	r2, r1
 8006d54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	dbf0      	blt.n	8006d46 <_read+0x12>
	}

return len;
 8006d64:	687b      	ldr	r3, [r7, #4]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b086      	sub	sp, #24
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	e009      	b.n	8006d94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	60ba      	str	r2, [r7, #8]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	3301      	adds	r3, #1
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	dbf1      	blt.n	8006d80 <_write+0x12>
	}
	return len;
 8006d9c:	687b      	ldr	r3, [r7, #4]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <_close>:

int _close(int file)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
	return -1;
 8006dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006dce:	605a      	str	r2, [r3, #4]
	return 0;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <_isatty>:

int _isatty(int file)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
	return 1;
 8006de6:	2301      	movs	r3, #1
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
	return 0;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
	...

08006e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006e18:	4a14      	ldr	r2, [pc, #80]	; (8006e6c <_sbrk+0x5c>)
 8006e1a:	4b15      	ldr	r3, [pc, #84]	; (8006e70 <_sbrk+0x60>)
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006e24:	4b13      	ldr	r3, [pc, #76]	; (8006e74 <_sbrk+0x64>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d102      	bne.n	8006e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006e2c:	4b11      	ldr	r3, [pc, #68]	; (8006e74 <_sbrk+0x64>)
 8006e2e:	4a12      	ldr	r2, [pc, #72]	; (8006e78 <_sbrk+0x68>)
 8006e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006e32:	4b10      	ldr	r3, [pc, #64]	; (8006e74 <_sbrk+0x64>)
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4413      	add	r3, r2
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d207      	bcs.n	8006e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006e40:	f008 ffc4 	bl	800fdcc <__errno>
 8006e44:	4603      	mov	r3, r0
 8006e46:	220c      	movs	r2, #12
 8006e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e4e:	e009      	b.n	8006e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006e50:	4b08      	ldr	r3, [pc, #32]	; (8006e74 <_sbrk+0x64>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006e56:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <_sbrk+0x64>)
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	4a05      	ldr	r2, [pc, #20]	; (8006e74 <_sbrk+0x64>)
 8006e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006e62:	68fb      	ldr	r3, [r7, #12]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20020000 	.word	0x20020000
 8006e70:	00000400 	.word	0x00000400
 8006e74:	20000860 	.word	0x20000860
 8006e78:	200063c8 	.word	0x200063c8

08006e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006e80:	4b06      	ldr	r3, [pc, #24]	; (8006e9c <SystemInit+0x20>)
 8006e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e86:	4a05      	ldr	r2, [pc, #20]	; (8006e9c <SystemInit+0x20>)
 8006e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006e90:	bf00      	nop
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	e000ed00 	.word	0xe000ed00

08006ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006ea4:	480d      	ldr	r0, [pc, #52]	; (8006edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006ea6:	490e      	ldr	r1, [pc, #56]	; (8006ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006ea8:	4a0e      	ldr	r2, [pc, #56]	; (8006ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006eac:	e002      	b.n	8006eb4 <LoopCopyDataInit>

08006eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006eb2:	3304      	adds	r3, #4

08006eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006eb8:	d3f9      	bcc.n	8006eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006eba:	4a0b      	ldr	r2, [pc, #44]	; (8006ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006ebc:	4c0b      	ldr	r4, [pc, #44]	; (8006eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8006ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ec0:	e001      	b.n	8006ec6 <LoopFillZerobss>

08006ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ec4:	3204      	adds	r2, #4

08006ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ec8:	d3fb      	bcc.n	8006ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006eca:	f7ff ffd7 	bl	8006e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ece:	f008 ff83 	bl	800fdd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ed2:	f7fa f891 	bl	8000ff8 <main>
  bx  lr    
 8006ed6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ee0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8006ee4:	080157bc 	.word	0x080157bc
  ldr r2, =_sbss
 8006ee8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8006eec:	200063c8 	.word	0x200063c8

08006ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006ef0:	e7fe      	b.n	8006ef0 <ADC_IRQHandler>
	...

08006ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ef8:	4b0e      	ldr	r3, [pc, #56]	; (8006f34 <HAL_Init+0x40>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a0d      	ldr	r2, [pc, #52]	; (8006f34 <HAL_Init+0x40>)
 8006efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006f04:	4b0b      	ldr	r3, [pc, #44]	; (8006f34 <HAL_Init+0x40>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a0a      	ldr	r2, [pc, #40]	; (8006f34 <HAL_Init+0x40>)
 8006f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f10:	4b08      	ldr	r3, [pc, #32]	; (8006f34 <HAL_Init+0x40>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a07      	ldr	r2, [pc, #28]	; (8006f34 <HAL_Init+0x40>)
 8006f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f1c:	2003      	movs	r0, #3
 8006f1e:	f000 f94f 	bl	80071c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f22:	200f      	movs	r0, #15
 8006f24:	f000 f808 	bl	8006f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006f28:	f7ff fc52 	bl	80067d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	40023c00 	.word	0x40023c00

08006f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006f40:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <HAL_InitTick+0x54>)
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	4b12      	ldr	r3, [pc, #72]	; (8006f90 <HAL_InitTick+0x58>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 f967 	bl	800722a <HAL_SYSTICK_Config>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e00e      	b.n	8006f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b0f      	cmp	r3, #15
 8006f6a:	d80a      	bhi.n	8006f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	6879      	ldr	r1, [r7, #4]
 8006f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f74:	f000 f92f 	bl	80071d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006f78:	4a06      	ldr	r2, [pc, #24]	; (8006f94 <HAL_InitTick+0x5c>)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e000      	b.n	8006f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20000004 	.word	0x20000004
 8006f90:	2000000c 	.word	0x2000000c
 8006f94:	20000008 	.word	0x20000008

08006f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f9c:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <HAL_IncTick+0x20>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <HAL_IncTick+0x24>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	4a04      	ldr	r2, [pc, #16]	; (8006fbc <HAL_IncTick+0x24>)
 8006faa:	6013      	str	r3, [r2, #0]
}
 8006fac:	bf00      	nop
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	2000000c 	.word	0x2000000c
 8006fbc:	20000864 	.word	0x20000864

08006fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8006fc4:	4b03      	ldr	r3, [pc, #12]	; (8006fd4 <HAL_GetTick+0x14>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	20000864 	.word	0x20000864

08006fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006fe0:	f7ff ffee 	bl	8006fc0 <HAL_GetTick>
 8006fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ff0:	d005      	beq.n	8006ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ff2:	4b0a      	ldr	r3, [pc, #40]	; (800701c <HAL_Delay+0x44>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006ffe:	bf00      	nop
 8007000:	f7ff ffde 	bl	8006fc0 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	429a      	cmp	r2, r3
 800700e:	d8f7      	bhi.n	8007000 <HAL_Delay+0x28>
  {
  }
}
 8007010:	bf00      	nop
 8007012:	bf00      	nop
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	2000000c 	.word	0x2000000c

08007020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007030:	4b0c      	ldr	r3, [pc, #48]	; (8007064 <__NVIC_SetPriorityGrouping+0x44>)
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800703c:	4013      	ands	r3, r2
 800703e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800704c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007052:	4a04      	ldr	r2, [pc, #16]	; (8007064 <__NVIC_SetPriorityGrouping+0x44>)
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	60d3      	str	r3, [r2, #12]
}
 8007058:	bf00      	nop
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	e000ed00 	.word	0xe000ed00

08007068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800706c:	4b04      	ldr	r3, [pc, #16]	; (8007080 <__NVIC_GetPriorityGrouping+0x18>)
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	0a1b      	lsrs	r3, r3, #8
 8007072:	f003 0307 	and.w	r3, r3, #7
}
 8007076:	4618      	mov	r0, r3
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	e000ed00 	.word	0xe000ed00

08007084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	4603      	mov	r3, r0
 800708c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800708e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007092:	2b00      	cmp	r3, #0
 8007094:	db0b      	blt.n	80070ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	f003 021f 	and.w	r2, r3, #31
 800709c:	4907      	ldr	r1, [pc, #28]	; (80070bc <__NVIC_EnableIRQ+0x38>)
 800709e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070a2:	095b      	lsrs	r3, r3, #5
 80070a4:	2001      	movs	r0, #1
 80070a6:	fa00 f202 	lsl.w	r2, r0, r2
 80070aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	e000e100 	.word	0xe000e100

080070c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	db0a      	blt.n	80070ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	490c      	ldr	r1, [pc, #48]	; (800710c <__NVIC_SetPriority+0x4c>)
 80070da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070de:	0112      	lsls	r2, r2, #4
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	440b      	add	r3, r1
 80070e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80070e8:	e00a      	b.n	8007100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	4908      	ldr	r1, [pc, #32]	; (8007110 <__NVIC_SetPriority+0x50>)
 80070f0:	79fb      	ldrb	r3, [r7, #7]
 80070f2:	f003 030f 	and.w	r3, r3, #15
 80070f6:	3b04      	subs	r3, #4
 80070f8:	0112      	lsls	r2, r2, #4
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	440b      	add	r3, r1
 80070fe:	761a      	strb	r2, [r3, #24]
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	e000e100 	.word	0xe000e100
 8007110:	e000ed00 	.word	0xe000ed00

08007114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007114:	b480      	push	{r7}
 8007116:	b089      	sub	sp, #36	; 0x24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	f1c3 0307 	rsb	r3, r3, #7
 800712e:	2b04      	cmp	r3, #4
 8007130:	bf28      	it	cs
 8007132:	2304      	movcs	r3, #4
 8007134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	3304      	adds	r3, #4
 800713a:	2b06      	cmp	r3, #6
 800713c:	d902      	bls.n	8007144 <NVIC_EncodePriority+0x30>
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	3b03      	subs	r3, #3
 8007142:	e000      	b.n	8007146 <NVIC_EncodePriority+0x32>
 8007144:	2300      	movs	r3, #0
 8007146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	fa02 f303 	lsl.w	r3, r2, r3
 8007152:	43da      	mvns	r2, r3
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	401a      	ands	r2, r3
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800715c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	fa01 f303 	lsl.w	r3, r1, r3
 8007166:	43d9      	mvns	r1, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800716c:	4313      	orrs	r3, r2
         );
}
 800716e:	4618      	mov	r0, r3
 8007170:	3724      	adds	r7, #36	; 0x24
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
	...

0800717c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3b01      	subs	r3, #1
 8007188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800718c:	d301      	bcc.n	8007192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800718e:	2301      	movs	r3, #1
 8007190:	e00f      	b.n	80071b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007192:	4a0a      	ldr	r2, [pc, #40]	; (80071bc <SysTick_Config+0x40>)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3b01      	subs	r3, #1
 8007198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800719a:	210f      	movs	r1, #15
 800719c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071a0:	f7ff ff8e 	bl	80070c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071a4:	4b05      	ldr	r3, [pc, #20]	; (80071bc <SysTick_Config+0x40>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071aa:	4b04      	ldr	r3, [pc, #16]	; (80071bc <SysTick_Config+0x40>)
 80071ac:	2207      	movs	r2, #7
 80071ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	e000e010 	.word	0xe000e010

080071c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7ff ff29 	bl	8007020 <__NVIC_SetPriorityGrouping>
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b086      	sub	sp, #24
 80071da:	af00      	add	r7, sp, #0
 80071dc:	4603      	mov	r3, r0
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	607a      	str	r2, [r7, #4]
 80071e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80071e8:	f7ff ff3e 	bl	8007068 <__NVIC_GetPriorityGrouping>
 80071ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	6978      	ldr	r0, [r7, #20]
 80071f4:	f7ff ff8e 	bl	8007114 <NVIC_EncodePriority>
 80071f8:	4602      	mov	r2, r0
 80071fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071fe:	4611      	mov	r1, r2
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff ff5d 	bl	80070c0 <__NVIC_SetPriority>
}
 8007206:	bf00      	nop
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	4603      	mov	r3, r0
 8007216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff ff31 	bl	8007084 <__NVIC_EnableIRQ>
}
 8007222:	bf00      	nop
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b082      	sub	sp, #8
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7ff ffa2 	bl	800717c <SysTick_Config>
 8007238:	4603      	mov	r3, r0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007250:	f7ff feb6 	bl	8006fc0 <HAL_GetTick>
 8007254:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b02      	cmp	r3, #2
 8007260:	d008      	beq.n	8007274 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2280      	movs	r2, #128	; 0x80
 8007266:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e052      	b.n	800731a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 0216 	bic.w	r2, r2, #22
 8007282:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695a      	ldr	r2, [r3, #20]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007292:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007298:	2b00      	cmp	r3, #0
 800729a:	d103      	bne.n	80072a4 <HAL_DMA_Abort+0x62>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d007      	beq.n	80072b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 0208 	bic.w	r2, r2, #8
 80072b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0201 	bic.w	r2, r2, #1
 80072c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072c4:	e013      	b.n	80072ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072c6:	f7ff fe7b 	bl	8006fc0 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b05      	cmp	r3, #5
 80072d2:	d90c      	bls.n	80072ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2220      	movs	r2, #32
 80072d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2203      	movs	r2, #3
 80072de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e015      	b.n	800731a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e4      	bne.n	80072c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007300:	223f      	movs	r2, #63	; 0x3f
 8007302:	409a      	lsls	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d004      	beq.n	8007340 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2280      	movs	r2, #128	; 0x80
 800733a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e00c      	b.n	800735a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2205      	movs	r2, #5
 8007344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0201 	bic.w	r2, r2, #1
 8007356:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007374:	b2db      	uxtb	r3, r3
}
 8007376:	4618      	mov	r0, r3
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
	...

08007384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007384:	b480      	push	{r7}
 8007386:	b089      	sub	sp, #36	; 0x24
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007392:	2300      	movs	r3, #0
 8007394:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007396:	2300      	movs	r3, #0
 8007398:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800739a:	2300      	movs	r3, #0
 800739c:	61fb      	str	r3, [r7, #28]
 800739e:	e16b      	b.n	8007678 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80073a0:	2201      	movs	r2, #1
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	fa02 f303 	lsl.w	r3, r2, r3
 80073a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	4013      	ands	r3, r2
 80073b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	f040 815a 	bne.w	8007672 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f003 0303 	and.w	r3, r3, #3
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d005      	beq.n	80073d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d130      	bne.n	8007438 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	2203      	movs	r2, #3
 80073e2:	fa02 f303 	lsl.w	r3, r2, r3
 80073e6:	43db      	mvns	r3, r3
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	4013      	ands	r3, r2
 80073ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	fa02 f303 	lsl.w	r3, r2, r3
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800740c:	2201      	movs	r2, #1
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	fa02 f303 	lsl.w	r3, r2, r3
 8007414:	43db      	mvns	r3, r3
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	4013      	ands	r3, r2
 800741a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	091b      	lsrs	r3, r3, #4
 8007422:	f003 0201 	and.w	r2, r3, #1
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	fa02 f303 	lsl.w	r3, r2, r3
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	4313      	orrs	r3, r2
 8007430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f003 0303 	and.w	r3, r3, #3
 8007440:	2b03      	cmp	r3, #3
 8007442:	d017      	beq.n	8007474 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	2203      	movs	r2, #3
 8007450:	fa02 f303 	lsl.w	r3, r2, r3
 8007454:	43db      	mvns	r3, r3
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	4013      	ands	r3, r2
 800745a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	fa02 f303 	lsl.w	r3, r2, r3
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	4313      	orrs	r3, r2
 800746c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f003 0303 	and.w	r3, r3, #3
 800747c:	2b02      	cmp	r3, #2
 800747e:	d123      	bne.n	80074c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	08da      	lsrs	r2, r3, #3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3208      	adds	r2, #8
 8007488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	f003 0307 	and.w	r3, r3, #7
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	220f      	movs	r2, #15
 8007498:	fa02 f303 	lsl.w	r3, r2, r3
 800749c:	43db      	mvns	r3, r3
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	4013      	ands	r3, r2
 80074a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	691a      	ldr	r2, [r3, #16]
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	f003 0307 	and.w	r3, r3, #7
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	fa02 f303 	lsl.w	r3, r2, r3
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	08da      	lsrs	r2, r3, #3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3208      	adds	r2, #8
 80074c2:	69b9      	ldr	r1, [r7, #24]
 80074c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	2203      	movs	r2, #3
 80074d4:	fa02 f303 	lsl.w	r3, r2, r3
 80074d8:	43db      	mvns	r3, r3
 80074da:	69ba      	ldr	r2, [r7, #24]
 80074dc:	4013      	ands	r3, r2
 80074de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f003 0203 	and.w	r2, r3, #3
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	fa02 f303 	lsl.w	r3, r2, r3
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 80b4 	beq.w	8007672 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800750a:	2300      	movs	r3, #0
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	4b60      	ldr	r3, [pc, #384]	; (8007690 <HAL_GPIO_Init+0x30c>)
 8007510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007512:	4a5f      	ldr	r2, [pc, #380]	; (8007690 <HAL_GPIO_Init+0x30c>)
 8007514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007518:	6453      	str	r3, [r2, #68]	; 0x44
 800751a:	4b5d      	ldr	r3, [pc, #372]	; (8007690 <HAL_GPIO_Init+0x30c>)
 800751c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007526:	4a5b      	ldr	r2, [pc, #364]	; (8007694 <HAL_GPIO_Init+0x310>)
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	089b      	lsrs	r3, r3, #2
 800752c:	3302      	adds	r3, #2
 800752e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	220f      	movs	r2, #15
 800753e:	fa02 f303 	lsl.w	r3, r2, r3
 8007542:	43db      	mvns	r3, r3
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	4013      	ands	r3, r2
 8007548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a52      	ldr	r2, [pc, #328]	; (8007698 <HAL_GPIO_Init+0x314>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d02b      	beq.n	80075aa <HAL_GPIO_Init+0x226>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a51      	ldr	r2, [pc, #324]	; (800769c <HAL_GPIO_Init+0x318>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d025      	beq.n	80075a6 <HAL_GPIO_Init+0x222>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a50      	ldr	r2, [pc, #320]	; (80076a0 <HAL_GPIO_Init+0x31c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d01f      	beq.n	80075a2 <HAL_GPIO_Init+0x21e>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a4f      	ldr	r2, [pc, #316]	; (80076a4 <HAL_GPIO_Init+0x320>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d019      	beq.n	800759e <HAL_GPIO_Init+0x21a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a4e      	ldr	r2, [pc, #312]	; (80076a8 <HAL_GPIO_Init+0x324>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d013      	beq.n	800759a <HAL_GPIO_Init+0x216>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a4d      	ldr	r2, [pc, #308]	; (80076ac <HAL_GPIO_Init+0x328>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d00d      	beq.n	8007596 <HAL_GPIO_Init+0x212>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a4c      	ldr	r2, [pc, #304]	; (80076b0 <HAL_GPIO_Init+0x32c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d007      	beq.n	8007592 <HAL_GPIO_Init+0x20e>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a4b      	ldr	r2, [pc, #300]	; (80076b4 <HAL_GPIO_Init+0x330>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d101      	bne.n	800758e <HAL_GPIO_Init+0x20a>
 800758a:	2307      	movs	r3, #7
 800758c:	e00e      	b.n	80075ac <HAL_GPIO_Init+0x228>
 800758e:	2308      	movs	r3, #8
 8007590:	e00c      	b.n	80075ac <HAL_GPIO_Init+0x228>
 8007592:	2306      	movs	r3, #6
 8007594:	e00a      	b.n	80075ac <HAL_GPIO_Init+0x228>
 8007596:	2305      	movs	r3, #5
 8007598:	e008      	b.n	80075ac <HAL_GPIO_Init+0x228>
 800759a:	2304      	movs	r3, #4
 800759c:	e006      	b.n	80075ac <HAL_GPIO_Init+0x228>
 800759e:	2303      	movs	r3, #3
 80075a0:	e004      	b.n	80075ac <HAL_GPIO_Init+0x228>
 80075a2:	2302      	movs	r3, #2
 80075a4:	e002      	b.n	80075ac <HAL_GPIO_Init+0x228>
 80075a6:	2301      	movs	r3, #1
 80075a8:	e000      	b.n	80075ac <HAL_GPIO_Init+0x228>
 80075aa:	2300      	movs	r3, #0
 80075ac:	69fa      	ldr	r2, [r7, #28]
 80075ae:	f002 0203 	and.w	r2, r2, #3
 80075b2:	0092      	lsls	r2, r2, #2
 80075b4:	4093      	lsls	r3, r2
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075bc:	4935      	ldr	r1, [pc, #212]	; (8007694 <HAL_GPIO_Init+0x310>)
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	089b      	lsrs	r3, r3, #2
 80075c2:	3302      	adds	r3, #2
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80075ca:	4b3b      	ldr	r3, [pc, #236]	; (80076b8 <HAL_GPIO_Init+0x334>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	43db      	mvns	r3, r3
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	4013      	ands	r3, r2
 80075d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80075ee:	4a32      	ldr	r2, [pc, #200]	; (80076b8 <HAL_GPIO_Init+0x334>)
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80075f4:	4b30      	ldr	r3, [pc, #192]	; (80076b8 <HAL_GPIO_Init+0x334>)
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	43db      	mvns	r3, r3
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	4013      	ands	r3, r2
 8007602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d003      	beq.n	8007618 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007618:	4a27      	ldr	r2, [pc, #156]	; (80076b8 <HAL_GPIO_Init+0x334>)
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800761e:	4b26      	ldr	r3, [pc, #152]	; (80076b8 <HAL_GPIO_Init+0x334>)
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	43db      	mvns	r3, r3
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	4013      	ands	r3, r2
 800762c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	4313      	orrs	r3, r2
 8007640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007642:	4a1d      	ldr	r2, [pc, #116]	; (80076b8 <HAL_GPIO_Init+0x334>)
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007648:	4b1b      	ldr	r3, [pc, #108]	; (80076b8 <HAL_GPIO_Init+0x334>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	43db      	mvns	r3, r3
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	4013      	ands	r3, r2
 8007656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d003      	beq.n	800766c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	4313      	orrs	r3, r2
 800766a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800766c:	4a12      	ldr	r2, [pc, #72]	; (80076b8 <HAL_GPIO_Init+0x334>)
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	3301      	adds	r3, #1
 8007676:	61fb      	str	r3, [r7, #28]
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	2b0f      	cmp	r3, #15
 800767c:	f67f ae90 	bls.w	80073a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	3724      	adds	r7, #36	; 0x24
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	40023800 	.word	0x40023800
 8007694:	40013800 	.word	0x40013800
 8007698:	40020000 	.word	0x40020000
 800769c:	40020400 	.word	0x40020400
 80076a0:	40020800 	.word	0x40020800
 80076a4:	40020c00 	.word	0x40020c00
 80076a8:	40021000 	.word	0x40021000
 80076ac:	40021400 	.word	0x40021400
 80076b0:	40021800 	.word	0x40021800
 80076b4:	40021c00 	.word	0x40021c00
 80076b8:	40013c00 	.word	0x40013c00

080076bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	807b      	strh	r3, [r7, #2]
 80076c8:	4613      	mov	r3, r2
 80076ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80076cc:	787b      	ldrb	r3, [r7, #1]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80076d2:	887a      	ldrh	r2, [r7, #2]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80076d8:	e003      	b.n	80076e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80076da:	887b      	ldrh	r3, [r7, #2]
 80076dc:	041a      	lsls	r2, r3, #16
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	619a      	str	r2, [r3, #24]
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b085      	sub	sp, #20
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	460b      	mov	r3, r1
 80076f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007700:	887a      	ldrh	r2, [r7, #2]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	4013      	ands	r3, r2
 8007706:	041a      	lsls	r2, r3, #16
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	43d9      	mvns	r1, r3
 800770c:	887b      	ldrh	r3, [r7, #2]
 800770e:	400b      	ands	r3, r1
 8007710:	431a      	orrs	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	619a      	str	r2, [r3, #24]
}
 8007716:	bf00      	nop
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
	...

08007724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e12b      	b.n	800798e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d106      	bne.n	8007750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7ff f86c 	bl	8006828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2224      	movs	r2, #36	; 0x24
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0201 	bic.w	r2, r2, #1
 8007766:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007776:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007786:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007788:	f002 ff7e 	bl	800a688 <HAL_RCC_GetPCLK1Freq>
 800778c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	4a81      	ldr	r2, [pc, #516]	; (8007998 <HAL_I2C_Init+0x274>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d807      	bhi.n	80077a8 <HAL_I2C_Init+0x84>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4a80      	ldr	r2, [pc, #512]	; (800799c <HAL_I2C_Init+0x278>)
 800779c:	4293      	cmp	r3, r2
 800779e:	bf94      	ite	ls
 80077a0:	2301      	movls	r3, #1
 80077a2:	2300      	movhi	r3, #0
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	e006      	b.n	80077b6 <HAL_I2C_Init+0x92>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4a7d      	ldr	r2, [pc, #500]	; (80079a0 <HAL_I2C_Init+0x27c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	bf94      	ite	ls
 80077b0:	2301      	movls	r3, #1
 80077b2:	2300      	movhi	r3, #0
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e0e7      	b.n	800798e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	4a78      	ldr	r2, [pc, #480]	; (80079a4 <HAL_I2C_Init+0x280>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	0c9b      	lsrs	r3, r3, #18
 80077c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	430a      	orrs	r2, r1
 80077dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	4a6a      	ldr	r2, [pc, #424]	; (8007998 <HAL_I2C_Init+0x274>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d802      	bhi.n	80077f8 <HAL_I2C_Init+0xd4>
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	3301      	adds	r3, #1
 80077f6:	e009      	b.n	800780c <HAL_I2C_Init+0xe8>
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80077fe:	fb02 f303 	mul.w	r3, r2, r3
 8007802:	4a69      	ldr	r2, [pc, #420]	; (80079a8 <HAL_I2C_Init+0x284>)
 8007804:	fba2 2303 	umull	r2, r3, r2, r3
 8007808:	099b      	lsrs	r3, r3, #6
 800780a:	3301      	adds	r3, #1
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	6812      	ldr	r2, [r2, #0]
 8007810:	430b      	orrs	r3, r1
 8007812:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800781e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	495c      	ldr	r1, [pc, #368]	; (8007998 <HAL_I2C_Init+0x274>)
 8007828:	428b      	cmp	r3, r1
 800782a:	d819      	bhi.n	8007860 <HAL_I2C_Init+0x13c>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	1e59      	subs	r1, r3, #1
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	fbb1 f3f3 	udiv	r3, r1, r3
 800783a:	1c59      	adds	r1, r3, #1
 800783c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007840:	400b      	ands	r3, r1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <HAL_I2C_Init+0x138>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	1e59      	subs	r1, r3, #1
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	fbb1 f3f3 	udiv	r3, r1, r3
 8007854:	3301      	adds	r3, #1
 8007856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800785a:	e051      	b.n	8007900 <HAL_I2C_Init+0x1dc>
 800785c:	2304      	movs	r3, #4
 800785e:	e04f      	b.n	8007900 <HAL_I2C_Init+0x1dc>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d111      	bne.n	800788c <HAL_I2C_Init+0x168>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	1e58      	subs	r0, r3, #1
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6859      	ldr	r1, [r3, #4]
 8007870:	460b      	mov	r3, r1
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	440b      	add	r3, r1
 8007876:	fbb0 f3f3 	udiv	r3, r0, r3
 800787a:	3301      	adds	r3, #1
 800787c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007880:	2b00      	cmp	r3, #0
 8007882:	bf0c      	ite	eq
 8007884:	2301      	moveq	r3, #1
 8007886:	2300      	movne	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	e012      	b.n	80078b2 <HAL_I2C_Init+0x18e>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	1e58      	subs	r0, r3, #1
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6859      	ldr	r1, [r3, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	440b      	add	r3, r1
 800789a:	0099      	lsls	r1, r3, #2
 800789c:	440b      	add	r3, r1
 800789e:	fbb0 f3f3 	udiv	r3, r0, r3
 80078a2:	3301      	adds	r3, #1
 80078a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	bf0c      	ite	eq
 80078ac:	2301      	moveq	r3, #1
 80078ae:	2300      	movne	r3, #0
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <HAL_I2C_Init+0x196>
 80078b6:	2301      	movs	r3, #1
 80078b8:	e022      	b.n	8007900 <HAL_I2C_Init+0x1dc>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10e      	bne.n	80078e0 <HAL_I2C_Init+0x1bc>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	1e58      	subs	r0, r3, #1
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6859      	ldr	r1, [r3, #4]
 80078ca:	460b      	mov	r3, r1
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	440b      	add	r3, r1
 80078d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80078d4:	3301      	adds	r3, #1
 80078d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078de:	e00f      	b.n	8007900 <HAL_I2C_Init+0x1dc>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	1e58      	subs	r0, r3, #1
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6859      	ldr	r1, [r3, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	440b      	add	r3, r1
 80078ee:	0099      	lsls	r1, r3, #2
 80078f0:	440b      	add	r3, r1
 80078f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80078f6:	3301      	adds	r3, #1
 80078f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007900:	6879      	ldr	r1, [r7, #4]
 8007902:	6809      	ldr	r1, [r1, #0]
 8007904:	4313      	orrs	r3, r2
 8007906:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	69da      	ldr	r2, [r3, #28]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	431a      	orrs	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	430a      	orrs	r2, r1
 8007922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800792e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	6911      	ldr	r1, [r2, #16]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	68d2      	ldr	r2, [r2, #12]
 800793a:	4311      	orrs	r1, r2
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	6812      	ldr	r2, [r2, #0]
 8007940:	430b      	orrs	r3, r1
 8007942:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695a      	ldr	r2, [r3, #20]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	431a      	orrs	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0201 	orr.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	000186a0 	.word	0x000186a0
 800799c:	001e847f 	.word	0x001e847f
 80079a0:	003d08ff 	.word	0x003d08ff
 80079a4:	431bde83 	.word	0x431bde83
 80079a8:	10624dd3 	.word	0x10624dd3

080079ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b088      	sub	sp, #32
 80079b0:	af02      	add	r7, sp, #8
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	607a      	str	r2, [r7, #4]
 80079b6:	461a      	mov	r2, r3
 80079b8:	460b      	mov	r3, r1
 80079ba:	817b      	strh	r3, [r7, #10]
 80079bc:	4613      	mov	r3, r2
 80079be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80079c0:	f7ff fafe 	bl	8006fc0 <HAL_GetTick>
 80079c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b20      	cmp	r3, #32
 80079d0:	f040 80e0 	bne.w	8007b94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	2319      	movs	r3, #25
 80079da:	2201      	movs	r2, #1
 80079dc:	4970      	ldr	r1, [pc, #448]	; (8007ba0 <HAL_I2C_Master_Transmit+0x1f4>)
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f001 ffd0 	bl	8009984 <I2C_WaitOnFlagUntilTimeout>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80079ea:	2302      	movs	r3, #2
 80079ec:	e0d3      	b.n	8007b96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d101      	bne.n	80079fc <HAL_I2C_Master_Transmit+0x50>
 80079f8:	2302      	movs	r3, #2
 80079fa:	e0cc      	b.n	8007b96 <HAL_I2C_Master_Transmit+0x1ea>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d007      	beq.n	8007a22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f042 0201 	orr.w	r2, r2, #1
 8007a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2221      	movs	r2, #33	; 0x21
 8007a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2210      	movs	r2, #16
 8007a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	893a      	ldrh	r2, [r7, #8]
 8007a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	4a50      	ldr	r2, [pc, #320]	; (8007ba4 <HAL_I2C_Master_Transmit+0x1f8>)
 8007a62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007a64:	8979      	ldrh	r1, [r7, #10]
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	6a3a      	ldr	r2, [r7, #32]
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f001 fd92 	bl	8009594 <I2C_MasterRequestWrite>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e08d      	b.n	8007b96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	613b      	str	r3, [r7, #16]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	613b      	str	r3, [r7, #16]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	613b      	str	r3, [r7, #16]
 8007a8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007a90:	e066      	b.n	8007b60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	6a39      	ldr	r1, [r7, #32]
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f002 f84a 	bl	8009b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00d      	beq.n	8007abe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	d107      	bne.n	8007aba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ab8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e06b      	b.n	8007b96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac2:	781a      	ldrb	r2, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	3b01      	subs	r3, #1
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	f003 0304 	and.w	r3, r3, #4
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d11b      	bne.n	8007b34 <HAL_I2C_Master_Transmit+0x188>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d017      	beq.n	8007b34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	781a      	ldrb	r2, [r3, #0]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	6a39      	ldr	r1, [r7, #32]
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f002 f83a 	bl	8009bb2 <I2C_WaitOnBTFFlagUntilTimeout>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00d      	beq.n	8007b60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d107      	bne.n	8007b5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e01a      	b.n	8007b96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d194      	bne.n	8007a92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	e000      	b.n	8007b96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007b94:	2302      	movs	r3, #2
  }
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	00100002 	.word	0x00100002
 8007ba4:	ffff0000 	.word	0xffff0000

08007ba8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08c      	sub	sp, #48	; 0x30
 8007bac:	af02      	add	r7, sp, #8
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	607a      	str	r2, [r7, #4]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	817b      	strh	r3, [r7, #10]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007bbc:	f7ff fa00 	bl	8006fc0 <HAL_GetTick>
 8007bc0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b20      	cmp	r3, #32
 8007bcc:	f040 820b 	bne.w	8007fe6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	2319      	movs	r3, #25
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	497c      	ldr	r1, [pc, #496]	; (8007dcc <HAL_I2C_Master_Receive+0x224>)
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f001 fed2 	bl	8009984 <I2C_WaitOnFlagUntilTimeout>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007be6:	2302      	movs	r3, #2
 8007be8:	e1fe      	b.n	8007fe8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d101      	bne.n	8007bf8 <HAL_I2C_Master_Receive+0x50>
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	e1f7      	b.n	8007fe8 <HAL_I2C_Master_Receive+0x440>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d007      	beq.n	8007c1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f042 0201 	orr.w	r2, r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2222      	movs	r2, #34	; 0x22
 8007c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2210      	movs	r2, #16
 8007c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	893a      	ldrh	r2, [r7, #8]
 8007c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	4a5c      	ldr	r2, [pc, #368]	; (8007dd0 <HAL_I2C_Master_Receive+0x228>)
 8007c5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007c60:	8979      	ldrh	r1, [r7, #10]
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f001 fd16 	bl	8009698 <I2C_MasterRequestRead>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d001      	beq.n	8007c76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e1b8      	b.n	8007fe8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d113      	bne.n	8007ca6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c7e:	2300      	movs	r3, #0
 8007c80:	623b      	str	r3, [r7, #32]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	623b      	str	r3, [r7, #32]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	623b      	str	r3, [r7, #32]
 8007c92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	e18c      	b.n	8007fc0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d11b      	bne.n	8007ce6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	61fb      	str	r3, [r7, #28]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	61fb      	str	r3, [r7, #28]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	61fb      	str	r3, [r7, #28]
 8007cd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	e16c      	b.n	8007fc0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d11b      	bne.n	8007d26 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cfc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d0e:	2300      	movs	r3, #0
 8007d10:	61bb      	str	r3, [r7, #24]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	61bb      	str	r3, [r7, #24]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	61bb      	str	r3, [r7, #24]
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	e14c      	b.n	8007fc0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d36:	2300      	movs	r3, #0
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	617b      	str	r3, [r7, #20]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007d4c:	e138      	b.n	8007fc0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	f200 80f1 	bhi.w	8007f3a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d123      	bne.n	8007da8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f001 ff97 	bl	8009c98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e139      	b.n	8007fe8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	691a      	ldr	r2, [r3, #16]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	b2d2      	uxtb	r2, r2
 8007d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d90:	3b01      	subs	r3, #1
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007da6:	e10b      	b.n	8007fc0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d14e      	bne.n	8007e4e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	2200      	movs	r2, #0
 8007db8:	4906      	ldr	r1, [pc, #24]	; (8007dd4 <HAL_I2C_Master_Receive+0x22c>)
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f001 fde2 	bl	8009984 <I2C_WaitOnFlagUntilTimeout>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d008      	beq.n	8007dd8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e10e      	b.n	8007fe8 <HAL_I2C_Master_Receive+0x440>
 8007dca:	bf00      	nop
 8007dcc:	00100002 	.word	0x00100002
 8007dd0:	ffff0000 	.word	0xffff0000
 8007dd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007de6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	691a      	ldr	r2, [r3, #16]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	b2d2      	uxtb	r2, r2
 8007df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e04:	3b01      	subs	r3, #1
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	3b01      	subs	r3, #1
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	691a      	ldr	r2, [r3, #16]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e4c:	e0b8      	b.n	8007fc0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	2200      	movs	r2, #0
 8007e56:	4966      	ldr	r1, [pc, #408]	; (8007ff0 <HAL_I2C_Master_Receive+0x448>)
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f001 fd93 	bl	8009984 <I2C_WaitOnFlagUntilTimeout>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e0bf      	b.n	8007fe8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	691a      	ldr	r2, [r3, #16]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	b2d2      	uxtb	r2, r2
 8007e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	1c5a      	adds	r2, r3, #1
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e94:	3b01      	subs	r3, #1
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	494f      	ldr	r1, [pc, #316]	; (8007ff0 <HAL_I2C_Master_Receive+0x448>)
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f001 fd65 	bl	8009984 <I2C_WaitOnFlagUntilTimeout>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e091      	b.n	8007fe8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ed2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691a      	ldr	r2, [r3, #16]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	3b01      	subs	r3, #1
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	691a      	ldr	r2, [r3, #16]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f10:	b2d2      	uxtb	r2, r2
 8007f12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f22:	3b01      	subs	r3, #1
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f38:	e042      	b.n	8007fc0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f001 feaa 	bl	8009c98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e04c      	b.n	8007fe8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	691a      	ldr	r2, [r3, #16]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f58:	b2d2      	uxtb	r2, r2
 8007f5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	f003 0304 	and.w	r3, r3, #4
 8007f8a:	2b04      	cmp	r3, #4
 8007f8c:	d118      	bne.n	8007fc0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	691a      	ldr	r2, [r3, #16]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	b2d2      	uxtb	r2, r2
 8007f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007faa:	3b01      	subs	r3, #1
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f47f aec2 	bne.w	8007d4e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e000      	b.n	8007fe8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007fe6:	2302      	movs	r3, #2
  }
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3728      	adds	r7, #40	; 0x28
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	00010004 	.word	0x00010004

08007ff4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b088      	sub	sp, #32
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008014:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800801c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	2b10      	cmp	r3, #16
 8008022:	d003      	beq.n	800802c <HAL_I2C_EV_IRQHandler+0x38>
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	2b40      	cmp	r3, #64	; 0x40
 8008028:	f040 80c1 	bne.w	80081ae <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10d      	bne.n	8008062 <HAL_I2C_EV_IRQHandler+0x6e>
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800804c:	d003      	beq.n	8008056 <HAL_I2C_EV_IRQHandler+0x62>
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008054:	d101      	bne.n	800805a <HAL_I2C_EV_IRQHandler+0x66>
 8008056:	2301      	movs	r3, #1
 8008058:	e000      	b.n	800805c <HAL_I2C_EV_IRQHandler+0x68>
 800805a:	2300      	movs	r3, #0
 800805c:	2b01      	cmp	r3, #1
 800805e:	f000 8132 	beq.w	80082c6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00c      	beq.n	8008086 <HAL_I2C_EV_IRQHandler+0x92>
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	0a5b      	lsrs	r3, r3, #9
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	d006      	beq.n	8008086 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 fe92 	bl	8009da2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fcdc 	bl	8008a3c <I2C_Master_SB>
 8008084:	e092      	b.n	80081ac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	08db      	lsrs	r3, r3, #3
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	2b00      	cmp	r3, #0
 8008090:	d009      	beq.n	80080a6 <HAL_I2C_EV_IRQHandler+0xb2>
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	0a5b      	lsrs	r3, r3, #9
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fd52 	bl	8008b48 <I2C_Master_ADD10>
 80080a4:	e082      	b.n	80081ac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	085b      	lsrs	r3, r3, #1
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d009      	beq.n	80080c6 <HAL_I2C_EV_IRQHandler+0xd2>
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	0a5b      	lsrs	r3, r3, #9
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fd6c 	bl	8008b9c <I2C_Master_ADDR>
 80080c4:	e072      	b.n	80081ac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	089b      	lsrs	r3, r3, #2
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d03b      	beq.n	800814a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080e0:	f000 80f3 	beq.w	80082ca <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	09db      	lsrs	r3, r3, #7
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00f      	beq.n	8008110 <HAL_I2C_EV_IRQHandler+0x11c>
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	0a9b      	lsrs	r3, r3, #10
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d009      	beq.n	8008110 <HAL_I2C_EV_IRQHandler+0x11c>
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	089b      	lsrs	r3, r3, #2
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	2b00      	cmp	r3, #0
 8008106:	d103      	bne.n	8008110 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f94c 	bl	80083a6 <I2C_MasterTransmit_TXE>
 800810e:	e04d      	b.n	80081ac <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	089b      	lsrs	r3, r3, #2
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 80d6 	beq.w	80082ca <HAL_I2C_EV_IRQHandler+0x2d6>
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	0a5b      	lsrs	r3, r3, #9
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	f000 80cf 	beq.w	80082ca <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	2b21      	cmp	r3, #33	; 0x21
 8008130:	d103      	bne.n	800813a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f9d3 	bl	80084de <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008138:	e0c7      	b.n	80082ca <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800813a:	7bfb      	ldrb	r3, [r7, #15]
 800813c:	2b40      	cmp	r3, #64	; 0x40
 800813e:	f040 80c4 	bne.w	80082ca <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fa41 	bl	80085ca <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008148:	e0bf      	b.n	80082ca <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008158:	f000 80b7 	beq.w	80082ca <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	099b      	lsrs	r3, r3, #6
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00f      	beq.n	8008188 <HAL_I2C_EV_IRQHandler+0x194>
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	0a9b      	lsrs	r3, r3, #10
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	2b00      	cmp	r3, #0
 8008172:	d009      	beq.n	8008188 <HAL_I2C_EV_IRQHandler+0x194>
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	089b      	lsrs	r3, r3, #2
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d103      	bne.n	8008188 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fab6 	bl	80086f2 <I2C_MasterReceive_RXNE>
 8008186:	e011      	b.n	80081ac <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	089b      	lsrs	r3, r3, #2
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 809a 	beq.w	80082ca <HAL_I2C_EV_IRQHandler+0x2d6>
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	0a5b      	lsrs	r3, r3, #9
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f000 8093 	beq.w	80082ca <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fb5f 	bl	8008868 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80081aa:	e08e      	b.n	80082ca <HAL_I2C_EV_IRQHandler+0x2d6>
 80081ac:	e08d      	b.n	80082ca <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d004      	beq.n	80081c0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	61fb      	str	r3, [r7, #28]
 80081be:	e007      	b.n	80081d0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	085b      	lsrs	r3, r3, #1
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d012      	beq.n	8008202 <HAL_I2C_EV_IRQHandler+0x20e>
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	0a5b      	lsrs	r3, r3, #9
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00c      	beq.n	8008202 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d003      	beq.n	80081f8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80081f8:	69b9      	ldr	r1, [r7, #24]
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 ff1d 	bl	800903a <I2C_Slave_ADDR>
 8008200:	e066      	b.n	80082d0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	091b      	lsrs	r3, r3, #4
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	d009      	beq.n	8008222 <HAL_I2C_EV_IRQHandler+0x22e>
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	0a5b      	lsrs	r3, r3, #9
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 ff58 	bl	80090d0 <I2C_Slave_STOPF>
 8008220:	e056      	b.n	80082d0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	2b21      	cmp	r3, #33	; 0x21
 8008226:	d002      	beq.n	800822e <HAL_I2C_EV_IRQHandler+0x23a>
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	2b29      	cmp	r3, #41	; 0x29
 800822c:	d125      	bne.n	800827a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	09db      	lsrs	r3, r3, #7
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00f      	beq.n	800825a <HAL_I2C_EV_IRQHandler+0x266>
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	0a9b      	lsrs	r3, r3, #10
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d009      	beq.n	800825a <HAL_I2C_EV_IRQHandler+0x266>
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	089b      	lsrs	r3, r3, #2
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	2b00      	cmp	r3, #0
 8008250:	d103      	bne.n	800825a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fe33 	bl	8008ebe <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008258:	e039      	b.n	80082ce <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	089b      	lsrs	r3, r3, #2
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	2b00      	cmp	r3, #0
 8008264:	d033      	beq.n	80082ce <HAL_I2C_EV_IRQHandler+0x2da>
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	0a5b      	lsrs	r3, r3, #9
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d02d      	beq.n	80082ce <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fe60 	bl	8008f38 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008278:	e029      	b.n	80082ce <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	099b      	lsrs	r3, r3, #6
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00f      	beq.n	80082a6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	0a9b      	lsrs	r3, r3, #10
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d009      	beq.n	80082a6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	089b      	lsrs	r3, r3, #2
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d103      	bne.n	80082a6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fe6b 	bl	8008f7a <I2C_SlaveReceive_RXNE>
 80082a4:	e014      	b.n	80082d0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	089b      	lsrs	r3, r3, #2
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00e      	beq.n	80082d0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	0a5b      	lsrs	r3, r3, #9
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d008      	beq.n	80082d0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fe99 	bl	8008ff6 <I2C_SlaveReceive_BTF>
 80082c4:	e004      	b.n	80082d0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80082c6:	bf00      	nop
 80082c8:	e002      	b.n	80082d0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082ca:	bf00      	nop
 80082cc:	e000      	b.n	80082d0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80082ce:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80082d0:	3720      	adds	r7, #32
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80082de:	bf00      	nop
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b083      	sub	sp, #12
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008326:	b480      	push	{r7}
 8008328:	b083      	sub	sp, #12
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	460b      	mov	r3, r1
 8008330:	70fb      	strb	r3, [r7, #3]
 8008332:	4613      	mov	r3, r2
 8008334:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008336:	bf00      	nop
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800834a:	bf00      	nop
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800835e:	bf00      	nop
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008372:	bf00      	nop
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800837e:	b480      	push	{r7}
 8008380:	b083      	sub	sp, #12
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008386:	bf00      	nop
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800839a:	bf00      	nop
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083bc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d150      	bne.n	800846e <I2C_MasterTransmit_TXE+0xc8>
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	2b21      	cmp	r3, #33	; 0x21
 80083d0:	d14d      	bne.n	800846e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d01d      	beq.n	8008414 <I2C_MasterTransmit_TXE+0x6e>
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2b20      	cmp	r3, #32
 80083dc:	d01a      	beq.n	8008414 <I2C_MasterTransmit_TXE+0x6e>
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083e4:	d016      	beq.n	8008414 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80083f4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2211      	movs	r2, #17
 80083fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2220      	movs	r2, #32
 8008408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7ff ff62 	bl	80082d6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008412:	e060      	b.n	80084d6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008422:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008432:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2220      	movs	r2, #32
 800843e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b40      	cmp	r3, #64	; 0x40
 800844c:	d107      	bne.n	800845e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7ff ff7d 	bl	8008356 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800845c:	e03b      	b.n	80084d6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7ff ff35 	bl	80082d6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800846c:	e033      	b.n	80084d6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800846e:	7bfb      	ldrb	r3, [r7, #15]
 8008470:	2b21      	cmp	r3, #33	; 0x21
 8008472:	d005      	beq.n	8008480 <I2C_MasterTransmit_TXE+0xda>
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	2b40      	cmp	r3, #64	; 0x40
 8008478:	d12d      	bne.n	80084d6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800847a:	7bfb      	ldrb	r3, [r7, #15]
 800847c:	2b22      	cmp	r3, #34	; 0x22
 800847e:	d12a      	bne.n	80084d6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008484:	b29b      	uxth	r3, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	d108      	bne.n	800849c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008498:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800849a:	e01c      	b.n	80084d6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b40      	cmp	r3, #64	; 0x40
 80084a6:	d103      	bne.n	80084b0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f88e 	bl	80085ca <I2C_MemoryTransmit_TXE_BTF>
}
 80084ae:	e012      	b.n	80084d6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b4:	781a      	ldrb	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	1c5a      	adds	r2, r3, #1
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	3b01      	subs	r3, #1
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80084d4:	e7ff      	b.n	80084d6 <I2C_MasterTransmit_TXE+0x130>
 80084d6:	bf00      	nop
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ea:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b21      	cmp	r3, #33	; 0x21
 80084f6:	d164      	bne.n	80085c2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d012      	beq.n	8008528 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	781a      	ldrb	r2, [r3, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800851c:	b29b      	uxth	r3, r3
 800851e:	3b01      	subs	r3, #1
 8008520:	b29a      	uxth	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008526:	e04c      	b.n	80085c2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2b08      	cmp	r3, #8
 800852c:	d01d      	beq.n	800856a <I2C_MasterTransmit_BTF+0x8c>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2b20      	cmp	r3, #32
 8008532:	d01a      	beq.n	800856a <I2C_MasterTransmit_BTF+0x8c>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800853a:	d016      	beq.n	800856a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800854a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2211      	movs	r2, #17
 8008550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2220      	movs	r2, #32
 800855e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff feb7 	bl	80082d6 <HAL_I2C_MasterTxCpltCallback>
}
 8008568:	e02b      	b.n	80085c2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008578:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008588:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2220      	movs	r2, #32
 8008594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b40      	cmp	r3, #64	; 0x40
 80085a2:	d107      	bne.n	80085b4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f7ff fed2 	bl	8008356 <HAL_I2C_MemTxCpltCallback>
}
 80085b2:	e006      	b.n	80085c2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7ff fe8a 	bl	80082d6 <HAL_I2C_MasterTxCpltCallback>
}
 80085c2:	bf00      	nop
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b084      	sub	sp, #16
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085d8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d11d      	bne.n	800861e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d10b      	bne.n	8008602 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085fa:	1c9a      	adds	r2, r3, #2
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8008600:	e073      	b.n	80086ea <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008606:	b29b      	uxth	r3, r3
 8008608:	121b      	asrs	r3, r3, #8
 800860a:	b2da      	uxtb	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008616:	1c5a      	adds	r2, r3, #1
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800861c:	e065      	b.n	80086ea <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008622:	2b01      	cmp	r3, #1
 8008624:	d10b      	bne.n	800863e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800862a:	b2da      	uxtb	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800863c:	e055      	b.n	80086ea <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008642:	2b02      	cmp	r3, #2
 8008644:	d151      	bne.n	80086ea <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	2b22      	cmp	r3, #34	; 0x22
 800864a:	d10d      	bne.n	8008668 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800865a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008666:	e040      	b.n	80086ea <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800866c:	b29b      	uxth	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d015      	beq.n	800869e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008672:	7bfb      	ldrb	r3, [r7, #15]
 8008674:	2b21      	cmp	r3, #33	; 0x21
 8008676:	d112      	bne.n	800869e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867c:	781a      	ldrb	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008692:	b29b      	uxth	r3, r3
 8008694:	3b01      	subs	r3, #1
 8008696:	b29a      	uxth	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800869c:	e025      	b.n	80086ea <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d120      	bne.n	80086ea <I2C_MemoryTransmit_TXE_BTF+0x120>
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
 80086aa:	2b21      	cmp	r3, #33	; 0x21
 80086ac:	d11d      	bne.n	80086ea <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80086bc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086cc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2220      	movs	r2, #32
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7ff fe36 	bl	8008356 <HAL_I2C_MemTxCpltCallback>
}
 80086ea:	bf00      	nop
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b22      	cmp	r3, #34	; 0x22
 8008704:	f040 80ac 	bne.w	8008860 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800870c:	b29b      	uxth	r3, r3
 800870e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b03      	cmp	r3, #3
 8008714:	d921      	bls.n	800875a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	691a      	ldr	r2, [r3, #16]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	b2d2      	uxtb	r2, r2
 8008722:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008732:	b29b      	uxth	r3, r3
 8008734:	3b01      	subs	r3, #1
 8008736:	b29a      	uxth	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008740:	b29b      	uxth	r3, r3
 8008742:	2b03      	cmp	r3, #3
 8008744:	f040 808c 	bne.w	8008860 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008756:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008758:	e082      	b.n	8008860 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875e:	2b02      	cmp	r3, #2
 8008760:	d075      	beq.n	800884e <I2C_MasterReceive_RXNE+0x15c>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d002      	beq.n	800876e <I2C_MasterReceive_RXNE+0x7c>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d16f      	bne.n	800884e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f001 fa60 	bl	8009c34 <I2C_WaitOnSTOPRequestThroughIT>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d142      	bne.n	8008800 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008788:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008798:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	691a      	ldr	r2, [r3, #16]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a4:	b2d2      	uxtb	r2, r2
 80087a6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	1c5a      	adds	r2, r3, #1
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	3b01      	subs	r3, #1
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2220      	movs	r2, #32
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	2b40      	cmp	r3, #64	; 0x40
 80087d2:	d10a      	bne.n	80087ea <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff fdc1 	bl	800836a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80087e8:	e03a      	b.n	8008860 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2212      	movs	r2, #18
 80087f6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f7ff fd76 	bl	80082ea <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80087fe:	e02f      	b.n	8008860 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800880e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	691a      	ldr	r2, [r3, #16]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881a:	b2d2      	uxtb	r2, r2
 800881c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800882c:	b29b      	uxth	r3, r3
 800882e:	3b01      	subs	r3, #1
 8008830:	b29a      	uxth	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2220      	movs	r2, #32
 800883a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7ff fd99 	bl	800837e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800884c:	e008      	b.n	8008860 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	685a      	ldr	r2, [r3, #4]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800885c:	605a      	str	r2, [r3, #4]
}
 800885e:	e7ff      	b.n	8008860 <I2C_MasterReceive_RXNE+0x16e>
 8008860:	bf00      	nop
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008874:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800887a:	b29b      	uxth	r3, r3
 800887c:	2b04      	cmp	r3, #4
 800887e:	d11b      	bne.n	80088b8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800888e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	691a      	ldr	r2, [r3, #16]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889a:	b2d2      	uxtb	r2, r2
 800889c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	3b01      	subs	r3, #1
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80088b6:	e0bd      	b.n	8008a34 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b03      	cmp	r3, #3
 80088c0:	d129      	bne.n	8008916 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088d0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2b04      	cmp	r3, #4
 80088d6:	d00a      	beq.n	80088ee <I2C_MasterReceive_BTF+0x86>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d007      	beq.n	80088ee <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	691a      	ldr	r2, [r3, #16]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f8:	b2d2      	uxtb	r2, r2
 80088fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008900:	1c5a      	adds	r2, r3, #1
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800890a:	b29b      	uxth	r3, r3
 800890c:	3b01      	subs	r3, #1
 800890e:	b29a      	uxth	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008914:	e08e      	b.n	8008a34 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800891a:	b29b      	uxth	r3, r3
 800891c:	2b02      	cmp	r3, #2
 800891e:	d176      	bne.n	8008a0e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d002      	beq.n	800892c <I2C_MasterReceive_BTF+0xc4>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2b10      	cmp	r3, #16
 800892a:	d108      	bne.n	800893e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	e019      	b.n	8008972 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2b04      	cmp	r3, #4
 8008942:	d002      	beq.n	800894a <I2C_MasterReceive_BTF+0xe2>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b02      	cmp	r3, #2
 8008948:	d108      	bne.n	800895c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	e00a      	b.n	8008972 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2b10      	cmp	r3, #16
 8008960:	d007      	beq.n	8008972 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008970:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	691a      	ldr	r2, [r3, #16]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897c:	b2d2      	uxtb	r2, r2
 800897e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008984:	1c5a      	adds	r2, r3, #1
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800898e:	b29b      	uxth	r3, r3
 8008990:	3b01      	subs	r3, #1
 8008992:	b29a      	uxth	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	691a      	ldr	r2, [r3, #16]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	b2d2      	uxtb	r2, r2
 80089a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	1c5a      	adds	r2, r3, #1
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	3b01      	subs	r3, #1
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80089cc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2220      	movs	r2, #32
 80089d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b40      	cmp	r3, #64	; 0x40
 80089e0:	d10a      	bne.n	80089f8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff fcba 	bl	800836a <HAL_I2C_MemRxCpltCallback>
}
 80089f6:	e01d      	b.n	8008a34 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2212      	movs	r2, #18
 8008a04:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff fc6f 	bl	80082ea <HAL_I2C_MasterRxCpltCallback>
}
 8008a0c:	e012      	b.n	8008a34 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	691a      	ldr	r2, [r3, #16]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	b2d2      	uxtb	r2, r2
 8008a1a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	1c5a      	adds	r2, r3, #1
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008a34:	bf00      	nop
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b40      	cmp	r3, #64	; 0x40
 8008a4e:	d117      	bne.n	8008a80 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d109      	bne.n	8008a6c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	461a      	mov	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a68:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008a6a:	e067      	b.n	8008b3c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	f043 0301 	orr.w	r3, r3, #1
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	611a      	str	r2, [r3, #16]
}
 8008a7e:	e05d      	b.n	8008b3c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a88:	d133      	bne.n	8008af2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b21      	cmp	r3, #33	; 0x21
 8008a94:	d109      	bne.n	8008aaa <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008aa6:	611a      	str	r2, [r3, #16]
 8008aa8:	e008      	b.n	8008abc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	f043 0301 	orr.w	r3, r3, #1
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d004      	beq.n	8008ace <I2C_Master_SB+0x92>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d108      	bne.n	8008ae0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d032      	beq.n	8008b3c <I2C_Master_SB+0x100>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d02d      	beq.n	8008b3c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aee:	605a      	str	r2, [r3, #4]
}
 8008af0:	e024      	b.n	8008b3c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10e      	bne.n	8008b18 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	11db      	asrs	r3, r3, #7
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	f003 0306 	and.w	r3, r3, #6
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	f063 030f 	orn	r3, r3, #15
 8008b0e:	b2da      	uxtb	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	611a      	str	r2, [r3, #16]
}
 8008b16:	e011      	b.n	8008b3c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d10d      	bne.n	8008b3c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	11db      	asrs	r3, r3, #7
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	f003 0306 	and.w	r3, r3, #6
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	f063 030e 	orn	r3, r3, #14
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	611a      	str	r2, [r3, #16]
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d004      	beq.n	8008b6e <I2C_Master_ADD10+0x26>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d108      	bne.n	8008b80 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00c      	beq.n	8008b90 <I2C_Master_ADD10+0x48>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d007      	beq.n	8008b90 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b8e:	605a      	str	r2, [r3, #4]
  }
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b091      	sub	sp, #68	; 0x44
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008baa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b22      	cmp	r3, #34	; 0x22
 8008bc4:	f040 8169 	bne.w	8008e9a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10f      	bne.n	8008bf0 <I2C_Master_ADDR+0x54>
 8008bd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008bd4:	2b40      	cmp	r3, #64	; 0x40
 8008bd6:	d10b      	bne.n	8008bf0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bd8:	2300      	movs	r3, #0
 8008bda:	633b      	str	r3, [r7, #48]	; 0x30
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	633b      	str	r3, [r7, #48]	; 0x30
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	633b      	str	r3, [r7, #48]	; 0x30
 8008bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bee:	e160      	b.n	8008eb2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d11d      	bne.n	8008c34 <I2C_Master_ADDR+0x98>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008c00:	d118      	bne.n	8008c34 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c02:	2300      	movs	r3, #0
 8008c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c26:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	651a      	str	r2, [r3, #80]	; 0x50
 8008c32:	e13e      	b.n	8008eb2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d113      	bne.n	8008c66 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c3e:	2300      	movs	r3, #0
 8008c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	695b      	ldr	r3, [r3, #20]
 8008c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c52:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	e115      	b.n	8008e92 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	f040 808a 	bne.w	8008d86 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008c78:	d137      	bne.n	8008cea <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c88:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c98:	d113      	bne.n	8008cc2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ca8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008caa:	2300      	movs	r3, #0
 8008cac:	627b      	str	r3, [r7, #36]	; 0x24
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	e0e7      	b.n	8008e92 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	623b      	str	r3, [r7, #32]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	623b      	str	r3, [r7, #32]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	623b      	str	r3, [r7, #32]
 8008cd6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ce6:	601a      	str	r2, [r3, #0]
 8008ce8:	e0d3      	b.n	8008e92 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cec:	2b08      	cmp	r3, #8
 8008cee:	d02e      	beq.n	8008d4e <I2C_Master_ADDR+0x1b2>
 8008cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf2:	2b20      	cmp	r3, #32
 8008cf4:	d02b      	beq.n	8008d4e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf8:	2b12      	cmp	r3, #18
 8008cfa:	d102      	bne.n	8008d02 <I2C_Master_ADDR+0x166>
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d125      	bne.n	8008d4e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d00e      	beq.n	8008d26 <I2C_Master_ADDR+0x18a>
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d00b      	beq.n	8008d26 <I2C_Master_ADDR+0x18a>
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d10:	2b10      	cmp	r3, #16
 8008d12:	d008      	beq.n	8008d26 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d22:	601a      	str	r2, [r3, #0]
 8008d24:	e007      	b.n	8008d36 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d34:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d36:	2300      	movs	r3, #0
 8008d38:	61fb      	str	r3, [r7, #28]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	61fb      	str	r3, [r7, #28]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	61fb      	str	r3, [r7, #28]
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	e0a1      	b.n	8008e92 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d5c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d5e:	2300      	movs	r3, #0
 8008d60:	61bb      	str	r3, [r7, #24]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	61bb      	str	r3, [r7, #24]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	61bb      	str	r3, [r7, #24]
 8008d72:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	e085      	b.n	8008e92 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d14d      	bne.n	8008e2c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d92:	2b04      	cmp	r3, #4
 8008d94:	d016      	beq.n	8008dc4 <I2C_Master_ADDR+0x228>
 8008d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d013      	beq.n	8008dc4 <I2C_Master_ADDR+0x228>
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9e:	2b10      	cmp	r3, #16
 8008da0:	d010      	beq.n	8008dc4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008db0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dc0:	601a      	str	r2, [r3, #0]
 8008dc2:	e007      	b.n	8008dd4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008dd2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008de2:	d117      	bne.n	8008e14 <I2C_Master_ADDR+0x278>
 8008de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008dea:	d00b      	beq.n	8008e04 <I2C_Master_ADDR+0x268>
 8008dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d008      	beq.n	8008e04 <I2C_Master_ADDR+0x268>
 8008df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df4:	2b08      	cmp	r3, #8
 8008df6:	d005      	beq.n	8008e04 <I2C_Master_ADDR+0x268>
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	2b10      	cmp	r3, #16
 8008dfc:	d002      	beq.n	8008e04 <I2C_Master_ADDR+0x268>
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e00:	2b20      	cmp	r3, #32
 8008e02:	d107      	bne.n	8008e14 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e12:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e14:	2300      	movs	r3, #0
 8008e16:	617b      	str	r3, [r7, #20]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	617b      	str	r3, [r7, #20]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	e032      	b.n	8008e92 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e3a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e4a:	d117      	bne.n	8008e7c <I2C_Master_ADDR+0x2e0>
 8008e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e52:	d00b      	beq.n	8008e6c <I2C_Master_ADDR+0x2d0>
 8008e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d008      	beq.n	8008e6c <I2C_Master_ADDR+0x2d0>
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5c:	2b08      	cmp	r3, #8
 8008e5e:	d005      	beq.n	8008e6c <I2C_Master_ADDR+0x2d0>
 8008e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e62:	2b10      	cmp	r3, #16
 8008e64:	d002      	beq.n	8008e6c <I2C_Master_ADDR+0x2d0>
 8008e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e68:	2b20      	cmp	r3, #32
 8008e6a:	d107      	bne.n	8008e7c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e7a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	613b      	str	r3, [r7, #16]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	613b      	str	r3, [r7, #16]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	613b      	str	r3, [r7, #16]
 8008e90:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008e98:	e00b      	b.n	8008eb2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	60fb      	str	r3, [r7, #12]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	695b      	ldr	r3, [r3, #20]
 8008ea4:	60fb      	str	r3, [r7, #12]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	60fb      	str	r3, [r7, #12]
 8008eae:	68fb      	ldr	r3, [r7, #12]
}
 8008eb0:	e7ff      	b.n	8008eb2 <I2C_Master_ADDR+0x316>
 8008eb2:	bf00      	nop
 8008eb4:	3744      	adds	r7, #68	; 0x44
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b084      	sub	sp, #16
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ecc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d02b      	beq.n	8008f30 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	781a      	ldrb	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	1c5a      	adds	r2, r3, #1
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d114      	bne.n	8008f30 <I2C_SlaveTransmit_TXE+0x72>
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	2b29      	cmp	r3, #41	; 0x29
 8008f0a:	d111      	bne.n	8008f30 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f1a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2221      	movs	r2, #33	; 0x21
 8008f20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2228      	movs	r2, #40	; 0x28
 8008f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7ff f9e7 	bl	80082fe <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008f30:	bf00      	nop
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d011      	beq.n	8008f6e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4e:	781a      	ldrb	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	3b01      	subs	r3, #1
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008f6e:	bf00      	nop
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f88:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d02c      	beq.n	8008fee <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	691a      	ldr	r2, [r3, #16]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9e:	b2d2      	uxtb	r2, r2
 8008fa0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	1c5a      	adds	r2, r3, #1
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d114      	bne.n	8008fee <I2C_SlaveReceive_RXNE+0x74>
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
 8008fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc8:	d111      	bne.n	8008fee <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	685a      	ldr	r2, [r3, #4]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fd8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2222      	movs	r2, #34	; 0x22
 8008fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2228      	movs	r2, #40	; 0x28
 8008fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7ff f992 	bl	8008312 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008fee:	bf00      	nop
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b083      	sub	sp, #12
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009002:	b29b      	uxth	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	d012      	beq.n	800902e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	691a      	ldr	r2, [r3, #16]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009012:	b2d2      	uxtb	r2, r2
 8009014:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901a:	1c5a      	adds	r2, r3, #1
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009024:	b29b      	uxth	r3, r3
 8009026:	3b01      	subs	r3, #1
 8009028:	b29a      	uxth	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800902e:	bf00      	nop
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009044:	2300      	movs	r3, #0
 8009046:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800904e:	b2db      	uxtb	r3, r3
 8009050:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009054:	2b28      	cmp	r3, #40	; 0x28
 8009056:	d127      	bne.n	80090a8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009066:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	089b      	lsrs	r3, r3, #2
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	2b00      	cmp	r3, #0
 8009072:	d101      	bne.n	8009078 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009074:	2301      	movs	r3, #1
 8009076:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	09db      	lsrs	r3, r3, #7
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	2b00      	cmp	r3, #0
 8009082:	d103      	bne.n	800908c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	81bb      	strh	r3, [r7, #12]
 800908a:	e002      	b.n	8009092 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800909a:	89ba      	ldrh	r2, [r7, #12]
 800909c:	7bfb      	ldrb	r3, [r7, #15]
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff f940 	bl	8008326 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80090a6:	e00e      	b.n	80090c6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090a8:	2300      	movs	r3, #0
 80090aa:	60bb      	str	r3, [r7, #8]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	60bb      	str	r3, [r7, #8]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	60bb      	str	r3, [r7, #8]
 80090bc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80090c6:	bf00      	nop
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090de:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80090ee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80090f0:	2300      	movs	r3, #0
 80090f2:	60bb      	str	r3, [r7, #8]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	60bb      	str	r3, [r7, #8]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f042 0201 	orr.w	r2, r2, #1
 800910a:	601a      	str	r2, [r3, #0]
 800910c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800911c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800912c:	d172      	bne.n	8009214 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800912e:	7bfb      	ldrb	r3, [r7, #15]
 8009130:	2b22      	cmp	r3, #34	; 0x22
 8009132:	d002      	beq.n	800913a <I2C_Slave_STOPF+0x6a>
 8009134:	7bfb      	ldrb	r3, [r7, #15]
 8009136:	2b2a      	cmp	r3, #42	; 0x2a
 8009138:	d135      	bne.n	80091a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	b29a      	uxth	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800914c:	b29b      	uxth	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d005      	beq.n	800915e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009156:	f043 0204 	orr.w	r2, r3, #4
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800916c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe f8f7 	bl	8007366 <HAL_DMA_GetState>
 8009178:	4603      	mov	r3, r0
 800917a:	2b01      	cmp	r3, #1
 800917c:	d049      	beq.n	8009212 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009182:	4a69      	ldr	r2, [pc, #420]	; (8009328 <I2C_Slave_STOPF+0x258>)
 8009184:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe f8c9 	bl	8007322 <HAL_DMA_Abort_IT>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d03d      	beq.n	8009212 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80091a0:	4610      	mov	r0, r2
 80091a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80091a4:	e035      	b.n	8009212 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d005      	beq.n	80091ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	f043 0204 	orr.w	r2, r3, #4
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	685a      	ldr	r2, [r3, #4]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fe f8c1 	bl	8007366 <HAL_DMA_GetState>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d014      	beq.n	8009214 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ee:	4a4e      	ldr	r2, [pc, #312]	; (8009328 <I2C_Slave_STOPF+0x258>)
 80091f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe f893 	bl	8007322 <HAL_DMA_Abort_IT>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d008      	beq.n	8009214 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800920c:	4610      	mov	r0, r2
 800920e:	4798      	blx	r3
 8009210:	e000      	b.n	8009214 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009212:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009218:	b29b      	uxth	r3, r3
 800921a:	2b00      	cmp	r3, #0
 800921c:	d03e      	beq.n	800929c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	695b      	ldr	r3, [r3, #20]
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b04      	cmp	r3, #4
 800922a:	d112      	bne.n	8009252 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	691a      	ldr	r2, [r3, #16]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009236:	b2d2      	uxtb	r2, r2
 8009238:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009248:	b29b      	uxth	r3, r3
 800924a:	3b01      	subs	r3, #1
 800924c:	b29a      	uxth	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	695b      	ldr	r3, [r3, #20]
 8009258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925c:	2b40      	cmp	r3, #64	; 0x40
 800925e:	d112      	bne.n	8009286 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	691a      	ldr	r2, [r3, #16]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926a:	b2d2      	uxtb	r2, r2
 800926c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009272:	1c5a      	adds	r2, r3, #1
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800927c:	b29b      	uxth	r3, r3
 800927e:	3b01      	subs	r3, #1
 8009280:	b29a      	uxth	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800928a:	b29b      	uxth	r3, r3
 800928c:	2b00      	cmp	r3, #0
 800928e:	d005      	beq.n	800929c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009294:	f043 0204 	orr.w	r2, r3, #4
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d003      	beq.n	80092ac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f843 	bl	8009330 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80092aa:	e039      	b.n	8009320 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
 80092ae:	2b2a      	cmp	r3, #42	; 0x2a
 80092b0:	d109      	bne.n	80092c6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2228      	movs	r2, #40	; 0x28
 80092bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7ff f826 	bl	8008312 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b28      	cmp	r3, #40	; 0x28
 80092d0:	d111      	bne.n	80092f6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a15      	ldr	r2, [pc, #84]	; (800932c <I2C_Slave_STOPF+0x25c>)
 80092d6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2220      	movs	r2, #32
 80092e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7ff f827 	bl	8008342 <HAL_I2C_ListenCpltCallback>
}
 80092f4:	e014      	b.n	8009320 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fa:	2b22      	cmp	r3, #34	; 0x22
 80092fc:	d002      	beq.n	8009304 <I2C_Slave_STOPF+0x234>
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
 8009300:	2b22      	cmp	r3, #34	; 0x22
 8009302:	d10d      	bne.n	8009320 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2220      	movs	r2, #32
 800930e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7fe fff9 	bl	8008312 <HAL_I2C_SlaveRxCpltCallback>
}
 8009320:	bf00      	nop
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	08009835 	.word	0x08009835
 800932c:	ffff0000 	.word	0xffff0000

08009330 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800933e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009346:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009348:	7bbb      	ldrb	r3, [r7, #14]
 800934a:	2b10      	cmp	r3, #16
 800934c:	d002      	beq.n	8009354 <I2C_ITError+0x24>
 800934e:	7bbb      	ldrb	r3, [r7, #14]
 8009350:	2b40      	cmp	r3, #64	; 0x40
 8009352:	d10a      	bne.n	800936a <I2C_ITError+0x3a>
 8009354:	7bfb      	ldrb	r3, [r7, #15]
 8009356:	2b22      	cmp	r3, #34	; 0x22
 8009358:	d107      	bne.n	800936a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009368:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800936a:	7bfb      	ldrb	r3, [r7, #15]
 800936c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009370:	2b28      	cmp	r3, #40	; 0x28
 8009372:	d107      	bne.n	8009384 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2228      	movs	r2, #40	; 0x28
 800937e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009382:	e015      	b.n	80093b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800938e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009392:	d00a      	beq.n	80093aa <I2C_ITError+0x7a>
 8009394:	7bfb      	ldrb	r3, [r7, #15]
 8009396:	2b60      	cmp	r3, #96	; 0x60
 8009398:	d007      	beq.n	80093aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2220      	movs	r2, #32
 800939e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093be:	d162      	bne.n	8009486 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d020      	beq.n	8009420 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e2:	4a6a      	ldr	r2, [pc, #424]	; (800958c <I2C_ITError+0x25c>)
 80093e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fd ff99 	bl	8007322 <HAL_DMA_Abort_IT>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 8089 	beq.w	800950a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 0201 	bic.w	r2, r2, #1
 8009406:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2220      	movs	r2, #32
 800940c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800941a:	4610      	mov	r0, r2
 800941c:	4798      	blx	r3
 800941e:	e074      	b.n	800950a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009424:	4a59      	ldr	r2, [pc, #356]	; (800958c <I2C_ITError+0x25c>)
 8009426:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942c:	4618      	mov	r0, r3
 800942e:	f7fd ff78 	bl	8007322 <HAL_DMA_Abort_IT>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d068      	beq.n	800950a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009442:	2b40      	cmp	r3, #64	; 0x40
 8009444:	d10b      	bne.n	800945e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	691a      	ldr	r2, [r3, #16]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	b2d2      	uxtb	r2, r2
 8009452:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 0201 	bic.w	r2, r2, #1
 800946c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2220      	movs	r2, #32
 8009472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009480:	4610      	mov	r0, r2
 8009482:	4798      	blx	r3
 8009484:	e041      	b.n	800950a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b60      	cmp	r3, #96	; 0x60
 8009490:	d125      	bne.n	80094de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2220      	movs	r2, #32
 8009496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094aa:	2b40      	cmp	r3, #64	; 0x40
 80094ac:	d10b      	bne.n	80094c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	691a      	ldr	r2, [r3, #16]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	b2d2      	uxtb	r2, r2
 80094ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f022 0201 	bic.w	r2, r2, #1
 80094d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7fe ff5b 	bl	8008392 <HAL_I2C_AbortCpltCallback>
 80094dc:	e015      	b.n	800950a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	695b      	ldr	r3, [r3, #20]
 80094e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e8:	2b40      	cmp	r3, #64	; 0x40
 80094ea:	d10b      	bne.n	8009504 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	691a      	ldr	r2, [r3, #16]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	b2d2      	uxtb	r2, r2
 80094f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7fe ff3a 	bl	800837e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b00      	cmp	r3, #0
 8009518:	d10e      	bne.n	8009538 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009520:	2b00      	cmp	r3, #0
 8009522:	d109      	bne.n	8009538 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800952a:	2b00      	cmp	r3, #0
 800952c:	d104      	bne.n	8009538 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009534:	2b00      	cmp	r3, #0
 8009536:	d007      	beq.n	8009548 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009546:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800954e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009554:	f003 0304 	and.w	r3, r3, #4
 8009558:	2b04      	cmp	r3, #4
 800955a:	d113      	bne.n	8009584 <I2C_ITError+0x254>
 800955c:	7bfb      	ldrb	r3, [r7, #15]
 800955e:	2b28      	cmp	r3, #40	; 0x28
 8009560:	d110      	bne.n	8009584 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a0a      	ldr	r2, [pc, #40]	; (8009590 <I2C_ITError+0x260>)
 8009566:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2220      	movs	r2, #32
 8009572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7fe fedf 	bl	8008342 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009584:	bf00      	nop
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	08009835 	.word	0x08009835
 8009590:	ffff0000 	.word	0xffff0000

08009594 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b088      	sub	sp, #32
 8009598:	af02      	add	r7, sp, #8
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	607a      	str	r2, [r7, #4]
 800959e:	603b      	str	r3, [r7, #0]
 80095a0:	460b      	mov	r3, r1
 80095a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2b08      	cmp	r3, #8
 80095ae:	d006      	beq.n	80095be <I2C_MasterRequestWrite+0x2a>
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d003      	beq.n	80095be <I2C_MasterRequestWrite+0x2a>
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80095bc:	d108      	bne.n	80095d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095cc:	601a      	str	r2, [r3, #0]
 80095ce:	e00b      	b.n	80095e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d4:	2b12      	cmp	r3, #18
 80095d6:	d107      	bne.n	80095e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 f9c5 	bl	8009984 <I2C_WaitOnFlagUntilTimeout>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00d      	beq.n	800961c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800960a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800960e:	d103      	bne.n	8009618 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009616:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009618:	2303      	movs	r3, #3
 800961a:	e035      	b.n	8009688 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009624:	d108      	bne.n	8009638 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009626:	897b      	ldrh	r3, [r7, #10]
 8009628:	b2db      	uxtb	r3, r3
 800962a:	461a      	mov	r2, r3
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009634:	611a      	str	r2, [r3, #16]
 8009636:	e01b      	b.n	8009670 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009638:	897b      	ldrh	r3, [r7, #10]
 800963a:	11db      	asrs	r3, r3, #7
 800963c:	b2db      	uxtb	r3, r3
 800963e:	f003 0306 	and.w	r3, r3, #6
 8009642:	b2db      	uxtb	r3, r3
 8009644:	f063 030f 	orn	r3, r3, #15
 8009648:	b2da      	uxtb	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	490e      	ldr	r1, [pc, #56]	; (8009690 <I2C_MasterRequestWrite+0xfc>)
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f000 f9eb 	bl	8009a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e010      	b.n	8009688 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009666:	897b      	ldrh	r3, [r7, #10]
 8009668:	b2da      	uxtb	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	4907      	ldr	r1, [pc, #28]	; (8009694 <I2C_MasterRequestWrite+0x100>)
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f000 f9db 	bl	8009a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e000      	b.n	8009688 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3718      	adds	r7, #24
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	00010008 	.word	0x00010008
 8009694:	00010002 	.word	0x00010002

08009698 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b088      	sub	sp, #32
 800969c:	af02      	add	r7, sp, #8
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	607a      	str	r2, [r7, #4]
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	460b      	mov	r3, r1
 80096a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2b08      	cmp	r3, #8
 80096c2:	d006      	beq.n	80096d2 <I2C_MasterRequestRead+0x3a>
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d003      	beq.n	80096d2 <I2C_MasterRequestRead+0x3a>
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80096d0:	d108      	bne.n	80096e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	e00b      	b.n	80096fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e8:	2b11      	cmp	r3, #17
 80096ea:	d107      	bne.n	80096fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f000 f93b 	bl	8009984 <I2C_WaitOnFlagUntilTimeout>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00d      	beq.n	8009730 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800971e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009722:	d103      	bne.n	800972c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800972a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e079      	b.n	8009824 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009738:	d108      	bne.n	800974c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800973a:	897b      	ldrh	r3, [r7, #10]
 800973c:	b2db      	uxtb	r3, r3
 800973e:	f043 0301 	orr.w	r3, r3, #1
 8009742:	b2da      	uxtb	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	611a      	str	r2, [r3, #16]
 800974a:	e05f      	b.n	800980c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800974c:	897b      	ldrh	r3, [r7, #10]
 800974e:	11db      	asrs	r3, r3, #7
 8009750:	b2db      	uxtb	r3, r3
 8009752:	f003 0306 	and.w	r3, r3, #6
 8009756:	b2db      	uxtb	r3, r3
 8009758:	f063 030f 	orn	r3, r3, #15
 800975c:	b2da      	uxtb	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	4930      	ldr	r1, [pc, #192]	; (800982c <I2C_MasterRequestRead+0x194>)
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 f961 	bl	8009a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e054      	b.n	8009824 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800977a:	897b      	ldrh	r3, [r7, #10]
 800977c:	b2da      	uxtb	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	4929      	ldr	r1, [pc, #164]	; (8009830 <I2C_MasterRequestRead+0x198>)
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f000 f951 	bl	8009a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d001      	beq.n	800979a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e044      	b.n	8009824 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800979a:	2300      	movs	r3, #0
 800979c:	613b      	str	r3, [r7, #16]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	695b      	ldr	r3, [r3, #20]
 80097a4:	613b      	str	r3, [r7, #16]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	613b      	str	r3, [r7, #16]
 80097ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	9300      	str	r3, [sp, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	f000 f8d9 	bl	8009984 <I2C_WaitOnFlagUntilTimeout>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00d      	beq.n	80097f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097e6:	d103      	bne.n	80097f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80097f0:	2303      	movs	r3, #3
 80097f2:	e017      	b.n	8009824 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80097f4:	897b      	ldrh	r3, [r7, #10]
 80097f6:	11db      	asrs	r3, r3, #7
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	f003 0306 	and.w	r3, r3, #6
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	f063 030e 	orn	r3, r3, #14
 8009804:	b2da      	uxtb	r2, r3
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	4907      	ldr	r1, [pc, #28]	; (8009830 <I2C_MasterRequestRead+0x198>)
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 f90d 	bl	8009a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d001      	beq.n	8009822 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e000      	b.n	8009824 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	00010008 	.word	0x00010008
 8009830:	00010002 	.word	0x00010002

08009834 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800983c:	2300      	movs	r3, #0
 800983e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009844:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800984c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800984e:	4b4b      	ldr	r3, [pc, #300]	; (800997c <I2C_DMAAbort+0x148>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	08db      	lsrs	r3, r3, #3
 8009854:	4a4a      	ldr	r2, [pc, #296]	; (8009980 <I2C_DMAAbort+0x14c>)
 8009856:	fba2 2303 	umull	r2, r3, r2, r3
 800985a:	0a1a      	lsrs	r2, r3, #8
 800985c:	4613      	mov	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	00da      	lsls	r2, r3, #3
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d106      	bne.n	800987c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009872:	f043 0220 	orr.w	r2, r3, #32
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800987a:	e00a      	b.n	8009892 <I2C_DMAAbort+0x5e>
    }
    count--;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	3b01      	subs	r3, #1
 8009880:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800988c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009890:	d0ea      	beq.n	8009868 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800989e:	2200      	movs	r2, #0
 80098a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d003      	beq.n	80098b2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ae:	2200      	movs	r2, #0
 80098b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098c0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	2200      	movs	r2, #0
 80098c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d003      	beq.n	80098d8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d4:	2200      	movs	r2, #0
 80098d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e4:	2200      	movs	r2, #0
 80098e6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f022 0201 	bic.w	r2, r2, #1
 80098f6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	2b60      	cmp	r3, #96	; 0x60
 8009902:	d10e      	bne.n	8009922 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	2220      	movs	r2, #32
 8009908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	2200      	movs	r2, #0
 8009910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	2200      	movs	r2, #0
 8009918:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800991a:	6978      	ldr	r0, [r7, #20]
 800991c:	f7fe fd39 	bl	8008392 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009920:	e027      	b.n	8009972 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009922:	7cfb      	ldrb	r3, [r7, #19]
 8009924:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009928:	2b28      	cmp	r3, #40	; 0x28
 800992a:	d117      	bne.n	800995c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f042 0201 	orr.w	r2, r2, #1
 800993a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800994a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	2200      	movs	r2, #0
 8009950:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2228      	movs	r2, #40	; 0x28
 8009956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800995a:	e007      	b.n	800996c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	2220      	movs	r2, #32
 8009960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800996c:	6978      	ldr	r0, [r7, #20]
 800996e:	f7fe fd06 	bl	800837e <HAL_I2C_ErrorCallback>
}
 8009972:	bf00      	nop
 8009974:	3718      	adds	r7, #24
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	20000004 	.word	0x20000004
 8009980:	14f8b589 	.word	0x14f8b589

08009984 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	4613      	mov	r3, r2
 8009992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009994:	e025      	b.n	80099e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800999c:	d021      	beq.n	80099e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800999e:	f7fd fb0f 	bl	8006fc0 <HAL_GetTick>
 80099a2:	4602      	mov	r2, r0
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	683a      	ldr	r2, [r7, #0]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d302      	bcc.n	80099b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d116      	bne.n	80099e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2220      	movs	r2, #32
 80099be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ce:	f043 0220 	orr.w	r2, r3, #32
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e023      	b.n	8009a2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	0c1b      	lsrs	r3, r3, #16
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d10d      	bne.n	8009a08 <I2C_WaitOnFlagUntilTimeout+0x84>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	695b      	ldr	r3, [r3, #20]
 80099f2:	43da      	mvns	r2, r3
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	4013      	ands	r3, r2
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	bf0c      	ite	eq
 80099fe:	2301      	moveq	r3, #1
 8009a00:	2300      	movne	r3, #0
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	461a      	mov	r2, r3
 8009a06:	e00c      	b.n	8009a22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	43da      	mvns	r2, r3
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	4013      	ands	r3, r2
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bf0c      	ite	eq
 8009a1a:	2301      	moveq	r3, #1
 8009a1c:	2300      	movne	r3, #0
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	461a      	mov	r2, r3
 8009a22:	79fb      	ldrb	r3, [r7, #7]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d0b6      	beq.n	8009996 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b084      	sub	sp, #16
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	60f8      	str	r0, [r7, #12]
 8009a3a:	60b9      	str	r1, [r7, #8]
 8009a3c:	607a      	str	r2, [r7, #4]
 8009a3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009a40:	e051      	b.n	8009ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	695b      	ldr	r3, [r3, #20]
 8009a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a50:	d123      	bne.n	8009a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009a6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2220      	movs	r2, #32
 8009a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a86:	f043 0204 	orr.w	r2, r3, #4
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e046      	b.n	8009b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009aa0:	d021      	beq.n	8009ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009aa2:	f7fd fa8d 	bl	8006fc0 <HAL_GetTick>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d302      	bcc.n	8009ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d116      	bne.n	8009ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad2:	f043 0220 	orr.w	r2, r3, #32
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e020      	b.n	8009b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	0c1b      	lsrs	r3, r3, #16
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d10c      	bne.n	8009b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	43da      	mvns	r2, r3
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	4013      	ands	r3, r2
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	bf14      	ite	ne
 8009b02:	2301      	movne	r3, #1
 8009b04:	2300      	moveq	r3, #0
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	e00b      	b.n	8009b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	43da      	mvns	r2, r3
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	4013      	ands	r3, r2
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	bf14      	ite	ne
 8009b1c:	2301      	movne	r3, #1
 8009b1e:	2300      	moveq	r3, #0
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d18d      	bne.n	8009a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b3c:	e02d      	b.n	8009b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f000 f900 	bl	8009d44 <I2C_IsAcknowledgeFailed>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d001      	beq.n	8009b4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e02d      	b.n	8009baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b54:	d021      	beq.n	8009b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b56:	f7fd fa33 	bl	8006fc0 <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d302      	bcc.n	8009b6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d116      	bne.n	8009b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2220      	movs	r2, #32
 8009b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b86:	f043 0220 	orr.w	r2, r3, #32
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e007      	b.n	8009baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	695b      	ldr	r3, [r3, #20]
 8009ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ba4:	2b80      	cmp	r3, #128	; 0x80
 8009ba6:	d1ca      	bne.n	8009b3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ba8:	2300      	movs	r3, #0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b084      	sub	sp, #16
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	60f8      	str	r0, [r7, #12]
 8009bba:	60b9      	str	r1, [r7, #8]
 8009bbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009bbe:	e02d      	b.n	8009c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 f8bf 	bl	8009d44 <I2C_IsAcknowledgeFailed>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e02d      	b.n	8009c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bd6:	d021      	beq.n	8009c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bd8:	f7fd f9f2 	bl	8006fc0 <HAL_GetTick>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d302      	bcc.n	8009bee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d116      	bne.n	8009c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2220      	movs	r2, #32
 8009bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c08:	f043 0220 	orr.w	r2, r3, #32
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e007      	b.n	8009c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	f003 0304 	and.w	r3, r3, #4
 8009c26:	2b04      	cmp	r3, #4
 8009c28:	d1ca      	bne.n	8009bc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009c40:	4b13      	ldr	r3, [pc, #76]	; (8009c90 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	08db      	lsrs	r3, r3, #3
 8009c46:	4a13      	ldr	r2, [pc, #76]	; (8009c94 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009c48:	fba2 2303 	umull	r2, r3, r2, r3
 8009c4c:	0a1a      	lsrs	r2, r3, #8
 8009c4e:	4613      	mov	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d107      	bne.n	8009c72 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c66:	f043 0220 	orr.w	r2, r3, #32
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e008      	b.n	8009c84 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c80:	d0e9      	beq.n	8009c56 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	20000004 	.word	0x20000004
 8009c94:	14f8b589 	.word	0x14f8b589

08009c98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ca4:	e042      	b.n	8009d2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	695b      	ldr	r3, [r3, #20]
 8009cac:	f003 0310 	and.w	r3, r3, #16
 8009cb0:	2b10      	cmp	r3, #16
 8009cb2:	d119      	bne.n	8009ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f06f 0210 	mvn.w	r2, #16
 8009cbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2220      	movs	r2, #32
 8009cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e029      	b.n	8009d3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ce8:	f7fd f96a 	bl	8006fc0 <HAL_GetTick>
 8009cec:	4602      	mov	r2, r0
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d302      	bcc.n	8009cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d116      	bne.n	8009d2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2220      	movs	r2, #32
 8009d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d18:	f043 0220 	orr.w	r2, r3, #32
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e007      	b.n	8009d3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	695b      	ldr	r3, [r3, #20]
 8009d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d36:	2b40      	cmp	r3, #64	; 0x40
 8009d38:	d1b5      	bne.n	8009ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	695b      	ldr	r3, [r3, #20]
 8009d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d5a:	d11b      	bne.n	8009d94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2220      	movs	r2, #32
 8009d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d80:	f043 0204 	orr.w	r2, r3, #4
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e000      	b.n	8009d96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	370c      	adds	r7, #12
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dae:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009db2:	d103      	bne.n	8009dbc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009dba:	e007      	b.n	8009dcc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009dc4:	d102      	bne.n	8009dcc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2208      	movs	r2, #8
 8009dca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009dde:	4b06      	ldr	r3, [pc, #24]	; (8009df8 <HAL_PWR_EnableBkUpAccess+0x20>)
 8009de0:	2201      	movs	r2, #1
 8009de2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8009de4:	4b05      	ldr	r3, [pc, #20]	; (8009dfc <HAL_PWR_EnableBkUpAccess+0x24>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8009dea:	687b      	ldr	r3, [r7, #4]
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr
 8009df8:	420e0020 	.word	0x420e0020
 8009dfc:	40007000 	.word	0x40007000

08009e00 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8009e06:	4b06      	ldr	r3, [pc, #24]	; (8009e20 <HAL_PWR_DisableBkUpAccess+0x20>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8009e0c:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <HAL_PWR_DisableBkUpAccess+0x24>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8009e12:	687b      	ldr	r3, [r7, #4]
}
 8009e14:	bf00      	nop
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr
 8009e20:	420e0020 	.word	0x420e0020
 8009e24:	40007000 	.word	0x40007000

08009e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d101      	bne.n	8009e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	e267      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f003 0301 	and.w	r3, r3, #1
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d075      	beq.n	8009f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e46:	4b88      	ldr	r3, [pc, #544]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	f003 030c 	and.w	r3, r3, #12
 8009e4e:	2b04      	cmp	r3, #4
 8009e50:	d00c      	beq.n	8009e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e52:	4b85      	ldr	r3, [pc, #532]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e5a:	2b08      	cmp	r3, #8
 8009e5c:	d112      	bne.n	8009e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e5e:	4b82      	ldr	r3, [pc, #520]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e6a:	d10b      	bne.n	8009e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e6c:	4b7e      	ldr	r3, [pc, #504]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d05b      	beq.n	8009f30 <HAL_RCC_OscConfig+0x108>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d157      	bne.n	8009f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e242      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e8c:	d106      	bne.n	8009e9c <HAL_RCC_OscConfig+0x74>
 8009e8e:	4b76      	ldr	r3, [pc, #472]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a75      	ldr	r2, [pc, #468]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e98:	6013      	str	r3, [r2, #0]
 8009e9a:	e01d      	b.n	8009ed8 <HAL_RCC_OscConfig+0xb0>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ea4:	d10c      	bne.n	8009ec0 <HAL_RCC_OscConfig+0x98>
 8009ea6:	4b70      	ldr	r3, [pc, #448]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a6f      	ldr	r2, [pc, #444]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009eb0:	6013      	str	r3, [r2, #0]
 8009eb2:	4b6d      	ldr	r3, [pc, #436]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a6c      	ldr	r2, [pc, #432]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ebc:	6013      	str	r3, [r2, #0]
 8009ebe:	e00b      	b.n	8009ed8 <HAL_RCC_OscConfig+0xb0>
 8009ec0:	4b69      	ldr	r3, [pc, #420]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a68      	ldr	r2, [pc, #416]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eca:	6013      	str	r3, [r2, #0]
 8009ecc:	4b66      	ldr	r3, [pc, #408]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a65      	ldr	r2, [pc, #404]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d013      	beq.n	8009f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ee0:	f7fd f86e 	bl	8006fc0 <HAL_GetTick>
 8009ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ee6:	e008      	b.n	8009efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ee8:	f7fd f86a 	bl	8006fc0 <HAL_GetTick>
 8009eec:	4602      	mov	r2, r0
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	2b64      	cmp	r3, #100	; 0x64
 8009ef4:	d901      	bls.n	8009efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e207      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009efa:	4b5b      	ldr	r3, [pc, #364]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d0f0      	beq.n	8009ee8 <HAL_RCC_OscConfig+0xc0>
 8009f06:	e014      	b.n	8009f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f08:	f7fd f85a 	bl	8006fc0 <HAL_GetTick>
 8009f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f0e:	e008      	b.n	8009f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f10:	f7fd f856 	bl	8006fc0 <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	2b64      	cmp	r3, #100	; 0x64
 8009f1c:	d901      	bls.n	8009f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009f1e:	2303      	movs	r3, #3
 8009f20:	e1f3      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f22:	4b51      	ldr	r3, [pc, #324]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1f0      	bne.n	8009f10 <HAL_RCC_OscConfig+0xe8>
 8009f2e:	e000      	b.n	8009f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d063      	beq.n	800a006 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009f3e:	4b4a      	ldr	r3, [pc, #296]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f003 030c 	and.w	r3, r3, #12
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00b      	beq.n	8009f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f4a:	4b47      	ldr	r3, [pc, #284]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009f52:	2b08      	cmp	r3, #8
 8009f54:	d11c      	bne.n	8009f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f56:	4b44      	ldr	r3, [pc, #272]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d116      	bne.n	8009f90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f62:	4b41      	ldr	r3, [pc, #260]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 0302 	and.w	r3, r3, #2
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d005      	beq.n	8009f7a <HAL_RCC_OscConfig+0x152>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d001      	beq.n	8009f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e1c7      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f7a:	4b3b      	ldr	r3, [pc, #236]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	00db      	lsls	r3, r3, #3
 8009f88:	4937      	ldr	r1, [pc, #220]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f8e:	e03a      	b.n	800a006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d020      	beq.n	8009fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f98:	4b34      	ldr	r3, [pc, #208]	; (800a06c <HAL_RCC_OscConfig+0x244>)
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f9e:	f7fd f80f 	bl	8006fc0 <HAL_GetTick>
 8009fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fa4:	e008      	b.n	8009fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009fa6:	f7fd f80b 	bl	8006fc0 <HAL_GetTick>
 8009faa:	4602      	mov	r2, r0
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d901      	bls.n	8009fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e1a8      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fb8:	4b2b      	ldr	r3, [pc, #172]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 0302 	and.w	r3, r3, #2
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d0f0      	beq.n	8009fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fc4:	4b28      	ldr	r3, [pc, #160]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	00db      	lsls	r3, r3, #3
 8009fd2:	4925      	ldr	r1, [pc, #148]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	600b      	str	r3, [r1, #0]
 8009fd8:	e015      	b.n	800a006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fda:	4b24      	ldr	r3, [pc, #144]	; (800a06c <HAL_RCC_OscConfig+0x244>)
 8009fdc:	2200      	movs	r2, #0
 8009fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe0:	f7fc ffee 	bl	8006fc0 <HAL_GetTick>
 8009fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fe6:	e008      	b.n	8009ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009fe8:	f7fc ffea 	bl	8006fc0 <HAL_GetTick>
 8009fec:	4602      	mov	r2, r0
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d901      	bls.n	8009ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009ff6:	2303      	movs	r3, #3
 8009ff8:	e187      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ffa:	4b1b      	ldr	r3, [pc, #108]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 0302 	and.w	r3, r3, #2
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1f0      	bne.n	8009fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 0308 	and.w	r3, r3, #8
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d036      	beq.n	800a080 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d016      	beq.n	800a048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a01a:	4b15      	ldr	r3, [pc, #84]	; (800a070 <HAL_RCC_OscConfig+0x248>)
 800a01c:	2201      	movs	r2, #1
 800a01e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a020:	f7fc ffce 	bl	8006fc0 <HAL_GetTick>
 800a024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a026:	e008      	b.n	800a03a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a028:	f7fc ffca 	bl	8006fc0 <HAL_GetTick>
 800a02c:	4602      	mov	r2, r0
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	2b02      	cmp	r3, #2
 800a034:	d901      	bls.n	800a03a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e167      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a03a:	4b0b      	ldr	r3, [pc, #44]	; (800a068 <HAL_RCC_OscConfig+0x240>)
 800a03c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a03e:	f003 0302 	and.w	r3, r3, #2
 800a042:	2b00      	cmp	r3, #0
 800a044:	d0f0      	beq.n	800a028 <HAL_RCC_OscConfig+0x200>
 800a046:	e01b      	b.n	800a080 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a048:	4b09      	ldr	r3, [pc, #36]	; (800a070 <HAL_RCC_OscConfig+0x248>)
 800a04a:	2200      	movs	r2, #0
 800a04c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a04e:	f7fc ffb7 	bl	8006fc0 <HAL_GetTick>
 800a052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a054:	e00e      	b.n	800a074 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a056:	f7fc ffb3 	bl	8006fc0 <HAL_GetTick>
 800a05a:	4602      	mov	r2, r0
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	2b02      	cmp	r3, #2
 800a062:	d907      	bls.n	800a074 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a064:	2303      	movs	r3, #3
 800a066:	e150      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
 800a068:	40023800 	.word	0x40023800
 800a06c:	42470000 	.word	0x42470000
 800a070:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a074:	4b88      	ldr	r3, [pc, #544]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a078:	f003 0302 	and.w	r3, r3, #2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1ea      	bne.n	800a056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0304 	and.w	r3, r3, #4
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 8097 	beq.w	800a1bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a08e:	2300      	movs	r3, #0
 800a090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a092:	4b81      	ldr	r3, [pc, #516]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10f      	bne.n	800a0be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a09e:	2300      	movs	r3, #0
 800a0a0:	60bb      	str	r3, [r7, #8]
 800a0a2:	4b7d      	ldr	r3, [pc, #500]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a6:	4a7c      	ldr	r2, [pc, #496]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a0a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0ac:	6413      	str	r3, [r2, #64]	; 0x40
 800a0ae:	4b7a      	ldr	r3, [pc, #488]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0b6:	60bb      	str	r3, [r7, #8]
 800a0b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0be:	4b77      	ldr	r3, [pc, #476]	; (800a29c <HAL_RCC_OscConfig+0x474>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d118      	bne.n	800a0fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a0ca:	4b74      	ldr	r3, [pc, #464]	; (800a29c <HAL_RCC_OscConfig+0x474>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a73      	ldr	r2, [pc, #460]	; (800a29c <HAL_RCC_OscConfig+0x474>)
 800a0d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a0d6:	f7fc ff73 	bl	8006fc0 <HAL_GetTick>
 800a0da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0dc:	e008      	b.n	800a0f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0de:	f7fc ff6f 	bl	8006fc0 <HAL_GetTick>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d901      	bls.n	800a0f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e10c      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0f0:	4b6a      	ldr	r3, [pc, #424]	; (800a29c <HAL_RCC_OscConfig+0x474>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d0f0      	beq.n	800a0de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d106      	bne.n	800a112 <HAL_RCC_OscConfig+0x2ea>
 800a104:	4b64      	ldr	r3, [pc, #400]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a108:	4a63      	ldr	r2, [pc, #396]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a10a:	f043 0301 	orr.w	r3, r3, #1
 800a10e:	6713      	str	r3, [r2, #112]	; 0x70
 800a110:	e01c      	b.n	800a14c <HAL_RCC_OscConfig+0x324>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	2b05      	cmp	r3, #5
 800a118:	d10c      	bne.n	800a134 <HAL_RCC_OscConfig+0x30c>
 800a11a:	4b5f      	ldr	r3, [pc, #380]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a11e:	4a5e      	ldr	r2, [pc, #376]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a120:	f043 0304 	orr.w	r3, r3, #4
 800a124:	6713      	str	r3, [r2, #112]	; 0x70
 800a126:	4b5c      	ldr	r3, [pc, #368]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a12a:	4a5b      	ldr	r2, [pc, #364]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a12c:	f043 0301 	orr.w	r3, r3, #1
 800a130:	6713      	str	r3, [r2, #112]	; 0x70
 800a132:	e00b      	b.n	800a14c <HAL_RCC_OscConfig+0x324>
 800a134:	4b58      	ldr	r3, [pc, #352]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a138:	4a57      	ldr	r2, [pc, #348]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a13a:	f023 0301 	bic.w	r3, r3, #1
 800a13e:	6713      	str	r3, [r2, #112]	; 0x70
 800a140:	4b55      	ldr	r3, [pc, #340]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a144:	4a54      	ldr	r2, [pc, #336]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a146:	f023 0304 	bic.w	r3, r3, #4
 800a14a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d015      	beq.n	800a180 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a154:	f7fc ff34 	bl	8006fc0 <HAL_GetTick>
 800a158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a15a:	e00a      	b.n	800a172 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a15c:	f7fc ff30 	bl	8006fc0 <HAL_GetTick>
 800a160:	4602      	mov	r2, r0
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	f241 3288 	movw	r2, #5000	; 0x1388
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d901      	bls.n	800a172 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a16e:	2303      	movs	r3, #3
 800a170:	e0cb      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a172:	4b49      	ldr	r3, [pc, #292]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a176:	f003 0302 	and.w	r3, r3, #2
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d0ee      	beq.n	800a15c <HAL_RCC_OscConfig+0x334>
 800a17e:	e014      	b.n	800a1aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a180:	f7fc ff1e 	bl	8006fc0 <HAL_GetTick>
 800a184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a186:	e00a      	b.n	800a19e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a188:	f7fc ff1a 	bl	8006fc0 <HAL_GetTick>
 800a18c:	4602      	mov	r2, r0
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	f241 3288 	movw	r2, #5000	; 0x1388
 800a196:	4293      	cmp	r3, r2
 800a198:	d901      	bls.n	800a19e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e0b5      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a19e:	4b3e      	ldr	r3, [pc, #248]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1a2:	f003 0302 	and.w	r3, r3, #2
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1ee      	bne.n	800a188 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a1aa:	7dfb      	ldrb	r3, [r7, #23]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d105      	bne.n	800a1bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1b0:	4b39      	ldr	r3, [pc, #228]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b4:	4a38      	ldr	r2, [pc, #224]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a1b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f000 80a1 	beq.w	800a308 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a1c6:	4b34      	ldr	r3, [pc, #208]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	f003 030c 	and.w	r3, r3, #12
 800a1ce:	2b08      	cmp	r3, #8
 800a1d0:	d05c      	beq.n	800a28c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d141      	bne.n	800a25e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1da:	4b31      	ldr	r3, [pc, #196]	; (800a2a0 <HAL_RCC_OscConfig+0x478>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1e0:	f7fc feee 	bl	8006fc0 <HAL_GetTick>
 800a1e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1e6:	e008      	b.n	800a1fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1e8:	f7fc feea 	bl	8006fc0 <HAL_GetTick>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d901      	bls.n	800a1fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e087      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1fa:	4b27      	ldr	r3, [pc, #156]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1f0      	bne.n	800a1e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	69da      	ldr	r2, [r3, #28]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	431a      	orrs	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a214:	019b      	lsls	r3, r3, #6
 800a216:	431a      	orrs	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21c:	085b      	lsrs	r3, r3, #1
 800a21e:	3b01      	subs	r3, #1
 800a220:	041b      	lsls	r3, r3, #16
 800a222:	431a      	orrs	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a228:	061b      	lsls	r3, r3, #24
 800a22a:	491b      	ldr	r1, [pc, #108]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a22c:	4313      	orrs	r3, r2
 800a22e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a230:	4b1b      	ldr	r3, [pc, #108]	; (800a2a0 <HAL_RCC_OscConfig+0x478>)
 800a232:	2201      	movs	r2, #1
 800a234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a236:	f7fc fec3 	bl	8006fc0 <HAL_GetTick>
 800a23a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a23c:	e008      	b.n	800a250 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a23e:	f7fc febf 	bl	8006fc0 <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d901      	bls.n	800a250 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e05c      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a250:	4b11      	ldr	r3, [pc, #68]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d0f0      	beq.n	800a23e <HAL_RCC_OscConfig+0x416>
 800a25c:	e054      	b.n	800a308 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a25e:	4b10      	ldr	r3, [pc, #64]	; (800a2a0 <HAL_RCC_OscConfig+0x478>)
 800a260:	2200      	movs	r2, #0
 800a262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a264:	f7fc feac 	bl	8006fc0 <HAL_GetTick>
 800a268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a26a:	e008      	b.n	800a27e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a26c:	f7fc fea8 	bl	8006fc0 <HAL_GetTick>
 800a270:	4602      	mov	r2, r0
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	2b02      	cmp	r3, #2
 800a278:	d901      	bls.n	800a27e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e045      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a27e:	4b06      	ldr	r3, [pc, #24]	; (800a298 <HAL_RCC_OscConfig+0x470>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1f0      	bne.n	800a26c <HAL_RCC_OscConfig+0x444>
 800a28a:	e03d      	b.n	800a308 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d107      	bne.n	800a2a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	e038      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
 800a298:	40023800 	.word	0x40023800
 800a29c:	40007000 	.word	0x40007000
 800a2a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a2a4:	4b1b      	ldr	r3, [pc, #108]	; (800a314 <HAL_RCC_OscConfig+0x4ec>)
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d028      	beq.n	800a304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d121      	bne.n	800a304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d11a      	bne.n	800a304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a2da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d111      	bne.n	800a304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ea:	085b      	lsrs	r3, r3, #1
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d107      	bne.n	800a304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a300:	429a      	cmp	r2, r3
 800a302:	d001      	beq.n	800a308 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	e000      	b.n	800a30a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3718      	adds	r7, #24
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	40023800 	.word	0x40023800

0800a318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	e0cc      	b.n	800a4c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a32c:	4b68      	ldr	r3, [pc, #416]	; (800a4d0 <HAL_RCC_ClockConfig+0x1b8>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0307 	and.w	r3, r3, #7
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d90c      	bls.n	800a354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a33a:	4b65      	ldr	r3, [pc, #404]	; (800a4d0 <HAL_RCC_ClockConfig+0x1b8>)
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	b2d2      	uxtb	r2, r2
 800a340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a342:	4b63      	ldr	r3, [pc, #396]	; (800a4d0 <HAL_RCC_ClockConfig+0x1b8>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d001      	beq.n	800a354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	e0b8      	b.n	800a4c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 0302 	and.w	r3, r3, #2
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d020      	beq.n	800a3a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0304 	and.w	r3, r3, #4
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d005      	beq.n	800a378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a36c:	4b59      	ldr	r3, [pc, #356]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	4a58      	ldr	r2, [pc, #352]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 0308 	and.w	r3, r3, #8
 800a380:	2b00      	cmp	r3, #0
 800a382:	d005      	beq.n	800a390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a384:	4b53      	ldr	r3, [pc, #332]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	4a52      	ldr	r2, [pc, #328]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a38a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a38e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a390:	4b50      	ldr	r3, [pc, #320]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	494d      	ldr	r1, [pc, #308]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f003 0301 	and.w	r3, r3, #1
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d044      	beq.n	800a438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d107      	bne.n	800a3c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3b6:	4b47      	ldr	r3, [pc, #284]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d119      	bne.n	800a3f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e07f      	b.n	800a4c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d003      	beq.n	800a3d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d107      	bne.n	800a3e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3d6:	4b3f      	ldr	r3, [pc, #252]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d109      	bne.n	800a3f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e06f      	b.n	800a4c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3e6:	4b3b      	ldr	r3, [pc, #236]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0302 	and.w	r3, r3, #2
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e067      	b.n	800a4c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a3f6:	4b37      	ldr	r3, [pc, #220]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	f023 0203 	bic.w	r2, r3, #3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	4934      	ldr	r1, [pc, #208]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a404:	4313      	orrs	r3, r2
 800a406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a408:	f7fc fdda 	bl	8006fc0 <HAL_GetTick>
 800a40c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a40e:	e00a      	b.n	800a426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a410:	f7fc fdd6 	bl	8006fc0 <HAL_GetTick>
 800a414:	4602      	mov	r2, r0
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a41e:	4293      	cmp	r3, r2
 800a420:	d901      	bls.n	800a426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a422:	2303      	movs	r3, #3
 800a424:	e04f      	b.n	800a4c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a426:	4b2b      	ldr	r3, [pc, #172]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	f003 020c 	and.w	r2, r3, #12
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	429a      	cmp	r2, r3
 800a436:	d1eb      	bne.n	800a410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a438:	4b25      	ldr	r3, [pc, #148]	; (800a4d0 <HAL_RCC_ClockConfig+0x1b8>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0307 	and.w	r3, r3, #7
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	429a      	cmp	r2, r3
 800a444:	d20c      	bcs.n	800a460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a446:	4b22      	ldr	r3, [pc, #136]	; (800a4d0 <HAL_RCC_ClockConfig+0x1b8>)
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	b2d2      	uxtb	r2, r2
 800a44c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a44e:	4b20      	ldr	r3, [pc, #128]	; (800a4d0 <HAL_RCC_ClockConfig+0x1b8>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0307 	and.w	r3, r3, #7
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d001      	beq.n	800a460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e032      	b.n	800a4c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d008      	beq.n	800a47e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a46c:	4b19      	ldr	r3, [pc, #100]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	4916      	ldr	r1, [pc, #88]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a47a:	4313      	orrs	r3, r2
 800a47c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0308 	and.w	r3, r3, #8
 800a486:	2b00      	cmp	r3, #0
 800a488:	d009      	beq.n	800a49e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a48a:	4b12      	ldr	r3, [pc, #72]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	00db      	lsls	r3, r3, #3
 800a498:	490e      	ldr	r1, [pc, #56]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a49a:	4313      	orrs	r3, r2
 800a49c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a49e:	f000 f821 	bl	800a4e4 <HAL_RCC_GetSysClockFreq>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	4b0b      	ldr	r3, [pc, #44]	; (800a4d4 <HAL_RCC_ClockConfig+0x1bc>)
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	091b      	lsrs	r3, r3, #4
 800a4aa:	f003 030f 	and.w	r3, r3, #15
 800a4ae:	490a      	ldr	r1, [pc, #40]	; (800a4d8 <HAL_RCC_ClockConfig+0x1c0>)
 800a4b0:	5ccb      	ldrb	r3, [r1, r3]
 800a4b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b6:	4a09      	ldr	r2, [pc, #36]	; (800a4dc <HAL_RCC_ClockConfig+0x1c4>)
 800a4b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a4ba:	4b09      	ldr	r3, [pc, #36]	; (800a4e0 <HAL_RCC_ClockConfig+0x1c8>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fc fd3a 	bl	8006f38 <HAL_InitTick>

  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	40023c00 	.word	0x40023c00
 800a4d4:	40023800 	.word	0x40023800
 800a4d8:	080152f0 	.word	0x080152f0
 800a4dc:	20000004 	.word	0x20000004
 800a4e0:	20000008 	.word	0x20000008

0800a4e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4e8:	b090      	sub	sp, #64	; 0x40
 800a4ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	637b      	str	r3, [r7, #52]	; 0x34
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4fc:	4b59      	ldr	r3, [pc, #356]	; (800a664 <HAL_RCC_GetSysClockFreq+0x180>)
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	f003 030c 	and.w	r3, r3, #12
 800a504:	2b08      	cmp	r3, #8
 800a506:	d00d      	beq.n	800a524 <HAL_RCC_GetSysClockFreq+0x40>
 800a508:	2b08      	cmp	r3, #8
 800a50a:	f200 80a1 	bhi.w	800a650 <HAL_RCC_GetSysClockFreq+0x16c>
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d002      	beq.n	800a518 <HAL_RCC_GetSysClockFreq+0x34>
 800a512:	2b04      	cmp	r3, #4
 800a514:	d003      	beq.n	800a51e <HAL_RCC_GetSysClockFreq+0x3a>
 800a516:	e09b      	b.n	800a650 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a518:	4b53      	ldr	r3, [pc, #332]	; (800a668 <HAL_RCC_GetSysClockFreq+0x184>)
 800a51a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800a51c:	e09b      	b.n	800a656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a51e:	4b53      	ldr	r3, [pc, #332]	; (800a66c <HAL_RCC_GetSysClockFreq+0x188>)
 800a520:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a522:	e098      	b.n	800a656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a524:	4b4f      	ldr	r3, [pc, #316]	; (800a664 <HAL_RCC_GetSysClockFreq+0x180>)
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a52c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a52e:	4b4d      	ldr	r3, [pc, #308]	; (800a664 <HAL_RCC_GetSysClockFreq+0x180>)
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a536:	2b00      	cmp	r3, #0
 800a538:	d028      	beq.n	800a58c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a53a:	4b4a      	ldr	r3, [pc, #296]	; (800a664 <HAL_RCC_GetSysClockFreq+0x180>)
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	099b      	lsrs	r3, r3, #6
 800a540:	2200      	movs	r2, #0
 800a542:	623b      	str	r3, [r7, #32]
 800a544:	627a      	str	r2, [r7, #36]	; 0x24
 800a546:	6a3b      	ldr	r3, [r7, #32]
 800a548:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a54c:	2100      	movs	r1, #0
 800a54e:	4b47      	ldr	r3, [pc, #284]	; (800a66c <HAL_RCC_GetSysClockFreq+0x188>)
 800a550:	fb03 f201 	mul.w	r2, r3, r1
 800a554:	2300      	movs	r3, #0
 800a556:	fb00 f303 	mul.w	r3, r0, r3
 800a55a:	4413      	add	r3, r2
 800a55c:	4a43      	ldr	r2, [pc, #268]	; (800a66c <HAL_RCC_GetSysClockFreq+0x188>)
 800a55e:	fba0 1202 	umull	r1, r2, r0, r2
 800a562:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a564:	460a      	mov	r2, r1
 800a566:	62ba      	str	r2, [r7, #40]	; 0x28
 800a568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a56a:	4413      	add	r3, r2
 800a56c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a570:	2200      	movs	r2, #0
 800a572:	61bb      	str	r3, [r7, #24]
 800a574:	61fa      	str	r2, [r7, #28]
 800a576:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a57a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a57e:	f7f6 fb83 	bl	8000c88 <__aeabi_uldivmod>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	4613      	mov	r3, r2
 800a588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a58a:	e053      	b.n	800a634 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a58c:	4b35      	ldr	r3, [pc, #212]	; (800a664 <HAL_RCC_GetSysClockFreq+0x180>)
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	099b      	lsrs	r3, r3, #6
 800a592:	2200      	movs	r2, #0
 800a594:	613b      	str	r3, [r7, #16]
 800a596:	617a      	str	r2, [r7, #20]
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a59e:	f04f 0b00 	mov.w	fp, #0
 800a5a2:	4652      	mov	r2, sl
 800a5a4:	465b      	mov	r3, fp
 800a5a6:	f04f 0000 	mov.w	r0, #0
 800a5aa:	f04f 0100 	mov.w	r1, #0
 800a5ae:	0159      	lsls	r1, r3, #5
 800a5b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a5b4:	0150      	lsls	r0, r2, #5
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	ebb2 080a 	subs.w	r8, r2, sl
 800a5be:	eb63 090b 	sbc.w	r9, r3, fp
 800a5c2:	f04f 0200 	mov.w	r2, #0
 800a5c6:	f04f 0300 	mov.w	r3, #0
 800a5ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a5ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a5d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a5d6:	ebb2 0408 	subs.w	r4, r2, r8
 800a5da:	eb63 0509 	sbc.w	r5, r3, r9
 800a5de:	f04f 0200 	mov.w	r2, #0
 800a5e2:	f04f 0300 	mov.w	r3, #0
 800a5e6:	00eb      	lsls	r3, r5, #3
 800a5e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a5ec:	00e2      	lsls	r2, r4, #3
 800a5ee:	4614      	mov	r4, r2
 800a5f0:	461d      	mov	r5, r3
 800a5f2:	eb14 030a 	adds.w	r3, r4, sl
 800a5f6:	603b      	str	r3, [r7, #0]
 800a5f8:	eb45 030b 	adc.w	r3, r5, fp
 800a5fc:	607b      	str	r3, [r7, #4]
 800a5fe:	f04f 0200 	mov.w	r2, #0
 800a602:	f04f 0300 	mov.w	r3, #0
 800a606:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a60a:	4629      	mov	r1, r5
 800a60c:	028b      	lsls	r3, r1, #10
 800a60e:	4621      	mov	r1, r4
 800a610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a614:	4621      	mov	r1, r4
 800a616:	028a      	lsls	r2, r1, #10
 800a618:	4610      	mov	r0, r2
 800a61a:	4619      	mov	r1, r3
 800a61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61e:	2200      	movs	r2, #0
 800a620:	60bb      	str	r3, [r7, #8]
 800a622:	60fa      	str	r2, [r7, #12]
 800a624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a628:	f7f6 fb2e 	bl	8000c88 <__aeabi_uldivmod>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	4613      	mov	r3, r2
 800a632:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a634:	4b0b      	ldr	r3, [pc, #44]	; (800a664 <HAL_RCC_GetSysClockFreq+0x180>)
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	0c1b      	lsrs	r3, r3, #16
 800a63a:	f003 0303 	and.w	r3, r3, #3
 800a63e:	3301      	adds	r3, #1
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800a644:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a648:	fbb2 f3f3 	udiv	r3, r2, r3
 800a64c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a64e:	e002      	b.n	800a656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a650:	4b05      	ldr	r3, [pc, #20]	; (800a668 <HAL_RCC_GetSysClockFreq+0x184>)
 800a652:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a654:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3740      	adds	r7, #64	; 0x40
 800a65c:	46bd      	mov	sp, r7
 800a65e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a662:	bf00      	nop
 800a664:	40023800 	.word	0x40023800
 800a668:	00f42400 	.word	0x00f42400
 800a66c:	017d7840 	.word	0x017d7840

0800a670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a670:	b480      	push	{r7}
 800a672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a674:	4b03      	ldr	r3, [pc, #12]	; (800a684 <HAL_RCC_GetHCLKFreq+0x14>)
 800a676:	681b      	ldr	r3, [r3, #0]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	20000004 	.word	0x20000004

0800a688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a68c:	f7ff fff0 	bl	800a670 <HAL_RCC_GetHCLKFreq>
 800a690:	4602      	mov	r2, r0
 800a692:	4b05      	ldr	r3, [pc, #20]	; (800a6a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	0a9b      	lsrs	r3, r3, #10
 800a698:	f003 0307 	and.w	r3, r3, #7
 800a69c:	4903      	ldr	r1, [pc, #12]	; (800a6ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800a69e:	5ccb      	ldrb	r3, [r1, r3]
 800a6a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	40023800 	.word	0x40023800
 800a6ac:	08015300 	.word	0x08015300

0800a6b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a6b4:	f7ff ffdc 	bl	800a670 <HAL_RCC_GetHCLKFreq>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	4b05      	ldr	r3, [pc, #20]	; (800a6d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	0b5b      	lsrs	r3, r3, #13
 800a6c0:	f003 0307 	and.w	r3, r3, #7
 800a6c4:	4903      	ldr	r1, [pc, #12]	; (800a6d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a6c6:	5ccb      	ldrb	r3, [r1, r3]
 800a6c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	40023800 	.word	0x40023800
 800a6d4:	08015300 	.word	0x08015300

0800a6d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d101      	bne.n	800a6ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e041      	b.n	800a76e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d106      	bne.n	800a704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f7fc f8e2 	bl	80068c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2202      	movs	r2, #2
 800a708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	3304      	adds	r3, #4
 800a714:	4619      	mov	r1, r3
 800a716:	4610      	mov	r0, r2
 800a718:	f000 ff94 	bl	800b644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b082      	sub	sp, #8
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e041      	b.n	800a80c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	2b00      	cmp	r3, #0
 800a792:	d106      	bne.n	800a7a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 f839 	bl	800a814 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2202      	movs	r2, #2
 800a7a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	3304      	adds	r3, #4
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	4610      	mov	r0, r2
 800a7b6:	f000 ff45 	bl	800b644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2201      	movs	r2, #1
 800a7de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a81c:	bf00      	nop
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d109      	bne.n	800a84c <HAL_TIM_PWM_Start+0x24>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	2b01      	cmp	r3, #1
 800a842:	bf14      	ite	ne
 800a844:	2301      	movne	r3, #1
 800a846:	2300      	moveq	r3, #0
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	e022      	b.n	800a892 <HAL_TIM_PWM_Start+0x6a>
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	2b04      	cmp	r3, #4
 800a850:	d109      	bne.n	800a866 <HAL_TIM_PWM_Start+0x3e>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	bf14      	ite	ne
 800a85e:	2301      	movne	r3, #1
 800a860:	2300      	moveq	r3, #0
 800a862:	b2db      	uxtb	r3, r3
 800a864:	e015      	b.n	800a892 <HAL_TIM_PWM_Start+0x6a>
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	2b08      	cmp	r3, #8
 800a86a:	d109      	bne.n	800a880 <HAL_TIM_PWM_Start+0x58>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a872:	b2db      	uxtb	r3, r3
 800a874:	2b01      	cmp	r3, #1
 800a876:	bf14      	ite	ne
 800a878:	2301      	movne	r3, #1
 800a87a:	2300      	moveq	r3, #0
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	e008      	b.n	800a892 <HAL_TIM_PWM_Start+0x6a>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a886:	b2db      	uxtb	r3, r3
 800a888:	2b01      	cmp	r3, #1
 800a88a:	bf14      	ite	ne
 800a88c:	2301      	movne	r3, #1
 800a88e:	2300      	moveq	r3, #0
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	e07c      	b.n	800a994 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d104      	bne.n	800a8aa <HAL_TIM_PWM_Start+0x82>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8a8:	e013      	b.n	800a8d2 <HAL_TIM_PWM_Start+0xaa>
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	2b04      	cmp	r3, #4
 800a8ae:	d104      	bne.n	800a8ba <HAL_TIM_PWM_Start+0x92>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2202      	movs	r2, #2
 800a8b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8b8:	e00b      	b.n	800a8d2 <HAL_TIM_PWM_Start+0xaa>
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b08      	cmp	r3, #8
 800a8be:	d104      	bne.n	800a8ca <HAL_TIM_PWM_Start+0xa2>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2202      	movs	r2, #2
 800a8c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8c8:	e003      	b.n	800a8d2 <HAL_TIM_PWM_Start+0xaa>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	6839      	ldr	r1, [r7, #0]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f001 fac6 	bl	800be6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a2d      	ldr	r2, [pc, #180]	; (800a99c <HAL_TIM_PWM_Start+0x174>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d004      	beq.n	800a8f4 <HAL_TIM_PWM_Start+0xcc>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a2c      	ldr	r2, [pc, #176]	; (800a9a0 <HAL_TIM_PWM_Start+0x178>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d101      	bne.n	800a8f8 <HAL_TIM_PWM_Start+0xd0>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e000      	b.n	800a8fa <HAL_TIM_PWM_Start+0xd2>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d007      	beq.n	800a90e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a90c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a22      	ldr	r2, [pc, #136]	; (800a99c <HAL_TIM_PWM_Start+0x174>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d022      	beq.n	800a95e <HAL_TIM_PWM_Start+0x136>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a920:	d01d      	beq.n	800a95e <HAL_TIM_PWM_Start+0x136>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a1f      	ldr	r2, [pc, #124]	; (800a9a4 <HAL_TIM_PWM_Start+0x17c>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d018      	beq.n	800a95e <HAL_TIM_PWM_Start+0x136>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a1d      	ldr	r2, [pc, #116]	; (800a9a8 <HAL_TIM_PWM_Start+0x180>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d013      	beq.n	800a95e <HAL_TIM_PWM_Start+0x136>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a1c      	ldr	r2, [pc, #112]	; (800a9ac <HAL_TIM_PWM_Start+0x184>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d00e      	beq.n	800a95e <HAL_TIM_PWM_Start+0x136>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a16      	ldr	r2, [pc, #88]	; (800a9a0 <HAL_TIM_PWM_Start+0x178>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d009      	beq.n	800a95e <HAL_TIM_PWM_Start+0x136>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a18      	ldr	r2, [pc, #96]	; (800a9b0 <HAL_TIM_PWM_Start+0x188>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d004      	beq.n	800a95e <HAL_TIM_PWM_Start+0x136>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a16      	ldr	r2, [pc, #88]	; (800a9b4 <HAL_TIM_PWM_Start+0x18c>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d111      	bne.n	800a982 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	f003 0307 	and.w	r3, r3, #7
 800a968:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2b06      	cmp	r3, #6
 800a96e:	d010      	beq.n	800a992 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f042 0201 	orr.w	r2, r2, #1
 800a97e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a980:	e007      	b.n	800a992 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f042 0201 	orr.w	r2, r2, #1
 800a990:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	40010000 	.word	0x40010000
 800a9a0:	40010400 	.word	0x40010400
 800a9a4:	40000400 	.word	0x40000400
 800a9a8:	40000800 	.word	0x40000800
 800a9ac:	40000c00 	.word	0x40000c00
 800a9b0:	40014000 	.word	0x40014000
 800a9b4:	40001800 	.word	0x40001800

0800a9b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d101      	bne.n	800a9ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e041      	b.n	800aa4e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d106      	bne.n	800a9e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7fc f86a 	bl	8006ab8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2202      	movs	r2, #2
 800a9e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	4610      	mov	r0, r2
 800a9f8:	f000 fe24 	bl	800b644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
	...

0800aa58 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa62:	2300      	movs	r3, #0
 800aa64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d104      	bne.n	800aa76 <HAL_TIM_IC_Start_IT+0x1e>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	e013      	b.n	800aa9e <HAL_TIM_IC_Start_IT+0x46>
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	2b04      	cmp	r3, #4
 800aa7a:	d104      	bne.n	800aa86 <HAL_TIM_IC_Start_IT+0x2e>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	e00b      	b.n	800aa9e <HAL_TIM_IC_Start_IT+0x46>
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	2b08      	cmp	r3, #8
 800aa8a:	d104      	bne.n	800aa96 <HAL_TIM_IC_Start_IT+0x3e>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	e003      	b.n	800aa9e <HAL_TIM_IC_Start_IT+0x46>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d104      	bne.n	800aab0 <HAL_TIM_IC_Start_IT+0x58>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	e013      	b.n	800aad8 <HAL_TIM_IC_Start_IT+0x80>
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2b04      	cmp	r3, #4
 800aab4:	d104      	bne.n	800aac0 <HAL_TIM_IC_Start_IT+0x68>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	e00b      	b.n	800aad8 <HAL_TIM_IC_Start_IT+0x80>
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	2b08      	cmp	r3, #8
 800aac4:	d104      	bne.n	800aad0 <HAL_TIM_IC_Start_IT+0x78>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	e003      	b.n	800aad8 <HAL_TIM_IC_Start_IT+0x80>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800aada:	7bbb      	ldrb	r3, [r7, #14]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d102      	bne.n	800aae6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800aae0:	7b7b      	ldrb	r3, [r7, #13]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d001      	beq.n	800aaea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	e0cc      	b.n	800ac84 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d104      	bne.n	800aafa <HAL_TIM_IC_Start_IT+0xa2>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2202      	movs	r2, #2
 800aaf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aaf8:	e013      	b.n	800ab22 <HAL_TIM_IC_Start_IT+0xca>
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	2b04      	cmp	r3, #4
 800aafe:	d104      	bne.n	800ab0a <HAL_TIM_IC_Start_IT+0xb2>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2202      	movs	r2, #2
 800ab04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab08:	e00b      	b.n	800ab22 <HAL_TIM_IC_Start_IT+0xca>
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	2b08      	cmp	r3, #8
 800ab0e:	d104      	bne.n	800ab1a <HAL_TIM_IC_Start_IT+0xc2>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2202      	movs	r2, #2
 800ab14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab18:	e003      	b.n	800ab22 <HAL_TIM_IC_Start_IT+0xca>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2202      	movs	r2, #2
 800ab1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d104      	bne.n	800ab32 <HAL_TIM_IC_Start_IT+0xda>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2202      	movs	r2, #2
 800ab2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab30:	e013      	b.n	800ab5a <HAL_TIM_IC_Start_IT+0x102>
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	2b04      	cmp	r3, #4
 800ab36:	d104      	bne.n	800ab42 <HAL_TIM_IC_Start_IT+0xea>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2202      	movs	r2, #2
 800ab3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab40:	e00b      	b.n	800ab5a <HAL_TIM_IC_Start_IT+0x102>
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b08      	cmp	r3, #8
 800ab46:	d104      	bne.n	800ab52 <HAL_TIM_IC_Start_IT+0xfa>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2202      	movs	r2, #2
 800ab4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab50:	e003      	b.n	800ab5a <HAL_TIM_IC_Start_IT+0x102>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2202      	movs	r2, #2
 800ab56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	2b0c      	cmp	r3, #12
 800ab5e:	d841      	bhi.n	800abe4 <HAL_TIM_IC_Start_IT+0x18c>
 800ab60:	a201      	add	r2, pc, #4	; (adr r2, 800ab68 <HAL_TIM_IC_Start_IT+0x110>)
 800ab62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab66:	bf00      	nop
 800ab68:	0800ab9d 	.word	0x0800ab9d
 800ab6c:	0800abe5 	.word	0x0800abe5
 800ab70:	0800abe5 	.word	0x0800abe5
 800ab74:	0800abe5 	.word	0x0800abe5
 800ab78:	0800abaf 	.word	0x0800abaf
 800ab7c:	0800abe5 	.word	0x0800abe5
 800ab80:	0800abe5 	.word	0x0800abe5
 800ab84:	0800abe5 	.word	0x0800abe5
 800ab88:	0800abc1 	.word	0x0800abc1
 800ab8c:	0800abe5 	.word	0x0800abe5
 800ab90:	0800abe5 	.word	0x0800abe5
 800ab94:	0800abe5 	.word	0x0800abe5
 800ab98:	0800abd3 	.word	0x0800abd3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68da      	ldr	r2, [r3, #12]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f042 0202 	orr.w	r2, r2, #2
 800abaa:	60da      	str	r2, [r3, #12]
      break;
 800abac:	e01d      	b.n	800abea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68da      	ldr	r2, [r3, #12]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f042 0204 	orr.w	r2, r2, #4
 800abbc:	60da      	str	r2, [r3, #12]
      break;
 800abbe:	e014      	b.n	800abea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68da      	ldr	r2, [r3, #12]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f042 0208 	orr.w	r2, r2, #8
 800abce:	60da      	str	r2, [r3, #12]
      break;
 800abd0:	e00b      	b.n	800abea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68da      	ldr	r2, [r3, #12]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f042 0210 	orr.w	r2, r2, #16
 800abe0:	60da      	str	r2, [r3, #12]
      break;
 800abe2:	e002      	b.n	800abea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	73fb      	strb	r3, [r7, #15]
      break;
 800abe8:	bf00      	nop
  }

  if (status == HAL_OK)
 800abea:	7bfb      	ldrb	r3, [r7, #15]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d148      	bne.n	800ac82 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2201      	movs	r2, #1
 800abf6:	6839      	ldr	r1, [r7, #0]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f001 f937 	bl	800be6c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a22      	ldr	r2, [pc, #136]	; (800ac8c <HAL_TIM_IC_Start_IT+0x234>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d022      	beq.n	800ac4e <HAL_TIM_IC_Start_IT+0x1f6>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac10:	d01d      	beq.n	800ac4e <HAL_TIM_IC_Start_IT+0x1f6>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a1e      	ldr	r2, [pc, #120]	; (800ac90 <HAL_TIM_IC_Start_IT+0x238>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d018      	beq.n	800ac4e <HAL_TIM_IC_Start_IT+0x1f6>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a1c      	ldr	r2, [pc, #112]	; (800ac94 <HAL_TIM_IC_Start_IT+0x23c>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d013      	beq.n	800ac4e <HAL_TIM_IC_Start_IT+0x1f6>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a1b      	ldr	r2, [pc, #108]	; (800ac98 <HAL_TIM_IC_Start_IT+0x240>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d00e      	beq.n	800ac4e <HAL_TIM_IC_Start_IT+0x1f6>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a19      	ldr	r2, [pc, #100]	; (800ac9c <HAL_TIM_IC_Start_IT+0x244>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d009      	beq.n	800ac4e <HAL_TIM_IC_Start_IT+0x1f6>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a18      	ldr	r2, [pc, #96]	; (800aca0 <HAL_TIM_IC_Start_IT+0x248>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d004      	beq.n	800ac4e <HAL_TIM_IC_Start_IT+0x1f6>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a16      	ldr	r2, [pc, #88]	; (800aca4 <HAL_TIM_IC_Start_IT+0x24c>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d111      	bne.n	800ac72 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	f003 0307 	and.w	r3, r3, #7
 800ac58:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	2b06      	cmp	r3, #6
 800ac5e:	d010      	beq.n	800ac82 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f042 0201 	orr.w	r2, r2, #1
 800ac6e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac70:	e007      	b.n	800ac82 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f042 0201 	orr.w	r2, r2, #1
 800ac80:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	40010000 	.word	0x40010000
 800ac90:	40000400 	.word	0x40000400
 800ac94:	40000800 	.word	0x40000800
 800ac98:	40000c00 	.word	0x40000c00
 800ac9c:	40010400 	.word	0x40010400
 800aca0:	40014000 	.word	0x40014000
 800aca4:	40001800 	.word	0x40001800

0800aca8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d101      	bne.n	800acbc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	e097      	b.n	800adec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d106      	bne.n	800acd6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7fb fe57 	bl	8006984 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2202      	movs	r2, #2
 800acda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	6812      	ldr	r2, [r2, #0]
 800ace8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acec:	f023 0307 	bic.w	r3, r3, #7
 800acf0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	3304      	adds	r3, #4
 800acfa:	4619      	mov	r1, r3
 800acfc:	4610      	mov	r0, r2
 800acfe:	f000 fca1 	bl	800b644 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	699b      	ldr	r3, [r3, #24]
 800ad10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6a1b      	ldr	r3, [r3, #32]
 800ad18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	697a      	ldr	r2, [r7, #20]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad2a:	f023 0303 	bic.w	r3, r3, #3
 800ad2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	689a      	ldr	r2, [r3, #8]
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	021b      	lsls	r3, r3, #8
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	693a      	ldr	r2, [r7, #16]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ad48:	f023 030c 	bic.w	r3, r3, #12
 800ad4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	68da      	ldr	r2, [r3, #12]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	021b      	lsls	r3, r3, #8
 800ad64:	4313      	orrs	r3, r2
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	011a      	lsls	r2, r3, #4
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	031b      	lsls	r3, r3, #12
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	693a      	ldr	r2, [r7, #16]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ad86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ad8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	685a      	ldr	r2, [r3, #4]
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	695b      	ldr	r3, [r3, #20]
 800ad98:	011b      	lsls	r3, r3, #4
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	68fa      	ldr	r2, [r7, #12]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2201      	movs	r2, #1
 800adbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2201      	movs	r2, #1
 800adc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2201      	movs	r2, #1
 800adce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2201      	movs	r2, #1
 800add6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2201      	movs	r2, #1
 800ade6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3718      	adds	r7, #24
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ae0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ae14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae1c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d110      	bne.n	800ae46 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d102      	bne.n	800ae30 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae2a:	7b7b      	ldrb	r3, [r7, #13]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d001      	beq.n	800ae34 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	e069      	b.n	800af08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2202      	movs	r2, #2
 800ae38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2202      	movs	r2, #2
 800ae40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae44:	e031      	b.n	800aeaa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	2b04      	cmp	r3, #4
 800ae4a:	d110      	bne.n	800ae6e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae4c:	7bbb      	ldrb	r3, [r7, #14]
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d102      	bne.n	800ae58 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae52:	7b3b      	ldrb	r3, [r7, #12]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d001      	beq.n	800ae5c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e055      	b.n	800af08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2202      	movs	r2, #2
 800ae68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae6c:	e01d      	b.n	800aeaa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae6e:	7bfb      	ldrb	r3, [r7, #15]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d108      	bne.n	800ae86 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae74:	7bbb      	ldrb	r3, [r7, #14]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d105      	bne.n	800ae86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae7a:	7b7b      	ldrb	r3, [r7, #13]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d102      	bne.n	800ae86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae80:	7b3b      	ldrb	r3, [r7, #12]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d001      	beq.n	800ae8a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e03e      	b.n	800af08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2202      	movs	r2, #2
 800ae96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2202      	movs	r2, #2
 800ae9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2202      	movs	r2, #2
 800aea6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d003      	beq.n	800aeb8 <HAL_TIM_Encoder_Start+0xc4>
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2b04      	cmp	r3, #4
 800aeb4:	d008      	beq.n	800aec8 <HAL_TIM_Encoder_Start+0xd4>
 800aeb6:	e00f      	b.n	800aed8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2201      	movs	r2, #1
 800aebe:	2100      	movs	r1, #0
 800aec0:	4618      	mov	r0, r3
 800aec2:	f000 ffd3 	bl	800be6c <TIM_CCxChannelCmd>
      break;
 800aec6:	e016      	b.n	800aef6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2201      	movs	r2, #1
 800aece:	2104      	movs	r1, #4
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 ffcb 	bl	800be6c <TIM_CCxChannelCmd>
      break;
 800aed6:	e00e      	b.n	800aef6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2201      	movs	r2, #1
 800aede:	2100      	movs	r1, #0
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 ffc3 	bl	800be6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2201      	movs	r2, #1
 800aeec:	2104      	movs	r1, #4
 800aeee:	4618      	mov	r0, r3
 800aef0:	f000 ffbc 	bl	800be6c <TIM_CCxChannelCmd>
      break;
 800aef4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f042 0201 	orr.w	r2, r2, #1
 800af04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	f003 0302 	and.w	r3, r3, #2
 800af22:	2b02      	cmp	r3, #2
 800af24:	d122      	bne.n	800af6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	f003 0302 	and.w	r3, r3, #2
 800af30:	2b02      	cmp	r3, #2
 800af32:	d11b      	bne.n	800af6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f06f 0202 	mvn.w	r2, #2
 800af3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2201      	movs	r2, #1
 800af42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	699b      	ldr	r3, [r3, #24]
 800af4a:	f003 0303 	and.w	r3, r3, #3
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d003      	beq.n	800af5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f7f6 fcc8 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800af58:	e005      	b.n	800af66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 fb54 	bl	800b608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fb5b 	bl	800b61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	f003 0304 	and.w	r3, r3, #4
 800af76:	2b04      	cmp	r3, #4
 800af78:	d122      	bne.n	800afc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	f003 0304 	and.w	r3, r3, #4
 800af84:	2b04      	cmp	r3, #4
 800af86:	d11b      	bne.n	800afc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f06f 0204 	mvn.w	r2, #4
 800af90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2202      	movs	r2, #2
 800af96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	699b      	ldr	r3, [r3, #24]
 800af9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d003      	beq.n	800afae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7f6 fc9e 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800afac:	e005      	b.n	800afba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fb2a 	bl	800b608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fb31 	bl	800b61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	f003 0308 	and.w	r3, r3, #8
 800afca:	2b08      	cmp	r3, #8
 800afcc:	d122      	bne.n	800b014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	f003 0308 	and.w	r3, r3, #8
 800afd8:	2b08      	cmp	r3, #8
 800afda:	d11b      	bne.n	800b014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f06f 0208 	mvn.w	r2, #8
 800afe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2204      	movs	r2, #4
 800afea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	69db      	ldr	r3, [r3, #28]
 800aff2:	f003 0303 	and.w	r3, r3, #3
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d003      	beq.n	800b002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7f6 fc74 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800b000:	e005      	b.n	800b00e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fb00 	bl	800b608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fb07 	bl	800b61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	f003 0310 	and.w	r3, r3, #16
 800b01e:	2b10      	cmp	r3, #16
 800b020:	d122      	bne.n	800b068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	f003 0310 	and.w	r3, r3, #16
 800b02c:	2b10      	cmp	r3, #16
 800b02e:	d11b      	bne.n	800b068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f06f 0210 	mvn.w	r2, #16
 800b038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2208      	movs	r2, #8
 800b03e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	69db      	ldr	r3, [r3, #28]
 800b046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d003      	beq.n	800b056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f7f6 fc4a 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800b054:	e005      	b.n	800b062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fad6 	bl	800b608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 fadd 	bl	800b61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	f003 0301 	and.w	r3, r3, #1
 800b072:	2b01      	cmp	r3, #1
 800b074:	d10e      	bne.n	800b094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	f003 0301 	and.w	r3, r3, #1
 800b080:	2b01      	cmp	r3, #1
 800b082:	d107      	bne.n	800b094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f06f 0201 	mvn.w	r2, #1
 800b08c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fab0 	bl	800b5f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b09e:	2b80      	cmp	r3, #128	; 0x80
 800b0a0:	d10e      	bne.n	800b0c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ac:	2b80      	cmp	r3, #128	; 0x80
 800b0ae:	d107      	bne.n	800b0c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b0b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 ffd4 	bl	800c068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ca:	2b40      	cmp	r3, #64	; 0x40
 800b0cc:	d10e      	bne.n	800b0ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0d8:	2b40      	cmp	r3, #64	; 0x40
 800b0da:	d107      	bne.n	800b0ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b0e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 faa2 	bl	800b630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	691b      	ldr	r3, [r3, #16]
 800b0f2:	f003 0320 	and.w	r3, r3, #32
 800b0f6:	2b20      	cmp	r3, #32
 800b0f8:	d10e      	bne.n	800b118 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	f003 0320 	and.w	r3, r3, #32
 800b104:	2b20      	cmp	r3, #32
 800b106:	d107      	bne.n	800b118 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f06f 0220 	mvn.w	r2, #32
 800b110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 ff9e 	bl	800c054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b118:	bf00      	nop
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b12c:	2300      	movs	r3, #0
 800b12e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b136:	2b01      	cmp	r3, #1
 800b138:	d101      	bne.n	800b13e <HAL_TIM_IC_ConfigChannel+0x1e>
 800b13a:	2302      	movs	r3, #2
 800b13c:	e088      	b.n	800b250 <HAL_TIM_IC_ConfigChannel+0x130>
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2201      	movs	r2, #1
 800b142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d11b      	bne.n	800b184 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	6818      	ldr	r0, [r3, #0]
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	6819      	ldr	r1, [r3, #0]
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	685a      	ldr	r2, [r3, #4]
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	f000 fcc2 	bl	800bae4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	699a      	ldr	r2, [r3, #24]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f022 020c 	bic.w	r2, r2, #12
 800b16e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	6999      	ldr	r1, [r3, #24]
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	689a      	ldr	r2, [r3, #8]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	430a      	orrs	r2, r1
 800b180:	619a      	str	r2, [r3, #24]
 800b182:	e060      	b.n	800b246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b04      	cmp	r3, #4
 800b188:	d11c      	bne.n	800b1c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	6819      	ldr	r1, [r3, #0]
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	685a      	ldr	r2, [r3, #4]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	f000 fd46 	bl	800bc2a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	699a      	ldr	r2, [r3, #24]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b1ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	6999      	ldr	r1, [r3, #24]
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	021a      	lsls	r2, r3, #8
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	430a      	orrs	r2, r1
 800b1c0:	619a      	str	r2, [r3, #24]
 800b1c2:	e040      	b.n	800b246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b08      	cmp	r3, #8
 800b1c8:	d11b      	bne.n	800b202 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6818      	ldr	r0, [r3, #0]
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	6819      	ldr	r1, [r3, #0]
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	f000 fd93 	bl	800bd04 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	69da      	ldr	r2, [r3, #28]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f022 020c 	bic.w	r2, r2, #12
 800b1ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	69d9      	ldr	r1, [r3, #28]
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	689a      	ldr	r2, [r3, #8]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	430a      	orrs	r2, r1
 800b1fe:	61da      	str	r2, [r3, #28]
 800b200:	e021      	b.n	800b246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b0c      	cmp	r3, #12
 800b206:	d11c      	bne.n	800b242 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6818      	ldr	r0, [r3, #0]
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	6819      	ldr	r1, [r3, #0]
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	685a      	ldr	r2, [r3, #4]
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	f000 fdb0 	bl	800bd7c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	69da      	ldr	r2, [r3, #28]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b22a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	69d9      	ldr	r1, [r3, #28]
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	021a      	lsls	r2, r3, #8
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	430a      	orrs	r2, r1
 800b23e:	61da      	str	r2, [r3, #28]
 800b240:	e001      	b.n	800b246 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800b242:	2301      	movs	r3, #1
 800b244:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2200      	movs	r2, #0
 800b24a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b24e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3718      	adds	r7, #24
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b264:	2300      	movs	r3, #0
 800b266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d101      	bne.n	800b276 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b272:	2302      	movs	r3, #2
 800b274:	e0ae      	b.n	800b3d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2201      	movs	r2, #1
 800b27a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2b0c      	cmp	r3, #12
 800b282:	f200 809f 	bhi.w	800b3c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b286:	a201      	add	r2, pc, #4	; (adr r2, 800b28c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28c:	0800b2c1 	.word	0x0800b2c1
 800b290:	0800b3c5 	.word	0x0800b3c5
 800b294:	0800b3c5 	.word	0x0800b3c5
 800b298:	0800b3c5 	.word	0x0800b3c5
 800b29c:	0800b301 	.word	0x0800b301
 800b2a0:	0800b3c5 	.word	0x0800b3c5
 800b2a4:	0800b3c5 	.word	0x0800b3c5
 800b2a8:	0800b3c5 	.word	0x0800b3c5
 800b2ac:	0800b343 	.word	0x0800b343
 800b2b0:	0800b3c5 	.word	0x0800b3c5
 800b2b4:	0800b3c5 	.word	0x0800b3c5
 800b2b8:	0800b3c5 	.word	0x0800b3c5
 800b2bc:	0800b383 	.word	0x0800b383
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	68b9      	ldr	r1, [r7, #8]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 fa5c 	bl	800b784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	699a      	ldr	r2, [r3, #24]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f042 0208 	orr.w	r2, r2, #8
 800b2da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	699a      	ldr	r2, [r3, #24]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f022 0204 	bic.w	r2, r2, #4
 800b2ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	6999      	ldr	r1, [r3, #24]
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	691a      	ldr	r2, [r3, #16]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	430a      	orrs	r2, r1
 800b2fc:	619a      	str	r2, [r3, #24]
      break;
 800b2fe:	e064      	b.n	800b3ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68b9      	ldr	r1, [r7, #8]
 800b306:	4618      	mov	r0, r3
 800b308:	f000 faac 	bl	800b864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	699a      	ldr	r2, [r3, #24]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b31a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	699a      	ldr	r2, [r3, #24]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b32a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6999      	ldr	r1, [r3, #24]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	021a      	lsls	r2, r3, #8
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	430a      	orrs	r2, r1
 800b33e:	619a      	str	r2, [r3, #24]
      break;
 800b340:	e043      	b.n	800b3ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68b9      	ldr	r1, [r7, #8]
 800b348:	4618      	mov	r0, r3
 800b34a:	f000 fb01 	bl	800b950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	69da      	ldr	r2, [r3, #28]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f042 0208 	orr.w	r2, r2, #8
 800b35c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	69da      	ldr	r2, [r3, #28]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f022 0204 	bic.w	r2, r2, #4
 800b36c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	69d9      	ldr	r1, [r3, #28]
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	691a      	ldr	r2, [r3, #16]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	430a      	orrs	r2, r1
 800b37e:	61da      	str	r2, [r3, #28]
      break;
 800b380:	e023      	b.n	800b3ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	68b9      	ldr	r1, [r7, #8]
 800b388:	4618      	mov	r0, r3
 800b38a:	f000 fb55 	bl	800ba38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	69da      	ldr	r2, [r3, #28]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b39c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	69da      	ldr	r2, [r3, #28]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	69d9      	ldr	r1, [r3, #28]
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	021a      	lsls	r2, r3, #8
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	430a      	orrs	r2, r1
 800b3c0:	61da      	str	r2, [r3, #28]
      break;
 800b3c2:	e002      	b.n	800b3ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b3c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3718      	adds	r7, #24
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d101      	bne.n	800b3f8 <HAL_TIM_ConfigClockSource+0x1c>
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	e0b4      	b.n	800b562 <HAL_TIM_ConfigClockSource+0x186>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2202      	movs	r2, #2
 800b404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b41e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b430:	d03e      	beq.n	800b4b0 <HAL_TIM_ConfigClockSource+0xd4>
 800b432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b436:	f200 8087 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x16c>
 800b43a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b43e:	f000 8086 	beq.w	800b54e <HAL_TIM_ConfigClockSource+0x172>
 800b442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b446:	d87f      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x16c>
 800b448:	2b70      	cmp	r3, #112	; 0x70
 800b44a:	d01a      	beq.n	800b482 <HAL_TIM_ConfigClockSource+0xa6>
 800b44c:	2b70      	cmp	r3, #112	; 0x70
 800b44e:	d87b      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x16c>
 800b450:	2b60      	cmp	r3, #96	; 0x60
 800b452:	d050      	beq.n	800b4f6 <HAL_TIM_ConfigClockSource+0x11a>
 800b454:	2b60      	cmp	r3, #96	; 0x60
 800b456:	d877      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x16c>
 800b458:	2b50      	cmp	r3, #80	; 0x50
 800b45a:	d03c      	beq.n	800b4d6 <HAL_TIM_ConfigClockSource+0xfa>
 800b45c:	2b50      	cmp	r3, #80	; 0x50
 800b45e:	d873      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x16c>
 800b460:	2b40      	cmp	r3, #64	; 0x40
 800b462:	d058      	beq.n	800b516 <HAL_TIM_ConfigClockSource+0x13a>
 800b464:	2b40      	cmp	r3, #64	; 0x40
 800b466:	d86f      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x16c>
 800b468:	2b30      	cmp	r3, #48	; 0x30
 800b46a:	d064      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x15a>
 800b46c:	2b30      	cmp	r3, #48	; 0x30
 800b46e:	d86b      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x16c>
 800b470:	2b20      	cmp	r3, #32
 800b472:	d060      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x15a>
 800b474:	2b20      	cmp	r3, #32
 800b476:	d867      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x16c>
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d05c      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x15a>
 800b47c:	2b10      	cmp	r3, #16
 800b47e:	d05a      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x15a>
 800b480:	e062      	b.n	800b548 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6818      	ldr	r0, [r3, #0]
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	6899      	ldr	r1, [r3, #8]
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	f000 fccb 	bl	800be2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	609a      	str	r2, [r3, #8]
      break;
 800b4ae:	e04f      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6818      	ldr	r0, [r3, #0]
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	6899      	ldr	r1, [r3, #8]
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	685a      	ldr	r2, [r3, #4]
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	f000 fcb4 	bl	800be2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689a      	ldr	r2, [r3, #8]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4d2:	609a      	str	r2, [r3, #8]
      break;
 800b4d4:	e03c      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6818      	ldr	r0, [r3, #0]
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	6859      	ldr	r1, [r3, #4]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f000 fb72 	bl	800bbcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2150      	movs	r1, #80	; 0x50
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 fc81 	bl	800bdf6 <TIM_ITRx_SetConfig>
      break;
 800b4f4:	e02c      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6818      	ldr	r0, [r3, #0]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	6859      	ldr	r1, [r3, #4]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	461a      	mov	r2, r3
 800b504:	f000 fbce 	bl	800bca4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2160      	movs	r1, #96	; 0x60
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 fc71 	bl	800bdf6 <TIM_ITRx_SetConfig>
      break;
 800b514:	e01c      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6818      	ldr	r0, [r3, #0]
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	6859      	ldr	r1, [r3, #4]
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	461a      	mov	r2, r3
 800b524:	f000 fb52 	bl	800bbcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2140      	movs	r1, #64	; 0x40
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 fc61 	bl	800bdf6 <TIM_ITRx_SetConfig>
      break;
 800b534:	e00c      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4619      	mov	r1, r3
 800b540:	4610      	mov	r0, r2
 800b542:	f000 fc58 	bl	800bdf6 <TIM_ITRx_SetConfig>
      break;
 800b546:	e003      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	73fb      	strb	r3, [r7, #15]
      break;
 800b54c:	e000      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b54e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b560:	7bfb      	ldrb	r3, [r7, #15]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
	...

0800b56c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b085      	sub	sp, #20
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b576:	2300      	movs	r3, #0
 800b578:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	2b0c      	cmp	r3, #12
 800b57e:	d831      	bhi.n	800b5e4 <HAL_TIM_ReadCapturedValue+0x78>
 800b580:	a201      	add	r2, pc, #4	; (adr r2, 800b588 <HAL_TIM_ReadCapturedValue+0x1c>)
 800b582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b586:	bf00      	nop
 800b588:	0800b5bd 	.word	0x0800b5bd
 800b58c:	0800b5e5 	.word	0x0800b5e5
 800b590:	0800b5e5 	.word	0x0800b5e5
 800b594:	0800b5e5 	.word	0x0800b5e5
 800b598:	0800b5c7 	.word	0x0800b5c7
 800b59c:	0800b5e5 	.word	0x0800b5e5
 800b5a0:	0800b5e5 	.word	0x0800b5e5
 800b5a4:	0800b5e5 	.word	0x0800b5e5
 800b5a8:	0800b5d1 	.word	0x0800b5d1
 800b5ac:	0800b5e5 	.word	0x0800b5e5
 800b5b0:	0800b5e5 	.word	0x0800b5e5
 800b5b4:	0800b5e5 	.word	0x0800b5e5
 800b5b8:	0800b5db 	.word	0x0800b5db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5c2:	60fb      	str	r3, [r7, #12]

      break;
 800b5c4:	e00f      	b.n	800b5e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5cc:	60fb      	str	r3, [r7, #12]

      break;
 800b5ce:	e00a      	b.n	800b5e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d6:	60fb      	str	r3, [r7, #12]

      break;
 800b5d8:	e005      	b.n	800b5e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e0:	60fb      	str	r3, [r7, #12]

      break;
 800b5e2:	e000      	b.n	800b5e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800b5e4:	bf00      	nop
  }

  return tmpreg;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3714      	adds	r7, #20
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b5fc:	bf00      	nop
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b624:	bf00      	nop
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b638:	bf00      	nop
 800b63a:	370c      	adds	r7, #12
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b644:	b480      	push	{r7}
 800b646:	b085      	sub	sp, #20
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4a40      	ldr	r2, [pc, #256]	; (800b758 <TIM_Base_SetConfig+0x114>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d013      	beq.n	800b684 <TIM_Base_SetConfig+0x40>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b662:	d00f      	beq.n	800b684 <TIM_Base_SetConfig+0x40>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a3d      	ldr	r2, [pc, #244]	; (800b75c <TIM_Base_SetConfig+0x118>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d00b      	beq.n	800b684 <TIM_Base_SetConfig+0x40>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a3c      	ldr	r2, [pc, #240]	; (800b760 <TIM_Base_SetConfig+0x11c>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d007      	beq.n	800b684 <TIM_Base_SetConfig+0x40>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a3b      	ldr	r2, [pc, #236]	; (800b764 <TIM_Base_SetConfig+0x120>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d003      	beq.n	800b684 <TIM_Base_SetConfig+0x40>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a3a      	ldr	r2, [pc, #232]	; (800b768 <TIM_Base_SetConfig+0x124>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d108      	bne.n	800b696 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b68a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	68fa      	ldr	r2, [r7, #12]
 800b692:	4313      	orrs	r3, r2
 800b694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4a2f      	ldr	r2, [pc, #188]	; (800b758 <TIM_Base_SetConfig+0x114>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d02b      	beq.n	800b6f6 <TIM_Base_SetConfig+0xb2>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6a4:	d027      	beq.n	800b6f6 <TIM_Base_SetConfig+0xb2>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a2c      	ldr	r2, [pc, #176]	; (800b75c <TIM_Base_SetConfig+0x118>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d023      	beq.n	800b6f6 <TIM_Base_SetConfig+0xb2>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a2b      	ldr	r2, [pc, #172]	; (800b760 <TIM_Base_SetConfig+0x11c>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d01f      	beq.n	800b6f6 <TIM_Base_SetConfig+0xb2>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a2a      	ldr	r2, [pc, #168]	; (800b764 <TIM_Base_SetConfig+0x120>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d01b      	beq.n	800b6f6 <TIM_Base_SetConfig+0xb2>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4a29      	ldr	r2, [pc, #164]	; (800b768 <TIM_Base_SetConfig+0x124>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d017      	beq.n	800b6f6 <TIM_Base_SetConfig+0xb2>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4a28      	ldr	r2, [pc, #160]	; (800b76c <TIM_Base_SetConfig+0x128>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d013      	beq.n	800b6f6 <TIM_Base_SetConfig+0xb2>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a27      	ldr	r2, [pc, #156]	; (800b770 <TIM_Base_SetConfig+0x12c>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d00f      	beq.n	800b6f6 <TIM_Base_SetConfig+0xb2>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a26      	ldr	r2, [pc, #152]	; (800b774 <TIM_Base_SetConfig+0x130>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d00b      	beq.n	800b6f6 <TIM_Base_SetConfig+0xb2>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a25      	ldr	r2, [pc, #148]	; (800b778 <TIM_Base_SetConfig+0x134>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d007      	beq.n	800b6f6 <TIM_Base_SetConfig+0xb2>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a24      	ldr	r2, [pc, #144]	; (800b77c <TIM_Base_SetConfig+0x138>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d003      	beq.n	800b6f6 <TIM_Base_SetConfig+0xb2>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a23      	ldr	r2, [pc, #140]	; (800b780 <TIM_Base_SetConfig+0x13c>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d108      	bne.n	800b708 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	4313      	orrs	r3, r2
 800b706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	695b      	ldr	r3, [r3, #20]
 800b712:	4313      	orrs	r3, r2
 800b714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	689a      	ldr	r2, [r3, #8]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a0a      	ldr	r2, [pc, #40]	; (800b758 <TIM_Base_SetConfig+0x114>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d003      	beq.n	800b73c <TIM_Base_SetConfig+0xf8>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4a0c      	ldr	r2, [pc, #48]	; (800b768 <TIM_Base_SetConfig+0x124>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d103      	bne.n	800b744 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	691a      	ldr	r2, [r3, #16]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	615a      	str	r2, [r3, #20]
}
 800b74a:	bf00      	nop
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	40010000 	.word	0x40010000
 800b75c:	40000400 	.word	0x40000400
 800b760:	40000800 	.word	0x40000800
 800b764:	40000c00 	.word	0x40000c00
 800b768:	40010400 	.word	0x40010400
 800b76c:	40014000 	.word	0x40014000
 800b770:	40014400 	.word	0x40014400
 800b774:	40014800 	.word	0x40014800
 800b778:	40001800 	.word	0x40001800
 800b77c:	40001c00 	.word	0x40001c00
 800b780:	40002000 	.word	0x40002000

0800b784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b784:	b480      	push	{r7}
 800b786:	b087      	sub	sp, #28
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	f023 0201 	bic.w	r2, r3, #1
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6a1b      	ldr	r3, [r3, #32]
 800b79e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f023 0303 	bic.w	r3, r3, #3
 800b7ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	f023 0302 	bic.w	r3, r3, #2
 800b7cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a20      	ldr	r2, [pc, #128]	; (800b85c <TIM_OC1_SetConfig+0xd8>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d003      	beq.n	800b7e8 <TIM_OC1_SetConfig+0x64>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a1f      	ldr	r2, [pc, #124]	; (800b860 <TIM_OC1_SetConfig+0xdc>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d10c      	bne.n	800b802 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	f023 0308 	bic.w	r3, r3, #8
 800b7ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	68db      	ldr	r3, [r3, #12]
 800b7f4:	697a      	ldr	r2, [r7, #20]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	f023 0304 	bic.w	r3, r3, #4
 800b800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a15      	ldr	r2, [pc, #84]	; (800b85c <TIM_OC1_SetConfig+0xd8>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d003      	beq.n	800b812 <TIM_OC1_SetConfig+0x8e>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a14      	ldr	r2, [pc, #80]	; (800b860 <TIM_OC1_SetConfig+0xdc>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d111      	bne.n	800b836 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	695b      	ldr	r3, [r3, #20]
 800b826:	693a      	ldr	r2, [r7, #16]
 800b828:	4313      	orrs	r3, r2
 800b82a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	699b      	ldr	r3, [r3, #24]
 800b830:	693a      	ldr	r2, [r7, #16]
 800b832:	4313      	orrs	r3, r2
 800b834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	693a      	ldr	r2, [r7, #16]
 800b83a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	685a      	ldr	r2, [r3, #4]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	697a      	ldr	r2, [r7, #20]
 800b84e:	621a      	str	r2, [r3, #32]
}
 800b850:	bf00      	nop
 800b852:	371c      	adds	r7, #28
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	40010000 	.word	0x40010000
 800b860:	40010400 	.word	0x40010400

0800b864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b864:	b480      	push	{r7}
 800b866:	b087      	sub	sp, #28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a1b      	ldr	r3, [r3, #32]
 800b872:	f023 0210 	bic.w	r2, r3, #16
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6a1b      	ldr	r3, [r3, #32]
 800b87e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	699b      	ldr	r3, [r3, #24]
 800b88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b89a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	021b      	lsls	r3, r3, #8
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f023 0320 	bic.w	r3, r3, #32
 800b8ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	011b      	lsls	r3, r3, #4
 800b8b6:	697a      	ldr	r2, [r7, #20]
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a22      	ldr	r2, [pc, #136]	; (800b948 <TIM_OC2_SetConfig+0xe4>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d003      	beq.n	800b8cc <TIM_OC2_SetConfig+0x68>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a21      	ldr	r2, [pc, #132]	; (800b94c <TIM_OC2_SetConfig+0xe8>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d10d      	bne.n	800b8e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	011b      	lsls	r3, r3, #4
 800b8da:	697a      	ldr	r2, [r7, #20]
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a17      	ldr	r2, [pc, #92]	; (800b948 <TIM_OC2_SetConfig+0xe4>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d003      	beq.n	800b8f8 <TIM_OC2_SetConfig+0x94>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a16      	ldr	r2, [pc, #88]	; (800b94c <TIM_OC2_SetConfig+0xe8>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d113      	bne.n	800b920 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b8fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	695b      	ldr	r3, [r3, #20]
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	693a      	ldr	r2, [r7, #16]
 800b910:	4313      	orrs	r3, r2
 800b912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	699b      	ldr	r3, [r3, #24]
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	693a      	ldr	r2, [r7, #16]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	693a      	ldr	r2, [r7, #16]
 800b924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	685a      	ldr	r2, [r3, #4]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	697a      	ldr	r2, [r7, #20]
 800b938:	621a      	str	r2, [r3, #32]
}
 800b93a:	bf00      	nop
 800b93c:	371c      	adds	r7, #28
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop
 800b948:	40010000 	.word	0x40010000
 800b94c:	40010400 	.word	0x40010400

0800b950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b950:	b480      	push	{r7}
 800b952:	b087      	sub	sp, #28
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a1b      	ldr	r3, [r3, #32]
 800b96a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	69db      	ldr	r3, [r3, #28]
 800b976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f023 0303 	bic.w	r3, r3, #3
 800b986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	4313      	orrs	r3, r2
 800b990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	021b      	lsls	r3, r3, #8
 800b9a0:	697a      	ldr	r2, [r7, #20]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4a21      	ldr	r2, [pc, #132]	; (800ba30 <TIM_OC3_SetConfig+0xe0>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d003      	beq.n	800b9b6 <TIM_OC3_SetConfig+0x66>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4a20      	ldr	r2, [pc, #128]	; (800ba34 <TIM_OC3_SetConfig+0xe4>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d10d      	bne.n	800b9d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	021b      	lsls	r3, r3, #8
 800b9c4:	697a      	ldr	r2, [r7, #20]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b9d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a16      	ldr	r2, [pc, #88]	; (800ba30 <TIM_OC3_SetConfig+0xe0>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d003      	beq.n	800b9e2 <TIM_OC3_SetConfig+0x92>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a15      	ldr	r2, [pc, #84]	; (800ba34 <TIM_OC3_SetConfig+0xe4>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d113      	bne.n	800ba0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b9f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	695b      	ldr	r3, [r3, #20]
 800b9f6:	011b      	lsls	r3, r3, #4
 800b9f8:	693a      	ldr	r2, [r7, #16]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	011b      	lsls	r3, r3, #4
 800ba04:	693a      	ldr	r2, [r7, #16]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	693a      	ldr	r2, [r7, #16]
 800ba0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	68fa      	ldr	r2, [r7, #12]
 800ba14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	685a      	ldr	r2, [r3, #4]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	697a      	ldr	r2, [r7, #20]
 800ba22:	621a      	str	r2, [r3, #32]
}
 800ba24:	bf00      	nop
 800ba26:	371c      	adds	r7, #28
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr
 800ba30:	40010000 	.word	0x40010000
 800ba34:	40010400 	.word	0x40010400

0800ba38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b087      	sub	sp, #28
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6a1b      	ldr	r3, [r3, #32]
 800ba46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a1b      	ldr	r3, [r3, #32]
 800ba52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	69db      	ldr	r3, [r3, #28]
 800ba5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	021b      	lsls	r3, r3, #8
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	031b      	lsls	r3, r3, #12
 800ba8a:	693a      	ldr	r2, [r7, #16]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a12      	ldr	r2, [pc, #72]	; (800badc <TIM_OC4_SetConfig+0xa4>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d003      	beq.n	800baa0 <TIM_OC4_SetConfig+0x68>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a11      	ldr	r2, [pc, #68]	; (800bae0 <TIM_OC4_SetConfig+0xa8>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d109      	bne.n	800bab4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800baa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	695b      	ldr	r3, [r3, #20]
 800baac:	019b      	lsls	r3, r3, #6
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	693a      	ldr	r2, [r7, #16]
 800bacc:	621a      	str	r2, [r3, #32]
}
 800bace:	bf00      	nop
 800bad0:	371c      	adds	r7, #28
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	40010000 	.word	0x40010000
 800bae0:	40010400 	.word	0x40010400

0800bae4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b087      	sub	sp, #28
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	607a      	str	r2, [r7, #4]
 800baf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6a1b      	ldr	r3, [r3, #32]
 800baf6:	f023 0201 	bic.w	r2, r3, #1
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	699b      	ldr	r3, [r3, #24]
 800bb02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6a1b      	ldr	r3, [r3, #32]
 800bb08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	4a28      	ldr	r2, [pc, #160]	; (800bbb0 <TIM_TI1_SetConfig+0xcc>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d01b      	beq.n	800bb4a <TIM_TI1_SetConfig+0x66>
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb18:	d017      	beq.n	800bb4a <TIM_TI1_SetConfig+0x66>
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	4a25      	ldr	r2, [pc, #148]	; (800bbb4 <TIM_TI1_SetConfig+0xd0>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d013      	beq.n	800bb4a <TIM_TI1_SetConfig+0x66>
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	4a24      	ldr	r2, [pc, #144]	; (800bbb8 <TIM_TI1_SetConfig+0xd4>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d00f      	beq.n	800bb4a <TIM_TI1_SetConfig+0x66>
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	4a23      	ldr	r2, [pc, #140]	; (800bbbc <TIM_TI1_SetConfig+0xd8>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d00b      	beq.n	800bb4a <TIM_TI1_SetConfig+0x66>
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	4a22      	ldr	r2, [pc, #136]	; (800bbc0 <TIM_TI1_SetConfig+0xdc>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d007      	beq.n	800bb4a <TIM_TI1_SetConfig+0x66>
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	4a21      	ldr	r2, [pc, #132]	; (800bbc4 <TIM_TI1_SetConfig+0xe0>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d003      	beq.n	800bb4a <TIM_TI1_SetConfig+0x66>
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	4a20      	ldr	r2, [pc, #128]	; (800bbc8 <TIM_TI1_SetConfig+0xe4>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d101      	bne.n	800bb4e <TIM_TI1_SetConfig+0x6a>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e000      	b.n	800bb50 <TIM_TI1_SetConfig+0x6c>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d008      	beq.n	800bb66 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	f023 0303 	bic.w	r3, r3, #3
 800bb5a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800bb5c:	697a      	ldr	r2, [r7, #20]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4313      	orrs	r3, r2
 800bb62:	617b      	str	r3, [r7, #20]
 800bb64:	e003      	b.n	800bb6e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	f043 0301 	orr.w	r3, r3, #1
 800bb6c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	011b      	lsls	r3, r3, #4
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	697a      	ldr	r2, [r7, #20]
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	f023 030a 	bic.w	r3, r3, #10
 800bb88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	f003 030a 	and.w	r3, r3, #10
 800bb90:	693a      	ldr	r2, [r7, #16]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	697a      	ldr	r2, [r7, #20]
 800bb9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	693a      	ldr	r2, [r7, #16]
 800bba0:	621a      	str	r2, [r3, #32]
}
 800bba2:	bf00      	nop
 800bba4:	371c      	adds	r7, #28
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	40010000 	.word	0x40010000
 800bbb4:	40000400 	.word	0x40000400
 800bbb8:	40000800 	.word	0x40000800
 800bbbc:	40000c00 	.word	0x40000c00
 800bbc0:	40010400 	.word	0x40010400
 800bbc4:	40014000 	.word	0x40014000
 800bbc8:	40001800 	.word	0x40001800

0800bbcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b087      	sub	sp, #28
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6a1b      	ldr	r3, [r3, #32]
 800bbdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6a1b      	ldr	r3, [r3, #32]
 800bbe2:	f023 0201 	bic.w	r2, r3, #1
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	699b      	ldr	r3, [r3, #24]
 800bbee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bbf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	011b      	lsls	r3, r3, #4
 800bbfc:	693a      	ldr	r2, [r7, #16]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	f023 030a 	bic.w	r3, r3, #10
 800bc08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc0a:	697a      	ldr	r2, [r7, #20]
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	697a      	ldr	r2, [r7, #20]
 800bc1c:	621a      	str	r2, [r3, #32]
}
 800bc1e:	bf00      	nop
 800bc20:	371c      	adds	r7, #28
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr

0800bc2a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bc2a:	b480      	push	{r7}
 800bc2c:	b087      	sub	sp, #28
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	60f8      	str	r0, [r7, #12]
 800bc32:	60b9      	str	r1, [r7, #8]
 800bc34:	607a      	str	r2, [r7, #4]
 800bc36:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6a1b      	ldr	r3, [r3, #32]
 800bc3c:	f023 0210 	bic.w	r2, r3, #16
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	699b      	ldr	r3, [r3, #24]
 800bc48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6a1b      	ldr	r3, [r3, #32]
 800bc4e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	021b      	lsls	r3, r3, #8
 800bc5c:	697a      	ldr	r2, [r7, #20]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	031b      	lsls	r3, r3, #12
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	697a      	ldr	r2, [r7, #20]
 800bc72:	4313      	orrs	r3, r2
 800bc74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	011b      	lsls	r3, r3, #4
 800bc82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	697a      	ldr	r2, [r7, #20]
 800bc90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	621a      	str	r2, [r3, #32]
}
 800bc98:	bf00      	nop
 800bc9a:	371c      	adds	r7, #28
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b087      	sub	sp, #28
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6a1b      	ldr	r3, [r3, #32]
 800bcb4:	f023 0210 	bic.w	r2, r3, #16
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	699b      	ldr	r3, [r3, #24]
 800bcc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6a1b      	ldr	r3, [r3, #32]
 800bcc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bcce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	031b      	lsls	r3, r3, #12
 800bcd4:	697a      	ldr	r2, [r7, #20]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bce0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	011b      	lsls	r3, r3, #4
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	697a      	ldr	r2, [r7, #20]
 800bcf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	693a      	ldr	r2, [r7, #16]
 800bcf6:	621a      	str	r2, [r3, #32]
}
 800bcf8:	bf00      	nop
 800bcfa:	371c      	adds	r7, #28
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b087      	sub	sp, #28
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
 800bd10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6a1b      	ldr	r3, [r3, #32]
 800bd16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	69db      	ldr	r3, [r3, #28]
 800bd22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	6a1b      	ldr	r3, [r3, #32]
 800bd28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	f023 0303 	bic.w	r3, r3, #3
 800bd30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800bd32:	697a      	ldr	r2, [r7, #20]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	011b      	lsls	r3, r3, #4
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	697a      	ldr	r2, [r7, #20]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800bd54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	021b      	lsls	r3, r3, #8
 800bd5a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	697a      	ldr	r2, [r7, #20]
 800bd68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	693a      	ldr	r2, [r7, #16]
 800bd6e:	621a      	str	r2, [r3, #32]
}
 800bd70:	bf00      	nop
 800bd72:	371c      	adds	r7, #28
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b087      	sub	sp, #28
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
 800bd88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6a1b      	ldr	r3, [r3, #32]
 800bd8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	69db      	ldr	r3, [r3, #28]
 800bd9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6a1b      	ldr	r3, [r3, #32]
 800bda0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bda8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	021b      	lsls	r3, r3, #8
 800bdae:	697a      	ldr	r2, [r7, #20]
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bdba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	031b      	lsls	r3, r3, #12
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bdce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	031b      	lsls	r3, r3, #12
 800bdd4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bdd8:	693a      	ldr	r2, [r7, #16]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	697a      	ldr	r2, [r7, #20]
 800bde2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	693a      	ldr	r2, [r7, #16]
 800bde8:	621a      	str	r2, [r3, #32]
}
 800bdea:	bf00      	nop
 800bdec:	371c      	adds	r7, #28
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bdf6:	b480      	push	{r7}
 800bdf8:	b085      	sub	sp, #20
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	4313      	orrs	r3, r2
 800be14:	f043 0307 	orr.w	r3, r3, #7
 800be18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	609a      	str	r2, [r3, #8]
}
 800be20:	bf00      	nop
 800be22:	3714      	adds	r7, #20
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b087      	sub	sp, #28
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
 800be38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	021a      	lsls	r2, r3, #8
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	431a      	orrs	r2, r3
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	4313      	orrs	r3, r2
 800be54:	697a      	ldr	r2, [r7, #20]
 800be56:	4313      	orrs	r3, r2
 800be58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	697a      	ldr	r2, [r7, #20]
 800be5e:	609a      	str	r2, [r3, #8]
}
 800be60:	bf00      	nop
 800be62:	371c      	adds	r7, #28
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b087      	sub	sp, #28
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	f003 031f 	and.w	r3, r3, #31
 800be7e:	2201      	movs	r2, #1
 800be80:	fa02 f303 	lsl.w	r3, r2, r3
 800be84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	6a1a      	ldr	r2, [r3, #32]
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	43db      	mvns	r3, r3
 800be8e:	401a      	ands	r2, r3
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	6a1a      	ldr	r2, [r3, #32]
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	f003 031f 	and.w	r3, r3, #31
 800be9e:	6879      	ldr	r1, [r7, #4]
 800bea0:	fa01 f303 	lsl.w	r3, r1, r3
 800bea4:	431a      	orrs	r2, r3
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	621a      	str	r2, [r3, #32]
}
 800beaa:	bf00      	nop
 800beac:	371c      	adds	r7, #28
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr
	...

0800beb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800beb8:	b480      	push	{r7}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d101      	bne.n	800bed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800becc:	2302      	movs	r3, #2
 800bece:	e05a      	b.n	800bf86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2202      	movs	r2, #2
 800bedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	4313      	orrs	r3, r2
 800bf00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a21      	ldr	r2, [pc, #132]	; (800bf94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d022      	beq.n	800bf5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf1c:	d01d      	beq.n	800bf5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a1d      	ldr	r2, [pc, #116]	; (800bf98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d018      	beq.n	800bf5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a1b      	ldr	r2, [pc, #108]	; (800bf9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d013      	beq.n	800bf5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a1a      	ldr	r2, [pc, #104]	; (800bfa0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d00e      	beq.n	800bf5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a18      	ldr	r2, [pc, #96]	; (800bfa4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d009      	beq.n	800bf5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a17      	ldr	r2, [pc, #92]	; (800bfa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d004      	beq.n	800bf5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a15      	ldr	r2, [pc, #84]	; (800bfac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d10c      	bne.n	800bf74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	68ba      	ldr	r2, [r7, #8]
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3714      	adds	r7, #20
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	40010000 	.word	0x40010000
 800bf98:	40000400 	.word	0x40000400
 800bf9c:	40000800 	.word	0x40000800
 800bfa0:	40000c00 	.word	0x40000c00
 800bfa4:	40010400 	.word	0x40010400
 800bfa8:	40014000 	.word	0x40014000
 800bfac:	40001800 	.word	0x40001800

0800bfb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d101      	bne.n	800bfcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bfc8:	2302      	movs	r3, #2
 800bfca:	e03d      	b.n	800c048 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	68db      	ldr	r3, [r3, #12]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	4313      	orrs	r3, r2
 800bfee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4313      	orrs	r3, r2
 800c00a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	4313      	orrs	r3, r2
 800c018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	695b      	ldr	r3, [r3, #20]
 800c024:	4313      	orrs	r3, r2
 800c026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	69db      	ldr	r3, [r3, #28]
 800c032:	4313      	orrs	r3, r2
 800c034:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c046:	2300      	movs	r3, #0
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3714      	adds	r7, #20
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c05c:	bf00      	nop
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c070:	bf00      	nop
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d101      	bne.n	800c08e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c08a:	2301      	movs	r3, #1
 800c08c:	e03f      	b.n	800c10e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c094:	b2db      	uxtb	r3, r3
 800c096:	2b00      	cmp	r3, #0
 800c098:	d106      	bne.n	800c0a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f7fa fd92 	bl	8006bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2224      	movs	r2, #36	; 0x24
 800c0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	68da      	ldr	r2, [r3, #12]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c0be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 fddf 	bl	800cc84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	691a      	ldr	r2, [r3, #16]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c0d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	695a      	ldr	r2, [r3, #20]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c0e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68da      	ldr	r2, [r3, #12]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c0f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2220      	movs	r2, #32
 800c100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2220      	movs	r2, #32
 800c108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b08a      	sub	sp, #40	; 0x28
 800c11a:	af02      	add	r7, sp, #8
 800c11c:	60f8      	str	r0, [r7, #12]
 800c11e:	60b9      	str	r1, [r7, #8]
 800c120:	603b      	str	r3, [r7, #0]
 800c122:	4613      	mov	r3, r2
 800c124:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c126:	2300      	movs	r3, #0
 800c128:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c130:	b2db      	uxtb	r3, r3
 800c132:	2b20      	cmp	r3, #32
 800c134:	d17c      	bne.n	800c230 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d002      	beq.n	800c142 <HAL_UART_Transmit+0x2c>
 800c13c:	88fb      	ldrh	r3, [r7, #6]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d101      	bne.n	800c146 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	e075      	b.n	800c232 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d101      	bne.n	800c154 <HAL_UART_Transmit+0x3e>
 800c150:	2302      	movs	r3, #2
 800c152:	e06e      	b.n	800c232 <HAL_UART_Transmit+0x11c>
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2200      	movs	r2, #0
 800c160:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2221      	movs	r2, #33	; 0x21
 800c166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c16a:	f7fa ff29 	bl	8006fc0 <HAL_GetTick>
 800c16e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	88fa      	ldrh	r2, [r7, #6]
 800c174:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	88fa      	ldrh	r2, [r7, #6]
 800c17a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c184:	d108      	bne.n	800c198 <HAL_UART_Transmit+0x82>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d104      	bne.n	800c198 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c18e:	2300      	movs	r3, #0
 800c190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	61bb      	str	r3, [r7, #24]
 800c196:	e003      	b.n	800c1a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c19c:	2300      	movs	r3, #0
 800c19e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c1a8:	e02a      	b.n	800c200 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	2180      	movs	r1, #128	; 0x80
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f000 fb1f 	bl	800c7f8 <UART_WaitOnFlagUntilTimeout>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d001      	beq.n	800c1c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c1c0:	2303      	movs	r3, #3
 800c1c2:	e036      	b.n	800c232 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d10b      	bne.n	800c1e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	881b      	ldrh	r3, [r3, #0]
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	3302      	adds	r3, #2
 800c1de:	61bb      	str	r3, [r7, #24]
 800c1e0:	e007      	b.n	800c1f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	781a      	ldrb	r2, [r3, #0]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	b29a      	uxth	r2, r3
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c204:	b29b      	uxth	r3, r3
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1cf      	bne.n	800c1aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	2200      	movs	r2, #0
 800c212:	2140      	movs	r1, #64	; 0x40
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	f000 faef 	bl	800c7f8 <UART_WaitOnFlagUntilTimeout>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d001      	beq.n	800c224 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c220:	2303      	movs	r3, #3
 800c222:	e006      	b.n	800c232 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2220      	movs	r2, #32
 800c228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c22c:	2300      	movs	r3, #0
 800c22e:	e000      	b.n	800c232 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c230:	2302      	movs	r3, #2
  }
}
 800c232:	4618      	mov	r0, r3
 800c234:	3720      	adds	r7, #32
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b084      	sub	sp, #16
 800c23e:	af00      	add	r7, sp, #0
 800c240:	60f8      	str	r0, [r7, #12]
 800c242:	60b9      	str	r1, [r7, #8]
 800c244:	4613      	mov	r3, r2
 800c246:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	2b20      	cmp	r3, #32
 800c252:	d11d      	bne.n	800c290 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d002      	beq.n	800c260 <HAL_UART_Receive_IT+0x26>
 800c25a:	88fb      	ldrh	r3, [r7, #6]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d101      	bne.n	800c264 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c260:	2301      	movs	r3, #1
 800c262:	e016      	b.n	800c292 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d101      	bne.n	800c272 <HAL_UART_Receive_IT+0x38>
 800c26e:	2302      	movs	r3, #2
 800c270:	e00f      	b.n	800c292 <HAL_UART_Receive_IT+0x58>
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2201      	movs	r2, #1
 800c276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2200      	movs	r2, #0
 800c27e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c280:	88fb      	ldrh	r3, [r7, #6]
 800c282:	461a      	mov	r2, r3
 800c284:	68b9      	ldr	r1, [r7, #8]
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f000 fb24 	bl	800c8d4 <UART_Start_Receive_IT>
 800c28c:	4603      	mov	r3, r0
 800c28e:	e000      	b.n	800c292 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c290:	2302      	movs	r3, #2
  }
}
 800c292:	4618      	mov	r0, r3
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
	...

0800c29c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b0ba      	sub	sp, #232	; 0xe8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	695b      	ldr	r3, [r3, #20]
 800c2be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c2ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2d2:	f003 030f 	and.w	r3, r3, #15
 800c2d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c2da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d10f      	bne.n	800c302 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c2e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2e6:	f003 0320 	and.w	r3, r3, #32
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d009      	beq.n	800c302 <HAL_UART_IRQHandler+0x66>
 800c2ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2f2:	f003 0320 	and.w	r3, r3, #32
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d003      	beq.n	800c302 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fc07 	bl	800cb0e <UART_Receive_IT>
      return;
 800c300:	e256      	b.n	800c7b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c306:	2b00      	cmp	r3, #0
 800c308:	f000 80de 	beq.w	800c4c8 <HAL_UART_IRQHandler+0x22c>
 800c30c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c310:	f003 0301 	and.w	r3, r3, #1
 800c314:	2b00      	cmp	r3, #0
 800c316:	d106      	bne.n	800c326 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c31c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c320:	2b00      	cmp	r3, #0
 800c322:	f000 80d1 	beq.w	800c4c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c32a:	f003 0301 	and.w	r3, r3, #1
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d00b      	beq.n	800c34a <HAL_UART_IRQHandler+0xae>
 800c332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d005      	beq.n	800c34a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c342:	f043 0201 	orr.w	r2, r3, #1
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c34e:	f003 0304 	and.w	r3, r3, #4
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00b      	beq.n	800c36e <HAL_UART_IRQHandler+0xd2>
 800c356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c35a:	f003 0301 	and.w	r3, r3, #1
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d005      	beq.n	800c36e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c366:	f043 0202 	orr.w	r2, r3, #2
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c36e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c372:	f003 0302 	and.w	r3, r3, #2
 800c376:	2b00      	cmp	r3, #0
 800c378:	d00b      	beq.n	800c392 <HAL_UART_IRQHandler+0xf6>
 800c37a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c37e:	f003 0301 	and.w	r3, r3, #1
 800c382:	2b00      	cmp	r3, #0
 800c384:	d005      	beq.n	800c392 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38a:	f043 0204 	orr.w	r2, r3, #4
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c396:	f003 0308 	and.w	r3, r3, #8
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d011      	beq.n	800c3c2 <HAL_UART_IRQHandler+0x126>
 800c39e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3a2:	f003 0320 	and.w	r3, r3, #32
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d105      	bne.n	800c3b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c3aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3ae:	f003 0301 	and.w	r3, r3, #1
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d005      	beq.n	800c3c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ba:	f043 0208 	orr.w	r2, r3, #8
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f000 81ed 	beq.w	800c7a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c3cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3d0:	f003 0320 	and.w	r3, r3, #32
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d008      	beq.n	800c3ea <HAL_UART_IRQHandler+0x14e>
 800c3d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3dc:	f003 0320 	and.w	r3, r3, #32
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d002      	beq.n	800c3ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 fb92 	bl	800cb0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	695b      	ldr	r3, [r3, #20]
 800c3f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3f4:	2b40      	cmp	r3, #64	; 0x40
 800c3f6:	bf0c      	ite	eq
 800c3f8:	2301      	moveq	r3, #1
 800c3fa:	2300      	movne	r3, #0
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c406:	f003 0308 	and.w	r3, r3, #8
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d103      	bne.n	800c416 <HAL_UART_IRQHandler+0x17a>
 800c40e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c412:	2b00      	cmp	r3, #0
 800c414:	d04f      	beq.n	800c4b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 fa9a 	bl	800c950 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	695b      	ldr	r3, [r3, #20]
 800c422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c426:	2b40      	cmp	r3, #64	; 0x40
 800c428:	d141      	bne.n	800c4ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	3314      	adds	r3, #20
 800c430:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c434:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c438:	e853 3f00 	ldrex	r3, [r3]
 800c43c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c440:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	3314      	adds	r3, #20
 800c452:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c456:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c45a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c45e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c462:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c466:	e841 2300 	strex	r3, r2, [r1]
 800c46a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c46e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1d9      	bne.n	800c42a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d013      	beq.n	800c4a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c482:	4a7d      	ldr	r2, [pc, #500]	; (800c678 <HAL_UART_IRQHandler+0x3dc>)
 800c484:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fa ff49 	bl	8007322 <HAL_DMA_Abort_IT>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d016      	beq.n	800c4c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4a4:	e00e      	b.n	800c4c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 f990 	bl	800c7cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4ac:	e00a      	b.n	800c4c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 f98c 	bl	800c7cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4b4:	e006      	b.n	800c4c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 f988 	bl	800c7cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c4c2:	e170      	b.n	800c7a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4c4:	bf00      	nop
    return;
 800c4c6:	e16e      	b.n	800c7a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	f040 814a 	bne.w	800c766 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c4d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4d6:	f003 0310 	and.w	r3, r3, #16
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f000 8143 	beq.w	800c766 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c4e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4e4:	f003 0310 	and.w	r3, r3, #16
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f000 813c 	beq.w	800c766 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	60bb      	str	r3, [r7, #8]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	60bb      	str	r3, [r7, #8]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	60bb      	str	r3, [r7, #8]
 800c502:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	695b      	ldr	r3, [r3, #20]
 800c50a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c50e:	2b40      	cmp	r3, #64	; 0x40
 800c510:	f040 80b4 	bne.w	800c67c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c520:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c524:	2b00      	cmp	r3, #0
 800c526:	f000 8140 	beq.w	800c7aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c52e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c532:	429a      	cmp	r2, r3
 800c534:	f080 8139 	bcs.w	800c7aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c53e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c544:	69db      	ldr	r3, [r3, #28]
 800c546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c54a:	f000 8088 	beq.w	800c65e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	330c      	adds	r3, #12
 800c554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c558:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c55c:	e853 3f00 	ldrex	r3, [r3]
 800c560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c564:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c56c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	330c      	adds	r3, #12
 800c576:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c57a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c57e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c582:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c586:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c58a:	e841 2300 	strex	r3, r2, [r1]
 800c58e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1d9      	bne.n	800c54e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	3314      	adds	r3, #20
 800c5a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5a4:	e853 3f00 	ldrex	r3, [r3]
 800c5a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c5aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5ac:	f023 0301 	bic.w	r3, r3, #1
 800c5b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3314      	adds	r3, #20
 800c5ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c5be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c5c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c5c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c5ca:	e841 2300 	strex	r3, r2, [r1]
 800c5ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c5d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d1e1      	bne.n	800c59a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	3314      	adds	r3, #20
 800c5dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5e0:	e853 3f00 	ldrex	r3, [r3]
 800c5e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c5e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	3314      	adds	r3, #20
 800c5f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c5fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c5fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c600:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c602:	e841 2300 	strex	r3, r2, [r1]
 800c606:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1e3      	bne.n	800c5d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2220      	movs	r2, #32
 800c612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2200      	movs	r2, #0
 800c61a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	330c      	adds	r3, #12
 800c622:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c626:	e853 3f00 	ldrex	r3, [r3]
 800c62a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c62c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c62e:	f023 0310 	bic.w	r3, r3, #16
 800c632:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	330c      	adds	r3, #12
 800c63c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c640:	65ba      	str	r2, [r7, #88]	; 0x58
 800c642:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c644:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c646:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c648:	e841 2300 	strex	r3, r2, [r1]
 800c64c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1e3      	bne.n	800c61c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c658:	4618      	mov	r0, r3
 800c65a:	f7fa fdf2 	bl	8007242 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c666:	b29b      	uxth	r3, r3
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	4619      	mov	r1, r3
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 f8b6 	bl	800c7e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c674:	e099      	b.n	800c7aa <HAL_UART_IRQHandler+0x50e>
 800c676:	bf00      	nop
 800c678:	0800ca17 	.word	0x0800ca17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c684:	b29b      	uxth	r3, r3
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c690:	b29b      	uxth	r3, r3
 800c692:	2b00      	cmp	r3, #0
 800c694:	f000 808b 	beq.w	800c7ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f000 8086 	beq.w	800c7ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	330c      	adds	r3, #12
 800c6a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ac:	e853 3f00 	ldrex	r3, [r3]
 800c6b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	330c      	adds	r3, #12
 800c6c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c6c6:	647a      	str	r2, [r7, #68]	; 0x44
 800c6c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c6cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6ce:	e841 2300 	strex	r3, r2, [r1]
 800c6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1e3      	bne.n	800c6a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	3314      	adds	r3, #20
 800c6e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e4:	e853 3f00 	ldrex	r3, [r3]
 800c6e8:	623b      	str	r3, [r7, #32]
   return(result);
 800c6ea:	6a3b      	ldr	r3, [r7, #32]
 800c6ec:	f023 0301 	bic.w	r3, r3, #1
 800c6f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	3314      	adds	r3, #20
 800c6fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c6fe:	633a      	str	r2, [r7, #48]	; 0x30
 800c700:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c706:	e841 2300 	strex	r3, r2, [r1]
 800c70a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d1e3      	bne.n	800c6da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2220      	movs	r2, #32
 800c716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2200      	movs	r2, #0
 800c71e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	330c      	adds	r3, #12
 800c726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	e853 3f00 	ldrex	r3, [r3]
 800c72e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f023 0310 	bic.w	r3, r3, #16
 800c736:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	330c      	adds	r3, #12
 800c740:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c744:	61fa      	str	r2, [r7, #28]
 800c746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c748:	69b9      	ldr	r1, [r7, #24]
 800c74a:	69fa      	ldr	r2, [r7, #28]
 800c74c:	e841 2300 	strex	r3, r2, [r1]
 800c750:	617b      	str	r3, [r7, #20]
   return(result);
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1e3      	bne.n	800c720 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c75c:	4619      	mov	r1, r3
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f83e 	bl	800c7e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c764:	e023      	b.n	800c7ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c76a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d009      	beq.n	800c786 <HAL_UART_IRQHandler+0x4ea>
 800c772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d003      	beq.n	800c786 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 f95d 	bl	800ca3e <UART_Transmit_IT>
    return;
 800c784:	e014      	b.n	800c7b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c78a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00e      	beq.n	800c7b0 <HAL_UART_IRQHandler+0x514>
 800c792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d008      	beq.n	800c7b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 f99d 	bl	800cade <UART_EndTransmit_IT>
    return;
 800c7a4:	e004      	b.n	800c7b0 <HAL_UART_IRQHandler+0x514>
    return;
 800c7a6:	bf00      	nop
 800c7a8:	e002      	b.n	800c7b0 <HAL_UART_IRQHandler+0x514>
      return;
 800c7aa:	bf00      	nop
 800c7ac:	e000      	b.n	800c7b0 <HAL_UART_IRQHandler+0x514>
      return;
 800c7ae:	bf00      	nop
  }
}
 800c7b0:	37e8      	adds	r7, #232	; 0xe8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop

0800c7b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c7c0:	bf00      	nop
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c7d4:	bf00      	nop
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c7ec:	bf00      	nop
 800c7ee:	370c      	adds	r7, #12
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b090      	sub	sp, #64	; 0x40
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	603b      	str	r3, [r7, #0]
 800c804:	4613      	mov	r3, r2
 800c806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c808:	e050      	b.n	800c8ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c80a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c80c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c810:	d04c      	beq.n	800c8ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c814:	2b00      	cmp	r3, #0
 800c816:	d007      	beq.n	800c828 <UART_WaitOnFlagUntilTimeout+0x30>
 800c818:	f7fa fbd2 	bl	8006fc0 <HAL_GetTick>
 800c81c:	4602      	mov	r2, r0
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	1ad3      	subs	r3, r2, r3
 800c822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c824:	429a      	cmp	r2, r3
 800c826:	d241      	bcs.n	800c8ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	330c      	adds	r3, #12
 800c82e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c832:	e853 3f00 	ldrex	r3, [r3]
 800c836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c83e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	330c      	adds	r3, #12
 800c846:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c848:	637a      	str	r2, [r7, #52]	; 0x34
 800c84a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c84c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c84e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c850:	e841 2300 	strex	r3, r2, [r1]
 800c854:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d1e5      	bne.n	800c828 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	3314      	adds	r3, #20
 800c862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	e853 3f00 	ldrex	r3, [r3]
 800c86a:	613b      	str	r3, [r7, #16]
   return(result);
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	f023 0301 	bic.w	r3, r3, #1
 800c872:	63bb      	str	r3, [r7, #56]	; 0x38
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	3314      	adds	r3, #20
 800c87a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c87c:	623a      	str	r2, [r7, #32]
 800c87e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c880:	69f9      	ldr	r1, [r7, #28]
 800c882:	6a3a      	ldr	r2, [r7, #32]
 800c884:	e841 2300 	strex	r3, r2, [r1]
 800c888:	61bb      	str	r3, [r7, #24]
   return(result);
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1e5      	bne.n	800c85c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2220      	movs	r2, #32
 800c894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2220      	movs	r2, #32
 800c89c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c8a8:	2303      	movs	r3, #3
 800c8aa:	e00f      	b.n	800c8cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	bf0c      	ite	eq
 800c8bc:	2301      	moveq	r3, #1
 800c8be:	2300      	movne	r3, #0
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	79fb      	ldrb	r3, [r7, #7]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d09f      	beq.n	800c80a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c8ca:	2300      	movs	r3, #0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3740      	adds	r7, #64	; 0x40
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b085      	sub	sp, #20
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	4613      	mov	r3, r2
 800c8e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	68ba      	ldr	r2, [r7, #8]
 800c8e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	88fa      	ldrh	r2, [r7, #6]
 800c8ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	88fa      	ldrh	r2, [r7, #6]
 800c8f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2222      	movs	r2, #34	; 0x22
 800c8fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2200      	movs	r2, #0
 800c906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	691b      	ldr	r3, [r3, #16]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d007      	beq.n	800c922 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	68da      	ldr	r2, [r3, #12]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c920:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	695a      	ldr	r2, [r3, #20]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f042 0201 	orr.w	r2, r2, #1
 800c930:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	68da      	ldr	r2, [r3, #12]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f042 0220 	orr.w	r2, r2, #32
 800c940:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c942:	2300      	movs	r3, #0
}
 800c944:	4618      	mov	r0, r3
 800c946:	3714      	adds	r7, #20
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c950:	b480      	push	{r7}
 800c952:	b095      	sub	sp, #84	; 0x54
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	330c      	adds	r3, #12
 800c95e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c962:	e853 3f00 	ldrex	r3, [r3]
 800c966:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c96e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	330c      	adds	r3, #12
 800c976:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c978:	643a      	str	r2, [r7, #64]	; 0x40
 800c97a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c97e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c980:	e841 2300 	strex	r3, r2, [r1]
 800c984:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d1e5      	bne.n	800c958 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	3314      	adds	r3, #20
 800c992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c994:	6a3b      	ldr	r3, [r7, #32]
 800c996:	e853 3f00 	ldrex	r3, [r3]
 800c99a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	f023 0301 	bic.w	r3, r3, #1
 800c9a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	3314      	adds	r3, #20
 800c9aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c9ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9b4:	e841 2300 	strex	r3, r2, [r1]
 800c9b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d1e5      	bne.n	800c98c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d119      	bne.n	800c9fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	330c      	adds	r3, #12
 800c9ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	e853 3f00 	ldrex	r3, [r3]
 800c9d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	f023 0310 	bic.w	r3, r3, #16
 800c9de:	647b      	str	r3, [r7, #68]	; 0x44
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	330c      	adds	r3, #12
 800c9e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9e8:	61ba      	str	r2, [r7, #24]
 800c9ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ec:	6979      	ldr	r1, [r7, #20]
 800c9ee:	69ba      	ldr	r2, [r7, #24]
 800c9f0:	e841 2300 	strex	r3, r2, [r1]
 800c9f4:	613b      	str	r3, [r7, #16]
   return(result);
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1e5      	bne.n	800c9c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2220      	movs	r2, #32
 800ca00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ca0a:	bf00      	nop
 800ca0c:	3754      	adds	r7, #84	; 0x54
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b084      	sub	sp, #16
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2200      	movs	r2, #0
 800ca28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca30:	68f8      	ldr	r0, [r7, #12]
 800ca32:	f7ff fecb 	bl	800c7cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca36:	bf00      	nop
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ca3e:	b480      	push	{r7}
 800ca40:	b085      	sub	sp, #20
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	2b21      	cmp	r3, #33	; 0x21
 800ca50:	d13e      	bne.n	800cad0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca5a:	d114      	bne.n	800ca86 <UART_Transmit_IT+0x48>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d110      	bne.n	800ca86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6a1b      	ldr	r3, [r3, #32]
 800ca68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	881b      	ldrh	r3, [r3, #0]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a1b      	ldr	r3, [r3, #32]
 800ca7e:	1c9a      	adds	r2, r3, #2
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	621a      	str	r2, [r3, #32]
 800ca84:	e008      	b.n	800ca98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6a1b      	ldr	r3, [r3, #32]
 800ca8a:	1c59      	adds	r1, r3, #1
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	6211      	str	r1, [r2, #32]
 800ca90:	781a      	ldrb	r2, [r3, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	4619      	mov	r1, r3
 800caa6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10f      	bne.n	800cacc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	68da      	ldr	r2, [r3, #12]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800caba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	68da      	ldr	r2, [r3, #12]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800caca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cacc:	2300      	movs	r3, #0
 800cace:	e000      	b.n	800cad2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cad0:	2302      	movs	r3, #2
  }
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3714      	adds	r7, #20
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr

0800cade <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b082      	sub	sp, #8
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68da      	ldr	r2, [r3, #12]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800caf4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2220      	movs	r2, #32
 800cafa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f7ff fe5a 	bl	800c7b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cb04:	2300      	movs	r3, #0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}

0800cb0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b08c      	sub	sp, #48	; 0x30
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	2b22      	cmp	r3, #34	; 0x22
 800cb20:	f040 80ab 	bne.w	800cc7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb2c:	d117      	bne.n	800cb5e <UART_Receive_IT+0x50>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	691b      	ldr	r3, [r3, #16]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d113      	bne.n	800cb5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cb36:	2300      	movs	r3, #0
 800cb38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb56:	1c9a      	adds	r2, r3, #2
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	629a      	str	r2, [r3, #40]	; 0x28
 800cb5c:	e026      	b.n	800cbac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cb64:	2300      	movs	r3, #0
 800cb66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb70:	d007      	beq.n	800cb82 <UART_Receive_IT+0x74>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d10a      	bne.n	800cb90 <UART_Receive_IT+0x82>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d106      	bne.n	800cb90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	b2da      	uxtb	r2, r3
 800cb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8c:	701a      	strb	r2, [r3, #0]
 800cb8e:	e008      	b.n	800cba2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb9c:	b2da      	uxtb	r2, r3
 800cb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cba6:	1c5a      	adds	r2, r3, #1
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	4619      	mov	r1, r3
 800cbba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d15a      	bne.n	800cc76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	68da      	ldr	r2, [r3, #12]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f022 0220 	bic.w	r2, r2, #32
 800cbce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	68da      	ldr	r2, [r3, #12]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cbde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	695a      	ldr	r2, [r3, #20]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f022 0201 	bic.w	r2, r2, #1
 800cbee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2220      	movs	r2, #32
 800cbf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d135      	bne.n	800cc6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	330c      	adds	r3, #12
 800cc0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	e853 3f00 	ldrex	r3, [r3]
 800cc14:	613b      	str	r3, [r7, #16]
   return(result);
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	f023 0310 	bic.w	r3, r3, #16
 800cc1c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	330c      	adds	r3, #12
 800cc24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc26:	623a      	str	r2, [r7, #32]
 800cc28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc2a:	69f9      	ldr	r1, [r7, #28]
 800cc2c:	6a3a      	ldr	r2, [r7, #32]
 800cc2e:	e841 2300 	strex	r3, r2, [r1]
 800cc32:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1e5      	bne.n	800cc06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f003 0310 	and.w	r3, r3, #16
 800cc44:	2b10      	cmp	r3, #16
 800cc46:	d10a      	bne.n	800cc5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cc48:	2300      	movs	r3, #0
 800cc4a:	60fb      	str	r3, [r7, #12]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	60fb      	str	r3, [r7, #12]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	60fb      	str	r3, [r7, #12]
 800cc5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cc62:	4619      	mov	r1, r3
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff fdbb 	bl	800c7e0 <HAL_UARTEx_RxEventCallback>
 800cc6a:	e002      	b.n	800cc72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7f4 fd9d 	bl	80017ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cc72:	2300      	movs	r3, #0
 800cc74:	e002      	b.n	800cc7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800cc76:	2300      	movs	r3, #0
 800cc78:	e000      	b.n	800cc7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800cc7a:	2302      	movs	r3, #2
  }
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3730      	adds	r7, #48	; 0x30
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc88:	b0c0      	sub	sp, #256	; 0x100
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	691b      	ldr	r3, [r3, #16]
 800cc98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cc9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cca0:	68d9      	ldr	r1, [r3, #12]
 800cca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	ea40 0301 	orr.w	r3, r0, r1
 800ccac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ccae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccb2:	689a      	ldr	r2, [r3, #8]
 800ccb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccb8:	691b      	ldr	r3, [r3, #16]
 800ccba:	431a      	orrs	r2, r3
 800ccbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccc0:	695b      	ldr	r3, [r3, #20]
 800ccc2:	431a      	orrs	r2, r3
 800ccc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccc8:	69db      	ldr	r3, [r3, #28]
 800ccca:	4313      	orrs	r3, r2
 800cccc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ccd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ccdc:	f021 010c 	bic.w	r1, r1, #12
 800cce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ccea:	430b      	orrs	r3, r1
 800ccec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ccee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	695b      	ldr	r3, [r3, #20]
 800ccf6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ccfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccfe:	6999      	ldr	r1, [r3, #24]
 800cd00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	ea40 0301 	orr.w	r3, r0, r1
 800cd0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cd0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	4b8f      	ldr	r3, [pc, #572]	; (800cf50 <UART_SetConfig+0x2cc>)
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d005      	beq.n	800cd24 <UART_SetConfig+0xa0>
 800cd18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	4b8d      	ldr	r3, [pc, #564]	; (800cf54 <UART_SetConfig+0x2d0>)
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d104      	bne.n	800cd2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cd24:	f7fd fcc4 	bl	800a6b0 <HAL_RCC_GetPCLK2Freq>
 800cd28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cd2c:	e003      	b.n	800cd36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cd2e:	f7fd fcab 	bl	800a688 <HAL_RCC_GetPCLK1Freq>
 800cd32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd3a:	69db      	ldr	r3, [r3, #28]
 800cd3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd40:	f040 810c 	bne.w	800cf5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cd44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cd4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cd52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cd56:	4622      	mov	r2, r4
 800cd58:	462b      	mov	r3, r5
 800cd5a:	1891      	adds	r1, r2, r2
 800cd5c:	65b9      	str	r1, [r7, #88]	; 0x58
 800cd5e:	415b      	adcs	r3, r3
 800cd60:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cd66:	4621      	mov	r1, r4
 800cd68:	eb12 0801 	adds.w	r8, r2, r1
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	eb43 0901 	adc.w	r9, r3, r1
 800cd72:	f04f 0200 	mov.w	r2, #0
 800cd76:	f04f 0300 	mov.w	r3, #0
 800cd7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cd7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cd82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cd86:	4690      	mov	r8, r2
 800cd88:	4699      	mov	r9, r3
 800cd8a:	4623      	mov	r3, r4
 800cd8c:	eb18 0303 	adds.w	r3, r8, r3
 800cd90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cd94:	462b      	mov	r3, r5
 800cd96:	eb49 0303 	adc.w	r3, r9, r3
 800cd9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cd9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cdaa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cdae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	18db      	adds	r3, r3, r3
 800cdb6:	653b      	str	r3, [r7, #80]	; 0x50
 800cdb8:	4613      	mov	r3, r2
 800cdba:	eb42 0303 	adc.w	r3, r2, r3
 800cdbe:	657b      	str	r3, [r7, #84]	; 0x54
 800cdc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cdc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cdc8:	f7f3 ff5e 	bl	8000c88 <__aeabi_uldivmod>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	4b61      	ldr	r3, [pc, #388]	; (800cf58 <UART_SetConfig+0x2d4>)
 800cdd2:	fba3 2302 	umull	r2, r3, r3, r2
 800cdd6:	095b      	lsrs	r3, r3, #5
 800cdd8:	011c      	lsls	r4, r3, #4
 800cdda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cdde:	2200      	movs	r2, #0
 800cde0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cde4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cde8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cdec:	4642      	mov	r2, r8
 800cdee:	464b      	mov	r3, r9
 800cdf0:	1891      	adds	r1, r2, r2
 800cdf2:	64b9      	str	r1, [r7, #72]	; 0x48
 800cdf4:	415b      	adcs	r3, r3
 800cdf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cdf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cdfc:	4641      	mov	r1, r8
 800cdfe:	eb12 0a01 	adds.w	sl, r2, r1
 800ce02:	4649      	mov	r1, r9
 800ce04:	eb43 0b01 	adc.w	fp, r3, r1
 800ce08:	f04f 0200 	mov.w	r2, #0
 800ce0c:	f04f 0300 	mov.w	r3, #0
 800ce10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ce14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ce18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ce1c:	4692      	mov	sl, r2
 800ce1e:	469b      	mov	fp, r3
 800ce20:	4643      	mov	r3, r8
 800ce22:	eb1a 0303 	adds.w	r3, sl, r3
 800ce26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ce2a:	464b      	mov	r3, r9
 800ce2c:	eb4b 0303 	adc.w	r3, fp, r3
 800ce30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ce34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ce40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ce44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ce48:	460b      	mov	r3, r1
 800ce4a:	18db      	adds	r3, r3, r3
 800ce4c:	643b      	str	r3, [r7, #64]	; 0x40
 800ce4e:	4613      	mov	r3, r2
 800ce50:	eb42 0303 	adc.w	r3, r2, r3
 800ce54:	647b      	str	r3, [r7, #68]	; 0x44
 800ce56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ce5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ce5e:	f7f3 ff13 	bl	8000c88 <__aeabi_uldivmod>
 800ce62:	4602      	mov	r2, r0
 800ce64:	460b      	mov	r3, r1
 800ce66:	4611      	mov	r1, r2
 800ce68:	4b3b      	ldr	r3, [pc, #236]	; (800cf58 <UART_SetConfig+0x2d4>)
 800ce6a:	fba3 2301 	umull	r2, r3, r3, r1
 800ce6e:	095b      	lsrs	r3, r3, #5
 800ce70:	2264      	movs	r2, #100	; 0x64
 800ce72:	fb02 f303 	mul.w	r3, r2, r3
 800ce76:	1acb      	subs	r3, r1, r3
 800ce78:	00db      	lsls	r3, r3, #3
 800ce7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ce7e:	4b36      	ldr	r3, [pc, #216]	; (800cf58 <UART_SetConfig+0x2d4>)
 800ce80:	fba3 2302 	umull	r2, r3, r3, r2
 800ce84:	095b      	lsrs	r3, r3, #5
 800ce86:	005b      	lsls	r3, r3, #1
 800ce88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ce8c:	441c      	add	r4, r3
 800ce8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce92:	2200      	movs	r2, #0
 800ce94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ce98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ce9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cea0:	4642      	mov	r2, r8
 800cea2:	464b      	mov	r3, r9
 800cea4:	1891      	adds	r1, r2, r2
 800cea6:	63b9      	str	r1, [r7, #56]	; 0x38
 800cea8:	415b      	adcs	r3, r3
 800ceaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ceac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ceb0:	4641      	mov	r1, r8
 800ceb2:	1851      	adds	r1, r2, r1
 800ceb4:	6339      	str	r1, [r7, #48]	; 0x30
 800ceb6:	4649      	mov	r1, r9
 800ceb8:	414b      	adcs	r3, r1
 800ceba:	637b      	str	r3, [r7, #52]	; 0x34
 800cebc:	f04f 0200 	mov.w	r2, #0
 800cec0:	f04f 0300 	mov.w	r3, #0
 800cec4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cec8:	4659      	mov	r1, fp
 800ceca:	00cb      	lsls	r3, r1, #3
 800cecc:	4651      	mov	r1, sl
 800cece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ced2:	4651      	mov	r1, sl
 800ced4:	00ca      	lsls	r2, r1, #3
 800ced6:	4610      	mov	r0, r2
 800ced8:	4619      	mov	r1, r3
 800ceda:	4603      	mov	r3, r0
 800cedc:	4642      	mov	r2, r8
 800cede:	189b      	adds	r3, r3, r2
 800cee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cee4:	464b      	mov	r3, r9
 800cee6:	460a      	mov	r2, r1
 800cee8:	eb42 0303 	adc.w	r3, r2, r3
 800ceec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	2200      	movs	r2, #0
 800cef8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cefc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cf00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cf04:	460b      	mov	r3, r1
 800cf06:	18db      	adds	r3, r3, r3
 800cf08:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf0a:	4613      	mov	r3, r2
 800cf0c:	eb42 0303 	adc.w	r3, r2, r3
 800cf10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cf16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cf1a:	f7f3 feb5 	bl	8000c88 <__aeabi_uldivmod>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	460b      	mov	r3, r1
 800cf22:	4b0d      	ldr	r3, [pc, #52]	; (800cf58 <UART_SetConfig+0x2d4>)
 800cf24:	fba3 1302 	umull	r1, r3, r3, r2
 800cf28:	095b      	lsrs	r3, r3, #5
 800cf2a:	2164      	movs	r1, #100	; 0x64
 800cf2c:	fb01 f303 	mul.w	r3, r1, r3
 800cf30:	1ad3      	subs	r3, r2, r3
 800cf32:	00db      	lsls	r3, r3, #3
 800cf34:	3332      	adds	r3, #50	; 0x32
 800cf36:	4a08      	ldr	r2, [pc, #32]	; (800cf58 <UART_SetConfig+0x2d4>)
 800cf38:	fba2 2303 	umull	r2, r3, r2, r3
 800cf3c:	095b      	lsrs	r3, r3, #5
 800cf3e:	f003 0207 	and.w	r2, r3, #7
 800cf42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4422      	add	r2, r4
 800cf4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cf4c:	e105      	b.n	800d15a <UART_SetConfig+0x4d6>
 800cf4e:	bf00      	nop
 800cf50:	40011000 	.word	0x40011000
 800cf54:	40011400 	.word	0x40011400
 800cf58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cf5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf60:	2200      	movs	r2, #0
 800cf62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cf66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cf6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cf6e:	4642      	mov	r2, r8
 800cf70:	464b      	mov	r3, r9
 800cf72:	1891      	adds	r1, r2, r2
 800cf74:	6239      	str	r1, [r7, #32]
 800cf76:	415b      	adcs	r3, r3
 800cf78:	627b      	str	r3, [r7, #36]	; 0x24
 800cf7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cf7e:	4641      	mov	r1, r8
 800cf80:	1854      	adds	r4, r2, r1
 800cf82:	4649      	mov	r1, r9
 800cf84:	eb43 0501 	adc.w	r5, r3, r1
 800cf88:	f04f 0200 	mov.w	r2, #0
 800cf8c:	f04f 0300 	mov.w	r3, #0
 800cf90:	00eb      	lsls	r3, r5, #3
 800cf92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cf96:	00e2      	lsls	r2, r4, #3
 800cf98:	4614      	mov	r4, r2
 800cf9a:	461d      	mov	r5, r3
 800cf9c:	4643      	mov	r3, r8
 800cf9e:	18e3      	adds	r3, r4, r3
 800cfa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cfa4:	464b      	mov	r3, r9
 800cfa6:	eb45 0303 	adc.w	r3, r5, r3
 800cfaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cfae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cfba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cfbe:	f04f 0200 	mov.w	r2, #0
 800cfc2:	f04f 0300 	mov.w	r3, #0
 800cfc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cfca:	4629      	mov	r1, r5
 800cfcc:	008b      	lsls	r3, r1, #2
 800cfce:	4621      	mov	r1, r4
 800cfd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cfd4:	4621      	mov	r1, r4
 800cfd6:	008a      	lsls	r2, r1, #2
 800cfd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cfdc:	f7f3 fe54 	bl	8000c88 <__aeabi_uldivmod>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	4b60      	ldr	r3, [pc, #384]	; (800d168 <UART_SetConfig+0x4e4>)
 800cfe6:	fba3 2302 	umull	r2, r3, r3, r2
 800cfea:	095b      	lsrs	r3, r3, #5
 800cfec:	011c      	lsls	r4, r3, #4
 800cfee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cff2:	2200      	movs	r2, #0
 800cff4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cff8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cffc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d000:	4642      	mov	r2, r8
 800d002:	464b      	mov	r3, r9
 800d004:	1891      	adds	r1, r2, r2
 800d006:	61b9      	str	r1, [r7, #24]
 800d008:	415b      	adcs	r3, r3
 800d00a:	61fb      	str	r3, [r7, #28]
 800d00c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d010:	4641      	mov	r1, r8
 800d012:	1851      	adds	r1, r2, r1
 800d014:	6139      	str	r1, [r7, #16]
 800d016:	4649      	mov	r1, r9
 800d018:	414b      	adcs	r3, r1
 800d01a:	617b      	str	r3, [r7, #20]
 800d01c:	f04f 0200 	mov.w	r2, #0
 800d020:	f04f 0300 	mov.w	r3, #0
 800d024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d028:	4659      	mov	r1, fp
 800d02a:	00cb      	lsls	r3, r1, #3
 800d02c:	4651      	mov	r1, sl
 800d02e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d032:	4651      	mov	r1, sl
 800d034:	00ca      	lsls	r2, r1, #3
 800d036:	4610      	mov	r0, r2
 800d038:	4619      	mov	r1, r3
 800d03a:	4603      	mov	r3, r0
 800d03c:	4642      	mov	r2, r8
 800d03e:	189b      	adds	r3, r3, r2
 800d040:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d044:	464b      	mov	r3, r9
 800d046:	460a      	mov	r2, r1
 800d048:	eb42 0303 	adc.w	r3, r2, r3
 800d04c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	67bb      	str	r3, [r7, #120]	; 0x78
 800d05a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d05c:	f04f 0200 	mov.w	r2, #0
 800d060:	f04f 0300 	mov.w	r3, #0
 800d064:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d068:	4649      	mov	r1, r9
 800d06a:	008b      	lsls	r3, r1, #2
 800d06c:	4641      	mov	r1, r8
 800d06e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d072:	4641      	mov	r1, r8
 800d074:	008a      	lsls	r2, r1, #2
 800d076:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d07a:	f7f3 fe05 	bl	8000c88 <__aeabi_uldivmod>
 800d07e:	4602      	mov	r2, r0
 800d080:	460b      	mov	r3, r1
 800d082:	4b39      	ldr	r3, [pc, #228]	; (800d168 <UART_SetConfig+0x4e4>)
 800d084:	fba3 1302 	umull	r1, r3, r3, r2
 800d088:	095b      	lsrs	r3, r3, #5
 800d08a:	2164      	movs	r1, #100	; 0x64
 800d08c:	fb01 f303 	mul.w	r3, r1, r3
 800d090:	1ad3      	subs	r3, r2, r3
 800d092:	011b      	lsls	r3, r3, #4
 800d094:	3332      	adds	r3, #50	; 0x32
 800d096:	4a34      	ldr	r2, [pc, #208]	; (800d168 <UART_SetConfig+0x4e4>)
 800d098:	fba2 2303 	umull	r2, r3, r2, r3
 800d09c:	095b      	lsrs	r3, r3, #5
 800d09e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d0a2:	441c      	add	r4, r3
 800d0a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	673b      	str	r3, [r7, #112]	; 0x70
 800d0ac:	677a      	str	r2, [r7, #116]	; 0x74
 800d0ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d0b2:	4642      	mov	r2, r8
 800d0b4:	464b      	mov	r3, r9
 800d0b6:	1891      	adds	r1, r2, r2
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	415b      	adcs	r3, r3
 800d0bc:	60fb      	str	r3, [r7, #12]
 800d0be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d0c2:	4641      	mov	r1, r8
 800d0c4:	1851      	adds	r1, r2, r1
 800d0c6:	6039      	str	r1, [r7, #0]
 800d0c8:	4649      	mov	r1, r9
 800d0ca:	414b      	adcs	r3, r1
 800d0cc:	607b      	str	r3, [r7, #4]
 800d0ce:	f04f 0200 	mov.w	r2, #0
 800d0d2:	f04f 0300 	mov.w	r3, #0
 800d0d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d0da:	4659      	mov	r1, fp
 800d0dc:	00cb      	lsls	r3, r1, #3
 800d0de:	4651      	mov	r1, sl
 800d0e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d0e4:	4651      	mov	r1, sl
 800d0e6:	00ca      	lsls	r2, r1, #3
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	4642      	mov	r2, r8
 800d0f0:	189b      	adds	r3, r3, r2
 800d0f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d0f4:	464b      	mov	r3, r9
 800d0f6:	460a      	mov	r2, r1
 800d0f8:	eb42 0303 	adc.w	r3, r2, r3
 800d0fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d0fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	663b      	str	r3, [r7, #96]	; 0x60
 800d108:	667a      	str	r2, [r7, #100]	; 0x64
 800d10a:	f04f 0200 	mov.w	r2, #0
 800d10e:	f04f 0300 	mov.w	r3, #0
 800d112:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d116:	4649      	mov	r1, r9
 800d118:	008b      	lsls	r3, r1, #2
 800d11a:	4641      	mov	r1, r8
 800d11c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d120:	4641      	mov	r1, r8
 800d122:	008a      	lsls	r2, r1, #2
 800d124:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d128:	f7f3 fdae 	bl	8000c88 <__aeabi_uldivmod>
 800d12c:	4602      	mov	r2, r0
 800d12e:	460b      	mov	r3, r1
 800d130:	4b0d      	ldr	r3, [pc, #52]	; (800d168 <UART_SetConfig+0x4e4>)
 800d132:	fba3 1302 	umull	r1, r3, r3, r2
 800d136:	095b      	lsrs	r3, r3, #5
 800d138:	2164      	movs	r1, #100	; 0x64
 800d13a:	fb01 f303 	mul.w	r3, r1, r3
 800d13e:	1ad3      	subs	r3, r2, r3
 800d140:	011b      	lsls	r3, r3, #4
 800d142:	3332      	adds	r3, #50	; 0x32
 800d144:	4a08      	ldr	r2, [pc, #32]	; (800d168 <UART_SetConfig+0x4e4>)
 800d146:	fba2 2303 	umull	r2, r3, r2, r3
 800d14a:	095b      	lsrs	r3, r3, #5
 800d14c:	f003 020f 	and.w	r2, r3, #15
 800d150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4422      	add	r2, r4
 800d158:	609a      	str	r2, [r3, #8]
}
 800d15a:	bf00      	nop
 800d15c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d160:	46bd      	mov	sp, r7
 800d162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d166:	bf00      	nop
 800d168:	51eb851f 	.word	0x51eb851f

0800d16c <__NVIC_SetPriority>:
{
 800d16c:	b480      	push	{r7}
 800d16e:	b083      	sub	sp, #12
 800d170:	af00      	add	r7, sp, #0
 800d172:	4603      	mov	r3, r0
 800d174:	6039      	str	r1, [r7, #0]
 800d176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	db0a      	blt.n	800d196 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	b2da      	uxtb	r2, r3
 800d184:	490c      	ldr	r1, [pc, #48]	; (800d1b8 <__NVIC_SetPriority+0x4c>)
 800d186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d18a:	0112      	lsls	r2, r2, #4
 800d18c:	b2d2      	uxtb	r2, r2
 800d18e:	440b      	add	r3, r1
 800d190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d194:	e00a      	b.n	800d1ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	b2da      	uxtb	r2, r3
 800d19a:	4908      	ldr	r1, [pc, #32]	; (800d1bc <__NVIC_SetPriority+0x50>)
 800d19c:	79fb      	ldrb	r3, [r7, #7]
 800d19e:	f003 030f 	and.w	r3, r3, #15
 800d1a2:	3b04      	subs	r3, #4
 800d1a4:	0112      	lsls	r2, r2, #4
 800d1a6:	b2d2      	uxtb	r2, r2
 800d1a8:	440b      	add	r3, r1
 800d1aa:	761a      	strb	r2, [r3, #24]
}
 800d1ac:	bf00      	nop
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr
 800d1b8:	e000e100 	.word	0xe000e100
 800d1bc:	e000ed00 	.word	0xe000ed00

0800d1c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	f06f 0004 	mvn.w	r0, #4
 800d1ca:	f7ff ffcf 	bl	800d16c <__NVIC_SetPriority>
#endif
}
 800d1ce:	bf00      	nop
 800d1d0:	bd80      	pop	{r7, pc}
	...

0800d1d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1da:	f3ef 8305 	mrs	r3, IPSR
 800d1de:	603b      	str	r3, [r7, #0]
  return(result);
 800d1e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d003      	beq.n	800d1ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d1e6:	f06f 0305 	mvn.w	r3, #5
 800d1ea:	607b      	str	r3, [r7, #4]
 800d1ec:	e00c      	b.n	800d208 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d1ee:	4b0a      	ldr	r3, [pc, #40]	; (800d218 <osKernelInitialize+0x44>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d105      	bne.n	800d202 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d1f6:	4b08      	ldr	r3, [pc, #32]	; (800d218 <osKernelInitialize+0x44>)
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	607b      	str	r3, [r7, #4]
 800d200:	e002      	b.n	800d208 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d206:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d208:	687b      	ldr	r3, [r7, #4]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	370c      	adds	r7, #12
 800d20e:	46bd      	mov	sp, r7
 800d210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d214:	4770      	bx	lr
 800d216:	bf00      	nop
 800d218:	20000868 	.word	0x20000868

0800d21c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d222:	f3ef 8305 	mrs	r3, IPSR
 800d226:	603b      	str	r3, [r7, #0]
  return(result);
 800d228:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d003      	beq.n	800d236 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d22e:	f06f 0305 	mvn.w	r3, #5
 800d232:	607b      	str	r3, [r7, #4]
 800d234:	e010      	b.n	800d258 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d236:	4b0b      	ldr	r3, [pc, #44]	; (800d264 <osKernelStart+0x48>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d109      	bne.n	800d252 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d23e:	f7ff ffbf 	bl	800d1c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d242:	4b08      	ldr	r3, [pc, #32]	; (800d264 <osKernelStart+0x48>)
 800d244:	2202      	movs	r2, #2
 800d246:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d248:	f001 f912 	bl	800e470 <vTaskStartScheduler>
      stat = osOK;
 800d24c:	2300      	movs	r3, #0
 800d24e:	607b      	str	r3, [r7, #4]
 800d250:	e002      	b.n	800d258 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d256:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d258:	687b      	ldr	r3, [r7, #4]
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	20000868 	.word	0x20000868

0800d268 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d268:	b580      	push	{r7, lr}
 800d26a:	b08e      	sub	sp, #56	; 0x38
 800d26c:	af04      	add	r7, sp, #16
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	60b9      	str	r1, [r7, #8]
 800d272:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d274:	2300      	movs	r3, #0
 800d276:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d278:	f3ef 8305 	mrs	r3, IPSR
 800d27c:	617b      	str	r3, [r7, #20]
  return(result);
 800d27e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d280:	2b00      	cmp	r3, #0
 800d282:	d17f      	bne.n	800d384 <osThreadNew+0x11c>
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d07c      	beq.n	800d384 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800d28a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d28e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d290:	2318      	movs	r3, #24
 800d292:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d294:	2300      	movs	r3, #0
 800d296:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d29c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d045      	beq.n	800d330 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d002      	beq.n	800d2b2 <osThreadNew+0x4a>
        name = attr->name;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	699b      	ldr	r3, [r3, #24]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d002      	beq.n	800d2c0 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	699b      	ldr	r3, [r3, #24]
 800d2be:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d008      	beq.n	800d2d8 <osThreadNew+0x70>
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	2b38      	cmp	r3, #56	; 0x38
 800d2ca:	d805      	bhi.n	800d2d8 <osThreadNew+0x70>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	f003 0301 	and.w	r3, r3, #1
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d001      	beq.n	800d2dc <osThreadNew+0x74>
        return (NULL);
 800d2d8:	2300      	movs	r3, #0
 800d2da:	e054      	b.n	800d386 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	695b      	ldr	r3, [r3, #20]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d003      	beq.n	800d2ec <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	695b      	ldr	r3, [r3, #20]
 800d2e8:	089b      	lsrs	r3, r3, #2
 800d2ea:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00e      	beq.n	800d312 <osThreadNew+0xaa>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	2b5b      	cmp	r3, #91	; 0x5b
 800d2fa:	d90a      	bls.n	800d312 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d300:	2b00      	cmp	r3, #0
 800d302:	d006      	beq.n	800d312 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	695b      	ldr	r3, [r3, #20]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d002      	beq.n	800d312 <osThreadNew+0xaa>
        mem = 1;
 800d30c:	2301      	movs	r3, #1
 800d30e:	61bb      	str	r3, [r7, #24]
 800d310:	e010      	b.n	800d334 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	689b      	ldr	r3, [r3, #8]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d10c      	bne.n	800d334 <osThreadNew+0xcc>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d108      	bne.n	800d334 <osThreadNew+0xcc>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	691b      	ldr	r3, [r3, #16]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d104      	bne.n	800d334 <osThreadNew+0xcc>
          mem = 0;
 800d32a:	2300      	movs	r3, #0
 800d32c:	61bb      	str	r3, [r7, #24]
 800d32e:	e001      	b.n	800d334 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800d330:	2300      	movs	r3, #0
 800d332:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d334:	69bb      	ldr	r3, [r7, #24]
 800d336:	2b01      	cmp	r3, #1
 800d338:	d110      	bne.n	800d35c <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d342:	9202      	str	r2, [sp, #8]
 800d344:	9301      	str	r3, [sp, #4]
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	9300      	str	r3, [sp, #0]
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	6a3a      	ldr	r2, [r7, #32]
 800d34e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	f000 fe39 	bl	800dfc8 <xTaskCreateStatic>
 800d356:	4603      	mov	r3, r0
 800d358:	613b      	str	r3, [r7, #16]
 800d35a:	e013      	b.n	800d384 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d110      	bne.n	800d384 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d362:	6a3b      	ldr	r3, [r7, #32]
 800d364:	b29a      	uxth	r2, r3
 800d366:	f107 0310 	add.w	r3, r7, #16
 800d36a:	9301      	str	r3, [sp, #4]
 800d36c:	69fb      	ldr	r3, [r7, #28]
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f000 fe84 	bl	800e082 <xTaskCreate>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d001      	beq.n	800d384 <osThreadNew+0x11c>
            hTask = NULL;
 800d380:	2300      	movs	r3, #0
 800d382:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d384:	693b      	ldr	r3, [r7, #16]
}
 800d386:	4618      	mov	r0, r3
 800d388:	3728      	adds	r7, #40	; 0x28
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d38e:	b580      	push	{r7, lr}
 800d390:	b084      	sub	sp, #16
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d396:	f3ef 8305 	mrs	r3, IPSR
 800d39a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d39c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d003      	beq.n	800d3aa <osDelay+0x1c>
    stat = osErrorISR;
 800d3a2:	f06f 0305 	mvn.w	r3, #5
 800d3a6:	60fb      	str	r3, [r7, #12]
 800d3a8:	e007      	b.n	800d3ba <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d002      	beq.n	800d3ba <osDelay+0x2c>
      vTaskDelay(ticks);
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f001 f827 	bl	800e408 <vTaskDelay>
    }
  }

  return (stat);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3710      	adds	r7, #16
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b086      	sub	sp, #24
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3cc:	f3ef 8305 	mrs	r3, IPSR
 800d3d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d003      	beq.n	800d3e0 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800d3d8:	f06f 0305 	mvn.w	r3, #5
 800d3dc:	617b      	str	r3, [r7, #20]
 800d3de:	e019      	b.n	800d414 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800d3e4:	f001 f956 	bl	800e694 <xTaskGetTickCount>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	1ad3      	subs	r3, r2, r3
 800d3f2:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d009      	beq.n	800d40e <osDelayUntil+0x4a>
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	db06      	blt.n	800d40e <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800d400:	f107 0308 	add.w	r3, r7, #8
 800d404:	6939      	ldr	r1, [r7, #16]
 800d406:	4618      	mov	r0, r3
 800d408:	f000 ff80 	bl	800e30c <vTaskDelayUntil>
 800d40c:	e002      	b.n	800d414 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800d40e:	f06f 0303 	mvn.w	r3, #3
 800d412:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d414:	697b      	ldr	r3, [r7, #20]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3718      	adds	r7, #24
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
	...

0800d420 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d420:	b480      	push	{r7}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	4a07      	ldr	r2, [pc, #28]	; (800d44c <vApplicationGetIdleTaskMemory+0x2c>)
 800d430:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	4a06      	ldr	r2, [pc, #24]	; (800d450 <vApplicationGetIdleTaskMemory+0x30>)
 800d436:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d43e:	601a      	str	r2, [r3, #0]
}
 800d440:	bf00      	nop
 800d442:	3714      	adds	r7, #20
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr
 800d44c:	2000086c 	.word	0x2000086c
 800d450:	200008c8 	.word	0x200008c8

0800d454 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d454:	b480      	push	{r7}
 800d456:	b085      	sub	sp, #20
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	4a07      	ldr	r2, [pc, #28]	; (800d480 <vApplicationGetTimerTaskMemory+0x2c>)
 800d464:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	4a06      	ldr	r2, [pc, #24]	; (800d484 <vApplicationGetTimerTaskMemory+0x30>)
 800d46a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d472:	601a      	str	r2, [r3, #0]
}
 800d474:	bf00      	nop
 800d476:	3714      	adds	r7, #20
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr
 800d480:	200010c8 	.word	0x200010c8
 800d484:	20001124 	.word	0x20001124

0800d488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f103 0208 	add.w	r2, r3, #8
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f103 0208 	add.w	r2, r3, #8
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f103 0208 	add.w	r2, r3, #8
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d4bc:	bf00      	nop
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d4d6:	bf00      	nop
 800d4d8:	370c      	adds	r7, #12
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4e2:	b480      	push	{r7}
 800d4e4:	b085      	sub	sp, #20
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	689a      	ldr	r2, [r3, #8]
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	683a      	ldr	r2, [r7, #0]
 800d506:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	683a      	ldr	r2, [r7, #0]
 800d50c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	1c5a      	adds	r2, r3, #1
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	601a      	str	r2, [r3, #0]
}
 800d51e:	bf00      	nop
 800d520:	3714      	adds	r7, #20
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d52a:	b480      	push	{r7}
 800d52c:	b085      	sub	sp, #20
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
 800d532:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d540:	d103      	bne.n	800d54a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	691b      	ldr	r3, [r3, #16]
 800d546:	60fb      	str	r3, [r7, #12]
 800d548:	e00c      	b.n	800d564 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	3308      	adds	r3, #8
 800d54e:	60fb      	str	r3, [r7, #12]
 800d550:	e002      	b.n	800d558 <vListInsert+0x2e>
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	60fb      	str	r3, [r7, #12]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	685b      	ldr	r3, [r3, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	68ba      	ldr	r2, [r7, #8]
 800d560:	429a      	cmp	r2, r3
 800d562:	d2f6      	bcs.n	800d552 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	685a      	ldr	r2, [r3, #4]
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	683a      	ldr	r2, [r7, #0]
 800d572:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	68fa      	ldr	r2, [r7, #12]
 800d578:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	683a      	ldr	r2, [r7, #0]
 800d57e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	1c5a      	adds	r2, r3, #1
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	601a      	str	r2, [r3, #0]
}
 800d590:	bf00      	nop
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d59c:	b480      	push	{r7}
 800d59e:	b085      	sub	sp, #20
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	691b      	ldr	r3, [r3, #16]
 800d5a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	6892      	ldr	r2, [r2, #8]
 800d5b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	6852      	ldr	r2, [r2, #4]
 800d5bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d103      	bne.n	800d5d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	689a      	ldr	r2, [r3, #8]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	1e5a      	subs	r2, r3, #1
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3714      	adds	r7, #20
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d10a      	bne.n	800d61a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d608:	f383 8811 	msr	BASEPRI, r3
 800d60c:	f3bf 8f6f 	isb	sy
 800d610:	f3bf 8f4f 	dsb	sy
 800d614:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d616:	bf00      	nop
 800d618:	e7fe      	b.n	800d618 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d61a:	f002 f8cb 	bl	800f7b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681a      	ldr	r2, [r3, #0]
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d626:	68f9      	ldr	r1, [r7, #12]
 800d628:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d62a:	fb01 f303 	mul.w	r3, r1, r3
 800d62e:	441a      	add	r2, r3
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2200      	movs	r2, #0
 800d638:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d64a:	3b01      	subs	r3, #1
 800d64c:	68f9      	ldr	r1, [r7, #12]
 800d64e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d650:	fb01 f303 	mul.w	r3, r1, r3
 800d654:	441a      	add	r2, r3
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	22ff      	movs	r2, #255	; 0xff
 800d65e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	22ff      	movs	r2, #255	; 0xff
 800d666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d114      	bne.n	800d69a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	691b      	ldr	r3, [r3, #16]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d01a      	beq.n	800d6ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	3310      	adds	r3, #16
 800d67c:	4618      	mov	r0, r3
 800d67e:	f001 f981 	bl	800e984 <xTaskRemoveFromEventList>
 800d682:	4603      	mov	r3, r0
 800d684:	2b00      	cmp	r3, #0
 800d686:	d012      	beq.n	800d6ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d688:	4b0c      	ldr	r3, [pc, #48]	; (800d6bc <xQueueGenericReset+0xcc>)
 800d68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d68e:	601a      	str	r2, [r3, #0]
 800d690:	f3bf 8f4f 	dsb	sy
 800d694:	f3bf 8f6f 	isb	sy
 800d698:	e009      	b.n	800d6ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	3310      	adds	r3, #16
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7ff fef2 	bl	800d488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	3324      	adds	r3, #36	; 0x24
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7ff feed 	bl	800d488 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d6ae:	f002 f8b1 	bl	800f814 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d6b2:	2301      	movs	r3, #1
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	e000ed04 	.word	0xe000ed04

0800d6c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b08e      	sub	sp, #56	; 0x38
 800d6c4:	af02      	add	r7, sp, #8
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	607a      	str	r2, [r7, #4]
 800d6cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10a      	bne.n	800d6ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d8:	f383 8811 	msr	BASEPRI, r3
 800d6dc:	f3bf 8f6f 	isb	sy
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d6e6:	bf00      	nop
 800d6e8:	e7fe      	b.n	800d6e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d10a      	bne.n	800d706 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f4:	f383 8811 	msr	BASEPRI, r3
 800d6f8:	f3bf 8f6f 	isb	sy
 800d6fc:	f3bf 8f4f 	dsb	sy
 800d700:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d702:	bf00      	nop
 800d704:	e7fe      	b.n	800d704 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d002      	beq.n	800d712 <xQueueGenericCreateStatic+0x52>
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d001      	beq.n	800d716 <xQueueGenericCreateStatic+0x56>
 800d712:	2301      	movs	r3, #1
 800d714:	e000      	b.n	800d718 <xQueueGenericCreateStatic+0x58>
 800d716:	2300      	movs	r3, #0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d10a      	bne.n	800d732 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d720:	f383 8811 	msr	BASEPRI, r3
 800d724:	f3bf 8f6f 	isb	sy
 800d728:	f3bf 8f4f 	dsb	sy
 800d72c:	623b      	str	r3, [r7, #32]
}
 800d72e:	bf00      	nop
 800d730:	e7fe      	b.n	800d730 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d102      	bne.n	800d73e <xQueueGenericCreateStatic+0x7e>
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d101      	bne.n	800d742 <xQueueGenericCreateStatic+0x82>
 800d73e:	2301      	movs	r3, #1
 800d740:	e000      	b.n	800d744 <xQueueGenericCreateStatic+0x84>
 800d742:	2300      	movs	r3, #0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d10a      	bne.n	800d75e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74c:	f383 8811 	msr	BASEPRI, r3
 800d750:	f3bf 8f6f 	isb	sy
 800d754:	f3bf 8f4f 	dsb	sy
 800d758:	61fb      	str	r3, [r7, #28]
}
 800d75a:	bf00      	nop
 800d75c:	e7fe      	b.n	800d75c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d75e:	2350      	movs	r3, #80	; 0x50
 800d760:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	2b50      	cmp	r3, #80	; 0x50
 800d766:	d00a      	beq.n	800d77e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76c:	f383 8811 	msr	BASEPRI, r3
 800d770:	f3bf 8f6f 	isb	sy
 800d774:	f3bf 8f4f 	dsb	sy
 800d778:	61bb      	str	r3, [r7, #24]
}
 800d77a:	bf00      	nop
 800d77c:	e7fe      	b.n	800d77c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d77e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00d      	beq.n	800d7a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78c:	2201      	movs	r2, #1
 800d78e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d792:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d798:	9300      	str	r3, [sp, #0]
 800d79a:	4613      	mov	r3, r2
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	68b9      	ldr	r1, [r7, #8]
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f000 f805 	bl	800d7b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3730      	adds	r7, #48	; 0x30
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
 800d7bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d103      	bne.n	800d7cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d7c4:	69bb      	ldr	r3, [r7, #24]
 800d7c6:	69ba      	ldr	r2, [r7, #24]
 800d7c8:	601a      	str	r2, [r3, #0]
 800d7ca:	e002      	b.n	800d7d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d7cc:	69bb      	ldr	r3, [r7, #24]
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d7d2:	69bb      	ldr	r3, [r7, #24]
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	68ba      	ldr	r2, [r7, #8]
 800d7dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d7de:	2101      	movs	r1, #1
 800d7e0:	69b8      	ldr	r0, [r7, #24]
 800d7e2:	f7ff ff05 	bl	800d5f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	78fa      	ldrb	r2, [r7, #3]
 800d7ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d7ee:	bf00      	nop
 800d7f0:	3710      	adds	r7, #16
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
	...

0800d7f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b08e      	sub	sp, #56	; 0x38
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	60b9      	str	r1, [r7, #8]
 800d802:	607a      	str	r2, [r7, #4]
 800d804:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d806:	2300      	movs	r3, #0
 800d808:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d810:	2b00      	cmp	r3, #0
 800d812:	d10a      	bne.n	800d82a <xQueueGenericSend+0x32>
	__asm volatile
 800d814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d818:	f383 8811 	msr	BASEPRI, r3
 800d81c:	f3bf 8f6f 	isb	sy
 800d820:	f3bf 8f4f 	dsb	sy
 800d824:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d826:	bf00      	nop
 800d828:	e7fe      	b.n	800d828 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d103      	bne.n	800d838 <xQueueGenericSend+0x40>
 800d830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d834:	2b00      	cmp	r3, #0
 800d836:	d101      	bne.n	800d83c <xQueueGenericSend+0x44>
 800d838:	2301      	movs	r3, #1
 800d83a:	e000      	b.n	800d83e <xQueueGenericSend+0x46>
 800d83c:	2300      	movs	r3, #0
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d10a      	bne.n	800d858 <xQueueGenericSend+0x60>
	__asm volatile
 800d842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d846:	f383 8811 	msr	BASEPRI, r3
 800d84a:	f3bf 8f6f 	isb	sy
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d854:	bf00      	nop
 800d856:	e7fe      	b.n	800d856 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	2b02      	cmp	r3, #2
 800d85c:	d103      	bne.n	800d866 <xQueueGenericSend+0x6e>
 800d85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d862:	2b01      	cmp	r3, #1
 800d864:	d101      	bne.n	800d86a <xQueueGenericSend+0x72>
 800d866:	2301      	movs	r3, #1
 800d868:	e000      	b.n	800d86c <xQueueGenericSend+0x74>
 800d86a:	2300      	movs	r3, #0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d10a      	bne.n	800d886 <xQueueGenericSend+0x8e>
	__asm volatile
 800d870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d874:	f383 8811 	msr	BASEPRI, r3
 800d878:	f3bf 8f6f 	isb	sy
 800d87c:	f3bf 8f4f 	dsb	sy
 800d880:	623b      	str	r3, [r7, #32]
}
 800d882:	bf00      	nop
 800d884:	e7fe      	b.n	800d884 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d886:	f001 fa3b 	bl	800ed00 <xTaskGetSchedulerState>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d102      	bne.n	800d896 <xQueueGenericSend+0x9e>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d101      	bne.n	800d89a <xQueueGenericSend+0xa2>
 800d896:	2301      	movs	r3, #1
 800d898:	e000      	b.n	800d89c <xQueueGenericSend+0xa4>
 800d89a:	2300      	movs	r3, #0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d10a      	bne.n	800d8b6 <xQueueGenericSend+0xbe>
	__asm volatile
 800d8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	61fb      	str	r3, [r7, #28]
}
 800d8b2:	bf00      	nop
 800d8b4:	e7fe      	b.n	800d8b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8b6:	f001 ff7d 	bl	800f7b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d302      	bcc.n	800d8cc <xQueueGenericSend+0xd4>
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	2b02      	cmp	r3, #2
 800d8ca:	d129      	bne.n	800d920 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d8cc:	683a      	ldr	r2, [r7, #0]
 800d8ce:	68b9      	ldr	r1, [r7, #8]
 800d8d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8d2:	f000 fa0b 	bl	800dcec <prvCopyDataToQueue>
 800d8d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d010      	beq.n	800d902 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e2:	3324      	adds	r3, #36	; 0x24
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f001 f84d 	bl	800e984 <xTaskRemoveFromEventList>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d013      	beq.n	800d918 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d8f0:	4b3f      	ldr	r3, [pc, #252]	; (800d9f0 <xQueueGenericSend+0x1f8>)
 800d8f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8f6:	601a      	str	r2, [r3, #0]
 800d8f8:	f3bf 8f4f 	dsb	sy
 800d8fc:	f3bf 8f6f 	isb	sy
 800d900:	e00a      	b.n	800d918 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d904:	2b00      	cmp	r3, #0
 800d906:	d007      	beq.n	800d918 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d908:	4b39      	ldr	r3, [pc, #228]	; (800d9f0 <xQueueGenericSend+0x1f8>)
 800d90a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d90e:	601a      	str	r2, [r3, #0]
 800d910:	f3bf 8f4f 	dsb	sy
 800d914:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d918:	f001 ff7c 	bl	800f814 <vPortExitCritical>
				return pdPASS;
 800d91c:	2301      	movs	r3, #1
 800d91e:	e063      	b.n	800d9e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d103      	bne.n	800d92e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d926:	f001 ff75 	bl	800f814 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d92a:	2300      	movs	r3, #0
 800d92c:	e05c      	b.n	800d9e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d92e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d930:	2b00      	cmp	r3, #0
 800d932:	d106      	bne.n	800d942 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d934:	f107 0314 	add.w	r3, r7, #20
 800d938:	4618      	mov	r0, r3
 800d93a:	f001 f887 	bl	800ea4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d93e:	2301      	movs	r3, #1
 800d940:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d942:	f001 ff67 	bl	800f814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d946:	f000 fdf9 	bl	800e53c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d94a:	f001 ff33 	bl	800f7b4 <vPortEnterCritical>
 800d94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d950:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d954:	b25b      	sxtb	r3, r3
 800d956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d95a:	d103      	bne.n	800d964 <xQueueGenericSend+0x16c>
 800d95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95e:	2200      	movs	r2, #0
 800d960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d966:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d96a:	b25b      	sxtb	r3, r3
 800d96c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d970:	d103      	bne.n	800d97a <xQueueGenericSend+0x182>
 800d972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d974:	2200      	movs	r2, #0
 800d976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d97a:	f001 ff4b 	bl	800f814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d97e:	1d3a      	adds	r2, r7, #4
 800d980:	f107 0314 	add.w	r3, r7, #20
 800d984:	4611      	mov	r1, r2
 800d986:	4618      	mov	r0, r3
 800d988:	f001 f876 	bl	800ea78 <xTaskCheckForTimeOut>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d124      	bne.n	800d9dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d992:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d994:	f000 faa2 	bl	800dedc <prvIsQueueFull>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d018      	beq.n	800d9d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a0:	3310      	adds	r3, #16
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	4611      	mov	r1, r2
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f000 ff9c 	bl	800e8e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d9ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9ae:	f000 fa2d 	bl	800de0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d9b2:	f000 fdd1 	bl	800e558 <xTaskResumeAll>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	f47f af7c 	bne.w	800d8b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d9be:	4b0c      	ldr	r3, [pc, #48]	; (800d9f0 <xQueueGenericSend+0x1f8>)
 800d9c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9c4:	601a      	str	r2, [r3, #0]
 800d9c6:	f3bf 8f4f 	dsb	sy
 800d9ca:	f3bf 8f6f 	isb	sy
 800d9ce:	e772      	b.n	800d8b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d9d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9d2:	f000 fa1b 	bl	800de0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9d6:	f000 fdbf 	bl	800e558 <xTaskResumeAll>
 800d9da:	e76c      	b.n	800d8b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d9dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9de:	f000 fa15 	bl	800de0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d9e2:	f000 fdb9 	bl	800e558 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d9e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3738      	adds	r7, #56	; 0x38
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	e000ed04 	.word	0xe000ed04

0800d9f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b090      	sub	sp, #64	; 0x40
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	60b9      	str	r1, [r7, #8]
 800d9fe:	607a      	str	r2, [r7, #4]
 800da00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800da06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d10a      	bne.n	800da22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800da0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800da1e:	bf00      	nop
 800da20:	e7fe      	b.n	800da20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d103      	bne.n	800da30 <xQueueGenericSendFromISR+0x3c>
 800da28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d101      	bne.n	800da34 <xQueueGenericSendFromISR+0x40>
 800da30:	2301      	movs	r3, #1
 800da32:	e000      	b.n	800da36 <xQueueGenericSendFromISR+0x42>
 800da34:	2300      	movs	r3, #0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d10a      	bne.n	800da50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800da3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3e:	f383 8811 	msr	BASEPRI, r3
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	f3bf 8f4f 	dsb	sy
 800da4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800da4c:	bf00      	nop
 800da4e:	e7fe      	b.n	800da4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	2b02      	cmp	r3, #2
 800da54:	d103      	bne.n	800da5e <xQueueGenericSendFromISR+0x6a>
 800da56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d101      	bne.n	800da62 <xQueueGenericSendFromISR+0x6e>
 800da5e:	2301      	movs	r3, #1
 800da60:	e000      	b.n	800da64 <xQueueGenericSendFromISR+0x70>
 800da62:	2300      	movs	r3, #0
 800da64:	2b00      	cmp	r3, #0
 800da66:	d10a      	bne.n	800da7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800da68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da6c:	f383 8811 	msr	BASEPRI, r3
 800da70:	f3bf 8f6f 	isb	sy
 800da74:	f3bf 8f4f 	dsb	sy
 800da78:	623b      	str	r3, [r7, #32]
}
 800da7a:	bf00      	nop
 800da7c:	e7fe      	b.n	800da7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da7e:	f001 ff7b 	bl	800f978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800da82:	f3ef 8211 	mrs	r2, BASEPRI
 800da86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8a:	f383 8811 	msr	BASEPRI, r3
 800da8e:	f3bf 8f6f 	isb	sy
 800da92:	f3bf 8f4f 	dsb	sy
 800da96:	61fa      	str	r2, [r7, #28]
 800da98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800da9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d302      	bcc.n	800dab0 <xQueueGenericSendFromISR+0xbc>
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	2b02      	cmp	r3, #2
 800daae:	d12f      	bne.n	800db10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800daba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dabe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dac0:	683a      	ldr	r2, [r7, #0]
 800dac2:	68b9      	ldr	r1, [r7, #8]
 800dac4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dac6:	f000 f911 	bl	800dcec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800daca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800dace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dad2:	d112      	bne.n	800dafa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d016      	beq.n	800db0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dade:	3324      	adds	r3, #36	; 0x24
 800dae0:	4618      	mov	r0, r3
 800dae2:	f000 ff4f 	bl	800e984 <xTaskRemoveFromEventList>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d00e      	beq.n	800db0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00b      	beq.n	800db0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2201      	movs	r2, #1
 800daf6:	601a      	str	r2, [r3, #0]
 800daf8:	e007      	b.n	800db0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dafa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dafe:	3301      	adds	r3, #1
 800db00:	b2db      	uxtb	r3, r3
 800db02:	b25a      	sxtb	r2, r3
 800db04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800db0a:	2301      	movs	r3, #1
 800db0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800db0e:	e001      	b.n	800db14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800db10:	2300      	movs	r3, #0
 800db12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800db1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800db22:	4618      	mov	r0, r3
 800db24:	3740      	adds	r7, #64	; 0x40
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
	...

0800db2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b08c      	sub	sp, #48	; 0x30
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800db38:	2300      	movs	r3, #0
 800db3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db42:	2b00      	cmp	r3, #0
 800db44:	d10a      	bne.n	800db5c <xQueueReceive+0x30>
	__asm volatile
 800db46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4a:	f383 8811 	msr	BASEPRI, r3
 800db4e:	f3bf 8f6f 	isb	sy
 800db52:	f3bf 8f4f 	dsb	sy
 800db56:	623b      	str	r3, [r7, #32]
}
 800db58:	bf00      	nop
 800db5a:	e7fe      	b.n	800db5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d103      	bne.n	800db6a <xQueueReceive+0x3e>
 800db62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db66:	2b00      	cmp	r3, #0
 800db68:	d101      	bne.n	800db6e <xQueueReceive+0x42>
 800db6a:	2301      	movs	r3, #1
 800db6c:	e000      	b.n	800db70 <xQueueReceive+0x44>
 800db6e:	2300      	movs	r3, #0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d10a      	bne.n	800db8a <xQueueReceive+0x5e>
	__asm volatile
 800db74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db78:	f383 8811 	msr	BASEPRI, r3
 800db7c:	f3bf 8f6f 	isb	sy
 800db80:	f3bf 8f4f 	dsb	sy
 800db84:	61fb      	str	r3, [r7, #28]
}
 800db86:	bf00      	nop
 800db88:	e7fe      	b.n	800db88 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db8a:	f001 f8b9 	bl	800ed00 <xTaskGetSchedulerState>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d102      	bne.n	800db9a <xQueueReceive+0x6e>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d101      	bne.n	800db9e <xQueueReceive+0x72>
 800db9a:	2301      	movs	r3, #1
 800db9c:	e000      	b.n	800dba0 <xQueueReceive+0x74>
 800db9e:	2300      	movs	r3, #0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d10a      	bne.n	800dbba <xQueueReceive+0x8e>
	__asm volatile
 800dba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba8:	f383 8811 	msr	BASEPRI, r3
 800dbac:	f3bf 8f6f 	isb	sy
 800dbb0:	f3bf 8f4f 	dsb	sy
 800dbb4:	61bb      	str	r3, [r7, #24]
}
 800dbb6:	bf00      	nop
 800dbb8:	e7fe      	b.n	800dbb8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dbba:	f001 fdfb 	bl	800f7b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbc2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d01f      	beq.n	800dc0a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dbca:	68b9      	ldr	r1, [r7, #8]
 800dbcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbce:	f000 f8f7 	bl	800ddc0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd4:	1e5a      	subs	r2, r3, #1
 800dbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbdc:	691b      	ldr	r3, [r3, #16]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d00f      	beq.n	800dc02 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe4:	3310      	adds	r3, #16
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f000 fecc 	bl	800e984 <xTaskRemoveFromEventList>
 800dbec:	4603      	mov	r3, r0
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d007      	beq.n	800dc02 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dbf2:	4b3d      	ldr	r3, [pc, #244]	; (800dce8 <xQueueReceive+0x1bc>)
 800dbf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbf8:	601a      	str	r2, [r3, #0]
 800dbfa:	f3bf 8f4f 	dsb	sy
 800dbfe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dc02:	f001 fe07 	bl	800f814 <vPortExitCritical>
				return pdPASS;
 800dc06:	2301      	movs	r3, #1
 800dc08:	e069      	b.n	800dcde <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d103      	bne.n	800dc18 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc10:	f001 fe00 	bl	800f814 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dc14:	2300      	movs	r3, #0
 800dc16:	e062      	b.n	800dcde <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d106      	bne.n	800dc2c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc1e:	f107 0310 	add.w	r3, r7, #16
 800dc22:	4618      	mov	r0, r3
 800dc24:	f000 ff12 	bl	800ea4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc2c:	f001 fdf2 	bl	800f814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc30:	f000 fc84 	bl	800e53c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc34:	f001 fdbe 	bl	800f7b4 <vPortEnterCritical>
 800dc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc3e:	b25b      	sxtb	r3, r3
 800dc40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc44:	d103      	bne.n	800dc4e <xQueueReceive+0x122>
 800dc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc54:	b25b      	sxtb	r3, r3
 800dc56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc5a:	d103      	bne.n	800dc64 <xQueueReceive+0x138>
 800dc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5e:	2200      	movs	r2, #0
 800dc60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc64:	f001 fdd6 	bl	800f814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc68:	1d3a      	adds	r2, r7, #4
 800dc6a:	f107 0310 	add.w	r3, r7, #16
 800dc6e:	4611      	mov	r1, r2
 800dc70:	4618      	mov	r0, r3
 800dc72:	f000 ff01 	bl	800ea78 <xTaskCheckForTimeOut>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d123      	bne.n	800dcc4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc7e:	f000 f917 	bl	800deb0 <prvIsQueueEmpty>
 800dc82:	4603      	mov	r3, r0
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d017      	beq.n	800dcb8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8a:	3324      	adds	r3, #36	; 0x24
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	4611      	mov	r1, r2
 800dc90:	4618      	mov	r0, r3
 800dc92:	f000 fe27 	bl	800e8e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc98:	f000 f8b8 	bl	800de0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc9c:	f000 fc5c 	bl	800e558 <xTaskResumeAll>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d189      	bne.n	800dbba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dca6:	4b10      	ldr	r3, [pc, #64]	; (800dce8 <xQueueReceive+0x1bc>)
 800dca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcac:	601a      	str	r2, [r3, #0]
 800dcae:	f3bf 8f4f 	dsb	sy
 800dcb2:	f3bf 8f6f 	isb	sy
 800dcb6:	e780      	b.n	800dbba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dcb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcba:	f000 f8a7 	bl	800de0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dcbe:	f000 fc4b 	bl	800e558 <xTaskResumeAll>
 800dcc2:	e77a      	b.n	800dbba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dcc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcc6:	f000 f8a1 	bl	800de0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dcca:	f000 fc45 	bl	800e558 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcd0:	f000 f8ee 	bl	800deb0 <prvIsQueueEmpty>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f43f af6f 	beq.w	800dbba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dcdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3730      	adds	r7, #48	; 0x30
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	e000ed04 	.word	0xe000ed04

0800dcec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d10d      	bne.n	800dd26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d14d      	bne.n	800ddae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	689b      	ldr	r3, [r3, #8]
 800dd16:	4618      	mov	r0, r3
 800dd18:	f001 f810 	bl	800ed3c <xTaskPriorityDisinherit>
 800dd1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2200      	movs	r2, #0
 800dd22:	609a      	str	r2, [r3, #8]
 800dd24:	e043      	b.n	800ddae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d119      	bne.n	800dd60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	6858      	ldr	r0, [r3, #4]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd34:	461a      	mov	r2, r3
 800dd36:	68b9      	ldr	r1, [r7, #8]
 800dd38:	f002 f872 	bl	800fe20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	685a      	ldr	r2, [r3, #4]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd44:	441a      	add	r2, r3
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	685a      	ldr	r2, [r3, #4]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d32b      	bcc.n	800ddae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	605a      	str	r2, [r3, #4]
 800dd5e:	e026      	b.n	800ddae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	68d8      	ldr	r0, [r3, #12]
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd68:	461a      	mov	r2, r3
 800dd6a:	68b9      	ldr	r1, [r7, #8]
 800dd6c:	f002 f858 	bl	800fe20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	68da      	ldr	r2, [r3, #12]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd78:	425b      	negs	r3, r3
 800dd7a:	441a      	add	r2, r3
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	68da      	ldr	r2, [r3, #12]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d207      	bcs.n	800dd9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	689a      	ldr	r2, [r3, #8]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd94:	425b      	negs	r3, r3
 800dd96:	441a      	add	r2, r3
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2b02      	cmp	r3, #2
 800dda0:	d105      	bne.n	800ddae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d002      	beq.n	800ddae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	3b01      	subs	r3, #1
 800ddac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	1c5a      	adds	r2, r3, #1
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ddb6:	697b      	ldr	r3, [r7, #20]
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3718      	adds	r7, #24
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d018      	beq.n	800de04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	68da      	ldr	r2, [r3, #12]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddda:	441a      	add	r2, r3
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	68da      	ldr	r2, [r3, #12]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d303      	bcc.n	800ddf4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	68d9      	ldr	r1, [r3, #12]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	6838      	ldr	r0, [r7, #0]
 800de00:	f002 f80e 	bl	800fe20 <memcpy>
	}
}
 800de04:	bf00      	nop
 800de06:	3708      	adds	r7, #8
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800de14:	f001 fcce 	bl	800f7b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de20:	e011      	b.n	800de46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de26:	2b00      	cmp	r3, #0
 800de28:	d012      	beq.n	800de50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	3324      	adds	r3, #36	; 0x24
 800de2e:	4618      	mov	r0, r3
 800de30:	f000 fda8 	bl	800e984 <xTaskRemoveFromEventList>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d001      	beq.n	800de3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800de3a:	f000 fe7f 	bl	800eb3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800de3e:	7bfb      	ldrb	r3, [r7, #15]
 800de40:	3b01      	subs	r3, #1
 800de42:	b2db      	uxtb	r3, r3
 800de44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	dce9      	bgt.n	800de22 <prvUnlockQueue+0x16>
 800de4e:	e000      	b.n	800de52 <prvUnlockQueue+0x46>
					break;
 800de50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	22ff      	movs	r2, #255	; 0xff
 800de56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800de5a:	f001 fcdb 	bl	800f814 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800de5e:	f001 fca9 	bl	800f7b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de6a:	e011      	b.n	800de90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	691b      	ldr	r3, [r3, #16]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d012      	beq.n	800de9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	3310      	adds	r3, #16
 800de78:	4618      	mov	r0, r3
 800de7a:	f000 fd83 	bl	800e984 <xTaskRemoveFromEventList>
 800de7e:	4603      	mov	r3, r0
 800de80:	2b00      	cmp	r3, #0
 800de82:	d001      	beq.n	800de88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800de84:	f000 fe5a 	bl	800eb3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800de88:	7bbb      	ldrb	r3, [r7, #14]
 800de8a:	3b01      	subs	r3, #1
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de94:	2b00      	cmp	r3, #0
 800de96:	dce9      	bgt.n	800de6c <prvUnlockQueue+0x60>
 800de98:	e000      	b.n	800de9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800de9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	22ff      	movs	r2, #255	; 0xff
 800dea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dea4:	f001 fcb6 	bl	800f814 <vPortExitCritical>
}
 800dea8:	bf00      	nop
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800deb8:	f001 fc7c 	bl	800f7b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d102      	bne.n	800deca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dec4:	2301      	movs	r3, #1
 800dec6:	60fb      	str	r3, [r7, #12]
 800dec8:	e001      	b.n	800dece <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800deca:	2300      	movs	r3, #0
 800decc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dece:	f001 fca1 	bl	800f814 <vPortExitCritical>

	return xReturn;
 800ded2:	68fb      	ldr	r3, [r7, #12]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3710      	adds	r7, #16
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dee4:	f001 fc66 	bl	800f7b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800def0:	429a      	cmp	r2, r3
 800def2:	d102      	bne.n	800defa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800def4:	2301      	movs	r3, #1
 800def6:	60fb      	str	r3, [r7, #12]
 800def8:	e001      	b.n	800defe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800defa:	2300      	movs	r3, #0
 800defc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800defe:	f001 fc89 	bl	800f814 <vPortExitCritical>

	return xReturn;
 800df02:	68fb      	ldr	r3, [r7, #12]
}
 800df04:	4618      	mov	r0, r3
 800df06:	3710      	adds	r7, #16
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800df0c:	b480      	push	{r7}
 800df0e:	b085      	sub	sp, #20
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df16:	2300      	movs	r3, #0
 800df18:	60fb      	str	r3, [r7, #12]
 800df1a:	e014      	b.n	800df46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800df1c:	4a0f      	ldr	r2, [pc, #60]	; (800df5c <vQueueAddToRegistry+0x50>)
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d10b      	bne.n	800df40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800df28:	490c      	ldr	r1, [pc, #48]	; (800df5c <vQueueAddToRegistry+0x50>)
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	683a      	ldr	r2, [r7, #0]
 800df2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800df32:	4a0a      	ldr	r2, [pc, #40]	; (800df5c <vQueueAddToRegistry+0x50>)
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	00db      	lsls	r3, r3, #3
 800df38:	4413      	add	r3, r2
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800df3e:	e006      	b.n	800df4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	3301      	adds	r3, #1
 800df44:	60fb      	str	r3, [r7, #12]
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2b07      	cmp	r3, #7
 800df4a:	d9e7      	bls.n	800df1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800df4c:	bf00      	nop
 800df4e:	bf00      	nop
 800df50:	3714      	adds	r7, #20
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop
 800df5c:	20002124 	.word	0x20002124

0800df60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df60:	b580      	push	{r7, lr}
 800df62:	b086      	sub	sp, #24
 800df64:	af00      	add	r7, sp, #0
 800df66:	60f8      	str	r0, [r7, #12]
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800df70:	f001 fc20 	bl	800f7b4 <vPortEnterCritical>
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df7a:	b25b      	sxtb	r3, r3
 800df7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df80:	d103      	bne.n	800df8a <vQueueWaitForMessageRestricted+0x2a>
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	2200      	movs	r2, #0
 800df86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df90:	b25b      	sxtb	r3, r3
 800df92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df96:	d103      	bne.n	800dfa0 <vQueueWaitForMessageRestricted+0x40>
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	2200      	movs	r2, #0
 800df9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dfa0:	f001 fc38 	bl	800f814 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d106      	bne.n	800dfba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	3324      	adds	r3, #36	; 0x24
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	68b9      	ldr	r1, [r7, #8]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f000 fcb9 	bl	800e92c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dfba:	6978      	ldr	r0, [r7, #20]
 800dfbc:	f7ff ff26 	bl	800de0c <prvUnlockQueue>
	}
 800dfc0:	bf00      	nop
 800dfc2:	3718      	adds	r7, #24
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b08e      	sub	sp, #56	; 0x38
 800dfcc:	af04      	add	r7, sp, #16
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	607a      	str	r2, [r7, #4]
 800dfd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dfd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d10a      	bne.n	800dff2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800dfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe0:	f383 8811 	msr	BASEPRI, r3
 800dfe4:	f3bf 8f6f 	isb	sy
 800dfe8:	f3bf 8f4f 	dsb	sy
 800dfec:	623b      	str	r3, [r7, #32]
}
 800dfee:	bf00      	nop
 800dff0:	e7fe      	b.n	800dff0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d10a      	bne.n	800e00e <xTaskCreateStatic+0x46>
	__asm volatile
 800dff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dffc:	f383 8811 	msr	BASEPRI, r3
 800e000:	f3bf 8f6f 	isb	sy
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	61fb      	str	r3, [r7, #28]
}
 800e00a:	bf00      	nop
 800e00c:	e7fe      	b.n	800e00c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e00e:	235c      	movs	r3, #92	; 0x5c
 800e010:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	2b5c      	cmp	r3, #92	; 0x5c
 800e016:	d00a      	beq.n	800e02e <xTaskCreateStatic+0x66>
	__asm volatile
 800e018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e01c:	f383 8811 	msr	BASEPRI, r3
 800e020:	f3bf 8f6f 	isb	sy
 800e024:	f3bf 8f4f 	dsb	sy
 800e028:	61bb      	str	r3, [r7, #24]
}
 800e02a:	bf00      	nop
 800e02c:	e7fe      	b.n	800e02c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e02e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e032:	2b00      	cmp	r3, #0
 800e034:	d01e      	beq.n	800e074 <xTaskCreateStatic+0xac>
 800e036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d01b      	beq.n	800e074 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e044:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e048:	2202      	movs	r2, #2
 800e04a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e04e:	2300      	movs	r3, #0
 800e050:	9303      	str	r3, [sp, #12]
 800e052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e054:	9302      	str	r3, [sp, #8]
 800e056:	f107 0314 	add.w	r3, r7, #20
 800e05a:	9301      	str	r3, [sp, #4]
 800e05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	68b9      	ldr	r1, [r7, #8]
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f000 f850 	bl	800e10c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e06c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e06e:	f000 f8dd 	bl	800e22c <prvAddNewTaskToReadyList>
 800e072:	e001      	b.n	800e078 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e074:	2300      	movs	r3, #0
 800e076:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e078:	697b      	ldr	r3, [r7, #20]
	}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3728      	adds	r7, #40	; 0x28
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e082:	b580      	push	{r7, lr}
 800e084:	b08c      	sub	sp, #48	; 0x30
 800e086:	af04      	add	r7, sp, #16
 800e088:	60f8      	str	r0, [r7, #12]
 800e08a:	60b9      	str	r1, [r7, #8]
 800e08c:	603b      	str	r3, [r7, #0]
 800e08e:	4613      	mov	r3, r2
 800e090:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e092:	88fb      	ldrh	r3, [r7, #6]
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4618      	mov	r0, r3
 800e098:	f001 fcae 	bl	800f9f8 <pvPortMalloc>
 800e09c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d00e      	beq.n	800e0c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e0a4:	205c      	movs	r0, #92	; 0x5c
 800e0a6:	f001 fca7 	bl	800f9f8 <pvPortMalloc>
 800e0aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d003      	beq.n	800e0ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	697a      	ldr	r2, [r7, #20]
 800e0b6:	631a      	str	r2, [r3, #48]	; 0x30
 800e0b8:	e005      	b.n	800e0c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e0ba:	6978      	ldr	r0, [r7, #20]
 800e0bc:	f001 fd68 	bl	800fb90 <vPortFree>
 800e0c0:	e001      	b.n	800e0c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d017      	beq.n	800e0fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e0d4:	88fa      	ldrh	r2, [r7, #6]
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	9303      	str	r3, [sp, #12]
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	9302      	str	r3, [sp, #8]
 800e0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e0:	9301      	str	r3, [sp, #4]
 800e0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	68b9      	ldr	r1, [r7, #8]
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	f000 f80e 	bl	800e10c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0f0:	69f8      	ldr	r0, [r7, #28]
 800e0f2:	f000 f89b 	bl	800e22c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	61bb      	str	r3, [r7, #24]
 800e0fa:	e002      	b.n	800e102 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e0fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e100:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e102:	69bb      	ldr	r3, [r7, #24]
	}
 800e104:	4618      	mov	r0, r3
 800e106:	3720      	adds	r7, #32
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b088      	sub	sp, #32
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	607a      	str	r2, [r7, #4]
 800e118:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	009b      	lsls	r3, r3, #2
 800e122:	461a      	mov	r2, r3
 800e124:	21a5      	movs	r1, #165	; 0xa5
 800e126:	f001 fe89 	bl	800fe3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e134:	3b01      	subs	r3, #1
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	4413      	add	r3, r2
 800e13a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e13c:	69bb      	ldr	r3, [r7, #24]
 800e13e:	f023 0307 	bic.w	r3, r3, #7
 800e142:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e144:	69bb      	ldr	r3, [r7, #24]
 800e146:	f003 0307 	and.w	r3, r3, #7
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d00a      	beq.n	800e164 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e152:	f383 8811 	msr	BASEPRI, r3
 800e156:	f3bf 8f6f 	isb	sy
 800e15a:	f3bf 8f4f 	dsb	sy
 800e15e:	617b      	str	r3, [r7, #20]
}
 800e160:	bf00      	nop
 800e162:	e7fe      	b.n	800e162 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d01f      	beq.n	800e1aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e16a:	2300      	movs	r3, #0
 800e16c:	61fb      	str	r3, [r7, #28]
 800e16e:	e012      	b.n	800e196 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e170:	68ba      	ldr	r2, [r7, #8]
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	4413      	add	r3, r2
 800e176:	7819      	ldrb	r1, [r3, #0]
 800e178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	4413      	add	r3, r2
 800e17e:	3334      	adds	r3, #52	; 0x34
 800e180:	460a      	mov	r2, r1
 800e182:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e184:	68ba      	ldr	r2, [r7, #8]
 800e186:	69fb      	ldr	r3, [r7, #28]
 800e188:	4413      	add	r3, r2
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d006      	beq.n	800e19e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	3301      	adds	r3, #1
 800e194:	61fb      	str	r3, [r7, #28]
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	2b0f      	cmp	r3, #15
 800e19a:	d9e9      	bls.n	800e170 <prvInitialiseNewTask+0x64>
 800e19c:	e000      	b.n	800e1a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800e19e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e1a8:	e003      	b.n	800e1b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b4:	2b37      	cmp	r3, #55	; 0x37
 800e1b6:	d901      	bls.n	800e1bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e1b8:	2337      	movs	r3, #55	; 0x37
 800e1ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d0:	3304      	adds	r3, #4
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7ff f978 	bl	800d4c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1da:	3318      	adds	r3, #24
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7ff f973 	bl	800d4c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e200:	2200      	movs	r2, #0
 800e202:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e206:	683a      	ldr	r2, [r7, #0]
 800e208:	68f9      	ldr	r1, [r7, #12]
 800e20a:	69b8      	ldr	r0, [r7, #24]
 800e20c:	f001 f9a6 	bl	800f55c <pxPortInitialiseStack>
 800e210:	4602      	mov	r2, r0
 800e212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e214:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d002      	beq.n	800e222 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e220:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e222:	bf00      	nop
 800e224:	3720      	adds	r7, #32
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
	...

0800e22c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e234:	f001 fabe 	bl	800f7b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e238:	4b2d      	ldr	r3, [pc, #180]	; (800e2f0 <prvAddNewTaskToReadyList+0xc4>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	3301      	adds	r3, #1
 800e23e:	4a2c      	ldr	r2, [pc, #176]	; (800e2f0 <prvAddNewTaskToReadyList+0xc4>)
 800e240:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e242:	4b2c      	ldr	r3, [pc, #176]	; (800e2f4 <prvAddNewTaskToReadyList+0xc8>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d109      	bne.n	800e25e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e24a:	4a2a      	ldr	r2, [pc, #168]	; (800e2f4 <prvAddNewTaskToReadyList+0xc8>)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e250:	4b27      	ldr	r3, [pc, #156]	; (800e2f0 <prvAddNewTaskToReadyList+0xc4>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2b01      	cmp	r3, #1
 800e256:	d110      	bne.n	800e27a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e258:	f000 fc94 	bl	800eb84 <prvInitialiseTaskLists>
 800e25c:	e00d      	b.n	800e27a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e25e:	4b26      	ldr	r3, [pc, #152]	; (800e2f8 <prvAddNewTaskToReadyList+0xcc>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d109      	bne.n	800e27a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e266:	4b23      	ldr	r3, [pc, #140]	; (800e2f4 <prvAddNewTaskToReadyList+0xc8>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e270:	429a      	cmp	r2, r3
 800e272:	d802      	bhi.n	800e27a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e274:	4a1f      	ldr	r2, [pc, #124]	; (800e2f4 <prvAddNewTaskToReadyList+0xc8>)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e27a:	4b20      	ldr	r3, [pc, #128]	; (800e2fc <prvAddNewTaskToReadyList+0xd0>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	3301      	adds	r3, #1
 800e280:	4a1e      	ldr	r2, [pc, #120]	; (800e2fc <prvAddNewTaskToReadyList+0xd0>)
 800e282:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e284:	4b1d      	ldr	r3, [pc, #116]	; (800e2fc <prvAddNewTaskToReadyList+0xd0>)
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e290:	4b1b      	ldr	r3, [pc, #108]	; (800e300 <prvAddNewTaskToReadyList+0xd4>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	429a      	cmp	r2, r3
 800e296:	d903      	bls.n	800e2a0 <prvAddNewTaskToReadyList+0x74>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e29c:	4a18      	ldr	r2, [pc, #96]	; (800e300 <prvAddNewTaskToReadyList+0xd4>)
 800e29e:	6013      	str	r3, [r2, #0]
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2a4:	4613      	mov	r3, r2
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	4413      	add	r3, r2
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	4a15      	ldr	r2, [pc, #84]	; (800e304 <prvAddNewTaskToReadyList+0xd8>)
 800e2ae:	441a      	add	r2, r3
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	3304      	adds	r3, #4
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	4610      	mov	r0, r2
 800e2b8:	f7ff f913 	bl	800d4e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e2bc:	f001 faaa 	bl	800f814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e2c0:	4b0d      	ldr	r3, [pc, #52]	; (800e2f8 <prvAddNewTaskToReadyList+0xcc>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d00e      	beq.n	800e2e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e2c8:	4b0a      	ldr	r3, [pc, #40]	; (800e2f4 <prvAddNewTaskToReadyList+0xc8>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d207      	bcs.n	800e2e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e2d6:	4b0c      	ldr	r3, [pc, #48]	; (800e308 <prvAddNewTaskToReadyList+0xdc>)
 800e2d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2dc:	601a      	str	r2, [r3, #0]
 800e2de:	f3bf 8f4f 	dsb	sy
 800e2e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2e6:	bf00      	nop
 800e2e8:	3708      	adds	r7, #8
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	20002638 	.word	0x20002638
 800e2f4:	20002164 	.word	0x20002164
 800e2f8:	20002644 	.word	0x20002644
 800e2fc:	20002654 	.word	0x20002654
 800e300:	20002640 	.word	0x20002640
 800e304:	20002168 	.word	0x20002168
 800e308:	e000ed04 	.word	0xe000ed04

0800e30c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b08a      	sub	sp, #40	; 0x28
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e316:	2300      	movs	r3, #0
 800e318:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d10a      	bne.n	800e336 <vTaskDelayUntil+0x2a>
	__asm volatile
 800e320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e324:	f383 8811 	msr	BASEPRI, r3
 800e328:	f3bf 8f6f 	isb	sy
 800e32c:	f3bf 8f4f 	dsb	sy
 800e330:	617b      	str	r3, [r7, #20]
}
 800e332:	bf00      	nop
 800e334:	e7fe      	b.n	800e334 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d10a      	bne.n	800e352 <vTaskDelayUntil+0x46>
	__asm volatile
 800e33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e340:	f383 8811 	msr	BASEPRI, r3
 800e344:	f3bf 8f6f 	isb	sy
 800e348:	f3bf 8f4f 	dsb	sy
 800e34c:	613b      	str	r3, [r7, #16]
}
 800e34e:	bf00      	nop
 800e350:	e7fe      	b.n	800e350 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e352:	4b2a      	ldr	r3, [pc, #168]	; (800e3fc <vTaskDelayUntil+0xf0>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00a      	beq.n	800e370 <vTaskDelayUntil+0x64>
	__asm volatile
 800e35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35e:	f383 8811 	msr	BASEPRI, r3
 800e362:	f3bf 8f6f 	isb	sy
 800e366:	f3bf 8f4f 	dsb	sy
 800e36a:	60fb      	str	r3, [r7, #12]
}
 800e36c:	bf00      	nop
 800e36e:	e7fe      	b.n	800e36e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e370:	f000 f8e4 	bl	800e53c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e374:	4b22      	ldr	r3, [pc, #136]	; (800e400 <vTaskDelayUntil+0xf4>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	683a      	ldr	r2, [r7, #0]
 800e380:	4413      	add	r3, r2
 800e382:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	6a3a      	ldr	r2, [r7, #32]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d20b      	bcs.n	800e3a6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	69fa      	ldr	r2, [r7, #28]
 800e394:	429a      	cmp	r2, r3
 800e396:	d211      	bcs.n	800e3bc <vTaskDelayUntil+0xb0>
 800e398:	69fa      	ldr	r2, [r7, #28]
 800e39a:	6a3b      	ldr	r3, [r7, #32]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d90d      	bls.n	800e3bc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	627b      	str	r3, [r7, #36]	; 0x24
 800e3a4:	e00a      	b.n	800e3bc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	69fa      	ldr	r2, [r7, #28]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d303      	bcc.n	800e3b8 <vTaskDelayUntil+0xac>
 800e3b0:	69fa      	ldr	r2, [r7, #28]
 800e3b2:	6a3b      	ldr	r3, [r7, #32]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d901      	bls.n	800e3bc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	69fa      	ldr	r2, [r7, #28]
 800e3c0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d006      	beq.n	800e3d6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e3c8:	69fa      	ldr	r2, [r7, #28]
 800e3ca:	6a3b      	ldr	r3, [r7, #32]
 800e3cc:	1ad3      	subs	r3, r2, r3
 800e3ce:	2100      	movs	r1, #0
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f000 fd21 	bl	800ee18 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e3d6:	f000 f8bf 	bl	800e558 <xTaskResumeAll>
 800e3da:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e3dc:	69bb      	ldr	r3, [r7, #24]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d107      	bne.n	800e3f2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e3e2:	4b08      	ldr	r3, [pc, #32]	; (800e404 <vTaskDelayUntil+0xf8>)
 800e3e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3e8:	601a      	str	r2, [r3, #0]
 800e3ea:	f3bf 8f4f 	dsb	sy
 800e3ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3f2:	bf00      	nop
 800e3f4:	3728      	adds	r7, #40	; 0x28
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	20002660 	.word	0x20002660
 800e400:	2000263c 	.word	0x2000263c
 800e404:	e000ed04 	.word	0xe000ed04

0800e408 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e410:	2300      	movs	r3, #0
 800e412:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d017      	beq.n	800e44a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e41a:	4b13      	ldr	r3, [pc, #76]	; (800e468 <vTaskDelay+0x60>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d00a      	beq.n	800e438 <vTaskDelay+0x30>
	__asm volatile
 800e422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e426:	f383 8811 	msr	BASEPRI, r3
 800e42a:	f3bf 8f6f 	isb	sy
 800e42e:	f3bf 8f4f 	dsb	sy
 800e432:	60bb      	str	r3, [r7, #8]
}
 800e434:	bf00      	nop
 800e436:	e7fe      	b.n	800e436 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e438:	f000 f880 	bl	800e53c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e43c:	2100      	movs	r1, #0
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f000 fcea 	bl	800ee18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e444:	f000 f888 	bl	800e558 <xTaskResumeAll>
 800e448:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d107      	bne.n	800e460 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e450:	4b06      	ldr	r3, [pc, #24]	; (800e46c <vTaskDelay+0x64>)
 800e452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e456:	601a      	str	r2, [r3, #0]
 800e458:	f3bf 8f4f 	dsb	sy
 800e45c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e460:	bf00      	nop
 800e462:	3710      	adds	r7, #16
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	20002660 	.word	0x20002660
 800e46c:	e000ed04 	.word	0xe000ed04

0800e470 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b08a      	sub	sp, #40	; 0x28
 800e474:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e476:	2300      	movs	r3, #0
 800e478:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e47a:	2300      	movs	r3, #0
 800e47c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e47e:	463a      	mov	r2, r7
 800e480:	1d39      	adds	r1, r7, #4
 800e482:	f107 0308 	add.w	r3, r7, #8
 800e486:	4618      	mov	r0, r3
 800e488:	f7fe ffca 	bl	800d420 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e48c:	6839      	ldr	r1, [r7, #0]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	68ba      	ldr	r2, [r7, #8]
 800e492:	9202      	str	r2, [sp, #8]
 800e494:	9301      	str	r3, [sp, #4]
 800e496:	2300      	movs	r3, #0
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	2300      	movs	r3, #0
 800e49c:	460a      	mov	r2, r1
 800e49e:	4921      	ldr	r1, [pc, #132]	; (800e524 <vTaskStartScheduler+0xb4>)
 800e4a0:	4821      	ldr	r0, [pc, #132]	; (800e528 <vTaskStartScheduler+0xb8>)
 800e4a2:	f7ff fd91 	bl	800dfc8 <xTaskCreateStatic>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	4a20      	ldr	r2, [pc, #128]	; (800e52c <vTaskStartScheduler+0xbc>)
 800e4aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e4ac:	4b1f      	ldr	r3, [pc, #124]	; (800e52c <vTaskStartScheduler+0xbc>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d002      	beq.n	800e4ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	617b      	str	r3, [r7, #20]
 800e4b8:	e001      	b.n	800e4be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d102      	bne.n	800e4ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e4c4:	f000 fcfc 	bl	800eec0 <xTimerCreateTimerTask>
 800e4c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d116      	bne.n	800e4fe <vTaskStartScheduler+0x8e>
	__asm volatile
 800e4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d4:	f383 8811 	msr	BASEPRI, r3
 800e4d8:	f3bf 8f6f 	isb	sy
 800e4dc:	f3bf 8f4f 	dsb	sy
 800e4e0:	613b      	str	r3, [r7, #16]
}
 800e4e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e4e4:	4b12      	ldr	r3, [pc, #72]	; (800e530 <vTaskStartScheduler+0xc0>)
 800e4e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e4ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e4ec:	4b11      	ldr	r3, [pc, #68]	; (800e534 <vTaskStartScheduler+0xc4>)
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e4f2:	4b11      	ldr	r3, [pc, #68]	; (800e538 <vTaskStartScheduler+0xc8>)
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e4f8:	f001 f8ba 	bl	800f670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e4fc:	e00e      	b.n	800e51c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e504:	d10a      	bne.n	800e51c <vTaskStartScheduler+0xac>
	__asm volatile
 800e506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e50a:	f383 8811 	msr	BASEPRI, r3
 800e50e:	f3bf 8f6f 	isb	sy
 800e512:	f3bf 8f4f 	dsb	sy
 800e516:	60fb      	str	r3, [r7, #12]
}
 800e518:	bf00      	nop
 800e51a:	e7fe      	b.n	800e51a <vTaskStartScheduler+0xaa>
}
 800e51c:	bf00      	nop
 800e51e:	3718      	adds	r7, #24
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	080147e4 	.word	0x080147e4
 800e528:	0800eb55 	.word	0x0800eb55
 800e52c:	2000265c 	.word	0x2000265c
 800e530:	20002658 	.word	0x20002658
 800e534:	20002644 	.word	0x20002644
 800e538:	2000263c 	.word	0x2000263c

0800e53c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e53c:	b480      	push	{r7}
 800e53e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e540:	4b04      	ldr	r3, [pc, #16]	; (800e554 <vTaskSuspendAll+0x18>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	3301      	adds	r3, #1
 800e546:	4a03      	ldr	r2, [pc, #12]	; (800e554 <vTaskSuspendAll+0x18>)
 800e548:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e54a:	bf00      	nop
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr
 800e554:	20002660 	.word	0x20002660

0800e558 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b084      	sub	sp, #16
 800e55c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e55e:	2300      	movs	r3, #0
 800e560:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e562:	2300      	movs	r3, #0
 800e564:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e566:	4b42      	ldr	r3, [pc, #264]	; (800e670 <xTaskResumeAll+0x118>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d10a      	bne.n	800e584 <xTaskResumeAll+0x2c>
	__asm volatile
 800e56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e572:	f383 8811 	msr	BASEPRI, r3
 800e576:	f3bf 8f6f 	isb	sy
 800e57a:	f3bf 8f4f 	dsb	sy
 800e57e:	603b      	str	r3, [r7, #0]
}
 800e580:	bf00      	nop
 800e582:	e7fe      	b.n	800e582 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e584:	f001 f916 	bl	800f7b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e588:	4b39      	ldr	r3, [pc, #228]	; (800e670 <xTaskResumeAll+0x118>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	3b01      	subs	r3, #1
 800e58e:	4a38      	ldr	r2, [pc, #224]	; (800e670 <xTaskResumeAll+0x118>)
 800e590:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e592:	4b37      	ldr	r3, [pc, #220]	; (800e670 <xTaskResumeAll+0x118>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d162      	bne.n	800e660 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e59a:	4b36      	ldr	r3, [pc, #216]	; (800e674 <xTaskResumeAll+0x11c>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d05e      	beq.n	800e660 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5a2:	e02f      	b.n	800e604 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5a4:	4b34      	ldr	r3, [pc, #208]	; (800e678 <xTaskResumeAll+0x120>)
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	68db      	ldr	r3, [r3, #12]
 800e5aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	3318      	adds	r3, #24
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7fe fff3 	bl	800d59c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	3304      	adds	r3, #4
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7fe ffee 	bl	800d59c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c4:	4b2d      	ldr	r3, [pc, #180]	; (800e67c <xTaskResumeAll+0x124>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d903      	bls.n	800e5d4 <xTaskResumeAll+0x7c>
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5d0:	4a2a      	ldr	r2, [pc, #168]	; (800e67c <xTaskResumeAll+0x124>)
 800e5d2:	6013      	str	r3, [r2, #0]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5d8:	4613      	mov	r3, r2
 800e5da:	009b      	lsls	r3, r3, #2
 800e5dc:	4413      	add	r3, r2
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	4a27      	ldr	r2, [pc, #156]	; (800e680 <xTaskResumeAll+0x128>)
 800e5e2:	441a      	add	r2, r3
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	3304      	adds	r3, #4
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	4610      	mov	r0, r2
 800e5ec:	f7fe ff79 	bl	800d4e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5f4:	4b23      	ldr	r3, [pc, #140]	; (800e684 <xTaskResumeAll+0x12c>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d302      	bcc.n	800e604 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e5fe:	4b22      	ldr	r3, [pc, #136]	; (800e688 <xTaskResumeAll+0x130>)
 800e600:	2201      	movs	r2, #1
 800e602:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e604:	4b1c      	ldr	r3, [pc, #112]	; (800e678 <xTaskResumeAll+0x120>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d1cb      	bne.n	800e5a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d001      	beq.n	800e616 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e612:	f000 fb55 	bl	800ecc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e616:	4b1d      	ldr	r3, [pc, #116]	; (800e68c <xTaskResumeAll+0x134>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d010      	beq.n	800e644 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e622:	f000 f847 	bl	800e6b4 <xTaskIncrementTick>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d002      	beq.n	800e632 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e62c:	4b16      	ldr	r3, [pc, #88]	; (800e688 <xTaskResumeAll+0x130>)
 800e62e:	2201      	movs	r2, #1
 800e630:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	3b01      	subs	r3, #1
 800e636:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d1f1      	bne.n	800e622 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e63e:	4b13      	ldr	r3, [pc, #76]	; (800e68c <xTaskResumeAll+0x134>)
 800e640:	2200      	movs	r2, #0
 800e642:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e644:	4b10      	ldr	r3, [pc, #64]	; (800e688 <xTaskResumeAll+0x130>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d009      	beq.n	800e660 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e64c:	2301      	movs	r3, #1
 800e64e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e650:	4b0f      	ldr	r3, [pc, #60]	; (800e690 <xTaskResumeAll+0x138>)
 800e652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e656:	601a      	str	r2, [r3, #0]
 800e658:	f3bf 8f4f 	dsb	sy
 800e65c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e660:	f001 f8d8 	bl	800f814 <vPortExitCritical>

	return xAlreadyYielded;
 800e664:	68bb      	ldr	r3, [r7, #8]
}
 800e666:	4618      	mov	r0, r3
 800e668:	3710      	adds	r7, #16
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	20002660 	.word	0x20002660
 800e674:	20002638 	.word	0x20002638
 800e678:	200025f8 	.word	0x200025f8
 800e67c:	20002640 	.word	0x20002640
 800e680:	20002168 	.word	0x20002168
 800e684:	20002164 	.word	0x20002164
 800e688:	2000264c 	.word	0x2000264c
 800e68c:	20002648 	.word	0x20002648
 800e690:	e000ed04 	.word	0xe000ed04

0800e694 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e69a:	4b05      	ldr	r3, [pc, #20]	; (800e6b0 <xTaskGetTickCount+0x1c>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e6a0:	687b      	ldr	r3, [r7, #4]
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	370c      	adds	r7, #12
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr
 800e6ae:	bf00      	nop
 800e6b0:	2000263c 	.word	0x2000263c

0800e6b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b086      	sub	sp, #24
 800e6b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6be:	4b4f      	ldr	r3, [pc, #316]	; (800e7fc <xTaskIncrementTick+0x148>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	f040 808f 	bne.w	800e7e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e6c8:	4b4d      	ldr	r3, [pc, #308]	; (800e800 <xTaskIncrementTick+0x14c>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e6d0:	4a4b      	ldr	r2, [pc, #300]	; (800e800 <xTaskIncrementTick+0x14c>)
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d120      	bne.n	800e71e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e6dc:	4b49      	ldr	r3, [pc, #292]	; (800e804 <xTaskIncrementTick+0x150>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d00a      	beq.n	800e6fc <xTaskIncrementTick+0x48>
	__asm volatile
 800e6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ea:	f383 8811 	msr	BASEPRI, r3
 800e6ee:	f3bf 8f6f 	isb	sy
 800e6f2:	f3bf 8f4f 	dsb	sy
 800e6f6:	603b      	str	r3, [r7, #0]
}
 800e6f8:	bf00      	nop
 800e6fa:	e7fe      	b.n	800e6fa <xTaskIncrementTick+0x46>
 800e6fc:	4b41      	ldr	r3, [pc, #260]	; (800e804 <xTaskIncrementTick+0x150>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	60fb      	str	r3, [r7, #12]
 800e702:	4b41      	ldr	r3, [pc, #260]	; (800e808 <xTaskIncrementTick+0x154>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4a3f      	ldr	r2, [pc, #252]	; (800e804 <xTaskIncrementTick+0x150>)
 800e708:	6013      	str	r3, [r2, #0]
 800e70a:	4a3f      	ldr	r2, [pc, #252]	; (800e808 <xTaskIncrementTick+0x154>)
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6013      	str	r3, [r2, #0]
 800e710:	4b3e      	ldr	r3, [pc, #248]	; (800e80c <xTaskIncrementTick+0x158>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	3301      	adds	r3, #1
 800e716:	4a3d      	ldr	r2, [pc, #244]	; (800e80c <xTaskIncrementTick+0x158>)
 800e718:	6013      	str	r3, [r2, #0]
 800e71a:	f000 fad1 	bl	800ecc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e71e:	4b3c      	ldr	r3, [pc, #240]	; (800e810 <xTaskIncrementTick+0x15c>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	693a      	ldr	r2, [r7, #16]
 800e724:	429a      	cmp	r2, r3
 800e726:	d349      	bcc.n	800e7bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e728:	4b36      	ldr	r3, [pc, #216]	; (800e804 <xTaskIncrementTick+0x150>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d104      	bne.n	800e73c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e732:	4b37      	ldr	r3, [pc, #220]	; (800e810 <xTaskIncrementTick+0x15c>)
 800e734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e738:	601a      	str	r2, [r3, #0]
					break;
 800e73a:	e03f      	b.n	800e7bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e73c:	4b31      	ldr	r3, [pc, #196]	; (800e804 <xTaskIncrementTick+0x150>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	68db      	ldr	r3, [r3, #12]
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e74c:	693a      	ldr	r2, [r7, #16]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	429a      	cmp	r2, r3
 800e752:	d203      	bcs.n	800e75c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e754:	4a2e      	ldr	r2, [pc, #184]	; (800e810 <xTaskIncrementTick+0x15c>)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e75a:	e02f      	b.n	800e7bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	3304      	adds	r3, #4
 800e760:	4618      	mov	r0, r3
 800e762:	f7fe ff1b 	bl	800d59c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d004      	beq.n	800e778 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	3318      	adds	r3, #24
 800e772:	4618      	mov	r0, r3
 800e774:	f7fe ff12 	bl	800d59c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e77c:	4b25      	ldr	r3, [pc, #148]	; (800e814 <xTaskIncrementTick+0x160>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	429a      	cmp	r2, r3
 800e782:	d903      	bls.n	800e78c <xTaskIncrementTick+0xd8>
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e788:	4a22      	ldr	r2, [pc, #136]	; (800e814 <xTaskIncrementTick+0x160>)
 800e78a:	6013      	str	r3, [r2, #0]
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e790:	4613      	mov	r3, r2
 800e792:	009b      	lsls	r3, r3, #2
 800e794:	4413      	add	r3, r2
 800e796:	009b      	lsls	r3, r3, #2
 800e798:	4a1f      	ldr	r2, [pc, #124]	; (800e818 <xTaskIncrementTick+0x164>)
 800e79a:	441a      	add	r2, r3
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	3304      	adds	r3, #4
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	f7fe fe9d 	bl	800d4e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ac:	4b1b      	ldr	r3, [pc, #108]	; (800e81c <xTaskIncrementTick+0x168>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d3b8      	bcc.n	800e728 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7ba:	e7b5      	b.n	800e728 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e7bc:	4b17      	ldr	r3, [pc, #92]	; (800e81c <xTaskIncrementTick+0x168>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7c2:	4915      	ldr	r1, [pc, #84]	; (800e818 <xTaskIncrementTick+0x164>)
 800e7c4:	4613      	mov	r3, r2
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	4413      	add	r3, r2
 800e7ca:	009b      	lsls	r3, r3, #2
 800e7cc:	440b      	add	r3, r1
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d901      	bls.n	800e7d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e7d8:	4b11      	ldr	r3, [pc, #68]	; (800e820 <xTaskIncrementTick+0x16c>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d007      	beq.n	800e7f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	617b      	str	r3, [r7, #20]
 800e7e4:	e004      	b.n	800e7f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e7e6:	4b0f      	ldr	r3, [pc, #60]	; (800e824 <xTaskIncrementTick+0x170>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	4a0d      	ldr	r2, [pc, #52]	; (800e824 <xTaskIncrementTick+0x170>)
 800e7ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e7f0:	697b      	ldr	r3, [r7, #20]
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3718      	adds	r7, #24
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	20002660 	.word	0x20002660
 800e800:	2000263c 	.word	0x2000263c
 800e804:	200025f0 	.word	0x200025f0
 800e808:	200025f4 	.word	0x200025f4
 800e80c:	20002650 	.word	0x20002650
 800e810:	20002658 	.word	0x20002658
 800e814:	20002640 	.word	0x20002640
 800e818:	20002168 	.word	0x20002168
 800e81c:	20002164 	.word	0x20002164
 800e820:	2000264c 	.word	0x2000264c
 800e824:	20002648 	.word	0x20002648

0800e828 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e828:	b480      	push	{r7}
 800e82a:	b085      	sub	sp, #20
 800e82c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e82e:	4b28      	ldr	r3, [pc, #160]	; (800e8d0 <vTaskSwitchContext+0xa8>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d003      	beq.n	800e83e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e836:	4b27      	ldr	r3, [pc, #156]	; (800e8d4 <vTaskSwitchContext+0xac>)
 800e838:	2201      	movs	r2, #1
 800e83a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e83c:	e041      	b.n	800e8c2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e83e:	4b25      	ldr	r3, [pc, #148]	; (800e8d4 <vTaskSwitchContext+0xac>)
 800e840:	2200      	movs	r2, #0
 800e842:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e844:	4b24      	ldr	r3, [pc, #144]	; (800e8d8 <vTaskSwitchContext+0xb0>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	60fb      	str	r3, [r7, #12]
 800e84a:	e010      	b.n	800e86e <vTaskSwitchContext+0x46>
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d10a      	bne.n	800e868 <vTaskSwitchContext+0x40>
	__asm volatile
 800e852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e856:	f383 8811 	msr	BASEPRI, r3
 800e85a:	f3bf 8f6f 	isb	sy
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	607b      	str	r3, [r7, #4]
}
 800e864:	bf00      	nop
 800e866:	e7fe      	b.n	800e866 <vTaskSwitchContext+0x3e>
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	3b01      	subs	r3, #1
 800e86c:	60fb      	str	r3, [r7, #12]
 800e86e:	491b      	ldr	r1, [pc, #108]	; (800e8dc <vTaskSwitchContext+0xb4>)
 800e870:	68fa      	ldr	r2, [r7, #12]
 800e872:	4613      	mov	r3, r2
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	4413      	add	r3, r2
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	440b      	add	r3, r1
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d0e4      	beq.n	800e84c <vTaskSwitchContext+0x24>
 800e882:	68fa      	ldr	r2, [r7, #12]
 800e884:	4613      	mov	r3, r2
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	4413      	add	r3, r2
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	4a13      	ldr	r2, [pc, #76]	; (800e8dc <vTaskSwitchContext+0xb4>)
 800e88e:	4413      	add	r3, r2
 800e890:	60bb      	str	r3, [r7, #8]
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	685a      	ldr	r2, [r3, #4]
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	605a      	str	r2, [r3, #4]
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	685a      	ldr	r2, [r3, #4]
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d104      	bne.n	800e8b2 <vTaskSwitchContext+0x8a>
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	685a      	ldr	r2, [r3, #4]
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	605a      	str	r2, [r3, #4]
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	685b      	ldr	r3, [r3, #4]
 800e8b6:	68db      	ldr	r3, [r3, #12]
 800e8b8:	4a09      	ldr	r2, [pc, #36]	; (800e8e0 <vTaskSwitchContext+0xb8>)
 800e8ba:	6013      	str	r3, [r2, #0]
 800e8bc:	4a06      	ldr	r2, [pc, #24]	; (800e8d8 <vTaskSwitchContext+0xb0>)
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	6013      	str	r3, [r2, #0]
}
 800e8c2:	bf00      	nop
 800e8c4:	3714      	adds	r7, #20
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr
 800e8ce:	bf00      	nop
 800e8d0:	20002660 	.word	0x20002660
 800e8d4:	2000264c 	.word	0x2000264c
 800e8d8:	20002640 	.word	0x20002640
 800e8dc:	20002168 	.word	0x20002168
 800e8e0:	20002164 	.word	0x20002164

0800e8e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b084      	sub	sp, #16
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d10a      	bne.n	800e90a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f8:	f383 8811 	msr	BASEPRI, r3
 800e8fc:	f3bf 8f6f 	isb	sy
 800e900:	f3bf 8f4f 	dsb	sy
 800e904:	60fb      	str	r3, [r7, #12]
}
 800e906:	bf00      	nop
 800e908:	e7fe      	b.n	800e908 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e90a:	4b07      	ldr	r3, [pc, #28]	; (800e928 <vTaskPlaceOnEventList+0x44>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	3318      	adds	r3, #24
 800e910:	4619      	mov	r1, r3
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f7fe fe09 	bl	800d52a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e918:	2101      	movs	r1, #1
 800e91a:	6838      	ldr	r0, [r7, #0]
 800e91c:	f000 fa7c 	bl	800ee18 <prvAddCurrentTaskToDelayedList>
}
 800e920:	bf00      	nop
 800e922:	3710      	adds	r7, #16
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}
 800e928:	20002164 	.word	0x20002164

0800e92c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b086      	sub	sp, #24
 800e930:	af00      	add	r7, sp, #0
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	60b9      	str	r1, [r7, #8]
 800e936:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d10a      	bne.n	800e954 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e942:	f383 8811 	msr	BASEPRI, r3
 800e946:	f3bf 8f6f 	isb	sy
 800e94a:	f3bf 8f4f 	dsb	sy
 800e94e:	617b      	str	r3, [r7, #20]
}
 800e950:	bf00      	nop
 800e952:	e7fe      	b.n	800e952 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e954:	4b0a      	ldr	r3, [pc, #40]	; (800e980 <vTaskPlaceOnEventListRestricted+0x54>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	3318      	adds	r3, #24
 800e95a:	4619      	mov	r1, r3
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f7fe fdc0 	bl	800d4e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d002      	beq.n	800e96e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e96c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e96e:	6879      	ldr	r1, [r7, #4]
 800e970:	68b8      	ldr	r0, [r7, #8]
 800e972:	f000 fa51 	bl	800ee18 <prvAddCurrentTaskToDelayedList>
	}
 800e976:	bf00      	nop
 800e978:	3718      	adds	r7, #24
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
 800e97e:	bf00      	nop
 800e980:	20002164 	.word	0x20002164

0800e984 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b086      	sub	sp, #24
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	68db      	ldr	r3, [r3, #12]
 800e990:	68db      	ldr	r3, [r3, #12]
 800e992:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d10a      	bne.n	800e9b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99e:	f383 8811 	msr	BASEPRI, r3
 800e9a2:	f3bf 8f6f 	isb	sy
 800e9a6:	f3bf 8f4f 	dsb	sy
 800e9aa:	60fb      	str	r3, [r7, #12]
}
 800e9ac:	bf00      	nop
 800e9ae:	e7fe      	b.n	800e9ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	3318      	adds	r3, #24
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7fe fdf1 	bl	800d59c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9ba:	4b1e      	ldr	r3, [pc, #120]	; (800ea34 <xTaskRemoveFromEventList+0xb0>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d11d      	bne.n	800e9fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	3304      	adds	r3, #4
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7fe fde8 	bl	800d59c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9d0:	4b19      	ldr	r3, [pc, #100]	; (800ea38 <xTaskRemoveFromEventList+0xb4>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d903      	bls.n	800e9e0 <xTaskRemoveFromEventList+0x5c>
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9dc:	4a16      	ldr	r2, [pc, #88]	; (800ea38 <xTaskRemoveFromEventList+0xb4>)
 800e9de:	6013      	str	r3, [r2, #0]
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9e4:	4613      	mov	r3, r2
 800e9e6:	009b      	lsls	r3, r3, #2
 800e9e8:	4413      	add	r3, r2
 800e9ea:	009b      	lsls	r3, r3, #2
 800e9ec:	4a13      	ldr	r2, [pc, #76]	; (800ea3c <xTaskRemoveFromEventList+0xb8>)
 800e9ee:	441a      	add	r2, r3
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	3304      	adds	r3, #4
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	4610      	mov	r0, r2
 800e9f8:	f7fe fd73 	bl	800d4e2 <vListInsertEnd>
 800e9fc:	e005      	b.n	800ea0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	3318      	adds	r3, #24
 800ea02:	4619      	mov	r1, r3
 800ea04:	480e      	ldr	r0, [pc, #56]	; (800ea40 <xTaskRemoveFromEventList+0xbc>)
 800ea06:	f7fe fd6c 	bl	800d4e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea0e:	4b0d      	ldr	r3, [pc, #52]	; (800ea44 <xTaskRemoveFromEventList+0xc0>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d905      	bls.n	800ea24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ea18:	2301      	movs	r3, #1
 800ea1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ea1c:	4b0a      	ldr	r3, [pc, #40]	; (800ea48 <xTaskRemoveFromEventList+0xc4>)
 800ea1e:	2201      	movs	r2, #1
 800ea20:	601a      	str	r2, [r3, #0]
 800ea22:	e001      	b.n	800ea28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ea24:	2300      	movs	r3, #0
 800ea26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ea28:	697b      	ldr	r3, [r7, #20]
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3718      	adds	r7, #24
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	20002660 	.word	0x20002660
 800ea38:	20002640 	.word	0x20002640
 800ea3c:	20002168 	.word	0x20002168
 800ea40:	200025f8 	.word	0x200025f8
 800ea44:	20002164 	.word	0x20002164
 800ea48:	2000264c 	.word	0x2000264c

0800ea4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b083      	sub	sp, #12
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea54:	4b06      	ldr	r3, [pc, #24]	; (800ea70 <vTaskInternalSetTimeOutState+0x24>)
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea5c:	4b05      	ldr	r3, [pc, #20]	; (800ea74 <vTaskInternalSetTimeOutState+0x28>)
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	605a      	str	r2, [r3, #4]
}
 800ea64:	bf00      	nop
 800ea66:	370c      	adds	r7, #12
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr
 800ea70:	20002650 	.word	0x20002650
 800ea74:	2000263c 	.word	0x2000263c

0800ea78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b088      	sub	sp, #32
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d10a      	bne.n	800ea9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ea88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea8c:	f383 8811 	msr	BASEPRI, r3
 800ea90:	f3bf 8f6f 	isb	sy
 800ea94:	f3bf 8f4f 	dsb	sy
 800ea98:	613b      	str	r3, [r7, #16]
}
 800ea9a:	bf00      	nop
 800ea9c:	e7fe      	b.n	800ea9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d10a      	bne.n	800eaba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800eaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa8:	f383 8811 	msr	BASEPRI, r3
 800eaac:	f3bf 8f6f 	isb	sy
 800eab0:	f3bf 8f4f 	dsb	sy
 800eab4:	60fb      	str	r3, [r7, #12]
}
 800eab6:	bf00      	nop
 800eab8:	e7fe      	b.n	800eab8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800eaba:	f000 fe7b 	bl	800f7b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eabe:	4b1d      	ldr	r3, [pc, #116]	; (800eb34 <xTaskCheckForTimeOut+0xbc>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	69ba      	ldr	r2, [r7, #24]
 800eaca:	1ad3      	subs	r3, r2, r3
 800eacc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ead6:	d102      	bne.n	800eade <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ead8:	2300      	movs	r3, #0
 800eada:	61fb      	str	r3, [r7, #28]
 800eadc:	e023      	b.n	800eb26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	4b15      	ldr	r3, [pc, #84]	; (800eb38 <xTaskCheckForTimeOut+0xc0>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d007      	beq.n	800eafa <xTaskCheckForTimeOut+0x82>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	69ba      	ldr	r2, [r7, #24]
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d302      	bcc.n	800eafa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	61fb      	str	r3, [r7, #28]
 800eaf8:	e015      	b.n	800eb26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	697a      	ldr	r2, [r7, #20]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d20b      	bcs.n	800eb1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	1ad2      	subs	r2, r2, r3
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7ff ff9b 	bl	800ea4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eb16:	2300      	movs	r3, #0
 800eb18:	61fb      	str	r3, [r7, #28]
 800eb1a:	e004      	b.n	800eb26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eb22:	2301      	movs	r3, #1
 800eb24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eb26:	f000 fe75 	bl	800f814 <vPortExitCritical>

	return xReturn;
 800eb2a:	69fb      	ldr	r3, [r7, #28]
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3720      	adds	r7, #32
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}
 800eb34:	2000263c 	.word	0x2000263c
 800eb38:	20002650 	.word	0x20002650

0800eb3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eb40:	4b03      	ldr	r3, [pc, #12]	; (800eb50 <vTaskMissedYield+0x14>)
 800eb42:	2201      	movs	r2, #1
 800eb44:	601a      	str	r2, [r3, #0]
}
 800eb46:	bf00      	nop
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr
 800eb50:	2000264c 	.word	0x2000264c

0800eb54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eb5c:	f000 f852 	bl	800ec04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eb60:	4b06      	ldr	r3, [pc, #24]	; (800eb7c <prvIdleTask+0x28>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d9f9      	bls.n	800eb5c <prvIdleTask+0x8>
			{
				taskYIELD();
 800eb68:	4b05      	ldr	r3, [pc, #20]	; (800eb80 <prvIdleTask+0x2c>)
 800eb6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb6e:	601a      	str	r2, [r3, #0]
 800eb70:	f3bf 8f4f 	dsb	sy
 800eb74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eb78:	e7f0      	b.n	800eb5c <prvIdleTask+0x8>
 800eb7a:	bf00      	nop
 800eb7c:	20002168 	.word	0x20002168
 800eb80:	e000ed04 	.word	0xe000ed04

0800eb84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	607b      	str	r3, [r7, #4]
 800eb8e:	e00c      	b.n	800ebaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	4613      	mov	r3, r2
 800eb94:	009b      	lsls	r3, r3, #2
 800eb96:	4413      	add	r3, r2
 800eb98:	009b      	lsls	r3, r3, #2
 800eb9a:	4a12      	ldr	r2, [pc, #72]	; (800ebe4 <prvInitialiseTaskLists+0x60>)
 800eb9c:	4413      	add	r3, r2
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7fe fc72 	bl	800d488 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	3301      	adds	r3, #1
 800eba8:	607b      	str	r3, [r7, #4]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2b37      	cmp	r3, #55	; 0x37
 800ebae:	d9ef      	bls.n	800eb90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ebb0:	480d      	ldr	r0, [pc, #52]	; (800ebe8 <prvInitialiseTaskLists+0x64>)
 800ebb2:	f7fe fc69 	bl	800d488 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ebb6:	480d      	ldr	r0, [pc, #52]	; (800ebec <prvInitialiseTaskLists+0x68>)
 800ebb8:	f7fe fc66 	bl	800d488 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ebbc:	480c      	ldr	r0, [pc, #48]	; (800ebf0 <prvInitialiseTaskLists+0x6c>)
 800ebbe:	f7fe fc63 	bl	800d488 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ebc2:	480c      	ldr	r0, [pc, #48]	; (800ebf4 <prvInitialiseTaskLists+0x70>)
 800ebc4:	f7fe fc60 	bl	800d488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ebc8:	480b      	ldr	r0, [pc, #44]	; (800ebf8 <prvInitialiseTaskLists+0x74>)
 800ebca:	f7fe fc5d 	bl	800d488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ebce:	4b0b      	ldr	r3, [pc, #44]	; (800ebfc <prvInitialiseTaskLists+0x78>)
 800ebd0:	4a05      	ldr	r2, [pc, #20]	; (800ebe8 <prvInitialiseTaskLists+0x64>)
 800ebd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ebd4:	4b0a      	ldr	r3, [pc, #40]	; (800ec00 <prvInitialiseTaskLists+0x7c>)
 800ebd6:	4a05      	ldr	r2, [pc, #20]	; (800ebec <prvInitialiseTaskLists+0x68>)
 800ebd8:	601a      	str	r2, [r3, #0]
}
 800ebda:	bf00      	nop
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	20002168 	.word	0x20002168
 800ebe8:	200025c8 	.word	0x200025c8
 800ebec:	200025dc 	.word	0x200025dc
 800ebf0:	200025f8 	.word	0x200025f8
 800ebf4:	2000260c 	.word	0x2000260c
 800ebf8:	20002624 	.word	0x20002624
 800ebfc:	200025f0 	.word	0x200025f0
 800ec00:	200025f4 	.word	0x200025f4

0800ec04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec0a:	e019      	b.n	800ec40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ec0c:	f000 fdd2 	bl	800f7b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec10:	4b10      	ldr	r3, [pc, #64]	; (800ec54 <prvCheckTasksWaitingTermination+0x50>)
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	68db      	ldr	r3, [r3, #12]
 800ec16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	3304      	adds	r3, #4
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f7fe fcbd 	bl	800d59c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ec22:	4b0d      	ldr	r3, [pc, #52]	; (800ec58 <prvCheckTasksWaitingTermination+0x54>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	3b01      	subs	r3, #1
 800ec28:	4a0b      	ldr	r2, [pc, #44]	; (800ec58 <prvCheckTasksWaitingTermination+0x54>)
 800ec2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ec2c:	4b0b      	ldr	r3, [pc, #44]	; (800ec5c <prvCheckTasksWaitingTermination+0x58>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	3b01      	subs	r3, #1
 800ec32:	4a0a      	ldr	r2, [pc, #40]	; (800ec5c <prvCheckTasksWaitingTermination+0x58>)
 800ec34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ec36:	f000 fded 	bl	800f814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f000 f810 	bl	800ec60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec40:	4b06      	ldr	r3, [pc, #24]	; (800ec5c <prvCheckTasksWaitingTermination+0x58>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d1e1      	bne.n	800ec0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ec48:	bf00      	nop
 800ec4a:	bf00      	nop
 800ec4c:	3708      	adds	r7, #8
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	2000260c 	.word	0x2000260c
 800ec58:	20002638 	.word	0x20002638
 800ec5c:	20002620 	.word	0x20002620

0800ec60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d108      	bne.n	800ec84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec76:	4618      	mov	r0, r3
 800ec78:	f000 ff8a 	bl	800fb90 <vPortFree>
				vPortFree( pxTCB );
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f000 ff87 	bl	800fb90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ec82:	e018      	b.n	800ecb6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	d103      	bne.n	800ec96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f000 ff7e 	bl	800fb90 <vPortFree>
	}
 800ec94:	e00f      	b.n	800ecb6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ec9c:	2b02      	cmp	r3, #2
 800ec9e:	d00a      	beq.n	800ecb6 <prvDeleteTCB+0x56>
	__asm volatile
 800eca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca4:	f383 8811 	msr	BASEPRI, r3
 800eca8:	f3bf 8f6f 	isb	sy
 800ecac:	f3bf 8f4f 	dsb	sy
 800ecb0:	60fb      	str	r3, [r7, #12]
}
 800ecb2:	bf00      	nop
 800ecb4:	e7fe      	b.n	800ecb4 <prvDeleteTCB+0x54>
	}
 800ecb6:	bf00      	nop
 800ecb8:	3710      	adds	r7, #16
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
	...

0800ecc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b083      	sub	sp, #12
 800ecc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ecc6:	4b0c      	ldr	r3, [pc, #48]	; (800ecf8 <prvResetNextTaskUnblockTime+0x38>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d104      	bne.n	800ecda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ecd0:	4b0a      	ldr	r3, [pc, #40]	; (800ecfc <prvResetNextTaskUnblockTime+0x3c>)
 800ecd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ecd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ecd8:	e008      	b.n	800ecec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecda:	4b07      	ldr	r3, [pc, #28]	; (800ecf8 <prvResetNextTaskUnblockTime+0x38>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	68db      	ldr	r3, [r3, #12]
 800ece0:	68db      	ldr	r3, [r3, #12]
 800ece2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	4a04      	ldr	r2, [pc, #16]	; (800ecfc <prvResetNextTaskUnblockTime+0x3c>)
 800ecea:	6013      	str	r3, [r2, #0]
}
 800ecec:	bf00      	nop
 800ecee:	370c      	adds	r7, #12
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr
 800ecf8:	200025f0 	.word	0x200025f0
 800ecfc:	20002658 	.word	0x20002658

0800ed00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ed00:	b480      	push	{r7}
 800ed02:	b083      	sub	sp, #12
 800ed04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ed06:	4b0b      	ldr	r3, [pc, #44]	; (800ed34 <xTaskGetSchedulerState+0x34>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d102      	bne.n	800ed14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ed0e:	2301      	movs	r3, #1
 800ed10:	607b      	str	r3, [r7, #4]
 800ed12:	e008      	b.n	800ed26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed14:	4b08      	ldr	r3, [pc, #32]	; (800ed38 <xTaskGetSchedulerState+0x38>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d102      	bne.n	800ed22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ed1c:	2302      	movs	r3, #2
 800ed1e:	607b      	str	r3, [r7, #4]
 800ed20:	e001      	b.n	800ed26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ed22:	2300      	movs	r3, #0
 800ed24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ed26:	687b      	ldr	r3, [r7, #4]
	}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	370c      	adds	r7, #12
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr
 800ed34:	20002644 	.word	0x20002644
 800ed38:	20002660 	.word	0x20002660

0800ed3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b086      	sub	sp, #24
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d056      	beq.n	800ee00 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed52:	4b2e      	ldr	r3, [pc, #184]	; (800ee0c <xTaskPriorityDisinherit+0xd0>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	693a      	ldr	r2, [r7, #16]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d00a      	beq.n	800ed72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ed5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed60:	f383 8811 	msr	BASEPRI, r3
 800ed64:	f3bf 8f6f 	isb	sy
 800ed68:	f3bf 8f4f 	dsb	sy
 800ed6c:	60fb      	str	r3, [r7, #12]
}
 800ed6e:	bf00      	nop
 800ed70:	e7fe      	b.n	800ed70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d10a      	bne.n	800ed90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ed7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed7e:	f383 8811 	msr	BASEPRI, r3
 800ed82:	f3bf 8f6f 	isb	sy
 800ed86:	f3bf 8f4f 	dsb	sy
 800ed8a:	60bb      	str	r3, [r7, #8]
}
 800ed8c:	bf00      	nop
 800ed8e:	e7fe      	b.n	800ed8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed94:	1e5a      	subs	r2, r3, #1
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d02c      	beq.n	800ee00 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d128      	bne.n	800ee00 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	3304      	adds	r3, #4
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fe fbf2 	bl	800d59c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edd0:	4b0f      	ldr	r3, [pc, #60]	; (800ee10 <xTaskPriorityDisinherit+0xd4>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d903      	bls.n	800ede0 <xTaskPriorityDisinherit+0xa4>
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eddc:	4a0c      	ldr	r2, [pc, #48]	; (800ee10 <xTaskPriorityDisinherit+0xd4>)
 800edde:	6013      	str	r3, [r2, #0]
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ede4:	4613      	mov	r3, r2
 800ede6:	009b      	lsls	r3, r3, #2
 800ede8:	4413      	add	r3, r2
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	4a09      	ldr	r2, [pc, #36]	; (800ee14 <xTaskPriorityDisinherit+0xd8>)
 800edee:	441a      	add	r2, r3
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	3304      	adds	r3, #4
 800edf4:	4619      	mov	r1, r3
 800edf6:	4610      	mov	r0, r2
 800edf8:	f7fe fb73 	bl	800d4e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800edfc:	2301      	movs	r3, #1
 800edfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee00:	697b      	ldr	r3, [r7, #20]
	}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3718      	adds	r7, #24
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
 800ee0a:	bf00      	nop
 800ee0c:	20002164 	.word	0x20002164
 800ee10:	20002640 	.word	0x20002640
 800ee14:	20002168 	.word	0x20002168

0800ee18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ee22:	4b21      	ldr	r3, [pc, #132]	; (800eea8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee28:	4b20      	ldr	r3, [pc, #128]	; (800eeac <prvAddCurrentTaskToDelayedList+0x94>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	3304      	adds	r3, #4
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7fe fbb4 	bl	800d59c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee3a:	d10a      	bne.n	800ee52 <prvAddCurrentTaskToDelayedList+0x3a>
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d007      	beq.n	800ee52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee42:	4b1a      	ldr	r3, [pc, #104]	; (800eeac <prvAddCurrentTaskToDelayedList+0x94>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	3304      	adds	r3, #4
 800ee48:	4619      	mov	r1, r3
 800ee4a:	4819      	ldr	r0, [pc, #100]	; (800eeb0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ee4c:	f7fe fb49 	bl	800d4e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ee50:	e026      	b.n	800eea0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ee52:	68fa      	ldr	r2, [r7, #12]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	4413      	add	r3, r2
 800ee58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee5a:	4b14      	ldr	r3, [pc, #80]	; (800eeac <prvAddCurrentTaskToDelayedList+0x94>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	68ba      	ldr	r2, [r7, #8]
 800ee60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee62:	68ba      	ldr	r2, [r7, #8]
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d209      	bcs.n	800ee7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee6a:	4b12      	ldr	r3, [pc, #72]	; (800eeb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	4b0f      	ldr	r3, [pc, #60]	; (800eeac <prvAddCurrentTaskToDelayedList+0x94>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	3304      	adds	r3, #4
 800ee74:	4619      	mov	r1, r3
 800ee76:	4610      	mov	r0, r2
 800ee78:	f7fe fb57 	bl	800d52a <vListInsert>
}
 800ee7c:	e010      	b.n	800eea0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee7e:	4b0e      	ldr	r3, [pc, #56]	; (800eeb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	4b0a      	ldr	r3, [pc, #40]	; (800eeac <prvAddCurrentTaskToDelayedList+0x94>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	3304      	adds	r3, #4
 800ee88:	4619      	mov	r1, r3
 800ee8a:	4610      	mov	r0, r2
 800ee8c:	f7fe fb4d 	bl	800d52a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee90:	4b0a      	ldr	r3, [pc, #40]	; (800eebc <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	68ba      	ldr	r2, [r7, #8]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d202      	bcs.n	800eea0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ee9a:	4a08      	ldr	r2, [pc, #32]	; (800eebc <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	6013      	str	r3, [r2, #0]
}
 800eea0:	bf00      	nop
 800eea2:	3710      	adds	r7, #16
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	2000263c 	.word	0x2000263c
 800eeac:	20002164 	.word	0x20002164
 800eeb0:	20002624 	.word	0x20002624
 800eeb4:	200025f4 	.word	0x200025f4
 800eeb8:	200025f0 	.word	0x200025f0
 800eebc:	20002658 	.word	0x20002658

0800eec0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b08a      	sub	sp, #40	; 0x28
 800eec4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eec6:	2300      	movs	r3, #0
 800eec8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eeca:	f000 fb07 	bl	800f4dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800eece:	4b1c      	ldr	r3, [pc, #112]	; (800ef40 <xTimerCreateTimerTask+0x80>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d021      	beq.n	800ef1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eed6:	2300      	movs	r3, #0
 800eed8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eeda:	2300      	movs	r3, #0
 800eedc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eede:	1d3a      	adds	r2, r7, #4
 800eee0:	f107 0108 	add.w	r1, r7, #8
 800eee4:	f107 030c 	add.w	r3, r7, #12
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fe fab3 	bl	800d454 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eeee:	6879      	ldr	r1, [r7, #4]
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	68fa      	ldr	r2, [r7, #12]
 800eef4:	9202      	str	r2, [sp, #8]
 800eef6:	9301      	str	r3, [sp, #4]
 800eef8:	2302      	movs	r3, #2
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	2300      	movs	r3, #0
 800eefe:	460a      	mov	r2, r1
 800ef00:	4910      	ldr	r1, [pc, #64]	; (800ef44 <xTimerCreateTimerTask+0x84>)
 800ef02:	4811      	ldr	r0, [pc, #68]	; (800ef48 <xTimerCreateTimerTask+0x88>)
 800ef04:	f7ff f860 	bl	800dfc8 <xTaskCreateStatic>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	4a10      	ldr	r2, [pc, #64]	; (800ef4c <xTimerCreateTimerTask+0x8c>)
 800ef0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ef0e:	4b0f      	ldr	r3, [pc, #60]	; (800ef4c <xTimerCreateTimerTask+0x8c>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d001      	beq.n	800ef1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ef16:	2301      	movs	r3, #1
 800ef18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d10a      	bne.n	800ef36 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ef20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef24:	f383 8811 	msr	BASEPRI, r3
 800ef28:	f3bf 8f6f 	isb	sy
 800ef2c:	f3bf 8f4f 	dsb	sy
 800ef30:	613b      	str	r3, [r7, #16]
}
 800ef32:	bf00      	nop
 800ef34:	e7fe      	b.n	800ef34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ef36:	697b      	ldr	r3, [r7, #20]
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3718      	adds	r7, #24
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}
 800ef40:	20002694 	.word	0x20002694
 800ef44:	080147ec 	.word	0x080147ec
 800ef48:	0800f085 	.word	0x0800f085
 800ef4c:	20002698 	.word	0x20002698

0800ef50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b08a      	sub	sp, #40	; 0x28
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	60b9      	str	r1, [r7, #8]
 800ef5a:	607a      	str	r2, [r7, #4]
 800ef5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d10a      	bne.n	800ef7e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ef68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6c:	f383 8811 	msr	BASEPRI, r3
 800ef70:	f3bf 8f6f 	isb	sy
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	623b      	str	r3, [r7, #32]
}
 800ef7a:	bf00      	nop
 800ef7c:	e7fe      	b.n	800ef7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ef7e:	4b1a      	ldr	r3, [pc, #104]	; (800efe8 <xTimerGenericCommand+0x98>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d02a      	beq.n	800efdc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	2b05      	cmp	r3, #5
 800ef96:	dc18      	bgt.n	800efca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ef98:	f7ff feb2 	bl	800ed00 <xTaskGetSchedulerState>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b02      	cmp	r3, #2
 800efa0:	d109      	bne.n	800efb6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800efa2:	4b11      	ldr	r3, [pc, #68]	; (800efe8 <xTimerGenericCommand+0x98>)
 800efa4:	6818      	ldr	r0, [r3, #0]
 800efa6:	f107 0110 	add.w	r1, r7, #16
 800efaa:	2300      	movs	r3, #0
 800efac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efae:	f7fe fc23 	bl	800d7f8 <xQueueGenericSend>
 800efb2:	6278      	str	r0, [r7, #36]	; 0x24
 800efb4:	e012      	b.n	800efdc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800efb6:	4b0c      	ldr	r3, [pc, #48]	; (800efe8 <xTimerGenericCommand+0x98>)
 800efb8:	6818      	ldr	r0, [r3, #0]
 800efba:	f107 0110 	add.w	r1, r7, #16
 800efbe:	2300      	movs	r3, #0
 800efc0:	2200      	movs	r2, #0
 800efc2:	f7fe fc19 	bl	800d7f8 <xQueueGenericSend>
 800efc6:	6278      	str	r0, [r7, #36]	; 0x24
 800efc8:	e008      	b.n	800efdc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800efca:	4b07      	ldr	r3, [pc, #28]	; (800efe8 <xTimerGenericCommand+0x98>)
 800efcc:	6818      	ldr	r0, [r3, #0]
 800efce:	f107 0110 	add.w	r1, r7, #16
 800efd2:	2300      	movs	r3, #0
 800efd4:	683a      	ldr	r2, [r7, #0]
 800efd6:	f7fe fd0d 	bl	800d9f4 <xQueueGenericSendFromISR>
 800efda:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800efdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3728      	adds	r7, #40	; 0x28
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	20002694 	.word	0x20002694

0800efec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b088      	sub	sp, #32
 800eff0:	af02      	add	r7, sp, #8
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eff6:	4b22      	ldr	r3, [pc, #136]	; (800f080 <prvProcessExpiredTimer+0x94>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	68db      	ldr	r3, [r3, #12]
 800effe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	3304      	adds	r3, #4
 800f004:	4618      	mov	r0, r3
 800f006:	f7fe fac9 	bl	800d59c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f010:	f003 0304 	and.w	r3, r3, #4
 800f014:	2b00      	cmp	r3, #0
 800f016:	d022      	beq.n	800f05e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	699a      	ldr	r2, [r3, #24]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	18d1      	adds	r1, r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	683a      	ldr	r2, [r7, #0]
 800f024:	6978      	ldr	r0, [r7, #20]
 800f026:	f000 f8d1 	bl	800f1cc <prvInsertTimerInActiveList>
 800f02a:	4603      	mov	r3, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d01f      	beq.n	800f070 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f030:	2300      	movs	r3, #0
 800f032:	9300      	str	r3, [sp, #0]
 800f034:	2300      	movs	r3, #0
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	2100      	movs	r1, #0
 800f03a:	6978      	ldr	r0, [r7, #20]
 800f03c:	f7ff ff88 	bl	800ef50 <xTimerGenericCommand>
 800f040:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d113      	bne.n	800f070 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04c:	f383 8811 	msr	BASEPRI, r3
 800f050:	f3bf 8f6f 	isb	sy
 800f054:	f3bf 8f4f 	dsb	sy
 800f058:	60fb      	str	r3, [r7, #12]
}
 800f05a:	bf00      	nop
 800f05c:	e7fe      	b.n	800f05c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f064:	f023 0301 	bic.w	r3, r3, #1
 800f068:	b2da      	uxtb	r2, r3
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	6a1b      	ldr	r3, [r3, #32]
 800f074:	6978      	ldr	r0, [r7, #20]
 800f076:	4798      	blx	r3
}
 800f078:	bf00      	nop
 800f07a:	3718      	adds	r7, #24
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	2000268c 	.word	0x2000268c

0800f084 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b084      	sub	sp, #16
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f08c:	f107 0308 	add.w	r3, r7, #8
 800f090:	4618      	mov	r0, r3
 800f092:	f000 f857 	bl	800f144 <prvGetNextExpireTime>
 800f096:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	4619      	mov	r1, r3
 800f09c:	68f8      	ldr	r0, [r7, #12]
 800f09e:	f000 f803 	bl	800f0a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f0a2:	f000 f8d5 	bl	800f250 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f0a6:	e7f1      	b.n	800f08c <prvTimerTask+0x8>

0800f0a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f0b2:	f7ff fa43 	bl	800e53c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f0b6:	f107 0308 	add.w	r3, r7, #8
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f000 f866 	bl	800f18c <prvSampleTimeNow>
 800f0c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d130      	bne.n	800f12a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d10a      	bne.n	800f0e4 <prvProcessTimerOrBlockTask+0x3c>
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d806      	bhi.n	800f0e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f0d6:	f7ff fa3f 	bl	800e558 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f0da:	68f9      	ldr	r1, [r7, #12]
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f7ff ff85 	bl	800efec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f0e2:	e024      	b.n	800f12e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d008      	beq.n	800f0fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f0ea:	4b13      	ldr	r3, [pc, #76]	; (800f138 <prvProcessTimerOrBlockTask+0x90>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d101      	bne.n	800f0f8 <prvProcessTimerOrBlockTask+0x50>
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	e000      	b.n	800f0fa <prvProcessTimerOrBlockTask+0x52>
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f0fc:	4b0f      	ldr	r3, [pc, #60]	; (800f13c <prvProcessTimerOrBlockTask+0x94>)
 800f0fe:	6818      	ldr	r0, [r3, #0]
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	1ad3      	subs	r3, r2, r3
 800f106:	683a      	ldr	r2, [r7, #0]
 800f108:	4619      	mov	r1, r3
 800f10a:	f7fe ff29 	bl	800df60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f10e:	f7ff fa23 	bl	800e558 <xTaskResumeAll>
 800f112:	4603      	mov	r3, r0
 800f114:	2b00      	cmp	r3, #0
 800f116:	d10a      	bne.n	800f12e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f118:	4b09      	ldr	r3, [pc, #36]	; (800f140 <prvProcessTimerOrBlockTask+0x98>)
 800f11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f11e:	601a      	str	r2, [r3, #0]
 800f120:	f3bf 8f4f 	dsb	sy
 800f124:	f3bf 8f6f 	isb	sy
}
 800f128:	e001      	b.n	800f12e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f12a:	f7ff fa15 	bl	800e558 <xTaskResumeAll>
}
 800f12e:	bf00      	nop
 800f130:	3710      	adds	r7, #16
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	20002690 	.word	0x20002690
 800f13c:	20002694 	.word	0x20002694
 800f140:	e000ed04 	.word	0xe000ed04

0800f144 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f144:	b480      	push	{r7}
 800f146:	b085      	sub	sp, #20
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f14c:	4b0e      	ldr	r3, [pc, #56]	; (800f188 <prvGetNextExpireTime+0x44>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d101      	bne.n	800f15a <prvGetNextExpireTime+0x16>
 800f156:	2201      	movs	r2, #1
 800f158:	e000      	b.n	800f15c <prvGetNextExpireTime+0x18>
 800f15a:	2200      	movs	r2, #0
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d105      	bne.n	800f174 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f168:	4b07      	ldr	r3, [pc, #28]	; (800f188 <prvGetNextExpireTime+0x44>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	68db      	ldr	r3, [r3, #12]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	60fb      	str	r3, [r7, #12]
 800f172:	e001      	b.n	800f178 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f174:	2300      	movs	r3, #0
 800f176:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f178:	68fb      	ldr	r3, [r7, #12]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3714      	adds	r7, #20
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr
 800f186:	bf00      	nop
 800f188:	2000268c 	.word	0x2000268c

0800f18c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b084      	sub	sp, #16
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f194:	f7ff fa7e 	bl	800e694 <xTaskGetTickCount>
 800f198:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f19a:	4b0b      	ldr	r3, [pc, #44]	; (800f1c8 <prvSampleTimeNow+0x3c>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	68fa      	ldr	r2, [r7, #12]
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d205      	bcs.n	800f1b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f1a4:	f000 f936 	bl	800f414 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	601a      	str	r2, [r3, #0]
 800f1ae:	e002      	b.n	800f1b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f1b6:	4a04      	ldr	r2, [pc, #16]	; (800f1c8 <prvSampleTimeNow+0x3c>)
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3710      	adds	r7, #16
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	2000269c 	.word	0x2000269c

0800f1cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b086      	sub	sp, #24
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	60f8      	str	r0, [r7, #12]
 800f1d4:	60b9      	str	r1, [r7, #8]
 800f1d6:	607a      	str	r2, [r7, #4]
 800f1d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	68ba      	ldr	r2, [r7, #8]
 800f1e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	68fa      	ldr	r2, [r7, #12]
 800f1e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f1ea:	68ba      	ldr	r2, [r7, #8]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d812      	bhi.n	800f218 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1f2:	687a      	ldr	r2, [r7, #4]
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	1ad2      	subs	r2, r2, r3
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	699b      	ldr	r3, [r3, #24]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d302      	bcc.n	800f206 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f200:	2301      	movs	r3, #1
 800f202:	617b      	str	r3, [r7, #20]
 800f204:	e01b      	b.n	800f23e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f206:	4b10      	ldr	r3, [pc, #64]	; (800f248 <prvInsertTimerInActiveList+0x7c>)
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	3304      	adds	r3, #4
 800f20e:	4619      	mov	r1, r3
 800f210:	4610      	mov	r0, r2
 800f212:	f7fe f98a 	bl	800d52a <vListInsert>
 800f216:	e012      	b.n	800f23e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f218:	687a      	ldr	r2, [r7, #4]
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d206      	bcs.n	800f22e <prvInsertTimerInActiveList+0x62>
 800f220:	68ba      	ldr	r2, [r7, #8]
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	429a      	cmp	r2, r3
 800f226:	d302      	bcc.n	800f22e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f228:	2301      	movs	r3, #1
 800f22a:	617b      	str	r3, [r7, #20]
 800f22c:	e007      	b.n	800f23e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f22e:	4b07      	ldr	r3, [pc, #28]	; (800f24c <prvInsertTimerInActiveList+0x80>)
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	3304      	adds	r3, #4
 800f236:	4619      	mov	r1, r3
 800f238:	4610      	mov	r0, r2
 800f23a:	f7fe f976 	bl	800d52a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f23e:	697b      	ldr	r3, [r7, #20]
}
 800f240:	4618      	mov	r0, r3
 800f242:	3718      	adds	r7, #24
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	20002690 	.word	0x20002690
 800f24c:	2000268c 	.word	0x2000268c

0800f250 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b08e      	sub	sp, #56	; 0x38
 800f254:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f256:	e0ca      	b.n	800f3ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	da18      	bge.n	800f290 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f25e:	1d3b      	adds	r3, r7, #4
 800f260:	3304      	adds	r3, #4
 800f262:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f266:	2b00      	cmp	r3, #0
 800f268:	d10a      	bne.n	800f280 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f26e:	f383 8811 	msr	BASEPRI, r3
 800f272:	f3bf 8f6f 	isb	sy
 800f276:	f3bf 8f4f 	dsb	sy
 800f27a:	61fb      	str	r3, [r7, #28]
}
 800f27c:	bf00      	nop
 800f27e:	e7fe      	b.n	800f27e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f286:	6850      	ldr	r0, [r2, #4]
 800f288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f28a:	6892      	ldr	r2, [r2, #8]
 800f28c:	4611      	mov	r1, r2
 800f28e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2b00      	cmp	r3, #0
 800f294:	f2c0 80aa 	blt.w	800f3ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29e:	695b      	ldr	r3, [r3, #20]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d004      	beq.n	800f2ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a6:	3304      	adds	r3, #4
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7fe f977 	bl	800d59c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2ae:	463b      	mov	r3, r7
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7ff ff6b 	bl	800f18c <prvSampleTimeNow>
 800f2b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2b09      	cmp	r3, #9
 800f2bc:	f200 8097 	bhi.w	800f3ee <prvProcessReceivedCommands+0x19e>
 800f2c0:	a201      	add	r2, pc, #4	; (adr r2, 800f2c8 <prvProcessReceivedCommands+0x78>)
 800f2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c6:	bf00      	nop
 800f2c8:	0800f2f1 	.word	0x0800f2f1
 800f2cc:	0800f2f1 	.word	0x0800f2f1
 800f2d0:	0800f2f1 	.word	0x0800f2f1
 800f2d4:	0800f365 	.word	0x0800f365
 800f2d8:	0800f379 	.word	0x0800f379
 800f2dc:	0800f3c3 	.word	0x0800f3c3
 800f2e0:	0800f2f1 	.word	0x0800f2f1
 800f2e4:	0800f2f1 	.word	0x0800f2f1
 800f2e8:	0800f365 	.word	0x0800f365
 800f2ec:	0800f379 	.word	0x0800f379
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2f6:	f043 0301 	orr.w	r3, r3, #1
 800f2fa:	b2da      	uxtb	r2, r3
 800f2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f302:	68ba      	ldr	r2, [r7, #8]
 800f304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f306:	699b      	ldr	r3, [r3, #24]
 800f308:	18d1      	adds	r1, r2, r3
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f30e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f310:	f7ff ff5c 	bl	800f1cc <prvInsertTimerInActiveList>
 800f314:	4603      	mov	r3, r0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d069      	beq.n	800f3ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31c:	6a1b      	ldr	r3, [r3, #32]
 800f31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f320:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f324:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f328:	f003 0304 	and.w	r3, r3, #4
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d05e      	beq.n	800f3ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f330:	68ba      	ldr	r2, [r7, #8]
 800f332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f334:	699b      	ldr	r3, [r3, #24]
 800f336:	441a      	add	r2, r3
 800f338:	2300      	movs	r3, #0
 800f33a:	9300      	str	r3, [sp, #0]
 800f33c:	2300      	movs	r3, #0
 800f33e:	2100      	movs	r1, #0
 800f340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f342:	f7ff fe05 	bl	800ef50 <xTimerGenericCommand>
 800f346:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f348:	6a3b      	ldr	r3, [r7, #32]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d14f      	bne.n	800f3ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f352:	f383 8811 	msr	BASEPRI, r3
 800f356:	f3bf 8f6f 	isb	sy
 800f35a:	f3bf 8f4f 	dsb	sy
 800f35e:	61bb      	str	r3, [r7, #24]
}
 800f360:	bf00      	nop
 800f362:	e7fe      	b.n	800f362 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f36a:	f023 0301 	bic.w	r3, r3, #1
 800f36e:	b2da      	uxtb	r2, r3
 800f370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f376:	e03a      	b.n	800f3ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f37e:	f043 0301 	orr.w	r3, r3, #1
 800f382:	b2da      	uxtb	r2, r3
 800f384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f38a:	68ba      	ldr	r2, [r7, #8]
 800f38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f392:	699b      	ldr	r3, [r3, #24]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d10a      	bne.n	800f3ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f39c:	f383 8811 	msr	BASEPRI, r3
 800f3a0:	f3bf 8f6f 	isb	sy
 800f3a4:	f3bf 8f4f 	dsb	sy
 800f3a8:	617b      	str	r3, [r7, #20]
}
 800f3aa:	bf00      	nop
 800f3ac:	e7fe      	b.n	800f3ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b0:	699a      	ldr	r2, [r3, #24]
 800f3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b4:	18d1      	adds	r1, r2, r3
 800f3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3bc:	f7ff ff06 	bl	800f1cc <prvInsertTimerInActiveList>
					break;
 800f3c0:	e015      	b.n	800f3ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3c8:	f003 0302 	and.w	r3, r3, #2
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d103      	bne.n	800f3d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f3d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3d2:	f000 fbdd 	bl	800fb90 <vPortFree>
 800f3d6:	e00a      	b.n	800f3ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3de:	f023 0301 	bic.w	r3, r3, #1
 800f3e2:	b2da      	uxtb	r2, r3
 800f3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f3ea:	e000      	b.n	800f3ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f3ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f3ee:	4b08      	ldr	r3, [pc, #32]	; (800f410 <prvProcessReceivedCommands+0x1c0>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	1d39      	adds	r1, r7, #4
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7fe fb98 	bl	800db2c <xQueueReceive>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	f47f af2a 	bne.w	800f258 <prvProcessReceivedCommands+0x8>
	}
}
 800f404:	bf00      	nop
 800f406:	bf00      	nop
 800f408:	3730      	adds	r7, #48	; 0x30
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
 800f40e:	bf00      	nop
 800f410:	20002694 	.word	0x20002694

0800f414 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b088      	sub	sp, #32
 800f418:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f41a:	e048      	b.n	800f4ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f41c:	4b2d      	ldr	r3, [pc, #180]	; (800f4d4 <prvSwitchTimerLists+0xc0>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	68db      	ldr	r3, [r3, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f426:	4b2b      	ldr	r3, [pc, #172]	; (800f4d4 <prvSwitchTimerLists+0xc0>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	68db      	ldr	r3, [r3, #12]
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	3304      	adds	r3, #4
 800f434:	4618      	mov	r0, r3
 800f436:	f7fe f8b1 	bl	800d59c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	6a1b      	ldr	r3, [r3, #32]
 800f43e:	68f8      	ldr	r0, [r7, #12]
 800f440:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f448:	f003 0304 	and.w	r3, r3, #4
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d02e      	beq.n	800f4ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	699b      	ldr	r3, [r3, #24]
 800f454:	693a      	ldr	r2, [r7, #16]
 800f456:	4413      	add	r3, r2
 800f458:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f45a:	68ba      	ldr	r2, [r7, #8]
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d90e      	bls.n	800f480 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	68ba      	ldr	r2, [r7, #8]
 800f466:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	68fa      	ldr	r2, [r7, #12]
 800f46c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f46e:	4b19      	ldr	r3, [pc, #100]	; (800f4d4 <prvSwitchTimerLists+0xc0>)
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	3304      	adds	r3, #4
 800f476:	4619      	mov	r1, r3
 800f478:	4610      	mov	r0, r2
 800f47a:	f7fe f856 	bl	800d52a <vListInsert>
 800f47e:	e016      	b.n	800f4ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f480:	2300      	movs	r3, #0
 800f482:	9300      	str	r3, [sp, #0]
 800f484:	2300      	movs	r3, #0
 800f486:	693a      	ldr	r2, [r7, #16]
 800f488:	2100      	movs	r1, #0
 800f48a:	68f8      	ldr	r0, [r7, #12]
 800f48c:	f7ff fd60 	bl	800ef50 <xTimerGenericCommand>
 800f490:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d10a      	bne.n	800f4ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f49c:	f383 8811 	msr	BASEPRI, r3
 800f4a0:	f3bf 8f6f 	isb	sy
 800f4a4:	f3bf 8f4f 	dsb	sy
 800f4a8:	603b      	str	r3, [r7, #0]
}
 800f4aa:	bf00      	nop
 800f4ac:	e7fe      	b.n	800f4ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f4ae:	4b09      	ldr	r3, [pc, #36]	; (800f4d4 <prvSwitchTimerLists+0xc0>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d1b1      	bne.n	800f41c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f4b8:	4b06      	ldr	r3, [pc, #24]	; (800f4d4 <prvSwitchTimerLists+0xc0>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f4be:	4b06      	ldr	r3, [pc, #24]	; (800f4d8 <prvSwitchTimerLists+0xc4>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	4a04      	ldr	r2, [pc, #16]	; (800f4d4 <prvSwitchTimerLists+0xc0>)
 800f4c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f4c6:	4a04      	ldr	r2, [pc, #16]	; (800f4d8 <prvSwitchTimerLists+0xc4>)
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	6013      	str	r3, [r2, #0]
}
 800f4cc:	bf00      	nop
 800f4ce:	3718      	adds	r7, #24
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}
 800f4d4:	2000268c 	.word	0x2000268c
 800f4d8:	20002690 	.word	0x20002690

0800f4dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f4e2:	f000 f967 	bl	800f7b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f4e6:	4b15      	ldr	r3, [pc, #84]	; (800f53c <prvCheckForValidListAndQueue+0x60>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d120      	bne.n	800f530 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f4ee:	4814      	ldr	r0, [pc, #80]	; (800f540 <prvCheckForValidListAndQueue+0x64>)
 800f4f0:	f7fd ffca 	bl	800d488 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f4f4:	4813      	ldr	r0, [pc, #76]	; (800f544 <prvCheckForValidListAndQueue+0x68>)
 800f4f6:	f7fd ffc7 	bl	800d488 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f4fa:	4b13      	ldr	r3, [pc, #76]	; (800f548 <prvCheckForValidListAndQueue+0x6c>)
 800f4fc:	4a10      	ldr	r2, [pc, #64]	; (800f540 <prvCheckForValidListAndQueue+0x64>)
 800f4fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f500:	4b12      	ldr	r3, [pc, #72]	; (800f54c <prvCheckForValidListAndQueue+0x70>)
 800f502:	4a10      	ldr	r2, [pc, #64]	; (800f544 <prvCheckForValidListAndQueue+0x68>)
 800f504:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f506:	2300      	movs	r3, #0
 800f508:	9300      	str	r3, [sp, #0]
 800f50a:	4b11      	ldr	r3, [pc, #68]	; (800f550 <prvCheckForValidListAndQueue+0x74>)
 800f50c:	4a11      	ldr	r2, [pc, #68]	; (800f554 <prvCheckForValidListAndQueue+0x78>)
 800f50e:	2110      	movs	r1, #16
 800f510:	200a      	movs	r0, #10
 800f512:	f7fe f8d5 	bl	800d6c0 <xQueueGenericCreateStatic>
 800f516:	4603      	mov	r3, r0
 800f518:	4a08      	ldr	r2, [pc, #32]	; (800f53c <prvCheckForValidListAndQueue+0x60>)
 800f51a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f51c:	4b07      	ldr	r3, [pc, #28]	; (800f53c <prvCheckForValidListAndQueue+0x60>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d005      	beq.n	800f530 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f524:	4b05      	ldr	r3, [pc, #20]	; (800f53c <prvCheckForValidListAndQueue+0x60>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	490b      	ldr	r1, [pc, #44]	; (800f558 <prvCheckForValidListAndQueue+0x7c>)
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7fe fcee 	bl	800df0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f530:	f000 f970 	bl	800f814 <vPortExitCritical>
}
 800f534:	bf00      	nop
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	bf00      	nop
 800f53c:	20002694 	.word	0x20002694
 800f540:	20002664 	.word	0x20002664
 800f544:	20002678 	.word	0x20002678
 800f548:	2000268c 	.word	0x2000268c
 800f54c:	20002690 	.word	0x20002690
 800f550:	20002740 	.word	0x20002740
 800f554:	200026a0 	.word	0x200026a0
 800f558:	080147f4 	.word	0x080147f4

0800f55c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f55c:	b480      	push	{r7}
 800f55e:	b085      	sub	sp, #20
 800f560:	af00      	add	r7, sp, #0
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	3b04      	subs	r3, #4
 800f56c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	3b04      	subs	r3, #4
 800f57a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	f023 0201 	bic.w	r2, r3, #1
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	3b04      	subs	r3, #4
 800f58a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f58c:	4a0c      	ldr	r2, [pc, #48]	; (800f5c0 <pxPortInitialiseStack+0x64>)
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	3b14      	subs	r3, #20
 800f596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f598:	687a      	ldr	r2, [r7, #4]
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	3b04      	subs	r3, #4
 800f5a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f06f 0202 	mvn.w	r2, #2
 800f5aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	3b20      	subs	r3, #32
 800f5b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3714      	adds	r7, #20
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr
 800f5c0:	0800f5c5 	.word	0x0800f5c5

0800f5c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b085      	sub	sp, #20
 800f5c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f5ce:	4b12      	ldr	r3, [pc, #72]	; (800f618 <prvTaskExitError+0x54>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f5d6:	d00a      	beq.n	800f5ee <prvTaskExitError+0x2a>
	__asm volatile
 800f5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5dc:	f383 8811 	msr	BASEPRI, r3
 800f5e0:	f3bf 8f6f 	isb	sy
 800f5e4:	f3bf 8f4f 	dsb	sy
 800f5e8:	60fb      	str	r3, [r7, #12]
}
 800f5ea:	bf00      	nop
 800f5ec:	e7fe      	b.n	800f5ec <prvTaskExitError+0x28>
	__asm volatile
 800f5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f2:	f383 8811 	msr	BASEPRI, r3
 800f5f6:	f3bf 8f6f 	isb	sy
 800f5fa:	f3bf 8f4f 	dsb	sy
 800f5fe:	60bb      	str	r3, [r7, #8]
}
 800f600:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f602:	bf00      	nop
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d0fc      	beq.n	800f604 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f60a:	bf00      	nop
 800f60c:	bf00      	nop
 800f60e:	3714      	adds	r7, #20
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr
 800f618:	20000010 	.word	0x20000010
 800f61c:	00000000 	.word	0x00000000

0800f620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f620:	4b07      	ldr	r3, [pc, #28]	; (800f640 <pxCurrentTCBConst2>)
 800f622:	6819      	ldr	r1, [r3, #0]
 800f624:	6808      	ldr	r0, [r1, #0]
 800f626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f62a:	f380 8809 	msr	PSP, r0
 800f62e:	f3bf 8f6f 	isb	sy
 800f632:	f04f 0000 	mov.w	r0, #0
 800f636:	f380 8811 	msr	BASEPRI, r0
 800f63a:	4770      	bx	lr
 800f63c:	f3af 8000 	nop.w

0800f640 <pxCurrentTCBConst2>:
 800f640:	20002164 	.word	0x20002164
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f644:	bf00      	nop
 800f646:	bf00      	nop

0800f648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f648:	4808      	ldr	r0, [pc, #32]	; (800f66c <prvPortStartFirstTask+0x24>)
 800f64a:	6800      	ldr	r0, [r0, #0]
 800f64c:	6800      	ldr	r0, [r0, #0]
 800f64e:	f380 8808 	msr	MSP, r0
 800f652:	f04f 0000 	mov.w	r0, #0
 800f656:	f380 8814 	msr	CONTROL, r0
 800f65a:	b662      	cpsie	i
 800f65c:	b661      	cpsie	f
 800f65e:	f3bf 8f4f 	dsb	sy
 800f662:	f3bf 8f6f 	isb	sy
 800f666:	df00      	svc	0
 800f668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f66a:	bf00      	nop
 800f66c:	e000ed08 	.word	0xe000ed08

0800f670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b086      	sub	sp, #24
 800f674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f676:	4b46      	ldr	r3, [pc, #280]	; (800f790 <xPortStartScheduler+0x120>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	4a46      	ldr	r2, [pc, #280]	; (800f794 <xPortStartScheduler+0x124>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d10a      	bne.n	800f696 <xPortStartScheduler+0x26>
	__asm volatile
 800f680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f684:	f383 8811 	msr	BASEPRI, r3
 800f688:	f3bf 8f6f 	isb	sy
 800f68c:	f3bf 8f4f 	dsb	sy
 800f690:	613b      	str	r3, [r7, #16]
}
 800f692:	bf00      	nop
 800f694:	e7fe      	b.n	800f694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f696:	4b3e      	ldr	r3, [pc, #248]	; (800f790 <xPortStartScheduler+0x120>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4a3f      	ldr	r2, [pc, #252]	; (800f798 <xPortStartScheduler+0x128>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d10a      	bne.n	800f6b6 <xPortStartScheduler+0x46>
	__asm volatile
 800f6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a4:	f383 8811 	msr	BASEPRI, r3
 800f6a8:	f3bf 8f6f 	isb	sy
 800f6ac:	f3bf 8f4f 	dsb	sy
 800f6b0:	60fb      	str	r3, [r7, #12]
}
 800f6b2:	bf00      	nop
 800f6b4:	e7fe      	b.n	800f6b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f6b6:	4b39      	ldr	r3, [pc, #228]	; (800f79c <xPortStartScheduler+0x12c>)
 800f6b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	781b      	ldrb	r3, [r3, #0]
 800f6be:	b2db      	uxtb	r3, r3
 800f6c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	22ff      	movs	r2, #255	; 0xff
 800f6c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	b2db      	uxtb	r3, r3
 800f6ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f6d0:	78fb      	ldrb	r3, [r7, #3]
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f6d8:	b2da      	uxtb	r2, r3
 800f6da:	4b31      	ldr	r3, [pc, #196]	; (800f7a0 <xPortStartScheduler+0x130>)
 800f6dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f6de:	4b31      	ldr	r3, [pc, #196]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f6e0:	2207      	movs	r2, #7
 800f6e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6e4:	e009      	b.n	800f6fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f6e6:	4b2f      	ldr	r3, [pc, #188]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	3b01      	subs	r3, #1
 800f6ec:	4a2d      	ldr	r2, [pc, #180]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f6ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f6f0:	78fb      	ldrb	r3, [r7, #3]
 800f6f2:	b2db      	uxtb	r3, r3
 800f6f4:	005b      	lsls	r3, r3, #1
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6fa:	78fb      	ldrb	r3, [r7, #3]
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f702:	2b80      	cmp	r3, #128	; 0x80
 800f704:	d0ef      	beq.n	800f6e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f706:	4b27      	ldr	r3, [pc, #156]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f1c3 0307 	rsb	r3, r3, #7
 800f70e:	2b04      	cmp	r3, #4
 800f710:	d00a      	beq.n	800f728 <xPortStartScheduler+0xb8>
	__asm volatile
 800f712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f716:	f383 8811 	msr	BASEPRI, r3
 800f71a:	f3bf 8f6f 	isb	sy
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	60bb      	str	r3, [r7, #8]
}
 800f724:	bf00      	nop
 800f726:	e7fe      	b.n	800f726 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f728:	4b1e      	ldr	r3, [pc, #120]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	021b      	lsls	r3, r3, #8
 800f72e:	4a1d      	ldr	r2, [pc, #116]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f730:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f732:	4b1c      	ldr	r3, [pc, #112]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f73a:	4a1a      	ldr	r2, [pc, #104]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f73c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	b2da      	uxtb	r2, r3
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f746:	4b18      	ldr	r3, [pc, #96]	; (800f7a8 <xPortStartScheduler+0x138>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	4a17      	ldr	r2, [pc, #92]	; (800f7a8 <xPortStartScheduler+0x138>)
 800f74c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f752:	4b15      	ldr	r3, [pc, #84]	; (800f7a8 <xPortStartScheduler+0x138>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	4a14      	ldr	r2, [pc, #80]	; (800f7a8 <xPortStartScheduler+0x138>)
 800f758:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f75c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f75e:	f000 f8dd 	bl	800f91c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f762:	4b12      	ldr	r3, [pc, #72]	; (800f7ac <xPortStartScheduler+0x13c>)
 800f764:	2200      	movs	r2, #0
 800f766:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f768:	f000 f8fc 	bl	800f964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f76c:	4b10      	ldr	r3, [pc, #64]	; (800f7b0 <xPortStartScheduler+0x140>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4a0f      	ldr	r2, [pc, #60]	; (800f7b0 <xPortStartScheduler+0x140>)
 800f772:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f776:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f778:	f7ff ff66 	bl	800f648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f77c:	f7ff f854 	bl	800e828 <vTaskSwitchContext>
	prvTaskExitError();
 800f780:	f7ff ff20 	bl	800f5c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f784:	2300      	movs	r3, #0
}
 800f786:	4618      	mov	r0, r3
 800f788:	3718      	adds	r7, #24
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	e000ed00 	.word	0xe000ed00
 800f794:	410fc271 	.word	0x410fc271
 800f798:	410fc270 	.word	0x410fc270
 800f79c:	e000e400 	.word	0xe000e400
 800f7a0:	20002790 	.word	0x20002790
 800f7a4:	20002794 	.word	0x20002794
 800f7a8:	e000ed20 	.word	0xe000ed20
 800f7ac:	20000010 	.word	0x20000010
 800f7b0:	e000ef34 	.word	0xe000ef34

0800f7b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
	__asm volatile
 800f7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7be:	f383 8811 	msr	BASEPRI, r3
 800f7c2:	f3bf 8f6f 	isb	sy
 800f7c6:	f3bf 8f4f 	dsb	sy
 800f7ca:	607b      	str	r3, [r7, #4]
}
 800f7cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f7ce:	4b0f      	ldr	r3, [pc, #60]	; (800f80c <vPortEnterCritical+0x58>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	4a0d      	ldr	r2, [pc, #52]	; (800f80c <vPortEnterCritical+0x58>)
 800f7d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f7d8:	4b0c      	ldr	r3, [pc, #48]	; (800f80c <vPortEnterCritical+0x58>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	d10f      	bne.n	800f800 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f7e0:	4b0b      	ldr	r3, [pc, #44]	; (800f810 <vPortEnterCritical+0x5c>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	b2db      	uxtb	r3, r3
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d00a      	beq.n	800f800 <vPortEnterCritical+0x4c>
	__asm volatile
 800f7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ee:	f383 8811 	msr	BASEPRI, r3
 800f7f2:	f3bf 8f6f 	isb	sy
 800f7f6:	f3bf 8f4f 	dsb	sy
 800f7fa:	603b      	str	r3, [r7, #0]
}
 800f7fc:	bf00      	nop
 800f7fe:	e7fe      	b.n	800f7fe <vPortEnterCritical+0x4a>
	}
}
 800f800:	bf00      	nop
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr
 800f80c:	20000010 	.word	0x20000010
 800f810:	e000ed04 	.word	0xe000ed04

0800f814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f81a:	4b12      	ldr	r3, [pc, #72]	; (800f864 <vPortExitCritical+0x50>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d10a      	bne.n	800f838 <vPortExitCritical+0x24>
	__asm volatile
 800f822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f826:	f383 8811 	msr	BASEPRI, r3
 800f82a:	f3bf 8f6f 	isb	sy
 800f82e:	f3bf 8f4f 	dsb	sy
 800f832:	607b      	str	r3, [r7, #4]
}
 800f834:	bf00      	nop
 800f836:	e7fe      	b.n	800f836 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f838:	4b0a      	ldr	r3, [pc, #40]	; (800f864 <vPortExitCritical+0x50>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	3b01      	subs	r3, #1
 800f83e:	4a09      	ldr	r2, [pc, #36]	; (800f864 <vPortExitCritical+0x50>)
 800f840:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f842:	4b08      	ldr	r3, [pc, #32]	; (800f864 <vPortExitCritical+0x50>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d105      	bne.n	800f856 <vPortExitCritical+0x42>
 800f84a:	2300      	movs	r3, #0
 800f84c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	f383 8811 	msr	BASEPRI, r3
}
 800f854:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f856:	bf00      	nop
 800f858:	370c      	adds	r7, #12
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr
 800f862:	bf00      	nop
 800f864:	20000010 	.word	0x20000010
	...

0800f870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f870:	f3ef 8009 	mrs	r0, PSP
 800f874:	f3bf 8f6f 	isb	sy
 800f878:	4b15      	ldr	r3, [pc, #84]	; (800f8d0 <pxCurrentTCBConst>)
 800f87a:	681a      	ldr	r2, [r3, #0]
 800f87c:	f01e 0f10 	tst.w	lr, #16
 800f880:	bf08      	it	eq
 800f882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f88a:	6010      	str	r0, [r2, #0]
 800f88c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f890:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f894:	f380 8811 	msr	BASEPRI, r0
 800f898:	f3bf 8f4f 	dsb	sy
 800f89c:	f3bf 8f6f 	isb	sy
 800f8a0:	f7fe ffc2 	bl	800e828 <vTaskSwitchContext>
 800f8a4:	f04f 0000 	mov.w	r0, #0
 800f8a8:	f380 8811 	msr	BASEPRI, r0
 800f8ac:	bc09      	pop	{r0, r3}
 800f8ae:	6819      	ldr	r1, [r3, #0]
 800f8b0:	6808      	ldr	r0, [r1, #0]
 800f8b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b6:	f01e 0f10 	tst.w	lr, #16
 800f8ba:	bf08      	it	eq
 800f8bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f8c0:	f380 8809 	msr	PSP, r0
 800f8c4:	f3bf 8f6f 	isb	sy
 800f8c8:	4770      	bx	lr
 800f8ca:	bf00      	nop
 800f8cc:	f3af 8000 	nop.w

0800f8d0 <pxCurrentTCBConst>:
 800f8d0:	20002164 	.word	0x20002164
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f8d4:	bf00      	nop
 800f8d6:	bf00      	nop

0800f8d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e2:	f383 8811 	msr	BASEPRI, r3
 800f8e6:	f3bf 8f6f 	isb	sy
 800f8ea:	f3bf 8f4f 	dsb	sy
 800f8ee:	607b      	str	r3, [r7, #4]
}
 800f8f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f8f2:	f7fe fedf 	bl	800e6b4 <xTaskIncrementTick>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d003      	beq.n	800f904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f8fc:	4b06      	ldr	r3, [pc, #24]	; (800f918 <xPortSysTickHandler+0x40>)
 800f8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f902:	601a      	str	r2, [r3, #0]
 800f904:	2300      	movs	r3, #0
 800f906:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	f383 8811 	msr	BASEPRI, r3
}
 800f90e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f910:	bf00      	nop
 800f912:	3708      	adds	r7, #8
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}
 800f918:	e000ed04 	.word	0xe000ed04

0800f91c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f91c:	b480      	push	{r7}
 800f91e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f920:	4b0b      	ldr	r3, [pc, #44]	; (800f950 <vPortSetupTimerInterrupt+0x34>)
 800f922:	2200      	movs	r2, #0
 800f924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f926:	4b0b      	ldr	r3, [pc, #44]	; (800f954 <vPortSetupTimerInterrupt+0x38>)
 800f928:	2200      	movs	r2, #0
 800f92a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f92c:	4b0a      	ldr	r3, [pc, #40]	; (800f958 <vPortSetupTimerInterrupt+0x3c>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a0a      	ldr	r2, [pc, #40]	; (800f95c <vPortSetupTimerInterrupt+0x40>)
 800f932:	fba2 2303 	umull	r2, r3, r2, r3
 800f936:	099b      	lsrs	r3, r3, #6
 800f938:	4a09      	ldr	r2, [pc, #36]	; (800f960 <vPortSetupTimerInterrupt+0x44>)
 800f93a:	3b01      	subs	r3, #1
 800f93c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f93e:	4b04      	ldr	r3, [pc, #16]	; (800f950 <vPortSetupTimerInterrupt+0x34>)
 800f940:	2207      	movs	r2, #7
 800f942:	601a      	str	r2, [r3, #0]
}
 800f944:	bf00      	nop
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr
 800f94e:	bf00      	nop
 800f950:	e000e010 	.word	0xe000e010
 800f954:	e000e018 	.word	0xe000e018
 800f958:	20000004 	.word	0x20000004
 800f95c:	10624dd3 	.word	0x10624dd3
 800f960:	e000e014 	.word	0xe000e014

0800f964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f964:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f974 <vPortEnableVFP+0x10>
 800f968:	6801      	ldr	r1, [r0, #0]
 800f96a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f96e:	6001      	str	r1, [r0, #0]
 800f970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f972:	bf00      	nop
 800f974:	e000ed88 	.word	0xe000ed88

0800f978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f978:	b480      	push	{r7}
 800f97a:	b085      	sub	sp, #20
 800f97c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f97e:	f3ef 8305 	mrs	r3, IPSR
 800f982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2b0f      	cmp	r3, #15
 800f988:	d914      	bls.n	800f9b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f98a:	4a17      	ldr	r2, [pc, #92]	; (800f9e8 <vPortValidateInterruptPriority+0x70>)
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	4413      	add	r3, r2
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f994:	4b15      	ldr	r3, [pc, #84]	; (800f9ec <vPortValidateInterruptPriority+0x74>)
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	7afa      	ldrb	r2, [r7, #11]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d20a      	bcs.n	800f9b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a2:	f383 8811 	msr	BASEPRI, r3
 800f9a6:	f3bf 8f6f 	isb	sy
 800f9aa:	f3bf 8f4f 	dsb	sy
 800f9ae:	607b      	str	r3, [r7, #4]
}
 800f9b0:	bf00      	nop
 800f9b2:	e7fe      	b.n	800f9b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f9b4:	4b0e      	ldr	r3, [pc, #56]	; (800f9f0 <vPortValidateInterruptPriority+0x78>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f9bc:	4b0d      	ldr	r3, [pc, #52]	; (800f9f4 <vPortValidateInterruptPriority+0x7c>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d90a      	bls.n	800f9da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c8:	f383 8811 	msr	BASEPRI, r3
 800f9cc:	f3bf 8f6f 	isb	sy
 800f9d0:	f3bf 8f4f 	dsb	sy
 800f9d4:	603b      	str	r3, [r7, #0]
}
 800f9d6:	bf00      	nop
 800f9d8:	e7fe      	b.n	800f9d8 <vPortValidateInterruptPriority+0x60>
	}
 800f9da:	bf00      	nop
 800f9dc:	3714      	adds	r7, #20
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr
 800f9e6:	bf00      	nop
 800f9e8:	e000e3f0 	.word	0xe000e3f0
 800f9ec:	20002790 	.word	0x20002790
 800f9f0:	e000ed0c 	.word	0xe000ed0c
 800f9f4:	20002794 	.word	0x20002794

0800f9f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b08a      	sub	sp, #40	; 0x28
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fa00:	2300      	movs	r3, #0
 800fa02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fa04:	f7fe fd9a 	bl	800e53c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fa08:	4b5b      	ldr	r3, [pc, #364]	; (800fb78 <pvPortMalloc+0x180>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d101      	bne.n	800fa14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fa10:	f000 f920 	bl	800fc54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fa14:	4b59      	ldr	r3, [pc, #356]	; (800fb7c <pvPortMalloc+0x184>)
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	4013      	ands	r3, r2
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	f040 8093 	bne.w	800fb48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d01d      	beq.n	800fa64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fa28:	2208      	movs	r2, #8
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	4413      	add	r3, r2
 800fa2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f003 0307 	and.w	r3, r3, #7
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d014      	beq.n	800fa64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f023 0307 	bic.w	r3, r3, #7
 800fa40:	3308      	adds	r3, #8
 800fa42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f003 0307 	and.w	r3, r3, #7
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d00a      	beq.n	800fa64 <pvPortMalloc+0x6c>
	__asm volatile
 800fa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa52:	f383 8811 	msr	BASEPRI, r3
 800fa56:	f3bf 8f6f 	isb	sy
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	617b      	str	r3, [r7, #20]
}
 800fa60:	bf00      	nop
 800fa62:	e7fe      	b.n	800fa62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d06e      	beq.n	800fb48 <pvPortMalloc+0x150>
 800fa6a:	4b45      	ldr	r3, [pc, #276]	; (800fb80 <pvPortMalloc+0x188>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d869      	bhi.n	800fb48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fa74:	4b43      	ldr	r3, [pc, #268]	; (800fb84 <pvPortMalloc+0x18c>)
 800fa76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fa78:	4b42      	ldr	r3, [pc, #264]	; (800fb84 <pvPortMalloc+0x18c>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa7e:	e004      	b.n	800fa8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	687a      	ldr	r2, [r7, #4]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d903      	bls.n	800fa9c <pvPortMalloc+0xa4>
 800fa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d1f1      	bne.n	800fa80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fa9c:	4b36      	ldr	r3, [pc, #216]	; (800fb78 <pvPortMalloc+0x180>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d050      	beq.n	800fb48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800faa6:	6a3b      	ldr	r3, [r7, #32]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	2208      	movs	r2, #8
 800faac:	4413      	add	r3, r2
 800faae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab2:	681a      	ldr	r2, [r3, #0]
 800fab4:	6a3b      	ldr	r3, [r7, #32]
 800fab6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faba:	685a      	ldr	r2, [r3, #4]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	1ad2      	subs	r2, r2, r3
 800fac0:	2308      	movs	r3, #8
 800fac2:	005b      	lsls	r3, r3, #1
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d91f      	bls.n	800fb08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	4413      	add	r3, r2
 800face:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fad0:	69bb      	ldr	r3, [r7, #24]
 800fad2:	f003 0307 	and.w	r3, r3, #7
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d00a      	beq.n	800faf0 <pvPortMalloc+0xf8>
	__asm volatile
 800fada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fade:	f383 8811 	msr	BASEPRI, r3
 800fae2:	f3bf 8f6f 	isb	sy
 800fae6:	f3bf 8f4f 	dsb	sy
 800faea:	613b      	str	r3, [r7, #16]
}
 800faec:	bf00      	nop
 800faee:	e7fe      	b.n	800faee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800faf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf2:	685a      	ldr	r2, [r3, #4]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	1ad2      	subs	r2, r2, r3
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafe:	687a      	ldr	r2, [r7, #4]
 800fb00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fb02:	69b8      	ldr	r0, [r7, #24]
 800fb04:	f000 f908 	bl	800fd18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb08:	4b1d      	ldr	r3, [pc, #116]	; (800fb80 <pvPortMalloc+0x188>)
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	4a1b      	ldr	r2, [pc, #108]	; (800fb80 <pvPortMalloc+0x188>)
 800fb14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb16:	4b1a      	ldr	r3, [pc, #104]	; (800fb80 <pvPortMalloc+0x188>)
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	4b1b      	ldr	r3, [pc, #108]	; (800fb88 <pvPortMalloc+0x190>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d203      	bcs.n	800fb2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fb22:	4b17      	ldr	r3, [pc, #92]	; (800fb80 <pvPortMalloc+0x188>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	4a18      	ldr	r2, [pc, #96]	; (800fb88 <pvPortMalloc+0x190>)
 800fb28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2c:	685a      	ldr	r2, [r3, #4]
 800fb2e:	4b13      	ldr	r3, [pc, #76]	; (800fb7c <pvPortMalloc+0x184>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	431a      	orrs	r2, r3
 800fb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fb3e:	4b13      	ldr	r3, [pc, #76]	; (800fb8c <pvPortMalloc+0x194>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	3301      	adds	r3, #1
 800fb44:	4a11      	ldr	r2, [pc, #68]	; (800fb8c <pvPortMalloc+0x194>)
 800fb46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fb48:	f7fe fd06 	bl	800e558 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	f003 0307 	and.w	r3, r3, #7
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d00a      	beq.n	800fb6c <pvPortMalloc+0x174>
	__asm volatile
 800fb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5a:	f383 8811 	msr	BASEPRI, r3
 800fb5e:	f3bf 8f6f 	isb	sy
 800fb62:	f3bf 8f4f 	dsb	sy
 800fb66:	60fb      	str	r3, [r7, #12]
}
 800fb68:	bf00      	nop
 800fb6a:	e7fe      	b.n	800fb6a <pvPortMalloc+0x172>
	return pvReturn;
 800fb6c:	69fb      	ldr	r3, [r7, #28]
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3728      	adds	r7, #40	; 0x28
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	200063a0 	.word	0x200063a0
 800fb7c:	200063b4 	.word	0x200063b4
 800fb80:	200063a4 	.word	0x200063a4
 800fb84:	20006398 	.word	0x20006398
 800fb88:	200063a8 	.word	0x200063a8
 800fb8c:	200063ac 	.word	0x200063ac

0800fb90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b086      	sub	sp, #24
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d04d      	beq.n	800fc3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fba2:	2308      	movs	r3, #8
 800fba4:	425b      	negs	r3, r3
 800fba6:	697a      	ldr	r2, [r7, #20]
 800fba8:	4413      	add	r3, r2
 800fbaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	685a      	ldr	r2, [r3, #4]
 800fbb4:	4b24      	ldr	r3, [pc, #144]	; (800fc48 <vPortFree+0xb8>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	4013      	ands	r3, r2
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d10a      	bne.n	800fbd4 <vPortFree+0x44>
	__asm volatile
 800fbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc2:	f383 8811 	msr	BASEPRI, r3
 800fbc6:	f3bf 8f6f 	isb	sy
 800fbca:	f3bf 8f4f 	dsb	sy
 800fbce:	60fb      	str	r3, [r7, #12]
}
 800fbd0:	bf00      	nop
 800fbd2:	e7fe      	b.n	800fbd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d00a      	beq.n	800fbf2 <vPortFree+0x62>
	__asm volatile
 800fbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe0:	f383 8811 	msr	BASEPRI, r3
 800fbe4:	f3bf 8f6f 	isb	sy
 800fbe8:	f3bf 8f4f 	dsb	sy
 800fbec:	60bb      	str	r3, [r7, #8]
}
 800fbee:	bf00      	nop
 800fbf0:	e7fe      	b.n	800fbf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	685a      	ldr	r2, [r3, #4]
 800fbf6:	4b14      	ldr	r3, [pc, #80]	; (800fc48 <vPortFree+0xb8>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	4013      	ands	r3, r2
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d01e      	beq.n	800fc3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d11a      	bne.n	800fc3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	685a      	ldr	r2, [r3, #4]
 800fc0c:	4b0e      	ldr	r3, [pc, #56]	; (800fc48 <vPortFree+0xb8>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	43db      	mvns	r3, r3
 800fc12:	401a      	ands	r2, r3
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fc18:	f7fe fc90 	bl	800e53c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	685a      	ldr	r2, [r3, #4]
 800fc20:	4b0a      	ldr	r3, [pc, #40]	; (800fc4c <vPortFree+0xbc>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	4413      	add	r3, r2
 800fc26:	4a09      	ldr	r2, [pc, #36]	; (800fc4c <vPortFree+0xbc>)
 800fc28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fc2a:	6938      	ldr	r0, [r7, #16]
 800fc2c:	f000 f874 	bl	800fd18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fc30:	4b07      	ldr	r3, [pc, #28]	; (800fc50 <vPortFree+0xc0>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	3301      	adds	r3, #1
 800fc36:	4a06      	ldr	r2, [pc, #24]	; (800fc50 <vPortFree+0xc0>)
 800fc38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fc3a:	f7fe fc8d 	bl	800e558 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fc3e:	bf00      	nop
 800fc40:	3718      	adds	r7, #24
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
 800fc46:	bf00      	nop
 800fc48:	200063b4 	.word	0x200063b4
 800fc4c:	200063a4 	.word	0x200063a4
 800fc50:	200063b0 	.word	0x200063b0

0800fc54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fc54:	b480      	push	{r7}
 800fc56:	b085      	sub	sp, #20
 800fc58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fc5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fc5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fc60:	4b27      	ldr	r3, [pc, #156]	; (800fd00 <prvHeapInit+0xac>)
 800fc62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f003 0307 	and.w	r3, r3, #7
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d00c      	beq.n	800fc88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	3307      	adds	r3, #7
 800fc72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	f023 0307 	bic.w	r3, r3, #7
 800fc7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fc7c:	68ba      	ldr	r2, [r7, #8]
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	1ad3      	subs	r3, r2, r3
 800fc82:	4a1f      	ldr	r2, [pc, #124]	; (800fd00 <prvHeapInit+0xac>)
 800fc84:	4413      	add	r3, r2
 800fc86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fc8c:	4a1d      	ldr	r2, [pc, #116]	; (800fd04 <prvHeapInit+0xb0>)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fc92:	4b1c      	ldr	r3, [pc, #112]	; (800fd04 <prvHeapInit+0xb0>)
 800fc94:	2200      	movs	r2, #0
 800fc96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	68ba      	ldr	r2, [r7, #8]
 800fc9c:	4413      	add	r3, r2
 800fc9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fca0:	2208      	movs	r2, #8
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	1a9b      	subs	r3, r3, r2
 800fca6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f023 0307 	bic.w	r3, r3, #7
 800fcae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	4a15      	ldr	r2, [pc, #84]	; (800fd08 <prvHeapInit+0xb4>)
 800fcb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fcb6:	4b14      	ldr	r3, [pc, #80]	; (800fd08 <prvHeapInit+0xb4>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fcbe:	4b12      	ldr	r3, [pc, #72]	; (800fd08 <prvHeapInit+0xb4>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	68fa      	ldr	r2, [r7, #12]
 800fcce:	1ad2      	subs	r2, r2, r3
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fcd4:	4b0c      	ldr	r3, [pc, #48]	; (800fd08 <prvHeapInit+0xb4>)
 800fcd6:	681a      	ldr	r2, [r3, #0]
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	4a0a      	ldr	r2, [pc, #40]	; (800fd0c <prvHeapInit+0xb8>)
 800fce2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	685b      	ldr	r3, [r3, #4]
 800fce8:	4a09      	ldr	r2, [pc, #36]	; (800fd10 <prvHeapInit+0xbc>)
 800fcea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fcec:	4b09      	ldr	r3, [pc, #36]	; (800fd14 <prvHeapInit+0xc0>)
 800fcee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fcf2:	601a      	str	r2, [r3, #0]
}
 800fcf4:	bf00      	nop
 800fcf6:	3714      	adds	r7, #20
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfe:	4770      	bx	lr
 800fd00:	20002798 	.word	0x20002798
 800fd04:	20006398 	.word	0x20006398
 800fd08:	200063a0 	.word	0x200063a0
 800fd0c:	200063a8 	.word	0x200063a8
 800fd10:	200063a4 	.word	0x200063a4
 800fd14:	200063b4 	.word	0x200063b4

0800fd18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b085      	sub	sp, #20
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fd20:	4b28      	ldr	r3, [pc, #160]	; (800fdc4 <prvInsertBlockIntoFreeList+0xac>)
 800fd22:	60fb      	str	r3, [r7, #12]
 800fd24:	e002      	b.n	800fd2c <prvInsertBlockIntoFreeList+0x14>
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	60fb      	str	r3, [r7, #12]
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	687a      	ldr	r2, [r7, #4]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d8f7      	bhi.n	800fd26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	68ba      	ldr	r2, [r7, #8]
 800fd40:	4413      	add	r3, r2
 800fd42:	687a      	ldr	r2, [r7, #4]
 800fd44:	429a      	cmp	r2, r3
 800fd46:	d108      	bne.n	800fd5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	685a      	ldr	r2, [r3, #4]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	441a      	add	r2, r3
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	68ba      	ldr	r2, [r7, #8]
 800fd64:	441a      	add	r2, r3
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d118      	bne.n	800fda0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681a      	ldr	r2, [r3, #0]
 800fd72:	4b15      	ldr	r3, [pc, #84]	; (800fdc8 <prvInsertBlockIntoFreeList+0xb0>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d00d      	beq.n	800fd96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	685a      	ldr	r2, [r3, #4]
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	685b      	ldr	r3, [r3, #4]
 800fd84:	441a      	add	r2, r3
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	681a      	ldr	r2, [r3, #0]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	601a      	str	r2, [r3, #0]
 800fd94:	e008      	b.n	800fda8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fd96:	4b0c      	ldr	r3, [pc, #48]	; (800fdc8 <prvInsertBlockIntoFreeList+0xb0>)
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	601a      	str	r2, [r3, #0]
 800fd9e:	e003      	b.n	800fda8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681a      	ldr	r2, [r3, #0]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fda8:	68fa      	ldr	r2, [r7, #12]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d002      	beq.n	800fdb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fdb6:	bf00      	nop
 800fdb8:	3714      	adds	r7, #20
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc0:	4770      	bx	lr
 800fdc2:	bf00      	nop
 800fdc4:	20006398 	.word	0x20006398
 800fdc8:	200063a0 	.word	0x200063a0

0800fdcc <__errno>:
 800fdcc:	4b01      	ldr	r3, [pc, #4]	; (800fdd4 <__errno+0x8>)
 800fdce:	6818      	ldr	r0, [r3, #0]
 800fdd0:	4770      	bx	lr
 800fdd2:	bf00      	nop
 800fdd4:	20000014 	.word	0x20000014

0800fdd8 <__libc_init_array>:
 800fdd8:	b570      	push	{r4, r5, r6, lr}
 800fdda:	4d0d      	ldr	r5, [pc, #52]	; (800fe10 <__libc_init_array+0x38>)
 800fddc:	4c0d      	ldr	r4, [pc, #52]	; (800fe14 <__libc_init_array+0x3c>)
 800fdde:	1b64      	subs	r4, r4, r5
 800fde0:	10a4      	asrs	r4, r4, #2
 800fde2:	2600      	movs	r6, #0
 800fde4:	42a6      	cmp	r6, r4
 800fde6:	d109      	bne.n	800fdfc <__libc_init_array+0x24>
 800fde8:	4d0b      	ldr	r5, [pc, #44]	; (800fe18 <__libc_init_array+0x40>)
 800fdea:	4c0c      	ldr	r4, [pc, #48]	; (800fe1c <__libc_init_array+0x44>)
 800fdec:	f004 fc90 	bl	8014710 <_init>
 800fdf0:	1b64      	subs	r4, r4, r5
 800fdf2:	10a4      	asrs	r4, r4, #2
 800fdf4:	2600      	movs	r6, #0
 800fdf6:	42a6      	cmp	r6, r4
 800fdf8:	d105      	bne.n	800fe06 <__libc_init_array+0x2e>
 800fdfa:	bd70      	pop	{r4, r5, r6, pc}
 800fdfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe00:	4798      	blx	r3
 800fe02:	3601      	adds	r6, #1
 800fe04:	e7ee      	b.n	800fde4 <__libc_init_array+0xc>
 800fe06:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe0a:	4798      	blx	r3
 800fe0c:	3601      	adds	r6, #1
 800fe0e:	e7f2      	b.n	800fdf6 <__libc_init_array+0x1e>
 800fe10:	080157b4 	.word	0x080157b4
 800fe14:	080157b4 	.word	0x080157b4
 800fe18:	080157b4 	.word	0x080157b4
 800fe1c:	080157b8 	.word	0x080157b8

0800fe20 <memcpy>:
 800fe20:	440a      	add	r2, r1
 800fe22:	4291      	cmp	r1, r2
 800fe24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fe28:	d100      	bne.n	800fe2c <memcpy+0xc>
 800fe2a:	4770      	bx	lr
 800fe2c:	b510      	push	{r4, lr}
 800fe2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe36:	4291      	cmp	r1, r2
 800fe38:	d1f9      	bne.n	800fe2e <memcpy+0xe>
 800fe3a:	bd10      	pop	{r4, pc}

0800fe3c <memset>:
 800fe3c:	4402      	add	r2, r0
 800fe3e:	4603      	mov	r3, r0
 800fe40:	4293      	cmp	r3, r2
 800fe42:	d100      	bne.n	800fe46 <memset+0xa>
 800fe44:	4770      	bx	lr
 800fe46:	f803 1b01 	strb.w	r1, [r3], #1
 800fe4a:	e7f9      	b.n	800fe40 <memset+0x4>

0800fe4c <__cvt>:
 800fe4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe50:	ec55 4b10 	vmov	r4, r5, d0
 800fe54:	2d00      	cmp	r5, #0
 800fe56:	460e      	mov	r6, r1
 800fe58:	4619      	mov	r1, r3
 800fe5a:	462b      	mov	r3, r5
 800fe5c:	bfbb      	ittet	lt
 800fe5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fe62:	461d      	movlt	r5, r3
 800fe64:	2300      	movge	r3, #0
 800fe66:	232d      	movlt	r3, #45	; 0x2d
 800fe68:	700b      	strb	r3, [r1, #0]
 800fe6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fe70:	4691      	mov	r9, r2
 800fe72:	f023 0820 	bic.w	r8, r3, #32
 800fe76:	bfbc      	itt	lt
 800fe78:	4622      	movlt	r2, r4
 800fe7a:	4614      	movlt	r4, r2
 800fe7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fe80:	d005      	beq.n	800fe8e <__cvt+0x42>
 800fe82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fe86:	d100      	bne.n	800fe8a <__cvt+0x3e>
 800fe88:	3601      	adds	r6, #1
 800fe8a:	2102      	movs	r1, #2
 800fe8c:	e000      	b.n	800fe90 <__cvt+0x44>
 800fe8e:	2103      	movs	r1, #3
 800fe90:	ab03      	add	r3, sp, #12
 800fe92:	9301      	str	r3, [sp, #4]
 800fe94:	ab02      	add	r3, sp, #8
 800fe96:	9300      	str	r3, [sp, #0]
 800fe98:	ec45 4b10 	vmov	d0, r4, r5
 800fe9c:	4653      	mov	r3, sl
 800fe9e:	4632      	mov	r2, r6
 800fea0:	f001 fdae 	bl	8011a00 <_dtoa_r>
 800fea4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fea8:	4607      	mov	r7, r0
 800feaa:	d102      	bne.n	800feb2 <__cvt+0x66>
 800feac:	f019 0f01 	tst.w	r9, #1
 800feb0:	d022      	beq.n	800fef8 <__cvt+0xac>
 800feb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800feb6:	eb07 0906 	add.w	r9, r7, r6
 800feba:	d110      	bne.n	800fede <__cvt+0x92>
 800febc:	783b      	ldrb	r3, [r7, #0]
 800febe:	2b30      	cmp	r3, #48	; 0x30
 800fec0:	d10a      	bne.n	800fed8 <__cvt+0x8c>
 800fec2:	2200      	movs	r2, #0
 800fec4:	2300      	movs	r3, #0
 800fec6:	4620      	mov	r0, r4
 800fec8:	4629      	mov	r1, r5
 800feca:	f7f0 fdfd 	bl	8000ac8 <__aeabi_dcmpeq>
 800fece:	b918      	cbnz	r0, 800fed8 <__cvt+0x8c>
 800fed0:	f1c6 0601 	rsb	r6, r6, #1
 800fed4:	f8ca 6000 	str.w	r6, [sl]
 800fed8:	f8da 3000 	ldr.w	r3, [sl]
 800fedc:	4499      	add	r9, r3
 800fede:	2200      	movs	r2, #0
 800fee0:	2300      	movs	r3, #0
 800fee2:	4620      	mov	r0, r4
 800fee4:	4629      	mov	r1, r5
 800fee6:	f7f0 fdef 	bl	8000ac8 <__aeabi_dcmpeq>
 800feea:	b108      	cbz	r0, 800fef0 <__cvt+0xa4>
 800feec:	f8cd 900c 	str.w	r9, [sp, #12]
 800fef0:	2230      	movs	r2, #48	; 0x30
 800fef2:	9b03      	ldr	r3, [sp, #12]
 800fef4:	454b      	cmp	r3, r9
 800fef6:	d307      	bcc.n	800ff08 <__cvt+0xbc>
 800fef8:	9b03      	ldr	r3, [sp, #12]
 800fefa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fefc:	1bdb      	subs	r3, r3, r7
 800fefe:	4638      	mov	r0, r7
 800ff00:	6013      	str	r3, [r2, #0]
 800ff02:	b004      	add	sp, #16
 800ff04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff08:	1c59      	adds	r1, r3, #1
 800ff0a:	9103      	str	r1, [sp, #12]
 800ff0c:	701a      	strb	r2, [r3, #0]
 800ff0e:	e7f0      	b.n	800fef2 <__cvt+0xa6>

0800ff10 <__exponent>:
 800ff10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff12:	4603      	mov	r3, r0
 800ff14:	2900      	cmp	r1, #0
 800ff16:	bfb8      	it	lt
 800ff18:	4249      	neglt	r1, r1
 800ff1a:	f803 2b02 	strb.w	r2, [r3], #2
 800ff1e:	bfb4      	ite	lt
 800ff20:	222d      	movlt	r2, #45	; 0x2d
 800ff22:	222b      	movge	r2, #43	; 0x2b
 800ff24:	2909      	cmp	r1, #9
 800ff26:	7042      	strb	r2, [r0, #1]
 800ff28:	dd2a      	ble.n	800ff80 <__exponent+0x70>
 800ff2a:	f10d 0407 	add.w	r4, sp, #7
 800ff2e:	46a4      	mov	ip, r4
 800ff30:	270a      	movs	r7, #10
 800ff32:	46a6      	mov	lr, r4
 800ff34:	460a      	mov	r2, r1
 800ff36:	fb91 f6f7 	sdiv	r6, r1, r7
 800ff3a:	fb07 1516 	mls	r5, r7, r6, r1
 800ff3e:	3530      	adds	r5, #48	; 0x30
 800ff40:	2a63      	cmp	r2, #99	; 0x63
 800ff42:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ff46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ff4a:	4631      	mov	r1, r6
 800ff4c:	dcf1      	bgt.n	800ff32 <__exponent+0x22>
 800ff4e:	3130      	adds	r1, #48	; 0x30
 800ff50:	f1ae 0502 	sub.w	r5, lr, #2
 800ff54:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ff58:	1c44      	adds	r4, r0, #1
 800ff5a:	4629      	mov	r1, r5
 800ff5c:	4561      	cmp	r1, ip
 800ff5e:	d30a      	bcc.n	800ff76 <__exponent+0x66>
 800ff60:	f10d 0209 	add.w	r2, sp, #9
 800ff64:	eba2 020e 	sub.w	r2, r2, lr
 800ff68:	4565      	cmp	r5, ip
 800ff6a:	bf88      	it	hi
 800ff6c:	2200      	movhi	r2, #0
 800ff6e:	4413      	add	r3, r2
 800ff70:	1a18      	subs	r0, r3, r0
 800ff72:	b003      	add	sp, #12
 800ff74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ff7e:	e7ed      	b.n	800ff5c <__exponent+0x4c>
 800ff80:	2330      	movs	r3, #48	; 0x30
 800ff82:	3130      	adds	r1, #48	; 0x30
 800ff84:	7083      	strb	r3, [r0, #2]
 800ff86:	70c1      	strb	r1, [r0, #3]
 800ff88:	1d03      	adds	r3, r0, #4
 800ff8a:	e7f1      	b.n	800ff70 <__exponent+0x60>

0800ff8c <_printf_float>:
 800ff8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff90:	ed2d 8b02 	vpush	{d8}
 800ff94:	b08d      	sub	sp, #52	; 0x34
 800ff96:	460c      	mov	r4, r1
 800ff98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ff9c:	4616      	mov	r6, r2
 800ff9e:	461f      	mov	r7, r3
 800ffa0:	4605      	mov	r5, r0
 800ffa2:	f002 fe8b 	bl	8012cbc <_localeconv_r>
 800ffa6:	f8d0 a000 	ldr.w	sl, [r0]
 800ffaa:	4650      	mov	r0, sl
 800ffac:	f7f0 f910 	bl	80001d0 <strlen>
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	930a      	str	r3, [sp, #40]	; 0x28
 800ffb4:	6823      	ldr	r3, [r4, #0]
 800ffb6:	9305      	str	r3, [sp, #20]
 800ffb8:	f8d8 3000 	ldr.w	r3, [r8]
 800ffbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ffc0:	3307      	adds	r3, #7
 800ffc2:	f023 0307 	bic.w	r3, r3, #7
 800ffc6:	f103 0208 	add.w	r2, r3, #8
 800ffca:	f8c8 2000 	str.w	r2, [r8]
 800ffce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ffd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ffda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ffde:	9307      	str	r3, [sp, #28]
 800ffe0:	f8cd 8018 	str.w	r8, [sp, #24]
 800ffe4:	ee08 0a10 	vmov	s16, r0
 800ffe8:	4b9f      	ldr	r3, [pc, #636]	; (8010268 <_printf_float+0x2dc>)
 800ffea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ffee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fff2:	f7f0 fd9b 	bl	8000b2c <__aeabi_dcmpun>
 800fff6:	bb88      	cbnz	r0, 801005c <_printf_float+0xd0>
 800fff8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fffc:	4b9a      	ldr	r3, [pc, #616]	; (8010268 <_printf_float+0x2dc>)
 800fffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010002:	f7f0 fd75 	bl	8000af0 <__aeabi_dcmple>
 8010006:	bb48      	cbnz	r0, 801005c <_printf_float+0xd0>
 8010008:	2200      	movs	r2, #0
 801000a:	2300      	movs	r3, #0
 801000c:	4640      	mov	r0, r8
 801000e:	4649      	mov	r1, r9
 8010010:	f7f0 fd64 	bl	8000adc <__aeabi_dcmplt>
 8010014:	b110      	cbz	r0, 801001c <_printf_float+0x90>
 8010016:	232d      	movs	r3, #45	; 0x2d
 8010018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801001c:	4b93      	ldr	r3, [pc, #588]	; (801026c <_printf_float+0x2e0>)
 801001e:	4894      	ldr	r0, [pc, #592]	; (8010270 <_printf_float+0x2e4>)
 8010020:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010024:	bf94      	ite	ls
 8010026:	4698      	movls	r8, r3
 8010028:	4680      	movhi	r8, r0
 801002a:	2303      	movs	r3, #3
 801002c:	6123      	str	r3, [r4, #16]
 801002e:	9b05      	ldr	r3, [sp, #20]
 8010030:	f023 0204 	bic.w	r2, r3, #4
 8010034:	6022      	str	r2, [r4, #0]
 8010036:	f04f 0900 	mov.w	r9, #0
 801003a:	9700      	str	r7, [sp, #0]
 801003c:	4633      	mov	r3, r6
 801003e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010040:	4621      	mov	r1, r4
 8010042:	4628      	mov	r0, r5
 8010044:	f000 f9d8 	bl	80103f8 <_printf_common>
 8010048:	3001      	adds	r0, #1
 801004a:	f040 8090 	bne.w	801016e <_printf_float+0x1e2>
 801004e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010052:	b00d      	add	sp, #52	; 0x34
 8010054:	ecbd 8b02 	vpop	{d8}
 8010058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801005c:	4642      	mov	r2, r8
 801005e:	464b      	mov	r3, r9
 8010060:	4640      	mov	r0, r8
 8010062:	4649      	mov	r1, r9
 8010064:	f7f0 fd62 	bl	8000b2c <__aeabi_dcmpun>
 8010068:	b140      	cbz	r0, 801007c <_printf_float+0xf0>
 801006a:	464b      	mov	r3, r9
 801006c:	2b00      	cmp	r3, #0
 801006e:	bfbc      	itt	lt
 8010070:	232d      	movlt	r3, #45	; 0x2d
 8010072:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010076:	487f      	ldr	r0, [pc, #508]	; (8010274 <_printf_float+0x2e8>)
 8010078:	4b7f      	ldr	r3, [pc, #508]	; (8010278 <_printf_float+0x2ec>)
 801007a:	e7d1      	b.n	8010020 <_printf_float+0x94>
 801007c:	6863      	ldr	r3, [r4, #4]
 801007e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010082:	9206      	str	r2, [sp, #24]
 8010084:	1c5a      	adds	r2, r3, #1
 8010086:	d13f      	bne.n	8010108 <_printf_float+0x17c>
 8010088:	2306      	movs	r3, #6
 801008a:	6063      	str	r3, [r4, #4]
 801008c:	9b05      	ldr	r3, [sp, #20]
 801008e:	6861      	ldr	r1, [r4, #4]
 8010090:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010094:	2300      	movs	r3, #0
 8010096:	9303      	str	r3, [sp, #12]
 8010098:	ab0a      	add	r3, sp, #40	; 0x28
 801009a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801009e:	ab09      	add	r3, sp, #36	; 0x24
 80100a0:	ec49 8b10 	vmov	d0, r8, r9
 80100a4:	9300      	str	r3, [sp, #0]
 80100a6:	6022      	str	r2, [r4, #0]
 80100a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80100ac:	4628      	mov	r0, r5
 80100ae:	f7ff fecd 	bl	800fe4c <__cvt>
 80100b2:	9b06      	ldr	r3, [sp, #24]
 80100b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100b6:	2b47      	cmp	r3, #71	; 0x47
 80100b8:	4680      	mov	r8, r0
 80100ba:	d108      	bne.n	80100ce <_printf_float+0x142>
 80100bc:	1cc8      	adds	r0, r1, #3
 80100be:	db02      	blt.n	80100c6 <_printf_float+0x13a>
 80100c0:	6863      	ldr	r3, [r4, #4]
 80100c2:	4299      	cmp	r1, r3
 80100c4:	dd41      	ble.n	801014a <_printf_float+0x1be>
 80100c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80100ca:	fa5f fb8b 	uxtb.w	fp, fp
 80100ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80100d2:	d820      	bhi.n	8010116 <_printf_float+0x18a>
 80100d4:	3901      	subs	r1, #1
 80100d6:	465a      	mov	r2, fp
 80100d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80100dc:	9109      	str	r1, [sp, #36]	; 0x24
 80100de:	f7ff ff17 	bl	800ff10 <__exponent>
 80100e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100e4:	1813      	adds	r3, r2, r0
 80100e6:	2a01      	cmp	r2, #1
 80100e8:	4681      	mov	r9, r0
 80100ea:	6123      	str	r3, [r4, #16]
 80100ec:	dc02      	bgt.n	80100f4 <_printf_float+0x168>
 80100ee:	6822      	ldr	r2, [r4, #0]
 80100f0:	07d2      	lsls	r2, r2, #31
 80100f2:	d501      	bpl.n	80100f8 <_printf_float+0x16c>
 80100f4:	3301      	adds	r3, #1
 80100f6:	6123      	str	r3, [r4, #16]
 80100f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d09c      	beq.n	801003a <_printf_float+0xae>
 8010100:	232d      	movs	r3, #45	; 0x2d
 8010102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010106:	e798      	b.n	801003a <_printf_float+0xae>
 8010108:	9a06      	ldr	r2, [sp, #24]
 801010a:	2a47      	cmp	r2, #71	; 0x47
 801010c:	d1be      	bne.n	801008c <_printf_float+0x100>
 801010e:	2b00      	cmp	r3, #0
 8010110:	d1bc      	bne.n	801008c <_printf_float+0x100>
 8010112:	2301      	movs	r3, #1
 8010114:	e7b9      	b.n	801008a <_printf_float+0xfe>
 8010116:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801011a:	d118      	bne.n	801014e <_printf_float+0x1c2>
 801011c:	2900      	cmp	r1, #0
 801011e:	6863      	ldr	r3, [r4, #4]
 8010120:	dd0b      	ble.n	801013a <_printf_float+0x1ae>
 8010122:	6121      	str	r1, [r4, #16]
 8010124:	b913      	cbnz	r3, 801012c <_printf_float+0x1a0>
 8010126:	6822      	ldr	r2, [r4, #0]
 8010128:	07d0      	lsls	r0, r2, #31
 801012a:	d502      	bpl.n	8010132 <_printf_float+0x1a6>
 801012c:	3301      	adds	r3, #1
 801012e:	440b      	add	r3, r1
 8010130:	6123      	str	r3, [r4, #16]
 8010132:	65a1      	str	r1, [r4, #88]	; 0x58
 8010134:	f04f 0900 	mov.w	r9, #0
 8010138:	e7de      	b.n	80100f8 <_printf_float+0x16c>
 801013a:	b913      	cbnz	r3, 8010142 <_printf_float+0x1b6>
 801013c:	6822      	ldr	r2, [r4, #0]
 801013e:	07d2      	lsls	r2, r2, #31
 8010140:	d501      	bpl.n	8010146 <_printf_float+0x1ba>
 8010142:	3302      	adds	r3, #2
 8010144:	e7f4      	b.n	8010130 <_printf_float+0x1a4>
 8010146:	2301      	movs	r3, #1
 8010148:	e7f2      	b.n	8010130 <_printf_float+0x1a4>
 801014a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801014e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010150:	4299      	cmp	r1, r3
 8010152:	db05      	blt.n	8010160 <_printf_float+0x1d4>
 8010154:	6823      	ldr	r3, [r4, #0]
 8010156:	6121      	str	r1, [r4, #16]
 8010158:	07d8      	lsls	r0, r3, #31
 801015a:	d5ea      	bpl.n	8010132 <_printf_float+0x1a6>
 801015c:	1c4b      	adds	r3, r1, #1
 801015e:	e7e7      	b.n	8010130 <_printf_float+0x1a4>
 8010160:	2900      	cmp	r1, #0
 8010162:	bfd4      	ite	le
 8010164:	f1c1 0202 	rsble	r2, r1, #2
 8010168:	2201      	movgt	r2, #1
 801016a:	4413      	add	r3, r2
 801016c:	e7e0      	b.n	8010130 <_printf_float+0x1a4>
 801016e:	6823      	ldr	r3, [r4, #0]
 8010170:	055a      	lsls	r2, r3, #21
 8010172:	d407      	bmi.n	8010184 <_printf_float+0x1f8>
 8010174:	6923      	ldr	r3, [r4, #16]
 8010176:	4642      	mov	r2, r8
 8010178:	4631      	mov	r1, r6
 801017a:	4628      	mov	r0, r5
 801017c:	47b8      	blx	r7
 801017e:	3001      	adds	r0, #1
 8010180:	d12c      	bne.n	80101dc <_printf_float+0x250>
 8010182:	e764      	b.n	801004e <_printf_float+0xc2>
 8010184:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010188:	f240 80e0 	bls.w	801034c <_printf_float+0x3c0>
 801018c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010190:	2200      	movs	r2, #0
 8010192:	2300      	movs	r3, #0
 8010194:	f7f0 fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 8010198:	2800      	cmp	r0, #0
 801019a:	d034      	beq.n	8010206 <_printf_float+0x27a>
 801019c:	4a37      	ldr	r2, [pc, #220]	; (801027c <_printf_float+0x2f0>)
 801019e:	2301      	movs	r3, #1
 80101a0:	4631      	mov	r1, r6
 80101a2:	4628      	mov	r0, r5
 80101a4:	47b8      	blx	r7
 80101a6:	3001      	adds	r0, #1
 80101a8:	f43f af51 	beq.w	801004e <_printf_float+0xc2>
 80101ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80101b0:	429a      	cmp	r2, r3
 80101b2:	db02      	blt.n	80101ba <_printf_float+0x22e>
 80101b4:	6823      	ldr	r3, [r4, #0]
 80101b6:	07d8      	lsls	r0, r3, #31
 80101b8:	d510      	bpl.n	80101dc <_printf_float+0x250>
 80101ba:	ee18 3a10 	vmov	r3, s16
 80101be:	4652      	mov	r2, sl
 80101c0:	4631      	mov	r1, r6
 80101c2:	4628      	mov	r0, r5
 80101c4:	47b8      	blx	r7
 80101c6:	3001      	adds	r0, #1
 80101c8:	f43f af41 	beq.w	801004e <_printf_float+0xc2>
 80101cc:	f04f 0800 	mov.w	r8, #0
 80101d0:	f104 091a 	add.w	r9, r4, #26
 80101d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101d6:	3b01      	subs	r3, #1
 80101d8:	4543      	cmp	r3, r8
 80101da:	dc09      	bgt.n	80101f0 <_printf_float+0x264>
 80101dc:	6823      	ldr	r3, [r4, #0]
 80101de:	079b      	lsls	r3, r3, #30
 80101e0:	f100 8105 	bmi.w	80103ee <_printf_float+0x462>
 80101e4:	68e0      	ldr	r0, [r4, #12]
 80101e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101e8:	4298      	cmp	r0, r3
 80101ea:	bfb8      	it	lt
 80101ec:	4618      	movlt	r0, r3
 80101ee:	e730      	b.n	8010052 <_printf_float+0xc6>
 80101f0:	2301      	movs	r3, #1
 80101f2:	464a      	mov	r2, r9
 80101f4:	4631      	mov	r1, r6
 80101f6:	4628      	mov	r0, r5
 80101f8:	47b8      	blx	r7
 80101fa:	3001      	adds	r0, #1
 80101fc:	f43f af27 	beq.w	801004e <_printf_float+0xc2>
 8010200:	f108 0801 	add.w	r8, r8, #1
 8010204:	e7e6      	b.n	80101d4 <_printf_float+0x248>
 8010206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010208:	2b00      	cmp	r3, #0
 801020a:	dc39      	bgt.n	8010280 <_printf_float+0x2f4>
 801020c:	4a1b      	ldr	r2, [pc, #108]	; (801027c <_printf_float+0x2f0>)
 801020e:	2301      	movs	r3, #1
 8010210:	4631      	mov	r1, r6
 8010212:	4628      	mov	r0, r5
 8010214:	47b8      	blx	r7
 8010216:	3001      	adds	r0, #1
 8010218:	f43f af19 	beq.w	801004e <_printf_float+0xc2>
 801021c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010220:	4313      	orrs	r3, r2
 8010222:	d102      	bne.n	801022a <_printf_float+0x29e>
 8010224:	6823      	ldr	r3, [r4, #0]
 8010226:	07d9      	lsls	r1, r3, #31
 8010228:	d5d8      	bpl.n	80101dc <_printf_float+0x250>
 801022a:	ee18 3a10 	vmov	r3, s16
 801022e:	4652      	mov	r2, sl
 8010230:	4631      	mov	r1, r6
 8010232:	4628      	mov	r0, r5
 8010234:	47b8      	blx	r7
 8010236:	3001      	adds	r0, #1
 8010238:	f43f af09 	beq.w	801004e <_printf_float+0xc2>
 801023c:	f04f 0900 	mov.w	r9, #0
 8010240:	f104 0a1a 	add.w	sl, r4, #26
 8010244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010246:	425b      	negs	r3, r3
 8010248:	454b      	cmp	r3, r9
 801024a:	dc01      	bgt.n	8010250 <_printf_float+0x2c4>
 801024c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801024e:	e792      	b.n	8010176 <_printf_float+0x1ea>
 8010250:	2301      	movs	r3, #1
 8010252:	4652      	mov	r2, sl
 8010254:	4631      	mov	r1, r6
 8010256:	4628      	mov	r0, r5
 8010258:	47b8      	blx	r7
 801025a:	3001      	adds	r0, #1
 801025c:	f43f aef7 	beq.w	801004e <_printf_float+0xc2>
 8010260:	f109 0901 	add.w	r9, r9, #1
 8010264:	e7ee      	b.n	8010244 <_printf_float+0x2b8>
 8010266:	bf00      	nop
 8010268:	7fefffff 	.word	0x7fefffff
 801026c:	0801530c 	.word	0x0801530c
 8010270:	08015310 	.word	0x08015310
 8010274:	08015318 	.word	0x08015318
 8010278:	08015314 	.word	0x08015314
 801027c:	0801531c 	.word	0x0801531c
 8010280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010282:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010284:	429a      	cmp	r2, r3
 8010286:	bfa8      	it	ge
 8010288:	461a      	movge	r2, r3
 801028a:	2a00      	cmp	r2, #0
 801028c:	4691      	mov	r9, r2
 801028e:	dc37      	bgt.n	8010300 <_printf_float+0x374>
 8010290:	f04f 0b00 	mov.w	fp, #0
 8010294:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010298:	f104 021a 	add.w	r2, r4, #26
 801029c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801029e:	9305      	str	r3, [sp, #20]
 80102a0:	eba3 0309 	sub.w	r3, r3, r9
 80102a4:	455b      	cmp	r3, fp
 80102a6:	dc33      	bgt.n	8010310 <_printf_float+0x384>
 80102a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102ac:	429a      	cmp	r2, r3
 80102ae:	db3b      	blt.n	8010328 <_printf_float+0x39c>
 80102b0:	6823      	ldr	r3, [r4, #0]
 80102b2:	07da      	lsls	r2, r3, #31
 80102b4:	d438      	bmi.n	8010328 <_printf_float+0x39c>
 80102b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102b8:	9a05      	ldr	r2, [sp, #20]
 80102ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80102bc:	1a9a      	subs	r2, r3, r2
 80102be:	eba3 0901 	sub.w	r9, r3, r1
 80102c2:	4591      	cmp	r9, r2
 80102c4:	bfa8      	it	ge
 80102c6:	4691      	movge	r9, r2
 80102c8:	f1b9 0f00 	cmp.w	r9, #0
 80102cc:	dc35      	bgt.n	801033a <_printf_float+0x3ae>
 80102ce:	f04f 0800 	mov.w	r8, #0
 80102d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80102d6:	f104 0a1a 	add.w	sl, r4, #26
 80102da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102de:	1a9b      	subs	r3, r3, r2
 80102e0:	eba3 0309 	sub.w	r3, r3, r9
 80102e4:	4543      	cmp	r3, r8
 80102e6:	f77f af79 	ble.w	80101dc <_printf_float+0x250>
 80102ea:	2301      	movs	r3, #1
 80102ec:	4652      	mov	r2, sl
 80102ee:	4631      	mov	r1, r6
 80102f0:	4628      	mov	r0, r5
 80102f2:	47b8      	blx	r7
 80102f4:	3001      	adds	r0, #1
 80102f6:	f43f aeaa 	beq.w	801004e <_printf_float+0xc2>
 80102fa:	f108 0801 	add.w	r8, r8, #1
 80102fe:	e7ec      	b.n	80102da <_printf_float+0x34e>
 8010300:	4613      	mov	r3, r2
 8010302:	4631      	mov	r1, r6
 8010304:	4642      	mov	r2, r8
 8010306:	4628      	mov	r0, r5
 8010308:	47b8      	blx	r7
 801030a:	3001      	adds	r0, #1
 801030c:	d1c0      	bne.n	8010290 <_printf_float+0x304>
 801030e:	e69e      	b.n	801004e <_printf_float+0xc2>
 8010310:	2301      	movs	r3, #1
 8010312:	4631      	mov	r1, r6
 8010314:	4628      	mov	r0, r5
 8010316:	9205      	str	r2, [sp, #20]
 8010318:	47b8      	blx	r7
 801031a:	3001      	adds	r0, #1
 801031c:	f43f ae97 	beq.w	801004e <_printf_float+0xc2>
 8010320:	9a05      	ldr	r2, [sp, #20]
 8010322:	f10b 0b01 	add.w	fp, fp, #1
 8010326:	e7b9      	b.n	801029c <_printf_float+0x310>
 8010328:	ee18 3a10 	vmov	r3, s16
 801032c:	4652      	mov	r2, sl
 801032e:	4631      	mov	r1, r6
 8010330:	4628      	mov	r0, r5
 8010332:	47b8      	blx	r7
 8010334:	3001      	adds	r0, #1
 8010336:	d1be      	bne.n	80102b6 <_printf_float+0x32a>
 8010338:	e689      	b.n	801004e <_printf_float+0xc2>
 801033a:	9a05      	ldr	r2, [sp, #20]
 801033c:	464b      	mov	r3, r9
 801033e:	4442      	add	r2, r8
 8010340:	4631      	mov	r1, r6
 8010342:	4628      	mov	r0, r5
 8010344:	47b8      	blx	r7
 8010346:	3001      	adds	r0, #1
 8010348:	d1c1      	bne.n	80102ce <_printf_float+0x342>
 801034a:	e680      	b.n	801004e <_printf_float+0xc2>
 801034c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801034e:	2a01      	cmp	r2, #1
 8010350:	dc01      	bgt.n	8010356 <_printf_float+0x3ca>
 8010352:	07db      	lsls	r3, r3, #31
 8010354:	d538      	bpl.n	80103c8 <_printf_float+0x43c>
 8010356:	2301      	movs	r3, #1
 8010358:	4642      	mov	r2, r8
 801035a:	4631      	mov	r1, r6
 801035c:	4628      	mov	r0, r5
 801035e:	47b8      	blx	r7
 8010360:	3001      	adds	r0, #1
 8010362:	f43f ae74 	beq.w	801004e <_printf_float+0xc2>
 8010366:	ee18 3a10 	vmov	r3, s16
 801036a:	4652      	mov	r2, sl
 801036c:	4631      	mov	r1, r6
 801036e:	4628      	mov	r0, r5
 8010370:	47b8      	blx	r7
 8010372:	3001      	adds	r0, #1
 8010374:	f43f ae6b 	beq.w	801004e <_printf_float+0xc2>
 8010378:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801037c:	2200      	movs	r2, #0
 801037e:	2300      	movs	r3, #0
 8010380:	f7f0 fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 8010384:	b9d8      	cbnz	r0, 80103be <_printf_float+0x432>
 8010386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010388:	f108 0201 	add.w	r2, r8, #1
 801038c:	3b01      	subs	r3, #1
 801038e:	4631      	mov	r1, r6
 8010390:	4628      	mov	r0, r5
 8010392:	47b8      	blx	r7
 8010394:	3001      	adds	r0, #1
 8010396:	d10e      	bne.n	80103b6 <_printf_float+0x42a>
 8010398:	e659      	b.n	801004e <_printf_float+0xc2>
 801039a:	2301      	movs	r3, #1
 801039c:	4652      	mov	r2, sl
 801039e:	4631      	mov	r1, r6
 80103a0:	4628      	mov	r0, r5
 80103a2:	47b8      	blx	r7
 80103a4:	3001      	adds	r0, #1
 80103a6:	f43f ae52 	beq.w	801004e <_printf_float+0xc2>
 80103aa:	f108 0801 	add.w	r8, r8, #1
 80103ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103b0:	3b01      	subs	r3, #1
 80103b2:	4543      	cmp	r3, r8
 80103b4:	dcf1      	bgt.n	801039a <_printf_float+0x40e>
 80103b6:	464b      	mov	r3, r9
 80103b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80103bc:	e6dc      	b.n	8010178 <_printf_float+0x1ec>
 80103be:	f04f 0800 	mov.w	r8, #0
 80103c2:	f104 0a1a 	add.w	sl, r4, #26
 80103c6:	e7f2      	b.n	80103ae <_printf_float+0x422>
 80103c8:	2301      	movs	r3, #1
 80103ca:	4642      	mov	r2, r8
 80103cc:	e7df      	b.n	801038e <_printf_float+0x402>
 80103ce:	2301      	movs	r3, #1
 80103d0:	464a      	mov	r2, r9
 80103d2:	4631      	mov	r1, r6
 80103d4:	4628      	mov	r0, r5
 80103d6:	47b8      	blx	r7
 80103d8:	3001      	adds	r0, #1
 80103da:	f43f ae38 	beq.w	801004e <_printf_float+0xc2>
 80103de:	f108 0801 	add.w	r8, r8, #1
 80103e2:	68e3      	ldr	r3, [r4, #12]
 80103e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80103e6:	1a5b      	subs	r3, r3, r1
 80103e8:	4543      	cmp	r3, r8
 80103ea:	dcf0      	bgt.n	80103ce <_printf_float+0x442>
 80103ec:	e6fa      	b.n	80101e4 <_printf_float+0x258>
 80103ee:	f04f 0800 	mov.w	r8, #0
 80103f2:	f104 0919 	add.w	r9, r4, #25
 80103f6:	e7f4      	b.n	80103e2 <_printf_float+0x456>

080103f8 <_printf_common>:
 80103f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103fc:	4616      	mov	r6, r2
 80103fe:	4699      	mov	r9, r3
 8010400:	688a      	ldr	r2, [r1, #8]
 8010402:	690b      	ldr	r3, [r1, #16]
 8010404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010408:	4293      	cmp	r3, r2
 801040a:	bfb8      	it	lt
 801040c:	4613      	movlt	r3, r2
 801040e:	6033      	str	r3, [r6, #0]
 8010410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010414:	4607      	mov	r7, r0
 8010416:	460c      	mov	r4, r1
 8010418:	b10a      	cbz	r2, 801041e <_printf_common+0x26>
 801041a:	3301      	adds	r3, #1
 801041c:	6033      	str	r3, [r6, #0]
 801041e:	6823      	ldr	r3, [r4, #0]
 8010420:	0699      	lsls	r1, r3, #26
 8010422:	bf42      	ittt	mi
 8010424:	6833      	ldrmi	r3, [r6, #0]
 8010426:	3302      	addmi	r3, #2
 8010428:	6033      	strmi	r3, [r6, #0]
 801042a:	6825      	ldr	r5, [r4, #0]
 801042c:	f015 0506 	ands.w	r5, r5, #6
 8010430:	d106      	bne.n	8010440 <_printf_common+0x48>
 8010432:	f104 0a19 	add.w	sl, r4, #25
 8010436:	68e3      	ldr	r3, [r4, #12]
 8010438:	6832      	ldr	r2, [r6, #0]
 801043a:	1a9b      	subs	r3, r3, r2
 801043c:	42ab      	cmp	r3, r5
 801043e:	dc26      	bgt.n	801048e <_printf_common+0x96>
 8010440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010444:	1e13      	subs	r3, r2, #0
 8010446:	6822      	ldr	r2, [r4, #0]
 8010448:	bf18      	it	ne
 801044a:	2301      	movne	r3, #1
 801044c:	0692      	lsls	r2, r2, #26
 801044e:	d42b      	bmi.n	80104a8 <_printf_common+0xb0>
 8010450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010454:	4649      	mov	r1, r9
 8010456:	4638      	mov	r0, r7
 8010458:	47c0      	blx	r8
 801045a:	3001      	adds	r0, #1
 801045c:	d01e      	beq.n	801049c <_printf_common+0xa4>
 801045e:	6823      	ldr	r3, [r4, #0]
 8010460:	68e5      	ldr	r5, [r4, #12]
 8010462:	6832      	ldr	r2, [r6, #0]
 8010464:	f003 0306 	and.w	r3, r3, #6
 8010468:	2b04      	cmp	r3, #4
 801046a:	bf08      	it	eq
 801046c:	1aad      	subeq	r5, r5, r2
 801046e:	68a3      	ldr	r3, [r4, #8]
 8010470:	6922      	ldr	r2, [r4, #16]
 8010472:	bf0c      	ite	eq
 8010474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010478:	2500      	movne	r5, #0
 801047a:	4293      	cmp	r3, r2
 801047c:	bfc4      	itt	gt
 801047e:	1a9b      	subgt	r3, r3, r2
 8010480:	18ed      	addgt	r5, r5, r3
 8010482:	2600      	movs	r6, #0
 8010484:	341a      	adds	r4, #26
 8010486:	42b5      	cmp	r5, r6
 8010488:	d11a      	bne.n	80104c0 <_printf_common+0xc8>
 801048a:	2000      	movs	r0, #0
 801048c:	e008      	b.n	80104a0 <_printf_common+0xa8>
 801048e:	2301      	movs	r3, #1
 8010490:	4652      	mov	r2, sl
 8010492:	4649      	mov	r1, r9
 8010494:	4638      	mov	r0, r7
 8010496:	47c0      	blx	r8
 8010498:	3001      	adds	r0, #1
 801049a:	d103      	bne.n	80104a4 <_printf_common+0xac>
 801049c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104a4:	3501      	adds	r5, #1
 80104a6:	e7c6      	b.n	8010436 <_printf_common+0x3e>
 80104a8:	18e1      	adds	r1, r4, r3
 80104aa:	1c5a      	adds	r2, r3, #1
 80104ac:	2030      	movs	r0, #48	; 0x30
 80104ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80104b2:	4422      	add	r2, r4
 80104b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80104b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80104bc:	3302      	adds	r3, #2
 80104be:	e7c7      	b.n	8010450 <_printf_common+0x58>
 80104c0:	2301      	movs	r3, #1
 80104c2:	4622      	mov	r2, r4
 80104c4:	4649      	mov	r1, r9
 80104c6:	4638      	mov	r0, r7
 80104c8:	47c0      	blx	r8
 80104ca:	3001      	adds	r0, #1
 80104cc:	d0e6      	beq.n	801049c <_printf_common+0xa4>
 80104ce:	3601      	adds	r6, #1
 80104d0:	e7d9      	b.n	8010486 <_printf_common+0x8e>
	...

080104d4 <_printf_i>:
 80104d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104d8:	7e0f      	ldrb	r7, [r1, #24]
 80104da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80104dc:	2f78      	cmp	r7, #120	; 0x78
 80104de:	4691      	mov	r9, r2
 80104e0:	4680      	mov	r8, r0
 80104e2:	460c      	mov	r4, r1
 80104e4:	469a      	mov	sl, r3
 80104e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80104ea:	d807      	bhi.n	80104fc <_printf_i+0x28>
 80104ec:	2f62      	cmp	r7, #98	; 0x62
 80104ee:	d80a      	bhi.n	8010506 <_printf_i+0x32>
 80104f0:	2f00      	cmp	r7, #0
 80104f2:	f000 80d8 	beq.w	80106a6 <_printf_i+0x1d2>
 80104f6:	2f58      	cmp	r7, #88	; 0x58
 80104f8:	f000 80a3 	beq.w	8010642 <_printf_i+0x16e>
 80104fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010504:	e03a      	b.n	801057c <_printf_i+0xa8>
 8010506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801050a:	2b15      	cmp	r3, #21
 801050c:	d8f6      	bhi.n	80104fc <_printf_i+0x28>
 801050e:	a101      	add	r1, pc, #4	; (adr r1, 8010514 <_printf_i+0x40>)
 8010510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010514:	0801056d 	.word	0x0801056d
 8010518:	08010581 	.word	0x08010581
 801051c:	080104fd 	.word	0x080104fd
 8010520:	080104fd 	.word	0x080104fd
 8010524:	080104fd 	.word	0x080104fd
 8010528:	080104fd 	.word	0x080104fd
 801052c:	08010581 	.word	0x08010581
 8010530:	080104fd 	.word	0x080104fd
 8010534:	080104fd 	.word	0x080104fd
 8010538:	080104fd 	.word	0x080104fd
 801053c:	080104fd 	.word	0x080104fd
 8010540:	0801068d 	.word	0x0801068d
 8010544:	080105b1 	.word	0x080105b1
 8010548:	0801066f 	.word	0x0801066f
 801054c:	080104fd 	.word	0x080104fd
 8010550:	080104fd 	.word	0x080104fd
 8010554:	080106af 	.word	0x080106af
 8010558:	080104fd 	.word	0x080104fd
 801055c:	080105b1 	.word	0x080105b1
 8010560:	080104fd 	.word	0x080104fd
 8010564:	080104fd 	.word	0x080104fd
 8010568:	08010677 	.word	0x08010677
 801056c:	682b      	ldr	r3, [r5, #0]
 801056e:	1d1a      	adds	r2, r3, #4
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	602a      	str	r2, [r5, #0]
 8010574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801057c:	2301      	movs	r3, #1
 801057e:	e0a3      	b.n	80106c8 <_printf_i+0x1f4>
 8010580:	6820      	ldr	r0, [r4, #0]
 8010582:	6829      	ldr	r1, [r5, #0]
 8010584:	0606      	lsls	r6, r0, #24
 8010586:	f101 0304 	add.w	r3, r1, #4
 801058a:	d50a      	bpl.n	80105a2 <_printf_i+0xce>
 801058c:	680e      	ldr	r6, [r1, #0]
 801058e:	602b      	str	r3, [r5, #0]
 8010590:	2e00      	cmp	r6, #0
 8010592:	da03      	bge.n	801059c <_printf_i+0xc8>
 8010594:	232d      	movs	r3, #45	; 0x2d
 8010596:	4276      	negs	r6, r6
 8010598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801059c:	485e      	ldr	r0, [pc, #376]	; (8010718 <_printf_i+0x244>)
 801059e:	230a      	movs	r3, #10
 80105a0:	e019      	b.n	80105d6 <_printf_i+0x102>
 80105a2:	680e      	ldr	r6, [r1, #0]
 80105a4:	602b      	str	r3, [r5, #0]
 80105a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80105aa:	bf18      	it	ne
 80105ac:	b236      	sxthne	r6, r6
 80105ae:	e7ef      	b.n	8010590 <_printf_i+0xbc>
 80105b0:	682b      	ldr	r3, [r5, #0]
 80105b2:	6820      	ldr	r0, [r4, #0]
 80105b4:	1d19      	adds	r1, r3, #4
 80105b6:	6029      	str	r1, [r5, #0]
 80105b8:	0601      	lsls	r1, r0, #24
 80105ba:	d501      	bpl.n	80105c0 <_printf_i+0xec>
 80105bc:	681e      	ldr	r6, [r3, #0]
 80105be:	e002      	b.n	80105c6 <_printf_i+0xf2>
 80105c0:	0646      	lsls	r6, r0, #25
 80105c2:	d5fb      	bpl.n	80105bc <_printf_i+0xe8>
 80105c4:	881e      	ldrh	r6, [r3, #0]
 80105c6:	4854      	ldr	r0, [pc, #336]	; (8010718 <_printf_i+0x244>)
 80105c8:	2f6f      	cmp	r7, #111	; 0x6f
 80105ca:	bf0c      	ite	eq
 80105cc:	2308      	moveq	r3, #8
 80105ce:	230a      	movne	r3, #10
 80105d0:	2100      	movs	r1, #0
 80105d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80105d6:	6865      	ldr	r5, [r4, #4]
 80105d8:	60a5      	str	r5, [r4, #8]
 80105da:	2d00      	cmp	r5, #0
 80105dc:	bfa2      	ittt	ge
 80105de:	6821      	ldrge	r1, [r4, #0]
 80105e0:	f021 0104 	bicge.w	r1, r1, #4
 80105e4:	6021      	strge	r1, [r4, #0]
 80105e6:	b90e      	cbnz	r6, 80105ec <_printf_i+0x118>
 80105e8:	2d00      	cmp	r5, #0
 80105ea:	d04d      	beq.n	8010688 <_printf_i+0x1b4>
 80105ec:	4615      	mov	r5, r2
 80105ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80105f2:	fb03 6711 	mls	r7, r3, r1, r6
 80105f6:	5dc7      	ldrb	r7, [r0, r7]
 80105f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80105fc:	4637      	mov	r7, r6
 80105fe:	42bb      	cmp	r3, r7
 8010600:	460e      	mov	r6, r1
 8010602:	d9f4      	bls.n	80105ee <_printf_i+0x11a>
 8010604:	2b08      	cmp	r3, #8
 8010606:	d10b      	bne.n	8010620 <_printf_i+0x14c>
 8010608:	6823      	ldr	r3, [r4, #0]
 801060a:	07de      	lsls	r6, r3, #31
 801060c:	d508      	bpl.n	8010620 <_printf_i+0x14c>
 801060e:	6923      	ldr	r3, [r4, #16]
 8010610:	6861      	ldr	r1, [r4, #4]
 8010612:	4299      	cmp	r1, r3
 8010614:	bfde      	ittt	le
 8010616:	2330      	movle	r3, #48	; 0x30
 8010618:	f805 3c01 	strble.w	r3, [r5, #-1]
 801061c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010620:	1b52      	subs	r2, r2, r5
 8010622:	6122      	str	r2, [r4, #16]
 8010624:	f8cd a000 	str.w	sl, [sp]
 8010628:	464b      	mov	r3, r9
 801062a:	aa03      	add	r2, sp, #12
 801062c:	4621      	mov	r1, r4
 801062e:	4640      	mov	r0, r8
 8010630:	f7ff fee2 	bl	80103f8 <_printf_common>
 8010634:	3001      	adds	r0, #1
 8010636:	d14c      	bne.n	80106d2 <_printf_i+0x1fe>
 8010638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801063c:	b004      	add	sp, #16
 801063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010642:	4835      	ldr	r0, [pc, #212]	; (8010718 <_printf_i+0x244>)
 8010644:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010648:	6829      	ldr	r1, [r5, #0]
 801064a:	6823      	ldr	r3, [r4, #0]
 801064c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010650:	6029      	str	r1, [r5, #0]
 8010652:	061d      	lsls	r5, r3, #24
 8010654:	d514      	bpl.n	8010680 <_printf_i+0x1ac>
 8010656:	07df      	lsls	r7, r3, #31
 8010658:	bf44      	itt	mi
 801065a:	f043 0320 	orrmi.w	r3, r3, #32
 801065e:	6023      	strmi	r3, [r4, #0]
 8010660:	b91e      	cbnz	r6, 801066a <_printf_i+0x196>
 8010662:	6823      	ldr	r3, [r4, #0]
 8010664:	f023 0320 	bic.w	r3, r3, #32
 8010668:	6023      	str	r3, [r4, #0]
 801066a:	2310      	movs	r3, #16
 801066c:	e7b0      	b.n	80105d0 <_printf_i+0xfc>
 801066e:	6823      	ldr	r3, [r4, #0]
 8010670:	f043 0320 	orr.w	r3, r3, #32
 8010674:	6023      	str	r3, [r4, #0]
 8010676:	2378      	movs	r3, #120	; 0x78
 8010678:	4828      	ldr	r0, [pc, #160]	; (801071c <_printf_i+0x248>)
 801067a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801067e:	e7e3      	b.n	8010648 <_printf_i+0x174>
 8010680:	0659      	lsls	r1, r3, #25
 8010682:	bf48      	it	mi
 8010684:	b2b6      	uxthmi	r6, r6
 8010686:	e7e6      	b.n	8010656 <_printf_i+0x182>
 8010688:	4615      	mov	r5, r2
 801068a:	e7bb      	b.n	8010604 <_printf_i+0x130>
 801068c:	682b      	ldr	r3, [r5, #0]
 801068e:	6826      	ldr	r6, [r4, #0]
 8010690:	6961      	ldr	r1, [r4, #20]
 8010692:	1d18      	adds	r0, r3, #4
 8010694:	6028      	str	r0, [r5, #0]
 8010696:	0635      	lsls	r5, r6, #24
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	d501      	bpl.n	80106a0 <_printf_i+0x1cc>
 801069c:	6019      	str	r1, [r3, #0]
 801069e:	e002      	b.n	80106a6 <_printf_i+0x1d2>
 80106a0:	0670      	lsls	r0, r6, #25
 80106a2:	d5fb      	bpl.n	801069c <_printf_i+0x1c8>
 80106a4:	8019      	strh	r1, [r3, #0]
 80106a6:	2300      	movs	r3, #0
 80106a8:	6123      	str	r3, [r4, #16]
 80106aa:	4615      	mov	r5, r2
 80106ac:	e7ba      	b.n	8010624 <_printf_i+0x150>
 80106ae:	682b      	ldr	r3, [r5, #0]
 80106b0:	1d1a      	adds	r2, r3, #4
 80106b2:	602a      	str	r2, [r5, #0]
 80106b4:	681d      	ldr	r5, [r3, #0]
 80106b6:	6862      	ldr	r2, [r4, #4]
 80106b8:	2100      	movs	r1, #0
 80106ba:	4628      	mov	r0, r5
 80106bc:	f7ef fd90 	bl	80001e0 <memchr>
 80106c0:	b108      	cbz	r0, 80106c6 <_printf_i+0x1f2>
 80106c2:	1b40      	subs	r0, r0, r5
 80106c4:	6060      	str	r0, [r4, #4]
 80106c6:	6863      	ldr	r3, [r4, #4]
 80106c8:	6123      	str	r3, [r4, #16]
 80106ca:	2300      	movs	r3, #0
 80106cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106d0:	e7a8      	b.n	8010624 <_printf_i+0x150>
 80106d2:	6923      	ldr	r3, [r4, #16]
 80106d4:	462a      	mov	r2, r5
 80106d6:	4649      	mov	r1, r9
 80106d8:	4640      	mov	r0, r8
 80106da:	47d0      	blx	sl
 80106dc:	3001      	adds	r0, #1
 80106de:	d0ab      	beq.n	8010638 <_printf_i+0x164>
 80106e0:	6823      	ldr	r3, [r4, #0]
 80106e2:	079b      	lsls	r3, r3, #30
 80106e4:	d413      	bmi.n	801070e <_printf_i+0x23a>
 80106e6:	68e0      	ldr	r0, [r4, #12]
 80106e8:	9b03      	ldr	r3, [sp, #12]
 80106ea:	4298      	cmp	r0, r3
 80106ec:	bfb8      	it	lt
 80106ee:	4618      	movlt	r0, r3
 80106f0:	e7a4      	b.n	801063c <_printf_i+0x168>
 80106f2:	2301      	movs	r3, #1
 80106f4:	4632      	mov	r2, r6
 80106f6:	4649      	mov	r1, r9
 80106f8:	4640      	mov	r0, r8
 80106fa:	47d0      	blx	sl
 80106fc:	3001      	adds	r0, #1
 80106fe:	d09b      	beq.n	8010638 <_printf_i+0x164>
 8010700:	3501      	adds	r5, #1
 8010702:	68e3      	ldr	r3, [r4, #12]
 8010704:	9903      	ldr	r1, [sp, #12]
 8010706:	1a5b      	subs	r3, r3, r1
 8010708:	42ab      	cmp	r3, r5
 801070a:	dcf2      	bgt.n	80106f2 <_printf_i+0x21e>
 801070c:	e7eb      	b.n	80106e6 <_printf_i+0x212>
 801070e:	2500      	movs	r5, #0
 8010710:	f104 0619 	add.w	r6, r4, #25
 8010714:	e7f5      	b.n	8010702 <_printf_i+0x22e>
 8010716:	bf00      	nop
 8010718:	0801531e 	.word	0x0801531e
 801071c:	0801532f 	.word	0x0801532f

08010720 <_scanf_float>:
 8010720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010724:	b087      	sub	sp, #28
 8010726:	4617      	mov	r7, r2
 8010728:	9303      	str	r3, [sp, #12]
 801072a:	688b      	ldr	r3, [r1, #8]
 801072c:	1e5a      	subs	r2, r3, #1
 801072e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010732:	bf83      	ittte	hi
 8010734:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010738:	195b      	addhi	r3, r3, r5
 801073a:	9302      	strhi	r3, [sp, #8]
 801073c:	2300      	movls	r3, #0
 801073e:	bf86      	itte	hi
 8010740:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010744:	608b      	strhi	r3, [r1, #8]
 8010746:	9302      	strls	r3, [sp, #8]
 8010748:	680b      	ldr	r3, [r1, #0]
 801074a:	468b      	mov	fp, r1
 801074c:	2500      	movs	r5, #0
 801074e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010752:	f84b 3b1c 	str.w	r3, [fp], #28
 8010756:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801075a:	4680      	mov	r8, r0
 801075c:	460c      	mov	r4, r1
 801075e:	465e      	mov	r6, fp
 8010760:	46aa      	mov	sl, r5
 8010762:	46a9      	mov	r9, r5
 8010764:	9501      	str	r5, [sp, #4]
 8010766:	68a2      	ldr	r2, [r4, #8]
 8010768:	b152      	cbz	r2, 8010780 <_scanf_float+0x60>
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	781b      	ldrb	r3, [r3, #0]
 801076e:	2b4e      	cmp	r3, #78	; 0x4e
 8010770:	d864      	bhi.n	801083c <_scanf_float+0x11c>
 8010772:	2b40      	cmp	r3, #64	; 0x40
 8010774:	d83c      	bhi.n	80107f0 <_scanf_float+0xd0>
 8010776:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801077a:	b2c8      	uxtb	r0, r1
 801077c:	280e      	cmp	r0, #14
 801077e:	d93a      	bls.n	80107f6 <_scanf_float+0xd6>
 8010780:	f1b9 0f00 	cmp.w	r9, #0
 8010784:	d003      	beq.n	801078e <_scanf_float+0x6e>
 8010786:	6823      	ldr	r3, [r4, #0]
 8010788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801078c:	6023      	str	r3, [r4, #0]
 801078e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010792:	f1ba 0f01 	cmp.w	sl, #1
 8010796:	f200 8113 	bhi.w	80109c0 <_scanf_float+0x2a0>
 801079a:	455e      	cmp	r6, fp
 801079c:	f200 8105 	bhi.w	80109aa <_scanf_float+0x28a>
 80107a0:	2501      	movs	r5, #1
 80107a2:	4628      	mov	r0, r5
 80107a4:	b007      	add	sp, #28
 80107a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107aa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80107ae:	2a0d      	cmp	r2, #13
 80107b0:	d8e6      	bhi.n	8010780 <_scanf_float+0x60>
 80107b2:	a101      	add	r1, pc, #4	; (adr r1, 80107b8 <_scanf_float+0x98>)
 80107b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80107b8:	080108f7 	.word	0x080108f7
 80107bc:	08010781 	.word	0x08010781
 80107c0:	08010781 	.word	0x08010781
 80107c4:	08010781 	.word	0x08010781
 80107c8:	08010957 	.word	0x08010957
 80107cc:	0801092f 	.word	0x0801092f
 80107d0:	08010781 	.word	0x08010781
 80107d4:	08010781 	.word	0x08010781
 80107d8:	08010905 	.word	0x08010905
 80107dc:	08010781 	.word	0x08010781
 80107e0:	08010781 	.word	0x08010781
 80107e4:	08010781 	.word	0x08010781
 80107e8:	08010781 	.word	0x08010781
 80107ec:	080108bd 	.word	0x080108bd
 80107f0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80107f4:	e7db      	b.n	80107ae <_scanf_float+0x8e>
 80107f6:	290e      	cmp	r1, #14
 80107f8:	d8c2      	bhi.n	8010780 <_scanf_float+0x60>
 80107fa:	a001      	add	r0, pc, #4	; (adr r0, 8010800 <_scanf_float+0xe0>)
 80107fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010800:	080108af 	.word	0x080108af
 8010804:	08010781 	.word	0x08010781
 8010808:	080108af 	.word	0x080108af
 801080c:	08010943 	.word	0x08010943
 8010810:	08010781 	.word	0x08010781
 8010814:	0801085d 	.word	0x0801085d
 8010818:	08010899 	.word	0x08010899
 801081c:	08010899 	.word	0x08010899
 8010820:	08010899 	.word	0x08010899
 8010824:	08010899 	.word	0x08010899
 8010828:	08010899 	.word	0x08010899
 801082c:	08010899 	.word	0x08010899
 8010830:	08010899 	.word	0x08010899
 8010834:	08010899 	.word	0x08010899
 8010838:	08010899 	.word	0x08010899
 801083c:	2b6e      	cmp	r3, #110	; 0x6e
 801083e:	d809      	bhi.n	8010854 <_scanf_float+0x134>
 8010840:	2b60      	cmp	r3, #96	; 0x60
 8010842:	d8b2      	bhi.n	80107aa <_scanf_float+0x8a>
 8010844:	2b54      	cmp	r3, #84	; 0x54
 8010846:	d077      	beq.n	8010938 <_scanf_float+0x218>
 8010848:	2b59      	cmp	r3, #89	; 0x59
 801084a:	d199      	bne.n	8010780 <_scanf_float+0x60>
 801084c:	2d07      	cmp	r5, #7
 801084e:	d197      	bne.n	8010780 <_scanf_float+0x60>
 8010850:	2508      	movs	r5, #8
 8010852:	e029      	b.n	80108a8 <_scanf_float+0x188>
 8010854:	2b74      	cmp	r3, #116	; 0x74
 8010856:	d06f      	beq.n	8010938 <_scanf_float+0x218>
 8010858:	2b79      	cmp	r3, #121	; 0x79
 801085a:	e7f6      	b.n	801084a <_scanf_float+0x12a>
 801085c:	6821      	ldr	r1, [r4, #0]
 801085e:	05c8      	lsls	r0, r1, #23
 8010860:	d51a      	bpl.n	8010898 <_scanf_float+0x178>
 8010862:	9b02      	ldr	r3, [sp, #8]
 8010864:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010868:	6021      	str	r1, [r4, #0]
 801086a:	f109 0901 	add.w	r9, r9, #1
 801086e:	b11b      	cbz	r3, 8010878 <_scanf_float+0x158>
 8010870:	3b01      	subs	r3, #1
 8010872:	3201      	adds	r2, #1
 8010874:	9302      	str	r3, [sp, #8]
 8010876:	60a2      	str	r2, [r4, #8]
 8010878:	68a3      	ldr	r3, [r4, #8]
 801087a:	3b01      	subs	r3, #1
 801087c:	60a3      	str	r3, [r4, #8]
 801087e:	6923      	ldr	r3, [r4, #16]
 8010880:	3301      	adds	r3, #1
 8010882:	6123      	str	r3, [r4, #16]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	3b01      	subs	r3, #1
 8010888:	2b00      	cmp	r3, #0
 801088a:	607b      	str	r3, [r7, #4]
 801088c:	f340 8084 	ble.w	8010998 <_scanf_float+0x278>
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	3301      	adds	r3, #1
 8010894:	603b      	str	r3, [r7, #0]
 8010896:	e766      	b.n	8010766 <_scanf_float+0x46>
 8010898:	eb1a 0f05 	cmn.w	sl, r5
 801089c:	f47f af70 	bne.w	8010780 <_scanf_float+0x60>
 80108a0:	6822      	ldr	r2, [r4, #0]
 80108a2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80108a6:	6022      	str	r2, [r4, #0]
 80108a8:	f806 3b01 	strb.w	r3, [r6], #1
 80108ac:	e7e4      	b.n	8010878 <_scanf_float+0x158>
 80108ae:	6822      	ldr	r2, [r4, #0]
 80108b0:	0610      	lsls	r0, r2, #24
 80108b2:	f57f af65 	bpl.w	8010780 <_scanf_float+0x60>
 80108b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80108ba:	e7f4      	b.n	80108a6 <_scanf_float+0x186>
 80108bc:	f1ba 0f00 	cmp.w	sl, #0
 80108c0:	d10e      	bne.n	80108e0 <_scanf_float+0x1c0>
 80108c2:	f1b9 0f00 	cmp.w	r9, #0
 80108c6:	d10e      	bne.n	80108e6 <_scanf_float+0x1c6>
 80108c8:	6822      	ldr	r2, [r4, #0]
 80108ca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80108ce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80108d2:	d108      	bne.n	80108e6 <_scanf_float+0x1c6>
 80108d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80108d8:	6022      	str	r2, [r4, #0]
 80108da:	f04f 0a01 	mov.w	sl, #1
 80108de:	e7e3      	b.n	80108a8 <_scanf_float+0x188>
 80108e0:	f1ba 0f02 	cmp.w	sl, #2
 80108e4:	d055      	beq.n	8010992 <_scanf_float+0x272>
 80108e6:	2d01      	cmp	r5, #1
 80108e8:	d002      	beq.n	80108f0 <_scanf_float+0x1d0>
 80108ea:	2d04      	cmp	r5, #4
 80108ec:	f47f af48 	bne.w	8010780 <_scanf_float+0x60>
 80108f0:	3501      	adds	r5, #1
 80108f2:	b2ed      	uxtb	r5, r5
 80108f4:	e7d8      	b.n	80108a8 <_scanf_float+0x188>
 80108f6:	f1ba 0f01 	cmp.w	sl, #1
 80108fa:	f47f af41 	bne.w	8010780 <_scanf_float+0x60>
 80108fe:	f04f 0a02 	mov.w	sl, #2
 8010902:	e7d1      	b.n	80108a8 <_scanf_float+0x188>
 8010904:	b97d      	cbnz	r5, 8010926 <_scanf_float+0x206>
 8010906:	f1b9 0f00 	cmp.w	r9, #0
 801090a:	f47f af3c 	bne.w	8010786 <_scanf_float+0x66>
 801090e:	6822      	ldr	r2, [r4, #0]
 8010910:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010914:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010918:	f47f af39 	bne.w	801078e <_scanf_float+0x6e>
 801091c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010920:	6022      	str	r2, [r4, #0]
 8010922:	2501      	movs	r5, #1
 8010924:	e7c0      	b.n	80108a8 <_scanf_float+0x188>
 8010926:	2d03      	cmp	r5, #3
 8010928:	d0e2      	beq.n	80108f0 <_scanf_float+0x1d0>
 801092a:	2d05      	cmp	r5, #5
 801092c:	e7de      	b.n	80108ec <_scanf_float+0x1cc>
 801092e:	2d02      	cmp	r5, #2
 8010930:	f47f af26 	bne.w	8010780 <_scanf_float+0x60>
 8010934:	2503      	movs	r5, #3
 8010936:	e7b7      	b.n	80108a8 <_scanf_float+0x188>
 8010938:	2d06      	cmp	r5, #6
 801093a:	f47f af21 	bne.w	8010780 <_scanf_float+0x60>
 801093e:	2507      	movs	r5, #7
 8010940:	e7b2      	b.n	80108a8 <_scanf_float+0x188>
 8010942:	6822      	ldr	r2, [r4, #0]
 8010944:	0591      	lsls	r1, r2, #22
 8010946:	f57f af1b 	bpl.w	8010780 <_scanf_float+0x60>
 801094a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801094e:	6022      	str	r2, [r4, #0]
 8010950:	f8cd 9004 	str.w	r9, [sp, #4]
 8010954:	e7a8      	b.n	80108a8 <_scanf_float+0x188>
 8010956:	6822      	ldr	r2, [r4, #0]
 8010958:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801095c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010960:	d006      	beq.n	8010970 <_scanf_float+0x250>
 8010962:	0550      	lsls	r0, r2, #21
 8010964:	f57f af0c 	bpl.w	8010780 <_scanf_float+0x60>
 8010968:	f1b9 0f00 	cmp.w	r9, #0
 801096c:	f43f af0f 	beq.w	801078e <_scanf_float+0x6e>
 8010970:	0591      	lsls	r1, r2, #22
 8010972:	bf58      	it	pl
 8010974:	9901      	ldrpl	r1, [sp, #4]
 8010976:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801097a:	bf58      	it	pl
 801097c:	eba9 0101 	subpl.w	r1, r9, r1
 8010980:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010984:	bf58      	it	pl
 8010986:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801098a:	6022      	str	r2, [r4, #0]
 801098c:	f04f 0900 	mov.w	r9, #0
 8010990:	e78a      	b.n	80108a8 <_scanf_float+0x188>
 8010992:	f04f 0a03 	mov.w	sl, #3
 8010996:	e787      	b.n	80108a8 <_scanf_float+0x188>
 8010998:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801099c:	4639      	mov	r1, r7
 801099e:	4640      	mov	r0, r8
 80109a0:	4798      	blx	r3
 80109a2:	2800      	cmp	r0, #0
 80109a4:	f43f aedf 	beq.w	8010766 <_scanf_float+0x46>
 80109a8:	e6ea      	b.n	8010780 <_scanf_float+0x60>
 80109aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80109ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80109b2:	463a      	mov	r2, r7
 80109b4:	4640      	mov	r0, r8
 80109b6:	4798      	blx	r3
 80109b8:	6923      	ldr	r3, [r4, #16]
 80109ba:	3b01      	subs	r3, #1
 80109bc:	6123      	str	r3, [r4, #16]
 80109be:	e6ec      	b.n	801079a <_scanf_float+0x7a>
 80109c0:	1e6b      	subs	r3, r5, #1
 80109c2:	2b06      	cmp	r3, #6
 80109c4:	d825      	bhi.n	8010a12 <_scanf_float+0x2f2>
 80109c6:	2d02      	cmp	r5, #2
 80109c8:	d836      	bhi.n	8010a38 <_scanf_float+0x318>
 80109ca:	455e      	cmp	r6, fp
 80109cc:	f67f aee8 	bls.w	80107a0 <_scanf_float+0x80>
 80109d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80109d4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80109d8:	463a      	mov	r2, r7
 80109da:	4640      	mov	r0, r8
 80109dc:	4798      	blx	r3
 80109de:	6923      	ldr	r3, [r4, #16]
 80109e0:	3b01      	subs	r3, #1
 80109e2:	6123      	str	r3, [r4, #16]
 80109e4:	e7f1      	b.n	80109ca <_scanf_float+0x2aa>
 80109e6:	9802      	ldr	r0, [sp, #8]
 80109e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80109ec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80109f0:	9002      	str	r0, [sp, #8]
 80109f2:	463a      	mov	r2, r7
 80109f4:	4640      	mov	r0, r8
 80109f6:	4798      	blx	r3
 80109f8:	6923      	ldr	r3, [r4, #16]
 80109fa:	3b01      	subs	r3, #1
 80109fc:	6123      	str	r3, [r4, #16]
 80109fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010a02:	fa5f fa8a 	uxtb.w	sl, sl
 8010a06:	f1ba 0f02 	cmp.w	sl, #2
 8010a0a:	d1ec      	bne.n	80109e6 <_scanf_float+0x2c6>
 8010a0c:	3d03      	subs	r5, #3
 8010a0e:	b2ed      	uxtb	r5, r5
 8010a10:	1b76      	subs	r6, r6, r5
 8010a12:	6823      	ldr	r3, [r4, #0]
 8010a14:	05da      	lsls	r2, r3, #23
 8010a16:	d52f      	bpl.n	8010a78 <_scanf_float+0x358>
 8010a18:	055b      	lsls	r3, r3, #21
 8010a1a:	d510      	bpl.n	8010a3e <_scanf_float+0x31e>
 8010a1c:	455e      	cmp	r6, fp
 8010a1e:	f67f aebf 	bls.w	80107a0 <_scanf_float+0x80>
 8010a22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010a26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010a2a:	463a      	mov	r2, r7
 8010a2c:	4640      	mov	r0, r8
 8010a2e:	4798      	blx	r3
 8010a30:	6923      	ldr	r3, [r4, #16]
 8010a32:	3b01      	subs	r3, #1
 8010a34:	6123      	str	r3, [r4, #16]
 8010a36:	e7f1      	b.n	8010a1c <_scanf_float+0x2fc>
 8010a38:	46aa      	mov	sl, r5
 8010a3a:	9602      	str	r6, [sp, #8]
 8010a3c:	e7df      	b.n	80109fe <_scanf_float+0x2de>
 8010a3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010a42:	6923      	ldr	r3, [r4, #16]
 8010a44:	2965      	cmp	r1, #101	; 0x65
 8010a46:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010a4a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8010a4e:	6123      	str	r3, [r4, #16]
 8010a50:	d00c      	beq.n	8010a6c <_scanf_float+0x34c>
 8010a52:	2945      	cmp	r1, #69	; 0x45
 8010a54:	d00a      	beq.n	8010a6c <_scanf_float+0x34c>
 8010a56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010a5a:	463a      	mov	r2, r7
 8010a5c:	4640      	mov	r0, r8
 8010a5e:	4798      	blx	r3
 8010a60:	6923      	ldr	r3, [r4, #16]
 8010a62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010a66:	3b01      	subs	r3, #1
 8010a68:	1eb5      	subs	r5, r6, #2
 8010a6a:	6123      	str	r3, [r4, #16]
 8010a6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010a70:	463a      	mov	r2, r7
 8010a72:	4640      	mov	r0, r8
 8010a74:	4798      	blx	r3
 8010a76:	462e      	mov	r6, r5
 8010a78:	6825      	ldr	r5, [r4, #0]
 8010a7a:	f015 0510 	ands.w	r5, r5, #16
 8010a7e:	d159      	bne.n	8010b34 <_scanf_float+0x414>
 8010a80:	7035      	strb	r5, [r6, #0]
 8010a82:	6823      	ldr	r3, [r4, #0]
 8010a84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a8c:	d11b      	bne.n	8010ac6 <_scanf_float+0x3a6>
 8010a8e:	9b01      	ldr	r3, [sp, #4]
 8010a90:	454b      	cmp	r3, r9
 8010a92:	eba3 0209 	sub.w	r2, r3, r9
 8010a96:	d123      	bne.n	8010ae0 <_scanf_float+0x3c0>
 8010a98:	2200      	movs	r2, #0
 8010a9a:	4659      	mov	r1, fp
 8010a9c:	4640      	mov	r0, r8
 8010a9e:	f000 fe99 	bl	80117d4 <_strtod_r>
 8010aa2:	6822      	ldr	r2, [r4, #0]
 8010aa4:	9b03      	ldr	r3, [sp, #12]
 8010aa6:	f012 0f02 	tst.w	r2, #2
 8010aaa:	ec57 6b10 	vmov	r6, r7, d0
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	d021      	beq.n	8010af6 <_scanf_float+0x3d6>
 8010ab2:	9903      	ldr	r1, [sp, #12]
 8010ab4:	1d1a      	adds	r2, r3, #4
 8010ab6:	600a      	str	r2, [r1, #0]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	e9c3 6700 	strd	r6, r7, [r3]
 8010abe:	68e3      	ldr	r3, [r4, #12]
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	60e3      	str	r3, [r4, #12]
 8010ac4:	e66d      	b.n	80107a2 <_scanf_float+0x82>
 8010ac6:	9b04      	ldr	r3, [sp, #16]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d0e5      	beq.n	8010a98 <_scanf_float+0x378>
 8010acc:	9905      	ldr	r1, [sp, #20]
 8010ace:	230a      	movs	r3, #10
 8010ad0:	462a      	mov	r2, r5
 8010ad2:	3101      	adds	r1, #1
 8010ad4:	4640      	mov	r0, r8
 8010ad6:	f000 ff05 	bl	80118e4 <_strtol_r>
 8010ada:	9b04      	ldr	r3, [sp, #16]
 8010adc:	9e05      	ldr	r6, [sp, #20]
 8010ade:	1ac2      	subs	r2, r0, r3
 8010ae0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010ae4:	429e      	cmp	r6, r3
 8010ae6:	bf28      	it	cs
 8010ae8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010aec:	4912      	ldr	r1, [pc, #72]	; (8010b38 <_scanf_float+0x418>)
 8010aee:	4630      	mov	r0, r6
 8010af0:	f000 f82c 	bl	8010b4c <siprintf>
 8010af4:	e7d0      	b.n	8010a98 <_scanf_float+0x378>
 8010af6:	9903      	ldr	r1, [sp, #12]
 8010af8:	f012 0f04 	tst.w	r2, #4
 8010afc:	f103 0204 	add.w	r2, r3, #4
 8010b00:	600a      	str	r2, [r1, #0]
 8010b02:	d1d9      	bne.n	8010ab8 <_scanf_float+0x398>
 8010b04:	f8d3 8000 	ldr.w	r8, [r3]
 8010b08:	ee10 2a10 	vmov	r2, s0
 8010b0c:	ee10 0a10 	vmov	r0, s0
 8010b10:	463b      	mov	r3, r7
 8010b12:	4639      	mov	r1, r7
 8010b14:	f7f0 f80a 	bl	8000b2c <__aeabi_dcmpun>
 8010b18:	b128      	cbz	r0, 8010b26 <_scanf_float+0x406>
 8010b1a:	4808      	ldr	r0, [pc, #32]	; (8010b3c <_scanf_float+0x41c>)
 8010b1c:	f000 f810 	bl	8010b40 <nanf>
 8010b20:	ed88 0a00 	vstr	s0, [r8]
 8010b24:	e7cb      	b.n	8010abe <_scanf_float+0x39e>
 8010b26:	4630      	mov	r0, r6
 8010b28:	4639      	mov	r1, r7
 8010b2a:	f7f0 f85d 	bl	8000be8 <__aeabi_d2f>
 8010b2e:	f8c8 0000 	str.w	r0, [r8]
 8010b32:	e7c4      	b.n	8010abe <_scanf_float+0x39e>
 8010b34:	2500      	movs	r5, #0
 8010b36:	e634      	b.n	80107a2 <_scanf_float+0x82>
 8010b38:	08015340 	.word	0x08015340
 8010b3c:	08015748 	.word	0x08015748

08010b40 <nanf>:
 8010b40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010b48 <nanf+0x8>
 8010b44:	4770      	bx	lr
 8010b46:	bf00      	nop
 8010b48:	7fc00000 	.word	0x7fc00000

08010b4c <siprintf>:
 8010b4c:	b40e      	push	{r1, r2, r3}
 8010b4e:	b500      	push	{lr}
 8010b50:	b09c      	sub	sp, #112	; 0x70
 8010b52:	ab1d      	add	r3, sp, #116	; 0x74
 8010b54:	9002      	str	r0, [sp, #8]
 8010b56:	9006      	str	r0, [sp, #24]
 8010b58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010b5c:	4809      	ldr	r0, [pc, #36]	; (8010b84 <siprintf+0x38>)
 8010b5e:	9107      	str	r1, [sp, #28]
 8010b60:	9104      	str	r1, [sp, #16]
 8010b62:	4909      	ldr	r1, [pc, #36]	; (8010b88 <siprintf+0x3c>)
 8010b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b68:	9105      	str	r1, [sp, #20]
 8010b6a:	6800      	ldr	r0, [r0, #0]
 8010b6c:	9301      	str	r3, [sp, #4]
 8010b6e:	a902      	add	r1, sp, #8
 8010b70:	f002 fed6 	bl	8013920 <_svfiprintf_r>
 8010b74:	9b02      	ldr	r3, [sp, #8]
 8010b76:	2200      	movs	r2, #0
 8010b78:	701a      	strb	r2, [r3, #0]
 8010b7a:	b01c      	add	sp, #112	; 0x70
 8010b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b80:	b003      	add	sp, #12
 8010b82:	4770      	bx	lr
 8010b84:	20000014 	.word	0x20000014
 8010b88:	ffff0208 	.word	0xffff0208

08010b8c <sulp>:
 8010b8c:	b570      	push	{r4, r5, r6, lr}
 8010b8e:	4604      	mov	r4, r0
 8010b90:	460d      	mov	r5, r1
 8010b92:	ec45 4b10 	vmov	d0, r4, r5
 8010b96:	4616      	mov	r6, r2
 8010b98:	f002 fc20 	bl	80133dc <__ulp>
 8010b9c:	ec51 0b10 	vmov	r0, r1, d0
 8010ba0:	b17e      	cbz	r6, 8010bc2 <sulp+0x36>
 8010ba2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010ba6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	dd09      	ble.n	8010bc2 <sulp+0x36>
 8010bae:	051b      	lsls	r3, r3, #20
 8010bb0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010bb4:	2400      	movs	r4, #0
 8010bb6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010bba:	4622      	mov	r2, r4
 8010bbc:	462b      	mov	r3, r5
 8010bbe:	f7ef fd1b 	bl	80005f8 <__aeabi_dmul>
 8010bc2:	bd70      	pop	{r4, r5, r6, pc}
 8010bc4:	0000      	movs	r0, r0
	...

08010bc8 <_strtod_l>:
 8010bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bcc:	ed2d 8b02 	vpush	{d8}
 8010bd0:	b09d      	sub	sp, #116	; 0x74
 8010bd2:	461f      	mov	r7, r3
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	9318      	str	r3, [sp, #96]	; 0x60
 8010bd8:	4ba2      	ldr	r3, [pc, #648]	; (8010e64 <_strtod_l+0x29c>)
 8010bda:	9213      	str	r2, [sp, #76]	; 0x4c
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	9305      	str	r3, [sp, #20]
 8010be0:	4604      	mov	r4, r0
 8010be2:	4618      	mov	r0, r3
 8010be4:	4688      	mov	r8, r1
 8010be6:	f7ef faf3 	bl	80001d0 <strlen>
 8010bea:	f04f 0a00 	mov.w	sl, #0
 8010bee:	4605      	mov	r5, r0
 8010bf0:	f04f 0b00 	mov.w	fp, #0
 8010bf4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010bf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010bfa:	781a      	ldrb	r2, [r3, #0]
 8010bfc:	2a2b      	cmp	r2, #43	; 0x2b
 8010bfe:	d04e      	beq.n	8010c9e <_strtod_l+0xd6>
 8010c00:	d83b      	bhi.n	8010c7a <_strtod_l+0xb2>
 8010c02:	2a0d      	cmp	r2, #13
 8010c04:	d834      	bhi.n	8010c70 <_strtod_l+0xa8>
 8010c06:	2a08      	cmp	r2, #8
 8010c08:	d834      	bhi.n	8010c74 <_strtod_l+0xac>
 8010c0a:	2a00      	cmp	r2, #0
 8010c0c:	d03e      	beq.n	8010c8c <_strtod_l+0xc4>
 8010c0e:	2300      	movs	r3, #0
 8010c10:	930a      	str	r3, [sp, #40]	; 0x28
 8010c12:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010c14:	7833      	ldrb	r3, [r6, #0]
 8010c16:	2b30      	cmp	r3, #48	; 0x30
 8010c18:	f040 80b0 	bne.w	8010d7c <_strtod_l+0x1b4>
 8010c1c:	7873      	ldrb	r3, [r6, #1]
 8010c1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010c22:	2b58      	cmp	r3, #88	; 0x58
 8010c24:	d168      	bne.n	8010cf8 <_strtod_l+0x130>
 8010c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c28:	9301      	str	r3, [sp, #4]
 8010c2a:	ab18      	add	r3, sp, #96	; 0x60
 8010c2c:	9702      	str	r7, [sp, #8]
 8010c2e:	9300      	str	r3, [sp, #0]
 8010c30:	4a8d      	ldr	r2, [pc, #564]	; (8010e68 <_strtod_l+0x2a0>)
 8010c32:	ab19      	add	r3, sp, #100	; 0x64
 8010c34:	a917      	add	r1, sp, #92	; 0x5c
 8010c36:	4620      	mov	r0, r4
 8010c38:	f001 fd38 	bl	80126ac <__gethex>
 8010c3c:	f010 0707 	ands.w	r7, r0, #7
 8010c40:	4605      	mov	r5, r0
 8010c42:	d005      	beq.n	8010c50 <_strtod_l+0x88>
 8010c44:	2f06      	cmp	r7, #6
 8010c46:	d12c      	bne.n	8010ca2 <_strtod_l+0xda>
 8010c48:	3601      	adds	r6, #1
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	9617      	str	r6, [sp, #92]	; 0x5c
 8010c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8010c50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	f040 8590 	bne.w	8011778 <_strtod_l+0xbb0>
 8010c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c5a:	b1eb      	cbz	r3, 8010c98 <_strtod_l+0xd0>
 8010c5c:	4652      	mov	r2, sl
 8010c5e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010c62:	ec43 2b10 	vmov	d0, r2, r3
 8010c66:	b01d      	add	sp, #116	; 0x74
 8010c68:	ecbd 8b02 	vpop	{d8}
 8010c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c70:	2a20      	cmp	r2, #32
 8010c72:	d1cc      	bne.n	8010c0e <_strtod_l+0x46>
 8010c74:	3301      	adds	r3, #1
 8010c76:	9317      	str	r3, [sp, #92]	; 0x5c
 8010c78:	e7be      	b.n	8010bf8 <_strtod_l+0x30>
 8010c7a:	2a2d      	cmp	r2, #45	; 0x2d
 8010c7c:	d1c7      	bne.n	8010c0e <_strtod_l+0x46>
 8010c7e:	2201      	movs	r2, #1
 8010c80:	920a      	str	r2, [sp, #40]	; 0x28
 8010c82:	1c5a      	adds	r2, r3, #1
 8010c84:	9217      	str	r2, [sp, #92]	; 0x5c
 8010c86:	785b      	ldrb	r3, [r3, #1]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d1c2      	bne.n	8010c12 <_strtod_l+0x4a>
 8010c8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010c8e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	f040 856e 	bne.w	8011774 <_strtod_l+0xbac>
 8010c98:	4652      	mov	r2, sl
 8010c9a:	465b      	mov	r3, fp
 8010c9c:	e7e1      	b.n	8010c62 <_strtod_l+0x9a>
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	e7ee      	b.n	8010c80 <_strtod_l+0xb8>
 8010ca2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010ca4:	b13a      	cbz	r2, 8010cb6 <_strtod_l+0xee>
 8010ca6:	2135      	movs	r1, #53	; 0x35
 8010ca8:	a81a      	add	r0, sp, #104	; 0x68
 8010caa:	f002 fca2 	bl	80135f2 <__copybits>
 8010cae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	f002 f861 	bl	8012d78 <_Bfree>
 8010cb6:	3f01      	subs	r7, #1
 8010cb8:	2f04      	cmp	r7, #4
 8010cba:	d806      	bhi.n	8010cca <_strtod_l+0x102>
 8010cbc:	e8df f007 	tbb	[pc, r7]
 8010cc0:	1714030a 	.word	0x1714030a
 8010cc4:	0a          	.byte	0x0a
 8010cc5:	00          	.byte	0x00
 8010cc6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010cca:	0728      	lsls	r0, r5, #28
 8010ccc:	d5c0      	bpl.n	8010c50 <_strtod_l+0x88>
 8010cce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010cd2:	e7bd      	b.n	8010c50 <_strtod_l+0x88>
 8010cd4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010cd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010cda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010cde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010ce2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010ce6:	e7f0      	b.n	8010cca <_strtod_l+0x102>
 8010ce8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010e6c <_strtod_l+0x2a4>
 8010cec:	e7ed      	b.n	8010cca <_strtod_l+0x102>
 8010cee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010cf2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010cf6:	e7e8      	b.n	8010cca <_strtod_l+0x102>
 8010cf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010cfa:	1c5a      	adds	r2, r3, #1
 8010cfc:	9217      	str	r2, [sp, #92]	; 0x5c
 8010cfe:	785b      	ldrb	r3, [r3, #1]
 8010d00:	2b30      	cmp	r3, #48	; 0x30
 8010d02:	d0f9      	beq.n	8010cf8 <_strtod_l+0x130>
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d0a3      	beq.n	8010c50 <_strtod_l+0x88>
 8010d08:	2301      	movs	r3, #1
 8010d0a:	f04f 0900 	mov.w	r9, #0
 8010d0e:	9304      	str	r3, [sp, #16]
 8010d10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d12:	9308      	str	r3, [sp, #32]
 8010d14:	f8cd 901c 	str.w	r9, [sp, #28]
 8010d18:	464f      	mov	r7, r9
 8010d1a:	220a      	movs	r2, #10
 8010d1c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010d1e:	7806      	ldrb	r6, [r0, #0]
 8010d20:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010d24:	b2d9      	uxtb	r1, r3
 8010d26:	2909      	cmp	r1, #9
 8010d28:	d92a      	bls.n	8010d80 <_strtod_l+0x1b8>
 8010d2a:	9905      	ldr	r1, [sp, #20]
 8010d2c:	462a      	mov	r2, r5
 8010d2e:	f002 ff0f 	bl	8013b50 <strncmp>
 8010d32:	b398      	cbz	r0, 8010d9c <_strtod_l+0x1d4>
 8010d34:	2000      	movs	r0, #0
 8010d36:	4632      	mov	r2, r6
 8010d38:	463d      	mov	r5, r7
 8010d3a:	9005      	str	r0, [sp, #20]
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	2a65      	cmp	r2, #101	; 0x65
 8010d40:	d001      	beq.n	8010d46 <_strtod_l+0x17e>
 8010d42:	2a45      	cmp	r2, #69	; 0x45
 8010d44:	d118      	bne.n	8010d78 <_strtod_l+0x1b0>
 8010d46:	b91d      	cbnz	r5, 8010d50 <_strtod_l+0x188>
 8010d48:	9a04      	ldr	r2, [sp, #16]
 8010d4a:	4302      	orrs	r2, r0
 8010d4c:	d09e      	beq.n	8010c8c <_strtod_l+0xc4>
 8010d4e:	2500      	movs	r5, #0
 8010d50:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8010d54:	f108 0201 	add.w	r2, r8, #1
 8010d58:	9217      	str	r2, [sp, #92]	; 0x5c
 8010d5a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010d5e:	2a2b      	cmp	r2, #43	; 0x2b
 8010d60:	d075      	beq.n	8010e4e <_strtod_l+0x286>
 8010d62:	2a2d      	cmp	r2, #45	; 0x2d
 8010d64:	d07b      	beq.n	8010e5e <_strtod_l+0x296>
 8010d66:	f04f 0c00 	mov.w	ip, #0
 8010d6a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010d6e:	2909      	cmp	r1, #9
 8010d70:	f240 8082 	bls.w	8010e78 <_strtod_l+0x2b0>
 8010d74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010d78:	2600      	movs	r6, #0
 8010d7a:	e09d      	b.n	8010eb8 <_strtod_l+0x2f0>
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	e7c4      	b.n	8010d0a <_strtod_l+0x142>
 8010d80:	2f08      	cmp	r7, #8
 8010d82:	bfd8      	it	le
 8010d84:	9907      	ldrle	r1, [sp, #28]
 8010d86:	f100 0001 	add.w	r0, r0, #1
 8010d8a:	bfda      	itte	le
 8010d8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010d90:	9307      	strle	r3, [sp, #28]
 8010d92:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010d96:	3701      	adds	r7, #1
 8010d98:	9017      	str	r0, [sp, #92]	; 0x5c
 8010d9a:	e7bf      	b.n	8010d1c <_strtod_l+0x154>
 8010d9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d9e:	195a      	adds	r2, r3, r5
 8010da0:	9217      	str	r2, [sp, #92]	; 0x5c
 8010da2:	5d5a      	ldrb	r2, [r3, r5]
 8010da4:	2f00      	cmp	r7, #0
 8010da6:	d037      	beq.n	8010e18 <_strtod_l+0x250>
 8010da8:	9005      	str	r0, [sp, #20]
 8010daa:	463d      	mov	r5, r7
 8010dac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010db0:	2b09      	cmp	r3, #9
 8010db2:	d912      	bls.n	8010dda <_strtod_l+0x212>
 8010db4:	2301      	movs	r3, #1
 8010db6:	e7c2      	b.n	8010d3e <_strtod_l+0x176>
 8010db8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010dba:	1c5a      	adds	r2, r3, #1
 8010dbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8010dbe:	785a      	ldrb	r2, [r3, #1]
 8010dc0:	3001      	adds	r0, #1
 8010dc2:	2a30      	cmp	r2, #48	; 0x30
 8010dc4:	d0f8      	beq.n	8010db8 <_strtod_l+0x1f0>
 8010dc6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010dca:	2b08      	cmp	r3, #8
 8010dcc:	f200 84d9 	bhi.w	8011782 <_strtod_l+0xbba>
 8010dd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010dd2:	9005      	str	r0, [sp, #20]
 8010dd4:	2000      	movs	r0, #0
 8010dd6:	9308      	str	r3, [sp, #32]
 8010dd8:	4605      	mov	r5, r0
 8010dda:	3a30      	subs	r2, #48	; 0x30
 8010ddc:	f100 0301 	add.w	r3, r0, #1
 8010de0:	d014      	beq.n	8010e0c <_strtod_l+0x244>
 8010de2:	9905      	ldr	r1, [sp, #20]
 8010de4:	4419      	add	r1, r3
 8010de6:	9105      	str	r1, [sp, #20]
 8010de8:	462b      	mov	r3, r5
 8010dea:	eb00 0e05 	add.w	lr, r0, r5
 8010dee:	210a      	movs	r1, #10
 8010df0:	4573      	cmp	r3, lr
 8010df2:	d113      	bne.n	8010e1c <_strtod_l+0x254>
 8010df4:	182b      	adds	r3, r5, r0
 8010df6:	2b08      	cmp	r3, #8
 8010df8:	f105 0501 	add.w	r5, r5, #1
 8010dfc:	4405      	add	r5, r0
 8010dfe:	dc1c      	bgt.n	8010e3a <_strtod_l+0x272>
 8010e00:	9907      	ldr	r1, [sp, #28]
 8010e02:	230a      	movs	r3, #10
 8010e04:	fb03 2301 	mla	r3, r3, r1, r2
 8010e08:	9307      	str	r3, [sp, #28]
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010e0e:	1c51      	adds	r1, r2, #1
 8010e10:	9117      	str	r1, [sp, #92]	; 0x5c
 8010e12:	7852      	ldrb	r2, [r2, #1]
 8010e14:	4618      	mov	r0, r3
 8010e16:	e7c9      	b.n	8010dac <_strtod_l+0x1e4>
 8010e18:	4638      	mov	r0, r7
 8010e1a:	e7d2      	b.n	8010dc2 <_strtod_l+0x1fa>
 8010e1c:	2b08      	cmp	r3, #8
 8010e1e:	dc04      	bgt.n	8010e2a <_strtod_l+0x262>
 8010e20:	9e07      	ldr	r6, [sp, #28]
 8010e22:	434e      	muls	r6, r1
 8010e24:	9607      	str	r6, [sp, #28]
 8010e26:	3301      	adds	r3, #1
 8010e28:	e7e2      	b.n	8010df0 <_strtod_l+0x228>
 8010e2a:	f103 0c01 	add.w	ip, r3, #1
 8010e2e:	f1bc 0f10 	cmp.w	ip, #16
 8010e32:	bfd8      	it	le
 8010e34:	fb01 f909 	mulle.w	r9, r1, r9
 8010e38:	e7f5      	b.n	8010e26 <_strtod_l+0x25e>
 8010e3a:	2d10      	cmp	r5, #16
 8010e3c:	bfdc      	itt	le
 8010e3e:	230a      	movle	r3, #10
 8010e40:	fb03 2909 	mlale	r9, r3, r9, r2
 8010e44:	e7e1      	b.n	8010e0a <_strtod_l+0x242>
 8010e46:	2300      	movs	r3, #0
 8010e48:	9305      	str	r3, [sp, #20]
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	e77c      	b.n	8010d48 <_strtod_l+0x180>
 8010e4e:	f04f 0c00 	mov.w	ip, #0
 8010e52:	f108 0202 	add.w	r2, r8, #2
 8010e56:	9217      	str	r2, [sp, #92]	; 0x5c
 8010e58:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010e5c:	e785      	b.n	8010d6a <_strtod_l+0x1a2>
 8010e5e:	f04f 0c01 	mov.w	ip, #1
 8010e62:	e7f6      	b.n	8010e52 <_strtod_l+0x28a>
 8010e64:	08015590 	.word	0x08015590
 8010e68:	08015348 	.word	0x08015348
 8010e6c:	7ff00000 	.word	0x7ff00000
 8010e70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010e72:	1c51      	adds	r1, r2, #1
 8010e74:	9117      	str	r1, [sp, #92]	; 0x5c
 8010e76:	7852      	ldrb	r2, [r2, #1]
 8010e78:	2a30      	cmp	r2, #48	; 0x30
 8010e7a:	d0f9      	beq.n	8010e70 <_strtod_l+0x2a8>
 8010e7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010e80:	2908      	cmp	r1, #8
 8010e82:	f63f af79 	bhi.w	8010d78 <_strtod_l+0x1b0>
 8010e86:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010e8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010e8c:	9206      	str	r2, [sp, #24]
 8010e8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010e90:	1c51      	adds	r1, r2, #1
 8010e92:	9117      	str	r1, [sp, #92]	; 0x5c
 8010e94:	7852      	ldrb	r2, [r2, #1]
 8010e96:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010e9a:	2e09      	cmp	r6, #9
 8010e9c:	d937      	bls.n	8010f0e <_strtod_l+0x346>
 8010e9e:	9e06      	ldr	r6, [sp, #24]
 8010ea0:	1b89      	subs	r1, r1, r6
 8010ea2:	2908      	cmp	r1, #8
 8010ea4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010ea8:	dc02      	bgt.n	8010eb0 <_strtod_l+0x2e8>
 8010eaa:	4576      	cmp	r6, lr
 8010eac:	bfa8      	it	ge
 8010eae:	4676      	movge	r6, lr
 8010eb0:	f1bc 0f00 	cmp.w	ip, #0
 8010eb4:	d000      	beq.n	8010eb8 <_strtod_l+0x2f0>
 8010eb6:	4276      	negs	r6, r6
 8010eb8:	2d00      	cmp	r5, #0
 8010eba:	d14d      	bne.n	8010f58 <_strtod_l+0x390>
 8010ebc:	9904      	ldr	r1, [sp, #16]
 8010ebe:	4301      	orrs	r1, r0
 8010ec0:	f47f aec6 	bne.w	8010c50 <_strtod_l+0x88>
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	f47f aee1 	bne.w	8010c8c <_strtod_l+0xc4>
 8010eca:	2a69      	cmp	r2, #105	; 0x69
 8010ecc:	d027      	beq.n	8010f1e <_strtod_l+0x356>
 8010ece:	dc24      	bgt.n	8010f1a <_strtod_l+0x352>
 8010ed0:	2a49      	cmp	r2, #73	; 0x49
 8010ed2:	d024      	beq.n	8010f1e <_strtod_l+0x356>
 8010ed4:	2a4e      	cmp	r2, #78	; 0x4e
 8010ed6:	f47f aed9 	bne.w	8010c8c <_strtod_l+0xc4>
 8010eda:	499f      	ldr	r1, [pc, #636]	; (8011158 <_strtod_l+0x590>)
 8010edc:	a817      	add	r0, sp, #92	; 0x5c
 8010ede:	f001 fe3d 	bl	8012b5c <__match>
 8010ee2:	2800      	cmp	r0, #0
 8010ee4:	f43f aed2 	beq.w	8010c8c <_strtod_l+0xc4>
 8010ee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010eea:	781b      	ldrb	r3, [r3, #0]
 8010eec:	2b28      	cmp	r3, #40	; 0x28
 8010eee:	d12d      	bne.n	8010f4c <_strtod_l+0x384>
 8010ef0:	499a      	ldr	r1, [pc, #616]	; (801115c <_strtod_l+0x594>)
 8010ef2:	aa1a      	add	r2, sp, #104	; 0x68
 8010ef4:	a817      	add	r0, sp, #92	; 0x5c
 8010ef6:	f001 fe45 	bl	8012b84 <__hexnan>
 8010efa:	2805      	cmp	r0, #5
 8010efc:	d126      	bne.n	8010f4c <_strtod_l+0x384>
 8010efe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010f00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8010f04:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010f08:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010f0c:	e6a0      	b.n	8010c50 <_strtod_l+0x88>
 8010f0e:	210a      	movs	r1, #10
 8010f10:	fb01 2e0e 	mla	lr, r1, lr, r2
 8010f14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010f18:	e7b9      	b.n	8010e8e <_strtod_l+0x2c6>
 8010f1a:	2a6e      	cmp	r2, #110	; 0x6e
 8010f1c:	e7db      	b.n	8010ed6 <_strtod_l+0x30e>
 8010f1e:	4990      	ldr	r1, [pc, #576]	; (8011160 <_strtod_l+0x598>)
 8010f20:	a817      	add	r0, sp, #92	; 0x5c
 8010f22:	f001 fe1b 	bl	8012b5c <__match>
 8010f26:	2800      	cmp	r0, #0
 8010f28:	f43f aeb0 	beq.w	8010c8c <_strtod_l+0xc4>
 8010f2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f2e:	498d      	ldr	r1, [pc, #564]	; (8011164 <_strtod_l+0x59c>)
 8010f30:	3b01      	subs	r3, #1
 8010f32:	a817      	add	r0, sp, #92	; 0x5c
 8010f34:	9317      	str	r3, [sp, #92]	; 0x5c
 8010f36:	f001 fe11 	bl	8012b5c <__match>
 8010f3a:	b910      	cbnz	r0, 8010f42 <_strtod_l+0x37a>
 8010f3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f3e:	3301      	adds	r3, #1
 8010f40:	9317      	str	r3, [sp, #92]	; 0x5c
 8010f42:	f8df b230 	ldr.w	fp, [pc, #560]	; 8011174 <_strtod_l+0x5ac>
 8010f46:	f04f 0a00 	mov.w	sl, #0
 8010f4a:	e681      	b.n	8010c50 <_strtod_l+0x88>
 8010f4c:	4886      	ldr	r0, [pc, #536]	; (8011168 <_strtod_l+0x5a0>)
 8010f4e:	f002 fde7 	bl	8013b20 <nan>
 8010f52:	ec5b ab10 	vmov	sl, fp, d0
 8010f56:	e67b      	b.n	8010c50 <_strtod_l+0x88>
 8010f58:	9b05      	ldr	r3, [sp, #20]
 8010f5a:	9807      	ldr	r0, [sp, #28]
 8010f5c:	1af3      	subs	r3, r6, r3
 8010f5e:	2f00      	cmp	r7, #0
 8010f60:	bf08      	it	eq
 8010f62:	462f      	moveq	r7, r5
 8010f64:	2d10      	cmp	r5, #16
 8010f66:	9306      	str	r3, [sp, #24]
 8010f68:	46a8      	mov	r8, r5
 8010f6a:	bfa8      	it	ge
 8010f6c:	f04f 0810 	movge.w	r8, #16
 8010f70:	f7ef fac8 	bl	8000504 <__aeabi_ui2d>
 8010f74:	2d09      	cmp	r5, #9
 8010f76:	4682      	mov	sl, r0
 8010f78:	468b      	mov	fp, r1
 8010f7a:	dd13      	ble.n	8010fa4 <_strtod_l+0x3dc>
 8010f7c:	4b7b      	ldr	r3, [pc, #492]	; (801116c <_strtod_l+0x5a4>)
 8010f7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010f82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010f86:	f7ef fb37 	bl	80005f8 <__aeabi_dmul>
 8010f8a:	4682      	mov	sl, r0
 8010f8c:	4648      	mov	r0, r9
 8010f8e:	468b      	mov	fp, r1
 8010f90:	f7ef fab8 	bl	8000504 <__aeabi_ui2d>
 8010f94:	4602      	mov	r2, r0
 8010f96:	460b      	mov	r3, r1
 8010f98:	4650      	mov	r0, sl
 8010f9a:	4659      	mov	r1, fp
 8010f9c:	f7ef f976 	bl	800028c <__adddf3>
 8010fa0:	4682      	mov	sl, r0
 8010fa2:	468b      	mov	fp, r1
 8010fa4:	2d0f      	cmp	r5, #15
 8010fa6:	dc38      	bgt.n	801101a <_strtod_l+0x452>
 8010fa8:	9b06      	ldr	r3, [sp, #24]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	f43f ae50 	beq.w	8010c50 <_strtod_l+0x88>
 8010fb0:	dd24      	ble.n	8010ffc <_strtod_l+0x434>
 8010fb2:	2b16      	cmp	r3, #22
 8010fb4:	dc0b      	bgt.n	8010fce <_strtod_l+0x406>
 8010fb6:	496d      	ldr	r1, [pc, #436]	; (801116c <_strtod_l+0x5a4>)
 8010fb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fc0:	4652      	mov	r2, sl
 8010fc2:	465b      	mov	r3, fp
 8010fc4:	f7ef fb18 	bl	80005f8 <__aeabi_dmul>
 8010fc8:	4682      	mov	sl, r0
 8010fca:	468b      	mov	fp, r1
 8010fcc:	e640      	b.n	8010c50 <_strtod_l+0x88>
 8010fce:	9a06      	ldr	r2, [sp, #24]
 8010fd0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010fd4:	4293      	cmp	r3, r2
 8010fd6:	db20      	blt.n	801101a <_strtod_l+0x452>
 8010fd8:	4c64      	ldr	r4, [pc, #400]	; (801116c <_strtod_l+0x5a4>)
 8010fda:	f1c5 050f 	rsb	r5, r5, #15
 8010fde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010fe2:	4652      	mov	r2, sl
 8010fe4:	465b      	mov	r3, fp
 8010fe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fea:	f7ef fb05 	bl	80005f8 <__aeabi_dmul>
 8010fee:	9b06      	ldr	r3, [sp, #24]
 8010ff0:	1b5d      	subs	r5, r3, r5
 8010ff2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010ff6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010ffa:	e7e3      	b.n	8010fc4 <_strtod_l+0x3fc>
 8010ffc:	9b06      	ldr	r3, [sp, #24]
 8010ffe:	3316      	adds	r3, #22
 8011000:	db0b      	blt.n	801101a <_strtod_l+0x452>
 8011002:	9b05      	ldr	r3, [sp, #20]
 8011004:	1b9e      	subs	r6, r3, r6
 8011006:	4b59      	ldr	r3, [pc, #356]	; (801116c <_strtod_l+0x5a4>)
 8011008:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801100c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011010:	4650      	mov	r0, sl
 8011012:	4659      	mov	r1, fp
 8011014:	f7ef fc1a 	bl	800084c <__aeabi_ddiv>
 8011018:	e7d6      	b.n	8010fc8 <_strtod_l+0x400>
 801101a:	9b06      	ldr	r3, [sp, #24]
 801101c:	eba5 0808 	sub.w	r8, r5, r8
 8011020:	4498      	add	r8, r3
 8011022:	f1b8 0f00 	cmp.w	r8, #0
 8011026:	dd74      	ble.n	8011112 <_strtod_l+0x54a>
 8011028:	f018 030f 	ands.w	r3, r8, #15
 801102c:	d00a      	beq.n	8011044 <_strtod_l+0x47c>
 801102e:	494f      	ldr	r1, [pc, #316]	; (801116c <_strtod_l+0x5a4>)
 8011030:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011034:	4652      	mov	r2, sl
 8011036:	465b      	mov	r3, fp
 8011038:	e9d1 0100 	ldrd	r0, r1, [r1]
 801103c:	f7ef fadc 	bl	80005f8 <__aeabi_dmul>
 8011040:	4682      	mov	sl, r0
 8011042:	468b      	mov	fp, r1
 8011044:	f038 080f 	bics.w	r8, r8, #15
 8011048:	d04f      	beq.n	80110ea <_strtod_l+0x522>
 801104a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801104e:	dd22      	ble.n	8011096 <_strtod_l+0x4ce>
 8011050:	2500      	movs	r5, #0
 8011052:	462e      	mov	r6, r5
 8011054:	9507      	str	r5, [sp, #28]
 8011056:	9505      	str	r5, [sp, #20]
 8011058:	2322      	movs	r3, #34	; 0x22
 801105a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8011174 <_strtod_l+0x5ac>
 801105e:	6023      	str	r3, [r4, #0]
 8011060:	f04f 0a00 	mov.w	sl, #0
 8011064:	9b07      	ldr	r3, [sp, #28]
 8011066:	2b00      	cmp	r3, #0
 8011068:	f43f adf2 	beq.w	8010c50 <_strtod_l+0x88>
 801106c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801106e:	4620      	mov	r0, r4
 8011070:	f001 fe82 	bl	8012d78 <_Bfree>
 8011074:	9905      	ldr	r1, [sp, #20]
 8011076:	4620      	mov	r0, r4
 8011078:	f001 fe7e 	bl	8012d78 <_Bfree>
 801107c:	4631      	mov	r1, r6
 801107e:	4620      	mov	r0, r4
 8011080:	f001 fe7a 	bl	8012d78 <_Bfree>
 8011084:	9907      	ldr	r1, [sp, #28]
 8011086:	4620      	mov	r0, r4
 8011088:	f001 fe76 	bl	8012d78 <_Bfree>
 801108c:	4629      	mov	r1, r5
 801108e:	4620      	mov	r0, r4
 8011090:	f001 fe72 	bl	8012d78 <_Bfree>
 8011094:	e5dc      	b.n	8010c50 <_strtod_l+0x88>
 8011096:	4b36      	ldr	r3, [pc, #216]	; (8011170 <_strtod_l+0x5a8>)
 8011098:	9304      	str	r3, [sp, #16]
 801109a:	2300      	movs	r3, #0
 801109c:	ea4f 1828 	mov.w	r8, r8, asr #4
 80110a0:	4650      	mov	r0, sl
 80110a2:	4659      	mov	r1, fp
 80110a4:	4699      	mov	r9, r3
 80110a6:	f1b8 0f01 	cmp.w	r8, #1
 80110aa:	dc21      	bgt.n	80110f0 <_strtod_l+0x528>
 80110ac:	b10b      	cbz	r3, 80110b2 <_strtod_l+0x4ea>
 80110ae:	4682      	mov	sl, r0
 80110b0:	468b      	mov	fp, r1
 80110b2:	4b2f      	ldr	r3, [pc, #188]	; (8011170 <_strtod_l+0x5a8>)
 80110b4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80110b8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80110bc:	4652      	mov	r2, sl
 80110be:	465b      	mov	r3, fp
 80110c0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80110c4:	f7ef fa98 	bl	80005f8 <__aeabi_dmul>
 80110c8:	4b2a      	ldr	r3, [pc, #168]	; (8011174 <_strtod_l+0x5ac>)
 80110ca:	460a      	mov	r2, r1
 80110cc:	400b      	ands	r3, r1
 80110ce:	492a      	ldr	r1, [pc, #168]	; (8011178 <_strtod_l+0x5b0>)
 80110d0:	428b      	cmp	r3, r1
 80110d2:	4682      	mov	sl, r0
 80110d4:	d8bc      	bhi.n	8011050 <_strtod_l+0x488>
 80110d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80110da:	428b      	cmp	r3, r1
 80110dc:	bf86      	itte	hi
 80110de:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801117c <_strtod_l+0x5b4>
 80110e2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80110e6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80110ea:	2300      	movs	r3, #0
 80110ec:	9304      	str	r3, [sp, #16]
 80110ee:	e084      	b.n	80111fa <_strtod_l+0x632>
 80110f0:	f018 0f01 	tst.w	r8, #1
 80110f4:	d005      	beq.n	8011102 <_strtod_l+0x53a>
 80110f6:	9b04      	ldr	r3, [sp, #16]
 80110f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fc:	f7ef fa7c 	bl	80005f8 <__aeabi_dmul>
 8011100:	2301      	movs	r3, #1
 8011102:	9a04      	ldr	r2, [sp, #16]
 8011104:	3208      	adds	r2, #8
 8011106:	f109 0901 	add.w	r9, r9, #1
 801110a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801110e:	9204      	str	r2, [sp, #16]
 8011110:	e7c9      	b.n	80110a6 <_strtod_l+0x4de>
 8011112:	d0ea      	beq.n	80110ea <_strtod_l+0x522>
 8011114:	f1c8 0800 	rsb	r8, r8, #0
 8011118:	f018 020f 	ands.w	r2, r8, #15
 801111c:	d00a      	beq.n	8011134 <_strtod_l+0x56c>
 801111e:	4b13      	ldr	r3, [pc, #76]	; (801116c <_strtod_l+0x5a4>)
 8011120:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011124:	4650      	mov	r0, sl
 8011126:	4659      	mov	r1, fp
 8011128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112c:	f7ef fb8e 	bl	800084c <__aeabi_ddiv>
 8011130:	4682      	mov	sl, r0
 8011132:	468b      	mov	fp, r1
 8011134:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011138:	d0d7      	beq.n	80110ea <_strtod_l+0x522>
 801113a:	f1b8 0f1f 	cmp.w	r8, #31
 801113e:	dd1f      	ble.n	8011180 <_strtod_l+0x5b8>
 8011140:	2500      	movs	r5, #0
 8011142:	462e      	mov	r6, r5
 8011144:	9507      	str	r5, [sp, #28]
 8011146:	9505      	str	r5, [sp, #20]
 8011148:	2322      	movs	r3, #34	; 0x22
 801114a:	f04f 0a00 	mov.w	sl, #0
 801114e:	f04f 0b00 	mov.w	fp, #0
 8011152:	6023      	str	r3, [r4, #0]
 8011154:	e786      	b.n	8011064 <_strtod_l+0x49c>
 8011156:	bf00      	nop
 8011158:	08015319 	.word	0x08015319
 801115c:	0801535c 	.word	0x0801535c
 8011160:	08015311 	.word	0x08015311
 8011164:	0801549c 	.word	0x0801549c
 8011168:	08015748 	.word	0x08015748
 801116c:	08015628 	.word	0x08015628
 8011170:	08015600 	.word	0x08015600
 8011174:	7ff00000 	.word	0x7ff00000
 8011178:	7ca00000 	.word	0x7ca00000
 801117c:	7fefffff 	.word	0x7fefffff
 8011180:	f018 0310 	ands.w	r3, r8, #16
 8011184:	bf18      	it	ne
 8011186:	236a      	movne	r3, #106	; 0x6a
 8011188:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8011538 <_strtod_l+0x970>
 801118c:	9304      	str	r3, [sp, #16]
 801118e:	4650      	mov	r0, sl
 8011190:	4659      	mov	r1, fp
 8011192:	2300      	movs	r3, #0
 8011194:	f018 0f01 	tst.w	r8, #1
 8011198:	d004      	beq.n	80111a4 <_strtod_l+0x5dc>
 801119a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801119e:	f7ef fa2b 	bl	80005f8 <__aeabi_dmul>
 80111a2:	2301      	movs	r3, #1
 80111a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80111a8:	f109 0908 	add.w	r9, r9, #8
 80111ac:	d1f2      	bne.n	8011194 <_strtod_l+0x5cc>
 80111ae:	b10b      	cbz	r3, 80111b4 <_strtod_l+0x5ec>
 80111b0:	4682      	mov	sl, r0
 80111b2:	468b      	mov	fp, r1
 80111b4:	9b04      	ldr	r3, [sp, #16]
 80111b6:	b1c3      	cbz	r3, 80111ea <_strtod_l+0x622>
 80111b8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80111bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	4659      	mov	r1, fp
 80111c4:	dd11      	ble.n	80111ea <_strtod_l+0x622>
 80111c6:	2b1f      	cmp	r3, #31
 80111c8:	f340 8124 	ble.w	8011414 <_strtod_l+0x84c>
 80111cc:	2b34      	cmp	r3, #52	; 0x34
 80111ce:	bfde      	ittt	le
 80111d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80111d4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80111d8:	fa03 f202 	lslle.w	r2, r3, r2
 80111dc:	f04f 0a00 	mov.w	sl, #0
 80111e0:	bfcc      	ite	gt
 80111e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80111e6:	ea02 0b01 	andle.w	fp, r2, r1
 80111ea:	2200      	movs	r2, #0
 80111ec:	2300      	movs	r3, #0
 80111ee:	4650      	mov	r0, sl
 80111f0:	4659      	mov	r1, fp
 80111f2:	f7ef fc69 	bl	8000ac8 <__aeabi_dcmpeq>
 80111f6:	2800      	cmp	r0, #0
 80111f8:	d1a2      	bne.n	8011140 <_strtod_l+0x578>
 80111fa:	9b07      	ldr	r3, [sp, #28]
 80111fc:	9300      	str	r3, [sp, #0]
 80111fe:	9908      	ldr	r1, [sp, #32]
 8011200:	462b      	mov	r3, r5
 8011202:	463a      	mov	r2, r7
 8011204:	4620      	mov	r0, r4
 8011206:	f001 fe1f 	bl	8012e48 <__s2b>
 801120a:	9007      	str	r0, [sp, #28]
 801120c:	2800      	cmp	r0, #0
 801120e:	f43f af1f 	beq.w	8011050 <_strtod_l+0x488>
 8011212:	9b05      	ldr	r3, [sp, #20]
 8011214:	1b9e      	subs	r6, r3, r6
 8011216:	9b06      	ldr	r3, [sp, #24]
 8011218:	2b00      	cmp	r3, #0
 801121a:	bfb4      	ite	lt
 801121c:	4633      	movlt	r3, r6
 801121e:	2300      	movge	r3, #0
 8011220:	930c      	str	r3, [sp, #48]	; 0x30
 8011222:	9b06      	ldr	r3, [sp, #24]
 8011224:	2500      	movs	r5, #0
 8011226:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801122a:	9312      	str	r3, [sp, #72]	; 0x48
 801122c:	462e      	mov	r6, r5
 801122e:	9b07      	ldr	r3, [sp, #28]
 8011230:	4620      	mov	r0, r4
 8011232:	6859      	ldr	r1, [r3, #4]
 8011234:	f001 fd60 	bl	8012cf8 <_Balloc>
 8011238:	9005      	str	r0, [sp, #20]
 801123a:	2800      	cmp	r0, #0
 801123c:	f43f af0c 	beq.w	8011058 <_strtod_l+0x490>
 8011240:	9b07      	ldr	r3, [sp, #28]
 8011242:	691a      	ldr	r2, [r3, #16]
 8011244:	3202      	adds	r2, #2
 8011246:	f103 010c 	add.w	r1, r3, #12
 801124a:	0092      	lsls	r2, r2, #2
 801124c:	300c      	adds	r0, #12
 801124e:	f7fe fde7 	bl	800fe20 <memcpy>
 8011252:	ec4b ab10 	vmov	d0, sl, fp
 8011256:	aa1a      	add	r2, sp, #104	; 0x68
 8011258:	a919      	add	r1, sp, #100	; 0x64
 801125a:	4620      	mov	r0, r4
 801125c:	f002 f93a 	bl	80134d4 <__d2b>
 8011260:	ec4b ab18 	vmov	d8, sl, fp
 8011264:	9018      	str	r0, [sp, #96]	; 0x60
 8011266:	2800      	cmp	r0, #0
 8011268:	f43f aef6 	beq.w	8011058 <_strtod_l+0x490>
 801126c:	2101      	movs	r1, #1
 801126e:	4620      	mov	r0, r4
 8011270:	f001 fe84 	bl	8012f7c <__i2b>
 8011274:	4606      	mov	r6, r0
 8011276:	2800      	cmp	r0, #0
 8011278:	f43f aeee 	beq.w	8011058 <_strtod_l+0x490>
 801127c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801127e:	9904      	ldr	r1, [sp, #16]
 8011280:	2b00      	cmp	r3, #0
 8011282:	bfab      	itete	ge
 8011284:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8011286:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011288:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801128a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801128e:	bfac      	ite	ge
 8011290:	eb03 0902 	addge.w	r9, r3, r2
 8011294:	1ad7      	sublt	r7, r2, r3
 8011296:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011298:	eba3 0801 	sub.w	r8, r3, r1
 801129c:	4490      	add	r8, r2
 801129e:	4ba1      	ldr	r3, [pc, #644]	; (8011524 <_strtod_l+0x95c>)
 80112a0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80112a4:	4598      	cmp	r8, r3
 80112a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80112aa:	f280 80c7 	bge.w	801143c <_strtod_l+0x874>
 80112ae:	eba3 0308 	sub.w	r3, r3, r8
 80112b2:	2b1f      	cmp	r3, #31
 80112b4:	eba2 0203 	sub.w	r2, r2, r3
 80112b8:	f04f 0101 	mov.w	r1, #1
 80112bc:	f300 80b1 	bgt.w	8011422 <_strtod_l+0x85a>
 80112c0:	fa01 f303 	lsl.w	r3, r1, r3
 80112c4:	930d      	str	r3, [sp, #52]	; 0x34
 80112c6:	2300      	movs	r3, #0
 80112c8:	9308      	str	r3, [sp, #32]
 80112ca:	eb09 0802 	add.w	r8, r9, r2
 80112ce:	9b04      	ldr	r3, [sp, #16]
 80112d0:	45c1      	cmp	r9, r8
 80112d2:	4417      	add	r7, r2
 80112d4:	441f      	add	r7, r3
 80112d6:	464b      	mov	r3, r9
 80112d8:	bfa8      	it	ge
 80112da:	4643      	movge	r3, r8
 80112dc:	42bb      	cmp	r3, r7
 80112de:	bfa8      	it	ge
 80112e0:	463b      	movge	r3, r7
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	bfc2      	ittt	gt
 80112e6:	eba8 0803 	subgt.w	r8, r8, r3
 80112ea:	1aff      	subgt	r7, r7, r3
 80112ec:	eba9 0903 	subgt.w	r9, r9, r3
 80112f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	dd17      	ble.n	8011326 <_strtod_l+0x75e>
 80112f6:	4631      	mov	r1, r6
 80112f8:	461a      	mov	r2, r3
 80112fa:	4620      	mov	r0, r4
 80112fc:	f001 fefe 	bl	80130fc <__pow5mult>
 8011300:	4606      	mov	r6, r0
 8011302:	2800      	cmp	r0, #0
 8011304:	f43f aea8 	beq.w	8011058 <_strtod_l+0x490>
 8011308:	4601      	mov	r1, r0
 801130a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801130c:	4620      	mov	r0, r4
 801130e:	f001 fe4b 	bl	8012fa8 <__multiply>
 8011312:	900b      	str	r0, [sp, #44]	; 0x2c
 8011314:	2800      	cmp	r0, #0
 8011316:	f43f ae9f 	beq.w	8011058 <_strtod_l+0x490>
 801131a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801131c:	4620      	mov	r0, r4
 801131e:	f001 fd2b 	bl	8012d78 <_Bfree>
 8011322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011324:	9318      	str	r3, [sp, #96]	; 0x60
 8011326:	f1b8 0f00 	cmp.w	r8, #0
 801132a:	f300 808c 	bgt.w	8011446 <_strtod_l+0x87e>
 801132e:	9b06      	ldr	r3, [sp, #24]
 8011330:	2b00      	cmp	r3, #0
 8011332:	dd08      	ble.n	8011346 <_strtod_l+0x77e>
 8011334:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011336:	9905      	ldr	r1, [sp, #20]
 8011338:	4620      	mov	r0, r4
 801133a:	f001 fedf 	bl	80130fc <__pow5mult>
 801133e:	9005      	str	r0, [sp, #20]
 8011340:	2800      	cmp	r0, #0
 8011342:	f43f ae89 	beq.w	8011058 <_strtod_l+0x490>
 8011346:	2f00      	cmp	r7, #0
 8011348:	dd08      	ble.n	801135c <_strtod_l+0x794>
 801134a:	9905      	ldr	r1, [sp, #20]
 801134c:	463a      	mov	r2, r7
 801134e:	4620      	mov	r0, r4
 8011350:	f001 ff2e 	bl	80131b0 <__lshift>
 8011354:	9005      	str	r0, [sp, #20]
 8011356:	2800      	cmp	r0, #0
 8011358:	f43f ae7e 	beq.w	8011058 <_strtod_l+0x490>
 801135c:	f1b9 0f00 	cmp.w	r9, #0
 8011360:	dd08      	ble.n	8011374 <_strtod_l+0x7ac>
 8011362:	4631      	mov	r1, r6
 8011364:	464a      	mov	r2, r9
 8011366:	4620      	mov	r0, r4
 8011368:	f001 ff22 	bl	80131b0 <__lshift>
 801136c:	4606      	mov	r6, r0
 801136e:	2800      	cmp	r0, #0
 8011370:	f43f ae72 	beq.w	8011058 <_strtod_l+0x490>
 8011374:	9a05      	ldr	r2, [sp, #20]
 8011376:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011378:	4620      	mov	r0, r4
 801137a:	f001 ffa5 	bl	80132c8 <__mdiff>
 801137e:	4605      	mov	r5, r0
 8011380:	2800      	cmp	r0, #0
 8011382:	f43f ae69 	beq.w	8011058 <_strtod_l+0x490>
 8011386:	68c3      	ldr	r3, [r0, #12]
 8011388:	930b      	str	r3, [sp, #44]	; 0x2c
 801138a:	2300      	movs	r3, #0
 801138c:	60c3      	str	r3, [r0, #12]
 801138e:	4631      	mov	r1, r6
 8011390:	f001 ff7e 	bl	8013290 <__mcmp>
 8011394:	2800      	cmp	r0, #0
 8011396:	da60      	bge.n	801145a <_strtod_l+0x892>
 8011398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801139a:	ea53 030a 	orrs.w	r3, r3, sl
 801139e:	f040 8082 	bne.w	80114a6 <_strtod_l+0x8de>
 80113a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d17d      	bne.n	80114a6 <_strtod_l+0x8de>
 80113aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80113ae:	0d1b      	lsrs	r3, r3, #20
 80113b0:	051b      	lsls	r3, r3, #20
 80113b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80113b6:	d976      	bls.n	80114a6 <_strtod_l+0x8de>
 80113b8:	696b      	ldr	r3, [r5, #20]
 80113ba:	b913      	cbnz	r3, 80113c2 <_strtod_l+0x7fa>
 80113bc:	692b      	ldr	r3, [r5, #16]
 80113be:	2b01      	cmp	r3, #1
 80113c0:	dd71      	ble.n	80114a6 <_strtod_l+0x8de>
 80113c2:	4629      	mov	r1, r5
 80113c4:	2201      	movs	r2, #1
 80113c6:	4620      	mov	r0, r4
 80113c8:	f001 fef2 	bl	80131b0 <__lshift>
 80113cc:	4631      	mov	r1, r6
 80113ce:	4605      	mov	r5, r0
 80113d0:	f001 ff5e 	bl	8013290 <__mcmp>
 80113d4:	2800      	cmp	r0, #0
 80113d6:	dd66      	ble.n	80114a6 <_strtod_l+0x8de>
 80113d8:	9904      	ldr	r1, [sp, #16]
 80113da:	4a53      	ldr	r2, [pc, #332]	; (8011528 <_strtod_l+0x960>)
 80113dc:	465b      	mov	r3, fp
 80113de:	2900      	cmp	r1, #0
 80113e0:	f000 8081 	beq.w	80114e6 <_strtod_l+0x91e>
 80113e4:	ea02 010b 	and.w	r1, r2, fp
 80113e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80113ec:	dc7b      	bgt.n	80114e6 <_strtod_l+0x91e>
 80113ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80113f2:	f77f aea9 	ble.w	8011148 <_strtod_l+0x580>
 80113f6:	4b4d      	ldr	r3, [pc, #308]	; (801152c <_strtod_l+0x964>)
 80113f8:	4650      	mov	r0, sl
 80113fa:	4659      	mov	r1, fp
 80113fc:	2200      	movs	r2, #0
 80113fe:	f7ef f8fb 	bl	80005f8 <__aeabi_dmul>
 8011402:	460b      	mov	r3, r1
 8011404:	4303      	orrs	r3, r0
 8011406:	bf08      	it	eq
 8011408:	2322      	moveq	r3, #34	; 0x22
 801140a:	4682      	mov	sl, r0
 801140c:	468b      	mov	fp, r1
 801140e:	bf08      	it	eq
 8011410:	6023      	streq	r3, [r4, #0]
 8011412:	e62b      	b.n	801106c <_strtod_l+0x4a4>
 8011414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011418:	fa02 f303 	lsl.w	r3, r2, r3
 801141c:	ea03 0a0a 	and.w	sl, r3, sl
 8011420:	e6e3      	b.n	80111ea <_strtod_l+0x622>
 8011422:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011426:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801142a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801142e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011432:	fa01 f308 	lsl.w	r3, r1, r8
 8011436:	9308      	str	r3, [sp, #32]
 8011438:	910d      	str	r1, [sp, #52]	; 0x34
 801143a:	e746      	b.n	80112ca <_strtod_l+0x702>
 801143c:	2300      	movs	r3, #0
 801143e:	9308      	str	r3, [sp, #32]
 8011440:	2301      	movs	r3, #1
 8011442:	930d      	str	r3, [sp, #52]	; 0x34
 8011444:	e741      	b.n	80112ca <_strtod_l+0x702>
 8011446:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011448:	4642      	mov	r2, r8
 801144a:	4620      	mov	r0, r4
 801144c:	f001 feb0 	bl	80131b0 <__lshift>
 8011450:	9018      	str	r0, [sp, #96]	; 0x60
 8011452:	2800      	cmp	r0, #0
 8011454:	f47f af6b 	bne.w	801132e <_strtod_l+0x766>
 8011458:	e5fe      	b.n	8011058 <_strtod_l+0x490>
 801145a:	465f      	mov	r7, fp
 801145c:	d16e      	bne.n	801153c <_strtod_l+0x974>
 801145e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011460:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011464:	b342      	cbz	r2, 80114b8 <_strtod_l+0x8f0>
 8011466:	4a32      	ldr	r2, [pc, #200]	; (8011530 <_strtod_l+0x968>)
 8011468:	4293      	cmp	r3, r2
 801146a:	d128      	bne.n	80114be <_strtod_l+0x8f6>
 801146c:	9b04      	ldr	r3, [sp, #16]
 801146e:	4651      	mov	r1, sl
 8011470:	b1eb      	cbz	r3, 80114ae <_strtod_l+0x8e6>
 8011472:	4b2d      	ldr	r3, [pc, #180]	; (8011528 <_strtod_l+0x960>)
 8011474:	403b      	ands	r3, r7
 8011476:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801147a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801147e:	d819      	bhi.n	80114b4 <_strtod_l+0x8ec>
 8011480:	0d1b      	lsrs	r3, r3, #20
 8011482:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011486:	fa02 f303 	lsl.w	r3, r2, r3
 801148a:	4299      	cmp	r1, r3
 801148c:	d117      	bne.n	80114be <_strtod_l+0x8f6>
 801148e:	4b29      	ldr	r3, [pc, #164]	; (8011534 <_strtod_l+0x96c>)
 8011490:	429f      	cmp	r7, r3
 8011492:	d102      	bne.n	801149a <_strtod_l+0x8d2>
 8011494:	3101      	adds	r1, #1
 8011496:	f43f addf 	beq.w	8011058 <_strtod_l+0x490>
 801149a:	4b23      	ldr	r3, [pc, #140]	; (8011528 <_strtod_l+0x960>)
 801149c:	403b      	ands	r3, r7
 801149e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80114a2:	f04f 0a00 	mov.w	sl, #0
 80114a6:	9b04      	ldr	r3, [sp, #16]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d1a4      	bne.n	80113f6 <_strtod_l+0x82e>
 80114ac:	e5de      	b.n	801106c <_strtod_l+0x4a4>
 80114ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114b2:	e7ea      	b.n	801148a <_strtod_l+0x8c2>
 80114b4:	4613      	mov	r3, r2
 80114b6:	e7e8      	b.n	801148a <_strtod_l+0x8c2>
 80114b8:	ea53 030a 	orrs.w	r3, r3, sl
 80114bc:	d08c      	beq.n	80113d8 <_strtod_l+0x810>
 80114be:	9b08      	ldr	r3, [sp, #32]
 80114c0:	b1db      	cbz	r3, 80114fa <_strtod_l+0x932>
 80114c2:	423b      	tst	r3, r7
 80114c4:	d0ef      	beq.n	80114a6 <_strtod_l+0x8de>
 80114c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114c8:	9a04      	ldr	r2, [sp, #16]
 80114ca:	4650      	mov	r0, sl
 80114cc:	4659      	mov	r1, fp
 80114ce:	b1c3      	cbz	r3, 8011502 <_strtod_l+0x93a>
 80114d0:	f7ff fb5c 	bl	8010b8c <sulp>
 80114d4:	4602      	mov	r2, r0
 80114d6:	460b      	mov	r3, r1
 80114d8:	ec51 0b18 	vmov	r0, r1, d8
 80114dc:	f7ee fed6 	bl	800028c <__adddf3>
 80114e0:	4682      	mov	sl, r0
 80114e2:	468b      	mov	fp, r1
 80114e4:	e7df      	b.n	80114a6 <_strtod_l+0x8de>
 80114e6:	4013      	ands	r3, r2
 80114e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80114ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80114f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80114f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80114f8:	e7d5      	b.n	80114a6 <_strtod_l+0x8de>
 80114fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114fc:	ea13 0f0a 	tst.w	r3, sl
 8011500:	e7e0      	b.n	80114c4 <_strtod_l+0x8fc>
 8011502:	f7ff fb43 	bl	8010b8c <sulp>
 8011506:	4602      	mov	r2, r0
 8011508:	460b      	mov	r3, r1
 801150a:	ec51 0b18 	vmov	r0, r1, d8
 801150e:	f7ee febb 	bl	8000288 <__aeabi_dsub>
 8011512:	2200      	movs	r2, #0
 8011514:	2300      	movs	r3, #0
 8011516:	4682      	mov	sl, r0
 8011518:	468b      	mov	fp, r1
 801151a:	f7ef fad5 	bl	8000ac8 <__aeabi_dcmpeq>
 801151e:	2800      	cmp	r0, #0
 8011520:	d0c1      	beq.n	80114a6 <_strtod_l+0x8de>
 8011522:	e611      	b.n	8011148 <_strtod_l+0x580>
 8011524:	fffffc02 	.word	0xfffffc02
 8011528:	7ff00000 	.word	0x7ff00000
 801152c:	39500000 	.word	0x39500000
 8011530:	000fffff 	.word	0x000fffff
 8011534:	7fefffff 	.word	0x7fefffff
 8011538:	08015370 	.word	0x08015370
 801153c:	4631      	mov	r1, r6
 801153e:	4628      	mov	r0, r5
 8011540:	f002 f824 	bl	801358c <__ratio>
 8011544:	ec59 8b10 	vmov	r8, r9, d0
 8011548:	ee10 0a10 	vmov	r0, s0
 801154c:	2200      	movs	r2, #0
 801154e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011552:	4649      	mov	r1, r9
 8011554:	f7ef facc 	bl	8000af0 <__aeabi_dcmple>
 8011558:	2800      	cmp	r0, #0
 801155a:	d07a      	beq.n	8011652 <_strtod_l+0xa8a>
 801155c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801155e:	2b00      	cmp	r3, #0
 8011560:	d04a      	beq.n	80115f8 <_strtod_l+0xa30>
 8011562:	4b95      	ldr	r3, [pc, #596]	; (80117b8 <_strtod_l+0xbf0>)
 8011564:	2200      	movs	r2, #0
 8011566:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801156a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80117b8 <_strtod_l+0xbf0>
 801156e:	f04f 0800 	mov.w	r8, #0
 8011572:	4b92      	ldr	r3, [pc, #584]	; (80117bc <_strtod_l+0xbf4>)
 8011574:	403b      	ands	r3, r7
 8011576:	930d      	str	r3, [sp, #52]	; 0x34
 8011578:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801157a:	4b91      	ldr	r3, [pc, #580]	; (80117c0 <_strtod_l+0xbf8>)
 801157c:	429a      	cmp	r2, r3
 801157e:	f040 80b0 	bne.w	80116e2 <_strtod_l+0xb1a>
 8011582:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011586:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801158a:	ec4b ab10 	vmov	d0, sl, fp
 801158e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011592:	f001 ff23 	bl	80133dc <__ulp>
 8011596:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801159a:	ec53 2b10 	vmov	r2, r3, d0
 801159e:	f7ef f82b 	bl	80005f8 <__aeabi_dmul>
 80115a2:	4652      	mov	r2, sl
 80115a4:	465b      	mov	r3, fp
 80115a6:	f7ee fe71 	bl	800028c <__adddf3>
 80115aa:	460b      	mov	r3, r1
 80115ac:	4983      	ldr	r1, [pc, #524]	; (80117bc <_strtod_l+0xbf4>)
 80115ae:	4a85      	ldr	r2, [pc, #532]	; (80117c4 <_strtod_l+0xbfc>)
 80115b0:	4019      	ands	r1, r3
 80115b2:	4291      	cmp	r1, r2
 80115b4:	4682      	mov	sl, r0
 80115b6:	d960      	bls.n	801167a <_strtod_l+0xab2>
 80115b8:	ee18 3a90 	vmov	r3, s17
 80115bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80115c0:	4293      	cmp	r3, r2
 80115c2:	d104      	bne.n	80115ce <_strtod_l+0xa06>
 80115c4:	ee18 3a10 	vmov	r3, s16
 80115c8:	3301      	adds	r3, #1
 80115ca:	f43f ad45 	beq.w	8011058 <_strtod_l+0x490>
 80115ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 80117d0 <_strtod_l+0xc08>
 80115d2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80115d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80115d8:	4620      	mov	r0, r4
 80115da:	f001 fbcd 	bl	8012d78 <_Bfree>
 80115de:	9905      	ldr	r1, [sp, #20]
 80115e0:	4620      	mov	r0, r4
 80115e2:	f001 fbc9 	bl	8012d78 <_Bfree>
 80115e6:	4631      	mov	r1, r6
 80115e8:	4620      	mov	r0, r4
 80115ea:	f001 fbc5 	bl	8012d78 <_Bfree>
 80115ee:	4629      	mov	r1, r5
 80115f0:	4620      	mov	r0, r4
 80115f2:	f001 fbc1 	bl	8012d78 <_Bfree>
 80115f6:	e61a      	b.n	801122e <_strtod_l+0x666>
 80115f8:	f1ba 0f00 	cmp.w	sl, #0
 80115fc:	d11b      	bne.n	8011636 <_strtod_l+0xa6e>
 80115fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011602:	b9f3      	cbnz	r3, 8011642 <_strtod_l+0xa7a>
 8011604:	4b6c      	ldr	r3, [pc, #432]	; (80117b8 <_strtod_l+0xbf0>)
 8011606:	2200      	movs	r2, #0
 8011608:	4640      	mov	r0, r8
 801160a:	4649      	mov	r1, r9
 801160c:	f7ef fa66 	bl	8000adc <__aeabi_dcmplt>
 8011610:	b9d0      	cbnz	r0, 8011648 <_strtod_l+0xa80>
 8011612:	4640      	mov	r0, r8
 8011614:	4649      	mov	r1, r9
 8011616:	4b6c      	ldr	r3, [pc, #432]	; (80117c8 <_strtod_l+0xc00>)
 8011618:	2200      	movs	r2, #0
 801161a:	f7ee ffed 	bl	80005f8 <__aeabi_dmul>
 801161e:	4680      	mov	r8, r0
 8011620:	4689      	mov	r9, r1
 8011622:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011626:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801162a:	9315      	str	r3, [sp, #84]	; 0x54
 801162c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011630:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011634:	e79d      	b.n	8011572 <_strtod_l+0x9aa>
 8011636:	f1ba 0f01 	cmp.w	sl, #1
 801163a:	d102      	bne.n	8011642 <_strtod_l+0xa7a>
 801163c:	2f00      	cmp	r7, #0
 801163e:	f43f ad83 	beq.w	8011148 <_strtod_l+0x580>
 8011642:	4b62      	ldr	r3, [pc, #392]	; (80117cc <_strtod_l+0xc04>)
 8011644:	2200      	movs	r2, #0
 8011646:	e78e      	b.n	8011566 <_strtod_l+0x99e>
 8011648:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80117c8 <_strtod_l+0xc00>
 801164c:	f04f 0800 	mov.w	r8, #0
 8011650:	e7e7      	b.n	8011622 <_strtod_l+0xa5a>
 8011652:	4b5d      	ldr	r3, [pc, #372]	; (80117c8 <_strtod_l+0xc00>)
 8011654:	4640      	mov	r0, r8
 8011656:	4649      	mov	r1, r9
 8011658:	2200      	movs	r2, #0
 801165a:	f7ee ffcd 	bl	80005f8 <__aeabi_dmul>
 801165e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011660:	4680      	mov	r8, r0
 8011662:	4689      	mov	r9, r1
 8011664:	b933      	cbnz	r3, 8011674 <_strtod_l+0xaac>
 8011666:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801166a:	900e      	str	r0, [sp, #56]	; 0x38
 801166c:	930f      	str	r3, [sp, #60]	; 0x3c
 801166e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011672:	e7dd      	b.n	8011630 <_strtod_l+0xa68>
 8011674:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8011678:	e7f9      	b.n	801166e <_strtod_l+0xaa6>
 801167a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801167e:	9b04      	ldr	r3, [sp, #16]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d1a8      	bne.n	80115d6 <_strtod_l+0xa0e>
 8011684:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011688:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801168a:	0d1b      	lsrs	r3, r3, #20
 801168c:	051b      	lsls	r3, r3, #20
 801168e:	429a      	cmp	r2, r3
 8011690:	d1a1      	bne.n	80115d6 <_strtod_l+0xa0e>
 8011692:	4640      	mov	r0, r8
 8011694:	4649      	mov	r1, r9
 8011696:	f7ef fb0f 	bl	8000cb8 <__aeabi_d2lz>
 801169a:	f7ee ff7f 	bl	800059c <__aeabi_l2d>
 801169e:	4602      	mov	r2, r0
 80116a0:	460b      	mov	r3, r1
 80116a2:	4640      	mov	r0, r8
 80116a4:	4649      	mov	r1, r9
 80116a6:	f7ee fdef 	bl	8000288 <__aeabi_dsub>
 80116aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80116ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80116b0:	ea43 030a 	orr.w	r3, r3, sl
 80116b4:	4313      	orrs	r3, r2
 80116b6:	4680      	mov	r8, r0
 80116b8:	4689      	mov	r9, r1
 80116ba:	d055      	beq.n	8011768 <_strtod_l+0xba0>
 80116bc:	a336      	add	r3, pc, #216	; (adr r3, 8011798 <_strtod_l+0xbd0>)
 80116be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c2:	f7ef fa0b 	bl	8000adc <__aeabi_dcmplt>
 80116c6:	2800      	cmp	r0, #0
 80116c8:	f47f acd0 	bne.w	801106c <_strtod_l+0x4a4>
 80116cc:	a334      	add	r3, pc, #208	; (adr r3, 80117a0 <_strtod_l+0xbd8>)
 80116ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d2:	4640      	mov	r0, r8
 80116d4:	4649      	mov	r1, r9
 80116d6:	f7ef fa1f 	bl	8000b18 <__aeabi_dcmpgt>
 80116da:	2800      	cmp	r0, #0
 80116dc:	f43f af7b 	beq.w	80115d6 <_strtod_l+0xa0e>
 80116e0:	e4c4      	b.n	801106c <_strtod_l+0x4a4>
 80116e2:	9b04      	ldr	r3, [sp, #16]
 80116e4:	b333      	cbz	r3, 8011734 <_strtod_l+0xb6c>
 80116e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80116e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80116ec:	d822      	bhi.n	8011734 <_strtod_l+0xb6c>
 80116ee:	a32e      	add	r3, pc, #184	; (adr r3, 80117a8 <_strtod_l+0xbe0>)
 80116f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f4:	4640      	mov	r0, r8
 80116f6:	4649      	mov	r1, r9
 80116f8:	f7ef f9fa 	bl	8000af0 <__aeabi_dcmple>
 80116fc:	b1a0      	cbz	r0, 8011728 <_strtod_l+0xb60>
 80116fe:	4649      	mov	r1, r9
 8011700:	4640      	mov	r0, r8
 8011702:	f7ef fa51 	bl	8000ba8 <__aeabi_d2uiz>
 8011706:	2801      	cmp	r0, #1
 8011708:	bf38      	it	cc
 801170a:	2001      	movcc	r0, #1
 801170c:	f7ee fefa 	bl	8000504 <__aeabi_ui2d>
 8011710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011712:	4680      	mov	r8, r0
 8011714:	4689      	mov	r9, r1
 8011716:	bb23      	cbnz	r3, 8011762 <_strtod_l+0xb9a>
 8011718:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801171c:	9010      	str	r0, [sp, #64]	; 0x40
 801171e:	9311      	str	r3, [sp, #68]	; 0x44
 8011720:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011724:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801172a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801172c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011730:	1a9b      	subs	r3, r3, r2
 8011732:	9309      	str	r3, [sp, #36]	; 0x24
 8011734:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011738:	eeb0 0a48 	vmov.f32	s0, s16
 801173c:	eef0 0a68 	vmov.f32	s1, s17
 8011740:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011744:	f001 fe4a 	bl	80133dc <__ulp>
 8011748:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801174c:	ec53 2b10 	vmov	r2, r3, d0
 8011750:	f7ee ff52 	bl	80005f8 <__aeabi_dmul>
 8011754:	ec53 2b18 	vmov	r2, r3, d8
 8011758:	f7ee fd98 	bl	800028c <__adddf3>
 801175c:	4682      	mov	sl, r0
 801175e:	468b      	mov	fp, r1
 8011760:	e78d      	b.n	801167e <_strtod_l+0xab6>
 8011762:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8011766:	e7db      	b.n	8011720 <_strtod_l+0xb58>
 8011768:	a311      	add	r3, pc, #68	; (adr r3, 80117b0 <_strtod_l+0xbe8>)
 801176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801176e:	f7ef f9b5 	bl	8000adc <__aeabi_dcmplt>
 8011772:	e7b2      	b.n	80116da <_strtod_l+0xb12>
 8011774:	2300      	movs	r3, #0
 8011776:	930a      	str	r3, [sp, #40]	; 0x28
 8011778:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801177a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801177c:	6013      	str	r3, [r2, #0]
 801177e:	f7ff ba6b 	b.w	8010c58 <_strtod_l+0x90>
 8011782:	2a65      	cmp	r2, #101	; 0x65
 8011784:	f43f ab5f 	beq.w	8010e46 <_strtod_l+0x27e>
 8011788:	2a45      	cmp	r2, #69	; 0x45
 801178a:	f43f ab5c 	beq.w	8010e46 <_strtod_l+0x27e>
 801178e:	2301      	movs	r3, #1
 8011790:	f7ff bb94 	b.w	8010ebc <_strtod_l+0x2f4>
 8011794:	f3af 8000 	nop.w
 8011798:	94a03595 	.word	0x94a03595
 801179c:	3fdfffff 	.word	0x3fdfffff
 80117a0:	35afe535 	.word	0x35afe535
 80117a4:	3fe00000 	.word	0x3fe00000
 80117a8:	ffc00000 	.word	0xffc00000
 80117ac:	41dfffff 	.word	0x41dfffff
 80117b0:	94a03595 	.word	0x94a03595
 80117b4:	3fcfffff 	.word	0x3fcfffff
 80117b8:	3ff00000 	.word	0x3ff00000
 80117bc:	7ff00000 	.word	0x7ff00000
 80117c0:	7fe00000 	.word	0x7fe00000
 80117c4:	7c9fffff 	.word	0x7c9fffff
 80117c8:	3fe00000 	.word	0x3fe00000
 80117cc:	bff00000 	.word	0xbff00000
 80117d0:	7fefffff 	.word	0x7fefffff

080117d4 <_strtod_r>:
 80117d4:	4b01      	ldr	r3, [pc, #4]	; (80117dc <_strtod_r+0x8>)
 80117d6:	f7ff b9f7 	b.w	8010bc8 <_strtod_l>
 80117da:	bf00      	nop
 80117dc:	2000007c 	.word	0x2000007c

080117e0 <_strtol_l.constprop.0>:
 80117e0:	2b01      	cmp	r3, #1
 80117e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117e6:	d001      	beq.n	80117ec <_strtol_l.constprop.0+0xc>
 80117e8:	2b24      	cmp	r3, #36	; 0x24
 80117ea:	d906      	bls.n	80117fa <_strtol_l.constprop.0+0x1a>
 80117ec:	f7fe faee 	bl	800fdcc <__errno>
 80117f0:	2316      	movs	r3, #22
 80117f2:	6003      	str	r3, [r0, #0]
 80117f4:	2000      	movs	r0, #0
 80117f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80118e0 <_strtol_l.constprop.0+0x100>
 80117fe:	460d      	mov	r5, r1
 8011800:	462e      	mov	r6, r5
 8011802:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011806:	f814 700c 	ldrb.w	r7, [r4, ip]
 801180a:	f017 0708 	ands.w	r7, r7, #8
 801180e:	d1f7      	bne.n	8011800 <_strtol_l.constprop.0+0x20>
 8011810:	2c2d      	cmp	r4, #45	; 0x2d
 8011812:	d132      	bne.n	801187a <_strtol_l.constprop.0+0x9a>
 8011814:	782c      	ldrb	r4, [r5, #0]
 8011816:	2701      	movs	r7, #1
 8011818:	1cb5      	adds	r5, r6, #2
 801181a:	2b00      	cmp	r3, #0
 801181c:	d05b      	beq.n	80118d6 <_strtol_l.constprop.0+0xf6>
 801181e:	2b10      	cmp	r3, #16
 8011820:	d109      	bne.n	8011836 <_strtol_l.constprop.0+0x56>
 8011822:	2c30      	cmp	r4, #48	; 0x30
 8011824:	d107      	bne.n	8011836 <_strtol_l.constprop.0+0x56>
 8011826:	782c      	ldrb	r4, [r5, #0]
 8011828:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801182c:	2c58      	cmp	r4, #88	; 0x58
 801182e:	d14d      	bne.n	80118cc <_strtol_l.constprop.0+0xec>
 8011830:	786c      	ldrb	r4, [r5, #1]
 8011832:	2310      	movs	r3, #16
 8011834:	3502      	adds	r5, #2
 8011836:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801183a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801183e:	f04f 0c00 	mov.w	ip, #0
 8011842:	fbb8 f9f3 	udiv	r9, r8, r3
 8011846:	4666      	mov	r6, ip
 8011848:	fb03 8a19 	mls	sl, r3, r9, r8
 801184c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011850:	f1be 0f09 	cmp.w	lr, #9
 8011854:	d816      	bhi.n	8011884 <_strtol_l.constprop.0+0xa4>
 8011856:	4674      	mov	r4, lr
 8011858:	42a3      	cmp	r3, r4
 801185a:	dd24      	ble.n	80118a6 <_strtol_l.constprop.0+0xc6>
 801185c:	f1bc 0f00 	cmp.w	ip, #0
 8011860:	db1e      	blt.n	80118a0 <_strtol_l.constprop.0+0xc0>
 8011862:	45b1      	cmp	r9, r6
 8011864:	d31c      	bcc.n	80118a0 <_strtol_l.constprop.0+0xc0>
 8011866:	d101      	bne.n	801186c <_strtol_l.constprop.0+0x8c>
 8011868:	45a2      	cmp	sl, r4
 801186a:	db19      	blt.n	80118a0 <_strtol_l.constprop.0+0xc0>
 801186c:	fb06 4603 	mla	r6, r6, r3, r4
 8011870:	f04f 0c01 	mov.w	ip, #1
 8011874:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011878:	e7e8      	b.n	801184c <_strtol_l.constprop.0+0x6c>
 801187a:	2c2b      	cmp	r4, #43	; 0x2b
 801187c:	bf04      	itt	eq
 801187e:	782c      	ldrbeq	r4, [r5, #0]
 8011880:	1cb5      	addeq	r5, r6, #2
 8011882:	e7ca      	b.n	801181a <_strtol_l.constprop.0+0x3a>
 8011884:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011888:	f1be 0f19 	cmp.w	lr, #25
 801188c:	d801      	bhi.n	8011892 <_strtol_l.constprop.0+0xb2>
 801188e:	3c37      	subs	r4, #55	; 0x37
 8011890:	e7e2      	b.n	8011858 <_strtol_l.constprop.0+0x78>
 8011892:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011896:	f1be 0f19 	cmp.w	lr, #25
 801189a:	d804      	bhi.n	80118a6 <_strtol_l.constprop.0+0xc6>
 801189c:	3c57      	subs	r4, #87	; 0x57
 801189e:	e7db      	b.n	8011858 <_strtol_l.constprop.0+0x78>
 80118a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80118a4:	e7e6      	b.n	8011874 <_strtol_l.constprop.0+0x94>
 80118a6:	f1bc 0f00 	cmp.w	ip, #0
 80118aa:	da05      	bge.n	80118b8 <_strtol_l.constprop.0+0xd8>
 80118ac:	2322      	movs	r3, #34	; 0x22
 80118ae:	6003      	str	r3, [r0, #0]
 80118b0:	4646      	mov	r6, r8
 80118b2:	b942      	cbnz	r2, 80118c6 <_strtol_l.constprop.0+0xe6>
 80118b4:	4630      	mov	r0, r6
 80118b6:	e79e      	b.n	80117f6 <_strtol_l.constprop.0+0x16>
 80118b8:	b107      	cbz	r7, 80118bc <_strtol_l.constprop.0+0xdc>
 80118ba:	4276      	negs	r6, r6
 80118bc:	2a00      	cmp	r2, #0
 80118be:	d0f9      	beq.n	80118b4 <_strtol_l.constprop.0+0xd4>
 80118c0:	f1bc 0f00 	cmp.w	ip, #0
 80118c4:	d000      	beq.n	80118c8 <_strtol_l.constprop.0+0xe8>
 80118c6:	1e69      	subs	r1, r5, #1
 80118c8:	6011      	str	r1, [r2, #0]
 80118ca:	e7f3      	b.n	80118b4 <_strtol_l.constprop.0+0xd4>
 80118cc:	2430      	movs	r4, #48	; 0x30
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d1b1      	bne.n	8011836 <_strtol_l.constprop.0+0x56>
 80118d2:	2308      	movs	r3, #8
 80118d4:	e7af      	b.n	8011836 <_strtol_l.constprop.0+0x56>
 80118d6:	2c30      	cmp	r4, #48	; 0x30
 80118d8:	d0a5      	beq.n	8011826 <_strtol_l.constprop.0+0x46>
 80118da:	230a      	movs	r3, #10
 80118dc:	e7ab      	b.n	8011836 <_strtol_l.constprop.0+0x56>
 80118de:	bf00      	nop
 80118e0:	08015399 	.word	0x08015399

080118e4 <_strtol_r>:
 80118e4:	f7ff bf7c 	b.w	80117e0 <_strtol_l.constprop.0>

080118e8 <quorem>:
 80118e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ec:	6903      	ldr	r3, [r0, #16]
 80118ee:	690c      	ldr	r4, [r1, #16]
 80118f0:	42a3      	cmp	r3, r4
 80118f2:	4607      	mov	r7, r0
 80118f4:	f2c0 8081 	blt.w	80119fa <quorem+0x112>
 80118f8:	3c01      	subs	r4, #1
 80118fa:	f101 0814 	add.w	r8, r1, #20
 80118fe:	f100 0514 	add.w	r5, r0, #20
 8011902:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011906:	9301      	str	r3, [sp, #4]
 8011908:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801190c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011910:	3301      	adds	r3, #1
 8011912:	429a      	cmp	r2, r3
 8011914:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011918:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801191c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011920:	d331      	bcc.n	8011986 <quorem+0x9e>
 8011922:	f04f 0e00 	mov.w	lr, #0
 8011926:	4640      	mov	r0, r8
 8011928:	46ac      	mov	ip, r5
 801192a:	46f2      	mov	sl, lr
 801192c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011930:	b293      	uxth	r3, r2
 8011932:	fb06 e303 	mla	r3, r6, r3, lr
 8011936:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801193a:	b29b      	uxth	r3, r3
 801193c:	ebaa 0303 	sub.w	r3, sl, r3
 8011940:	f8dc a000 	ldr.w	sl, [ip]
 8011944:	0c12      	lsrs	r2, r2, #16
 8011946:	fa13 f38a 	uxtah	r3, r3, sl
 801194a:	fb06 e202 	mla	r2, r6, r2, lr
 801194e:	9300      	str	r3, [sp, #0]
 8011950:	9b00      	ldr	r3, [sp, #0]
 8011952:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011956:	b292      	uxth	r2, r2
 8011958:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801195c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011960:	f8bd 3000 	ldrh.w	r3, [sp]
 8011964:	4581      	cmp	r9, r0
 8011966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801196a:	f84c 3b04 	str.w	r3, [ip], #4
 801196e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011972:	d2db      	bcs.n	801192c <quorem+0x44>
 8011974:	f855 300b 	ldr.w	r3, [r5, fp]
 8011978:	b92b      	cbnz	r3, 8011986 <quorem+0x9e>
 801197a:	9b01      	ldr	r3, [sp, #4]
 801197c:	3b04      	subs	r3, #4
 801197e:	429d      	cmp	r5, r3
 8011980:	461a      	mov	r2, r3
 8011982:	d32e      	bcc.n	80119e2 <quorem+0xfa>
 8011984:	613c      	str	r4, [r7, #16]
 8011986:	4638      	mov	r0, r7
 8011988:	f001 fc82 	bl	8013290 <__mcmp>
 801198c:	2800      	cmp	r0, #0
 801198e:	db24      	blt.n	80119da <quorem+0xf2>
 8011990:	3601      	adds	r6, #1
 8011992:	4628      	mov	r0, r5
 8011994:	f04f 0c00 	mov.w	ip, #0
 8011998:	f858 2b04 	ldr.w	r2, [r8], #4
 801199c:	f8d0 e000 	ldr.w	lr, [r0]
 80119a0:	b293      	uxth	r3, r2
 80119a2:	ebac 0303 	sub.w	r3, ip, r3
 80119a6:	0c12      	lsrs	r2, r2, #16
 80119a8:	fa13 f38e 	uxtah	r3, r3, lr
 80119ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80119b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80119b4:	b29b      	uxth	r3, r3
 80119b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80119ba:	45c1      	cmp	r9, r8
 80119bc:	f840 3b04 	str.w	r3, [r0], #4
 80119c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80119c4:	d2e8      	bcs.n	8011998 <quorem+0xb0>
 80119c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80119ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80119ce:	b922      	cbnz	r2, 80119da <quorem+0xf2>
 80119d0:	3b04      	subs	r3, #4
 80119d2:	429d      	cmp	r5, r3
 80119d4:	461a      	mov	r2, r3
 80119d6:	d30a      	bcc.n	80119ee <quorem+0x106>
 80119d8:	613c      	str	r4, [r7, #16]
 80119da:	4630      	mov	r0, r6
 80119dc:	b003      	add	sp, #12
 80119de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119e2:	6812      	ldr	r2, [r2, #0]
 80119e4:	3b04      	subs	r3, #4
 80119e6:	2a00      	cmp	r2, #0
 80119e8:	d1cc      	bne.n	8011984 <quorem+0x9c>
 80119ea:	3c01      	subs	r4, #1
 80119ec:	e7c7      	b.n	801197e <quorem+0x96>
 80119ee:	6812      	ldr	r2, [r2, #0]
 80119f0:	3b04      	subs	r3, #4
 80119f2:	2a00      	cmp	r2, #0
 80119f4:	d1f0      	bne.n	80119d8 <quorem+0xf0>
 80119f6:	3c01      	subs	r4, #1
 80119f8:	e7eb      	b.n	80119d2 <quorem+0xea>
 80119fa:	2000      	movs	r0, #0
 80119fc:	e7ee      	b.n	80119dc <quorem+0xf4>
	...

08011a00 <_dtoa_r>:
 8011a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a04:	ed2d 8b04 	vpush	{d8-d9}
 8011a08:	ec57 6b10 	vmov	r6, r7, d0
 8011a0c:	b093      	sub	sp, #76	; 0x4c
 8011a0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011a10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011a14:	9106      	str	r1, [sp, #24]
 8011a16:	ee10 aa10 	vmov	sl, s0
 8011a1a:	4604      	mov	r4, r0
 8011a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8011a1e:	930c      	str	r3, [sp, #48]	; 0x30
 8011a20:	46bb      	mov	fp, r7
 8011a22:	b975      	cbnz	r5, 8011a42 <_dtoa_r+0x42>
 8011a24:	2010      	movs	r0, #16
 8011a26:	f001 f94d 	bl	8012cc4 <malloc>
 8011a2a:	4602      	mov	r2, r0
 8011a2c:	6260      	str	r0, [r4, #36]	; 0x24
 8011a2e:	b920      	cbnz	r0, 8011a3a <_dtoa_r+0x3a>
 8011a30:	4ba7      	ldr	r3, [pc, #668]	; (8011cd0 <_dtoa_r+0x2d0>)
 8011a32:	21ea      	movs	r1, #234	; 0xea
 8011a34:	48a7      	ldr	r0, [pc, #668]	; (8011cd4 <_dtoa_r+0x2d4>)
 8011a36:	f002 f8ad 	bl	8013b94 <__assert_func>
 8011a3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011a3e:	6005      	str	r5, [r0, #0]
 8011a40:	60c5      	str	r5, [r0, #12]
 8011a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a44:	6819      	ldr	r1, [r3, #0]
 8011a46:	b151      	cbz	r1, 8011a5e <_dtoa_r+0x5e>
 8011a48:	685a      	ldr	r2, [r3, #4]
 8011a4a:	604a      	str	r2, [r1, #4]
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	4093      	lsls	r3, r2
 8011a50:	608b      	str	r3, [r1, #8]
 8011a52:	4620      	mov	r0, r4
 8011a54:	f001 f990 	bl	8012d78 <_Bfree>
 8011a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	601a      	str	r2, [r3, #0]
 8011a5e:	1e3b      	subs	r3, r7, #0
 8011a60:	bfaa      	itet	ge
 8011a62:	2300      	movge	r3, #0
 8011a64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011a68:	f8c8 3000 	strge.w	r3, [r8]
 8011a6c:	4b9a      	ldr	r3, [pc, #616]	; (8011cd8 <_dtoa_r+0x2d8>)
 8011a6e:	bfbc      	itt	lt
 8011a70:	2201      	movlt	r2, #1
 8011a72:	f8c8 2000 	strlt.w	r2, [r8]
 8011a76:	ea33 030b 	bics.w	r3, r3, fp
 8011a7a:	d11b      	bne.n	8011ab4 <_dtoa_r+0xb4>
 8011a7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011a82:	6013      	str	r3, [r2, #0]
 8011a84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a88:	4333      	orrs	r3, r6
 8011a8a:	f000 8592 	beq.w	80125b2 <_dtoa_r+0xbb2>
 8011a8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a90:	b963      	cbnz	r3, 8011aac <_dtoa_r+0xac>
 8011a92:	4b92      	ldr	r3, [pc, #584]	; (8011cdc <_dtoa_r+0x2dc>)
 8011a94:	e022      	b.n	8011adc <_dtoa_r+0xdc>
 8011a96:	4b92      	ldr	r3, [pc, #584]	; (8011ce0 <_dtoa_r+0x2e0>)
 8011a98:	9301      	str	r3, [sp, #4]
 8011a9a:	3308      	adds	r3, #8
 8011a9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011a9e:	6013      	str	r3, [r2, #0]
 8011aa0:	9801      	ldr	r0, [sp, #4]
 8011aa2:	b013      	add	sp, #76	; 0x4c
 8011aa4:	ecbd 8b04 	vpop	{d8-d9}
 8011aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aac:	4b8b      	ldr	r3, [pc, #556]	; (8011cdc <_dtoa_r+0x2dc>)
 8011aae:	9301      	str	r3, [sp, #4]
 8011ab0:	3303      	adds	r3, #3
 8011ab2:	e7f3      	b.n	8011a9c <_dtoa_r+0x9c>
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	4650      	mov	r0, sl
 8011aba:	4659      	mov	r1, fp
 8011abc:	f7ef f804 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ac0:	ec4b ab19 	vmov	d9, sl, fp
 8011ac4:	4680      	mov	r8, r0
 8011ac6:	b158      	cbz	r0, 8011ae0 <_dtoa_r+0xe0>
 8011ac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011aca:	2301      	movs	r3, #1
 8011acc:	6013      	str	r3, [r2, #0]
 8011ace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	f000 856b 	beq.w	80125ac <_dtoa_r+0xbac>
 8011ad6:	4883      	ldr	r0, [pc, #524]	; (8011ce4 <_dtoa_r+0x2e4>)
 8011ad8:	6018      	str	r0, [r3, #0]
 8011ada:	1e43      	subs	r3, r0, #1
 8011adc:	9301      	str	r3, [sp, #4]
 8011ade:	e7df      	b.n	8011aa0 <_dtoa_r+0xa0>
 8011ae0:	ec4b ab10 	vmov	d0, sl, fp
 8011ae4:	aa10      	add	r2, sp, #64	; 0x40
 8011ae6:	a911      	add	r1, sp, #68	; 0x44
 8011ae8:	4620      	mov	r0, r4
 8011aea:	f001 fcf3 	bl	80134d4 <__d2b>
 8011aee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011af2:	ee08 0a10 	vmov	s16, r0
 8011af6:	2d00      	cmp	r5, #0
 8011af8:	f000 8084 	beq.w	8011c04 <_dtoa_r+0x204>
 8011afc:	ee19 3a90 	vmov	r3, s19
 8011b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011b08:	4656      	mov	r6, sl
 8011b0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011b0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011b12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011b16:	4b74      	ldr	r3, [pc, #464]	; (8011ce8 <_dtoa_r+0x2e8>)
 8011b18:	2200      	movs	r2, #0
 8011b1a:	4630      	mov	r0, r6
 8011b1c:	4639      	mov	r1, r7
 8011b1e:	f7ee fbb3 	bl	8000288 <__aeabi_dsub>
 8011b22:	a365      	add	r3, pc, #404	; (adr r3, 8011cb8 <_dtoa_r+0x2b8>)
 8011b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b28:	f7ee fd66 	bl	80005f8 <__aeabi_dmul>
 8011b2c:	a364      	add	r3, pc, #400	; (adr r3, 8011cc0 <_dtoa_r+0x2c0>)
 8011b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b32:	f7ee fbab 	bl	800028c <__adddf3>
 8011b36:	4606      	mov	r6, r0
 8011b38:	4628      	mov	r0, r5
 8011b3a:	460f      	mov	r7, r1
 8011b3c:	f7ee fcf2 	bl	8000524 <__aeabi_i2d>
 8011b40:	a361      	add	r3, pc, #388	; (adr r3, 8011cc8 <_dtoa_r+0x2c8>)
 8011b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b46:	f7ee fd57 	bl	80005f8 <__aeabi_dmul>
 8011b4a:	4602      	mov	r2, r0
 8011b4c:	460b      	mov	r3, r1
 8011b4e:	4630      	mov	r0, r6
 8011b50:	4639      	mov	r1, r7
 8011b52:	f7ee fb9b 	bl	800028c <__adddf3>
 8011b56:	4606      	mov	r6, r0
 8011b58:	460f      	mov	r7, r1
 8011b5a:	f7ee fffd 	bl	8000b58 <__aeabi_d2iz>
 8011b5e:	2200      	movs	r2, #0
 8011b60:	9000      	str	r0, [sp, #0]
 8011b62:	2300      	movs	r3, #0
 8011b64:	4630      	mov	r0, r6
 8011b66:	4639      	mov	r1, r7
 8011b68:	f7ee ffb8 	bl	8000adc <__aeabi_dcmplt>
 8011b6c:	b150      	cbz	r0, 8011b84 <_dtoa_r+0x184>
 8011b6e:	9800      	ldr	r0, [sp, #0]
 8011b70:	f7ee fcd8 	bl	8000524 <__aeabi_i2d>
 8011b74:	4632      	mov	r2, r6
 8011b76:	463b      	mov	r3, r7
 8011b78:	f7ee ffa6 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b7c:	b910      	cbnz	r0, 8011b84 <_dtoa_r+0x184>
 8011b7e:	9b00      	ldr	r3, [sp, #0]
 8011b80:	3b01      	subs	r3, #1
 8011b82:	9300      	str	r3, [sp, #0]
 8011b84:	9b00      	ldr	r3, [sp, #0]
 8011b86:	2b16      	cmp	r3, #22
 8011b88:	d85a      	bhi.n	8011c40 <_dtoa_r+0x240>
 8011b8a:	9a00      	ldr	r2, [sp, #0]
 8011b8c:	4b57      	ldr	r3, [pc, #348]	; (8011cec <_dtoa_r+0x2ec>)
 8011b8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b96:	ec51 0b19 	vmov	r0, r1, d9
 8011b9a:	f7ee ff9f 	bl	8000adc <__aeabi_dcmplt>
 8011b9e:	2800      	cmp	r0, #0
 8011ba0:	d050      	beq.n	8011c44 <_dtoa_r+0x244>
 8011ba2:	9b00      	ldr	r3, [sp, #0]
 8011ba4:	3b01      	subs	r3, #1
 8011ba6:	9300      	str	r3, [sp, #0]
 8011ba8:	2300      	movs	r3, #0
 8011baa:	930b      	str	r3, [sp, #44]	; 0x2c
 8011bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011bae:	1b5d      	subs	r5, r3, r5
 8011bb0:	1e6b      	subs	r3, r5, #1
 8011bb2:	9305      	str	r3, [sp, #20]
 8011bb4:	bf45      	ittet	mi
 8011bb6:	f1c5 0301 	rsbmi	r3, r5, #1
 8011bba:	9304      	strmi	r3, [sp, #16]
 8011bbc:	2300      	movpl	r3, #0
 8011bbe:	2300      	movmi	r3, #0
 8011bc0:	bf4c      	ite	mi
 8011bc2:	9305      	strmi	r3, [sp, #20]
 8011bc4:	9304      	strpl	r3, [sp, #16]
 8011bc6:	9b00      	ldr	r3, [sp, #0]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	db3d      	blt.n	8011c48 <_dtoa_r+0x248>
 8011bcc:	9b05      	ldr	r3, [sp, #20]
 8011bce:	9a00      	ldr	r2, [sp, #0]
 8011bd0:	920a      	str	r2, [sp, #40]	; 0x28
 8011bd2:	4413      	add	r3, r2
 8011bd4:	9305      	str	r3, [sp, #20]
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	9307      	str	r3, [sp, #28]
 8011bda:	9b06      	ldr	r3, [sp, #24]
 8011bdc:	2b09      	cmp	r3, #9
 8011bde:	f200 8089 	bhi.w	8011cf4 <_dtoa_r+0x2f4>
 8011be2:	2b05      	cmp	r3, #5
 8011be4:	bfc4      	itt	gt
 8011be6:	3b04      	subgt	r3, #4
 8011be8:	9306      	strgt	r3, [sp, #24]
 8011bea:	9b06      	ldr	r3, [sp, #24]
 8011bec:	f1a3 0302 	sub.w	r3, r3, #2
 8011bf0:	bfcc      	ite	gt
 8011bf2:	2500      	movgt	r5, #0
 8011bf4:	2501      	movle	r5, #1
 8011bf6:	2b03      	cmp	r3, #3
 8011bf8:	f200 8087 	bhi.w	8011d0a <_dtoa_r+0x30a>
 8011bfc:	e8df f003 	tbb	[pc, r3]
 8011c00:	59383a2d 	.word	0x59383a2d
 8011c04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011c08:	441d      	add	r5, r3
 8011c0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011c0e:	2b20      	cmp	r3, #32
 8011c10:	bfc1      	itttt	gt
 8011c12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011c16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011c1a:	fa0b f303 	lslgt.w	r3, fp, r3
 8011c1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011c22:	bfda      	itte	le
 8011c24:	f1c3 0320 	rsble	r3, r3, #32
 8011c28:	fa06 f003 	lslle.w	r0, r6, r3
 8011c2c:	4318      	orrgt	r0, r3
 8011c2e:	f7ee fc69 	bl	8000504 <__aeabi_ui2d>
 8011c32:	2301      	movs	r3, #1
 8011c34:	4606      	mov	r6, r0
 8011c36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011c3a:	3d01      	subs	r5, #1
 8011c3c:	930e      	str	r3, [sp, #56]	; 0x38
 8011c3e:	e76a      	b.n	8011b16 <_dtoa_r+0x116>
 8011c40:	2301      	movs	r3, #1
 8011c42:	e7b2      	b.n	8011baa <_dtoa_r+0x1aa>
 8011c44:	900b      	str	r0, [sp, #44]	; 0x2c
 8011c46:	e7b1      	b.n	8011bac <_dtoa_r+0x1ac>
 8011c48:	9b04      	ldr	r3, [sp, #16]
 8011c4a:	9a00      	ldr	r2, [sp, #0]
 8011c4c:	1a9b      	subs	r3, r3, r2
 8011c4e:	9304      	str	r3, [sp, #16]
 8011c50:	4253      	negs	r3, r2
 8011c52:	9307      	str	r3, [sp, #28]
 8011c54:	2300      	movs	r3, #0
 8011c56:	930a      	str	r3, [sp, #40]	; 0x28
 8011c58:	e7bf      	b.n	8011bda <_dtoa_r+0x1da>
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	9308      	str	r3, [sp, #32]
 8011c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	dc55      	bgt.n	8011d10 <_dtoa_r+0x310>
 8011c64:	2301      	movs	r3, #1
 8011c66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8011c6e:	e00c      	b.n	8011c8a <_dtoa_r+0x28a>
 8011c70:	2301      	movs	r3, #1
 8011c72:	e7f3      	b.n	8011c5c <_dtoa_r+0x25c>
 8011c74:	2300      	movs	r3, #0
 8011c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c78:	9308      	str	r3, [sp, #32]
 8011c7a:	9b00      	ldr	r3, [sp, #0]
 8011c7c:	4413      	add	r3, r2
 8011c7e:	9302      	str	r3, [sp, #8]
 8011c80:	3301      	adds	r3, #1
 8011c82:	2b01      	cmp	r3, #1
 8011c84:	9303      	str	r3, [sp, #12]
 8011c86:	bfb8      	it	lt
 8011c88:	2301      	movlt	r3, #1
 8011c8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	6042      	str	r2, [r0, #4]
 8011c90:	2204      	movs	r2, #4
 8011c92:	f102 0614 	add.w	r6, r2, #20
 8011c96:	429e      	cmp	r6, r3
 8011c98:	6841      	ldr	r1, [r0, #4]
 8011c9a:	d93d      	bls.n	8011d18 <_dtoa_r+0x318>
 8011c9c:	4620      	mov	r0, r4
 8011c9e:	f001 f82b 	bl	8012cf8 <_Balloc>
 8011ca2:	9001      	str	r0, [sp, #4]
 8011ca4:	2800      	cmp	r0, #0
 8011ca6:	d13b      	bne.n	8011d20 <_dtoa_r+0x320>
 8011ca8:	4b11      	ldr	r3, [pc, #68]	; (8011cf0 <_dtoa_r+0x2f0>)
 8011caa:	4602      	mov	r2, r0
 8011cac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011cb0:	e6c0      	b.n	8011a34 <_dtoa_r+0x34>
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	e7df      	b.n	8011c76 <_dtoa_r+0x276>
 8011cb6:	bf00      	nop
 8011cb8:	636f4361 	.word	0x636f4361
 8011cbc:	3fd287a7 	.word	0x3fd287a7
 8011cc0:	8b60c8b3 	.word	0x8b60c8b3
 8011cc4:	3fc68a28 	.word	0x3fc68a28
 8011cc8:	509f79fb 	.word	0x509f79fb
 8011ccc:	3fd34413 	.word	0x3fd34413
 8011cd0:	080154a6 	.word	0x080154a6
 8011cd4:	080154bd 	.word	0x080154bd
 8011cd8:	7ff00000 	.word	0x7ff00000
 8011cdc:	080154a2 	.word	0x080154a2
 8011ce0:	08015499 	.word	0x08015499
 8011ce4:	0801531d 	.word	0x0801531d
 8011ce8:	3ff80000 	.word	0x3ff80000
 8011cec:	08015628 	.word	0x08015628
 8011cf0:	08015518 	.word	0x08015518
 8011cf4:	2501      	movs	r5, #1
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	9306      	str	r3, [sp, #24]
 8011cfa:	9508      	str	r5, [sp, #32]
 8011cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011d04:	2200      	movs	r2, #0
 8011d06:	2312      	movs	r3, #18
 8011d08:	e7b0      	b.n	8011c6c <_dtoa_r+0x26c>
 8011d0a:	2301      	movs	r3, #1
 8011d0c:	9308      	str	r3, [sp, #32]
 8011d0e:	e7f5      	b.n	8011cfc <_dtoa_r+0x2fc>
 8011d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011d16:	e7b8      	b.n	8011c8a <_dtoa_r+0x28a>
 8011d18:	3101      	adds	r1, #1
 8011d1a:	6041      	str	r1, [r0, #4]
 8011d1c:	0052      	lsls	r2, r2, #1
 8011d1e:	e7b8      	b.n	8011c92 <_dtoa_r+0x292>
 8011d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d22:	9a01      	ldr	r2, [sp, #4]
 8011d24:	601a      	str	r2, [r3, #0]
 8011d26:	9b03      	ldr	r3, [sp, #12]
 8011d28:	2b0e      	cmp	r3, #14
 8011d2a:	f200 809d 	bhi.w	8011e68 <_dtoa_r+0x468>
 8011d2e:	2d00      	cmp	r5, #0
 8011d30:	f000 809a 	beq.w	8011e68 <_dtoa_r+0x468>
 8011d34:	9b00      	ldr	r3, [sp, #0]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	dd32      	ble.n	8011da0 <_dtoa_r+0x3a0>
 8011d3a:	4ab7      	ldr	r2, [pc, #732]	; (8012018 <_dtoa_r+0x618>)
 8011d3c:	f003 030f 	and.w	r3, r3, #15
 8011d40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011d44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011d48:	9b00      	ldr	r3, [sp, #0]
 8011d4a:	05d8      	lsls	r0, r3, #23
 8011d4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011d50:	d516      	bpl.n	8011d80 <_dtoa_r+0x380>
 8011d52:	4bb2      	ldr	r3, [pc, #712]	; (801201c <_dtoa_r+0x61c>)
 8011d54:	ec51 0b19 	vmov	r0, r1, d9
 8011d58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011d5c:	f7ee fd76 	bl	800084c <__aeabi_ddiv>
 8011d60:	f007 070f 	and.w	r7, r7, #15
 8011d64:	4682      	mov	sl, r0
 8011d66:	468b      	mov	fp, r1
 8011d68:	2503      	movs	r5, #3
 8011d6a:	4eac      	ldr	r6, [pc, #688]	; (801201c <_dtoa_r+0x61c>)
 8011d6c:	b957      	cbnz	r7, 8011d84 <_dtoa_r+0x384>
 8011d6e:	4642      	mov	r2, r8
 8011d70:	464b      	mov	r3, r9
 8011d72:	4650      	mov	r0, sl
 8011d74:	4659      	mov	r1, fp
 8011d76:	f7ee fd69 	bl	800084c <__aeabi_ddiv>
 8011d7a:	4682      	mov	sl, r0
 8011d7c:	468b      	mov	fp, r1
 8011d7e:	e028      	b.n	8011dd2 <_dtoa_r+0x3d2>
 8011d80:	2502      	movs	r5, #2
 8011d82:	e7f2      	b.n	8011d6a <_dtoa_r+0x36a>
 8011d84:	07f9      	lsls	r1, r7, #31
 8011d86:	d508      	bpl.n	8011d9a <_dtoa_r+0x39a>
 8011d88:	4640      	mov	r0, r8
 8011d8a:	4649      	mov	r1, r9
 8011d8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011d90:	f7ee fc32 	bl	80005f8 <__aeabi_dmul>
 8011d94:	3501      	adds	r5, #1
 8011d96:	4680      	mov	r8, r0
 8011d98:	4689      	mov	r9, r1
 8011d9a:	107f      	asrs	r7, r7, #1
 8011d9c:	3608      	adds	r6, #8
 8011d9e:	e7e5      	b.n	8011d6c <_dtoa_r+0x36c>
 8011da0:	f000 809b 	beq.w	8011eda <_dtoa_r+0x4da>
 8011da4:	9b00      	ldr	r3, [sp, #0]
 8011da6:	4f9d      	ldr	r7, [pc, #628]	; (801201c <_dtoa_r+0x61c>)
 8011da8:	425e      	negs	r6, r3
 8011daa:	4b9b      	ldr	r3, [pc, #620]	; (8012018 <_dtoa_r+0x618>)
 8011dac:	f006 020f 	and.w	r2, r6, #15
 8011db0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db8:	ec51 0b19 	vmov	r0, r1, d9
 8011dbc:	f7ee fc1c 	bl	80005f8 <__aeabi_dmul>
 8011dc0:	1136      	asrs	r6, r6, #4
 8011dc2:	4682      	mov	sl, r0
 8011dc4:	468b      	mov	fp, r1
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	2502      	movs	r5, #2
 8011dca:	2e00      	cmp	r6, #0
 8011dcc:	d17a      	bne.n	8011ec4 <_dtoa_r+0x4c4>
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d1d3      	bne.n	8011d7a <_dtoa_r+0x37a>
 8011dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	f000 8082 	beq.w	8011ede <_dtoa_r+0x4de>
 8011dda:	4b91      	ldr	r3, [pc, #580]	; (8012020 <_dtoa_r+0x620>)
 8011ddc:	2200      	movs	r2, #0
 8011dde:	4650      	mov	r0, sl
 8011de0:	4659      	mov	r1, fp
 8011de2:	f7ee fe7b 	bl	8000adc <__aeabi_dcmplt>
 8011de6:	2800      	cmp	r0, #0
 8011de8:	d079      	beq.n	8011ede <_dtoa_r+0x4de>
 8011dea:	9b03      	ldr	r3, [sp, #12]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d076      	beq.n	8011ede <_dtoa_r+0x4de>
 8011df0:	9b02      	ldr	r3, [sp, #8]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	dd36      	ble.n	8011e64 <_dtoa_r+0x464>
 8011df6:	9b00      	ldr	r3, [sp, #0]
 8011df8:	4650      	mov	r0, sl
 8011dfa:	4659      	mov	r1, fp
 8011dfc:	1e5f      	subs	r7, r3, #1
 8011dfe:	2200      	movs	r2, #0
 8011e00:	4b88      	ldr	r3, [pc, #544]	; (8012024 <_dtoa_r+0x624>)
 8011e02:	f7ee fbf9 	bl	80005f8 <__aeabi_dmul>
 8011e06:	9e02      	ldr	r6, [sp, #8]
 8011e08:	4682      	mov	sl, r0
 8011e0a:	468b      	mov	fp, r1
 8011e0c:	3501      	adds	r5, #1
 8011e0e:	4628      	mov	r0, r5
 8011e10:	f7ee fb88 	bl	8000524 <__aeabi_i2d>
 8011e14:	4652      	mov	r2, sl
 8011e16:	465b      	mov	r3, fp
 8011e18:	f7ee fbee 	bl	80005f8 <__aeabi_dmul>
 8011e1c:	4b82      	ldr	r3, [pc, #520]	; (8012028 <_dtoa_r+0x628>)
 8011e1e:	2200      	movs	r2, #0
 8011e20:	f7ee fa34 	bl	800028c <__adddf3>
 8011e24:	46d0      	mov	r8, sl
 8011e26:	46d9      	mov	r9, fp
 8011e28:	4682      	mov	sl, r0
 8011e2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011e2e:	2e00      	cmp	r6, #0
 8011e30:	d158      	bne.n	8011ee4 <_dtoa_r+0x4e4>
 8011e32:	4b7e      	ldr	r3, [pc, #504]	; (801202c <_dtoa_r+0x62c>)
 8011e34:	2200      	movs	r2, #0
 8011e36:	4640      	mov	r0, r8
 8011e38:	4649      	mov	r1, r9
 8011e3a:	f7ee fa25 	bl	8000288 <__aeabi_dsub>
 8011e3e:	4652      	mov	r2, sl
 8011e40:	465b      	mov	r3, fp
 8011e42:	4680      	mov	r8, r0
 8011e44:	4689      	mov	r9, r1
 8011e46:	f7ee fe67 	bl	8000b18 <__aeabi_dcmpgt>
 8011e4a:	2800      	cmp	r0, #0
 8011e4c:	f040 8295 	bne.w	801237a <_dtoa_r+0x97a>
 8011e50:	4652      	mov	r2, sl
 8011e52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011e56:	4640      	mov	r0, r8
 8011e58:	4649      	mov	r1, r9
 8011e5a:	f7ee fe3f 	bl	8000adc <__aeabi_dcmplt>
 8011e5e:	2800      	cmp	r0, #0
 8011e60:	f040 8289 	bne.w	8012376 <_dtoa_r+0x976>
 8011e64:	ec5b ab19 	vmov	sl, fp, d9
 8011e68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	f2c0 8148 	blt.w	8012100 <_dtoa_r+0x700>
 8011e70:	9a00      	ldr	r2, [sp, #0]
 8011e72:	2a0e      	cmp	r2, #14
 8011e74:	f300 8144 	bgt.w	8012100 <_dtoa_r+0x700>
 8011e78:	4b67      	ldr	r3, [pc, #412]	; (8012018 <_dtoa_r+0x618>)
 8011e7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011e7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	f280 80d5 	bge.w	8012034 <_dtoa_r+0x634>
 8011e8a:	9b03      	ldr	r3, [sp, #12]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	f300 80d1 	bgt.w	8012034 <_dtoa_r+0x634>
 8011e92:	f040 826f 	bne.w	8012374 <_dtoa_r+0x974>
 8011e96:	4b65      	ldr	r3, [pc, #404]	; (801202c <_dtoa_r+0x62c>)
 8011e98:	2200      	movs	r2, #0
 8011e9a:	4640      	mov	r0, r8
 8011e9c:	4649      	mov	r1, r9
 8011e9e:	f7ee fbab 	bl	80005f8 <__aeabi_dmul>
 8011ea2:	4652      	mov	r2, sl
 8011ea4:	465b      	mov	r3, fp
 8011ea6:	f7ee fe2d 	bl	8000b04 <__aeabi_dcmpge>
 8011eaa:	9e03      	ldr	r6, [sp, #12]
 8011eac:	4637      	mov	r7, r6
 8011eae:	2800      	cmp	r0, #0
 8011eb0:	f040 8245 	bne.w	801233e <_dtoa_r+0x93e>
 8011eb4:	9d01      	ldr	r5, [sp, #4]
 8011eb6:	2331      	movs	r3, #49	; 0x31
 8011eb8:	f805 3b01 	strb.w	r3, [r5], #1
 8011ebc:	9b00      	ldr	r3, [sp, #0]
 8011ebe:	3301      	adds	r3, #1
 8011ec0:	9300      	str	r3, [sp, #0]
 8011ec2:	e240      	b.n	8012346 <_dtoa_r+0x946>
 8011ec4:	07f2      	lsls	r2, r6, #31
 8011ec6:	d505      	bpl.n	8011ed4 <_dtoa_r+0x4d4>
 8011ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ecc:	f7ee fb94 	bl	80005f8 <__aeabi_dmul>
 8011ed0:	3501      	adds	r5, #1
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	1076      	asrs	r6, r6, #1
 8011ed6:	3708      	adds	r7, #8
 8011ed8:	e777      	b.n	8011dca <_dtoa_r+0x3ca>
 8011eda:	2502      	movs	r5, #2
 8011edc:	e779      	b.n	8011dd2 <_dtoa_r+0x3d2>
 8011ede:	9f00      	ldr	r7, [sp, #0]
 8011ee0:	9e03      	ldr	r6, [sp, #12]
 8011ee2:	e794      	b.n	8011e0e <_dtoa_r+0x40e>
 8011ee4:	9901      	ldr	r1, [sp, #4]
 8011ee6:	4b4c      	ldr	r3, [pc, #304]	; (8012018 <_dtoa_r+0x618>)
 8011ee8:	4431      	add	r1, r6
 8011eea:	910d      	str	r1, [sp, #52]	; 0x34
 8011eec:	9908      	ldr	r1, [sp, #32]
 8011eee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011ef2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011ef6:	2900      	cmp	r1, #0
 8011ef8:	d043      	beq.n	8011f82 <_dtoa_r+0x582>
 8011efa:	494d      	ldr	r1, [pc, #308]	; (8012030 <_dtoa_r+0x630>)
 8011efc:	2000      	movs	r0, #0
 8011efe:	f7ee fca5 	bl	800084c <__aeabi_ddiv>
 8011f02:	4652      	mov	r2, sl
 8011f04:	465b      	mov	r3, fp
 8011f06:	f7ee f9bf 	bl	8000288 <__aeabi_dsub>
 8011f0a:	9d01      	ldr	r5, [sp, #4]
 8011f0c:	4682      	mov	sl, r0
 8011f0e:	468b      	mov	fp, r1
 8011f10:	4649      	mov	r1, r9
 8011f12:	4640      	mov	r0, r8
 8011f14:	f7ee fe20 	bl	8000b58 <__aeabi_d2iz>
 8011f18:	4606      	mov	r6, r0
 8011f1a:	f7ee fb03 	bl	8000524 <__aeabi_i2d>
 8011f1e:	4602      	mov	r2, r0
 8011f20:	460b      	mov	r3, r1
 8011f22:	4640      	mov	r0, r8
 8011f24:	4649      	mov	r1, r9
 8011f26:	f7ee f9af 	bl	8000288 <__aeabi_dsub>
 8011f2a:	3630      	adds	r6, #48	; 0x30
 8011f2c:	f805 6b01 	strb.w	r6, [r5], #1
 8011f30:	4652      	mov	r2, sl
 8011f32:	465b      	mov	r3, fp
 8011f34:	4680      	mov	r8, r0
 8011f36:	4689      	mov	r9, r1
 8011f38:	f7ee fdd0 	bl	8000adc <__aeabi_dcmplt>
 8011f3c:	2800      	cmp	r0, #0
 8011f3e:	d163      	bne.n	8012008 <_dtoa_r+0x608>
 8011f40:	4642      	mov	r2, r8
 8011f42:	464b      	mov	r3, r9
 8011f44:	4936      	ldr	r1, [pc, #216]	; (8012020 <_dtoa_r+0x620>)
 8011f46:	2000      	movs	r0, #0
 8011f48:	f7ee f99e 	bl	8000288 <__aeabi_dsub>
 8011f4c:	4652      	mov	r2, sl
 8011f4e:	465b      	mov	r3, fp
 8011f50:	f7ee fdc4 	bl	8000adc <__aeabi_dcmplt>
 8011f54:	2800      	cmp	r0, #0
 8011f56:	f040 80b5 	bne.w	80120c4 <_dtoa_r+0x6c4>
 8011f5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f5c:	429d      	cmp	r5, r3
 8011f5e:	d081      	beq.n	8011e64 <_dtoa_r+0x464>
 8011f60:	4b30      	ldr	r3, [pc, #192]	; (8012024 <_dtoa_r+0x624>)
 8011f62:	2200      	movs	r2, #0
 8011f64:	4650      	mov	r0, sl
 8011f66:	4659      	mov	r1, fp
 8011f68:	f7ee fb46 	bl	80005f8 <__aeabi_dmul>
 8011f6c:	4b2d      	ldr	r3, [pc, #180]	; (8012024 <_dtoa_r+0x624>)
 8011f6e:	4682      	mov	sl, r0
 8011f70:	468b      	mov	fp, r1
 8011f72:	4640      	mov	r0, r8
 8011f74:	4649      	mov	r1, r9
 8011f76:	2200      	movs	r2, #0
 8011f78:	f7ee fb3e 	bl	80005f8 <__aeabi_dmul>
 8011f7c:	4680      	mov	r8, r0
 8011f7e:	4689      	mov	r9, r1
 8011f80:	e7c6      	b.n	8011f10 <_dtoa_r+0x510>
 8011f82:	4650      	mov	r0, sl
 8011f84:	4659      	mov	r1, fp
 8011f86:	f7ee fb37 	bl	80005f8 <__aeabi_dmul>
 8011f8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f8c:	9d01      	ldr	r5, [sp, #4]
 8011f8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f90:	4682      	mov	sl, r0
 8011f92:	468b      	mov	fp, r1
 8011f94:	4649      	mov	r1, r9
 8011f96:	4640      	mov	r0, r8
 8011f98:	f7ee fdde 	bl	8000b58 <__aeabi_d2iz>
 8011f9c:	4606      	mov	r6, r0
 8011f9e:	f7ee fac1 	bl	8000524 <__aeabi_i2d>
 8011fa2:	3630      	adds	r6, #48	; 0x30
 8011fa4:	4602      	mov	r2, r0
 8011fa6:	460b      	mov	r3, r1
 8011fa8:	4640      	mov	r0, r8
 8011faa:	4649      	mov	r1, r9
 8011fac:	f7ee f96c 	bl	8000288 <__aeabi_dsub>
 8011fb0:	f805 6b01 	strb.w	r6, [r5], #1
 8011fb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fb6:	429d      	cmp	r5, r3
 8011fb8:	4680      	mov	r8, r0
 8011fba:	4689      	mov	r9, r1
 8011fbc:	f04f 0200 	mov.w	r2, #0
 8011fc0:	d124      	bne.n	801200c <_dtoa_r+0x60c>
 8011fc2:	4b1b      	ldr	r3, [pc, #108]	; (8012030 <_dtoa_r+0x630>)
 8011fc4:	4650      	mov	r0, sl
 8011fc6:	4659      	mov	r1, fp
 8011fc8:	f7ee f960 	bl	800028c <__adddf3>
 8011fcc:	4602      	mov	r2, r0
 8011fce:	460b      	mov	r3, r1
 8011fd0:	4640      	mov	r0, r8
 8011fd2:	4649      	mov	r1, r9
 8011fd4:	f7ee fda0 	bl	8000b18 <__aeabi_dcmpgt>
 8011fd8:	2800      	cmp	r0, #0
 8011fda:	d173      	bne.n	80120c4 <_dtoa_r+0x6c4>
 8011fdc:	4652      	mov	r2, sl
 8011fde:	465b      	mov	r3, fp
 8011fe0:	4913      	ldr	r1, [pc, #76]	; (8012030 <_dtoa_r+0x630>)
 8011fe2:	2000      	movs	r0, #0
 8011fe4:	f7ee f950 	bl	8000288 <__aeabi_dsub>
 8011fe8:	4602      	mov	r2, r0
 8011fea:	460b      	mov	r3, r1
 8011fec:	4640      	mov	r0, r8
 8011fee:	4649      	mov	r1, r9
 8011ff0:	f7ee fd74 	bl	8000adc <__aeabi_dcmplt>
 8011ff4:	2800      	cmp	r0, #0
 8011ff6:	f43f af35 	beq.w	8011e64 <_dtoa_r+0x464>
 8011ffa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011ffc:	1e6b      	subs	r3, r5, #1
 8011ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 8012000:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012004:	2b30      	cmp	r3, #48	; 0x30
 8012006:	d0f8      	beq.n	8011ffa <_dtoa_r+0x5fa>
 8012008:	9700      	str	r7, [sp, #0]
 801200a:	e049      	b.n	80120a0 <_dtoa_r+0x6a0>
 801200c:	4b05      	ldr	r3, [pc, #20]	; (8012024 <_dtoa_r+0x624>)
 801200e:	f7ee faf3 	bl	80005f8 <__aeabi_dmul>
 8012012:	4680      	mov	r8, r0
 8012014:	4689      	mov	r9, r1
 8012016:	e7bd      	b.n	8011f94 <_dtoa_r+0x594>
 8012018:	08015628 	.word	0x08015628
 801201c:	08015600 	.word	0x08015600
 8012020:	3ff00000 	.word	0x3ff00000
 8012024:	40240000 	.word	0x40240000
 8012028:	401c0000 	.word	0x401c0000
 801202c:	40140000 	.word	0x40140000
 8012030:	3fe00000 	.word	0x3fe00000
 8012034:	9d01      	ldr	r5, [sp, #4]
 8012036:	4656      	mov	r6, sl
 8012038:	465f      	mov	r7, fp
 801203a:	4642      	mov	r2, r8
 801203c:	464b      	mov	r3, r9
 801203e:	4630      	mov	r0, r6
 8012040:	4639      	mov	r1, r7
 8012042:	f7ee fc03 	bl	800084c <__aeabi_ddiv>
 8012046:	f7ee fd87 	bl	8000b58 <__aeabi_d2iz>
 801204a:	4682      	mov	sl, r0
 801204c:	f7ee fa6a 	bl	8000524 <__aeabi_i2d>
 8012050:	4642      	mov	r2, r8
 8012052:	464b      	mov	r3, r9
 8012054:	f7ee fad0 	bl	80005f8 <__aeabi_dmul>
 8012058:	4602      	mov	r2, r0
 801205a:	460b      	mov	r3, r1
 801205c:	4630      	mov	r0, r6
 801205e:	4639      	mov	r1, r7
 8012060:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012064:	f7ee f910 	bl	8000288 <__aeabi_dsub>
 8012068:	f805 6b01 	strb.w	r6, [r5], #1
 801206c:	9e01      	ldr	r6, [sp, #4]
 801206e:	9f03      	ldr	r7, [sp, #12]
 8012070:	1bae      	subs	r6, r5, r6
 8012072:	42b7      	cmp	r7, r6
 8012074:	4602      	mov	r2, r0
 8012076:	460b      	mov	r3, r1
 8012078:	d135      	bne.n	80120e6 <_dtoa_r+0x6e6>
 801207a:	f7ee f907 	bl	800028c <__adddf3>
 801207e:	4642      	mov	r2, r8
 8012080:	464b      	mov	r3, r9
 8012082:	4606      	mov	r6, r0
 8012084:	460f      	mov	r7, r1
 8012086:	f7ee fd47 	bl	8000b18 <__aeabi_dcmpgt>
 801208a:	b9d0      	cbnz	r0, 80120c2 <_dtoa_r+0x6c2>
 801208c:	4642      	mov	r2, r8
 801208e:	464b      	mov	r3, r9
 8012090:	4630      	mov	r0, r6
 8012092:	4639      	mov	r1, r7
 8012094:	f7ee fd18 	bl	8000ac8 <__aeabi_dcmpeq>
 8012098:	b110      	cbz	r0, 80120a0 <_dtoa_r+0x6a0>
 801209a:	f01a 0f01 	tst.w	sl, #1
 801209e:	d110      	bne.n	80120c2 <_dtoa_r+0x6c2>
 80120a0:	4620      	mov	r0, r4
 80120a2:	ee18 1a10 	vmov	r1, s16
 80120a6:	f000 fe67 	bl	8012d78 <_Bfree>
 80120aa:	2300      	movs	r3, #0
 80120ac:	9800      	ldr	r0, [sp, #0]
 80120ae:	702b      	strb	r3, [r5, #0]
 80120b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120b2:	3001      	adds	r0, #1
 80120b4:	6018      	str	r0, [r3, #0]
 80120b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	f43f acf1 	beq.w	8011aa0 <_dtoa_r+0xa0>
 80120be:	601d      	str	r5, [r3, #0]
 80120c0:	e4ee      	b.n	8011aa0 <_dtoa_r+0xa0>
 80120c2:	9f00      	ldr	r7, [sp, #0]
 80120c4:	462b      	mov	r3, r5
 80120c6:	461d      	mov	r5, r3
 80120c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80120cc:	2a39      	cmp	r2, #57	; 0x39
 80120ce:	d106      	bne.n	80120de <_dtoa_r+0x6de>
 80120d0:	9a01      	ldr	r2, [sp, #4]
 80120d2:	429a      	cmp	r2, r3
 80120d4:	d1f7      	bne.n	80120c6 <_dtoa_r+0x6c6>
 80120d6:	9901      	ldr	r1, [sp, #4]
 80120d8:	2230      	movs	r2, #48	; 0x30
 80120da:	3701      	adds	r7, #1
 80120dc:	700a      	strb	r2, [r1, #0]
 80120de:	781a      	ldrb	r2, [r3, #0]
 80120e0:	3201      	adds	r2, #1
 80120e2:	701a      	strb	r2, [r3, #0]
 80120e4:	e790      	b.n	8012008 <_dtoa_r+0x608>
 80120e6:	4ba6      	ldr	r3, [pc, #664]	; (8012380 <_dtoa_r+0x980>)
 80120e8:	2200      	movs	r2, #0
 80120ea:	f7ee fa85 	bl	80005f8 <__aeabi_dmul>
 80120ee:	2200      	movs	r2, #0
 80120f0:	2300      	movs	r3, #0
 80120f2:	4606      	mov	r6, r0
 80120f4:	460f      	mov	r7, r1
 80120f6:	f7ee fce7 	bl	8000ac8 <__aeabi_dcmpeq>
 80120fa:	2800      	cmp	r0, #0
 80120fc:	d09d      	beq.n	801203a <_dtoa_r+0x63a>
 80120fe:	e7cf      	b.n	80120a0 <_dtoa_r+0x6a0>
 8012100:	9a08      	ldr	r2, [sp, #32]
 8012102:	2a00      	cmp	r2, #0
 8012104:	f000 80d7 	beq.w	80122b6 <_dtoa_r+0x8b6>
 8012108:	9a06      	ldr	r2, [sp, #24]
 801210a:	2a01      	cmp	r2, #1
 801210c:	f300 80ba 	bgt.w	8012284 <_dtoa_r+0x884>
 8012110:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012112:	2a00      	cmp	r2, #0
 8012114:	f000 80b2 	beq.w	801227c <_dtoa_r+0x87c>
 8012118:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801211c:	9e07      	ldr	r6, [sp, #28]
 801211e:	9d04      	ldr	r5, [sp, #16]
 8012120:	9a04      	ldr	r2, [sp, #16]
 8012122:	441a      	add	r2, r3
 8012124:	9204      	str	r2, [sp, #16]
 8012126:	9a05      	ldr	r2, [sp, #20]
 8012128:	2101      	movs	r1, #1
 801212a:	441a      	add	r2, r3
 801212c:	4620      	mov	r0, r4
 801212e:	9205      	str	r2, [sp, #20]
 8012130:	f000 ff24 	bl	8012f7c <__i2b>
 8012134:	4607      	mov	r7, r0
 8012136:	2d00      	cmp	r5, #0
 8012138:	dd0c      	ble.n	8012154 <_dtoa_r+0x754>
 801213a:	9b05      	ldr	r3, [sp, #20]
 801213c:	2b00      	cmp	r3, #0
 801213e:	dd09      	ble.n	8012154 <_dtoa_r+0x754>
 8012140:	42ab      	cmp	r3, r5
 8012142:	9a04      	ldr	r2, [sp, #16]
 8012144:	bfa8      	it	ge
 8012146:	462b      	movge	r3, r5
 8012148:	1ad2      	subs	r2, r2, r3
 801214a:	9204      	str	r2, [sp, #16]
 801214c:	9a05      	ldr	r2, [sp, #20]
 801214e:	1aed      	subs	r5, r5, r3
 8012150:	1ad3      	subs	r3, r2, r3
 8012152:	9305      	str	r3, [sp, #20]
 8012154:	9b07      	ldr	r3, [sp, #28]
 8012156:	b31b      	cbz	r3, 80121a0 <_dtoa_r+0x7a0>
 8012158:	9b08      	ldr	r3, [sp, #32]
 801215a:	2b00      	cmp	r3, #0
 801215c:	f000 80af 	beq.w	80122be <_dtoa_r+0x8be>
 8012160:	2e00      	cmp	r6, #0
 8012162:	dd13      	ble.n	801218c <_dtoa_r+0x78c>
 8012164:	4639      	mov	r1, r7
 8012166:	4632      	mov	r2, r6
 8012168:	4620      	mov	r0, r4
 801216a:	f000 ffc7 	bl	80130fc <__pow5mult>
 801216e:	ee18 2a10 	vmov	r2, s16
 8012172:	4601      	mov	r1, r0
 8012174:	4607      	mov	r7, r0
 8012176:	4620      	mov	r0, r4
 8012178:	f000 ff16 	bl	8012fa8 <__multiply>
 801217c:	ee18 1a10 	vmov	r1, s16
 8012180:	4680      	mov	r8, r0
 8012182:	4620      	mov	r0, r4
 8012184:	f000 fdf8 	bl	8012d78 <_Bfree>
 8012188:	ee08 8a10 	vmov	s16, r8
 801218c:	9b07      	ldr	r3, [sp, #28]
 801218e:	1b9a      	subs	r2, r3, r6
 8012190:	d006      	beq.n	80121a0 <_dtoa_r+0x7a0>
 8012192:	ee18 1a10 	vmov	r1, s16
 8012196:	4620      	mov	r0, r4
 8012198:	f000 ffb0 	bl	80130fc <__pow5mult>
 801219c:	ee08 0a10 	vmov	s16, r0
 80121a0:	2101      	movs	r1, #1
 80121a2:	4620      	mov	r0, r4
 80121a4:	f000 feea 	bl	8012f7c <__i2b>
 80121a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	4606      	mov	r6, r0
 80121ae:	f340 8088 	ble.w	80122c2 <_dtoa_r+0x8c2>
 80121b2:	461a      	mov	r2, r3
 80121b4:	4601      	mov	r1, r0
 80121b6:	4620      	mov	r0, r4
 80121b8:	f000 ffa0 	bl	80130fc <__pow5mult>
 80121bc:	9b06      	ldr	r3, [sp, #24]
 80121be:	2b01      	cmp	r3, #1
 80121c0:	4606      	mov	r6, r0
 80121c2:	f340 8081 	ble.w	80122c8 <_dtoa_r+0x8c8>
 80121c6:	f04f 0800 	mov.w	r8, #0
 80121ca:	6933      	ldr	r3, [r6, #16]
 80121cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80121d0:	6918      	ldr	r0, [r3, #16]
 80121d2:	f000 fe83 	bl	8012edc <__hi0bits>
 80121d6:	f1c0 0020 	rsb	r0, r0, #32
 80121da:	9b05      	ldr	r3, [sp, #20]
 80121dc:	4418      	add	r0, r3
 80121de:	f010 001f 	ands.w	r0, r0, #31
 80121e2:	f000 8092 	beq.w	801230a <_dtoa_r+0x90a>
 80121e6:	f1c0 0320 	rsb	r3, r0, #32
 80121ea:	2b04      	cmp	r3, #4
 80121ec:	f340 808a 	ble.w	8012304 <_dtoa_r+0x904>
 80121f0:	f1c0 001c 	rsb	r0, r0, #28
 80121f4:	9b04      	ldr	r3, [sp, #16]
 80121f6:	4403      	add	r3, r0
 80121f8:	9304      	str	r3, [sp, #16]
 80121fa:	9b05      	ldr	r3, [sp, #20]
 80121fc:	4403      	add	r3, r0
 80121fe:	4405      	add	r5, r0
 8012200:	9305      	str	r3, [sp, #20]
 8012202:	9b04      	ldr	r3, [sp, #16]
 8012204:	2b00      	cmp	r3, #0
 8012206:	dd07      	ble.n	8012218 <_dtoa_r+0x818>
 8012208:	ee18 1a10 	vmov	r1, s16
 801220c:	461a      	mov	r2, r3
 801220e:	4620      	mov	r0, r4
 8012210:	f000 ffce 	bl	80131b0 <__lshift>
 8012214:	ee08 0a10 	vmov	s16, r0
 8012218:	9b05      	ldr	r3, [sp, #20]
 801221a:	2b00      	cmp	r3, #0
 801221c:	dd05      	ble.n	801222a <_dtoa_r+0x82a>
 801221e:	4631      	mov	r1, r6
 8012220:	461a      	mov	r2, r3
 8012222:	4620      	mov	r0, r4
 8012224:	f000 ffc4 	bl	80131b0 <__lshift>
 8012228:	4606      	mov	r6, r0
 801222a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801222c:	2b00      	cmp	r3, #0
 801222e:	d06e      	beq.n	801230e <_dtoa_r+0x90e>
 8012230:	ee18 0a10 	vmov	r0, s16
 8012234:	4631      	mov	r1, r6
 8012236:	f001 f82b 	bl	8013290 <__mcmp>
 801223a:	2800      	cmp	r0, #0
 801223c:	da67      	bge.n	801230e <_dtoa_r+0x90e>
 801223e:	9b00      	ldr	r3, [sp, #0]
 8012240:	3b01      	subs	r3, #1
 8012242:	ee18 1a10 	vmov	r1, s16
 8012246:	9300      	str	r3, [sp, #0]
 8012248:	220a      	movs	r2, #10
 801224a:	2300      	movs	r3, #0
 801224c:	4620      	mov	r0, r4
 801224e:	f000 fdb5 	bl	8012dbc <__multadd>
 8012252:	9b08      	ldr	r3, [sp, #32]
 8012254:	ee08 0a10 	vmov	s16, r0
 8012258:	2b00      	cmp	r3, #0
 801225a:	f000 81b1 	beq.w	80125c0 <_dtoa_r+0xbc0>
 801225e:	2300      	movs	r3, #0
 8012260:	4639      	mov	r1, r7
 8012262:	220a      	movs	r2, #10
 8012264:	4620      	mov	r0, r4
 8012266:	f000 fda9 	bl	8012dbc <__multadd>
 801226a:	9b02      	ldr	r3, [sp, #8]
 801226c:	2b00      	cmp	r3, #0
 801226e:	4607      	mov	r7, r0
 8012270:	f300 808e 	bgt.w	8012390 <_dtoa_r+0x990>
 8012274:	9b06      	ldr	r3, [sp, #24]
 8012276:	2b02      	cmp	r3, #2
 8012278:	dc51      	bgt.n	801231e <_dtoa_r+0x91e>
 801227a:	e089      	b.n	8012390 <_dtoa_r+0x990>
 801227c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801227e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012282:	e74b      	b.n	801211c <_dtoa_r+0x71c>
 8012284:	9b03      	ldr	r3, [sp, #12]
 8012286:	1e5e      	subs	r6, r3, #1
 8012288:	9b07      	ldr	r3, [sp, #28]
 801228a:	42b3      	cmp	r3, r6
 801228c:	bfbf      	itttt	lt
 801228e:	9b07      	ldrlt	r3, [sp, #28]
 8012290:	9607      	strlt	r6, [sp, #28]
 8012292:	1af2      	sublt	r2, r6, r3
 8012294:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012296:	bfb6      	itet	lt
 8012298:	189b      	addlt	r3, r3, r2
 801229a:	1b9e      	subge	r6, r3, r6
 801229c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801229e:	9b03      	ldr	r3, [sp, #12]
 80122a0:	bfb8      	it	lt
 80122a2:	2600      	movlt	r6, #0
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	bfb7      	itett	lt
 80122a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80122ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80122b0:	1a9d      	sublt	r5, r3, r2
 80122b2:	2300      	movlt	r3, #0
 80122b4:	e734      	b.n	8012120 <_dtoa_r+0x720>
 80122b6:	9e07      	ldr	r6, [sp, #28]
 80122b8:	9d04      	ldr	r5, [sp, #16]
 80122ba:	9f08      	ldr	r7, [sp, #32]
 80122bc:	e73b      	b.n	8012136 <_dtoa_r+0x736>
 80122be:	9a07      	ldr	r2, [sp, #28]
 80122c0:	e767      	b.n	8012192 <_dtoa_r+0x792>
 80122c2:	9b06      	ldr	r3, [sp, #24]
 80122c4:	2b01      	cmp	r3, #1
 80122c6:	dc18      	bgt.n	80122fa <_dtoa_r+0x8fa>
 80122c8:	f1ba 0f00 	cmp.w	sl, #0
 80122cc:	d115      	bne.n	80122fa <_dtoa_r+0x8fa>
 80122ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80122d2:	b993      	cbnz	r3, 80122fa <_dtoa_r+0x8fa>
 80122d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80122d8:	0d1b      	lsrs	r3, r3, #20
 80122da:	051b      	lsls	r3, r3, #20
 80122dc:	b183      	cbz	r3, 8012300 <_dtoa_r+0x900>
 80122de:	9b04      	ldr	r3, [sp, #16]
 80122e0:	3301      	adds	r3, #1
 80122e2:	9304      	str	r3, [sp, #16]
 80122e4:	9b05      	ldr	r3, [sp, #20]
 80122e6:	3301      	adds	r3, #1
 80122e8:	9305      	str	r3, [sp, #20]
 80122ea:	f04f 0801 	mov.w	r8, #1
 80122ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	f47f af6a 	bne.w	80121ca <_dtoa_r+0x7ca>
 80122f6:	2001      	movs	r0, #1
 80122f8:	e76f      	b.n	80121da <_dtoa_r+0x7da>
 80122fa:	f04f 0800 	mov.w	r8, #0
 80122fe:	e7f6      	b.n	80122ee <_dtoa_r+0x8ee>
 8012300:	4698      	mov	r8, r3
 8012302:	e7f4      	b.n	80122ee <_dtoa_r+0x8ee>
 8012304:	f43f af7d 	beq.w	8012202 <_dtoa_r+0x802>
 8012308:	4618      	mov	r0, r3
 801230a:	301c      	adds	r0, #28
 801230c:	e772      	b.n	80121f4 <_dtoa_r+0x7f4>
 801230e:	9b03      	ldr	r3, [sp, #12]
 8012310:	2b00      	cmp	r3, #0
 8012312:	dc37      	bgt.n	8012384 <_dtoa_r+0x984>
 8012314:	9b06      	ldr	r3, [sp, #24]
 8012316:	2b02      	cmp	r3, #2
 8012318:	dd34      	ble.n	8012384 <_dtoa_r+0x984>
 801231a:	9b03      	ldr	r3, [sp, #12]
 801231c:	9302      	str	r3, [sp, #8]
 801231e:	9b02      	ldr	r3, [sp, #8]
 8012320:	b96b      	cbnz	r3, 801233e <_dtoa_r+0x93e>
 8012322:	4631      	mov	r1, r6
 8012324:	2205      	movs	r2, #5
 8012326:	4620      	mov	r0, r4
 8012328:	f000 fd48 	bl	8012dbc <__multadd>
 801232c:	4601      	mov	r1, r0
 801232e:	4606      	mov	r6, r0
 8012330:	ee18 0a10 	vmov	r0, s16
 8012334:	f000 ffac 	bl	8013290 <__mcmp>
 8012338:	2800      	cmp	r0, #0
 801233a:	f73f adbb 	bgt.w	8011eb4 <_dtoa_r+0x4b4>
 801233e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012340:	9d01      	ldr	r5, [sp, #4]
 8012342:	43db      	mvns	r3, r3
 8012344:	9300      	str	r3, [sp, #0]
 8012346:	f04f 0800 	mov.w	r8, #0
 801234a:	4631      	mov	r1, r6
 801234c:	4620      	mov	r0, r4
 801234e:	f000 fd13 	bl	8012d78 <_Bfree>
 8012352:	2f00      	cmp	r7, #0
 8012354:	f43f aea4 	beq.w	80120a0 <_dtoa_r+0x6a0>
 8012358:	f1b8 0f00 	cmp.w	r8, #0
 801235c:	d005      	beq.n	801236a <_dtoa_r+0x96a>
 801235e:	45b8      	cmp	r8, r7
 8012360:	d003      	beq.n	801236a <_dtoa_r+0x96a>
 8012362:	4641      	mov	r1, r8
 8012364:	4620      	mov	r0, r4
 8012366:	f000 fd07 	bl	8012d78 <_Bfree>
 801236a:	4639      	mov	r1, r7
 801236c:	4620      	mov	r0, r4
 801236e:	f000 fd03 	bl	8012d78 <_Bfree>
 8012372:	e695      	b.n	80120a0 <_dtoa_r+0x6a0>
 8012374:	2600      	movs	r6, #0
 8012376:	4637      	mov	r7, r6
 8012378:	e7e1      	b.n	801233e <_dtoa_r+0x93e>
 801237a:	9700      	str	r7, [sp, #0]
 801237c:	4637      	mov	r7, r6
 801237e:	e599      	b.n	8011eb4 <_dtoa_r+0x4b4>
 8012380:	40240000 	.word	0x40240000
 8012384:	9b08      	ldr	r3, [sp, #32]
 8012386:	2b00      	cmp	r3, #0
 8012388:	f000 80ca 	beq.w	8012520 <_dtoa_r+0xb20>
 801238c:	9b03      	ldr	r3, [sp, #12]
 801238e:	9302      	str	r3, [sp, #8]
 8012390:	2d00      	cmp	r5, #0
 8012392:	dd05      	ble.n	80123a0 <_dtoa_r+0x9a0>
 8012394:	4639      	mov	r1, r7
 8012396:	462a      	mov	r2, r5
 8012398:	4620      	mov	r0, r4
 801239a:	f000 ff09 	bl	80131b0 <__lshift>
 801239e:	4607      	mov	r7, r0
 80123a0:	f1b8 0f00 	cmp.w	r8, #0
 80123a4:	d05b      	beq.n	801245e <_dtoa_r+0xa5e>
 80123a6:	6879      	ldr	r1, [r7, #4]
 80123a8:	4620      	mov	r0, r4
 80123aa:	f000 fca5 	bl	8012cf8 <_Balloc>
 80123ae:	4605      	mov	r5, r0
 80123b0:	b928      	cbnz	r0, 80123be <_dtoa_r+0x9be>
 80123b2:	4b87      	ldr	r3, [pc, #540]	; (80125d0 <_dtoa_r+0xbd0>)
 80123b4:	4602      	mov	r2, r0
 80123b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80123ba:	f7ff bb3b 	b.w	8011a34 <_dtoa_r+0x34>
 80123be:	693a      	ldr	r2, [r7, #16]
 80123c0:	3202      	adds	r2, #2
 80123c2:	0092      	lsls	r2, r2, #2
 80123c4:	f107 010c 	add.w	r1, r7, #12
 80123c8:	300c      	adds	r0, #12
 80123ca:	f7fd fd29 	bl	800fe20 <memcpy>
 80123ce:	2201      	movs	r2, #1
 80123d0:	4629      	mov	r1, r5
 80123d2:	4620      	mov	r0, r4
 80123d4:	f000 feec 	bl	80131b0 <__lshift>
 80123d8:	9b01      	ldr	r3, [sp, #4]
 80123da:	f103 0901 	add.w	r9, r3, #1
 80123de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80123e2:	4413      	add	r3, r2
 80123e4:	9305      	str	r3, [sp, #20]
 80123e6:	f00a 0301 	and.w	r3, sl, #1
 80123ea:	46b8      	mov	r8, r7
 80123ec:	9304      	str	r3, [sp, #16]
 80123ee:	4607      	mov	r7, r0
 80123f0:	4631      	mov	r1, r6
 80123f2:	ee18 0a10 	vmov	r0, s16
 80123f6:	f7ff fa77 	bl	80118e8 <quorem>
 80123fa:	4641      	mov	r1, r8
 80123fc:	9002      	str	r0, [sp, #8]
 80123fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012402:	ee18 0a10 	vmov	r0, s16
 8012406:	f000 ff43 	bl	8013290 <__mcmp>
 801240a:	463a      	mov	r2, r7
 801240c:	9003      	str	r0, [sp, #12]
 801240e:	4631      	mov	r1, r6
 8012410:	4620      	mov	r0, r4
 8012412:	f000 ff59 	bl	80132c8 <__mdiff>
 8012416:	68c2      	ldr	r2, [r0, #12]
 8012418:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801241c:	4605      	mov	r5, r0
 801241e:	bb02      	cbnz	r2, 8012462 <_dtoa_r+0xa62>
 8012420:	4601      	mov	r1, r0
 8012422:	ee18 0a10 	vmov	r0, s16
 8012426:	f000 ff33 	bl	8013290 <__mcmp>
 801242a:	4602      	mov	r2, r0
 801242c:	4629      	mov	r1, r5
 801242e:	4620      	mov	r0, r4
 8012430:	9207      	str	r2, [sp, #28]
 8012432:	f000 fca1 	bl	8012d78 <_Bfree>
 8012436:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801243a:	ea43 0102 	orr.w	r1, r3, r2
 801243e:	9b04      	ldr	r3, [sp, #16]
 8012440:	430b      	orrs	r3, r1
 8012442:	464d      	mov	r5, r9
 8012444:	d10f      	bne.n	8012466 <_dtoa_r+0xa66>
 8012446:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801244a:	d02a      	beq.n	80124a2 <_dtoa_r+0xaa2>
 801244c:	9b03      	ldr	r3, [sp, #12]
 801244e:	2b00      	cmp	r3, #0
 8012450:	dd02      	ble.n	8012458 <_dtoa_r+0xa58>
 8012452:	9b02      	ldr	r3, [sp, #8]
 8012454:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012458:	f88b a000 	strb.w	sl, [fp]
 801245c:	e775      	b.n	801234a <_dtoa_r+0x94a>
 801245e:	4638      	mov	r0, r7
 8012460:	e7ba      	b.n	80123d8 <_dtoa_r+0x9d8>
 8012462:	2201      	movs	r2, #1
 8012464:	e7e2      	b.n	801242c <_dtoa_r+0xa2c>
 8012466:	9b03      	ldr	r3, [sp, #12]
 8012468:	2b00      	cmp	r3, #0
 801246a:	db04      	blt.n	8012476 <_dtoa_r+0xa76>
 801246c:	9906      	ldr	r1, [sp, #24]
 801246e:	430b      	orrs	r3, r1
 8012470:	9904      	ldr	r1, [sp, #16]
 8012472:	430b      	orrs	r3, r1
 8012474:	d122      	bne.n	80124bc <_dtoa_r+0xabc>
 8012476:	2a00      	cmp	r2, #0
 8012478:	ddee      	ble.n	8012458 <_dtoa_r+0xa58>
 801247a:	ee18 1a10 	vmov	r1, s16
 801247e:	2201      	movs	r2, #1
 8012480:	4620      	mov	r0, r4
 8012482:	f000 fe95 	bl	80131b0 <__lshift>
 8012486:	4631      	mov	r1, r6
 8012488:	ee08 0a10 	vmov	s16, r0
 801248c:	f000 ff00 	bl	8013290 <__mcmp>
 8012490:	2800      	cmp	r0, #0
 8012492:	dc03      	bgt.n	801249c <_dtoa_r+0xa9c>
 8012494:	d1e0      	bne.n	8012458 <_dtoa_r+0xa58>
 8012496:	f01a 0f01 	tst.w	sl, #1
 801249a:	d0dd      	beq.n	8012458 <_dtoa_r+0xa58>
 801249c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80124a0:	d1d7      	bne.n	8012452 <_dtoa_r+0xa52>
 80124a2:	2339      	movs	r3, #57	; 0x39
 80124a4:	f88b 3000 	strb.w	r3, [fp]
 80124a8:	462b      	mov	r3, r5
 80124aa:	461d      	mov	r5, r3
 80124ac:	3b01      	subs	r3, #1
 80124ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80124b2:	2a39      	cmp	r2, #57	; 0x39
 80124b4:	d071      	beq.n	801259a <_dtoa_r+0xb9a>
 80124b6:	3201      	adds	r2, #1
 80124b8:	701a      	strb	r2, [r3, #0]
 80124ba:	e746      	b.n	801234a <_dtoa_r+0x94a>
 80124bc:	2a00      	cmp	r2, #0
 80124be:	dd07      	ble.n	80124d0 <_dtoa_r+0xad0>
 80124c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80124c4:	d0ed      	beq.n	80124a2 <_dtoa_r+0xaa2>
 80124c6:	f10a 0301 	add.w	r3, sl, #1
 80124ca:	f88b 3000 	strb.w	r3, [fp]
 80124ce:	e73c      	b.n	801234a <_dtoa_r+0x94a>
 80124d0:	9b05      	ldr	r3, [sp, #20]
 80124d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80124d6:	4599      	cmp	r9, r3
 80124d8:	d047      	beq.n	801256a <_dtoa_r+0xb6a>
 80124da:	ee18 1a10 	vmov	r1, s16
 80124de:	2300      	movs	r3, #0
 80124e0:	220a      	movs	r2, #10
 80124e2:	4620      	mov	r0, r4
 80124e4:	f000 fc6a 	bl	8012dbc <__multadd>
 80124e8:	45b8      	cmp	r8, r7
 80124ea:	ee08 0a10 	vmov	s16, r0
 80124ee:	f04f 0300 	mov.w	r3, #0
 80124f2:	f04f 020a 	mov.w	r2, #10
 80124f6:	4641      	mov	r1, r8
 80124f8:	4620      	mov	r0, r4
 80124fa:	d106      	bne.n	801250a <_dtoa_r+0xb0a>
 80124fc:	f000 fc5e 	bl	8012dbc <__multadd>
 8012500:	4680      	mov	r8, r0
 8012502:	4607      	mov	r7, r0
 8012504:	f109 0901 	add.w	r9, r9, #1
 8012508:	e772      	b.n	80123f0 <_dtoa_r+0x9f0>
 801250a:	f000 fc57 	bl	8012dbc <__multadd>
 801250e:	4639      	mov	r1, r7
 8012510:	4680      	mov	r8, r0
 8012512:	2300      	movs	r3, #0
 8012514:	220a      	movs	r2, #10
 8012516:	4620      	mov	r0, r4
 8012518:	f000 fc50 	bl	8012dbc <__multadd>
 801251c:	4607      	mov	r7, r0
 801251e:	e7f1      	b.n	8012504 <_dtoa_r+0xb04>
 8012520:	9b03      	ldr	r3, [sp, #12]
 8012522:	9302      	str	r3, [sp, #8]
 8012524:	9d01      	ldr	r5, [sp, #4]
 8012526:	ee18 0a10 	vmov	r0, s16
 801252a:	4631      	mov	r1, r6
 801252c:	f7ff f9dc 	bl	80118e8 <quorem>
 8012530:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012534:	9b01      	ldr	r3, [sp, #4]
 8012536:	f805 ab01 	strb.w	sl, [r5], #1
 801253a:	1aea      	subs	r2, r5, r3
 801253c:	9b02      	ldr	r3, [sp, #8]
 801253e:	4293      	cmp	r3, r2
 8012540:	dd09      	ble.n	8012556 <_dtoa_r+0xb56>
 8012542:	ee18 1a10 	vmov	r1, s16
 8012546:	2300      	movs	r3, #0
 8012548:	220a      	movs	r2, #10
 801254a:	4620      	mov	r0, r4
 801254c:	f000 fc36 	bl	8012dbc <__multadd>
 8012550:	ee08 0a10 	vmov	s16, r0
 8012554:	e7e7      	b.n	8012526 <_dtoa_r+0xb26>
 8012556:	9b02      	ldr	r3, [sp, #8]
 8012558:	2b00      	cmp	r3, #0
 801255a:	bfc8      	it	gt
 801255c:	461d      	movgt	r5, r3
 801255e:	9b01      	ldr	r3, [sp, #4]
 8012560:	bfd8      	it	le
 8012562:	2501      	movle	r5, #1
 8012564:	441d      	add	r5, r3
 8012566:	f04f 0800 	mov.w	r8, #0
 801256a:	ee18 1a10 	vmov	r1, s16
 801256e:	2201      	movs	r2, #1
 8012570:	4620      	mov	r0, r4
 8012572:	f000 fe1d 	bl	80131b0 <__lshift>
 8012576:	4631      	mov	r1, r6
 8012578:	ee08 0a10 	vmov	s16, r0
 801257c:	f000 fe88 	bl	8013290 <__mcmp>
 8012580:	2800      	cmp	r0, #0
 8012582:	dc91      	bgt.n	80124a8 <_dtoa_r+0xaa8>
 8012584:	d102      	bne.n	801258c <_dtoa_r+0xb8c>
 8012586:	f01a 0f01 	tst.w	sl, #1
 801258a:	d18d      	bne.n	80124a8 <_dtoa_r+0xaa8>
 801258c:	462b      	mov	r3, r5
 801258e:	461d      	mov	r5, r3
 8012590:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012594:	2a30      	cmp	r2, #48	; 0x30
 8012596:	d0fa      	beq.n	801258e <_dtoa_r+0xb8e>
 8012598:	e6d7      	b.n	801234a <_dtoa_r+0x94a>
 801259a:	9a01      	ldr	r2, [sp, #4]
 801259c:	429a      	cmp	r2, r3
 801259e:	d184      	bne.n	80124aa <_dtoa_r+0xaaa>
 80125a0:	9b00      	ldr	r3, [sp, #0]
 80125a2:	3301      	adds	r3, #1
 80125a4:	9300      	str	r3, [sp, #0]
 80125a6:	2331      	movs	r3, #49	; 0x31
 80125a8:	7013      	strb	r3, [r2, #0]
 80125aa:	e6ce      	b.n	801234a <_dtoa_r+0x94a>
 80125ac:	4b09      	ldr	r3, [pc, #36]	; (80125d4 <_dtoa_r+0xbd4>)
 80125ae:	f7ff ba95 	b.w	8011adc <_dtoa_r+0xdc>
 80125b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	f47f aa6e 	bne.w	8011a96 <_dtoa_r+0x96>
 80125ba:	4b07      	ldr	r3, [pc, #28]	; (80125d8 <_dtoa_r+0xbd8>)
 80125bc:	f7ff ba8e 	b.w	8011adc <_dtoa_r+0xdc>
 80125c0:	9b02      	ldr	r3, [sp, #8]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	dcae      	bgt.n	8012524 <_dtoa_r+0xb24>
 80125c6:	9b06      	ldr	r3, [sp, #24]
 80125c8:	2b02      	cmp	r3, #2
 80125ca:	f73f aea8 	bgt.w	801231e <_dtoa_r+0x91e>
 80125ce:	e7a9      	b.n	8012524 <_dtoa_r+0xb24>
 80125d0:	08015518 	.word	0x08015518
 80125d4:	0801531c 	.word	0x0801531c
 80125d8:	08015499 	.word	0x08015499

080125dc <rshift>:
 80125dc:	6903      	ldr	r3, [r0, #16]
 80125de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80125e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80125ea:	f100 0414 	add.w	r4, r0, #20
 80125ee:	dd45      	ble.n	801267c <rshift+0xa0>
 80125f0:	f011 011f 	ands.w	r1, r1, #31
 80125f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80125f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80125fc:	d10c      	bne.n	8012618 <rshift+0x3c>
 80125fe:	f100 0710 	add.w	r7, r0, #16
 8012602:	4629      	mov	r1, r5
 8012604:	42b1      	cmp	r1, r6
 8012606:	d334      	bcc.n	8012672 <rshift+0x96>
 8012608:	1a9b      	subs	r3, r3, r2
 801260a:	009b      	lsls	r3, r3, #2
 801260c:	1eea      	subs	r2, r5, #3
 801260e:	4296      	cmp	r6, r2
 8012610:	bf38      	it	cc
 8012612:	2300      	movcc	r3, #0
 8012614:	4423      	add	r3, r4
 8012616:	e015      	b.n	8012644 <rshift+0x68>
 8012618:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801261c:	f1c1 0820 	rsb	r8, r1, #32
 8012620:	40cf      	lsrs	r7, r1
 8012622:	f105 0e04 	add.w	lr, r5, #4
 8012626:	46a1      	mov	r9, r4
 8012628:	4576      	cmp	r6, lr
 801262a:	46f4      	mov	ip, lr
 801262c:	d815      	bhi.n	801265a <rshift+0x7e>
 801262e:	1a9a      	subs	r2, r3, r2
 8012630:	0092      	lsls	r2, r2, #2
 8012632:	3a04      	subs	r2, #4
 8012634:	3501      	adds	r5, #1
 8012636:	42ae      	cmp	r6, r5
 8012638:	bf38      	it	cc
 801263a:	2200      	movcc	r2, #0
 801263c:	18a3      	adds	r3, r4, r2
 801263e:	50a7      	str	r7, [r4, r2]
 8012640:	b107      	cbz	r7, 8012644 <rshift+0x68>
 8012642:	3304      	adds	r3, #4
 8012644:	1b1a      	subs	r2, r3, r4
 8012646:	42a3      	cmp	r3, r4
 8012648:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801264c:	bf08      	it	eq
 801264e:	2300      	moveq	r3, #0
 8012650:	6102      	str	r2, [r0, #16]
 8012652:	bf08      	it	eq
 8012654:	6143      	streq	r3, [r0, #20]
 8012656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801265a:	f8dc c000 	ldr.w	ip, [ip]
 801265e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012662:	ea4c 0707 	orr.w	r7, ip, r7
 8012666:	f849 7b04 	str.w	r7, [r9], #4
 801266a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801266e:	40cf      	lsrs	r7, r1
 8012670:	e7da      	b.n	8012628 <rshift+0x4c>
 8012672:	f851 cb04 	ldr.w	ip, [r1], #4
 8012676:	f847 cf04 	str.w	ip, [r7, #4]!
 801267a:	e7c3      	b.n	8012604 <rshift+0x28>
 801267c:	4623      	mov	r3, r4
 801267e:	e7e1      	b.n	8012644 <rshift+0x68>

08012680 <__hexdig_fun>:
 8012680:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012684:	2b09      	cmp	r3, #9
 8012686:	d802      	bhi.n	801268e <__hexdig_fun+0xe>
 8012688:	3820      	subs	r0, #32
 801268a:	b2c0      	uxtb	r0, r0
 801268c:	4770      	bx	lr
 801268e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012692:	2b05      	cmp	r3, #5
 8012694:	d801      	bhi.n	801269a <__hexdig_fun+0x1a>
 8012696:	3847      	subs	r0, #71	; 0x47
 8012698:	e7f7      	b.n	801268a <__hexdig_fun+0xa>
 801269a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801269e:	2b05      	cmp	r3, #5
 80126a0:	d801      	bhi.n	80126a6 <__hexdig_fun+0x26>
 80126a2:	3827      	subs	r0, #39	; 0x27
 80126a4:	e7f1      	b.n	801268a <__hexdig_fun+0xa>
 80126a6:	2000      	movs	r0, #0
 80126a8:	4770      	bx	lr
	...

080126ac <__gethex>:
 80126ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b0:	ed2d 8b02 	vpush	{d8}
 80126b4:	b089      	sub	sp, #36	; 0x24
 80126b6:	ee08 0a10 	vmov	s16, r0
 80126ba:	9304      	str	r3, [sp, #16]
 80126bc:	4bb4      	ldr	r3, [pc, #720]	; (8012990 <__gethex+0x2e4>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	9301      	str	r3, [sp, #4]
 80126c2:	4618      	mov	r0, r3
 80126c4:	468b      	mov	fp, r1
 80126c6:	4690      	mov	r8, r2
 80126c8:	f7ed fd82 	bl	80001d0 <strlen>
 80126cc:	9b01      	ldr	r3, [sp, #4]
 80126ce:	f8db 2000 	ldr.w	r2, [fp]
 80126d2:	4403      	add	r3, r0
 80126d4:	4682      	mov	sl, r0
 80126d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80126da:	9305      	str	r3, [sp, #20]
 80126dc:	1c93      	adds	r3, r2, #2
 80126de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80126e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80126e6:	32fe      	adds	r2, #254	; 0xfe
 80126e8:	18d1      	adds	r1, r2, r3
 80126ea:	461f      	mov	r7, r3
 80126ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80126f0:	9100      	str	r1, [sp, #0]
 80126f2:	2830      	cmp	r0, #48	; 0x30
 80126f4:	d0f8      	beq.n	80126e8 <__gethex+0x3c>
 80126f6:	f7ff ffc3 	bl	8012680 <__hexdig_fun>
 80126fa:	4604      	mov	r4, r0
 80126fc:	2800      	cmp	r0, #0
 80126fe:	d13a      	bne.n	8012776 <__gethex+0xca>
 8012700:	9901      	ldr	r1, [sp, #4]
 8012702:	4652      	mov	r2, sl
 8012704:	4638      	mov	r0, r7
 8012706:	f001 fa23 	bl	8013b50 <strncmp>
 801270a:	4605      	mov	r5, r0
 801270c:	2800      	cmp	r0, #0
 801270e:	d168      	bne.n	80127e2 <__gethex+0x136>
 8012710:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012714:	eb07 060a 	add.w	r6, r7, sl
 8012718:	f7ff ffb2 	bl	8012680 <__hexdig_fun>
 801271c:	2800      	cmp	r0, #0
 801271e:	d062      	beq.n	80127e6 <__gethex+0x13a>
 8012720:	4633      	mov	r3, r6
 8012722:	7818      	ldrb	r0, [r3, #0]
 8012724:	2830      	cmp	r0, #48	; 0x30
 8012726:	461f      	mov	r7, r3
 8012728:	f103 0301 	add.w	r3, r3, #1
 801272c:	d0f9      	beq.n	8012722 <__gethex+0x76>
 801272e:	f7ff ffa7 	bl	8012680 <__hexdig_fun>
 8012732:	2301      	movs	r3, #1
 8012734:	fab0 f480 	clz	r4, r0
 8012738:	0964      	lsrs	r4, r4, #5
 801273a:	4635      	mov	r5, r6
 801273c:	9300      	str	r3, [sp, #0]
 801273e:	463a      	mov	r2, r7
 8012740:	4616      	mov	r6, r2
 8012742:	3201      	adds	r2, #1
 8012744:	7830      	ldrb	r0, [r6, #0]
 8012746:	f7ff ff9b 	bl	8012680 <__hexdig_fun>
 801274a:	2800      	cmp	r0, #0
 801274c:	d1f8      	bne.n	8012740 <__gethex+0x94>
 801274e:	9901      	ldr	r1, [sp, #4]
 8012750:	4652      	mov	r2, sl
 8012752:	4630      	mov	r0, r6
 8012754:	f001 f9fc 	bl	8013b50 <strncmp>
 8012758:	b980      	cbnz	r0, 801277c <__gethex+0xd0>
 801275a:	b94d      	cbnz	r5, 8012770 <__gethex+0xc4>
 801275c:	eb06 050a 	add.w	r5, r6, sl
 8012760:	462a      	mov	r2, r5
 8012762:	4616      	mov	r6, r2
 8012764:	3201      	adds	r2, #1
 8012766:	7830      	ldrb	r0, [r6, #0]
 8012768:	f7ff ff8a 	bl	8012680 <__hexdig_fun>
 801276c:	2800      	cmp	r0, #0
 801276e:	d1f8      	bne.n	8012762 <__gethex+0xb6>
 8012770:	1bad      	subs	r5, r5, r6
 8012772:	00ad      	lsls	r5, r5, #2
 8012774:	e004      	b.n	8012780 <__gethex+0xd4>
 8012776:	2400      	movs	r4, #0
 8012778:	4625      	mov	r5, r4
 801277a:	e7e0      	b.n	801273e <__gethex+0x92>
 801277c:	2d00      	cmp	r5, #0
 801277e:	d1f7      	bne.n	8012770 <__gethex+0xc4>
 8012780:	7833      	ldrb	r3, [r6, #0]
 8012782:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012786:	2b50      	cmp	r3, #80	; 0x50
 8012788:	d13b      	bne.n	8012802 <__gethex+0x156>
 801278a:	7873      	ldrb	r3, [r6, #1]
 801278c:	2b2b      	cmp	r3, #43	; 0x2b
 801278e:	d02c      	beq.n	80127ea <__gethex+0x13e>
 8012790:	2b2d      	cmp	r3, #45	; 0x2d
 8012792:	d02e      	beq.n	80127f2 <__gethex+0x146>
 8012794:	1c71      	adds	r1, r6, #1
 8012796:	f04f 0900 	mov.w	r9, #0
 801279a:	7808      	ldrb	r0, [r1, #0]
 801279c:	f7ff ff70 	bl	8012680 <__hexdig_fun>
 80127a0:	1e43      	subs	r3, r0, #1
 80127a2:	b2db      	uxtb	r3, r3
 80127a4:	2b18      	cmp	r3, #24
 80127a6:	d82c      	bhi.n	8012802 <__gethex+0x156>
 80127a8:	f1a0 0210 	sub.w	r2, r0, #16
 80127ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80127b0:	f7ff ff66 	bl	8012680 <__hexdig_fun>
 80127b4:	1e43      	subs	r3, r0, #1
 80127b6:	b2db      	uxtb	r3, r3
 80127b8:	2b18      	cmp	r3, #24
 80127ba:	d91d      	bls.n	80127f8 <__gethex+0x14c>
 80127bc:	f1b9 0f00 	cmp.w	r9, #0
 80127c0:	d000      	beq.n	80127c4 <__gethex+0x118>
 80127c2:	4252      	negs	r2, r2
 80127c4:	4415      	add	r5, r2
 80127c6:	f8cb 1000 	str.w	r1, [fp]
 80127ca:	b1e4      	cbz	r4, 8012806 <__gethex+0x15a>
 80127cc:	9b00      	ldr	r3, [sp, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	bf14      	ite	ne
 80127d2:	2700      	movne	r7, #0
 80127d4:	2706      	moveq	r7, #6
 80127d6:	4638      	mov	r0, r7
 80127d8:	b009      	add	sp, #36	; 0x24
 80127da:	ecbd 8b02 	vpop	{d8}
 80127de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127e2:	463e      	mov	r6, r7
 80127e4:	4625      	mov	r5, r4
 80127e6:	2401      	movs	r4, #1
 80127e8:	e7ca      	b.n	8012780 <__gethex+0xd4>
 80127ea:	f04f 0900 	mov.w	r9, #0
 80127ee:	1cb1      	adds	r1, r6, #2
 80127f0:	e7d3      	b.n	801279a <__gethex+0xee>
 80127f2:	f04f 0901 	mov.w	r9, #1
 80127f6:	e7fa      	b.n	80127ee <__gethex+0x142>
 80127f8:	230a      	movs	r3, #10
 80127fa:	fb03 0202 	mla	r2, r3, r2, r0
 80127fe:	3a10      	subs	r2, #16
 8012800:	e7d4      	b.n	80127ac <__gethex+0x100>
 8012802:	4631      	mov	r1, r6
 8012804:	e7df      	b.n	80127c6 <__gethex+0x11a>
 8012806:	1bf3      	subs	r3, r6, r7
 8012808:	3b01      	subs	r3, #1
 801280a:	4621      	mov	r1, r4
 801280c:	2b07      	cmp	r3, #7
 801280e:	dc0b      	bgt.n	8012828 <__gethex+0x17c>
 8012810:	ee18 0a10 	vmov	r0, s16
 8012814:	f000 fa70 	bl	8012cf8 <_Balloc>
 8012818:	4604      	mov	r4, r0
 801281a:	b940      	cbnz	r0, 801282e <__gethex+0x182>
 801281c:	4b5d      	ldr	r3, [pc, #372]	; (8012994 <__gethex+0x2e8>)
 801281e:	4602      	mov	r2, r0
 8012820:	21de      	movs	r1, #222	; 0xde
 8012822:	485d      	ldr	r0, [pc, #372]	; (8012998 <__gethex+0x2ec>)
 8012824:	f001 f9b6 	bl	8013b94 <__assert_func>
 8012828:	3101      	adds	r1, #1
 801282a:	105b      	asrs	r3, r3, #1
 801282c:	e7ee      	b.n	801280c <__gethex+0x160>
 801282e:	f100 0914 	add.w	r9, r0, #20
 8012832:	f04f 0b00 	mov.w	fp, #0
 8012836:	f1ca 0301 	rsb	r3, sl, #1
 801283a:	f8cd 9008 	str.w	r9, [sp, #8]
 801283e:	f8cd b000 	str.w	fp, [sp]
 8012842:	9306      	str	r3, [sp, #24]
 8012844:	42b7      	cmp	r7, r6
 8012846:	d340      	bcc.n	80128ca <__gethex+0x21e>
 8012848:	9802      	ldr	r0, [sp, #8]
 801284a:	9b00      	ldr	r3, [sp, #0]
 801284c:	f840 3b04 	str.w	r3, [r0], #4
 8012850:	eba0 0009 	sub.w	r0, r0, r9
 8012854:	1080      	asrs	r0, r0, #2
 8012856:	0146      	lsls	r6, r0, #5
 8012858:	6120      	str	r0, [r4, #16]
 801285a:	4618      	mov	r0, r3
 801285c:	f000 fb3e 	bl	8012edc <__hi0bits>
 8012860:	1a30      	subs	r0, r6, r0
 8012862:	f8d8 6000 	ldr.w	r6, [r8]
 8012866:	42b0      	cmp	r0, r6
 8012868:	dd63      	ble.n	8012932 <__gethex+0x286>
 801286a:	1b87      	subs	r7, r0, r6
 801286c:	4639      	mov	r1, r7
 801286e:	4620      	mov	r0, r4
 8012870:	f000 fee2 	bl	8013638 <__any_on>
 8012874:	4682      	mov	sl, r0
 8012876:	b1a8      	cbz	r0, 80128a4 <__gethex+0x1f8>
 8012878:	1e7b      	subs	r3, r7, #1
 801287a:	1159      	asrs	r1, r3, #5
 801287c:	f003 021f 	and.w	r2, r3, #31
 8012880:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012884:	f04f 0a01 	mov.w	sl, #1
 8012888:	fa0a f202 	lsl.w	r2, sl, r2
 801288c:	420a      	tst	r2, r1
 801288e:	d009      	beq.n	80128a4 <__gethex+0x1f8>
 8012890:	4553      	cmp	r3, sl
 8012892:	dd05      	ble.n	80128a0 <__gethex+0x1f4>
 8012894:	1eb9      	subs	r1, r7, #2
 8012896:	4620      	mov	r0, r4
 8012898:	f000 fece 	bl	8013638 <__any_on>
 801289c:	2800      	cmp	r0, #0
 801289e:	d145      	bne.n	801292c <__gethex+0x280>
 80128a0:	f04f 0a02 	mov.w	sl, #2
 80128a4:	4639      	mov	r1, r7
 80128a6:	4620      	mov	r0, r4
 80128a8:	f7ff fe98 	bl	80125dc <rshift>
 80128ac:	443d      	add	r5, r7
 80128ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80128b2:	42ab      	cmp	r3, r5
 80128b4:	da4c      	bge.n	8012950 <__gethex+0x2a4>
 80128b6:	ee18 0a10 	vmov	r0, s16
 80128ba:	4621      	mov	r1, r4
 80128bc:	f000 fa5c 	bl	8012d78 <_Bfree>
 80128c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80128c2:	2300      	movs	r3, #0
 80128c4:	6013      	str	r3, [r2, #0]
 80128c6:	27a3      	movs	r7, #163	; 0xa3
 80128c8:	e785      	b.n	80127d6 <__gethex+0x12a>
 80128ca:	1e73      	subs	r3, r6, #1
 80128cc:	9a05      	ldr	r2, [sp, #20]
 80128ce:	9303      	str	r3, [sp, #12]
 80128d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80128d4:	4293      	cmp	r3, r2
 80128d6:	d019      	beq.n	801290c <__gethex+0x260>
 80128d8:	f1bb 0f20 	cmp.w	fp, #32
 80128dc:	d107      	bne.n	80128ee <__gethex+0x242>
 80128de:	9b02      	ldr	r3, [sp, #8]
 80128e0:	9a00      	ldr	r2, [sp, #0]
 80128e2:	f843 2b04 	str.w	r2, [r3], #4
 80128e6:	9302      	str	r3, [sp, #8]
 80128e8:	2300      	movs	r3, #0
 80128ea:	9300      	str	r3, [sp, #0]
 80128ec:	469b      	mov	fp, r3
 80128ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80128f2:	f7ff fec5 	bl	8012680 <__hexdig_fun>
 80128f6:	9b00      	ldr	r3, [sp, #0]
 80128f8:	f000 000f 	and.w	r0, r0, #15
 80128fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8012900:	4303      	orrs	r3, r0
 8012902:	9300      	str	r3, [sp, #0]
 8012904:	f10b 0b04 	add.w	fp, fp, #4
 8012908:	9b03      	ldr	r3, [sp, #12]
 801290a:	e00d      	b.n	8012928 <__gethex+0x27c>
 801290c:	9b03      	ldr	r3, [sp, #12]
 801290e:	9a06      	ldr	r2, [sp, #24]
 8012910:	4413      	add	r3, r2
 8012912:	42bb      	cmp	r3, r7
 8012914:	d3e0      	bcc.n	80128d8 <__gethex+0x22c>
 8012916:	4618      	mov	r0, r3
 8012918:	9901      	ldr	r1, [sp, #4]
 801291a:	9307      	str	r3, [sp, #28]
 801291c:	4652      	mov	r2, sl
 801291e:	f001 f917 	bl	8013b50 <strncmp>
 8012922:	9b07      	ldr	r3, [sp, #28]
 8012924:	2800      	cmp	r0, #0
 8012926:	d1d7      	bne.n	80128d8 <__gethex+0x22c>
 8012928:	461e      	mov	r6, r3
 801292a:	e78b      	b.n	8012844 <__gethex+0x198>
 801292c:	f04f 0a03 	mov.w	sl, #3
 8012930:	e7b8      	b.n	80128a4 <__gethex+0x1f8>
 8012932:	da0a      	bge.n	801294a <__gethex+0x29e>
 8012934:	1a37      	subs	r7, r6, r0
 8012936:	4621      	mov	r1, r4
 8012938:	ee18 0a10 	vmov	r0, s16
 801293c:	463a      	mov	r2, r7
 801293e:	f000 fc37 	bl	80131b0 <__lshift>
 8012942:	1bed      	subs	r5, r5, r7
 8012944:	4604      	mov	r4, r0
 8012946:	f100 0914 	add.w	r9, r0, #20
 801294a:	f04f 0a00 	mov.w	sl, #0
 801294e:	e7ae      	b.n	80128ae <__gethex+0x202>
 8012950:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012954:	42a8      	cmp	r0, r5
 8012956:	dd72      	ble.n	8012a3e <__gethex+0x392>
 8012958:	1b45      	subs	r5, r0, r5
 801295a:	42ae      	cmp	r6, r5
 801295c:	dc36      	bgt.n	80129cc <__gethex+0x320>
 801295e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012962:	2b02      	cmp	r3, #2
 8012964:	d02a      	beq.n	80129bc <__gethex+0x310>
 8012966:	2b03      	cmp	r3, #3
 8012968:	d02c      	beq.n	80129c4 <__gethex+0x318>
 801296a:	2b01      	cmp	r3, #1
 801296c:	d11c      	bne.n	80129a8 <__gethex+0x2fc>
 801296e:	42ae      	cmp	r6, r5
 8012970:	d11a      	bne.n	80129a8 <__gethex+0x2fc>
 8012972:	2e01      	cmp	r6, #1
 8012974:	d112      	bne.n	801299c <__gethex+0x2f0>
 8012976:	9a04      	ldr	r2, [sp, #16]
 8012978:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801297c:	6013      	str	r3, [r2, #0]
 801297e:	2301      	movs	r3, #1
 8012980:	6123      	str	r3, [r4, #16]
 8012982:	f8c9 3000 	str.w	r3, [r9]
 8012986:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012988:	2762      	movs	r7, #98	; 0x62
 801298a:	601c      	str	r4, [r3, #0]
 801298c:	e723      	b.n	80127d6 <__gethex+0x12a>
 801298e:	bf00      	nop
 8012990:	08015590 	.word	0x08015590
 8012994:	08015518 	.word	0x08015518
 8012998:	08015529 	.word	0x08015529
 801299c:	1e71      	subs	r1, r6, #1
 801299e:	4620      	mov	r0, r4
 80129a0:	f000 fe4a 	bl	8013638 <__any_on>
 80129a4:	2800      	cmp	r0, #0
 80129a6:	d1e6      	bne.n	8012976 <__gethex+0x2ca>
 80129a8:	ee18 0a10 	vmov	r0, s16
 80129ac:	4621      	mov	r1, r4
 80129ae:	f000 f9e3 	bl	8012d78 <_Bfree>
 80129b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80129b4:	2300      	movs	r3, #0
 80129b6:	6013      	str	r3, [r2, #0]
 80129b8:	2750      	movs	r7, #80	; 0x50
 80129ba:	e70c      	b.n	80127d6 <__gethex+0x12a>
 80129bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d1f2      	bne.n	80129a8 <__gethex+0x2fc>
 80129c2:	e7d8      	b.n	8012976 <__gethex+0x2ca>
 80129c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d1d5      	bne.n	8012976 <__gethex+0x2ca>
 80129ca:	e7ed      	b.n	80129a8 <__gethex+0x2fc>
 80129cc:	1e6f      	subs	r7, r5, #1
 80129ce:	f1ba 0f00 	cmp.w	sl, #0
 80129d2:	d131      	bne.n	8012a38 <__gethex+0x38c>
 80129d4:	b127      	cbz	r7, 80129e0 <__gethex+0x334>
 80129d6:	4639      	mov	r1, r7
 80129d8:	4620      	mov	r0, r4
 80129da:	f000 fe2d 	bl	8013638 <__any_on>
 80129de:	4682      	mov	sl, r0
 80129e0:	117b      	asrs	r3, r7, #5
 80129e2:	2101      	movs	r1, #1
 80129e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80129e8:	f007 071f 	and.w	r7, r7, #31
 80129ec:	fa01 f707 	lsl.w	r7, r1, r7
 80129f0:	421f      	tst	r7, r3
 80129f2:	4629      	mov	r1, r5
 80129f4:	4620      	mov	r0, r4
 80129f6:	bf18      	it	ne
 80129f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80129fc:	1b76      	subs	r6, r6, r5
 80129fe:	f7ff fded 	bl	80125dc <rshift>
 8012a02:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012a06:	2702      	movs	r7, #2
 8012a08:	f1ba 0f00 	cmp.w	sl, #0
 8012a0c:	d048      	beq.n	8012aa0 <__gethex+0x3f4>
 8012a0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012a12:	2b02      	cmp	r3, #2
 8012a14:	d015      	beq.n	8012a42 <__gethex+0x396>
 8012a16:	2b03      	cmp	r3, #3
 8012a18:	d017      	beq.n	8012a4a <__gethex+0x39e>
 8012a1a:	2b01      	cmp	r3, #1
 8012a1c:	d109      	bne.n	8012a32 <__gethex+0x386>
 8012a1e:	f01a 0f02 	tst.w	sl, #2
 8012a22:	d006      	beq.n	8012a32 <__gethex+0x386>
 8012a24:	f8d9 0000 	ldr.w	r0, [r9]
 8012a28:	ea4a 0a00 	orr.w	sl, sl, r0
 8012a2c:	f01a 0f01 	tst.w	sl, #1
 8012a30:	d10e      	bne.n	8012a50 <__gethex+0x3a4>
 8012a32:	f047 0710 	orr.w	r7, r7, #16
 8012a36:	e033      	b.n	8012aa0 <__gethex+0x3f4>
 8012a38:	f04f 0a01 	mov.w	sl, #1
 8012a3c:	e7d0      	b.n	80129e0 <__gethex+0x334>
 8012a3e:	2701      	movs	r7, #1
 8012a40:	e7e2      	b.n	8012a08 <__gethex+0x35c>
 8012a42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a44:	f1c3 0301 	rsb	r3, r3, #1
 8012a48:	9315      	str	r3, [sp, #84]	; 0x54
 8012a4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d0f0      	beq.n	8012a32 <__gethex+0x386>
 8012a50:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012a54:	f104 0314 	add.w	r3, r4, #20
 8012a58:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012a5c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012a60:	f04f 0c00 	mov.w	ip, #0
 8012a64:	4618      	mov	r0, r3
 8012a66:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a6a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8012a6e:	d01c      	beq.n	8012aaa <__gethex+0x3fe>
 8012a70:	3201      	adds	r2, #1
 8012a72:	6002      	str	r2, [r0, #0]
 8012a74:	2f02      	cmp	r7, #2
 8012a76:	f104 0314 	add.w	r3, r4, #20
 8012a7a:	d13f      	bne.n	8012afc <__gethex+0x450>
 8012a7c:	f8d8 2000 	ldr.w	r2, [r8]
 8012a80:	3a01      	subs	r2, #1
 8012a82:	42b2      	cmp	r2, r6
 8012a84:	d10a      	bne.n	8012a9c <__gethex+0x3f0>
 8012a86:	1171      	asrs	r1, r6, #5
 8012a88:	2201      	movs	r2, #1
 8012a8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012a8e:	f006 061f 	and.w	r6, r6, #31
 8012a92:	fa02 f606 	lsl.w	r6, r2, r6
 8012a96:	421e      	tst	r6, r3
 8012a98:	bf18      	it	ne
 8012a9a:	4617      	movne	r7, r2
 8012a9c:	f047 0720 	orr.w	r7, r7, #32
 8012aa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012aa2:	601c      	str	r4, [r3, #0]
 8012aa4:	9b04      	ldr	r3, [sp, #16]
 8012aa6:	601d      	str	r5, [r3, #0]
 8012aa8:	e695      	b.n	80127d6 <__gethex+0x12a>
 8012aaa:	4299      	cmp	r1, r3
 8012aac:	f843 cc04 	str.w	ip, [r3, #-4]
 8012ab0:	d8d8      	bhi.n	8012a64 <__gethex+0x3b8>
 8012ab2:	68a3      	ldr	r3, [r4, #8]
 8012ab4:	459b      	cmp	fp, r3
 8012ab6:	db19      	blt.n	8012aec <__gethex+0x440>
 8012ab8:	6861      	ldr	r1, [r4, #4]
 8012aba:	ee18 0a10 	vmov	r0, s16
 8012abe:	3101      	adds	r1, #1
 8012ac0:	f000 f91a 	bl	8012cf8 <_Balloc>
 8012ac4:	4681      	mov	r9, r0
 8012ac6:	b918      	cbnz	r0, 8012ad0 <__gethex+0x424>
 8012ac8:	4b1a      	ldr	r3, [pc, #104]	; (8012b34 <__gethex+0x488>)
 8012aca:	4602      	mov	r2, r0
 8012acc:	2184      	movs	r1, #132	; 0x84
 8012ace:	e6a8      	b.n	8012822 <__gethex+0x176>
 8012ad0:	6922      	ldr	r2, [r4, #16]
 8012ad2:	3202      	adds	r2, #2
 8012ad4:	f104 010c 	add.w	r1, r4, #12
 8012ad8:	0092      	lsls	r2, r2, #2
 8012ada:	300c      	adds	r0, #12
 8012adc:	f7fd f9a0 	bl	800fe20 <memcpy>
 8012ae0:	4621      	mov	r1, r4
 8012ae2:	ee18 0a10 	vmov	r0, s16
 8012ae6:	f000 f947 	bl	8012d78 <_Bfree>
 8012aea:	464c      	mov	r4, r9
 8012aec:	6923      	ldr	r3, [r4, #16]
 8012aee:	1c5a      	adds	r2, r3, #1
 8012af0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012af4:	6122      	str	r2, [r4, #16]
 8012af6:	2201      	movs	r2, #1
 8012af8:	615a      	str	r2, [r3, #20]
 8012afa:	e7bb      	b.n	8012a74 <__gethex+0x3c8>
 8012afc:	6922      	ldr	r2, [r4, #16]
 8012afe:	455a      	cmp	r2, fp
 8012b00:	dd0b      	ble.n	8012b1a <__gethex+0x46e>
 8012b02:	2101      	movs	r1, #1
 8012b04:	4620      	mov	r0, r4
 8012b06:	f7ff fd69 	bl	80125dc <rshift>
 8012b0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012b0e:	3501      	adds	r5, #1
 8012b10:	42ab      	cmp	r3, r5
 8012b12:	f6ff aed0 	blt.w	80128b6 <__gethex+0x20a>
 8012b16:	2701      	movs	r7, #1
 8012b18:	e7c0      	b.n	8012a9c <__gethex+0x3f0>
 8012b1a:	f016 061f 	ands.w	r6, r6, #31
 8012b1e:	d0fa      	beq.n	8012b16 <__gethex+0x46a>
 8012b20:	4453      	add	r3, sl
 8012b22:	f1c6 0620 	rsb	r6, r6, #32
 8012b26:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012b2a:	f000 f9d7 	bl	8012edc <__hi0bits>
 8012b2e:	42b0      	cmp	r0, r6
 8012b30:	dbe7      	blt.n	8012b02 <__gethex+0x456>
 8012b32:	e7f0      	b.n	8012b16 <__gethex+0x46a>
 8012b34:	08015518 	.word	0x08015518

08012b38 <L_shift>:
 8012b38:	f1c2 0208 	rsb	r2, r2, #8
 8012b3c:	0092      	lsls	r2, r2, #2
 8012b3e:	b570      	push	{r4, r5, r6, lr}
 8012b40:	f1c2 0620 	rsb	r6, r2, #32
 8012b44:	6843      	ldr	r3, [r0, #4]
 8012b46:	6804      	ldr	r4, [r0, #0]
 8012b48:	fa03 f506 	lsl.w	r5, r3, r6
 8012b4c:	432c      	orrs	r4, r5
 8012b4e:	40d3      	lsrs	r3, r2
 8012b50:	6004      	str	r4, [r0, #0]
 8012b52:	f840 3f04 	str.w	r3, [r0, #4]!
 8012b56:	4288      	cmp	r0, r1
 8012b58:	d3f4      	bcc.n	8012b44 <L_shift+0xc>
 8012b5a:	bd70      	pop	{r4, r5, r6, pc}

08012b5c <__match>:
 8012b5c:	b530      	push	{r4, r5, lr}
 8012b5e:	6803      	ldr	r3, [r0, #0]
 8012b60:	3301      	adds	r3, #1
 8012b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b66:	b914      	cbnz	r4, 8012b6e <__match+0x12>
 8012b68:	6003      	str	r3, [r0, #0]
 8012b6a:	2001      	movs	r0, #1
 8012b6c:	bd30      	pop	{r4, r5, pc}
 8012b6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012b76:	2d19      	cmp	r5, #25
 8012b78:	bf98      	it	ls
 8012b7a:	3220      	addls	r2, #32
 8012b7c:	42a2      	cmp	r2, r4
 8012b7e:	d0f0      	beq.n	8012b62 <__match+0x6>
 8012b80:	2000      	movs	r0, #0
 8012b82:	e7f3      	b.n	8012b6c <__match+0x10>

08012b84 <__hexnan>:
 8012b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b88:	680b      	ldr	r3, [r1, #0]
 8012b8a:	115e      	asrs	r6, r3, #5
 8012b8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012b90:	f013 031f 	ands.w	r3, r3, #31
 8012b94:	b087      	sub	sp, #28
 8012b96:	bf18      	it	ne
 8012b98:	3604      	addne	r6, #4
 8012b9a:	2500      	movs	r5, #0
 8012b9c:	1f37      	subs	r7, r6, #4
 8012b9e:	4690      	mov	r8, r2
 8012ba0:	6802      	ldr	r2, [r0, #0]
 8012ba2:	9301      	str	r3, [sp, #4]
 8012ba4:	4682      	mov	sl, r0
 8012ba6:	f846 5c04 	str.w	r5, [r6, #-4]
 8012baa:	46b9      	mov	r9, r7
 8012bac:	463c      	mov	r4, r7
 8012bae:	9502      	str	r5, [sp, #8]
 8012bb0:	46ab      	mov	fp, r5
 8012bb2:	7851      	ldrb	r1, [r2, #1]
 8012bb4:	1c53      	adds	r3, r2, #1
 8012bb6:	9303      	str	r3, [sp, #12]
 8012bb8:	b341      	cbz	r1, 8012c0c <__hexnan+0x88>
 8012bba:	4608      	mov	r0, r1
 8012bbc:	9205      	str	r2, [sp, #20]
 8012bbe:	9104      	str	r1, [sp, #16]
 8012bc0:	f7ff fd5e 	bl	8012680 <__hexdig_fun>
 8012bc4:	2800      	cmp	r0, #0
 8012bc6:	d14f      	bne.n	8012c68 <__hexnan+0xe4>
 8012bc8:	9904      	ldr	r1, [sp, #16]
 8012bca:	9a05      	ldr	r2, [sp, #20]
 8012bcc:	2920      	cmp	r1, #32
 8012bce:	d818      	bhi.n	8012c02 <__hexnan+0x7e>
 8012bd0:	9b02      	ldr	r3, [sp, #8]
 8012bd2:	459b      	cmp	fp, r3
 8012bd4:	dd13      	ble.n	8012bfe <__hexnan+0x7a>
 8012bd6:	454c      	cmp	r4, r9
 8012bd8:	d206      	bcs.n	8012be8 <__hexnan+0x64>
 8012bda:	2d07      	cmp	r5, #7
 8012bdc:	dc04      	bgt.n	8012be8 <__hexnan+0x64>
 8012bde:	462a      	mov	r2, r5
 8012be0:	4649      	mov	r1, r9
 8012be2:	4620      	mov	r0, r4
 8012be4:	f7ff ffa8 	bl	8012b38 <L_shift>
 8012be8:	4544      	cmp	r4, r8
 8012bea:	d950      	bls.n	8012c8e <__hexnan+0x10a>
 8012bec:	2300      	movs	r3, #0
 8012bee:	f1a4 0904 	sub.w	r9, r4, #4
 8012bf2:	f844 3c04 	str.w	r3, [r4, #-4]
 8012bf6:	f8cd b008 	str.w	fp, [sp, #8]
 8012bfa:	464c      	mov	r4, r9
 8012bfc:	461d      	mov	r5, r3
 8012bfe:	9a03      	ldr	r2, [sp, #12]
 8012c00:	e7d7      	b.n	8012bb2 <__hexnan+0x2e>
 8012c02:	2929      	cmp	r1, #41	; 0x29
 8012c04:	d156      	bne.n	8012cb4 <__hexnan+0x130>
 8012c06:	3202      	adds	r2, #2
 8012c08:	f8ca 2000 	str.w	r2, [sl]
 8012c0c:	f1bb 0f00 	cmp.w	fp, #0
 8012c10:	d050      	beq.n	8012cb4 <__hexnan+0x130>
 8012c12:	454c      	cmp	r4, r9
 8012c14:	d206      	bcs.n	8012c24 <__hexnan+0xa0>
 8012c16:	2d07      	cmp	r5, #7
 8012c18:	dc04      	bgt.n	8012c24 <__hexnan+0xa0>
 8012c1a:	462a      	mov	r2, r5
 8012c1c:	4649      	mov	r1, r9
 8012c1e:	4620      	mov	r0, r4
 8012c20:	f7ff ff8a 	bl	8012b38 <L_shift>
 8012c24:	4544      	cmp	r4, r8
 8012c26:	d934      	bls.n	8012c92 <__hexnan+0x10e>
 8012c28:	f1a8 0204 	sub.w	r2, r8, #4
 8012c2c:	4623      	mov	r3, r4
 8012c2e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012c32:	f842 1f04 	str.w	r1, [r2, #4]!
 8012c36:	429f      	cmp	r7, r3
 8012c38:	d2f9      	bcs.n	8012c2e <__hexnan+0xaa>
 8012c3a:	1b3b      	subs	r3, r7, r4
 8012c3c:	f023 0303 	bic.w	r3, r3, #3
 8012c40:	3304      	adds	r3, #4
 8012c42:	3401      	adds	r4, #1
 8012c44:	3e03      	subs	r6, #3
 8012c46:	42b4      	cmp	r4, r6
 8012c48:	bf88      	it	hi
 8012c4a:	2304      	movhi	r3, #4
 8012c4c:	4443      	add	r3, r8
 8012c4e:	2200      	movs	r2, #0
 8012c50:	f843 2b04 	str.w	r2, [r3], #4
 8012c54:	429f      	cmp	r7, r3
 8012c56:	d2fb      	bcs.n	8012c50 <__hexnan+0xcc>
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	b91b      	cbnz	r3, 8012c64 <__hexnan+0xe0>
 8012c5c:	4547      	cmp	r7, r8
 8012c5e:	d127      	bne.n	8012cb0 <__hexnan+0x12c>
 8012c60:	2301      	movs	r3, #1
 8012c62:	603b      	str	r3, [r7, #0]
 8012c64:	2005      	movs	r0, #5
 8012c66:	e026      	b.n	8012cb6 <__hexnan+0x132>
 8012c68:	3501      	adds	r5, #1
 8012c6a:	2d08      	cmp	r5, #8
 8012c6c:	f10b 0b01 	add.w	fp, fp, #1
 8012c70:	dd06      	ble.n	8012c80 <__hexnan+0xfc>
 8012c72:	4544      	cmp	r4, r8
 8012c74:	d9c3      	bls.n	8012bfe <__hexnan+0x7a>
 8012c76:	2300      	movs	r3, #0
 8012c78:	f844 3c04 	str.w	r3, [r4, #-4]
 8012c7c:	2501      	movs	r5, #1
 8012c7e:	3c04      	subs	r4, #4
 8012c80:	6822      	ldr	r2, [r4, #0]
 8012c82:	f000 000f 	and.w	r0, r0, #15
 8012c86:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012c8a:	6022      	str	r2, [r4, #0]
 8012c8c:	e7b7      	b.n	8012bfe <__hexnan+0x7a>
 8012c8e:	2508      	movs	r5, #8
 8012c90:	e7b5      	b.n	8012bfe <__hexnan+0x7a>
 8012c92:	9b01      	ldr	r3, [sp, #4]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d0df      	beq.n	8012c58 <__hexnan+0xd4>
 8012c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c9c:	f1c3 0320 	rsb	r3, r3, #32
 8012ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8012ca4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012ca8:	401a      	ands	r2, r3
 8012caa:	f846 2c04 	str.w	r2, [r6, #-4]
 8012cae:	e7d3      	b.n	8012c58 <__hexnan+0xd4>
 8012cb0:	3f04      	subs	r7, #4
 8012cb2:	e7d1      	b.n	8012c58 <__hexnan+0xd4>
 8012cb4:	2004      	movs	r0, #4
 8012cb6:	b007      	add	sp, #28
 8012cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012cbc <_localeconv_r>:
 8012cbc:	4800      	ldr	r0, [pc, #0]	; (8012cc0 <_localeconv_r+0x4>)
 8012cbe:	4770      	bx	lr
 8012cc0:	2000016c 	.word	0x2000016c

08012cc4 <malloc>:
 8012cc4:	4b02      	ldr	r3, [pc, #8]	; (8012cd0 <malloc+0xc>)
 8012cc6:	4601      	mov	r1, r0
 8012cc8:	6818      	ldr	r0, [r3, #0]
 8012cca:	f000 bd59 	b.w	8013780 <_malloc_r>
 8012cce:	bf00      	nop
 8012cd0:	20000014 	.word	0x20000014

08012cd4 <__ascii_mbtowc>:
 8012cd4:	b082      	sub	sp, #8
 8012cd6:	b901      	cbnz	r1, 8012cda <__ascii_mbtowc+0x6>
 8012cd8:	a901      	add	r1, sp, #4
 8012cda:	b142      	cbz	r2, 8012cee <__ascii_mbtowc+0x1a>
 8012cdc:	b14b      	cbz	r3, 8012cf2 <__ascii_mbtowc+0x1e>
 8012cde:	7813      	ldrb	r3, [r2, #0]
 8012ce0:	600b      	str	r3, [r1, #0]
 8012ce2:	7812      	ldrb	r2, [r2, #0]
 8012ce4:	1e10      	subs	r0, r2, #0
 8012ce6:	bf18      	it	ne
 8012ce8:	2001      	movne	r0, #1
 8012cea:	b002      	add	sp, #8
 8012cec:	4770      	bx	lr
 8012cee:	4610      	mov	r0, r2
 8012cf0:	e7fb      	b.n	8012cea <__ascii_mbtowc+0x16>
 8012cf2:	f06f 0001 	mvn.w	r0, #1
 8012cf6:	e7f8      	b.n	8012cea <__ascii_mbtowc+0x16>

08012cf8 <_Balloc>:
 8012cf8:	b570      	push	{r4, r5, r6, lr}
 8012cfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	460d      	mov	r5, r1
 8012d00:	b976      	cbnz	r6, 8012d20 <_Balloc+0x28>
 8012d02:	2010      	movs	r0, #16
 8012d04:	f7ff ffde 	bl	8012cc4 <malloc>
 8012d08:	4602      	mov	r2, r0
 8012d0a:	6260      	str	r0, [r4, #36]	; 0x24
 8012d0c:	b920      	cbnz	r0, 8012d18 <_Balloc+0x20>
 8012d0e:	4b18      	ldr	r3, [pc, #96]	; (8012d70 <_Balloc+0x78>)
 8012d10:	4818      	ldr	r0, [pc, #96]	; (8012d74 <_Balloc+0x7c>)
 8012d12:	2166      	movs	r1, #102	; 0x66
 8012d14:	f000 ff3e 	bl	8013b94 <__assert_func>
 8012d18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d1c:	6006      	str	r6, [r0, #0]
 8012d1e:	60c6      	str	r6, [r0, #12]
 8012d20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012d22:	68f3      	ldr	r3, [r6, #12]
 8012d24:	b183      	cbz	r3, 8012d48 <_Balloc+0x50>
 8012d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d28:	68db      	ldr	r3, [r3, #12]
 8012d2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012d2e:	b9b8      	cbnz	r0, 8012d60 <_Balloc+0x68>
 8012d30:	2101      	movs	r1, #1
 8012d32:	fa01 f605 	lsl.w	r6, r1, r5
 8012d36:	1d72      	adds	r2, r6, #5
 8012d38:	0092      	lsls	r2, r2, #2
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	f000 fc9d 	bl	801367a <_calloc_r>
 8012d40:	b160      	cbz	r0, 8012d5c <_Balloc+0x64>
 8012d42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012d46:	e00e      	b.n	8012d66 <_Balloc+0x6e>
 8012d48:	2221      	movs	r2, #33	; 0x21
 8012d4a:	2104      	movs	r1, #4
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	f000 fc94 	bl	801367a <_calloc_r>
 8012d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d54:	60f0      	str	r0, [r6, #12]
 8012d56:	68db      	ldr	r3, [r3, #12]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d1e4      	bne.n	8012d26 <_Balloc+0x2e>
 8012d5c:	2000      	movs	r0, #0
 8012d5e:	bd70      	pop	{r4, r5, r6, pc}
 8012d60:	6802      	ldr	r2, [r0, #0]
 8012d62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d66:	2300      	movs	r3, #0
 8012d68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012d6c:	e7f7      	b.n	8012d5e <_Balloc+0x66>
 8012d6e:	bf00      	nop
 8012d70:	080154a6 	.word	0x080154a6
 8012d74:	080155a4 	.word	0x080155a4

08012d78 <_Bfree>:
 8012d78:	b570      	push	{r4, r5, r6, lr}
 8012d7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012d7c:	4605      	mov	r5, r0
 8012d7e:	460c      	mov	r4, r1
 8012d80:	b976      	cbnz	r6, 8012da0 <_Bfree+0x28>
 8012d82:	2010      	movs	r0, #16
 8012d84:	f7ff ff9e 	bl	8012cc4 <malloc>
 8012d88:	4602      	mov	r2, r0
 8012d8a:	6268      	str	r0, [r5, #36]	; 0x24
 8012d8c:	b920      	cbnz	r0, 8012d98 <_Bfree+0x20>
 8012d8e:	4b09      	ldr	r3, [pc, #36]	; (8012db4 <_Bfree+0x3c>)
 8012d90:	4809      	ldr	r0, [pc, #36]	; (8012db8 <_Bfree+0x40>)
 8012d92:	218a      	movs	r1, #138	; 0x8a
 8012d94:	f000 fefe 	bl	8013b94 <__assert_func>
 8012d98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d9c:	6006      	str	r6, [r0, #0]
 8012d9e:	60c6      	str	r6, [r0, #12]
 8012da0:	b13c      	cbz	r4, 8012db2 <_Bfree+0x3a>
 8012da2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012da4:	6862      	ldr	r2, [r4, #4]
 8012da6:	68db      	ldr	r3, [r3, #12]
 8012da8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012dac:	6021      	str	r1, [r4, #0]
 8012dae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012db2:	bd70      	pop	{r4, r5, r6, pc}
 8012db4:	080154a6 	.word	0x080154a6
 8012db8:	080155a4 	.word	0x080155a4

08012dbc <__multadd>:
 8012dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dc0:	690d      	ldr	r5, [r1, #16]
 8012dc2:	4607      	mov	r7, r0
 8012dc4:	460c      	mov	r4, r1
 8012dc6:	461e      	mov	r6, r3
 8012dc8:	f101 0c14 	add.w	ip, r1, #20
 8012dcc:	2000      	movs	r0, #0
 8012dce:	f8dc 3000 	ldr.w	r3, [ip]
 8012dd2:	b299      	uxth	r1, r3
 8012dd4:	fb02 6101 	mla	r1, r2, r1, r6
 8012dd8:	0c1e      	lsrs	r6, r3, #16
 8012dda:	0c0b      	lsrs	r3, r1, #16
 8012ddc:	fb02 3306 	mla	r3, r2, r6, r3
 8012de0:	b289      	uxth	r1, r1
 8012de2:	3001      	adds	r0, #1
 8012de4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012de8:	4285      	cmp	r5, r0
 8012dea:	f84c 1b04 	str.w	r1, [ip], #4
 8012dee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012df2:	dcec      	bgt.n	8012dce <__multadd+0x12>
 8012df4:	b30e      	cbz	r6, 8012e3a <__multadd+0x7e>
 8012df6:	68a3      	ldr	r3, [r4, #8]
 8012df8:	42ab      	cmp	r3, r5
 8012dfa:	dc19      	bgt.n	8012e30 <__multadd+0x74>
 8012dfc:	6861      	ldr	r1, [r4, #4]
 8012dfe:	4638      	mov	r0, r7
 8012e00:	3101      	adds	r1, #1
 8012e02:	f7ff ff79 	bl	8012cf8 <_Balloc>
 8012e06:	4680      	mov	r8, r0
 8012e08:	b928      	cbnz	r0, 8012e16 <__multadd+0x5a>
 8012e0a:	4602      	mov	r2, r0
 8012e0c:	4b0c      	ldr	r3, [pc, #48]	; (8012e40 <__multadd+0x84>)
 8012e0e:	480d      	ldr	r0, [pc, #52]	; (8012e44 <__multadd+0x88>)
 8012e10:	21b5      	movs	r1, #181	; 0xb5
 8012e12:	f000 febf 	bl	8013b94 <__assert_func>
 8012e16:	6922      	ldr	r2, [r4, #16]
 8012e18:	3202      	adds	r2, #2
 8012e1a:	f104 010c 	add.w	r1, r4, #12
 8012e1e:	0092      	lsls	r2, r2, #2
 8012e20:	300c      	adds	r0, #12
 8012e22:	f7fc fffd 	bl	800fe20 <memcpy>
 8012e26:	4621      	mov	r1, r4
 8012e28:	4638      	mov	r0, r7
 8012e2a:	f7ff ffa5 	bl	8012d78 <_Bfree>
 8012e2e:	4644      	mov	r4, r8
 8012e30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012e34:	3501      	adds	r5, #1
 8012e36:	615e      	str	r6, [r3, #20]
 8012e38:	6125      	str	r5, [r4, #16]
 8012e3a:	4620      	mov	r0, r4
 8012e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e40:	08015518 	.word	0x08015518
 8012e44:	080155a4 	.word	0x080155a4

08012e48 <__s2b>:
 8012e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e4c:	460c      	mov	r4, r1
 8012e4e:	4615      	mov	r5, r2
 8012e50:	461f      	mov	r7, r3
 8012e52:	2209      	movs	r2, #9
 8012e54:	3308      	adds	r3, #8
 8012e56:	4606      	mov	r6, r0
 8012e58:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e5c:	2100      	movs	r1, #0
 8012e5e:	2201      	movs	r2, #1
 8012e60:	429a      	cmp	r2, r3
 8012e62:	db09      	blt.n	8012e78 <__s2b+0x30>
 8012e64:	4630      	mov	r0, r6
 8012e66:	f7ff ff47 	bl	8012cf8 <_Balloc>
 8012e6a:	b940      	cbnz	r0, 8012e7e <__s2b+0x36>
 8012e6c:	4602      	mov	r2, r0
 8012e6e:	4b19      	ldr	r3, [pc, #100]	; (8012ed4 <__s2b+0x8c>)
 8012e70:	4819      	ldr	r0, [pc, #100]	; (8012ed8 <__s2b+0x90>)
 8012e72:	21ce      	movs	r1, #206	; 0xce
 8012e74:	f000 fe8e 	bl	8013b94 <__assert_func>
 8012e78:	0052      	lsls	r2, r2, #1
 8012e7a:	3101      	adds	r1, #1
 8012e7c:	e7f0      	b.n	8012e60 <__s2b+0x18>
 8012e7e:	9b08      	ldr	r3, [sp, #32]
 8012e80:	6143      	str	r3, [r0, #20]
 8012e82:	2d09      	cmp	r5, #9
 8012e84:	f04f 0301 	mov.w	r3, #1
 8012e88:	6103      	str	r3, [r0, #16]
 8012e8a:	dd16      	ble.n	8012eba <__s2b+0x72>
 8012e8c:	f104 0909 	add.w	r9, r4, #9
 8012e90:	46c8      	mov	r8, r9
 8012e92:	442c      	add	r4, r5
 8012e94:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012e98:	4601      	mov	r1, r0
 8012e9a:	3b30      	subs	r3, #48	; 0x30
 8012e9c:	220a      	movs	r2, #10
 8012e9e:	4630      	mov	r0, r6
 8012ea0:	f7ff ff8c 	bl	8012dbc <__multadd>
 8012ea4:	45a0      	cmp	r8, r4
 8012ea6:	d1f5      	bne.n	8012e94 <__s2b+0x4c>
 8012ea8:	f1a5 0408 	sub.w	r4, r5, #8
 8012eac:	444c      	add	r4, r9
 8012eae:	1b2d      	subs	r5, r5, r4
 8012eb0:	1963      	adds	r3, r4, r5
 8012eb2:	42bb      	cmp	r3, r7
 8012eb4:	db04      	blt.n	8012ec0 <__s2b+0x78>
 8012eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012eba:	340a      	adds	r4, #10
 8012ebc:	2509      	movs	r5, #9
 8012ebe:	e7f6      	b.n	8012eae <__s2b+0x66>
 8012ec0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012ec4:	4601      	mov	r1, r0
 8012ec6:	3b30      	subs	r3, #48	; 0x30
 8012ec8:	220a      	movs	r2, #10
 8012eca:	4630      	mov	r0, r6
 8012ecc:	f7ff ff76 	bl	8012dbc <__multadd>
 8012ed0:	e7ee      	b.n	8012eb0 <__s2b+0x68>
 8012ed2:	bf00      	nop
 8012ed4:	08015518 	.word	0x08015518
 8012ed8:	080155a4 	.word	0x080155a4

08012edc <__hi0bits>:
 8012edc:	0c03      	lsrs	r3, r0, #16
 8012ede:	041b      	lsls	r3, r3, #16
 8012ee0:	b9d3      	cbnz	r3, 8012f18 <__hi0bits+0x3c>
 8012ee2:	0400      	lsls	r0, r0, #16
 8012ee4:	2310      	movs	r3, #16
 8012ee6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012eea:	bf04      	itt	eq
 8012eec:	0200      	lsleq	r0, r0, #8
 8012eee:	3308      	addeq	r3, #8
 8012ef0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012ef4:	bf04      	itt	eq
 8012ef6:	0100      	lsleq	r0, r0, #4
 8012ef8:	3304      	addeq	r3, #4
 8012efa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012efe:	bf04      	itt	eq
 8012f00:	0080      	lsleq	r0, r0, #2
 8012f02:	3302      	addeq	r3, #2
 8012f04:	2800      	cmp	r0, #0
 8012f06:	db05      	blt.n	8012f14 <__hi0bits+0x38>
 8012f08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012f0c:	f103 0301 	add.w	r3, r3, #1
 8012f10:	bf08      	it	eq
 8012f12:	2320      	moveq	r3, #32
 8012f14:	4618      	mov	r0, r3
 8012f16:	4770      	bx	lr
 8012f18:	2300      	movs	r3, #0
 8012f1a:	e7e4      	b.n	8012ee6 <__hi0bits+0xa>

08012f1c <__lo0bits>:
 8012f1c:	6803      	ldr	r3, [r0, #0]
 8012f1e:	f013 0207 	ands.w	r2, r3, #7
 8012f22:	4601      	mov	r1, r0
 8012f24:	d00b      	beq.n	8012f3e <__lo0bits+0x22>
 8012f26:	07da      	lsls	r2, r3, #31
 8012f28:	d423      	bmi.n	8012f72 <__lo0bits+0x56>
 8012f2a:	0798      	lsls	r0, r3, #30
 8012f2c:	bf49      	itett	mi
 8012f2e:	085b      	lsrmi	r3, r3, #1
 8012f30:	089b      	lsrpl	r3, r3, #2
 8012f32:	2001      	movmi	r0, #1
 8012f34:	600b      	strmi	r3, [r1, #0]
 8012f36:	bf5c      	itt	pl
 8012f38:	600b      	strpl	r3, [r1, #0]
 8012f3a:	2002      	movpl	r0, #2
 8012f3c:	4770      	bx	lr
 8012f3e:	b298      	uxth	r0, r3
 8012f40:	b9a8      	cbnz	r0, 8012f6e <__lo0bits+0x52>
 8012f42:	0c1b      	lsrs	r3, r3, #16
 8012f44:	2010      	movs	r0, #16
 8012f46:	b2da      	uxtb	r2, r3
 8012f48:	b90a      	cbnz	r2, 8012f4e <__lo0bits+0x32>
 8012f4a:	3008      	adds	r0, #8
 8012f4c:	0a1b      	lsrs	r3, r3, #8
 8012f4e:	071a      	lsls	r2, r3, #28
 8012f50:	bf04      	itt	eq
 8012f52:	091b      	lsreq	r3, r3, #4
 8012f54:	3004      	addeq	r0, #4
 8012f56:	079a      	lsls	r2, r3, #30
 8012f58:	bf04      	itt	eq
 8012f5a:	089b      	lsreq	r3, r3, #2
 8012f5c:	3002      	addeq	r0, #2
 8012f5e:	07da      	lsls	r2, r3, #31
 8012f60:	d403      	bmi.n	8012f6a <__lo0bits+0x4e>
 8012f62:	085b      	lsrs	r3, r3, #1
 8012f64:	f100 0001 	add.w	r0, r0, #1
 8012f68:	d005      	beq.n	8012f76 <__lo0bits+0x5a>
 8012f6a:	600b      	str	r3, [r1, #0]
 8012f6c:	4770      	bx	lr
 8012f6e:	4610      	mov	r0, r2
 8012f70:	e7e9      	b.n	8012f46 <__lo0bits+0x2a>
 8012f72:	2000      	movs	r0, #0
 8012f74:	4770      	bx	lr
 8012f76:	2020      	movs	r0, #32
 8012f78:	4770      	bx	lr
	...

08012f7c <__i2b>:
 8012f7c:	b510      	push	{r4, lr}
 8012f7e:	460c      	mov	r4, r1
 8012f80:	2101      	movs	r1, #1
 8012f82:	f7ff feb9 	bl	8012cf8 <_Balloc>
 8012f86:	4602      	mov	r2, r0
 8012f88:	b928      	cbnz	r0, 8012f96 <__i2b+0x1a>
 8012f8a:	4b05      	ldr	r3, [pc, #20]	; (8012fa0 <__i2b+0x24>)
 8012f8c:	4805      	ldr	r0, [pc, #20]	; (8012fa4 <__i2b+0x28>)
 8012f8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012f92:	f000 fdff 	bl	8013b94 <__assert_func>
 8012f96:	2301      	movs	r3, #1
 8012f98:	6144      	str	r4, [r0, #20]
 8012f9a:	6103      	str	r3, [r0, #16]
 8012f9c:	bd10      	pop	{r4, pc}
 8012f9e:	bf00      	nop
 8012fa0:	08015518 	.word	0x08015518
 8012fa4:	080155a4 	.word	0x080155a4

08012fa8 <__multiply>:
 8012fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fac:	4691      	mov	r9, r2
 8012fae:	690a      	ldr	r2, [r1, #16]
 8012fb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	bfb8      	it	lt
 8012fb8:	460b      	movlt	r3, r1
 8012fba:	460c      	mov	r4, r1
 8012fbc:	bfbc      	itt	lt
 8012fbe:	464c      	movlt	r4, r9
 8012fc0:	4699      	movlt	r9, r3
 8012fc2:	6927      	ldr	r7, [r4, #16]
 8012fc4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012fc8:	68a3      	ldr	r3, [r4, #8]
 8012fca:	6861      	ldr	r1, [r4, #4]
 8012fcc:	eb07 060a 	add.w	r6, r7, sl
 8012fd0:	42b3      	cmp	r3, r6
 8012fd2:	b085      	sub	sp, #20
 8012fd4:	bfb8      	it	lt
 8012fd6:	3101      	addlt	r1, #1
 8012fd8:	f7ff fe8e 	bl	8012cf8 <_Balloc>
 8012fdc:	b930      	cbnz	r0, 8012fec <__multiply+0x44>
 8012fde:	4602      	mov	r2, r0
 8012fe0:	4b44      	ldr	r3, [pc, #272]	; (80130f4 <__multiply+0x14c>)
 8012fe2:	4845      	ldr	r0, [pc, #276]	; (80130f8 <__multiply+0x150>)
 8012fe4:	f240 115d 	movw	r1, #349	; 0x15d
 8012fe8:	f000 fdd4 	bl	8013b94 <__assert_func>
 8012fec:	f100 0514 	add.w	r5, r0, #20
 8012ff0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012ff4:	462b      	mov	r3, r5
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	4543      	cmp	r3, r8
 8012ffa:	d321      	bcc.n	8013040 <__multiply+0x98>
 8012ffc:	f104 0314 	add.w	r3, r4, #20
 8013000:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013004:	f109 0314 	add.w	r3, r9, #20
 8013008:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801300c:	9202      	str	r2, [sp, #8]
 801300e:	1b3a      	subs	r2, r7, r4
 8013010:	3a15      	subs	r2, #21
 8013012:	f022 0203 	bic.w	r2, r2, #3
 8013016:	3204      	adds	r2, #4
 8013018:	f104 0115 	add.w	r1, r4, #21
 801301c:	428f      	cmp	r7, r1
 801301e:	bf38      	it	cc
 8013020:	2204      	movcc	r2, #4
 8013022:	9201      	str	r2, [sp, #4]
 8013024:	9a02      	ldr	r2, [sp, #8]
 8013026:	9303      	str	r3, [sp, #12]
 8013028:	429a      	cmp	r2, r3
 801302a:	d80c      	bhi.n	8013046 <__multiply+0x9e>
 801302c:	2e00      	cmp	r6, #0
 801302e:	dd03      	ble.n	8013038 <__multiply+0x90>
 8013030:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013034:	2b00      	cmp	r3, #0
 8013036:	d05a      	beq.n	80130ee <__multiply+0x146>
 8013038:	6106      	str	r6, [r0, #16]
 801303a:	b005      	add	sp, #20
 801303c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013040:	f843 2b04 	str.w	r2, [r3], #4
 8013044:	e7d8      	b.n	8012ff8 <__multiply+0x50>
 8013046:	f8b3 a000 	ldrh.w	sl, [r3]
 801304a:	f1ba 0f00 	cmp.w	sl, #0
 801304e:	d024      	beq.n	801309a <__multiply+0xf2>
 8013050:	f104 0e14 	add.w	lr, r4, #20
 8013054:	46a9      	mov	r9, r5
 8013056:	f04f 0c00 	mov.w	ip, #0
 801305a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801305e:	f8d9 1000 	ldr.w	r1, [r9]
 8013062:	fa1f fb82 	uxth.w	fp, r2
 8013066:	b289      	uxth	r1, r1
 8013068:	fb0a 110b 	mla	r1, sl, fp, r1
 801306c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013070:	f8d9 2000 	ldr.w	r2, [r9]
 8013074:	4461      	add	r1, ip
 8013076:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801307a:	fb0a c20b 	mla	r2, sl, fp, ip
 801307e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013082:	b289      	uxth	r1, r1
 8013084:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013088:	4577      	cmp	r7, lr
 801308a:	f849 1b04 	str.w	r1, [r9], #4
 801308e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013092:	d8e2      	bhi.n	801305a <__multiply+0xb2>
 8013094:	9a01      	ldr	r2, [sp, #4]
 8013096:	f845 c002 	str.w	ip, [r5, r2]
 801309a:	9a03      	ldr	r2, [sp, #12]
 801309c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80130a0:	3304      	adds	r3, #4
 80130a2:	f1b9 0f00 	cmp.w	r9, #0
 80130a6:	d020      	beq.n	80130ea <__multiply+0x142>
 80130a8:	6829      	ldr	r1, [r5, #0]
 80130aa:	f104 0c14 	add.w	ip, r4, #20
 80130ae:	46ae      	mov	lr, r5
 80130b0:	f04f 0a00 	mov.w	sl, #0
 80130b4:	f8bc b000 	ldrh.w	fp, [ip]
 80130b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80130bc:	fb09 220b 	mla	r2, r9, fp, r2
 80130c0:	4492      	add	sl, r2
 80130c2:	b289      	uxth	r1, r1
 80130c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80130c8:	f84e 1b04 	str.w	r1, [lr], #4
 80130cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80130d0:	f8be 1000 	ldrh.w	r1, [lr]
 80130d4:	0c12      	lsrs	r2, r2, #16
 80130d6:	fb09 1102 	mla	r1, r9, r2, r1
 80130da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80130de:	4567      	cmp	r7, ip
 80130e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80130e4:	d8e6      	bhi.n	80130b4 <__multiply+0x10c>
 80130e6:	9a01      	ldr	r2, [sp, #4]
 80130e8:	50a9      	str	r1, [r5, r2]
 80130ea:	3504      	adds	r5, #4
 80130ec:	e79a      	b.n	8013024 <__multiply+0x7c>
 80130ee:	3e01      	subs	r6, #1
 80130f0:	e79c      	b.n	801302c <__multiply+0x84>
 80130f2:	bf00      	nop
 80130f4:	08015518 	.word	0x08015518
 80130f8:	080155a4 	.word	0x080155a4

080130fc <__pow5mult>:
 80130fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013100:	4615      	mov	r5, r2
 8013102:	f012 0203 	ands.w	r2, r2, #3
 8013106:	4606      	mov	r6, r0
 8013108:	460f      	mov	r7, r1
 801310a:	d007      	beq.n	801311c <__pow5mult+0x20>
 801310c:	4c25      	ldr	r4, [pc, #148]	; (80131a4 <__pow5mult+0xa8>)
 801310e:	3a01      	subs	r2, #1
 8013110:	2300      	movs	r3, #0
 8013112:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013116:	f7ff fe51 	bl	8012dbc <__multadd>
 801311a:	4607      	mov	r7, r0
 801311c:	10ad      	asrs	r5, r5, #2
 801311e:	d03d      	beq.n	801319c <__pow5mult+0xa0>
 8013120:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013122:	b97c      	cbnz	r4, 8013144 <__pow5mult+0x48>
 8013124:	2010      	movs	r0, #16
 8013126:	f7ff fdcd 	bl	8012cc4 <malloc>
 801312a:	4602      	mov	r2, r0
 801312c:	6270      	str	r0, [r6, #36]	; 0x24
 801312e:	b928      	cbnz	r0, 801313c <__pow5mult+0x40>
 8013130:	4b1d      	ldr	r3, [pc, #116]	; (80131a8 <__pow5mult+0xac>)
 8013132:	481e      	ldr	r0, [pc, #120]	; (80131ac <__pow5mult+0xb0>)
 8013134:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013138:	f000 fd2c 	bl	8013b94 <__assert_func>
 801313c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013140:	6004      	str	r4, [r0, #0]
 8013142:	60c4      	str	r4, [r0, #12]
 8013144:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013148:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801314c:	b94c      	cbnz	r4, 8013162 <__pow5mult+0x66>
 801314e:	f240 2171 	movw	r1, #625	; 0x271
 8013152:	4630      	mov	r0, r6
 8013154:	f7ff ff12 	bl	8012f7c <__i2b>
 8013158:	2300      	movs	r3, #0
 801315a:	f8c8 0008 	str.w	r0, [r8, #8]
 801315e:	4604      	mov	r4, r0
 8013160:	6003      	str	r3, [r0, #0]
 8013162:	f04f 0900 	mov.w	r9, #0
 8013166:	07eb      	lsls	r3, r5, #31
 8013168:	d50a      	bpl.n	8013180 <__pow5mult+0x84>
 801316a:	4639      	mov	r1, r7
 801316c:	4622      	mov	r2, r4
 801316e:	4630      	mov	r0, r6
 8013170:	f7ff ff1a 	bl	8012fa8 <__multiply>
 8013174:	4639      	mov	r1, r7
 8013176:	4680      	mov	r8, r0
 8013178:	4630      	mov	r0, r6
 801317a:	f7ff fdfd 	bl	8012d78 <_Bfree>
 801317e:	4647      	mov	r7, r8
 8013180:	106d      	asrs	r5, r5, #1
 8013182:	d00b      	beq.n	801319c <__pow5mult+0xa0>
 8013184:	6820      	ldr	r0, [r4, #0]
 8013186:	b938      	cbnz	r0, 8013198 <__pow5mult+0x9c>
 8013188:	4622      	mov	r2, r4
 801318a:	4621      	mov	r1, r4
 801318c:	4630      	mov	r0, r6
 801318e:	f7ff ff0b 	bl	8012fa8 <__multiply>
 8013192:	6020      	str	r0, [r4, #0]
 8013194:	f8c0 9000 	str.w	r9, [r0]
 8013198:	4604      	mov	r4, r0
 801319a:	e7e4      	b.n	8013166 <__pow5mult+0x6a>
 801319c:	4638      	mov	r0, r7
 801319e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131a2:	bf00      	nop
 80131a4:	080156f0 	.word	0x080156f0
 80131a8:	080154a6 	.word	0x080154a6
 80131ac:	080155a4 	.word	0x080155a4

080131b0 <__lshift>:
 80131b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131b4:	460c      	mov	r4, r1
 80131b6:	6849      	ldr	r1, [r1, #4]
 80131b8:	6923      	ldr	r3, [r4, #16]
 80131ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80131be:	68a3      	ldr	r3, [r4, #8]
 80131c0:	4607      	mov	r7, r0
 80131c2:	4691      	mov	r9, r2
 80131c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80131c8:	f108 0601 	add.w	r6, r8, #1
 80131cc:	42b3      	cmp	r3, r6
 80131ce:	db0b      	blt.n	80131e8 <__lshift+0x38>
 80131d0:	4638      	mov	r0, r7
 80131d2:	f7ff fd91 	bl	8012cf8 <_Balloc>
 80131d6:	4605      	mov	r5, r0
 80131d8:	b948      	cbnz	r0, 80131ee <__lshift+0x3e>
 80131da:	4602      	mov	r2, r0
 80131dc:	4b2a      	ldr	r3, [pc, #168]	; (8013288 <__lshift+0xd8>)
 80131de:	482b      	ldr	r0, [pc, #172]	; (801328c <__lshift+0xdc>)
 80131e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80131e4:	f000 fcd6 	bl	8013b94 <__assert_func>
 80131e8:	3101      	adds	r1, #1
 80131ea:	005b      	lsls	r3, r3, #1
 80131ec:	e7ee      	b.n	80131cc <__lshift+0x1c>
 80131ee:	2300      	movs	r3, #0
 80131f0:	f100 0114 	add.w	r1, r0, #20
 80131f4:	f100 0210 	add.w	r2, r0, #16
 80131f8:	4618      	mov	r0, r3
 80131fa:	4553      	cmp	r3, sl
 80131fc:	db37      	blt.n	801326e <__lshift+0xbe>
 80131fe:	6920      	ldr	r0, [r4, #16]
 8013200:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013204:	f104 0314 	add.w	r3, r4, #20
 8013208:	f019 091f 	ands.w	r9, r9, #31
 801320c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013210:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013214:	d02f      	beq.n	8013276 <__lshift+0xc6>
 8013216:	f1c9 0e20 	rsb	lr, r9, #32
 801321a:	468a      	mov	sl, r1
 801321c:	f04f 0c00 	mov.w	ip, #0
 8013220:	681a      	ldr	r2, [r3, #0]
 8013222:	fa02 f209 	lsl.w	r2, r2, r9
 8013226:	ea42 020c 	orr.w	r2, r2, ip
 801322a:	f84a 2b04 	str.w	r2, [sl], #4
 801322e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013232:	4298      	cmp	r0, r3
 8013234:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013238:	d8f2      	bhi.n	8013220 <__lshift+0x70>
 801323a:	1b03      	subs	r3, r0, r4
 801323c:	3b15      	subs	r3, #21
 801323e:	f023 0303 	bic.w	r3, r3, #3
 8013242:	3304      	adds	r3, #4
 8013244:	f104 0215 	add.w	r2, r4, #21
 8013248:	4290      	cmp	r0, r2
 801324a:	bf38      	it	cc
 801324c:	2304      	movcc	r3, #4
 801324e:	f841 c003 	str.w	ip, [r1, r3]
 8013252:	f1bc 0f00 	cmp.w	ip, #0
 8013256:	d001      	beq.n	801325c <__lshift+0xac>
 8013258:	f108 0602 	add.w	r6, r8, #2
 801325c:	3e01      	subs	r6, #1
 801325e:	4638      	mov	r0, r7
 8013260:	612e      	str	r6, [r5, #16]
 8013262:	4621      	mov	r1, r4
 8013264:	f7ff fd88 	bl	8012d78 <_Bfree>
 8013268:	4628      	mov	r0, r5
 801326a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801326e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013272:	3301      	adds	r3, #1
 8013274:	e7c1      	b.n	80131fa <__lshift+0x4a>
 8013276:	3904      	subs	r1, #4
 8013278:	f853 2b04 	ldr.w	r2, [r3], #4
 801327c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013280:	4298      	cmp	r0, r3
 8013282:	d8f9      	bhi.n	8013278 <__lshift+0xc8>
 8013284:	e7ea      	b.n	801325c <__lshift+0xac>
 8013286:	bf00      	nop
 8013288:	08015518 	.word	0x08015518
 801328c:	080155a4 	.word	0x080155a4

08013290 <__mcmp>:
 8013290:	b530      	push	{r4, r5, lr}
 8013292:	6902      	ldr	r2, [r0, #16]
 8013294:	690c      	ldr	r4, [r1, #16]
 8013296:	1b12      	subs	r2, r2, r4
 8013298:	d10e      	bne.n	80132b8 <__mcmp+0x28>
 801329a:	f100 0314 	add.w	r3, r0, #20
 801329e:	3114      	adds	r1, #20
 80132a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80132a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80132a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80132ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80132b0:	42a5      	cmp	r5, r4
 80132b2:	d003      	beq.n	80132bc <__mcmp+0x2c>
 80132b4:	d305      	bcc.n	80132c2 <__mcmp+0x32>
 80132b6:	2201      	movs	r2, #1
 80132b8:	4610      	mov	r0, r2
 80132ba:	bd30      	pop	{r4, r5, pc}
 80132bc:	4283      	cmp	r3, r0
 80132be:	d3f3      	bcc.n	80132a8 <__mcmp+0x18>
 80132c0:	e7fa      	b.n	80132b8 <__mcmp+0x28>
 80132c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80132c6:	e7f7      	b.n	80132b8 <__mcmp+0x28>

080132c8 <__mdiff>:
 80132c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132cc:	460c      	mov	r4, r1
 80132ce:	4606      	mov	r6, r0
 80132d0:	4611      	mov	r1, r2
 80132d2:	4620      	mov	r0, r4
 80132d4:	4690      	mov	r8, r2
 80132d6:	f7ff ffdb 	bl	8013290 <__mcmp>
 80132da:	1e05      	subs	r5, r0, #0
 80132dc:	d110      	bne.n	8013300 <__mdiff+0x38>
 80132de:	4629      	mov	r1, r5
 80132e0:	4630      	mov	r0, r6
 80132e2:	f7ff fd09 	bl	8012cf8 <_Balloc>
 80132e6:	b930      	cbnz	r0, 80132f6 <__mdiff+0x2e>
 80132e8:	4b3a      	ldr	r3, [pc, #232]	; (80133d4 <__mdiff+0x10c>)
 80132ea:	4602      	mov	r2, r0
 80132ec:	f240 2132 	movw	r1, #562	; 0x232
 80132f0:	4839      	ldr	r0, [pc, #228]	; (80133d8 <__mdiff+0x110>)
 80132f2:	f000 fc4f 	bl	8013b94 <__assert_func>
 80132f6:	2301      	movs	r3, #1
 80132f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80132fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013300:	bfa4      	itt	ge
 8013302:	4643      	movge	r3, r8
 8013304:	46a0      	movge	r8, r4
 8013306:	4630      	mov	r0, r6
 8013308:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801330c:	bfa6      	itte	ge
 801330e:	461c      	movge	r4, r3
 8013310:	2500      	movge	r5, #0
 8013312:	2501      	movlt	r5, #1
 8013314:	f7ff fcf0 	bl	8012cf8 <_Balloc>
 8013318:	b920      	cbnz	r0, 8013324 <__mdiff+0x5c>
 801331a:	4b2e      	ldr	r3, [pc, #184]	; (80133d4 <__mdiff+0x10c>)
 801331c:	4602      	mov	r2, r0
 801331e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013322:	e7e5      	b.n	80132f0 <__mdiff+0x28>
 8013324:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013328:	6926      	ldr	r6, [r4, #16]
 801332a:	60c5      	str	r5, [r0, #12]
 801332c:	f104 0914 	add.w	r9, r4, #20
 8013330:	f108 0514 	add.w	r5, r8, #20
 8013334:	f100 0e14 	add.w	lr, r0, #20
 8013338:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801333c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013340:	f108 0210 	add.w	r2, r8, #16
 8013344:	46f2      	mov	sl, lr
 8013346:	2100      	movs	r1, #0
 8013348:	f859 3b04 	ldr.w	r3, [r9], #4
 801334c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013350:	fa1f f883 	uxth.w	r8, r3
 8013354:	fa11 f18b 	uxtah	r1, r1, fp
 8013358:	0c1b      	lsrs	r3, r3, #16
 801335a:	eba1 0808 	sub.w	r8, r1, r8
 801335e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013362:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013366:	fa1f f888 	uxth.w	r8, r8
 801336a:	1419      	asrs	r1, r3, #16
 801336c:	454e      	cmp	r6, r9
 801336e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013372:	f84a 3b04 	str.w	r3, [sl], #4
 8013376:	d8e7      	bhi.n	8013348 <__mdiff+0x80>
 8013378:	1b33      	subs	r3, r6, r4
 801337a:	3b15      	subs	r3, #21
 801337c:	f023 0303 	bic.w	r3, r3, #3
 8013380:	3304      	adds	r3, #4
 8013382:	3415      	adds	r4, #21
 8013384:	42a6      	cmp	r6, r4
 8013386:	bf38      	it	cc
 8013388:	2304      	movcc	r3, #4
 801338a:	441d      	add	r5, r3
 801338c:	4473      	add	r3, lr
 801338e:	469e      	mov	lr, r3
 8013390:	462e      	mov	r6, r5
 8013392:	4566      	cmp	r6, ip
 8013394:	d30e      	bcc.n	80133b4 <__mdiff+0xec>
 8013396:	f10c 0203 	add.w	r2, ip, #3
 801339a:	1b52      	subs	r2, r2, r5
 801339c:	f022 0203 	bic.w	r2, r2, #3
 80133a0:	3d03      	subs	r5, #3
 80133a2:	45ac      	cmp	ip, r5
 80133a4:	bf38      	it	cc
 80133a6:	2200      	movcc	r2, #0
 80133a8:	441a      	add	r2, r3
 80133aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80133ae:	b17b      	cbz	r3, 80133d0 <__mdiff+0x108>
 80133b0:	6107      	str	r7, [r0, #16]
 80133b2:	e7a3      	b.n	80132fc <__mdiff+0x34>
 80133b4:	f856 8b04 	ldr.w	r8, [r6], #4
 80133b8:	fa11 f288 	uxtah	r2, r1, r8
 80133bc:	1414      	asrs	r4, r2, #16
 80133be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80133c2:	b292      	uxth	r2, r2
 80133c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80133c8:	f84e 2b04 	str.w	r2, [lr], #4
 80133cc:	1421      	asrs	r1, r4, #16
 80133ce:	e7e0      	b.n	8013392 <__mdiff+0xca>
 80133d0:	3f01      	subs	r7, #1
 80133d2:	e7ea      	b.n	80133aa <__mdiff+0xe2>
 80133d4:	08015518 	.word	0x08015518
 80133d8:	080155a4 	.word	0x080155a4

080133dc <__ulp>:
 80133dc:	b082      	sub	sp, #8
 80133de:	ed8d 0b00 	vstr	d0, [sp]
 80133e2:	9b01      	ldr	r3, [sp, #4]
 80133e4:	4912      	ldr	r1, [pc, #72]	; (8013430 <__ulp+0x54>)
 80133e6:	4019      	ands	r1, r3
 80133e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80133ec:	2900      	cmp	r1, #0
 80133ee:	dd05      	ble.n	80133fc <__ulp+0x20>
 80133f0:	2200      	movs	r2, #0
 80133f2:	460b      	mov	r3, r1
 80133f4:	ec43 2b10 	vmov	d0, r2, r3
 80133f8:	b002      	add	sp, #8
 80133fa:	4770      	bx	lr
 80133fc:	4249      	negs	r1, r1
 80133fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013402:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013406:	f04f 0200 	mov.w	r2, #0
 801340a:	f04f 0300 	mov.w	r3, #0
 801340e:	da04      	bge.n	801341a <__ulp+0x3e>
 8013410:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013414:	fa41 f300 	asr.w	r3, r1, r0
 8013418:	e7ec      	b.n	80133f4 <__ulp+0x18>
 801341a:	f1a0 0114 	sub.w	r1, r0, #20
 801341e:	291e      	cmp	r1, #30
 8013420:	bfda      	itte	le
 8013422:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013426:	fa20 f101 	lsrle.w	r1, r0, r1
 801342a:	2101      	movgt	r1, #1
 801342c:	460a      	mov	r2, r1
 801342e:	e7e1      	b.n	80133f4 <__ulp+0x18>
 8013430:	7ff00000 	.word	0x7ff00000

08013434 <__b2d>:
 8013434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013436:	6905      	ldr	r5, [r0, #16]
 8013438:	f100 0714 	add.w	r7, r0, #20
 801343c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013440:	1f2e      	subs	r6, r5, #4
 8013442:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013446:	4620      	mov	r0, r4
 8013448:	f7ff fd48 	bl	8012edc <__hi0bits>
 801344c:	f1c0 0320 	rsb	r3, r0, #32
 8013450:	280a      	cmp	r0, #10
 8013452:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80134d0 <__b2d+0x9c>
 8013456:	600b      	str	r3, [r1, #0]
 8013458:	dc14      	bgt.n	8013484 <__b2d+0x50>
 801345a:	f1c0 0e0b 	rsb	lr, r0, #11
 801345e:	fa24 f10e 	lsr.w	r1, r4, lr
 8013462:	42b7      	cmp	r7, r6
 8013464:	ea41 030c 	orr.w	r3, r1, ip
 8013468:	bf34      	ite	cc
 801346a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801346e:	2100      	movcs	r1, #0
 8013470:	3015      	adds	r0, #21
 8013472:	fa04 f000 	lsl.w	r0, r4, r0
 8013476:	fa21 f10e 	lsr.w	r1, r1, lr
 801347a:	ea40 0201 	orr.w	r2, r0, r1
 801347e:	ec43 2b10 	vmov	d0, r2, r3
 8013482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013484:	42b7      	cmp	r7, r6
 8013486:	bf3a      	itte	cc
 8013488:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801348c:	f1a5 0608 	subcc.w	r6, r5, #8
 8013490:	2100      	movcs	r1, #0
 8013492:	380b      	subs	r0, #11
 8013494:	d017      	beq.n	80134c6 <__b2d+0x92>
 8013496:	f1c0 0c20 	rsb	ip, r0, #32
 801349a:	fa04 f500 	lsl.w	r5, r4, r0
 801349e:	42be      	cmp	r6, r7
 80134a0:	fa21 f40c 	lsr.w	r4, r1, ip
 80134a4:	ea45 0504 	orr.w	r5, r5, r4
 80134a8:	bf8c      	ite	hi
 80134aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80134ae:	2400      	movls	r4, #0
 80134b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80134b4:	fa01 f000 	lsl.w	r0, r1, r0
 80134b8:	fa24 f40c 	lsr.w	r4, r4, ip
 80134bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80134c0:	ea40 0204 	orr.w	r2, r0, r4
 80134c4:	e7db      	b.n	801347e <__b2d+0x4a>
 80134c6:	ea44 030c 	orr.w	r3, r4, ip
 80134ca:	460a      	mov	r2, r1
 80134cc:	e7d7      	b.n	801347e <__b2d+0x4a>
 80134ce:	bf00      	nop
 80134d0:	3ff00000 	.word	0x3ff00000

080134d4 <__d2b>:
 80134d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80134d8:	4689      	mov	r9, r1
 80134da:	2101      	movs	r1, #1
 80134dc:	ec57 6b10 	vmov	r6, r7, d0
 80134e0:	4690      	mov	r8, r2
 80134e2:	f7ff fc09 	bl	8012cf8 <_Balloc>
 80134e6:	4604      	mov	r4, r0
 80134e8:	b930      	cbnz	r0, 80134f8 <__d2b+0x24>
 80134ea:	4602      	mov	r2, r0
 80134ec:	4b25      	ldr	r3, [pc, #148]	; (8013584 <__d2b+0xb0>)
 80134ee:	4826      	ldr	r0, [pc, #152]	; (8013588 <__d2b+0xb4>)
 80134f0:	f240 310a 	movw	r1, #778	; 0x30a
 80134f4:	f000 fb4e 	bl	8013b94 <__assert_func>
 80134f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80134fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013500:	bb35      	cbnz	r5, 8013550 <__d2b+0x7c>
 8013502:	2e00      	cmp	r6, #0
 8013504:	9301      	str	r3, [sp, #4]
 8013506:	d028      	beq.n	801355a <__d2b+0x86>
 8013508:	4668      	mov	r0, sp
 801350a:	9600      	str	r6, [sp, #0]
 801350c:	f7ff fd06 	bl	8012f1c <__lo0bits>
 8013510:	9900      	ldr	r1, [sp, #0]
 8013512:	b300      	cbz	r0, 8013556 <__d2b+0x82>
 8013514:	9a01      	ldr	r2, [sp, #4]
 8013516:	f1c0 0320 	rsb	r3, r0, #32
 801351a:	fa02 f303 	lsl.w	r3, r2, r3
 801351e:	430b      	orrs	r3, r1
 8013520:	40c2      	lsrs	r2, r0
 8013522:	6163      	str	r3, [r4, #20]
 8013524:	9201      	str	r2, [sp, #4]
 8013526:	9b01      	ldr	r3, [sp, #4]
 8013528:	61a3      	str	r3, [r4, #24]
 801352a:	2b00      	cmp	r3, #0
 801352c:	bf14      	ite	ne
 801352e:	2202      	movne	r2, #2
 8013530:	2201      	moveq	r2, #1
 8013532:	6122      	str	r2, [r4, #16]
 8013534:	b1d5      	cbz	r5, 801356c <__d2b+0x98>
 8013536:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801353a:	4405      	add	r5, r0
 801353c:	f8c9 5000 	str.w	r5, [r9]
 8013540:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013544:	f8c8 0000 	str.w	r0, [r8]
 8013548:	4620      	mov	r0, r4
 801354a:	b003      	add	sp, #12
 801354c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013554:	e7d5      	b.n	8013502 <__d2b+0x2e>
 8013556:	6161      	str	r1, [r4, #20]
 8013558:	e7e5      	b.n	8013526 <__d2b+0x52>
 801355a:	a801      	add	r0, sp, #4
 801355c:	f7ff fcde 	bl	8012f1c <__lo0bits>
 8013560:	9b01      	ldr	r3, [sp, #4]
 8013562:	6163      	str	r3, [r4, #20]
 8013564:	2201      	movs	r2, #1
 8013566:	6122      	str	r2, [r4, #16]
 8013568:	3020      	adds	r0, #32
 801356a:	e7e3      	b.n	8013534 <__d2b+0x60>
 801356c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013570:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013574:	f8c9 0000 	str.w	r0, [r9]
 8013578:	6918      	ldr	r0, [r3, #16]
 801357a:	f7ff fcaf 	bl	8012edc <__hi0bits>
 801357e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013582:	e7df      	b.n	8013544 <__d2b+0x70>
 8013584:	08015518 	.word	0x08015518
 8013588:	080155a4 	.word	0x080155a4

0801358c <__ratio>:
 801358c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013590:	4688      	mov	r8, r1
 8013592:	4669      	mov	r1, sp
 8013594:	4681      	mov	r9, r0
 8013596:	f7ff ff4d 	bl	8013434 <__b2d>
 801359a:	a901      	add	r1, sp, #4
 801359c:	4640      	mov	r0, r8
 801359e:	ec55 4b10 	vmov	r4, r5, d0
 80135a2:	f7ff ff47 	bl	8013434 <__b2d>
 80135a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80135aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80135ae:	eba3 0c02 	sub.w	ip, r3, r2
 80135b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80135b6:	1a9b      	subs	r3, r3, r2
 80135b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80135bc:	ec51 0b10 	vmov	r0, r1, d0
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	bfd6      	itet	le
 80135c4:	460a      	movle	r2, r1
 80135c6:	462a      	movgt	r2, r5
 80135c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80135cc:	468b      	mov	fp, r1
 80135ce:	462f      	mov	r7, r5
 80135d0:	bfd4      	ite	le
 80135d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80135d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80135da:	4620      	mov	r0, r4
 80135dc:	ee10 2a10 	vmov	r2, s0
 80135e0:	465b      	mov	r3, fp
 80135e2:	4639      	mov	r1, r7
 80135e4:	f7ed f932 	bl	800084c <__aeabi_ddiv>
 80135e8:	ec41 0b10 	vmov	d0, r0, r1
 80135ec:	b003      	add	sp, #12
 80135ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080135f2 <__copybits>:
 80135f2:	3901      	subs	r1, #1
 80135f4:	b570      	push	{r4, r5, r6, lr}
 80135f6:	1149      	asrs	r1, r1, #5
 80135f8:	6914      	ldr	r4, [r2, #16]
 80135fa:	3101      	adds	r1, #1
 80135fc:	f102 0314 	add.w	r3, r2, #20
 8013600:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013604:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013608:	1f05      	subs	r5, r0, #4
 801360a:	42a3      	cmp	r3, r4
 801360c:	d30c      	bcc.n	8013628 <__copybits+0x36>
 801360e:	1aa3      	subs	r3, r4, r2
 8013610:	3b11      	subs	r3, #17
 8013612:	f023 0303 	bic.w	r3, r3, #3
 8013616:	3211      	adds	r2, #17
 8013618:	42a2      	cmp	r2, r4
 801361a:	bf88      	it	hi
 801361c:	2300      	movhi	r3, #0
 801361e:	4418      	add	r0, r3
 8013620:	2300      	movs	r3, #0
 8013622:	4288      	cmp	r0, r1
 8013624:	d305      	bcc.n	8013632 <__copybits+0x40>
 8013626:	bd70      	pop	{r4, r5, r6, pc}
 8013628:	f853 6b04 	ldr.w	r6, [r3], #4
 801362c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013630:	e7eb      	b.n	801360a <__copybits+0x18>
 8013632:	f840 3b04 	str.w	r3, [r0], #4
 8013636:	e7f4      	b.n	8013622 <__copybits+0x30>

08013638 <__any_on>:
 8013638:	f100 0214 	add.w	r2, r0, #20
 801363c:	6900      	ldr	r0, [r0, #16]
 801363e:	114b      	asrs	r3, r1, #5
 8013640:	4298      	cmp	r0, r3
 8013642:	b510      	push	{r4, lr}
 8013644:	db11      	blt.n	801366a <__any_on+0x32>
 8013646:	dd0a      	ble.n	801365e <__any_on+0x26>
 8013648:	f011 011f 	ands.w	r1, r1, #31
 801364c:	d007      	beq.n	801365e <__any_on+0x26>
 801364e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013652:	fa24 f001 	lsr.w	r0, r4, r1
 8013656:	fa00 f101 	lsl.w	r1, r0, r1
 801365a:	428c      	cmp	r4, r1
 801365c:	d10b      	bne.n	8013676 <__any_on+0x3e>
 801365e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013662:	4293      	cmp	r3, r2
 8013664:	d803      	bhi.n	801366e <__any_on+0x36>
 8013666:	2000      	movs	r0, #0
 8013668:	bd10      	pop	{r4, pc}
 801366a:	4603      	mov	r3, r0
 801366c:	e7f7      	b.n	801365e <__any_on+0x26>
 801366e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013672:	2900      	cmp	r1, #0
 8013674:	d0f5      	beq.n	8013662 <__any_on+0x2a>
 8013676:	2001      	movs	r0, #1
 8013678:	e7f6      	b.n	8013668 <__any_on+0x30>

0801367a <_calloc_r>:
 801367a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801367c:	fba1 2402 	umull	r2, r4, r1, r2
 8013680:	b94c      	cbnz	r4, 8013696 <_calloc_r+0x1c>
 8013682:	4611      	mov	r1, r2
 8013684:	9201      	str	r2, [sp, #4]
 8013686:	f000 f87b 	bl	8013780 <_malloc_r>
 801368a:	9a01      	ldr	r2, [sp, #4]
 801368c:	4605      	mov	r5, r0
 801368e:	b930      	cbnz	r0, 801369e <_calloc_r+0x24>
 8013690:	4628      	mov	r0, r5
 8013692:	b003      	add	sp, #12
 8013694:	bd30      	pop	{r4, r5, pc}
 8013696:	220c      	movs	r2, #12
 8013698:	6002      	str	r2, [r0, #0]
 801369a:	2500      	movs	r5, #0
 801369c:	e7f8      	b.n	8013690 <_calloc_r+0x16>
 801369e:	4621      	mov	r1, r4
 80136a0:	f7fc fbcc 	bl	800fe3c <memset>
 80136a4:	e7f4      	b.n	8013690 <_calloc_r+0x16>
	...

080136a8 <_free_r>:
 80136a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80136aa:	2900      	cmp	r1, #0
 80136ac:	d044      	beq.n	8013738 <_free_r+0x90>
 80136ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80136b2:	9001      	str	r0, [sp, #4]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	f1a1 0404 	sub.w	r4, r1, #4
 80136ba:	bfb8      	it	lt
 80136bc:	18e4      	addlt	r4, r4, r3
 80136be:	f000 fab3 	bl	8013c28 <__malloc_lock>
 80136c2:	4a1e      	ldr	r2, [pc, #120]	; (801373c <_free_r+0x94>)
 80136c4:	9801      	ldr	r0, [sp, #4]
 80136c6:	6813      	ldr	r3, [r2, #0]
 80136c8:	b933      	cbnz	r3, 80136d8 <_free_r+0x30>
 80136ca:	6063      	str	r3, [r4, #4]
 80136cc:	6014      	str	r4, [r2, #0]
 80136ce:	b003      	add	sp, #12
 80136d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136d4:	f000 baae 	b.w	8013c34 <__malloc_unlock>
 80136d8:	42a3      	cmp	r3, r4
 80136da:	d908      	bls.n	80136ee <_free_r+0x46>
 80136dc:	6825      	ldr	r5, [r4, #0]
 80136de:	1961      	adds	r1, r4, r5
 80136e0:	428b      	cmp	r3, r1
 80136e2:	bf01      	itttt	eq
 80136e4:	6819      	ldreq	r1, [r3, #0]
 80136e6:	685b      	ldreq	r3, [r3, #4]
 80136e8:	1949      	addeq	r1, r1, r5
 80136ea:	6021      	streq	r1, [r4, #0]
 80136ec:	e7ed      	b.n	80136ca <_free_r+0x22>
 80136ee:	461a      	mov	r2, r3
 80136f0:	685b      	ldr	r3, [r3, #4]
 80136f2:	b10b      	cbz	r3, 80136f8 <_free_r+0x50>
 80136f4:	42a3      	cmp	r3, r4
 80136f6:	d9fa      	bls.n	80136ee <_free_r+0x46>
 80136f8:	6811      	ldr	r1, [r2, #0]
 80136fa:	1855      	adds	r5, r2, r1
 80136fc:	42a5      	cmp	r5, r4
 80136fe:	d10b      	bne.n	8013718 <_free_r+0x70>
 8013700:	6824      	ldr	r4, [r4, #0]
 8013702:	4421      	add	r1, r4
 8013704:	1854      	adds	r4, r2, r1
 8013706:	42a3      	cmp	r3, r4
 8013708:	6011      	str	r1, [r2, #0]
 801370a:	d1e0      	bne.n	80136ce <_free_r+0x26>
 801370c:	681c      	ldr	r4, [r3, #0]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	6053      	str	r3, [r2, #4]
 8013712:	4421      	add	r1, r4
 8013714:	6011      	str	r1, [r2, #0]
 8013716:	e7da      	b.n	80136ce <_free_r+0x26>
 8013718:	d902      	bls.n	8013720 <_free_r+0x78>
 801371a:	230c      	movs	r3, #12
 801371c:	6003      	str	r3, [r0, #0]
 801371e:	e7d6      	b.n	80136ce <_free_r+0x26>
 8013720:	6825      	ldr	r5, [r4, #0]
 8013722:	1961      	adds	r1, r4, r5
 8013724:	428b      	cmp	r3, r1
 8013726:	bf04      	itt	eq
 8013728:	6819      	ldreq	r1, [r3, #0]
 801372a:	685b      	ldreq	r3, [r3, #4]
 801372c:	6063      	str	r3, [r4, #4]
 801372e:	bf04      	itt	eq
 8013730:	1949      	addeq	r1, r1, r5
 8013732:	6021      	streq	r1, [r4, #0]
 8013734:	6054      	str	r4, [r2, #4]
 8013736:	e7ca      	b.n	80136ce <_free_r+0x26>
 8013738:	b003      	add	sp, #12
 801373a:	bd30      	pop	{r4, r5, pc}
 801373c:	200063b8 	.word	0x200063b8

08013740 <sbrk_aligned>:
 8013740:	b570      	push	{r4, r5, r6, lr}
 8013742:	4e0e      	ldr	r6, [pc, #56]	; (801377c <sbrk_aligned+0x3c>)
 8013744:	460c      	mov	r4, r1
 8013746:	6831      	ldr	r1, [r6, #0]
 8013748:	4605      	mov	r5, r0
 801374a:	b911      	cbnz	r1, 8013752 <sbrk_aligned+0x12>
 801374c:	f000 f9f0 	bl	8013b30 <_sbrk_r>
 8013750:	6030      	str	r0, [r6, #0]
 8013752:	4621      	mov	r1, r4
 8013754:	4628      	mov	r0, r5
 8013756:	f000 f9eb 	bl	8013b30 <_sbrk_r>
 801375a:	1c43      	adds	r3, r0, #1
 801375c:	d00a      	beq.n	8013774 <sbrk_aligned+0x34>
 801375e:	1cc4      	adds	r4, r0, #3
 8013760:	f024 0403 	bic.w	r4, r4, #3
 8013764:	42a0      	cmp	r0, r4
 8013766:	d007      	beq.n	8013778 <sbrk_aligned+0x38>
 8013768:	1a21      	subs	r1, r4, r0
 801376a:	4628      	mov	r0, r5
 801376c:	f000 f9e0 	bl	8013b30 <_sbrk_r>
 8013770:	3001      	adds	r0, #1
 8013772:	d101      	bne.n	8013778 <sbrk_aligned+0x38>
 8013774:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013778:	4620      	mov	r0, r4
 801377a:	bd70      	pop	{r4, r5, r6, pc}
 801377c:	200063bc 	.word	0x200063bc

08013780 <_malloc_r>:
 8013780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013784:	1ccd      	adds	r5, r1, #3
 8013786:	f025 0503 	bic.w	r5, r5, #3
 801378a:	3508      	adds	r5, #8
 801378c:	2d0c      	cmp	r5, #12
 801378e:	bf38      	it	cc
 8013790:	250c      	movcc	r5, #12
 8013792:	2d00      	cmp	r5, #0
 8013794:	4607      	mov	r7, r0
 8013796:	db01      	blt.n	801379c <_malloc_r+0x1c>
 8013798:	42a9      	cmp	r1, r5
 801379a:	d905      	bls.n	80137a8 <_malloc_r+0x28>
 801379c:	230c      	movs	r3, #12
 801379e:	603b      	str	r3, [r7, #0]
 80137a0:	2600      	movs	r6, #0
 80137a2:	4630      	mov	r0, r6
 80137a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137a8:	4e2e      	ldr	r6, [pc, #184]	; (8013864 <_malloc_r+0xe4>)
 80137aa:	f000 fa3d 	bl	8013c28 <__malloc_lock>
 80137ae:	6833      	ldr	r3, [r6, #0]
 80137b0:	461c      	mov	r4, r3
 80137b2:	bb34      	cbnz	r4, 8013802 <_malloc_r+0x82>
 80137b4:	4629      	mov	r1, r5
 80137b6:	4638      	mov	r0, r7
 80137b8:	f7ff ffc2 	bl	8013740 <sbrk_aligned>
 80137bc:	1c43      	adds	r3, r0, #1
 80137be:	4604      	mov	r4, r0
 80137c0:	d14d      	bne.n	801385e <_malloc_r+0xde>
 80137c2:	6834      	ldr	r4, [r6, #0]
 80137c4:	4626      	mov	r6, r4
 80137c6:	2e00      	cmp	r6, #0
 80137c8:	d140      	bne.n	801384c <_malloc_r+0xcc>
 80137ca:	6823      	ldr	r3, [r4, #0]
 80137cc:	4631      	mov	r1, r6
 80137ce:	4638      	mov	r0, r7
 80137d0:	eb04 0803 	add.w	r8, r4, r3
 80137d4:	f000 f9ac 	bl	8013b30 <_sbrk_r>
 80137d8:	4580      	cmp	r8, r0
 80137da:	d13a      	bne.n	8013852 <_malloc_r+0xd2>
 80137dc:	6821      	ldr	r1, [r4, #0]
 80137de:	3503      	adds	r5, #3
 80137e0:	1a6d      	subs	r5, r5, r1
 80137e2:	f025 0503 	bic.w	r5, r5, #3
 80137e6:	3508      	adds	r5, #8
 80137e8:	2d0c      	cmp	r5, #12
 80137ea:	bf38      	it	cc
 80137ec:	250c      	movcc	r5, #12
 80137ee:	4629      	mov	r1, r5
 80137f0:	4638      	mov	r0, r7
 80137f2:	f7ff ffa5 	bl	8013740 <sbrk_aligned>
 80137f6:	3001      	adds	r0, #1
 80137f8:	d02b      	beq.n	8013852 <_malloc_r+0xd2>
 80137fa:	6823      	ldr	r3, [r4, #0]
 80137fc:	442b      	add	r3, r5
 80137fe:	6023      	str	r3, [r4, #0]
 8013800:	e00e      	b.n	8013820 <_malloc_r+0xa0>
 8013802:	6822      	ldr	r2, [r4, #0]
 8013804:	1b52      	subs	r2, r2, r5
 8013806:	d41e      	bmi.n	8013846 <_malloc_r+0xc6>
 8013808:	2a0b      	cmp	r2, #11
 801380a:	d916      	bls.n	801383a <_malloc_r+0xba>
 801380c:	1961      	adds	r1, r4, r5
 801380e:	42a3      	cmp	r3, r4
 8013810:	6025      	str	r5, [r4, #0]
 8013812:	bf18      	it	ne
 8013814:	6059      	strne	r1, [r3, #4]
 8013816:	6863      	ldr	r3, [r4, #4]
 8013818:	bf08      	it	eq
 801381a:	6031      	streq	r1, [r6, #0]
 801381c:	5162      	str	r2, [r4, r5]
 801381e:	604b      	str	r3, [r1, #4]
 8013820:	4638      	mov	r0, r7
 8013822:	f104 060b 	add.w	r6, r4, #11
 8013826:	f000 fa05 	bl	8013c34 <__malloc_unlock>
 801382a:	f026 0607 	bic.w	r6, r6, #7
 801382e:	1d23      	adds	r3, r4, #4
 8013830:	1af2      	subs	r2, r6, r3
 8013832:	d0b6      	beq.n	80137a2 <_malloc_r+0x22>
 8013834:	1b9b      	subs	r3, r3, r6
 8013836:	50a3      	str	r3, [r4, r2]
 8013838:	e7b3      	b.n	80137a2 <_malloc_r+0x22>
 801383a:	6862      	ldr	r2, [r4, #4]
 801383c:	42a3      	cmp	r3, r4
 801383e:	bf0c      	ite	eq
 8013840:	6032      	streq	r2, [r6, #0]
 8013842:	605a      	strne	r2, [r3, #4]
 8013844:	e7ec      	b.n	8013820 <_malloc_r+0xa0>
 8013846:	4623      	mov	r3, r4
 8013848:	6864      	ldr	r4, [r4, #4]
 801384a:	e7b2      	b.n	80137b2 <_malloc_r+0x32>
 801384c:	4634      	mov	r4, r6
 801384e:	6876      	ldr	r6, [r6, #4]
 8013850:	e7b9      	b.n	80137c6 <_malloc_r+0x46>
 8013852:	230c      	movs	r3, #12
 8013854:	603b      	str	r3, [r7, #0]
 8013856:	4638      	mov	r0, r7
 8013858:	f000 f9ec 	bl	8013c34 <__malloc_unlock>
 801385c:	e7a1      	b.n	80137a2 <_malloc_r+0x22>
 801385e:	6025      	str	r5, [r4, #0]
 8013860:	e7de      	b.n	8013820 <_malloc_r+0xa0>
 8013862:	bf00      	nop
 8013864:	200063b8 	.word	0x200063b8

08013868 <__ssputs_r>:
 8013868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801386c:	688e      	ldr	r6, [r1, #8]
 801386e:	429e      	cmp	r6, r3
 8013870:	4682      	mov	sl, r0
 8013872:	460c      	mov	r4, r1
 8013874:	4690      	mov	r8, r2
 8013876:	461f      	mov	r7, r3
 8013878:	d838      	bhi.n	80138ec <__ssputs_r+0x84>
 801387a:	898a      	ldrh	r2, [r1, #12]
 801387c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013880:	d032      	beq.n	80138e8 <__ssputs_r+0x80>
 8013882:	6825      	ldr	r5, [r4, #0]
 8013884:	6909      	ldr	r1, [r1, #16]
 8013886:	eba5 0901 	sub.w	r9, r5, r1
 801388a:	6965      	ldr	r5, [r4, #20]
 801388c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013890:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013894:	3301      	adds	r3, #1
 8013896:	444b      	add	r3, r9
 8013898:	106d      	asrs	r5, r5, #1
 801389a:	429d      	cmp	r5, r3
 801389c:	bf38      	it	cc
 801389e:	461d      	movcc	r5, r3
 80138a0:	0553      	lsls	r3, r2, #21
 80138a2:	d531      	bpl.n	8013908 <__ssputs_r+0xa0>
 80138a4:	4629      	mov	r1, r5
 80138a6:	f7ff ff6b 	bl	8013780 <_malloc_r>
 80138aa:	4606      	mov	r6, r0
 80138ac:	b950      	cbnz	r0, 80138c4 <__ssputs_r+0x5c>
 80138ae:	230c      	movs	r3, #12
 80138b0:	f8ca 3000 	str.w	r3, [sl]
 80138b4:	89a3      	ldrh	r3, [r4, #12]
 80138b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138ba:	81a3      	strh	r3, [r4, #12]
 80138bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138c4:	6921      	ldr	r1, [r4, #16]
 80138c6:	464a      	mov	r2, r9
 80138c8:	f7fc faaa 	bl	800fe20 <memcpy>
 80138cc:	89a3      	ldrh	r3, [r4, #12]
 80138ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80138d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138d6:	81a3      	strh	r3, [r4, #12]
 80138d8:	6126      	str	r6, [r4, #16]
 80138da:	6165      	str	r5, [r4, #20]
 80138dc:	444e      	add	r6, r9
 80138de:	eba5 0509 	sub.w	r5, r5, r9
 80138e2:	6026      	str	r6, [r4, #0]
 80138e4:	60a5      	str	r5, [r4, #8]
 80138e6:	463e      	mov	r6, r7
 80138e8:	42be      	cmp	r6, r7
 80138ea:	d900      	bls.n	80138ee <__ssputs_r+0x86>
 80138ec:	463e      	mov	r6, r7
 80138ee:	6820      	ldr	r0, [r4, #0]
 80138f0:	4632      	mov	r2, r6
 80138f2:	4641      	mov	r1, r8
 80138f4:	f000 f97e 	bl	8013bf4 <memmove>
 80138f8:	68a3      	ldr	r3, [r4, #8]
 80138fa:	1b9b      	subs	r3, r3, r6
 80138fc:	60a3      	str	r3, [r4, #8]
 80138fe:	6823      	ldr	r3, [r4, #0]
 8013900:	4433      	add	r3, r6
 8013902:	6023      	str	r3, [r4, #0]
 8013904:	2000      	movs	r0, #0
 8013906:	e7db      	b.n	80138c0 <__ssputs_r+0x58>
 8013908:	462a      	mov	r2, r5
 801390a:	f000 f999 	bl	8013c40 <_realloc_r>
 801390e:	4606      	mov	r6, r0
 8013910:	2800      	cmp	r0, #0
 8013912:	d1e1      	bne.n	80138d8 <__ssputs_r+0x70>
 8013914:	6921      	ldr	r1, [r4, #16]
 8013916:	4650      	mov	r0, sl
 8013918:	f7ff fec6 	bl	80136a8 <_free_r>
 801391c:	e7c7      	b.n	80138ae <__ssputs_r+0x46>
	...

08013920 <_svfiprintf_r>:
 8013920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013924:	4698      	mov	r8, r3
 8013926:	898b      	ldrh	r3, [r1, #12]
 8013928:	061b      	lsls	r3, r3, #24
 801392a:	b09d      	sub	sp, #116	; 0x74
 801392c:	4607      	mov	r7, r0
 801392e:	460d      	mov	r5, r1
 8013930:	4614      	mov	r4, r2
 8013932:	d50e      	bpl.n	8013952 <_svfiprintf_r+0x32>
 8013934:	690b      	ldr	r3, [r1, #16]
 8013936:	b963      	cbnz	r3, 8013952 <_svfiprintf_r+0x32>
 8013938:	2140      	movs	r1, #64	; 0x40
 801393a:	f7ff ff21 	bl	8013780 <_malloc_r>
 801393e:	6028      	str	r0, [r5, #0]
 8013940:	6128      	str	r0, [r5, #16]
 8013942:	b920      	cbnz	r0, 801394e <_svfiprintf_r+0x2e>
 8013944:	230c      	movs	r3, #12
 8013946:	603b      	str	r3, [r7, #0]
 8013948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801394c:	e0d1      	b.n	8013af2 <_svfiprintf_r+0x1d2>
 801394e:	2340      	movs	r3, #64	; 0x40
 8013950:	616b      	str	r3, [r5, #20]
 8013952:	2300      	movs	r3, #0
 8013954:	9309      	str	r3, [sp, #36]	; 0x24
 8013956:	2320      	movs	r3, #32
 8013958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801395c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013960:	2330      	movs	r3, #48	; 0x30
 8013962:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013b0c <_svfiprintf_r+0x1ec>
 8013966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801396a:	f04f 0901 	mov.w	r9, #1
 801396e:	4623      	mov	r3, r4
 8013970:	469a      	mov	sl, r3
 8013972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013976:	b10a      	cbz	r2, 801397c <_svfiprintf_r+0x5c>
 8013978:	2a25      	cmp	r2, #37	; 0x25
 801397a:	d1f9      	bne.n	8013970 <_svfiprintf_r+0x50>
 801397c:	ebba 0b04 	subs.w	fp, sl, r4
 8013980:	d00b      	beq.n	801399a <_svfiprintf_r+0x7a>
 8013982:	465b      	mov	r3, fp
 8013984:	4622      	mov	r2, r4
 8013986:	4629      	mov	r1, r5
 8013988:	4638      	mov	r0, r7
 801398a:	f7ff ff6d 	bl	8013868 <__ssputs_r>
 801398e:	3001      	adds	r0, #1
 8013990:	f000 80aa 	beq.w	8013ae8 <_svfiprintf_r+0x1c8>
 8013994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013996:	445a      	add	r2, fp
 8013998:	9209      	str	r2, [sp, #36]	; 0x24
 801399a:	f89a 3000 	ldrb.w	r3, [sl]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	f000 80a2 	beq.w	8013ae8 <_svfiprintf_r+0x1c8>
 80139a4:	2300      	movs	r3, #0
 80139a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80139aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139ae:	f10a 0a01 	add.w	sl, sl, #1
 80139b2:	9304      	str	r3, [sp, #16]
 80139b4:	9307      	str	r3, [sp, #28]
 80139b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80139ba:	931a      	str	r3, [sp, #104]	; 0x68
 80139bc:	4654      	mov	r4, sl
 80139be:	2205      	movs	r2, #5
 80139c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139c4:	4851      	ldr	r0, [pc, #324]	; (8013b0c <_svfiprintf_r+0x1ec>)
 80139c6:	f7ec fc0b 	bl	80001e0 <memchr>
 80139ca:	9a04      	ldr	r2, [sp, #16]
 80139cc:	b9d8      	cbnz	r0, 8013a06 <_svfiprintf_r+0xe6>
 80139ce:	06d0      	lsls	r0, r2, #27
 80139d0:	bf44      	itt	mi
 80139d2:	2320      	movmi	r3, #32
 80139d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139d8:	0711      	lsls	r1, r2, #28
 80139da:	bf44      	itt	mi
 80139dc:	232b      	movmi	r3, #43	; 0x2b
 80139de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139e2:	f89a 3000 	ldrb.w	r3, [sl]
 80139e6:	2b2a      	cmp	r3, #42	; 0x2a
 80139e8:	d015      	beq.n	8013a16 <_svfiprintf_r+0xf6>
 80139ea:	9a07      	ldr	r2, [sp, #28]
 80139ec:	4654      	mov	r4, sl
 80139ee:	2000      	movs	r0, #0
 80139f0:	f04f 0c0a 	mov.w	ip, #10
 80139f4:	4621      	mov	r1, r4
 80139f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139fa:	3b30      	subs	r3, #48	; 0x30
 80139fc:	2b09      	cmp	r3, #9
 80139fe:	d94e      	bls.n	8013a9e <_svfiprintf_r+0x17e>
 8013a00:	b1b0      	cbz	r0, 8013a30 <_svfiprintf_r+0x110>
 8013a02:	9207      	str	r2, [sp, #28]
 8013a04:	e014      	b.n	8013a30 <_svfiprintf_r+0x110>
 8013a06:	eba0 0308 	sub.w	r3, r0, r8
 8013a0a:	fa09 f303 	lsl.w	r3, r9, r3
 8013a0e:	4313      	orrs	r3, r2
 8013a10:	9304      	str	r3, [sp, #16]
 8013a12:	46a2      	mov	sl, r4
 8013a14:	e7d2      	b.n	80139bc <_svfiprintf_r+0x9c>
 8013a16:	9b03      	ldr	r3, [sp, #12]
 8013a18:	1d19      	adds	r1, r3, #4
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	9103      	str	r1, [sp, #12]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	bfbb      	ittet	lt
 8013a22:	425b      	neglt	r3, r3
 8013a24:	f042 0202 	orrlt.w	r2, r2, #2
 8013a28:	9307      	strge	r3, [sp, #28]
 8013a2a:	9307      	strlt	r3, [sp, #28]
 8013a2c:	bfb8      	it	lt
 8013a2e:	9204      	strlt	r2, [sp, #16]
 8013a30:	7823      	ldrb	r3, [r4, #0]
 8013a32:	2b2e      	cmp	r3, #46	; 0x2e
 8013a34:	d10c      	bne.n	8013a50 <_svfiprintf_r+0x130>
 8013a36:	7863      	ldrb	r3, [r4, #1]
 8013a38:	2b2a      	cmp	r3, #42	; 0x2a
 8013a3a:	d135      	bne.n	8013aa8 <_svfiprintf_r+0x188>
 8013a3c:	9b03      	ldr	r3, [sp, #12]
 8013a3e:	1d1a      	adds	r2, r3, #4
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	9203      	str	r2, [sp, #12]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	bfb8      	it	lt
 8013a48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013a4c:	3402      	adds	r4, #2
 8013a4e:	9305      	str	r3, [sp, #20]
 8013a50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013b1c <_svfiprintf_r+0x1fc>
 8013a54:	7821      	ldrb	r1, [r4, #0]
 8013a56:	2203      	movs	r2, #3
 8013a58:	4650      	mov	r0, sl
 8013a5a:	f7ec fbc1 	bl	80001e0 <memchr>
 8013a5e:	b140      	cbz	r0, 8013a72 <_svfiprintf_r+0x152>
 8013a60:	2340      	movs	r3, #64	; 0x40
 8013a62:	eba0 000a 	sub.w	r0, r0, sl
 8013a66:	fa03 f000 	lsl.w	r0, r3, r0
 8013a6a:	9b04      	ldr	r3, [sp, #16]
 8013a6c:	4303      	orrs	r3, r0
 8013a6e:	3401      	adds	r4, #1
 8013a70:	9304      	str	r3, [sp, #16]
 8013a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a76:	4826      	ldr	r0, [pc, #152]	; (8013b10 <_svfiprintf_r+0x1f0>)
 8013a78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a7c:	2206      	movs	r2, #6
 8013a7e:	f7ec fbaf 	bl	80001e0 <memchr>
 8013a82:	2800      	cmp	r0, #0
 8013a84:	d038      	beq.n	8013af8 <_svfiprintf_r+0x1d8>
 8013a86:	4b23      	ldr	r3, [pc, #140]	; (8013b14 <_svfiprintf_r+0x1f4>)
 8013a88:	bb1b      	cbnz	r3, 8013ad2 <_svfiprintf_r+0x1b2>
 8013a8a:	9b03      	ldr	r3, [sp, #12]
 8013a8c:	3307      	adds	r3, #7
 8013a8e:	f023 0307 	bic.w	r3, r3, #7
 8013a92:	3308      	adds	r3, #8
 8013a94:	9303      	str	r3, [sp, #12]
 8013a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a98:	4433      	add	r3, r6
 8013a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8013a9c:	e767      	b.n	801396e <_svfiprintf_r+0x4e>
 8013a9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013aa2:	460c      	mov	r4, r1
 8013aa4:	2001      	movs	r0, #1
 8013aa6:	e7a5      	b.n	80139f4 <_svfiprintf_r+0xd4>
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	3401      	adds	r4, #1
 8013aac:	9305      	str	r3, [sp, #20]
 8013aae:	4619      	mov	r1, r3
 8013ab0:	f04f 0c0a 	mov.w	ip, #10
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013aba:	3a30      	subs	r2, #48	; 0x30
 8013abc:	2a09      	cmp	r2, #9
 8013abe:	d903      	bls.n	8013ac8 <_svfiprintf_r+0x1a8>
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d0c5      	beq.n	8013a50 <_svfiprintf_r+0x130>
 8013ac4:	9105      	str	r1, [sp, #20]
 8013ac6:	e7c3      	b.n	8013a50 <_svfiprintf_r+0x130>
 8013ac8:	fb0c 2101 	mla	r1, ip, r1, r2
 8013acc:	4604      	mov	r4, r0
 8013ace:	2301      	movs	r3, #1
 8013ad0:	e7f0      	b.n	8013ab4 <_svfiprintf_r+0x194>
 8013ad2:	ab03      	add	r3, sp, #12
 8013ad4:	9300      	str	r3, [sp, #0]
 8013ad6:	462a      	mov	r2, r5
 8013ad8:	4b0f      	ldr	r3, [pc, #60]	; (8013b18 <_svfiprintf_r+0x1f8>)
 8013ada:	a904      	add	r1, sp, #16
 8013adc:	4638      	mov	r0, r7
 8013ade:	f7fc fa55 	bl	800ff8c <_printf_float>
 8013ae2:	1c42      	adds	r2, r0, #1
 8013ae4:	4606      	mov	r6, r0
 8013ae6:	d1d6      	bne.n	8013a96 <_svfiprintf_r+0x176>
 8013ae8:	89ab      	ldrh	r3, [r5, #12]
 8013aea:	065b      	lsls	r3, r3, #25
 8013aec:	f53f af2c 	bmi.w	8013948 <_svfiprintf_r+0x28>
 8013af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013af2:	b01d      	add	sp, #116	; 0x74
 8013af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013af8:	ab03      	add	r3, sp, #12
 8013afa:	9300      	str	r3, [sp, #0]
 8013afc:	462a      	mov	r2, r5
 8013afe:	4b06      	ldr	r3, [pc, #24]	; (8013b18 <_svfiprintf_r+0x1f8>)
 8013b00:	a904      	add	r1, sp, #16
 8013b02:	4638      	mov	r0, r7
 8013b04:	f7fc fce6 	bl	80104d4 <_printf_i>
 8013b08:	e7eb      	b.n	8013ae2 <_svfiprintf_r+0x1c2>
 8013b0a:	bf00      	nop
 8013b0c:	080156fc 	.word	0x080156fc
 8013b10:	08015706 	.word	0x08015706
 8013b14:	0800ff8d 	.word	0x0800ff8d
 8013b18:	08013869 	.word	0x08013869
 8013b1c:	08015702 	.word	0x08015702

08013b20 <nan>:
 8013b20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013b28 <nan+0x8>
 8013b24:	4770      	bx	lr
 8013b26:	bf00      	nop
 8013b28:	00000000 	.word	0x00000000
 8013b2c:	7ff80000 	.word	0x7ff80000

08013b30 <_sbrk_r>:
 8013b30:	b538      	push	{r3, r4, r5, lr}
 8013b32:	4d06      	ldr	r5, [pc, #24]	; (8013b4c <_sbrk_r+0x1c>)
 8013b34:	2300      	movs	r3, #0
 8013b36:	4604      	mov	r4, r0
 8013b38:	4608      	mov	r0, r1
 8013b3a:	602b      	str	r3, [r5, #0]
 8013b3c:	f7f3 f968 	bl	8006e10 <_sbrk>
 8013b40:	1c43      	adds	r3, r0, #1
 8013b42:	d102      	bne.n	8013b4a <_sbrk_r+0x1a>
 8013b44:	682b      	ldr	r3, [r5, #0]
 8013b46:	b103      	cbz	r3, 8013b4a <_sbrk_r+0x1a>
 8013b48:	6023      	str	r3, [r4, #0]
 8013b4a:	bd38      	pop	{r3, r4, r5, pc}
 8013b4c:	200063c0 	.word	0x200063c0

08013b50 <strncmp>:
 8013b50:	b510      	push	{r4, lr}
 8013b52:	b17a      	cbz	r2, 8013b74 <strncmp+0x24>
 8013b54:	4603      	mov	r3, r0
 8013b56:	3901      	subs	r1, #1
 8013b58:	1884      	adds	r4, r0, r2
 8013b5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013b5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013b62:	4290      	cmp	r0, r2
 8013b64:	d101      	bne.n	8013b6a <strncmp+0x1a>
 8013b66:	42a3      	cmp	r3, r4
 8013b68:	d101      	bne.n	8013b6e <strncmp+0x1e>
 8013b6a:	1a80      	subs	r0, r0, r2
 8013b6c:	bd10      	pop	{r4, pc}
 8013b6e:	2800      	cmp	r0, #0
 8013b70:	d1f3      	bne.n	8013b5a <strncmp+0xa>
 8013b72:	e7fa      	b.n	8013b6a <strncmp+0x1a>
 8013b74:	4610      	mov	r0, r2
 8013b76:	e7f9      	b.n	8013b6c <strncmp+0x1c>

08013b78 <__ascii_wctomb>:
 8013b78:	b149      	cbz	r1, 8013b8e <__ascii_wctomb+0x16>
 8013b7a:	2aff      	cmp	r2, #255	; 0xff
 8013b7c:	bf85      	ittet	hi
 8013b7e:	238a      	movhi	r3, #138	; 0x8a
 8013b80:	6003      	strhi	r3, [r0, #0]
 8013b82:	700a      	strbls	r2, [r1, #0]
 8013b84:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013b88:	bf98      	it	ls
 8013b8a:	2001      	movls	r0, #1
 8013b8c:	4770      	bx	lr
 8013b8e:	4608      	mov	r0, r1
 8013b90:	4770      	bx	lr
	...

08013b94 <__assert_func>:
 8013b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b96:	4614      	mov	r4, r2
 8013b98:	461a      	mov	r2, r3
 8013b9a:	4b09      	ldr	r3, [pc, #36]	; (8013bc0 <__assert_func+0x2c>)
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	4605      	mov	r5, r0
 8013ba0:	68d8      	ldr	r0, [r3, #12]
 8013ba2:	b14c      	cbz	r4, 8013bb8 <__assert_func+0x24>
 8013ba4:	4b07      	ldr	r3, [pc, #28]	; (8013bc4 <__assert_func+0x30>)
 8013ba6:	9100      	str	r1, [sp, #0]
 8013ba8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013bac:	4906      	ldr	r1, [pc, #24]	; (8013bc8 <__assert_func+0x34>)
 8013bae:	462b      	mov	r3, r5
 8013bb0:	f000 f80e 	bl	8013bd0 <fiprintf>
 8013bb4:	f000 fa8c 	bl	80140d0 <abort>
 8013bb8:	4b04      	ldr	r3, [pc, #16]	; (8013bcc <__assert_func+0x38>)
 8013bba:	461c      	mov	r4, r3
 8013bbc:	e7f3      	b.n	8013ba6 <__assert_func+0x12>
 8013bbe:	bf00      	nop
 8013bc0:	20000014 	.word	0x20000014
 8013bc4:	0801570d 	.word	0x0801570d
 8013bc8:	0801571a 	.word	0x0801571a
 8013bcc:	08015748 	.word	0x08015748

08013bd0 <fiprintf>:
 8013bd0:	b40e      	push	{r1, r2, r3}
 8013bd2:	b503      	push	{r0, r1, lr}
 8013bd4:	4601      	mov	r1, r0
 8013bd6:	ab03      	add	r3, sp, #12
 8013bd8:	4805      	ldr	r0, [pc, #20]	; (8013bf0 <fiprintf+0x20>)
 8013bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8013bde:	6800      	ldr	r0, [r0, #0]
 8013be0:	9301      	str	r3, [sp, #4]
 8013be2:	f000 f885 	bl	8013cf0 <_vfiprintf_r>
 8013be6:	b002      	add	sp, #8
 8013be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013bec:	b003      	add	sp, #12
 8013bee:	4770      	bx	lr
 8013bf0:	20000014 	.word	0x20000014

08013bf4 <memmove>:
 8013bf4:	4288      	cmp	r0, r1
 8013bf6:	b510      	push	{r4, lr}
 8013bf8:	eb01 0402 	add.w	r4, r1, r2
 8013bfc:	d902      	bls.n	8013c04 <memmove+0x10>
 8013bfe:	4284      	cmp	r4, r0
 8013c00:	4623      	mov	r3, r4
 8013c02:	d807      	bhi.n	8013c14 <memmove+0x20>
 8013c04:	1e43      	subs	r3, r0, #1
 8013c06:	42a1      	cmp	r1, r4
 8013c08:	d008      	beq.n	8013c1c <memmove+0x28>
 8013c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013c0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013c12:	e7f8      	b.n	8013c06 <memmove+0x12>
 8013c14:	4402      	add	r2, r0
 8013c16:	4601      	mov	r1, r0
 8013c18:	428a      	cmp	r2, r1
 8013c1a:	d100      	bne.n	8013c1e <memmove+0x2a>
 8013c1c:	bd10      	pop	{r4, pc}
 8013c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013c22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013c26:	e7f7      	b.n	8013c18 <memmove+0x24>

08013c28 <__malloc_lock>:
 8013c28:	4801      	ldr	r0, [pc, #4]	; (8013c30 <__malloc_lock+0x8>)
 8013c2a:	f000 bc11 	b.w	8014450 <__retarget_lock_acquire_recursive>
 8013c2e:	bf00      	nop
 8013c30:	200063c4 	.word	0x200063c4

08013c34 <__malloc_unlock>:
 8013c34:	4801      	ldr	r0, [pc, #4]	; (8013c3c <__malloc_unlock+0x8>)
 8013c36:	f000 bc0c 	b.w	8014452 <__retarget_lock_release_recursive>
 8013c3a:	bf00      	nop
 8013c3c:	200063c4 	.word	0x200063c4

08013c40 <_realloc_r>:
 8013c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c44:	4680      	mov	r8, r0
 8013c46:	4614      	mov	r4, r2
 8013c48:	460e      	mov	r6, r1
 8013c4a:	b921      	cbnz	r1, 8013c56 <_realloc_r+0x16>
 8013c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c50:	4611      	mov	r1, r2
 8013c52:	f7ff bd95 	b.w	8013780 <_malloc_r>
 8013c56:	b92a      	cbnz	r2, 8013c64 <_realloc_r+0x24>
 8013c58:	f7ff fd26 	bl	80136a8 <_free_r>
 8013c5c:	4625      	mov	r5, r4
 8013c5e:	4628      	mov	r0, r5
 8013c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c64:	f000 fc5c 	bl	8014520 <_malloc_usable_size_r>
 8013c68:	4284      	cmp	r4, r0
 8013c6a:	4607      	mov	r7, r0
 8013c6c:	d802      	bhi.n	8013c74 <_realloc_r+0x34>
 8013c6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013c72:	d812      	bhi.n	8013c9a <_realloc_r+0x5a>
 8013c74:	4621      	mov	r1, r4
 8013c76:	4640      	mov	r0, r8
 8013c78:	f7ff fd82 	bl	8013780 <_malloc_r>
 8013c7c:	4605      	mov	r5, r0
 8013c7e:	2800      	cmp	r0, #0
 8013c80:	d0ed      	beq.n	8013c5e <_realloc_r+0x1e>
 8013c82:	42bc      	cmp	r4, r7
 8013c84:	4622      	mov	r2, r4
 8013c86:	4631      	mov	r1, r6
 8013c88:	bf28      	it	cs
 8013c8a:	463a      	movcs	r2, r7
 8013c8c:	f7fc f8c8 	bl	800fe20 <memcpy>
 8013c90:	4631      	mov	r1, r6
 8013c92:	4640      	mov	r0, r8
 8013c94:	f7ff fd08 	bl	80136a8 <_free_r>
 8013c98:	e7e1      	b.n	8013c5e <_realloc_r+0x1e>
 8013c9a:	4635      	mov	r5, r6
 8013c9c:	e7df      	b.n	8013c5e <_realloc_r+0x1e>

08013c9e <__sfputc_r>:
 8013c9e:	6893      	ldr	r3, [r2, #8]
 8013ca0:	3b01      	subs	r3, #1
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	b410      	push	{r4}
 8013ca6:	6093      	str	r3, [r2, #8]
 8013ca8:	da08      	bge.n	8013cbc <__sfputc_r+0x1e>
 8013caa:	6994      	ldr	r4, [r2, #24]
 8013cac:	42a3      	cmp	r3, r4
 8013cae:	db01      	blt.n	8013cb4 <__sfputc_r+0x16>
 8013cb0:	290a      	cmp	r1, #10
 8013cb2:	d103      	bne.n	8013cbc <__sfputc_r+0x1e>
 8013cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cb8:	f000 b94a 	b.w	8013f50 <__swbuf_r>
 8013cbc:	6813      	ldr	r3, [r2, #0]
 8013cbe:	1c58      	adds	r0, r3, #1
 8013cc0:	6010      	str	r0, [r2, #0]
 8013cc2:	7019      	strb	r1, [r3, #0]
 8013cc4:	4608      	mov	r0, r1
 8013cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cca:	4770      	bx	lr

08013ccc <__sfputs_r>:
 8013ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cce:	4606      	mov	r6, r0
 8013cd0:	460f      	mov	r7, r1
 8013cd2:	4614      	mov	r4, r2
 8013cd4:	18d5      	adds	r5, r2, r3
 8013cd6:	42ac      	cmp	r4, r5
 8013cd8:	d101      	bne.n	8013cde <__sfputs_r+0x12>
 8013cda:	2000      	movs	r0, #0
 8013cdc:	e007      	b.n	8013cee <__sfputs_r+0x22>
 8013cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ce2:	463a      	mov	r2, r7
 8013ce4:	4630      	mov	r0, r6
 8013ce6:	f7ff ffda 	bl	8013c9e <__sfputc_r>
 8013cea:	1c43      	adds	r3, r0, #1
 8013cec:	d1f3      	bne.n	8013cd6 <__sfputs_r+0xa>
 8013cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013cf0 <_vfiprintf_r>:
 8013cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cf4:	460d      	mov	r5, r1
 8013cf6:	b09d      	sub	sp, #116	; 0x74
 8013cf8:	4614      	mov	r4, r2
 8013cfa:	4698      	mov	r8, r3
 8013cfc:	4606      	mov	r6, r0
 8013cfe:	b118      	cbz	r0, 8013d08 <_vfiprintf_r+0x18>
 8013d00:	6983      	ldr	r3, [r0, #24]
 8013d02:	b90b      	cbnz	r3, 8013d08 <_vfiprintf_r+0x18>
 8013d04:	f000 fb06 	bl	8014314 <__sinit>
 8013d08:	4b89      	ldr	r3, [pc, #548]	; (8013f30 <_vfiprintf_r+0x240>)
 8013d0a:	429d      	cmp	r5, r3
 8013d0c:	d11b      	bne.n	8013d46 <_vfiprintf_r+0x56>
 8013d0e:	6875      	ldr	r5, [r6, #4]
 8013d10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d12:	07d9      	lsls	r1, r3, #31
 8013d14:	d405      	bmi.n	8013d22 <_vfiprintf_r+0x32>
 8013d16:	89ab      	ldrh	r3, [r5, #12]
 8013d18:	059a      	lsls	r2, r3, #22
 8013d1a:	d402      	bmi.n	8013d22 <_vfiprintf_r+0x32>
 8013d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d1e:	f000 fb97 	bl	8014450 <__retarget_lock_acquire_recursive>
 8013d22:	89ab      	ldrh	r3, [r5, #12]
 8013d24:	071b      	lsls	r3, r3, #28
 8013d26:	d501      	bpl.n	8013d2c <_vfiprintf_r+0x3c>
 8013d28:	692b      	ldr	r3, [r5, #16]
 8013d2a:	b9eb      	cbnz	r3, 8013d68 <_vfiprintf_r+0x78>
 8013d2c:	4629      	mov	r1, r5
 8013d2e:	4630      	mov	r0, r6
 8013d30:	f000 f960 	bl	8013ff4 <__swsetup_r>
 8013d34:	b1c0      	cbz	r0, 8013d68 <_vfiprintf_r+0x78>
 8013d36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d38:	07dc      	lsls	r4, r3, #31
 8013d3a:	d50e      	bpl.n	8013d5a <_vfiprintf_r+0x6a>
 8013d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d40:	b01d      	add	sp, #116	; 0x74
 8013d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d46:	4b7b      	ldr	r3, [pc, #492]	; (8013f34 <_vfiprintf_r+0x244>)
 8013d48:	429d      	cmp	r5, r3
 8013d4a:	d101      	bne.n	8013d50 <_vfiprintf_r+0x60>
 8013d4c:	68b5      	ldr	r5, [r6, #8]
 8013d4e:	e7df      	b.n	8013d10 <_vfiprintf_r+0x20>
 8013d50:	4b79      	ldr	r3, [pc, #484]	; (8013f38 <_vfiprintf_r+0x248>)
 8013d52:	429d      	cmp	r5, r3
 8013d54:	bf08      	it	eq
 8013d56:	68f5      	ldreq	r5, [r6, #12]
 8013d58:	e7da      	b.n	8013d10 <_vfiprintf_r+0x20>
 8013d5a:	89ab      	ldrh	r3, [r5, #12]
 8013d5c:	0598      	lsls	r0, r3, #22
 8013d5e:	d4ed      	bmi.n	8013d3c <_vfiprintf_r+0x4c>
 8013d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d62:	f000 fb76 	bl	8014452 <__retarget_lock_release_recursive>
 8013d66:	e7e9      	b.n	8013d3c <_vfiprintf_r+0x4c>
 8013d68:	2300      	movs	r3, #0
 8013d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8013d6c:	2320      	movs	r3, #32
 8013d6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d76:	2330      	movs	r3, #48	; 0x30
 8013d78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013f3c <_vfiprintf_r+0x24c>
 8013d7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013d80:	f04f 0901 	mov.w	r9, #1
 8013d84:	4623      	mov	r3, r4
 8013d86:	469a      	mov	sl, r3
 8013d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d8c:	b10a      	cbz	r2, 8013d92 <_vfiprintf_r+0xa2>
 8013d8e:	2a25      	cmp	r2, #37	; 0x25
 8013d90:	d1f9      	bne.n	8013d86 <_vfiprintf_r+0x96>
 8013d92:	ebba 0b04 	subs.w	fp, sl, r4
 8013d96:	d00b      	beq.n	8013db0 <_vfiprintf_r+0xc0>
 8013d98:	465b      	mov	r3, fp
 8013d9a:	4622      	mov	r2, r4
 8013d9c:	4629      	mov	r1, r5
 8013d9e:	4630      	mov	r0, r6
 8013da0:	f7ff ff94 	bl	8013ccc <__sfputs_r>
 8013da4:	3001      	adds	r0, #1
 8013da6:	f000 80aa 	beq.w	8013efe <_vfiprintf_r+0x20e>
 8013daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013dac:	445a      	add	r2, fp
 8013dae:	9209      	str	r2, [sp, #36]	; 0x24
 8013db0:	f89a 3000 	ldrb.w	r3, [sl]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	f000 80a2 	beq.w	8013efe <_vfiprintf_r+0x20e>
 8013dba:	2300      	movs	r3, #0
 8013dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013dc4:	f10a 0a01 	add.w	sl, sl, #1
 8013dc8:	9304      	str	r3, [sp, #16]
 8013dca:	9307      	str	r3, [sp, #28]
 8013dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8013dd2:	4654      	mov	r4, sl
 8013dd4:	2205      	movs	r2, #5
 8013dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013dda:	4858      	ldr	r0, [pc, #352]	; (8013f3c <_vfiprintf_r+0x24c>)
 8013ddc:	f7ec fa00 	bl	80001e0 <memchr>
 8013de0:	9a04      	ldr	r2, [sp, #16]
 8013de2:	b9d8      	cbnz	r0, 8013e1c <_vfiprintf_r+0x12c>
 8013de4:	06d1      	lsls	r1, r2, #27
 8013de6:	bf44      	itt	mi
 8013de8:	2320      	movmi	r3, #32
 8013dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013dee:	0713      	lsls	r3, r2, #28
 8013df0:	bf44      	itt	mi
 8013df2:	232b      	movmi	r3, #43	; 0x2b
 8013df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013df8:	f89a 3000 	ldrb.w	r3, [sl]
 8013dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8013dfe:	d015      	beq.n	8013e2c <_vfiprintf_r+0x13c>
 8013e00:	9a07      	ldr	r2, [sp, #28]
 8013e02:	4654      	mov	r4, sl
 8013e04:	2000      	movs	r0, #0
 8013e06:	f04f 0c0a 	mov.w	ip, #10
 8013e0a:	4621      	mov	r1, r4
 8013e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e10:	3b30      	subs	r3, #48	; 0x30
 8013e12:	2b09      	cmp	r3, #9
 8013e14:	d94e      	bls.n	8013eb4 <_vfiprintf_r+0x1c4>
 8013e16:	b1b0      	cbz	r0, 8013e46 <_vfiprintf_r+0x156>
 8013e18:	9207      	str	r2, [sp, #28]
 8013e1a:	e014      	b.n	8013e46 <_vfiprintf_r+0x156>
 8013e1c:	eba0 0308 	sub.w	r3, r0, r8
 8013e20:	fa09 f303 	lsl.w	r3, r9, r3
 8013e24:	4313      	orrs	r3, r2
 8013e26:	9304      	str	r3, [sp, #16]
 8013e28:	46a2      	mov	sl, r4
 8013e2a:	e7d2      	b.n	8013dd2 <_vfiprintf_r+0xe2>
 8013e2c:	9b03      	ldr	r3, [sp, #12]
 8013e2e:	1d19      	adds	r1, r3, #4
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	9103      	str	r1, [sp, #12]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	bfbb      	ittet	lt
 8013e38:	425b      	neglt	r3, r3
 8013e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8013e3e:	9307      	strge	r3, [sp, #28]
 8013e40:	9307      	strlt	r3, [sp, #28]
 8013e42:	bfb8      	it	lt
 8013e44:	9204      	strlt	r2, [sp, #16]
 8013e46:	7823      	ldrb	r3, [r4, #0]
 8013e48:	2b2e      	cmp	r3, #46	; 0x2e
 8013e4a:	d10c      	bne.n	8013e66 <_vfiprintf_r+0x176>
 8013e4c:	7863      	ldrb	r3, [r4, #1]
 8013e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8013e50:	d135      	bne.n	8013ebe <_vfiprintf_r+0x1ce>
 8013e52:	9b03      	ldr	r3, [sp, #12]
 8013e54:	1d1a      	adds	r2, r3, #4
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	9203      	str	r2, [sp, #12]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	bfb8      	it	lt
 8013e5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013e62:	3402      	adds	r4, #2
 8013e64:	9305      	str	r3, [sp, #20]
 8013e66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013f4c <_vfiprintf_r+0x25c>
 8013e6a:	7821      	ldrb	r1, [r4, #0]
 8013e6c:	2203      	movs	r2, #3
 8013e6e:	4650      	mov	r0, sl
 8013e70:	f7ec f9b6 	bl	80001e0 <memchr>
 8013e74:	b140      	cbz	r0, 8013e88 <_vfiprintf_r+0x198>
 8013e76:	2340      	movs	r3, #64	; 0x40
 8013e78:	eba0 000a 	sub.w	r0, r0, sl
 8013e7c:	fa03 f000 	lsl.w	r0, r3, r0
 8013e80:	9b04      	ldr	r3, [sp, #16]
 8013e82:	4303      	orrs	r3, r0
 8013e84:	3401      	adds	r4, #1
 8013e86:	9304      	str	r3, [sp, #16]
 8013e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e8c:	482c      	ldr	r0, [pc, #176]	; (8013f40 <_vfiprintf_r+0x250>)
 8013e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013e92:	2206      	movs	r2, #6
 8013e94:	f7ec f9a4 	bl	80001e0 <memchr>
 8013e98:	2800      	cmp	r0, #0
 8013e9a:	d03f      	beq.n	8013f1c <_vfiprintf_r+0x22c>
 8013e9c:	4b29      	ldr	r3, [pc, #164]	; (8013f44 <_vfiprintf_r+0x254>)
 8013e9e:	bb1b      	cbnz	r3, 8013ee8 <_vfiprintf_r+0x1f8>
 8013ea0:	9b03      	ldr	r3, [sp, #12]
 8013ea2:	3307      	adds	r3, #7
 8013ea4:	f023 0307 	bic.w	r3, r3, #7
 8013ea8:	3308      	adds	r3, #8
 8013eaa:	9303      	str	r3, [sp, #12]
 8013eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eae:	443b      	add	r3, r7
 8013eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8013eb2:	e767      	b.n	8013d84 <_vfiprintf_r+0x94>
 8013eb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8013eb8:	460c      	mov	r4, r1
 8013eba:	2001      	movs	r0, #1
 8013ebc:	e7a5      	b.n	8013e0a <_vfiprintf_r+0x11a>
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	3401      	adds	r4, #1
 8013ec2:	9305      	str	r3, [sp, #20]
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	f04f 0c0a 	mov.w	ip, #10
 8013eca:	4620      	mov	r0, r4
 8013ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ed0:	3a30      	subs	r2, #48	; 0x30
 8013ed2:	2a09      	cmp	r2, #9
 8013ed4:	d903      	bls.n	8013ede <_vfiprintf_r+0x1ee>
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d0c5      	beq.n	8013e66 <_vfiprintf_r+0x176>
 8013eda:	9105      	str	r1, [sp, #20]
 8013edc:	e7c3      	b.n	8013e66 <_vfiprintf_r+0x176>
 8013ede:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ee2:	4604      	mov	r4, r0
 8013ee4:	2301      	movs	r3, #1
 8013ee6:	e7f0      	b.n	8013eca <_vfiprintf_r+0x1da>
 8013ee8:	ab03      	add	r3, sp, #12
 8013eea:	9300      	str	r3, [sp, #0]
 8013eec:	462a      	mov	r2, r5
 8013eee:	4b16      	ldr	r3, [pc, #88]	; (8013f48 <_vfiprintf_r+0x258>)
 8013ef0:	a904      	add	r1, sp, #16
 8013ef2:	4630      	mov	r0, r6
 8013ef4:	f7fc f84a 	bl	800ff8c <_printf_float>
 8013ef8:	4607      	mov	r7, r0
 8013efa:	1c78      	adds	r0, r7, #1
 8013efc:	d1d6      	bne.n	8013eac <_vfiprintf_r+0x1bc>
 8013efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013f00:	07d9      	lsls	r1, r3, #31
 8013f02:	d405      	bmi.n	8013f10 <_vfiprintf_r+0x220>
 8013f04:	89ab      	ldrh	r3, [r5, #12]
 8013f06:	059a      	lsls	r2, r3, #22
 8013f08:	d402      	bmi.n	8013f10 <_vfiprintf_r+0x220>
 8013f0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f0c:	f000 faa1 	bl	8014452 <__retarget_lock_release_recursive>
 8013f10:	89ab      	ldrh	r3, [r5, #12]
 8013f12:	065b      	lsls	r3, r3, #25
 8013f14:	f53f af12 	bmi.w	8013d3c <_vfiprintf_r+0x4c>
 8013f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f1a:	e711      	b.n	8013d40 <_vfiprintf_r+0x50>
 8013f1c:	ab03      	add	r3, sp, #12
 8013f1e:	9300      	str	r3, [sp, #0]
 8013f20:	462a      	mov	r2, r5
 8013f22:	4b09      	ldr	r3, [pc, #36]	; (8013f48 <_vfiprintf_r+0x258>)
 8013f24:	a904      	add	r1, sp, #16
 8013f26:	4630      	mov	r0, r6
 8013f28:	f7fc fad4 	bl	80104d4 <_printf_i>
 8013f2c:	e7e4      	b.n	8013ef8 <_vfiprintf_r+0x208>
 8013f2e:	bf00      	nop
 8013f30:	0801576c 	.word	0x0801576c
 8013f34:	0801578c 	.word	0x0801578c
 8013f38:	0801574c 	.word	0x0801574c
 8013f3c:	080156fc 	.word	0x080156fc
 8013f40:	08015706 	.word	0x08015706
 8013f44:	0800ff8d 	.word	0x0800ff8d
 8013f48:	08013ccd 	.word	0x08013ccd
 8013f4c:	08015702 	.word	0x08015702

08013f50 <__swbuf_r>:
 8013f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f52:	460e      	mov	r6, r1
 8013f54:	4614      	mov	r4, r2
 8013f56:	4605      	mov	r5, r0
 8013f58:	b118      	cbz	r0, 8013f62 <__swbuf_r+0x12>
 8013f5a:	6983      	ldr	r3, [r0, #24]
 8013f5c:	b90b      	cbnz	r3, 8013f62 <__swbuf_r+0x12>
 8013f5e:	f000 f9d9 	bl	8014314 <__sinit>
 8013f62:	4b21      	ldr	r3, [pc, #132]	; (8013fe8 <__swbuf_r+0x98>)
 8013f64:	429c      	cmp	r4, r3
 8013f66:	d12b      	bne.n	8013fc0 <__swbuf_r+0x70>
 8013f68:	686c      	ldr	r4, [r5, #4]
 8013f6a:	69a3      	ldr	r3, [r4, #24]
 8013f6c:	60a3      	str	r3, [r4, #8]
 8013f6e:	89a3      	ldrh	r3, [r4, #12]
 8013f70:	071a      	lsls	r2, r3, #28
 8013f72:	d52f      	bpl.n	8013fd4 <__swbuf_r+0x84>
 8013f74:	6923      	ldr	r3, [r4, #16]
 8013f76:	b36b      	cbz	r3, 8013fd4 <__swbuf_r+0x84>
 8013f78:	6923      	ldr	r3, [r4, #16]
 8013f7a:	6820      	ldr	r0, [r4, #0]
 8013f7c:	1ac0      	subs	r0, r0, r3
 8013f7e:	6963      	ldr	r3, [r4, #20]
 8013f80:	b2f6      	uxtb	r6, r6
 8013f82:	4283      	cmp	r3, r0
 8013f84:	4637      	mov	r7, r6
 8013f86:	dc04      	bgt.n	8013f92 <__swbuf_r+0x42>
 8013f88:	4621      	mov	r1, r4
 8013f8a:	4628      	mov	r0, r5
 8013f8c:	f000 f92e 	bl	80141ec <_fflush_r>
 8013f90:	bb30      	cbnz	r0, 8013fe0 <__swbuf_r+0x90>
 8013f92:	68a3      	ldr	r3, [r4, #8]
 8013f94:	3b01      	subs	r3, #1
 8013f96:	60a3      	str	r3, [r4, #8]
 8013f98:	6823      	ldr	r3, [r4, #0]
 8013f9a:	1c5a      	adds	r2, r3, #1
 8013f9c:	6022      	str	r2, [r4, #0]
 8013f9e:	701e      	strb	r6, [r3, #0]
 8013fa0:	6963      	ldr	r3, [r4, #20]
 8013fa2:	3001      	adds	r0, #1
 8013fa4:	4283      	cmp	r3, r0
 8013fa6:	d004      	beq.n	8013fb2 <__swbuf_r+0x62>
 8013fa8:	89a3      	ldrh	r3, [r4, #12]
 8013faa:	07db      	lsls	r3, r3, #31
 8013fac:	d506      	bpl.n	8013fbc <__swbuf_r+0x6c>
 8013fae:	2e0a      	cmp	r6, #10
 8013fb0:	d104      	bne.n	8013fbc <__swbuf_r+0x6c>
 8013fb2:	4621      	mov	r1, r4
 8013fb4:	4628      	mov	r0, r5
 8013fb6:	f000 f919 	bl	80141ec <_fflush_r>
 8013fba:	b988      	cbnz	r0, 8013fe0 <__swbuf_r+0x90>
 8013fbc:	4638      	mov	r0, r7
 8013fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fc0:	4b0a      	ldr	r3, [pc, #40]	; (8013fec <__swbuf_r+0x9c>)
 8013fc2:	429c      	cmp	r4, r3
 8013fc4:	d101      	bne.n	8013fca <__swbuf_r+0x7a>
 8013fc6:	68ac      	ldr	r4, [r5, #8]
 8013fc8:	e7cf      	b.n	8013f6a <__swbuf_r+0x1a>
 8013fca:	4b09      	ldr	r3, [pc, #36]	; (8013ff0 <__swbuf_r+0xa0>)
 8013fcc:	429c      	cmp	r4, r3
 8013fce:	bf08      	it	eq
 8013fd0:	68ec      	ldreq	r4, [r5, #12]
 8013fd2:	e7ca      	b.n	8013f6a <__swbuf_r+0x1a>
 8013fd4:	4621      	mov	r1, r4
 8013fd6:	4628      	mov	r0, r5
 8013fd8:	f000 f80c 	bl	8013ff4 <__swsetup_r>
 8013fdc:	2800      	cmp	r0, #0
 8013fde:	d0cb      	beq.n	8013f78 <__swbuf_r+0x28>
 8013fe0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013fe4:	e7ea      	b.n	8013fbc <__swbuf_r+0x6c>
 8013fe6:	bf00      	nop
 8013fe8:	0801576c 	.word	0x0801576c
 8013fec:	0801578c 	.word	0x0801578c
 8013ff0:	0801574c 	.word	0x0801574c

08013ff4 <__swsetup_r>:
 8013ff4:	4b32      	ldr	r3, [pc, #200]	; (80140c0 <__swsetup_r+0xcc>)
 8013ff6:	b570      	push	{r4, r5, r6, lr}
 8013ff8:	681d      	ldr	r5, [r3, #0]
 8013ffa:	4606      	mov	r6, r0
 8013ffc:	460c      	mov	r4, r1
 8013ffe:	b125      	cbz	r5, 801400a <__swsetup_r+0x16>
 8014000:	69ab      	ldr	r3, [r5, #24]
 8014002:	b913      	cbnz	r3, 801400a <__swsetup_r+0x16>
 8014004:	4628      	mov	r0, r5
 8014006:	f000 f985 	bl	8014314 <__sinit>
 801400a:	4b2e      	ldr	r3, [pc, #184]	; (80140c4 <__swsetup_r+0xd0>)
 801400c:	429c      	cmp	r4, r3
 801400e:	d10f      	bne.n	8014030 <__swsetup_r+0x3c>
 8014010:	686c      	ldr	r4, [r5, #4]
 8014012:	89a3      	ldrh	r3, [r4, #12]
 8014014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014018:	0719      	lsls	r1, r3, #28
 801401a:	d42c      	bmi.n	8014076 <__swsetup_r+0x82>
 801401c:	06dd      	lsls	r5, r3, #27
 801401e:	d411      	bmi.n	8014044 <__swsetup_r+0x50>
 8014020:	2309      	movs	r3, #9
 8014022:	6033      	str	r3, [r6, #0]
 8014024:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014028:	81a3      	strh	r3, [r4, #12]
 801402a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801402e:	e03e      	b.n	80140ae <__swsetup_r+0xba>
 8014030:	4b25      	ldr	r3, [pc, #148]	; (80140c8 <__swsetup_r+0xd4>)
 8014032:	429c      	cmp	r4, r3
 8014034:	d101      	bne.n	801403a <__swsetup_r+0x46>
 8014036:	68ac      	ldr	r4, [r5, #8]
 8014038:	e7eb      	b.n	8014012 <__swsetup_r+0x1e>
 801403a:	4b24      	ldr	r3, [pc, #144]	; (80140cc <__swsetup_r+0xd8>)
 801403c:	429c      	cmp	r4, r3
 801403e:	bf08      	it	eq
 8014040:	68ec      	ldreq	r4, [r5, #12]
 8014042:	e7e6      	b.n	8014012 <__swsetup_r+0x1e>
 8014044:	0758      	lsls	r0, r3, #29
 8014046:	d512      	bpl.n	801406e <__swsetup_r+0x7a>
 8014048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801404a:	b141      	cbz	r1, 801405e <__swsetup_r+0x6a>
 801404c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014050:	4299      	cmp	r1, r3
 8014052:	d002      	beq.n	801405a <__swsetup_r+0x66>
 8014054:	4630      	mov	r0, r6
 8014056:	f7ff fb27 	bl	80136a8 <_free_r>
 801405a:	2300      	movs	r3, #0
 801405c:	6363      	str	r3, [r4, #52]	; 0x34
 801405e:	89a3      	ldrh	r3, [r4, #12]
 8014060:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014064:	81a3      	strh	r3, [r4, #12]
 8014066:	2300      	movs	r3, #0
 8014068:	6063      	str	r3, [r4, #4]
 801406a:	6923      	ldr	r3, [r4, #16]
 801406c:	6023      	str	r3, [r4, #0]
 801406e:	89a3      	ldrh	r3, [r4, #12]
 8014070:	f043 0308 	orr.w	r3, r3, #8
 8014074:	81a3      	strh	r3, [r4, #12]
 8014076:	6923      	ldr	r3, [r4, #16]
 8014078:	b94b      	cbnz	r3, 801408e <__swsetup_r+0x9a>
 801407a:	89a3      	ldrh	r3, [r4, #12]
 801407c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014084:	d003      	beq.n	801408e <__swsetup_r+0x9a>
 8014086:	4621      	mov	r1, r4
 8014088:	4630      	mov	r0, r6
 801408a:	f000 fa09 	bl	80144a0 <__smakebuf_r>
 801408e:	89a0      	ldrh	r0, [r4, #12]
 8014090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014094:	f010 0301 	ands.w	r3, r0, #1
 8014098:	d00a      	beq.n	80140b0 <__swsetup_r+0xbc>
 801409a:	2300      	movs	r3, #0
 801409c:	60a3      	str	r3, [r4, #8]
 801409e:	6963      	ldr	r3, [r4, #20]
 80140a0:	425b      	negs	r3, r3
 80140a2:	61a3      	str	r3, [r4, #24]
 80140a4:	6923      	ldr	r3, [r4, #16]
 80140a6:	b943      	cbnz	r3, 80140ba <__swsetup_r+0xc6>
 80140a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80140ac:	d1ba      	bne.n	8014024 <__swsetup_r+0x30>
 80140ae:	bd70      	pop	{r4, r5, r6, pc}
 80140b0:	0781      	lsls	r1, r0, #30
 80140b2:	bf58      	it	pl
 80140b4:	6963      	ldrpl	r3, [r4, #20]
 80140b6:	60a3      	str	r3, [r4, #8]
 80140b8:	e7f4      	b.n	80140a4 <__swsetup_r+0xb0>
 80140ba:	2000      	movs	r0, #0
 80140bc:	e7f7      	b.n	80140ae <__swsetup_r+0xba>
 80140be:	bf00      	nop
 80140c0:	20000014 	.word	0x20000014
 80140c4:	0801576c 	.word	0x0801576c
 80140c8:	0801578c 	.word	0x0801578c
 80140cc:	0801574c 	.word	0x0801574c

080140d0 <abort>:
 80140d0:	b508      	push	{r3, lr}
 80140d2:	2006      	movs	r0, #6
 80140d4:	f000 fa54 	bl	8014580 <raise>
 80140d8:	2001      	movs	r0, #1
 80140da:	f7f2 fe21 	bl	8006d20 <_exit>
	...

080140e0 <__sflush_r>:
 80140e0:	898a      	ldrh	r2, [r1, #12]
 80140e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140e6:	4605      	mov	r5, r0
 80140e8:	0710      	lsls	r0, r2, #28
 80140ea:	460c      	mov	r4, r1
 80140ec:	d458      	bmi.n	80141a0 <__sflush_r+0xc0>
 80140ee:	684b      	ldr	r3, [r1, #4]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	dc05      	bgt.n	8014100 <__sflush_r+0x20>
 80140f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	dc02      	bgt.n	8014100 <__sflush_r+0x20>
 80140fa:	2000      	movs	r0, #0
 80140fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014102:	2e00      	cmp	r6, #0
 8014104:	d0f9      	beq.n	80140fa <__sflush_r+0x1a>
 8014106:	2300      	movs	r3, #0
 8014108:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801410c:	682f      	ldr	r7, [r5, #0]
 801410e:	602b      	str	r3, [r5, #0]
 8014110:	d032      	beq.n	8014178 <__sflush_r+0x98>
 8014112:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014114:	89a3      	ldrh	r3, [r4, #12]
 8014116:	075a      	lsls	r2, r3, #29
 8014118:	d505      	bpl.n	8014126 <__sflush_r+0x46>
 801411a:	6863      	ldr	r3, [r4, #4]
 801411c:	1ac0      	subs	r0, r0, r3
 801411e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014120:	b10b      	cbz	r3, 8014126 <__sflush_r+0x46>
 8014122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014124:	1ac0      	subs	r0, r0, r3
 8014126:	2300      	movs	r3, #0
 8014128:	4602      	mov	r2, r0
 801412a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801412c:	6a21      	ldr	r1, [r4, #32]
 801412e:	4628      	mov	r0, r5
 8014130:	47b0      	blx	r6
 8014132:	1c43      	adds	r3, r0, #1
 8014134:	89a3      	ldrh	r3, [r4, #12]
 8014136:	d106      	bne.n	8014146 <__sflush_r+0x66>
 8014138:	6829      	ldr	r1, [r5, #0]
 801413a:	291d      	cmp	r1, #29
 801413c:	d82c      	bhi.n	8014198 <__sflush_r+0xb8>
 801413e:	4a2a      	ldr	r2, [pc, #168]	; (80141e8 <__sflush_r+0x108>)
 8014140:	40ca      	lsrs	r2, r1
 8014142:	07d6      	lsls	r6, r2, #31
 8014144:	d528      	bpl.n	8014198 <__sflush_r+0xb8>
 8014146:	2200      	movs	r2, #0
 8014148:	6062      	str	r2, [r4, #4]
 801414a:	04d9      	lsls	r1, r3, #19
 801414c:	6922      	ldr	r2, [r4, #16]
 801414e:	6022      	str	r2, [r4, #0]
 8014150:	d504      	bpl.n	801415c <__sflush_r+0x7c>
 8014152:	1c42      	adds	r2, r0, #1
 8014154:	d101      	bne.n	801415a <__sflush_r+0x7a>
 8014156:	682b      	ldr	r3, [r5, #0]
 8014158:	b903      	cbnz	r3, 801415c <__sflush_r+0x7c>
 801415a:	6560      	str	r0, [r4, #84]	; 0x54
 801415c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801415e:	602f      	str	r7, [r5, #0]
 8014160:	2900      	cmp	r1, #0
 8014162:	d0ca      	beq.n	80140fa <__sflush_r+0x1a>
 8014164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014168:	4299      	cmp	r1, r3
 801416a:	d002      	beq.n	8014172 <__sflush_r+0x92>
 801416c:	4628      	mov	r0, r5
 801416e:	f7ff fa9b 	bl	80136a8 <_free_r>
 8014172:	2000      	movs	r0, #0
 8014174:	6360      	str	r0, [r4, #52]	; 0x34
 8014176:	e7c1      	b.n	80140fc <__sflush_r+0x1c>
 8014178:	6a21      	ldr	r1, [r4, #32]
 801417a:	2301      	movs	r3, #1
 801417c:	4628      	mov	r0, r5
 801417e:	47b0      	blx	r6
 8014180:	1c41      	adds	r1, r0, #1
 8014182:	d1c7      	bne.n	8014114 <__sflush_r+0x34>
 8014184:	682b      	ldr	r3, [r5, #0]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d0c4      	beq.n	8014114 <__sflush_r+0x34>
 801418a:	2b1d      	cmp	r3, #29
 801418c:	d001      	beq.n	8014192 <__sflush_r+0xb2>
 801418e:	2b16      	cmp	r3, #22
 8014190:	d101      	bne.n	8014196 <__sflush_r+0xb6>
 8014192:	602f      	str	r7, [r5, #0]
 8014194:	e7b1      	b.n	80140fa <__sflush_r+0x1a>
 8014196:	89a3      	ldrh	r3, [r4, #12]
 8014198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801419c:	81a3      	strh	r3, [r4, #12]
 801419e:	e7ad      	b.n	80140fc <__sflush_r+0x1c>
 80141a0:	690f      	ldr	r7, [r1, #16]
 80141a2:	2f00      	cmp	r7, #0
 80141a4:	d0a9      	beq.n	80140fa <__sflush_r+0x1a>
 80141a6:	0793      	lsls	r3, r2, #30
 80141a8:	680e      	ldr	r6, [r1, #0]
 80141aa:	bf08      	it	eq
 80141ac:	694b      	ldreq	r3, [r1, #20]
 80141ae:	600f      	str	r7, [r1, #0]
 80141b0:	bf18      	it	ne
 80141b2:	2300      	movne	r3, #0
 80141b4:	eba6 0807 	sub.w	r8, r6, r7
 80141b8:	608b      	str	r3, [r1, #8]
 80141ba:	f1b8 0f00 	cmp.w	r8, #0
 80141be:	dd9c      	ble.n	80140fa <__sflush_r+0x1a>
 80141c0:	6a21      	ldr	r1, [r4, #32]
 80141c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80141c4:	4643      	mov	r3, r8
 80141c6:	463a      	mov	r2, r7
 80141c8:	4628      	mov	r0, r5
 80141ca:	47b0      	blx	r6
 80141cc:	2800      	cmp	r0, #0
 80141ce:	dc06      	bgt.n	80141de <__sflush_r+0xfe>
 80141d0:	89a3      	ldrh	r3, [r4, #12]
 80141d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141d6:	81a3      	strh	r3, [r4, #12]
 80141d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141dc:	e78e      	b.n	80140fc <__sflush_r+0x1c>
 80141de:	4407      	add	r7, r0
 80141e0:	eba8 0800 	sub.w	r8, r8, r0
 80141e4:	e7e9      	b.n	80141ba <__sflush_r+0xda>
 80141e6:	bf00      	nop
 80141e8:	20400001 	.word	0x20400001

080141ec <_fflush_r>:
 80141ec:	b538      	push	{r3, r4, r5, lr}
 80141ee:	690b      	ldr	r3, [r1, #16]
 80141f0:	4605      	mov	r5, r0
 80141f2:	460c      	mov	r4, r1
 80141f4:	b913      	cbnz	r3, 80141fc <_fflush_r+0x10>
 80141f6:	2500      	movs	r5, #0
 80141f8:	4628      	mov	r0, r5
 80141fa:	bd38      	pop	{r3, r4, r5, pc}
 80141fc:	b118      	cbz	r0, 8014206 <_fflush_r+0x1a>
 80141fe:	6983      	ldr	r3, [r0, #24]
 8014200:	b90b      	cbnz	r3, 8014206 <_fflush_r+0x1a>
 8014202:	f000 f887 	bl	8014314 <__sinit>
 8014206:	4b14      	ldr	r3, [pc, #80]	; (8014258 <_fflush_r+0x6c>)
 8014208:	429c      	cmp	r4, r3
 801420a:	d11b      	bne.n	8014244 <_fflush_r+0x58>
 801420c:	686c      	ldr	r4, [r5, #4]
 801420e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d0ef      	beq.n	80141f6 <_fflush_r+0xa>
 8014216:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014218:	07d0      	lsls	r0, r2, #31
 801421a:	d404      	bmi.n	8014226 <_fflush_r+0x3a>
 801421c:	0599      	lsls	r1, r3, #22
 801421e:	d402      	bmi.n	8014226 <_fflush_r+0x3a>
 8014220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014222:	f000 f915 	bl	8014450 <__retarget_lock_acquire_recursive>
 8014226:	4628      	mov	r0, r5
 8014228:	4621      	mov	r1, r4
 801422a:	f7ff ff59 	bl	80140e0 <__sflush_r>
 801422e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014230:	07da      	lsls	r2, r3, #31
 8014232:	4605      	mov	r5, r0
 8014234:	d4e0      	bmi.n	80141f8 <_fflush_r+0xc>
 8014236:	89a3      	ldrh	r3, [r4, #12]
 8014238:	059b      	lsls	r3, r3, #22
 801423a:	d4dd      	bmi.n	80141f8 <_fflush_r+0xc>
 801423c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801423e:	f000 f908 	bl	8014452 <__retarget_lock_release_recursive>
 8014242:	e7d9      	b.n	80141f8 <_fflush_r+0xc>
 8014244:	4b05      	ldr	r3, [pc, #20]	; (801425c <_fflush_r+0x70>)
 8014246:	429c      	cmp	r4, r3
 8014248:	d101      	bne.n	801424e <_fflush_r+0x62>
 801424a:	68ac      	ldr	r4, [r5, #8]
 801424c:	e7df      	b.n	801420e <_fflush_r+0x22>
 801424e:	4b04      	ldr	r3, [pc, #16]	; (8014260 <_fflush_r+0x74>)
 8014250:	429c      	cmp	r4, r3
 8014252:	bf08      	it	eq
 8014254:	68ec      	ldreq	r4, [r5, #12]
 8014256:	e7da      	b.n	801420e <_fflush_r+0x22>
 8014258:	0801576c 	.word	0x0801576c
 801425c:	0801578c 	.word	0x0801578c
 8014260:	0801574c 	.word	0x0801574c

08014264 <std>:
 8014264:	2300      	movs	r3, #0
 8014266:	b510      	push	{r4, lr}
 8014268:	4604      	mov	r4, r0
 801426a:	e9c0 3300 	strd	r3, r3, [r0]
 801426e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014272:	6083      	str	r3, [r0, #8]
 8014274:	8181      	strh	r1, [r0, #12]
 8014276:	6643      	str	r3, [r0, #100]	; 0x64
 8014278:	81c2      	strh	r2, [r0, #14]
 801427a:	6183      	str	r3, [r0, #24]
 801427c:	4619      	mov	r1, r3
 801427e:	2208      	movs	r2, #8
 8014280:	305c      	adds	r0, #92	; 0x5c
 8014282:	f7fb fddb 	bl	800fe3c <memset>
 8014286:	4b05      	ldr	r3, [pc, #20]	; (801429c <std+0x38>)
 8014288:	6263      	str	r3, [r4, #36]	; 0x24
 801428a:	4b05      	ldr	r3, [pc, #20]	; (80142a0 <std+0x3c>)
 801428c:	62a3      	str	r3, [r4, #40]	; 0x28
 801428e:	4b05      	ldr	r3, [pc, #20]	; (80142a4 <std+0x40>)
 8014290:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014292:	4b05      	ldr	r3, [pc, #20]	; (80142a8 <std+0x44>)
 8014294:	6224      	str	r4, [r4, #32]
 8014296:	6323      	str	r3, [r4, #48]	; 0x30
 8014298:	bd10      	pop	{r4, pc}
 801429a:	bf00      	nop
 801429c:	080145b9 	.word	0x080145b9
 80142a0:	080145db 	.word	0x080145db
 80142a4:	08014613 	.word	0x08014613
 80142a8:	08014637 	.word	0x08014637

080142ac <_cleanup_r>:
 80142ac:	4901      	ldr	r1, [pc, #4]	; (80142b4 <_cleanup_r+0x8>)
 80142ae:	f000 b8af 	b.w	8014410 <_fwalk_reent>
 80142b2:	bf00      	nop
 80142b4:	080141ed 	.word	0x080141ed

080142b8 <__sfmoreglue>:
 80142b8:	b570      	push	{r4, r5, r6, lr}
 80142ba:	2268      	movs	r2, #104	; 0x68
 80142bc:	1e4d      	subs	r5, r1, #1
 80142be:	4355      	muls	r5, r2
 80142c0:	460e      	mov	r6, r1
 80142c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80142c6:	f7ff fa5b 	bl	8013780 <_malloc_r>
 80142ca:	4604      	mov	r4, r0
 80142cc:	b140      	cbz	r0, 80142e0 <__sfmoreglue+0x28>
 80142ce:	2100      	movs	r1, #0
 80142d0:	e9c0 1600 	strd	r1, r6, [r0]
 80142d4:	300c      	adds	r0, #12
 80142d6:	60a0      	str	r0, [r4, #8]
 80142d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80142dc:	f7fb fdae 	bl	800fe3c <memset>
 80142e0:	4620      	mov	r0, r4
 80142e2:	bd70      	pop	{r4, r5, r6, pc}

080142e4 <__sfp_lock_acquire>:
 80142e4:	4801      	ldr	r0, [pc, #4]	; (80142ec <__sfp_lock_acquire+0x8>)
 80142e6:	f000 b8b3 	b.w	8014450 <__retarget_lock_acquire_recursive>
 80142ea:	bf00      	nop
 80142ec:	200063c5 	.word	0x200063c5

080142f0 <__sfp_lock_release>:
 80142f0:	4801      	ldr	r0, [pc, #4]	; (80142f8 <__sfp_lock_release+0x8>)
 80142f2:	f000 b8ae 	b.w	8014452 <__retarget_lock_release_recursive>
 80142f6:	bf00      	nop
 80142f8:	200063c5 	.word	0x200063c5

080142fc <__sinit_lock_acquire>:
 80142fc:	4801      	ldr	r0, [pc, #4]	; (8014304 <__sinit_lock_acquire+0x8>)
 80142fe:	f000 b8a7 	b.w	8014450 <__retarget_lock_acquire_recursive>
 8014302:	bf00      	nop
 8014304:	200063c6 	.word	0x200063c6

08014308 <__sinit_lock_release>:
 8014308:	4801      	ldr	r0, [pc, #4]	; (8014310 <__sinit_lock_release+0x8>)
 801430a:	f000 b8a2 	b.w	8014452 <__retarget_lock_release_recursive>
 801430e:	bf00      	nop
 8014310:	200063c6 	.word	0x200063c6

08014314 <__sinit>:
 8014314:	b510      	push	{r4, lr}
 8014316:	4604      	mov	r4, r0
 8014318:	f7ff fff0 	bl	80142fc <__sinit_lock_acquire>
 801431c:	69a3      	ldr	r3, [r4, #24]
 801431e:	b11b      	cbz	r3, 8014328 <__sinit+0x14>
 8014320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014324:	f7ff bff0 	b.w	8014308 <__sinit_lock_release>
 8014328:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801432c:	6523      	str	r3, [r4, #80]	; 0x50
 801432e:	4b13      	ldr	r3, [pc, #76]	; (801437c <__sinit+0x68>)
 8014330:	4a13      	ldr	r2, [pc, #76]	; (8014380 <__sinit+0x6c>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	62a2      	str	r2, [r4, #40]	; 0x28
 8014336:	42a3      	cmp	r3, r4
 8014338:	bf04      	itt	eq
 801433a:	2301      	moveq	r3, #1
 801433c:	61a3      	streq	r3, [r4, #24]
 801433e:	4620      	mov	r0, r4
 8014340:	f000 f820 	bl	8014384 <__sfp>
 8014344:	6060      	str	r0, [r4, #4]
 8014346:	4620      	mov	r0, r4
 8014348:	f000 f81c 	bl	8014384 <__sfp>
 801434c:	60a0      	str	r0, [r4, #8]
 801434e:	4620      	mov	r0, r4
 8014350:	f000 f818 	bl	8014384 <__sfp>
 8014354:	2200      	movs	r2, #0
 8014356:	60e0      	str	r0, [r4, #12]
 8014358:	2104      	movs	r1, #4
 801435a:	6860      	ldr	r0, [r4, #4]
 801435c:	f7ff ff82 	bl	8014264 <std>
 8014360:	68a0      	ldr	r0, [r4, #8]
 8014362:	2201      	movs	r2, #1
 8014364:	2109      	movs	r1, #9
 8014366:	f7ff ff7d 	bl	8014264 <std>
 801436a:	68e0      	ldr	r0, [r4, #12]
 801436c:	2202      	movs	r2, #2
 801436e:	2112      	movs	r1, #18
 8014370:	f7ff ff78 	bl	8014264 <std>
 8014374:	2301      	movs	r3, #1
 8014376:	61a3      	str	r3, [r4, #24]
 8014378:	e7d2      	b.n	8014320 <__sinit+0xc>
 801437a:	bf00      	nop
 801437c:	08015308 	.word	0x08015308
 8014380:	080142ad 	.word	0x080142ad

08014384 <__sfp>:
 8014384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014386:	4607      	mov	r7, r0
 8014388:	f7ff ffac 	bl	80142e4 <__sfp_lock_acquire>
 801438c:	4b1e      	ldr	r3, [pc, #120]	; (8014408 <__sfp+0x84>)
 801438e:	681e      	ldr	r6, [r3, #0]
 8014390:	69b3      	ldr	r3, [r6, #24]
 8014392:	b913      	cbnz	r3, 801439a <__sfp+0x16>
 8014394:	4630      	mov	r0, r6
 8014396:	f7ff ffbd 	bl	8014314 <__sinit>
 801439a:	3648      	adds	r6, #72	; 0x48
 801439c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80143a0:	3b01      	subs	r3, #1
 80143a2:	d503      	bpl.n	80143ac <__sfp+0x28>
 80143a4:	6833      	ldr	r3, [r6, #0]
 80143a6:	b30b      	cbz	r3, 80143ec <__sfp+0x68>
 80143a8:	6836      	ldr	r6, [r6, #0]
 80143aa:	e7f7      	b.n	801439c <__sfp+0x18>
 80143ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80143b0:	b9d5      	cbnz	r5, 80143e8 <__sfp+0x64>
 80143b2:	4b16      	ldr	r3, [pc, #88]	; (801440c <__sfp+0x88>)
 80143b4:	60e3      	str	r3, [r4, #12]
 80143b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80143ba:	6665      	str	r5, [r4, #100]	; 0x64
 80143bc:	f000 f847 	bl	801444e <__retarget_lock_init_recursive>
 80143c0:	f7ff ff96 	bl	80142f0 <__sfp_lock_release>
 80143c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80143c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80143cc:	6025      	str	r5, [r4, #0]
 80143ce:	61a5      	str	r5, [r4, #24]
 80143d0:	2208      	movs	r2, #8
 80143d2:	4629      	mov	r1, r5
 80143d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80143d8:	f7fb fd30 	bl	800fe3c <memset>
 80143dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80143e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80143e4:	4620      	mov	r0, r4
 80143e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143e8:	3468      	adds	r4, #104	; 0x68
 80143ea:	e7d9      	b.n	80143a0 <__sfp+0x1c>
 80143ec:	2104      	movs	r1, #4
 80143ee:	4638      	mov	r0, r7
 80143f0:	f7ff ff62 	bl	80142b8 <__sfmoreglue>
 80143f4:	4604      	mov	r4, r0
 80143f6:	6030      	str	r0, [r6, #0]
 80143f8:	2800      	cmp	r0, #0
 80143fa:	d1d5      	bne.n	80143a8 <__sfp+0x24>
 80143fc:	f7ff ff78 	bl	80142f0 <__sfp_lock_release>
 8014400:	230c      	movs	r3, #12
 8014402:	603b      	str	r3, [r7, #0]
 8014404:	e7ee      	b.n	80143e4 <__sfp+0x60>
 8014406:	bf00      	nop
 8014408:	08015308 	.word	0x08015308
 801440c:	ffff0001 	.word	0xffff0001

08014410 <_fwalk_reent>:
 8014410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014414:	4606      	mov	r6, r0
 8014416:	4688      	mov	r8, r1
 8014418:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801441c:	2700      	movs	r7, #0
 801441e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014422:	f1b9 0901 	subs.w	r9, r9, #1
 8014426:	d505      	bpl.n	8014434 <_fwalk_reent+0x24>
 8014428:	6824      	ldr	r4, [r4, #0]
 801442a:	2c00      	cmp	r4, #0
 801442c:	d1f7      	bne.n	801441e <_fwalk_reent+0xe>
 801442e:	4638      	mov	r0, r7
 8014430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014434:	89ab      	ldrh	r3, [r5, #12]
 8014436:	2b01      	cmp	r3, #1
 8014438:	d907      	bls.n	801444a <_fwalk_reent+0x3a>
 801443a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801443e:	3301      	adds	r3, #1
 8014440:	d003      	beq.n	801444a <_fwalk_reent+0x3a>
 8014442:	4629      	mov	r1, r5
 8014444:	4630      	mov	r0, r6
 8014446:	47c0      	blx	r8
 8014448:	4307      	orrs	r7, r0
 801444a:	3568      	adds	r5, #104	; 0x68
 801444c:	e7e9      	b.n	8014422 <_fwalk_reent+0x12>

0801444e <__retarget_lock_init_recursive>:
 801444e:	4770      	bx	lr

08014450 <__retarget_lock_acquire_recursive>:
 8014450:	4770      	bx	lr

08014452 <__retarget_lock_release_recursive>:
 8014452:	4770      	bx	lr

08014454 <__swhatbuf_r>:
 8014454:	b570      	push	{r4, r5, r6, lr}
 8014456:	460e      	mov	r6, r1
 8014458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801445c:	2900      	cmp	r1, #0
 801445e:	b096      	sub	sp, #88	; 0x58
 8014460:	4614      	mov	r4, r2
 8014462:	461d      	mov	r5, r3
 8014464:	da08      	bge.n	8014478 <__swhatbuf_r+0x24>
 8014466:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801446a:	2200      	movs	r2, #0
 801446c:	602a      	str	r2, [r5, #0]
 801446e:	061a      	lsls	r2, r3, #24
 8014470:	d410      	bmi.n	8014494 <__swhatbuf_r+0x40>
 8014472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014476:	e00e      	b.n	8014496 <__swhatbuf_r+0x42>
 8014478:	466a      	mov	r2, sp
 801447a:	f000 f903 	bl	8014684 <_fstat_r>
 801447e:	2800      	cmp	r0, #0
 8014480:	dbf1      	blt.n	8014466 <__swhatbuf_r+0x12>
 8014482:	9a01      	ldr	r2, [sp, #4]
 8014484:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014488:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801448c:	425a      	negs	r2, r3
 801448e:	415a      	adcs	r2, r3
 8014490:	602a      	str	r2, [r5, #0]
 8014492:	e7ee      	b.n	8014472 <__swhatbuf_r+0x1e>
 8014494:	2340      	movs	r3, #64	; 0x40
 8014496:	2000      	movs	r0, #0
 8014498:	6023      	str	r3, [r4, #0]
 801449a:	b016      	add	sp, #88	; 0x58
 801449c:	bd70      	pop	{r4, r5, r6, pc}
	...

080144a0 <__smakebuf_r>:
 80144a0:	898b      	ldrh	r3, [r1, #12]
 80144a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80144a4:	079d      	lsls	r5, r3, #30
 80144a6:	4606      	mov	r6, r0
 80144a8:	460c      	mov	r4, r1
 80144aa:	d507      	bpl.n	80144bc <__smakebuf_r+0x1c>
 80144ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80144b0:	6023      	str	r3, [r4, #0]
 80144b2:	6123      	str	r3, [r4, #16]
 80144b4:	2301      	movs	r3, #1
 80144b6:	6163      	str	r3, [r4, #20]
 80144b8:	b002      	add	sp, #8
 80144ba:	bd70      	pop	{r4, r5, r6, pc}
 80144bc:	ab01      	add	r3, sp, #4
 80144be:	466a      	mov	r2, sp
 80144c0:	f7ff ffc8 	bl	8014454 <__swhatbuf_r>
 80144c4:	9900      	ldr	r1, [sp, #0]
 80144c6:	4605      	mov	r5, r0
 80144c8:	4630      	mov	r0, r6
 80144ca:	f7ff f959 	bl	8013780 <_malloc_r>
 80144ce:	b948      	cbnz	r0, 80144e4 <__smakebuf_r+0x44>
 80144d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144d4:	059a      	lsls	r2, r3, #22
 80144d6:	d4ef      	bmi.n	80144b8 <__smakebuf_r+0x18>
 80144d8:	f023 0303 	bic.w	r3, r3, #3
 80144dc:	f043 0302 	orr.w	r3, r3, #2
 80144e0:	81a3      	strh	r3, [r4, #12]
 80144e2:	e7e3      	b.n	80144ac <__smakebuf_r+0xc>
 80144e4:	4b0d      	ldr	r3, [pc, #52]	; (801451c <__smakebuf_r+0x7c>)
 80144e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80144e8:	89a3      	ldrh	r3, [r4, #12]
 80144ea:	6020      	str	r0, [r4, #0]
 80144ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80144f0:	81a3      	strh	r3, [r4, #12]
 80144f2:	9b00      	ldr	r3, [sp, #0]
 80144f4:	6163      	str	r3, [r4, #20]
 80144f6:	9b01      	ldr	r3, [sp, #4]
 80144f8:	6120      	str	r0, [r4, #16]
 80144fa:	b15b      	cbz	r3, 8014514 <__smakebuf_r+0x74>
 80144fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014500:	4630      	mov	r0, r6
 8014502:	f000 f8d1 	bl	80146a8 <_isatty_r>
 8014506:	b128      	cbz	r0, 8014514 <__smakebuf_r+0x74>
 8014508:	89a3      	ldrh	r3, [r4, #12]
 801450a:	f023 0303 	bic.w	r3, r3, #3
 801450e:	f043 0301 	orr.w	r3, r3, #1
 8014512:	81a3      	strh	r3, [r4, #12]
 8014514:	89a0      	ldrh	r0, [r4, #12]
 8014516:	4305      	orrs	r5, r0
 8014518:	81a5      	strh	r5, [r4, #12]
 801451a:	e7cd      	b.n	80144b8 <__smakebuf_r+0x18>
 801451c:	080142ad 	.word	0x080142ad

08014520 <_malloc_usable_size_r>:
 8014520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014524:	1f18      	subs	r0, r3, #4
 8014526:	2b00      	cmp	r3, #0
 8014528:	bfbc      	itt	lt
 801452a:	580b      	ldrlt	r3, [r1, r0]
 801452c:	18c0      	addlt	r0, r0, r3
 801452e:	4770      	bx	lr

08014530 <_raise_r>:
 8014530:	291f      	cmp	r1, #31
 8014532:	b538      	push	{r3, r4, r5, lr}
 8014534:	4604      	mov	r4, r0
 8014536:	460d      	mov	r5, r1
 8014538:	d904      	bls.n	8014544 <_raise_r+0x14>
 801453a:	2316      	movs	r3, #22
 801453c:	6003      	str	r3, [r0, #0]
 801453e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014542:	bd38      	pop	{r3, r4, r5, pc}
 8014544:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014546:	b112      	cbz	r2, 801454e <_raise_r+0x1e>
 8014548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801454c:	b94b      	cbnz	r3, 8014562 <_raise_r+0x32>
 801454e:	4620      	mov	r0, r4
 8014550:	f000 f830 	bl	80145b4 <_getpid_r>
 8014554:	462a      	mov	r2, r5
 8014556:	4601      	mov	r1, r0
 8014558:	4620      	mov	r0, r4
 801455a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801455e:	f000 b817 	b.w	8014590 <_kill_r>
 8014562:	2b01      	cmp	r3, #1
 8014564:	d00a      	beq.n	801457c <_raise_r+0x4c>
 8014566:	1c59      	adds	r1, r3, #1
 8014568:	d103      	bne.n	8014572 <_raise_r+0x42>
 801456a:	2316      	movs	r3, #22
 801456c:	6003      	str	r3, [r0, #0]
 801456e:	2001      	movs	r0, #1
 8014570:	e7e7      	b.n	8014542 <_raise_r+0x12>
 8014572:	2400      	movs	r4, #0
 8014574:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014578:	4628      	mov	r0, r5
 801457a:	4798      	blx	r3
 801457c:	2000      	movs	r0, #0
 801457e:	e7e0      	b.n	8014542 <_raise_r+0x12>

08014580 <raise>:
 8014580:	4b02      	ldr	r3, [pc, #8]	; (801458c <raise+0xc>)
 8014582:	4601      	mov	r1, r0
 8014584:	6818      	ldr	r0, [r3, #0]
 8014586:	f7ff bfd3 	b.w	8014530 <_raise_r>
 801458a:	bf00      	nop
 801458c:	20000014 	.word	0x20000014

08014590 <_kill_r>:
 8014590:	b538      	push	{r3, r4, r5, lr}
 8014592:	4d07      	ldr	r5, [pc, #28]	; (80145b0 <_kill_r+0x20>)
 8014594:	2300      	movs	r3, #0
 8014596:	4604      	mov	r4, r0
 8014598:	4608      	mov	r0, r1
 801459a:	4611      	mov	r1, r2
 801459c:	602b      	str	r3, [r5, #0]
 801459e:	f7f2 fbaf 	bl	8006d00 <_kill>
 80145a2:	1c43      	adds	r3, r0, #1
 80145a4:	d102      	bne.n	80145ac <_kill_r+0x1c>
 80145a6:	682b      	ldr	r3, [r5, #0]
 80145a8:	b103      	cbz	r3, 80145ac <_kill_r+0x1c>
 80145aa:	6023      	str	r3, [r4, #0]
 80145ac:	bd38      	pop	{r3, r4, r5, pc}
 80145ae:	bf00      	nop
 80145b0:	200063c0 	.word	0x200063c0

080145b4 <_getpid_r>:
 80145b4:	f7f2 bb9c 	b.w	8006cf0 <_getpid>

080145b8 <__sread>:
 80145b8:	b510      	push	{r4, lr}
 80145ba:	460c      	mov	r4, r1
 80145bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145c0:	f000 f894 	bl	80146ec <_read_r>
 80145c4:	2800      	cmp	r0, #0
 80145c6:	bfab      	itete	ge
 80145c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80145ca:	89a3      	ldrhlt	r3, [r4, #12]
 80145cc:	181b      	addge	r3, r3, r0
 80145ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80145d2:	bfac      	ite	ge
 80145d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80145d6:	81a3      	strhlt	r3, [r4, #12]
 80145d8:	bd10      	pop	{r4, pc}

080145da <__swrite>:
 80145da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145de:	461f      	mov	r7, r3
 80145e0:	898b      	ldrh	r3, [r1, #12]
 80145e2:	05db      	lsls	r3, r3, #23
 80145e4:	4605      	mov	r5, r0
 80145e6:	460c      	mov	r4, r1
 80145e8:	4616      	mov	r6, r2
 80145ea:	d505      	bpl.n	80145f8 <__swrite+0x1e>
 80145ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145f0:	2302      	movs	r3, #2
 80145f2:	2200      	movs	r2, #0
 80145f4:	f000 f868 	bl	80146c8 <_lseek_r>
 80145f8:	89a3      	ldrh	r3, [r4, #12]
 80145fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014602:	81a3      	strh	r3, [r4, #12]
 8014604:	4632      	mov	r2, r6
 8014606:	463b      	mov	r3, r7
 8014608:	4628      	mov	r0, r5
 801460a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801460e:	f000 b817 	b.w	8014640 <_write_r>

08014612 <__sseek>:
 8014612:	b510      	push	{r4, lr}
 8014614:	460c      	mov	r4, r1
 8014616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801461a:	f000 f855 	bl	80146c8 <_lseek_r>
 801461e:	1c43      	adds	r3, r0, #1
 8014620:	89a3      	ldrh	r3, [r4, #12]
 8014622:	bf15      	itete	ne
 8014624:	6560      	strne	r0, [r4, #84]	; 0x54
 8014626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801462a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801462e:	81a3      	strheq	r3, [r4, #12]
 8014630:	bf18      	it	ne
 8014632:	81a3      	strhne	r3, [r4, #12]
 8014634:	bd10      	pop	{r4, pc}

08014636 <__sclose>:
 8014636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801463a:	f000 b813 	b.w	8014664 <_close_r>
	...

08014640 <_write_r>:
 8014640:	b538      	push	{r3, r4, r5, lr}
 8014642:	4d07      	ldr	r5, [pc, #28]	; (8014660 <_write_r+0x20>)
 8014644:	4604      	mov	r4, r0
 8014646:	4608      	mov	r0, r1
 8014648:	4611      	mov	r1, r2
 801464a:	2200      	movs	r2, #0
 801464c:	602a      	str	r2, [r5, #0]
 801464e:	461a      	mov	r2, r3
 8014650:	f7f2 fb8d 	bl	8006d6e <_write>
 8014654:	1c43      	adds	r3, r0, #1
 8014656:	d102      	bne.n	801465e <_write_r+0x1e>
 8014658:	682b      	ldr	r3, [r5, #0]
 801465a:	b103      	cbz	r3, 801465e <_write_r+0x1e>
 801465c:	6023      	str	r3, [r4, #0]
 801465e:	bd38      	pop	{r3, r4, r5, pc}
 8014660:	200063c0 	.word	0x200063c0

08014664 <_close_r>:
 8014664:	b538      	push	{r3, r4, r5, lr}
 8014666:	4d06      	ldr	r5, [pc, #24]	; (8014680 <_close_r+0x1c>)
 8014668:	2300      	movs	r3, #0
 801466a:	4604      	mov	r4, r0
 801466c:	4608      	mov	r0, r1
 801466e:	602b      	str	r3, [r5, #0]
 8014670:	f7f2 fb99 	bl	8006da6 <_close>
 8014674:	1c43      	adds	r3, r0, #1
 8014676:	d102      	bne.n	801467e <_close_r+0x1a>
 8014678:	682b      	ldr	r3, [r5, #0]
 801467a:	b103      	cbz	r3, 801467e <_close_r+0x1a>
 801467c:	6023      	str	r3, [r4, #0]
 801467e:	bd38      	pop	{r3, r4, r5, pc}
 8014680:	200063c0 	.word	0x200063c0

08014684 <_fstat_r>:
 8014684:	b538      	push	{r3, r4, r5, lr}
 8014686:	4d07      	ldr	r5, [pc, #28]	; (80146a4 <_fstat_r+0x20>)
 8014688:	2300      	movs	r3, #0
 801468a:	4604      	mov	r4, r0
 801468c:	4608      	mov	r0, r1
 801468e:	4611      	mov	r1, r2
 8014690:	602b      	str	r3, [r5, #0]
 8014692:	f7f2 fb94 	bl	8006dbe <_fstat>
 8014696:	1c43      	adds	r3, r0, #1
 8014698:	d102      	bne.n	80146a0 <_fstat_r+0x1c>
 801469a:	682b      	ldr	r3, [r5, #0]
 801469c:	b103      	cbz	r3, 80146a0 <_fstat_r+0x1c>
 801469e:	6023      	str	r3, [r4, #0]
 80146a0:	bd38      	pop	{r3, r4, r5, pc}
 80146a2:	bf00      	nop
 80146a4:	200063c0 	.word	0x200063c0

080146a8 <_isatty_r>:
 80146a8:	b538      	push	{r3, r4, r5, lr}
 80146aa:	4d06      	ldr	r5, [pc, #24]	; (80146c4 <_isatty_r+0x1c>)
 80146ac:	2300      	movs	r3, #0
 80146ae:	4604      	mov	r4, r0
 80146b0:	4608      	mov	r0, r1
 80146b2:	602b      	str	r3, [r5, #0]
 80146b4:	f7f2 fb93 	bl	8006dde <_isatty>
 80146b8:	1c43      	adds	r3, r0, #1
 80146ba:	d102      	bne.n	80146c2 <_isatty_r+0x1a>
 80146bc:	682b      	ldr	r3, [r5, #0]
 80146be:	b103      	cbz	r3, 80146c2 <_isatty_r+0x1a>
 80146c0:	6023      	str	r3, [r4, #0]
 80146c2:	bd38      	pop	{r3, r4, r5, pc}
 80146c4:	200063c0 	.word	0x200063c0

080146c8 <_lseek_r>:
 80146c8:	b538      	push	{r3, r4, r5, lr}
 80146ca:	4d07      	ldr	r5, [pc, #28]	; (80146e8 <_lseek_r+0x20>)
 80146cc:	4604      	mov	r4, r0
 80146ce:	4608      	mov	r0, r1
 80146d0:	4611      	mov	r1, r2
 80146d2:	2200      	movs	r2, #0
 80146d4:	602a      	str	r2, [r5, #0]
 80146d6:	461a      	mov	r2, r3
 80146d8:	f7f2 fb8c 	bl	8006df4 <_lseek>
 80146dc:	1c43      	adds	r3, r0, #1
 80146de:	d102      	bne.n	80146e6 <_lseek_r+0x1e>
 80146e0:	682b      	ldr	r3, [r5, #0]
 80146e2:	b103      	cbz	r3, 80146e6 <_lseek_r+0x1e>
 80146e4:	6023      	str	r3, [r4, #0]
 80146e6:	bd38      	pop	{r3, r4, r5, pc}
 80146e8:	200063c0 	.word	0x200063c0

080146ec <_read_r>:
 80146ec:	b538      	push	{r3, r4, r5, lr}
 80146ee:	4d07      	ldr	r5, [pc, #28]	; (801470c <_read_r+0x20>)
 80146f0:	4604      	mov	r4, r0
 80146f2:	4608      	mov	r0, r1
 80146f4:	4611      	mov	r1, r2
 80146f6:	2200      	movs	r2, #0
 80146f8:	602a      	str	r2, [r5, #0]
 80146fa:	461a      	mov	r2, r3
 80146fc:	f7f2 fb1a 	bl	8006d34 <_read>
 8014700:	1c43      	adds	r3, r0, #1
 8014702:	d102      	bne.n	801470a <_read_r+0x1e>
 8014704:	682b      	ldr	r3, [r5, #0]
 8014706:	b103      	cbz	r3, 801470a <_read_r+0x1e>
 8014708:	6023      	str	r3, [r4, #0]
 801470a:	bd38      	pop	{r3, r4, r5, pc}
 801470c:	200063c0 	.word	0x200063c0

08014710 <_init>:
 8014710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014712:	bf00      	nop
 8014714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014716:	bc08      	pop	{r3}
 8014718:	469e      	mov	lr, r3
 801471a:	4770      	bx	lr

0801471c <_fini>:
 801471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801471e:	bf00      	nop
 8014720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014722:	bc08      	pop	{r3}
 8014724:	469e      	mov	lr, r3
 8014726:	4770      	bx	lr
