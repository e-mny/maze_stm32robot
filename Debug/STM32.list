
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014688  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000109c  08014818  08014818  00024818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080158b4  080158b4  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  080158b4  080158b4  000258b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080158bc  080158bc  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080158bc  080158bc  000258bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080158c0  080158c0  000258c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080158c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          000061e4  200001e8  200001e8  000301e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200063cc  200063cc  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e658  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a29  00000000  00000000  0004e870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a20  00000000  00000000  000522a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d38  00000000  00000000  00053cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004ae9  00000000  00000000  000559f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e172  00000000  00000000  0005a4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db545  00000000  00000000  00078653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00153b98  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000084f4  00000000  00000000  00153be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014800 	.word	0x08014800

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08014800 	.word	0x08014800

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ffc:	f005 fff2 	bl	8006fe4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001000:	f000 f850 	bl	80010a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001004:	f000 fb48 	bl	8001698 <MX_GPIO_Init>
	MX_TIM8_Init();
 8001008:	f000 fa72 	bl	80014f0 <MX_TIM8_Init>
	MX_TIM1_Init();
 800100c:	f000 f8d6 	bl	80011bc <MX_TIM1_Init>
	MX_USART3_UART_Init();
 8001010:	f000 fb18 	bl	8001644 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8001014:	f000 f8a4 	bl	8001160 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001018:	f000 f96e 	bl	80012f8 <MX_TIM2_Init>
	MX_TIM4_Init();
 800101c:	f000 fa14 	bl	8001448 <MX_TIM4_Init>
	MX_TIM3_Init();
 8001020:	f000 f9be 	bl	80013a0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 8001024:	f005 face 	bl	80065c4 <OLED_Init>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001028:	f00c f94c 	bl	800d2c4 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <main+0x7c>)
 800102e:	2100      	movs	r1, #0
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <main+0x80>)
 8001032:	f00c f991 	bl	800d358 <osThreadNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a10      	ldr	r2, [pc, #64]	; (800107c <main+0x84>)
 800103a:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of OLEDTask */
	OLEDTaskHandle = osThreadNew(oled_show, NULL, &OLEDTask_attributes);
 800103c:	4a10      	ldr	r2, [pc, #64]	; (8001080 <main+0x88>)
 800103e:	2100      	movs	r1, #0
 8001040:	4810      	ldr	r0, [pc, #64]	; (8001084 <main+0x8c>)
 8001042:	f00c f989 	bl	800d358 <osThreadNew>
 8001046:	4603      	mov	r3, r0
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <main+0x90>)
 800104a:	6013      	str	r3, [r2, #0]

	/* creation of GyroRead */
	GyroReadHandle = osThreadNew(gyro_read, NULL, &GyroRead_attributes);
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <main+0x94>)
 800104e:	2100      	movs	r1, #0
 8001050:	480f      	ldr	r0, [pc, #60]	; (8001090 <main+0x98>)
 8001052:	f00c f981 	bl	800d358 <osThreadNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <main+0x9c>)
 800105a:	6013      	str	r3, [r2, #0]

	/* creation of ServoMotor */
	ServoMotorHandle = osThreadNew(servoMotor, NULL, &ServoMotor_attributes);
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <main+0xa0>)
 800105e:	2100      	movs	r1, #0
 8001060:	480e      	ldr	r0, [pc, #56]	; (800109c <main+0xa4>)
 8001062:	f00c f979 	bl	800d358 <osThreadNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <main+0xa8>)
 800106a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800106c:	f00c f94e 	bl	800d30c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001070:	e7fe      	b.n	8001070 <main+0x78>
 8001072:	bf00      	nop
 8001074:	08014904 	.word	0x08014904
 8001078:	08005c55 	.word	0x08005c55
 800107c:	20000404 	.word	0x20000404
 8001080:	08014928 	.word	0x08014928
 8001084:	08006055 	.word	0x08006055
 8001088:	20000408 	.word	0x20000408
 800108c:	0801494c 	.word	0x0801494c
 8001090:	08006061 	.word	0x08006061
 8001094:	2000040c 	.word	0x2000040c
 8001098:	08014970 	.word	0x08014970
 800109c:	08006241 	.word	0x08006241
 80010a0:	20000410 	.word	0x20000410

080010a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
 80010a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2230      	movs	r2, #48	; 0x30
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f00e ff3a 	bl	800ff2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <SystemClock_Config+0xb4>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <SystemClock_Config+0xb4>)
 80010d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <SystemClock_Config+0xb4>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <SystemClock_Config+0xb8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <SystemClock_Config+0xb8>)
 80010ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <SystemClock_Config+0xb8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001100:	2302      	movs	r3, #2
 8001102:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001108:	2310      	movs	r3, #16
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f008 feff 	bl	8009f18 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x80>
		Error_Handler();
 8001120:	f005 f8a4 	bl	800626c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f009 f962 	bl	800a408 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xaa>
		Error_Handler();
 800114a:	f005 f88f 	bl	800626c <Error_Handler>
	}
}
 800114e:	bf00      	nop
 8001150:	3750      	adds	r7, #80	; 0x50
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <MX_I2C1_Init+0x54>)
 8001168:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_I2C1_Init+0x50>)
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x58>)
 800116e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_I2C1_Init+0x50>)
 800117e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001182:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_I2C1_Init+0x50>)
 800119e:	f006 fb39 	bl	8007814 <HAL_I2C_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x4c>
		Error_Handler();
 80011a8:	f005 f860 	bl	800626c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000204 	.word	0x20000204
 80011b4:	40005400 	.word	0x40005400
 80011b8:	00061a80 	.word	0x00061a80

080011bc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b096      	sub	sp, #88	; 0x58
 80011c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2220      	movs	r2, #32
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00e fe99 	bl	800ff2c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <MX_TIM1_Init+0x134>)
 80011fc:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <MX_TIM1_Init+0x138>)
 80011fe:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160;
 8001200:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001202:	22a0      	movs	r2, #160	; 0xa0
 8001204:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 800120c:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <MX_TIM1_Init+0x134>)
 800120e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001212:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <MX_TIM1_Init+0x134>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001226:	4832      	ldr	r0, [pc, #200]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001228:	f009 face 	bl	800a7c8 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8001232:	f005 f81b 	bl	800626c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800123c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001240:	4619      	mov	r1, r3
 8001242:	482b      	ldr	r0, [pc, #172]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001244:	f00a f942 	bl	800b4cc <HAL_TIM_ConfigClockSource>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x96>
		Error_Handler();
 800124e:	f005 f80d 	bl	800626c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001252:	4827      	ldr	r0, [pc, #156]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001254:	f009 fb07 	bl	800a866 <HAL_TIM_PWM_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0xa6>
		Error_Handler();
 800125e:	f005 f805 	bl	800626c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800126a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800126e:	4619      	mov	r1, r3
 8001270:	481f      	ldr	r0, [pc, #124]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001272:	f00a fe99 	bl	800bfa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 800127c:	f004 fff6 	bl	800626c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001280:	2360      	movs	r3, #96	; 0x60
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	220c      	movs	r2, #12
 800129e:	4619      	mov	r1, r3
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012a2:	f00a f851 	bl	800b348 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 80012ac:	f004 ffde 	bl	800626c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012d4:	f00a fee4 	bl	800c0a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM1_Init+0x126>
			!= HAL_OK) {
		Error_Handler();
 80012de:	f004 ffc5 	bl	800626c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80012e2:	4803      	ldr	r0, [pc, #12]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012e4:	f005 fcb0 	bl	8006c48 <HAL_TIM_MspPostInit>

}
 80012e8:	bf00      	nop
 80012ea:	3758      	adds	r7, #88	; 0x58
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000258 	.word	0x20000258
 80012f4:	40010000 	.word	0x40010000

080012f8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	; 0x30
 80012fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	2224      	movs	r2, #36	; 0x24
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f00e fe10 	bl	800ff2c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_TIM2_Init+0xa4>)
 8001316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_TIM2_Init+0xa4>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_TIM2_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_TIM2_Init+0xa4>)
 800132a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM2_Init+0xa4>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_TIM2_Init+0xa4>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800133c:	2301      	movs	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001344:	2301      	movs	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001354:	2301      	movs	r3, #1
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_TIM2_Init+0xa4>)
 8001368:	f009 fd16 	bl	800ad98 <HAL_TIM_Encoder_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0x7e>
		Error_Handler();
 8001372:	f004 ff7b 	bl	800626c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_TIM2_Init+0xa4>)
 8001384:	f00a fe10 	bl	800bfa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800138e:	f004 ff6d 	bl	800626c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3730      	adds	r7, #48	; 0x30
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200002a0 	.word	0x200002a0

080013a0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013be:	4a21      	ldr	r2, [pc, #132]	; (8001444 <MX_TIM3_Init+0xa4>)
 80013c0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013c4:	2247      	movs	r2, #71	; 0x47
 80013c6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0xffff - 1;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013d4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 80013e2:	4817      	ldr	r0, [pc, #92]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013e4:	f009 fb60 	bl	800aaa8 <HAL_TIM_IC_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM3_Init+0x52>
		Error_Handler();
 80013ee:	f004 ff3d 	bl	800626c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4619      	mov	r1, r3
 8001400:	480f      	ldr	r0, [pc, #60]	; (8001440 <MX_TIM3_Init+0xa0>)
 8001402:	f00a fdd1 	bl	800bfa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM3_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 800140c:	f004 ff2e 	bl	800626c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_TIM3_Init+0xa0>)
 8001428:	f009 fef2 	bl	800b210 <HAL_TIM_IC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0x96>
		Error_Handler();
 8001432:	f004 ff1b 	bl	800626c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200002e8 	.word	0x200002e8
 8001444:	40000400 	.word	0x40000400

08001448 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2224      	movs	r2, #36	; 0x24
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f00e fd68 	bl	800ff2c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001466:	4a21      	ldr	r2, [pc, #132]	; (80014ec <MX_TIM4_Init+0xa4>)
 8001468:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <MX_TIM4_Init+0xa0>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800148a:	2301      	movs	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014a2:	2301      	movs	r3, #1
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	4619      	mov	r1, r3
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <MX_TIM4_Init+0xa0>)
 80014b6:	f009 fc6f 	bl	800ad98 <HAL_TIM_Encoder_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM4_Init+0x7c>
		Error_Handler();
 80014c0:	f004 fed4 	bl	800626c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_TIM4_Init+0xa0>)
 80014d2:	f00a fd69 	bl	800bfa8 <HAL_TIMEx_MasterConfigSynchronization>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM4_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80014dc:	f004 fec6 	bl	800626c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	3730      	adds	r7, #48	; 0x30
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000330 	.word	0x20000330
 80014ec:	40000800 	.word	0x40000800

080014f0 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b096      	sub	sp, #88	; 0x58
 80014f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2220      	movs	r2, #32
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f00e fcff 	bl	800ff2c <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800152e:	4b43      	ldr	r3, [pc, #268]	; (800163c <MX_TIM8_Init+0x14c>)
 8001530:	4a43      	ldr	r2, [pc, #268]	; (8001640 <MX_TIM8_Init+0x150>)
 8001532:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001534:	4b41      	ldr	r3, [pc, #260]	; (800163c <MX_TIM8_Init+0x14c>)
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b40      	ldr	r3, [pc, #256]	; (800163c <MX_TIM8_Init+0x14c>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7199;
 8001540:	4b3e      	ldr	r3, [pc, #248]	; (800163c <MX_TIM8_Init+0x14c>)
 8001542:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001546:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001548:	4b3c      	ldr	r3, [pc, #240]	; (800163c <MX_TIM8_Init+0x14c>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <MX_TIM8_Init+0x14c>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001554:	4b39      	ldr	r3, [pc, #228]	; (800163c <MX_TIM8_Init+0x14c>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 800155a:	4838      	ldr	r0, [pc, #224]	; (800163c <MX_TIM8_Init+0x14c>)
 800155c:	f009 f934 	bl	800a7c8 <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM8_Init+0x7a>
		Error_Handler();
 8001566:	f004 fe81 	bl	800626c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8001570:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001574:	4619      	mov	r1, r3
 8001576:	4831      	ldr	r0, [pc, #196]	; (800163c <MX_TIM8_Init+0x14c>)
 8001578:	f009 ffa8 	bl	800b4cc <HAL_TIM_ConfigClockSource>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM8_Init+0x96>
		Error_Handler();
 8001582:	f004 fe73 	bl	800626c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001586:	482d      	ldr	r0, [pc, #180]	; (800163c <MX_TIM8_Init+0x14c>)
 8001588:	f009 f96d 	bl	800a866 <HAL_TIM_PWM_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM8_Init+0xa6>
		Error_Handler();
 8001592:	f004 fe6b 	bl	800626c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800159e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015a2:	4619      	mov	r1, r3
 80015a4:	4825      	ldr	r0, [pc, #148]	; (800163c <MX_TIM8_Init+0x14c>)
 80015a6:	f00a fcff 	bl	800bfa8 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM8_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80015b0:	f004 fe5c 	bl	800626c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b4:	2360      	movs	r3, #96	; 0x60
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4818      	ldr	r0, [pc, #96]	; (800163c <MX_TIM8_Init+0x14c>)
 80015da:	f009 feb5 	bl	800b348 <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM8_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 80015e4:	f004 fe42 	bl	800626c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	2208      	movs	r2, #8
 80015ee:	4619      	mov	r1, r3
 80015f0:	4812      	ldr	r0, [pc, #72]	; (800163c <MX_TIM8_Init+0x14c>)
 80015f2:	f009 fea9 	bl	800b348 <HAL_TIM_PWM_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM8_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 80015fc:	f004 fe36 	bl	800626c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001618:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <MX_TIM8_Init+0x14c>)
 8001624:	f00a fd3c 	bl	800c0a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM8_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 800162e:	f004 fe1d 	bl	800626c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	3758      	adds	r7, #88	; 0x58
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000378 	.word	0x20000378
 8001640:	40010400 	.word	0x40010400

08001644 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_USART3_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800167c:	f00a fd76 	bl	800c16c <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001686:	f004 fdf1 	bl	800626c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200003c0 	.word	0x200003c0
 8001694:	40004800 	.word	0x40004800

08001698 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b3a      	ldr	r3, [pc, #232]	; (800179c <MX_GPIO_Init+0x104>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a39      	ldr	r2, [pc, #228]	; (800179c <MX_GPIO_Init+0x104>)
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <MX_GPIO_Init+0x104>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b33      	ldr	r3, [pc, #204]	; (800179c <MX_GPIO_Init+0x104>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a32      	ldr	r2, [pc, #200]	; (800179c <MX_GPIO_Init+0x104>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b30      	ldr	r3, [pc, #192]	; (800179c <MX_GPIO_Init+0x104>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <MX_GPIO_Init+0x104>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a2b      	ldr	r2, [pc, #172]	; (800179c <MX_GPIO_Init+0x104>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <MX_GPIO_Init+0x104>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <MX_GPIO_Init+0x104>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a24      	ldr	r2, [pc, #144]	; (800179c <MX_GPIO_Init+0x104>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <MX_GPIO_Init+0x104>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800171e:	2200      	movs	r2, #0
 8001720:	f44f 51bf 	mov.w	r1, #6112	; 0x17e0
 8001724:	481e      	ldr	r0, [pc, #120]	; (80017a0 <MX_GPIO_Init+0x108>)
 8001726:	f006 f841 	bl	80077ac <HAL_GPIO_WritePin>
			OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin
					| UltraSensor_Trigger_Pin | LED3_Pin | CIN1_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	210c      	movs	r1, #12
 800172e:	481d      	ldr	r0, [pc, #116]	; (80017a4 <MX_GPIO_Init+0x10c>)
 8001730:	f006 f83c 	bl	80077ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2120      	movs	r1, #32
 8001738:	481b      	ldr	r0, [pc, #108]	; (80017a8 <MX_GPIO_Init+0x110>)
 800173a:	f006 f837 	bl	80077ac <HAL_GPIO_WritePin>

	/*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
	 UltraSensor_Trigger_Pin LED3_Pin CIN1_Pin */
	GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin
 800173e:	f44f 53bf 	mov.w	r3, #6112	; 0x17e0
 8001742:	617b      	str	r3, [r7, #20]
			| OLED_DC_Pin | UltraSensor_Trigger_Pin | LED3_Pin | CIN1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4812      	ldr	r0, [pc, #72]	; (80017a0 <MX_GPIO_Init+0x108>)
 8001758:	f005 fe8c 	bl	8007474 <HAL_GPIO_Init>

	/*Configure GPIO pins : AIN2_Pin AIN1_Pin */
	GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin;
 800175c:	230c      	movs	r3, #12
 800175e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001768:	2302      	movs	r3, #2
 800176a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	480c      	ldr	r0, [pc, #48]	; (80017a4 <MX_GPIO_Init+0x10c>)
 8001774:	f005 fe7e 	bl	8007474 <HAL_GPIO_Init>

	/*Configure GPIO pin : CIN2_Pin */
	GPIO_InitStruct.Pin = CIN2_Pin;
 8001778:	2320      	movs	r3, #32
 800177a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CIN2_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_GPIO_Init+0x110>)
 8001790:	f005 fe70 	bl	8007474 <HAL_GPIO_Init>

}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40020800 	.word	0x40020800

080017ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// For own reference, this function seems to be called after
// interrupt from the HAL_UART_Receive_IT function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b08b      	sub	sp, #44	; 0x2c
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	6078      	str	r0, [r7, #4]
	//Prevent unused argument(s) compilation warning
	UNUSED(huart);
	static i = 0; //static means it doesn't get erase after every loop

	if (aRxBuffer[0] == 'n') {
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b6e      	cmp	r3, #110	; 0x6e
 80017ba:	d106      	bne.n	80017ca <HAL_UART_RxCpltCallback+0x1e>
		i = 0;
 80017bc:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
		newCmdReceived = 1;
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_UART_RxCpltCallback+0xb0>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
 80017c8:	e01e      	b.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
	} else if (i == 0) {
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_UART_RxCpltCallback+0x3a>
		cmd = aRxBuffer[0];
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_UART_RxCpltCallback+0xb4>)
 80017d8:	701a      	strb	r2, [r3, #0]
		i++;
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	e010      	b.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
	} else if (i > 0) {
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	dd0c      	ble.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
		data = data * 10 + (aRxBuffer[0] - '0');
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4413      	add	r3, r2
 8001802:	3b30      	subs	r3, #48	; 0x30
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 8001806:	6013      	str	r3, [r2, #0]
//		data = aRxBuffer[0];
	}

	uint8_t message1[20];
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 1);
 8001808:	2201      	movs	r2, #1
 800180a:	4912      	ldr	r1, [pc, #72]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 800180c:	4816      	ldr	r0, [pc, #88]	; (8001868 <HAL_UART_RxCpltCallback+0xbc>)
 800180e:	f00a fd8c 	bl	800c32a <HAL_UART_Receive_IT>
//	HAL_UART_Transmit(&huart3, (uint8_t *) aRxBuffer, 1, 0xFFFF);

	sprintf(message1, "%c %d %c %d\0", aRxBuffer[0], newCmdReceived, cmd, data);
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_UART_RxCpltCallback+0xb0>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461c      	mov	r4, r3
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_UART_RxCpltCallback+0xb4>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f107 000c 	add.w	r0, r7, #12
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	9200      	str	r2, [sp, #0]
 8001830:	4623      	mov	r3, r4
 8001832:	460a      	mov	r2, r1
 8001834:	490d      	ldr	r1, [pc, #52]	; (800186c <HAL_UART_RxCpltCallback+0xc0>)
 8001836:	f00f fa01 	bl	8010c3c <siprintf>
	OLED_ShowString(10, 40, message1);
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	461a      	mov	r2, r3
 8001840:	2128      	movs	r1, #40	; 0x28
 8001842:	200a      	movs	r0, #10
 8001844:	f004 fe8c 	bl	8006560 <OLED_ShowString>
	OLED_Refresh_Gram(); //Refresh Ram
 8001848:	f004 fd16 	bl	8006278 <OLED_Refresh_Gram>
}
 800184c:	bf00      	nop
 800184e:	3724      	adds	r7, #36	; 0x24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}
 8001854:	20000428 	.word	0x20000428
 8001858:	20000460 	.word	0x20000460
 800185c:	20000429 	.word	0x20000429
 8001860:	2000042a 	.word	0x2000042a
 8001864:	2000042c 	.word	0x2000042c
 8001868:	200003c0 	.word	0x200003c0
 800186c:	08014848 	.word	0x08014848

08001870 <delay>:

//reference: https://controllerstech.com/hcsr04-ultrasonic-sensor-and-stm32/
void delay(uint16_t time) {
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <delay+0x30>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time)
 8001882:	bf00      	nop
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <delay+0x30>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	429a      	cmp	r2, r3
 800188e:	d3f9      	bcc.n	8001884 <delay+0x14>
		;

}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	200002e8 	.word	0x200002e8

080018a4 <HCSR04_Read>:
void HCSR04_Read(void) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UltraSensor_Trigger_GPIO_Port, UltraSensor_Trigger_Pin,
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ae:	480b      	ldr	r0, [pc, #44]	; (80018dc <HCSR04_Read+0x38>)
 80018b0:	f005 ff7c 	bl	80077ac <HAL_GPIO_WritePin>
			GPIO_PIN_SET);  // pull the TRIG pin HIGH
	delay(10);  // wait for 10 us
 80018b4:	200a      	movs	r0, #10
 80018b6:	f7ff ffdb 	bl	8001870 <delay>
	HAL_GPIO_WritePin(UltraSensor_Trigger_GPIO_Port, UltraSensor_Trigger_Pin,
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c0:	4806      	ldr	r0, [pc, #24]	; (80018dc <HCSR04_Read+0x38>)
 80018c2:	f005 ff73 	bl	80077ac <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);  // pull the TRIG pin low

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HCSR04_Read+0x3c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <HCSR04_Read+0x3c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0202 	orr.w	r2, r2, #2
 80018d4:	60da      	str	r2, [r3, #12]
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	200002e8 	.word	0x200002e8
 80018e4:	00000000 	.word	0x00000000

080018e8 <HAL_TIM_IC_CaptureCallback>:

//Called whenever falling or rising edge is captured
// Let's write the callback function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7f1b      	ldrb	r3, [r3, #28]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	f040 8082 	bne.w	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
			{
		if (Is_First_Captured == 0) // if the first value is not captured
 80018fa:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11a      	bne.n	8001938 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001902:	2100      	movs	r1, #0
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f009 fea9 	bl	800b65c <HAL_TIM_ReadCapturedValue>
 800190a:	4603      	mov	r3, r0
 800190c:	4a41      	ldr	r2, [pc, #260]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800190e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001910:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6a1a      	ldr	r2, [r3, #32]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 020a 	bic.w	r2, r2, #10
 8001924:	621a      	str	r2, [r3, #32]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6a1a      	ldr	r2, [r3, #32]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0202 	orr.w	r2, r2, #2
 8001934:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8001936:	e062      	b.n	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured == 1)   // if the first is already captured
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d15e      	bne.n	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001940:	2100      	movs	r1, #0
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f009 fe8a 	bl	800b65c <HAL_TIM_ReadCapturedValue>
 8001948:	4603      	mov	r3, r0
 800194a:	4a33      	ldr	r2, [pc, #204]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 800194c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8001956:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d907      	bls.n	8001972 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 8001962:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	4a2b      	ldr	r2, [pc, #172]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e00f      	b.n	8001992 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 8001972:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d909      	bls.n	8001992 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800198c:	33ff      	adds	r3, #255	; 0xff
 800198e:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001990:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.034 / 2;
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdb4 	bl	8000504 <__aeabi_ui2d>
 800199c:	a31a      	add	r3, pc, #104	; (adr r3, 8001a08 <HAL_TIM_IC_CaptureCallback+0x120>)
 800199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a2:	f7fe fe29 	bl	80005f8 <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b6:	f7fe ff49 	bl	800084c <__aeabi_ddiv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f911 	bl	8000be8 <__aeabi_d2f>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x138>)
 80019ca:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6a1a      	ldr	r2, [r3, #32]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 020a 	bic.w	r2, r2, #10
 80019e0:	621a      	str	r2, [r3, #32]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6a12      	ldr	r2, [r2, #32]
 80019ec:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0202 	bic.w	r2, r2, #2
 80019fc:	60da      	str	r2, [r3, #12]
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	b020c49c 	.word	0xb020c49c
 8001a0c:	3fa16872 	.word	0x3fa16872
 8001a10:	20000444 	.word	0x20000444
 8001a14:	20000438 	.word	0x20000438
 8001a18:	2000043c 	.word	0x2000043c
 8001a1c:	20000440 	.word	0x20000440
 8001a20:	20000448 	.word	0x20000448
 8001a24:	20000258 	.word	0x20000258

08001a28 <task2A2L>:
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
}

// 2nd obstacle after turning left
void task2A2L(uint32_t data) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b0a0      	sub	sp, #128	; 0x80
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	uint32_t offset_show[30];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001a30:	2100      	movs	r1, #0
 8001a32:	48aa      	ldr	r0, [pc, #680]	; (8001cdc <task2A2L+0x2b4>)
 8001a34:	f008 ff70 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001a38:	2108      	movs	r1, #8
 8001a3a:	48a8      	ldr	r0, [pc, #672]	; (8001cdc <task2A2L+0x2b4>)
 8001a3c:	f008 ff6c 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001a40:	210c      	movs	r1, #12
 8001a42:	48a7      	ldr	r0, [pc, #668]	; (8001ce0 <task2A2L+0x2b8>)
 8001a44:	f008 ff68 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2108      	movs	r1, #8
 8001a4c:	48a5      	ldr	r0, [pc, #660]	; (8001ce4 <task2A2L+0x2bc>)
 8001a4e:	f005 fead 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2104      	movs	r1, #4
 8001a56:	48a3      	ldr	r0, [pc, #652]	; (8001ce4 <task2A2L+0x2bc>)
 8001a58:	f005 fea8 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a62:	48a1      	ldr	r0, [pc, #644]	; (8001ce8 <task2A2L+0x2c0>)
 8001a64:	f005 fea2 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	489f      	ldr	r0, [pc, #636]	; (8001cec <task2A2L+0x2c4>)
 8001a6e:	f005 fe9d 	bl	80077ac <HAL_GPIO_WritePin>
	moving = 0;
 8001a72:	4b9f      	ldr	r3, [pc, #636]	; (8001cf0 <task2A2L+0x2c8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]

	if (continueMoving) {
 8001a78:	4b9e      	ldr	r3, [pc, #632]	; (8001cf4 <task2A2L+0x2cc>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 81bf 	beq.w	8001e00 <task2A2L+0x3d8>
		//	uint8_t continueMoving;
		//if picture detected is left Yln
		if (data == 'l') {
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b6c      	cmp	r3, #108	; 0x6c
 8001a86:	f040 80d2 	bne.w	8001c2e <task2A2L+0x206>
			htim1.Instance->CCR4 = 117;
 8001a8a:	4b95      	ldr	r3, [pc, #596]	; (8001ce0 <task2A2L+0x2b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2275      	movs	r2, #117	; 0x75
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001a92:	4b92      	ldr	r3, [pc, #584]	; (8001cdc <task2A2L+0x2b4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 8001a9c:	4b8f      	ldr	r3, [pc, #572]	; (8001cdc <task2A2L+0x2b4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001aa4:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 8001aa6:	4b92      	ldr	r3, [pc, #584]	; (8001cf0 <task2A2L+0x2c8>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001aac:	e020      	b.n	8001af0 <task2A2L+0xc8>
				if ((int) totalAngle >= 60) {
 8001aae:	4b92      	ldr	r3, [pc, #584]	; (8001cf8 <task2A2L+0x2d0>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff f84e 	bl	8000b58 <__aeabi_d2iz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b3b      	cmp	r3, #59	; 0x3b
 8001ac0:	dc1b      	bgt.n	8001afa <task2A2L+0xd2>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001ac2:	4b8d      	ldr	r3, [pc, #564]	; (8001cf8 <task2A2L+0x2d0>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f7ff f844 	bl	8000b58 <__aeabi_d2iz>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	4989      	ldr	r1, [pc, #548]	; (8001cfc <task2A2L+0x2d4>)
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f00f f8af 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001ade:	f107 0308 	add.w	r3, r7, #8
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	2114      	movs	r1, #20
 8001ae6:	200a      	movs	r0, #10
 8001ae8:	f004 fd3a 	bl	8006560 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001aec:	f004 fbc4 	bl	8006278 <OLED_Refresh_Gram>
			while (moving) {
 8001af0:	4b7f      	ldr	r3, [pc, #508]	; (8001cf0 <task2A2L+0x2c8>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1da      	bne.n	8001aae <task2A2L+0x86>
 8001af8:	e000      	b.n	8001afc <task2A2L+0xd4>
					break;
 8001afa:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001afc:	4b77      	ldr	r3, [pc, #476]	; (8001cdc <task2A2L+0x2b4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2200      	movs	r2, #0
 8001b02:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8001b04:	4b75      	ldr	r3, [pc, #468]	; (8001cdc <task2A2L+0x2b4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(60, 1);
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8001d00 <task2A2L+0x2d8>
 8001b12:	f001 fee1 	bl	80038d8 <moveGyroPID>
			htim1.Instance->CCR4 = RIGHT;
 8001b16:	4b72      	ldr	r3, [pc, #456]	; (8001ce0 <task2A2L+0x2b8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	22fa      	movs	r2, #250	; 0xfa
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001b1e:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <task2A2L+0x2b4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001b28:	4b6c      	ldr	r3, [pc, #432]	; (8001cdc <task2A2L+0x2b4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b30:	63da      	str	r2, [r3, #60]	; 0x3c
			// 		continueMoving = 0;

			while (moving) {
 8001b32:	e021      	b.n	8001b78 <task2A2L+0x150>
				if ((int) totalAngle <= -85) {
 8001b34:	4b70      	ldr	r3, [pc, #448]	; (8001cf8 <task2A2L+0x2d0>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f80b 	bl	8000b58 <__aeabi_d2iz>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8001b48:	db1b      	blt.n	8001b82 <task2A2L+0x15a>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001b4a:	4b6b      	ldr	r3, [pc, #428]	; (8001cf8 <task2A2L+0x2d0>)
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	f7ff f800 	bl	8000b58 <__aeabi_d2iz>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	4967      	ldr	r1, [pc, #412]	; (8001cfc <task2A2L+0x2d4>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f00f f86b 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001b66:	f107 0308 	add.w	r3, r7, #8
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	2114      	movs	r1, #20
 8001b6e:	200a      	movs	r0, #10
 8001b70:	f004 fcf6 	bl	8006560 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001b74:	f004 fb80 	bl	8006278 <OLED_Refresh_Gram>
			while (moving) {
 8001b78:	4b5d      	ldr	r3, [pc, #372]	; (8001cf0 <task2A2L+0x2c8>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1d9      	bne.n	8001b34 <task2A2L+0x10c>
 8001b80:	e000      	b.n	8001b84 <task2A2L+0x15c>
					break;
 8001b82:	bf00      	nop
			}

			moving = 0;
 8001b84:	4b5a      	ldr	r3, [pc, #360]	; (8001cf0 <task2A2L+0x2c8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(50.0, 1);
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8001d04 <task2A2L+0x2dc>
 8001b90:	f002 fe02 	bl	8004798 <moveGyroPIDOld>
			moving = 0;
 8001b94:	4b56      	ldr	r3, [pc, #344]	; (8001cf0 <task2A2L+0x2c8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
			delay(100);
 8001b9a:	2064      	movs	r0, #100	; 0x64
 8001b9c:	f7ff fe68 	bl	8001870 <delay>
			moving = 1;
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <task2A2L+0x2c8>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = RIGHT;
 8001ba6:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <task2A2L+0x2b8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	22fa      	movs	r2, #250	; 0xfa
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001bae:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <task2A2L+0x2b4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001bb6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001bb8:	4b48      	ldr	r3, [pc, #288]	; (8001cdc <task2A2L+0x2b4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bc0:	63da      	str	r2, [r3, #60]	; 0x3c

			while (moving) {
 8001bc2:	e021      	b.n	8001c08 <task2A2L+0x1e0>
				if ((int) totalAngle <= -90) // was 95. was 90
 8001bc4:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <task2A2L+0x2d0>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7fe ffc3 	bl	8000b58 <__aeabi_d2iz>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8001bd8:	db1b      	blt.n	8001c12 <task2A2L+0x1ea>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001bda:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <task2A2L+0x2d0>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	f7fe ffb8 	bl	8000b58 <__aeabi_d2iz>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f107 0308 	add.w	r3, r7, #8
 8001bee:	4943      	ldr	r1, [pc, #268]	; (8001cfc <task2A2L+0x2d4>)
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f00f f823 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001bf6:	f107 0308 	add.w	r3, r7, #8
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2114      	movs	r1, #20
 8001bfe:	200a      	movs	r0, #10
 8001c00:	f004 fcae 	bl	8006560 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001c04:	f004 fb38 	bl	8006278 <OLED_Refresh_Gram>
			while (moving) {
 8001c08:	4b39      	ldr	r3, [pc, #228]	; (8001cf0 <task2A2L+0x2c8>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1d9      	bne.n	8001bc4 <task2A2L+0x19c>
 8001c10:	e000      	b.n	8001c14 <task2A2L+0x1ec>
					break;
 8001c12:	bf00      	nop
			}
			actualAngle = 0;
 8001c14:	493c      	ldr	r1, [pc, #240]	; (8001d08 <task2A2L+0x2e0>)
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	e9c1 2300 	strd	r2, r3, [r1]
			moving = 0;
 8001c22:	4b33      	ldr	r3, [pc, #204]	; (8001cf0 <task2A2L+0x2c8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 8001c28:	f001 fc2c 	bl	8003484 <moveUltraEndLeft>
 8001c2c:	e2aa      	b.n	8002184 <task2A2L+0x75c>

		} else {
			htim1.Instance->CCR4 = RIGHT;
 8001c2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <task2A2L+0x2b8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	22fa      	movs	r2, #250	; 0xfa
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001c36:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <task2A2L+0x2b4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001c3e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001c40:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <task2A2L+0x2b4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c48:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <task2A2L+0x2c8>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001c50:	e021      	b.n	8001c96 <task2A2L+0x26e>
				if ((int) totalAngle <= -1 * 60) {
 8001c52:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <task2A2L+0x2d0>)
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe ff7c 	bl	8000b58 <__aeabi_d2iz>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f113 0f3b 	cmn.w	r3, #59	; 0x3b
 8001c66:	db1b      	blt.n	8001ca0 <task2A2L+0x278>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001c68:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <task2A2L+0x2d0>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	f7fe ff71 	bl	8000b58 <__aeabi_d2iz>
 8001c76:	4602      	mov	r2, r0
 8001c78:	f107 0308 	add.w	r3, r7, #8
 8001c7c:	491f      	ldr	r1, [pc, #124]	; (8001cfc <task2A2L+0x2d4>)
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f00e ffdc 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2114      	movs	r1, #20
 8001c8c:	200a      	movs	r0, #10
 8001c8e:	f004 fc67 	bl	8006560 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001c92:	f004 faf1 	bl	8006278 <OLED_Refresh_Gram>
			while (moving) {
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <task2A2L+0x2c8>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1d9      	bne.n	8001c52 <task2A2L+0x22a>
 8001c9e:	e000      	b.n	8001ca2 <task2A2L+0x27a>
					break;
 8001ca0:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <task2A2L+0x2b4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <task2A2L+0x2b4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(45.0, 1);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001d0c <task2A2L+0x2e4>
 8001cb8:	f001 fe0e 	bl	80038d8 <moveGyroPID>
			htim1.Instance->CCR4 = 110;
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <task2A2L+0x2b8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	226e      	movs	r2, #110	; 0x6e
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <task2A2L+0x2b4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ccc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8001cce:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <task2A2L+0x2b4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001cd6:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving) {
 8001cd8:	e03b      	b.n	8001d52 <task2A2L+0x32a>
 8001cda:	bf00      	nop
 8001cdc:	20000378 	.word	0x20000378
 8001ce0:	20000258 	.word	0x20000258
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	20000414 	.word	0x20000414
 8001cf4:	20000416 	.word	0x20000416
 8001cf8:	20000418 	.word	0x20000418
 8001cfc:	08014858 	.word	0x08014858
 8001d00:	42700000 	.word	0x42700000
 8001d04:	42480000 	.word	0x42480000
 8001d08:	20000420 	.word	0x20000420
 8001d0c:	42340000 	.word	0x42340000
				if ((int) totalAngle >= 85) {
 8001d10:	4ba9      	ldr	r3, [pc, #676]	; (8001fb8 <task2A2L+0x590>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f7fe ff1d 	bl	8000b58 <__aeabi_d2iz>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b54      	cmp	r3, #84	; 0x54
 8001d22:	dc1b      	bgt.n	8001d5c <task2A2L+0x334>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001d24:	4ba4      	ldr	r3, [pc, #656]	; (8001fb8 <task2A2L+0x590>)
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe ff13 	bl	8000b58 <__aeabi_d2iz>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f107 0308 	add.w	r3, r7, #8
 8001d38:	49a0      	ldr	r1, [pc, #640]	; (8001fbc <task2A2L+0x594>)
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f00e ff7e 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	461a      	mov	r2, r3
 8001d46:	2114      	movs	r1, #20
 8001d48:	200a      	movs	r0, #10
 8001d4a:	f004 fc09 	bl	8006560 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001d4e:	f004 fa93 	bl	8006278 <OLED_Refresh_Gram>
			while (moving) {
 8001d52:	4b9b      	ldr	r3, [pc, #620]	; (8001fc0 <task2A2L+0x598>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1da      	bne.n	8001d10 <task2A2L+0x2e8>
 8001d5a:	e000      	b.n	8001d5e <task2A2L+0x336>
					break;
 8001d5c:	bf00      	nop
			}
			moving = 0;
 8001d5e:	4b98      	ldr	r3, [pc, #608]	; (8001fc0 <task2A2L+0x598>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(70.0, 1); // prev 23
 8001d64:	2001      	movs	r0, #1
 8001d66:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8001fc4 <task2A2L+0x59c>
 8001d6a:	f002 fd15 	bl	8004798 <moveGyroPIDOld>
			moving = 0;
 8001d6e:	4b94      	ldr	r3, [pc, #592]	; (8001fc0 <task2A2L+0x598>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = 115;
 8001d74:	4b94      	ldr	r3, [pc, #592]	; (8001fc8 <task2A2L+0x5a0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2273      	movs	r2, #115	; 0x73
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001d7c:	4b93      	ldr	r3, [pc, #588]	; (8001fcc <task2A2L+0x5a4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d84:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8001d86:	4b91      	ldr	r3, [pc, #580]	; (8001fcc <task2A2L+0x5a4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d8e:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8001d90:	2064      	movs	r0, #100	; 0x64
 8001d92:	f7ff fd6d 	bl	8001870 <delay>
			moving = 1;
 8001d96:	4b8a      	ldr	r3, [pc, #552]	; (8001fc0 <task2A2L+0x598>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001d9c:	e020      	b.n	8001de0 <task2A2L+0x3b8>
				if ((int) totalAngle >= 92) {
 8001d9e:	4b86      	ldr	r3, [pc, #536]	; (8001fb8 <task2A2L+0x590>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f7fe fed6 	bl	8000b58 <__aeabi_d2iz>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b5b      	cmp	r3, #91	; 0x5b
 8001db0:	dc1b      	bgt.n	8001dea <task2A2L+0x3c2>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001db2:	4b81      	ldr	r3, [pc, #516]	; (8001fb8 <task2A2L+0x590>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe fecc 	bl	8000b58 <__aeabi_d2iz>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	497d      	ldr	r1, [pc, #500]	; (8001fbc <task2A2L+0x594>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00e ff37 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001dce:	f107 0308 	add.w	r3, r7, #8
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2114      	movs	r1, #20
 8001dd6:	200a      	movs	r0, #10
 8001dd8:	f004 fbc2 	bl	8006560 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001ddc:	f004 fa4c 	bl	8006278 <OLED_Refresh_Gram>
			while (moving) {
 8001de0:	4b77      	ldr	r3, [pc, #476]	; (8001fc0 <task2A2L+0x598>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1da      	bne.n	8001d9e <task2A2L+0x376>
 8001de8:	e000      	b.n	8001dec <task2A2L+0x3c4>
					break;
 8001dea:	bf00      	nop
			}
			actualAngle = 0;
 8001dec:	4978      	ldr	r1, [pc, #480]	; (8001fd0 <task2A2L+0x5a8>)
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 8001dfa:	f001 f933 	bl	8003064 <moveUltraEnd>
 8001dfe:	e1c1      	b.n	8002184 <task2A2L+0x75c>
		}
	} else {
		// meaning continueMoving is 0, indicating that the car
		// stopped because ultrasonic distance hit before target angle hit
		//if picture detected is left Yln
		if (data == 'l') {
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b6c      	cmp	r3, #108	; 0x6c
 8001e04:	f040 80ea 	bne.w	8001fdc <task2A2L+0x5b4>
			htim1.Instance->CCR4 = 115;
 8001e08:	4b6f      	ldr	r3, [pc, #444]	; (8001fc8 <task2A2L+0x5a0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2273      	movs	r2, #115	; 0x73
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001e10:	4b6e      	ldr	r3, [pc, #440]	; (8001fcc <task2A2L+0x5a4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e18:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8001e1a:	4b6c      	ldr	r3, [pc, #432]	; (8001fcc <task2A2L+0x5a4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e22:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 8001e24:	4b66      	ldr	r3, [pc, #408]	; (8001fc0 <task2A2L+0x598>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001e2a:	e020      	b.n	8001e6e <task2A2L+0x446>
				if ((int) actualAngle >= 40) {
 8001e2c:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <task2A2L+0x5a8>)
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe fe8f 	bl	8000b58 <__aeabi_d2iz>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b27      	cmp	r3, #39	; 0x27
 8001e3e:	dc1b      	bgt.n	8001e78 <task2A2L+0x450>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001e40:	4b5d      	ldr	r3, [pc, #372]	; (8001fb8 <task2A2L+0x590>)
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe fe85 	bl	8000b58 <__aeabi_d2iz>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	f107 0308 	add.w	r3, r7, #8
 8001e54:	4959      	ldr	r1, [pc, #356]	; (8001fbc <task2A2L+0x594>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	f00e fef0 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001e5c:	f107 0308 	add.w	r3, r7, #8
 8001e60:	461a      	mov	r2, r3
 8001e62:	2114      	movs	r1, #20
 8001e64:	200a      	movs	r0, #10
 8001e66:	f004 fb7b 	bl	8006560 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001e6a:	f004 fa05 	bl	8006278 <OLED_Refresh_Gram>
			while (moving) {
 8001e6e:	4b54      	ldr	r3, [pc, #336]	; (8001fc0 <task2A2L+0x598>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1da      	bne.n	8001e2c <task2A2L+0x404>
 8001e76:	e000      	b.n	8001e7a <task2A2L+0x452>
					break;
 8001e78:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001e7a:	4b54      	ldr	r3, [pc, #336]	; (8001fcc <task2A2L+0x5a4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8001e82:	4b52      	ldr	r3, [pc, #328]	; (8001fcc <task2A2L+0x5a4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2200      	movs	r2, #0
 8001e88:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(73.0, 1);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001fd4 <task2A2L+0x5ac>
 8001e90:	f001 fd22 	bl	80038d8 <moveGyroPID>
			htim1.Instance->CCR4 = RIGHT;
 8001e94:	4b4c      	ldr	r3, [pc, #304]	; (8001fc8 <task2A2L+0x5a0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	22fa      	movs	r2, #250	; 0xfa
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001e9c:	4b4b      	ldr	r3, [pc, #300]	; (8001fcc <task2A2L+0x5a4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ea4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001ea6:	4b49      	ldr	r3, [pc, #292]	; (8001fcc <task2A2L+0x5a4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eae:	63da      	str	r2, [r3, #60]	; 0x3c
			// 		continueMoving = 0;

			while (moving) {
 8001eb0:	e021      	b.n	8001ef6 <task2A2L+0x4ce>
				if ((int) actualAngle <= -1 * 90) {
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <task2A2L+0x5a8>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f7fe fe4c 	bl	8000b58 <__aeabi_d2iz>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8001ec6:	db1b      	blt.n	8001f00 <task2A2L+0x4d8>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001ec8:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <task2A2L+0x590>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7fe fe41 	bl	8000b58 <__aeabi_d2iz>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	4937      	ldr	r1, [pc, #220]	; (8001fbc <task2A2L+0x594>)
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f00e feac 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001ee4:	f107 0308 	add.w	r3, r7, #8
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2114      	movs	r1, #20
 8001eec:	200a      	movs	r0, #10
 8001eee:	f004 fb37 	bl	8006560 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001ef2:	f004 f9c1 	bl	8006278 <OLED_Refresh_Gram>
			while (moving) {
 8001ef6:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <task2A2L+0x598>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1d9      	bne.n	8001eb2 <task2A2L+0x48a>
 8001efe:	e000      	b.n	8001f02 <task2A2L+0x4da>
					break;
 8001f00:	bf00      	nop
			}

			moving = 0;
 8001f02:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <task2A2L+0x598>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(40.0, 1);
 8001f08:	2001      	movs	r0, #1
 8001f0a:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8001fd8 <task2A2L+0x5b0>
 8001f0e:	f002 fc43 	bl	8004798 <moveGyroPIDOld>
			moving = 0;
 8001f12:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <task2A2L+0x598>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = RIGHT;
 8001f18:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <task2A2L+0x5a0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	22fa      	movs	r2, #250	; 0xfa
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001f20:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <task2A2L+0x5a4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <task2A2L+0x5a4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f32:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8001f34:	2064      	movs	r0, #100	; 0x64
 8001f36:	f7ff fc9b 	bl	8001870 <delay>
			moving = 0;
 8001f3a:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <task2A2L+0x598>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
			osDelay(1);
 8001f40:	2001      	movs	r0, #1
 8001f42:	f00b fa9c 	bl	800d47e <osDelay>
			moving = 1;
 8001f46:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <task2A2L+0x598>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001f4c:	e021      	b.n	8001f92 <task2A2L+0x56a>
				if ((int) totalAngle <= -1 * 90) // note: i changed to actualAngle to try, original was totalAngle = -100
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <task2A2L+0x590>)
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f7fe fdfe 	bl	8000b58 <__aeabi_d2iz>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8001f62:	db1b      	blt.n	8001f9c <task2A2L+0x574>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <task2A2L+0x590>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7fe fdf3 	bl	8000b58 <__aeabi_d2iz>
 8001f72:	4602      	mov	r2, r0
 8001f74:	f107 0308 	add.w	r3, r7, #8
 8001f78:	4910      	ldr	r1, [pc, #64]	; (8001fbc <task2A2L+0x594>)
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f00e fe5e 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	461a      	mov	r2, r3
 8001f86:	2114      	movs	r1, #20
 8001f88:	200a      	movs	r0, #10
 8001f8a:	f004 fae9 	bl	8006560 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001f8e:	f004 f973 	bl	8006278 <OLED_Refresh_Gram>
			while (moving) {
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <task2A2L+0x598>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1d9      	bne.n	8001f4e <task2A2L+0x526>
 8001f9a:	e000      	b.n	8001f9e <task2A2L+0x576>
					break;
 8001f9c:	bf00      	nop
			}
			actualAngle = 0;
 8001f9e:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <task2A2L+0x5a8>)
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	e9c1 2300 	strd	r2, r3, [r1]
			moving = 0;
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <task2A2L+0x598>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 8001fb2:	f001 fa67 	bl	8003484 <moveUltraEndLeft>
 8001fb6:	e0e5      	b.n	8002184 <task2A2L+0x75c>
 8001fb8:	20000418 	.word	0x20000418
 8001fbc:	08014858 	.word	0x08014858
 8001fc0:	20000414 	.word	0x20000414
 8001fc4:	428c0000 	.word	0x428c0000
 8001fc8:	20000258 	.word	0x20000258
 8001fcc:	20000378 	.word	0x20000378
 8001fd0:	20000420 	.word	0x20000420
 8001fd4:	42920000 	.word	0x42920000
 8001fd8:	42200000 	.word	0x42200000

		} else if (data == 'r') {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b72      	cmp	r3, #114	; 0x72
 8001fe0:	f040 80d0 	bne.w	8002184 <task2A2L+0x75c>
			htim1.Instance->CCR4 = RIGHT;
 8001fe4:	4b7a      	ldr	r3, [pc, #488]	; (80021d0 <task2A2L+0x7a8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	22fa      	movs	r2, #250	; 0xfa
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001fec:	4b79      	ldr	r3, [pc, #484]	; (80021d4 <task2A2L+0x7ac>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ff4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001ff6:	4b77      	ldr	r3, [pc, #476]	; (80021d4 <task2A2L+0x7ac>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ffe:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 8002000:	4b75      	ldr	r3, [pc, #468]	; (80021d8 <task2A2L+0x7b0>)
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8002006:	e021      	b.n	800204c <task2A2L+0x624>
				if ((int) totalAngle <= -1 * 60) // was 65
 8002008:	4b74      	ldr	r3, [pc, #464]	; (80021dc <task2A2L+0x7b4>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	f7fe fda1 	bl	8000b58 <__aeabi_d2iz>
 8002016:	4603      	mov	r3, r0
 8002018:	f113 0f3b 	cmn.w	r3, #59	; 0x3b
 800201c:	db1b      	blt.n	8002056 <task2A2L+0x62e>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 800201e:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <task2A2L+0x7b4>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fd96 	bl	8000b58 <__aeabi_d2iz>
 800202c:	4602      	mov	r2, r0
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	496b      	ldr	r1, [pc, #428]	; (80021e0 <task2A2L+0x7b8>)
 8002034:	4618      	mov	r0, r3
 8002036:	f00e fe01 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 800203a:	f107 0308 	add.w	r3, r7, #8
 800203e:	461a      	mov	r2, r3
 8002040:	2114      	movs	r1, #20
 8002042:	200a      	movs	r0, #10
 8002044:	f004 fa8c 	bl	8006560 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002048:	f004 f916 	bl	8006278 <OLED_Refresh_Gram>
			while (moving) {
 800204c:	4b62      	ldr	r3, [pc, #392]	; (80021d8 <task2A2L+0x7b0>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1d9      	bne.n	8002008 <task2A2L+0x5e0>
 8002054:	e000      	b.n	8002058 <task2A2L+0x630>
					break;
 8002056:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002058:	4b5e      	ldr	r3, [pc, #376]	; (80021d4 <task2A2L+0x7ac>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002060:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <task2A2L+0x7ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 0;
 8002068:	4b5b      	ldr	r3, [pc, #364]	; (80021d8 <task2A2L+0x7b0>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(45.0, 1); // was 55
 800206e:	2001      	movs	r0, #1
 8002070:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 80021e4 <task2A2L+0x7bc>
 8002074:	f002 fb90 	bl	8004798 <moveGyroPIDOld>
			htim1.Instance->CCR4 = 110;
 8002078:	4b55      	ldr	r3, [pc, #340]	; (80021d0 <task2A2L+0x7a8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	226e      	movs	r2, #110	; 0x6e
 800207e:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8002080:	4b54      	ldr	r3, [pc, #336]	; (80021d4 <task2A2L+0x7ac>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 800208a:	4b52      	ldr	r3, [pc, #328]	; (80021d4 <task2A2L+0x7ac>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002092:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving) {
 8002094:	e020      	b.n	80020d8 <task2A2L+0x6b0>
				if ((int) actualAngle >= 83) {
 8002096:	4b54      	ldr	r3, [pc, #336]	; (80021e8 <task2A2L+0x7c0>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f7fe fd5a 	bl	8000b58 <__aeabi_d2iz>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b52      	cmp	r3, #82	; 0x52
 80020a8:	dc1b      	bgt.n	80020e2 <task2A2L+0x6ba>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 80020aa:	4b4c      	ldr	r3, [pc, #304]	; (80021dc <task2A2L+0x7b4>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7fe fd50 	bl	8000b58 <__aeabi_d2iz>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f107 0308 	add.w	r3, r7, #8
 80020be:	4948      	ldr	r1, [pc, #288]	; (80021e0 <task2A2L+0x7b8>)
 80020c0:	4618      	mov	r0, r3
 80020c2:	f00e fdbb 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	461a      	mov	r2, r3
 80020cc:	2114      	movs	r1, #20
 80020ce:	200a      	movs	r0, #10
 80020d0:	f004 fa46 	bl	8006560 <OLED_ShowString>
				OLED_Refresh_Gram();
 80020d4:	f004 f8d0 	bl	8006278 <OLED_Refresh_Gram>
			while (moving) {
 80020d8:	4b3f      	ldr	r3, [pc, #252]	; (80021d8 <task2A2L+0x7b0>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1da      	bne.n	8002096 <task2A2L+0x66e>
 80020e0:	e000      	b.n	80020e4 <task2A2L+0x6bc>
					break;
 80020e2:	bf00      	nop
			}
			moving = 0;
 80020e4:	4b3c      	ldr	r3, [pc, #240]	; (80021d8 <task2A2L+0x7b0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(60.0, 1); // prev 23
 80020ea:	2001      	movs	r0, #1
 80020ec:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80021ec <task2A2L+0x7c4>
 80020f0:	f002 fb52 	bl	8004798 <moveGyroPIDOld>
			moving = 0;
 80020f4:	4b38      	ldr	r3, [pc, #224]	; (80021d8 <task2A2L+0x7b0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = 115;
 80020fa:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <task2A2L+0x7a8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2273      	movs	r2, #115	; 0x73
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8002102:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <task2A2L+0x7ac>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800210a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 800210c:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <task2A2L+0x7ac>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002114:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100); // delay because gyro needs time to reset
 8002116:	2064      	movs	r0, #100	; 0x64
 8002118:	f7ff fbaa 	bl	8001870 <delay>
			moving = 1;
 800211c:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <task2A2L+0x7b0>)
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8002122:	e020      	b.n	8002166 <task2A2L+0x73e>
				if ((int) totalAngle >= 105) {
 8002124:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <task2A2L+0x7b4>)
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	f7fe fd13 	bl	8000b58 <__aeabi_d2iz>
 8002132:	4603      	mov	r3, r0
 8002134:	2b68      	cmp	r3, #104	; 0x68
 8002136:	dc1b      	bgt.n	8002170 <task2A2L+0x748>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002138:	4b28      	ldr	r3, [pc, #160]	; (80021dc <task2A2L+0x7b4>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fd09 	bl	8000b58 <__aeabi_d2iz>
 8002146:	4602      	mov	r2, r0
 8002148:	f107 0308 	add.w	r3, r7, #8
 800214c:	4924      	ldr	r1, [pc, #144]	; (80021e0 <task2A2L+0x7b8>)
 800214e:	4618      	mov	r0, r3
 8002150:	f00e fd74 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8002154:	f107 0308 	add.w	r3, r7, #8
 8002158:	461a      	mov	r2, r3
 800215a:	2114      	movs	r1, #20
 800215c:	200a      	movs	r0, #10
 800215e:	f004 f9ff 	bl	8006560 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002162:	f004 f889 	bl	8006278 <OLED_Refresh_Gram>
			while (moving) {
 8002166:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <task2A2L+0x7b0>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1da      	bne.n	8002124 <task2A2L+0x6fc>
 800216e:	e000      	b.n	8002172 <task2A2L+0x74a>
					break;
 8002170:	bf00      	nop
			}
			actualAngle = 0;
 8002172:	491d      	ldr	r1, [pc, #116]	; (80021e8 <task2A2L+0x7c0>)
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 8002180:	f000 ff70 	bl	8003064 <moveUltraEnd>
		}
	}

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <task2A2L+0x7ac>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2200      	movs	r2, #0
 800218a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <task2A2L+0x7ac>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2200      	movs	r2, #0
 8002192:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance->CCR4 = STRAIGHT;
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <task2A2L+0x7a8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2296      	movs	r2, #150	; 0x96
 800219a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800219c:	2201      	movs	r2, #1
 800219e:	2108      	movs	r1, #8
 80021a0:	4813      	ldr	r0, [pc, #76]	; (80021f0 <task2A2L+0x7c8>)
 80021a2:	f005 fb03 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2104      	movs	r1, #4
 80021aa:	4811      	ldr	r0, [pc, #68]	; (80021f0 <task2A2L+0x7c8>)
 80021ac:	f005 fafe 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80021b0:	2201      	movs	r2, #1
 80021b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b6:	480f      	ldr	r0, [pc, #60]	; (80021f4 <task2A2L+0x7cc>)
 80021b8:	f005 faf8 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	2120      	movs	r1, #32
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <task2A2L+0x7d0>)
 80021c2:	f005 faf3 	bl	80077ac <HAL_GPIO_WritePin>
}
 80021c6:	bf00      	nop
 80021c8:	3780      	adds	r7, #128	; 0x80
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000258 	.word	0x20000258
 80021d4:	20000378 	.word	0x20000378
 80021d8:	20000414 	.word	0x20000414
 80021dc:	20000418 	.word	0x20000418
 80021e0:	08014858 	.word	0x08014858
 80021e4:	42340000 	.word	0x42340000
 80021e8:	20000420 	.word	0x20000420
 80021ec:	42700000 	.word	0x42700000
 80021f0:	40020000 	.word	0x40020000
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40020800 	.word	0x40020800

080021fc <secObstL>:

void secObstL() {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
//
//	osDelay(200);
//
//	moveGyroPID(distanceTraveled, 1);

	left90();
 8002200:	f003 f996 	bl	8005530 <left90>
	osDelay(400);
 8002204:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002208:	f00b f939 	bl	800d47e <osDelay>
	moveGyroPID(5, 1);
 800220c:	2001      	movs	r0, #1
 800220e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002212:	f001 fb61 	bl	80038d8 <moveGyroPID>
	osDelay(400);
 8002216:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800221a:	f00b f930 	bl	800d47e <osDelay>
	right90();
 800221e:	f003 fbe7 	bl	80059f0 <right90>
	osDelay(400);
 8002222:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002226:	f00b f92a 	bl	800d47e <osDelay>
	moveGyroPID(20, 1);
 800222a:	2001      	movs	r0, #1
 800222c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002230:	f001 fb52 	bl	80038d8 <moveGyroPID>
	osDelay(400);
 8002234:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002238:	f00b f921 	bl	800d47e <osDelay>
	right90();
 800223c:	f003 fbd8 	bl	80059f0 <right90>
	osDelay(400);
 8002240:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002244:	f00b f91b 	bl	800d47e <osDelay>
	moveGyroPID(70, 1);
 8002248:	2001      	movs	r0, #1
 800224a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80022b8 <secObstL+0xbc>
 800224e:	f001 fb43 	bl	80038d8 <moveGyroPID>
	osDelay(400);
 8002252:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002256:	f00b f912 	bl	800d47e <osDelay>
	right90();
 800225a:	f003 fbc9 	bl	80059f0 <right90>
	osDelay(400);
 800225e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002262:	f00b f90c 	bl	800d47e <osDelay>
	moveGyroPIDFast(distanceTraveled + 20, 1);
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <secObstL+0xc0>)
 8002268:	edd3 7a00 	vldr	s15, [r3]
 800226c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002270:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002274:	2001      	movs	r0, #1
 8002276:	eeb0 0a67 	vmov.f32	s0, s15
 800227a:	f001 fedd 	bl	8004038 <moveGyroPIDFast>
	osDelay(400);
 800227e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002282:	f00b f8fc 	bl	800d47e <osDelay>
	right90();
 8002286:	f003 fbb3 	bl	80059f0 <right90>
	osDelay(400);
 800228a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800228e:	f00b f8f6 	bl	800d47e <osDelay>
	moveGyroPID(8, 1);
 8002292:	2001      	movs	r0, #1
 8002294:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8002298:	f001 fb1e 	bl	80038d8 <moveGyroPID>
	osDelay(400);
 800229c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022a0:	f00b f8ed 	bl	800d47e <osDelay>
	left90();
 80022a4:	f003 f944 	bl	8005530 <left90>
	osDelay(400);
 80022a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022ac:	f00b f8e7 	bl	800d47e <osDelay>
	parkingMoveUltra();
 80022b0:	f000 fa90 	bl	80027d4 <parkingMoveUltra>
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	428c0000 	.word	0x428c0000
 80022bc:	20000434 	.word	0x20000434

080022c0 <secObstR>:

void secObstR() {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	right90();
 80022c4:	f003 fb94 	bl	80059f0 <right90>
	osDelay(400);
 80022c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022cc:	f00b f8d7 	bl	800d47e <osDelay>
	moveGyroPID(5, 1);
 80022d0:	2001      	movs	r0, #1
 80022d2:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80022d6:	f001 faff 	bl	80038d8 <moveGyroPID>
	osDelay(400);
 80022da:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022de:	f00b f8ce 	bl	800d47e <osDelay>
	left90();
 80022e2:	f003 f925 	bl	8005530 <left90>
	osDelay(400);
 80022e6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022ea:	f00b f8c8 	bl	800d47e <osDelay>
	moveGyroPID(20, 1);
 80022ee:	2001      	movs	r0, #1
 80022f0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80022f4:	f001 faf0 	bl	80038d8 <moveGyroPID>
	osDelay(400);
 80022f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022fc:	f00b f8bf 	bl	800d47e <osDelay>
	left90();
 8002300:	f003 f916 	bl	8005530 <left90>
	osDelay(400);
 8002304:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002308:	f00b f8b9 	bl	800d47e <osDelay>
	moveGyroPID(70, 1);
 800230c:	2001      	movs	r0, #1
 800230e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800237c <secObstR+0xbc>
 8002312:	f001 fae1 	bl	80038d8 <moveGyroPID>
	osDelay(400);
 8002316:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800231a:	f00b f8b0 	bl	800d47e <osDelay>
	left90();
 800231e:	f003 f907 	bl	8005530 <left90>
	osDelay(400);
 8002322:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002326:	f00b f8aa 	bl	800d47e <osDelay>
	moveGyroPIDFast(distanceTraveled + 20, 1);
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <secObstR+0xc0>)
 800232c:	edd3 7a00 	vldr	s15, [r3]
 8002330:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002334:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002338:	2001      	movs	r0, #1
 800233a:	eeb0 0a67 	vmov.f32	s0, s15
 800233e:	f001 fe7b 	bl	8004038 <moveGyroPIDFast>
	osDelay(400);
 8002342:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002346:	f00b f89a 	bl	800d47e <osDelay>
	left90();
 800234a:	f003 f8f1 	bl	8005530 <left90>
	osDelay(400);
 800234e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002352:	f00b f894 	bl	800d47e <osDelay>
	moveGyroPID(8, 1);
 8002356:	2001      	movs	r0, #1
 8002358:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800235c:	f001 fabc 	bl	80038d8 <moveGyroPID>
	osDelay(400);
 8002360:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002364:	f00b f88b 	bl	800d47e <osDelay>
	right90();
 8002368:	f003 fb42 	bl	80059f0 <right90>
	osDelay(400);
 800236c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002370:	f00b f885 	bl	800d47e <osDelay>
	parkingMoveUltra();
 8002374:	f000 fa2e 	bl	80027d4 <parkingMoveUltra>
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	428c0000 	.word	0x428c0000
 8002380:	20000434 	.word	0x20000434
 8002384:	00000000 	.word	0x00000000

08002388 <moveUltra>:

void moveUltra() {
 8002388:	b580      	push	{r7, lr}
 800238a:	b0ae      	sub	sp, #184	; 0xb8
 800238c:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800238e:	2100      	movs	r1, #0
 8002390:	48bf      	ldr	r0, [pc, #764]	; (8002690 <moveUltra+0x308>)
 8002392:	f008 fac1 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002396:	2108      	movs	r1, #8
 8002398:	48bd      	ldr	r0, [pc, #756]	; (8002690 <moveUltra+0x308>)
 800239a:	f008 fabd 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800239e:	210c      	movs	r1, #12
 80023a0:	48bc      	ldr	r0, [pc, #752]	; (8002694 <moveUltra+0x30c>)
 80023a2:	f008 fab9 	bl	800a918 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80023a6:	4bbb      	ldr	r3, [pc, #748]	; (8002694 <moveUltra+0x30c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2296      	movs	r2, #150	; 0x96
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(40);
 80023ae:	2028      	movs	r0, #40	; 0x28
 80023b0:	f00b f865 	bl	800d47e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI, 3650, 3850,
 80023b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023b8:	2224      	movs	r2, #36	; 0x24
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f00d fdb5 	bl	800ff2c <memset>
 80023c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023c6:	653b      	str	r3, [r7, #80]	; 0x50
 80023c8:	f640 6342 	movw	r3, #3650	; 0xe42
 80023cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80023ce:	f640 730a 	movw	r3, #3850	; 0xf0a
 80023d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023d4:	4bb0      	ldr	r3, [pc, #704]	; (8002698 <moveUltra+0x310>)
 80023d6:	663b      	str	r3, [r7, #96]	; 0x60
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI, 3650, 3850,
 80023d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023dc:	2224      	movs	r2, #36	; 0x24
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f00d fda3 	bl	800ff2c <memset>
 80023e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ec:	f640 6342 	movw	r3, #3650	; 0xe42
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
 80023f2:	f640 730a 	movw	r3, #3850	; 0xf0a
 80023f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80023f8:	4ba7      	ldr	r3, [pc, #668]	; (8002698 <moveUltra+0x310>)
 80023fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 80023fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002400:	4618      	mov	r0, r3
 8002402:	f004 f96b 	bl	80066dc <PIDController_Init>
	PIDController_Init(&pidRight);
 8002406:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800240a:	4618      	mov	r0, r3
 800240c:	f004 f966 	bl	80066dc <PIDController_Init>

	//reset angle
	actualAngle = 0;
 8002410:	49a2      	ldr	r1, [pc, #648]	; (800269c <moveUltra+0x314>)
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	e9c1 2300 	strd	r2, r3, [r1]

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 800241e:	4ba0      	ldr	r3, [pc, #640]	; (80026a0 <moveUltra+0x318>)
 8002420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8002424:	4b9f      	ldr	r3, [pc, #636]	; (80026a4 <moveUltra+0x31c>)
 8002426:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 21.1; // NEED TO MEASURE AND CHANGE
 800242a:	4b9f      	ldr	r3, [pc, #636]	; (80026a8 <moveUltra+0x320>)
 800242c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8002430:	213c      	movs	r1, #60	; 0x3c
 8002432:	489e      	ldr	r0, [pc, #632]	; (80026ac <moveUltra+0x324>)
 8002434:	f008 fd56 	bl	800aee4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8002438:	213c      	movs	r1, #60	; 0x3c
 800243a:	489d      	ldr	r0, [pc, #628]	; (80026b0 <moveUltra+0x328>)
 800243c:	f008 fd52 	bl	800aee4 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8002440:	4b9a      	ldr	r3, [pc, #616]	; (80026ac <moveUltra+0x324>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 800244a:	4b99      	ldr	r3, [pc, #612]	; (80026b0 <moveUltra+0x328>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8002454:	f004 fe2c 	bl	80070b0 <HAL_GetTick>
 8002458:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 800245c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002460:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distErrOffset;

	int servo;

	//pwm values
	uint16_t pwmValA = 3750;
 8002480:	f640 63a6 	movw	r3, #3750	; 0xea6
 8002484:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 3750;
 8002488:	f640 63a6 	movw	r3, #3750	; 0xea6
 800248c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002490:	2201      	movs	r2, #1
 8002492:	2108      	movs	r1, #8
 8002494:	4887      	ldr	r0, [pc, #540]	; (80026b4 <moveUltra+0x32c>)
 8002496:	f005 f989 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800249a:	2200      	movs	r2, #0
 800249c:	2104      	movs	r1, #4
 800249e:	4885      	ldr	r0, [pc, #532]	; (80026b4 <moveUltra+0x32c>)
 80024a0:	f005 f984 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80024a4:	2201      	movs	r2, #1
 80024a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024aa:	4883      	ldr	r0, [pc, #524]	; (80026b8 <moveUltra+0x330>)
 80024ac:	f005 f97e 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2120      	movs	r1, #32
 80024b4:	4881      	ldr	r0, [pc, #516]	; (80026bc <moveUltra+0x334>)
 80024b6:	f005 f979 	bl	80077ac <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80024ba:	4b75      	ldr	r3, [pc, #468]	; (8002690 <moveUltra+0x308>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80024c2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 80024c4:	4b72      	ldr	r3, [pc, #456]	; (8002690 <moveUltra+0x308>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80024cc:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 80024ce:	f004 fdef 	bl	80070b0 <HAL_GetTick>
 80024d2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 80024d6:	4b7a      	ldr	r3, [pc, #488]	; (80026c0 <moveUltra+0x338>)
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 80024dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80024e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b3c      	cmp	r3, #60	; 0x3c
 80024e8:	d9e7      	bls.n	80024ba <moveUltra+0x132>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 80024ea:	4b70      	ldr	r3, [pc, #448]	; (80026ac <moveUltra+0x324>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 80024f4:	4b6e      	ldr	r3, [pc, #440]	; (80026b0 <moveUltra+0x328>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8002508:	4b68      	ldr	r3, [pc, #416]	; (80026ac <moveUltra+0x324>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b10      	cmp	r3, #16
 8002514:	d118      	bne.n	8002548 <moveUltra+0x1c0>
				if (leftTick < leftTick_prev)
 8002516:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800251a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800251e:	429a      	cmp	r2, r3
 8002520:	da07      	bge.n	8002532 <moveUltra+0x1aa>
					diffLeft = leftTick_prev - leftTick;
 8002522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002526:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002530:	e022      	b.n	8002578 <moveUltra+0x1f0>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8002532:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002536:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800253a:	33ff      	adds	r3, #255	; 0xff
 800253c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002540:	4413      	add	r3, r2
 8002542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002546:	e017      	b.n	8002578 <moveUltra+0x1f0>
			} else {
				if (leftTick > leftTick_prev)
 8002548:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800254c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002550:	429a      	cmp	r2, r3
 8002552:	dd07      	ble.n	8002564 <moveUltra+0x1dc>
					diffLeft = leftTick - leftTick_prev;
 8002554:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002558:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002562:	e009      	b.n	8002578 <moveUltra+0x1f0>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8002564:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002568:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800256c:	33ff      	adds	r3, #255	; 0xff
 800256e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002572:	4413      	add	r3, r2
 8002574:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8002578:	4b4d      	ldr	r3, [pc, #308]	; (80026b0 <moveUltra+0x328>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b10      	cmp	r3, #16
 8002584:	d115      	bne.n	80025b2 <moveUltra+0x22a>
				if (rightTick < rightTick_prev)
 8002586:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002588:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800258c:	429a      	cmp	r2, r3
 800258e:	da06      	bge.n	800259e <moveUltra+0x216>
					diffRight = rightTick_prev - rightTick;
 8002590:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002594:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800259c:	e01e      	b.n	80025dc <moveUltra+0x254>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 800259e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025a0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80025a4:	33ff      	adds	r3, #255	; 0xff
 80025a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025aa:	4413      	add	r3, r2
 80025ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025b0:	e014      	b.n	80025dc <moveUltra+0x254>
			} else {
				if (rightTick > rightTick_prev)
 80025b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80025b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025b8:	429a      	cmp	r2, r3
 80025ba:	dd06      	ble.n	80025ca <moveUltra+0x242>
					diffRight = rightTick - rightTick_prev;
 80025bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80025be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025c8:	e008      	b.n	80025dc <moveUltra+0x254>
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 80025ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025ce:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80025d2:	33ff      	adds	r3, #255	; 0xff
 80025d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80025d6:	4413      	add	r3, r2
 80025d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 80025dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025e0:	ee07 3a90 	vmov	s15, r3
 80025e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025e8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80025ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025f0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80025f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 80025fc:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002600:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002608:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 800260c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002610:	ee07 3a90 	vmov	s15, r3
 8002614:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002618:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800261c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002620:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002628:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 800262c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002630:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002638:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//						pwmValC = PIDController_Update(&pidRight, totalDistance_left,
//								totalDistance_right * STRAIGHTRATIOF, pwmValC)
//
//						;

			if (actualAngle < -0.33) //veering right
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <moveUltra+0x314>)
 800263e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002642:	a30f      	add	r3, pc, #60	; (adr r3, 8002680 <moveUltra+0x2f8>)
 8002644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002648:	f7fe fa48 	bl	8000adc <__aeabi_dcmplt>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d004      	beq.n	800265c <moveUltra+0x2d4>
					{

				htim1.Instance->CCR4 = 140; //left abit. prev: 138
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <moveUltra+0x30c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	228c      	movs	r2, #140	; 0x8c
 8002658:	641a      	str	r2, [r3, #64]	; 0x40
 800265a:	e037      	b.n	80026cc <moveUltra+0x344>
			} else if (actualAngle > 0.33) //veering left
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <moveUltra+0x314>)
 800265e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002662:	a309      	add	r3, pc, #36	; (adr r3, 8002688 <moveUltra+0x300>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	f7fe fa56 	bl	8000b18 <__aeabi_dcmpgt>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d028      	beq.n	80026c4 <moveUltra+0x33c>
					{

				htim1.Instance->CCR4 = 155; //right a bit. prev: 152
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <moveUltra+0x30c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	229b      	movs	r2, #155	; 0x9b
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
 800267a:	e027      	b.n	80026cc <moveUltra+0x344>
 800267c:	f3af 8000 	nop.w
 8002680:	51eb851f 	.word	0x51eb851f
 8002684:	bfd51eb8 	.word	0xbfd51eb8
 8002688:	51eb851f 	.word	0x51eb851f
 800268c:	3fd51eb8 	.word	0x3fd51eb8
 8002690:	20000378 	.word	0x20000378
 8002694:	20000258 	.word	0x20000258
 8002698:	3d4ccccd 	.word	0x3d4ccccd
 800269c:	20000420 	.word	0x20000420
 80026a0:	44440000 	.word	0x44440000
 80026a4:	4442c000 	.word	0x4442c000
 80026a8:	41a8cccd 	.word	0x41a8cccd
 80026ac:	200002a0 	.word	0x200002a0
 80026b0:	20000330 	.word	0x20000330
 80026b4:	40020000 	.word	0x40020000
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40020800 	.word	0x40020800
 80026c0:	20000414 	.word	0x20000414
			} else {
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 80026c4:	4b3a      	ldr	r3, [pc, #232]	; (80027b0 <moveUltra+0x428>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2296      	movs	r2, #150	; 0x96
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
			}

			osDelay(10);
 80026cc:	200a      	movs	r0, #10
 80026ce:	f00a fed6 	bl	800d47e <osDelay>

			prevTime = currTime;
 80026d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 80026da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 80026e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 13.5) // prev was 10
 80026e8:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <moveUltra+0x42c>)
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	eeb2 7a0b 	vmov.f32	s14, #43	; 0x41580000  13.5
 80026f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fa:	d515      	bpl.n	8002728 <moveUltra+0x3a0>
					{
				while (Distance > 8.75) {
 80026fc:	e009      	b.n	8002712 <moveUltra+0x38a>

					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 1600);
 80026fe:	4b2e      	ldr	r3, [pc, #184]	; (80027b8 <moveUltra+0x430>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002706:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,1600);
 8002708:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <moveUltra+0x430>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002710:	63da      	str	r2, [r3, #60]	; 0x3c
				while (Distance > 8.75) {
 8002712:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <moveUltra+0x42c>)
 8002714:	edd3 7a00 	vldr	s15, [r3]
 8002718:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80027bc <moveUltra+0x434>
 800271c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002724:	dceb      	bgt.n	80026fe <moveUltra+0x376>
				}
				break;
 8002726:	e000      	b.n	800272a <moveUltra+0x3a2>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002728:	e6c7      	b.n	80024ba <moveUltra+0x132>
			}
		}
	}

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 800272a:	4b23      	ldr	r3, [pc, #140]	; (80027b8 <moveUltra+0x430>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2200      	movs	r2, #0
 8002730:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_3, 0);
 8002732:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <moveUltra+0x430>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2200      	movs	r2, #0
 8002738:	63da      	str	r2, [r3, #60]	; 0x3c
	distanceTraveled = distanceTraveled
			+ ((totalDistance_left + totalDistance_right) / 2) + 10 + 50; // travelled + err + not counting
 800273a:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800273e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002746:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800274a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800274e:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <moveUltra+0x438>)
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002758:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800275c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002760:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80027c4 <moveUltra+0x43c>
 8002764:	ee77 7a87 	vadd.f32	s15, s15, s14
	distanceTraveled = distanceTraveled
 8002768:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <moveUltra+0x438>)
 800276a:	edc3 7a00 	vstr	s15, [r3]
//	offsetAngle = targetAngle - actualAngle;
	htim1.Instance->CCR4 = STRAIGHT; //centre
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <moveUltra+0x428>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2296      	movs	r2, #150	; 0x96
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002776:	2201      	movs	r2, #1
 8002778:	2108      	movs	r1, #8
 800277a:	4813      	ldr	r0, [pc, #76]	; (80027c8 <moveUltra+0x440>)
 800277c:	f005 f816 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002780:	2200      	movs	r2, #0
 8002782:	2104      	movs	r1, #4
 8002784:	4810      	ldr	r0, [pc, #64]	; (80027c8 <moveUltra+0x440>)
 8002786:	f005 f811 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800278a:	2201      	movs	r2, #1
 800278c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002790:	480e      	ldr	r0, [pc, #56]	; (80027cc <moveUltra+0x444>)
 8002792:	f005 f80b 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8002796:	2200      	movs	r2, #0
 8002798:	2120      	movs	r1, #32
 800279a:	480d      	ldr	r0, [pc, #52]	; (80027d0 <moveUltra+0x448>)
 800279c:	f005 f806 	bl	80077ac <HAL_GPIO_WritePin>

	osDelay(10);
 80027a0:	200a      	movs	r0, #10
 80027a2:	f00a fe6c 	bl	800d47e <osDelay>
	return;
 80027a6:	bf00      	nop

}
 80027a8:	37b8      	adds	r7, #184	; 0xb8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000258 	.word	0x20000258
 80027b4:	20000448 	.word	0x20000448
 80027b8:	20000378 	.word	0x20000378
 80027bc:	410c0000 	.word	0x410c0000
 80027c0:	20000434 	.word	0x20000434
 80027c4:	42480000 	.word	0x42480000
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40020800 	.word	0x40020800

080027d4 <parkingMoveUltra>:

void parkingMoveUltra() {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b0ae      	sub	sp, #184	; 0xb8
 80027d8:	af00      	add	r7, sp, #0

#define PID_LIM_MIN  1800 //
#define PID_LIM_MAX  2200 //

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80027da:	2100      	movs	r1, #0
 80027dc:	488a      	ldr	r0, [pc, #552]	; (8002a08 <parkingMoveUltra+0x234>)
 80027de:	f008 f89b 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80027e2:	2108      	movs	r1, #8
 80027e4:	4888      	ldr	r0, [pc, #544]	; (8002a08 <parkingMoveUltra+0x234>)
 80027e6:	f008 f897 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80027ea:	210c      	movs	r1, #12
 80027ec:	4887      	ldr	r0, [pc, #540]	; (8002a0c <parkingMoveUltra+0x238>)
 80027ee:	f008 f893 	bl	800a918 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80027f2:	4b86      	ldr	r3, [pc, #536]	; (8002a0c <parkingMoveUltra+0x238>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2296      	movs	r2, #150	; 0x96
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 80027fa:	2064      	movs	r0, #100	; 0x64
 80027fc:	f00a fe3f 	bl	800d47e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI, 1900, 2100,
 8002800:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002804:	2224      	movs	r2, #36	; 0x24
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f00d fb8f 	bl	800ff2c <memset>
 800280e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002812:	653b      	str	r3, [r7, #80]	; 0x50
 8002814:	f240 736c 	movw	r3, #1900	; 0x76c
 8002818:	65bb      	str	r3, [r7, #88]	; 0x58
 800281a:	f640 0334 	movw	r3, #2100	; 0x834
 800281e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002820:	4b7b      	ldr	r3, [pc, #492]	; (8002a10 <parkingMoveUltra+0x23c>)
 8002822:	663b      	str	r3, [r7, #96]	; 0x60
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI, 1900, 2100,
 8002824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002828:	2224      	movs	r2, #36	; 0x24
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f00d fb7d 	bl	800ff2c <memset>
 8002832:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002838:	f240 736c 	movw	r3, #1900	; 0x76c
 800283c:	637b      	str	r3, [r7, #52]	; 0x34
 800283e:	f640 0334 	movw	r3, #2100	; 0x834
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
 8002844:	4b72      	ldr	r3, [pc, #456]	; (8002a10 <parkingMoveUltra+0x23c>)
 8002846:	63fb      	str	r3, [r7, #60]	; 0x3c
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8002848:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800284c:	4618      	mov	r0, r3
 800284e:	f003 ff45 	bl	80066dc <PIDController_Init>
	PIDController_Init(&pidRight);
 8002852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002856:	4618      	mov	r0, r3
 8002858:	f003 ff40 	bl	80066dc <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 800285c:	4b6d      	ldr	r3, [pc, #436]	; (8002a14 <parkingMoveUltra+0x240>)
 800285e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8002862:	4b6d      	ldr	r3, [pc, #436]	; (8002a18 <parkingMoveUltra+0x244>)
 8002864:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 23.56f; // NEED TO MEASURE AND CHANGE
 8002868:	4b6c      	ldr	r3, [pc, #432]	; (8002a1c <parkingMoveUltra+0x248>)
 800286a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 800286e:	213c      	movs	r1, #60	; 0x3c
 8002870:	486b      	ldr	r0, [pc, #428]	; (8002a20 <parkingMoveUltra+0x24c>)
 8002872:	f008 fb37 	bl	800aee4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8002876:	213c      	movs	r1, #60	; 0x3c
 8002878:	486a      	ldr	r0, [pc, #424]	; (8002a24 <parkingMoveUltra+0x250>)
 800287a:	f008 fb33 	bl	800aee4 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 800287e:	4b68      	ldr	r3, [pc, #416]	; (8002a20 <parkingMoveUltra+0x24c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8002888:	4b66      	ldr	r3, [pc, #408]	; (8002a24 <parkingMoveUltra+0x250>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8002892:	f004 fc0d 	bl	80070b0 <HAL_GetTick>
 8002896:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 800289a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800289e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 80028be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80028c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 2000;
 80028c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80028ca:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80028ce:	2201      	movs	r2, #1
 80028d0:	2108      	movs	r1, #8
 80028d2:	4855      	ldr	r0, [pc, #340]	; (8002a28 <parkingMoveUltra+0x254>)
 80028d4:	f004 ff6a 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80028d8:	2200      	movs	r2, #0
 80028da:	2104      	movs	r1, #4
 80028dc:	4852      	ldr	r0, [pc, #328]	; (8002a28 <parkingMoveUltra+0x254>)
 80028de:	f004 ff65 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80028e2:	2201      	movs	r2, #1
 80028e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028e8:	4850      	ldr	r0, [pc, #320]	; (8002a2c <parkingMoveUltra+0x258>)
 80028ea:	f004 ff5f 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2120      	movs	r1, #32
 80028f2:	484f      	ldr	r0, [pc, #316]	; (8002a30 <parkingMoveUltra+0x25c>)
 80028f4:	f004 ff5a 	bl	80077ac <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80028f8:	4b43      	ldr	r3, [pc, #268]	; (8002a08 <parkingMoveUltra+0x234>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8002900:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8002902:	4b41      	ldr	r3, [pc, #260]	; (8002a08 <parkingMoveUltra+0x234>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800290a:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 800290c:	f004 fbd0 	bl	80070b0 <HAL_GetTick>
 8002910:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 8002914:	4b47      	ldr	r3, [pc, #284]	; (8002a34 <parkingMoveUltra+0x260>)
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60) {
 800291a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800291e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b3c      	cmp	r3, #60	; 0x3c
 8002926:	d9e7      	bls.n	80028f8 <parkingMoveUltra+0x124>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8002928:	4b3d      	ldr	r3, [pc, #244]	; (8002a20 <parkingMoveUltra+0x24c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8002932:	4b3c      	ldr	r3, [pc, #240]	; (8002a24 <parkingMoveUltra+0x250>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8002946:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <parkingMoveUltra+0x24c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b10      	cmp	r3, #16
 8002952:	d118      	bne.n	8002986 <parkingMoveUltra+0x1b2>
				if (leftTick < leftTick_prev)
 8002954:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002958:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800295c:	429a      	cmp	r2, r3
 800295e:	da07      	bge.n	8002970 <parkingMoveUltra+0x19c>
					diffLeft = leftTick_prev - leftTick;
 8002960:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002964:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800296e:	e022      	b.n	80029b6 <parkingMoveUltra+0x1e2>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8002970:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002974:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002978:	33ff      	adds	r3, #255	; 0xff
 800297a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800297e:	4413      	add	r3, r2
 8002980:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002984:	e017      	b.n	80029b6 <parkingMoveUltra+0x1e2>
			} else {
				if (leftTick > leftTick_prev)
 8002986:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800298a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800298e:	429a      	cmp	r2, r3
 8002990:	dd07      	ble.n	80029a2 <parkingMoveUltra+0x1ce>
					diffLeft = leftTick - leftTick_prev;
 8002992:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029a0:	e009      	b.n	80029b6 <parkingMoveUltra+0x1e2>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 80029a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029a6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80029aa:	33ff      	adds	r3, #255	; 0xff
 80029ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029b0:	4413      	add	r3, r2
 80029b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 80029b6:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <parkingMoveUltra+0x250>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b10      	cmp	r3, #16
 80029c2:	d115      	bne.n	80029f0 <parkingMoveUltra+0x21c>
				if (rightTick < rightTick_prev)
 80029c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80029c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029ca:	429a      	cmp	r2, r3
 80029cc:	da06      	bge.n	80029dc <parkingMoveUltra+0x208>
					diffRight = rightTick_prev - rightTick;
 80029ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029da:	e036      	b.n	8002a4a <parkingMoveUltra+0x276>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 80029dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029de:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80029e2:	33ff      	adds	r3, #255	; 0xff
 80029e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029e8:	4413      	add	r3, r2
 80029ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029ee:	e02c      	b.n	8002a4a <parkingMoveUltra+0x276>
			} else {
				if (rightTick > rightTick_prev)
 80029f0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80029f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029f6:	429a      	cmp	r2, r3
 80029f8:	dd1e      	ble.n	8002a38 <parkingMoveUltra+0x264>
					diffRight = rightTick - rightTick_prev;
 80029fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80029fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a06:	e020      	b.n	8002a4a <parkingMoveUltra+0x276>
 8002a08:	20000378 	.word	0x20000378
 8002a0c:	20000258 	.word	0x20000258
 8002a10:	3d4ccccd 	.word	0x3d4ccccd
 8002a14:	44440000 	.word	0x44440000
 8002a18:	4442c000 	.word	0x4442c000
 8002a1c:	41bc7ae1 	.word	0x41bc7ae1
 8002a20:	200002a0 	.word	0x200002a0
 8002a24:	20000330 	.word	0x20000330
 8002a28:	40020000 	.word	0x40020000
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40020800 	.word	0x40020800
 8002a34:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8002a38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a3c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002a40:	33ff      	adds	r3, #255	; 0xff
 8002a42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002a44:	4413      	add	r3, r2
 8002a46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8002a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a56:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a5e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a66:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 8002a6a:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002a6e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a76:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8002a7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a86:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002a8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a8e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a96:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 8002a9a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002a9e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//
//			pwmValC = PIDController_Update(&pidRight, totalDistance_left,
//					totalDistance_right * STRAIGHTRATIOF, pwmValC);

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (actualAngle < -0.50) //veering right
 8002aaa:	4b47      	ldr	r3, [pc, #284]	; (8002bc8 <parkingMoveUltra+0x3f4>)
 8002aac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	4b45      	ldr	r3, [pc, #276]	; (8002bcc <parkingMoveUltra+0x3f8>)
 8002ab6:	f7fe f811 	bl	8000adc <__aeabi_dcmplt>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <parkingMoveUltra+0x2f4>
					{

				htim1.Instance->CCR4 = 138; //left abit
 8002ac0:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <parkingMoveUltra+0x3fc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	228a      	movs	r2, #138	; 0x8a
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
//				osDelay(10);
			}
			if (actualAngle > 0.00) //veering left
 8002ac8:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <parkingMoveUltra+0x3f4>)
 8002aca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	f7fe f81f 	bl	8000b18 <__aeabi_dcmpgt>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <parkingMoveUltra+0x314>
					{

				htim1.Instance->CCR4 = 155; //right a bit
 8002ae0:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <parkingMoveUltra+0x3fc>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	229b      	movs	r2, #155	; 0x9b
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40
//				osDelay(10);
			}
			if (actualAngle == 0.00) {
 8002ae8:	4b37      	ldr	r3, [pc, #220]	; (8002bc8 <parkingMoveUltra+0x3f4>)
 8002aea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	f7fd ffe7 	bl	8000ac8 <__aeabi_dcmpeq>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <parkingMoveUltra+0x334>
//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 8002b00:	4b33      	ldr	r3, [pc, #204]	; (8002bd0 <parkingMoveUltra+0x3fc>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2296      	movs	r2, #150	; 0x96
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
//				osDelay(10);
			}

			prevTime = currTime;
 8002b08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 8002b10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8002b18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 4) // prev was 10
 8002b1e:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <parkingMoveUltra+0x400>)
 8002b20:	edd3 7a00 	vldr	s15, [r3]
 8002b24:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b30:	d515      	bpl.n	8002b5e <parkingMoveUltra+0x38a>
					{
				while (Distance > 2) {
 8002b32:	e009      	b.n	8002b48 <parkingMoveUltra+0x374>

					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 750);
 8002b34:	4b28      	ldr	r3, [pc, #160]	; (8002bd8 <parkingMoveUltra+0x404>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002b3c:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,750);
 8002b3e:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <parkingMoveUltra+0x404>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002b46:	63da      	str	r2, [r3, #60]	; 0x3c
				while (Distance > 2) {
 8002b48:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <parkingMoveUltra+0x400>)
 8002b4a:	edd3 7a00 	vldr	s15, [r3]
 8002b4e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5a:	dceb      	bgt.n	8002b34 <parkingMoveUltra+0x360>
				}
				break;
 8002b5c:	e000      	b.n	8002b60 <parkingMoveUltra+0x38c>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002b5e:	e6cb      	b.n	80028f8 <parkingMoveUltra+0x124>
			}
		}
	}

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA / 4);
 8002b60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002b64:	089b      	lsrs	r3, r3, #2
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <parkingMoveUltra+0x404>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_3, pwmValC / 4);
 8002b6e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <parkingMoveUltra+0x404>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	63da      	str	r2, [r3, #60]	; 0x3c

//	moving = 0;
	move(0, 0);
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8002bdc <parkingMoveUltra+0x408>
 8002b82:	f002 f8e3 	bl	8004d4c <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002b86:	2201      	movs	r2, #1
 8002b88:	2108      	movs	r1, #8
 8002b8a:	4815      	ldr	r0, [pc, #84]	; (8002be0 <parkingMoveUltra+0x40c>)
 8002b8c:	f004 fe0e 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002b90:	2200      	movs	r2, #0
 8002b92:	2104      	movs	r1, #4
 8002b94:	4812      	ldr	r0, [pc, #72]	; (8002be0 <parkingMoveUltra+0x40c>)
 8002b96:	f004 fe09 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ba0:	4810      	ldr	r0, [pc, #64]	; (8002be4 <parkingMoveUltra+0x410>)
 8002ba2:	f004 fe03 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2120      	movs	r1, #32
 8002baa:	480f      	ldr	r0, [pc, #60]	; (8002be8 <parkingMoveUltra+0x414>)
 8002bac:	f004 fdfe 	bl	80077ac <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8002bb0:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <parkingMoveUltra+0x3fc>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2296      	movs	r2, #150	; 0x96
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8002bb8:	200a      	movs	r0, #10
 8002bba:	f00a fc60 	bl	800d47e <osDelay>
	return;
 8002bbe:	bf00      	nop
}
 8002bc0:	37b8      	adds	r7, #184	; 0xb8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000420 	.word	0x20000420
 8002bcc:	bfe00000 	.word	0xbfe00000
 8002bd0:	20000258 	.word	0x20000258
 8002bd4:	20000448 	.word	0x20000448
 8002bd8:	20000378 	.word	0x20000378
 8002bdc:	00000000 	.word	0x00000000
 8002be0:	40020000 	.word	0x40020000
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40020800 	.word	0x40020800
 8002bec:	00000000 	.word	0x00000000

08002bf0 <tooClose>:

void tooClose() {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b0ae      	sub	sp, #184	; 0xb8
 8002bf4:	af00      	add	r7, sp, #0
#define PID_LIM_MIN  1800 //
#define PID_LIM_MAX  2200 //

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	488e      	ldr	r0, [pc, #568]	; (8002e34 <tooClose+0x244>)
 8002bfa:	f007 fe8d 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002bfe:	2108      	movs	r1, #8
 8002c00:	488c      	ldr	r0, [pc, #560]	; (8002e34 <tooClose+0x244>)
 8002c02:	f007 fe89 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002c06:	210c      	movs	r1, #12
 8002c08:	488b      	ldr	r0, [pc, #556]	; (8002e38 <tooClose+0x248>)
 8002c0a:	f007 fe85 	bl	800a918 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8002c0e:	4b8a      	ldr	r3, [pc, #552]	; (8002e38 <tooClose+0x248>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2296      	movs	r2, #150	; 0x96
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(40);
 8002c16:	2028      	movs	r0, #40	; 0x28
 8002c18:	f00a fc31 	bl	800d47e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI, 1900, 2100,
 8002c1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c20:	2224      	movs	r2, #36	; 0x24
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f00d f981 	bl	800ff2c <memset>
 8002c2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8002c30:	f240 736c 	movw	r3, #1900	; 0x76c
 8002c34:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c36:	f640 0334 	movw	r3, #2100	; 0x834
 8002c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c3c:	4b7f      	ldr	r3, [pc, #508]	; (8002e3c <tooClose+0x24c>)
 8002c3e:	663b      	str	r3, [r7, #96]	; 0x60
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI, 1900, 2100,
 8002c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c44:	2224      	movs	r2, #36	; 0x24
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f00d f96f 	bl	800ff2c <memset>
 8002c4e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c54:	f240 736c 	movw	r3, #1900	; 0x76c
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
 8002c5a:	f640 0334 	movw	r3, #2100	; 0x834
 8002c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c60:	4b76      	ldr	r3, [pc, #472]	; (8002e3c <tooClose+0x24c>)
 8002c62:	63fb      	str	r3, [r7, #60]	; 0x3c
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8002c64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f003 fd37 	bl	80066dc <PIDController_Init>
	PIDController_Init(&pidRight);
 8002c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c72:	4618      	mov	r0, r3
 8002c74:	f003 fd32 	bl	80066dc <PIDController_Init>

	//reset angle
	actualAngle = 0;
 8002c78:	4971      	ldr	r1, [pc, #452]	; (8002e40 <tooClose+0x250>)
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	e9c1 2300 	strd	r2, r3, [r1]

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8002c86:	4b6f      	ldr	r3, [pc, #444]	; (8002e44 <tooClose+0x254>)
 8002c88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float wheel_rotationTicksR = 779; // for back right wheel
 8002c8c:	4b6e      	ldr	r3, [pc, #440]	; (8002e48 <tooClose+0x258>)
 8002c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	float wheel_circumference = 21.1; // NEED TO MEASURE AND CHANGE
 8002c92:	4b6e      	ldr	r3, [pc, #440]	; (8002e4c <tooClose+0x25c>)
 8002c94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8002c98:	213c      	movs	r1, #60	; 0x3c
 8002c9a:	486d      	ldr	r0, [pc, #436]	; (8002e50 <tooClose+0x260>)
 8002c9c:	f008 f922 	bl	800aee4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8002ca0:	213c      	movs	r1, #60	; 0x3c
 8002ca2:	486c      	ldr	r0, [pc, #432]	; (8002e54 <tooClose+0x264>)
 8002ca4:	f008 f91e 	bl	800aee4 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8002ca8:	4b69      	ldr	r3, [pc, #420]	; (8002e50 <tooClose+0x260>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8002cb2:	4b68      	ldr	r3, [pc, #416]	; (8002e54 <tooClose+0x264>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8002cbc:	f004 f9f8 	bl	80070b0 <HAL_GetTick>
 8002cc0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	uint32_t prevTime = startTime;
 8002cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distErrOffset;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8002ce8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002cec:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint16_t pwmValC = 2000;
 8002cf0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002cf4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2108      	movs	r1, #8
 8002cfc:	4856      	ldr	r0, [pc, #344]	; (8002e58 <tooClose+0x268>)
 8002cfe:	f004 fd55 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002d02:	2201      	movs	r2, #1
 8002d04:	2104      	movs	r1, #4
 8002d06:	4854      	ldr	r0, [pc, #336]	; (8002e58 <tooClose+0x268>)
 8002d08:	f004 fd50 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d12:	4852      	ldr	r0, [pc, #328]	; (8002e5c <tooClose+0x26c>)
 8002d14:	f004 fd4a 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8002d18:	2201      	movs	r2, #1
 8002d1a:	2120      	movs	r1, #32
 8002d1c:	4850      	ldr	r0, [pc, #320]	; (8002e60 <tooClose+0x270>)
 8002d1e:	f004 fd45 	bl	80077ac <HAL_GPIO_WritePin>
	// outdoor

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002d22:	4b44      	ldr	r3, [pc, #272]	; (8002e34 <tooClose+0x244>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8002d2a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8002d2c:	4b41      	ldr	r3, [pc, #260]	; (8002e34 <tooClose+0x244>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002d34:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 8002d36:	f004 f9bb 	bl	80070b0 <HAL_GetTick>
 8002d3a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 8002d3e:	4b49      	ldr	r3, [pc, #292]	; (8002e64 <tooClose+0x274>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 8002d44:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b3c      	cmp	r3, #60	; 0x3c
 8002d50:	d9e7      	bls.n	8002d22 <tooClose+0x132>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8002d52:	4b3f      	ldr	r3, [pc, #252]	; (8002e50 <tooClose+0x260>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8002d5c:	4b3d      	ldr	r3, [pc, #244]	; (8002e54 <tooClose+0x264>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8002d70:	4b37      	ldr	r3, [pc, #220]	; (8002e50 <tooClose+0x260>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b10      	cmp	r3, #16
 8002d7c:	d118      	bne.n	8002db0 <tooClose+0x1c0>
				if (leftTick < leftTick_prev)
 8002d7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d86:	429a      	cmp	r2, r3
 8002d88:	da07      	bge.n	8002d9a <tooClose+0x1aa>
					diffLeft = leftTick_prev - leftTick;
 8002d8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d98:	e022      	b.n	8002de0 <tooClose+0x1f0>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8002d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d9e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002da2:	33ff      	adds	r3, #255	; 0xff
 8002da4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002da8:	4413      	add	r3, r2
 8002daa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dae:	e017      	b.n	8002de0 <tooClose+0x1f0>
			} else {
				if (leftTick > leftTick_prev)
 8002db0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002db4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002db8:	429a      	cmp	r2, r3
 8002dba:	dd07      	ble.n	8002dcc <tooClose+0x1dc>
					diffLeft = leftTick - leftTick_prev;
 8002dbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dca:	e009      	b.n	8002de0 <tooClose+0x1f0>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8002dcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002dd0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002dd4:	33ff      	adds	r3, #255	; 0xff
 8002dd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dda:	4413      	add	r3, r2
 8002ddc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8002de0:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <tooClose+0x264>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d115      	bne.n	8002e1a <tooClose+0x22a>
				if (rightTick < rightTick_prev)
 8002dee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002df0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002df4:	429a      	cmp	r2, r3
 8002df6:	da06      	bge.n	8002e06 <tooClose+0x216>
					diffRight = rightTick_prev - rightTick;
 8002df8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e04:	e039      	b.n	8002e7a <tooClose+0x28a>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 8002e06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e08:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002e0c:	33ff      	adds	r3, #255	; 0xff
 8002e0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e12:	4413      	add	r3, r2
 8002e14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e18:	e02f      	b.n	8002e7a <tooClose+0x28a>
			} else {
				if (rightTick > rightTick_prev)
 8002e1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e20:	429a      	cmp	r2, r3
 8002e22:	dd21      	ble.n	8002e68 <tooClose+0x278>
					diffRight = rightTick - rightTick_prev;
 8002e24:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e30:	e023      	b.n	8002e7a <tooClose+0x28a>
 8002e32:	bf00      	nop
 8002e34:	20000378 	.word	0x20000378
 8002e38:	20000258 	.word	0x20000258
 8002e3c:	3d4ccccd 	.word	0x3d4ccccd
 8002e40:	20000420 	.word	0x20000420
 8002e44:	44440000 	.word	0x44440000
 8002e48:	4442c000 	.word	0x4442c000
 8002e4c:	41a8cccd 	.word	0x41a8cccd
 8002e50:	200002a0 	.word	0x200002a0
 8002e54:	20000330 	.word	0x20000330
 8002e58:	40020000 	.word	0x40020000
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40020800 	.word	0x40020800
 8002e64:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8002e68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e6c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002e70:	33ff      	adds	r3, #255	; 0xff
 8002e72:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e74:	4413      	add	r3, r2
 8002e76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8002e7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e86:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e8e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e96:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 8002e9a:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002e9e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8002eaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002eb6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ebe:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 8002eca:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002ece:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			// 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.

#define pwmValAadjust 300;
#define pwmValBadjust 525;

			pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8002eda:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8002ede:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	edd7 0a2a 	vldr	s1, [r7, #168]	; 0xa8
 8002ee8:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8002eec:	4618      	mov	r0, r3
 8002eee:	f003 fc0d 	bl	800670c <PIDController_Update>
 8002ef2:	4603      	mov	r3, r0
					totalDistance_left * STRAIGHTRATIOR, pwmValA)
					- pwmValAadjust
 8002ef4:	b29b      	uxth	r3, r3
			pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8002ef6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002efa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			;

			pwmValC = PIDController_Update(&pidRight,
 8002efe:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002f02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f06:	4611      	mov	r1, r2
 8002f08:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 8002f0c:	ed97 0a2a 	vldr	s0, [r7, #168]	; 0xa8
 8002f10:	4618      	mov	r0, r3
 8002f12:	f003 fbfb 	bl	800670c <PIDController_Update>
 8002f16:	4603      	mov	r3, r0
					totalDistance_left * STRAIGHTRATIOR, totalDistance_right,
					pwmValC) + pwmValBadjust
 8002f18:	b29b      	uxth	r3, r3
			pwmValC = PIDController_Update(&pidRight,
 8002f1a:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8002f1e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
			;

			pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8002f22:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8002f26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	edd7 0a2a 	vldr	s1, [r7, #168]	; 0xa8
 8002f30:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8002f34:	4618      	mov	r0, r3
 8002f36:	f003 fbe9 	bl	800670c <PIDController_Update>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
					totalDistance_left * STRAIGHTRATIOR, pwmValA);

			pwmValC = PIDController_Update(&pidRight,
 8002f40:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f48:	4611      	mov	r1, r2
 8002f4a:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 8002f4e:	ed97 0a2a 	vldr	s0, [r7, #168]	; 0xa8
 8002f52:	4618      	mov	r0, r3
 8002f54:	f003 fbda 	bl	800670c <PIDController_Update>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
					totalDistance_left * STRAIGHTRATIOR, totalDistance_right,
					pwmValC);

			//if robot doesnt go straight, using gyro to adjust, straight = 145

			if (actualAngle > 0.33) //veering left
 8002f5e:	4b3a      	ldr	r3, [pc, #232]	; (8003048 <tooClose+0x458>)
 8002f60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f64:	a334      	add	r3, pc, #208	; (adr r3, 8003038 <tooClose+0x448>)
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	f7fd fdd5 	bl	8000b18 <__aeabi_dcmpgt>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d004      	beq.n	8002f7e <tooClose+0x38e>
					{
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = 138; //left abit
 8002f74:	4b35      	ldr	r3, [pc, #212]	; (800304c <tooClose+0x45c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	228a      	movs	r2, #138	; 0x8a
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f7c:	e013      	b.n	8002fa6 <tooClose+0x3b6>
			} else if (actualAngle < -0.33) //veering right
 8002f7e:	4b32      	ldr	r3, [pc, #200]	; (8003048 <tooClose+0x458>)
 8002f80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f84:	a32e      	add	r3, pc, #184	; (adr r3, 8003040 <tooClose+0x450>)
 8002f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8a:	f7fd fda7 	bl	8000adc <__aeabi_dcmplt>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <tooClose+0x3ae>
					{
				//					 servo = STRAIGHT;
				htim1.Instance->CCR4 = 155; //right a bit
 8002f94:	4b2d      	ldr	r3, [pc, #180]	; (800304c <tooClose+0x45c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	229b      	movs	r2, #155	; 0x9b
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f9c:	e003      	b.n	8002fa6 <tooClose+0x3b6>
			} else {
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 8002f9e:	4b2b      	ldr	r3, [pc, #172]	; (800304c <tooClose+0x45c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2296      	movs	r2, #150	; 0x96
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
			}
			osDelay(10);
 8002fa6:	200a      	movs	r0, #10
 8002fa8:	f00a fa69 	bl	800d47e <osDelay>

			if (Distance > 4.25) {
 8002fac:	4b28      	ldr	r3, [pc, #160]	; (8003050 <tooClose+0x460>)
 8002fae:	edd3 7a00 	vldr	s15, [r3]
 8002fb2:	eeb1 7a01 	vmov.f32	s14, #17	; 0x40880000  4.250
 8002fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbe:	dd0c      	ble.n	8002fda <tooClose+0x3ea>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8002fc0:	4b24      	ldr	r3, [pc, #144]	; (8003054 <tooClose+0x464>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 8002fc8:	4b22      	ldr	r3, [pc, #136]	; (8003054 <tooClose+0x464>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	63da      	str	r2, [r3, #60]	; 0x3c
				htim1.Instance->CCR4 = STRAIGHT; //centre
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	; (800304c <tooClose+0x45c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2296      	movs	r2, #150	; 0x96
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8002fd8:	e00b      	b.n	8002ff2 <tooClose+0x402>
			}
			prevTime = currTime;
 8002fda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 8002fe2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8002fea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002ff0:	e697      	b.n	8002d22 <tooClose+0x132>
		}
	}
	//	moving = 0;
	//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	2108      	movs	r1, #8
 8002ff6:	4818      	ldr	r0, [pc, #96]	; (8003058 <tooClose+0x468>)
 8002ff8:	f004 fbd8 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2104      	movs	r1, #4
 8003000:	4815      	ldr	r0, [pc, #84]	; (8003058 <tooClose+0x468>)
 8003002:	f004 fbd3 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003006:	2201      	movs	r2, #1
 8003008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800300c:	4813      	ldr	r0, [pc, #76]	; (800305c <tooClose+0x46c>)
 800300e:	f004 fbcd 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003012:	2200      	movs	r2, #0
 8003014:	2120      	movs	r1, #32
 8003016:	4812      	ldr	r0, [pc, #72]	; (8003060 <tooClose+0x470>)
 8003018:	f004 fbc8 	bl	80077ac <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <tooClose+0x45c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2296      	movs	r2, #150	; 0x96
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8003024:	200a      	movs	r0, #10
 8003026:	f00a fa2a 	bl	800d47e <osDelay>
	return;
 800302a:	bf00      	nop
}
 800302c:	37b8      	adds	r7, #184	; 0xb8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	f3af 8000 	nop.w
 8003038:	51eb851f 	.word	0x51eb851f
 800303c:	3fd51eb8 	.word	0x3fd51eb8
 8003040:	51eb851f 	.word	0x51eb851f
 8003044:	bfd51eb8 	.word	0xbfd51eb8
 8003048:	20000420 	.word	0x20000420
 800304c:	20000258 	.word	0x20000258
 8003050:	20000448 	.word	0x20000448
 8003054:	20000378 	.word	0x20000378
 8003058:	40020000 	.word	0x40020000
 800305c:	40021000 	.word	0x40021000
 8003060:	40020800 	.word	0x40020800

08003064 <moveUltraEnd>:
void moveUltraEnd() {
 8003064:	b580      	push	{r7, lr}
 8003066:	b0ae      	sub	sp, #184	; 0xb8
 8003068:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800306a:	2100      	movs	r1, #0
 800306c:	488e      	ldr	r0, [pc, #568]	; (80032a8 <moveUltraEnd+0x244>)
 800306e:	f007 fc53 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003072:	2108      	movs	r1, #8
 8003074:	488c      	ldr	r0, [pc, #560]	; (80032a8 <moveUltraEnd+0x244>)
 8003076:	f007 fc4f 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800307a:	210c      	movs	r1, #12
 800307c:	488b      	ldr	r0, [pc, #556]	; (80032ac <moveUltraEnd+0x248>)
 800307e:	f007 fc4b 	bl	800a918 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8003082:	4b8a      	ldr	r3, [pc, #552]	; (80032ac <moveUltraEnd+0x248>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2296      	movs	r2, #150	; 0x96
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 800308a:	2064      	movs	r0, #100	; 0x64
 800308c:	f00a f9f7 	bl	800d47e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8003090:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003094:	2224      	movs	r2, #36	; 0x24
 8003096:	2100      	movs	r1, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f00c ff47 	bl	800ff2c <memset>
 800309e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80030a2:	653b      	str	r3, [r7, #80]	; 0x50
 80030a4:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80030a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80030aa:	f640 0398 	movw	r3, #2200	; 0x898
 80030ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030b0:	4b7f      	ldr	r3, [pc, #508]	; (80032b0 <moveUltraEnd+0x24c>)
 80030b2:	663b      	str	r3, [r7, #96]	; 0x60
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 80030b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030b8:	2224      	movs	r2, #36	; 0x24
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f00c ff35 	bl	800ff2c <memset>
 80030c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c8:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
 80030ce:	f640 0398 	movw	r3, #2200	; 0x898
 80030d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80030d4:	4b76      	ldr	r3, [pc, #472]	; (80032b0 <moveUltraEnd+0x24c>)
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 80030d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030dc:	4618      	mov	r0, r3
 80030de:	f003 fafd 	bl	80066dc <PIDController_Init>
	PIDController_Init(&pidRight);
 80030e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 faf8 	bl	80066dc <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 80030ec:	4b71      	ldr	r3, [pc, #452]	; (80032b4 <moveUltraEnd+0x250>)
 80030ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 80030f2:	4b71      	ldr	r3, [pc, #452]	; (80032b8 <moveUltraEnd+0x254>)
 80030f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 80030f8:	4b70      	ldr	r3, [pc, #448]	; (80032bc <moveUltraEnd+0x258>)
 80030fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 80030fe:	213c      	movs	r1, #60	; 0x3c
 8003100:	486f      	ldr	r0, [pc, #444]	; (80032c0 <moveUltraEnd+0x25c>)
 8003102:	f007 feef 	bl	800aee4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8003106:	213c      	movs	r1, #60	; 0x3c
 8003108:	486e      	ldr	r0, [pc, #440]	; (80032c4 <moveUltraEnd+0x260>)
 800310a:	f007 feeb 	bl	800aee4 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 800310e:	4b6c      	ldr	r3, [pc, #432]	; (80032c0 <moveUltraEnd+0x25c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8003118:	4b6a      	ldr	r3, [pc, #424]	; (80032c4 <moveUltraEnd+0x260>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8003122:	f003 ffc5 	bl	80070b0 <HAL_GetTick>
 8003126:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 800312a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800312e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	actualAngle = 0.00;
 800314e:	495e      	ldr	r1, [pc, #376]	; (80032c8 <moveUltraEnd+0x264>)
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	e9c1 2300 	strd	r2, r3, [r1]
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 3000;
 800315c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003160:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 3000;
 8003164:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003168:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800316c:	2201      	movs	r2, #1
 800316e:	2108      	movs	r1, #8
 8003170:	4856      	ldr	r0, [pc, #344]	; (80032cc <moveUltraEnd+0x268>)
 8003172:	f004 fb1b 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003176:	2200      	movs	r2, #0
 8003178:	2104      	movs	r1, #4
 800317a:	4854      	ldr	r0, [pc, #336]	; (80032cc <moveUltraEnd+0x268>)
 800317c:	f004 fb16 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003180:	2201      	movs	r2, #1
 8003182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003186:	4852      	ldr	r0, [pc, #328]	; (80032d0 <moveUltraEnd+0x26c>)
 8003188:	f004 fb10 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800318c:	2200      	movs	r2, #0
 800318e:	2120      	movs	r1, #32
 8003190:	4850      	ldr	r0, [pc, #320]	; (80032d4 <moveUltraEnd+0x270>)
 8003192:	f004 fb0b 	bl	80077ac <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8003196:	4b44      	ldr	r3, [pc, #272]	; (80032a8 <moveUltraEnd+0x244>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800319e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 80031a0:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <moveUltraEnd+0x244>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80031a8:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 80031aa:	f003 ff81 	bl	80070b0 <HAL_GetTick>
 80031ae:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 80031b2:	4b49      	ldr	r3, [pc, #292]	; (80032d8 <moveUltraEnd+0x274>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 80031b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80031bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b3c      	cmp	r3, #60	; 0x3c
 80031c4:	d9e7      	bls.n	8003196 <moveUltraEnd+0x132>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 80031c6:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <moveUltraEnd+0x25c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 80031d0:	4b3c      	ldr	r3, [pc, #240]	; (80032c4 <moveUltraEnd+0x260>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80031e4:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <moveUltraEnd+0x25c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d118      	bne.n	8003224 <moveUltraEnd+0x1c0>
				if (leftTick < leftTick_prev)
 80031f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031fa:	429a      	cmp	r2, r3
 80031fc:	da07      	bge.n	800320e <moveUltraEnd+0x1aa>
					diffLeft = leftTick_prev - leftTick;
 80031fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003202:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800320c:	e022      	b.n	8003254 <moveUltraEnd+0x1f0>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 800320e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003212:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003216:	33ff      	adds	r3, #255	; 0xff
 8003218:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800321c:	4413      	add	r3, r2
 800321e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003222:	e017      	b.n	8003254 <moveUltraEnd+0x1f0>
			} else {
				if (leftTick > leftTick_prev)
 8003224:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003228:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800322c:	429a      	cmp	r2, r3
 800322e:	dd07      	ble.n	8003240 <moveUltraEnd+0x1dc>
					diffLeft = leftTick - leftTick_prev;
 8003230:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003234:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800323e:	e009      	b.n	8003254 <moveUltraEnd+0x1f0>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8003240:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003244:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003248:	33ff      	adds	r3, #255	; 0xff
 800324a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800324e:	4413      	add	r3, r2
 8003250:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8003254:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <moveUltraEnd+0x260>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b10      	cmp	r3, #16
 8003260:	d115      	bne.n	800328e <moveUltraEnd+0x22a>
				if (rightTick < rightTick_prev)
 8003262:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003264:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003268:	429a      	cmp	r2, r3
 800326a:	da06      	bge.n	800327a <moveUltraEnd+0x216>
					diffRight = rightTick_prev - rightTick;
 800326c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003270:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003278:	e039      	b.n	80032ee <moveUltraEnd+0x28a>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 800327a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800327c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003280:	33ff      	adds	r3, #255	; 0xff
 8003282:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003286:	4413      	add	r3, r2
 8003288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800328c:	e02f      	b.n	80032ee <moveUltraEnd+0x28a>
			} else {
				if (rightTick > rightTick_prev)
 800328e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003290:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003294:	429a      	cmp	r2, r3
 8003296:	dd21      	ble.n	80032dc <moveUltraEnd+0x278>
					diffRight = rightTick - rightTick_prev;
 8003298:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800329a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032a4:	e023      	b.n	80032ee <moveUltraEnd+0x28a>
 80032a6:	bf00      	nop
 80032a8:	20000378 	.word	0x20000378
 80032ac:	20000258 	.word	0x20000258
 80032b0:	3d4ccccd 	.word	0x3d4ccccd
 80032b4:	44440000 	.word	0x44440000
 80032b8:	4442c000 	.word	0x4442c000
 80032bc:	41b33333 	.word	0x41b33333
 80032c0:	200002a0 	.word	0x200002a0
 80032c4:	20000330 	.word	0x20000330
 80032c8:	20000420 	.word	0x20000420
 80032cc:	40020000 	.word	0x40020000
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40020800 	.word	0x40020800
 80032d8:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 80032dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80032e0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80032e4:	33ff      	adds	r3, #255	; 0xff
 80032e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80032e8:	4413      	add	r3, r2
 80032ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 80032ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80032fa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80032fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003302:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 800330e:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8003312:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 800331e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003322:	ee07 3a90 	vmov	s15, r3
 8003326:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800332a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800332e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003332:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 800333e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003342:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (actualAngle < 0.00) //veering right
 800334e:	4b46      	ldr	r3, [pc, #280]	; (8003468 <moveUltraEnd+0x404>)
 8003350:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	f7fd fbbe 	bl	8000adc <__aeabi_dcmplt>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d006      	beq.n	8003374 <moveUltraEnd+0x310>
					{

				htim1.Instance->CCR4 = 138; //left abit
 8003366:	4b41      	ldr	r3, [pc, #260]	; (800346c <moveUltraEnd+0x408>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	228a      	movs	r2, #138	; 0x8a
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 800336e:	200a      	movs	r0, #10
 8003370:	f00a f885 	bl	800d47e <osDelay>
			}
			if (actualAngle > 0.00) //veering left
 8003374:	4b3c      	ldr	r3, [pc, #240]	; (8003468 <moveUltraEnd+0x404>)
 8003376:	e9d3 0100 	ldrd	r0, r1, [r3]
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	f7fd fbc9 	bl	8000b18 <__aeabi_dcmpgt>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d006      	beq.n	800339a <moveUltraEnd+0x336>
					{

				htim1.Instance->CCR4 = 152; //right a bit
 800338c:	4b37      	ldr	r3, [pc, #220]	; (800346c <moveUltraEnd+0x408>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2298      	movs	r2, #152	; 0x98
 8003392:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 8003394:	200a      	movs	r0, #10
 8003396:	f00a f872 	bl	800d47e <osDelay>
			}
			if (actualAngle == 0.00) {
 800339a:	4b33      	ldr	r3, [pc, #204]	; (8003468 <moveUltraEnd+0x404>)
 800339c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	f7fd fb8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d006      	beq.n	80033c0 <moveUltraEnd+0x35c>
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 80033b2:	4b2e      	ldr	r3, [pc, #184]	; (800346c <moveUltraEnd+0x408>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2296      	movs	r2, #150	; 0x96
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 80033ba:	200a      	movs	r0, #10
 80033bc:	f00a f85f 	bl	800d47e <osDelay>
			}

			prevTime = currTime;
 80033c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 80033c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 80033d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 2) {
 80033d6:	4b26      	ldr	r3, [pc, #152]	; (8003470 <moveUltraEnd+0x40c>)
 80033d8:	edd3 7a00 	vldr	s15, [r3]
 80033dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80033e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e8:	d417      	bmi.n	800341a <moveUltraEnd+0x3b6>
				break;
			}
			sprintf(messageA, "angle %5d\0", (int) (actualAngle));
 80033ea:	4b1f      	ldr	r3, [pc, #124]	; (8003468 <moveUltraEnd+0x404>)
 80033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	f7fd fbb0 	bl	8000b58 <__aeabi_d2iz>
 80033f8:	4602      	mov	r2, r0
 80033fa:	f107 0318 	add.w	r3, r7, #24
 80033fe:	491d      	ldr	r1, [pc, #116]	; (8003474 <moveUltraEnd+0x410>)
 8003400:	4618      	mov	r0, r3
 8003402:	f00d fc1b 	bl	8010c3c <siprintf>
			OLED_ShowString(10, 20, messageA);
 8003406:	f107 0318 	add.w	r3, r7, #24
 800340a:	461a      	mov	r2, r3
 800340c:	2114      	movs	r1, #20
 800340e:	200a      	movs	r0, #10
 8003410:	f003 f8a6 	bl	8006560 <OLED_ShowString>
			OLED_Refresh_Gram();
 8003414:	f002 ff30 	bl	8006278 <OLED_Refresh_Gram>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8003418:	e6bd      	b.n	8003196 <moveUltraEnd+0x132>
				break;
 800341a:	bf00      	nop
		}
	}

//	moving = 0;
	move(1, 0);
 800341c:	2000      	movs	r0, #0
 800341e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003422:	f001 fc93 	bl	8004d4c <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003426:	2201      	movs	r2, #1
 8003428:	2108      	movs	r1, #8
 800342a:	4813      	ldr	r0, [pc, #76]	; (8003478 <moveUltraEnd+0x414>)
 800342c:	f004 f9be 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003430:	2200      	movs	r2, #0
 8003432:	2104      	movs	r1, #4
 8003434:	4810      	ldr	r0, [pc, #64]	; (8003478 <moveUltraEnd+0x414>)
 8003436:	f004 f9b9 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800343a:	2201      	movs	r2, #1
 800343c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003440:	480e      	ldr	r0, [pc, #56]	; (800347c <moveUltraEnd+0x418>)
 8003442:	f004 f9b3 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003446:	2200      	movs	r2, #0
 8003448:	2120      	movs	r1, #32
 800344a:	480d      	ldr	r0, [pc, #52]	; (8003480 <moveUltraEnd+0x41c>)
 800344c:	f004 f9ae 	bl	80077ac <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8003450:	4b06      	ldr	r3, [pc, #24]	; (800346c <moveUltraEnd+0x408>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2296      	movs	r2, #150	; 0x96
 8003456:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8003458:	200a      	movs	r0, #10
 800345a:	f00a f810 	bl	800d47e <osDelay>
	return;
 800345e:	bf00      	nop

}
 8003460:	37b8      	adds	r7, #184	; 0xb8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000420 	.word	0x20000420
 800346c:	20000258 	.word	0x20000258
 8003470:	20000448 	.word	0x20000448
 8003474:	08014858 	.word	0x08014858
 8003478:	40020000 	.word	0x40020000
 800347c:	40021000 	.word	0x40021000
 8003480:	40020800 	.word	0x40020800

08003484 <moveUltraEndLeft>:

void moveUltraEndLeft() {
 8003484:	b580      	push	{r7, lr}
 8003486:	b0ae      	sub	sp, #184	; 0xb8
 8003488:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800348a:	2100      	movs	r1, #0
 800348c:	488e      	ldr	r0, [pc, #568]	; (80036c8 <moveUltraEndLeft+0x244>)
 800348e:	f007 fa43 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003492:	2108      	movs	r1, #8
 8003494:	488c      	ldr	r0, [pc, #560]	; (80036c8 <moveUltraEndLeft+0x244>)
 8003496:	f007 fa3f 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800349a:	210c      	movs	r1, #12
 800349c:	488b      	ldr	r0, [pc, #556]	; (80036cc <moveUltraEndLeft+0x248>)
 800349e:	f007 fa3b 	bl	800a918 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80034a2:	4b8a      	ldr	r3, [pc, #552]	; (80036cc <moveUltraEndLeft+0x248>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2296      	movs	r2, #150	; 0x96
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 80034aa:	2064      	movs	r0, #100	; 0x64
 80034ac:	f009 ffe7 	bl	800d47e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 80034b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034b4:	2224      	movs	r2, #36	; 0x24
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f00c fd37 	bl	800ff2c <memset>
 80034be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80034c2:	653b      	str	r3, [r7, #80]	; 0x50
 80034c4:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80034c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80034ca:	f640 0398 	movw	r3, #2200	; 0x898
 80034ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034d0:	4b7f      	ldr	r3, [pc, #508]	; (80036d0 <moveUltraEndLeft+0x24c>)
 80034d2:	663b      	str	r3, [r7, #96]	; 0x60
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 80034d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034d8:	2224      	movs	r2, #36	; 0x24
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f00c fd25 	bl	800ff2c <memset>
 80034e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80034e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034e8:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34
 80034ee:	f640 0398 	movw	r3, #2200	; 0x898
 80034f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80034f4:	4b76      	ldr	r3, [pc, #472]	; (80036d0 <moveUltraEndLeft+0x24c>)
 80034f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 80034f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034fc:	4618      	mov	r0, r3
 80034fe:	f003 f8ed 	bl	80066dc <PIDController_Init>
	PIDController_Init(&pidRight);
 8003502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003506:	4618      	mov	r0, r3
 8003508:	f003 f8e8 	bl	80066dc <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 800350c:	4b71      	ldr	r3, [pc, #452]	; (80036d4 <moveUltraEndLeft+0x250>)
 800350e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8003512:	4b71      	ldr	r3, [pc, #452]	; (80036d8 <moveUltraEndLeft+0x254>)
 8003514:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 8003518:	4b70      	ldr	r3, [pc, #448]	; (80036dc <moveUltraEndLeft+0x258>)
 800351a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 800351e:	213c      	movs	r1, #60	; 0x3c
 8003520:	486f      	ldr	r0, [pc, #444]	; (80036e0 <moveUltraEndLeft+0x25c>)
 8003522:	f007 fcdf 	bl	800aee4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8003526:	213c      	movs	r1, #60	; 0x3c
 8003528:	486e      	ldr	r0, [pc, #440]	; (80036e4 <moveUltraEndLeft+0x260>)
 800352a:	f007 fcdb 	bl	800aee4 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 800352e:	4b6c      	ldr	r3, [pc, #432]	; (80036e0 <moveUltraEndLeft+0x25c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8003538:	4b6a      	ldr	r3, [pc, #424]	; (80036e4 <moveUltraEndLeft+0x260>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8003542:	f003 fdb5 	bl	80070b0 <HAL_GetTick>
 8003546:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 800354a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800354e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 3000;
 800356e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003572:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 3000;
 8003576:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800357a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800357e:	2201      	movs	r2, #1
 8003580:	2108      	movs	r1, #8
 8003582:	4859      	ldr	r0, [pc, #356]	; (80036e8 <moveUltraEndLeft+0x264>)
 8003584:	f004 f912 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003588:	2200      	movs	r2, #0
 800358a:	2104      	movs	r1, #4
 800358c:	4856      	ldr	r0, [pc, #344]	; (80036e8 <moveUltraEndLeft+0x264>)
 800358e:	f004 f90d 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003592:	2201      	movs	r2, #1
 8003594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003598:	4854      	ldr	r0, [pc, #336]	; (80036ec <moveUltraEndLeft+0x268>)
 800359a:	f004 f907 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800359e:	2200      	movs	r2, #0
 80035a0:	2120      	movs	r1, #32
 80035a2:	4853      	ldr	r0, [pc, #332]	; (80036f0 <moveUltraEndLeft+0x26c>)
 80035a4:	f004 f902 	bl	80077ac <HAL_GPIO_WritePin>

	totalAngle = 0.0;
 80035a8:	4952      	ldr	r1, [pc, #328]	; (80036f4 <moveUltraEndLeft+0x270>)
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	e9c1 2300 	strd	r2, r3, [r1]

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80035b6:	4b44      	ldr	r3, [pc, #272]	; (80036c8 <moveUltraEndLeft+0x244>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80035be:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 80035c0:	4b41      	ldr	r3, [pc, #260]	; (80036c8 <moveUltraEndLeft+0x244>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80035c8:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 80035ca:	f003 fd71 	bl	80070b0 <HAL_GetTick>
 80035ce:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 80035d2:	4b49      	ldr	r3, [pc, #292]	; (80036f8 <moveUltraEndLeft+0x274>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 80035d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80035dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b3c      	cmp	r3, #60	; 0x3c
 80035e4:	d9e7      	bls.n	80035b6 <moveUltraEndLeft+0x132>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 80035e6:	4b3e      	ldr	r3, [pc, #248]	; (80036e0 <moveUltraEndLeft+0x25c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 80035f0:	4b3c      	ldr	r3, [pc, #240]	; (80036e4 <moveUltraEndLeft+0x260>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8003604:	4b36      	ldr	r3, [pc, #216]	; (80036e0 <moveUltraEndLeft+0x25c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b10      	cmp	r3, #16
 8003610:	d118      	bne.n	8003644 <moveUltraEndLeft+0x1c0>
				if (leftTick < leftTick_prev)
 8003612:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003616:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800361a:	429a      	cmp	r2, r3
 800361c:	da07      	bge.n	800362e <moveUltraEndLeft+0x1aa>
					diffLeft = leftTick_prev - leftTick;
 800361e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003622:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800362c:	e022      	b.n	8003674 <moveUltraEndLeft+0x1f0>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 800362e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003632:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003636:	33ff      	adds	r3, #255	; 0xff
 8003638:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800363c:	4413      	add	r3, r2
 800363e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003642:	e017      	b.n	8003674 <moveUltraEndLeft+0x1f0>
			} else {
				if (leftTick > leftTick_prev)
 8003644:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003648:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800364c:	429a      	cmp	r2, r3
 800364e:	dd07      	ble.n	8003660 <moveUltraEndLeft+0x1dc>
					diffLeft = leftTick - leftTick_prev;
 8003650:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003654:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800365e:	e009      	b.n	8003674 <moveUltraEndLeft+0x1f0>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8003660:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003664:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003668:	33ff      	adds	r3, #255	; 0xff
 800366a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800366e:	4413      	add	r3, r2
 8003670:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8003674:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <moveUltraEndLeft+0x260>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b10      	cmp	r3, #16
 8003680:	d115      	bne.n	80036ae <moveUltraEndLeft+0x22a>
				if (rightTick < rightTick_prev)
 8003682:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003688:	429a      	cmp	r2, r3
 800368a:	da06      	bge.n	800369a <moveUltraEndLeft+0x216>
					diffRight = rightTick_prev - rightTick;
 800368c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003690:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003698:	e039      	b.n	800370e <moveUltraEndLeft+0x28a>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 800369a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800369c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80036a0:	33ff      	adds	r3, #255	; 0xff
 80036a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036a6:	4413      	add	r3, r2
 80036a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036ac:	e02f      	b.n	800370e <moveUltraEndLeft+0x28a>
			} else {
				if (rightTick > rightTick_prev)
 80036ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80036b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036b4:	429a      	cmp	r2, r3
 80036b6:	dd21      	ble.n	80036fc <moveUltraEndLeft+0x278>
					diffRight = rightTick - rightTick_prev;
 80036b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80036ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036c4:	e023      	b.n	800370e <moveUltraEndLeft+0x28a>
 80036c6:	bf00      	nop
 80036c8:	20000378 	.word	0x20000378
 80036cc:	20000258 	.word	0x20000258
 80036d0:	3d4ccccd 	.word	0x3d4ccccd
 80036d4:	44440000 	.word	0x44440000
 80036d8:	4442c000 	.word	0x4442c000
 80036dc:	41b33333 	.word	0x41b33333
 80036e0:	200002a0 	.word	0x200002a0
 80036e4:	20000330 	.word	0x20000330
 80036e8:	40020000 	.word	0x40020000
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40020800 	.word	0x40020800
 80036f4:	20000418 	.word	0x20000418
 80036f8:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 80036fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003700:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003704:	33ff      	adds	r3, #255	; 0xff
 8003706:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003708:	4413      	add	r3, r2
 800370a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 800370e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800371a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800371e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003722:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800372a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 800372e:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8003732:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800373a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 800373e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003742:	ee07 3a90 	vmov	s15, r3
 8003746:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800374a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800374e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003752:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 800375e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003762:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800376a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (totalAngle < 0.00) //veering right
 800376e:	4b46      	ldr	r3, [pc, #280]	; (8003888 <moveUltraEndLeft+0x404>)
 8003770:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	f7fd f9ae 	bl	8000adc <__aeabi_dcmplt>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d006      	beq.n	8003794 <moveUltraEndLeft+0x310>
					{

				htim1.Instance->CCR4 = 138; //left abit
 8003786:	4b41      	ldr	r3, [pc, #260]	; (800388c <moveUltraEndLeft+0x408>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	228a      	movs	r2, #138	; 0x8a
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 800378e:	200a      	movs	r0, #10
 8003790:	f009 fe75 	bl	800d47e <osDelay>
			}
			if (totalAngle > 0.00) //veering left
 8003794:	4b3c      	ldr	r3, [pc, #240]	; (8003888 <moveUltraEndLeft+0x404>)
 8003796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	f7fd f9b9 	bl	8000b18 <__aeabi_dcmpgt>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d006      	beq.n	80037ba <moveUltraEndLeft+0x336>
					{

				htim1.Instance->CCR4 = 152; //right a bit
 80037ac:	4b37      	ldr	r3, [pc, #220]	; (800388c <moveUltraEndLeft+0x408>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2298      	movs	r2, #152	; 0x98
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 80037b4:	200a      	movs	r0, #10
 80037b6:	f009 fe62 	bl	800d47e <osDelay>
			}
			if (totalAngle == 0.00) {
 80037ba:	4b33      	ldr	r3, [pc, #204]	; (8003888 <moveUltraEndLeft+0x404>)
 80037bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	f7fd f97e 	bl	8000ac8 <__aeabi_dcmpeq>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d006      	beq.n	80037e0 <moveUltraEndLeft+0x35c>
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 80037d2:	4b2e      	ldr	r3, [pc, #184]	; (800388c <moveUltraEndLeft+0x408>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2296      	movs	r2, #150	; 0x96
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 80037da:	200a      	movs	r0, #10
 80037dc:	f009 fe4f 	bl	800d47e <osDelay>
			}

			prevTime = currTime;
 80037e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 80037e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 80037f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 8) {
 80037f6:	4b26      	ldr	r3, [pc, #152]	; (8003890 <moveUltraEndLeft+0x40c>)
 80037f8:	edd3 7a00 	vldr	s15, [r3]
 80037fc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003808:	d417      	bmi.n	800383a <moveUltraEndLeft+0x3b6>
				break;
			}
			sprintf(messageA, "angle %5d\0", (int) (actualAngle));
 800380a:	4b22      	ldr	r3, [pc, #136]	; (8003894 <moveUltraEndLeft+0x410>)
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	4610      	mov	r0, r2
 8003812:	4619      	mov	r1, r3
 8003814:	f7fd f9a0 	bl	8000b58 <__aeabi_d2iz>
 8003818:	4602      	mov	r2, r0
 800381a:	f107 0318 	add.w	r3, r7, #24
 800381e:	491e      	ldr	r1, [pc, #120]	; (8003898 <moveUltraEndLeft+0x414>)
 8003820:	4618      	mov	r0, r3
 8003822:	f00d fa0b 	bl	8010c3c <siprintf>
			OLED_ShowString(10, 20, messageA);
 8003826:	f107 0318 	add.w	r3, r7, #24
 800382a:	461a      	mov	r2, r3
 800382c:	2114      	movs	r1, #20
 800382e:	200a      	movs	r0, #10
 8003830:	f002 fe96 	bl	8006560 <OLED_ShowString>
			OLED_Refresh_Gram();
 8003834:	f002 fd20 	bl	8006278 <OLED_Refresh_Gram>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8003838:	e6bd      	b.n	80035b6 <moveUltraEndLeft+0x132>
				break;
 800383a:	bf00      	nop
		}
	}

//	moving = 0;
	move(1, 0);
 800383c:	2000      	movs	r0, #0
 800383e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003842:	f001 fa83 	bl	8004d4c <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003846:	2201      	movs	r2, #1
 8003848:	2108      	movs	r1, #8
 800384a:	4814      	ldr	r0, [pc, #80]	; (800389c <moveUltraEndLeft+0x418>)
 800384c:	f003 ffae 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003850:	2200      	movs	r2, #0
 8003852:	2104      	movs	r1, #4
 8003854:	4811      	ldr	r0, [pc, #68]	; (800389c <moveUltraEndLeft+0x418>)
 8003856:	f003 ffa9 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800385a:	2201      	movs	r2, #1
 800385c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003860:	480f      	ldr	r0, [pc, #60]	; (80038a0 <moveUltraEndLeft+0x41c>)
 8003862:	f003 ffa3 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003866:	2200      	movs	r2, #0
 8003868:	2120      	movs	r1, #32
 800386a:	480e      	ldr	r0, [pc, #56]	; (80038a4 <moveUltraEndLeft+0x420>)
 800386c:	f003 ff9e 	bl	80077ac <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <moveUltraEndLeft+0x408>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2296      	movs	r2, #150	; 0x96
 8003876:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8003878:	200a      	movs	r0, #10
 800387a:	f009 fe00 	bl	800d47e <osDelay>
	return;
 800387e:	bf00      	nop

}
 8003880:	37b8      	adds	r7, #184	; 0xb8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000418 	.word	0x20000418
 800388c:	20000258 	.word	0x20000258
 8003890:	20000448 	.word	0x20000448
 8003894:	20000420 	.word	0x20000420
 8003898:	08014858 	.word	0x08014858
 800389c:	40020000 	.word	0x40020000
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40020800 	.word	0x40020800

080038a8 <sendToRPI>:
/**
 * @brief send msg to RPI through UART after execute command
 * @param msg[] for the message to be sent
 * @retval None
 */
void sendToRPI(char *msg) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), 0xFFFF);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fc fc8d 	bl	80001d0 <strlen>
 80038b6:	4603      	mov	r3, r0
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4803      	ldr	r0, [pc, #12]	; (80038d0 <sendToRPI+0x28>)
 80038c2:	f008 fca0 	bl	800c206 <HAL_UART_Transmit>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	200003c0 	.word	0x200003c0
 80038d4:	00000000 	.word	0x00000000

080038d8 <moveGyroPID>:

//gyro for straight
void moveGyroPID(float distance, int forward) {
 80038d8:	b5b0      	push	{r4, r5, r7, lr}
 80038da:	b0b2      	sub	sp, #200	; 0xc8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	ed87 0a01 	vstr	s0, [r7, #4]
 80038e2:	6038      	str	r0, [r7, #0]

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80038e4:	2100      	movs	r1, #0
 80038e6:	489c      	ldr	r0, [pc, #624]	; (8003b58 <moveGyroPID+0x280>)
 80038e8:	f007 f816 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80038ec:	2108      	movs	r1, #8
 80038ee:	489a      	ldr	r0, [pc, #616]	; (8003b58 <moveGyroPID+0x280>)
 80038f0:	f007 f812 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80038f4:	210c      	movs	r1, #12
 80038f6:	4899      	ldr	r0, [pc, #612]	; (8003b5c <moveGyroPID+0x284>)
 80038f8:	f007 f80e 	bl	800a918 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80038fc:	4b97      	ldr	r3, [pc, #604]	; (8003b5c <moveGyroPID+0x284>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2296      	movs	r2, #150	; 0x96
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(40);
 8003904:	2028      	movs	r0, #40	; 0x28
 8003906:	f009 fdba 	bl	800d47e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI, 1900, 2100,
 800390a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800390e:	2224      	movs	r2, #36	; 0x24
 8003910:	2100      	movs	r1, #0
 8003912:	4618      	mov	r0, r3
 8003914:	f00c fb0a 	bl	800ff2c <memset>
 8003918:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800391c:	65bb      	str	r3, [r7, #88]	; 0x58
 800391e:	f240 736c 	movw	r3, #1900	; 0x76c
 8003922:	663b      	str	r3, [r7, #96]	; 0x60
 8003924:	f640 0334 	movw	r3, #2100	; 0x834
 8003928:	667b      	str	r3, [r7, #100]	; 0x64
 800392a:	4b8d      	ldr	r3, [pc, #564]	; (8003b60 <moveGyroPID+0x288>)
 800392c:	66bb      	str	r3, [r7, #104]	; 0x68
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI, 1900, 2100,
 800392e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003932:	2224      	movs	r2, #36	; 0x24
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f00c faf8 	bl	800ff2c <memset>
 800393c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003940:	637b      	str	r3, [r7, #52]	; 0x34
 8003942:	f240 736c 	movw	r3, #1900	; 0x76c
 8003946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003948:	f640 0334 	movw	r3, #2100	; 0x834
 800394c:	643b      	str	r3, [r7, #64]	; 0x40
 800394e:	4b84      	ldr	r3, [pc, #528]	; (8003b60 <moveGyroPID+0x288>)
 8003950:	647b      	str	r3, [r7, #68]	; 0x44
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8003952:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003956:	4618      	mov	r0, r3
 8003958:	f002 fec0 	bl	80066dc <PIDController_Init>
	PIDController_Init(&pidRight);
 800395c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003960:	4618      	mov	r0, r3
 8003962:	f002 febb 	bl	80066dc <PIDController_Init>

	//reset angle
	actualAngle = 0;
 8003966:	497f      	ldr	r1, [pc, #508]	; (8003b64 <moveGyroPID+0x28c>)
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	e9c1 2300 	strd	r2, r3, [r1]

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8003974:	4b7c      	ldr	r3, [pc, #496]	; (8003b68 <moveGyroPID+0x290>)
 8003976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float wheel_rotationTicksR = 779; // for back right wheel
 800397a:	4b7c      	ldr	r3, [pc, #496]	; (8003b6c <moveGyroPID+0x294>)
 800397c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	float wheel_circumference = 21.1; // NEED TO MEASURE AND CHANGE
 8003980:	4b7b      	ldr	r3, [pc, #492]	; (8003b70 <moveGyroPID+0x298>)
 8003982:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8003986:	213c      	movs	r1, #60	; 0x3c
 8003988:	487a      	ldr	r0, [pc, #488]	; (8003b74 <moveGyroPID+0x29c>)
 800398a:	f007 faab 	bl	800aee4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 800398e:	213c      	movs	r1, #60	; 0x3c
 8003990:	4879      	ldr	r0, [pc, #484]	; (8003b78 <moveGyroPID+0x2a0>)
 8003992:	f007 faa7 	bl	800aee4 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003996:	4b77      	ldr	r3, [pc, #476]	; (8003b74 <moveGyroPID+0x29c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 80039a0:	4b75      	ldr	r3, [pc, #468]	; (8003b78 <moveGyroPID+0x2a0>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 80039aa:	f003 fb81 	bl	80070b0 <HAL_GetTick>
 80039ae:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	uint32_t prevTime = startTime;
 80039b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float totalDistance_right = 0;
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int diffRight = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distErrOffset;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 80039d6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80039da:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	uint16_t pwmValC = 2000;
 80039de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80039e2:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if (forward) {
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d015      	beq.n	8003a18 <moveGyroPID+0x140>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80039ec:	2201      	movs	r2, #1
 80039ee:	2108      	movs	r1, #8
 80039f0:	4862      	ldr	r0, [pc, #392]	; (8003b7c <moveGyroPID+0x2a4>)
 80039f2:	f003 fedb 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80039f6:	2200      	movs	r2, #0
 80039f8:	2104      	movs	r1, #4
 80039fa:	4860      	ldr	r0, [pc, #384]	; (8003b7c <moveGyroPID+0x2a4>)
 80039fc:	f003 fed6 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003a00:	2201      	movs	r2, #1
 8003a02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a06:	485e      	ldr	r0, [pc, #376]	; (8003b80 <moveGyroPID+0x2a8>)
 8003a08:	f003 fed0 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2120      	movs	r1, #32
 8003a10:	485c      	ldr	r0, [pc, #368]	; (8003b84 <moveGyroPID+0x2ac>)
 8003a12:	f003 fecb 	bl	80077ac <HAL_GPIO_WritePin>
 8003a16:	e014      	b.n	8003a42 <moveGyroPID+0x16a>
	} else {
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2108      	movs	r1, #8
 8003a1c:	4857      	ldr	r0, [pc, #348]	; (8003b7c <moveGyroPID+0x2a4>)
 8003a1e:	f003 fec5 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8003a22:	2201      	movs	r2, #1
 8003a24:	2104      	movs	r1, #4
 8003a26:	4855      	ldr	r0, [pc, #340]	; (8003b7c <moveGyroPID+0x2a4>)
 8003a28:	f003 fec0 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a32:	4853      	ldr	r0, [pc, #332]	; (8003b80 <moveGyroPID+0x2a8>)
 8003a34:	f003 feba 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8003a38:	2201      	movs	r2, #1
 8003a3a:	2120      	movs	r1, #32
 8003a3c:	4851      	ldr	r0, [pc, #324]	; (8003b84 <moveGyroPID+0x2ac>)
 8003a3e:	f003 feb5 	bl	80077ac <HAL_GPIO_WritePin>
	//		else
	//			distErrOffset = DISTANCE_ERROR_OFFSETR;
	//	}

	// outdoor
	if (forward) {
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d045      	beq.n	8003ad4 <moveGyroPID+0x1fc>
		if (distance == 10)
 8003a48:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a4c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a50:	eef4 7a47 	vcmp.f32	s15, s14
 8003a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a58:	d103      	bne.n	8003a62 <moveGyroPID+0x18a>
			distErrOffset = -0.2;
 8003a5a:	4b4b      	ldr	r3, [pc, #300]	; (8003b88 <moveGyroPID+0x2b0>)
 8003a5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a60:	e0a7      	b.n	8003bb2 <moveGyroPID+0x2da>
		else if (distance == 20)
 8003a62:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a66:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003a6a:	eef4 7a47 	vcmp.f32	s15, s14
 8003a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a72:	d103      	bne.n	8003a7c <moveGyroPID+0x1a4>
			distErrOffset = -0.15;
 8003a74:	4b45      	ldr	r3, [pc, #276]	; (8003b8c <moveGyroPID+0x2b4>)
 8003a76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a7a:	e09a      	b.n	8003bb2 <moveGyroPID+0x2da>
		else if (distance == 30)
 8003a7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a80:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003a84:	eef4 7a47 	vcmp.f32	s15, s14
 8003a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8c:	d103      	bne.n	8003a96 <moveGyroPID+0x1be>
			distErrOffset = DISTANCE_ERROR_OFFSETF;
 8003a8e:	4b40      	ldr	r3, [pc, #256]	; (8003b90 <moveGyroPID+0x2b8>)
 8003a90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a94:	e08d      	b.n	8003bb2 <moveGyroPID+0x2da>
		else if (distance == 40)
 8003a96:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a9a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003b94 <moveGyroPID+0x2bc>
 8003a9e:	eef4 7a47 	vcmp.f32	s15, s14
 8003aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa6:	d103      	bne.n	8003ab0 <moveGyroPID+0x1d8>
			distErrOffset = DISTANCE_ERROR_OFFSETF;
 8003aa8:	4b39      	ldr	r3, [pc, #228]	; (8003b90 <moveGyroPID+0x2b8>)
 8003aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003aae:	e080      	b.n	8003bb2 <moveGyroPID+0x2da>
		else if (distance == 50)
 8003ab0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ab4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003b98 <moveGyroPID+0x2c0>
 8003ab8:	eef4 7a47 	vcmp.f32	s15, s14
 8003abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac0:	d104      	bne.n	8003acc <moveGyroPID+0x1f4>
			distErrOffset = 0;
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003aca:	e072      	b.n	8003bb2 <moveGyroPID+0x2da>
		else
			distErrOffset = DISTANCE_ERROR_OFFSETF;
 8003acc:	4b30      	ldr	r3, [pc, #192]	; (8003b90 <moveGyroPID+0x2b8>)
 8003ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ad2:	e06e      	b.n	8003bb2 <moveGyroPID+0x2da>
	} else {
		if (distance == 10)
 8003ad4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ad8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003adc:	eef4 7a47 	vcmp.f32	s15, s14
 8003ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae4:	d103      	bne.n	8003aee <moveGyroPID+0x216>
			distErrOffset = -0.1;
 8003ae6:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <moveGyroPID+0x2c4>)
 8003ae8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003aec:	e061      	b.n	8003bb2 <moveGyroPID+0x2da>
		else if (distance == 20)
 8003aee:	edd7 7a01 	vldr	s15, [r7, #4]
 8003af2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003af6:	eef4 7a47 	vcmp.f32	s15, s14
 8003afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afe:	d103      	bne.n	8003b08 <moveGyroPID+0x230>
			distErrOffset = DISTANCE_ERROR_OFFSETR;
 8003b00:	4b27      	ldr	r3, [pc, #156]	; (8003ba0 <moveGyroPID+0x2c8>)
 8003b02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b06:	e054      	b.n	8003bb2 <moveGyroPID+0x2da>
		else if (distance == 30)
 8003b08:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b0c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003b10:	eef4 7a47 	vcmp.f32	s15, s14
 8003b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b18:	d103      	bne.n	8003b22 <moveGyroPID+0x24a>
			distErrOffset = -0.03;
 8003b1a:	4b22      	ldr	r3, [pc, #136]	; (8003ba4 <moveGyroPID+0x2cc>)
 8003b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b20:	e047      	b.n	8003bb2 <moveGyroPID+0x2da>
		else if (distance == 40)
 8003b22:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b26:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003b94 <moveGyroPID+0x2bc>
 8003b2a:	eef4 7a47 	vcmp.f32	s15, s14
 8003b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b32:	d103      	bne.n	8003b3c <moveGyroPID+0x264>
			distErrOffset = -0.02;
 8003b34:	4b1c      	ldr	r3, [pc, #112]	; (8003ba8 <moveGyroPID+0x2d0>)
 8003b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b3a:	e03a      	b.n	8003bb2 <moveGyroPID+0x2da>
		else if (distance == 50)
 8003b3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b40:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003b98 <moveGyroPID+0x2c0>
 8003b44:	eef4 7a47 	vcmp.f32	s15, s14
 8003b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4c:	d12e      	bne.n	8003bac <moveGyroPID+0x2d4>
			distErrOffset = 0;
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b56:	e02c      	b.n	8003bb2 <moveGyroPID+0x2da>
 8003b58:	20000378 	.word	0x20000378
 8003b5c:	20000258 	.word	0x20000258
 8003b60:	3d4ccccd 	.word	0x3d4ccccd
 8003b64:	20000420 	.word	0x20000420
 8003b68:	44440000 	.word	0x44440000
 8003b6c:	4442c000 	.word	0x4442c000
 8003b70:	41a8cccd 	.word	0x41a8cccd
 8003b74:	200002a0 	.word	0x200002a0
 8003b78:	20000330 	.word	0x20000330
 8003b7c:	40020000 	.word	0x40020000
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40020800 	.word	0x40020800
 8003b88:	be4ccccd 	.word	0xbe4ccccd
 8003b8c:	be19999a 	.word	0xbe19999a
 8003b90:	bd0f5c29 	.word	0xbd0f5c29
 8003b94:	42200000 	.word	0x42200000
 8003b98:	42480000 	.word	0x42480000
 8003b9c:	bdcccccd 	.word	0xbdcccccd
 8003ba0:	bd75c28f 	.word	0xbd75c28f
 8003ba4:	bcf5c28f 	.word	0xbcf5c28f
 8003ba8:	bca3d70a 	.word	0xbca3d70a
		else
			distErrOffset = DISTANCE_ERROR_OFFSETR;
 8003bac:	4bd2      	ldr	r3, [pc, #840]	; (8003ef8 <moveGyroPID+0x620>)
 8003bae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	}

	/*Infinite loop*/
	for (;;) {
		if (totalDistance_left >= (distance + distanceError) * 0.9
 8003bb2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8003bb6:	f7fc fcc7 	bl	8000548 <__aeabi_f2d>
 8003bba:	4604      	mov	r4, r0
 8003bbc:	460d      	mov	r5, r1
 8003bbe:	ed97 7a01 	vldr	s14, [r7, #4]
 8003bc2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bca:	ee17 0a90 	vmov	r0, s15
 8003bce:	f7fc fcbb 	bl	8000548 <__aeabi_f2d>
 8003bd2:	a3c3      	add	r3, pc, #780	; (adr r3, 8003ee0 <moveGyroPID+0x608>)
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f7fc fd0e 	bl	80005f8 <__aeabi_dmul>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4620      	mov	r0, r4
 8003be2:	4629      	mov	r1, r5
 8003be4:	f7fc ff8e 	bl	8000b04 <__aeabi_dcmpge>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d11d      	bne.n	8003c2a <moveGyroPID+0x352>
				|| totalDistance_right >= (distance + distanceError) * 0.9) {
 8003bee:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8003bf2:	f7fc fca9 	bl	8000548 <__aeabi_f2d>
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	460d      	mov	r5, r1
 8003bfa:	ed97 7a01 	vldr	s14, [r7, #4]
 8003bfe:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c06:	ee17 0a90 	vmov	r0, s15
 8003c0a:	f7fc fc9d 	bl	8000548 <__aeabi_f2d>
 8003c0e:	a3b4      	add	r3, pc, #720	; (adr r3, 8003ee0 <moveGyroPID+0x608>)
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f7fc fcf0 	bl	80005f8 <__aeabi_dmul>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	4629      	mov	r1, r5
 8003c20:	f7fc ff70 	bl	8000b04 <__aeabi_dcmpge>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <moveGyroPID+0x362>
			pwmValA = 1000;
 8003c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c2e:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			pwmValC = 1000;
 8003c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c36:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

		}

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8003c3a:	4bb0      	ldr	r3, [pc, #704]	; (8003efc <moveGyroPID+0x624>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8003c42:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8003c44:	4bad      	ldr	r3, [pc, #692]	; (8003efc <moveGyroPID+0x624>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8003c4c:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 8003c4e:	f003 fa2f 	bl	80070b0 <HAL_GetTick>
 8003c52:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		moving = 1;
 8003c56:	4baa      	ldr	r3, [pc, #680]	; (8003f00 <moveGyroPID+0x628>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 8003c5c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003c60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b3c      	cmp	r3, #60	; 0x3c
 8003c68:	d9a3      	bls.n	8003bb2 <moveGyroPID+0x2da>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8003c6a:	4ba6      	ldr	r3, [pc, #664]	; (8003f04 <moveGyroPID+0x62c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8003c74:	4ba4      	ldr	r3, [pc, #656]	; (8003f08 <moveGyroPID+0x630>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			diffLeft = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			diffRight = 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8003c8a:	4b9e      	ldr	r3, [pc, #632]	; (8003f04 <moveGyroPID+0x62c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0310 	and.w	r3, r3, #16
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d118      	bne.n	8003cca <moveGyroPID+0x3f2>
				if (leftTick < leftTick_prev)
 8003c98:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003c9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	da07      	bge.n	8003cb4 <moveGyroPID+0x3dc>
					diffLeft = leftTick_prev - leftTick;
 8003ca4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cb2:	e022      	b.n	8003cfa <moveGyroPID+0x422>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8003cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cb8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003cbc:	33ff      	adds	r3, #255	; 0xff
 8003cbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cc8:	e017      	b.n	8003cfa <moveGyroPID+0x422>
			} else {
				if (leftTick > leftTick_prev)
 8003cca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003cce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	dd07      	ble.n	8003ce6 <moveGyroPID+0x40e>
					diffLeft = leftTick - leftTick_prev;
 8003cd6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003cda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ce4:	e009      	b.n	8003cfa <moveGyroPID+0x422>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8003ce6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cea:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003cee:	33ff      	adds	r3, #255	; 0xff
 8003cf0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8003cfa:	4b83      	ldr	r3, [pc, #524]	; (8003f08 <moveGyroPID+0x630>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b10      	cmp	r3, #16
 8003d06:	d118      	bne.n	8003d3a <moveGyroPID+0x462>
				if (rightTick < rightTick_prev)
 8003d08:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003d0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d10:	429a      	cmp	r2, r3
 8003d12:	da07      	bge.n	8003d24 <moveGyroPID+0x44c>
					diffRight = rightTick_prev - rightTick;
 8003d14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d22:	e022      	b.n	8003d6a <moveGyroPID+0x492>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 8003d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d28:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003d2c:	33ff      	adds	r3, #255	; 0xff
 8003d2e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d32:	4413      	add	r3, r2
 8003d34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d38:	e017      	b.n	8003d6a <moveGyroPID+0x492>
			} else {
				if (rightTick > rightTick_prev)
 8003d3a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003d3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d42:	429a      	cmp	r2, r3
 8003d44:	dd07      	ble.n	8003d56 <moveGyroPID+0x47e>
					diffRight = rightTick - rightTick_prev;
 8003d46:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003d4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d54:	e009      	b.n	8003d6a <moveGyroPID+0x492>
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8003d56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d5a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003d5e:	33ff      	adds	r3, #255	; 0xff
 8003d60:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003d64:	4413      	add	r3, r2
 8003d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8003d6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d76:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8003d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d7e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d86:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
					* wheel_circumference;
			totalDistance_left += distLeft;
 8003d8a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003d8e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d96:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8003d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003da6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dae:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
					* wheel_circumference;
			totalDistance_right += distRight;
 8003dba:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003dbe:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dc6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
			// 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.

#define pwmValAadjust 300;
#define pwmValBadjust 425;

			if (forward) {
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d030      	beq.n	8003e32 <moveGyroPID+0x55a>

				pwmValA = PIDController_Update(&pidLeft,
 8003dd0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003dd4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ddc:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8003de0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003de4:	4611      	mov	r1, r2
 8003de6:	edd7 0a2e 	vldr	s1, [r7, #184]	; 0xb8
 8003dea:	eeb0 0a67 	vmov.f32	s0, s15
 8003dee:	4618      	mov	r0, r3
 8003df0:	f002 fc8c 	bl	800670c <PIDController_Update>
 8003df4:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF,
						totalDistance_left, pwmValA) - pwmValAadjust
 8003df6:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft,
 8003df8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003dfc:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
				;

				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8003e00:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003e04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e0c:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8003e10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e14:	4611      	mov	r1, r2
 8003e16:	eef0 0a67 	vmov.f32	s1, s15
 8003e1a:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f002 fc74 	bl	800670c <PIDController_Update>
 8003e24:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF, pwmValC)
						+ pwmValBadjust
 8003e26:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8003e28:	f203 13a9 	addw	r3, r3, #425	; 0x1a9
 8003e2c:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8003e30:	e023      	b.n	8003e7a <moveGyroPID+0x5a2>
				;
			} else {
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8003e32:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8003e36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	edd7 0a2e 	vldr	s1, [r7, #184]	; 0xb8
 8003e40:	ed97 0a2d 	vldr	s0, [r7, #180]	; 0xb4
 8003e44:	4618      	mov	r0, r3
 8003e46:	f002 fc61 	bl	800670c <PIDController_Update>
 8003e4a:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR, pwmValA)
						- pwmValAadjust
 8003e4c:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8003e4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e52:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
				;

				pwmValC = PIDController_Update(&pidRight,
 8003e56:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8003e5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e5e:	4611      	mov	r1, r2
 8003e60:	edd7 0a2d 	vldr	s1, [r7, #180]	; 0xb4
 8003e64:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f002 fc4f 	bl	800670c <PIDController_Update>
 8003e6e:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR,
						totalDistance_right, pwmValC) + pwmValBadjust
 8003e70:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight,
 8003e72:	f203 13a9 	addw	r3, r3, #425	; 0x1a9
 8003e76:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
//				pwmValC = PIDController_Update(&pidRight,
//						totalDistance_left * STRAIGHTRATIOR,
//						totalDistance_right, pwmValC);
//			}

			distanceError = distErrOffset * distance;
 8003e7a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003e7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e86:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (forward) {
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d041      	beq.n	8003f14 <moveGyroPID+0x63c>
				if (actualAngle < -0.33) //veering right
 8003e90:	4b1e      	ldr	r3, [pc, #120]	; (8003f0c <moveGyroPID+0x634>)
 8003e92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e96:	a314      	add	r3, pc, #80	; (adr r3, 8003ee8 <moveGyroPID+0x610>)
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	f7fc fe1e 	bl	8000adc <__aeabi_dcmplt>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <moveGyroPID+0x5d8>
						{

					htim1.Instance->CCR4 = 138; //left abit. prev: 138
 8003ea6:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <moveGyroPID+0x638>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	228a      	movs	r2, #138	; 0x8a
 8003eac:	641a      	str	r2, [r3, #64]	; 0x40
 8003eae:	e055      	b.n	8003f5c <moveGyroPID+0x684>
				} else if (actualAngle > 0.33) //veering left
 8003eb0:	4b16      	ldr	r3, [pc, #88]	; (8003f0c <moveGyroPID+0x634>)
 8003eb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003eb6:	a30e      	add	r3, pc, #56	; (adr r3, 8003ef0 <moveGyroPID+0x618>)
 8003eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebc:	f7fc fe2c 	bl	8000b18 <__aeabi_dcmpgt>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d004      	beq.n	8003ed0 <moveGyroPID+0x5f8>
						{

					htim1.Instance->CCR4 = 155; //right a bit. prev: 152
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <moveGyroPID+0x638>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	229b      	movs	r2, #155	; 0x9b
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40
 8003ece:	e045      	b.n	8003f5c <moveGyroPID+0x684>
				} else {
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <moveGyroPID+0x638>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2296      	movs	r2, #150	; 0x96
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40
 8003ed8:	e040      	b.n	8003f5c <moveGyroPID+0x684>
 8003eda:	bf00      	nop
 8003edc:	f3af 8000 	nop.w
 8003ee0:	cccccccd 	.word	0xcccccccd
 8003ee4:	3feccccc 	.word	0x3feccccc
 8003ee8:	51eb851f 	.word	0x51eb851f
 8003eec:	bfd51eb8 	.word	0xbfd51eb8
 8003ef0:	51eb851f 	.word	0x51eb851f
 8003ef4:	3fd51eb8 	.word	0x3fd51eb8
 8003ef8:	bd75c28f 	.word	0xbd75c28f
 8003efc:	20000378 	.word	0x20000378
 8003f00:	20000414 	.word	0x20000414
 8003f04:	200002a0 	.word	0x200002a0
 8003f08:	20000330 	.word	0x20000330
 8003f0c:	20000420 	.word	0x20000420
 8003f10:	20000258 	.word	0x20000258
				}

			} else {
				if (actualAngle > 0.33) //veering left
 8003f14:	4b42      	ldr	r3, [pc, #264]	; (8004020 <moveGyroPID+0x748>)
 8003f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f1a:	a33d      	add	r3, pc, #244	; (adr r3, 8004010 <moveGyroPID+0x738>)
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f7fc fdfa 	bl	8000b18 <__aeabi_dcmpgt>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d004      	beq.n	8003f34 <moveGyroPID+0x65c>
						{
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = 138; //left abit
 8003f2a:	4b3e      	ldr	r3, [pc, #248]	; (8004024 <moveGyroPID+0x74c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	228a      	movs	r2, #138	; 0x8a
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
 8003f32:	e013      	b.n	8003f5c <moveGyroPID+0x684>
				} else if (actualAngle < -0.33) //veering right
 8003f34:	4b3a      	ldr	r3, [pc, #232]	; (8004020 <moveGyroPID+0x748>)
 8003f36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f3a:	a337      	add	r3, pc, #220	; (adr r3, 8004018 <moveGyroPID+0x740>)
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f7fc fdcc 	bl	8000adc <__aeabi_dcmplt>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d004      	beq.n	8003f54 <moveGyroPID+0x67c>
						{
					//					 servo = STRAIGHT;
					htim1.Instance->CCR4 = 155; //right a bit
 8003f4a:	4b36      	ldr	r3, [pc, #216]	; (8004024 <moveGyroPID+0x74c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	229b      	movs	r2, #155	; 0x9b
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40
 8003f52:	e003      	b.n	8003f5c <moveGyroPID+0x684>
				} else {
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 8003f54:	4b33      	ldr	r3, [pc, #204]	; (8004024 <moveGyroPID+0x74c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2296      	movs	r2, #150	; 0x96
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40
				}
			}
			osDelay(10);
 8003f5c:	200a      	movs	r0, #10
 8003f5e:	f009 fa8e 	bl	800d47e <osDelay>

			if (totalDistance_left >= (distance + distanceError)
 8003f62:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f66:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f6e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003f72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f7a:	da0c      	bge.n	8003f96 <moveGyroPID+0x6be>
					|| totalDistance_right >= (distance + distanceError)) {
 8003f7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f80:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f88:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003f8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f94:	db0c      	blt.n	8003fb0 <moveGyroPID+0x6d8>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <moveGyroPID+0x750>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 8003f9e:	4b22      	ldr	r3, [pc, #136]	; (8004028 <moveGyroPID+0x750>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	63da      	str	r2, [r3, #60]	; 0x3c
				htim1.Instance->CCR4 = STRAIGHT; //centre
 8003fa6:	4b1f      	ldr	r3, [pc, #124]	; (8004024 <moveGyroPID+0x74c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2296      	movs	r2, #150	; 0x96
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40
				//				sprintf(messageB, "SRight: %2d\0", pwmValC);
				//				OLED_ShowString(10, 40, messageB);
				//				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
				//				OLED_ShowString(10, 50, messageB);
				//				OLED_Refresh_Gram();
				break;
 8003fae:	e00c      	b.n	8003fca <moveGyroPID+0x6f2>
			//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
			//			OLED_ShowString(10, 30, messageA);
			//			sprintf(messageB, "SRight: %2d\0", diffRight);
			//			OLED_ShowString(10, 40, messageB);

			prevTime = currTime;
 8003fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			leftTick_prev = leftTick;
 8003fb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			rightTick_prev = rightTick;
 8003fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		if (totalDistance_left >= (distance + distanceError) * 0.9
 8003fc8:	e5f3      	b.n	8003bb2 <moveGyroPID+0x2da>
		}
	}
	//	moving = 0;
	//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003fca:	2201      	movs	r2, #1
 8003fcc:	2108      	movs	r1, #8
 8003fce:	4817      	ldr	r0, [pc, #92]	; (800402c <moveGyroPID+0x754>)
 8003fd0:	f003 fbec 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2104      	movs	r1, #4
 8003fd8:	4814      	ldr	r0, [pc, #80]	; (800402c <moveGyroPID+0x754>)
 8003fda:	f003 fbe7 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fe4:	4812      	ldr	r0, [pc, #72]	; (8004030 <moveGyroPID+0x758>)
 8003fe6:	f003 fbe1 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003fea:	2200      	movs	r2, #0
 8003fec:	2120      	movs	r1, #32
 8003fee:	4811      	ldr	r0, [pc, #68]	; (8004034 <moveGyroPID+0x75c>)
 8003ff0:	f003 fbdc 	bl	80077ac <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <moveGyroPID+0x74c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2296      	movs	r2, #150	; 0x96
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8003ffc:	200a      	movs	r0, #10
 8003ffe:	f009 fa3e 	bl	800d47e <osDelay>
	return;
 8004002:	bf00      	nop
}
 8004004:	37c8      	adds	r7, #200	; 0xc8
 8004006:	46bd      	mov	sp, r7
 8004008:	bdb0      	pop	{r4, r5, r7, pc}
 800400a:	bf00      	nop
 800400c:	f3af 8000 	nop.w
 8004010:	51eb851f 	.word	0x51eb851f
 8004014:	3fd51eb8 	.word	0x3fd51eb8
 8004018:	51eb851f 	.word	0x51eb851f
 800401c:	bfd51eb8 	.word	0xbfd51eb8
 8004020:	20000420 	.word	0x20000420
 8004024:	20000258 	.word	0x20000258
 8004028:	20000378 	.word	0x20000378
 800402c:	40020000 	.word	0x40020000
 8004030:	40021000 	.word	0x40021000
 8004034:	40020800 	.word	0x40020800

08004038 <moveGyroPIDFast>:

//gyro fast for straight
void moveGyroPIDFast(float distance, int forward) {
 8004038:	b5b0      	push	{r4, r5, r7, lr}
 800403a:	b0b2      	sub	sp, #200	; 0xc8
 800403c:	af00      	add	r7, sp, #0
 800403e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004042:	6038      	str	r0, [r7, #0]

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8004044:	2100      	movs	r1, #0
 8004046:	489c      	ldr	r0, [pc, #624]	; (80042b8 <moveGyroPIDFast+0x280>)
 8004048:	f006 fc66 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800404c:	2108      	movs	r1, #8
 800404e:	489a      	ldr	r0, [pc, #616]	; (80042b8 <moveGyroPIDFast+0x280>)
 8004050:	f006 fc62 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004054:	210c      	movs	r1, #12
 8004056:	4899      	ldr	r0, [pc, #612]	; (80042bc <moveGyroPIDFast+0x284>)
 8004058:	f006 fc5e 	bl	800a918 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 800405c:	4b97      	ldr	r3, [pc, #604]	; (80042bc <moveGyroPIDFast+0x284>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2296      	movs	r2, #150	; 0x96
 8004062:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(40);
 8004064:	2028      	movs	r0, #40	; 0x28
 8004066:	f009 fa0a 	bl	800d47e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI, 3350, 3650,
 800406a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800406e:	2224      	movs	r2, #36	; 0x24
 8004070:	2100      	movs	r1, #0
 8004072:	4618      	mov	r0, r3
 8004074:	f00b ff5a 	bl	800ff2c <memset>
 8004078:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800407c:	65bb      	str	r3, [r7, #88]	; 0x58
 800407e:	f640 5316 	movw	r3, #3350	; 0xd16
 8004082:	663b      	str	r3, [r7, #96]	; 0x60
 8004084:	f640 6342 	movw	r3, #3650	; 0xe42
 8004088:	667b      	str	r3, [r7, #100]	; 0x64
 800408a:	4b8d      	ldr	r3, [pc, #564]	; (80042c0 <moveGyroPIDFast+0x288>)
 800408c:	66bb      	str	r3, [r7, #104]	; 0x68
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI, 3350, 3650,
 800408e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004092:	2224      	movs	r2, #36	; 0x24
 8004094:	2100      	movs	r1, #0
 8004096:	4618      	mov	r0, r3
 8004098:	f00b ff48 	bl	800ff2c <memset>
 800409c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80040a0:	637b      	str	r3, [r7, #52]	; 0x34
 80040a2:	f640 5316 	movw	r3, #3350	; 0xd16
 80040a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a8:	f640 6342 	movw	r3, #3650	; 0xe42
 80040ac:	643b      	str	r3, [r7, #64]	; 0x40
 80040ae:	4b84      	ldr	r3, [pc, #528]	; (80042c0 <moveGyroPIDFast+0x288>)
 80040b0:	647b      	str	r3, [r7, #68]	; 0x44
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 80040b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040b6:	4618      	mov	r0, r3
 80040b8:	f002 fb10 	bl	80066dc <PIDController_Init>
	PIDController_Init(&pidRight);
 80040bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80040c0:	4618      	mov	r0, r3
 80040c2:	f002 fb0b 	bl	80066dc <PIDController_Init>

	//reset angle
	actualAngle = 0;
 80040c6:	497f      	ldr	r1, [pc, #508]	; (80042c4 <moveGyroPIDFast+0x28c>)
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	e9c1 2300 	strd	r2, r3, [r1]

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 80040d4:	4b7c      	ldr	r3, [pc, #496]	; (80042c8 <moveGyroPIDFast+0x290>)
 80040d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float wheel_rotationTicksR = 779; // for back right wheel
 80040da:	4b7c      	ldr	r3, [pc, #496]	; (80042cc <moveGyroPIDFast+0x294>)
 80040dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	float wheel_circumference = 21.1; // NEED TO MEASURE AND CHANGE
 80040e0:	4b7b      	ldr	r3, [pc, #492]	; (80042d0 <moveGyroPIDFast+0x298>)
 80040e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 80040e6:	213c      	movs	r1, #60	; 0x3c
 80040e8:	487a      	ldr	r0, [pc, #488]	; (80042d4 <moveGyroPIDFast+0x29c>)
 80040ea:	f006 fefb 	bl	800aee4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 80040ee:	213c      	movs	r1, #60	; 0x3c
 80040f0:	4879      	ldr	r0, [pc, #484]	; (80042d8 <moveGyroPIDFast+0x2a0>)
 80040f2:	f006 fef7 	bl	800aee4 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80040f6:	4b77      	ldr	r3, [pc, #476]	; (80042d4 <moveGyroPIDFast+0x29c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8004100:	4b75      	ldr	r3, [pc, #468]	; (80042d8 <moveGyroPIDFast+0x2a0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 800410a:	f002 ffd1 	bl	80070b0 <HAL_GetTick>
 800410e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	uint32_t prevTime = startTime;
 8004112:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004116:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float totalDistance_right = 0;
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int diffRight = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distErrOffset;

	int servo;

	//pwm values
	uint16_t pwmValA = 3500;
 8004136:	f640 53ac 	movw	r3, #3500	; 0xdac
 800413a:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	uint16_t pwmValC = 3500;
 800413e:	f640 53ac 	movw	r3, #3500	; 0xdac
 8004142:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if (forward) {
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d015      	beq.n	8004178 <moveGyroPIDFast+0x140>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800414c:	2201      	movs	r2, #1
 800414e:	2108      	movs	r1, #8
 8004150:	4862      	ldr	r0, [pc, #392]	; (80042dc <moveGyroPIDFast+0x2a4>)
 8004152:	f003 fb2b 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004156:	2200      	movs	r2, #0
 8004158:	2104      	movs	r1, #4
 800415a:	4860      	ldr	r0, [pc, #384]	; (80042dc <moveGyroPIDFast+0x2a4>)
 800415c:	f003 fb26 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004160:	2201      	movs	r2, #1
 8004162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004166:	485e      	ldr	r0, [pc, #376]	; (80042e0 <moveGyroPIDFast+0x2a8>)
 8004168:	f003 fb20 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800416c:	2200      	movs	r2, #0
 800416e:	2120      	movs	r1, #32
 8004170:	485c      	ldr	r0, [pc, #368]	; (80042e4 <moveGyroPIDFast+0x2ac>)
 8004172:	f003 fb1b 	bl	80077ac <HAL_GPIO_WritePin>
 8004176:	e014      	b.n	80041a2 <moveGyroPIDFast+0x16a>
	} else {
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8004178:	2200      	movs	r2, #0
 800417a:	2108      	movs	r1, #8
 800417c:	4857      	ldr	r0, [pc, #348]	; (80042dc <moveGyroPIDFast+0x2a4>)
 800417e:	f003 fb15 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8004182:	2201      	movs	r2, #1
 8004184:	2104      	movs	r1, #4
 8004186:	4855      	ldr	r0, [pc, #340]	; (80042dc <moveGyroPIDFast+0x2a4>)
 8004188:	f003 fb10 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 800418c:	2200      	movs	r2, #0
 800418e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004192:	4853      	ldr	r0, [pc, #332]	; (80042e0 <moveGyroPIDFast+0x2a8>)
 8004194:	f003 fb0a 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8004198:	2201      	movs	r2, #1
 800419a:	2120      	movs	r1, #32
 800419c:	4851      	ldr	r0, [pc, #324]	; (80042e4 <moveGyroPIDFast+0x2ac>)
 800419e:	f003 fb05 	bl	80077ac <HAL_GPIO_WritePin>
	//		else
	//			distErrOffset = DISTANCE_ERROR_OFFSETR;
	//	}

	// outdoor
	if (forward) {
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d045      	beq.n	8004234 <moveGyroPIDFast+0x1fc>
		if (distance == 10)
 80041a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80041ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80041b0:	eef4 7a47 	vcmp.f32	s15, s14
 80041b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b8:	d103      	bne.n	80041c2 <moveGyroPIDFast+0x18a>
			distErrOffset = -0.2;
 80041ba:	4b4b      	ldr	r3, [pc, #300]	; (80042e8 <moveGyroPIDFast+0x2b0>)
 80041bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80041c0:	e0a7      	b.n	8004312 <moveGyroPIDFast+0x2da>
		else if (distance == 20)
 80041c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80041c6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80041ca:	eef4 7a47 	vcmp.f32	s15, s14
 80041ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d2:	d103      	bne.n	80041dc <moveGyroPIDFast+0x1a4>
			distErrOffset = -0.15;
 80041d4:	4b45      	ldr	r3, [pc, #276]	; (80042ec <moveGyroPIDFast+0x2b4>)
 80041d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80041da:	e09a      	b.n	8004312 <moveGyroPIDFast+0x2da>
		else if (distance == 30)
 80041dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80041e0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80041e4:	eef4 7a47 	vcmp.f32	s15, s14
 80041e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ec:	d103      	bne.n	80041f6 <moveGyroPIDFast+0x1be>
			distErrOffset = DISTANCE_ERROR_OFFSETF;
 80041ee:	4b40      	ldr	r3, [pc, #256]	; (80042f0 <moveGyroPIDFast+0x2b8>)
 80041f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80041f4:	e08d      	b.n	8004312 <moveGyroPIDFast+0x2da>
		else if (distance == 40)
 80041f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80041fa:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80042f4 <moveGyroPIDFast+0x2bc>
 80041fe:	eef4 7a47 	vcmp.f32	s15, s14
 8004202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004206:	d103      	bne.n	8004210 <moveGyroPIDFast+0x1d8>
			distErrOffset = DISTANCE_ERROR_OFFSETF;
 8004208:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <moveGyroPIDFast+0x2b8>)
 800420a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800420e:	e080      	b.n	8004312 <moveGyroPIDFast+0x2da>
		else if (distance == 50)
 8004210:	edd7 7a01 	vldr	s15, [r7, #4]
 8004214:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80042f8 <moveGyroPIDFast+0x2c0>
 8004218:	eef4 7a47 	vcmp.f32	s15, s14
 800421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004220:	d104      	bne.n	800422c <moveGyroPIDFast+0x1f4>
			distErrOffset = 0;
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800422a:	e072      	b.n	8004312 <moveGyroPIDFast+0x2da>
		else
			distErrOffset = DISTANCE_ERROR_OFFSETF;
 800422c:	4b30      	ldr	r3, [pc, #192]	; (80042f0 <moveGyroPIDFast+0x2b8>)
 800422e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004232:	e06e      	b.n	8004312 <moveGyroPIDFast+0x2da>
	} else {
		if (distance == 10)
 8004234:	edd7 7a01 	vldr	s15, [r7, #4]
 8004238:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800423c:	eef4 7a47 	vcmp.f32	s15, s14
 8004240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004244:	d103      	bne.n	800424e <moveGyroPIDFast+0x216>
			distErrOffset = -0.1;
 8004246:	4b2d      	ldr	r3, [pc, #180]	; (80042fc <moveGyroPIDFast+0x2c4>)
 8004248:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800424c:	e061      	b.n	8004312 <moveGyroPIDFast+0x2da>
		else if (distance == 20)
 800424e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004252:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004256:	eef4 7a47 	vcmp.f32	s15, s14
 800425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425e:	d103      	bne.n	8004268 <moveGyroPIDFast+0x230>
			distErrOffset = DISTANCE_ERROR_OFFSETR;
 8004260:	4b27      	ldr	r3, [pc, #156]	; (8004300 <moveGyroPIDFast+0x2c8>)
 8004262:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004266:	e054      	b.n	8004312 <moveGyroPIDFast+0x2da>
		else if (distance == 30)
 8004268:	edd7 7a01 	vldr	s15, [r7, #4]
 800426c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004270:	eef4 7a47 	vcmp.f32	s15, s14
 8004274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004278:	d103      	bne.n	8004282 <moveGyroPIDFast+0x24a>
			distErrOffset = -0.03;
 800427a:	4b22      	ldr	r3, [pc, #136]	; (8004304 <moveGyroPIDFast+0x2cc>)
 800427c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004280:	e047      	b.n	8004312 <moveGyroPIDFast+0x2da>
		else if (distance == 40)
 8004282:	edd7 7a01 	vldr	s15, [r7, #4]
 8004286:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80042f4 <moveGyroPIDFast+0x2bc>
 800428a:	eef4 7a47 	vcmp.f32	s15, s14
 800428e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004292:	d103      	bne.n	800429c <moveGyroPIDFast+0x264>
			distErrOffset = -0.02;
 8004294:	4b1c      	ldr	r3, [pc, #112]	; (8004308 <moveGyroPIDFast+0x2d0>)
 8004296:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800429a:	e03a      	b.n	8004312 <moveGyroPIDFast+0x2da>
		else if (distance == 50)
 800429c:	edd7 7a01 	vldr	s15, [r7, #4]
 80042a0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80042f8 <moveGyroPIDFast+0x2c0>
 80042a4:	eef4 7a47 	vcmp.f32	s15, s14
 80042a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ac:	d12e      	bne.n	800430c <moveGyroPIDFast+0x2d4>
			distErrOffset = 0;
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80042b6:	e02c      	b.n	8004312 <moveGyroPIDFast+0x2da>
 80042b8:	20000378 	.word	0x20000378
 80042bc:	20000258 	.word	0x20000258
 80042c0:	3d4ccccd 	.word	0x3d4ccccd
 80042c4:	20000420 	.word	0x20000420
 80042c8:	44440000 	.word	0x44440000
 80042cc:	4442c000 	.word	0x4442c000
 80042d0:	41a8cccd 	.word	0x41a8cccd
 80042d4:	200002a0 	.word	0x200002a0
 80042d8:	20000330 	.word	0x20000330
 80042dc:	40020000 	.word	0x40020000
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40020800 	.word	0x40020800
 80042e8:	be4ccccd 	.word	0xbe4ccccd
 80042ec:	be19999a 	.word	0xbe19999a
 80042f0:	bd0f5c29 	.word	0xbd0f5c29
 80042f4:	42200000 	.word	0x42200000
 80042f8:	42480000 	.word	0x42480000
 80042fc:	bdcccccd 	.word	0xbdcccccd
 8004300:	bd75c28f 	.word	0xbd75c28f
 8004304:	bcf5c28f 	.word	0xbcf5c28f
 8004308:	bca3d70a 	.word	0xbca3d70a
		else
			distErrOffset = DISTANCE_ERROR_OFFSETR;
 800430c:	4bd2      	ldr	r3, [pc, #840]	; (8004658 <moveGyroPIDFast+0x620>)
 800430e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	}

	/*Infinite loop*/
	for (;;) {
		if (totalDistance_left >= (distance + distanceError) * 0.9
 8004312:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8004316:	f7fc f917 	bl	8000548 <__aeabi_f2d>
 800431a:	4604      	mov	r4, r0
 800431c:	460d      	mov	r5, r1
 800431e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004322:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800432a:	ee17 0a90 	vmov	r0, s15
 800432e:	f7fc f90b 	bl	8000548 <__aeabi_f2d>
 8004332:	a3c3      	add	r3, pc, #780	; (adr r3, 8004640 <moveGyroPIDFast+0x608>)
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f7fc f95e 	bl	80005f8 <__aeabi_dmul>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4620      	mov	r0, r4
 8004342:	4629      	mov	r1, r5
 8004344:	f7fc fbde 	bl	8000b04 <__aeabi_dcmpge>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d11d      	bne.n	800438a <moveGyroPIDFast+0x352>
				|| totalDistance_right >= (distance + distanceError) * 0.9) {
 800434e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8004352:	f7fc f8f9 	bl	8000548 <__aeabi_f2d>
 8004356:	4604      	mov	r4, r0
 8004358:	460d      	mov	r5, r1
 800435a:	ed97 7a01 	vldr	s14, [r7, #4]
 800435e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004366:	ee17 0a90 	vmov	r0, s15
 800436a:	f7fc f8ed 	bl	8000548 <__aeabi_f2d>
 800436e:	a3b4      	add	r3, pc, #720	; (adr r3, 8004640 <moveGyroPIDFast+0x608>)
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	f7fc f940 	bl	80005f8 <__aeabi_dmul>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4620      	mov	r0, r4
 800437e:	4629      	mov	r1, r5
 8004380:	f7fc fbc0 	bl	8000b04 <__aeabi_dcmpge>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <moveGyroPIDFast+0x362>
			pwmValA = 1000;
 800438a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800438e:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			pwmValC = 1000;
 8004392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004396:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

		}

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800439a:	4bb0      	ldr	r3, [pc, #704]	; (800465c <moveGyroPIDFast+0x624>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 80043a2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 80043a4:	4bad      	ldr	r3, [pc, #692]	; (800465c <moveGyroPIDFast+0x624>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80043ac:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 80043ae:	f002 fe7f 	bl	80070b0 <HAL_GetTick>
 80043b2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		moving = 1;
 80043b6:	4baa      	ldr	r3, [pc, #680]	; (8004660 <moveGyroPIDFast+0x628>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 80043bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80043c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b3c      	cmp	r3, #60	; 0x3c
 80043c8:	d9a3      	bls.n	8004312 <moveGyroPIDFast+0x2da>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 80043ca:	4ba6      	ldr	r3, [pc, #664]	; (8004664 <moveGyroPIDFast+0x62c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 80043d4:	4ba4      	ldr	r3, [pc, #656]	; (8004668 <moveGyroPIDFast+0x630>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			diffLeft = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			diffRight = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80043ea:	4b9e      	ldr	r3, [pc, #632]	; (8004664 <moveGyroPIDFast+0x62c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d118      	bne.n	800442a <moveGyroPIDFast+0x3f2>
				if (leftTick < leftTick_prev)
 80043f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80043fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004400:	429a      	cmp	r2, r3
 8004402:	da07      	bge.n	8004414 <moveGyroPIDFast+0x3dc>
					diffLeft = leftTick_prev - leftTick;
 8004404:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004408:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004412:	e022      	b.n	800445a <moveGyroPIDFast+0x422>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8004414:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004418:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800441c:	33ff      	adds	r3, #255	; 0xff
 800441e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004422:	4413      	add	r3, r2
 8004424:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004428:	e017      	b.n	800445a <moveGyroPIDFast+0x422>
			} else {
				if (leftTick > leftTick_prev)
 800442a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800442e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004432:	429a      	cmp	r2, r3
 8004434:	dd07      	ble.n	8004446 <moveGyroPIDFast+0x40e>
					diffLeft = leftTick - leftTick_prev;
 8004436:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800443a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004444:	e009      	b.n	800445a <moveGyroPIDFast+0x422>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8004446:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800444a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800444e:	33ff      	adds	r3, #255	; 0xff
 8004450:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004454:	4413      	add	r3, r2
 8004456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 800445a:	4b83      	ldr	r3, [pc, #524]	; (8004668 <moveGyroPIDFast+0x630>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b10      	cmp	r3, #16
 8004466:	d118      	bne.n	800449a <moveGyroPIDFast+0x462>
				if (rightTick < rightTick_prev)
 8004468:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800446c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004470:	429a      	cmp	r2, r3
 8004472:	da07      	bge.n	8004484 <moveGyroPIDFast+0x44c>
					diffRight = rightTick_prev - rightTick;
 8004474:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004482:	e022      	b.n	80044ca <moveGyroPIDFast+0x492>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 8004484:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004488:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800448c:	33ff      	adds	r3, #255	; 0xff
 800448e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004492:	4413      	add	r3, r2
 8004494:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004498:	e017      	b.n	80044ca <moveGyroPIDFast+0x492>
			} else {
				if (rightTick > rightTick_prev)
 800449a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800449e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044a2:	429a      	cmp	r2, r3
 80044a4:	dd07      	ble.n	80044b6 <moveGyroPIDFast+0x47e>
					diffRight = rightTick - rightTick_prev;
 80044a6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80044aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044b4:	e009      	b.n	80044ca <moveGyroPIDFast+0x492>
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 80044b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044ba:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80044be:	33ff      	adds	r3, #255	; 0xff
 80044c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80044c4:	4413      	add	r3, r2
 80044c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 80044ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044ce:	ee07 3a90 	vmov	s15, r3
 80044d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80044d6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80044da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044de:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80044e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
					* wheel_circumference;
			totalDistance_left += distLeft;
 80044ea:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80044ee:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80044f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044f6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 80044fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004506:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800450a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800450e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004516:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
					* wheel_circumference;
			totalDistance_right += distRight;
 800451a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800451e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8004522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004526:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
			// 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.

#define pwmValAadjust 300;
#define pwmValBadjust 425;

			if (forward) {
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d030      	beq.n	8004592 <moveGyroPIDFast+0x55a>

				pwmValA = PIDController_Update(&pidLeft,
 8004530:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8004534:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800453c:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8004540:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004544:	4611      	mov	r1, r2
 8004546:	edd7 0a2e 	vldr	s1, [r7, #184]	; 0xb8
 800454a:	eeb0 0a67 	vmov.f32	s0, s15
 800454e:	4618      	mov	r0, r3
 8004550:	f002 f8dc 	bl	800670c <PIDController_Update>
 8004554:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF,
						totalDistance_left, pwmValA) - pwmValAadjust
 8004556:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft,
 8004558:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800455c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
				;

				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8004560:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8004564:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800456c:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8004570:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004574:	4611      	mov	r1, r2
 8004576:	eef0 0a67 	vmov.f32	s1, s15
 800457a:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 800457e:	4618      	mov	r0, r3
 8004580:	f002 f8c4 	bl	800670c <PIDController_Update>
 8004584:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF, pwmValC)
						+ pwmValBadjust
 8004586:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8004588:	f203 13a9 	addw	r3, r3, #425	; 0x1a9
 800458c:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8004590:	e023      	b.n	80045da <moveGyroPIDFast+0x5a2>
				;
			} else {
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8004592:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8004596:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800459a:	4611      	mov	r1, r2
 800459c:	edd7 0a2e 	vldr	s1, [r7, #184]	; 0xb8
 80045a0:	ed97 0a2d 	vldr	s0, [r7, #180]	; 0xb4
 80045a4:	4618      	mov	r0, r3
 80045a6:	f002 f8b1 	bl	800670c <PIDController_Update>
 80045aa:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR, pwmValA)
						- pwmValAadjust
 80045ac:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 80045ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045b2:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
				;

				pwmValC = PIDController_Update(&pidRight,
 80045b6:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80045ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80045be:	4611      	mov	r1, r2
 80045c0:	edd7 0a2d 	vldr	s1, [r7, #180]	; 0xb4
 80045c4:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 80045c8:	4618      	mov	r0, r3
 80045ca:	f002 f89f 	bl	800670c <PIDController_Update>
 80045ce:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR,
						totalDistance_right, pwmValC) + pwmValBadjust
 80045d0:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight,
 80045d2:	f203 13a9 	addw	r3, r3, #425	; 0x1a9
 80045d6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
//				pwmValC = PIDController_Update(&pidRight,
//						totalDistance_left * STRAIGHTRATIOR,
//						totalDistance_right, pwmValC);
//			}

			distanceError = distErrOffset * distance;
 80045da:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80045de:	edd7 7a01 	vldr	s15, [r7, #4]
 80045e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (forward) {
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d041      	beq.n	8004674 <moveGyroPIDFast+0x63c>
				if (actualAngle < -0.33) //veering right
 80045f0:	4b1e      	ldr	r3, [pc, #120]	; (800466c <moveGyroPIDFast+0x634>)
 80045f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045f6:	a314      	add	r3, pc, #80	; (adr r3, 8004648 <moveGyroPIDFast+0x610>)
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	f7fc fa6e 	bl	8000adc <__aeabi_dcmplt>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d004      	beq.n	8004610 <moveGyroPIDFast+0x5d8>
						{

					htim1.Instance->CCR4 = 138; //left abit. prev: 138
 8004606:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <moveGyroPIDFast+0x638>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	228a      	movs	r2, #138	; 0x8a
 800460c:	641a      	str	r2, [r3, #64]	; 0x40
 800460e:	e055      	b.n	80046bc <moveGyroPIDFast+0x684>
				} else if (actualAngle > 0.33) //veering left
 8004610:	4b16      	ldr	r3, [pc, #88]	; (800466c <moveGyroPIDFast+0x634>)
 8004612:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004616:	a30e      	add	r3, pc, #56	; (adr r3, 8004650 <moveGyroPIDFast+0x618>)
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	f7fc fa7c 	bl	8000b18 <__aeabi_dcmpgt>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d004      	beq.n	8004630 <moveGyroPIDFast+0x5f8>
						{

					htim1.Instance->CCR4 = 155; //right a bit. prev: 152
 8004626:	4b12      	ldr	r3, [pc, #72]	; (8004670 <moveGyroPIDFast+0x638>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	229b      	movs	r2, #155	; 0x9b
 800462c:	641a      	str	r2, [r3, #64]	; 0x40
 800462e:	e045      	b.n	80046bc <moveGyroPIDFast+0x684>
				} else {
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <moveGyroPIDFast+0x638>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2296      	movs	r2, #150	; 0x96
 8004636:	641a      	str	r2, [r3, #64]	; 0x40
 8004638:	e040      	b.n	80046bc <moveGyroPIDFast+0x684>
 800463a:	bf00      	nop
 800463c:	f3af 8000 	nop.w
 8004640:	cccccccd 	.word	0xcccccccd
 8004644:	3feccccc 	.word	0x3feccccc
 8004648:	51eb851f 	.word	0x51eb851f
 800464c:	bfd51eb8 	.word	0xbfd51eb8
 8004650:	51eb851f 	.word	0x51eb851f
 8004654:	3fd51eb8 	.word	0x3fd51eb8
 8004658:	bd75c28f 	.word	0xbd75c28f
 800465c:	20000378 	.word	0x20000378
 8004660:	20000414 	.word	0x20000414
 8004664:	200002a0 	.word	0x200002a0
 8004668:	20000330 	.word	0x20000330
 800466c:	20000420 	.word	0x20000420
 8004670:	20000258 	.word	0x20000258
				}

			} else {
				if (actualAngle > 0.33) //veering left
 8004674:	4b42      	ldr	r3, [pc, #264]	; (8004780 <moveGyroPIDFast+0x748>)
 8004676:	e9d3 0100 	ldrd	r0, r1, [r3]
 800467a:	a33d      	add	r3, pc, #244	; (adr r3, 8004770 <moveGyroPIDFast+0x738>)
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f7fc fa4a 	bl	8000b18 <__aeabi_dcmpgt>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <moveGyroPIDFast+0x65c>
						{
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = 138; //left abit
 800468a:	4b3e      	ldr	r3, [pc, #248]	; (8004784 <moveGyroPIDFast+0x74c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	228a      	movs	r2, #138	; 0x8a
 8004690:	641a      	str	r2, [r3, #64]	; 0x40
 8004692:	e013      	b.n	80046bc <moveGyroPIDFast+0x684>
				} else if (actualAngle < -0.33) //veering right
 8004694:	4b3a      	ldr	r3, [pc, #232]	; (8004780 <moveGyroPIDFast+0x748>)
 8004696:	e9d3 0100 	ldrd	r0, r1, [r3]
 800469a:	a337      	add	r3, pc, #220	; (adr r3, 8004778 <moveGyroPIDFast+0x740>)
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	f7fc fa1c 	bl	8000adc <__aeabi_dcmplt>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d004      	beq.n	80046b4 <moveGyroPIDFast+0x67c>
						{
					//					 servo = STRAIGHT;
					htim1.Instance->CCR4 = 155; //right a bit
 80046aa:	4b36      	ldr	r3, [pc, #216]	; (8004784 <moveGyroPIDFast+0x74c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	229b      	movs	r2, #155	; 0x9b
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40
 80046b2:	e003      	b.n	80046bc <moveGyroPIDFast+0x684>
				} else {
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 80046b4:	4b33      	ldr	r3, [pc, #204]	; (8004784 <moveGyroPIDFast+0x74c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2296      	movs	r2, #150	; 0x96
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40
				}
			}
			osDelay(10);
 80046bc:	200a      	movs	r0, #10
 80046be:	f008 fede 	bl	800d47e <osDelay>

			if (totalDistance_left >= (distance + distanceError)
 80046c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80046c6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80046ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046ce:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80046d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046da:	da0c      	bge.n	80046f6 <moveGyroPIDFast+0x6be>
					|| totalDistance_right >= (distance + distanceError)) {
 80046dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80046e0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80046e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046e8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80046ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f4:	db0c      	blt.n	8004710 <moveGyroPIDFast+0x6d8>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 80046f6:	4b24      	ldr	r3, [pc, #144]	; (8004788 <moveGyroPIDFast+0x750>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 80046fe:	4b22      	ldr	r3, [pc, #136]	; (8004788 <moveGyroPIDFast+0x750>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	63da      	str	r2, [r3, #60]	; 0x3c
				htim1.Instance->CCR4 = STRAIGHT; //centre
 8004706:	4b1f      	ldr	r3, [pc, #124]	; (8004784 <moveGyroPIDFast+0x74c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2296      	movs	r2, #150	; 0x96
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
				//				sprintf(messageB, "SRight: %2d\0", pwmValC);
				//				OLED_ShowString(10, 40, messageB);
				//				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
				//				OLED_ShowString(10, 50, messageB);
				//				OLED_Refresh_Gram();
				break;
 800470e:	e00c      	b.n	800472a <moveGyroPIDFast+0x6f2>
			//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
			//			OLED_ShowString(10, 30, messageA);
			//			sprintf(messageB, "SRight: %2d\0", diffRight);
			//			OLED_ShowString(10, 40, messageB);

			prevTime = currTime;
 8004710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004714:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			leftTick_prev = leftTick;
 8004718:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800471c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			rightTick_prev = rightTick;
 8004720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004724:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		if (totalDistance_left >= (distance + distanceError) * 0.9
 8004728:	e5f3      	b.n	8004312 <moveGyroPIDFast+0x2da>
		}
	}
	//	moving = 0;
	//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800472a:	2201      	movs	r2, #1
 800472c:	2108      	movs	r1, #8
 800472e:	4817      	ldr	r0, [pc, #92]	; (800478c <moveGyroPIDFast+0x754>)
 8004730:	f003 f83c 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004734:	2200      	movs	r2, #0
 8004736:	2104      	movs	r1, #4
 8004738:	4814      	ldr	r0, [pc, #80]	; (800478c <moveGyroPIDFast+0x754>)
 800473a:	f003 f837 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800473e:	2201      	movs	r2, #1
 8004740:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004744:	4812      	ldr	r0, [pc, #72]	; (8004790 <moveGyroPIDFast+0x758>)
 8004746:	f003 f831 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800474a:	2200      	movs	r2, #0
 800474c:	2120      	movs	r1, #32
 800474e:	4811      	ldr	r0, [pc, #68]	; (8004794 <moveGyroPIDFast+0x75c>)
 8004750:	f003 f82c 	bl	80077ac <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8004754:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <moveGyroPIDFast+0x74c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2296      	movs	r2, #150	; 0x96
 800475a:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 800475c:	200a      	movs	r0, #10
 800475e:	f008 fe8e 	bl	800d47e <osDelay>
	return;
 8004762:	bf00      	nop
}
 8004764:	37c8      	adds	r7, #200	; 0xc8
 8004766:	46bd      	mov	sp, r7
 8004768:	bdb0      	pop	{r4, r5, r7, pc}
 800476a:	bf00      	nop
 800476c:	f3af 8000 	nop.w
 8004770:	51eb851f 	.word	0x51eb851f
 8004774:	3fd51eb8 	.word	0x3fd51eb8
 8004778:	51eb851f 	.word	0x51eb851f
 800477c:	bfd51eb8 	.word	0xbfd51eb8
 8004780:	20000420 	.word	0x20000420
 8004784:	20000258 	.word	0x20000258
 8004788:	20000378 	.word	0x20000378
 800478c:	40020000 	.word	0x40020000
 8004790:	40021000 	.word	0x40021000
 8004794:	40020800 	.word	0x40020800

08004798 <moveGyroPIDOld>:

// this is without the drastic servo movement
void moveGyroPIDOld(float distance, int forward) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b0b2      	sub	sp, #200	; 0xc8
 800479c:	af00      	add	r7, sp, #0
 800479e:	ed87 0a01 	vstr	s0, [r7, #4]
 80047a2:	6038      	str	r0, [r7, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80047a4:	2100      	movs	r1, #0
 80047a6:	48bc      	ldr	r0, [pc, #752]	; (8004a98 <moveGyroPIDOld+0x300>)
 80047a8:	f006 f8b6 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80047ac:	2108      	movs	r1, #8
 80047ae:	48ba      	ldr	r0, [pc, #744]	; (8004a98 <moveGyroPIDOld+0x300>)
 80047b0:	f006 f8b2 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80047b4:	210c      	movs	r1, #12
 80047b6:	48b9      	ldr	r0, [pc, #740]	; (8004a9c <moveGyroPIDOld+0x304>)
 80047b8:	f006 f8ae 	bl	800a918 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80047bc:	4bb7      	ldr	r3, [pc, #732]	; (8004a9c <moveGyroPIDOld+0x304>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2296      	movs	r2, #150	; 0x96
 80047c2:	641a      	str	r2, [r3, #64]	; 0x40

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 80047c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80047c8:	2224      	movs	r2, #36	; 0x24
 80047ca:	2100      	movs	r1, #0
 80047cc:	4618      	mov	r0, r3
 80047ce:	f00b fbad 	bl	800ff2c <memset>
 80047d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80047d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80047d8:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80047dc:	663b      	str	r3, [r7, #96]	; 0x60
 80047de:	f640 0398 	movw	r3, #2200	; 0x898
 80047e2:	667b      	str	r3, [r7, #100]	; 0x64
 80047e4:	4bae      	ldr	r3, [pc, #696]	; (8004aa0 <moveGyroPIDOld+0x308>)
 80047e6:	66bb      	str	r3, [r7, #104]	; 0x68
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 80047e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047ec:	2224      	movs	r2, #36	; 0x24
 80047ee:	2100      	movs	r1, #0
 80047f0:	4618      	mov	r0, r3
 80047f2:	f00b fb9b 	bl	800ff2c <memset>
 80047f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80047fa:	637b      	str	r3, [r7, #52]	; 0x34
 80047fc:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8004800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004802:	f640 0398 	movw	r3, #2200	; 0x898
 8004806:	643b      	str	r3, [r7, #64]	; 0x40
 8004808:	4ba5      	ldr	r3, [pc, #660]	; (8004aa0 <moveGyroPIDOld+0x308>)
 800480a:	647b      	str	r3, [r7, #68]	; 0x44
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 800480c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004810:	4618      	mov	r0, r3
 8004812:	f001 ff63 	bl	80066dc <PIDController_Init>
	PIDController_Init(&pidRight);
 8004816:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800481a:	4618      	mov	r0, r3
 800481c:	f001 ff5e 	bl	80066dc <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8004820:	4ba0      	ldr	r3, [pc, #640]	; (8004aa4 <moveGyroPIDOld+0x30c>)
 8004822:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float wheel_rotationTicksR = 779; // for back right wheel
 8004826:	4ba0      	ldr	r3, [pc, #640]	; (8004aa8 <moveGyroPIDOld+0x310>)
 8004828:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	float wheel_circumference = 21.1f; // NEED TO MEASURE AND CHANGE
 800482c:	4b9f      	ldr	r3, [pc, #636]	; (8004aac <moveGyroPIDOld+0x314>)
 800482e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8004832:	213c      	movs	r1, #60	; 0x3c
 8004834:	489e      	ldr	r0, [pc, #632]	; (8004ab0 <moveGyroPIDOld+0x318>)
 8004836:	f006 fb55 	bl	800aee4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 800483a:	213c      	movs	r1, #60	; 0x3c
 800483c:	489d      	ldr	r0, [pc, #628]	; (8004ab4 <moveGyroPIDOld+0x31c>)
 800483e:	f006 fb51 	bl	800aee4 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8004842:	4b9b      	ldr	r3, [pc, #620]	; (8004ab0 <moveGyroPIDOld+0x318>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 800484c:	4b99      	ldr	r3, [pc, #612]	; (8004ab4 <moveGyroPIDOld+0x31c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8004856:	f002 fc2b 	bl	80070b0 <HAL_GetTick>
 800485a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	uint32_t prevTime = startTime;
 800485e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004862:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float totalDistance_right = 0;
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8004876:	2300      	movs	r3, #0
 8004878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int diffRight = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8004882:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004886:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint16_t pwmValC = 2000 * STRAIGHTRATIOF;
 800488a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800488e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if (forward) {
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d015      	beq.n	80048c4 <moveGyroPIDOld+0x12c>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004898:	2201      	movs	r2, #1
 800489a:	2108      	movs	r1, #8
 800489c:	4886      	ldr	r0, [pc, #536]	; (8004ab8 <moveGyroPIDOld+0x320>)
 800489e:	f002 ff85 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80048a2:	2200      	movs	r2, #0
 80048a4:	2104      	movs	r1, #4
 80048a6:	4884      	ldr	r0, [pc, #528]	; (8004ab8 <moveGyroPIDOld+0x320>)
 80048a8:	f002 ff80 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80048ac:	2201      	movs	r2, #1
 80048ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048b2:	4882      	ldr	r0, [pc, #520]	; (8004abc <moveGyroPIDOld+0x324>)
 80048b4:	f002 ff7a 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80048b8:	2200      	movs	r2, #0
 80048ba:	2120      	movs	r1, #32
 80048bc:	4880      	ldr	r0, [pc, #512]	; (8004ac0 <moveGyroPIDOld+0x328>)
 80048be:	f002 ff75 	bl	80077ac <HAL_GPIO_WritePin>
 80048c2:	e014      	b.n	80048ee <moveGyroPIDOld+0x156>
	} else {
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80048c4:	2200      	movs	r2, #0
 80048c6:	2108      	movs	r1, #8
 80048c8:	487b      	ldr	r0, [pc, #492]	; (8004ab8 <moveGyroPIDOld+0x320>)
 80048ca:	f002 ff6f 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80048ce:	2201      	movs	r2, #1
 80048d0:	2104      	movs	r1, #4
 80048d2:	4879      	ldr	r0, [pc, #484]	; (8004ab8 <moveGyroPIDOld+0x320>)
 80048d4:	f002 ff6a 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 80048d8:	2200      	movs	r2, #0
 80048da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048de:	4877      	ldr	r0, [pc, #476]	; (8004abc <moveGyroPIDOld+0x324>)
 80048e0:	f002 ff64 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 80048e4:	2201      	movs	r2, #1
 80048e6:	2120      	movs	r1, #32
 80048e8:	4875      	ldr	r0, [pc, #468]	; (8004ac0 <moveGyroPIDOld+0x328>)
 80048ea:	f002 ff5f 	bl	80077ac <HAL_GPIO_WritePin>
	}

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80048ee:	4b6a      	ldr	r3, [pc, #424]	; (8004a98 <moveGyroPIDOld+0x300>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80048f6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 80048f8:	4b67      	ldr	r3, [pc, #412]	; (8004a98 <moveGyroPIDOld+0x300>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8004900:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 8004902:	f002 fbd5 	bl	80070b0 <HAL_GetTick>
 8004906:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		moving = 1;
 800490a:	4b6e      	ldr	r3, [pc, #440]	; (8004ac4 <moveGyroPIDOld+0x32c>)
 800490c:	2201      	movs	r2, #1
 800490e:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 8004910:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004914:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b3c      	cmp	r3, #60	; 0x3c
 800491c:	d9e7      	bls.n	80048ee <moveGyroPIDOld+0x156>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 800491e:	4b64      	ldr	r3, [pc, #400]	; (8004ab0 <moveGyroPIDOld+0x318>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8004928:	4b62      	ldr	r3, [pc, #392]	; (8004ab4 <moveGyroPIDOld+0x31c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

			diffLeft = 0;
 8004932:	2300      	movs	r3, #0
 8004934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			diffRight = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 800493e:	4b5c      	ldr	r3, [pc, #368]	; (8004ab0 <moveGyroPIDOld+0x318>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b10      	cmp	r3, #16
 800494a:	d118      	bne.n	800497e <moveGyroPIDOld+0x1e6>
				if (leftTick < leftTick_prev)
 800494c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004954:	429a      	cmp	r2, r3
 8004956:	da07      	bge.n	8004968 <moveGyroPIDOld+0x1d0>
					diffLeft = leftTick_prev - leftTick;
 8004958:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800495c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004966:	e022      	b.n	80049ae <moveGyroPIDOld+0x216>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8004968:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800496c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004970:	33ff      	adds	r3, #255	; 0xff
 8004972:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004976:	4413      	add	r3, r2
 8004978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800497c:	e017      	b.n	80049ae <moveGyroPIDOld+0x216>
			} else {
				if (leftTick > leftTick_prev)
 800497e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004982:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004986:	429a      	cmp	r2, r3
 8004988:	dd07      	ble.n	800499a <moveGyroPIDOld+0x202>
					diffLeft = leftTick - leftTick_prev;
 800498a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800498e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004998:	e009      	b.n	80049ae <moveGyroPIDOld+0x216>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 800499a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800499e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80049a2:	33ff      	adds	r3, #255	; 0xff
 80049a4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80049a8:	4413      	add	r3, r2
 80049aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 80049ae:	4b41      	ldr	r3, [pc, #260]	; (8004ab4 <moveGyroPIDOld+0x31c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d118      	bne.n	80049ee <moveGyroPIDOld+0x256>
				if (rightTick < rightTick_prev)
 80049bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80049c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049c4:	429a      	cmp	r2, r3
 80049c6:	da07      	bge.n	80049d8 <moveGyroPIDOld+0x240>
					diffRight = rightTick_prev - rightTick;
 80049c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049d6:	e022      	b.n	8004a1e <moveGyroPIDOld+0x286>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 80049d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049dc:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80049e0:	33ff      	adds	r3, #255	; 0xff
 80049e2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049e6:	4413      	add	r3, r2
 80049e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049ec:	e017      	b.n	8004a1e <moveGyroPIDOld+0x286>
			} else {
				if (rightTick > rightTick_prev)
 80049ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80049f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049f6:	429a      	cmp	r2, r3
 80049f8:	dd07      	ble.n	8004a0a <moveGyroPIDOld+0x272>
					diffRight = rightTick - rightTick_prev;
 80049fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80049fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a08:	e009      	b.n	8004a1e <moveGyroPIDOld+0x286>
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8004a0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a0e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004a12:	33ff      	adds	r3, #255	; 0xff
 8004a14:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004a18:	4413      	add	r3, r2
 8004a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8004a1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a2a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8004a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a32:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8004a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					* wheel_circumference;
			totalDistance_left += distLeft;
 8004a3e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004a42:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a4a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8004a4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a5a:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8004a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a62:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8004a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
					* wheel_circumference;
			totalDistance_right += distRight;
 8004a6e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004a72:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a7a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
//				 pwmValA = PIDController_Update(&pidLeft, totalDistance_right, totalDistance_left*STRAIGHTRATIOR, pwmValA);
//
//				 pwmValC = PIDController_Update(&pidRight, totalDistance_left*STRAIGHTRATIOR, totalDistance_right, pwmValC);
//			 }

			if (forward) {
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d025      	beq.n	8004ad0 <moveGyroPIDOld+0x338>
				distanceError = DISTANCE_ERROR_OFFSETF * distance;
 8004a84:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a88:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004ac8 <moveGyroPIDOld+0x330>
 8004a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a90:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 8004a94:	e024      	b.n	8004ae0 <moveGyroPIDOld+0x348>
 8004a96:	bf00      	nop
 8004a98:	20000378 	.word	0x20000378
 8004a9c:	20000258 	.word	0x20000258
 8004aa0:	3d4ccccd 	.word	0x3d4ccccd
 8004aa4:	44440000 	.word	0x44440000
 8004aa8:	4442c000 	.word	0x4442c000
 8004aac:	41a8cccd 	.word	0x41a8cccd
 8004ab0:	200002a0 	.word	0x200002a0
 8004ab4:	20000330 	.word	0x20000330
 8004ab8:	40020000 	.word	0x40020000
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	40020800 	.word	0x40020800
 8004ac4:	20000414 	.word	0x20000414
 8004ac8:	bd0f5c29 	.word	0xbd0f5c29
 8004acc:	bd75c28f 	.word	0xbd75c28f
			} else {
				distanceError = DISTANCE_ERROR_OFFSETR * distance;
 8004ad0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ad4:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8004acc <moveGyroPIDOld+0x334>
 8004ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004adc:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
			}

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (forward) {
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d030      	beq.n	8004b48 <moveGyroPIDOld+0x3b0>
				if (totalAngle < 0.00) //veering right
 8004ae6:	4b90      	ldr	r3, [pc, #576]	; (8004d28 <moveGyroPIDOld+0x590>)
 8004ae8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	f7fb fff2 	bl	8000adc <__aeabi_dcmplt>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <moveGyroPIDOld+0x36e>
						{

					htim1.Instance->CCR4 = 140; //left abit. prev: 138
 8004afe:	4b8b      	ldr	r3, [pc, #556]	; (8004d2c <moveGyroPIDOld+0x594>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	228c      	movs	r2, #140	; 0x8c
 8004b04:	641a      	str	r2, [r3, #64]	; 0x40
				}
				if (totalAngle > 0.00) //veering left
 8004b06:	4b88      	ldr	r3, [pc, #544]	; (8004d28 <moveGyroPIDOld+0x590>)
 8004b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	f7fc f800 	bl	8000b18 <__aeabi_dcmpgt>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <moveGyroPIDOld+0x38e>
						{

					htim1.Instance->CCR4 = 155; //right a bit. prev: 152
 8004b1e:	4b83      	ldr	r3, [pc, #524]	; (8004d2c <moveGyroPIDOld+0x594>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	229b      	movs	r2, #155	; 0x9b
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40
				}
				if (totalAngle == 0.00) {
 8004b26:	4b80      	ldr	r3, [pc, #512]	; (8004d28 <moveGyroPIDOld+0x590>)
 8004b28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	f7fb ffc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d036      	beq.n	8004bac <moveGyroPIDOld+0x414>
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 8004b3e:	4b7b      	ldr	r3, [pc, #492]	; (8004d2c <moveGyroPIDOld+0x594>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2296      	movs	r2, #150	; 0x96
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40
 8004b46:	e031      	b.n	8004bac <moveGyroPIDOld+0x414>
				}

			} else {
				if (totalAngle > 0.00) //veering left
 8004b48:	4b77      	ldr	r3, [pc, #476]	; (8004d28 <moveGyroPIDOld+0x590>)
 8004b4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	f7fb ffdf 	bl	8000b18 <__aeabi_dcmpgt>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <moveGyroPIDOld+0x3d0>
						{
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = 140; //left abit
 8004b60:	4b72      	ldr	r3, [pc, #456]	; (8004d2c <moveGyroPIDOld+0x594>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	228c      	movs	r2, #140	; 0x8c
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40
				}
				if (totalAngle < 0.00) //veering right
 8004b68:	4b6f      	ldr	r3, [pc, #444]	; (8004d28 <moveGyroPIDOld+0x590>)
 8004b6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	f7fb ffb1 	bl	8000adc <__aeabi_dcmplt>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <moveGyroPIDOld+0x3f4>
						{
					servo = STRAIGHT;
 8004b80:	2396      	movs	r3, #150	; 0x96
 8004b82:	67fb      	str	r3, [r7, #124]	; 0x7c
					htim1.Instance->CCR4 = 155; //right a bit
 8004b84:	4b69      	ldr	r3, [pc, #420]	; (8004d2c <moveGyroPIDOld+0x594>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	229b      	movs	r2, #155	; 0x9b
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40
				}
				if (totalAngle == 0.00) {
 8004b8c:	4b66      	ldr	r3, [pc, #408]	; (8004d28 <moveGyroPIDOld+0x590>)
 8004b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	f7fb ff95 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <moveGyroPIDOld+0x414>
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 8004ba4:	4b61      	ldr	r3, [pc, #388]	; (8004d2c <moveGyroPIDOld+0x594>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2296      	movs	r2, #150	; 0x96
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40
				}
			}
			osDelay(10);
 8004bac:	200a      	movs	r0, #10
 8004bae:	f008 fc66 	bl	800d47e <osDelay>
			if (totalDistance_left >= (distance + distanceError)
 8004bb2:	ed97 7a01 	vldr	s14, [r7, #4]
 8004bb6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bbe:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004bc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bca:	da0c      	bge.n	8004be6 <moveGyroPIDOld+0x44e>
					|| totalDistance_right >= (distance + distanceError)) {
 8004bcc:	ed97 7a01 	vldr	s14, [r7, #4]
 8004bd0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bd8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be4:	db3f      	blt.n	8004c66 <moveGyroPIDOld+0x4ce>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8004be6:	4b52      	ldr	r3, [pc, #328]	; (8004d30 <moveGyroPIDOld+0x598>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2200      	movs	r2, #0
 8004bec:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 8004bee:	4b50      	ldr	r3, [pc, #320]	; (8004d30 <moveGyroPIDOld+0x598>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	63da      	str	r2, [r3, #60]	; 0x3c
//				 moving = 0;
				sprintf(messageA, "dist: %.2f\0", distance);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fb fca6 	bl	8000548 <__aeabi_f2d>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	f107 0020 	add.w	r0, r7, #32
 8004c04:	494b      	ldr	r1, [pc, #300]	; (8004d34 <moveGyroPIDOld+0x59c>)
 8004c06:	f00c f819 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 10, messageA);
 8004c0a:	f107 0320 	add.w	r3, r7, #32
 8004c0e:	461a      	mov	r2, r3
 8004c10:	210a      	movs	r1, #10
 8004c12:	200a      	movs	r0, #10
 8004c14:	f001 fca4 	bl	8006560 <OLED_ShowString>
//				sprintf(messageA, "SLeft: %2d\0", pwmValA);
//				OLED_ShowString(10, 20, messageA);
				sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 8004c18:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8004c1c:	f7fb fc94 	bl	8000548 <__aeabi_f2d>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	f107 0020 	add.w	r0, r7, #32
 8004c28:	4943      	ldr	r1, [pc, #268]	; (8004d38 <moveGyroPIDOld+0x5a0>)
 8004c2a:	f00c f807 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 30, messageA);
 8004c2e:	f107 0320 	add.w	r3, r7, #32
 8004c32:	461a      	mov	r2, r3
 8004c34:	211e      	movs	r1, #30
 8004c36:	200a      	movs	r0, #10
 8004c38:	f001 fc92 	bl	8006560 <OLED_ShowString>
//
//				sprintf(messageB, "SRight: %2d\0", pwmValC);
//				OLED_ShowString(10, 40, messageB);
				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 8004c3c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8004c40:	f7fb fc82 	bl	8000548 <__aeabi_f2d>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	f107 000c 	add.w	r0, r7, #12
 8004c4c:	493b      	ldr	r1, [pc, #236]	; (8004d3c <moveGyroPIDOld+0x5a4>)
 8004c4e:	f00b fff5 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 50, messageB);
 8004c52:	f107 030c 	add.w	r3, r7, #12
 8004c56:	461a      	mov	r2, r3
 8004c58:	2132      	movs	r1, #50	; 0x32
 8004c5a:	200a      	movs	r0, #10
 8004c5c:	f001 fc80 	bl	8006560 <OLED_ShowString>
				OLED_Refresh_Gram();
 8004c60:	f001 fb0a 	bl	8006278 <OLED_Refresh_Gram>
				break;
 8004c64:	e043      	b.n	8004cee <moveGyroPIDOld+0x556>
//			// OLED
//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
//			OLED_ShowString(10, 30, messageA);
//			sprintf(messageB, "SRight: %2d\0", diffRight);
//			OLED_ShowString(10, 40, messageB);
			sprintf(messageA, "dist: %.2f\0", distance);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fb fc6e 	bl	8000548 <__aeabi_f2d>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	f107 0020 	add.w	r0, r7, #32
 8004c74:	492f      	ldr	r1, [pc, #188]	; (8004d34 <moveGyroPIDOld+0x59c>)
 8004c76:	f00b ffe1 	bl	8010c3c <siprintf>
			OLED_ShowString(10, 10, messageA);
 8004c7a:	f107 0320 	add.w	r3, r7, #32
 8004c7e:	461a      	mov	r2, r3
 8004c80:	210a      	movs	r1, #10
 8004c82:	200a      	movs	r0, #10
 8004c84:	f001 fc6c 	bl	8006560 <OLED_ShowString>

			sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 8004c88:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8004c8c:	f7fb fc5c 	bl	8000548 <__aeabi_f2d>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	f107 0020 	add.w	r0, r7, #32
 8004c98:	4927      	ldr	r1, [pc, #156]	; (8004d38 <moveGyroPIDOld+0x5a0>)
 8004c9a:	f00b ffcf 	bl	8010c3c <siprintf>
			OLED_ShowString(10, 30, messageA);
 8004c9e:	f107 0320 	add.w	r3, r7, #32
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	211e      	movs	r1, #30
 8004ca6:	200a      	movs	r0, #10
 8004ca8:	f001 fc5a 	bl	8006560 <OLED_ShowString>

			sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 8004cac:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8004cb0:	f7fb fc4a 	bl	8000548 <__aeabi_f2d>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	f107 000c 	add.w	r0, r7, #12
 8004cbc:	491f      	ldr	r1, [pc, #124]	; (8004d3c <moveGyroPIDOld+0x5a4>)
 8004cbe:	f00b ffbd 	bl	8010c3c <siprintf>
			OLED_ShowString(10, 50, messageB);
 8004cc2:	f107 030c 	add.w	r3, r7, #12
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	2132      	movs	r1, #50	; 0x32
 8004cca:	200a      	movs	r0, #10
 8004ccc:	f001 fc48 	bl	8006560 <OLED_ShowString>
			OLED_Refresh_Gram();
 8004cd0:	f001 fad2 	bl	8006278 <OLED_Refresh_Gram>

			prevTime = currTime;
 8004cd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			leftTick_prev = leftTick;
 8004cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			rightTick_prev = rightTick;
 8004ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004cec:	e5ff      	b.n	80048ee <moveGyroPIDOld+0x156>
		}
	}
//	moving = 0;
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004cee:	2201      	movs	r2, #1
 8004cf0:	2108      	movs	r1, #8
 8004cf2:	4813      	ldr	r0, [pc, #76]	; (8004d40 <moveGyroPIDOld+0x5a8>)
 8004cf4:	f002 fd5a 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2104      	movs	r1, #4
 8004cfc:	4810      	ldr	r0, [pc, #64]	; (8004d40 <moveGyroPIDOld+0x5a8>)
 8004cfe:	f002 fd55 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004d02:	2201      	movs	r2, #1
 8004d04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d08:	480e      	ldr	r0, [pc, #56]	; (8004d44 <moveGyroPIDOld+0x5ac>)
 8004d0a:	f002 fd4f 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2120      	movs	r1, #32
 8004d12:	480d      	ldr	r0, [pc, #52]	; (8004d48 <moveGyroPIDOld+0x5b0>)
 8004d14:	f002 fd4a 	bl	80077ac <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8004d18:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <moveGyroPIDOld+0x594>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2296      	movs	r2, #150	; 0x96
 8004d1e:	641a      	str	r2, [r3, #64]	; 0x40
	return;
 8004d20:	bf00      	nop
}
 8004d22:	37c8      	adds	r7, #200	; 0xc8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20000418 	.word	0x20000418
 8004d2c:	20000258 	.word	0x20000258
 8004d30:	20000378 	.word	0x20000378
 8004d34:	08014864 	.word	0x08014864
 8004d38:	08014870 	.word	0x08014870
 8004d3c:	08014880 	.word	0x08014880
 8004d40:	40020000 	.word	0x40020000
 8004d44:	40021000 	.word	0x40021000
 8004d48:	40020800 	.word	0x40020800

08004d4c <move>:

void move(float distance, int forward) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b0b0      	sub	sp, #192	; 0xc0
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d56:	6038      	str	r0, [r7, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8004d58:	2100      	movs	r1, #0
 8004d5a:	48d1      	ldr	r0, [pc, #836]	; (80050a0 <move+0x354>)
 8004d5c:	f005 fddc 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004d60:	2108      	movs	r1, #8
 8004d62:	48cf      	ldr	r0, [pc, #828]	; (80050a0 <move+0x354>)
 8004d64:	f005 fdd8 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004d68:	210c      	movs	r1, #12
 8004d6a:	48ce      	ldr	r0, [pc, #824]	; (80050a4 <move+0x358>)
 8004d6c:	f005 fdd4 	bl	800a918 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8004d70:	4bcc      	ldr	r3, [pc, #816]	; (80050a4 <move+0x358>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2296      	movs	r2, #150	; 0x96
 8004d76:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 8004d78:	2064      	movs	r0, #100	; 0x64
 8004d7a:	f008 fb80 	bl	800d47e <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI, 500, 1500,
 8004d7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d82:	2224      	movs	r2, #36	; 0x24
 8004d84:	2100      	movs	r1, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f00b f8d0 	bl	800ff2c <memset>
 8004d8c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004d90:	657b      	str	r3, [r7, #84]	; 0x54
 8004d92:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004d96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d98:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d9e:	4bc2      	ldr	r3, [pc, #776]	; (80050a8 <move+0x35c>)
 8004da0:	667b      	str	r3, [r7, #100]	; 0x64
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI, 500, 1500,
 8004da2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004da6:	2224      	movs	r2, #36	; 0x24
 8004da8:	2100      	movs	r1, #0
 8004daa:	4618      	mov	r0, r3
 8004dac:	f00b f8be 	bl	800ff2c <memset>
 8004db0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004db4:	633b      	str	r3, [r7, #48]	; 0x30
 8004db6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dbc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dc2:	4bb9      	ldr	r3, [pc, #740]	; (80050a8 <move+0x35c>)
 8004dc4:	643b      	str	r3, [r7, #64]	; 0x40
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8004dc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f001 fc86 	bl	80066dc <PIDController_Init>
	PIDController_Init(&pidRight);
 8004dd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f001 fc81 	bl	80066dc <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8004dda:	4bb4      	ldr	r3, [pc, #720]	; (80050ac <move+0x360>)
 8004ddc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8004de0:	4bb3      	ldr	r3, [pc, #716]	; (80050b0 <move+0x364>)
 8004de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 8004de6:	4bb3      	ldr	r3, [pc, #716]	; (80050b4 <move+0x368>)
 8004de8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8004dec:	213c      	movs	r1, #60	; 0x3c
 8004dee:	48b2      	ldr	r0, [pc, #712]	; (80050b8 <move+0x36c>)
 8004df0:	f006 f878 	bl	800aee4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8004df4:	213c      	movs	r1, #60	; 0x3c
 8004df6:	48b1      	ldr	r0, [pc, #708]	; (80050bc <move+0x370>)
 8004df8:	f006 f874 	bl	800aee4 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8004dfc:	4bae      	ldr	r3, [pc, #696]	; (80050b8 <move+0x36c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8004e06:	4bad      	ldr	r3, [pc, #692]	; (80050bc <move+0x370>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8004e10:	f002 f94e 	bl	80070b0 <HAL_GetTick>
 8004e14:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 8004e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float totalDistance_right = 0;
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8004e30:	2300      	movs	r3, #0
 8004e32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	int diffRight = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8004e3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004e40:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	uint16_t pwmValC = 2000;
 8004e44:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004e48:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if (forward) {
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d015      	beq.n	8004e7e <move+0x132>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004e52:	2201      	movs	r2, #1
 8004e54:	2108      	movs	r1, #8
 8004e56:	489a      	ldr	r0, [pc, #616]	; (80050c0 <move+0x374>)
 8004e58:	f002 fca8 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2104      	movs	r1, #4
 8004e60:	4897      	ldr	r0, [pc, #604]	; (80050c0 <move+0x374>)
 8004e62:	f002 fca3 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004e66:	2201      	movs	r2, #1
 8004e68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e6c:	4895      	ldr	r0, [pc, #596]	; (80050c4 <move+0x378>)
 8004e6e:	f002 fc9d 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004e72:	2200      	movs	r2, #0
 8004e74:	2120      	movs	r1, #32
 8004e76:	4894      	ldr	r0, [pc, #592]	; (80050c8 <move+0x37c>)
 8004e78:	f002 fc98 	bl	80077ac <HAL_GPIO_WritePin>
 8004e7c:	e014      	b.n	8004ea8 <move+0x15c>
	} else {
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2108      	movs	r1, #8
 8004e82:	488f      	ldr	r0, [pc, #572]	; (80050c0 <move+0x374>)
 8004e84:	f002 fc92 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8004e88:	2201      	movs	r2, #1
 8004e8a:	2104      	movs	r1, #4
 8004e8c:	488c      	ldr	r0, [pc, #560]	; (80050c0 <move+0x374>)
 8004e8e:	f002 fc8d 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8004e92:	2200      	movs	r2, #0
 8004e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e98:	488a      	ldr	r0, [pc, #552]	; (80050c4 <move+0x378>)
 8004e9a:	f002 fc87 	bl	80077ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	2120      	movs	r1, #32
 8004ea2:	4889      	ldr	r0, [pc, #548]	; (80050c8 <move+0x37c>)
 8004ea4:	f002 fc82 	bl	80077ac <HAL_GPIO_WritePin>
	}

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004ea8:	4b7d      	ldr	r3, [pc, #500]	; (80050a0 <move+0x354>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004eb0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8004eb2:	4b7b      	ldr	r3, [pc, #492]	; (80050a0 <move+0x354>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004eba:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 8004ebc:	f002 f8f8 	bl	80070b0 <HAL_GetTick>
 8004ec0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		moving = 1;
 8004ec4:	4b81      	ldr	r3, [pc, #516]	; (80050cc <move+0x380>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 8004eca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004ece:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b3c      	cmp	r3, #60	; 0x3c
 8004ed6:	d9e7      	bls.n	8004ea8 <move+0x15c>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8004ed8:	4b77      	ldr	r3, [pc, #476]	; (80050b8 <move+0x36c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8004ee2:	4b76      	ldr	r3, [pc, #472]	; (80050bc <move+0x370>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			diffLeft = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			diffRight = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8004ef8:	4b6f      	ldr	r3, [pc, #444]	; (80050b8 <move+0x36c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	2b10      	cmp	r3, #16
 8004f04:	d118      	bne.n	8004f38 <move+0x1ec>
				if (leftTick < leftTick_prev)
 8004f06:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004f0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	da07      	bge.n	8004f22 <move+0x1d6>
					diffLeft = leftTick_prev - leftTick;
 8004f12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f20:	e022      	b.n	8004f68 <move+0x21c>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8004f22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f26:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004f2a:	33ff      	adds	r3, #255	; 0xff
 8004f2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f30:	4413      	add	r3, r2
 8004f32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f36:	e017      	b.n	8004f68 <move+0x21c>
			} else {
				if (leftTick > leftTick_prev)
 8004f38:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004f3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f40:	429a      	cmp	r2, r3
 8004f42:	dd07      	ble.n	8004f54 <move+0x208>
					diffLeft = leftTick - leftTick_prev;
 8004f44:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004f48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f52:	e009      	b.n	8004f68 <move+0x21c>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8004f54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f58:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004f5c:	33ff      	adds	r3, #255	; 0xff
 8004f5e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004f62:	4413      	add	r3, r2
 8004f64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8004f68:	4b54      	ldr	r3, [pc, #336]	; (80050bc <move+0x370>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0310 	and.w	r3, r3, #16
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d118      	bne.n	8004fa8 <move+0x25c>
				if (rightTick < rightTick_prev)
 8004f76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	da07      	bge.n	8004f92 <move+0x246>
					diffRight = rightTick_prev - rightTick;
 8004f82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f90:	e022      	b.n	8004fd8 <move+0x28c>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 8004f92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f96:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004f9a:	33ff      	adds	r3, #255	; 0xff
 8004f9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004fa6:	e017      	b.n	8004fd8 <move+0x28c>
			} else {
				if (rightTick > rightTick_prev)
 8004fa8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	dd07      	ble.n	8004fc4 <move+0x278>
					diffRight = rightTick - rightTick_prev;
 8004fb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004fc2:	e009      	b.n	8004fd8 <move+0x28c>
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8004fc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fc8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004fcc:	33ff      	adds	r3, #255	; 0xff
 8004fce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8004fd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fdc:	ee07 3a90 	vmov	s15, r3
 8004fe0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fe4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fec:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8004ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
					* wheel_circumference;
			totalDistance_left += distLeft;
 8004ff8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004ffc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005004:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8005008:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800500c:	ee07 3a90 	vmov	s15, r3
 8005010:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005014:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800501c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005024:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_right += distRight;
 8005028:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800502c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005034:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
			// 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.

#define pwmValAadjust 300;
#define pwmValBadjust 525;

			if (forward) {
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d04c      	beq.n	80050d8 <move+0x38c>

				pwmValA = PIDController_Update(&pidLeft,
 800503e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005042:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800504a:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800504e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005052:	4611      	mov	r1, r2
 8005054:	edd7 0a2c 	vldr	s1, [r7, #176]	; 0xb0
 8005058:	eeb0 0a67 	vmov.f32	s0, s15
 800505c:	4618      	mov	r0, r3
 800505e:	f001 fb55 	bl	800670c <PIDController_Update>
 8005062:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF,
						totalDistance_left, pwmValA) - pwmValAadjust
 8005064:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft,
 8005066:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800506a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
				;

				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 800506e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005072:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005076:	ee67 7a87 	vmul.f32	s15, s15, s14
 800507a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800507e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005082:	4611      	mov	r1, r2
 8005084:	eef0 0a67 	vmov.f32	s1, s15
 8005088:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 800508c:	4618      	mov	r0, r3
 800508e:	f001 fb3d 	bl	800670c <PIDController_Update>
 8005092:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF, pwmValC)
						+ pwmValBadjust
 8005094:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8005096:	f203 230d 	addw	r3, r3, #525	; 0x20d
 800509a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800509e:	e03f      	b.n	8005120 <move+0x3d4>
 80050a0:	20000378 	.word	0x20000378
 80050a4:	20000258 	.word	0x20000258
 80050a8:	3d4ccccd 	.word	0x3d4ccccd
 80050ac:	44440000 	.word	0x44440000
 80050b0:	4442c000 	.word	0x4442c000
 80050b4:	41b33333 	.word	0x41b33333
 80050b8:	200002a0 	.word	0x200002a0
 80050bc:	20000330 	.word	0x20000330
 80050c0:	40020000 	.word	0x40020000
 80050c4:	40021000 	.word	0x40021000
 80050c8:	40020800 	.word	0x40020800
 80050cc:	20000414 	.word	0x20000414
 80050d0:	bd0f5c29 	.word	0xbd0f5c29
 80050d4:	bd75c28f 	.word	0xbd75c28f
				;
			} else {
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 80050d8:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80050dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80050e0:	4611      	mov	r1, r2
 80050e2:	edd7 0a2c 	vldr	s1, [r7, #176]	; 0xb0
 80050e6:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 80050ea:	4618      	mov	r0, r3
 80050ec:	f001 fb0e 	bl	800670c <PIDController_Update>
 80050f0:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR, pwmValA)
						- pwmValAadjust
 80050f2:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 80050f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050f8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
				;

				pwmValC = PIDController_Update(&pidRight,
 80050fc:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8005100:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005104:	4611      	mov	r1, r2
 8005106:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 800510a:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 800510e:	4618      	mov	r0, r3
 8005110:	f001 fafc 	bl	800670c <PIDController_Update>
 8005114:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR,
						totalDistance_right, pwmValC) + pwmValBadjust
 8005116:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight,
 8005118:	f203 230d 	addw	r3, r3, #525	; 0x20d
 800511c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
				;
			}

			if (forward) {
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d008      	beq.n	8005138 <move+0x3ec>
				distanceError = DISTANCE_ERROR_OFFSETF * distance;
 8005126:	edd7 7a01 	vldr	s15, [r7, #4]
 800512a:	ed1f 7a17 	vldr	s14, [pc, #-92]	; 80050d0 <move+0x384>
 800512e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005132:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8005136:	e007      	b.n	8005148 <move+0x3fc>
			} else {
				distanceError = DISTANCE_ERROR_OFFSETR * distance;
 8005138:	edd7 7a01 	vldr	s15, [r7, #4]
 800513c:	ed1f 7a1b 	vldr	s14, [pc, #-108]	; 80050d4 <move+0x388>
 8005140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005144:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
			}

			if (totalDistance_left >= (distance + distanceError)
 8005148:	ed97 7a01 	vldr	s14, [r7, #4]
 800514c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005154:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005158:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800515c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005160:	da0c      	bge.n	800517c <move+0x430>
					|| totalDistance_right >= (distance + distanceError)) {
 8005162:	ed97 7a01 	vldr	s14, [r7, #4]
 8005166:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800516a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800516e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005172:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517a:	db60      	blt.n	800523e <move+0x4f2>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 800517c:	4b48      	ldr	r3, [pc, #288]	; (80052a0 <move+0x554>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2200      	movs	r2, #0
 8005182:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 8005184:	4b46      	ldr	r3, [pc, #280]	; (80052a0 <move+0x554>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2200      	movs	r2, #0
 800518a:	63da      	str	r2, [r3, #60]	; 0x3c
				moving = 0;
 800518c:	4b45      	ldr	r3, [pc, #276]	; (80052a4 <move+0x558>)
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
				sprintf(messageA, "dist: %.2f\0", distance);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fb f9d8 	bl	8000548 <__aeabi_f2d>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	f107 001c 	add.w	r0, r7, #28
 80051a0:	4941      	ldr	r1, [pc, #260]	; (80052a8 <move+0x55c>)
 80051a2:	f00b fd4b 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 10, messageA);
 80051a6:	f107 031c 	add.w	r3, r7, #28
 80051aa:	461a      	mov	r2, r3
 80051ac:	210a      	movs	r1, #10
 80051ae:	200a      	movs	r0, #10
 80051b0:	f001 f9d6 	bl	8006560 <OLED_ShowString>
				sprintf(messageA, "SLeft: %2d\0", pwmValA);
 80051b4:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80051b8:	f107 031c 	add.w	r3, r7, #28
 80051bc:	493b      	ldr	r1, [pc, #236]	; (80052ac <move+0x560>)
 80051be:	4618      	mov	r0, r3
 80051c0:	f00b fd3c 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 20, messageA);
 80051c4:	f107 031c 	add.w	r3, r7, #28
 80051c8:	461a      	mov	r2, r3
 80051ca:	2114      	movs	r1, #20
 80051cc:	200a      	movs	r0, #10
 80051ce:	f001 f9c7 	bl	8006560 <OLED_ShowString>
				sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 80051d2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80051d6:	f7fb f9b7 	bl	8000548 <__aeabi_f2d>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	f107 001c 	add.w	r0, r7, #28
 80051e2:	4933      	ldr	r1, [pc, #204]	; (80052b0 <move+0x564>)
 80051e4:	f00b fd2a 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 30, messageA);
 80051e8:	f107 031c 	add.w	r3, r7, #28
 80051ec:	461a      	mov	r2, r3
 80051ee:	211e      	movs	r1, #30
 80051f0:	200a      	movs	r0, #10
 80051f2:	f001 f9b5 	bl	8006560 <OLED_ShowString>

				sprintf(messageB, "SRight: %2d\0", pwmValC);
 80051f6:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80051fa:	f107 0308 	add.w	r3, r7, #8
 80051fe:	492d      	ldr	r1, [pc, #180]	; (80052b4 <move+0x568>)
 8005200:	4618      	mov	r0, r3
 8005202:	f00b fd1b 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 40, messageB);
 8005206:	f107 0308 	add.w	r3, r7, #8
 800520a:	461a      	mov	r2, r3
 800520c:	2128      	movs	r1, #40	; 0x28
 800520e:	200a      	movs	r0, #10
 8005210:	f001 f9a6 	bl	8006560 <OLED_ShowString>
				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 8005214:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8005218:	f7fb f996 	bl	8000548 <__aeabi_f2d>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	f107 0008 	add.w	r0, r7, #8
 8005224:	4924      	ldr	r1, [pc, #144]	; (80052b8 <move+0x56c>)
 8005226:	f00b fd09 	bl	8010c3c <siprintf>
				OLED_ShowString(10, 50, messageB);
 800522a:	f107 0308 	add.w	r3, r7, #8
 800522e:	461a      	mov	r2, r3
 8005230:	2132      	movs	r1, #50	; 0x32
 8005232:	200a      	movs	r0, #10
 8005234:	f001 f994 	bl	8006560 <OLED_ShowString>
				OLED_Refresh_Gram();
 8005238:	f001 f81e 	bl	8006278 <OLED_Refresh_Gram>
				break;
 800523c:	e00c      	b.n	8005258 <move+0x50c>
//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
//			OLED_ShowString(10, 30, messageA);
//			sprintf(messageB, "SRight: %2d\0", diffRight);
//			OLED_ShowString(10, 40, messageB);

			prevTime = currTime;
 800523e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005242:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			leftTick_prev = leftTick;
 8005246:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800524a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			rightTick_prev = rightTick;
 800524e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005252:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8005256:	e627      	b.n	8004ea8 <move+0x15c>
		}
	}
	moving = 0;
 8005258:	4b12      	ldr	r3, [pc, #72]	; (80052a4 <move+0x558>)
 800525a:	2200      	movs	r2, #0
 800525c:	701a      	strb	r2, [r3, #0]
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800525e:	2201      	movs	r2, #1
 8005260:	2108      	movs	r1, #8
 8005262:	4816      	ldr	r0, [pc, #88]	; (80052bc <move+0x570>)
 8005264:	f002 faa2 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005268:	2200      	movs	r2, #0
 800526a:	2104      	movs	r1, #4
 800526c:	4813      	ldr	r0, [pc, #76]	; (80052bc <move+0x570>)
 800526e:	f002 fa9d 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005272:	2201      	movs	r2, #1
 8005274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005278:	4811      	ldr	r0, [pc, #68]	; (80052c0 <move+0x574>)
 800527a:	f002 fa97 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800527e:	2200      	movs	r2, #0
 8005280:	2120      	movs	r1, #32
 8005282:	4810      	ldr	r0, [pc, #64]	; (80052c4 <move+0x578>)
 8005284:	f002 fa92 	bl	80077ac <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8005288:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <move+0x57c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2296      	movs	r2, #150	; 0x96
 800528e:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8005290:	200a      	movs	r0, #10
 8005292:	f008 f8f4 	bl	800d47e <osDelay>
	return;
 8005296:	bf00      	nop
}
 8005298:	37c0      	adds	r7, #192	; 0xc0
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000378 	.word	0x20000378
 80052a4:	20000414 	.word	0x20000414
 80052a8:	08014864 	.word	0x08014864
 80052ac:	08014890 	.word	0x08014890
 80052b0:	08014870 	.word	0x08014870
 80052b4:	0801489c 	.word	0x0801489c
 80052b8:	08014880 	.word	0x08014880
 80052bc:	40020000 	.word	0x40020000
 80052c0:	40021000 	.word	0x40021000
 80052c4:	40020800 	.word	0x40020800
 80052c8:	20000258 	.word	0x20000258
 80052cc:	00000000 	.word	0x00000000

080052d0 <bLeft90>:

void bLeft90() {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
//	moving = 0;
//	move(0,0);
//	moveGyroPID(5.3, 0);

	// outdoor
	totalAngle = 0;
 80052d6:	4940      	ldr	r1, [pc, #256]	; (80053d8 <bLeft90+0x108>)
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	f04f 0300 	mov.w	r3, #0
 80052e0:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80052e4:	2100      	movs	r1, #0
 80052e6:	483d      	ldr	r0, [pc, #244]	; (80053dc <bLeft90+0x10c>)
 80052e8:	f005 fb16 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80052ec:	2108      	movs	r1, #8
 80052ee:	483b      	ldr	r0, [pc, #236]	; (80053dc <bLeft90+0x10c>)
 80052f0:	f005 fb12 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80052f4:	210c      	movs	r1, #12
 80052f6:	483a      	ldr	r0, [pc, #232]	; (80053e0 <bLeft90+0x110>)
 80052f8:	f005 fb0e 	bl	800a918 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80052fc:	4b38      	ldr	r3, [pc, #224]	; (80053e0 <bLeft90+0x110>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2296      	movs	r2, #150	; 0x96
 8005302:	641a      	str	r2, [r3, #64]	; 0x40
	moveGyroPID(5.5, 1);
 8005304:	2001      	movs	r0, #1
 8005306:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800530a:	f7fe fae5 	bl	80038d8 <moveGyroPID>

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800530e:	2200      	movs	r2, #0
 8005310:	2108      	movs	r1, #8
 8005312:	4834      	ldr	r0, [pc, #208]	; (80053e4 <bLeft90+0x114>)
 8005314:	f002 fa4a 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8005318:	2201      	movs	r2, #1
 800531a:	2104      	movs	r1, #4
 800531c:	4831      	ldr	r0, [pc, #196]	; (80053e4 <bLeft90+0x114>)
 800531e:	f002 fa45 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8005322:	2200      	movs	r2, #0
 8005324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005328:	482f      	ldr	r0, [pc, #188]	; (80053e8 <bLeft90+0x118>)
 800532a:	f002 fa3f 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 800532e:	2201      	movs	r2, #1
 8005330:	2120      	movs	r1, #32
 8005332:	482e      	ldr	r0, [pc, #184]	; (80053ec <bLeft90+0x11c>)
 8005334:	f002 fa3a 	bl	80077ac <HAL_GPIO_WritePin>
	moving = 1;
 8005338:	4b2d      	ldr	r3, [pc, #180]	; (80053f0 <bLeft90+0x120>)
 800533a:	2201      	movs	r2, #1
 800533c:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = LEFT;
 800533e:	4b28      	ldr	r3, [pc, #160]	; (80053e0 <bLeft90+0x110>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2269      	movs	r2, #105	; 0x69
 8005344:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 500);
 8005346:	4b25      	ldr	r3, [pc, #148]	; (80053dc <bLeft90+0x10c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800534e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2900);
 8005350:	4b22      	ldr	r3, [pc, #136]	; (80053dc <bLeft90+0x10c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f640 3254 	movw	r2, #2900	; 0xb54
 8005358:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 800535a:	e017      	b.n	800538c <bLeft90+0xbc>

		if (totalAngle <= -85) {
 800535c:	4b1e      	ldr	r3, [pc, #120]	; (80053d8 <bLeft90+0x108>)
 800535e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005362:	a31b      	add	r3, pc, #108	; (adr r3, 80053d0 <bLeft90+0x100>)
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f7fb fbc2 	bl	8000af0 <__aeabi_dcmple>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d111      	bne.n	8005396 <bLeft90+0xc6>
			break;
		}
		sprintf(messageA, "Langle %5d\0", (int) (totalAngle));
 8005372:	4b19      	ldr	r3, [pc, #100]	; (80053d8 <bLeft90+0x108>)
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	4610      	mov	r0, r2
 800537a:	4619      	mov	r1, r3
 800537c:	f7fb fbec 	bl	8000b58 <__aeabi_d2iz>
 8005380:	4602      	mov	r2, r0
 8005382:	1d3b      	adds	r3, r7, #4
 8005384:	491b      	ldr	r1, [pc, #108]	; (80053f4 <bLeft90+0x124>)
 8005386:	4618      	mov	r0, r3
 8005388:	f00b fc58 	bl	8010c3c <siprintf>
	while (moving) {
 800538c:	4b18      	ldr	r3, [pc, #96]	; (80053f0 <bLeft90+0x120>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e3      	bne.n	800535c <bLeft90+0x8c>
 8005394:	e000      	b.n	8005398 <bLeft90+0xc8>
			break;
 8005396:	bf00      	nop
		//     OLED_ShowString(10,30, messageA);
		//     OLED_Refresh_Gram();
	}
	//  stop();
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005398:	4b10      	ldr	r3, [pc, #64]	; (80053dc <bLeft90+0x10c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2200      	movs	r2, #0
 800539e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80053a0:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <bLeft90+0x10c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2200      	movs	r2, #0
 80053a6:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80053a8:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <bLeft90+0x120>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	701a      	strb	r2, [r3, #0]
	move(0, 0);
 80053ae:	2000      	movs	r0, #0
 80053b0:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80053f8 <bLeft90+0x128>
 80053b4:	f7ff fcca 	bl	8004d4c <move>
	moveGyroPID(3, 0);
 80053b8:	2000      	movs	r0, #0
 80053ba:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80053be:	f7fe fa8b 	bl	80038d8 <moveGyroPID>
//	//  dir = (dir + 3) % 4 ;
//	//  x += axis[dir][0] * left_90[xydir];
//	//  xydir = (xydir + 1) % 2;
//	//  y += axis[dir][1] * left_90[xydir];

}
 80053c2:	bf00      	nop
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	f3af 8000 	nop.w
 80053d0:	00000000 	.word	0x00000000
 80053d4:	c0554000 	.word	0xc0554000
 80053d8:	20000418 	.word	0x20000418
 80053dc:	20000378 	.word	0x20000378
 80053e0:	20000258 	.word	0x20000258
 80053e4:	40020000 	.word	0x40020000
 80053e8:	40021000 	.word	0x40021000
 80053ec:	40020800 	.word	0x40020800
 80053f0:	20000414 	.word	0x20000414
 80053f4:	080148ac 	.word	0x080148ac
	...

08005400 <bRight90>:

void bRight90() {
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
//	move(0, 0);
//	moveGyroPID(1, 0);

	// outdoor
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8005406:	2100      	movs	r1, #0
 8005408:	483f      	ldr	r0, [pc, #252]	; (8005508 <bRight90+0x108>)
 800540a:	f005 fa85 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800540e:	2108      	movs	r1, #8
 8005410:	483d      	ldr	r0, [pc, #244]	; (8005508 <bRight90+0x108>)
 8005412:	f005 fa81 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005416:	210c      	movs	r1, #12
 8005418:	483c      	ldr	r0, [pc, #240]	; (800550c <bRight90+0x10c>)
 800541a:	f005 fa7d 	bl	800a918 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 800541e:	4b3b      	ldr	r3, [pc, #236]	; (800550c <bRight90+0x10c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2296      	movs	r2, #150	; 0x96
 8005424:	641a      	str	r2, [r3, #64]	; 0x40

	moveGyroPID(7, 1);
 8005426:	2001      	movs	r0, #1
 8005428:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800542c:	f7fe fa54 	bl	80038d8 <moveGyroPID>
	totalAngle = 0;
 8005430:	4937      	ldr	r1, [pc, #220]	; (8005510 <bRight90+0x110>)
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	e9c1 2300 	strd	r2, r3, [r1]
	osDelay(100);
 800543e:	2064      	movs	r0, #100	; 0x64
 8005440:	f008 f81d 	bl	800d47e <osDelay>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8005444:	2200      	movs	r2, #0
 8005446:	2108      	movs	r1, #8
 8005448:	4832      	ldr	r0, [pc, #200]	; (8005514 <bRight90+0x114>)
 800544a:	f002 f9af 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800544e:	2201      	movs	r2, #1
 8005450:	2104      	movs	r1, #4
 8005452:	4830      	ldr	r0, [pc, #192]	; (8005514 <bRight90+0x114>)
 8005454:	f002 f9aa 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8005458:	2200      	movs	r2, #0
 800545a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800545e:	482e      	ldr	r0, [pc, #184]	; (8005518 <bRight90+0x118>)
 8005460:	f002 f9a4 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8005464:	2201      	movs	r2, #1
 8005466:	2120      	movs	r1, #32
 8005468:	482c      	ldr	r0, [pc, #176]	; (800551c <bRight90+0x11c>)
 800546a:	f002 f99f 	bl	80077ac <HAL_GPIO_WritePin>
	moving = 1;
 800546e:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <bRight90+0x120>)
 8005470:	2201      	movs	r2, #1
 8005472:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 250;
 8005474:	4b25      	ldr	r3, [pc, #148]	; (800550c <bRight90+0x10c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	22fa      	movs	r2, #250	; 0xfa
 800547a:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2700);
 800547c:	4b22      	ldr	r3, [pc, #136]	; (8005508 <bRight90+0x108>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f640 228c 	movw	r2, #2700	; 0xa8c
 8005484:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 600);
 8005486:	4b20      	ldr	r3, [pc, #128]	; (8005508 <bRight90+0x108>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800548e:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005490:	e017      	b.n	80054c2 <bRight90+0xc2>

		if (totalAngle > 83) {
 8005492:	4b1f      	ldr	r3, [pc, #124]	; (8005510 <bRight90+0x110>)
 8005494:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005498:	a319      	add	r3, pc, #100	; (adr r3, 8005500 <bRight90+0x100>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fb fb3b 	bl	8000b18 <__aeabi_dcmpgt>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d111      	bne.n	80054cc <bRight90+0xcc>
			break;
		}
		sprintf(messageA, "Langle %5d\0", (int) (totalAngle));
 80054a8:	4b19      	ldr	r3, [pc, #100]	; (8005510 <bRight90+0x110>)
 80054aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ae:	4610      	mov	r0, r2
 80054b0:	4619      	mov	r1, r3
 80054b2:	f7fb fb51 	bl	8000b58 <__aeabi_d2iz>
 80054b6:	4602      	mov	r2, r0
 80054b8:	1d3b      	adds	r3, r7, #4
 80054ba:	491a      	ldr	r1, [pc, #104]	; (8005524 <bRight90+0x124>)
 80054bc:	4618      	mov	r0, r3
 80054be:	f00b fbbd 	bl	8010c3c <siprintf>
	while (moving) {
 80054c2:	4b17      	ldr	r3, [pc, #92]	; (8005520 <bRight90+0x120>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e3      	bne.n	8005492 <bRight90+0x92>
 80054ca:	e000      	b.n	80054ce <bRight90+0xce>
			break;
 80054cc:	bf00      	nop
		//     OLED_ShowString(10,30, messageA);
		//     OLED_Refresh_Gram();
	}
	//  stop();
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80054ce:	4b0e      	ldr	r3, [pc, #56]	; (8005508 <bRight90+0x108>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2200      	movs	r2, #0
 80054d4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80054d6:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <bRight90+0x108>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2200      	movs	r2, #0
 80054dc:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80054de:	4b10      	ldr	r3, [pc, #64]	; (8005520 <bRight90+0x120>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]
	move(0, 0);
 80054e4:	2000      	movs	r0, #0
 80054e6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005528 <bRight90+0x128>
 80054ea:	f7ff fc2f 	bl	8004d4c <move>
	moveGyroPID(2.5, 0);
 80054ee:	2000      	movs	r0, #0
 80054f0:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80054f4:	f7fe f9f0 	bl	80038d8 <moveGyroPID>

}
 80054f8:	bf00      	nop
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	00000000 	.word	0x00000000
 8005504:	4054c000 	.word	0x4054c000
 8005508:	20000378 	.word	0x20000378
 800550c:	20000258 	.word	0x20000258
 8005510:	20000418 	.word	0x20000418
 8005514:	40020000 	.word	0x40020000
 8005518:	40021000 	.word	0x40021000
 800551c:	40020800 	.word	0x40020800
 8005520:	20000414 	.word	0x20000414
 8005524:	080148ac 	.word	0x080148ac
	...

08005530 <left90>:

void left90() {
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
//	//comment for task 2
////	move(0, 0);
////	moveGyroPID(10, 0);

	// outdoor
	totalAngle = 0;
 8005536:	4934      	ldr	r1, [pc, #208]	; (8005608 <left90+0xd8>)
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8005544:	2100      	movs	r1, #0
 8005546:	4831      	ldr	r0, [pc, #196]	; (800560c <left90+0xdc>)
 8005548:	f005 f9e6 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800554c:	2108      	movs	r1, #8
 800554e:	482f      	ldr	r0, [pc, #188]	; (800560c <left90+0xdc>)
 8005550:	f005 f9e2 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005554:	210c      	movs	r1, #12
 8005556:	482e      	ldr	r0, [pc, #184]	; (8005610 <left90+0xe0>)
 8005558:	f005 f9de 	bl	800a918 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 800555c:	4b2c      	ldr	r3, [pc, #176]	; (8005610 <left90+0xe0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2296      	movs	r2, #150	; 0x96
 8005562:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8005564:	2201      	movs	r2, #1
 8005566:	2108      	movs	r1, #8
 8005568:	482a      	ldr	r0, [pc, #168]	; (8005614 <left90+0xe4>)
 800556a:	f002 f91f 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800556e:	2200      	movs	r2, #0
 8005570:	2104      	movs	r1, #4
 8005572:	4828      	ldr	r0, [pc, #160]	; (8005614 <left90+0xe4>)
 8005574:	f002 f91a 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005578:	2201      	movs	r2, #1
 800557a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800557e:	4826      	ldr	r0, [pc, #152]	; (8005618 <left90+0xe8>)
 8005580:	f002 f914 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005584:	2200      	movs	r2, #0
 8005586:	2120      	movs	r1, #32
 8005588:	4824      	ldr	r0, [pc, #144]	; (800561c <left90+0xec>)
 800558a:	f002 f90f 	bl	80077ac <HAL_GPIO_WritePin>
	moving = 1;
 800558e:	4b24      	ldr	r3, [pc, #144]	; (8005620 <left90+0xf0>)
 8005590:	2201      	movs	r2, #1
 8005592:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 103;
 8005594:	4b1e      	ldr	r3, [pc, #120]	; (8005610 <left90+0xe0>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2267      	movs	r2, #103	; 0x67
 800559a:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 450);
 800559c:	4b1b      	ldr	r3, [pc, #108]	; (800560c <left90+0xdc>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80055a4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2700);
 80055a6:	4b19      	ldr	r3, [pc, #100]	; (800560c <left90+0xdc>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f640 228c 	movw	r2, #2700	; 0xa8c
 80055ae:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 80055b0:	e00a      	b.n	80055c8 <left90+0x98>

		if (totalAngle >= 85.333) {
 80055b2:	4b15      	ldr	r3, [pc, #84]	; (8005608 <left90+0xd8>)
 80055b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055b8:	a311      	add	r3, pc, #68	; (adr r3, 8005600 <left90+0xd0>)
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	f7fb faa1 	bl	8000b04 <__aeabi_dcmpge>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d104      	bne.n	80055d2 <left90+0xa2>
	while (moving) {
 80055c8:	4b15      	ldr	r3, [pc, #84]	; (8005620 <left90+0xf0>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1f0      	bne.n	80055b2 <left90+0x82>
 80055d0:	e000      	b.n	80055d4 <left90+0xa4>
			break;
 80055d2:	bf00      	nop
		}
	}
//  stop();
	htim1.Instance->CCR4 = STRAIGHT; //centre
 80055d4:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <left90+0xe0>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2296      	movs	r2, #150	; 0x96
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(5);
 80055dc:	2005      	movs	r0, #5
 80055de:	f007 ff4e 	bl	800d47e <osDelay>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80055e2:	4b0a      	ldr	r3, [pc, #40]	; (800560c <left90+0xdc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2200      	movs	r2, #0
 80055e8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <left90+0xdc>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2200      	movs	r2, #0
 80055f0:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80055f2:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <left90+0xf0>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
	//comment for task 2
//	move(0, 0);
//	moveGyroPID(12.25, 0);
}
 80055f8:	bf00      	nop
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	df3b645a 	.word	0xdf3b645a
 8005604:	4055554f 	.word	0x4055554f
 8005608:	20000418 	.word	0x20000418
 800560c:	20000378 	.word	0x20000378
 8005610:	20000258 	.word	0x20000258
 8005614:	40020000 	.word	0x40020000
 8005618:	40021000 	.word	0x40021000
 800561c:	40020800 	.word	0x40020800
 8005620:	20000414 	.word	0x20000414
 8005624:	00000000 	.word	0x00000000

08005628 <goRoundObsticleL>:

void goRoundObsticleL() {
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
//	moving = 0;
//	totalAngle = 0;

	//outdooor
	// set up
	totalAngle = 0;
 800562e:	496c      	ldr	r1, [pc, #432]	; (80057e0 <goRoundObsticleL+0x1b8>)
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800563c:	2100      	movs	r1, #0
 800563e:	4869      	ldr	r0, [pc, #420]	; (80057e4 <goRoundObsticleL+0x1bc>)
 8005640:	f005 f96a 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8005644:	2108      	movs	r1, #8
 8005646:	4867      	ldr	r0, [pc, #412]	; (80057e4 <goRoundObsticleL+0x1bc>)
 8005648:	f005 f966 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800564c:	210c      	movs	r1, #12
 800564e:	4866      	ldr	r0, [pc, #408]	; (80057e8 <goRoundObsticleL+0x1c0>)
 8005650:	f005 f962 	bl	800a918 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8005654:	4b64      	ldr	r3, [pc, #400]	; (80057e8 <goRoundObsticleL+0x1c0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2296      	movs	r2, #150	; 0x96
 800565a:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800565c:	2201      	movs	r2, #1
 800565e:	2108      	movs	r1, #8
 8005660:	4862      	ldr	r0, [pc, #392]	; (80057ec <goRoundObsticleL+0x1c4>)
 8005662:	f002 f8a3 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005666:	2200      	movs	r2, #0
 8005668:	2104      	movs	r1, #4
 800566a:	4860      	ldr	r0, [pc, #384]	; (80057ec <goRoundObsticleL+0x1c4>)
 800566c:	f002 f89e 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005670:	2201      	movs	r2, #1
 8005672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005676:	485e      	ldr	r0, [pc, #376]	; (80057f0 <goRoundObsticleL+0x1c8>)
 8005678:	f002 f898 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800567c:	2200      	movs	r2, #0
 800567e:	2120      	movs	r1, #32
 8005680:	485c      	ldr	r0, [pc, #368]	; (80057f4 <goRoundObsticleL+0x1cc>)
 8005682:	f002 f893 	bl	80077ac <HAL_GPIO_WritePin>
	moving = 1;
 8005686:	4b5c      	ldr	r3, [pc, #368]	; (80057f8 <goRoundObsticleL+0x1d0>)
 8005688:	2201      	movs	r2, #1
 800568a:	701a      	strb	r2, [r3, #0]

	// left
	htim1.Instance->CCR4 = 120;
 800568c:	4b56      	ldr	r3, [pc, #344]	; (80057e8 <goRoundObsticleL+0x1c0>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2278      	movs	r2, #120	; 0x78
 8005692:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 700);
 8005694:	4b53      	ldr	r3, [pc, #332]	; (80057e4 <goRoundObsticleL+0x1bc>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800569c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 800569e:	4b51      	ldr	r3, [pc, #324]	; (80057e4 <goRoundObsticleL+0x1bc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80056a6:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 80056a8:	e00a      	b.n	80056c0 <goRoundObsticleL+0x98>

		if (totalAngle >= 45) {
 80056aa:	4b4d      	ldr	r3, [pc, #308]	; (80057e0 <goRoundObsticleL+0x1b8>)
 80056ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	4b51      	ldr	r3, [pc, #324]	; (80057fc <goRoundObsticleL+0x1d4>)
 80056b6:	f7fb fa25 	bl	8000b04 <__aeabi_dcmpge>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d104      	bne.n	80056ca <goRoundObsticleL+0xa2>
	while (moving) {
 80056c0:	4b4d      	ldr	r3, [pc, #308]	; (80057f8 <goRoundObsticleL+0x1d0>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1f0      	bne.n	80056aa <goRoundObsticleL+0x82>
 80056c8:	e000      	b.n	80056cc <goRoundObsticleL+0xa4>
			break;
 80056ca:	bf00      	nop
		}
	}

	osDelay(20);
 80056cc:	2014      	movs	r0, #20
 80056ce:	f007 fed6 	bl	800d47e <osDelay>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80056d2:	4b44      	ldr	r3, [pc, #272]	; (80057e4 <goRoundObsticleL+0x1bc>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2200      	movs	r2, #0
 80056d8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80056da:	4b42      	ldr	r3, [pc, #264]	; (80057e4 <goRoundObsticleL+0x1bc>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2200      	movs	r2, #0
 80056e0:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80056e2:	4b45      	ldr	r3, [pc, #276]	; (80057f8 <goRoundObsticleL+0x1d0>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	701a      	strb	r2, [r3, #0]

	// right180
	totalAngle = 0;
 80056e8:	493d      	ldr	r1, [pc, #244]	; (80057e0 <goRoundObsticleL+0x1b8>)
 80056ea:	f04f 0200 	mov.w	r2, #0
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	e9c1 2300 	strd	r2, r3, [r1]
	moving = 1;
 80056f6:	4b40      	ldr	r3, [pc, #256]	; (80057f8 <goRoundObsticleL+0x1d0>)
 80056f8:	2201      	movs	r2, #1
 80056fa:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 205;
 80056fc:	4b3a      	ldr	r3, [pc, #232]	; (80057e8 <goRoundObsticleL+0x1c0>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	22cd      	movs	r2, #205	; 0xcd
 8005702:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8005704:	4b37      	ldr	r3, [pc, #220]	; (80057e4 <goRoundObsticleL+0x1bc>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800570c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 800);
 800570e:	4b35      	ldr	r3, [pc, #212]	; (80057e4 <goRoundObsticleL+0x1bc>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005716:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005718:	e00a      	b.n	8005730 <goRoundObsticleL+0x108>

		if (totalAngle < -97) {
 800571a:	4b31      	ldr	r3, [pc, #196]	; (80057e0 <goRoundObsticleL+0x1b8>)
 800571c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005720:	a32d      	add	r3, pc, #180	; (adr r3, 80057d8 <goRoundObsticleL+0x1b0>)
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f7fb f9d9 	bl	8000adc <__aeabi_dcmplt>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d104      	bne.n	800573a <goRoundObsticleL+0x112>
	while (moving) {
 8005730:	4b31      	ldr	r3, [pc, #196]	; (80057f8 <goRoundObsticleL+0x1d0>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1f0      	bne.n	800571a <goRoundObsticleL+0xf2>
 8005738:	e000      	b.n	800573c <goRoundObsticleL+0x114>
			break;
 800573a:	bf00      	nop
		}
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800573c:	4b29      	ldr	r3, [pc, #164]	; (80057e4 <goRoundObsticleL+0x1bc>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2200      	movs	r2, #0
 8005742:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005744:	4b27      	ldr	r3, [pc, #156]	; (80057e4 <goRoundObsticleL+0x1bc>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2200      	movs	r2, #0
 800574a:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 800574c:	4b2a      	ldr	r3, [pc, #168]	; (80057f8 <goRoundObsticleL+0x1d0>)
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]
	osDelay(20);
 8005752:	2014      	movs	r0, #20
 8005754:	f007 fe93 	bl	800d47e <osDelay>

	// left
	totalAngle = 0;
 8005758:	4921      	ldr	r1, [pc, #132]	; (80057e0 <goRoundObsticleL+0x1b8>)
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	e9c1 2300 	strd	r2, r3, [r1]
	moving = 1;
 8005766:	4b24      	ldr	r3, [pc, #144]	; (80057f8 <goRoundObsticleL+0x1d0>)
 8005768:	2201      	movs	r2, #1
 800576a:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 104;
 800576c:	4b1e      	ldr	r3, [pc, #120]	; (80057e8 <goRoundObsticleL+0x1c0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2268      	movs	r2, #104	; 0x68
 8005772:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 700);
 8005774:	4b1b      	ldr	r3, [pc, #108]	; (80057e4 <goRoundObsticleL+0x1bc>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800577c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 800577e:	4b19      	ldr	r3, [pc, #100]	; (80057e4 <goRoundObsticleL+0x1bc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005786:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005788:	e00a      	b.n	80057a0 <goRoundObsticleL+0x178>

		if (totalAngle >= 44) {
 800578a:	4b15      	ldr	r3, [pc, #84]	; (80057e0 <goRoundObsticleL+0x1b8>)
 800578c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <goRoundObsticleL+0x1d8>)
 8005796:	f7fb f9b5 	bl	8000b04 <__aeabi_dcmpge>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d104      	bne.n	80057aa <goRoundObsticleL+0x182>
	while (moving) {
 80057a0:	4b15      	ldr	r3, [pc, #84]	; (80057f8 <goRoundObsticleL+0x1d0>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1f0      	bne.n	800578a <goRoundObsticleL+0x162>
 80057a8:	e000      	b.n	80057ac <goRoundObsticleL+0x184>
			break;
 80057aa:	bf00      	nop
		}
	}

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80057ac:	4b0e      	ldr	r3, [pc, #56]	; (80057e8 <goRoundObsticleL+0x1c0>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2296      	movs	r2, #150	; 0x96
 80057b2:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(20);
 80057b4:	2014      	movs	r0, #20
 80057b6:	f007 fe62 	bl	800d47e <osDelay>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80057ba:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <goRoundObsticleL+0x1bc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2200      	movs	r2, #0
 80057c0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80057c2:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <goRoundObsticleL+0x1bc>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80057ca:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <goRoundObsticleL+0x1d0>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
}
 80057d0:	bf00      	nop
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	00000000 	.word	0x00000000
 80057dc:	c0584000 	.word	0xc0584000
 80057e0:	20000418 	.word	0x20000418
 80057e4:	20000378 	.word	0x20000378
 80057e8:	20000258 	.word	0x20000258
 80057ec:	40020000 	.word	0x40020000
 80057f0:	40021000 	.word	0x40021000
 80057f4:	40020800 	.word	0x40020800
 80057f8:	20000414 	.word	0x20000414
 80057fc:	40468000 	.word	0x40468000
 8005800:	40460000 	.word	0x40460000

08005804 <goRoundObsticleR>:

void goRoundObsticleR() {
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
//	moving = 0;
//	totalAngle = 0;

	//outdoor
	// set up
	totalAngle = 0;
 800580a:	496e      	ldr	r1, [pc, #440]	; (80059c4 <goRoundObsticleR+0x1c0>)
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8005818:	2100      	movs	r1, #0
 800581a:	486b      	ldr	r0, [pc, #428]	; (80059c8 <goRoundObsticleR+0x1c4>)
 800581c:	f005 f87c 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8005820:	2108      	movs	r1, #8
 8005822:	4869      	ldr	r0, [pc, #420]	; (80059c8 <goRoundObsticleR+0x1c4>)
 8005824:	f005 f878 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005828:	210c      	movs	r1, #12
 800582a:	4868      	ldr	r0, [pc, #416]	; (80059cc <goRoundObsticleR+0x1c8>)
 800582c:	f005 f874 	bl	800a918 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8005830:	4b66      	ldr	r3, [pc, #408]	; (80059cc <goRoundObsticleR+0x1c8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2296      	movs	r2, #150	; 0x96
 8005836:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8005838:	2201      	movs	r2, #1
 800583a:	2108      	movs	r1, #8
 800583c:	4864      	ldr	r0, [pc, #400]	; (80059d0 <goRoundObsticleR+0x1cc>)
 800583e:	f001 ffb5 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005842:	2200      	movs	r2, #0
 8005844:	2104      	movs	r1, #4
 8005846:	4862      	ldr	r0, [pc, #392]	; (80059d0 <goRoundObsticleR+0x1cc>)
 8005848:	f001 ffb0 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800584c:	2201      	movs	r2, #1
 800584e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005852:	4860      	ldr	r0, [pc, #384]	; (80059d4 <goRoundObsticleR+0x1d0>)
 8005854:	f001 ffaa 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005858:	2200      	movs	r2, #0
 800585a:	2120      	movs	r1, #32
 800585c:	485e      	ldr	r0, [pc, #376]	; (80059d8 <goRoundObsticleR+0x1d4>)
 800585e:	f001 ffa5 	bl	80077ac <HAL_GPIO_WritePin>
	moving = 1;
 8005862:	4b5e      	ldr	r3, [pc, #376]	; (80059dc <goRoundObsticleR+0x1d8>)
 8005864:	2201      	movs	r2, #1
 8005866:	701a      	strb	r2, [r3, #0]

	//right
	totalAngle = 0;
 8005868:	4956      	ldr	r1, [pc, #344]	; (80059c4 <goRoundObsticleR+0x1c0>)
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	e9c1 2300 	strd	r2, r3, [r1]
	htim1.Instance->CCR4 = 180;
 8005876:	4b55      	ldr	r3, [pc, #340]	; (80059cc <goRoundObsticleR+0x1c8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	22b4      	movs	r2, #180	; 0xb4
 800587c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 800587e:	4b52      	ldr	r3, [pc, #328]	; (80059c8 <goRoundObsticleR+0x1c4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005886:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 800);
 8005888:	4b4f      	ldr	r3, [pc, #316]	; (80059c8 <goRoundObsticleR+0x1c4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005890:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005892:	e00a      	b.n	80058aa <goRoundObsticleR+0xa6>

		if (totalAngle <= -45) {
 8005894:	4b4b      	ldr	r3, [pc, #300]	; (80059c4 <goRoundObsticleR+0x1c0>)
 8005896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800589a:	f04f 0200 	mov.w	r2, #0
 800589e:	4b50      	ldr	r3, [pc, #320]	; (80059e0 <goRoundObsticleR+0x1dc>)
 80058a0:	f7fb f926 	bl	8000af0 <__aeabi_dcmple>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d104      	bne.n	80058b4 <goRoundObsticleR+0xb0>
	while (moving) {
 80058aa:	4b4c      	ldr	r3, [pc, #304]	; (80059dc <goRoundObsticleR+0x1d8>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1f0      	bne.n	8005894 <goRoundObsticleR+0x90>
 80058b2:	e000      	b.n	80058b6 <goRoundObsticleR+0xb2>
			break;
 80058b4:	bf00      	nop
		}
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80058b6:	4b44      	ldr	r3, [pc, #272]	; (80059c8 <goRoundObsticleR+0x1c4>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2200      	movs	r2, #0
 80058bc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80058be:	4b42      	ldr	r3, [pc, #264]	; (80059c8 <goRoundObsticleR+0x1c4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2200      	movs	r2, #0
 80058c4:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80058c6:	4b45      	ldr	r3, [pc, #276]	; (80059dc <goRoundObsticleR+0x1d8>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]
	osDelay(20);
 80058cc:	2014      	movs	r0, #20
 80058ce:	f007 fdd6 	bl	800d47e <osDelay>

	// left180
	totalAngle = 0;
 80058d2:	493c      	ldr	r1, [pc, #240]	; (80059c4 <goRoundObsticleR+0x1c0>)
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	e9c1 2300 	strd	r2, r3, [r1]
	moving = 1;
 80058e0:	4b3e      	ldr	r3, [pc, #248]	; (80059dc <goRoundObsticleR+0x1d8>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 103;
 80058e6:	4b39      	ldr	r3, [pc, #228]	; (80059cc <goRoundObsticleR+0x1c8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2267      	movs	r2, #103	; 0x67
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 700);
 80058ee:	4b36      	ldr	r3, [pc, #216]	; (80059c8 <goRoundObsticleR+0x1c4>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80058f6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 80058f8:	4b33      	ldr	r3, [pc, #204]	; (80059c8 <goRoundObsticleR+0x1c4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005900:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005902:	e00a      	b.n	800591a <goRoundObsticleR+0x116>

		if (totalAngle >= 92) {
 8005904:	4b2f      	ldr	r3, [pc, #188]	; (80059c4 <goRoundObsticleR+0x1c0>)
 8005906:	e9d3 0100 	ldrd	r0, r1, [r3]
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	4b35      	ldr	r3, [pc, #212]	; (80059e4 <goRoundObsticleR+0x1e0>)
 8005910:	f7fb f8f8 	bl	8000b04 <__aeabi_dcmpge>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d104      	bne.n	8005924 <goRoundObsticleR+0x120>
	while (moving) {
 800591a:	4b30      	ldr	r3, [pc, #192]	; (80059dc <goRoundObsticleR+0x1d8>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <goRoundObsticleR+0x100>
 8005922:	e000      	b.n	8005926 <goRoundObsticleR+0x122>
			break;
 8005924:	bf00      	nop
		}
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005926:	4b28      	ldr	r3, [pc, #160]	; (80059c8 <goRoundObsticleR+0x1c4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2200      	movs	r2, #0
 800592c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800592e:	4b26      	ldr	r3, [pc, #152]	; (80059c8 <goRoundObsticleR+0x1c4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2200      	movs	r2, #0
 8005934:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 8005936:	4b29      	ldr	r3, [pc, #164]	; (80059dc <goRoundObsticleR+0x1d8>)
 8005938:	2200      	movs	r2, #0
 800593a:	701a      	strb	r2, [r3, #0]
	osDelay(20);
 800593c:	2014      	movs	r0, #20
 800593e:	f007 fd9e 	bl	800d47e <osDelay>

	// right
	totalAngle = 0;
 8005942:	4920      	ldr	r1, [pc, #128]	; (80059c4 <goRoundObsticleR+0x1c0>)
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	e9c1 2300 	strd	r2, r3, [r1]
	moving = 1;
 8005950:	4b22      	ldr	r3, [pc, #136]	; (80059dc <goRoundObsticleR+0x1d8>)
 8005952:	2201      	movs	r2, #1
 8005954:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 220;
 8005956:	4b1d      	ldr	r3, [pc, #116]	; (80059cc <goRoundObsticleR+0x1c8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	22dc      	movs	r2, #220	; 0xdc
 800595c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 800595e:	4b1a      	ldr	r3, [pc, #104]	; (80059c8 <goRoundObsticleR+0x1c4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005966:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 800);
 8005968:	4b17      	ldr	r3, [pc, #92]	; (80059c8 <goRoundObsticleR+0x1c4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005970:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005972:	e00a      	b.n	800598a <goRoundObsticleR+0x186>

		if (totalAngle <= -41) {
 8005974:	4b13      	ldr	r3, [pc, #76]	; (80059c4 <goRoundObsticleR+0x1c0>)
 8005976:	e9d3 0100 	ldrd	r0, r1, [r3]
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <goRoundObsticleR+0x1e4>)
 8005980:	f7fb f8b6 	bl	8000af0 <__aeabi_dcmple>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d104      	bne.n	8005994 <goRoundObsticleR+0x190>
	while (moving) {
 800598a:	4b14      	ldr	r3, [pc, #80]	; (80059dc <goRoundObsticleR+0x1d8>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1f0      	bne.n	8005974 <goRoundObsticleR+0x170>
 8005992:	e000      	b.n	8005996 <goRoundObsticleR+0x192>
			break;
 8005994:	bf00      	nop
		}
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005996:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <goRoundObsticleR+0x1c4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2200      	movs	r2, #0
 800599c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800599e:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <goRoundObsticleR+0x1c4>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2200      	movs	r2, #0
 80059a4:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80059a6:	4b0d      	ldr	r3, [pc, #52]	; (80059dc <goRoundObsticleR+0x1d8>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = STRAIGHT; //centre
 80059ac:	4b07      	ldr	r3, [pc, #28]	; (80059cc <goRoundObsticleR+0x1c8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2296      	movs	r2, #150	; 0x96
 80059b2:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(20);
 80059b4:	2014      	movs	r0, #20
 80059b6:	f007 fd62 	bl	800d47e <osDelay>

}
 80059ba:	bf00      	nop
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	20000418 	.word	0x20000418
 80059c8:	20000378 	.word	0x20000378
 80059cc:	20000258 	.word	0x20000258
 80059d0:	40020000 	.word	0x40020000
 80059d4:	40021000 	.word	0x40021000
 80059d8:	40020800 	.word	0x40020800
 80059dc:	20000414 	.word	0x20000414
 80059e0:	c0468000 	.word	0xc0468000
 80059e4:	40570000 	.word	0x40570000
 80059e8:	c0448000 	.word	0xc0448000
 80059ec:	00000000 	.word	0x00000000

080059f0 <right90>:

void right90() {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
//	//comment for task 2
////	move(0, 0);
////	moveGyroPID(10, 0);

	// outdoor
	totalAngle = 0;
 80059f6:	493c      	ldr	r1, [pc, #240]	; (8005ae8 <right90+0xf8>)
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8005a04:	2100      	movs	r1, #0
 8005a06:	4839      	ldr	r0, [pc, #228]	; (8005aec <right90+0xfc>)
 8005a08:	f004 ff86 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8005a0c:	2108      	movs	r1, #8
 8005a0e:	4837      	ldr	r0, [pc, #220]	; (8005aec <right90+0xfc>)
 8005a10:	f004 ff82 	bl	800a918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005a14:	210c      	movs	r1, #12
 8005a16:	4836      	ldr	r0, [pc, #216]	; (8005af0 <right90+0x100>)
 8005a18:	f004 ff7e 	bl	800a918 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8005a1c:	4b34      	ldr	r3, [pc, #208]	; (8005af0 <right90+0x100>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2296      	movs	r2, #150	; 0x96
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8005a24:	2201      	movs	r2, #1
 8005a26:	2108      	movs	r1, #8
 8005a28:	4832      	ldr	r0, [pc, #200]	; (8005af4 <right90+0x104>)
 8005a2a:	f001 febf 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2104      	movs	r1, #4
 8005a32:	4830      	ldr	r0, [pc, #192]	; (8005af4 <right90+0x104>)
 8005a34:	f001 feba 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a3e:	482e      	ldr	r0, [pc, #184]	; (8005af8 <right90+0x108>)
 8005a40:	f001 feb4 	bl	80077ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005a44:	2200      	movs	r2, #0
 8005a46:	2120      	movs	r1, #32
 8005a48:	482c      	ldr	r0, [pc, #176]	; (8005afc <right90+0x10c>)
 8005a4a:	f001 feaf 	bl	80077ac <HAL_GPIO_WritePin>
	moving = 1;
 8005a4e:	4b2c      	ldr	r3, [pc, #176]	; (8005b00 <right90+0x110>)
 8005a50:	2201      	movs	r2, #1
 8005a52:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 250;
 8005a54:	4b26      	ldr	r3, [pc, #152]	; (8005af0 <right90+0x100>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	22fa      	movs	r2, #250	; 0xfa
 8005a5a:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2700);
 8005a5c:	4b23      	ldr	r3, [pc, #140]	; (8005aec <right90+0xfc>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f640 228c 	movw	r2, #2700	; 0xa8c
 8005a64:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 700);
 8005a66:	4b21      	ldr	r3, [pc, #132]	; (8005aec <right90+0xfc>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8005a6e:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005a70:	e017      	b.n	8005aa2 <right90+0xb2>

		if (totalAngle < -85.333) {
 8005a72:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <right90+0xf8>)
 8005a74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a78:	a319      	add	r3, pc, #100	; (adr r3, 8005ae0 <right90+0xf0>)
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	f7fb f82d 	bl	8000adc <__aeabi_dcmplt>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d111      	bne.n	8005aac <right90+0xbc>
			break;
		}
		sprintf(messageA, "Rangle %5d\0", (int) (totalAngle));
 8005a88:	4b17      	ldr	r3, [pc, #92]	; (8005ae8 <right90+0xf8>)
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	4610      	mov	r0, r2
 8005a90:	4619      	mov	r1, r3
 8005a92:	f7fb f861 	bl	8000b58 <__aeabi_d2iz>
 8005a96:	4602      	mov	r2, r0
 8005a98:	1d3b      	adds	r3, r7, #4
 8005a9a:	491a      	ldr	r1, [pc, #104]	; (8005b04 <right90+0x114>)
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f00b f8cd 	bl	8010c3c <siprintf>
	while (moving) {
 8005aa2:	4b17      	ldr	r3, [pc, #92]	; (8005b00 <right90+0x110>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e3      	bne.n	8005a72 <right90+0x82>
 8005aaa:	e000      	b.n	8005aae <right90+0xbe>
			break;
 8005aac:	bf00      	nop
	}
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8005aae:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <right90+0x100>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2296      	movs	r2, #150	; 0x96
 8005ab4:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(5);
 8005ab6:	2005      	movs	r0, #5
 8005ab8:	f007 fce1 	bl	800d47e <osDelay>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005abc:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <right90+0xfc>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005ac4:	4b09      	ldr	r3, [pc, #36]	; (8005aec <right90+0xfc>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 8005acc:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <right90+0x110>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	701a      	strb	r2, [r3, #0]
	// comment for task 2
//	move(0, 0);
//	moveGyroPID(8.75, 0);
}
 8005ad2:	bf00      	nop
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	f3af 8000 	nop.w
 8005ae0:	df3b645a 	.word	0xdf3b645a
 8005ae4:	c055554f 	.word	0xc055554f
 8005ae8:	20000418 	.word	0x20000418
 8005aec:	20000378 	.word	0x20000378
 8005af0:	20000258 	.word	0x20000258
 8005af4:	40020000 	.word	0x40020000
 8005af8:	40021000 	.word	0x40021000
 8005afc:	40020800 	.word	0x40020800
 8005b00:	20000414 	.word	0x20000414
 8005b04:	080148b8 	.word	0x080148b8

08005b08 <readByte>:

	osDelay(100);
}

////////////////////GYRO FUNCTIONS//////////////////////////
void readByte(uint8_t addr, uint8_t *data) {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	4603      	mov	r3, r0
 8005b10:	6039      	str	r1, [r7, #0]
 8005b12:	71fb      	strb	r3, [r7, #7]
	buff[0] = addr;
 8005b14:	4a0f      	ldr	r2, [pc, #60]	; (8005b54 <readByte+0x4c>)
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, buff, 1, 10);
 8005b1a:	4b0f      	ldr	r3, [pc, #60]	; (8005b58 <readByte+0x50>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	b299      	uxth	r1, r3
 8005b24:	230a      	movs	r3, #10
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	2301      	movs	r3, #1
 8005b2a:	4a0a      	ldr	r2, [pc, #40]	; (8005b54 <readByte+0x4c>)
 8005b2c:	480b      	ldr	r0, [pc, #44]	; (8005b5c <readByte+0x54>)
 8005b2e:	f001 ffb5 	bl	8007a9c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddr << 1, data, 2, 20);
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <readByte+0x50>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	b299      	uxth	r1, r3
 8005b3c:	2314      	movs	r3, #20
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	2302      	movs	r3, #2
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	4805      	ldr	r0, [pc, #20]	; (8005b5c <readByte+0x54>)
 8005b46:	f002 f8a7 	bl	8007c98 <HAL_I2C_Master_Receive>

}
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	2000044c 	.word	0x2000044c
 8005b58:	20000000 	.word	0x20000000
 8005b5c:	20000204 	.word	0x20000204

08005b60 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	4603      	mov	r3, r0
 8005b68:	460a      	mov	r2, r1
 8005b6a:	71fb      	strb	r3, [r7, #7]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	71bb      	strb	r3, [r7, #6]
	buff[0] = addr;
 8005b70:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <writeByte+0x3c>)
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	7013      	strb	r3, [r2, #0]
	buff[1] = data;
 8005b76:	4a09      	ldr	r2, [pc, #36]	; (8005b9c <writeByte+0x3c>)
 8005b78:	79bb      	ldrb	r3, [r7, #6]
 8005b7a:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, buff, 2, 20);
 8005b7c:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <writeByte+0x40>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	b299      	uxth	r1, r3
 8005b86:	2314      	movs	r3, #20
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	4a03      	ldr	r2, [pc, #12]	; (8005b9c <writeByte+0x3c>)
 8005b8e:	4805      	ldr	r0, [pc, #20]	; (8005ba4 <writeByte+0x44>)
 8005b90:	f001 ff84 	bl	8007a9c <HAL_I2C_Master_Transmit>
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	2000044c 	.word	0x2000044c
 8005ba0:	20000000 	.word	0x20000000
 8005ba4:	20000204 	.word	0x20000204

08005ba8 <gyroStart>:

void gyroStart() {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
	writeByte(0x07, 0x07);
 8005bac:	2107      	movs	r1, #7
 8005bae:	2007      	movs	r0, #7
 8005bb0:	f7ff ffd6 	bl	8005b60 <writeByte>
	osDelayUntil(10);
 8005bb4:	200a      	movs	r0, #10
 8005bb6:	f007 fc7d 	bl	800d4b4 <osDelayUntil>

	writeByte(0x07, 0x00);
 8005bba:	2100      	movs	r1, #0
 8005bbc:	2007      	movs	r0, #7
 8005bbe:	f7ff ffcf 	bl	8005b60 <writeByte>
	osDelayUntil(10);
 8005bc2:	200a      	movs	r0, #10
 8005bc4:	f007 fc76 	bl	800d4b4 <osDelayUntil>
}
 8005bc8:	bf00      	nop
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <gyroInit>:

void gyroInit() {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0

	writeByte(0x06, 0x00);
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	2006      	movs	r0, #6
 8005bd4:	f7ff ffc4 	bl	8005b60 <writeByte>
	osDelayUntil(10);
 8005bd8:	200a      	movs	r0, #10
 8005bda:	f007 fc6b 	bl	800d4b4 <osDelayUntil>
	writeByte(0x03, 0x80);
 8005bde:	2180      	movs	r1, #128	; 0x80
 8005be0:	2003      	movs	r0, #3
 8005be2:	f7ff ffbd 	bl	8005b60 <writeByte>
	osDelayUntil(10);
 8005be6:	200a      	movs	r0, #10
 8005be8:	f007 fc64 	bl	800d4b4 <osDelayUntil>
	writeByte(0x07, 0x07);
 8005bec:	2107      	movs	r1, #7
 8005bee:	2007      	movs	r0, #7
 8005bf0:	f7ff ffb6 	bl	8005b60 <writeByte>
	osDelayUntil(10);
 8005bf4:	200a      	movs	r0, #10
 8005bf6:	f007 fc5d 	bl	800d4b4 <osDelayUntil>
	writeByte(0x06, 0x01);
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	2006      	movs	r0, #6
 8005bfe:	f7ff ffaf 	bl	8005b60 <writeByte>
	osDelayUntil(10);
 8005c02:	200a      	movs	r0, #10
 8005c04:	f007 fc56 	bl	800d4b4 <osDelayUntil>
	writeByte(0x7F, 0x20);
 8005c08:	2120      	movs	r1, #32
 8005c0a:	207f      	movs	r0, #127	; 0x7f
 8005c0c:	f7ff ffa8 	bl	8005b60 <writeByte>
	osDelayUntil(10);
 8005c10:	200a      	movs	r0, #10
 8005c12:	f007 fc4f 	bl	800d4b4 <osDelayUntil>
	writeByte(0x01, 0x2F);
 8005c16:	212f      	movs	r1, #47	; 0x2f
 8005c18:	2001      	movs	r0, #1
 8005c1a:	f7ff ffa1 	bl	8005b60 <writeByte>
	osDelayUntil(10);
 8005c1e:	200a      	movs	r0, #10
 8005c20:	f007 fc48 	bl	800d4b4 <osDelayUntil>
	writeByte(0x0, 0x00);
 8005c24:	2100      	movs	r1, #0
 8005c26:	2000      	movs	r0, #0
 8005c28:	f7ff ff9a 	bl	8005b60 <writeByte>
	osDelayUntil(10);
 8005c2c:	200a      	movs	r0, #10
 8005c2e:	f007 fc41 	bl	800d4b4 <osDelayUntil>
	writeByte(0x7F, 0x00);
 8005c32:	2100      	movs	r1, #0
 8005c34:	207f      	movs	r0, #127	; 0x7f
 8005c36:	f7ff ff93 	bl	8005b60 <writeByte>
	osDelayUntil(10);
 8005c3a:	200a      	movs	r0, #10
 8005c3c:	f007 fc3a 	bl	800d4b4 <osDelayUntil>
	writeByte(0x07, 0x00);
 8005c40:	2100      	movs	r1, #0
 8005c42:	2007      	movs	r0, #7
 8005c44:	f7ff ff8c 	bl	8005b60 <writeByte>
	osDelayUntil(10);
 8005c48:	200a      	movs	r0, #10
 8005c4a:	f007 fc33 	bl	800d4b4 <osDelayUntil>

}
 8005c4e:	bf00      	nop
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b090      	sub	sp, #64	; 0x40
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t instrBuffer[40], angle;
	uint16_t i = 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	86fb      	strh	r3, [r7, #54]	; 0x36
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 1);
 8005c60:	2201      	movs	r2, #1
 8005c62:	49c3      	ldr	r1, [pc, #780]	; (8005f70 <StartDefaultTask+0x31c>)
 8005c64:	48c3      	ldr	r0, [pc, #780]	; (8005f74 <StartDefaultTask+0x320>)
 8005c66:	f006 fb60 	bl	800c32a <HAL_UART_Receive_IT>

	moving = 0;
 8005c6a:	4bc3      	ldr	r3, [pc, #780]	; (8005f78 <StartDefaultTask+0x324>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
	cmd = data = newCmdReceived = 0;
 8005c70:	4bc2      	ldr	r3, [pc, #776]	; (8005f7c <StartDefaultTask+0x328>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	4bc2      	ldr	r3, [pc, #776]	; (8005f80 <StartDefaultTask+0x32c>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	4bc0      	ldr	r3, [pc, #768]	; (8005f80 <StartDefaultTask+0x32c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	4bc0      	ldr	r3, [pc, #768]	; (8005f84 <StartDefaultTask+0x330>)
 8005c84:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	for (;;) {

		//Toggle LED just to see if the code is running
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8005c86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c8a:	48bf      	ldr	r0, [pc, #764]	; (8005f88 <StartDefaultTask+0x334>)
 8005c8c:	f001 fda7 	bl	80077de <HAL_GPIO_TogglePin>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005c90:	210c      	movs	r1, #12
 8005c92:	48be      	ldr	r0, [pc, #760]	; (8005f8c <StartDefaultTask+0x338>)
 8005c94:	f004 fe40 	bl	800a918 <HAL_TIM_PWM_Start>

		htim1.Instance->CCR4 = STRAIGHT; //centre
 8005c98:	4bbc      	ldr	r3, [pc, #752]	; (8005f8c <StartDefaultTask+0x338>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2296      	movs	r2, #150	; 0x96
 8005c9e:	641a      	str	r2, [r3, #64]	; 0x40

		sprintf(instrBuffer, "Dst: %.2f\0", Distance);
 8005ca0:	4bbb      	ldr	r3, [pc, #748]	; (8005f90 <StartDefaultTask+0x33c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fa fc4f 	bl	8000548 <__aeabi_f2d>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	f107 000c 	add.w	r0, r7, #12
 8005cb2:	49b8      	ldr	r1, [pc, #736]	; (8005f94 <StartDefaultTask+0x340>)
 8005cb4:	f00a ffc2 	bl	8010c3c <siprintf>
		OLED_ShowString(10, 30, instrBuffer);
 8005cb8:	f107 030c 	add.w	r3, r7, #12
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	211e      	movs	r1, #30
 8005cc0:	200a      	movs	r0, #10
 8005cc2:	f000 fc4d 	bl	8006560 <OLED_ShowString>
		sprintf(instrBuffer, "Trv: %.2f\0", distanceTraveled);
 8005cc6:	4bb4      	ldr	r3, [pc, #720]	; (8005f98 <StartDefaultTask+0x344>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fa fc3c 	bl	8000548 <__aeabi_f2d>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	f107 000c 	add.w	r0, r7, #12
 8005cd8:	49b0      	ldr	r1, [pc, #704]	; (8005f9c <StartDefaultTask+0x348>)
 8005cda:	f00a ffaf 	bl	8010c3c <siprintf>
		OLED_ShowString(10, 40, instrBuffer);
 8005cde:	f107 030c 	add.w	r3, r7, #12
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	2128      	movs	r1, #40	; 0x28
 8005ce6:	200a      	movs	r0, #10
 8005ce8:	f000 fc3a 	bl	8006560 <OLED_ShowString>
		OLED_Refresh_Gram();
 8005cec:	f000 fac4 	bl	8006278 <OLED_Refresh_Gram>
		// 1: forward
		// 2: left
		// 3: right
		// 4: reverse
		// 5: shortest path
		if (newCmdReceived == 1) {
 8005cf0:	4ba2      	ldr	r3, [pc, #648]	; (8005f7c <StartDefaultTask+0x328>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	f040 819f 	bne.w	8006038 <StartDefaultTask+0x3e4>
			newCmdReceived = 0;
 8005cfa:	4ba0      	ldr	r3, [pc, #640]	; (8005f7c <StartDefaultTask+0x328>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	701a      	strb	r2, [r3, #0]
			switch (cmd) {
 8005d00:	4ba0      	ldr	r3, [pc, #640]	; (8005f84 <StartDefaultTask+0x330>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	3b4c      	subs	r3, #76	; 0x4c
 8005d06:	2b2c      	cmp	r3, #44	; 0x2c
 8005d08:	f200 8192 	bhi.w	8006030 <StartDefaultTask+0x3dc>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <StartDefaultTask+0xc0>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005f1d 	.word	0x08005f1d
 8005d18:	08006031 	.word	0x08006031
 8005d1c:	08006031 	.word	0x08006031
 8005d20:	08006031 	.word	0x08006031
 8005d24:	08006031 	.word	0x08006031
 8005d28:	08006031 	.word	0x08006031
 8005d2c:	08005f29 	.word	0x08005f29
 8005d30:	08006031 	.word	0x08006031
 8005d34:	08006013 	.word	0x08006013
 8005d38:	08006031 	.word	0x08006031
 8005d3c:	08006031 	.word	0x08006031
 8005d40:	08006031 	.word	0x08006031
 8005d44:	08005fb5 	.word	0x08005fb5
 8005d48:	0800601f 	.word	0x0800601f
 8005d4c:	08006031 	.word	0x08006031
 8005d50:	08006031 	.word	0x08006031
 8005d54:	08006031 	.word	0x08006031
 8005d58:	08006031 	.word	0x08006031
 8005d5c:	08006031 	.word	0x08006031
 8005d60:	08006031 	.word	0x08006031
 8005d64:	08006031 	.word	0x08006031
 8005d68:	08005ef1 	.word	0x08005ef1
 8005d6c:	08006031 	.word	0x08006031
 8005d70:	08006031 	.word	0x08006031
 8005d74:	08005f11 	.word	0x08005f11
 8005d78:	08006031 	.word	0x08006031
 8005d7c:	08006031 	.word	0x08006031
 8005d80:	08006031 	.word	0x08006031
 8005d84:	08006031 	.word	0x08006031
 8005d88:	08006031 	.word	0x08006031
 8005d8c:	08006031 	.word	0x08006031
 8005d90:	08006031 	.word	0x08006031
 8005d94:	08005e51 	.word	0x08005e51
 8005d98:	08006031 	.word	0x08006031
 8005d9c:	08006031 	.word	0x08006031
 8005da0:	08006031 	.word	0x08006031
 8005da4:	08006031 	.word	0x08006031
 8005da8:	08006031 	.word	0x08006031
 8005dac:	08005e5d 	.word	0x08005e5d
 8005db0:	08005e69 	.word	0x08005e69
 8005db4:	08006007 	.word	0x08006007
 8005db8:	08005fef 	.word	0x08005fef
 8005dbc:	08006031 	.word	0x08006031
 8005dc0:	08005dc9 	.word	0x08005dc9
 8005dc4:	08005f35 	.word	0x08005f35
			case 'w':
				num_loops = floor(data / 50);
 8005dc8:	4b6d      	ldr	r3, [pc, #436]	; (8005f80 <StartDefaultTask+0x32c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a74      	ldr	r2, [pc, #464]	; (8005fa0 <StartDefaultTask+0x34c>)
 8005dce:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd2:	091b      	lsrs	r3, r3, #4
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fa fb95 	bl	8000504 <__aeabi_ui2d>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4610      	mov	r0, r2
 8005de0:	4619      	mov	r1, r3
 8005de2:	f7fa fee1 	bl	8000ba8 <__aeabi_d2uiz>
 8005de6:	4603      	mov	r3, r0
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	4b6e      	ldr	r3, [pc, #440]	; (8005fa4 <StartDefaultTask+0x350>)
 8005dec:	701a      	strb	r2, [r3, #0]
				remainder_dist = data % 50;
 8005dee:	4b64      	ldr	r3, [pc, #400]	; (8005f80 <StartDefaultTask+0x32c>)
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	4b6b      	ldr	r3, [pc, #428]	; (8005fa0 <StartDefaultTask+0x34c>)
 8005df4:	fba3 1302 	umull	r1, r3, r3, r2
 8005df8:	091b      	lsrs	r3, r3, #4
 8005dfa:	2132      	movs	r1, #50	; 0x32
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	4b68      	ldr	r3, [pc, #416]	; (8005fa8 <StartDefaultTask+0x354>)
 8005e06:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < num_loops; i++) {
 8005e08:	2300      	movs	r3, #0
 8005e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e0c:	e007      	b.n	8005e1e <StartDefaultTask+0x1ca>
					moveGyroPID(50, 1);
 8005e0e:	2001      	movs	r0, #1
 8005e10:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8005fac <StartDefaultTask+0x358>
 8005e14:	f7fd fd60 	bl	80038d8 <moveGyroPID>
				for (int i = 0; i < num_loops; i++) {
 8005e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e1e:	4b61      	ldr	r3, [pc, #388]	; (8005fa4 <StartDefaultTask+0x350>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e26:	4293      	cmp	r3, r2
 8005e28:	dbf1      	blt.n	8005e0e <StartDefaultTask+0x1ba>
				}
				if (remainder_dist != 0)
 8005e2a:	4b5f      	ldr	r3, [pc, #380]	; (8005fa8 <StartDefaultTask+0x354>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <StartDefaultTask+0x1f4>
					moveGyroPID(remainder_dist, 1);
 8005e32:	4b5d      	ldr	r3, [pc, #372]	; (8005fa8 <StartDefaultTask+0x354>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3e:	2001      	movs	r0, #1
 8005e40:	eeb0 0a67 	vmov.f32	s0, s15
 8005e44:	f7fd fd48 	bl	80038d8 <moveGyroPID>
//			moveGyroPIDOld(10,1);
//			gyro_move(data, 1);
//			sendToRPI("Forward done!f\n\0");
				sendToRPI("RPI:d");
 8005e48:	4859      	ldr	r0, [pc, #356]	; (8005fb0 <StartDefaultTask+0x35c>)
 8005e4a:	f7fd fd2d 	bl	80038a8 <sendToRPI>
				break;
 8005e4e:	e0f0      	b.n	8006032 <StartDefaultTask+0x3de>
			case 'l':
//			turn(1, 1);
				left90();
 8005e50:	f7ff fb6e 	bl	8005530 <left90>
//			sendToRPI("Left done!\0");
				sendToRPI("RPI:d");
 8005e54:	4856      	ldr	r0, [pc, #344]	; (8005fb0 <StartDefaultTask+0x35c>)
 8005e56:	f7fd fd27 	bl	80038a8 <sendToRPI>
				break;
 8005e5a:	e0ea      	b.n	8006032 <StartDefaultTask+0x3de>
			case 'r':
//			turn(0, 1);
				right90();
 8005e5c:	f7ff fdc8 	bl	80059f0 <right90>
//			sendToRPI("Right done!\0");
				sendToRPI("RPI:d");
 8005e60:	4853      	ldr	r0, [pc, #332]	; (8005fb0 <StartDefaultTask+0x35c>)
 8005e62:	f7fd fd21 	bl	80038a8 <sendToRPI>
				break;
 8005e66:	e0e4      	b.n	8006032 <StartDefaultTask+0x3de>
			case 's':
				num_loops = floor(data / 50);
 8005e68:	4b45      	ldr	r3, [pc, #276]	; (8005f80 <StartDefaultTask+0x32c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a4c      	ldr	r2, [pc, #304]	; (8005fa0 <StartDefaultTask+0x34c>)
 8005e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e72:	091b      	lsrs	r3, r3, #4
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fa fb45 	bl	8000504 <__aeabi_ui2d>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4610      	mov	r0, r2
 8005e80:	4619      	mov	r1, r3
 8005e82:	f7fa fe91 	bl	8000ba8 <__aeabi_d2uiz>
 8005e86:	4603      	mov	r3, r0
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	4b46      	ldr	r3, [pc, #280]	; (8005fa4 <StartDefaultTask+0x350>)
 8005e8c:	701a      	strb	r2, [r3, #0]
				remainder_dist = data % 50;
 8005e8e:	4b3c      	ldr	r3, [pc, #240]	; (8005f80 <StartDefaultTask+0x32c>)
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b43      	ldr	r3, [pc, #268]	; (8005fa0 <StartDefaultTask+0x34c>)
 8005e94:	fba3 1302 	umull	r1, r3, r3, r2
 8005e98:	091b      	lsrs	r3, r3, #4
 8005e9a:	2132      	movs	r1, #50	; 0x32
 8005e9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	4b40      	ldr	r3, [pc, #256]	; (8005fa8 <StartDefaultTask+0x354>)
 8005ea6:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < num_loops; i++) {
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eac:	e007      	b.n	8005ebe <StartDefaultTask+0x26a>
					moveGyroPID(50, 0);
 8005eae:	2000      	movs	r0, #0
 8005eb0:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8005fac <StartDefaultTask+0x358>
 8005eb4:	f7fd fd10 	bl	80038d8 <moveGyroPID>
				for (int i = 0; i < num_loops; i++) {
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eba:	3301      	adds	r3, #1
 8005ebc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ebe:	4b39      	ldr	r3, [pc, #228]	; (8005fa4 <StartDefaultTask+0x350>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	dbf1      	blt.n	8005eae <StartDefaultTask+0x25a>
				}
				if (remainder_dist != 0)
 8005eca:	4b37      	ldr	r3, [pc, #220]	; (8005fa8 <StartDefaultTask+0x354>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <StartDefaultTask+0x294>
					moveGyroPID(remainder_dist, 0);
 8005ed2:	4b35      	ldr	r3, [pc, #212]	; (8005fa8 <StartDefaultTask+0x354>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ede:	2000      	movs	r0, #0
 8005ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8005ee4:	f7fd fcf8 	bl	80038d8 <moveGyroPID>
				sendToRPI("RPI:d");
 8005ee8:	4831      	ldr	r0, [pc, #196]	; (8005fb0 <StartDefaultTask+0x35c>)
 8005eea:	f7fd fcdd 	bl	80038a8 <sendToRPI>
				break;
 8005eee:	e0a0      	b.n	8006032 <StartDefaultTask+0x3de>
			case 'a':
				if (Distance < 8)
 8005ef0:	4b27      	ldr	r3, [pc, #156]	; (8005f90 <StartDefaultTask+0x33c>)
 8005ef2:	edd3 7a00 	vldr	s15, [r3]
 8005ef6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8005efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f02:	d501      	bpl.n	8005f08 <StartDefaultTask+0x2b4>
					tooClose();
 8005f04:	f7fc fe74 	bl	8002bf0 <tooClose>
				sendToRPI("RPI:d");
 8005f08:	4829      	ldr	r0, [pc, #164]	; (8005fb0 <StartDefaultTask+0x35c>)
 8005f0a:	f7fd fccd 	bl	80038a8 <sendToRPI>
				break;
 8005f0e:	e090      	b.n	8006032 <StartDefaultTask+0x3de>
			case 'd':
				parkingMoveUltra();
 8005f10:	f7fc fc60 	bl	80027d4 <parkingMoveUltra>
				sendToRPI("RPI:d");
 8005f14:	4826      	ldr	r0, [pc, #152]	; (8005fb0 <StartDefaultTask+0x35c>)
 8005f16:	f7fd fcc7 	bl	80038a8 <sendToRPI>
				break;
 8005f1a:	e08a      	b.n	8006032 <StartDefaultTask+0x3de>
			case 'L':
				bLeft90();
 8005f1c:	f7ff f9d8 	bl	80052d0 <bLeft90>
//			sendToRPI("Reverse Left done!\0");
				sendToRPI("RPI:d");
 8005f20:	4823      	ldr	r0, [pc, #140]	; (8005fb0 <StartDefaultTask+0x35c>)
 8005f22:	f7fd fcc1 	bl	80038a8 <sendToRPI>
				break;
 8005f26:	e084      	b.n	8006032 <StartDefaultTask+0x3de>
			case 'R':
				bRight90();
 8005f28:	f7ff fa6a 	bl	8005400 <bRight90>
//			sendToRPI("Reverse Right done!\0");
				sendToRPI("RPI:d");
 8005f2c:	4820      	ldr	r0, [pc, #128]	; (8005fb0 <StartDefaultTask+0x35c>)
 8005f2e:	f7fd fcbb 	bl	80038a8 <sendToRPI>
				break;
 8005f32:	e07e      	b.n	8006032 <StartDefaultTask+0x3de>
			case 'x':
				goRoundObsticleL();
 8005f34:	f7ff fb78 	bl	8005628 <goRoundObsticleL>

				htim1.Instance->CCR4 = STRAIGHT; //centre
 8005f38:	4b14      	ldr	r3, [pc, #80]	; (8005f8c <StartDefaultTask+0x338>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2296      	movs	r2, #150	; 0x96
 8005f3e:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(300);
 8005f40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005f44:	f007 fa9b 	bl	800d47e <osDelay>
				if (Distance < 8)
 8005f48:	4b11      	ldr	r3, [pc, #68]	; (8005f90 <StartDefaultTask+0x33c>)
 8005f4a:	edd3 7a00 	vldr	s15, [r3]
 8005f4e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8005f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5a:	d502      	bpl.n	8005f62 <StartDefaultTask+0x30e>
					tooClose();
 8005f5c:	f7fc fe48 	bl	8002bf0 <tooClose>
 8005f60:	e001      	b.n	8005f66 <StartDefaultTask+0x312>
				else
					moveUltra();
 8005f62:	f7fc fa11 	bl	8002388 <moveUltra>

				sendToRPI("RPI:d");
 8005f66:	4812      	ldr	r0, [pc, #72]	; (8005fb0 <StartDefaultTask+0x35c>)
 8005f68:	f7fd fc9e 	bl	80038a8 <sendToRPI>
				break;
 8005f6c:	e061      	b.n	8006032 <StartDefaultTask+0x3de>
 8005f6e:	bf00      	nop
 8005f70:	20000428 	.word	0x20000428
 8005f74:	200003c0 	.word	0x200003c0
 8005f78:	20000414 	.word	0x20000414
 8005f7c:	20000429 	.word	0x20000429
 8005f80:	2000042c 	.word	0x2000042c
 8005f84:	2000042a 	.word	0x2000042a
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	20000258 	.word	0x20000258
 8005f90:	20000448 	.word	0x20000448
 8005f94:	080148c4 	.word	0x080148c4
 8005f98:	20000434 	.word	0x20000434
 8005f9c:	080148d0 	.word	0x080148d0
 8005fa0:	51eb851f 	.word	0x51eb851f
 8005fa4:	20000430 	.word	0x20000430
 8005fa8:	20000431 	.word	0x20000431
 8005fac:	42480000 	.word	0x42480000
 8005fb0:	080148dc 	.word	0x080148dc
			case 'X':
				goRoundObsticleR();
 8005fb4:	f7ff fc26 	bl	8005804 <goRoundObsticleR>

				htim1.Instance->CCR4 = STRAIGHT; //centre
 8005fb8:	4b21      	ldr	r3, [pc, #132]	; (8006040 <StartDefaultTask+0x3ec>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2296      	movs	r2, #150	; 0x96
 8005fbe:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(1000);
 8005fc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005fc4:	f007 fa5b 	bl	800d47e <osDelay>
				if (Distance < 8)
 8005fc8:	4b1e      	ldr	r3, [pc, #120]	; (8006044 <StartDefaultTask+0x3f0>)
 8005fca:	edd3 7a00 	vldr	s15, [r3]
 8005fce:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8005fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fda:	d502      	bpl.n	8005fe2 <StartDefaultTask+0x38e>
					tooClose();
 8005fdc:	f7fc fe08 	bl	8002bf0 <tooClose>
 8005fe0:	e001      	b.n	8005fe6 <StartDefaultTask+0x392>
				else
					moveUltra();
 8005fe2:	f7fc f9d1 	bl	8002388 <moveUltra>
				sendToRPI("RPI:d");
 8005fe6:	4818      	ldr	r0, [pc, #96]	; (8006048 <StartDefaultTask+0x3f4>)
 8005fe8:	f7fd fc5e 	bl	80038a8 <sendToRPI>
				break;
 8005fec:	e021      	b.n	8006032 <StartDefaultTask+0x3de>
			case 'u':
				moveUltra();
 8005fee:	f7fc f9cb 	bl	8002388 <moveUltra>
				sendToRPI("RPI:d");
 8005ff2:	4815      	ldr	r0, [pc, #84]	; (8006048 <StartDefaultTask+0x3f4>)
 8005ff4:	f7fd fc58 	bl	80038a8 <sendToRPI>
				osDelay(50);
 8005ff8:	2032      	movs	r0, #50	; 0x32
 8005ffa:	f007 fa40 	bl	800d47e <osDelay>
				sendToRPI("RPI:s"); // command for rpi to take photo
 8005ffe:	4813      	ldr	r0, [pc, #76]	; (800604c <StartDefaultTask+0x3f8>)
 8006000:	f7fd fc52 	bl	80038a8 <sendToRPI>
//			osDelay(1000);
				break;
 8006004:	e015      	b.n	8006032 <StartDefaultTask+0x3de>
			case 't': // second
				secObstL();
 8006006:	f7fc f8f9 	bl	80021fc <secObstL>
				sendToRPI("RPI:d"); // command for rpi to take photo
 800600a:	480f      	ldr	r0, [pc, #60]	; (8006048 <StartDefaultTask+0x3f4>)
 800600c:	f7fd fc4c 	bl	80038a8 <sendToRPI>
//			osDelay(1000);
				break;
 8006010:	e00f      	b.n	8006032 <StartDefaultTask+0x3de>
			case 'T': // when first obstacle goes right-> Tln or Trn
				secObstR();
 8006012:	f7fc f955 	bl	80022c0 <secObstR>
				sendToRPI("RPI:d");
 8006016:	480c      	ldr	r0, [pc, #48]	; (8006048 <StartDefaultTask+0x3f4>)
 8006018:	f7fd fc46 	bl	80038a8 <sendToRPI>
				break;
 800601c:	e009      	b.n	8006032 <StartDefaultTask+0x3de>
			case 'Y': // when first obstacle goes left-> Yln or Yrn
				task2A2L(data);
 800601e:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <StartDefaultTask+0x3fc>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4618      	mov	r0, r3
 8006024:	f7fb fd00 	bl	8001a28 <task2A2L>
				sendToRPI("RPI:d");
 8006028:	4807      	ldr	r0, [pc, #28]	; (8006048 <StartDefaultTask+0x3f4>)
 800602a:	f7fd fc3d 	bl	80038a8 <sendToRPI>
				break;
 800602e:	e000      	b.n	8006032 <StartDefaultTask+0x3de>
			default:
				break;
 8006030:	bf00      	nop
			}

			data = 0;
 8006032:	4b07      	ldr	r3, [pc, #28]	; (8006050 <StartDefaultTask+0x3fc>)
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]
		}
		osDelay(50);
 8006038:	2032      	movs	r0, #50	; 0x32
 800603a:	f007 fa20 	bl	800d47e <osDelay>
	for (;;) {
 800603e:	e622      	b.n	8005c86 <StartDefaultTask+0x32>
 8006040:	20000258 	.word	0x20000258
 8006044:	20000448 	.word	0x20000448
 8006048:	080148dc 	.word	0x080148dc
 800604c:	080148e4 	.word	0x080148e4
 8006050:	2000042c 	.word	0x2000042c

08006054 <oled_show>:
 * @brief Function implementing the OLEDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_oled_show */
void oled_show(void *argument) {
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN oled_show */
	/* Infinite loop */

	for (;;) {
 800605c:	e7fe      	b.n	800605c <oled_show+0x8>
	...

08006060 <gyro_read>:
 * @brief Function implementing the myTask09 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_gyro_read */
void gyro_read(void *argument) {
 8006060:	b5b0      	push	{r4, r5, r7, lr}
 8006062:	b090      	sub	sp, #64	; 0x40
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN gyro_read */
	/* Infinite loop */
	uint8_t val[2] = { 0, 0 };
 8006068:	2300      	movs	r3, #0
 800606a:	863b      	strh	r3, [r7, #48]	; 0x30
	uint16_t offset_show[20];
	int16_t angularSpeed = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint32_t tick = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
	int dir, offset;
	offset = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	637b      	str	r3, [r7, #52]	; 0x34

	gyroInit();
 8006078:	f7ff fda8 	bl	8005bcc <gyroInit>
	gyroStart();
 800607c:	f7ff fd94 	bl	8005ba8 <gyroStart>
	tick = HAL_GetTick();
 8006080:	f001 f816 	bl	80070b0 <HAL_GetTick>
 8006084:	63f8      	str	r0, [r7, #60]	; 0x3c
	osDelayUntil(10);
 8006086:	200a      	movs	r0, #10
 8006088:	f007 fa14 	bl	800d4b4 <osDelayUntil>
	actualAngle = 0;
 800608c:	4966      	ldr	r1, [pc, #408]	; (8006228 <gyro_read+0x1c8>)
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	f04f 0300 	mov.w	r3, #0
 8006096:	e9c1 2300 	strd	r2, r3, [r1]

	for (;;) {

		if (HAL_GetTick() - tick >= 100L) {
 800609a:	f001 f809 	bl	80070b0 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b63      	cmp	r3, #99	; 0x63
 80060a6:	d9f8      	bls.n	800609a <gyro_read+0x3a>

			//read gyro value Z-axis
			readByte(0x37, val);
 80060a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060ac:	4619      	mov	r1, r3
 80060ae:	2037      	movs	r0, #55	; 0x37
 80060b0:	f7ff fd2a 	bl	8005b08 <readByte>
			//Angle per >100 ticks
			angularSpeed = (val[0] << 8) | val[1];
 80060b4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80060b8:	021b      	lsls	r3, r3, #8
 80060ba:	b21a      	sxth	r2, r3
 80060bc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80060c0:	b21b      	sxth	r3, r3
 80060c2:	4313      	orrs	r3, r2
 80060c4:	877b      	strh	r3, [r7, #58]	; 0x3a

			if (moving || moveStraight) {
 80060c6:	4b59      	ldr	r3, [pc, #356]	; (800622c <gyro_read+0x1cc>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d104      	bne.n	80060d8 <gyro_read+0x78>
 80060ce:	4b58      	ldr	r3, [pc, #352]	; (8006230 <gyro_read+0x1d0>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 8095 	beq.w	8006202 <gyro_read+0x1a2>
//			  actualAngle += (double)(angularSpeed + 0.5)*((HAL_GetTick() - tick)/16400.0)*1.02;
				totalAngle += (double) (angularSpeed + 0.5)
 80060d8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fa fa21 	bl	8000524 <__aeabi_i2d>
 80060e2:	f04f 0200 	mov.w	r2, #0
 80060e6:	4b53      	ldr	r3, [pc, #332]	; (8006234 <gyro_read+0x1d4>)
 80060e8:	f7fa f8d0 	bl	800028c <__adddf3>
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	4614      	mov	r4, r2
 80060f2:	461d      	mov	r5, r3
						* ((HAL_GetTick() - tick) / 16400.0) * 1.02;
 80060f4:	f000 ffdc 	bl	80070b0 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fa fa00 	bl	8000504 <__aeabi_ui2d>
 8006104:	a344      	add	r3, pc, #272	; (adr r3, 8006218 <gyro_read+0x1b8>)
 8006106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610a:	f7fa fb9f 	bl	800084c <__aeabi_ddiv>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	4620      	mov	r0, r4
 8006114:	4629      	mov	r1, r5
 8006116:	f7fa fa6f 	bl	80005f8 <__aeabi_dmul>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4610      	mov	r0, r2
 8006120:	4619      	mov	r1, r3
 8006122:	a33f      	add	r3, pc, #252	; (adr r3, 8006220 <gyro_read+0x1c0>)
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	f7fa fa66 	bl	80005f8 <__aeabi_dmul>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	4610      	mov	r0, r2
 8006132:	4619      	mov	r1, r3
				totalAngle += (double) (angularSpeed + 0.5)
 8006134:	4b40      	ldr	r3, [pc, #256]	; (8006238 <gyro_read+0x1d8>)
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f7fa f8a7 	bl	800028c <__adddf3>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	493d      	ldr	r1, [pc, #244]	; (8006238 <gyro_read+0x1d8>)
 8006144:	e9c1 2300 	strd	r2, r3, [r1]
				actualAngle += (double) (angularSpeed + 0.5)
 8006148:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800614c:	4618      	mov	r0, r3
 800614e:	f7fa f9e9 	bl	8000524 <__aeabi_i2d>
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	4b37      	ldr	r3, [pc, #220]	; (8006234 <gyro_read+0x1d4>)
 8006158:	f7fa f898 	bl	800028c <__adddf3>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4614      	mov	r4, r2
 8006162:	461d      	mov	r5, r3
						* ((HAL_GetTick() - tick) / 16400.0) * 1.02;
 8006164:	f000 ffa4 	bl	80070b0 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	4618      	mov	r0, r3
 8006170:	f7fa f9c8 	bl	8000504 <__aeabi_ui2d>
 8006174:	a328      	add	r3, pc, #160	; (adr r3, 8006218 <gyro_read+0x1b8>)
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	f7fa fb67 	bl	800084c <__aeabi_ddiv>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4620      	mov	r0, r4
 8006184:	4629      	mov	r1, r5
 8006186:	f7fa fa37 	bl	80005f8 <__aeabi_dmul>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4610      	mov	r0, r2
 8006190:	4619      	mov	r1, r3
 8006192:	a323      	add	r3, pc, #140	; (adr r3, 8006220 <gyro_read+0x1c0>)
 8006194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006198:	f7fa fa2e 	bl	80005f8 <__aeabi_dmul>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	4610      	mov	r0, r2
 80061a2:	4619      	mov	r1, r3
				actualAngle += (double) (angularSpeed + 0.5)
 80061a4:	4b20      	ldr	r3, [pc, #128]	; (8006228 <gyro_read+0x1c8>)
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	f7fa f86f 	bl	800028c <__adddf3>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	491d      	ldr	r1, [pc, #116]	; (8006228 <gyro_read+0x1c8>)
 80061b4:	e9c1 2300 	strd	r2, r3, [r1]

//			  if(actualAngle >= 720)
//			  {
//				  actualAngle = 0;
//			  }
				if (totalAngle >= 720) {
 80061b8:	4b1f      	ldr	r3, [pc, #124]	; (8006238 <gyro_read+0x1d8>)
 80061ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061be:	f04f 0200 	mov.w	r2, #0
 80061c2:	4b1e      	ldr	r3, [pc, #120]	; (800623c <gyro_read+0x1dc>)
 80061c4:	f7fa fc9e 	bl	8000b04 <__aeabi_dcmpge>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d006      	beq.n	80061dc <gyro_read+0x17c>
					totalAngle = 0;
 80061ce:	491a      	ldr	r1, [pc, #104]	; (8006238 <gyro_read+0x1d8>)
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	f04f 0300 	mov.w	r3, #0
 80061d8:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (actualAngle >= 720) {
 80061dc:	4b12      	ldr	r3, [pc, #72]	; (8006228 <gyro_read+0x1c8>)
 80061de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	4b15      	ldr	r3, [pc, #84]	; (800623c <gyro_read+0x1dc>)
 80061e8:	f7fa fc8c 	bl	8000b04 <__aeabi_dcmpge>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00e      	beq.n	8006210 <gyro_read+0x1b0>
					actualAngle = 0;
 80061f2:	490d      	ldr	r1, [pc, #52]	; (8006228 <gyro_read+0x1c8>)
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	e9c1 2300 	strd	r2, r3, [r1]
				if (actualAngle >= 720) {
 8006200:	e006      	b.n	8006210 <gyro_read+0x1b0>
				}
			} else {
				totalAngle = 0;
 8006202:	490d      	ldr	r1, [pc, #52]	; (8006238 <gyro_read+0x1d8>)
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	f04f 0300 	mov.w	r3, #0
 800620c:	e9c1 2300 	strd	r2, r3, [r1]
//

//		  sprintf(offset_show, "angle:: %5d\0", (int)(actualAngle));
//		  OLED_ShowString(10,10, offset_show);
//		  OLED_Refresh_Gram();
			tick = HAL_GetTick();
 8006210:	f000 ff4e 	bl	80070b0 <HAL_GetTick>
 8006214:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (HAL_GetTick() - tick >= 100L) {
 8006216:	e740      	b.n	800609a <gyro_read+0x3a>
 8006218:	00000000 	.word	0x00000000
 800621c:	40d00400 	.word	0x40d00400
 8006220:	851eb852 	.word	0x851eb852
 8006224:	3ff051eb 	.word	0x3ff051eb
 8006228:	20000420 	.word	0x20000420
 800622c:	20000414 	.word	0x20000414
 8006230:	20000415 	.word	0x20000415
 8006234:	3fe00000 	.word	0x3fe00000
 8006238:	20000418 	.word	0x20000418
 800623c:	40868000 	.word	0x40868000

08006240 <servoMotor>:
 * @brief Function implementing the ServoMotor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_servoMotor */
void servoMotor(void *argument) {
 8006240:	b580      	push	{r7, lr}
 8006242:	b088      	sub	sp, #32
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN servoMotor */
	uint8_t message[20];
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); //will call callback function when interrupt is detected
 8006248:	2100      	movs	r1, #0
 800624a:	4806      	ldr	r0, [pc, #24]	; (8006264 <servoMotor+0x24>)
 800624c:	f004 fc7c 	bl	800ab48 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8006250:	210c      	movs	r1, #12
 8006252:	4805      	ldr	r0, [pc, #20]	; (8006268 <servoMotor+0x28>)
 8006254:	f004 fb60 	bl	800a918 <HAL_TIM_PWM_Start>
//		osDelay(2000);
//		htim1.Instance -> CCR4 = LEFT; //left
//		osDelay(2000);
//		htim1.Instance -> CCR4 = STRAIGHT; //centre
//		osDelay(2000);
		HCSR04_Read();
 8006258:	f7fb fb24 	bl	80018a4 <HCSR04_Read>
//		sprintf(message, "distance: %5.2f\0", Distance);
//		OLED_ShowString(10, 50, message);
//		OLED_Refresh_Gram(); //Refresh Ram
		HAL_Delay(200);
 800625c:	20c8      	movs	r0, #200	; 0xc8
 800625e:	f000 ff33 	bl	80070c8 <HAL_Delay>
		HCSR04_Read();
 8006262:	e7f9      	b.n	8006258 <servoMotor+0x18>
 8006264:	200002e8 	.word	0x200002e8
 8006268:	20000258 	.word	0x20000258

0800626c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006270:	b672      	cpsid	i
}
 8006272:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8006274:	e7fe      	b.n	8006274 <Error_Handler+0x8>
	...

08006278 <OLED_Refresh_Gram>:
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	2300      	movs	r3, #0
 8006280:	71fb      	strb	r3, [r7, #7]
 8006282:	e026      	b.n	80062d2 <OLED_Refresh_Gram+0x5a>
 8006284:	79fb      	ldrb	r3, [r7, #7]
 8006286:	3b50      	subs	r3, #80	; 0x50
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2100      	movs	r1, #0
 800628c:	4618      	mov	r0, r3
 800628e:	f000 f82b 	bl	80062e8 <OLED_WR_Byte>
 8006292:	2100      	movs	r1, #0
 8006294:	2000      	movs	r0, #0
 8006296:	f000 f827 	bl	80062e8 <OLED_WR_Byte>
 800629a:	2100      	movs	r1, #0
 800629c:	2010      	movs	r0, #16
 800629e:	f000 f823 	bl	80062e8 <OLED_WR_Byte>
 80062a2:	2300      	movs	r3, #0
 80062a4:	71bb      	strb	r3, [r7, #6]
 80062a6:	e00d      	b.n	80062c4 <OLED_Refresh_Gram+0x4c>
 80062a8:	79ba      	ldrb	r2, [r7, #6]
 80062aa:	79fb      	ldrb	r3, [r7, #7]
 80062ac:	490d      	ldr	r1, [pc, #52]	; (80062e4 <OLED_Refresh_Gram+0x6c>)
 80062ae:	00d2      	lsls	r2, r2, #3
 80062b0:	440a      	add	r2, r1
 80062b2:	4413      	add	r3, r2
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2101      	movs	r1, #1
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 f815 	bl	80062e8 <OLED_WR_Byte>
 80062be:	79bb      	ldrb	r3, [r7, #6]
 80062c0:	3301      	adds	r3, #1
 80062c2:	71bb      	strb	r3, [r7, #6]
 80062c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	daed      	bge.n	80062a8 <OLED_Refresh_Gram+0x30>
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	3301      	adds	r3, #1
 80062d0:	71fb      	strb	r3, [r7, #7]
 80062d2:	79fb      	ldrb	r3, [r7, #7]
 80062d4:	2b07      	cmp	r3, #7
 80062d6:	d9d5      	bls.n	8006284 <OLED_Refresh_Gram+0xc>
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20000464 	.word	0x20000464

080062e8 <OLED_WR_Byte>:
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	460a      	mov	r2, r1
 80062f2:	71fb      	strb	r3, [r7, #7]
 80062f4:	4613      	mov	r3, r2
 80062f6:	71bb      	strb	r3, [r7, #6]
 80062f8:	79bb      	ldrb	r3, [r7, #6]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d006      	beq.n	800630c <OLED_WR_Byte+0x24>
 80062fe:	2201      	movs	r2, #1
 8006300:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006304:	481c      	ldr	r0, [pc, #112]	; (8006378 <OLED_WR_Byte+0x90>)
 8006306:	f001 fa51 	bl	80077ac <HAL_GPIO_WritePin>
 800630a:	e005      	b.n	8006318 <OLED_WR_Byte+0x30>
 800630c:	2200      	movs	r2, #0
 800630e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006312:	4819      	ldr	r0, [pc, #100]	; (8006378 <OLED_WR_Byte+0x90>)
 8006314:	f001 fa4a 	bl	80077ac <HAL_GPIO_WritePin>
 8006318:	2300      	movs	r3, #0
 800631a:	73fb      	strb	r3, [r7, #15]
 800631c:	e01e      	b.n	800635c <OLED_WR_Byte+0x74>
 800631e:	2200      	movs	r2, #0
 8006320:	2120      	movs	r1, #32
 8006322:	4815      	ldr	r0, [pc, #84]	; (8006378 <OLED_WR_Byte+0x90>)
 8006324:	f001 fa42 	bl	80077ac <HAL_GPIO_WritePin>
 8006328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800632c:	2b00      	cmp	r3, #0
 800632e:	da05      	bge.n	800633c <OLED_WR_Byte+0x54>
 8006330:	2201      	movs	r2, #1
 8006332:	2140      	movs	r1, #64	; 0x40
 8006334:	4810      	ldr	r0, [pc, #64]	; (8006378 <OLED_WR_Byte+0x90>)
 8006336:	f001 fa39 	bl	80077ac <HAL_GPIO_WritePin>
 800633a:	e004      	b.n	8006346 <OLED_WR_Byte+0x5e>
 800633c:	2200      	movs	r2, #0
 800633e:	2140      	movs	r1, #64	; 0x40
 8006340:	480d      	ldr	r0, [pc, #52]	; (8006378 <OLED_WR_Byte+0x90>)
 8006342:	f001 fa33 	bl	80077ac <HAL_GPIO_WritePin>
 8006346:	2201      	movs	r2, #1
 8006348:	2120      	movs	r1, #32
 800634a:	480b      	ldr	r0, [pc, #44]	; (8006378 <OLED_WR_Byte+0x90>)
 800634c:	f001 fa2e 	bl	80077ac <HAL_GPIO_WritePin>
 8006350:	79fb      	ldrb	r3, [r7, #7]
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	71fb      	strb	r3, [r7, #7]
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	3301      	adds	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	2b07      	cmp	r3, #7
 8006360:	d9dd      	bls.n	800631e <OLED_WR_Byte+0x36>
 8006362:	2201      	movs	r2, #1
 8006364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006368:	4803      	ldr	r0, [pc, #12]	; (8006378 <OLED_WR_Byte+0x90>)
 800636a:	f001 fa1f 	bl	80077ac <HAL_GPIO_WritePin>
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	40021000 	.word	0x40021000

0800637c <OLED_Clear>:
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	2300      	movs	r3, #0
 8006384:	71fb      	strb	r3, [r7, #7]
 8006386:	e014      	b.n	80063b2 <OLED_Clear+0x36>
 8006388:	2300      	movs	r3, #0
 800638a:	71bb      	strb	r3, [r7, #6]
 800638c:	e00a      	b.n	80063a4 <OLED_Clear+0x28>
 800638e:	79ba      	ldrb	r2, [r7, #6]
 8006390:	79fb      	ldrb	r3, [r7, #7]
 8006392:	490c      	ldr	r1, [pc, #48]	; (80063c4 <OLED_Clear+0x48>)
 8006394:	00d2      	lsls	r2, r2, #3
 8006396:	440a      	add	r2, r1
 8006398:	4413      	add	r3, r2
 800639a:	2200      	movs	r2, #0
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	79bb      	ldrb	r3, [r7, #6]
 80063a0:	3301      	adds	r3, #1
 80063a2:	71bb      	strb	r3, [r7, #6]
 80063a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	daf0      	bge.n	800638e <OLED_Clear+0x12>
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	3301      	adds	r3, #1
 80063b0:	71fb      	strb	r3, [r7, #7]
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	2b07      	cmp	r3, #7
 80063b6:	d9e7      	bls.n	8006388 <OLED_Clear+0xc>
 80063b8:	f7ff ff5e 	bl	8006278 <OLED_Refresh_Gram>
 80063bc:	bf00      	nop
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	20000464 	.word	0x20000464

080063c8 <OLED_DrawPoint>:
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	4603      	mov	r3, r0
 80063d0:	71fb      	strb	r3, [r7, #7]
 80063d2:	460b      	mov	r3, r1
 80063d4:	71bb      	strb	r3, [r7, #6]
 80063d6:	4613      	mov	r3, r2
 80063d8:	717b      	strb	r3, [r7, #5]
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]
 80063de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	db41      	blt.n	800646a <OLED_DrawPoint+0xa2>
 80063e6:	79bb      	ldrb	r3, [r7, #6]
 80063e8:	2b3f      	cmp	r3, #63	; 0x3f
 80063ea:	d83e      	bhi.n	800646a <OLED_DrawPoint+0xa2>
 80063ec:	79bb      	ldrb	r3, [r7, #6]
 80063ee:	08db      	lsrs	r3, r3, #3
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f1c3 0307 	rsb	r3, r3, #7
 80063f6:	73bb      	strb	r3, [r7, #14]
 80063f8:	79bb      	ldrb	r3, [r7, #6]
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	737b      	strb	r3, [r7, #13]
 8006400:	7b7b      	ldrb	r3, [r7, #13]
 8006402:	f1c3 0307 	rsb	r3, r3, #7
 8006406:	2201      	movs	r2, #1
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	73fb      	strb	r3, [r7, #15]
 800640e:	797b      	ldrb	r3, [r7, #5]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d012      	beq.n	800643a <OLED_DrawPoint+0x72>
 8006414:	79fa      	ldrb	r2, [r7, #7]
 8006416:	7bbb      	ldrb	r3, [r7, #14]
 8006418:	4917      	ldr	r1, [pc, #92]	; (8006478 <OLED_DrawPoint+0xb0>)
 800641a:	00d2      	lsls	r2, r2, #3
 800641c:	440a      	add	r2, r1
 800641e:	4413      	add	r3, r2
 8006420:	7818      	ldrb	r0, [r3, #0]
 8006422:	79fa      	ldrb	r2, [r7, #7]
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	7bf9      	ldrb	r1, [r7, #15]
 8006428:	4301      	orrs	r1, r0
 800642a:	b2c8      	uxtb	r0, r1
 800642c:	4912      	ldr	r1, [pc, #72]	; (8006478 <OLED_DrawPoint+0xb0>)
 800642e:	00d2      	lsls	r2, r2, #3
 8006430:	440a      	add	r2, r1
 8006432:	4413      	add	r3, r2
 8006434:	4602      	mov	r2, r0
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	e018      	b.n	800646c <OLED_DrawPoint+0xa4>
 800643a:	79fa      	ldrb	r2, [r7, #7]
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	490e      	ldr	r1, [pc, #56]	; (8006478 <OLED_DrawPoint+0xb0>)
 8006440:	00d2      	lsls	r2, r2, #3
 8006442:	440a      	add	r2, r1
 8006444:	4413      	add	r3, r2
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	b25a      	sxtb	r2, r3
 800644a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800644e:	43db      	mvns	r3, r3
 8006450:	b25b      	sxtb	r3, r3
 8006452:	4013      	ands	r3, r2
 8006454:	b259      	sxtb	r1, r3
 8006456:	79fa      	ldrb	r2, [r7, #7]
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	b2c8      	uxtb	r0, r1
 800645c:	4906      	ldr	r1, [pc, #24]	; (8006478 <OLED_DrawPoint+0xb0>)
 800645e:	00d2      	lsls	r2, r2, #3
 8006460:	440a      	add	r2, r1
 8006462:	4413      	add	r3, r2
 8006464:	4602      	mov	r2, r0
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	e000      	b.n	800646c <OLED_DrawPoint+0xa4>
 800646a:	bf00      	nop
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	20000464 	.word	0x20000464

0800647c <OLED_ShowChar>:
 800647c:	b590      	push	{r4, r7, lr}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	4604      	mov	r4, r0
 8006484:	4608      	mov	r0, r1
 8006486:	4611      	mov	r1, r2
 8006488:	461a      	mov	r2, r3
 800648a:	4623      	mov	r3, r4
 800648c:	71fb      	strb	r3, [r7, #7]
 800648e:	4603      	mov	r3, r0
 8006490:	71bb      	strb	r3, [r7, #6]
 8006492:	460b      	mov	r3, r1
 8006494:	717b      	strb	r3, [r7, #5]
 8006496:	4613      	mov	r3, r2
 8006498:	713b      	strb	r3, [r7, #4]
 800649a:	79bb      	ldrb	r3, [r7, #6]
 800649c:	733b      	strb	r3, [r7, #12]
 800649e:	797b      	ldrb	r3, [r7, #5]
 80064a0:	3b20      	subs	r3, #32
 80064a2:	717b      	strb	r3, [r7, #5]
 80064a4:	2300      	movs	r3, #0
 80064a6:	73bb      	strb	r3, [r7, #14]
 80064a8:	e04d      	b.n	8006546 <OLED_ShowChar+0xca>
 80064aa:	793b      	ldrb	r3, [r7, #4]
 80064ac:	2b0c      	cmp	r3, #12
 80064ae:	d10b      	bne.n	80064c8 <OLED_ShowChar+0x4c>
 80064b0:	797a      	ldrb	r2, [r7, #5]
 80064b2:	7bb9      	ldrb	r1, [r7, #14]
 80064b4:	4828      	ldr	r0, [pc, #160]	; (8006558 <OLED_ShowChar+0xdc>)
 80064b6:	4613      	mov	r3, r2
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4403      	add	r3, r0
 80064c0:	440b      	add	r3, r1
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	73fb      	strb	r3, [r7, #15]
 80064c6:	e007      	b.n	80064d8 <OLED_ShowChar+0x5c>
 80064c8:	797a      	ldrb	r2, [r7, #5]
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
 80064cc:	4923      	ldr	r1, [pc, #140]	; (800655c <OLED_ShowChar+0xe0>)
 80064ce:	0112      	lsls	r2, r2, #4
 80064d0:	440a      	add	r2, r1
 80064d2:	4413      	add	r3, r2
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	73fb      	strb	r3, [r7, #15]
 80064d8:	2300      	movs	r3, #0
 80064da:	737b      	strb	r3, [r7, #13]
 80064dc:	e02d      	b.n	800653a <OLED_ShowChar+0xbe>
 80064de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	da07      	bge.n	80064f6 <OLED_ShowChar+0x7a>
 80064e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80064ea:	79b9      	ldrb	r1, [r7, #6]
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff ff6a 	bl	80063c8 <OLED_DrawPoint>
 80064f4:	e00c      	b.n	8006510 <OLED_ShowChar+0x94>
 80064f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	bf0c      	ite	eq
 80064fe:	2301      	moveq	r3, #1
 8006500:	2300      	movne	r3, #0
 8006502:	b2db      	uxtb	r3, r3
 8006504:	461a      	mov	r2, r3
 8006506:	79b9      	ldrb	r1, [r7, #6]
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	4618      	mov	r0, r3
 800650c:	f7ff ff5c 	bl	80063c8 <OLED_DrawPoint>
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	73fb      	strb	r3, [r7, #15]
 8006516:	79bb      	ldrb	r3, [r7, #6]
 8006518:	3301      	adds	r3, #1
 800651a:	71bb      	strb	r3, [r7, #6]
 800651c:	79ba      	ldrb	r2, [r7, #6]
 800651e:	7b3b      	ldrb	r3, [r7, #12]
 8006520:	1ad2      	subs	r2, r2, r3
 8006522:	793b      	ldrb	r3, [r7, #4]
 8006524:	429a      	cmp	r2, r3
 8006526:	d105      	bne.n	8006534 <OLED_ShowChar+0xb8>
 8006528:	7b3b      	ldrb	r3, [r7, #12]
 800652a:	71bb      	strb	r3, [r7, #6]
 800652c:	79fb      	ldrb	r3, [r7, #7]
 800652e:	3301      	adds	r3, #1
 8006530:	71fb      	strb	r3, [r7, #7]
 8006532:	e005      	b.n	8006540 <OLED_ShowChar+0xc4>
 8006534:	7b7b      	ldrb	r3, [r7, #13]
 8006536:	3301      	adds	r3, #1
 8006538:	737b      	strb	r3, [r7, #13]
 800653a:	7b7b      	ldrb	r3, [r7, #13]
 800653c:	2b07      	cmp	r3, #7
 800653e:	d9ce      	bls.n	80064de <OLED_ShowChar+0x62>
 8006540:	7bbb      	ldrb	r3, [r7, #14]
 8006542:	3301      	adds	r3, #1
 8006544:	73bb      	strb	r3, [r7, #14]
 8006546:	7bba      	ldrb	r2, [r7, #14]
 8006548:	793b      	ldrb	r3, [r7, #4]
 800654a:	429a      	cmp	r2, r3
 800654c:	d3ad      	bcc.n	80064aa <OLED_ShowChar+0x2e>
 800654e:	bf00      	nop
 8006550:	bf00      	nop
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	bd90      	pop	{r4, r7, pc}
 8006558:	08014994 	.word	0x08014994
 800655c:	08014e08 	.word	0x08014e08

08006560 <OLED_ShowString>:
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af02      	add	r7, sp, #8
 8006566:	4603      	mov	r3, r0
 8006568:	603a      	str	r2, [r7, #0]
 800656a:	71fb      	strb	r3, [r7, #7]
 800656c:	460b      	mov	r3, r1
 800656e:	71bb      	strb	r3, [r7, #6]
 8006570:	e01f      	b.n	80065b2 <OLED_ShowString+0x52>
 8006572:	79fb      	ldrb	r3, [r7, #7]
 8006574:	2b7a      	cmp	r3, #122	; 0x7a
 8006576:	d904      	bls.n	8006582 <OLED_ShowString+0x22>
 8006578:	2300      	movs	r3, #0
 800657a:	71fb      	strb	r3, [r7, #7]
 800657c:	79bb      	ldrb	r3, [r7, #6]
 800657e:	3310      	adds	r3, #16
 8006580:	71bb      	strb	r3, [r7, #6]
 8006582:	79bb      	ldrb	r3, [r7, #6]
 8006584:	2b3a      	cmp	r3, #58	; 0x3a
 8006586:	d905      	bls.n	8006594 <OLED_ShowString+0x34>
 8006588:	2300      	movs	r3, #0
 800658a:	71fb      	strb	r3, [r7, #7]
 800658c:	79fb      	ldrb	r3, [r7, #7]
 800658e:	71bb      	strb	r3, [r7, #6]
 8006590:	f7ff fef4 	bl	800637c <OLED_Clear>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781a      	ldrb	r2, [r3, #0]
 8006598:	79b9      	ldrb	r1, [r7, #6]
 800659a:	79f8      	ldrb	r0, [r7, #7]
 800659c:	2301      	movs	r3, #1
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	230c      	movs	r3, #12
 80065a2:	f7ff ff6b 	bl	800647c <OLED_ShowChar>
 80065a6:	79fb      	ldrb	r3, [r7, #7]
 80065a8:	3308      	adds	r3, #8
 80065aa:	71fb      	strb	r3, [r7, #7]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	3301      	adds	r3, #1
 80065b0:	603b      	str	r3, [r7, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1db      	bne.n	8006572 <OLED_ShowString+0x12>
 80065ba:	bf00      	nop
 80065bc:	bf00      	nop
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <OLED_Init>:
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	f003 fc7e 	bl	8009ec8 <HAL_PWR_EnableBkUpAccess>
 80065cc:	4b41      	ldr	r3, [pc, #260]	; (80066d4 <OLED_Init+0x110>)
 80065ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d0:	4a40      	ldr	r2, [pc, #256]	; (80066d4 <OLED_Init+0x110>)
 80065d2:	f023 0301 	bic.w	r3, r3, #1
 80065d6:	6713      	str	r3, [r2, #112]	; 0x70
 80065d8:	4b3e      	ldr	r3, [pc, #248]	; (80066d4 <OLED_Init+0x110>)
 80065da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065dc:	4a3d      	ldr	r2, [pc, #244]	; (80066d4 <OLED_Init+0x110>)
 80065de:	f023 0304 	bic.w	r3, r3, #4
 80065e2:	6713      	str	r3, [r2, #112]	; 0x70
 80065e4:	f003 fc84 	bl	8009ef0 <HAL_PWR_DisableBkUpAccess>
 80065e8:	2200      	movs	r2, #0
 80065ea:	2180      	movs	r1, #128	; 0x80
 80065ec:	483a      	ldr	r0, [pc, #232]	; (80066d8 <OLED_Init+0x114>)
 80065ee:	f001 f8dd 	bl	80077ac <HAL_GPIO_WritePin>
 80065f2:	2064      	movs	r0, #100	; 0x64
 80065f4:	f000 fd68 	bl	80070c8 <HAL_Delay>
 80065f8:	2201      	movs	r2, #1
 80065fa:	2180      	movs	r1, #128	; 0x80
 80065fc:	4836      	ldr	r0, [pc, #216]	; (80066d8 <OLED_Init+0x114>)
 80065fe:	f001 f8d5 	bl	80077ac <HAL_GPIO_WritePin>
 8006602:	2100      	movs	r1, #0
 8006604:	20ae      	movs	r0, #174	; 0xae
 8006606:	f7ff fe6f 	bl	80062e8 <OLED_WR_Byte>
 800660a:	2100      	movs	r1, #0
 800660c:	20d5      	movs	r0, #213	; 0xd5
 800660e:	f7ff fe6b 	bl	80062e8 <OLED_WR_Byte>
 8006612:	2100      	movs	r1, #0
 8006614:	2050      	movs	r0, #80	; 0x50
 8006616:	f7ff fe67 	bl	80062e8 <OLED_WR_Byte>
 800661a:	2100      	movs	r1, #0
 800661c:	20a8      	movs	r0, #168	; 0xa8
 800661e:	f7ff fe63 	bl	80062e8 <OLED_WR_Byte>
 8006622:	2100      	movs	r1, #0
 8006624:	203f      	movs	r0, #63	; 0x3f
 8006626:	f7ff fe5f 	bl	80062e8 <OLED_WR_Byte>
 800662a:	2100      	movs	r1, #0
 800662c:	20d3      	movs	r0, #211	; 0xd3
 800662e:	f7ff fe5b 	bl	80062e8 <OLED_WR_Byte>
 8006632:	2100      	movs	r1, #0
 8006634:	2000      	movs	r0, #0
 8006636:	f7ff fe57 	bl	80062e8 <OLED_WR_Byte>
 800663a:	2100      	movs	r1, #0
 800663c:	2040      	movs	r0, #64	; 0x40
 800663e:	f7ff fe53 	bl	80062e8 <OLED_WR_Byte>
 8006642:	2100      	movs	r1, #0
 8006644:	208d      	movs	r0, #141	; 0x8d
 8006646:	f7ff fe4f 	bl	80062e8 <OLED_WR_Byte>
 800664a:	2100      	movs	r1, #0
 800664c:	2014      	movs	r0, #20
 800664e:	f7ff fe4b 	bl	80062e8 <OLED_WR_Byte>
 8006652:	2100      	movs	r1, #0
 8006654:	2020      	movs	r0, #32
 8006656:	f7ff fe47 	bl	80062e8 <OLED_WR_Byte>
 800665a:	2100      	movs	r1, #0
 800665c:	2002      	movs	r0, #2
 800665e:	f7ff fe43 	bl	80062e8 <OLED_WR_Byte>
 8006662:	2100      	movs	r1, #0
 8006664:	20a1      	movs	r0, #161	; 0xa1
 8006666:	f7ff fe3f 	bl	80062e8 <OLED_WR_Byte>
 800666a:	2100      	movs	r1, #0
 800666c:	20c0      	movs	r0, #192	; 0xc0
 800666e:	f7ff fe3b 	bl	80062e8 <OLED_WR_Byte>
 8006672:	2100      	movs	r1, #0
 8006674:	20da      	movs	r0, #218	; 0xda
 8006676:	f7ff fe37 	bl	80062e8 <OLED_WR_Byte>
 800667a:	2100      	movs	r1, #0
 800667c:	2012      	movs	r0, #18
 800667e:	f7ff fe33 	bl	80062e8 <OLED_WR_Byte>
 8006682:	2100      	movs	r1, #0
 8006684:	2081      	movs	r0, #129	; 0x81
 8006686:	f7ff fe2f 	bl	80062e8 <OLED_WR_Byte>
 800668a:	2100      	movs	r1, #0
 800668c:	20ef      	movs	r0, #239	; 0xef
 800668e:	f7ff fe2b 	bl	80062e8 <OLED_WR_Byte>
 8006692:	2100      	movs	r1, #0
 8006694:	20d9      	movs	r0, #217	; 0xd9
 8006696:	f7ff fe27 	bl	80062e8 <OLED_WR_Byte>
 800669a:	2100      	movs	r1, #0
 800669c:	20f1      	movs	r0, #241	; 0xf1
 800669e:	f7ff fe23 	bl	80062e8 <OLED_WR_Byte>
 80066a2:	2100      	movs	r1, #0
 80066a4:	20db      	movs	r0, #219	; 0xdb
 80066a6:	f7ff fe1f 	bl	80062e8 <OLED_WR_Byte>
 80066aa:	2100      	movs	r1, #0
 80066ac:	2030      	movs	r0, #48	; 0x30
 80066ae:	f7ff fe1b 	bl	80062e8 <OLED_WR_Byte>
 80066b2:	2100      	movs	r1, #0
 80066b4:	20a4      	movs	r0, #164	; 0xa4
 80066b6:	f7ff fe17 	bl	80062e8 <OLED_WR_Byte>
 80066ba:	2100      	movs	r1, #0
 80066bc:	20a6      	movs	r0, #166	; 0xa6
 80066be:	f7ff fe13 	bl	80062e8 <OLED_WR_Byte>
 80066c2:	2100      	movs	r1, #0
 80066c4:	20af      	movs	r0, #175	; 0xaf
 80066c6:	f7ff fe0f 	bl	80062e8 <OLED_WR_Byte>
 80066ca:	f7ff fe57 	bl	800637c <OLED_Clear>
 80066ce:	bf00      	nop
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	40023800 	.word	0x40023800
 80066d8:	40021000 	.word	0x40021000

080066dc <PIDController_Init>:
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	615a      	str	r2, [r3, #20]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	619a      	str	r2, [r3, #24]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	61da      	str	r2, [r3, #28]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	621a      	str	r2, [r3, #32]
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <PIDController_Update>:
 800670c:	b480      	push	{r7}
 800670e:	b089      	sub	sp, #36	; 0x24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	ed87 0a02 	vstr	s0, [r7, #8]
 8006718:	edc7 0a01 	vstr	s1, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
 800671e:	ed97 7a02 	vldr	s14, [r7, #8]
 8006722:	edd7 7a01 	vldr	s15, [r7, #4]
 8006726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800672a:	edc7 7a07 	vstr	s15, [r7, #28]
 800672e:	ed97 7a07 	vldr	s14, [r7, #28]
 8006732:	edd7 7a07 	vldr	s15, [r7, #28]
 8006736:	eeb4 7a67 	vcmp.f32	s14, s15
 800673a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800673e:	d702      	bvc.n	8006746 <PIDController_Update+0x3a>
 8006740:	f04f 0300 	mov.w	r3, #0
 8006744:	61fb      	str	r3, [r7, #28]
 8006746:	edd7 7a07 	vldr	s15, [r7, #28]
 800674a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800674e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006752:	db1b      	blt.n	800678c <PIDController_Update+0x80>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	ed93 7a00 	vldr	s14, [r3]
 800675a:	ed97 6a07 	vldr	s12, [r7, #28]
 800675e:	edd7 6a02 	vldr	s13, [r7, #8]
 8006762:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800676e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	ee07 3a90 	vmov	s15, r3
 8006778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800677c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006784:	ee17 3a90 	vmov	r3, s15
 8006788:	61bb      	str	r3, [r7, #24]
 800678a:	e01a      	b.n	80067c2 <PIDController_Update+0xb6>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	ed93 7a00 	vldr	s14, [r3]
 8006792:	ed97 6a07 	vldr	s12, [r7, #28]
 8006796:	edd7 6a01 	vldr	s13, [r7, #4]
 800679a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800679e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	ee07 3a90 	vmov	s15, r3
 80067b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067bc:	ee17 3a90 	vmov	r3, s15
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	ee07 3a90 	vmov	s15, r3
 80067ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80067d4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80067d8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	edd3 7a04 	vldr	s15, [r3, #16]
 80067e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	ed93 6a06 	vldr	s12, [r3, #24]
 80067ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80067f0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80067f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	ee07 3a90 	vmov	s15, r3
 80067fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800680a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800680e:	ee17 2a90 	vmov	r2, s15
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	615a      	str	r2, [r3, #20]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	429a      	cmp	r2, r3
 800681e:	da05      	bge.n	800682c <PIDController_Update+0x120>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	e001      	b.n	8006830 <PIDController_Update+0x124>
 800682c:	2300      	movs	r3, #0
 800682e:	613b      	str	r3, [r7, #16]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	429a      	cmp	r2, r3
 8006838:	dd05      	ble.n	8006846 <PIDController_Update+0x13a>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	689a      	ldr	r2, [r3, #8]
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	e001      	b.n	800684a <PIDController_Update+0x13e>
 8006846:	2300      	movs	r3, #0
 8006848:	617b      	str	r3, [r7, #20]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	429a      	cmp	r2, r3
 8006852:	da03      	bge.n	800685c <PIDController_Update+0x150>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	615a      	str	r2, [r3, #20]
 800685a:	e007      	b.n	800686c <PIDController_Update+0x160>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	429a      	cmp	r2, r3
 8006864:	dd02      	ble.n	800686c <PIDController_Update+0x160>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	615a      	str	r2, [r3, #20]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	695a      	ldr	r2, [r3, #20]
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	441a      	add	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	621a      	str	r2, [r3, #32]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a1a      	ldr	r2, [r3, #32]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	429a      	cmp	r2, r3
 8006882:	dd04      	ble.n	800688e <PIDController_Update+0x182>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	621a      	str	r2, [r3, #32]
 800688c:	e009      	b.n	80068a2 <PIDController_Update+0x196>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a1a      	ldr	r2, [r3, #32]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	429a      	cmp	r2, r3
 8006898:	da03      	bge.n	80068a2 <PIDController_Update+0x196>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	689a      	ldr	r2, [r3, #8]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	621a      	str	r2, [r3, #32]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	619a      	str	r2, [r3, #24]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	61da      	str	r2, [r3, #28]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	4618      	mov	r0, r3
 80068b4:	3724      	adds	r7, #36	; 0x24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
	...

080068c0 <HAL_MspInit>:
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	2300      	movs	r3, #0
 80068c8:	607b      	str	r3, [r7, #4]
 80068ca:	4b12      	ldr	r3, [pc, #72]	; (8006914 <HAL_MspInit+0x54>)
 80068cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ce:	4a11      	ldr	r2, [pc, #68]	; (8006914 <HAL_MspInit+0x54>)
 80068d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068d4:	6453      	str	r3, [r2, #68]	; 0x44
 80068d6:	4b0f      	ldr	r3, [pc, #60]	; (8006914 <HAL_MspInit+0x54>)
 80068d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068de:	607b      	str	r3, [r7, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2300      	movs	r3, #0
 80068e4:	603b      	str	r3, [r7, #0]
 80068e6:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <HAL_MspInit+0x54>)
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	4a0a      	ldr	r2, [pc, #40]	; (8006914 <HAL_MspInit+0x54>)
 80068ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f0:	6413      	str	r3, [r2, #64]	; 0x40
 80068f2:	4b08      	ldr	r3, [pc, #32]	; (8006914 <HAL_MspInit+0x54>)
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	2200      	movs	r2, #0
 8006900:	210f      	movs	r1, #15
 8006902:	f06f 0001 	mvn.w	r0, #1
 8006906:	f000 fcde 	bl	80072c6 <HAL_NVIC_SetPriority>
 800690a:	bf00      	nop
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	40023800 	.word	0x40023800

08006918 <HAL_I2C_MspInit>:
 8006918:	b580      	push	{r7, lr}
 800691a:	b08a      	sub	sp, #40	; 0x28
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	f107 0314 	add.w	r3, r7, #20
 8006924:	2200      	movs	r2, #0
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	605a      	str	r2, [r3, #4]
 800692a:	609a      	str	r2, [r3, #8]
 800692c:	60da      	str	r2, [r3, #12]
 800692e:	611a      	str	r2, [r3, #16]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1d      	ldr	r2, [pc, #116]	; (80069ac <HAL_I2C_MspInit+0x94>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d134      	bne.n	80069a4 <HAL_I2C_MspInit+0x8c>
 800693a:	2300      	movs	r3, #0
 800693c:	613b      	str	r3, [r7, #16]
 800693e:	4b1c      	ldr	r3, [pc, #112]	; (80069b0 <HAL_I2C_MspInit+0x98>)
 8006940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006942:	4a1b      	ldr	r2, [pc, #108]	; (80069b0 <HAL_I2C_MspInit+0x98>)
 8006944:	f043 0302 	orr.w	r3, r3, #2
 8006948:	6313      	str	r3, [r2, #48]	; 0x30
 800694a:	4b19      	ldr	r3, [pc, #100]	; (80069b0 <HAL_I2C_MspInit+0x98>)
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	613b      	str	r3, [r7, #16]
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f44f 7340 	mov.w	r3, #768	; 0x300
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	2312      	movs	r3, #18
 800695e:	61bb      	str	r3, [r7, #24]
 8006960:	2300      	movs	r3, #0
 8006962:	61fb      	str	r3, [r7, #28]
 8006964:	2303      	movs	r3, #3
 8006966:	623b      	str	r3, [r7, #32]
 8006968:	2304      	movs	r3, #4
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
 800696c:	f107 0314 	add.w	r3, r7, #20
 8006970:	4619      	mov	r1, r3
 8006972:	4810      	ldr	r0, [pc, #64]	; (80069b4 <HAL_I2C_MspInit+0x9c>)
 8006974:	f000 fd7e 	bl	8007474 <HAL_GPIO_Init>
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	4b0c      	ldr	r3, [pc, #48]	; (80069b0 <HAL_I2C_MspInit+0x98>)
 800697e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006980:	4a0b      	ldr	r2, [pc, #44]	; (80069b0 <HAL_I2C_MspInit+0x98>)
 8006982:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006986:	6413      	str	r3, [r2, #64]	; 0x40
 8006988:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <HAL_I2C_MspInit+0x98>)
 800698a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	2105      	movs	r1, #5
 8006998:	201f      	movs	r0, #31
 800699a:	f000 fc94 	bl	80072c6 <HAL_NVIC_SetPriority>
 800699e:	201f      	movs	r0, #31
 80069a0:	f000 fcad 	bl	80072fe <HAL_NVIC_EnableIRQ>
 80069a4:	bf00      	nop
 80069a6:	3728      	adds	r7, #40	; 0x28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40005400 	.word	0x40005400
 80069b0:	40023800 	.word	0x40023800
 80069b4:	40020400 	.word	0x40020400

080069b8 <HAL_TIM_Base_MspInit>:
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08a      	sub	sp, #40	; 0x28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	f107 0314 	add.w	r3, r7, #20
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	605a      	str	r2, [r3, #4]
 80069ca:	609a      	str	r2, [r3, #8]
 80069cc:	60da      	str	r2, [r3, #12]
 80069ce:	611a      	str	r2, [r3, #16]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a23      	ldr	r2, [pc, #140]	; (8006a64 <HAL_TIM_Base_MspInit+0xac>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d10e      	bne.n	80069f8 <HAL_TIM_Base_MspInit+0x40>
 80069da:	2300      	movs	r3, #0
 80069dc:	613b      	str	r3, [r7, #16]
 80069de:	4b22      	ldr	r3, [pc, #136]	; (8006a68 <HAL_TIM_Base_MspInit+0xb0>)
 80069e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e2:	4a21      	ldr	r2, [pc, #132]	; (8006a68 <HAL_TIM_Base_MspInit+0xb0>)
 80069e4:	f043 0301 	orr.w	r3, r3, #1
 80069e8:	6453      	str	r3, [r2, #68]	; 0x44
 80069ea:	4b1f      	ldr	r3, [pc, #124]	; (8006a68 <HAL_TIM_Base_MspInit+0xb0>)
 80069ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	613b      	str	r3, [r7, #16]
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	e031      	b.n	8006a5c <HAL_TIM_Base_MspInit+0xa4>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a1b      	ldr	r2, [pc, #108]	; (8006a6c <HAL_TIM_Base_MspInit+0xb4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d12c      	bne.n	8006a5c <HAL_TIM_Base_MspInit+0xa4>
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	4b18      	ldr	r3, [pc, #96]	; (8006a68 <HAL_TIM_Base_MspInit+0xb0>)
 8006a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0a:	4a17      	ldr	r2, [pc, #92]	; (8006a68 <HAL_TIM_Base_MspInit+0xb0>)
 8006a0c:	f043 0302 	orr.w	r3, r3, #2
 8006a10:	6453      	str	r3, [r2, #68]	; 0x44
 8006a12:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <HAL_TIM_Base_MspInit+0xb0>)
 8006a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60bb      	str	r3, [r7, #8]
 8006a22:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <HAL_TIM_Base_MspInit+0xb0>)
 8006a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a26:	4a10      	ldr	r2, [pc, #64]	; (8006a68 <HAL_TIM_Base_MspInit+0xb0>)
 8006a28:	f043 0304 	orr.w	r3, r3, #4
 8006a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a2e:	4b0e      	ldr	r3, [pc, #56]	; (8006a68 <HAL_TIM_Base_MspInit+0xb0>)
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	f003 0304 	and.w	r3, r3, #4
 8006a36:	60bb      	str	r3, [r7, #8]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	2302      	movs	r3, #2
 8006a42:	61bb      	str	r3, [r7, #24]
 8006a44:	2300      	movs	r3, #0
 8006a46:	61fb      	str	r3, [r7, #28]
 8006a48:	2300      	movs	r3, #0
 8006a4a:	623b      	str	r3, [r7, #32]
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a50:	f107 0314 	add.w	r3, r7, #20
 8006a54:	4619      	mov	r1, r3
 8006a56:	4806      	ldr	r0, [pc, #24]	; (8006a70 <HAL_TIM_Base_MspInit+0xb8>)
 8006a58:	f000 fd0c 	bl	8007474 <HAL_GPIO_Init>
 8006a5c:	bf00      	nop
 8006a5e:	3728      	adds	r7, #40	; 0x28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	40010000 	.word	0x40010000
 8006a68:	40023800 	.word	0x40023800
 8006a6c:	40010400 	.word	0x40010400
 8006a70:	40020800 	.word	0x40020800

08006a74 <HAL_TIM_Encoder_MspInit>:
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b08c      	sub	sp, #48	; 0x30
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	f107 031c 	add.w	r3, r7, #28
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	605a      	str	r2, [r3, #4]
 8006a86:	609a      	str	r2, [r3, #8]
 8006a88:	60da      	str	r2, [r3, #12]
 8006a8a:	611a      	str	r2, [r3, #16]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a94:	d14b      	bne.n	8006b2e <HAL_TIM_Encoder_MspInit+0xba>
 8006a96:	2300      	movs	r3, #0
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	4b3f      	ldr	r3, [pc, #252]	; (8006b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	4a3e      	ldr	r2, [pc, #248]	; (8006b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8006aa0:	f043 0301 	orr.w	r3, r3, #1
 8006aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8006aa6:	4b3c      	ldr	r3, [pc, #240]	; (8006b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	61bb      	str	r3, [r7, #24]
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	4b38      	ldr	r3, [pc, #224]	; (8006b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	4a37      	ldr	r2, [pc, #220]	; (8006b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8006abc:	f043 0301 	orr.w	r3, r3, #1
 8006ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ac2:	4b35      	ldr	r3, [pc, #212]	; (8006b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	4b31      	ldr	r3, [pc, #196]	; (8006b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad6:	4a30      	ldr	r2, [pc, #192]	; (8006b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8006ad8:	f043 0302 	orr.w	r3, r3, #2
 8006adc:	6313      	str	r3, [r2, #48]	; 0x30
 8006ade:	4b2e      	ldr	r3, [pc, #184]	; (8006b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	613b      	str	r3, [r7, #16]
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	2302      	movs	r3, #2
 8006af2:	623b      	str	r3, [r7, #32]
 8006af4:	2300      	movs	r3, #0
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
 8006af8:	2300      	movs	r3, #0
 8006afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006afc:	2301      	movs	r3, #1
 8006afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b00:	f107 031c 	add.w	r3, r7, #28
 8006b04:	4619      	mov	r1, r3
 8006b06:	4825      	ldr	r0, [pc, #148]	; (8006b9c <HAL_TIM_Encoder_MspInit+0x128>)
 8006b08:	f000 fcb4 	bl	8007474 <HAL_GPIO_Init>
 8006b0c:	2308      	movs	r3, #8
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	2302      	movs	r3, #2
 8006b12:	623b      	str	r3, [r7, #32]
 8006b14:	2300      	movs	r3, #0
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
 8006b18:	2300      	movs	r3, #0
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b20:	f107 031c 	add.w	r3, r7, #28
 8006b24:	4619      	mov	r1, r3
 8006b26:	481e      	ldr	r0, [pc, #120]	; (8006ba0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006b28:	f000 fca4 	bl	8007474 <HAL_GPIO_Init>
 8006b2c:	e030      	b.n	8006b90 <HAL_TIM_Encoder_MspInit+0x11c>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a1c      	ldr	r2, [pc, #112]	; (8006ba4 <HAL_TIM_Encoder_MspInit+0x130>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d12b      	bne.n	8006b90 <HAL_TIM_Encoder_MspInit+0x11c>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	4b16      	ldr	r3, [pc, #88]	; (8006b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b40:	4a15      	ldr	r2, [pc, #84]	; (8006b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b42:	f043 0304 	orr.w	r3, r3, #4
 8006b46:	6413      	str	r3, [r2, #64]	; 0x40
 8006b48:	4b13      	ldr	r3, [pc, #76]	; (8006b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2300      	movs	r3, #0
 8006b56:	60bb      	str	r3, [r7, #8]
 8006b58:	4b0f      	ldr	r3, [pc, #60]	; (8006b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5c:	4a0e      	ldr	r2, [pc, #56]	; (8006b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b5e:	f043 0302 	orr.w	r3, r3, #2
 8006b62:	6313      	str	r3, [r2, #48]	; 0x30
 8006b64:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	60bb      	str	r3, [r7, #8]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	23c0      	movs	r3, #192	; 0xc0
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	2302      	movs	r3, #2
 8006b76:	623b      	str	r3, [r7, #32]
 8006b78:	2300      	movs	r3, #0
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b80:	2302      	movs	r3, #2
 8006b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b84:	f107 031c 	add.w	r3, r7, #28
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4805      	ldr	r0, [pc, #20]	; (8006ba0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006b8c:	f000 fc72 	bl	8007474 <HAL_GPIO_Init>
 8006b90:	bf00      	nop
 8006b92:	3730      	adds	r7, #48	; 0x30
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40023800 	.word	0x40023800
 8006b9c:	40020000 	.word	0x40020000
 8006ba0:	40020400 	.word	0x40020400
 8006ba4:	40000800 	.word	0x40000800

08006ba8 <HAL_TIM_IC_MspInit>:
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	; 0x28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	f107 0314 	add.w	r3, r7, #20
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	605a      	str	r2, [r3, #4]
 8006bba:	609a      	str	r2, [r3, #8]
 8006bbc:	60da      	str	r2, [r3, #12]
 8006bbe:	611a      	str	r2, [r3, #16]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a1d      	ldr	r2, [pc, #116]	; (8006c3c <HAL_TIM_IC_MspInit+0x94>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d133      	bne.n	8006c32 <HAL_TIM_IC_MspInit+0x8a>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	613b      	str	r3, [r7, #16]
 8006bce:	4b1c      	ldr	r3, [pc, #112]	; (8006c40 <HAL_TIM_IC_MspInit+0x98>)
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	4a1b      	ldr	r2, [pc, #108]	; (8006c40 <HAL_TIM_IC_MspInit+0x98>)
 8006bd4:	f043 0302 	orr.w	r3, r3, #2
 8006bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8006bda:	4b19      	ldr	r3, [pc, #100]	; (8006c40 <HAL_TIM_IC_MspInit+0x98>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	613b      	str	r3, [r7, #16]
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	4b15      	ldr	r3, [pc, #84]	; (8006c40 <HAL_TIM_IC_MspInit+0x98>)
 8006bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bee:	4a14      	ldr	r2, [pc, #80]	; (8006c40 <HAL_TIM_IC_MspInit+0x98>)
 8006bf0:	f043 0302 	orr.w	r3, r3, #2
 8006bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8006bf6:	4b12      	ldr	r3, [pc, #72]	; (8006c40 <HAL_TIM_IC_MspInit+0x98>)
 8006bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2310      	movs	r3, #16
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	2302      	movs	r3, #2
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61fb      	str	r3, [r7, #28]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	623b      	str	r3, [r7, #32]
 8006c12:	2302      	movs	r3, #2
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
 8006c16:	f107 0314 	add.w	r3, r7, #20
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4809      	ldr	r0, [pc, #36]	; (8006c44 <HAL_TIM_IC_MspInit+0x9c>)
 8006c1e:	f000 fc29 	bl	8007474 <HAL_GPIO_Init>
 8006c22:	2200      	movs	r2, #0
 8006c24:	2105      	movs	r1, #5
 8006c26:	201d      	movs	r0, #29
 8006c28:	f000 fb4d 	bl	80072c6 <HAL_NVIC_SetPriority>
 8006c2c:	201d      	movs	r0, #29
 8006c2e:	f000 fb66 	bl	80072fe <HAL_NVIC_EnableIRQ>
 8006c32:	bf00      	nop
 8006c34:	3728      	adds	r7, #40	; 0x28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40000400 	.word	0x40000400
 8006c40:	40023800 	.word	0x40023800
 8006c44:	40020400 	.word	0x40020400

08006c48 <HAL_TIM_MspPostInit>:
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	f107 030c 	add.w	r3, r7, #12
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	605a      	str	r2, [r3, #4]
 8006c5a:	609a      	str	r2, [r3, #8]
 8006c5c:	60da      	str	r2, [r3, #12]
 8006c5e:	611a      	str	r2, [r3, #16]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a12      	ldr	r2, [pc, #72]	; (8006cb0 <HAL_TIM_MspPostInit+0x68>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d11e      	bne.n	8006ca8 <HAL_TIM_MspPostInit+0x60>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60bb      	str	r3, [r7, #8]
 8006c6e:	4b11      	ldr	r3, [pc, #68]	; (8006cb4 <HAL_TIM_MspPostInit+0x6c>)
 8006c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c72:	4a10      	ldr	r2, [pc, #64]	; (8006cb4 <HAL_TIM_MspPostInit+0x6c>)
 8006c74:	f043 0310 	orr.w	r3, r3, #16
 8006c78:	6313      	str	r3, [r2, #48]	; 0x30
 8006c7a:	4b0e      	ldr	r3, [pc, #56]	; (8006cb4 <HAL_TIM_MspPostInit+0x6c>)
 8006c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7e:	f003 0310 	and.w	r3, r3, #16
 8006c82:	60bb      	str	r3, [r7, #8]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	2300      	movs	r3, #0
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	2300      	movs	r3, #0
 8006c96:	61bb      	str	r3, [r7, #24]
 8006c98:	2301      	movs	r3, #1
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	f107 030c 	add.w	r3, r7, #12
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4805      	ldr	r0, [pc, #20]	; (8006cb8 <HAL_TIM_MspPostInit+0x70>)
 8006ca4:	f000 fbe6 	bl	8007474 <HAL_GPIO_Init>
 8006ca8:	bf00      	nop
 8006caa:	3720      	adds	r7, #32
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40010000 	.word	0x40010000
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	40021000 	.word	0x40021000

08006cbc <HAL_UART_MspInit>:
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08a      	sub	sp, #40	; 0x28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	f107 0314 	add.w	r3, r7, #20
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	605a      	str	r2, [r3, #4]
 8006cce:	609a      	str	r2, [r3, #8]
 8006cd0:	60da      	str	r2, [r3, #12]
 8006cd2:	611a      	str	r2, [r3, #16]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a1d      	ldr	r2, [pc, #116]	; (8006d50 <HAL_UART_MspInit+0x94>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d134      	bne.n	8006d48 <HAL_UART_MspInit+0x8c>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	613b      	str	r3, [r7, #16]
 8006ce2:	4b1c      	ldr	r3, [pc, #112]	; (8006d54 <HAL_UART_MspInit+0x98>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	4a1b      	ldr	r2, [pc, #108]	; (8006d54 <HAL_UART_MspInit+0x98>)
 8006ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cec:	6413      	str	r3, [r2, #64]	; 0x40
 8006cee:	4b19      	ldr	r3, [pc, #100]	; (8006d54 <HAL_UART_MspInit+0x98>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	4b15      	ldr	r3, [pc, #84]	; (8006d54 <HAL_UART_MspInit+0x98>)
 8006d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d02:	4a14      	ldr	r2, [pc, #80]	; (8006d54 <HAL_UART_MspInit+0x98>)
 8006d04:	f043 0304 	orr.w	r3, r3, #4
 8006d08:	6313      	str	r3, [r2, #48]	; 0x30
 8006d0a:	4b12      	ldr	r3, [pc, #72]	; (8006d54 <HAL_UART_MspInit+0x98>)
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	61bb      	str	r3, [r7, #24]
 8006d20:	2300      	movs	r3, #0
 8006d22:	61fb      	str	r3, [r7, #28]
 8006d24:	2303      	movs	r3, #3
 8006d26:	623b      	str	r3, [r7, #32]
 8006d28:	2307      	movs	r3, #7
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d2c:	f107 0314 	add.w	r3, r7, #20
 8006d30:	4619      	mov	r1, r3
 8006d32:	4809      	ldr	r0, [pc, #36]	; (8006d58 <HAL_UART_MspInit+0x9c>)
 8006d34:	f000 fb9e 	bl	8007474 <HAL_GPIO_Init>
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2105      	movs	r1, #5
 8006d3c:	2027      	movs	r0, #39	; 0x27
 8006d3e:	f000 fac2 	bl	80072c6 <HAL_NVIC_SetPriority>
 8006d42:	2027      	movs	r0, #39	; 0x27
 8006d44:	f000 fadb 	bl	80072fe <HAL_NVIC_EnableIRQ>
 8006d48:	bf00      	nop
 8006d4a:	3728      	adds	r7, #40	; 0x28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	40004800 	.word	0x40004800
 8006d54:	40023800 	.word	0x40023800
 8006d58:	40020800 	.word	0x40020800

08006d5c <NMI_Handler>:
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	e7fe      	b.n	8006d60 <NMI_Handler+0x4>

08006d62 <HardFault_Handler>:
 8006d62:	b480      	push	{r7}
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	e7fe      	b.n	8006d66 <HardFault_Handler+0x4>

08006d68 <MemManage_Handler>:
 8006d68:	b480      	push	{r7}
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	e7fe      	b.n	8006d6c <MemManage_Handler+0x4>

08006d6e <BusFault_Handler>:
 8006d6e:	b480      	push	{r7}
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	e7fe      	b.n	8006d72 <BusFault_Handler+0x4>

08006d74 <UsageFault_Handler>:
 8006d74:	b480      	push	{r7}
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	e7fe      	b.n	8006d78 <UsageFault_Handler+0x4>

08006d7a <DebugMon_Handler>:
 8006d7a:	b480      	push	{r7}
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	bf00      	nop
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <SysTick_Handler>:
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	f000 f97c 	bl	8007088 <HAL_IncTick>
 8006d90:	f008 f82e 	bl	800edf0 <xTaskGetSchedulerState>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d001      	beq.n	8006d9e <SysTick_Handler+0x16>
 8006d9a:	f008 fe15 	bl	800f9c8 <xPortSysTickHandler>
 8006d9e:	bf00      	nop
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <TIM3_IRQHandler>:
 8006da4:	b580      	push	{r7, lr}
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	4802      	ldr	r0, [pc, #8]	; (8006db4 <TIM3_IRQHandler+0x10>)
 8006daa:	f004 f929 	bl	800b000 <HAL_TIM_IRQHandler>
 8006dae:	bf00      	nop
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	200002e8 	.word	0x200002e8

08006db8 <I2C1_EV_IRQHandler>:
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	4802      	ldr	r0, [pc, #8]	; (8006dc8 <I2C1_EV_IRQHandler+0x10>)
 8006dbe:	f001 f991 	bl	80080e4 <HAL_I2C_EV_IRQHandler>
 8006dc2:	bf00      	nop
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000204 	.word	0x20000204

08006dcc <USART3_IRQHandler>:
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	4802      	ldr	r0, [pc, #8]	; (8006ddc <USART3_IRQHandler+0x10>)
 8006dd2:	f005 fadb 	bl	800c38c <HAL_UART_IRQHandler>
 8006dd6:	bf00      	nop
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	200003c0 	.word	0x200003c0

08006de0 <_getpid>:
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	2301      	movs	r3, #1
 8006de6:	4618      	mov	r0, r3
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <_kill>:
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
 8006dfa:	f009 f85f 	bl	800febc <__errno>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2216      	movs	r2, #22
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <_exit>:
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff ffe7 	bl	8006df0 <_kill>
 8006e22:	e7fe      	b.n	8006e22 <_exit+0x12>

08006e24 <_read>:
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	2300      	movs	r3, #0
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	e00a      	b.n	8006e4c <_read+0x28>
 8006e36:	f3af 8000 	nop.w
 8006e3a:	4601      	mov	r1, r0
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	60ba      	str	r2, [r7, #8]
 8006e42:	b2ca      	uxtb	r2, r1
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	617b      	str	r3, [r7, #20]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	dbf0      	blt.n	8006e36 <_read+0x12>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4618      	mov	r0, r3
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <_write>:
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b086      	sub	sp, #24
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	60f8      	str	r0, [r7, #12]
 8006e66:	60b9      	str	r1, [r7, #8]
 8006e68:	607a      	str	r2, [r7, #4]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	617b      	str	r3, [r7, #20]
 8006e6e:	e009      	b.n	8006e84 <_write+0x26>
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	60ba      	str	r2, [r7, #8]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f3af 8000 	nop.w
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	3301      	adds	r3, #1
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	dbf1      	blt.n	8006e70 <_write+0x12>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <_close>:
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <_fstat>:
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ebe:	605a      	str	r2, [r3, #4]
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <_isatty>:
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <_lseek>:
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
	...

08006f00 <_sbrk>:
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	4a14      	ldr	r2, [pc, #80]	; (8006f5c <_sbrk+0x5c>)
 8006f0a:	4b15      	ldr	r3, [pc, #84]	; (8006f60 <_sbrk+0x60>)
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	613b      	str	r3, [r7, #16]
 8006f14:	4b13      	ldr	r3, [pc, #76]	; (8006f64 <_sbrk+0x64>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d102      	bne.n	8006f22 <_sbrk+0x22>
 8006f1c:	4b11      	ldr	r3, [pc, #68]	; (8006f64 <_sbrk+0x64>)
 8006f1e:	4a12      	ldr	r2, [pc, #72]	; (8006f68 <_sbrk+0x68>)
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	4b10      	ldr	r3, [pc, #64]	; (8006f64 <_sbrk+0x64>)
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4413      	add	r3, r2
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d207      	bcs.n	8006f40 <_sbrk+0x40>
 8006f30:	f008 ffc4 	bl	800febc <__errno>
 8006f34:	4603      	mov	r3, r0
 8006f36:	220c      	movs	r2, #12
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f3e:	e009      	b.n	8006f54 <_sbrk+0x54>
 8006f40:	4b08      	ldr	r3, [pc, #32]	; (8006f64 <_sbrk+0x64>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	4b07      	ldr	r3, [pc, #28]	; (8006f64 <_sbrk+0x64>)
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	4a05      	ldr	r2, [pc, #20]	; (8006f64 <_sbrk+0x64>)
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	20020000 	.word	0x20020000
 8006f60:	00000400 	.word	0x00000400
 8006f64:	20000864 	.word	0x20000864
 8006f68:	200063d0 	.word	0x200063d0

08006f6c <SystemInit>:
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <SystemInit+0x20>)
 8006f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f76:	4a05      	ldr	r2, [pc, #20]	; (8006f8c <SystemInit+0x20>)
 8006f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8006f80:	bf00      	nop
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	e000ed00 	.word	0xe000ed00

08006f90 <Reset_Handler>:
 8006f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006fc8 <LoopFillZerobss+0x12>
 8006f94:	480d      	ldr	r0, [pc, #52]	; (8006fcc <LoopFillZerobss+0x16>)
 8006f96:	490e      	ldr	r1, [pc, #56]	; (8006fd0 <LoopFillZerobss+0x1a>)
 8006f98:	4a0e      	ldr	r2, [pc, #56]	; (8006fd4 <LoopFillZerobss+0x1e>)
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e002      	b.n	8006fa4 <LoopCopyDataInit>

08006f9e <CopyDataInit>:
 8006f9e:	58d4      	ldr	r4, [r2, r3]
 8006fa0:	50c4      	str	r4, [r0, r3]
 8006fa2:	3304      	adds	r3, #4

08006fa4 <LoopCopyDataInit>:
 8006fa4:	18c4      	adds	r4, r0, r3
 8006fa6:	428c      	cmp	r4, r1
 8006fa8:	d3f9      	bcc.n	8006f9e <CopyDataInit>
 8006faa:	4a0b      	ldr	r2, [pc, #44]	; (8006fd8 <LoopFillZerobss+0x22>)
 8006fac:	4c0b      	ldr	r4, [pc, #44]	; (8006fdc <LoopFillZerobss+0x26>)
 8006fae:	2300      	movs	r3, #0
 8006fb0:	e001      	b.n	8006fb6 <LoopFillZerobss>

08006fb2 <FillZerobss>:
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	3204      	adds	r2, #4

08006fb6 <LoopFillZerobss>:
 8006fb6:	42a2      	cmp	r2, r4
 8006fb8:	d3fb      	bcc.n	8006fb2 <FillZerobss>
 8006fba:	f7ff ffd7 	bl	8006f6c <SystemInit>
 8006fbe:	f008 ff83 	bl	800fec8 <__libc_init_array>
 8006fc2:	f7fa f819 	bl	8000ff8 <main>
 8006fc6:	4770      	bx	lr
 8006fc8:	20020000 	.word	0x20020000
 8006fcc:	20000000 	.word	0x20000000
 8006fd0:	200001e8 	.word	0x200001e8
 8006fd4:	080158c4 	.word	0x080158c4
 8006fd8:	200001e8 	.word	0x200001e8
 8006fdc:	200063cc 	.word	0x200063cc

08006fe0 <ADC_IRQHandler>:
 8006fe0:	e7fe      	b.n	8006fe0 <ADC_IRQHandler>
	...

08006fe4 <HAL_Init>:
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	4b0e      	ldr	r3, [pc, #56]	; (8007024 <HAL_Init+0x40>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a0d      	ldr	r2, [pc, #52]	; (8007024 <HAL_Init+0x40>)
 8006fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ff2:	6013      	str	r3, [r2, #0]
 8006ff4:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <HAL_Init+0x40>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a0a      	ldr	r2, [pc, #40]	; (8007024 <HAL_Init+0x40>)
 8006ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	4b08      	ldr	r3, [pc, #32]	; (8007024 <HAL_Init+0x40>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a07      	ldr	r2, [pc, #28]	; (8007024 <HAL_Init+0x40>)
 8007006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	2003      	movs	r0, #3
 800700e:	f000 f94f 	bl	80072b0 <HAL_NVIC_SetPriorityGrouping>
 8007012:	200f      	movs	r0, #15
 8007014:	f000 f808 	bl	8007028 <HAL_InitTick>
 8007018:	f7ff fc52 	bl	80068c0 <HAL_MspInit>
 800701c:	2300      	movs	r3, #0
 800701e:	4618      	mov	r0, r3
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40023c00 	.word	0x40023c00

08007028 <HAL_InitTick>:
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	4b12      	ldr	r3, [pc, #72]	; (800707c <HAL_InitTick+0x54>)
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	4b12      	ldr	r3, [pc, #72]	; (8007080 <HAL_InitTick+0x58>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	4619      	mov	r1, r3
 800703a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800703e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007042:	fbb2 f3f3 	udiv	r3, r2, r3
 8007046:	4618      	mov	r0, r3
 8007048:	f000 f967 	bl	800731a <HAL_SYSTICK_Config>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <HAL_InitTick+0x2e>
 8007052:	2301      	movs	r3, #1
 8007054:	e00e      	b.n	8007074 <HAL_InitTick+0x4c>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b0f      	cmp	r3, #15
 800705a:	d80a      	bhi.n	8007072 <HAL_InitTick+0x4a>
 800705c:	2200      	movs	r2, #0
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007064:	f000 f92f 	bl	80072c6 <HAL_NVIC_SetPriority>
 8007068:	4a06      	ldr	r2, [pc, #24]	; (8007084 <HAL_InitTick+0x5c>)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	2300      	movs	r3, #0
 8007070:	e000      	b.n	8007074 <HAL_InitTick+0x4c>
 8007072:	2301      	movs	r3, #1
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20000004 	.word	0x20000004
 8007080:	2000000c 	.word	0x2000000c
 8007084:	20000008 	.word	0x20000008

08007088 <HAL_IncTick>:
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
 800708c:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <HAL_IncTick+0x20>)
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	461a      	mov	r2, r3
 8007092:	4b06      	ldr	r3, [pc, #24]	; (80070ac <HAL_IncTick+0x24>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4413      	add	r3, r2
 8007098:	4a04      	ldr	r2, [pc, #16]	; (80070ac <HAL_IncTick+0x24>)
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	bf00      	nop
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	2000000c 	.word	0x2000000c
 80070ac:	20000868 	.word	0x20000868

080070b0 <HAL_GetTick>:
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	4b03      	ldr	r3, [pc, #12]	; (80070c4 <HAL_GetTick+0x14>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20000868 	.word	0x20000868

080070c8 <HAL_Delay>:
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	f7ff ffee 	bl	80070b0 <HAL_GetTick>
 80070d4:	60b8      	str	r0, [r7, #8]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070e0:	d005      	beq.n	80070ee <HAL_Delay+0x26>
 80070e2:	4b0a      	ldr	r3, [pc, #40]	; (800710c <HAL_Delay+0x44>)
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4413      	add	r3, r2
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	bf00      	nop
 80070f0:	f7ff ffde 	bl	80070b0 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d8f7      	bhi.n	80070f0 <HAL_Delay+0x28>
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	2000000c 	.word	0x2000000c

08007110 <__NVIC_SetPriorityGrouping>:
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f003 0307 	and.w	r3, r3, #7
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	4b0c      	ldr	r3, [pc, #48]	; (8007154 <__NVIC_SetPriorityGrouping+0x44>)
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	60bb      	str	r3, [r7, #8]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800712c:	4013      	ands	r3, r2
 800712e:	60bb      	str	r3, [r7, #8]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	021a      	lsls	r2, r3, #8
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	4313      	orrs	r3, r2
 8007138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800713c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007140:	60bb      	str	r3, [r7, #8]
 8007142:	4a04      	ldr	r2, [pc, #16]	; (8007154 <__NVIC_SetPriorityGrouping+0x44>)
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	60d3      	str	r3, [r2, #12]
 8007148:	bf00      	nop
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	e000ed00 	.word	0xe000ed00

08007158 <__NVIC_GetPriorityGrouping>:
 8007158:	b480      	push	{r7}
 800715a:	af00      	add	r7, sp, #0
 800715c:	4b04      	ldr	r3, [pc, #16]	; (8007170 <__NVIC_GetPriorityGrouping+0x18>)
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	0a1b      	lsrs	r3, r3, #8
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	4618      	mov	r0, r3
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	e000ed00 	.word	0xe000ed00

08007174 <__NVIC_EnableIRQ>:
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	71fb      	strb	r3, [r7, #7]
 800717e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007182:	2b00      	cmp	r3, #0
 8007184:	db0b      	blt.n	800719e <__NVIC_EnableIRQ+0x2a>
 8007186:	79fb      	ldrb	r3, [r7, #7]
 8007188:	f003 021f 	and.w	r2, r3, #31
 800718c:	4907      	ldr	r1, [pc, #28]	; (80071ac <__NVIC_EnableIRQ+0x38>)
 800718e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007192:	095b      	lsrs	r3, r3, #5
 8007194:	2001      	movs	r0, #1
 8007196:	fa00 f202 	lsl.w	r2, r0, r2
 800719a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800719e:	bf00      	nop
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	e000e100 	.word	0xe000e100

080071b0 <__NVIC_SetPriority>:
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	6039      	str	r1, [r7, #0]
 80071ba:	71fb      	strb	r3, [r7, #7]
 80071bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	db0a      	blt.n	80071da <__NVIC_SetPriority+0x2a>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	490c      	ldr	r1, [pc, #48]	; (80071fc <__NVIC_SetPriority+0x4c>)
 80071ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ce:	0112      	lsls	r2, r2, #4
 80071d0:	b2d2      	uxtb	r2, r2
 80071d2:	440b      	add	r3, r1
 80071d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80071d8:	e00a      	b.n	80071f0 <__NVIC_SetPriority+0x40>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	b2da      	uxtb	r2, r3
 80071de:	4908      	ldr	r1, [pc, #32]	; (8007200 <__NVIC_SetPriority+0x50>)
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	f003 030f 	and.w	r3, r3, #15
 80071e6:	3b04      	subs	r3, #4
 80071e8:	0112      	lsls	r2, r2, #4
 80071ea:	b2d2      	uxtb	r2, r2
 80071ec:	440b      	add	r3, r1
 80071ee:	761a      	strb	r2, [r3, #24]
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	e000e100 	.word	0xe000e100
 8007200:	e000ed00 	.word	0xe000ed00

08007204 <NVIC_EncodePriority>:
 8007204:	b480      	push	{r7}
 8007206:	b089      	sub	sp, #36	; 0x24
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f003 0307 	and.w	r3, r3, #7
 8007216:	61fb      	str	r3, [r7, #28]
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	f1c3 0307 	rsb	r3, r3, #7
 800721e:	2b04      	cmp	r3, #4
 8007220:	bf28      	it	cs
 8007222:	2304      	movcs	r3, #4
 8007224:	61bb      	str	r3, [r7, #24]
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	3304      	adds	r3, #4
 800722a:	2b06      	cmp	r3, #6
 800722c:	d902      	bls.n	8007234 <NVIC_EncodePriority+0x30>
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	3b03      	subs	r3, #3
 8007232:	e000      	b.n	8007236 <NVIC_EncodePriority+0x32>
 8007234:	2300      	movs	r3, #0
 8007236:	617b      	str	r3, [r7, #20]
 8007238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	fa02 f303 	lsl.w	r3, r2, r3
 8007242:	43da      	mvns	r2, r3
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	401a      	ands	r2, r3
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	409a      	lsls	r2, r3
 800724c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	fa01 f303 	lsl.w	r3, r1, r3
 8007256:	43d9      	mvns	r1, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	400b      	ands	r3, r1
 800725c:	4313      	orrs	r3, r2
 800725e:	4618      	mov	r0, r3
 8007260:	3724      	adds	r7, #36	; 0x24
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
	...

0800726c <SysTick_Config>:
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3b01      	subs	r3, #1
 8007278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800727c:	d301      	bcc.n	8007282 <SysTick_Config+0x16>
 800727e:	2301      	movs	r3, #1
 8007280:	e00f      	b.n	80072a2 <SysTick_Config+0x36>
 8007282:	4a0a      	ldr	r2, [pc, #40]	; (80072ac <SysTick_Config+0x40>)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3b01      	subs	r3, #1
 8007288:	6053      	str	r3, [r2, #4]
 800728a:	210f      	movs	r1, #15
 800728c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007290:	f7ff ff8e 	bl	80071b0 <__NVIC_SetPriority>
 8007294:	4b05      	ldr	r3, [pc, #20]	; (80072ac <SysTick_Config+0x40>)
 8007296:	2200      	movs	r2, #0
 8007298:	609a      	str	r2, [r3, #8]
 800729a:	4b04      	ldr	r3, [pc, #16]	; (80072ac <SysTick_Config+0x40>)
 800729c:	2207      	movs	r2, #7
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	2300      	movs	r3, #0
 80072a2:	4618      	mov	r0, r3
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	e000e010 	.word	0xe000e010

080072b0 <HAL_NVIC_SetPriorityGrouping>:
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff ff29 	bl	8007110 <__NVIC_SetPriorityGrouping>
 80072be:	bf00      	nop
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <HAL_NVIC_SetPriority>:
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b086      	sub	sp, #24
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	4603      	mov	r3, r0
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
 80072d2:	73fb      	strb	r3, [r7, #15]
 80072d4:	2300      	movs	r3, #0
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	f7ff ff3e 	bl	8007158 <__NVIC_GetPriorityGrouping>
 80072dc:	6178      	str	r0, [r7, #20]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	68b9      	ldr	r1, [r7, #8]
 80072e2:	6978      	ldr	r0, [r7, #20]
 80072e4:	f7ff ff8e 	bl	8007204 <NVIC_EncodePriority>
 80072e8:	4602      	mov	r2, r0
 80072ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072ee:	4611      	mov	r1, r2
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff ff5d 	bl	80071b0 <__NVIC_SetPriority>
 80072f6:	bf00      	nop
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <HAL_NVIC_EnableIRQ>:
 80072fe:	b580      	push	{r7, lr}
 8007300:	b082      	sub	sp, #8
 8007302:	af00      	add	r7, sp, #0
 8007304:	4603      	mov	r3, r0
 8007306:	71fb      	strb	r3, [r7, #7]
 8007308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff ff31 	bl	8007174 <__NVIC_EnableIRQ>
 8007312:	bf00      	nop
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <HAL_SYSTICK_Config>:
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff ffa2 	bl	800726c <SysTick_Config>
 8007328:	4603      	mov	r3, r0
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_DMA_Abort>:
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	f7ff feb6 	bl	80070b0 <HAL_GetTick>
 8007344:	60b8      	str	r0, [r7, #8]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d008      	beq.n	8007364 <HAL_DMA_Abort+0x32>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2280      	movs	r2, #128	; 0x80
 8007356:	655a      	str	r2, [r3, #84]	; 0x54
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007360:	2301      	movs	r3, #1
 8007362:	e052      	b.n	800740a <HAL_DMA_Abort+0xd8>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 0216 	bic.w	r2, r2, #22
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	695a      	ldr	r2, [r3, #20]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007382:	615a      	str	r2, [r3, #20]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d103      	bne.n	8007394 <HAL_DMA_Abort+0x62>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007390:	2b00      	cmp	r3, #0
 8007392:	d007      	beq.n	80073a4 <HAL_DMA_Abort+0x72>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 0208 	bic.w	r2, r2, #8
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 0201 	bic.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	e013      	b.n	80073de <HAL_DMA_Abort+0xac>
 80073b6:	f7ff fe7b 	bl	80070b0 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	2b05      	cmp	r3, #5
 80073c2:	d90c      	bls.n	80073de <HAL_DMA_Abort+0xac>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2220      	movs	r2, #32
 80073c8:	655a      	str	r2, [r3, #84]	; 0x54
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2203      	movs	r2, #3
 80073ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80073da:	2303      	movs	r3, #3
 80073dc:	e015      	b.n	800740a <HAL_DMA_Abort+0xd8>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e4      	bne.n	80073b6 <HAL_DMA_Abort+0x84>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f0:	223f      	movs	r2, #63	; 0x3f
 80073f2:	409a      	lsls	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	609a      	str	r2, [r3, #8]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007408:	2300      	movs	r3, #0
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <HAL_DMA_Abort_IT>:
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d004      	beq.n	8007430 <HAL_DMA_Abort_IT+0x1e>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2280      	movs	r2, #128	; 0x80
 800742a:	655a      	str	r2, [r3, #84]	; 0x54
 800742c:	2301      	movs	r3, #1
 800742e:	e00c      	b.n	800744a <HAL_DMA_Abort_IT+0x38>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2205      	movs	r2, #5
 8007434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0201 	bic.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	2300      	movs	r3, #0
 800744a:	4618      	mov	r0, r3
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <HAL_DMA_GetState>:
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007464:	b2db      	uxtb	r3, r3
 8007466:	4618      	mov	r0, r3
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
	...

08007474 <HAL_GPIO_Init>:
 8007474:	b480      	push	{r7}
 8007476:	b089      	sub	sp, #36	; 0x24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]
 8007482:	2300      	movs	r3, #0
 8007484:	613b      	str	r3, [r7, #16]
 8007486:	2300      	movs	r3, #0
 8007488:	61bb      	str	r3, [r7, #24]
 800748a:	2300      	movs	r3, #0
 800748c:	61fb      	str	r3, [r7, #28]
 800748e:	e16b      	b.n	8007768 <HAL_GPIO_Init+0x2f4>
 8007490:	2201      	movs	r2, #1
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	fa02 f303 	lsl.w	r3, r2, r3
 8007498:	617b      	str	r3, [r7, #20]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	4013      	ands	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	f040 815a 	bne.w	8007762 <HAL_GPIO_Init+0x2ee>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d005      	beq.n	80074c6 <HAL_GPIO_Init+0x52>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d130      	bne.n	8007528 <HAL_GPIO_Init+0xb4>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	61bb      	str	r3, [r7, #24]
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	2203      	movs	r2, #3
 80074d2:	fa02 f303 	lsl.w	r3, r2, r3
 80074d6:	43db      	mvns	r3, r3
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	4013      	ands	r3, r2
 80074dc:	61bb      	str	r3, [r7, #24]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	61bb      	str	r3, [r7, #24]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	609a      	str	r2, [r3, #8]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	61bb      	str	r3, [r7, #24]
 80074fc:	2201      	movs	r2, #1
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	fa02 f303 	lsl.w	r3, r2, r3
 8007504:	43db      	mvns	r3, r3
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	4013      	ands	r3, r2
 800750a:	61bb      	str	r3, [r7, #24]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	091b      	lsrs	r3, r3, #4
 8007512:	f003 0201 	and.w	r2, r3, #1
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	fa02 f303 	lsl.w	r3, r2, r3
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	4313      	orrs	r3, r2
 8007520:	61bb      	str	r3, [r7, #24]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	605a      	str	r2, [r3, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f003 0303 	and.w	r3, r3, #3
 8007530:	2b03      	cmp	r3, #3
 8007532:	d017      	beq.n	8007564 <HAL_GPIO_Init+0xf0>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	61bb      	str	r3, [r7, #24]
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	2203      	movs	r2, #3
 8007540:	fa02 f303 	lsl.w	r3, r2, r3
 8007544:	43db      	mvns	r3, r3
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	4013      	ands	r3, r2
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	fa02 f303 	lsl.w	r3, r2, r3
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	4313      	orrs	r3, r2
 800755c:	61bb      	str	r3, [r7, #24]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	60da      	str	r2, [r3, #12]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f003 0303 	and.w	r3, r3, #3
 800756c:	2b02      	cmp	r3, #2
 800756e:	d123      	bne.n	80075b8 <HAL_GPIO_Init+0x144>
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	08da      	lsrs	r2, r3, #3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3208      	adds	r2, #8
 8007578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757c:	61bb      	str	r3, [r7, #24]
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	f003 0307 	and.w	r3, r3, #7
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	220f      	movs	r2, #15
 8007588:	fa02 f303 	lsl.w	r3, r2, r3
 800758c:	43db      	mvns	r3, r3
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	4013      	ands	r3, r2
 8007592:	61bb      	str	r3, [r7, #24]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	691a      	ldr	r2, [r3, #16]
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	fa02 f303 	lsl.w	r3, r2, r3
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	61bb      	str	r3, [r7, #24]
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	08da      	lsrs	r2, r3, #3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3208      	adds	r2, #8
 80075b2:	69b9      	ldr	r1, [r7, #24]
 80075b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	2203      	movs	r2, #3
 80075c4:	fa02 f303 	lsl.w	r3, r2, r3
 80075c8:	43db      	mvns	r3, r3
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	4013      	ands	r3, r2
 80075ce:	61bb      	str	r3, [r7, #24]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f003 0203 	and.w	r2, r3, #3
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	fa02 f303 	lsl.w	r3, r2, r3
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	61bb      	str	r3, [r7, #24]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 80b4 	beq.w	8007762 <HAL_GPIO_Init+0x2ee>
 80075fa:	2300      	movs	r3, #0
 80075fc:	60fb      	str	r3, [r7, #12]
 80075fe:	4b60      	ldr	r3, [pc, #384]	; (8007780 <HAL_GPIO_Init+0x30c>)
 8007600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007602:	4a5f      	ldr	r2, [pc, #380]	; (8007780 <HAL_GPIO_Init+0x30c>)
 8007604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007608:	6453      	str	r3, [r2, #68]	; 0x44
 800760a:	4b5d      	ldr	r3, [pc, #372]	; (8007780 <HAL_GPIO_Init+0x30c>)
 800760c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4a5b      	ldr	r2, [pc, #364]	; (8007784 <HAL_GPIO_Init+0x310>)
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	089b      	lsrs	r3, r3, #2
 800761c:	3302      	adds	r3, #2
 800761e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007622:	61bb      	str	r3, [r7, #24]
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	220f      	movs	r2, #15
 800762e:	fa02 f303 	lsl.w	r3, r2, r3
 8007632:	43db      	mvns	r3, r3
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	4013      	ands	r3, r2
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a52      	ldr	r2, [pc, #328]	; (8007788 <HAL_GPIO_Init+0x314>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d02b      	beq.n	800769a <HAL_GPIO_Init+0x226>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a51      	ldr	r2, [pc, #324]	; (800778c <HAL_GPIO_Init+0x318>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d025      	beq.n	8007696 <HAL_GPIO_Init+0x222>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a50      	ldr	r2, [pc, #320]	; (8007790 <HAL_GPIO_Init+0x31c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d01f      	beq.n	8007692 <HAL_GPIO_Init+0x21e>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a4f      	ldr	r2, [pc, #316]	; (8007794 <HAL_GPIO_Init+0x320>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d019      	beq.n	800768e <HAL_GPIO_Init+0x21a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a4e      	ldr	r2, [pc, #312]	; (8007798 <HAL_GPIO_Init+0x324>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d013      	beq.n	800768a <HAL_GPIO_Init+0x216>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a4d      	ldr	r2, [pc, #308]	; (800779c <HAL_GPIO_Init+0x328>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d00d      	beq.n	8007686 <HAL_GPIO_Init+0x212>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a4c      	ldr	r2, [pc, #304]	; (80077a0 <HAL_GPIO_Init+0x32c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d007      	beq.n	8007682 <HAL_GPIO_Init+0x20e>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a4b      	ldr	r2, [pc, #300]	; (80077a4 <HAL_GPIO_Init+0x330>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d101      	bne.n	800767e <HAL_GPIO_Init+0x20a>
 800767a:	2307      	movs	r3, #7
 800767c:	e00e      	b.n	800769c <HAL_GPIO_Init+0x228>
 800767e:	2308      	movs	r3, #8
 8007680:	e00c      	b.n	800769c <HAL_GPIO_Init+0x228>
 8007682:	2306      	movs	r3, #6
 8007684:	e00a      	b.n	800769c <HAL_GPIO_Init+0x228>
 8007686:	2305      	movs	r3, #5
 8007688:	e008      	b.n	800769c <HAL_GPIO_Init+0x228>
 800768a:	2304      	movs	r3, #4
 800768c:	e006      	b.n	800769c <HAL_GPIO_Init+0x228>
 800768e:	2303      	movs	r3, #3
 8007690:	e004      	b.n	800769c <HAL_GPIO_Init+0x228>
 8007692:	2302      	movs	r3, #2
 8007694:	e002      	b.n	800769c <HAL_GPIO_Init+0x228>
 8007696:	2301      	movs	r3, #1
 8007698:	e000      	b.n	800769c <HAL_GPIO_Init+0x228>
 800769a:	2300      	movs	r3, #0
 800769c:	69fa      	ldr	r2, [r7, #28]
 800769e:	f002 0203 	and.w	r2, r2, #3
 80076a2:	0092      	lsls	r2, r2, #2
 80076a4:	4093      	lsls	r3, r2
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	61bb      	str	r3, [r7, #24]
 80076ac:	4935      	ldr	r1, [pc, #212]	; (8007784 <HAL_GPIO_Init+0x310>)
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	089b      	lsrs	r3, r3, #2
 80076b2:	3302      	adds	r3, #2
 80076b4:	69ba      	ldr	r2, [r7, #24]
 80076b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80076ba:	4b3b      	ldr	r3, [pc, #236]	; (80077a8 <HAL_GPIO_Init+0x334>)
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	61bb      	str	r3, [r7, #24]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	43db      	mvns	r3, r3
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	4013      	ands	r3, r2
 80076c8:	61bb      	str	r3, [r7, #24]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d003      	beq.n	80076de <HAL_GPIO_Init+0x26a>
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	4313      	orrs	r3, r2
 80076dc:	61bb      	str	r3, [r7, #24]
 80076de:	4a32      	ldr	r2, [pc, #200]	; (80077a8 <HAL_GPIO_Init+0x334>)
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	6093      	str	r3, [r2, #8]
 80076e4:	4b30      	ldr	r3, [pc, #192]	; (80077a8 <HAL_GPIO_Init+0x334>)
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	61bb      	str	r3, [r7, #24]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	43db      	mvns	r3, r3
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	4013      	ands	r3, r2
 80076f2:	61bb      	str	r3, [r7, #24]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <HAL_GPIO_Init+0x294>
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	4313      	orrs	r3, r2
 8007706:	61bb      	str	r3, [r7, #24]
 8007708:	4a27      	ldr	r2, [pc, #156]	; (80077a8 <HAL_GPIO_Init+0x334>)
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	60d3      	str	r3, [r2, #12]
 800770e:	4b26      	ldr	r3, [pc, #152]	; (80077a8 <HAL_GPIO_Init+0x334>)
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	61bb      	str	r3, [r7, #24]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	43db      	mvns	r3, r3
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	4013      	ands	r3, r2
 800771c:	61bb      	str	r3, [r7, #24]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <HAL_GPIO_Init+0x2be>
 800772a:	69ba      	ldr	r2, [r7, #24]
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	4313      	orrs	r3, r2
 8007730:	61bb      	str	r3, [r7, #24]
 8007732:	4a1d      	ldr	r2, [pc, #116]	; (80077a8 <HAL_GPIO_Init+0x334>)
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	6053      	str	r3, [r2, #4]
 8007738:	4b1b      	ldr	r3, [pc, #108]	; (80077a8 <HAL_GPIO_Init+0x334>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	61bb      	str	r3, [r7, #24]
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	43db      	mvns	r3, r3
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	4013      	ands	r3, r2
 8007746:	61bb      	str	r3, [r7, #24]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <HAL_GPIO_Init+0x2e8>
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	61bb      	str	r3, [r7, #24]
 800775c:	4a12      	ldr	r2, [pc, #72]	; (80077a8 <HAL_GPIO_Init+0x334>)
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	3301      	adds	r3, #1
 8007766:	61fb      	str	r3, [r7, #28]
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	2b0f      	cmp	r3, #15
 800776c:	f67f ae90 	bls.w	8007490 <HAL_GPIO_Init+0x1c>
 8007770:	bf00      	nop
 8007772:	bf00      	nop
 8007774:	3724      	adds	r7, #36	; 0x24
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	40023800 	.word	0x40023800
 8007784:	40013800 	.word	0x40013800
 8007788:	40020000 	.word	0x40020000
 800778c:	40020400 	.word	0x40020400
 8007790:	40020800 	.word	0x40020800
 8007794:	40020c00 	.word	0x40020c00
 8007798:	40021000 	.word	0x40021000
 800779c:	40021400 	.word	0x40021400
 80077a0:	40021800 	.word	0x40021800
 80077a4:	40021c00 	.word	0x40021c00
 80077a8:	40013c00 	.word	0x40013c00

080077ac <HAL_GPIO_WritePin>:
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	807b      	strh	r3, [r7, #2]
 80077b8:	4613      	mov	r3, r2
 80077ba:	707b      	strb	r3, [r7, #1]
 80077bc:	787b      	ldrb	r3, [r7, #1]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <HAL_GPIO_WritePin+0x1e>
 80077c2:	887a      	ldrh	r2, [r7, #2]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	619a      	str	r2, [r3, #24]
 80077c8:	e003      	b.n	80077d2 <HAL_GPIO_WritePin+0x26>
 80077ca:	887b      	ldrh	r3, [r7, #2]
 80077cc:	041a      	lsls	r2, r3, #16
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	619a      	str	r2, [r3, #24]
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <HAL_GPIO_TogglePin>:
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	460b      	mov	r3, r1
 80077e8:	807b      	strh	r3, [r7, #2]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	887a      	ldrh	r2, [r7, #2]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4013      	ands	r3, r2
 80077f6:	041a      	lsls	r2, r3, #16
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	43d9      	mvns	r1, r3
 80077fc:	887b      	ldrh	r3, [r7, #2]
 80077fe:	400b      	ands	r3, r1
 8007800:	431a      	orrs	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	619a      	str	r2, [r3, #24]
 8007806:	bf00      	nop
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
	...

08007814 <HAL_I2C_Init>:
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <HAL_I2C_Init+0x12>
 8007822:	2301      	movs	r3, #1
 8007824:	e12b      	b.n	8007a7e <HAL_I2C_Init+0x26a>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d106      	bne.n	8007840 <HAL_I2C_Init+0x2c>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff f86c 	bl	8006918 <HAL_I2C_MspInit>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2224      	movs	r2, #36	; 0x24
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f022 0201 	bic.w	r2, r2, #1
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	f002 ff7e 	bl	800a778 <HAL_RCC_GetPCLK1Freq>
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	4a81      	ldr	r2, [pc, #516]	; (8007a88 <HAL_I2C_Init+0x274>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d807      	bhi.n	8007898 <HAL_I2C_Init+0x84>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	4a80      	ldr	r2, [pc, #512]	; (8007a8c <HAL_I2C_Init+0x278>)
 800788c:	4293      	cmp	r3, r2
 800788e:	bf94      	ite	ls
 8007890:	2301      	movls	r3, #1
 8007892:	2300      	movhi	r3, #0
 8007894:	b2db      	uxtb	r3, r3
 8007896:	e006      	b.n	80078a6 <HAL_I2C_Init+0x92>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4a7d      	ldr	r2, [pc, #500]	; (8007a90 <HAL_I2C_Init+0x27c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	bf94      	ite	ls
 80078a0:	2301      	movls	r3, #1
 80078a2:	2300      	movhi	r3, #0
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <HAL_I2C_Init+0x9a>
 80078aa:	2301      	movs	r3, #1
 80078ac:	e0e7      	b.n	8007a7e <HAL_I2C_Init+0x26a>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4a78      	ldr	r2, [pc, #480]	; (8007a94 <HAL_I2C_Init+0x280>)
 80078b2:	fba2 2303 	umull	r2, r3, r2, r3
 80078b6:	0c9b      	lsrs	r3, r3, #18
 80078b8:	60bb      	str	r3, [r7, #8]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	605a      	str	r2, [r3, #4]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	4a6a      	ldr	r2, [pc, #424]	; (8007a88 <HAL_I2C_Init+0x274>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d802      	bhi.n	80078e8 <HAL_I2C_Init+0xd4>
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	3301      	adds	r3, #1
 80078e6:	e009      	b.n	80078fc <HAL_I2C_Init+0xe8>
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80078ee:	fb02 f303 	mul.w	r3, r2, r3
 80078f2:	4a69      	ldr	r2, [pc, #420]	; (8007a98 <HAL_I2C_Init+0x284>)
 80078f4:	fba2 2303 	umull	r2, r3, r2, r3
 80078f8:	099b      	lsrs	r3, r3, #6
 80078fa:	3301      	adds	r3, #1
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	6812      	ldr	r2, [r2, #0]
 8007900:	430b      	orrs	r3, r1
 8007902:	6213      	str	r3, [r2, #32]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800790e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	495c      	ldr	r1, [pc, #368]	; (8007a88 <HAL_I2C_Init+0x274>)
 8007918:	428b      	cmp	r3, r1
 800791a:	d819      	bhi.n	8007950 <HAL_I2C_Init+0x13c>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	1e59      	subs	r1, r3, #1
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	fbb1 f3f3 	udiv	r3, r1, r3
 800792a:	1c59      	adds	r1, r3, #1
 800792c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007930:	400b      	ands	r3, r1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <HAL_I2C_Init+0x138>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	1e59      	subs	r1, r3, #1
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	005b      	lsls	r3, r3, #1
 8007940:	fbb1 f3f3 	udiv	r3, r1, r3
 8007944:	3301      	adds	r3, #1
 8007946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800794a:	e051      	b.n	80079f0 <HAL_I2C_Init+0x1dc>
 800794c:	2304      	movs	r3, #4
 800794e:	e04f      	b.n	80079f0 <HAL_I2C_Init+0x1dc>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d111      	bne.n	800797c <HAL_I2C_Init+0x168>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	1e58      	subs	r0, r3, #1
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6859      	ldr	r1, [r3, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	440b      	add	r3, r1
 8007966:	fbb0 f3f3 	udiv	r3, r0, r3
 800796a:	3301      	adds	r3, #1
 800796c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007970:	2b00      	cmp	r3, #0
 8007972:	bf0c      	ite	eq
 8007974:	2301      	moveq	r3, #1
 8007976:	2300      	movne	r3, #0
 8007978:	b2db      	uxtb	r3, r3
 800797a:	e012      	b.n	80079a2 <HAL_I2C_Init+0x18e>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	1e58      	subs	r0, r3, #1
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6859      	ldr	r1, [r3, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	440b      	add	r3, r1
 800798a:	0099      	lsls	r1, r3, #2
 800798c:	440b      	add	r3, r1
 800798e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007992:	3301      	adds	r3, #1
 8007994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007998:	2b00      	cmp	r3, #0
 800799a:	bf0c      	ite	eq
 800799c:	2301      	moveq	r3, #1
 800799e:	2300      	movne	r3, #0
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <HAL_I2C_Init+0x196>
 80079a6:	2301      	movs	r3, #1
 80079a8:	e022      	b.n	80079f0 <HAL_I2C_Init+0x1dc>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10e      	bne.n	80079d0 <HAL_I2C_Init+0x1bc>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	1e58      	subs	r0, r3, #1
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6859      	ldr	r1, [r3, #4]
 80079ba:	460b      	mov	r3, r1
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	440b      	add	r3, r1
 80079c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80079c4:	3301      	adds	r3, #1
 80079c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ce:	e00f      	b.n	80079f0 <HAL_I2C_Init+0x1dc>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	1e58      	subs	r0, r3, #1
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6859      	ldr	r1, [r3, #4]
 80079d8:	460b      	mov	r3, r1
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	440b      	add	r3, r1
 80079de:	0099      	lsls	r1, r3, #2
 80079e0:	440b      	add	r3, r1
 80079e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80079e6:	3301      	adds	r3, #1
 80079e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079f0:	6879      	ldr	r1, [r7, #4]
 80079f2:	6809      	ldr	r1, [r1, #0]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	61cb      	str	r3, [r1, #28]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	69da      	ldr	r2, [r3, #28]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	431a      	orrs	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007a1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6911      	ldr	r1, [r2, #16]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	68d2      	ldr	r2, [r2, #12]
 8007a2a:	4311      	orrs	r1, r2
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6812      	ldr	r2, [r2, #0]
 8007a30:	430b      	orrs	r3, r1
 8007a32:	6093      	str	r3, [r2, #8]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	695a      	ldr	r2, [r3, #20]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	60da      	str	r2, [r3, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0201 	orr.w	r2, r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	641a      	str	r2, [r3, #64]	; 0x40
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	631a      	str	r2, [r3, #48]	; 0x30
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	000186a0 	.word	0x000186a0
 8007a8c:	001e847f 	.word	0x001e847f
 8007a90:	003d08ff 	.word	0x003d08ff
 8007a94:	431bde83 	.word	0x431bde83
 8007a98:	10624dd3 	.word	0x10624dd3

08007a9c <HAL_I2C_Master_Transmit>:
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af02      	add	r7, sp, #8
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	607a      	str	r2, [r7, #4]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	817b      	strh	r3, [r7, #10]
 8007aac:	4613      	mov	r3, r2
 8007aae:	813b      	strh	r3, [r7, #8]
 8007ab0:	f7ff fafe 	bl	80070b0 <HAL_GetTick>
 8007ab4:	6178      	str	r0, [r7, #20]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b20      	cmp	r3, #32
 8007ac0:	f040 80e0 	bne.w	8007c84 <HAL_I2C_Master_Transmit+0x1e8>
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	2319      	movs	r3, #25
 8007aca:	2201      	movs	r2, #1
 8007acc:	4970      	ldr	r1, [pc, #448]	; (8007c90 <HAL_I2C_Master_Transmit+0x1f4>)
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f001 ffd0 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <HAL_I2C_Master_Transmit+0x42>
 8007ada:	2302      	movs	r3, #2
 8007adc:	e0d3      	b.n	8007c86 <HAL_I2C_Master_Transmit+0x1ea>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_I2C_Master_Transmit+0x50>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e0cc      	b.n	8007c86 <HAL_I2C_Master_Transmit+0x1ea>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d007      	beq.n	8007b12 <HAL_I2C_Master_Transmit+0x76>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f042 0201 	orr.w	r2, r2, #1
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2221      	movs	r2, #33	; 0x21
 8007b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2210      	movs	r2, #16
 8007b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	641a      	str	r2, [r3, #64]	; 0x40
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	625a      	str	r2, [r3, #36]	; 0x24
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	893a      	ldrh	r2, [r7, #8]
 8007b42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	851a      	strh	r2, [r3, #40]	; 0x28
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	4a50      	ldr	r2, [pc, #320]	; (8007c94 <HAL_I2C_Master_Transmit+0x1f8>)
 8007b52:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b54:	8979      	ldrh	r1, [r7, #10]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	6a3a      	ldr	r2, [r7, #32]
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f001 fd92 	bl	8009684 <I2C_MasterRequestWrite>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <HAL_I2C_Master_Transmit+0xce>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e08d      	b.n	8007c86 <HAL_I2C_Master_Transmit+0x1ea>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	613b      	str	r3, [r7, #16]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	613b      	str	r3, [r7, #16]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	613b      	str	r3, [r7, #16]
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	e066      	b.n	8007c50 <HAL_I2C_Master_Transmit+0x1b4>
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	6a39      	ldr	r1, [r7, #32]
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f002 f84a 	bl	8009c20 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00d      	beq.n	8007bae <HAL_I2C_Master_Transmit+0x112>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d107      	bne.n	8007baa <HAL_I2C_Master_Transmit+0x10e>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ba8:	601a      	str	r2, [r3, #0]
 8007baa:	2301      	movs	r3, #1
 8007bac:	e06b      	b.n	8007c86 <HAL_I2C_Master_Transmit+0x1ea>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	781a      	ldrb	r2, [r3, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	611a      	str	r2, [r3, #16]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	851a      	strh	r2, [r3, #40]	; 0x28
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	2b04      	cmp	r3, #4
 8007bea:	d11b      	bne.n	8007c24 <HAL_I2C_Master_Transmit+0x188>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d017      	beq.n	8007c24 <HAL_I2C_Master_Transmit+0x188>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	781a      	ldrb	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	611a      	str	r2, [r3, #16]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	1c5a      	adds	r2, r3, #1
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	625a      	str	r2, [r3, #36]	; 0x24
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	3b01      	subs	r3, #1
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	851a      	strh	r2, [r3, #40]	; 0x28
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	6a39      	ldr	r1, [r7, #32]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f002 f83a 	bl	8009ca2 <I2C_WaitOnBTFFlagUntilTimeout>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00d      	beq.n	8007c50 <HAL_I2C_Master_Transmit+0x1b4>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d107      	bne.n	8007c4c <HAL_I2C_Master_Transmit+0x1b0>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e01a      	b.n	8007c86 <HAL_I2C_Master_Transmit+0x1ea>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d194      	bne.n	8007b82 <HAL_I2C_Master_Transmit+0xe6>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2220      	movs	r2, #32
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007c80:	2300      	movs	r3, #0
 8007c82:	e000      	b.n	8007c86 <HAL_I2C_Master_Transmit+0x1ea>
 8007c84:	2302      	movs	r3, #2
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	00100002 	.word	0x00100002
 8007c94:	ffff0000 	.word	0xffff0000

08007c98 <HAL_I2C_Master_Receive>:
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08c      	sub	sp, #48	; 0x30
 8007c9c:	af02      	add	r7, sp, #8
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	607a      	str	r2, [r7, #4]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	817b      	strh	r3, [r7, #10]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	813b      	strh	r3, [r7, #8]
 8007cac:	f7ff fa00 	bl	80070b0 <HAL_GetTick>
 8007cb0:	6278      	str	r0, [r7, #36]	; 0x24
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b20      	cmp	r3, #32
 8007cbc:	f040 820b 	bne.w	80080d6 <HAL_I2C_Master_Receive+0x43e>
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	2319      	movs	r3, #25
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	497c      	ldr	r1, [pc, #496]	; (8007ebc <HAL_I2C_Master_Receive+0x224>)
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f001 fed2 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <HAL_I2C_Master_Receive+0x42>
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	e1fe      	b.n	80080d8 <HAL_I2C_Master_Receive+0x440>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_I2C_Master_Receive+0x50>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e1f7      	b.n	80080d8 <HAL_I2C_Master_Receive+0x440>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d007      	beq.n	8007d0e <HAL_I2C_Master_Receive+0x76>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f042 0201 	orr.w	r2, r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2222      	movs	r2, #34	; 0x22
 8007d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2210      	movs	r2, #16
 8007d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	641a      	str	r2, [r3, #64]	; 0x40
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	625a      	str	r2, [r3, #36]	; 0x24
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	893a      	ldrh	r2, [r7, #8]
 8007d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	851a      	strh	r2, [r3, #40]	; 0x28
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4a5c      	ldr	r2, [pc, #368]	; (8007ec0 <HAL_I2C_Master_Receive+0x228>)
 8007d4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007d50:	8979      	ldrh	r1, [r7, #10]
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f001 fd16 	bl	8009788 <I2C_MasterRequestRead>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <HAL_I2C_Master_Receive+0xce>
 8007d62:	2301      	movs	r3, #1
 8007d64:	e1b8      	b.n	80080d8 <HAL_I2C_Master_Receive+0x440>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d113      	bne.n	8007d96 <HAL_I2C_Master_Receive+0xfe>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	623b      	str	r3, [r7, #32]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	623b      	str	r3, [r7, #32]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	623b      	str	r3, [r7, #32]
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	e18c      	b.n	80080b0 <HAL_I2C_Master_Receive+0x418>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d11b      	bne.n	8007dd6 <HAL_I2C_Master_Receive+0x13e>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	2300      	movs	r3, #0
 8007db0:	61fb      	str	r3, [r7, #28]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	61fb      	str	r3, [r7, #28]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	61fb      	str	r3, [r7, #28]
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	e16c      	b.n	80080b0 <HAL_I2C_Master_Receive+0x418>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d11b      	bne.n	8007e16 <HAL_I2C_Master_Receive+0x17e>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	61bb      	str	r3, [r7, #24]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	61bb      	str	r3, [r7, #24]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	61bb      	str	r3, [r7, #24]
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	e14c      	b.n	80080b0 <HAL_I2C_Master_Receive+0x418>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	2300      	movs	r3, #0
 8007e28:	617b      	str	r3, [r7, #20]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	617b      	str	r3, [r7, #20]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	617b      	str	r3, [r7, #20]
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	e138      	b.n	80080b0 <HAL_I2C_Master_Receive+0x418>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	f200 80f1 	bhi.w	800802a <HAL_I2C_Master_Receive+0x392>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d123      	bne.n	8007e98 <HAL_I2C_Master_Receive+0x200>
 8007e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f001 ff97 	bl	8009d88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <HAL_I2C_Master_Receive+0x1cc>
 8007e60:	2301      	movs	r3, #1
 8007e62:	e139      	b.n	80080d8 <HAL_I2C_Master_Receive+0x440>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	691a      	ldr	r2, [r3, #16]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	b2d2      	uxtb	r2, r2
 8007e70:	701a      	strb	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	625a      	str	r2, [r3, #36]	; 0x24
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e80:	3b01      	subs	r3, #1
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	851a      	strh	r2, [r3, #40]	; 0x28
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e96:	e10b      	b.n	80080b0 <HAL_I2C_Master_Receive+0x418>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d14e      	bne.n	8007f3e <HAL_I2C_Master_Receive+0x2a6>
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	4906      	ldr	r1, [pc, #24]	; (8007ec4 <HAL_I2C_Master_Receive+0x22c>)
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f001 fde2 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d008      	beq.n	8007ec8 <HAL_I2C_Master_Receive+0x230>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e10e      	b.n	80080d8 <HAL_I2C_Master_Receive+0x440>
 8007eba:	bf00      	nop
 8007ebc:	00100002 	.word	0x00100002
 8007ec0:	ffff0000 	.word	0xffff0000
 8007ec4:	00010004 	.word	0x00010004
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	691a      	ldr	r2, [r3, #16]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	b2d2      	uxtb	r2, r2
 8007ee4:	701a      	strb	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	1c5a      	adds	r2, r3, #1
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	625a      	str	r2, [r3, #36]	; 0x24
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	851a      	strh	r2, [r3, #40]	; 0x28
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	3b01      	subs	r3, #1
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	691a      	ldr	r2, [r3, #16]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	b2d2      	uxtb	r2, r2
 8007f16:	701a      	strb	r2, [r3, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	625a      	str	r2, [r3, #36]	; 0x24
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f26:	3b01      	subs	r3, #1
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	851a      	strh	r2, [r3, #40]	; 0x28
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	3b01      	subs	r3, #1
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f3c:	e0b8      	b.n	80080b0 <HAL_I2C_Master_Receive+0x418>
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	2200      	movs	r2, #0
 8007f46:	4966      	ldr	r1, [pc, #408]	; (80080e0 <HAL_I2C_Master_Receive+0x448>)
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f001 fd93 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <HAL_I2C_Master_Receive+0x2c0>
 8007f54:	2301      	movs	r3, #1
 8007f56:	e0bf      	b.n	80080d8 <HAL_I2C_Master_Receive+0x440>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	691a      	ldr	r2, [r3, #16]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	b2d2      	uxtb	r2, r2
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	1c5a      	adds	r2, r3, #1
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	625a      	str	r2, [r3, #36]	; 0x24
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	851a      	strh	r2, [r3, #40]	; 0x28
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	494f      	ldr	r1, [pc, #316]	; (80080e0 <HAL_I2C_Master_Receive+0x448>)
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f001 fd65 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <HAL_I2C_Master_Receive+0x31c>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e091      	b.n	80080d8 <HAL_I2C_Master_Receive+0x440>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	691a      	ldr	r2, [r3, #16]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	701a      	strb	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	625a      	str	r2, [r3, #36]	; 0x24
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	851a      	strh	r2, [r3, #40]	; 0x28
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	b2d2      	uxtb	r2, r2
 8008002:	701a      	strb	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	1c5a      	adds	r2, r3, #1
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	625a      	str	r2, [r3, #36]	; 0x24
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008012:	3b01      	subs	r3, #1
 8008014:	b29a      	uxth	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	851a      	strh	r2, [r3, #40]	; 0x28
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800801e:	b29b      	uxth	r3, r3
 8008020:	3b01      	subs	r3, #1
 8008022:	b29a      	uxth	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008028:	e042      	b.n	80080b0 <HAL_I2C_Master_Receive+0x418>
 800802a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800802c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f001 feaa 	bl	8009d88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <HAL_I2C_Master_Receive+0x3a6>
 800803a:	2301      	movs	r3, #1
 800803c:	e04c      	b.n	80080d8 <HAL_I2C_Master_Receive+0x440>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	b2d2      	uxtb	r2, r2
 800804a:	701a      	strb	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	625a      	str	r2, [r3, #36]	; 0x24
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800805a:	3b01      	subs	r3, #1
 800805c:	b29a      	uxth	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	851a      	strh	r2, [r3, #40]	; 0x28
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008066:	b29b      	uxth	r3, r3
 8008068:	3b01      	subs	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	f003 0304 	and.w	r3, r3, #4
 800807a:	2b04      	cmp	r3, #4
 800807c:	d118      	bne.n	80080b0 <HAL_I2C_Master_Receive+0x418>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	691a      	ldr	r2, [r3, #16]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	b2d2      	uxtb	r2, r2
 800808a:	701a      	strb	r2, [r3, #0]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	625a      	str	r2, [r3, #36]	; 0x24
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800809a:	3b01      	subs	r3, #1
 800809c:	b29a      	uxth	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	851a      	strh	r2, [r3, #40]	; 0x28
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3b01      	subs	r3, #1
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f47f aec2 	bne.w	8007e3e <HAL_I2C_Master_Receive+0x1a6>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2220      	movs	r2, #32
 80080be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80080d2:	2300      	movs	r3, #0
 80080d4:	e000      	b.n	80080d8 <HAL_I2C_Master_Receive+0x440>
 80080d6:	2302      	movs	r3, #2
 80080d8:	4618      	mov	r0, r3
 80080da:	3728      	adds	r7, #40	; 0x28
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	00010004 	.word	0x00010004

080080e4 <HAL_I2C_EV_IRQHandler>:
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	2300      	movs	r3, #0
 80080ee:	61bb      	str	r3, [r7, #24]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	617b      	str	r3, [r7, #20]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fc:	613b      	str	r3, [r7, #16]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008104:	73fb      	strb	r3, [r7, #15]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800810c:	73bb      	strb	r3, [r7, #14]
 800810e:	7bfb      	ldrb	r3, [r7, #15]
 8008110:	2b10      	cmp	r3, #16
 8008112:	d003      	beq.n	800811c <HAL_I2C_EV_IRQHandler+0x38>
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	2b40      	cmp	r3, #64	; 0x40
 8008118:	f040 80c1 	bne.w	800829e <HAL_I2C_EV_IRQHandler+0x1ba>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	61bb      	str	r3, [r7, #24]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	61fb      	str	r3, [r7, #28]
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10d      	bne.n	8008152 <HAL_I2C_EV_IRQHandler+0x6e>
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800813c:	d003      	beq.n	8008146 <HAL_I2C_EV_IRQHandler+0x62>
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008144:	d101      	bne.n	800814a <HAL_I2C_EV_IRQHandler+0x66>
 8008146:	2301      	movs	r3, #1
 8008148:	e000      	b.n	800814c <HAL_I2C_EV_IRQHandler+0x68>
 800814a:	2300      	movs	r3, #0
 800814c:	2b01      	cmp	r3, #1
 800814e:	f000 8132 	beq.w	80083b6 <HAL_I2C_EV_IRQHandler+0x2d2>
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00c      	beq.n	8008176 <HAL_I2C_EV_IRQHandler+0x92>
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	0a5b      	lsrs	r3, r3, #9
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	2b00      	cmp	r3, #0
 8008166:	d006      	beq.n	8008176 <HAL_I2C_EV_IRQHandler+0x92>
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f001 fe92 	bl	8009e92 <I2C_ConvertOtherXferOptions>
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fcdc 	bl	8008b2c <I2C_Master_SB>
 8008174:	e092      	b.n	800829c <HAL_I2C_EV_IRQHandler+0x1b8>
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	08db      	lsrs	r3, r3, #3
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b00      	cmp	r3, #0
 8008180:	d009      	beq.n	8008196 <HAL_I2C_EV_IRQHandler+0xb2>
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	0a5b      	lsrs	r3, r3, #9
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <HAL_I2C_EV_IRQHandler+0xb2>
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fd52 	bl	8008c38 <I2C_Master_ADD10>
 8008194:	e082      	b.n	800829c <HAL_I2C_EV_IRQHandler+0x1b8>
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	085b      	lsrs	r3, r3, #1
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d009      	beq.n	80081b6 <HAL_I2C_EV_IRQHandler+0xd2>
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	0a5b      	lsrs	r3, r3, #9
 80081a6:	f003 0301 	and.w	r3, r3, #1
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <HAL_I2C_EV_IRQHandler+0xd2>
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fd6c 	bl	8008c8c <I2C_Master_ADDR>
 80081b4:	e072      	b.n	800829c <HAL_I2C_EV_IRQHandler+0x1b8>
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	089b      	lsrs	r3, r3, #2
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d03b      	beq.n	800823a <HAL_I2C_EV_IRQHandler+0x156>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081d0:	f000 80f3 	beq.w	80083ba <HAL_I2C_EV_IRQHandler+0x2d6>
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	09db      	lsrs	r3, r3, #7
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00f      	beq.n	8008200 <HAL_I2C_EV_IRQHandler+0x11c>
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	0a9b      	lsrs	r3, r3, #10
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d009      	beq.n	8008200 <HAL_I2C_EV_IRQHandler+0x11c>
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	089b      	lsrs	r3, r3, #2
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d103      	bne.n	8008200 <HAL_I2C_EV_IRQHandler+0x11c>
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f94c 	bl	8008496 <I2C_MasterTransmit_TXE>
 80081fe:	e04d      	b.n	800829c <HAL_I2C_EV_IRQHandler+0x1b8>
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	089b      	lsrs	r3, r3, #2
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 80d6 	beq.w	80083ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	0a5b      	lsrs	r3, r3, #9
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 80cf 	beq.w	80083ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800821c:	7bbb      	ldrb	r3, [r7, #14]
 800821e:	2b21      	cmp	r3, #33	; 0x21
 8008220:	d103      	bne.n	800822a <HAL_I2C_EV_IRQHandler+0x146>
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f9d3 	bl	80085ce <I2C_MasterTransmit_BTF>
 8008228:	e0c7      	b.n	80083ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800822a:	7bfb      	ldrb	r3, [r7, #15]
 800822c:	2b40      	cmp	r3, #64	; 0x40
 800822e:	f040 80c4 	bne.w	80083ba <HAL_I2C_EV_IRQHandler+0x2d6>
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fa41 	bl	80086ba <I2C_MemoryTransmit_TXE_BTF>
 8008238:	e0bf      	b.n	80083ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008248:	f000 80b7 	beq.w	80083ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	099b      	lsrs	r3, r3, #6
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00f      	beq.n	8008278 <HAL_I2C_EV_IRQHandler+0x194>
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	0a9b      	lsrs	r3, r3, #10
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d009      	beq.n	8008278 <HAL_I2C_EV_IRQHandler+0x194>
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	089b      	lsrs	r3, r3, #2
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	2b00      	cmp	r3, #0
 800826e:	d103      	bne.n	8008278 <HAL_I2C_EV_IRQHandler+0x194>
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fab6 	bl	80087e2 <I2C_MasterReceive_RXNE>
 8008276:	e011      	b.n	800829c <HAL_I2C_EV_IRQHandler+0x1b8>
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	089b      	lsrs	r3, r3, #2
 800827c:	f003 0301 	and.w	r3, r3, #1
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 809a 	beq.w	80083ba <HAL_I2C_EV_IRQHandler+0x2d6>
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	0a5b      	lsrs	r3, r3, #9
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 8093 	beq.w	80083ba <HAL_I2C_EV_IRQHandler+0x2d6>
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fb5f 	bl	8008958 <I2C_MasterReceive_BTF>
 800829a:	e08e      	b.n	80083ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800829c:	e08d      	b.n	80083ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d004      	beq.n	80082b0 <HAL_I2C_EV_IRQHandler+0x1cc>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	61fb      	str	r3, [r7, #28]
 80082ae:	e007      	b.n	80082c0 <HAL_I2C_EV_IRQHandler+0x1dc>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	61bb      	str	r3, [r7, #24]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	61fb      	str	r3, [r7, #28]
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	085b      	lsrs	r3, r3, #1
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d012      	beq.n	80082f2 <HAL_I2C_EV_IRQHandler+0x20e>
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	0a5b      	lsrs	r3, r3, #9
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00c      	beq.n	80082f2 <HAL_I2C_EV_IRQHandler+0x20e>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d003      	beq.n	80082e8 <HAL_I2C_EV_IRQHandler+0x204>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	61bb      	str	r3, [r7, #24]
 80082e8:	69b9      	ldr	r1, [r7, #24]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 ff1d 	bl	800912a <I2C_Slave_ADDR>
 80082f0:	e066      	b.n	80083c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	091b      	lsrs	r3, r3, #4
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d009      	beq.n	8008312 <HAL_I2C_EV_IRQHandler+0x22e>
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	0a5b      	lsrs	r3, r3, #9
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <HAL_I2C_EV_IRQHandler+0x22e>
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 ff58 	bl	80091c0 <I2C_Slave_STOPF>
 8008310:	e056      	b.n	80083c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	2b21      	cmp	r3, #33	; 0x21
 8008316:	d002      	beq.n	800831e <HAL_I2C_EV_IRQHandler+0x23a>
 8008318:	7bbb      	ldrb	r3, [r7, #14]
 800831a:	2b29      	cmp	r3, #41	; 0x29
 800831c:	d125      	bne.n	800836a <HAL_I2C_EV_IRQHandler+0x286>
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	09db      	lsrs	r3, r3, #7
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00f      	beq.n	800834a <HAL_I2C_EV_IRQHandler+0x266>
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	0a9b      	lsrs	r3, r3, #10
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d009      	beq.n	800834a <HAL_I2C_EV_IRQHandler+0x266>
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	089b      	lsrs	r3, r3, #2
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	d103      	bne.n	800834a <HAL_I2C_EV_IRQHandler+0x266>
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fe33 	bl	8008fae <I2C_SlaveTransmit_TXE>
 8008348:	e039      	b.n	80083be <HAL_I2C_EV_IRQHandler+0x2da>
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	089b      	lsrs	r3, r3, #2
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	d033      	beq.n	80083be <HAL_I2C_EV_IRQHandler+0x2da>
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	0a5b      	lsrs	r3, r3, #9
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	d02d      	beq.n	80083be <HAL_I2C_EV_IRQHandler+0x2da>
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fe60 	bl	8009028 <I2C_SlaveTransmit_BTF>
 8008368:	e029      	b.n	80083be <HAL_I2C_EV_IRQHandler+0x2da>
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	099b      	lsrs	r3, r3, #6
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00f      	beq.n	8008396 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	0a9b      	lsrs	r3, r3, #10
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d009      	beq.n	8008396 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	089b      	lsrs	r3, r3, #2
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	d103      	bne.n	8008396 <HAL_I2C_EV_IRQHandler+0x2b2>
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fe6b 	bl	800906a <I2C_SlaveReceive_RXNE>
 8008394:	e014      	b.n	80083c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	089b      	lsrs	r3, r3, #2
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00e      	beq.n	80083c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	0a5b      	lsrs	r3, r3, #9
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d008      	beq.n	80083c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fe99 	bl	80090e6 <I2C_SlaveReceive_BTF>
 80083b4:	e004      	b.n	80083c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80083b6:	bf00      	nop
 80083b8:	e002      	b.n	80083c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80083ba:	bf00      	nop
 80083bc:	e000      	b.n	80083c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80083be:	bf00      	nop
 80083c0:	3720      	adds	r7, #32
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <HAL_I2C_MasterTxCpltCallback>:
 80083c6:	b480      	push	{r7}
 80083c8:	b083      	sub	sp, #12
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	bf00      	nop
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <HAL_I2C_MasterRxCpltCallback>:
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	bf00      	nop
 80083e4:	370c      	adds	r7, #12
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr

080083ee <HAL_I2C_SlaveTxCpltCallback>:
 80083ee:	b480      	push	{r7}
 80083f0:	b083      	sub	sp, #12
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	bf00      	nop
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <HAL_I2C_SlaveRxCpltCallback>:
 8008402:	b480      	push	{r7}
 8008404:	b083      	sub	sp, #12
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	bf00      	nop
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <HAL_I2C_AddrCallback>:
 8008416:	b480      	push	{r7}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	460b      	mov	r3, r1
 8008420:	70fb      	strb	r3, [r7, #3]
 8008422:	4613      	mov	r3, r2
 8008424:	803b      	strh	r3, [r7, #0]
 8008426:	bf00      	nop
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <HAL_I2C_ListenCpltCallback>:
 8008432:	b480      	push	{r7}
 8008434:	b083      	sub	sp, #12
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	bf00      	nop
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <HAL_I2C_MemTxCpltCallback>:
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	bf00      	nop
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <HAL_I2C_MemRxCpltCallback>:
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <HAL_I2C_ErrorCallback>:
 800846e:	b480      	push	{r7}
 8008470:	b083      	sub	sp, #12
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <HAL_I2C_AbortCpltCallback>:
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	bf00      	nop
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <I2C_MasterTransmit_TXE>:
 8008496:	b580      	push	{r7, lr}
 8008498:	b084      	sub	sp, #16
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084a4:	73fb      	strb	r3, [r7, #15]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084ac:	73bb      	strb	r3, [r7, #14]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b2:	60bb      	str	r3, [r7, #8]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d150      	bne.n	800855e <I2C_MasterTransmit_TXE+0xc8>
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	2b21      	cmp	r3, #33	; 0x21
 80084c0:	d14d      	bne.n	800855e <I2C_MasterTransmit_TXE+0xc8>
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d01d      	beq.n	8008504 <I2C_MasterTransmit_TXE+0x6e>
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2b20      	cmp	r3, #32
 80084cc:	d01a      	beq.n	8008504 <I2C_MasterTransmit_TXE+0x6e>
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80084d4:	d016      	beq.n	8008504 <I2C_MasterTransmit_TXE+0x6e>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80084e4:	605a      	str	r2, [r3, #4]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2211      	movs	r2, #17
 80084ea:	631a      	str	r2, [r3, #48]	; 0x30
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7ff ff62 	bl	80083c6 <HAL_I2C_MasterTxCpltCallback>
 8008502:	e060      	b.n	80085c6 <I2C_MasterTransmit_TXE+0x130>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008512:	605a      	str	r2, [r3, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	631a      	str	r2, [r3, #48]	; 0x30
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2220      	movs	r2, #32
 800852e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b40      	cmp	r3, #64	; 0x40
 800853c:	d107      	bne.n	800854e <I2C_MasterTransmit_TXE+0xb8>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7ff ff7d 	bl	8008446 <HAL_I2C_MemTxCpltCallback>
 800854c:	e03b      	b.n	80085c6 <I2C_MasterTransmit_TXE+0x130>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff ff35 	bl	80083c6 <HAL_I2C_MasterTxCpltCallback>
 800855c:	e033      	b.n	80085c6 <I2C_MasterTransmit_TXE+0x130>
 800855e:	7bfb      	ldrb	r3, [r7, #15]
 8008560:	2b21      	cmp	r3, #33	; 0x21
 8008562:	d005      	beq.n	8008570 <I2C_MasterTransmit_TXE+0xda>
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	2b40      	cmp	r3, #64	; 0x40
 8008568:	d12d      	bne.n	80085c6 <I2C_MasterTransmit_TXE+0x130>
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	2b22      	cmp	r3, #34	; 0x22
 800856e:	d12a      	bne.n	80085c6 <I2C_MasterTransmit_TXE+0x130>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008574:	b29b      	uxth	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d108      	bne.n	800858c <I2C_MasterTransmit_TXE+0xf6>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008588:	605a      	str	r2, [r3, #4]
 800858a:	e01c      	b.n	80085c6 <I2C_MasterTransmit_TXE+0x130>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b40      	cmp	r3, #64	; 0x40
 8008596:	d103      	bne.n	80085a0 <I2C_MasterTransmit_TXE+0x10a>
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f88e 	bl	80086ba <I2C_MemoryTransmit_TXE_BTF>
 800859e:	e012      	b.n	80085c6 <I2C_MasterTransmit_TXE+0x130>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a4:	781a      	ldrb	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	611a      	str	r2, [r3, #16]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	1c5a      	adds	r2, r3, #1
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	625a      	str	r2, [r3, #36]	; 0x24
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	3b01      	subs	r3, #1
 80085be:	b29a      	uxth	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80085c4:	e7ff      	b.n	80085c6 <I2C_MasterTransmit_TXE+0x130>
 80085c6:	bf00      	nop
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <I2C_MasterTransmit_BTF>:
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b21      	cmp	r3, #33	; 0x21
 80085e6:	d164      	bne.n	80086b2 <I2C_MasterTransmit_BTF+0xe4>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d012      	beq.n	8008618 <I2C_MasterTransmit_BTF+0x4a>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f6:	781a      	ldrb	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	611a      	str	r2, [r3, #16]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	625a      	str	r2, [r3, #36]	; 0x24
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800860c:	b29b      	uxth	r3, r3
 800860e:	3b01      	subs	r3, #1
 8008610:	b29a      	uxth	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008616:	e04c      	b.n	80086b2 <I2C_MasterTransmit_BTF+0xe4>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b08      	cmp	r3, #8
 800861c:	d01d      	beq.n	800865a <I2C_MasterTransmit_BTF+0x8c>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b20      	cmp	r3, #32
 8008622:	d01a      	beq.n	800865a <I2C_MasterTransmit_BTF+0x8c>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800862a:	d016      	beq.n	800865a <I2C_MasterTransmit_BTF+0x8c>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800863a:	605a      	str	r2, [r3, #4]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2211      	movs	r2, #17
 8008640:	631a      	str	r2, [r3, #48]	; 0x30
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2220      	movs	r2, #32
 800864e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7ff feb7 	bl	80083c6 <HAL_I2C_MasterTxCpltCallback>
 8008658:	e02b      	b.n	80086b2 <I2C_MasterTransmit_BTF+0xe4>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	685a      	ldr	r2, [r3, #4]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008668:	605a      	str	r2, [r3, #4]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	631a      	str	r2, [r3, #48]	; 0x30
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2220      	movs	r2, #32
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b40      	cmp	r3, #64	; 0x40
 8008692:	d107      	bne.n	80086a4 <I2C_MasterTransmit_BTF+0xd6>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7ff fed2 	bl	8008446 <HAL_I2C_MemTxCpltCallback>
 80086a2:	e006      	b.n	80086b2 <I2C_MasterTransmit_BTF+0xe4>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7ff fe8a 	bl	80083c6 <HAL_I2C_MasterTxCpltCallback>
 80086b2:	bf00      	nop
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <I2C_MemoryTransmit_TXE_BTF>:
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086c8:	73fb      	strb	r3, [r7, #15]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d11d      	bne.n	800870e <I2C_MemoryTransmit_TXE_BTF+0x54>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d10b      	bne.n	80086f2 <I2C_MemoryTransmit_TXE_BTF+0x38>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	611a      	str	r2, [r3, #16]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ea:	1c9a      	adds	r2, r3, #2
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	651a      	str	r2, [r3, #80]	; 0x50
 80086f0:	e073      	b.n	80087da <I2C_MemoryTransmit_TXE_BTF+0x120>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	121b      	asrs	r3, r3, #8
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	611a      	str	r2, [r3, #16]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008706:	1c5a      	adds	r2, r3, #1
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	651a      	str	r2, [r3, #80]	; 0x50
 800870c:	e065      	b.n	80087da <I2C_MemoryTransmit_TXE_BTF+0x120>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008712:	2b01      	cmp	r3, #1
 8008714:	d10b      	bne.n	800872e <I2C_MemoryTransmit_TXE_BTF+0x74>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800871a:	b2da      	uxtb	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	611a      	str	r2, [r3, #16]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008726:	1c5a      	adds	r2, r3, #1
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	651a      	str	r2, [r3, #80]	; 0x50
 800872c:	e055      	b.n	80087da <I2C_MemoryTransmit_TXE_BTF+0x120>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008732:	2b02      	cmp	r3, #2
 8008734:	d151      	bne.n	80087da <I2C_MemoryTransmit_TXE_BTF+0x120>
 8008736:	7bfb      	ldrb	r3, [r7, #15]
 8008738:	2b22      	cmp	r3, #34	; 0x22
 800873a:	d10d      	bne.n	8008758 <I2C_MemoryTransmit_TXE_BTF+0x9e>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	651a      	str	r2, [r3, #80]	; 0x50
 8008756:	e040      	b.n	80087da <I2C_MemoryTransmit_TXE_BTF+0x120>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800875c:	b29b      	uxth	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d015      	beq.n	800878e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008762:	7bfb      	ldrb	r3, [r7, #15]
 8008764:	2b21      	cmp	r3, #33	; 0x21
 8008766:	d112      	bne.n	800878e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	781a      	ldrb	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	611a      	str	r2, [r3, #16]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	625a      	str	r2, [r3, #36]	; 0x24
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008782:	b29b      	uxth	r3, r3
 8008784:	3b01      	subs	r3, #1
 8008786:	b29a      	uxth	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800878c:	e025      	b.n	80087da <I2C_MemoryTransmit_TXE_BTF+0x120>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008792:	b29b      	uxth	r3, r3
 8008794:	2b00      	cmp	r3, #0
 8008796:	d120      	bne.n	80087da <I2C_MemoryTransmit_TXE_BTF+0x120>
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	2b21      	cmp	r3, #33	; 0x21
 800879c:	d11d      	bne.n	80087da <I2C_MemoryTransmit_TXE_BTF+0x120>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	685a      	ldr	r2, [r3, #4]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80087ac:	605a      	str	r2, [r3, #4]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	631a      	str	r2, [r3, #48]	; 0x30
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2220      	movs	r2, #32
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff fe36 	bl	8008446 <HAL_I2C_MemTxCpltCallback>
 80087da:	bf00      	nop
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <I2C_MasterReceive_RXNE>:
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b22      	cmp	r3, #34	; 0x22
 80087f4:	f040 80ac 	bne.w	8008950 <I2C_MasterReceive_RXNE+0x16e>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b03      	cmp	r3, #3
 8008804:	d921      	bls.n	800884a <I2C_MasterReceive_RXNE+0x68>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	691a      	ldr	r2, [r3, #16]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	701a      	strb	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	625a      	str	r2, [r3, #36]	; 0x24
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008822:	b29b      	uxth	r3, r3
 8008824:	3b01      	subs	r3, #1
 8008826:	b29a      	uxth	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008830:	b29b      	uxth	r3, r3
 8008832:	2b03      	cmp	r3, #3
 8008834:	f040 808c 	bne.w	8008950 <I2C_MasterReceive_RXNE+0x16e>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008846:	605a      	str	r2, [r3, #4]
 8008848:	e082      	b.n	8008950 <I2C_MasterReceive_RXNE+0x16e>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884e:	2b02      	cmp	r3, #2
 8008850:	d075      	beq.n	800893e <I2C_MasterReceive_RXNE+0x15c>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d002      	beq.n	800885e <I2C_MasterReceive_RXNE+0x7c>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d16f      	bne.n	800893e <I2C_MasterReceive_RXNE+0x15c>
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f001 fa60 	bl	8009d24 <I2C_WaitOnSTOPRequestThroughIT>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d142      	bne.n	80088f0 <I2C_MasterReceive_RXNE+0x10e>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008878:	601a      	str	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008888:	605a      	str	r2, [r3, #4]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	691a      	ldr	r2, [r3, #16]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	b2d2      	uxtb	r2, r2
 8008896:	701a      	strb	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	625a      	str	r2, [r3, #36]	; 0x24
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	3b01      	subs	r3, #1
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2220      	movs	r2, #32
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b40      	cmp	r3, #64	; 0x40
 80088c2:	d10a      	bne.n	80088da <I2C_MasterReceive_RXNE+0xf8>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	631a      	str	r2, [r3, #48]	; 0x30
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7ff fdc1 	bl	800845a <HAL_I2C_MemRxCpltCallback>
 80088d8:	e03a      	b.n	8008950 <I2C_MasterReceive_RXNE+0x16e>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2212      	movs	r2, #18
 80088e6:	631a      	str	r2, [r3, #48]	; 0x30
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7ff fd76 	bl	80083da <HAL_I2C_MasterRxCpltCallback>
 80088ee:	e02f      	b.n	8008950 <I2C_MasterReceive_RXNE+0x16e>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80088fe:	605a      	str	r2, [r3, #4]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	691a      	ldr	r2, [r3, #16]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	b2d2      	uxtb	r2, r2
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	625a      	str	r2, [r3, #36]	; 0x24
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800891c:	b29b      	uxth	r3, r3
 800891e:	3b01      	subs	r3, #1
 8008920:	b29a      	uxth	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2220      	movs	r2, #32
 800892a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f7ff fd99 	bl	800846e <HAL_I2C_ErrorCallback>
 800893c:	e008      	b.n	8008950 <I2C_MasterReceive_RXNE+0x16e>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800894c:	605a      	str	r2, [r3, #4]
 800894e:	e7ff      	b.n	8008950 <I2C_MasterReceive_RXNE+0x16e>
 8008950:	bf00      	nop
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <I2C_MasterReceive_BTF>:
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008964:	60fb      	str	r3, [r7, #12]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800896a:	b29b      	uxth	r3, r3
 800896c:	2b04      	cmp	r3, #4
 800896e:	d11b      	bne.n	80089a8 <I2C_MasterReceive_BTF+0x50>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	685a      	ldr	r2, [r3, #4]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800897e:	605a      	str	r2, [r3, #4]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	691a      	ldr	r2, [r3, #16]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	b2d2      	uxtb	r2, r2
 800898c:	701a      	strb	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008992:	1c5a      	adds	r2, r3, #1
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	625a      	str	r2, [r3, #36]	; 0x24
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800899c:	b29b      	uxth	r3, r3
 800899e:	3b01      	subs	r3, #1
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80089a6:	e0bd      	b.n	8008b24 <I2C_MasterReceive_BTF+0x1cc>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	d129      	bne.n	8008a06 <I2C_MasterReceive_BTF+0xae>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089c0:	605a      	str	r2, [r3, #4]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2b04      	cmp	r3, #4
 80089c6:	d00a      	beq.n	80089de <I2C_MasterReceive_BTF+0x86>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d007      	beq.n	80089de <I2C_MasterReceive_BTF+0x86>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	691a      	ldr	r2, [r3, #16]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	b2d2      	uxtb	r2, r2
 80089ea:	701a      	strb	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	1c5a      	adds	r2, r3, #1
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	625a      	str	r2, [r3, #36]	; 0x24
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	3b01      	subs	r3, #1
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008a04:	e08e      	b.n	8008b24 <I2C_MasterReceive_BTF+0x1cc>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d176      	bne.n	8008afe <I2C_MasterReceive_BTF+0x1a6>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d002      	beq.n	8008a1c <I2C_MasterReceive_BTF+0xc4>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b10      	cmp	r3, #16
 8008a1a:	d108      	bne.n	8008a2e <I2C_MasterReceive_BTF+0xd6>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	e019      	b.n	8008a62 <I2C_MasterReceive_BTF+0x10a>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b04      	cmp	r3, #4
 8008a32:	d002      	beq.n	8008a3a <I2C_MasterReceive_BTF+0xe2>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d108      	bne.n	8008a4c <I2C_MasterReceive_BTF+0xf4>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	e00a      	b.n	8008a62 <I2C_MasterReceive_BTF+0x10a>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2b10      	cmp	r3, #16
 8008a50:	d007      	beq.n	8008a62 <I2C_MasterReceive_BTF+0x10a>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a60:	601a      	str	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	691a      	ldr	r2, [r3, #16]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	b2d2      	uxtb	r2, r2
 8008a6e:	701a      	strb	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	625a      	str	r2, [r3, #36]	; 0x24
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	3b01      	subs	r3, #1
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	691a      	ldr	r2, [r3, #16]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	b2d2      	uxtb	r2, r2
 8008a94:	701a      	strb	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9a:	1c5a      	adds	r2, r3, #1
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	625a      	str	r2, [r3, #36]	; 0x24
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008abc:	605a      	str	r2, [r3, #4]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b40      	cmp	r3, #64	; 0x40
 8008ad0:	d10a      	bne.n	8008ae8 <I2C_MasterReceive_BTF+0x190>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	631a      	str	r2, [r3, #48]	; 0x30
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff fcba 	bl	800845a <HAL_I2C_MemRxCpltCallback>
 8008ae6:	e01d      	b.n	8008b24 <I2C_MasterReceive_BTF+0x1cc>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2212      	movs	r2, #18
 8008af4:	631a      	str	r2, [r3, #48]	; 0x30
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff fc6f 	bl	80083da <HAL_I2C_MasterRxCpltCallback>
 8008afc:	e012      	b.n	8008b24 <I2C_MasterReceive_BTF+0x1cc>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	691a      	ldr	r2, [r3, #16]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	b2d2      	uxtb	r2, r2
 8008b0a:	701a      	strb	r2, [r3, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	1c5a      	adds	r2, r3, #1
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	625a      	str	r2, [r3, #36]	; 0x24
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008b24:	bf00      	nop
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <I2C_Master_SB>:
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b40      	cmp	r3, #64	; 0x40
 8008b3e:	d117      	bne.n	8008b70 <I2C_Master_SB+0x44>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d109      	bne.n	8008b5c <I2C_Master_SB+0x30>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	461a      	mov	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b58:	611a      	str	r2, [r3, #16]
 8008b5a:	e067      	b.n	8008c2c <I2C_Master_SB+0x100>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	f043 0301 	orr.w	r3, r3, #1
 8008b66:	b2da      	uxtb	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	611a      	str	r2, [r3, #16]
 8008b6e:	e05d      	b.n	8008c2c <I2C_Master_SB+0x100>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b78:	d133      	bne.n	8008be2 <I2C_Master_SB+0xb6>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b21      	cmp	r3, #33	; 0x21
 8008b84:	d109      	bne.n	8008b9a <I2C_Master_SB+0x6e>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b96:	611a      	str	r2, [r3, #16]
 8008b98:	e008      	b.n	8008bac <I2C_Master_SB+0x80>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	f043 0301 	orr.w	r3, r3, #1
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	611a      	str	r2, [r3, #16]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <I2C_Master_SB+0x92>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d108      	bne.n	8008bd0 <I2C_Master_SB+0xa4>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d032      	beq.n	8008c2c <I2C_Master_SB+0x100>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d02d      	beq.n	8008c2c <I2C_Master_SB+0x100>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bde:	605a      	str	r2, [r3, #4]
 8008be0:	e024      	b.n	8008c2c <I2C_Master_SB+0x100>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10e      	bne.n	8008c08 <I2C_Master_SB+0xdc>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	11db      	asrs	r3, r3, #7
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	f003 0306 	and.w	r3, r3, #6
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	f063 030f 	orn	r3, r3, #15
 8008bfe:	b2da      	uxtb	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	611a      	str	r2, [r3, #16]
 8008c06:	e011      	b.n	8008c2c <I2C_Master_SB+0x100>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d10d      	bne.n	8008c2c <I2C_Master_SB+0x100>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	11db      	asrs	r3, r3, #7
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	f003 0306 	and.w	r3, r3, #6
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	f063 030e 	orn	r3, r3, #14
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	611a      	str	r2, [r3, #16]
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <I2C_Master_ADD10>:
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	611a      	str	r2, [r3, #16]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d004      	beq.n	8008c5e <I2C_Master_ADD10+0x26>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d108      	bne.n	8008c70 <I2C_Master_ADD10+0x38>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00c      	beq.n	8008c80 <I2C_Master_ADD10+0x48>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d007      	beq.n	8008c80 <I2C_Master_ADD10+0x48>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c7e:	605a      	str	r2, [r3, #4]
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <I2C_Master_ADDR>:
 8008c8c:	b480      	push	{r7}
 8008c8e:	b091      	sub	sp, #68	; 0x44
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b22      	cmp	r3, #34	; 0x22
 8008cb4:	f040 8169 	bne.w	8008f8a <I2C_Master_ADDR+0x2fe>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10f      	bne.n	8008ce0 <I2C_Master_ADDR+0x54>
 8008cc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cc4:	2b40      	cmp	r3, #64	; 0x40
 8008cc6:	d10b      	bne.n	8008ce0 <I2C_Master_ADDR+0x54>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	633b      	str	r3, [r7, #48]	; 0x30
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	633b      	str	r3, [r7, #48]	; 0x30
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cde:	e160      	b.n	8008fa2 <I2C_Master_ADDR+0x316>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d11d      	bne.n	8008d24 <I2C_Master_ADDR+0x98>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008cf0:	d118      	bne.n	8008d24 <I2C_Master_ADDR+0x98>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	651a      	str	r2, [r3, #80]	; 0x50
 8008d22:	e13e      	b.n	8008fa2 <I2C_Master_ADDR+0x316>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d113      	bne.n	8008d56 <I2C_Master_ADDR+0xca>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	e115      	b.n	8008f82 <I2C_Master_ADDR+0x2f6>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	f040 808a 	bne.w	8008e76 <I2C_Master_ADDR+0x1ea>
 8008d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008d68:	d137      	bne.n	8008dda <I2C_Master_ADDR+0x14e>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d88:	d113      	bne.n	8008db2 <I2C_Master_ADDR+0x126>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	e0e7      	b.n	8008f82 <I2C_Master_ADDR+0x2f6>
 8008db2:	2300      	movs	r3, #0
 8008db4:	623b      	str	r3, [r7, #32]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	695b      	ldr	r3, [r3, #20]
 8008dbc:	623b      	str	r3, [r7, #32]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	623b      	str	r3, [r7, #32]
 8008dc6:	6a3b      	ldr	r3, [r7, #32]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	e0d3      	b.n	8008f82 <I2C_Master_ADDR+0x2f6>
 8008dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	d02e      	beq.n	8008e3e <I2C_Master_ADDR+0x1b2>
 8008de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	d02b      	beq.n	8008e3e <I2C_Master_ADDR+0x1b2>
 8008de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de8:	2b12      	cmp	r3, #18
 8008dea:	d102      	bne.n	8008df2 <I2C_Master_ADDR+0x166>
 8008dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d125      	bne.n	8008e3e <I2C_Master_ADDR+0x1b2>
 8008df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d00e      	beq.n	8008e16 <I2C_Master_ADDR+0x18a>
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d00b      	beq.n	8008e16 <I2C_Master_ADDR+0x18a>
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e00:	2b10      	cmp	r3, #16
 8008e02:	d008      	beq.n	8008e16 <I2C_Master_ADDR+0x18a>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	e007      	b.n	8008e26 <I2C_Master_ADDR+0x19a>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	2300      	movs	r3, #0
 8008e28:	61fb      	str	r3, [r7, #28]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	61fb      	str	r3, [r7, #28]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	61fb      	str	r3, [r7, #28]
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	e0a1      	b.n	8008f82 <I2C_Master_ADDR+0x2f6>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	61bb      	str	r3, [r7, #24]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	61bb      	str	r3, [r7, #24]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	61bb      	str	r3, [r7, #24]
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	e085      	b.n	8008f82 <I2C_Master_ADDR+0x2f6>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d14d      	bne.n	8008f1c <I2C_Master_ADDR+0x290>
 8008e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	d016      	beq.n	8008eb4 <I2C_Master_ADDR+0x228>
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d013      	beq.n	8008eb4 <I2C_Master_ADDR+0x228>
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	2b10      	cmp	r3, #16
 8008e90:	d010      	beq.n	8008eb4 <I2C_Master_ADDR+0x228>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	e007      	b.n	8008ec4 <I2C_Master_ADDR+0x238>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ed2:	d117      	bne.n	8008f04 <I2C_Master_ADDR+0x278>
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008eda:	d00b      	beq.n	8008ef4 <I2C_Master_ADDR+0x268>
 8008edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d008      	beq.n	8008ef4 <I2C_Master_ADDR+0x268>
 8008ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee4:	2b08      	cmp	r3, #8
 8008ee6:	d005      	beq.n	8008ef4 <I2C_Master_ADDR+0x268>
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	2b10      	cmp	r3, #16
 8008eec:	d002      	beq.n	8008ef4 <I2C_Master_ADDR+0x268>
 8008eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef0:	2b20      	cmp	r3, #32
 8008ef2:	d107      	bne.n	8008f04 <I2C_Master_ADDR+0x278>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685a      	ldr	r2, [r3, #4]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f02:	605a      	str	r2, [r3, #4]
 8008f04:	2300      	movs	r3, #0
 8008f06:	617b      	str	r3, [r7, #20]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	617b      	str	r3, [r7, #20]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	617b      	str	r3, [r7, #20]
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	e032      	b.n	8008f82 <I2C_Master_ADDR+0x2f6>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f3a:	d117      	bne.n	8008f6c <I2C_Master_ADDR+0x2e0>
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f42:	d00b      	beq.n	8008f5c <I2C_Master_ADDR+0x2d0>
 8008f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d008      	beq.n	8008f5c <I2C_Master_ADDR+0x2d0>
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4c:	2b08      	cmp	r3, #8
 8008f4e:	d005      	beq.n	8008f5c <I2C_Master_ADDR+0x2d0>
 8008f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f52:	2b10      	cmp	r3, #16
 8008f54:	d002      	beq.n	8008f5c <I2C_Master_ADDR+0x2d0>
 8008f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f58:	2b20      	cmp	r3, #32
 8008f5a:	d107      	bne.n	8008f6c <I2C_Master_ADDR+0x2e0>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685a      	ldr	r2, [r3, #4]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f6a:	605a      	str	r2, [r3, #4]
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	613b      	str	r3, [r7, #16]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	613b      	str	r3, [r7, #16]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	613b      	str	r3, [r7, #16]
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	651a      	str	r2, [r3, #80]	; 0x50
 8008f88:	e00b      	b.n	8008fa2 <I2C_Master_ADDR+0x316>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60fb      	str	r3, [r7, #12]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	695b      	ldr	r3, [r3, #20]
 8008f94:	60fb      	str	r3, [r7, #12]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	60fb      	str	r3, [r7, #12]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	e7ff      	b.n	8008fa2 <I2C_Master_ADDR+0x316>
 8008fa2:	bf00      	nop
 8008fa4:	3744      	adds	r7, #68	; 0x44
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <I2C_SlaveTransmit_TXE>:
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b084      	sub	sp, #16
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fbc:	73fb      	strb	r3, [r7, #15]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d02b      	beq.n	8009020 <I2C_SlaveTransmit_TXE+0x72>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	781a      	ldrb	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	611a      	str	r2, [r3, #16]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	1c5a      	adds	r2, r3, #1
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	625a      	str	r2, [r3, #36]	; 0x24
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d114      	bne.n	8009020 <I2C_SlaveTransmit_TXE+0x72>
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
 8008ff8:	2b29      	cmp	r3, #41	; 0x29
 8008ffa:	d111      	bne.n	8009020 <I2C_SlaveTransmit_TXE+0x72>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800900a:	605a      	str	r2, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2221      	movs	r2, #33	; 0x21
 8009010:	631a      	str	r2, [r3, #48]	; 0x30
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2228      	movs	r2, #40	; 0x28
 8009016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7ff f9e7 	bl	80083ee <HAL_I2C_SlaveTxCpltCallback>
 8009020:	bf00      	nop
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <I2C_SlaveTransmit_BTF>:
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009034:	b29b      	uxth	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d011      	beq.n	800905e <I2C_SlaveTransmit_BTF+0x36>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903e:	781a      	ldrb	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	611a      	str	r2, [r3, #16]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	625a      	str	r2, [r3, #36]	; 0x24
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009054:	b29b      	uxth	r3, r3
 8009056:	3b01      	subs	r3, #1
 8009058:	b29a      	uxth	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800905e:	bf00      	nop
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <I2C_SlaveReceive_RXNE>:
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009078:	73fb      	strb	r3, [r7, #15]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800907e:	b29b      	uxth	r3, r3
 8009080:	2b00      	cmp	r3, #0
 8009082:	d02c      	beq.n	80090de <I2C_SlaveReceive_RXNE+0x74>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	691a      	ldr	r2, [r3, #16]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908e:	b2d2      	uxtb	r2, r2
 8009090:	701a      	strb	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	625a      	str	r2, [r3, #36]	; 0x24
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	3b01      	subs	r3, #1
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d114      	bne.n	80090de <I2C_SlaveReceive_RXNE+0x74>
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
 80090b6:	2b2a      	cmp	r3, #42	; 0x2a
 80090b8:	d111      	bne.n	80090de <I2C_SlaveReceive_RXNE+0x74>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	685a      	ldr	r2, [r3, #4]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090c8:	605a      	str	r2, [r3, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2222      	movs	r2, #34	; 0x22
 80090ce:	631a      	str	r2, [r3, #48]	; 0x30
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2228      	movs	r2, #40	; 0x28
 80090d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff f992 	bl	8008402 <HAL_I2C_SlaveRxCpltCallback>
 80090de:	bf00      	nop
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <I2C_SlaveReceive_BTF>:
 80090e6:	b480      	push	{r7}
 80090e8:	b083      	sub	sp, #12
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d012      	beq.n	800911e <I2C_SlaveReceive_BTF+0x38>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	691a      	ldr	r2, [r3, #16]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	b2d2      	uxtb	r2, r2
 8009104:	701a      	strb	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	625a      	str	r2, [r3, #36]	; 0x24
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009114:	b29b      	uxth	r3, r3
 8009116:	3b01      	subs	r3, #1
 8009118:	b29a      	uxth	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800911e:	bf00      	nop
 8009120:	370c      	adds	r7, #12
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <I2C_Slave_ADDR>:
 800912a:	b580      	push	{r7, lr}
 800912c:	b084      	sub	sp, #16
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6039      	str	r1, [r7, #0]
 8009134:	2300      	movs	r3, #0
 8009136:	73fb      	strb	r3, [r7, #15]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800913e:	b2db      	uxtb	r3, r3
 8009140:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009144:	2b28      	cmp	r3, #40	; 0x28
 8009146:	d127      	bne.n	8009198 <I2C_Slave_ADDR+0x6e>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009156:	605a      	str	r2, [r3, #4]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	089b      	lsrs	r3, r3, #2
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <I2C_Slave_ADDR+0x3e>
 8009164:	2301      	movs	r3, #1
 8009166:	73fb      	strb	r3, [r7, #15]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	09db      	lsrs	r3, r3, #7
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	2b00      	cmp	r3, #0
 8009172:	d103      	bne.n	800917c <I2C_Slave_ADDR+0x52>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	81bb      	strh	r3, [r7, #12]
 800917a:	e002      	b.n	8009182 <I2C_Slave_ADDR+0x58>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	81bb      	strh	r3, [r7, #12]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800918a:	89ba      	ldrh	r2, [r7, #12]
 800918c:	7bfb      	ldrb	r3, [r7, #15]
 800918e:	4619      	mov	r1, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7ff f940 	bl	8008416 <HAL_I2C_AddrCallback>
 8009196:	e00e      	b.n	80091b6 <I2C_Slave_ADDR+0x8c>
 8009198:	2300      	movs	r3, #0
 800919a:	60bb      	str	r3, [r7, #8]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	60bb      	str	r3, [r7, #8]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	60bb      	str	r3, [r7, #8]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80091b6:	bf00      	nop
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <I2C_Slave_STOPF>:
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ce:	73fb      	strb	r3, [r7, #15]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80091de:	605a      	str	r2, [r3, #4]
 80091e0:	2300      	movs	r3, #0
 80091e2:	60bb      	str	r3, [r7, #8]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	60bb      	str	r3, [r7, #8]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f042 0201 	orr.w	r2, r2, #1
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800921c:	d172      	bne.n	8009304 <I2C_Slave_STOPF+0x144>
 800921e:	7bfb      	ldrb	r3, [r7, #15]
 8009220:	2b22      	cmp	r3, #34	; 0x22
 8009222:	d002      	beq.n	800922a <I2C_Slave_STOPF+0x6a>
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	2b2a      	cmp	r3, #42	; 0x2a
 8009228:	d135      	bne.n	8009296 <I2C_Slave_STOPF+0xd6>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	b29a      	uxth	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800923c:	b29b      	uxth	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d005      	beq.n	800924e <I2C_Slave_STOPF+0x8e>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009246:	f043 0204 	orr.w	r2, r3, #4
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	641a      	str	r2, [r3, #64]	; 0x40
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800925c:	605a      	str	r2, [r3, #4]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe f8f7 	bl	8007456 <HAL_DMA_GetState>
 8009268:	4603      	mov	r3, r0
 800926a:	2b01      	cmp	r3, #1
 800926c:	d049      	beq.n	8009302 <I2C_Slave_STOPF+0x142>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009272:	4a69      	ldr	r2, [pc, #420]	; (8009418 <I2C_Slave_STOPF+0x258>)
 8009274:	651a      	str	r2, [r3, #80]	; 0x50
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe f8c9 	bl	8007412 <HAL_DMA_Abort_IT>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d03d      	beq.n	8009302 <I2C_Slave_STOPF+0x142>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009290:	4610      	mov	r0, r2
 8009292:	4798      	blx	r3
 8009294:	e035      	b.n	8009302 <I2C_Slave_STOPF+0x142>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	b29a      	uxth	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d005      	beq.n	80092ba <I2C_Slave_STOPF+0xfa>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b2:	f043 0204 	orr.w	r2, r3, #4
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	641a      	str	r2, [r3, #64]	; 0x40
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092c8:	605a      	str	r2, [r3, #4]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fe f8c1 	bl	8007456 <HAL_DMA_GetState>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d014      	beq.n	8009304 <I2C_Slave_STOPF+0x144>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092de:	4a4e      	ldr	r2, [pc, #312]	; (8009418 <I2C_Slave_STOPF+0x258>)
 80092e0:	651a      	str	r2, [r3, #80]	; 0x50
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fe f893 	bl	8007412 <HAL_DMA_Abort_IT>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d008      	beq.n	8009304 <I2C_Slave_STOPF+0x144>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80092fc:	4610      	mov	r0, r2
 80092fe:	4798      	blx	r3
 8009300:	e000      	b.n	8009304 <I2C_Slave_STOPF+0x144>
 8009302:	bf00      	nop
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009308:	b29b      	uxth	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d03e      	beq.n	800938c <I2C_Slave_STOPF+0x1cc>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	695b      	ldr	r3, [r3, #20]
 8009314:	f003 0304 	and.w	r3, r3, #4
 8009318:	2b04      	cmp	r3, #4
 800931a:	d112      	bne.n	8009342 <I2C_Slave_STOPF+0x182>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	691a      	ldr	r2, [r3, #16]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009326:	b2d2      	uxtb	r2, r2
 8009328:	701a      	strb	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932e:	1c5a      	adds	r2, r3, #1
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	625a      	str	r2, [r3, #36]	; 0x24
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009338:	b29b      	uxth	r3, r3
 800933a:	3b01      	subs	r3, #1
 800933c:	b29a      	uxth	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800934c:	2b40      	cmp	r3, #64	; 0x40
 800934e:	d112      	bne.n	8009376 <I2C_Slave_STOPF+0x1b6>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	691a      	ldr	r2, [r3, #16]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935a:	b2d2      	uxtb	r2, r2
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	625a      	str	r2, [r3, #36]	; 0x24
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800936c:	b29b      	uxth	r3, r3
 800936e:	3b01      	subs	r3, #1
 8009370:	b29a      	uxth	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800937a:	b29b      	uxth	r3, r3
 800937c:	2b00      	cmp	r3, #0
 800937e:	d005      	beq.n	800938c <I2C_Slave_STOPF+0x1cc>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009384:	f043 0204 	orr.w	r2, r3, #4
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	641a      	str	r2, [r3, #64]	; 0x40
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009390:	2b00      	cmp	r3, #0
 8009392:	d003      	beq.n	800939c <I2C_Slave_STOPF+0x1dc>
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f843 	bl	8009420 <I2C_ITError>
 800939a:	e039      	b.n	8009410 <I2C_Slave_STOPF+0x250>
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	2b2a      	cmp	r3, #42	; 0x2a
 80093a0:	d109      	bne.n	80093b6 <I2C_Slave_STOPF+0x1f6>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	631a      	str	r2, [r3, #48]	; 0x30
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2228      	movs	r2, #40	; 0x28
 80093ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff f826 	bl	8008402 <HAL_I2C_SlaveRxCpltCallback>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b28      	cmp	r3, #40	; 0x28
 80093c0:	d111      	bne.n	80093e6 <I2C_Slave_STOPF+0x226>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a15      	ldr	r2, [pc, #84]	; (800941c <I2C_Slave_STOPF+0x25c>)
 80093c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	631a      	str	r2, [r3, #48]	; 0x30
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7ff f827 	bl	8008432 <HAL_I2C_ListenCpltCallback>
 80093e4:	e014      	b.n	8009410 <I2C_Slave_STOPF+0x250>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ea:	2b22      	cmp	r3, #34	; 0x22
 80093ec:	d002      	beq.n	80093f4 <I2C_Slave_STOPF+0x234>
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	2b22      	cmp	r3, #34	; 0x22
 80093f2:	d10d      	bne.n	8009410 <I2C_Slave_STOPF+0x250>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	631a      	str	r2, [r3, #48]	; 0x30
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2220      	movs	r2, #32
 80093fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7fe fff9 	bl	8008402 <HAL_I2C_SlaveRxCpltCallback>
 8009410:	bf00      	nop
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	08009925 	.word	0x08009925
 800941c:	ffff0000 	.word	0xffff0000

08009420 <I2C_ITError>:
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800942e:	73fb      	strb	r3, [r7, #15]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009436:	73bb      	strb	r3, [r7, #14]
 8009438:	7bbb      	ldrb	r3, [r7, #14]
 800943a:	2b10      	cmp	r3, #16
 800943c:	d002      	beq.n	8009444 <I2C_ITError+0x24>
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	2b40      	cmp	r3, #64	; 0x40
 8009442:	d10a      	bne.n	800945a <I2C_ITError+0x3a>
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	2b22      	cmp	r3, #34	; 0x22
 8009448:	d107      	bne.n	800945a <I2C_ITError+0x3a>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009458:	601a      	str	r2, [r3, #0]
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009460:	2b28      	cmp	r3, #40	; 0x28
 8009462:	d107      	bne.n	8009474 <I2C_ITError+0x54>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	631a      	str	r2, [r3, #48]	; 0x30
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2228      	movs	r2, #40	; 0x28
 800946e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009472:	e015      	b.n	80094a0 <I2C_ITError+0x80>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800947e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009482:	d00a      	beq.n	800949a <I2C_ITError+0x7a>
 8009484:	7bfb      	ldrb	r3, [r7, #15]
 8009486:	2b60      	cmp	r3, #96	; 0x60
 8009488:	d007      	beq.n	800949a <I2C_ITError+0x7a>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2220      	movs	r2, #32
 800948e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	631a      	str	r2, [r3, #48]	; 0x30
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094ae:	d162      	bne.n	8009576 <I2C_ITError+0x156>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094be:	605a      	str	r2, [r3, #4]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d020      	beq.n	8009510 <I2C_ITError+0xf0>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d2:	4a6a      	ldr	r2, [pc, #424]	; (800967c <I2C_ITError+0x25c>)
 80094d4:	651a      	str	r2, [r3, #80]	; 0x50
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fd ff99 	bl	8007412 <HAL_DMA_Abort_IT>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f000 8089 	beq.w	80095fa <I2C_ITError+0x1da>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f022 0201 	bic.w	r2, r2, #1
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2220      	movs	r2, #32
 80094fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800950a:	4610      	mov	r0, r2
 800950c:	4798      	blx	r3
 800950e:	e074      	b.n	80095fa <I2C_ITError+0x1da>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009514:	4a59      	ldr	r2, [pc, #356]	; (800967c <I2C_ITError+0x25c>)
 8009516:	651a      	str	r2, [r3, #80]	; 0x50
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951c:	4618      	mov	r0, r3
 800951e:	f7fd ff78 	bl	8007412 <HAL_DMA_Abort_IT>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d068      	beq.n	80095fa <I2C_ITError+0x1da>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009532:	2b40      	cmp	r3, #64	; 0x40
 8009534:	d10b      	bne.n	800954e <I2C_ITError+0x12e>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	691a      	ldr	r2, [r3, #16]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	b2d2      	uxtb	r2, r2
 8009542:	701a      	strb	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009548:	1c5a      	adds	r2, r3, #1
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	625a      	str	r2, [r3, #36]	; 0x24
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 0201 	bic.w	r2, r2, #1
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2220      	movs	r2, #32
 8009562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009570:	4610      	mov	r0, r2
 8009572:	4798      	blx	r3
 8009574:	e041      	b.n	80095fa <I2C_ITError+0x1da>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b60      	cmp	r3, #96	; 0x60
 8009580:	d125      	bne.n	80095ce <I2C_ITError+0x1ae>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2220      	movs	r2, #32
 8009586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	641a      	str	r2, [r3, #64]	; 0x40
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959a:	2b40      	cmp	r3, #64	; 0x40
 800959c:	d10b      	bne.n	80095b6 <I2C_ITError+0x196>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	691a      	ldr	r2, [r3, #16]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	b2d2      	uxtb	r2, r2
 80095aa:	701a      	strb	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b0:	1c5a      	adds	r2, r3, #1
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	625a      	str	r2, [r3, #36]	; 0x24
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f022 0201 	bic.w	r2, r2, #1
 80095c4:	601a      	str	r2, [r3, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7fe ff5b 	bl	8008482 <HAL_I2C_AbortCpltCallback>
 80095cc:	e015      	b.n	80095fa <I2C_ITError+0x1da>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	695b      	ldr	r3, [r3, #20]
 80095d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d8:	2b40      	cmp	r3, #64	; 0x40
 80095da:	d10b      	bne.n	80095f4 <I2C_ITError+0x1d4>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	691a      	ldr	r2, [r3, #16]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	b2d2      	uxtb	r2, r2
 80095e8:	701a      	strb	r2, [r3, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	625a      	str	r2, [r3, #36]	; 0x24
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7fe ff3a 	bl	800846e <HAL_I2C_ErrorCallback>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fe:	60bb      	str	r3, [r7, #8]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10e      	bne.n	8009628 <I2C_ITError+0x208>
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d109      	bne.n	8009628 <I2C_ITError+0x208>
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f003 0304 	and.w	r3, r3, #4
 800961a:	2b00      	cmp	r3, #0
 800961c:	d104      	bne.n	8009628 <I2C_ITError+0x208>
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	f003 0308 	and.w	r3, r3, #8
 8009624:	2b00      	cmp	r3, #0
 8009626:	d007      	beq.n	8009638 <I2C_ITError+0x218>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009636:	605a      	str	r2, [r3, #4]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800963e:	73fb      	strb	r3, [r7, #15]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009644:	f003 0304 	and.w	r3, r3, #4
 8009648:	2b04      	cmp	r3, #4
 800964a:	d113      	bne.n	8009674 <I2C_ITError+0x254>
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	2b28      	cmp	r3, #40	; 0x28
 8009650:	d110      	bne.n	8009674 <I2C_ITError+0x254>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a0a      	ldr	r2, [pc, #40]	; (8009680 <I2C_ITError+0x260>)
 8009656:	62da      	str	r2, [r3, #44]	; 0x2c
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	631a      	str	r2, [r3, #48]	; 0x30
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2220      	movs	r2, #32
 8009662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7fe fedf 	bl	8008432 <HAL_I2C_ListenCpltCallback>
 8009674:	bf00      	nop
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	08009925 	.word	0x08009925
 8009680:	ffff0000 	.word	0xffff0000

08009684 <I2C_MasterRequestWrite>:
 8009684:	b580      	push	{r7, lr}
 8009686:	b088      	sub	sp, #32
 8009688:	af02      	add	r7, sp, #8
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	607a      	str	r2, [r7, #4]
 800968e:	603b      	str	r3, [r7, #0]
 8009690:	460b      	mov	r3, r1
 8009692:	817b      	strh	r3, [r7, #10]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	617b      	str	r3, [r7, #20]
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b08      	cmp	r3, #8
 800969e:	d006      	beq.n	80096ae <I2C_MasterRequestWrite+0x2a>
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d003      	beq.n	80096ae <I2C_MasterRequestWrite+0x2a>
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80096ac:	d108      	bne.n	80096c0 <I2C_MasterRequestWrite+0x3c>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	e00b      	b.n	80096d8 <I2C_MasterRequestWrite+0x54>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c4:	2b12      	cmp	r3, #18
 80096c6:	d107      	bne.n	80096d8 <I2C_MasterRequestWrite+0x54>
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096d6:	601a      	str	r2, [r3, #0]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f000 f9c5 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00d      	beq.n	800970c <I2C_MasterRequestWrite+0x88>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096fe:	d103      	bne.n	8009708 <I2C_MasterRequestWrite+0x84>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009706:	641a      	str	r2, [r3, #64]	; 0x40
 8009708:	2303      	movs	r3, #3
 800970a:	e035      	b.n	8009778 <I2C_MasterRequestWrite+0xf4>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009714:	d108      	bne.n	8009728 <I2C_MasterRequestWrite+0xa4>
 8009716:	897b      	ldrh	r3, [r7, #10]
 8009718:	b2db      	uxtb	r3, r3
 800971a:	461a      	mov	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009724:	611a      	str	r2, [r3, #16]
 8009726:	e01b      	b.n	8009760 <I2C_MasterRequestWrite+0xdc>
 8009728:	897b      	ldrh	r3, [r7, #10]
 800972a:	11db      	asrs	r3, r3, #7
 800972c:	b2db      	uxtb	r3, r3
 800972e:	f003 0306 	and.w	r3, r3, #6
 8009732:	b2db      	uxtb	r3, r3
 8009734:	f063 030f 	orn	r3, r3, #15
 8009738:	b2da      	uxtb	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	611a      	str	r2, [r3, #16]
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	490e      	ldr	r1, [pc, #56]	; (8009780 <I2C_MasterRequestWrite+0xfc>)
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f000 f9eb 	bl	8009b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d001      	beq.n	8009756 <I2C_MasterRequestWrite+0xd2>
 8009752:	2301      	movs	r3, #1
 8009754:	e010      	b.n	8009778 <I2C_MasterRequestWrite+0xf4>
 8009756:	897b      	ldrh	r3, [r7, #10]
 8009758:	b2da      	uxtb	r2, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	611a      	str	r2, [r3, #16]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	4907      	ldr	r1, [pc, #28]	; (8009784 <I2C_MasterRequestWrite+0x100>)
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f000 f9db 	bl	8009b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <I2C_MasterRequestWrite+0xf2>
 8009772:	2301      	movs	r3, #1
 8009774:	e000      	b.n	8009778 <I2C_MasterRequestWrite+0xf4>
 8009776:	2300      	movs	r3, #0
 8009778:	4618      	mov	r0, r3
 800977a:	3718      	adds	r7, #24
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	00010008 	.word	0x00010008
 8009784:	00010002 	.word	0x00010002

08009788 <I2C_MasterRequestRead>:
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af02      	add	r7, sp, #8
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	607a      	str	r2, [r7, #4]
 8009792:	603b      	str	r3, [r7, #0]
 8009794:	460b      	mov	r3, r1
 8009796:	817b      	strh	r3, [r7, #10]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	2b08      	cmp	r3, #8
 80097b2:	d006      	beq.n	80097c2 <I2C_MasterRequestRead+0x3a>
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d003      	beq.n	80097c2 <I2C_MasterRequestRead+0x3a>
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80097c0:	d108      	bne.n	80097d4 <I2C_MasterRequestRead+0x4c>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097d0:	601a      	str	r2, [r3, #0]
 80097d2:	e00b      	b.n	80097ec <I2C_MasterRequestRead+0x64>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d8:	2b11      	cmp	r3, #17
 80097da:	d107      	bne.n	80097ec <I2C_MasterRequestRead+0x64>
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097ea:	601a      	str	r2, [r3, #0]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f000 f93b 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00d      	beq.n	8009820 <I2C_MasterRequestRead+0x98>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800980e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009812:	d103      	bne.n	800981c <I2C_MasterRequestRead+0x94>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800981a:	641a      	str	r2, [r3, #64]	; 0x40
 800981c:	2303      	movs	r3, #3
 800981e:	e079      	b.n	8009914 <I2C_MasterRequestRead+0x18c>
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009828:	d108      	bne.n	800983c <I2C_MasterRequestRead+0xb4>
 800982a:	897b      	ldrh	r3, [r7, #10]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	f043 0301 	orr.w	r3, r3, #1
 8009832:	b2da      	uxtb	r2, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	611a      	str	r2, [r3, #16]
 800983a:	e05f      	b.n	80098fc <I2C_MasterRequestRead+0x174>
 800983c:	897b      	ldrh	r3, [r7, #10]
 800983e:	11db      	asrs	r3, r3, #7
 8009840:	b2db      	uxtb	r3, r3
 8009842:	f003 0306 	and.w	r3, r3, #6
 8009846:	b2db      	uxtb	r3, r3
 8009848:	f063 030f 	orn	r3, r3, #15
 800984c:	b2da      	uxtb	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	611a      	str	r2, [r3, #16]
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	4930      	ldr	r1, [pc, #192]	; (800991c <I2C_MasterRequestRead+0x194>)
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f000 f961 	bl	8009b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <I2C_MasterRequestRead+0xe2>
 8009866:	2301      	movs	r3, #1
 8009868:	e054      	b.n	8009914 <I2C_MasterRequestRead+0x18c>
 800986a:	897b      	ldrh	r3, [r7, #10]
 800986c:	b2da      	uxtb	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	611a      	str	r2, [r3, #16]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	4929      	ldr	r1, [pc, #164]	; (8009920 <I2C_MasterRequestRead+0x198>)
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f000 f951 	bl	8009b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <I2C_MasterRequestRead+0x102>
 8009886:	2301      	movs	r3, #1
 8009888:	e044      	b.n	8009914 <I2C_MasterRequestRead+0x18c>
 800988a:	2300      	movs	r3, #0
 800988c:	613b      	str	r3, [r7, #16]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	613b      	str	r3, [r7, #16]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	613b      	str	r3, [r7, #16]
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098ae:	601a      	str	r2, [r3, #0]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f000 f8d9 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00d      	beq.n	80098e4 <I2C_MasterRequestRead+0x15c>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098d6:	d103      	bne.n	80098e0 <I2C_MasterRequestRead+0x158>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098de:	641a      	str	r2, [r3, #64]	; 0x40
 80098e0:	2303      	movs	r3, #3
 80098e2:	e017      	b.n	8009914 <I2C_MasterRequestRead+0x18c>
 80098e4:	897b      	ldrh	r3, [r7, #10]
 80098e6:	11db      	asrs	r3, r3, #7
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	f003 0306 	and.w	r3, r3, #6
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	f063 030e 	orn	r3, r3, #14
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	611a      	str	r2, [r3, #16]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	4907      	ldr	r1, [pc, #28]	; (8009920 <I2C_MasterRequestRead+0x198>)
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 f90d 	bl	8009b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <I2C_MasterRequestRead+0x18a>
 800990e:	2301      	movs	r3, #1
 8009910:	e000      	b.n	8009914 <I2C_MasterRequestRead+0x18c>
 8009912:	2300      	movs	r3, #0
 8009914:	4618      	mov	r0, r3
 8009916:	3718      	adds	r7, #24
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	00010008 	.word	0x00010008
 8009920:	00010002 	.word	0x00010002

08009924 <I2C_DMAAbort>:
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	2300      	movs	r3, #0
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009934:	617b      	str	r3, [r7, #20]
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800993c:	74fb      	strb	r3, [r7, #19]
 800993e:	4b4b      	ldr	r3, [pc, #300]	; (8009a6c <I2C_DMAAbort+0x148>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	08db      	lsrs	r3, r3, #3
 8009944:	4a4a      	ldr	r2, [pc, #296]	; (8009a70 <I2C_DMAAbort+0x14c>)
 8009946:	fba2 2303 	umull	r2, r3, r2, r3
 800994a:	0a1a      	lsrs	r2, r3, #8
 800994c:	4613      	mov	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	00da      	lsls	r2, r3, #3
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	60fb      	str	r3, [r7, #12]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d106      	bne.n	800996c <I2C_DMAAbort+0x48>
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009962:	f043 0220 	orr.w	r2, r3, #32
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	641a      	str	r2, [r3, #64]	; 0x40
 800996a:	e00a      	b.n	8009982 <I2C_DMAAbort+0x5e>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	3b01      	subs	r3, #1
 8009970:	60fb      	str	r3, [r7, #12]
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800997c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009980:	d0ea      	beq.n	8009958 <I2C_DMAAbort+0x34>
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009986:	2b00      	cmp	r3, #0
 8009988:	d003      	beq.n	8009992 <I2C_DMAAbort+0x6e>
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998e:	2200      	movs	r2, #0
 8009990:	63da      	str	r2, [r3, #60]	; 0x3c
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009996:	2b00      	cmp	r3, #0
 8009998:	d003      	beq.n	80099a2 <I2C_DMAAbort+0x7e>
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999e:	2200      	movs	r2, #0
 80099a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099b0:	601a      	str	r2, [r3, #0]
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2200      	movs	r2, #0
 80099b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d003      	beq.n	80099c8 <I2C_DMAAbort+0xa4>
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c4:	2200      	movs	r2, #0
 80099c6:	651a      	str	r2, [r3, #80]	; 0x50
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d003      	beq.n	80099d8 <I2C_DMAAbort+0xb4>
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d4:	2200      	movs	r2, #0
 80099d6:	651a      	str	r2, [r3, #80]	; 0x50
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f022 0201 	bic.w	r2, r2, #1
 80099e6:	601a      	str	r2, [r3, #0]
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b60      	cmp	r3, #96	; 0x60
 80099f2:	d10e      	bne.n	8009a12 <I2C_DMAAbort+0xee>
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2220      	movs	r2, #32
 80099f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2200      	movs	r2, #0
 8009a08:	641a      	str	r2, [r3, #64]	; 0x40
 8009a0a:	6978      	ldr	r0, [r7, #20]
 8009a0c:	f7fe fd39 	bl	8008482 <HAL_I2C_AbortCpltCallback>
 8009a10:	e027      	b.n	8009a62 <I2C_DMAAbort+0x13e>
 8009a12:	7cfb      	ldrb	r3, [r7, #19]
 8009a14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a18:	2b28      	cmp	r3, #40	; 0x28
 8009a1a:	d117      	bne.n	8009a4c <I2C_DMAAbort+0x128>
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f042 0201 	orr.w	r2, r2, #1
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	631a      	str	r2, [r3, #48]	; 0x30
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	2228      	movs	r2, #40	; 0x28
 8009a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009a4a:	e007      	b.n	8009a5c <I2C_DMAAbort+0x138>
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a5c:	6978      	ldr	r0, [r7, #20]
 8009a5e:	f7fe fd06 	bl	800846e <HAL_I2C_ErrorCallback>
 8009a62:	bf00      	nop
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	20000004 	.word	0x20000004
 8009a70:	14f8b589 	.word	0x14f8b589

08009a74 <I2C_WaitOnFlagUntilTimeout>:
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	603b      	str	r3, [r7, #0]
 8009a80:	4613      	mov	r3, r2
 8009a82:	71fb      	strb	r3, [r7, #7]
 8009a84:	e025      	b.n	8009ad2 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a8c:	d021      	beq.n	8009ad2 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8009a8e:	f7fd fb0f 	bl	80070b0 <HAL_GetTick>
 8009a92:	4602      	mov	r2, r0
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d302      	bcc.n	8009aa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d116      	bne.n	8009ad2 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	631a      	str	r2, [r3, #48]	; 0x30
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2220      	movs	r2, #32
 8009aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abe:	f043 0220 	orr.w	r2, r3, #32
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	641a      	str	r2, [r3, #64]	; 0x40
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e023      	b.n	8009b1a <I2C_WaitOnFlagUntilTimeout+0xa6>
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	0c1b      	lsrs	r3, r3, #16
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d10d      	bne.n	8009af8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	695b      	ldr	r3, [r3, #20]
 8009ae2:	43da      	mvns	r2, r3
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	bf0c      	ite	eq
 8009aee:	2301      	moveq	r3, #1
 8009af0:	2300      	movne	r3, #0
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	461a      	mov	r2, r3
 8009af6:	e00c      	b.n	8009b12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	43da      	mvns	r2, r3
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	4013      	ands	r3, r2
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	bf0c      	ite	eq
 8009b0a:	2301      	moveq	r3, #1
 8009b0c:	2300      	movne	r3, #0
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	461a      	mov	r2, r3
 8009b12:	79fb      	ldrb	r3, [r7, #7]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d0b6      	beq.n	8009a86 <I2C_WaitOnFlagUntilTimeout+0x12>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b084      	sub	sp, #16
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	60f8      	str	r0, [r7, #12]
 8009b2a:	60b9      	str	r1, [r7, #8]
 8009b2c:	607a      	str	r2, [r7, #4]
 8009b2e:	603b      	str	r3, [r7, #0]
 8009b30:	e051      	b.n	8009bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	695b      	ldr	r3, [r3, #20]
 8009b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b40:	d123      	bne.n	8009b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b50:	601a      	str	r2, [r3, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009b5a:	615a      	str	r2, [r3, #20]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	631a      	str	r2, [r3, #48]	; 0x30
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2220      	movs	r2, #32
 8009b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	f043 0204 	orr.w	r2, r3, #4
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	641a      	str	r2, [r3, #64]	; 0x40
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2200      	movs	r2, #0
 8009b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009b86:	2301      	movs	r3, #1
 8009b88:	e046      	b.n	8009c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b90:	d021      	beq.n	8009bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8009b92:	f7fd fa8d 	bl	80070b0 <HAL_GetTick>
 8009b96:	4602      	mov	r2, r0
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d302      	bcc.n	8009ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d116      	bne.n	8009bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	631a      	str	r2, [r3, #48]	; 0x30
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2220      	movs	r2, #32
 8009bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc2:	f043 0220 	orr.w	r2, r3, #32
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	641a      	str	r2, [r3, #64]	; 0x40
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e020      	b.n	8009c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	0c1b      	lsrs	r3, r3, #16
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d10c      	bne.n	8009bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	695b      	ldr	r3, [r3, #20]
 8009be6:	43da      	mvns	r2, r3
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	4013      	ands	r3, r2
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	bf14      	ite	ne
 8009bf2:	2301      	movne	r3, #1
 8009bf4:	2300      	moveq	r3, #0
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	e00b      	b.n	8009c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	43da      	mvns	r2, r3
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	4013      	ands	r3, r2
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	bf14      	ite	ne
 8009c0c:	2301      	movne	r3, #1
 8009c0e:	2300      	moveq	r3, #0
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d18d      	bne.n	8009b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8009c16:	2300      	movs	r3, #0
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <I2C_WaitOnTXEFlagUntilTimeout>:
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
 8009c2c:	e02d      	b.n	8009c8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f000 f900 	bl	8009e34 <I2C_IsAcknowledgeFailed>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e02d      	b.n	8009c9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c44:	d021      	beq.n	8009c8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8009c46:	f7fd fa33 	bl	80070b0 <HAL_GetTick>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d302      	bcc.n	8009c5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d116      	bne.n	8009c8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	631a      	str	r2, [r3, #48]	; 0x30
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2220      	movs	r2, #32
 8009c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c76:	f043 0220 	orr.w	r2, r3, #32
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	641a      	str	r2, [r3, #64]	; 0x40
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009c86:	2301      	movs	r3, #1
 8009c88:	e007      	b.n	8009c9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	695b      	ldr	r3, [r3, #20]
 8009c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c94:	2b80      	cmp	r3, #128	; 0x80
 8009c96:	d1ca      	bne.n	8009c2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <I2C_WaitOnBTFFlagUntilTimeout>:
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b084      	sub	sp, #16
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	60f8      	str	r0, [r7, #12]
 8009caa:	60b9      	str	r1, [r7, #8]
 8009cac:	607a      	str	r2, [r7, #4]
 8009cae:	e02d      	b.n	8009d0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f000 f8bf 	bl	8009e34 <I2C_IsAcknowledgeFailed>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e02d      	b.n	8009d1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cc6:	d021      	beq.n	8009d0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8009cc8:	f7fd f9f2 	bl	80070b0 <HAL_GetTick>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d302      	bcc.n	8009cde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d116      	bne.n	8009d0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2220      	movs	r2, #32
 8009ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf8:	f043 0220 	orr.w	r2, r3, #32
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	641a      	str	r2, [r3, #64]	; 0x40
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e007      	b.n	8009d1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	f003 0304 	and.w	r3, r3, #4
 8009d16:	2b04      	cmp	r3, #4
 8009d18:	d1ca      	bne.n	8009cb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <I2C_WaitOnSTOPRequestThroughIT>:
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	60fb      	str	r3, [r7, #12]
 8009d30:	4b13      	ldr	r3, [pc, #76]	; (8009d80 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	08db      	lsrs	r3, r3, #3
 8009d36:	4a13      	ldr	r2, [pc, #76]	; (8009d84 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009d38:	fba2 2303 	umull	r2, r3, r2, r3
 8009d3c:	0a1a      	lsrs	r2, r3, #8
 8009d3e:	4613      	mov	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	60fb      	str	r3, [r7, #12]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	60fb      	str	r3, [r7, #12]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d107      	bne.n	8009d62 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d56:	f043 0220 	orr.w	r2, r3, #32
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	641a      	str	r2, [r3, #64]	; 0x40
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e008      	b.n	8009d74 <I2C_WaitOnSTOPRequestThroughIT+0x50>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d70:	d0e9      	beq.n	8009d46 <I2C_WaitOnSTOPRequestThroughIT+0x22>
 8009d72:	2300      	movs	r3, #0
 8009d74:	4618      	mov	r0, r3
 8009d76:	3714      	adds	r7, #20
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	20000004 	.word	0x20000004
 8009d84:	14f8b589 	.word	0x14f8b589

08009d88 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
 8009d94:	e042      	b.n	8009e1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	695b      	ldr	r3, [r3, #20]
 8009d9c:	f003 0310 	and.w	r3, r3, #16
 8009da0:	2b10      	cmp	r3, #16
 8009da2:	d119      	bne.n	8009dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f06f 0210 	mvn.w	r2, #16
 8009dac:	615a      	str	r2, [r3, #20]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2200      	movs	r2, #0
 8009db2:	631a      	str	r2, [r3, #48]	; 0x30
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2220      	movs	r2, #32
 8009db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	641a      	str	r2, [r3, #64]	; 0x40
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e029      	b.n	8009e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8009dd8:	f7fd f96a 	bl	80070b0 <HAL_GetTick>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d302      	bcc.n	8009dee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d116      	bne.n	8009e1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	631a      	str	r2, [r3, #48]	; 0x30
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2220      	movs	r2, #32
 8009df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e08:	f043 0220 	orr.w	r2, r3, #32
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	641a      	str	r2, [r3, #64]	; 0x40
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e007      	b.n	8009e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	695b      	ldr	r3, [r3, #20]
 8009e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e26:	2b40      	cmp	r3, #64	; 0x40
 8009e28:	d1b5      	bne.n	8009d96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <I2C_IsAcknowledgeFailed>:
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e4a:	d11b      	bne.n	8009e84 <I2C_IsAcknowledgeFailed+0x50>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e54:	615a      	str	r2, [r3, #20]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2220      	movs	r2, #32
 8009e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e70:	f043 0204 	orr.w	r2, r3, #4
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	641a      	str	r2, [r3, #64]	; 0x40
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009e80:	2301      	movs	r3, #1
 8009e82:	e000      	b.n	8009e86 <I2C_IsAcknowledgeFailed+0x52>
 8009e84:	2300      	movs	r3, #0
 8009e86:	4618      	mov	r0, r3
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <I2C_ConvertOtherXferOptions>:
 8009e92:	b480      	push	{r7}
 8009e94:	b083      	sub	sp, #12
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009ea2:	d103      	bne.n	8009eac <I2C_ConvertOtherXferOptions+0x1a>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	62da      	str	r2, [r3, #44]	; 0x2c
 8009eaa:	e007      	b.n	8009ebc <I2C_ConvertOtherXferOptions+0x2a>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009eb4:	d102      	bne.n	8009ebc <I2C_ConvertOtherXferOptions+0x2a>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2208      	movs	r2, #8
 8009eba:	62da      	str	r2, [r3, #44]	; 0x2c
 8009ebc:	bf00      	nop
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <HAL_PWR_EnableBkUpAccess>:
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	4b06      	ldr	r3, [pc, #24]	; (8009ee8 <HAL_PWR_EnableBkUpAccess+0x20>)
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	4b05      	ldr	r3, [pc, #20]	; (8009eec <HAL_PWR_EnableBkUpAccess+0x24>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	607b      	str	r3, [r7, #4]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr
 8009ee8:	420e0020 	.word	0x420e0020
 8009eec:	40007000 	.word	0x40007000

08009ef0 <HAL_PWR_DisableBkUpAccess>:
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4b06      	ldr	r3, [pc, #24]	; (8009f10 <HAL_PWR_DisableBkUpAccess+0x20>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	4b05      	ldr	r3, [pc, #20]	; (8009f14 <HAL_PWR_DisableBkUpAccess+0x24>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	607b      	str	r3, [r7, #4]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	420e0020 	.word	0x420e0020
 8009f14:	40007000 	.word	0x40007000

08009f18 <HAL_RCC_OscConfig>:
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d101      	bne.n	8009f2a <HAL_RCC_OscConfig+0x12>
 8009f26:	2301      	movs	r3, #1
 8009f28:	e267      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d075      	beq.n	800a022 <HAL_RCC_OscConfig+0x10a>
 8009f36:	4b88      	ldr	r3, [pc, #544]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f003 030c 	and.w	r3, r3, #12
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d00c      	beq.n	8009f5c <HAL_RCC_OscConfig+0x44>
 8009f42:	4b85      	ldr	r3, [pc, #532]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	f003 030c 	and.w	r3, r3, #12
 8009f4a:	2b08      	cmp	r3, #8
 8009f4c:	d112      	bne.n	8009f74 <HAL_RCC_OscConfig+0x5c>
 8009f4e:	4b82      	ldr	r3, [pc, #520]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f5a:	d10b      	bne.n	8009f74 <HAL_RCC_OscConfig+0x5c>
 8009f5c:	4b7e      	ldr	r3, [pc, #504]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d05b      	beq.n	800a020 <HAL_RCC_OscConfig+0x108>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d157      	bne.n	800a020 <HAL_RCC_OscConfig+0x108>
 8009f70:	2301      	movs	r3, #1
 8009f72:	e242      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f7c:	d106      	bne.n	8009f8c <HAL_RCC_OscConfig+0x74>
 8009f7e:	4b76      	ldr	r3, [pc, #472]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a75      	ldr	r2, [pc, #468]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 8009f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f88:	6013      	str	r3, [r2, #0]
 8009f8a:	e01d      	b.n	8009fc8 <HAL_RCC_OscConfig+0xb0>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f94:	d10c      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x98>
 8009f96:	4b70      	ldr	r3, [pc, #448]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a6f      	ldr	r2, [pc, #444]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 8009f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	4b6d      	ldr	r3, [pc, #436]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a6c      	ldr	r2, [pc, #432]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 8009fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	e00b      	b.n	8009fc8 <HAL_RCC_OscConfig+0xb0>
 8009fb0:	4b69      	ldr	r3, [pc, #420]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a68      	ldr	r2, [pc, #416]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 8009fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fba:	6013      	str	r3, [r2, #0]
 8009fbc:	4b66      	ldr	r3, [pc, #408]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a65      	ldr	r2, [pc, #404]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 8009fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fc6:	6013      	str	r3, [r2, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d013      	beq.n	8009ff8 <HAL_RCC_OscConfig+0xe0>
 8009fd0:	f7fd f86e 	bl	80070b0 <HAL_GetTick>
 8009fd4:	6138      	str	r0, [r7, #16]
 8009fd6:	e008      	b.n	8009fea <HAL_RCC_OscConfig+0xd2>
 8009fd8:	f7fd f86a 	bl	80070b0 <HAL_GetTick>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	2b64      	cmp	r3, #100	; 0x64
 8009fe4:	d901      	bls.n	8009fea <HAL_RCC_OscConfig+0xd2>
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e207      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 8009fea:	4b5b      	ldr	r3, [pc, #364]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0f0      	beq.n	8009fd8 <HAL_RCC_OscConfig+0xc0>
 8009ff6:	e014      	b.n	800a022 <HAL_RCC_OscConfig+0x10a>
 8009ff8:	f7fd f85a 	bl	80070b0 <HAL_GetTick>
 8009ffc:	6138      	str	r0, [r7, #16]
 8009ffe:	e008      	b.n	800a012 <HAL_RCC_OscConfig+0xfa>
 800a000:	f7fd f856 	bl	80070b0 <HAL_GetTick>
 800a004:	4602      	mov	r2, r0
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	2b64      	cmp	r3, #100	; 0x64
 800a00c:	d901      	bls.n	800a012 <HAL_RCC_OscConfig+0xfa>
 800a00e:	2303      	movs	r3, #3
 800a010:	e1f3      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 800a012:	4b51      	ldr	r3, [pc, #324]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1f0      	bne.n	800a000 <HAL_RCC_OscConfig+0xe8>
 800a01e:	e000      	b.n	800a022 <HAL_RCC_OscConfig+0x10a>
 800a020:	bf00      	nop
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f003 0302 	and.w	r3, r3, #2
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d063      	beq.n	800a0f6 <HAL_RCC_OscConfig+0x1de>
 800a02e:	4b4a      	ldr	r3, [pc, #296]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	f003 030c 	and.w	r3, r3, #12
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00b      	beq.n	800a052 <HAL_RCC_OscConfig+0x13a>
 800a03a:	4b47      	ldr	r3, [pc, #284]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	f003 030c 	and.w	r3, r3, #12
 800a042:	2b08      	cmp	r3, #8
 800a044:	d11c      	bne.n	800a080 <HAL_RCC_OscConfig+0x168>
 800a046:	4b44      	ldr	r3, [pc, #272]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d116      	bne.n	800a080 <HAL_RCC_OscConfig+0x168>
 800a052:	4b41      	ldr	r3, [pc, #260]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f003 0302 	and.w	r3, r3, #2
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d005      	beq.n	800a06a <HAL_RCC_OscConfig+0x152>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d001      	beq.n	800a06a <HAL_RCC_OscConfig+0x152>
 800a066:	2301      	movs	r3, #1
 800a068:	e1c7      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 800a06a:	4b3b      	ldr	r3, [pc, #236]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	4937      	ldr	r1, [pc, #220]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	600b      	str	r3, [r1, #0]
 800a07e:	e03a      	b.n	800a0f6 <HAL_RCC_OscConfig+0x1de>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d020      	beq.n	800a0ca <HAL_RCC_OscConfig+0x1b2>
 800a088:	4b34      	ldr	r3, [pc, #208]	; (800a15c <HAL_RCC_OscConfig+0x244>)
 800a08a:	2201      	movs	r2, #1
 800a08c:	601a      	str	r2, [r3, #0]
 800a08e:	f7fd f80f 	bl	80070b0 <HAL_GetTick>
 800a092:	6138      	str	r0, [r7, #16]
 800a094:	e008      	b.n	800a0a8 <HAL_RCC_OscConfig+0x190>
 800a096:	f7fd f80b 	bl	80070b0 <HAL_GetTick>
 800a09a:	4602      	mov	r2, r0
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d901      	bls.n	800a0a8 <HAL_RCC_OscConfig+0x190>
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e1a8      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 800a0a8:	4b2b      	ldr	r3, [pc, #172]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 0302 	and.w	r3, r3, #2
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d0f0      	beq.n	800a096 <HAL_RCC_OscConfig+0x17e>
 800a0b4:	4b28      	ldr	r3, [pc, #160]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	00db      	lsls	r3, r3, #3
 800a0c2:	4925      	ldr	r1, [pc, #148]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	600b      	str	r3, [r1, #0]
 800a0c8:	e015      	b.n	800a0f6 <HAL_RCC_OscConfig+0x1de>
 800a0ca:	4b24      	ldr	r3, [pc, #144]	; (800a15c <HAL_RCC_OscConfig+0x244>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	601a      	str	r2, [r3, #0]
 800a0d0:	f7fc ffee 	bl	80070b0 <HAL_GetTick>
 800a0d4:	6138      	str	r0, [r7, #16]
 800a0d6:	e008      	b.n	800a0ea <HAL_RCC_OscConfig+0x1d2>
 800a0d8:	f7fc ffea 	bl	80070b0 <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d901      	bls.n	800a0ea <HAL_RCC_OscConfig+0x1d2>
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e187      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 800a0ea:	4b1b      	ldr	r3, [pc, #108]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1f0      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x1c0>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0308 	and.w	r3, r3, #8
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d036      	beq.n	800a170 <HAL_RCC_OscConfig+0x258>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d016      	beq.n	800a138 <HAL_RCC_OscConfig+0x220>
 800a10a:	4b15      	ldr	r3, [pc, #84]	; (800a160 <HAL_RCC_OscConfig+0x248>)
 800a10c:	2201      	movs	r2, #1
 800a10e:	601a      	str	r2, [r3, #0]
 800a110:	f7fc ffce 	bl	80070b0 <HAL_GetTick>
 800a114:	6138      	str	r0, [r7, #16]
 800a116:	e008      	b.n	800a12a <HAL_RCC_OscConfig+0x212>
 800a118:	f7fc ffca 	bl	80070b0 <HAL_GetTick>
 800a11c:	4602      	mov	r2, r0
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	1ad3      	subs	r3, r2, r3
 800a122:	2b02      	cmp	r3, #2
 800a124:	d901      	bls.n	800a12a <HAL_RCC_OscConfig+0x212>
 800a126:	2303      	movs	r3, #3
 800a128:	e167      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 800a12a:	4b0b      	ldr	r3, [pc, #44]	; (800a158 <HAL_RCC_OscConfig+0x240>)
 800a12c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a12e:	f003 0302 	and.w	r3, r3, #2
 800a132:	2b00      	cmp	r3, #0
 800a134:	d0f0      	beq.n	800a118 <HAL_RCC_OscConfig+0x200>
 800a136:	e01b      	b.n	800a170 <HAL_RCC_OscConfig+0x258>
 800a138:	4b09      	ldr	r3, [pc, #36]	; (800a160 <HAL_RCC_OscConfig+0x248>)
 800a13a:	2200      	movs	r2, #0
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	f7fc ffb7 	bl	80070b0 <HAL_GetTick>
 800a142:	6138      	str	r0, [r7, #16]
 800a144:	e00e      	b.n	800a164 <HAL_RCC_OscConfig+0x24c>
 800a146:	f7fc ffb3 	bl	80070b0 <HAL_GetTick>
 800a14a:	4602      	mov	r2, r0
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	2b02      	cmp	r3, #2
 800a152:	d907      	bls.n	800a164 <HAL_RCC_OscConfig+0x24c>
 800a154:	2303      	movs	r3, #3
 800a156:	e150      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 800a158:	40023800 	.word	0x40023800
 800a15c:	42470000 	.word	0x42470000
 800a160:	42470e80 	.word	0x42470e80
 800a164:	4b88      	ldr	r3, [pc, #544]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a168:	f003 0302 	and.w	r3, r3, #2
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1ea      	bne.n	800a146 <HAL_RCC_OscConfig+0x22e>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 0304 	and.w	r3, r3, #4
 800a178:	2b00      	cmp	r3, #0
 800a17a:	f000 8097 	beq.w	800a2ac <HAL_RCC_OscConfig+0x394>
 800a17e:	2300      	movs	r3, #0
 800a180:	75fb      	strb	r3, [r7, #23]
 800a182:	4b81      	ldr	r3, [pc, #516]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10f      	bne.n	800a1ae <HAL_RCC_OscConfig+0x296>
 800a18e:	2300      	movs	r3, #0
 800a190:	60bb      	str	r3, [r7, #8]
 800a192:	4b7d      	ldr	r3, [pc, #500]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a196:	4a7c      	ldr	r2, [pc, #496]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a19c:	6413      	str	r3, [r2, #64]	; 0x40
 800a19e:	4b7a      	ldr	r3, [pc, #488]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1a6:	60bb      	str	r3, [r7, #8]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	75fb      	strb	r3, [r7, #23]
 800a1ae:	4b77      	ldr	r3, [pc, #476]	; (800a38c <HAL_RCC_OscConfig+0x474>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d118      	bne.n	800a1ec <HAL_RCC_OscConfig+0x2d4>
 800a1ba:	4b74      	ldr	r3, [pc, #464]	; (800a38c <HAL_RCC_OscConfig+0x474>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a73      	ldr	r2, [pc, #460]	; (800a38c <HAL_RCC_OscConfig+0x474>)
 800a1c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1c4:	6013      	str	r3, [r2, #0]
 800a1c6:	f7fc ff73 	bl	80070b0 <HAL_GetTick>
 800a1ca:	6138      	str	r0, [r7, #16]
 800a1cc:	e008      	b.n	800a1e0 <HAL_RCC_OscConfig+0x2c8>
 800a1ce:	f7fc ff6f 	bl	80070b0 <HAL_GetTick>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d901      	bls.n	800a1e0 <HAL_RCC_OscConfig+0x2c8>
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e10c      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 800a1e0:	4b6a      	ldr	r3, [pc, #424]	; (800a38c <HAL_RCC_OscConfig+0x474>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d0f0      	beq.n	800a1ce <HAL_RCC_OscConfig+0x2b6>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d106      	bne.n	800a202 <HAL_RCC_OscConfig+0x2ea>
 800a1f4:	4b64      	ldr	r3, [pc, #400]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1f8:	4a63      	ldr	r2, [pc, #396]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a1fa:	f043 0301 	orr.w	r3, r3, #1
 800a1fe:	6713      	str	r3, [r2, #112]	; 0x70
 800a200:	e01c      	b.n	800a23c <HAL_RCC_OscConfig+0x324>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	2b05      	cmp	r3, #5
 800a208:	d10c      	bne.n	800a224 <HAL_RCC_OscConfig+0x30c>
 800a20a:	4b5f      	ldr	r3, [pc, #380]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a20e:	4a5e      	ldr	r2, [pc, #376]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a210:	f043 0304 	orr.w	r3, r3, #4
 800a214:	6713      	str	r3, [r2, #112]	; 0x70
 800a216:	4b5c      	ldr	r3, [pc, #368]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a21a:	4a5b      	ldr	r2, [pc, #364]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a21c:	f043 0301 	orr.w	r3, r3, #1
 800a220:	6713      	str	r3, [r2, #112]	; 0x70
 800a222:	e00b      	b.n	800a23c <HAL_RCC_OscConfig+0x324>
 800a224:	4b58      	ldr	r3, [pc, #352]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a228:	4a57      	ldr	r2, [pc, #348]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a22a:	f023 0301 	bic.w	r3, r3, #1
 800a22e:	6713      	str	r3, [r2, #112]	; 0x70
 800a230:	4b55      	ldr	r3, [pc, #340]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a234:	4a54      	ldr	r2, [pc, #336]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a236:	f023 0304 	bic.w	r3, r3, #4
 800a23a:	6713      	str	r3, [r2, #112]	; 0x70
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d015      	beq.n	800a270 <HAL_RCC_OscConfig+0x358>
 800a244:	f7fc ff34 	bl	80070b0 <HAL_GetTick>
 800a248:	6138      	str	r0, [r7, #16]
 800a24a:	e00a      	b.n	800a262 <HAL_RCC_OscConfig+0x34a>
 800a24c:	f7fc ff30 	bl	80070b0 <HAL_GetTick>
 800a250:	4602      	mov	r2, r0
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	1ad3      	subs	r3, r2, r3
 800a256:	f241 3288 	movw	r2, #5000	; 0x1388
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d901      	bls.n	800a262 <HAL_RCC_OscConfig+0x34a>
 800a25e:	2303      	movs	r3, #3
 800a260:	e0cb      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 800a262:	4b49      	ldr	r3, [pc, #292]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a266:	f003 0302 	and.w	r3, r3, #2
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0ee      	beq.n	800a24c <HAL_RCC_OscConfig+0x334>
 800a26e:	e014      	b.n	800a29a <HAL_RCC_OscConfig+0x382>
 800a270:	f7fc ff1e 	bl	80070b0 <HAL_GetTick>
 800a274:	6138      	str	r0, [r7, #16]
 800a276:	e00a      	b.n	800a28e <HAL_RCC_OscConfig+0x376>
 800a278:	f7fc ff1a 	bl	80070b0 <HAL_GetTick>
 800a27c:	4602      	mov	r2, r0
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	f241 3288 	movw	r2, #5000	; 0x1388
 800a286:	4293      	cmp	r3, r2
 800a288:	d901      	bls.n	800a28e <HAL_RCC_OscConfig+0x376>
 800a28a:	2303      	movs	r3, #3
 800a28c:	e0b5      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 800a28e:	4b3e      	ldr	r3, [pc, #248]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a292:	f003 0302 	and.w	r3, r3, #2
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1ee      	bne.n	800a278 <HAL_RCC_OscConfig+0x360>
 800a29a:	7dfb      	ldrb	r3, [r7, #23]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d105      	bne.n	800a2ac <HAL_RCC_OscConfig+0x394>
 800a2a0:	4b39      	ldr	r3, [pc, #228]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a4:	4a38      	ldr	r2, [pc, #224]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a2a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2aa:	6413      	str	r3, [r2, #64]	; 0x40
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f000 80a1 	beq.w	800a3f8 <HAL_RCC_OscConfig+0x4e0>
 800a2b6:	4b34      	ldr	r3, [pc, #208]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	f003 030c 	and.w	r3, r3, #12
 800a2be:	2b08      	cmp	r3, #8
 800a2c0:	d05c      	beq.n	800a37c <HAL_RCC_OscConfig+0x464>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d141      	bne.n	800a34e <HAL_RCC_OscConfig+0x436>
 800a2ca:	4b31      	ldr	r3, [pc, #196]	; (800a390 <HAL_RCC_OscConfig+0x478>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	601a      	str	r2, [r3, #0]
 800a2d0:	f7fc feee 	bl	80070b0 <HAL_GetTick>
 800a2d4:	6138      	str	r0, [r7, #16]
 800a2d6:	e008      	b.n	800a2ea <HAL_RCC_OscConfig+0x3d2>
 800a2d8:	f7fc feea 	bl	80070b0 <HAL_GetTick>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d901      	bls.n	800a2ea <HAL_RCC_OscConfig+0x3d2>
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e087      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 800a2ea:	4b27      	ldr	r3, [pc, #156]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1f0      	bne.n	800a2d8 <HAL_RCC_OscConfig+0x3c0>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	69da      	ldr	r2, [r3, #28]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	431a      	orrs	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a304:	019b      	lsls	r3, r3, #6
 800a306:	431a      	orrs	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30c:	085b      	lsrs	r3, r3, #1
 800a30e:	3b01      	subs	r3, #1
 800a310:	041b      	lsls	r3, r3, #16
 800a312:	431a      	orrs	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a318:	061b      	lsls	r3, r3, #24
 800a31a:	491b      	ldr	r1, [pc, #108]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a31c:	4313      	orrs	r3, r2
 800a31e:	604b      	str	r3, [r1, #4]
 800a320:	4b1b      	ldr	r3, [pc, #108]	; (800a390 <HAL_RCC_OscConfig+0x478>)
 800a322:	2201      	movs	r2, #1
 800a324:	601a      	str	r2, [r3, #0]
 800a326:	f7fc fec3 	bl	80070b0 <HAL_GetTick>
 800a32a:	6138      	str	r0, [r7, #16]
 800a32c:	e008      	b.n	800a340 <HAL_RCC_OscConfig+0x428>
 800a32e:	f7fc febf 	bl	80070b0 <HAL_GetTick>
 800a332:	4602      	mov	r2, r0
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	1ad3      	subs	r3, r2, r3
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d901      	bls.n	800a340 <HAL_RCC_OscConfig+0x428>
 800a33c:	2303      	movs	r3, #3
 800a33e:	e05c      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 800a340:	4b11      	ldr	r3, [pc, #68]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d0f0      	beq.n	800a32e <HAL_RCC_OscConfig+0x416>
 800a34c:	e054      	b.n	800a3f8 <HAL_RCC_OscConfig+0x4e0>
 800a34e:	4b10      	ldr	r3, [pc, #64]	; (800a390 <HAL_RCC_OscConfig+0x478>)
 800a350:	2200      	movs	r2, #0
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	f7fc feac 	bl	80070b0 <HAL_GetTick>
 800a358:	6138      	str	r0, [r7, #16]
 800a35a:	e008      	b.n	800a36e <HAL_RCC_OscConfig+0x456>
 800a35c:	f7fc fea8 	bl	80070b0 <HAL_GetTick>
 800a360:	4602      	mov	r2, r0
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	2b02      	cmp	r3, #2
 800a368:	d901      	bls.n	800a36e <HAL_RCC_OscConfig+0x456>
 800a36a:	2303      	movs	r3, #3
 800a36c:	e045      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 800a36e:	4b06      	ldr	r3, [pc, #24]	; (800a388 <HAL_RCC_OscConfig+0x470>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1f0      	bne.n	800a35c <HAL_RCC_OscConfig+0x444>
 800a37a:	e03d      	b.n	800a3f8 <HAL_RCC_OscConfig+0x4e0>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d107      	bne.n	800a394 <HAL_RCC_OscConfig+0x47c>
 800a384:	2301      	movs	r3, #1
 800a386:	e038      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 800a388:	40023800 	.word	0x40023800
 800a38c:	40007000 	.word	0x40007000
 800a390:	42470060 	.word	0x42470060
 800a394:	4b1b      	ldr	r3, [pc, #108]	; (800a404 <HAL_RCC_OscConfig+0x4ec>)
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	60fb      	str	r3, [r7, #12]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	699b      	ldr	r3, [r3, #24]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d028      	beq.n	800a3f4 <HAL_RCC_OscConfig+0x4dc>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	69db      	ldr	r3, [r3, #28]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d121      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x4dc>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a1b      	ldr	r3, [r3, #32]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d11a      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x4dc>
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a3ca:	0192      	lsls	r2, r2, #6
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d111      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x4dc>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3da:	085b      	lsrs	r3, r3, #1
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	041b      	lsls	r3, r3, #16
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d107      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x4dc>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ee:	061b      	lsls	r3, r3, #24
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d001      	beq.n	800a3f8 <HAL_RCC_OscConfig+0x4e0>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e000      	b.n	800a3fa <HAL_RCC_OscConfig+0x4e2>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3718      	adds	r7, #24
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	40023800 	.word	0x40023800

0800a408 <HAL_RCC_ClockConfig>:
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <HAL_RCC_ClockConfig+0x14>
 800a418:	2301      	movs	r3, #1
 800a41a:	e0cc      	b.n	800a5b6 <HAL_RCC_ClockConfig+0x1ae>
 800a41c:	4b68      	ldr	r3, [pc, #416]	; (800a5c0 <HAL_RCC_ClockConfig+0x1b8>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 0307 	and.w	r3, r3, #7
 800a424:	683a      	ldr	r2, [r7, #0]
 800a426:	429a      	cmp	r2, r3
 800a428:	d90c      	bls.n	800a444 <HAL_RCC_ClockConfig+0x3c>
 800a42a:	4b65      	ldr	r3, [pc, #404]	; (800a5c0 <HAL_RCC_ClockConfig+0x1b8>)
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	b2d2      	uxtb	r2, r2
 800a430:	701a      	strb	r2, [r3, #0]
 800a432:	4b63      	ldr	r3, [pc, #396]	; (800a5c0 <HAL_RCC_ClockConfig+0x1b8>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 0307 	and.w	r3, r3, #7
 800a43a:	683a      	ldr	r2, [r7, #0]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d001      	beq.n	800a444 <HAL_RCC_ClockConfig+0x3c>
 800a440:	2301      	movs	r3, #1
 800a442:	e0b8      	b.n	800a5b6 <HAL_RCC_ClockConfig+0x1ae>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 0302 	and.w	r3, r3, #2
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d020      	beq.n	800a492 <HAL_RCC_ClockConfig+0x8a>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 0304 	and.w	r3, r3, #4
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d005      	beq.n	800a468 <HAL_RCC_ClockConfig+0x60>
 800a45c:	4b59      	ldr	r3, [pc, #356]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	4a58      	ldr	r2, [pc, #352]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a466:	6093      	str	r3, [r2, #8]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 0308 	and.w	r3, r3, #8
 800a470:	2b00      	cmp	r3, #0
 800a472:	d005      	beq.n	800a480 <HAL_RCC_ClockConfig+0x78>
 800a474:	4b53      	ldr	r3, [pc, #332]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	4a52      	ldr	r2, [pc, #328]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a47a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a47e:	6093      	str	r3, [r2, #8]
 800a480:	4b50      	ldr	r3, [pc, #320]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	494d      	ldr	r1, [pc, #308]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a48e:	4313      	orrs	r3, r2
 800a490:	608b      	str	r3, [r1, #8]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 0301 	and.w	r3, r3, #1
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d044      	beq.n	800a528 <HAL_RCC_ClockConfig+0x120>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d107      	bne.n	800a4b6 <HAL_RCC_ClockConfig+0xae>
 800a4a6:	4b47      	ldr	r3, [pc, #284]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d119      	bne.n	800a4e6 <HAL_RCC_ClockConfig+0xde>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e07f      	b.n	800a5b6 <HAL_RCC_ClockConfig+0x1ae>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	d003      	beq.n	800a4c6 <HAL_RCC_ClockConfig+0xbe>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	2b03      	cmp	r3, #3
 800a4c4:	d107      	bne.n	800a4d6 <HAL_RCC_ClockConfig+0xce>
 800a4c6:	4b3f      	ldr	r3, [pc, #252]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d109      	bne.n	800a4e6 <HAL_RCC_ClockConfig+0xde>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e06f      	b.n	800a5b6 <HAL_RCC_ClockConfig+0x1ae>
 800a4d6:	4b3b      	ldr	r3, [pc, #236]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0302 	and.w	r3, r3, #2
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <HAL_RCC_ClockConfig+0xde>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e067      	b.n	800a5b6 <HAL_RCC_ClockConfig+0x1ae>
 800a4e6:	4b37      	ldr	r3, [pc, #220]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	f023 0203 	bic.w	r2, r3, #3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	4934      	ldr	r1, [pc, #208]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	608b      	str	r3, [r1, #8]
 800a4f8:	f7fc fdda 	bl	80070b0 <HAL_GetTick>
 800a4fc:	60f8      	str	r0, [r7, #12]
 800a4fe:	e00a      	b.n	800a516 <HAL_RCC_ClockConfig+0x10e>
 800a500:	f7fc fdd6 	bl	80070b0 <HAL_GetTick>
 800a504:	4602      	mov	r2, r0
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a50e:	4293      	cmp	r3, r2
 800a510:	d901      	bls.n	800a516 <HAL_RCC_ClockConfig+0x10e>
 800a512:	2303      	movs	r3, #3
 800a514:	e04f      	b.n	800a5b6 <HAL_RCC_ClockConfig+0x1ae>
 800a516:	4b2b      	ldr	r3, [pc, #172]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	f003 020c 	and.w	r2, r3, #12
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	429a      	cmp	r2, r3
 800a526:	d1eb      	bne.n	800a500 <HAL_RCC_ClockConfig+0xf8>
 800a528:	4b25      	ldr	r3, [pc, #148]	; (800a5c0 <HAL_RCC_ClockConfig+0x1b8>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 0307 	and.w	r3, r3, #7
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	429a      	cmp	r2, r3
 800a534:	d20c      	bcs.n	800a550 <HAL_RCC_ClockConfig+0x148>
 800a536:	4b22      	ldr	r3, [pc, #136]	; (800a5c0 <HAL_RCC_ClockConfig+0x1b8>)
 800a538:	683a      	ldr	r2, [r7, #0]
 800a53a:	b2d2      	uxtb	r2, r2
 800a53c:	701a      	strb	r2, [r3, #0]
 800a53e:	4b20      	ldr	r3, [pc, #128]	; (800a5c0 <HAL_RCC_ClockConfig+0x1b8>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0307 	and.w	r3, r3, #7
 800a546:	683a      	ldr	r2, [r7, #0]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d001      	beq.n	800a550 <HAL_RCC_ClockConfig+0x148>
 800a54c:	2301      	movs	r3, #1
 800a54e:	e032      	b.n	800a5b6 <HAL_RCC_ClockConfig+0x1ae>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0304 	and.w	r3, r3, #4
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d008      	beq.n	800a56e <HAL_RCC_ClockConfig+0x166>
 800a55c:	4b19      	ldr	r3, [pc, #100]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	4916      	ldr	r1, [pc, #88]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a56a:	4313      	orrs	r3, r2
 800a56c:	608b      	str	r3, [r1, #8]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 0308 	and.w	r3, r3, #8
 800a576:	2b00      	cmp	r3, #0
 800a578:	d009      	beq.n	800a58e <HAL_RCC_ClockConfig+0x186>
 800a57a:	4b12      	ldr	r3, [pc, #72]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	00db      	lsls	r3, r3, #3
 800a588:	490e      	ldr	r1, [pc, #56]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a58a:	4313      	orrs	r3, r2
 800a58c:	608b      	str	r3, [r1, #8]
 800a58e:	f000 f821 	bl	800a5d4 <HAL_RCC_GetSysClockFreq>
 800a592:	4602      	mov	r2, r0
 800a594:	4b0b      	ldr	r3, [pc, #44]	; (800a5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	091b      	lsrs	r3, r3, #4
 800a59a:	f003 030f 	and.w	r3, r3, #15
 800a59e:	490a      	ldr	r1, [pc, #40]	; (800a5c8 <HAL_RCC_ClockConfig+0x1c0>)
 800a5a0:	5ccb      	ldrb	r3, [r1, r3]
 800a5a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a5a6:	4a09      	ldr	r2, [pc, #36]	; (800a5cc <HAL_RCC_ClockConfig+0x1c4>)
 800a5a8:	6013      	str	r3, [r2, #0]
 800a5aa:	4b09      	ldr	r3, [pc, #36]	; (800a5d0 <HAL_RCC_ClockConfig+0x1c8>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fc fd3a 	bl	8007028 <HAL_InitTick>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	40023c00 	.word	0x40023c00
 800a5c4:	40023800 	.word	0x40023800
 800a5c8:	080153f8 	.word	0x080153f8
 800a5cc:	20000004 	.word	0x20000004
 800a5d0:	20000008 	.word	0x20000008

0800a5d4 <HAL_RCC_GetSysClockFreq>:
 800a5d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5d8:	b090      	sub	sp, #64	; 0x40
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	2300      	movs	r3, #0
 800a5de:	637b      	str	r3, [r7, #52]	; 0x34
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	633b      	str	r3, [r7, #48]	; 0x30
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5ec:	4b59      	ldr	r3, [pc, #356]	; (800a754 <HAL_RCC_GetSysClockFreq+0x180>)
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	f003 030c 	and.w	r3, r3, #12
 800a5f4:	2b08      	cmp	r3, #8
 800a5f6:	d00d      	beq.n	800a614 <HAL_RCC_GetSysClockFreq+0x40>
 800a5f8:	2b08      	cmp	r3, #8
 800a5fa:	f200 80a1 	bhi.w	800a740 <HAL_RCC_GetSysClockFreq+0x16c>
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d002      	beq.n	800a608 <HAL_RCC_GetSysClockFreq+0x34>
 800a602:	2b04      	cmp	r3, #4
 800a604:	d003      	beq.n	800a60e <HAL_RCC_GetSysClockFreq+0x3a>
 800a606:	e09b      	b.n	800a740 <HAL_RCC_GetSysClockFreq+0x16c>
 800a608:	4b53      	ldr	r3, [pc, #332]	; (800a758 <HAL_RCC_GetSysClockFreq+0x184>)
 800a60a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a60c:	e09b      	b.n	800a746 <HAL_RCC_GetSysClockFreq+0x172>
 800a60e:	4b53      	ldr	r3, [pc, #332]	; (800a75c <HAL_RCC_GetSysClockFreq+0x188>)
 800a610:	63bb      	str	r3, [r7, #56]	; 0x38
 800a612:	e098      	b.n	800a746 <HAL_RCC_GetSysClockFreq+0x172>
 800a614:	4b4f      	ldr	r3, [pc, #316]	; (800a754 <HAL_RCC_GetSysClockFreq+0x180>)
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a61c:	637b      	str	r3, [r7, #52]	; 0x34
 800a61e:	4b4d      	ldr	r3, [pc, #308]	; (800a754 <HAL_RCC_GetSysClockFreq+0x180>)
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a626:	2b00      	cmp	r3, #0
 800a628:	d028      	beq.n	800a67c <HAL_RCC_GetSysClockFreq+0xa8>
 800a62a:	4b4a      	ldr	r3, [pc, #296]	; (800a754 <HAL_RCC_GetSysClockFreq+0x180>)
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	099b      	lsrs	r3, r3, #6
 800a630:	2200      	movs	r2, #0
 800a632:	623b      	str	r3, [r7, #32]
 800a634:	627a      	str	r2, [r7, #36]	; 0x24
 800a636:	6a3b      	ldr	r3, [r7, #32]
 800a638:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a63c:	2100      	movs	r1, #0
 800a63e:	4b47      	ldr	r3, [pc, #284]	; (800a75c <HAL_RCC_GetSysClockFreq+0x188>)
 800a640:	fb03 f201 	mul.w	r2, r3, r1
 800a644:	2300      	movs	r3, #0
 800a646:	fb00 f303 	mul.w	r3, r0, r3
 800a64a:	4413      	add	r3, r2
 800a64c:	4a43      	ldr	r2, [pc, #268]	; (800a75c <HAL_RCC_GetSysClockFreq+0x188>)
 800a64e:	fba0 1202 	umull	r1, r2, r0, r2
 800a652:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a654:	460a      	mov	r2, r1
 800a656:	62ba      	str	r2, [r7, #40]	; 0x28
 800a658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a65a:	4413      	add	r3, r2
 800a65c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a660:	2200      	movs	r2, #0
 800a662:	61bb      	str	r3, [r7, #24]
 800a664:	61fa      	str	r2, [r7, #28]
 800a666:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a66a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a66e:	f7f6 fb0b 	bl	8000c88 <__aeabi_uldivmod>
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	4613      	mov	r3, r2
 800a678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a67a:	e053      	b.n	800a724 <HAL_RCC_GetSysClockFreq+0x150>
 800a67c:	4b35      	ldr	r3, [pc, #212]	; (800a754 <HAL_RCC_GetSysClockFreq+0x180>)
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	099b      	lsrs	r3, r3, #6
 800a682:	2200      	movs	r2, #0
 800a684:	613b      	str	r3, [r7, #16]
 800a686:	617a      	str	r2, [r7, #20]
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a68e:	f04f 0b00 	mov.w	fp, #0
 800a692:	4652      	mov	r2, sl
 800a694:	465b      	mov	r3, fp
 800a696:	f04f 0000 	mov.w	r0, #0
 800a69a:	f04f 0100 	mov.w	r1, #0
 800a69e:	0159      	lsls	r1, r3, #5
 800a6a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a6a4:	0150      	lsls	r0, r2, #5
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	ebb2 080a 	subs.w	r8, r2, sl
 800a6ae:	eb63 090b 	sbc.w	r9, r3, fp
 800a6b2:	f04f 0200 	mov.w	r2, #0
 800a6b6:	f04f 0300 	mov.w	r3, #0
 800a6ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a6be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a6c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a6c6:	ebb2 0408 	subs.w	r4, r2, r8
 800a6ca:	eb63 0509 	sbc.w	r5, r3, r9
 800a6ce:	f04f 0200 	mov.w	r2, #0
 800a6d2:	f04f 0300 	mov.w	r3, #0
 800a6d6:	00eb      	lsls	r3, r5, #3
 800a6d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a6dc:	00e2      	lsls	r2, r4, #3
 800a6de:	4614      	mov	r4, r2
 800a6e0:	461d      	mov	r5, r3
 800a6e2:	eb14 030a 	adds.w	r3, r4, sl
 800a6e6:	603b      	str	r3, [r7, #0]
 800a6e8:	eb45 030b 	adc.w	r3, r5, fp
 800a6ec:	607b      	str	r3, [r7, #4]
 800a6ee:	f04f 0200 	mov.w	r2, #0
 800a6f2:	f04f 0300 	mov.w	r3, #0
 800a6f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	028b      	lsls	r3, r1, #10
 800a6fe:	4621      	mov	r1, r4
 800a700:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a704:	4621      	mov	r1, r4
 800a706:	028a      	lsls	r2, r1, #10
 800a708:	4610      	mov	r0, r2
 800a70a:	4619      	mov	r1, r3
 800a70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a70e:	2200      	movs	r2, #0
 800a710:	60bb      	str	r3, [r7, #8]
 800a712:	60fa      	str	r2, [r7, #12]
 800a714:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a718:	f7f6 fab6 	bl	8000c88 <__aeabi_uldivmod>
 800a71c:	4602      	mov	r2, r0
 800a71e:	460b      	mov	r3, r1
 800a720:	4613      	mov	r3, r2
 800a722:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a724:	4b0b      	ldr	r3, [pc, #44]	; (800a754 <HAL_RCC_GetSysClockFreq+0x180>)
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	0c1b      	lsrs	r3, r3, #16
 800a72a:	f003 0303 	and.w	r3, r3, #3
 800a72e:	3301      	adds	r3, #1
 800a730:	005b      	lsls	r3, r3, #1
 800a732:	633b      	str	r3, [r7, #48]	; 0x30
 800a734:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a738:	fbb2 f3f3 	udiv	r3, r2, r3
 800a73c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a73e:	e002      	b.n	800a746 <HAL_RCC_GetSysClockFreq+0x172>
 800a740:	4b05      	ldr	r3, [pc, #20]	; (800a758 <HAL_RCC_GetSysClockFreq+0x184>)
 800a742:	63bb      	str	r3, [r7, #56]	; 0x38
 800a744:	bf00      	nop
 800a746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a748:	4618      	mov	r0, r3
 800a74a:	3740      	adds	r7, #64	; 0x40
 800a74c:	46bd      	mov	sp, r7
 800a74e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a752:	bf00      	nop
 800a754:	40023800 	.word	0x40023800
 800a758:	00f42400 	.word	0x00f42400
 800a75c:	017d7840 	.word	0x017d7840

0800a760 <HAL_RCC_GetHCLKFreq>:
 800a760:	b480      	push	{r7}
 800a762:	af00      	add	r7, sp, #0
 800a764:	4b03      	ldr	r3, [pc, #12]	; (800a774 <HAL_RCC_GetHCLKFreq+0x14>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4618      	mov	r0, r3
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	20000004 	.word	0x20000004

0800a778 <HAL_RCC_GetPCLK1Freq>:
 800a778:	b580      	push	{r7, lr}
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	f7ff fff0 	bl	800a760 <HAL_RCC_GetHCLKFreq>
 800a780:	4602      	mov	r2, r0
 800a782:	4b05      	ldr	r3, [pc, #20]	; (800a798 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	0a9b      	lsrs	r3, r3, #10
 800a788:	f003 0307 	and.w	r3, r3, #7
 800a78c:	4903      	ldr	r1, [pc, #12]	; (800a79c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a78e:	5ccb      	ldrb	r3, [r1, r3]
 800a790:	fa22 f303 	lsr.w	r3, r2, r3
 800a794:	4618      	mov	r0, r3
 800a796:	bd80      	pop	{r7, pc}
 800a798:	40023800 	.word	0x40023800
 800a79c:	08015408 	.word	0x08015408

0800a7a0 <HAL_RCC_GetPCLK2Freq>:
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	f7ff ffdc 	bl	800a760 <HAL_RCC_GetHCLKFreq>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	4b05      	ldr	r3, [pc, #20]	; (800a7c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	0b5b      	lsrs	r3, r3, #13
 800a7b0:	f003 0307 	and.w	r3, r3, #7
 800a7b4:	4903      	ldr	r1, [pc, #12]	; (800a7c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a7b6:	5ccb      	ldrb	r3, [r1, r3]
 800a7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7bc:	4618      	mov	r0, r3
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	40023800 	.word	0x40023800
 800a7c4:	08015408 	.word	0x08015408

0800a7c8 <HAL_TIM_Base_Init>:
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d101      	bne.n	800a7da <HAL_TIM_Base_Init+0x12>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e041      	b.n	800a85e <HAL_TIM_Base_Init+0x96>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d106      	bne.n	800a7f4 <HAL_TIM_Base_Init+0x2c>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7fc f8e2 	bl	80069b8 <HAL_TIM_Base_MspInit>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3304      	adds	r3, #4
 800a804:	4619      	mov	r1, r3
 800a806:	4610      	mov	r0, r2
 800a808:	f000 ff94 	bl	800b734 <TIM_Base_SetConfig>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a85c:	2300      	movs	r3, #0
 800a85e:	4618      	mov	r0, r3
 800a860:	3708      	adds	r7, #8
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <HAL_TIM_PWM_Init>:
 800a866:	b580      	push	{r7, lr}
 800a868:	b082      	sub	sp, #8
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d101      	bne.n	800a878 <HAL_TIM_PWM_Init+0x12>
 800a874:	2301      	movs	r3, #1
 800a876:	e041      	b.n	800a8fc <HAL_TIM_PWM_Init+0x96>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	2b00      	cmp	r3, #0
 800a882:	d106      	bne.n	800a892 <HAL_TIM_PWM_Init+0x2c>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 f839 	bl	800a904 <HAL_TIM_PWM_MspInit>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2202      	movs	r2, #2
 800a896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	4610      	mov	r0, r2
 800a8a6:	f000 ff45 	bl	800b734 <TIM_Base_SetConfig>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <HAL_TIM_PWM_MspInit>:
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <HAL_TIM_PWM_Start>:
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d109      	bne.n	800a93c <HAL_TIM_PWM_Start+0x24>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b01      	cmp	r3, #1
 800a932:	bf14      	ite	ne
 800a934:	2301      	movne	r3, #1
 800a936:	2300      	moveq	r3, #0
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	e022      	b.n	800a982 <HAL_TIM_PWM_Start+0x6a>
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	2b04      	cmp	r3, #4
 800a940:	d109      	bne.n	800a956 <HAL_TIM_PWM_Start+0x3e>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	bf14      	ite	ne
 800a94e:	2301      	movne	r3, #1
 800a950:	2300      	moveq	r3, #0
 800a952:	b2db      	uxtb	r3, r3
 800a954:	e015      	b.n	800a982 <HAL_TIM_PWM_Start+0x6a>
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	2b08      	cmp	r3, #8
 800a95a:	d109      	bne.n	800a970 <HAL_TIM_PWM_Start+0x58>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a962:	b2db      	uxtb	r3, r3
 800a964:	2b01      	cmp	r3, #1
 800a966:	bf14      	ite	ne
 800a968:	2301      	movne	r3, #1
 800a96a:	2300      	moveq	r3, #0
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	e008      	b.n	800a982 <HAL_TIM_PWM_Start+0x6a>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a976:	b2db      	uxtb	r3, r3
 800a978:	2b01      	cmp	r3, #1
 800a97a:	bf14      	ite	ne
 800a97c:	2301      	movne	r3, #1
 800a97e:	2300      	moveq	r3, #0
 800a980:	b2db      	uxtb	r3, r3
 800a982:	2b00      	cmp	r3, #0
 800a984:	d001      	beq.n	800a98a <HAL_TIM_PWM_Start+0x72>
 800a986:	2301      	movs	r3, #1
 800a988:	e07c      	b.n	800aa84 <HAL_TIM_PWM_Start+0x16c>
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d104      	bne.n	800a99a <HAL_TIM_PWM_Start+0x82>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2202      	movs	r2, #2
 800a994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a998:	e013      	b.n	800a9c2 <HAL_TIM_PWM_Start+0xaa>
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	2b04      	cmp	r3, #4
 800a99e:	d104      	bne.n	800a9aa <HAL_TIM_PWM_Start+0x92>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9a8:	e00b      	b.n	800a9c2 <HAL_TIM_PWM_Start+0xaa>
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2b08      	cmp	r3, #8
 800a9ae:	d104      	bne.n	800a9ba <HAL_TIM_PWM_Start+0xa2>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2202      	movs	r2, #2
 800a9b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9b8:	e003      	b.n	800a9c2 <HAL_TIM_PWM_Start+0xaa>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2202      	movs	r2, #2
 800a9be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	6839      	ldr	r1, [r7, #0]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f001 fac6 	bl	800bf5c <TIM_CCxChannelCmd>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a2d      	ldr	r2, [pc, #180]	; (800aa8c <HAL_TIM_PWM_Start+0x174>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d004      	beq.n	800a9e4 <HAL_TIM_PWM_Start+0xcc>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a2c      	ldr	r2, [pc, #176]	; (800aa90 <HAL_TIM_PWM_Start+0x178>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d101      	bne.n	800a9e8 <HAL_TIM_PWM_Start+0xd0>
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e000      	b.n	800a9ea <HAL_TIM_PWM_Start+0xd2>
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d007      	beq.n	800a9fe <HAL_TIM_PWM_Start+0xe6>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a9fc:	645a      	str	r2, [r3, #68]	; 0x44
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a22      	ldr	r2, [pc, #136]	; (800aa8c <HAL_TIM_PWM_Start+0x174>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d022      	beq.n	800aa4e <HAL_TIM_PWM_Start+0x136>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa10:	d01d      	beq.n	800aa4e <HAL_TIM_PWM_Start+0x136>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a1f      	ldr	r2, [pc, #124]	; (800aa94 <HAL_TIM_PWM_Start+0x17c>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d018      	beq.n	800aa4e <HAL_TIM_PWM_Start+0x136>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a1d      	ldr	r2, [pc, #116]	; (800aa98 <HAL_TIM_PWM_Start+0x180>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d013      	beq.n	800aa4e <HAL_TIM_PWM_Start+0x136>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a1c      	ldr	r2, [pc, #112]	; (800aa9c <HAL_TIM_PWM_Start+0x184>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d00e      	beq.n	800aa4e <HAL_TIM_PWM_Start+0x136>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a16      	ldr	r2, [pc, #88]	; (800aa90 <HAL_TIM_PWM_Start+0x178>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d009      	beq.n	800aa4e <HAL_TIM_PWM_Start+0x136>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a18      	ldr	r2, [pc, #96]	; (800aaa0 <HAL_TIM_PWM_Start+0x188>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d004      	beq.n	800aa4e <HAL_TIM_PWM_Start+0x136>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a16      	ldr	r2, [pc, #88]	; (800aaa4 <HAL_TIM_PWM_Start+0x18c>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d111      	bne.n	800aa72 <HAL_TIM_PWM_Start+0x15a>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	f003 0307 	and.w	r3, r3, #7
 800aa58:	60fb      	str	r3, [r7, #12]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2b06      	cmp	r3, #6
 800aa5e:	d010      	beq.n	800aa82 <HAL_TIM_PWM_Start+0x16a>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f042 0201 	orr.w	r2, r2, #1
 800aa6e:	601a      	str	r2, [r3, #0]
 800aa70:	e007      	b.n	800aa82 <HAL_TIM_PWM_Start+0x16a>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f042 0201 	orr.w	r2, r2, #1
 800aa80:	601a      	str	r2, [r3, #0]
 800aa82:	2300      	movs	r3, #0
 800aa84:	4618      	mov	r0, r3
 800aa86:	3710      	adds	r7, #16
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	40010000 	.word	0x40010000
 800aa90:	40010400 	.word	0x40010400
 800aa94:	40000400 	.word	0x40000400
 800aa98:	40000800 	.word	0x40000800
 800aa9c:	40000c00 	.word	0x40000c00
 800aaa0:	40014000 	.word	0x40014000
 800aaa4:	40001800 	.word	0x40001800

0800aaa8 <HAL_TIM_IC_Init>:
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d101      	bne.n	800aaba <HAL_TIM_IC_Init+0x12>
 800aab6:	2301      	movs	r3, #1
 800aab8:	e041      	b.n	800ab3e <HAL_TIM_IC_Init+0x96>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d106      	bne.n	800aad4 <HAL_TIM_IC_Init+0x2c>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f7fc f86a 	bl	8006ba8 <HAL_TIM_IC_MspInit>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2202      	movs	r2, #2
 800aad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	3304      	adds	r3, #4
 800aae4:	4619      	mov	r1, r3
 800aae6:	4610      	mov	r0, r2
 800aae8:	f000 fe24 	bl	800b734 <TIM_Base_SetConfig>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
	...

0800ab48 <HAL_TIM_IC_Start_IT>:
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
 800ab52:	2300      	movs	r3, #0
 800ab54:	73fb      	strb	r3, [r7, #15]
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d104      	bne.n	800ab66 <HAL_TIM_IC_Start_IT+0x1e>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	e013      	b.n	800ab8e <HAL_TIM_IC_Start_IT+0x46>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b04      	cmp	r3, #4
 800ab6a:	d104      	bne.n	800ab76 <HAL_TIM_IC_Start_IT+0x2e>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	e00b      	b.n	800ab8e <HAL_TIM_IC_Start_IT+0x46>
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b08      	cmp	r3, #8
 800ab7a:	d104      	bne.n	800ab86 <HAL_TIM_IC_Start_IT+0x3e>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	e003      	b.n	800ab8e <HAL_TIM_IC_Start_IT+0x46>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	73bb      	strb	r3, [r7, #14]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d104      	bne.n	800aba0 <HAL_TIM_IC_Start_IT+0x58>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	e013      	b.n	800abc8 <HAL_TIM_IC_Start_IT+0x80>
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	2b04      	cmp	r3, #4
 800aba4:	d104      	bne.n	800abb0 <HAL_TIM_IC_Start_IT+0x68>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800abac:	b2db      	uxtb	r3, r3
 800abae:	e00b      	b.n	800abc8 <HAL_TIM_IC_Start_IT+0x80>
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2b08      	cmp	r3, #8
 800abb4:	d104      	bne.n	800abc0 <HAL_TIM_IC_Start_IT+0x78>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	e003      	b.n	800abc8 <HAL_TIM_IC_Start_IT+0x80>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	737b      	strb	r3, [r7, #13]
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d102      	bne.n	800abd6 <HAL_TIM_IC_Start_IT+0x8e>
 800abd0:	7b7b      	ldrb	r3, [r7, #13]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d001      	beq.n	800abda <HAL_TIM_IC_Start_IT+0x92>
 800abd6:	2301      	movs	r3, #1
 800abd8:	e0cc      	b.n	800ad74 <HAL_TIM_IC_Start_IT+0x22c>
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d104      	bne.n	800abea <HAL_TIM_IC_Start_IT+0xa2>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2202      	movs	r2, #2
 800abe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abe8:	e013      	b.n	800ac12 <HAL_TIM_IC_Start_IT+0xca>
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b04      	cmp	r3, #4
 800abee:	d104      	bne.n	800abfa <HAL_TIM_IC_Start_IT+0xb2>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2202      	movs	r2, #2
 800abf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abf8:	e00b      	b.n	800ac12 <HAL_TIM_IC_Start_IT+0xca>
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	2b08      	cmp	r3, #8
 800abfe:	d104      	bne.n	800ac0a <HAL_TIM_IC_Start_IT+0xc2>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac08:	e003      	b.n	800ac12 <HAL_TIM_IC_Start_IT+0xca>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2202      	movs	r2, #2
 800ac0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d104      	bne.n	800ac22 <HAL_TIM_IC_Start_IT+0xda>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2202      	movs	r2, #2
 800ac1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac20:	e013      	b.n	800ac4a <HAL_TIM_IC_Start_IT+0x102>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b04      	cmp	r3, #4
 800ac26:	d104      	bne.n	800ac32 <HAL_TIM_IC_Start_IT+0xea>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac30:	e00b      	b.n	800ac4a <HAL_TIM_IC_Start_IT+0x102>
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2b08      	cmp	r3, #8
 800ac36:	d104      	bne.n	800ac42 <HAL_TIM_IC_Start_IT+0xfa>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac40:	e003      	b.n	800ac4a <HAL_TIM_IC_Start_IT+0x102>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2202      	movs	r2, #2
 800ac46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	2b0c      	cmp	r3, #12
 800ac4e:	d841      	bhi.n	800acd4 <HAL_TIM_IC_Start_IT+0x18c>
 800ac50:	a201      	add	r2, pc, #4	; (adr r2, 800ac58 <HAL_TIM_IC_Start_IT+0x110>)
 800ac52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac56:	bf00      	nop
 800ac58:	0800ac8d 	.word	0x0800ac8d
 800ac5c:	0800acd5 	.word	0x0800acd5
 800ac60:	0800acd5 	.word	0x0800acd5
 800ac64:	0800acd5 	.word	0x0800acd5
 800ac68:	0800ac9f 	.word	0x0800ac9f
 800ac6c:	0800acd5 	.word	0x0800acd5
 800ac70:	0800acd5 	.word	0x0800acd5
 800ac74:	0800acd5 	.word	0x0800acd5
 800ac78:	0800acb1 	.word	0x0800acb1
 800ac7c:	0800acd5 	.word	0x0800acd5
 800ac80:	0800acd5 	.word	0x0800acd5
 800ac84:	0800acd5 	.word	0x0800acd5
 800ac88:	0800acc3 	.word	0x0800acc3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68da      	ldr	r2, [r3, #12]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f042 0202 	orr.w	r2, r2, #2
 800ac9a:	60da      	str	r2, [r3, #12]
 800ac9c:	e01d      	b.n	800acda <HAL_TIM_IC_Start_IT+0x192>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	68da      	ldr	r2, [r3, #12]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f042 0204 	orr.w	r2, r2, #4
 800acac:	60da      	str	r2, [r3, #12]
 800acae:	e014      	b.n	800acda <HAL_TIM_IC_Start_IT+0x192>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	68da      	ldr	r2, [r3, #12]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f042 0208 	orr.w	r2, r2, #8
 800acbe:	60da      	str	r2, [r3, #12]
 800acc0:	e00b      	b.n	800acda <HAL_TIM_IC_Start_IT+0x192>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68da      	ldr	r2, [r3, #12]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f042 0210 	orr.w	r2, r2, #16
 800acd0:	60da      	str	r2, [r3, #12]
 800acd2:	e002      	b.n	800acda <HAL_TIM_IC_Start_IT+0x192>
 800acd4:	2301      	movs	r3, #1
 800acd6:	73fb      	strb	r3, [r7, #15]
 800acd8:	bf00      	nop
 800acda:	7bfb      	ldrb	r3, [r7, #15]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d148      	bne.n	800ad72 <HAL_TIM_IC_Start_IT+0x22a>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2201      	movs	r2, #1
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	4618      	mov	r0, r3
 800acea:	f001 f937 	bl	800bf5c <TIM_CCxChannelCmd>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a22      	ldr	r2, [pc, #136]	; (800ad7c <HAL_TIM_IC_Start_IT+0x234>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d022      	beq.n	800ad3e <HAL_TIM_IC_Start_IT+0x1f6>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad00:	d01d      	beq.n	800ad3e <HAL_TIM_IC_Start_IT+0x1f6>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a1e      	ldr	r2, [pc, #120]	; (800ad80 <HAL_TIM_IC_Start_IT+0x238>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d018      	beq.n	800ad3e <HAL_TIM_IC_Start_IT+0x1f6>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a1c      	ldr	r2, [pc, #112]	; (800ad84 <HAL_TIM_IC_Start_IT+0x23c>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d013      	beq.n	800ad3e <HAL_TIM_IC_Start_IT+0x1f6>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a1b      	ldr	r2, [pc, #108]	; (800ad88 <HAL_TIM_IC_Start_IT+0x240>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d00e      	beq.n	800ad3e <HAL_TIM_IC_Start_IT+0x1f6>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a19      	ldr	r2, [pc, #100]	; (800ad8c <HAL_TIM_IC_Start_IT+0x244>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d009      	beq.n	800ad3e <HAL_TIM_IC_Start_IT+0x1f6>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a18      	ldr	r2, [pc, #96]	; (800ad90 <HAL_TIM_IC_Start_IT+0x248>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d004      	beq.n	800ad3e <HAL_TIM_IC_Start_IT+0x1f6>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a16      	ldr	r2, [pc, #88]	; (800ad94 <HAL_TIM_IC_Start_IT+0x24c>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d111      	bne.n	800ad62 <HAL_TIM_IC_Start_IT+0x21a>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	f003 0307 	and.w	r3, r3, #7
 800ad48:	60bb      	str	r3, [r7, #8]
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2b06      	cmp	r3, #6
 800ad4e:	d010      	beq.n	800ad72 <HAL_TIM_IC_Start_IT+0x22a>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f042 0201 	orr.w	r2, r2, #1
 800ad5e:	601a      	str	r2, [r3, #0]
 800ad60:	e007      	b.n	800ad72 <HAL_TIM_IC_Start_IT+0x22a>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f042 0201 	orr.w	r2, r2, #1
 800ad70:	601a      	str	r2, [r3, #0]
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	40010000 	.word	0x40010000
 800ad80:	40000400 	.word	0x40000400
 800ad84:	40000800 	.word	0x40000800
 800ad88:	40000c00 	.word	0x40000c00
 800ad8c:	40010400 	.word	0x40010400
 800ad90:	40014000 	.word	0x40014000
 800ad94:	40001800 	.word	0x40001800

0800ad98 <HAL_TIM_Encoder_Init>:
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b086      	sub	sp, #24
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <HAL_TIM_Encoder_Init+0x14>
 800ada8:	2301      	movs	r3, #1
 800adaa:	e097      	b.n	800aedc <HAL_TIM_Encoder_Init+0x144>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d106      	bne.n	800adc6 <HAL_TIM_Encoder_Init+0x2e>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7fb fe57 	bl	8006a74 <HAL_TIM_Encoder_MspInit>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2202      	movs	r2, #2
 800adca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	6812      	ldr	r2, [r2, #0]
 800add8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800addc:	f023 0307 	bic.w	r3, r3, #7
 800ade0:	6093      	str	r3, [r2, #8]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	3304      	adds	r3, #4
 800adea:	4619      	mov	r1, r3
 800adec:	4610      	mov	r0, r2
 800adee:	f000 fca1 	bl	800b734 <TIM_Base_SetConfig>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	617b      	str	r3, [r7, #20]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	699b      	ldr	r3, [r3, #24]
 800ae00:	613b      	str	r3, [r7, #16]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6a1b      	ldr	r3, [r3, #32]
 800ae08:	60fb      	str	r3, [r7, #12]
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	697a      	ldr	r2, [r7, #20]
 800ae10:	4313      	orrs	r3, r2
 800ae12:	617b      	str	r3, [r7, #20]
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae1a:	f023 0303 	bic.w	r3, r3, #3
 800ae1e:	613b      	str	r3, [r7, #16]
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	689a      	ldr	r2, [r3, #8]
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	021b      	lsls	r3, r3, #8
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	693a      	ldr	r2, [r7, #16]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	613b      	str	r3, [r7, #16]
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ae38:	f023 030c 	bic.w	r3, r3, #12
 800ae3c:	613b      	str	r3, [r7, #16]
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae48:	613b      	str	r3, [r7, #16]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	68da      	ldr	r2, [r3, #12]
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	69db      	ldr	r3, [r3, #28]
 800ae52:	021b      	lsls	r3, r3, #8
 800ae54:	4313      	orrs	r3, r2
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	613b      	str	r3, [r7, #16]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	011a      	lsls	r2, r3, #4
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	6a1b      	ldr	r3, [r3, #32]
 800ae66:	031b      	lsls	r3, r3, #12
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	613b      	str	r3, [r7, #16]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ae76:	60fb      	str	r3, [r7, #12]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ae7e:	60fb      	str	r3, [r7, #12]
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	685a      	ldr	r2, [r3, #4]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	011b      	lsls	r3, r3, #4
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	60fb      	str	r3, [r7, #12]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	697a      	ldr	r2, [r7, #20]
 800ae98:	609a      	str	r2, [r3, #8]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	693a      	ldr	r2, [r7, #16]
 800aea0:	619a      	str	r2, [r3, #24]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	621a      	str	r2, [r3, #32]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2201      	movs	r2, #1
 800aeae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2201      	movs	r2, #1
 800aec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800aeda:	2300      	movs	r3, #0
 800aedc:	4618      	mov	r0, r3
 800aede:	3718      	adds	r7, #24
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <HAL_TIM_Encoder_Start>:
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aef4:	73fb      	strb	r3, [r7, #15]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aefc:	73bb      	strb	r3, [r7, #14]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af04:	737b      	strb	r3, [r7, #13]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800af0c:	733b      	strb	r3, [r7, #12]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d110      	bne.n	800af36 <HAL_TIM_Encoder_Start+0x52>
 800af14:	7bfb      	ldrb	r3, [r7, #15]
 800af16:	2b01      	cmp	r3, #1
 800af18:	d102      	bne.n	800af20 <HAL_TIM_Encoder_Start+0x3c>
 800af1a:	7b7b      	ldrb	r3, [r7, #13]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d001      	beq.n	800af24 <HAL_TIM_Encoder_Start+0x40>
 800af20:	2301      	movs	r3, #1
 800af22:	e069      	b.n	800aff8 <HAL_TIM_Encoder_Start+0x114>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2202      	movs	r2, #2
 800af28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2202      	movs	r2, #2
 800af30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af34:	e031      	b.n	800af9a <HAL_TIM_Encoder_Start+0xb6>
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2b04      	cmp	r3, #4
 800af3a:	d110      	bne.n	800af5e <HAL_TIM_Encoder_Start+0x7a>
 800af3c:	7bbb      	ldrb	r3, [r7, #14]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d102      	bne.n	800af48 <HAL_TIM_Encoder_Start+0x64>
 800af42:	7b3b      	ldrb	r3, [r7, #12]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d001      	beq.n	800af4c <HAL_TIM_Encoder_Start+0x68>
 800af48:	2301      	movs	r3, #1
 800af4a:	e055      	b.n	800aff8 <HAL_TIM_Encoder_Start+0x114>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2202      	movs	r2, #2
 800af50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2202      	movs	r2, #2
 800af58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af5c:	e01d      	b.n	800af9a <HAL_TIM_Encoder_Start+0xb6>
 800af5e:	7bfb      	ldrb	r3, [r7, #15]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d108      	bne.n	800af76 <HAL_TIM_Encoder_Start+0x92>
 800af64:	7bbb      	ldrb	r3, [r7, #14]
 800af66:	2b01      	cmp	r3, #1
 800af68:	d105      	bne.n	800af76 <HAL_TIM_Encoder_Start+0x92>
 800af6a:	7b7b      	ldrb	r3, [r7, #13]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d102      	bne.n	800af76 <HAL_TIM_Encoder_Start+0x92>
 800af70:	7b3b      	ldrb	r3, [r7, #12]
 800af72:	2b01      	cmp	r3, #1
 800af74:	d001      	beq.n	800af7a <HAL_TIM_Encoder_Start+0x96>
 800af76:	2301      	movs	r3, #1
 800af78:	e03e      	b.n	800aff8 <HAL_TIM_Encoder_Start+0x114>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2202      	movs	r2, #2
 800af7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2202      	movs	r2, #2
 800af86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2202      	movs	r2, #2
 800af8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2202      	movs	r2, #2
 800af96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d003      	beq.n	800afa8 <HAL_TIM_Encoder_Start+0xc4>
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	2b04      	cmp	r3, #4
 800afa4:	d008      	beq.n	800afb8 <HAL_TIM_Encoder_Start+0xd4>
 800afa6:	e00f      	b.n	800afc8 <HAL_TIM_Encoder_Start+0xe4>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	2201      	movs	r2, #1
 800afae:	2100      	movs	r1, #0
 800afb0:	4618      	mov	r0, r3
 800afb2:	f000 ffd3 	bl	800bf5c <TIM_CCxChannelCmd>
 800afb6:	e016      	b.n	800afe6 <HAL_TIM_Encoder_Start+0x102>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2201      	movs	r2, #1
 800afbe:	2104      	movs	r1, #4
 800afc0:	4618      	mov	r0, r3
 800afc2:	f000 ffcb 	bl	800bf5c <TIM_CCxChannelCmd>
 800afc6:	e00e      	b.n	800afe6 <HAL_TIM_Encoder_Start+0x102>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2201      	movs	r2, #1
 800afce:	2100      	movs	r1, #0
 800afd0:	4618      	mov	r0, r3
 800afd2:	f000 ffc3 	bl	800bf5c <TIM_CCxChannelCmd>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2201      	movs	r2, #1
 800afdc:	2104      	movs	r1, #4
 800afde:	4618      	mov	r0, r3
 800afe0:	f000 ffbc 	bl	800bf5c <TIM_CCxChannelCmd>
 800afe4:	bf00      	nop
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f042 0201 	orr.w	r2, r2, #1
 800aff4:	601a      	str	r2, [r3, #0]
 800aff6:	2300      	movs	r3, #0
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <HAL_TIM_IRQHandler>:
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	f003 0302 	and.w	r3, r3, #2
 800b012:	2b02      	cmp	r3, #2
 800b014:	d122      	bne.n	800b05c <HAL_TIM_IRQHandler+0x5c>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	f003 0302 	and.w	r3, r3, #2
 800b020:	2b02      	cmp	r3, #2
 800b022:	d11b      	bne.n	800b05c <HAL_TIM_IRQHandler+0x5c>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f06f 0202 	mvn.w	r2, #2
 800b02c:	611a      	str	r2, [r3, #16]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2201      	movs	r2, #1
 800b032:	771a      	strb	r2, [r3, #28]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	f003 0303 	and.w	r3, r3, #3
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d003      	beq.n	800b04a <HAL_TIM_IRQHandler+0x4a>
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7f6 fc50 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800b048:	e005      	b.n	800b056 <HAL_TIM_IRQHandler+0x56>
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 fb54 	bl	800b6f8 <HAL_TIM_OC_DelayElapsedCallback>
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 fb5b 	bl	800b70c <HAL_TIM_PWM_PulseFinishedCallback>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	771a      	strb	r2, [r3, #28]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	f003 0304 	and.w	r3, r3, #4
 800b066:	2b04      	cmp	r3, #4
 800b068:	d122      	bne.n	800b0b0 <HAL_TIM_IRQHandler+0xb0>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	f003 0304 	and.w	r3, r3, #4
 800b074:	2b04      	cmp	r3, #4
 800b076:	d11b      	bne.n	800b0b0 <HAL_TIM_IRQHandler+0xb0>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f06f 0204 	mvn.w	r2, #4
 800b080:	611a      	str	r2, [r3, #16]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2202      	movs	r2, #2
 800b086:	771a      	strb	r2, [r3, #28]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	699b      	ldr	r3, [r3, #24]
 800b08e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b092:	2b00      	cmp	r3, #0
 800b094:	d003      	beq.n	800b09e <HAL_TIM_IRQHandler+0x9e>
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f7f6 fc26 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800b09c:	e005      	b.n	800b0aa <HAL_TIM_IRQHandler+0xaa>
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fb2a 	bl	800b6f8 <HAL_TIM_OC_DelayElapsedCallback>
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 fb31 	bl	800b70c <HAL_TIM_PWM_PulseFinishedCallback>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	771a      	strb	r2, [r3, #28]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	f003 0308 	and.w	r3, r3, #8
 800b0ba:	2b08      	cmp	r3, #8
 800b0bc:	d122      	bne.n	800b104 <HAL_TIM_IRQHandler+0x104>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	f003 0308 	and.w	r3, r3, #8
 800b0c8:	2b08      	cmp	r3, #8
 800b0ca:	d11b      	bne.n	800b104 <HAL_TIM_IRQHandler+0x104>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f06f 0208 	mvn.w	r2, #8
 800b0d4:	611a      	str	r2, [r3, #16]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2204      	movs	r2, #4
 800b0da:	771a      	strb	r2, [r3, #28]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	f003 0303 	and.w	r3, r3, #3
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d003      	beq.n	800b0f2 <HAL_TIM_IRQHandler+0xf2>
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f7f6 fbfc 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800b0f0:	e005      	b.n	800b0fe <HAL_TIM_IRQHandler+0xfe>
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fb00 	bl	800b6f8 <HAL_TIM_OC_DelayElapsedCallback>
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fb07 	bl	800b70c <HAL_TIM_PWM_PulseFinishedCallback>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	771a      	strb	r2, [r3, #28]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	f003 0310 	and.w	r3, r3, #16
 800b10e:	2b10      	cmp	r3, #16
 800b110:	d122      	bne.n	800b158 <HAL_TIM_IRQHandler+0x158>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	f003 0310 	and.w	r3, r3, #16
 800b11c:	2b10      	cmp	r3, #16
 800b11e:	d11b      	bne.n	800b158 <HAL_TIM_IRQHandler+0x158>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f06f 0210 	mvn.w	r2, #16
 800b128:	611a      	str	r2, [r3, #16]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2208      	movs	r2, #8
 800b12e:	771a      	strb	r2, [r3, #28]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	69db      	ldr	r3, [r3, #28]
 800b136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d003      	beq.n	800b146 <HAL_TIM_IRQHandler+0x146>
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7f6 fbd2 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800b144:	e005      	b.n	800b152 <HAL_TIM_IRQHandler+0x152>
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fad6 	bl	800b6f8 <HAL_TIM_OC_DelayElapsedCallback>
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 fadd 	bl	800b70c <HAL_TIM_PWM_PulseFinishedCallback>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	771a      	strb	r2, [r3, #28]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	2b01      	cmp	r3, #1
 800b164:	d10e      	bne.n	800b184 <HAL_TIM_IRQHandler+0x184>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	f003 0301 	and.w	r3, r3, #1
 800b170:	2b01      	cmp	r3, #1
 800b172:	d107      	bne.n	800b184 <HAL_TIM_IRQHandler+0x184>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f06f 0201 	mvn.w	r2, #1
 800b17c:	611a      	str	r2, [r3, #16]
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 fab0 	bl	800b6e4 <HAL_TIM_PeriodElapsedCallback>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b18e:	2b80      	cmp	r3, #128	; 0x80
 800b190:	d10e      	bne.n	800b1b0 <HAL_TIM_IRQHandler+0x1b0>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b19c:	2b80      	cmp	r3, #128	; 0x80
 800b19e:	d107      	bne.n	800b1b0 <HAL_TIM_IRQHandler+0x1b0>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b1a8:	611a      	str	r2, [r3, #16]
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 ffd4 	bl	800c158 <HAL_TIMEx_BreakCallback>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ba:	2b40      	cmp	r3, #64	; 0x40
 800b1bc:	d10e      	bne.n	800b1dc <HAL_TIM_IRQHandler+0x1dc>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c8:	2b40      	cmp	r3, #64	; 0x40
 800b1ca:	d107      	bne.n	800b1dc <HAL_TIM_IRQHandler+0x1dc>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b1d4:	611a      	str	r2, [r3, #16]
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 faa2 	bl	800b720 <HAL_TIM_TriggerCallback>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	f003 0320 	and.w	r3, r3, #32
 800b1e6:	2b20      	cmp	r3, #32
 800b1e8:	d10e      	bne.n	800b208 <HAL_TIM_IRQHandler+0x208>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	f003 0320 	and.w	r3, r3, #32
 800b1f4:	2b20      	cmp	r3, #32
 800b1f6:	d107      	bne.n	800b208 <HAL_TIM_IRQHandler+0x208>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f06f 0220 	mvn.w	r2, #32
 800b200:	611a      	str	r2, [r3, #16]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 ff9e 	bl	800c144 <HAL_TIMEx_CommutCallback>
 800b208:	bf00      	nop
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <HAL_TIM_IC_ConfigChannel>:
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	607a      	str	r2, [r7, #4]
 800b21c:	2300      	movs	r3, #0
 800b21e:	75fb      	strb	r3, [r7, #23]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b226:	2b01      	cmp	r3, #1
 800b228:	d101      	bne.n	800b22e <HAL_TIM_IC_ConfigChannel+0x1e>
 800b22a:	2302      	movs	r3, #2
 800b22c:	e088      	b.n	800b340 <HAL_TIM_IC_ConfigChannel+0x130>
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2201      	movs	r2, #1
 800b232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d11b      	bne.n	800b274 <HAL_TIM_IC_ConfigChannel+0x64>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6818      	ldr	r0, [r3, #0]
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	6819      	ldr	r1, [r3, #0]
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	685a      	ldr	r2, [r3, #4]
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f000 fcc2 	bl	800bbd4 <TIM_TI1_SetConfig>
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	699a      	ldr	r2, [r3, #24]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f022 020c 	bic.w	r2, r2, #12
 800b25e:	619a      	str	r2, [r3, #24]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	6999      	ldr	r1, [r3, #24]
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	689a      	ldr	r2, [r3, #8]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	430a      	orrs	r2, r1
 800b270:	619a      	str	r2, [r3, #24]
 800b272:	e060      	b.n	800b336 <HAL_TIM_IC_ConfigChannel+0x126>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2b04      	cmp	r3, #4
 800b278:	d11c      	bne.n	800b2b4 <HAL_TIM_IC_ConfigChannel+0xa4>
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6818      	ldr	r0, [r3, #0]
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	6819      	ldr	r1, [r3, #0]
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	685a      	ldr	r2, [r3, #4]
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	f000 fd46 	bl	800bd1a <TIM_TI2_SetConfig>
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	699a      	ldr	r2, [r3, #24]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b29c:	619a      	str	r2, [r3, #24]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	6999      	ldr	r1, [r3, #24]
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	021a      	lsls	r2, r3, #8
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	430a      	orrs	r2, r1
 800b2b0:	619a      	str	r2, [r3, #24]
 800b2b2:	e040      	b.n	800b336 <HAL_TIM_IC_ConfigChannel+0x126>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b08      	cmp	r3, #8
 800b2b8:	d11b      	bne.n	800b2f2 <HAL_TIM_IC_ConfigChannel+0xe2>
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6818      	ldr	r0, [r3, #0]
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	6819      	ldr	r1, [r3, #0]
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	685a      	ldr	r2, [r3, #4]
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	f000 fd93 	bl	800bdf4 <TIM_TI3_SetConfig>
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	69da      	ldr	r2, [r3, #28]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f022 020c 	bic.w	r2, r2, #12
 800b2dc:	61da      	str	r2, [r3, #28]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	69d9      	ldr	r1, [r3, #28]
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	689a      	ldr	r2, [r3, #8]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	430a      	orrs	r2, r1
 800b2ee:	61da      	str	r2, [r3, #28]
 800b2f0:	e021      	b.n	800b336 <HAL_TIM_IC_ConfigChannel+0x126>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2b0c      	cmp	r3, #12
 800b2f6:	d11c      	bne.n	800b332 <HAL_TIM_IC_ConfigChannel+0x122>
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6818      	ldr	r0, [r3, #0]
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	6819      	ldr	r1, [r3, #0]
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	685a      	ldr	r2, [r3, #4]
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	f000 fdb0 	bl	800be6c <TIM_TI4_SetConfig>
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	69da      	ldr	r2, [r3, #28]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b31a:	61da      	str	r2, [r3, #28]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	69d9      	ldr	r1, [r3, #28]
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	021a      	lsls	r2, r3, #8
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	430a      	orrs	r2, r1
 800b32e:	61da      	str	r2, [r3, #28]
 800b330:	e001      	b.n	800b336 <HAL_TIM_IC_ConfigChannel+0x126>
 800b332:	2301      	movs	r3, #1
 800b334:	75fb      	strb	r3, [r7, #23]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b33e:	7dfb      	ldrb	r3, [r7, #23]
 800b340:	4618      	mov	r0, r3
 800b342:	3718      	adds	r7, #24
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <HAL_TIM_PWM_ConfigChannel>:
 800b348:	b580      	push	{r7, lr}
 800b34a:	b086      	sub	sp, #24
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
 800b354:	2300      	movs	r3, #0
 800b356:	75fb      	strb	r3, [r7, #23]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d101      	bne.n	800b366 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b362:	2302      	movs	r3, #2
 800b364:	e0ae      	b.n	800b4c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2201      	movs	r2, #1
 800b36a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2b0c      	cmp	r3, #12
 800b372:	f200 809f 	bhi.w	800b4b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b376:	a201      	add	r2, pc, #4	; (adr r2, 800b37c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37c:	0800b3b1 	.word	0x0800b3b1
 800b380:	0800b4b5 	.word	0x0800b4b5
 800b384:	0800b4b5 	.word	0x0800b4b5
 800b388:	0800b4b5 	.word	0x0800b4b5
 800b38c:	0800b3f1 	.word	0x0800b3f1
 800b390:	0800b4b5 	.word	0x0800b4b5
 800b394:	0800b4b5 	.word	0x0800b4b5
 800b398:	0800b4b5 	.word	0x0800b4b5
 800b39c:	0800b433 	.word	0x0800b433
 800b3a0:	0800b4b5 	.word	0x0800b4b5
 800b3a4:	0800b4b5 	.word	0x0800b4b5
 800b3a8:	0800b4b5 	.word	0x0800b4b5
 800b3ac:	0800b473 	.word	0x0800b473
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68b9      	ldr	r1, [r7, #8]
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f000 fa5c 	bl	800b874 <TIM_OC1_SetConfig>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	699a      	ldr	r2, [r3, #24]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f042 0208 	orr.w	r2, r2, #8
 800b3ca:	619a      	str	r2, [r3, #24]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	699a      	ldr	r2, [r3, #24]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f022 0204 	bic.w	r2, r2, #4
 800b3da:	619a      	str	r2, [r3, #24]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6999      	ldr	r1, [r3, #24]
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	691a      	ldr	r2, [r3, #16]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	430a      	orrs	r2, r1
 800b3ec:	619a      	str	r2, [r3, #24]
 800b3ee:	e064      	b.n	800b4ba <HAL_TIM_PWM_ConfigChannel+0x172>
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	68b9      	ldr	r1, [r7, #8]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 faac 	bl	800b954 <TIM_OC2_SetConfig>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	699a      	ldr	r2, [r3, #24]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b40a:	619a      	str	r2, [r3, #24]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	699a      	ldr	r2, [r3, #24]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b41a:	619a      	str	r2, [r3, #24]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	6999      	ldr	r1, [r3, #24]
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	021a      	lsls	r2, r3, #8
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	430a      	orrs	r2, r1
 800b42e:	619a      	str	r2, [r3, #24]
 800b430:	e043      	b.n	800b4ba <HAL_TIM_PWM_ConfigChannel+0x172>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68b9      	ldr	r1, [r7, #8]
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 fb01 	bl	800ba40 <TIM_OC3_SetConfig>
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	69da      	ldr	r2, [r3, #28]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f042 0208 	orr.w	r2, r2, #8
 800b44c:	61da      	str	r2, [r3, #28]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	69da      	ldr	r2, [r3, #28]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f022 0204 	bic.w	r2, r2, #4
 800b45c:	61da      	str	r2, [r3, #28]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	69d9      	ldr	r1, [r3, #28]
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	691a      	ldr	r2, [r3, #16]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	430a      	orrs	r2, r1
 800b46e:	61da      	str	r2, [r3, #28]
 800b470:	e023      	b.n	800b4ba <HAL_TIM_PWM_ConfigChannel+0x172>
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68b9      	ldr	r1, [r7, #8]
 800b478:	4618      	mov	r0, r3
 800b47a:	f000 fb55 	bl	800bb28 <TIM_OC4_SetConfig>
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	69da      	ldr	r2, [r3, #28]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b48c:	61da      	str	r2, [r3, #28]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	69da      	ldr	r2, [r3, #28]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b49c:	61da      	str	r2, [r3, #28]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	69d9      	ldr	r1, [r3, #28]
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	021a      	lsls	r2, r3, #8
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	430a      	orrs	r2, r1
 800b4b0:	61da      	str	r2, [r3, #28]
 800b4b2:	e002      	b.n	800b4ba <HAL_TIM_PWM_ConfigChannel+0x172>
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	75fb      	strb	r3, [r7, #23]
 800b4b8:	bf00      	nop
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b4c2:	7dfb      	ldrb	r3, [r7, #23]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3718      	adds	r7, #24
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <HAL_TIM_ConfigClockSource>:
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	73fb      	strb	r3, [r7, #15]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d101      	bne.n	800b4e8 <HAL_TIM_ConfigClockSource+0x1c>
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	e0b4      	b.n	800b652 <HAL_TIM_ConfigClockSource+0x186>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	60bb      	str	r3, [r7, #8]
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b506:	60bb      	str	r3, [r7, #8]
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b50e:	60bb      	str	r3, [r7, #8]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68ba      	ldr	r2, [r7, #8]
 800b516:	609a      	str	r2, [r3, #8]
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b520:	d03e      	beq.n	800b5a0 <HAL_TIM_ConfigClockSource+0xd4>
 800b522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b526:	f200 8087 	bhi.w	800b638 <HAL_TIM_ConfigClockSource+0x16c>
 800b52a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b52e:	f000 8086 	beq.w	800b63e <HAL_TIM_ConfigClockSource+0x172>
 800b532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b536:	d87f      	bhi.n	800b638 <HAL_TIM_ConfigClockSource+0x16c>
 800b538:	2b70      	cmp	r3, #112	; 0x70
 800b53a:	d01a      	beq.n	800b572 <HAL_TIM_ConfigClockSource+0xa6>
 800b53c:	2b70      	cmp	r3, #112	; 0x70
 800b53e:	d87b      	bhi.n	800b638 <HAL_TIM_ConfigClockSource+0x16c>
 800b540:	2b60      	cmp	r3, #96	; 0x60
 800b542:	d050      	beq.n	800b5e6 <HAL_TIM_ConfigClockSource+0x11a>
 800b544:	2b60      	cmp	r3, #96	; 0x60
 800b546:	d877      	bhi.n	800b638 <HAL_TIM_ConfigClockSource+0x16c>
 800b548:	2b50      	cmp	r3, #80	; 0x50
 800b54a:	d03c      	beq.n	800b5c6 <HAL_TIM_ConfigClockSource+0xfa>
 800b54c:	2b50      	cmp	r3, #80	; 0x50
 800b54e:	d873      	bhi.n	800b638 <HAL_TIM_ConfigClockSource+0x16c>
 800b550:	2b40      	cmp	r3, #64	; 0x40
 800b552:	d058      	beq.n	800b606 <HAL_TIM_ConfigClockSource+0x13a>
 800b554:	2b40      	cmp	r3, #64	; 0x40
 800b556:	d86f      	bhi.n	800b638 <HAL_TIM_ConfigClockSource+0x16c>
 800b558:	2b30      	cmp	r3, #48	; 0x30
 800b55a:	d064      	beq.n	800b626 <HAL_TIM_ConfigClockSource+0x15a>
 800b55c:	2b30      	cmp	r3, #48	; 0x30
 800b55e:	d86b      	bhi.n	800b638 <HAL_TIM_ConfigClockSource+0x16c>
 800b560:	2b20      	cmp	r3, #32
 800b562:	d060      	beq.n	800b626 <HAL_TIM_ConfigClockSource+0x15a>
 800b564:	2b20      	cmp	r3, #32
 800b566:	d867      	bhi.n	800b638 <HAL_TIM_ConfigClockSource+0x16c>
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d05c      	beq.n	800b626 <HAL_TIM_ConfigClockSource+0x15a>
 800b56c:	2b10      	cmp	r3, #16
 800b56e:	d05a      	beq.n	800b626 <HAL_TIM_ConfigClockSource+0x15a>
 800b570:	e062      	b.n	800b638 <HAL_TIM_ConfigClockSource+0x16c>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6818      	ldr	r0, [r3, #0]
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	6899      	ldr	r1, [r3, #8]
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	685a      	ldr	r2, [r3, #4]
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	f000 fccb 	bl	800bf1c <TIM_ETR_SetConfig>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	60bb      	str	r3, [r7, #8]
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b594:	60bb      	str	r3, [r7, #8]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68ba      	ldr	r2, [r7, #8]
 800b59c:	609a      	str	r2, [r3, #8]
 800b59e:	e04f      	b.n	800b640 <HAL_TIM_ConfigClockSource+0x174>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6818      	ldr	r0, [r3, #0]
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	6899      	ldr	r1, [r3, #8]
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	f000 fcb4 	bl	800bf1c <TIM_ETR_SetConfig>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	689a      	ldr	r2, [r3, #8]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5c2:	609a      	str	r2, [r3, #8]
 800b5c4:	e03c      	b.n	800b640 <HAL_TIM_ConfigClockSource+0x174>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	6859      	ldr	r1, [r3, #4]
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	f000 fb72 	bl	800bcbc <TIM_TI1_ConfigInputStage>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2150      	movs	r1, #80	; 0x50
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f000 fc81 	bl	800bee6 <TIM_ITRx_SetConfig>
 800b5e4:	e02c      	b.n	800b640 <HAL_TIM_ConfigClockSource+0x174>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6818      	ldr	r0, [r3, #0]
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	6859      	ldr	r1, [r3, #4]
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	f000 fbce 	bl	800bd94 <TIM_TI2_ConfigInputStage>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2160      	movs	r1, #96	; 0x60
 800b5fe:	4618      	mov	r0, r3
 800b600:	f000 fc71 	bl	800bee6 <TIM_ITRx_SetConfig>
 800b604:	e01c      	b.n	800b640 <HAL_TIM_ConfigClockSource+0x174>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6818      	ldr	r0, [r3, #0]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	6859      	ldr	r1, [r3, #4]
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	461a      	mov	r2, r3
 800b614:	f000 fb52 	bl	800bcbc <TIM_TI1_ConfigInputStage>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2140      	movs	r1, #64	; 0x40
 800b61e:	4618      	mov	r0, r3
 800b620:	f000 fc61 	bl	800bee6 <TIM_ITRx_SetConfig>
 800b624:	e00c      	b.n	800b640 <HAL_TIM_ConfigClockSource+0x174>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4619      	mov	r1, r3
 800b630:	4610      	mov	r0, r2
 800b632:	f000 fc58 	bl	800bee6 <TIM_ITRx_SetConfig>
 800b636:	e003      	b.n	800b640 <HAL_TIM_ConfigClockSource+0x174>
 800b638:	2301      	movs	r3, #1
 800b63a:	73fb      	strb	r3, [r7, #15]
 800b63c:	e000      	b.n	800b640 <HAL_TIM_ConfigClockSource+0x174>
 800b63e:	bf00      	nop
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2201      	movs	r2, #1
 800b644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b650:	7bfb      	ldrb	r3, [r7, #15]
 800b652:	4618      	mov	r0, r3
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
	...

0800b65c <HAL_TIM_ReadCapturedValue>:
 800b65c:	b480      	push	{r7}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
 800b666:	2300      	movs	r3, #0
 800b668:	60fb      	str	r3, [r7, #12]
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2b0c      	cmp	r3, #12
 800b66e:	d831      	bhi.n	800b6d4 <HAL_TIM_ReadCapturedValue+0x78>
 800b670:	a201      	add	r2, pc, #4	; (adr r2, 800b678 <HAL_TIM_ReadCapturedValue+0x1c>)
 800b672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b676:	bf00      	nop
 800b678:	0800b6ad 	.word	0x0800b6ad
 800b67c:	0800b6d5 	.word	0x0800b6d5
 800b680:	0800b6d5 	.word	0x0800b6d5
 800b684:	0800b6d5 	.word	0x0800b6d5
 800b688:	0800b6b7 	.word	0x0800b6b7
 800b68c:	0800b6d5 	.word	0x0800b6d5
 800b690:	0800b6d5 	.word	0x0800b6d5
 800b694:	0800b6d5 	.word	0x0800b6d5
 800b698:	0800b6c1 	.word	0x0800b6c1
 800b69c:	0800b6d5 	.word	0x0800b6d5
 800b6a0:	0800b6d5 	.word	0x0800b6d5
 800b6a4:	0800b6d5 	.word	0x0800b6d5
 800b6a8:	0800b6cb 	.word	0x0800b6cb
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6b2:	60fb      	str	r3, [r7, #12]
 800b6b4:	e00f      	b.n	800b6d6 <HAL_TIM_ReadCapturedValue+0x7a>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6bc:	60fb      	str	r3, [r7, #12]
 800b6be:	e00a      	b.n	800b6d6 <HAL_TIM_ReadCapturedValue+0x7a>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c6:	60fb      	str	r3, [r7, #12]
 800b6c8:	e005      	b.n	800b6d6 <HAL_TIM_ReadCapturedValue+0x7a>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	e000      	b.n	800b6d6 <HAL_TIM_ReadCapturedValue+0x7a>
 800b6d4:	bf00      	nop
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3714      	adds	r7, #20
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <HAL_TIM_PeriodElapsedCallback>:
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	bf00      	nop
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <HAL_TIM_OC_DelayElapsedCallback>:
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <HAL_TIM_PWM_PulseFinishedCallback>:
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	bf00      	nop
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <HAL_TIM_TriggerCallback>:
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	bf00      	nop
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <TIM_Base_SetConfig>:
 800b734:	b480      	push	{r7}
 800b736:	b085      	sub	sp, #20
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	60fb      	str	r3, [r7, #12]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4a40      	ldr	r2, [pc, #256]	; (800b848 <TIM_Base_SetConfig+0x114>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d013      	beq.n	800b774 <TIM_Base_SetConfig+0x40>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b752:	d00f      	beq.n	800b774 <TIM_Base_SetConfig+0x40>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	4a3d      	ldr	r2, [pc, #244]	; (800b84c <TIM_Base_SetConfig+0x118>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d00b      	beq.n	800b774 <TIM_Base_SetConfig+0x40>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	4a3c      	ldr	r2, [pc, #240]	; (800b850 <TIM_Base_SetConfig+0x11c>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d007      	beq.n	800b774 <TIM_Base_SetConfig+0x40>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4a3b      	ldr	r2, [pc, #236]	; (800b854 <TIM_Base_SetConfig+0x120>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d003      	beq.n	800b774 <TIM_Base_SetConfig+0x40>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a3a      	ldr	r2, [pc, #232]	; (800b858 <TIM_Base_SetConfig+0x124>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d108      	bne.n	800b786 <TIM_Base_SetConfig+0x52>
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b77a:	60fb      	str	r3, [r7, #12]
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	4313      	orrs	r3, r2
 800b784:	60fb      	str	r3, [r7, #12]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a2f      	ldr	r2, [pc, #188]	; (800b848 <TIM_Base_SetConfig+0x114>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d02b      	beq.n	800b7e6 <TIM_Base_SetConfig+0xb2>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b794:	d027      	beq.n	800b7e6 <TIM_Base_SetConfig+0xb2>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4a2c      	ldr	r2, [pc, #176]	; (800b84c <TIM_Base_SetConfig+0x118>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d023      	beq.n	800b7e6 <TIM_Base_SetConfig+0xb2>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4a2b      	ldr	r2, [pc, #172]	; (800b850 <TIM_Base_SetConfig+0x11c>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d01f      	beq.n	800b7e6 <TIM_Base_SetConfig+0xb2>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4a2a      	ldr	r2, [pc, #168]	; (800b854 <TIM_Base_SetConfig+0x120>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d01b      	beq.n	800b7e6 <TIM_Base_SetConfig+0xb2>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	4a29      	ldr	r2, [pc, #164]	; (800b858 <TIM_Base_SetConfig+0x124>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d017      	beq.n	800b7e6 <TIM_Base_SetConfig+0xb2>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	4a28      	ldr	r2, [pc, #160]	; (800b85c <TIM_Base_SetConfig+0x128>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d013      	beq.n	800b7e6 <TIM_Base_SetConfig+0xb2>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4a27      	ldr	r2, [pc, #156]	; (800b860 <TIM_Base_SetConfig+0x12c>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d00f      	beq.n	800b7e6 <TIM_Base_SetConfig+0xb2>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a26      	ldr	r2, [pc, #152]	; (800b864 <TIM_Base_SetConfig+0x130>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d00b      	beq.n	800b7e6 <TIM_Base_SetConfig+0xb2>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a25      	ldr	r2, [pc, #148]	; (800b868 <TIM_Base_SetConfig+0x134>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d007      	beq.n	800b7e6 <TIM_Base_SetConfig+0xb2>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a24      	ldr	r2, [pc, #144]	; (800b86c <TIM_Base_SetConfig+0x138>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d003      	beq.n	800b7e6 <TIM_Base_SetConfig+0xb2>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a23      	ldr	r2, [pc, #140]	; (800b870 <TIM_Base_SetConfig+0x13c>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d108      	bne.n	800b7f8 <TIM_Base_SetConfig+0xc4>
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7ec:	60fb      	str	r3, [r7, #12]
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	60fb      	str	r3, [r7, #12]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	4313      	orrs	r3, r2
 800b804:	60fb      	str	r3, [r7, #12]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	601a      	str	r2, [r3, #0]
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	689a      	ldr	r2, [r3, #8]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	62da      	str	r2, [r3, #44]	; 0x2c
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	629a      	str	r2, [r3, #40]	; 0x28
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	4a0a      	ldr	r2, [pc, #40]	; (800b848 <TIM_Base_SetConfig+0x114>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d003      	beq.n	800b82c <TIM_Base_SetConfig+0xf8>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a0c      	ldr	r2, [pc, #48]	; (800b858 <TIM_Base_SetConfig+0x124>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d103      	bne.n	800b834 <TIM_Base_SetConfig+0x100>
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	691a      	ldr	r2, [r3, #16]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	631a      	str	r2, [r3, #48]	; 0x30
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	615a      	str	r2, [r3, #20]
 800b83a:	bf00      	nop
 800b83c:	3714      	adds	r7, #20
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	40010000 	.word	0x40010000
 800b84c:	40000400 	.word	0x40000400
 800b850:	40000800 	.word	0x40000800
 800b854:	40000c00 	.word	0x40000c00
 800b858:	40010400 	.word	0x40010400
 800b85c:	40014000 	.word	0x40014000
 800b860:	40014400 	.word	0x40014400
 800b864:	40014800 	.word	0x40014800
 800b868:	40001800 	.word	0x40001800
 800b86c:	40001c00 	.word	0x40001c00
 800b870:	40002000 	.word	0x40002000

0800b874 <TIM_OC1_SetConfig>:
 800b874:	b480      	push	{r7}
 800b876:	b087      	sub	sp, #28
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a1b      	ldr	r3, [r3, #32]
 800b882:	f023 0201 	bic.w	r2, r3, #1
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	621a      	str	r2, [r3, #32]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a1b      	ldr	r3, [r3, #32]
 800b88e:	617b      	str	r3, [r7, #20]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	613b      	str	r3, [r7, #16]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	60fb      	str	r3, [r7, #12]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8a2:	60fb      	str	r3, [r7, #12]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f023 0303 	bic.w	r3, r3, #3
 800b8aa:	60fb      	str	r3, [r7, #12]
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	60fb      	str	r3, [r7, #12]
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f023 0302 	bic.w	r3, r3, #2
 800b8bc:	617b      	str	r3, [r7, #20]
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	697a      	ldr	r2, [r7, #20]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	617b      	str	r3, [r7, #20]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a20      	ldr	r2, [pc, #128]	; (800b94c <TIM_OC1_SetConfig+0xd8>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d003      	beq.n	800b8d8 <TIM_OC1_SetConfig+0x64>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a1f      	ldr	r2, [pc, #124]	; (800b950 <TIM_OC1_SetConfig+0xdc>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d10c      	bne.n	800b8f2 <TIM_OC1_SetConfig+0x7e>
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	f023 0308 	bic.w	r3, r3, #8
 800b8de:	617b      	str	r3, [r7, #20]
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	697a      	ldr	r2, [r7, #20]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	617b      	str	r3, [r7, #20]
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f023 0304 	bic.w	r3, r3, #4
 800b8f0:	617b      	str	r3, [r7, #20]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	4a15      	ldr	r2, [pc, #84]	; (800b94c <TIM_OC1_SetConfig+0xd8>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d003      	beq.n	800b902 <TIM_OC1_SetConfig+0x8e>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4a14      	ldr	r2, [pc, #80]	; (800b950 <TIM_OC1_SetConfig+0xdc>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d111      	bne.n	800b926 <TIM_OC1_SetConfig+0xb2>
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b908:	613b      	str	r3, [r7, #16]
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b910:	613b      	str	r3, [r7, #16]
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	695b      	ldr	r3, [r3, #20]
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	4313      	orrs	r3, r2
 800b91a:	613b      	str	r3, [r7, #16]
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	699b      	ldr	r3, [r3, #24]
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	4313      	orrs	r3, r2
 800b924:	613b      	str	r3, [r7, #16]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	693a      	ldr	r2, [r7, #16]
 800b92a:	605a      	str	r2, [r3, #4]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	619a      	str	r2, [r3, #24]
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	635a      	str	r2, [r3, #52]	; 0x34
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	697a      	ldr	r2, [r7, #20]
 800b93e:	621a      	str	r2, [r3, #32]
 800b940:	bf00      	nop
 800b942:	371c      	adds	r7, #28
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr
 800b94c:	40010000 	.word	0x40010000
 800b950:	40010400 	.word	0x40010400

0800b954 <TIM_OC2_SetConfig>:
 800b954:	b480      	push	{r7}
 800b956:	b087      	sub	sp, #28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a1b      	ldr	r3, [r3, #32]
 800b962:	f023 0210 	bic.w	r2, r3, #16
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	621a      	str	r2, [r3, #32]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6a1b      	ldr	r3, [r3, #32]
 800b96e:	617b      	str	r3, [r7, #20]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	613b      	str	r3, [r7, #16]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	699b      	ldr	r3, [r3, #24]
 800b97a:	60fb      	str	r3, [r7, #12]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b982:	60fb      	str	r3, [r7, #12]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b98a:	60fb      	str	r3, [r7, #12]
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	021b      	lsls	r3, r3, #8
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	4313      	orrs	r3, r2
 800b996:	60fb      	str	r3, [r7, #12]
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	f023 0320 	bic.w	r3, r3, #32
 800b99e:	617b      	str	r3, [r7, #20]
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	011b      	lsls	r3, r3, #4
 800b9a6:	697a      	ldr	r2, [r7, #20]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	617b      	str	r3, [r7, #20]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4a22      	ldr	r2, [pc, #136]	; (800ba38 <TIM_OC2_SetConfig+0xe4>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d003      	beq.n	800b9bc <TIM_OC2_SetConfig+0x68>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	4a21      	ldr	r2, [pc, #132]	; (800ba3c <TIM_OC2_SetConfig+0xe8>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d10d      	bne.n	800b9d8 <TIM_OC2_SetConfig+0x84>
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9c2:	617b      	str	r3, [r7, #20]
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	011b      	lsls	r3, r3, #4
 800b9ca:	697a      	ldr	r2, [r7, #20]
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	617b      	str	r3, [r7, #20]
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9d6:	617b      	str	r3, [r7, #20]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	4a17      	ldr	r2, [pc, #92]	; (800ba38 <TIM_OC2_SetConfig+0xe4>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d003      	beq.n	800b9e8 <TIM_OC2_SetConfig+0x94>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4a16      	ldr	r2, [pc, #88]	; (800ba3c <TIM_OC2_SetConfig+0xe8>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d113      	bne.n	800ba10 <TIM_OC2_SetConfig+0xbc>
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b9ee:	613b      	str	r3, [r7, #16]
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9f6:	613b      	str	r3, [r7, #16]
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	695b      	ldr	r3, [r3, #20]
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	693a      	ldr	r2, [r7, #16]
 800ba00:	4313      	orrs	r3, r2
 800ba02:	613b      	str	r3, [r7, #16]
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	693a      	ldr	r2, [r7, #16]
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	613b      	str	r3, [r7, #16]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	693a      	ldr	r2, [r7, #16]
 800ba14:	605a      	str	r2, [r3, #4]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	619a      	str	r2, [r3, #24]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	685a      	ldr	r2, [r3, #4]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	639a      	str	r2, [r3, #56]	; 0x38
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	621a      	str	r2, [r3, #32]
 800ba2a:	bf00      	nop
 800ba2c:	371c      	adds	r7, #28
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	40010000 	.word	0x40010000
 800ba3c:	40010400 	.word	0x40010400

0800ba40 <TIM_OC3_SetConfig>:
 800ba40:	b480      	push	{r7}
 800ba42:	b087      	sub	sp, #28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a1b      	ldr	r3, [r3, #32]
 800ba4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	621a      	str	r2, [r3, #32]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a1b      	ldr	r3, [r3, #32]
 800ba5a:	617b      	str	r3, [r7, #20]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	613b      	str	r3, [r7, #16]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	69db      	ldr	r3, [r3, #28]
 800ba66:	60fb      	str	r3, [r7, #12]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba6e:	60fb      	str	r3, [r7, #12]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f023 0303 	bic.w	r3, r3, #3
 800ba76:	60fb      	str	r3, [r7, #12]
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	60fb      	str	r3, [r7, #12]
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba88:	617b      	str	r3, [r7, #20]
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	021b      	lsls	r3, r3, #8
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	617b      	str	r3, [r7, #20]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	4a21      	ldr	r2, [pc, #132]	; (800bb20 <TIM_OC3_SetConfig+0xe0>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d003      	beq.n	800baa6 <TIM_OC3_SetConfig+0x66>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4a20      	ldr	r2, [pc, #128]	; (800bb24 <TIM_OC3_SetConfig+0xe4>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d10d      	bne.n	800bac2 <TIM_OC3_SetConfig+0x82>
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800baac:	617b      	str	r3, [r7, #20]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	021b      	lsls	r3, r3, #8
 800bab4:	697a      	ldr	r2, [r7, #20]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	617b      	str	r3, [r7, #20]
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bac0:	617b      	str	r3, [r7, #20]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4a16      	ldr	r2, [pc, #88]	; (800bb20 <TIM_OC3_SetConfig+0xe0>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d003      	beq.n	800bad2 <TIM_OC3_SetConfig+0x92>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a15      	ldr	r2, [pc, #84]	; (800bb24 <TIM_OC3_SetConfig+0xe4>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d113      	bne.n	800bafa <TIM_OC3_SetConfig+0xba>
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bad8:	613b      	str	r3, [r7, #16]
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bae0:	613b      	str	r3, [r7, #16]
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	695b      	ldr	r3, [r3, #20]
 800bae6:	011b      	lsls	r3, r3, #4
 800bae8:	693a      	ldr	r2, [r7, #16]
 800baea:	4313      	orrs	r3, r2
 800baec:	613b      	str	r3, [r7, #16]
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	699b      	ldr	r3, [r3, #24]
 800baf2:	011b      	lsls	r3, r3, #4
 800baf4:	693a      	ldr	r2, [r7, #16]
 800baf6:	4313      	orrs	r3, r2
 800baf8:	613b      	str	r3, [r7, #16]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	693a      	ldr	r2, [r7, #16]
 800bafe:	605a      	str	r2, [r3, #4]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	61da      	str	r2, [r3, #28]
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	63da      	str	r2, [r3, #60]	; 0x3c
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	697a      	ldr	r2, [r7, #20]
 800bb12:	621a      	str	r2, [r3, #32]
 800bb14:	bf00      	nop
 800bb16:	371c      	adds	r7, #28
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr
 800bb20:	40010000 	.word	0x40010000
 800bb24:	40010400 	.word	0x40010400

0800bb28 <TIM_OC4_SetConfig>:
 800bb28:	b480      	push	{r7}
 800bb2a:	b087      	sub	sp, #28
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6a1b      	ldr	r3, [r3, #32]
 800bb36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	621a      	str	r2, [r3, #32]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6a1b      	ldr	r3, [r3, #32]
 800bb42:	613b      	str	r3, [r7, #16]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	617b      	str	r3, [r7, #20]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	69db      	ldr	r3, [r3, #28]
 800bb4e:	60fb      	str	r3, [r7, #12]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb56:	60fb      	str	r3, [r7, #12]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb5e:	60fb      	str	r3, [r7, #12]
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	021b      	lsls	r3, r3, #8
 800bb66:	68fa      	ldr	r2, [r7, #12]
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	60fb      	str	r3, [r7, #12]
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb72:	613b      	str	r3, [r7, #16]
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	031b      	lsls	r3, r3, #12
 800bb7a:	693a      	ldr	r2, [r7, #16]
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	613b      	str	r3, [r7, #16]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a12      	ldr	r2, [pc, #72]	; (800bbcc <TIM_OC4_SetConfig+0xa4>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d003      	beq.n	800bb90 <TIM_OC4_SetConfig+0x68>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4a11      	ldr	r2, [pc, #68]	; (800bbd0 <TIM_OC4_SetConfig+0xa8>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d109      	bne.n	800bba4 <TIM_OC4_SetConfig+0x7c>
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb96:	617b      	str	r3, [r7, #20]
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	019b      	lsls	r3, r3, #6
 800bb9e:	697a      	ldr	r2, [r7, #20]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	617b      	str	r3, [r7, #20]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	605a      	str	r2, [r3, #4]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	61da      	str	r2, [r3, #28]
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	641a      	str	r2, [r3, #64]	; 0x40
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	621a      	str	r2, [r3, #32]
 800bbbe:	bf00      	nop
 800bbc0:	371c      	adds	r7, #28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	40010000 	.word	0x40010000
 800bbd0:	40010400 	.word	0x40010400

0800bbd4 <TIM_TI1_SetConfig>:
 800bbd4:	b480      	push	{r7}
 800bbd6:	b087      	sub	sp, #28
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
 800bbe0:	603b      	str	r3, [r7, #0]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6a1b      	ldr	r3, [r3, #32]
 800bbe6:	f023 0201 	bic.w	r2, r3, #1
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	621a      	str	r2, [r3, #32]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	699b      	ldr	r3, [r3, #24]
 800bbf2:	617b      	str	r3, [r7, #20]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6a1b      	ldr	r3, [r3, #32]
 800bbf8:	613b      	str	r3, [r7, #16]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	4a28      	ldr	r2, [pc, #160]	; (800bca0 <TIM_TI1_SetConfig+0xcc>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d01b      	beq.n	800bc3a <TIM_TI1_SetConfig+0x66>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc08:	d017      	beq.n	800bc3a <TIM_TI1_SetConfig+0x66>
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	4a25      	ldr	r2, [pc, #148]	; (800bca4 <TIM_TI1_SetConfig+0xd0>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d013      	beq.n	800bc3a <TIM_TI1_SetConfig+0x66>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	4a24      	ldr	r2, [pc, #144]	; (800bca8 <TIM_TI1_SetConfig+0xd4>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d00f      	beq.n	800bc3a <TIM_TI1_SetConfig+0x66>
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	4a23      	ldr	r2, [pc, #140]	; (800bcac <TIM_TI1_SetConfig+0xd8>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d00b      	beq.n	800bc3a <TIM_TI1_SetConfig+0x66>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	4a22      	ldr	r2, [pc, #136]	; (800bcb0 <TIM_TI1_SetConfig+0xdc>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d007      	beq.n	800bc3a <TIM_TI1_SetConfig+0x66>
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	4a21      	ldr	r2, [pc, #132]	; (800bcb4 <TIM_TI1_SetConfig+0xe0>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d003      	beq.n	800bc3a <TIM_TI1_SetConfig+0x66>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	4a20      	ldr	r2, [pc, #128]	; (800bcb8 <TIM_TI1_SetConfig+0xe4>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d101      	bne.n	800bc3e <TIM_TI1_SetConfig+0x6a>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e000      	b.n	800bc40 <TIM_TI1_SetConfig+0x6c>
 800bc3e:	2300      	movs	r3, #0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d008      	beq.n	800bc56 <TIM_TI1_SetConfig+0x82>
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	f023 0303 	bic.w	r3, r3, #3
 800bc4a:	617b      	str	r3, [r7, #20]
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4313      	orrs	r3, r2
 800bc52:	617b      	str	r3, [r7, #20]
 800bc54:	e003      	b.n	800bc5e <TIM_TI1_SetConfig+0x8a>
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	f043 0301 	orr.w	r3, r3, #1
 800bc5c:	617b      	str	r3, [r7, #20]
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc64:	617b      	str	r3, [r7, #20]
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	011b      	lsls	r3, r3, #4
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	697a      	ldr	r2, [r7, #20]
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	617b      	str	r3, [r7, #20]
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	f023 030a 	bic.w	r3, r3, #10
 800bc78:	613b      	str	r3, [r7, #16]
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	f003 030a 	and.w	r3, r3, #10
 800bc80:	693a      	ldr	r2, [r7, #16]
 800bc82:	4313      	orrs	r3, r2
 800bc84:	613b      	str	r3, [r7, #16]
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	697a      	ldr	r2, [r7, #20]
 800bc8a:	619a      	str	r2, [r3, #24]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	693a      	ldr	r2, [r7, #16]
 800bc90:	621a      	str	r2, [r3, #32]
 800bc92:	bf00      	nop
 800bc94:	371c      	adds	r7, #28
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	40010000 	.word	0x40010000
 800bca4:	40000400 	.word	0x40000400
 800bca8:	40000800 	.word	0x40000800
 800bcac:	40000c00 	.word	0x40000c00
 800bcb0:	40010400 	.word	0x40010400
 800bcb4:	40014000 	.word	0x40014000
 800bcb8:	40001800 	.word	0x40001800

0800bcbc <TIM_TI1_ConfigInputStage>:
 800bcbc:	b480      	push	{r7}
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6a1b      	ldr	r3, [r3, #32]
 800bccc:	617b      	str	r3, [r7, #20]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	6a1b      	ldr	r3, [r3, #32]
 800bcd2:	f023 0201 	bic.w	r2, r3, #1
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	621a      	str	r2, [r3, #32]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	699b      	ldr	r3, [r3, #24]
 800bcde:	613b      	str	r3, [r7, #16]
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bce6:	613b      	str	r3, [r7, #16]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	011b      	lsls	r3, r3, #4
 800bcec:	693a      	ldr	r2, [r7, #16]
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	613b      	str	r3, [r7, #16]
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	f023 030a 	bic.w	r3, r3, #10
 800bcf8:	617b      	str	r3, [r7, #20]
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	617b      	str	r3, [r7, #20]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	693a      	ldr	r2, [r7, #16]
 800bd06:	619a      	str	r2, [r3, #24]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	697a      	ldr	r2, [r7, #20]
 800bd0c:	621a      	str	r2, [r3, #32]
 800bd0e:	bf00      	nop
 800bd10:	371c      	adds	r7, #28
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <TIM_TI2_SetConfig>:
 800bd1a:	b480      	push	{r7}
 800bd1c:	b087      	sub	sp, #28
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	60f8      	str	r0, [r7, #12]
 800bd22:	60b9      	str	r1, [r7, #8]
 800bd24:	607a      	str	r2, [r7, #4]
 800bd26:	603b      	str	r3, [r7, #0]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6a1b      	ldr	r3, [r3, #32]
 800bd2c:	f023 0210 	bic.w	r2, r3, #16
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	621a      	str	r2, [r3, #32]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	699b      	ldr	r3, [r3, #24]
 800bd38:	617b      	str	r3, [r7, #20]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6a1b      	ldr	r3, [r3, #32]
 800bd3e:	613b      	str	r3, [r7, #16]
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd46:	617b      	str	r3, [r7, #20]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	021b      	lsls	r3, r3, #8
 800bd4c:	697a      	ldr	r2, [r7, #20]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	617b      	str	r3, [r7, #20]
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bd58:	617b      	str	r3, [r7, #20]
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	031b      	lsls	r3, r3, #12
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	697a      	ldr	r2, [r7, #20]
 800bd62:	4313      	orrs	r3, r2
 800bd64:	617b      	str	r3, [r7, #20]
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bd6c:	613b      	str	r3, [r7, #16]
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	011b      	lsls	r3, r3, #4
 800bd72:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bd76:	693a      	ldr	r2, [r7, #16]
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	613b      	str	r3, [r7, #16]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	619a      	str	r2, [r3, #24]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	693a      	ldr	r2, [r7, #16]
 800bd86:	621a      	str	r2, [r3, #32]
 800bd88:	bf00      	nop
 800bd8a:	371c      	adds	r7, #28
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <TIM_TI2_ConfigInputStage>:
 800bd94:	b480      	push	{r7}
 800bd96:	b087      	sub	sp, #28
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6a1b      	ldr	r3, [r3, #32]
 800bda4:	f023 0210 	bic.w	r2, r3, #16
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	621a      	str	r2, [r3, #32]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	699b      	ldr	r3, [r3, #24]
 800bdb0:	617b      	str	r3, [r7, #20]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6a1b      	ldr	r3, [r3, #32]
 800bdb6:	613b      	str	r3, [r7, #16]
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bdbe:	617b      	str	r3, [r7, #20]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	031b      	lsls	r3, r3, #12
 800bdc4:	697a      	ldr	r2, [r7, #20]
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	617b      	str	r3, [r7, #20]
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bdd0:	613b      	str	r3, [r7, #16]
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	011b      	lsls	r3, r3, #4
 800bdd6:	693a      	ldr	r2, [r7, #16]
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	613b      	str	r3, [r7, #16]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	697a      	ldr	r2, [r7, #20]
 800bde0:	619a      	str	r2, [r3, #24]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	621a      	str	r2, [r3, #32]
 800bde8:	bf00      	nop
 800bdea:	371c      	adds	r7, #28
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <TIM_TI3_SetConfig>:
 800bdf4:	b480      	push	{r7}
 800bdf6:	b087      	sub	sp, #28
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
 800be00:	603b      	str	r3, [r7, #0]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6a1b      	ldr	r3, [r3, #32]
 800be06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	621a      	str	r2, [r3, #32]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	69db      	ldr	r3, [r3, #28]
 800be12:	617b      	str	r3, [r7, #20]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6a1b      	ldr	r3, [r3, #32]
 800be18:	613b      	str	r3, [r7, #16]
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	f023 0303 	bic.w	r3, r3, #3
 800be20:	617b      	str	r3, [r7, #20]
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	4313      	orrs	r3, r2
 800be28:	617b      	str	r3, [r7, #20]
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be30:	617b      	str	r3, [r7, #20]
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	011b      	lsls	r3, r3, #4
 800be36:	b2db      	uxtb	r3, r3
 800be38:	697a      	ldr	r2, [r7, #20]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	617b      	str	r3, [r7, #20]
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800be44:	613b      	str	r3, [r7, #16]
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	021b      	lsls	r3, r3, #8
 800be4a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800be4e:	693a      	ldr	r2, [r7, #16]
 800be50:	4313      	orrs	r3, r2
 800be52:	613b      	str	r3, [r7, #16]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	697a      	ldr	r2, [r7, #20]
 800be58:	61da      	str	r2, [r3, #28]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	693a      	ldr	r2, [r7, #16]
 800be5e:	621a      	str	r2, [r3, #32]
 800be60:	bf00      	nop
 800be62:	371c      	adds	r7, #28
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <TIM_TI4_SetConfig>:
 800be6c:	b480      	push	{r7}
 800be6e:	b087      	sub	sp, #28
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	607a      	str	r2, [r7, #4]
 800be78:	603b      	str	r3, [r7, #0]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	6a1b      	ldr	r3, [r3, #32]
 800be7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	621a      	str	r2, [r3, #32]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	69db      	ldr	r3, [r3, #28]
 800be8a:	617b      	str	r3, [r7, #20]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6a1b      	ldr	r3, [r3, #32]
 800be90:	613b      	str	r3, [r7, #16]
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be98:	617b      	str	r3, [r7, #20]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	021b      	lsls	r3, r3, #8
 800be9e:	697a      	ldr	r2, [r7, #20]
 800bea0:	4313      	orrs	r3, r2
 800bea2:	617b      	str	r3, [r7, #20]
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800beaa:	617b      	str	r3, [r7, #20]
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	031b      	lsls	r3, r3, #12
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	697a      	ldr	r2, [r7, #20]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	617b      	str	r3, [r7, #20]
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bebe:	613b      	str	r3, [r7, #16]
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	031b      	lsls	r3, r3, #12
 800bec4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bec8:	693a      	ldr	r2, [r7, #16]
 800beca:	4313      	orrs	r3, r2
 800becc:	613b      	str	r3, [r7, #16]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	697a      	ldr	r2, [r7, #20]
 800bed2:	61da      	str	r2, [r3, #28]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	693a      	ldr	r2, [r7, #16]
 800bed8:	621a      	str	r2, [r3, #32]
 800beda:	bf00      	nop
 800bedc:	371c      	adds	r7, #28
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr

0800bee6 <TIM_ITRx_SetConfig>:
 800bee6:	b480      	push	{r7}
 800bee8:	b085      	sub	sp, #20
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
 800beee:	6039      	str	r1, [r7, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	60fb      	str	r3, [r7, #12]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800befc:	60fb      	str	r3, [r7, #12]
 800befe:	683a      	ldr	r2, [r7, #0]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	f043 0307 	orr.w	r3, r3, #7
 800bf08:	60fb      	str	r3, [r7, #12]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	609a      	str	r2, [r3, #8]
 800bf10:	bf00      	nop
 800bf12:	3714      	adds	r7, #20
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <TIM_ETR_SetConfig>:
 800bf1c:	b480      	push	{r7}
 800bf1e:	b087      	sub	sp, #28
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
 800bf28:	603b      	str	r3, [r7, #0]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	617b      	str	r3, [r7, #20]
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf36:	617b      	str	r3, [r7, #20]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	021a      	lsls	r2, r3, #8
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	431a      	orrs	r2, r3
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	697a      	ldr	r2, [r7, #20]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	617b      	str	r3, [r7, #20]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	697a      	ldr	r2, [r7, #20]
 800bf4e:	609a      	str	r2, [r3, #8]
 800bf50:	bf00      	nop
 800bf52:	371c      	adds	r7, #28
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <TIM_CCxChannelCmd>:
 800bf5c:	b480      	push	{r7}
 800bf5e:	b087      	sub	sp, #28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	f003 031f 	and.w	r3, r3, #31
 800bf6e:	2201      	movs	r2, #1
 800bf70:	fa02 f303 	lsl.w	r3, r2, r3
 800bf74:	617b      	str	r3, [r7, #20]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6a1a      	ldr	r2, [r3, #32]
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	43db      	mvns	r3, r3
 800bf7e:	401a      	ands	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	621a      	str	r2, [r3, #32]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6a1a      	ldr	r2, [r3, #32]
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	f003 031f 	and.w	r3, r3, #31
 800bf8e:	6879      	ldr	r1, [r7, #4]
 800bf90:	fa01 f303 	lsl.w	r3, r1, r3
 800bf94:	431a      	orrs	r2, r3
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	621a      	str	r2, [r3, #32]
 800bf9a:	bf00      	nop
 800bf9c:	371c      	adds	r7, #28
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
	...

0800bfa8 <HAL_TIMEx_MasterConfigSynchronization>:
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d101      	bne.n	800bfc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bfbc:	2302      	movs	r3, #2
 800bfbe:	e05a      	b.n	800c076 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2202      	movs	r2, #2
 800bfcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	60fb      	str	r3, [r7, #12]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	60bb      	str	r3, [r7, #8]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfe6:	60fb      	str	r3, [r7, #12]
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	60fb      	str	r3, [r7, #12]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	605a      	str	r2, [r3, #4]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a21      	ldr	r2, [pc, #132]	; (800c084 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d022      	beq.n	800c04a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c00c:	d01d      	beq.n	800c04a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4a1d      	ldr	r2, [pc, #116]	; (800c088 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d018      	beq.n	800c04a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a1b      	ldr	r2, [pc, #108]	; (800c08c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d013      	beq.n	800c04a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a1a      	ldr	r2, [pc, #104]	; (800c090 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d00e      	beq.n	800c04a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a18      	ldr	r2, [pc, #96]	; (800c094 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d009      	beq.n	800c04a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a17      	ldr	r2, [pc, #92]	; (800c098 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d004      	beq.n	800c04a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4a15      	ldr	r2, [pc, #84]	; (800c09c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d10c      	bne.n	800c064 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c050:	60bb      	str	r3, [r7, #8]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	68ba      	ldr	r2, [r7, #8]
 800c058:	4313      	orrs	r3, r2
 800c05a:	60bb      	str	r3, [r7, #8]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	68ba      	ldr	r2, [r7, #8]
 800c062:	609a      	str	r2, [r3, #8]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2201      	movs	r2, #1
 800c068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c074:	2300      	movs	r3, #0
 800c076:	4618      	mov	r0, r3
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop
 800c084:	40010000 	.word	0x40010000
 800c088:	40000400 	.word	0x40000400
 800c08c:	40000800 	.word	0x40000800
 800c090:	40000c00 	.word	0x40000c00
 800c094:	40010400 	.word	0x40010400
 800c098:	40014000 	.word	0x40014000
 800c09c:	40001800 	.word	0x40001800

0800c0a0 <HAL_TIMEx_ConfigBreakDeadTime>:
 800c0a0:	b480      	push	{r7}
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	60fb      	str	r3, [r7, #12]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d101      	bne.n	800c0bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c0b8:	2302      	movs	r3, #2
 800c0ba:	e03d      	b.n	800c138 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	60fb      	str	r3, [r7, #12]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	60fb      	str	r3, [r7, #12]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	60fb      	str	r3, [r7, #12]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	60fb      	str	r3, [r7, #12]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	691b      	ldr	r3, [r3, #16]
 800c106:	4313      	orrs	r3, r2
 800c108:	60fb      	str	r3, [r7, #12]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	4313      	orrs	r3, r2
 800c116:	60fb      	str	r3, [r7, #12]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	69db      	ldr	r3, [r3, #28]
 800c122:	4313      	orrs	r3, r2
 800c124:	60fb      	str	r3, [r7, #12]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	645a      	str	r2, [r3, #68]	; 0x44
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c136:	2300      	movs	r3, #0
 800c138:	4618      	mov	r0, r3
 800c13a:	3714      	adds	r7, #20
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <HAL_TIMEx_CommutCallback>:
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	bf00      	nop
 800c14e:	370c      	adds	r7, #12
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr

0800c158 <HAL_TIMEx_BreakCallback>:
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	bf00      	nop
 800c162:	370c      	adds	r7, #12
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <HAL_UART_Init>:
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d101      	bne.n	800c17e <HAL_UART_Init+0x12>
 800c17a:	2301      	movs	r3, #1
 800c17c:	e03f      	b.n	800c1fe <HAL_UART_Init+0x92>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c184:	b2db      	uxtb	r3, r3
 800c186:	2b00      	cmp	r3, #0
 800c188:	d106      	bne.n	800c198 <HAL_UART_Init+0x2c>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f7fa fd92 	bl	8006cbc <HAL_UART_MspInit>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2224      	movs	r2, #36	; 0x24
 800c19c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68da      	ldr	r2, [r3, #12]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1ae:	60da      	str	r2, [r3, #12]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 fddf 	bl	800cd74 <UART_SetConfig>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	691a      	ldr	r2, [r3, #16]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c1c4:	611a      	str	r2, [r3, #16]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	695a      	ldr	r2, [r3, #20]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c1d4:	615a      	str	r2, [r3, #20]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	68da      	ldr	r2, [r3, #12]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c1e4:	60da      	str	r2, [r3, #12]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	641a      	str	r2, [r3, #64]	; 0x40
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2220      	movs	r2, #32
 800c1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2220      	movs	r2, #32
 800c1f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	4618      	mov	r0, r3
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <HAL_UART_Transmit>:
 800c206:	b580      	push	{r7, lr}
 800c208:	b08a      	sub	sp, #40	; 0x28
 800c20a:	af02      	add	r7, sp, #8
 800c20c:	60f8      	str	r0, [r7, #12]
 800c20e:	60b9      	str	r1, [r7, #8]
 800c210:	603b      	str	r3, [r7, #0]
 800c212:	4613      	mov	r3, r2
 800c214:	80fb      	strh	r3, [r7, #6]
 800c216:	2300      	movs	r3, #0
 800c218:	617b      	str	r3, [r7, #20]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c220:	b2db      	uxtb	r3, r3
 800c222:	2b20      	cmp	r3, #32
 800c224:	d17c      	bne.n	800c320 <HAL_UART_Transmit+0x11a>
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d002      	beq.n	800c232 <HAL_UART_Transmit+0x2c>
 800c22c:	88fb      	ldrh	r3, [r7, #6]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d101      	bne.n	800c236 <HAL_UART_Transmit+0x30>
 800c232:	2301      	movs	r3, #1
 800c234:	e075      	b.n	800c322 <HAL_UART_Transmit+0x11c>
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d101      	bne.n	800c244 <HAL_UART_Transmit+0x3e>
 800c240:	2302      	movs	r3, #2
 800c242:	e06e      	b.n	800c322 <HAL_UART_Transmit+0x11c>
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2201      	movs	r2, #1
 800c248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2200      	movs	r2, #0
 800c250:	641a      	str	r2, [r3, #64]	; 0x40
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2221      	movs	r2, #33	; 0x21
 800c256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c25a:	f7fa ff29 	bl	80070b0 <HAL_GetTick>
 800c25e:	6178      	str	r0, [r7, #20]
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	88fa      	ldrh	r2, [r7, #6]
 800c264:	849a      	strh	r2, [r3, #36]	; 0x24
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	88fa      	ldrh	r2, [r7, #6]
 800c26a:	84da      	strh	r2, [r3, #38]	; 0x26
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c274:	d108      	bne.n	800c288 <HAL_UART_Transmit+0x82>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	691b      	ldr	r3, [r3, #16]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d104      	bne.n	800c288 <HAL_UART_Transmit+0x82>
 800c27e:	2300      	movs	r3, #0
 800c280:	61fb      	str	r3, [r7, #28]
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	61bb      	str	r3, [r7, #24]
 800c286:	e003      	b.n	800c290 <HAL_UART_Transmit+0x8a>
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	61fb      	str	r3, [r7, #28]
 800c28c:	2300      	movs	r3, #0
 800c28e:	61bb      	str	r3, [r7, #24]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c298:	e02a      	b.n	800c2f0 <HAL_UART_Transmit+0xea>
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	9300      	str	r3, [sp, #0]
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	2180      	movs	r1, #128	; 0x80
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f000 fb1f 	bl	800c8e8 <UART_WaitOnFlagUntilTimeout>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d001      	beq.n	800c2b4 <HAL_UART_Transmit+0xae>
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	e036      	b.n	800c322 <HAL_UART_Transmit+0x11c>
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10b      	bne.n	800c2d2 <HAL_UART_Transmit+0xcc>
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	881b      	ldrh	r3, [r3, #0]
 800c2be:	461a      	mov	r2, r3
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2c8:	605a      	str	r2, [r3, #4]
 800c2ca:	69bb      	ldr	r3, [r7, #24]
 800c2cc:	3302      	adds	r3, #2
 800c2ce:	61bb      	str	r3, [r7, #24]
 800c2d0:	e007      	b.n	800c2e2 <HAL_UART_Transmit+0xdc>
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	781a      	ldrb	r2, [r3, #0]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	605a      	str	r2, [r3, #4]
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	61fb      	str	r3, [r7, #28]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	b29a      	uxth	r2, r3
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	84da      	strh	r2, [r3, #38]	; 0x26
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1cf      	bne.n	800c29a <HAL_UART_Transmit+0x94>
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	9300      	str	r3, [sp, #0]
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	2200      	movs	r2, #0
 800c302:	2140      	movs	r1, #64	; 0x40
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	f000 faef 	bl	800c8e8 <UART_WaitOnFlagUntilTimeout>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d001      	beq.n	800c314 <HAL_UART_Transmit+0x10e>
 800c310:	2303      	movs	r3, #3
 800c312:	e006      	b.n	800c322 <HAL_UART_Transmit+0x11c>
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2220      	movs	r2, #32
 800c318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c31c:	2300      	movs	r3, #0
 800c31e:	e000      	b.n	800c322 <HAL_UART_Transmit+0x11c>
 800c320:	2302      	movs	r3, #2
 800c322:	4618      	mov	r0, r3
 800c324:	3720      	adds	r7, #32
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <HAL_UART_Receive_IT>:
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b084      	sub	sp, #16
 800c32e:	af00      	add	r7, sp, #0
 800c330:	60f8      	str	r0, [r7, #12]
 800c332:	60b9      	str	r1, [r7, #8]
 800c334:	4613      	mov	r3, r2
 800c336:	80fb      	strh	r3, [r7, #6]
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	2b20      	cmp	r3, #32
 800c342:	d11d      	bne.n	800c380 <HAL_UART_Receive_IT+0x56>
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d002      	beq.n	800c350 <HAL_UART_Receive_IT+0x26>
 800c34a:	88fb      	ldrh	r3, [r7, #6]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d101      	bne.n	800c354 <HAL_UART_Receive_IT+0x2a>
 800c350:	2301      	movs	r3, #1
 800c352:	e016      	b.n	800c382 <HAL_UART_Receive_IT+0x58>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d101      	bne.n	800c362 <HAL_UART_Receive_IT+0x38>
 800c35e:	2302      	movs	r3, #2
 800c360:	e00f      	b.n	800c382 <HAL_UART_Receive_IT+0x58>
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2201      	movs	r2, #1
 800c366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2200      	movs	r2, #0
 800c36e:	631a      	str	r2, [r3, #48]	; 0x30
 800c370:	88fb      	ldrh	r3, [r7, #6]
 800c372:	461a      	mov	r2, r3
 800c374:	68b9      	ldr	r1, [r7, #8]
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	f000 fb24 	bl	800c9c4 <UART_Start_Receive_IT>
 800c37c:	4603      	mov	r3, r0
 800c37e:	e000      	b.n	800c382 <HAL_UART_Receive_IT+0x58>
 800c380:	2302      	movs	r3, #2
 800c382:	4618      	mov	r0, r3
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
	...

0800c38c <HAL_UART_IRQHandler>:
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b0ba      	sub	sp, #232	; 0xe8
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	68db      	ldr	r3, [r3, #12]
 800c3a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	695b      	ldr	r3, [r3, #20]
 800c3ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c3be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3c2:	f003 030f 	and.w	r3, r3, #15
 800c3c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c3ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d10f      	bne.n	800c3f2 <HAL_UART_IRQHandler+0x66>
 800c3d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3d6:	f003 0320 	and.w	r3, r3, #32
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d009      	beq.n	800c3f2 <HAL_UART_IRQHandler+0x66>
 800c3de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3e2:	f003 0320 	and.w	r3, r3, #32
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d003      	beq.n	800c3f2 <HAL_UART_IRQHandler+0x66>
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 fc07 	bl	800cbfe <UART_Receive_IT>
 800c3f0:	e256      	b.n	800c8a0 <HAL_UART_IRQHandler+0x514>
 800c3f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f000 80de 	beq.w	800c5b8 <HAL_UART_IRQHandler+0x22c>
 800c3fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c400:	f003 0301 	and.w	r3, r3, #1
 800c404:	2b00      	cmp	r3, #0
 800c406:	d106      	bne.n	800c416 <HAL_UART_IRQHandler+0x8a>
 800c408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c40c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c410:	2b00      	cmp	r3, #0
 800c412:	f000 80d1 	beq.w	800c5b8 <HAL_UART_IRQHandler+0x22c>
 800c416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c41a:	f003 0301 	and.w	r3, r3, #1
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00b      	beq.n	800c43a <HAL_UART_IRQHandler+0xae>
 800c422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d005      	beq.n	800c43a <HAL_UART_IRQHandler+0xae>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c432:	f043 0201 	orr.w	r2, r3, #1
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	641a      	str	r2, [r3, #64]	; 0x40
 800c43a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c43e:	f003 0304 	and.w	r3, r3, #4
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00b      	beq.n	800c45e <HAL_UART_IRQHandler+0xd2>
 800c446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c44a:	f003 0301 	and.w	r3, r3, #1
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d005      	beq.n	800c45e <HAL_UART_IRQHandler+0xd2>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c456:	f043 0202 	orr.w	r2, r3, #2
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	641a      	str	r2, [r3, #64]	; 0x40
 800c45e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c462:	f003 0302 	and.w	r3, r3, #2
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00b      	beq.n	800c482 <HAL_UART_IRQHandler+0xf6>
 800c46a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c46e:	f003 0301 	and.w	r3, r3, #1
 800c472:	2b00      	cmp	r3, #0
 800c474:	d005      	beq.n	800c482 <HAL_UART_IRQHandler+0xf6>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c47a:	f043 0204 	orr.w	r2, r3, #4
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	641a      	str	r2, [r3, #64]	; 0x40
 800c482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c486:	f003 0308 	and.w	r3, r3, #8
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d011      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x126>
 800c48e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c492:	f003 0320 	and.w	r3, r3, #32
 800c496:	2b00      	cmp	r3, #0
 800c498:	d105      	bne.n	800c4a6 <HAL_UART_IRQHandler+0x11a>
 800c49a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c49e:	f003 0301 	and.w	r3, r3, #1
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d005      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x126>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4aa:	f043 0208 	orr.w	r2, r3, #8
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	641a      	str	r2, [r3, #64]	; 0x40
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f000 81ed 	beq.w	800c896 <HAL_UART_IRQHandler+0x50a>
 800c4bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4c0:	f003 0320 	and.w	r3, r3, #32
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d008      	beq.n	800c4da <HAL_UART_IRQHandler+0x14e>
 800c4c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4cc:	f003 0320 	and.w	r3, r3, #32
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d002      	beq.n	800c4da <HAL_UART_IRQHandler+0x14e>
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 fb92 	bl	800cbfe <UART_Receive_IT>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	695b      	ldr	r3, [r3, #20]
 800c4e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e4:	2b40      	cmp	r3, #64	; 0x40
 800c4e6:	bf0c      	ite	eq
 800c4e8:	2301      	moveq	r3, #1
 800c4ea:	2300      	movne	r3, #0
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f6:	f003 0308 	and.w	r3, r3, #8
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d103      	bne.n	800c506 <HAL_UART_IRQHandler+0x17a>
 800c4fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c502:	2b00      	cmp	r3, #0
 800c504:	d04f      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x21a>
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fa9a 	bl	800ca40 <UART_EndRxTransfer>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	695b      	ldr	r3, [r3, #20]
 800c512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c516:	2b40      	cmp	r3, #64	; 0x40
 800c518:	d141      	bne.n	800c59e <HAL_UART_IRQHandler+0x212>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	3314      	adds	r3, #20
 800c520:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c524:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c528:	e853 3f00 	ldrex	r3, [r3]
 800c52c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c530:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	3314      	adds	r3, #20
 800c542:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c546:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c54a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c54e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c552:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c556:	e841 2300 	strex	r3, r2, [r1]
 800c55a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c55e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1d9      	bne.n	800c51a <HAL_UART_IRQHandler+0x18e>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d013      	beq.n	800c596 <HAL_UART_IRQHandler+0x20a>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c572:	4a7d      	ldr	r2, [pc, #500]	; (800c768 <HAL_UART_IRQHandler+0x3dc>)
 800c574:	651a      	str	r2, [r3, #80]	; 0x50
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7fa ff49 	bl	8007412 <HAL_DMA_Abort_IT>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d016      	beq.n	800c5b4 <HAL_UART_IRQHandler+0x228>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c58a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c590:	4610      	mov	r0, r2
 800c592:	4798      	blx	r3
 800c594:	e00e      	b.n	800c5b4 <HAL_UART_IRQHandler+0x228>
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 f990 	bl	800c8bc <HAL_UART_ErrorCallback>
 800c59c:	e00a      	b.n	800c5b4 <HAL_UART_IRQHandler+0x228>
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 f98c 	bl	800c8bc <HAL_UART_ErrorCallback>
 800c5a4:	e006      	b.n	800c5b4 <HAL_UART_IRQHandler+0x228>
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 f988 	bl	800c8bc <HAL_UART_ErrorCallback>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	641a      	str	r2, [r3, #64]	; 0x40
 800c5b2:	e170      	b.n	800c896 <HAL_UART_IRQHandler+0x50a>
 800c5b4:	bf00      	nop
 800c5b6:	e16e      	b.n	800c896 <HAL_UART_IRQHandler+0x50a>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	f040 814a 	bne.w	800c856 <HAL_UART_IRQHandler+0x4ca>
 800c5c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5c6:	f003 0310 	and.w	r3, r3, #16
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f000 8143 	beq.w	800c856 <HAL_UART_IRQHandler+0x4ca>
 800c5d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5d4:	f003 0310 	and.w	r3, r3, #16
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f000 813c 	beq.w	800c856 <HAL_UART_IRQHandler+0x4ca>
 800c5de:	2300      	movs	r3, #0
 800c5e0:	60bb      	str	r3, [r7, #8]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	60bb      	str	r3, [r7, #8]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	60bb      	str	r3, [r7, #8]
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	695b      	ldr	r3, [r3, #20]
 800c5fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5fe:	2b40      	cmp	r3, #64	; 0x40
 800c600:	f040 80b4 	bne.w	800c76c <HAL_UART_IRQHandler+0x3e0>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800c610:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c614:	2b00      	cmp	r3, #0
 800c616:	f000 8140 	beq.w	800c89a <HAL_UART_IRQHandler+0x50e>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c61e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c622:	429a      	cmp	r2, r3
 800c624:	f080 8139 	bcs.w	800c89a <HAL_UART_IRQHandler+0x50e>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c62e:	85da      	strh	r2, [r3, #46]	; 0x2e
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c634:	69db      	ldr	r3, [r3, #28]
 800c636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c63a:	f000 8088 	beq.w	800c74e <HAL_UART_IRQHandler+0x3c2>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	330c      	adds	r3, #12
 800c644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c648:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c64c:	e853 3f00 	ldrex	r3, [r3]
 800c650:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c654:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c65c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	330c      	adds	r3, #12
 800c666:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c66a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c66e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c672:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c676:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c67a:	e841 2300 	strex	r3, r2, [r1]
 800c67e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c682:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c686:	2b00      	cmp	r3, #0
 800c688:	d1d9      	bne.n	800c63e <HAL_UART_IRQHandler+0x2b2>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	3314      	adds	r3, #20
 800c690:	677b      	str	r3, [r7, #116]	; 0x74
 800c692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c694:	e853 3f00 	ldrex	r3, [r3]
 800c698:	673b      	str	r3, [r7, #112]	; 0x70
 800c69a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c69c:	f023 0301 	bic.w	r3, r3, #1
 800c6a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	3314      	adds	r3, #20
 800c6aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c6ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c6b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c6b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c6b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c6ba:	e841 2300 	strex	r3, r2, [r1]
 800c6be:	67bb      	str	r3, [r7, #120]	; 0x78
 800c6c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1e1      	bne.n	800c68a <HAL_UART_IRQHandler+0x2fe>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	3314      	adds	r3, #20
 800c6cc:	663b      	str	r3, [r7, #96]	; 0x60
 800c6ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6d0:	e853 3f00 	ldrex	r3, [r3]
 800c6d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c6d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	3314      	adds	r3, #20
 800c6e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c6ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c6ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800c6ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c6f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c6f2:	e841 2300 	strex	r3, r2, [r1]
 800c6f6:	667b      	str	r3, [r7, #100]	; 0x64
 800c6f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d1e3      	bne.n	800c6c6 <HAL_UART_IRQHandler+0x33a>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2220      	movs	r2, #32
 800c702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	631a      	str	r2, [r3, #48]	; 0x30
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	330c      	adds	r3, #12
 800c712:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c716:	e853 3f00 	ldrex	r3, [r3]
 800c71a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c71c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c71e:	f023 0310 	bic.w	r3, r3, #16
 800c722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	330c      	adds	r3, #12
 800c72c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c730:	65ba      	str	r2, [r7, #88]	; 0x58
 800c732:	657b      	str	r3, [r7, #84]	; 0x54
 800c734:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c736:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c738:	e841 2300 	strex	r3, r2, [r1]
 800c73c:	653b      	str	r3, [r7, #80]	; 0x50
 800c73e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c740:	2b00      	cmp	r3, #0
 800c742:	d1e3      	bne.n	800c70c <HAL_UART_IRQHandler+0x380>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c748:	4618      	mov	r0, r3
 800c74a:	f7fa fdf2 	bl	8007332 <HAL_DMA_Abort>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c756:	b29b      	uxth	r3, r3
 800c758:	1ad3      	subs	r3, r2, r3
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	4619      	mov	r1, r3
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f8b6 	bl	800c8d0 <HAL_UARTEx_RxEventCallback>
 800c764:	e099      	b.n	800c89a <HAL_UART_IRQHandler+0x50e>
 800c766:	bf00      	nop
 800c768:	0800cb07 	.word	0x0800cb07
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c774:	b29b      	uxth	r3, r3
 800c776:	1ad3      	subs	r3, r2, r3
 800c778:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c780:	b29b      	uxth	r3, r3
 800c782:	2b00      	cmp	r3, #0
 800c784:	f000 808b 	beq.w	800c89e <HAL_UART_IRQHandler+0x512>
 800c788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	f000 8086 	beq.w	800c89e <HAL_UART_IRQHandler+0x512>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	330c      	adds	r3, #12
 800c798:	63bb      	str	r3, [r7, #56]	; 0x38
 800c79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79c:	e853 3f00 	ldrex	r3, [r3]
 800c7a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c7a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	330c      	adds	r3, #12
 800c7b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c7b6:	647a      	str	r2, [r7, #68]	; 0x44
 800c7b8:	643b      	str	r3, [r7, #64]	; 0x40
 800c7ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c7bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c7be:	e841 2300 	strex	r3, r2, [r1]
 800c7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d1e3      	bne.n	800c792 <HAL_UART_IRQHandler+0x406>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	3314      	adds	r3, #20
 800c7d0:	627b      	str	r3, [r7, #36]	; 0x24
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d4:	e853 3f00 	ldrex	r3, [r3]
 800c7d8:	623b      	str	r3, [r7, #32]
 800c7da:	6a3b      	ldr	r3, [r7, #32]
 800c7dc:	f023 0301 	bic.w	r3, r3, #1
 800c7e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	3314      	adds	r3, #20
 800c7ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c7ee:	633a      	str	r2, [r7, #48]	; 0x30
 800c7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7f6:	e841 2300 	strex	r3, r2, [r1]
 800c7fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1e3      	bne.n	800c7ca <HAL_UART_IRQHandler+0x43e>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2220      	movs	r2, #32
 800c806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	631a      	str	r2, [r3, #48]	; 0x30
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	330c      	adds	r3, #12
 800c816:	613b      	str	r3, [r7, #16]
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	e853 3f00 	ldrex	r3, [r3]
 800c81e:	60fb      	str	r3, [r7, #12]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f023 0310 	bic.w	r3, r3, #16
 800c826:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	330c      	adds	r3, #12
 800c830:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c834:	61fa      	str	r2, [r7, #28]
 800c836:	61bb      	str	r3, [r7, #24]
 800c838:	69b9      	ldr	r1, [r7, #24]
 800c83a:	69fa      	ldr	r2, [r7, #28]
 800c83c:	e841 2300 	strex	r3, r2, [r1]
 800c840:	617b      	str	r3, [r7, #20]
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d1e3      	bne.n	800c810 <HAL_UART_IRQHandler+0x484>
 800c848:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c84c:	4619      	mov	r1, r3
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f83e 	bl	800c8d0 <HAL_UARTEx_RxEventCallback>
 800c854:	e023      	b.n	800c89e <HAL_UART_IRQHandler+0x512>
 800c856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d009      	beq.n	800c876 <HAL_UART_IRQHandler+0x4ea>
 800c862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d003      	beq.n	800c876 <HAL_UART_IRQHandler+0x4ea>
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 f95d 	bl	800cb2e <UART_Transmit_IT>
 800c874:	e014      	b.n	800c8a0 <HAL_UART_IRQHandler+0x514>
 800c876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00e      	beq.n	800c8a0 <HAL_UART_IRQHandler+0x514>
 800c882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d008      	beq.n	800c8a0 <HAL_UART_IRQHandler+0x514>
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f99d 	bl	800cbce <UART_EndTransmit_IT>
 800c894:	e004      	b.n	800c8a0 <HAL_UART_IRQHandler+0x514>
 800c896:	bf00      	nop
 800c898:	e002      	b.n	800c8a0 <HAL_UART_IRQHandler+0x514>
 800c89a:	bf00      	nop
 800c89c:	e000      	b.n	800c8a0 <HAL_UART_IRQHandler+0x514>
 800c89e:	bf00      	nop
 800c8a0:	37e8      	adds	r7, #232	; 0xe8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop

0800c8a8 <HAL_UART_TxCpltCallback>:
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	bf00      	nop
 800c8b2:	370c      	adds	r7, #12
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr

0800c8bc <HAL_UART_ErrorCallback>:
 800c8bc:	b480      	push	{r7}
 800c8be:	b083      	sub	sp, #12
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	bf00      	nop
 800c8c6:	370c      	adds	r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <HAL_UARTEx_RxEventCallback>:
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	460b      	mov	r3, r1
 800c8da:	807b      	strh	r3, [r7, #2]
 800c8dc:	bf00      	nop
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <UART_WaitOnFlagUntilTimeout>:
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b090      	sub	sp, #64	; 0x40
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	603b      	str	r3, [r7, #0]
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	71fb      	strb	r3, [r7, #7]
 800c8f8:	e050      	b.n	800c99c <UART_WaitOnFlagUntilTimeout+0xb4>
 800c8fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c900:	d04c      	beq.n	800c99c <UART_WaitOnFlagUntilTimeout+0xb4>
 800c902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c904:	2b00      	cmp	r3, #0
 800c906:	d007      	beq.n	800c918 <UART_WaitOnFlagUntilTimeout+0x30>
 800c908:	f7fa fbd2 	bl	80070b0 <HAL_GetTick>
 800c90c:	4602      	mov	r2, r0
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c914:	429a      	cmp	r2, r3
 800c916:	d241      	bcs.n	800c99c <UART_WaitOnFlagUntilTimeout+0xb4>
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	330c      	adds	r3, #12
 800c91e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c922:	e853 3f00 	ldrex	r3, [r3]
 800c926:	627b      	str	r3, [r7, #36]	; 0x24
 800c928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c92e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	330c      	adds	r3, #12
 800c936:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c938:	637a      	str	r2, [r7, #52]	; 0x34
 800c93a:	633b      	str	r3, [r7, #48]	; 0x30
 800c93c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c93e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c940:	e841 2300 	strex	r3, r2, [r1]
 800c944:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d1e5      	bne.n	800c918 <UART_WaitOnFlagUntilTimeout+0x30>
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	3314      	adds	r3, #20
 800c952:	617b      	str	r3, [r7, #20]
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	e853 3f00 	ldrex	r3, [r3]
 800c95a:	613b      	str	r3, [r7, #16]
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	f023 0301 	bic.w	r3, r3, #1
 800c962:	63bb      	str	r3, [r7, #56]	; 0x38
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	3314      	adds	r3, #20
 800c96a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c96c:	623a      	str	r2, [r7, #32]
 800c96e:	61fb      	str	r3, [r7, #28]
 800c970:	69f9      	ldr	r1, [r7, #28]
 800c972:	6a3a      	ldr	r2, [r7, #32]
 800c974:	e841 2300 	strex	r3, r2, [r1]
 800c978:	61bb      	str	r3, [r7, #24]
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d1e5      	bne.n	800c94c <UART_WaitOnFlagUntilTimeout+0x64>
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2220      	movs	r2, #32
 800c984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2220      	movs	r2, #32
 800c98c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2200      	movs	r2, #0
 800c994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c998:	2303      	movs	r3, #3
 800c99a:	e00f      	b.n	800c9bc <UART_WaitOnFlagUntilTimeout+0xd4>
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	4013      	ands	r3, r2
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	bf0c      	ite	eq
 800c9ac:	2301      	moveq	r3, #1
 800c9ae:	2300      	movne	r3, #0
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	79fb      	ldrb	r3, [r7, #7]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d09f      	beq.n	800c8fa <UART_WaitOnFlagUntilTimeout+0x12>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3740      	adds	r7, #64	; 0x40
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <UART_Start_Receive_IT>:
 800c9c4:	b480      	push	{r7}
 800c9c6:	b085      	sub	sp, #20
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	80fb      	strh	r3, [r7, #6]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	68ba      	ldr	r2, [r7, #8]
 800c9d6:	629a      	str	r2, [r3, #40]	; 0x28
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	88fa      	ldrh	r2, [r7, #6]
 800c9dc:	859a      	strh	r2, [r3, #44]	; 0x2c
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	88fa      	ldrh	r2, [r7, #6]
 800c9e2:	85da      	strh	r2, [r3, #46]	; 0x2e
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	641a      	str	r2, [r3, #64]	; 0x40
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2222      	movs	r2, #34	; 0x22
 800c9ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	691b      	ldr	r3, [r3, #16]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d007      	beq.n	800ca12 <UART_Start_Receive_IT+0x4e>
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	68da      	ldr	r2, [r3, #12]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ca10:	60da      	str	r2, [r3, #12]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	695a      	ldr	r2, [r3, #20]
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f042 0201 	orr.w	r2, r2, #1
 800ca20:	615a      	str	r2, [r3, #20]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	68da      	ldr	r2, [r3, #12]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f042 0220 	orr.w	r2, r2, #32
 800ca30:	60da      	str	r2, [r3, #12]
 800ca32:	2300      	movs	r3, #0
 800ca34:	4618      	mov	r0, r3
 800ca36:	3714      	adds	r7, #20
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <UART_EndRxTransfer>:
 800ca40:	b480      	push	{r7}
 800ca42:	b095      	sub	sp, #84	; 0x54
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	330c      	adds	r3, #12
 800ca4e:	637b      	str	r3, [r7, #52]	; 0x34
 800ca50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca52:	e853 3f00 	ldrex	r3, [r3]
 800ca56:	633b      	str	r3, [r7, #48]	; 0x30
 800ca58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	330c      	adds	r3, #12
 800ca66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca68:	643a      	str	r2, [r7, #64]	; 0x40
 800ca6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ca6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca70:	e841 2300 	strex	r3, r2, [r1]
 800ca74:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1e5      	bne.n	800ca48 <UART_EndRxTransfer+0x8>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	3314      	adds	r3, #20
 800ca82:	623b      	str	r3, [r7, #32]
 800ca84:	6a3b      	ldr	r3, [r7, #32]
 800ca86:	e853 3f00 	ldrex	r3, [r3]
 800ca8a:	61fb      	str	r3, [r7, #28]
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	f023 0301 	bic.w	r3, r3, #1
 800ca92:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	3314      	adds	r3, #20
 800ca9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800caa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800caa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caa4:	e841 2300 	strex	r3, r2, [r1]
 800caa8:	627b      	str	r3, [r7, #36]	; 0x24
 800caaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caac:	2b00      	cmp	r3, #0
 800caae:	d1e5      	bne.n	800ca7c <UART_EndRxTransfer+0x3c>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d119      	bne.n	800caec <UART_EndRxTransfer+0xac>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	330c      	adds	r3, #12
 800cabe:	60fb      	str	r3, [r7, #12]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	e853 3f00 	ldrex	r3, [r3]
 800cac6:	60bb      	str	r3, [r7, #8]
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	f023 0310 	bic.w	r3, r3, #16
 800cace:	647b      	str	r3, [r7, #68]	; 0x44
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	330c      	adds	r3, #12
 800cad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cad8:	61ba      	str	r2, [r7, #24]
 800cada:	617b      	str	r3, [r7, #20]
 800cadc:	6979      	ldr	r1, [r7, #20]
 800cade:	69ba      	ldr	r2, [r7, #24]
 800cae0:	e841 2300 	strex	r3, r2, [r1]
 800cae4:	613b      	str	r3, [r7, #16]
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d1e5      	bne.n	800cab8 <UART_EndRxTransfer+0x78>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2220      	movs	r2, #32
 800caf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	631a      	str	r2, [r3, #48]	; 0x30
 800cafa:	bf00      	nop
 800cafc:	3754      	adds	r7, #84	; 0x54
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr

0800cb06 <UART_DMAAbortOnError>:
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b084      	sub	sp, #16
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb12:	60fb      	str	r3, [r7, #12]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2200      	movs	r2, #0
 800cb18:	85da      	strh	r2, [r3, #46]	; 0x2e
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	84da      	strh	r2, [r3, #38]	; 0x26
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	f7ff fecb 	bl	800c8bc <HAL_UART_ErrorCallback>
 800cb26:	bf00      	nop
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <UART_Transmit_IT>:
 800cb2e:	b480      	push	{r7}
 800cb30:	b085      	sub	sp, #20
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	2b21      	cmp	r3, #33	; 0x21
 800cb40:	d13e      	bne.n	800cbc0 <UART_Transmit_IT+0x92>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	689b      	ldr	r3, [r3, #8]
 800cb46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb4a:	d114      	bne.n	800cb76 <UART_Transmit_IT+0x48>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	691b      	ldr	r3, [r3, #16]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d110      	bne.n	800cb76 <UART_Transmit_IT+0x48>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6a1b      	ldr	r3, [r3, #32]
 800cb58:	60fb      	str	r3, [r7, #12]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	881b      	ldrh	r3, [r3, #0]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cb68:	605a      	str	r2, [r3, #4]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6a1b      	ldr	r3, [r3, #32]
 800cb6e:	1c9a      	adds	r2, r3, #2
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	621a      	str	r2, [r3, #32]
 800cb74:	e008      	b.n	800cb88 <UART_Transmit_IT+0x5a>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6a1b      	ldr	r3, [r3, #32]
 800cb7a:	1c59      	adds	r1, r3, #1
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	6211      	str	r1, [r2, #32]
 800cb80:	781a      	ldrb	r2, [r3, #0]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	605a      	str	r2, [r3, #4]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	4619      	mov	r1, r3
 800cb96:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10f      	bne.n	800cbbc <UART_Transmit_IT+0x8e>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68da      	ldr	r2, [r3, #12]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cbaa:	60da      	str	r2, [r3, #12]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	68da      	ldr	r2, [r3, #12]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cbba:	60da      	str	r2, [r3, #12]
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	e000      	b.n	800cbc2 <UART_Transmit_IT+0x94>
 800cbc0:	2302      	movs	r3, #2
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3714      	adds	r7, #20
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr

0800cbce <UART_EndTransmit_IT>:
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b082      	sub	sp, #8
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	68da      	ldr	r2, [r3, #12]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cbe4:	60da      	str	r2, [r3, #12]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2220      	movs	r2, #32
 800cbea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7ff fe5a 	bl	800c8a8 <HAL_UART_TxCpltCallback>
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <UART_Receive_IT>:
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b08c      	sub	sp, #48	; 0x30
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	2b22      	cmp	r3, #34	; 0x22
 800cc10:	f040 80ab 	bne.w	800cd6a <UART_Receive_IT+0x16c>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc1c:	d117      	bne.n	800cc4e <UART_Receive_IT+0x50>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	691b      	ldr	r3, [r3, #16]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d113      	bne.n	800cc4e <UART_Receive_IT+0x50>
 800cc26:	2300      	movs	r3, #0
 800cc28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc40:	801a      	strh	r2, [r3, #0]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc46:	1c9a      	adds	r2, r3, #2
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	629a      	str	r2, [r3, #40]	; 0x28
 800cc4c:	e026      	b.n	800cc9c <UART_Receive_IT+0x9e>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc54:	2300      	movs	r3, #0
 800cc56:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	689b      	ldr	r3, [r3, #8]
 800cc5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc60:	d007      	beq.n	800cc72 <UART_Receive_IT+0x74>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	689b      	ldr	r3, [r3, #8]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10a      	bne.n	800cc80 <UART_Receive_IT+0x82>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d106      	bne.n	800cc80 <UART_Receive_IT+0x82>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	b2da      	uxtb	r2, r3
 800cc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7c:	701a      	strb	r2, [r3, #0]
 800cc7e:	e008      	b.n	800cc92 <UART_Receive_IT+0x94>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc90:	701a      	strb	r2, [r3, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc96:	1c5a      	adds	r2, r3, #1
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	629a      	str	r2, [r3, #40]	; 0x28
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	3b01      	subs	r3, #1
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	4619      	mov	r1, r3
 800ccaa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d15a      	bne.n	800cd66 <UART_Receive_IT+0x168>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68da      	ldr	r2, [r3, #12]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f022 0220 	bic.w	r2, r2, #32
 800ccbe:	60da      	str	r2, [r3, #12]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	68da      	ldr	r2, [r3, #12]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ccce:	60da      	str	r2, [r3, #12]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	695a      	ldr	r2, [r3, #20]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f022 0201 	bic.w	r2, r2, #1
 800ccde:	615a      	str	r2, [r3, #20]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2220      	movs	r2, #32
 800cce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d135      	bne.n	800cd5c <UART_Receive_IT+0x15e>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	631a      	str	r2, [r3, #48]	; 0x30
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	330c      	adds	r3, #12
 800ccfc:	617b      	str	r3, [r7, #20]
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	e853 3f00 	ldrex	r3, [r3]
 800cd04:	613b      	str	r3, [r7, #16]
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	f023 0310 	bic.w	r3, r3, #16
 800cd0c:	627b      	str	r3, [r7, #36]	; 0x24
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	330c      	adds	r3, #12
 800cd14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd16:	623a      	str	r2, [r7, #32]
 800cd18:	61fb      	str	r3, [r7, #28]
 800cd1a:	69f9      	ldr	r1, [r7, #28]
 800cd1c:	6a3a      	ldr	r2, [r7, #32]
 800cd1e:	e841 2300 	strex	r3, r2, [r1]
 800cd22:	61bb      	str	r3, [r7, #24]
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d1e5      	bne.n	800ccf6 <UART_Receive_IT+0xf8>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 0310 	and.w	r3, r3, #16
 800cd34:	2b10      	cmp	r3, #16
 800cd36:	d10a      	bne.n	800cd4e <UART_Receive_IT+0x150>
 800cd38:	2300      	movs	r3, #0
 800cd3a:	60fb      	str	r3, [r7, #12]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	60fb      	str	r3, [r7, #12]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	60fb      	str	r3, [r7, #12]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cd52:	4619      	mov	r1, r3
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f7ff fdbb 	bl	800c8d0 <HAL_UARTEx_RxEventCallback>
 800cd5a:	e002      	b.n	800cd62 <UART_Receive_IT+0x164>
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f7f4 fd25 	bl	80017ac <HAL_UART_RxCpltCallback>
 800cd62:	2300      	movs	r3, #0
 800cd64:	e002      	b.n	800cd6c <UART_Receive_IT+0x16e>
 800cd66:	2300      	movs	r3, #0
 800cd68:	e000      	b.n	800cd6c <UART_Receive_IT+0x16e>
 800cd6a:	2302      	movs	r3, #2
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3730      	adds	r7, #48	; 0x30
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <UART_SetConfig>:
 800cd74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd78:	b0c0      	sub	sp, #256	; 0x100
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800cd80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	691b      	ldr	r3, [r3, #16]
 800cd88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cd8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd90:	68d9      	ldr	r1, [r3, #12]
 800cd92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd96:	681a      	ldr	r2, [r3, #0]
 800cd98:	ea40 0301 	orr.w	r3, r0, r1
 800cd9c:	6113      	str	r3, [r2, #16]
 800cd9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cda2:	689a      	ldr	r2, [r3, #8]
 800cda4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	431a      	orrs	r2, r3
 800cdac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdb0:	695b      	ldr	r3, [r3, #20]
 800cdb2:	431a      	orrs	r2, r3
 800cdb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdb8:	69db      	ldr	r3, [r3, #28]
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cdc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cdcc:	f021 010c 	bic.w	r1, r1, #12
 800cdd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cdda:	430b      	orrs	r3, r1
 800cddc:	60d3      	str	r3, [r2, #12]
 800cdde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	695b      	ldr	r3, [r3, #20]
 800cde6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cdea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdee:	6999      	ldr	r1, [r3, #24]
 800cdf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	ea40 0301 	orr.w	r3, r0, r1
 800cdfa:	6153      	str	r3, [r2, #20]
 800cdfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	4b8f      	ldr	r3, [pc, #572]	; (800d040 <UART_SetConfig+0x2cc>)
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d005      	beq.n	800ce14 <UART_SetConfig+0xa0>
 800ce08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce0c:	681a      	ldr	r2, [r3, #0]
 800ce0e:	4b8d      	ldr	r3, [pc, #564]	; (800d044 <UART_SetConfig+0x2d0>)
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d104      	bne.n	800ce1e <UART_SetConfig+0xaa>
 800ce14:	f7fd fcc4 	bl	800a7a0 <HAL_RCC_GetPCLK2Freq>
 800ce18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ce1c:	e003      	b.n	800ce26 <UART_SetConfig+0xb2>
 800ce1e:	f7fd fcab 	bl	800a778 <HAL_RCC_GetPCLK1Freq>
 800ce22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ce26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce2a:	69db      	ldr	r3, [r3, #28]
 800ce2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce30:	f040 810c 	bne.w	800d04c <UART_SetConfig+0x2d8>
 800ce34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ce3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ce42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ce46:	4622      	mov	r2, r4
 800ce48:	462b      	mov	r3, r5
 800ce4a:	1891      	adds	r1, r2, r2
 800ce4c:	65b9      	str	r1, [r7, #88]	; 0x58
 800ce4e:	415b      	adcs	r3, r3
 800ce50:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ce52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ce56:	4621      	mov	r1, r4
 800ce58:	eb12 0801 	adds.w	r8, r2, r1
 800ce5c:	4629      	mov	r1, r5
 800ce5e:	eb43 0901 	adc.w	r9, r3, r1
 800ce62:	f04f 0200 	mov.w	r2, #0
 800ce66:	f04f 0300 	mov.w	r3, #0
 800ce6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ce6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ce72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ce76:	4690      	mov	r8, r2
 800ce78:	4699      	mov	r9, r3
 800ce7a:	4623      	mov	r3, r4
 800ce7c:	eb18 0303 	adds.w	r3, r8, r3
 800ce80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ce84:	462b      	mov	r3, r5
 800ce86:	eb49 0303 	adc.w	r3, r9, r3
 800ce8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ce8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ce9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ce9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cea2:	460b      	mov	r3, r1
 800cea4:	18db      	adds	r3, r3, r3
 800cea6:	653b      	str	r3, [r7, #80]	; 0x50
 800cea8:	4613      	mov	r3, r2
 800ceaa:	eb42 0303 	adc.w	r3, r2, r3
 800ceae:	657b      	str	r3, [r7, #84]	; 0x54
 800ceb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ceb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ceb8:	f7f3 fee6 	bl	8000c88 <__aeabi_uldivmod>
 800cebc:	4602      	mov	r2, r0
 800cebe:	460b      	mov	r3, r1
 800cec0:	4b61      	ldr	r3, [pc, #388]	; (800d048 <UART_SetConfig+0x2d4>)
 800cec2:	fba3 2302 	umull	r2, r3, r3, r2
 800cec6:	095b      	lsrs	r3, r3, #5
 800cec8:	011c      	lsls	r4, r3, #4
 800ceca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cece:	2200      	movs	r2, #0
 800ced0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ced4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ced8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cedc:	4642      	mov	r2, r8
 800cede:	464b      	mov	r3, r9
 800cee0:	1891      	adds	r1, r2, r2
 800cee2:	64b9      	str	r1, [r7, #72]	; 0x48
 800cee4:	415b      	adcs	r3, r3
 800cee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cee8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ceec:	4641      	mov	r1, r8
 800ceee:	eb12 0a01 	adds.w	sl, r2, r1
 800cef2:	4649      	mov	r1, r9
 800cef4:	eb43 0b01 	adc.w	fp, r3, r1
 800cef8:	f04f 0200 	mov.w	r2, #0
 800cefc:	f04f 0300 	mov.w	r3, #0
 800cf00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cf04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cf08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf0c:	4692      	mov	sl, r2
 800cf0e:	469b      	mov	fp, r3
 800cf10:	4643      	mov	r3, r8
 800cf12:	eb1a 0303 	adds.w	r3, sl, r3
 800cf16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cf1a:	464b      	mov	r3, r9
 800cf1c:	eb4b 0303 	adc.w	r3, fp, r3
 800cf20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cf24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cf30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cf34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cf38:	460b      	mov	r3, r1
 800cf3a:	18db      	adds	r3, r3, r3
 800cf3c:	643b      	str	r3, [r7, #64]	; 0x40
 800cf3e:	4613      	mov	r3, r2
 800cf40:	eb42 0303 	adc.w	r3, r2, r3
 800cf44:	647b      	str	r3, [r7, #68]	; 0x44
 800cf46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cf4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cf4e:	f7f3 fe9b 	bl	8000c88 <__aeabi_uldivmod>
 800cf52:	4602      	mov	r2, r0
 800cf54:	460b      	mov	r3, r1
 800cf56:	4611      	mov	r1, r2
 800cf58:	4b3b      	ldr	r3, [pc, #236]	; (800d048 <UART_SetConfig+0x2d4>)
 800cf5a:	fba3 2301 	umull	r2, r3, r3, r1
 800cf5e:	095b      	lsrs	r3, r3, #5
 800cf60:	2264      	movs	r2, #100	; 0x64
 800cf62:	fb02 f303 	mul.w	r3, r2, r3
 800cf66:	1acb      	subs	r3, r1, r3
 800cf68:	00db      	lsls	r3, r3, #3
 800cf6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cf6e:	4b36      	ldr	r3, [pc, #216]	; (800d048 <UART_SetConfig+0x2d4>)
 800cf70:	fba3 2302 	umull	r2, r3, r3, r2
 800cf74:	095b      	lsrs	r3, r3, #5
 800cf76:	005b      	lsls	r3, r3, #1
 800cf78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cf7c:	441c      	add	r4, r3
 800cf7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf82:	2200      	movs	r2, #0
 800cf84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cf8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cf90:	4642      	mov	r2, r8
 800cf92:	464b      	mov	r3, r9
 800cf94:	1891      	adds	r1, r2, r2
 800cf96:	63b9      	str	r1, [r7, #56]	; 0x38
 800cf98:	415b      	adcs	r3, r3
 800cf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cfa0:	4641      	mov	r1, r8
 800cfa2:	1851      	adds	r1, r2, r1
 800cfa4:	6339      	str	r1, [r7, #48]	; 0x30
 800cfa6:	4649      	mov	r1, r9
 800cfa8:	414b      	adcs	r3, r1
 800cfaa:	637b      	str	r3, [r7, #52]	; 0x34
 800cfac:	f04f 0200 	mov.w	r2, #0
 800cfb0:	f04f 0300 	mov.w	r3, #0
 800cfb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cfb8:	4659      	mov	r1, fp
 800cfba:	00cb      	lsls	r3, r1, #3
 800cfbc:	4651      	mov	r1, sl
 800cfbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cfc2:	4651      	mov	r1, sl
 800cfc4:	00ca      	lsls	r2, r1, #3
 800cfc6:	4610      	mov	r0, r2
 800cfc8:	4619      	mov	r1, r3
 800cfca:	4603      	mov	r3, r0
 800cfcc:	4642      	mov	r2, r8
 800cfce:	189b      	adds	r3, r3, r2
 800cfd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cfd4:	464b      	mov	r3, r9
 800cfd6:	460a      	mov	r2, r1
 800cfd8:	eb42 0303 	adc.w	r3, r2, r3
 800cfdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cfe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cfec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cff0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cff4:	460b      	mov	r3, r1
 800cff6:	18db      	adds	r3, r3, r3
 800cff8:	62bb      	str	r3, [r7, #40]	; 0x28
 800cffa:	4613      	mov	r3, r2
 800cffc:	eb42 0303 	adc.w	r3, r2, r3
 800d000:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d002:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d006:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d00a:	f7f3 fe3d 	bl	8000c88 <__aeabi_uldivmod>
 800d00e:	4602      	mov	r2, r0
 800d010:	460b      	mov	r3, r1
 800d012:	4b0d      	ldr	r3, [pc, #52]	; (800d048 <UART_SetConfig+0x2d4>)
 800d014:	fba3 1302 	umull	r1, r3, r3, r2
 800d018:	095b      	lsrs	r3, r3, #5
 800d01a:	2164      	movs	r1, #100	; 0x64
 800d01c:	fb01 f303 	mul.w	r3, r1, r3
 800d020:	1ad3      	subs	r3, r2, r3
 800d022:	00db      	lsls	r3, r3, #3
 800d024:	3332      	adds	r3, #50	; 0x32
 800d026:	4a08      	ldr	r2, [pc, #32]	; (800d048 <UART_SetConfig+0x2d4>)
 800d028:	fba2 2303 	umull	r2, r3, r2, r3
 800d02c:	095b      	lsrs	r3, r3, #5
 800d02e:	f003 0207 	and.w	r2, r3, #7
 800d032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4422      	add	r2, r4
 800d03a:	609a      	str	r2, [r3, #8]
 800d03c:	e105      	b.n	800d24a <UART_SetConfig+0x4d6>
 800d03e:	bf00      	nop
 800d040:	40011000 	.word	0x40011000
 800d044:	40011400 	.word	0x40011400
 800d048:	51eb851f 	.word	0x51eb851f
 800d04c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d050:	2200      	movs	r2, #0
 800d052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d056:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d05a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d05e:	4642      	mov	r2, r8
 800d060:	464b      	mov	r3, r9
 800d062:	1891      	adds	r1, r2, r2
 800d064:	6239      	str	r1, [r7, #32]
 800d066:	415b      	adcs	r3, r3
 800d068:	627b      	str	r3, [r7, #36]	; 0x24
 800d06a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d06e:	4641      	mov	r1, r8
 800d070:	1854      	adds	r4, r2, r1
 800d072:	4649      	mov	r1, r9
 800d074:	eb43 0501 	adc.w	r5, r3, r1
 800d078:	f04f 0200 	mov.w	r2, #0
 800d07c:	f04f 0300 	mov.w	r3, #0
 800d080:	00eb      	lsls	r3, r5, #3
 800d082:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d086:	00e2      	lsls	r2, r4, #3
 800d088:	4614      	mov	r4, r2
 800d08a:	461d      	mov	r5, r3
 800d08c:	4643      	mov	r3, r8
 800d08e:	18e3      	adds	r3, r4, r3
 800d090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d094:	464b      	mov	r3, r9
 800d096:	eb45 0303 	adc.w	r3, r5, r3
 800d09a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d09e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d0aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d0ae:	f04f 0200 	mov.w	r2, #0
 800d0b2:	f04f 0300 	mov.w	r3, #0
 800d0b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	008b      	lsls	r3, r1, #2
 800d0be:	4621      	mov	r1, r4
 800d0c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d0c4:	4621      	mov	r1, r4
 800d0c6:	008a      	lsls	r2, r1, #2
 800d0c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d0cc:	f7f3 fddc 	bl	8000c88 <__aeabi_uldivmod>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	4b60      	ldr	r3, [pc, #384]	; (800d258 <UART_SetConfig+0x4e4>)
 800d0d6:	fba3 2302 	umull	r2, r3, r3, r2
 800d0da:	095b      	lsrs	r3, r3, #5
 800d0dc:	011c      	lsls	r4, r3, #4
 800d0de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d0e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d0ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d0f0:	4642      	mov	r2, r8
 800d0f2:	464b      	mov	r3, r9
 800d0f4:	1891      	adds	r1, r2, r2
 800d0f6:	61b9      	str	r1, [r7, #24]
 800d0f8:	415b      	adcs	r3, r3
 800d0fa:	61fb      	str	r3, [r7, #28]
 800d0fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d100:	4641      	mov	r1, r8
 800d102:	1851      	adds	r1, r2, r1
 800d104:	6139      	str	r1, [r7, #16]
 800d106:	4649      	mov	r1, r9
 800d108:	414b      	adcs	r3, r1
 800d10a:	617b      	str	r3, [r7, #20]
 800d10c:	f04f 0200 	mov.w	r2, #0
 800d110:	f04f 0300 	mov.w	r3, #0
 800d114:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d118:	4659      	mov	r1, fp
 800d11a:	00cb      	lsls	r3, r1, #3
 800d11c:	4651      	mov	r1, sl
 800d11e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d122:	4651      	mov	r1, sl
 800d124:	00ca      	lsls	r2, r1, #3
 800d126:	4610      	mov	r0, r2
 800d128:	4619      	mov	r1, r3
 800d12a:	4603      	mov	r3, r0
 800d12c:	4642      	mov	r2, r8
 800d12e:	189b      	adds	r3, r3, r2
 800d130:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d134:	464b      	mov	r3, r9
 800d136:	460a      	mov	r2, r1
 800d138:	eb42 0303 	adc.w	r3, r2, r3
 800d13c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	67bb      	str	r3, [r7, #120]	; 0x78
 800d14a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d14c:	f04f 0200 	mov.w	r2, #0
 800d150:	f04f 0300 	mov.w	r3, #0
 800d154:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d158:	4649      	mov	r1, r9
 800d15a:	008b      	lsls	r3, r1, #2
 800d15c:	4641      	mov	r1, r8
 800d15e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d162:	4641      	mov	r1, r8
 800d164:	008a      	lsls	r2, r1, #2
 800d166:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d16a:	f7f3 fd8d 	bl	8000c88 <__aeabi_uldivmod>
 800d16e:	4602      	mov	r2, r0
 800d170:	460b      	mov	r3, r1
 800d172:	4b39      	ldr	r3, [pc, #228]	; (800d258 <UART_SetConfig+0x4e4>)
 800d174:	fba3 1302 	umull	r1, r3, r3, r2
 800d178:	095b      	lsrs	r3, r3, #5
 800d17a:	2164      	movs	r1, #100	; 0x64
 800d17c:	fb01 f303 	mul.w	r3, r1, r3
 800d180:	1ad3      	subs	r3, r2, r3
 800d182:	011b      	lsls	r3, r3, #4
 800d184:	3332      	adds	r3, #50	; 0x32
 800d186:	4a34      	ldr	r2, [pc, #208]	; (800d258 <UART_SetConfig+0x4e4>)
 800d188:	fba2 2303 	umull	r2, r3, r2, r3
 800d18c:	095b      	lsrs	r3, r3, #5
 800d18e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d192:	441c      	add	r4, r3
 800d194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d198:	2200      	movs	r2, #0
 800d19a:	673b      	str	r3, [r7, #112]	; 0x70
 800d19c:	677a      	str	r2, [r7, #116]	; 0x74
 800d19e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d1a2:	4642      	mov	r2, r8
 800d1a4:	464b      	mov	r3, r9
 800d1a6:	1891      	adds	r1, r2, r2
 800d1a8:	60b9      	str	r1, [r7, #8]
 800d1aa:	415b      	adcs	r3, r3
 800d1ac:	60fb      	str	r3, [r7, #12]
 800d1ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d1b2:	4641      	mov	r1, r8
 800d1b4:	1851      	adds	r1, r2, r1
 800d1b6:	6039      	str	r1, [r7, #0]
 800d1b8:	4649      	mov	r1, r9
 800d1ba:	414b      	adcs	r3, r1
 800d1bc:	607b      	str	r3, [r7, #4]
 800d1be:	f04f 0200 	mov.w	r2, #0
 800d1c2:	f04f 0300 	mov.w	r3, #0
 800d1c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d1ca:	4659      	mov	r1, fp
 800d1cc:	00cb      	lsls	r3, r1, #3
 800d1ce:	4651      	mov	r1, sl
 800d1d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1d4:	4651      	mov	r1, sl
 800d1d6:	00ca      	lsls	r2, r1, #3
 800d1d8:	4610      	mov	r0, r2
 800d1da:	4619      	mov	r1, r3
 800d1dc:	4603      	mov	r3, r0
 800d1de:	4642      	mov	r2, r8
 800d1e0:	189b      	adds	r3, r3, r2
 800d1e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d1e4:	464b      	mov	r3, r9
 800d1e6:	460a      	mov	r2, r1
 800d1e8:	eb42 0303 	adc.w	r3, r2, r3
 800d1ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d1ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	663b      	str	r3, [r7, #96]	; 0x60
 800d1f8:	667a      	str	r2, [r7, #100]	; 0x64
 800d1fa:	f04f 0200 	mov.w	r2, #0
 800d1fe:	f04f 0300 	mov.w	r3, #0
 800d202:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d206:	4649      	mov	r1, r9
 800d208:	008b      	lsls	r3, r1, #2
 800d20a:	4641      	mov	r1, r8
 800d20c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d210:	4641      	mov	r1, r8
 800d212:	008a      	lsls	r2, r1, #2
 800d214:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d218:	f7f3 fd36 	bl	8000c88 <__aeabi_uldivmod>
 800d21c:	4602      	mov	r2, r0
 800d21e:	460b      	mov	r3, r1
 800d220:	4b0d      	ldr	r3, [pc, #52]	; (800d258 <UART_SetConfig+0x4e4>)
 800d222:	fba3 1302 	umull	r1, r3, r3, r2
 800d226:	095b      	lsrs	r3, r3, #5
 800d228:	2164      	movs	r1, #100	; 0x64
 800d22a:	fb01 f303 	mul.w	r3, r1, r3
 800d22e:	1ad3      	subs	r3, r2, r3
 800d230:	011b      	lsls	r3, r3, #4
 800d232:	3332      	adds	r3, #50	; 0x32
 800d234:	4a08      	ldr	r2, [pc, #32]	; (800d258 <UART_SetConfig+0x4e4>)
 800d236:	fba2 2303 	umull	r2, r3, r2, r3
 800d23a:	095b      	lsrs	r3, r3, #5
 800d23c:	f003 020f 	and.w	r2, r3, #15
 800d240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	4422      	add	r2, r4
 800d248:	609a      	str	r2, [r3, #8]
 800d24a:	bf00      	nop
 800d24c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d250:	46bd      	mov	sp, r7
 800d252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d256:	bf00      	nop
 800d258:	51eb851f 	.word	0x51eb851f

0800d25c <__NVIC_SetPriority>:
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
 800d262:	4603      	mov	r3, r0
 800d264:	6039      	str	r1, [r7, #0]
 800d266:	71fb      	strb	r3, [r7, #7]
 800d268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	db0a      	blt.n	800d286 <__NVIC_SetPriority+0x2a>
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	b2da      	uxtb	r2, r3
 800d274:	490c      	ldr	r1, [pc, #48]	; (800d2a8 <__NVIC_SetPriority+0x4c>)
 800d276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d27a:	0112      	lsls	r2, r2, #4
 800d27c:	b2d2      	uxtb	r2, r2
 800d27e:	440b      	add	r3, r1
 800d280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800d284:	e00a      	b.n	800d29c <__NVIC_SetPriority+0x40>
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	b2da      	uxtb	r2, r3
 800d28a:	4908      	ldr	r1, [pc, #32]	; (800d2ac <__NVIC_SetPriority+0x50>)
 800d28c:	79fb      	ldrb	r3, [r7, #7]
 800d28e:	f003 030f 	and.w	r3, r3, #15
 800d292:	3b04      	subs	r3, #4
 800d294:	0112      	lsls	r2, r2, #4
 800d296:	b2d2      	uxtb	r2, r2
 800d298:	440b      	add	r3, r1
 800d29a:	761a      	strb	r2, [r3, #24]
 800d29c:	bf00      	nop
 800d29e:	370c      	adds	r7, #12
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr
 800d2a8:	e000e100 	.word	0xe000e100
 800d2ac:	e000ed00 	.word	0xe000ed00

0800d2b0 <SVC_Setup>:
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	f06f 0004 	mvn.w	r0, #4
 800d2ba:	f7ff ffcf 	bl	800d25c <__NVIC_SetPriority>
 800d2be:	bf00      	nop
 800d2c0:	bd80      	pop	{r7, pc}
	...

0800d2c4 <osKernelInitialize>:
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	f3ef 8305 	mrs	r3, IPSR
 800d2ce:	603b      	str	r3, [r7, #0]
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d003      	beq.n	800d2de <osKernelInitialize+0x1a>
 800d2d6:	f06f 0305 	mvn.w	r3, #5
 800d2da:	607b      	str	r3, [r7, #4]
 800d2dc:	e00c      	b.n	800d2f8 <osKernelInitialize+0x34>
 800d2de:	4b0a      	ldr	r3, [pc, #40]	; (800d308 <osKernelInitialize+0x44>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d105      	bne.n	800d2f2 <osKernelInitialize+0x2e>
 800d2e6:	4b08      	ldr	r3, [pc, #32]	; (800d308 <osKernelInitialize+0x44>)
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	601a      	str	r2, [r3, #0]
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	607b      	str	r3, [r7, #4]
 800d2f0:	e002      	b.n	800d2f8 <osKernelInitialize+0x34>
 800d2f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2f6:	607b      	str	r3, [r7, #4]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	370c      	adds	r7, #12
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop
 800d308:	2000086c 	.word	0x2000086c

0800d30c <osKernelStart>:
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	f3ef 8305 	mrs	r3, IPSR
 800d316:	603b      	str	r3, [r7, #0]
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d003      	beq.n	800d326 <osKernelStart+0x1a>
 800d31e:	f06f 0305 	mvn.w	r3, #5
 800d322:	607b      	str	r3, [r7, #4]
 800d324:	e010      	b.n	800d348 <osKernelStart+0x3c>
 800d326:	4b0b      	ldr	r3, [pc, #44]	; (800d354 <osKernelStart+0x48>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d109      	bne.n	800d342 <osKernelStart+0x36>
 800d32e:	f7ff ffbf 	bl	800d2b0 <SVC_Setup>
 800d332:	4b08      	ldr	r3, [pc, #32]	; (800d354 <osKernelStart+0x48>)
 800d334:	2202      	movs	r2, #2
 800d336:	601a      	str	r2, [r3, #0]
 800d338:	f001 f912 	bl	800e560 <vTaskStartScheduler>
 800d33c:	2300      	movs	r3, #0
 800d33e:	607b      	str	r3, [r7, #4]
 800d340:	e002      	b.n	800d348 <osKernelStart+0x3c>
 800d342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d346:	607b      	str	r3, [r7, #4]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4618      	mov	r0, r3
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	2000086c 	.word	0x2000086c

0800d358 <osThreadNew>:
 800d358:	b580      	push	{r7, lr}
 800d35a:	b08e      	sub	sp, #56	; 0x38
 800d35c:	af04      	add	r7, sp, #16
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
 800d364:	2300      	movs	r3, #0
 800d366:	613b      	str	r3, [r7, #16]
 800d368:	f3ef 8305 	mrs	r3, IPSR
 800d36c:	617b      	str	r3, [r7, #20]
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d17f      	bne.n	800d474 <osThreadNew+0x11c>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d07c      	beq.n	800d474 <osThreadNew+0x11c>
 800d37a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d37e:	623b      	str	r3, [r7, #32]
 800d380:	2318      	movs	r3, #24
 800d382:	61fb      	str	r3, [r7, #28]
 800d384:	2300      	movs	r3, #0
 800d386:	627b      	str	r3, [r7, #36]	; 0x24
 800d388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d38c:	61bb      	str	r3, [r7, #24]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d045      	beq.n	800d420 <osThreadNew+0xc8>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d002      	beq.n	800d3a2 <osThreadNew+0x4a>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	627b      	str	r3, [r7, #36]	; 0x24
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	699b      	ldr	r3, [r3, #24]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d002      	beq.n	800d3b0 <osThreadNew+0x58>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	699b      	ldr	r3, [r3, #24]
 800d3ae:	61fb      	str	r3, [r7, #28]
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d008      	beq.n	800d3c8 <osThreadNew+0x70>
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	2b38      	cmp	r3, #56	; 0x38
 800d3ba:	d805      	bhi.n	800d3c8 <osThreadNew+0x70>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	f003 0301 	and.w	r3, r3, #1
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d001      	beq.n	800d3cc <osThreadNew+0x74>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	e054      	b.n	800d476 <osThreadNew+0x11e>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	695b      	ldr	r3, [r3, #20]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d003      	beq.n	800d3dc <osThreadNew+0x84>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	695b      	ldr	r3, [r3, #20]
 800d3d8:	089b      	lsrs	r3, r3, #2
 800d3da:	623b      	str	r3, [r7, #32]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00e      	beq.n	800d402 <osThreadNew+0xaa>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	2b5b      	cmp	r3, #91	; 0x5b
 800d3ea:	d90a      	bls.n	800d402 <osThreadNew+0xaa>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	691b      	ldr	r3, [r3, #16]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d006      	beq.n	800d402 <osThreadNew+0xaa>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	695b      	ldr	r3, [r3, #20]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <osThreadNew+0xaa>
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	61bb      	str	r3, [r7, #24]
 800d400:	e010      	b.n	800d424 <osThreadNew+0xcc>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	689b      	ldr	r3, [r3, #8]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d10c      	bne.n	800d424 <osThreadNew+0xcc>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d108      	bne.n	800d424 <osThreadNew+0xcc>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	691b      	ldr	r3, [r3, #16]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d104      	bne.n	800d424 <osThreadNew+0xcc>
 800d41a:	2300      	movs	r3, #0
 800d41c:	61bb      	str	r3, [r7, #24]
 800d41e:	e001      	b.n	800d424 <osThreadNew+0xcc>
 800d420:	2300      	movs	r3, #0
 800d422:	61bb      	str	r3, [r7, #24]
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	2b01      	cmp	r3, #1
 800d428:	d110      	bne.n	800d44c <osThreadNew+0xf4>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	691b      	ldr	r3, [r3, #16]
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	6892      	ldr	r2, [r2, #8]
 800d432:	9202      	str	r2, [sp, #8]
 800d434:	9301      	str	r3, [sp, #4]
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	9300      	str	r3, [sp, #0]
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	6a3a      	ldr	r2, [r7, #32]
 800d43e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	f000 fe39 	bl	800e0b8 <xTaskCreateStatic>
 800d446:	4603      	mov	r3, r0
 800d448:	613b      	str	r3, [r7, #16]
 800d44a:	e013      	b.n	800d474 <osThreadNew+0x11c>
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d110      	bne.n	800d474 <osThreadNew+0x11c>
 800d452:	6a3b      	ldr	r3, [r7, #32]
 800d454:	b29a      	uxth	r2, r3
 800d456:	f107 0310 	add.w	r3, r7, #16
 800d45a:	9301      	str	r3, [sp, #4]
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	9300      	str	r3, [sp, #0]
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f000 fe84 	bl	800e172 <xTaskCreate>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d001      	beq.n	800d474 <osThreadNew+0x11c>
 800d470:	2300      	movs	r3, #0
 800d472:	613b      	str	r3, [r7, #16]
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	4618      	mov	r0, r3
 800d478:	3728      	adds	r7, #40	; 0x28
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <osDelay>:
 800d47e:	b580      	push	{r7, lr}
 800d480:	b084      	sub	sp, #16
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
 800d486:	f3ef 8305 	mrs	r3, IPSR
 800d48a:	60bb      	str	r3, [r7, #8]
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d003      	beq.n	800d49a <osDelay+0x1c>
 800d492:	f06f 0305 	mvn.w	r3, #5
 800d496:	60fb      	str	r3, [r7, #12]
 800d498:	e007      	b.n	800d4aa <osDelay+0x2c>
 800d49a:	2300      	movs	r3, #0
 800d49c:	60fb      	str	r3, [r7, #12]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d002      	beq.n	800d4aa <osDelay+0x2c>
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f001 f827 	bl	800e4f8 <vTaskDelay>
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3710      	adds	r7, #16
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <osDelayUntil>:
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b086      	sub	sp, #24
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	f3ef 8305 	mrs	r3, IPSR
 800d4c0:	60fb      	str	r3, [r7, #12]
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d003      	beq.n	800d4d0 <osDelayUntil+0x1c>
 800d4c8:	f06f 0305 	mvn.w	r3, #5
 800d4cc:	617b      	str	r3, [r7, #20]
 800d4ce:	e019      	b.n	800d504 <osDelayUntil+0x50>
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	617b      	str	r3, [r7, #20]
 800d4d4:	f001 f956 	bl	800e784 <xTaskGetTickCount>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	60bb      	str	r3, [r7, #8]
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	1ad3      	subs	r3, r2, r3
 800d4e2:	613b      	str	r3, [r7, #16]
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d009      	beq.n	800d4fe <osDelayUntil+0x4a>
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	db06      	blt.n	800d4fe <osDelayUntil+0x4a>
 800d4f0:	f107 0308 	add.w	r3, r7, #8
 800d4f4:	6939      	ldr	r1, [r7, #16]
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f000 ff80 	bl	800e3fc <vTaskDelayUntil>
 800d4fc:	e002      	b.n	800d504 <osDelayUntil+0x50>
 800d4fe:	f06f 0303 	mvn.w	r3, #3
 800d502:	617b      	str	r3, [r7, #20]
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	4618      	mov	r0, r3
 800d508:	3718      	adds	r7, #24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
	...

0800d510 <vApplicationGetIdleTaskMemory>:
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	4a07      	ldr	r2, [pc, #28]	; (800d53c <vApplicationGetIdleTaskMemory+0x2c>)
 800d520:	601a      	str	r2, [r3, #0]
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	4a06      	ldr	r2, [pc, #24]	; (800d540 <vApplicationGetIdleTaskMemory+0x30>)
 800d526:	601a      	str	r2, [r3, #0]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d52e:	601a      	str	r2, [r3, #0]
 800d530:	bf00      	nop
 800d532:	3714      	adds	r7, #20
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr
 800d53c:	20000870 	.word	0x20000870
 800d540:	200008cc 	.word	0x200008cc

0800d544 <vApplicationGetTimerTaskMemory>:
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	607a      	str	r2, [r7, #4]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	4a07      	ldr	r2, [pc, #28]	; (800d570 <vApplicationGetTimerTaskMemory+0x2c>)
 800d554:	601a      	str	r2, [r3, #0]
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	4a06      	ldr	r2, [pc, #24]	; (800d574 <vApplicationGetTimerTaskMemory+0x30>)
 800d55a:	601a      	str	r2, [r3, #0]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d562:	601a      	str	r2, [r3, #0]
 800d564:	bf00      	nop
 800d566:	3714      	adds	r7, #20
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr
 800d570:	200010cc 	.word	0x200010cc
 800d574:	20001128 	.word	0x20001128

0800d578 <vListInitialise>:
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f103 0208 	add.w	r2, r3, #8
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	605a      	str	r2, [r3, #4]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d590:	609a      	str	r2, [r3, #8]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f103 0208 	add.w	r2, r3, #8
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	60da      	str	r2, [r3, #12]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f103 0208 	add.w	r2, r3, #8
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	611a      	str	r2, [r3, #16]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	601a      	str	r2, [r3, #0]
 800d5ac:	bf00      	nop
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <vListInitialiseItem>:
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	611a      	str	r2, [r3, #16]
 800d5c6:	bf00      	nop
 800d5c8:	370c      	adds	r7, #12
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr

0800d5d2 <vListInsertEnd>:
 800d5d2:	b480      	push	{r7}
 800d5d4:	b085      	sub	sp, #20
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
 800d5da:	6039      	str	r1, [r7, #0]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	60fb      	str	r3, [r7, #12]
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	605a      	str	r2, [r3, #4]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	689a      	ldr	r2, [r3, #8]
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	609a      	str	r2, [r3, #8]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	683a      	ldr	r2, [r7, #0]
 800d5f6:	605a      	str	r2, [r3, #4]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	683a      	ldr	r2, [r7, #0]
 800d5fc:	609a      	str	r2, [r3, #8]
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	611a      	str	r2, [r3, #16]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	1c5a      	adds	r2, r3, #1
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	601a      	str	r2, [r3, #0]
 800d60e:	bf00      	nop
 800d610:	3714      	adds	r7, #20
 800d612:	46bd      	mov	sp, r7
 800d614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d618:	4770      	bx	lr

0800d61a <vListInsert>:
 800d61a:	b480      	push	{r7}
 800d61c:	b085      	sub	sp, #20
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
 800d622:	6039      	str	r1, [r7, #0]
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	60bb      	str	r3, [r7, #8]
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d630:	d103      	bne.n	800d63a <vListInsert+0x20>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	691b      	ldr	r3, [r3, #16]
 800d636:	60fb      	str	r3, [r7, #12]
 800d638:	e00c      	b.n	800d654 <vListInsert+0x3a>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	3308      	adds	r3, #8
 800d63e:	60fb      	str	r3, [r7, #12]
 800d640:	e002      	b.n	800d648 <vListInsert+0x2e>
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	60fb      	str	r3, [r7, #12]
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	68ba      	ldr	r2, [r7, #8]
 800d650:	429a      	cmp	r2, r3
 800d652:	d2f6      	bcs.n	800d642 <vListInsert+0x28>
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	685a      	ldr	r2, [r3, #4]
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	605a      	str	r2, [r3, #4]
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	683a      	ldr	r2, [r7, #0]
 800d662:	609a      	str	r2, [r3, #8]
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	609a      	str	r2, [r3, #8]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	683a      	ldr	r2, [r7, #0]
 800d66e:	605a      	str	r2, [r3, #4]
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	687a      	ldr	r2, [r7, #4]
 800d674:	611a      	str	r2, [r3, #16]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	1c5a      	adds	r2, r3, #1
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	601a      	str	r2, [r3, #0]
 800d680:	bf00      	nop
 800d682:	3714      	adds	r7, #20
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <uxListRemove>:
 800d68c:	b480      	push	{r7}
 800d68e:	b085      	sub	sp, #20
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	691b      	ldr	r3, [r3, #16]
 800d698:	60fb      	str	r3, [r7, #12]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	6892      	ldr	r2, [r2, #8]
 800d6a2:	609a      	str	r2, [r3, #8]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	689b      	ldr	r3, [r3, #8]
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	6852      	ldr	r2, [r2, #4]
 800d6ac:	605a      	str	r2, [r3, #4]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d103      	bne.n	800d6c0 <uxListRemove+0x34>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	689a      	ldr	r2, [r3, #8]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	605a      	str	r2, [r3, #4]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	611a      	str	r2, [r3, #16]
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	1e5a      	subs	r2, r3, #1
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	601a      	str	r2, [r3, #0]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3714      	adds	r7, #20
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <xQueueGenericReset>:
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	60fb      	str	r3, [r7, #12]
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d10a      	bne.n	800d70a <xQueueGenericReset+0x2a>
 800d6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f8:	f383 8811 	msr	BASEPRI, r3
 800d6fc:	f3bf 8f6f 	isb	sy
 800d700:	f3bf 8f4f 	dsb	sy
 800d704:	60bb      	str	r3, [r7, #8]
 800d706:	bf00      	nop
 800d708:	e7fe      	b.n	800d708 <xQueueGenericReset+0x28>
 800d70a:	f002 f8cb 	bl	800f8a4 <vPortEnterCritical>
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d716:	68f9      	ldr	r1, [r7, #12]
 800d718:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d71a:	fb01 f303 	mul.w	r3, r1, r3
 800d71e:	441a      	add	r2, r3
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	609a      	str	r2, [r3, #8]
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2200      	movs	r2, #0
 800d728:	639a      	str	r2, [r3, #56]	; 0x38
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	605a      	str	r2, [r3, #4]
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d73a:	3b01      	subs	r3, #1
 800d73c:	68f9      	ldr	r1, [r7, #12]
 800d73e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d740:	fb01 f303 	mul.w	r3, r1, r3
 800d744:	441a      	add	r2, r3
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	60da      	str	r2, [r3, #12]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	22ff      	movs	r2, #255	; 0xff
 800d74e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	22ff      	movs	r2, #255	; 0xff
 800d756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d114      	bne.n	800d78a <xQueueGenericReset+0xaa>
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	691b      	ldr	r3, [r3, #16]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d01a      	beq.n	800d79e <xQueueGenericReset+0xbe>
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	3310      	adds	r3, #16
 800d76c:	4618      	mov	r0, r3
 800d76e:	f001 f981 	bl	800ea74 <xTaskRemoveFromEventList>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d012      	beq.n	800d79e <xQueueGenericReset+0xbe>
 800d778:	4b0c      	ldr	r3, [pc, #48]	; (800d7ac <xQueueGenericReset+0xcc>)
 800d77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d77e:	601a      	str	r2, [r3, #0]
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	f3bf 8f6f 	isb	sy
 800d788:	e009      	b.n	800d79e <xQueueGenericReset+0xbe>
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	3310      	adds	r3, #16
 800d78e:	4618      	mov	r0, r3
 800d790:	f7ff fef2 	bl	800d578 <vListInitialise>
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	3324      	adds	r3, #36	; 0x24
 800d798:	4618      	mov	r0, r3
 800d79a:	f7ff feed 	bl	800d578 <vListInitialise>
 800d79e:	f002 f8b1 	bl	800f904 <vPortExitCritical>
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	e000ed04 	.word	0xe000ed04

0800d7b0 <xQueueGenericCreateStatic>:
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b08e      	sub	sp, #56	; 0x38
 800d7b4:	af02      	add	r7, sp, #8
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
 800d7bc:	603b      	str	r3, [r7, #0]
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d10a      	bne.n	800d7da <xQueueGenericCreateStatic+0x2a>
 800d7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c8:	f383 8811 	msr	BASEPRI, r3
 800d7cc:	f3bf 8f6f 	isb	sy
 800d7d0:	f3bf 8f4f 	dsb	sy
 800d7d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7d6:	bf00      	nop
 800d7d8:	e7fe      	b.n	800d7d8 <xQueueGenericCreateStatic+0x28>
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d10a      	bne.n	800d7f6 <xQueueGenericCreateStatic+0x46>
 800d7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e4:	f383 8811 	msr	BASEPRI, r3
 800d7e8:	f3bf 8f6f 	isb	sy
 800d7ec:	f3bf 8f4f 	dsb	sy
 800d7f0:	627b      	str	r3, [r7, #36]	; 0x24
 800d7f2:	bf00      	nop
 800d7f4:	e7fe      	b.n	800d7f4 <xQueueGenericCreateStatic+0x44>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d002      	beq.n	800d802 <xQueueGenericCreateStatic+0x52>
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d001      	beq.n	800d806 <xQueueGenericCreateStatic+0x56>
 800d802:	2301      	movs	r3, #1
 800d804:	e000      	b.n	800d808 <xQueueGenericCreateStatic+0x58>
 800d806:	2300      	movs	r3, #0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d10a      	bne.n	800d822 <xQueueGenericCreateStatic+0x72>
 800d80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d810:	f383 8811 	msr	BASEPRI, r3
 800d814:	f3bf 8f6f 	isb	sy
 800d818:	f3bf 8f4f 	dsb	sy
 800d81c:	623b      	str	r3, [r7, #32]
 800d81e:	bf00      	nop
 800d820:	e7fe      	b.n	800d820 <xQueueGenericCreateStatic+0x70>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d102      	bne.n	800d82e <xQueueGenericCreateStatic+0x7e>
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d101      	bne.n	800d832 <xQueueGenericCreateStatic+0x82>
 800d82e:	2301      	movs	r3, #1
 800d830:	e000      	b.n	800d834 <xQueueGenericCreateStatic+0x84>
 800d832:	2300      	movs	r3, #0
 800d834:	2b00      	cmp	r3, #0
 800d836:	d10a      	bne.n	800d84e <xQueueGenericCreateStatic+0x9e>
 800d838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d83c:	f383 8811 	msr	BASEPRI, r3
 800d840:	f3bf 8f6f 	isb	sy
 800d844:	f3bf 8f4f 	dsb	sy
 800d848:	61fb      	str	r3, [r7, #28]
 800d84a:	bf00      	nop
 800d84c:	e7fe      	b.n	800d84c <xQueueGenericCreateStatic+0x9c>
 800d84e:	2350      	movs	r3, #80	; 0x50
 800d850:	617b      	str	r3, [r7, #20]
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	2b50      	cmp	r3, #80	; 0x50
 800d856:	d00a      	beq.n	800d86e <xQueueGenericCreateStatic+0xbe>
 800d858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85c:	f383 8811 	msr	BASEPRI, r3
 800d860:	f3bf 8f6f 	isb	sy
 800d864:	f3bf 8f4f 	dsb	sy
 800d868:	61bb      	str	r3, [r7, #24]
 800d86a:	bf00      	nop
 800d86c:	e7fe      	b.n	800d86c <xQueueGenericCreateStatic+0xbc>
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00d      	beq.n	800d896 <xQueueGenericCreateStatic+0xe6>
 800d87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87c:	2201      	movs	r2, #1
 800d87e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d882:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d888:	9300      	str	r3, [sp, #0]
 800d88a:	4613      	mov	r3, r2
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	68b9      	ldr	r1, [r7, #8]
 800d890:	68f8      	ldr	r0, [r7, #12]
 800d892:	f000 f805 	bl	800d8a0 <prvInitialiseNewQueue>
 800d896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d898:	4618      	mov	r0, r3
 800d89a:	3730      	adds	r7, #48	; 0x30
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <prvInitialiseNewQueue>:
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	60b9      	str	r1, [r7, #8]
 800d8aa:	607a      	str	r2, [r7, #4]
 800d8ac:	70fb      	strb	r3, [r7, #3]
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d103      	bne.n	800d8bc <prvInitialiseNewQueue+0x1c>
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	69ba      	ldr	r2, [r7, #24]
 800d8b8:	601a      	str	r2, [r3, #0]
 800d8ba:	e002      	b.n	800d8c2 <prvInitialiseNewQueue+0x22>
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	601a      	str	r2, [r3, #0]
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	63da      	str	r2, [r3, #60]	; 0x3c
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	68ba      	ldr	r2, [r7, #8]
 800d8cc:	641a      	str	r2, [r3, #64]	; 0x40
 800d8ce:	2101      	movs	r1, #1
 800d8d0:	69b8      	ldr	r0, [r7, #24]
 800d8d2:	f7ff ff05 	bl	800d6e0 <xQueueGenericReset>
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	78fa      	ldrb	r2, [r7, #3]
 800d8da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800d8de:	bf00      	nop
 800d8e0:	3710      	adds	r7, #16
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
	...

0800d8e8 <xQueueGenericSend>:
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b08e      	sub	sp, #56	; 0x38
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]
 800d8f4:	603b      	str	r3, [r7, #0]
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	637b      	str	r3, [r7, #52]	; 0x34
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	633b      	str	r3, [r7, #48]	; 0x30
 800d8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d900:	2b00      	cmp	r3, #0
 800d902:	d10a      	bne.n	800d91a <xQueueGenericSend+0x32>
 800d904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d908:	f383 8811 	msr	BASEPRI, r3
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	f3bf 8f4f 	dsb	sy
 800d914:	62bb      	str	r3, [r7, #40]	; 0x28
 800d916:	bf00      	nop
 800d918:	e7fe      	b.n	800d918 <xQueueGenericSend+0x30>
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d103      	bne.n	800d928 <xQueueGenericSend+0x40>
 800d920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d924:	2b00      	cmp	r3, #0
 800d926:	d101      	bne.n	800d92c <xQueueGenericSend+0x44>
 800d928:	2301      	movs	r3, #1
 800d92a:	e000      	b.n	800d92e <xQueueGenericSend+0x46>
 800d92c:	2300      	movs	r3, #0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d10a      	bne.n	800d948 <xQueueGenericSend+0x60>
 800d932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d936:	f383 8811 	msr	BASEPRI, r3
 800d93a:	f3bf 8f6f 	isb	sy
 800d93e:	f3bf 8f4f 	dsb	sy
 800d942:	627b      	str	r3, [r7, #36]	; 0x24
 800d944:	bf00      	nop
 800d946:	e7fe      	b.n	800d946 <xQueueGenericSend+0x5e>
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	2b02      	cmp	r3, #2
 800d94c:	d103      	bne.n	800d956 <xQueueGenericSend+0x6e>
 800d94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d952:	2b01      	cmp	r3, #1
 800d954:	d101      	bne.n	800d95a <xQueueGenericSend+0x72>
 800d956:	2301      	movs	r3, #1
 800d958:	e000      	b.n	800d95c <xQueueGenericSend+0x74>
 800d95a:	2300      	movs	r3, #0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d10a      	bne.n	800d976 <xQueueGenericSend+0x8e>
 800d960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d964:	f383 8811 	msr	BASEPRI, r3
 800d968:	f3bf 8f6f 	isb	sy
 800d96c:	f3bf 8f4f 	dsb	sy
 800d970:	623b      	str	r3, [r7, #32]
 800d972:	bf00      	nop
 800d974:	e7fe      	b.n	800d974 <xQueueGenericSend+0x8c>
 800d976:	f001 fa3b 	bl	800edf0 <xTaskGetSchedulerState>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d102      	bne.n	800d986 <xQueueGenericSend+0x9e>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d101      	bne.n	800d98a <xQueueGenericSend+0xa2>
 800d986:	2301      	movs	r3, #1
 800d988:	e000      	b.n	800d98c <xQueueGenericSend+0xa4>
 800d98a:	2300      	movs	r3, #0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d10a      	bne.n	800d9a6 <xQueueGenericSend+0xbe>
 800d990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d994:	f383 8811 	msr	BASEPRI, r3
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	61fb      	str	r3, [r7, #28]
 800d9a2:	bf00      	nop
 800d9a4:	e7fe      	b.n	800d9a4 <xQueueGenericSend+0xbc>
 800d9a6:	f001 ff7d 	bl	800f8a4 <vPortEnterCritical>
 800d9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d302      	bcc.n	800d9bc <xQueueGenericSend+0xd4>
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	2b02      	cmp	r3, #2
 800d9ba:	d129      	bne.n	800da10 <xQueueGenericSend+0x128>
 800d9bc:	683a      	ldr	r2, [r7, #0]
 800d9be:	68b9      	ldr	r1, [r7, #8]
 800d9c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9c2:	f000 fa0b 	bl	800dddc <prvCopyDataToQueue>
 800d9c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d010      	beq.n	800d9f2 <xQueueGenericSend+0x10a>
 800d9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d2:	3324      	adds	r3, #36	; 0x24
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f001 f84d 	bl	800ea74 <xTaskRemoveFromEventList>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d013      	beq.n	800da08 <xQueueGenericSend+0x120>
 800d9e0:	4b3f      	ldr	r3, [pc, #252]	; (800dae0 <xQueueGenericSend+0x1f8>)
 800d9e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9e6:	601a      	str	r2, [r3, #0]
 800d9e8:	f3bf 8f4f 	dsb	sy
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	e00a      	b.n	800da08 <xQueueGenericSend+0x120>
 800d9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d007      	beq.n	800da08 <xQueueGenericSend+0x120>
 800d9f8:	4b39      	ldr	r3, [pc, #228]	; (800dae0 <xQueueGenericSend+0x1f8>)
 800d9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9fe:	601a      	str	r2, [r3, #0]
 800da00:	f3bf 8f4f 	dsb	sy
 800da04:	f3bf 8f6f 	isb	sy
 800da08:	f001 ff7c 	bl	800f904 <vPortExitCritical>
 800da0c:	2301      	movs	r3, #1
 800da0e:	e063      	b.n	800dad8 <xQueueGenericSend+0x1f0>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d103      	bne.n	800da1e <xQueueGenericSend+0x136>
 800da16:	f001 ff75 	bl	800f904 <vPortExitCritical>
 800da1a:	2300      	movs	r3, #0
 800da1c:	e05c      	b.n	800dad8 <xQueueGenericSend+0x1f0>
 800da1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da20:	2b00      	cmp	r3, #0
 800da22:	d106      	bne.n	800da32 <xQueueGenericSend+0x14a>
 800da24:	f107 0314 	add.w	r3, r7, #20
 800da28:	4618      	mov	r0, r3
 800da2a:	f001 f887 	bl	800eb3c <vTaskInternalSetTimeOutState>
 800da2e:	2301      	movs	r3, #1
 800da30:	637b      	str	r3, [r7, #52]	; 0x34
 800da32:	f001 ff67 	bl	800f904 <vPortExitCritical>
 800da36:	f000 fdf9 	bl	800e62c <vTaskSuspendAll>
 800da3a:	f001 ff33 	bl	800f8a4 <vPortEnterCritical>
 800da3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da44:	b25b      	sxtb	r3, r3
 800da46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da4a:	d103      	bne.n	800da54 <xQueueGenericSend+0x16c>
 800da4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4e:	2200      	movs	r2, #0
 800da50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da5a:	b25b      	sxtb	r3, r3
 800da5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da60:	d103      	bne.n	800da6a <xQueueGenericSend+0x182>
 800da62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da64:	2200      	movs	r2, #0
 800da66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da6a:	f001 ff4b 	bl	800f904 <vPortExitCritical>
 800da6e:	1d3a      	adds	r2, r7, #4
 800da70:	f107 0314 	add.w	r3, r7, #20
 800da74:	4611      	mov	r1, r2
 800da76:	4618      	mov	r0, r3
 800da78:	f001 f876 	bl	800eb68 <xTaskCheckForTimeOut>
 800da7c:	4603      	mov	r3, r0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d124      	bne.n	800dacc <xQueueGenericSend+0x1e4>
 800da82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da84:	f000 faa2 	bl	800dfcc <prvIsQueueFull>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d018      	beq.n	800dac0 <xQueueGenericSend+0x1d8>
 800da8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da90:	3310      	adds	r3, #16
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	4611      	mov	r1, r2
 800da96:	4618      	mov	r0, r3
 800da98:	f000 ff9c 	bl	800e9d4 <vTaskPlaceOnEventList>
 800da9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da9e:	f000 fa2d 	bl	800defc <prvUnlockQueue>
 800daa2:	f000 fdd1 	bl	800e648 <xTaskResumeAll>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f47f af7c 	bne.w	800d9a6 <xQueueGenericSend+0xbe>
 800daae:	4b0c      	ldr	r3, [pc, #48]	; (800dae0 <xQueueGenericSend+0x1f8>)
 800dab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dab4:	601a      	str	r2, [r3, #0]
 800dab6:	f3bf 8f4f 	dsb	sy
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	e772      	b.n	800d9a6 <xQueueGenericSend+0xbe>
 800dac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dac2:	f000 fa1b 	bl	800defc <prvUnlockQueue>
 800dac6:	f000 fdbf 	bl	800e648 <xTaskResumeAll>
 800daca:	e76c      	b.n	800d9a6 <xQueueGenericSend+0xbe>
 800dacc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dace:	f000 fa15 	bl	800defc <prvUnlockQueue>
 800dad2:	f000 fdb9 	bl	800e648 <xTaskResumeAll>
 800dad6:	2300      	movs	r3, #0
 800dad8:	4618      	mov	r0, r3
 800dada:	3738      	adds	r7, #56	; 0x38
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	e000ed04 	.word	0xe000ed04

0800dae4 <xQueueGenericSendFromISR>:
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b090      	sub	sp, #64	; 0x40
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	607a      	str	r2, [r7, #4]
 800daf0:	603b      	str	r3, [r7, #0]
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	63bb      	str	r3, [r7, #56]	; 0x38
 800daf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d10a      	bne.n	800db12 <xQueueGenericSendFromISR+0x2e>
 800dafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db00:	f383 8811 	msr	BASEPRI, r3
 800db04:	f3bf 8f6f 	isb	sy
 800db08:	f3bf 8f4f 	dsb	sy
 800db0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800db0e:	bf00      	nop
 800db10:	e7fe      	b.n	800db10 <xQueueGenericSendFromISR+0x2c>
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d103      	bne.n	800db20 <xQueueGenericSendFromISR+0x3c>
 800db18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d101      	bne.n	800db24 <xQueueGenericSendFromISR+0x40>
 800db20:	2301      	movs	r3, #1
 800db22:	e000      	b.n	800db26 <xQueueGenericSendFromISR+0x42>
 800db24:	2300      	movs	r3, #0
 800db26:	2b00      	cmp	r3, #0
 800db28:	d10a      	bne.n	800db40 <xQueueGenericSendFromISR+0x5c>
 800db2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db2e:	f383 8811 	msr	BASEPRI, r3
 800db32:	f3bf 8f6f 	isb	sy
 800db36:	f3bf 8f4f 	dsb	sy
 800db3a:	627b      	str	r3, [r7, #36]	; 0x24
 800db3c:	bf00      	nop
 800db3e:	e7fe      	b.n	800db3e <xQueueGenericSendFromISR+0x5a>
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	2b02      	cmp	r3, #2
 800db44:	d103      	bne.n	800db4e <xQueueGenericSendFromISR+0x6a>
 800db46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d101      	bne.n	800db52 <xQueueGenericSendFromISR+0x6e>
 800db4e:	2301      	movs	r3, #1
 800db50:	e000      	b.n	800db54 <xQueueGenericSendFromISR+0x70>
 800db52:	2300      	movs	r3, #0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d10a      	bne.n	800db6e <xQueueGenericSendFromISR+0x8a>
 800db58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db5c:	f383 8811 	msr	BASEPRI, r3
 800db60:	f3bf 8f6f 	isb	sy
 800db64:	f3bf 8f4f 	dsb	sy
 800db68:	623b      	str	r3, [r7, #32]
 800db6a:	bf00      	nop
 800db6c:	e7fe      	b.n	800db6c <xQueueGenericSendFromISR+0x88>
 800db6e:	f001 ff7b 	bl	800fa68 <vPortValidateInterruptPriority>
 800db72:	f3ef 8211 	mrs	r2, BASEPRI
 800db76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7a:	f383 8811 	msr	BASEPRI, r3
 800db7e:	f3bf 8f6f 	isb	sy
 800db82:	f3bf 8f4f 	dsb	sy
 800db86:	61fa      	str	r2, [r7, #28]
 800db88:	61bb      	str	r3, [r7, #24]
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	637b      	str	r3, [r7, #52]	; 0x34
 800db8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db96:	429a      	cmp	r2, r3
 800db98:	d302      	bcc.n	800dba0 <xQueueGenericSendFromISR+0xbc>
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	2b02      	cmp	r3, #2
 800db9e:	d12f      	bne.n	800dc00 <xQueueGenericSendFromISR+0x11c>
 800dba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbb0:	683a      	ldr	r2, [r7, #0]
 800dbb2:	68b9      	ldr	r1, [r7, #8]
 800dbb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dbb6:	f000 f911 	bl	800dddc <prvCopyDataToQueue>
 800dbba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800dbbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbc2:	d112      	bne.n	800dbea <xQueueGenericSendFromISR+0x106>
 800dbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d016      	beq.n	800dbfa <xQueueGenericSendFromISR+0x116>
 800dbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbce:	3324      	adds	r3, #36	; 0x24
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f000 ff4f 	bl	800ea74 <xTaskRemoveFromEventList>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d00e      	beq.n	800dbfa <xQueueGenericSendFromISR+0x116>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d00b      	beq.n	800dbfa <xQueueGenericSendFromISR+0x116>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	601a      	str	r2, [r3, #0]
 800dbe8:	e007      	b.n	800dbfa <xQueueGenericSendFromISR+0x116>
 800dbea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dbee:	3301      	adds	r3, #1
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	b25a      	sxtb	r2, r3
 800dbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbfe:	e001      	b.n	800dc04 <xQueueGenericSendFromISR+0x120>
 800dc00:	2300      	movs	r3, #0
 800dc02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc06:	617b      	str	r3, [r7, #20]
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	f383 8811 	msr	BASEPRI, r3
 800dc0e:	bf00      	nop
 800dc10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc12:	4618      	mov	r0, r3
 800dc14:	3740      	adds	r7, #64	; 0x40
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
	...

0800dc1c <xQueueReceive>:
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b08c      	sub	sp, #48	; 0x30
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	607a      	str	r2, [r7, #4]
 800dc28:	2300      	movs	r3, #0
 800dc2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d10a      	bne.n	800dc4c <xQueueReceive+0x30>
 800dc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc3a:	f383 8811 	msr	BASEPRI, r3
 800dc3e:	f3bf 8f6f 	isb	sy
 800dc42:	f3bf 8f4f 	dsb	sy
 800dc46:	623b      	str	r3, [r7, #32]
 800dc48:	bf00      	nop
 800dc4a:	e7fe      	b.n	800dc4a <xQueueReceive+0x2e>
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d103      	bne.n	800dc5a <xQueueReceive+0x3e>
 800dc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d101      	bne.n	800dc5e <xQueueReceive+0x42>
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	e000      	b.n	800dc60 <xQueueReceive+0x44>
 800dc5e:	2300      	movs	r3, #0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d10a      	bne.n	800dc7a <xQueueReceive+0x5e>
 800dc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc68:	f383 8811 	msr	BASEPRI, r3
 800dc6c:	f3bf 8f6f 	isb	sy
 800dc70:	f3bf 8f4f 	dsb	sy
 800dc74:	61fb      	str	r3, [r7, #28]
 800dc76:	bf00      	nop
 800dc78:	e7fe      	b.n	800dc78 <xQueueReceive+0x5c>
 800dc7a:	f001 f8b9 	bl	800edf0 <xTaskGetSchedulerState>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d102      	bne.n	800dc8a <xQueueReceive+0x6e>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d101      	bne.n	800dc8e <xQueueReceive+0x72>
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	e000      	b.n	800dc90 <xQueueReceive+0x74>
 800dc8e:	2300      	movs	r3, #0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d10a      	bne.n	800dcaa <xQueueReceive+0x8e>
 800dc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc98:	f383 8811 	msr	BASEPRI, r3
 800dc9c:	f3bf 8f6f 	isb	sy
 800dca0:	f3bf 8f4f 	dsb	sy
 800dca4:	61bb      	str	r3, [r7, #24]
 800dca6:	bf00      	nop
 800dca8:	e7fe      	b.n	800dca8 <xQueueReceive+0x8c>
 800dcaa:	f001 fdfb 	bl	800f8a4 <vPortEnterCritical>
 800dcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb2:	627b      	str	r3, [r7, #36]	; 0x24
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d01f      	beq.n	800dcfa <xQueueReceive+0xde>
 800dcba:	68b9      	ldr	r1, [r7, #8]
 800dcbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcbe:	f000 f8f7 	bl	800deb0 <prvCopyDataFromQueue>
 800dcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc4:	1e5a      	subs	r2, r3, #1
 800dcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc8:	639a      	str	r2, [r3, #56]	; 0x38
 800dcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dccc:	691b      	ldr	r3, [r3, #16]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00f      	beq.n	800dcf2 <xQueueReceive+0xd6>
 800dcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd4:	3310      	adds	r3, #16
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f000 fecc 	bl	800ea74 <xTaskRemoveFromEventList>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d007      	beq.n	800dcf2 <xQueueReceive+0xd6>
 800dce2:	4b3d      	ldr	r3, [pc, #244]	; (800ddd8 <xQueueReceive+0x1bc>)
 800dce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dce8:	601a      	str	r2, [r3, #0]
 800dcea:	f3bf 8f4f 	dsb	sy
 800dcee:	f3bf 8f6f 	isb	sy
 800dcf2:	f001 fe07 	bl	800f904 <vPortExitCritical>
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e069      	b.n	800ddce <xQueueReceive+0x1b2>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d103      	bne.n	800dd08 <xQueueReceive+0xec>
 800dd00:	f001 fe00 	bl	800f904 <vPortExitCritical>
 800dd04:	2300      	movs	r3, #0
 800dd06:	e062      	b.n	800ddce <xQueueReceive+0x1b2>
 800dd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d106      	bne.n	800dd1c <xQueueReceive+0x100>
 800dd0e:	f107 0310 	add.w	r3, r7, #16
 800dd12:	4618      	mov	r0, r3
 800dd14:	f000 ff12 	bl	800eb3c <vTaskInternalSetTimeOutState>
 800dd18:	2301      	movs	r3, #1
 800dd1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd1c:	f001 fdf2 	bl	800f904 <vPortExitCritical>
 800dd20:	f000 fc84 	bl	800e62c <vTaskSuspendAll>
 800dd24:	f001 fdbe 	bl	800f8a4 <vPortEnterCritical>
 800dd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd2e:	b25b      	sxtb	r3, r3
 800dd30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd34:	d103      	bne.n	800dd3e <xQueueReceive+0x122>
 800dd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd44:	b25b      	sxtb	r3, r3
 800dd46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd4a:	d103      	bne.n	800dd54 <xQueueReceive+0x138>
 800dd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd54:	f001 fdd6 	bl	800f904 <vPortExitCritical>
 800dd58:	1d3a      	adds	r2, r7, #4
 800dd5a:	f107 0310 	add.w	r3, r7, #16
 800dd5e:	4611      	mov	r1, r2
 800dd60:	4618      	mov	r0, r3
 800dd62:	f000 ff01 	bl	800eb68 <xTaskCheckForTimeOut>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d123      	bne.n	800ddb4 <xQueueReceive+0x198>
 800dd6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd6e:	f000 f917 	bl	800dfa0 <prvIsQueueEmpty>
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d017      	beq.n	800dda8 <xQueueReceive+0x18c>
 800dd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7a:	3324      	adds	r3, #36	; 0x24
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	4611      	mov	r1, r2
 800dd80:	4618      	mov	r0, r3
 800dd82:	f000 fe27 	bl	800e9d4 <vTaskPlaceOnEventList>
 800dd86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd88:	f000 f8b8 	bl	800defc <prvUnlockQueue>
 800dd8c:	f000 fc5c 	bl	800e648 <xTaskResumeAll>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d189      	bne.n	800dcaa <xQueueReceive+0x8e>
 800dd96:	4b10      	ldr	r3, [pc, #64]	; (800ddd8 <xQueueReceive+0x1bc>)
 800dd98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd9c:	601a      	str	r2, [r3, #0]
 800dd9e:	f3bf 8f4f 	dsb	sy
 800dda2:	f3bf 8f6f 	isb	sy
 800dda6:	e780      	b.n	800dcaa <xQueueReceive+0x8e>
 800dda8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddaa:	f000 f8a7 	bl	800defc <prvUnlockQueue>
 800ddae:	f000 fc4b 	bl	800e648 <xTaskResumeAll>
 800ddb2:	e77a      	b.n	800dcaa <xQueueReceive+0x8e>
 800ddb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddb6:	f000 f8a1 	bl	800defc <prvUnlockQueue>
 800ddba:	f000 fc45 	bl	800e648 <xTaskResumeAll>
 800ddbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddc0:	f000 f8ee 	bl	800dfa0 <prvIsQueueEmpty>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f43f af6f 	beq.w	800dcaa <xQueueReceive+0x8e>
 800ddcc:	2300      	movs	r3, #0
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3730      	adds	r7, #48	; 0x30
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	e000ed04 	.word	0xe000ed04

0800dddc <prvCopyDataToQueue>:
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b086      	sub	sp, #24
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	607a      	str	r2, [r7, #4]
 800dde8:	2300      	movs	r3, #0
 800ddea:	617b      	str	r3, [r7, #20]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddf0:	613b      	str	r3, [r7, #16]
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d10d      	bne.n	800de16 <prvCopyDataToQueue+0x3a>
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d14d      	bne.n	800de9e <prvCopyDataToQueue+0xc2>
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	689b      	ldr	r3, [r3, #8]
 800de06:	4618      	mov	r0, r3
 800de08:	f001 f810 	bl	800ee2c <xTaskPriorityDisinherit>
 800de0c:	6178      	str	r0, [r7, #20]
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2200      	movs	r2, #0
 800de12:	609a      	str	r2, [r3, #8]
 800de14:	e043      	b.n	800de9e <prvCopyDataToQueue+0xc2>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d119      	bne.n	800de50 <prvCopyDataToQueue+0x74>
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	6858      	ldr	r0, [r3, #4]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de24:	461a      	mov	r2, r3
 800de26:	68b9      	ldr	r1, [r7, #8]
 800de28:	f002 f872 	bl	800ff10 <memcpy>
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	685a      	ldr	r2, [r3, #4]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de34:	441a      	add	r2, r3
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	605a      	str	r2, [r3, #4]
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	685a      	ldr	r2, [r3, #4]
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	689b      	ldr	r3, [r3, #8]
 800de42:	429a      	cmp	r2, r3
 800de44:	d32b      	bcc.n	800de9e <prvCopyDataToQueue+0xc2>
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681a      	ldr	r2, [r3, #0]
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	605a      	str	r2, [r3, #4]
 800de4e:	e026      	b.n	800de9e <prvCopyDataToQueue+0xc2>
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	68d8      	ldr	r0, [r3, #12]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de58:	461a      	mov	r2, r3
 800de5a:	68b9      	ldr	r1, [r7, #8]
 800de5c:	f002 f858 	bl	800ff10 <memcpy>
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	68da      	ldr	r2, [r3, #12]
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de68:	425b      	negs	r3, r3
 800de6a:	441a      	add	r2, r3
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	60da      	str	r2, [r3, #12]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	68da      	ldr	r2, [r3, #12]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d207      	bcs.n	800de8c <prvCopyDataToQueue+0xb0>
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	689a      	ldr	r2, [r3, #8]
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de84:	425b      	negs	r3, r3
 800de86:	441a      	add	r2, r3
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	60da      	str	r2, [r3, #12]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2b02      	cmp	r3, #2
 800de90:	d105      	bne.n	800de9e <prvCopyDataToQueue+0xc2>
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d002      	beq.n	800de9e <prvCopyDataToQueue+0xc2>
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	3b01      	subs	r3, #1
 800de9c:	613b      	str	r3, [r7, #16]
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	1c5a      	adds	r2, r3, #1
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	639a      	str	r2, [r3, #56]	; 0x38
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	4618      	mov	r0, r3
 800deaa:	3718      	adds	r7, #24
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <prvCopyDataFromQueue>:
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6039      	str	r1, [r7, #0]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d018      	beq.n	800def4 <prvCopyDataFromQueue+0x44>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	68da      	ldr	r2, [r3, #12]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deca:	441a      	add	r2, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	60da      	str	r2, [r3, #12]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	68da      	ldr	r2, [r3, #12]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	689b      	ldr	r3, [r3, #8]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d303      	bcc.n	800dee4 <prvCopyDataFromQueue+0x34>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681a      	ldr	r2, [r3, #0]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	60da      	str	r2, [r3, #12]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	68d9      	ldr	r1, [r3, #12]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deec:	461a      	mov	r2, r3
 800deee:	6838      	ldr	r0, [r7, #0]
 800def0:	f002 f80e 	bl	800ff10 <memcpy>
 800def4:	bf00      	nop
 800def6:	3708      	adds	r7, #8
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}

0800defc <prvUnlockQueue>:
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	f001 fcce 	bl	800f8a4 <vPortEnterCritical>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df0e:	73fb      	strb	r3, [r7, #15]
 800df10:	e011      	b.n	800df36 <prvUnlockQueue+0x3a>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df16:	2b00      	cmp	r3, #0
 800df18:	d012      	beq.n	800df40 <prvUnlockQueue+0x44>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	3324      	adds	r3, #36	; 0x24
 800df1e:	4618      	mov	r0, r3
 800df20:	f000 fda8 	bl	800ea74 <xTaskRemoveFromEventList>
 800df24:	4603      	mov	r3, r0
 800df26:	2b00      	cmp	r3, #0
 800df28:	d001      	beq.n	800df2e <prvUnlockQueue+0x32>
 800df2a:	f000 fe7f 	bl	800ec2c <vTaskMissedYield>
 800df2e:	7bfb      	ldrb	r3, [r7, #15]
 800df30:	3b01      	subs	r3, #1
 800df32:	b2db      	uxtb	r3, r3
 800df34:	73fb      	strb	r3, [r7, #15]
 800df36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	dce9      	bgt.n	800df12 <prvUnlockQueue+0x16>
 800df3e:	e000      	b.n	800df42 <prvUnlockQueue+0x46>
 800df40:	bf00      	nop
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	22ff      	movs	r2, #255	; 0xff
 800df46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df4a:	f001 fcdb 	bl	800f904 <vPortExitCritical>
 800df4e:	f001 fca9 	bl	800f8a4 <vPortEnterCritical>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df58:	73bb      	strb	r3, [r7, #14]
 800df5a:	e011      	b.n	800df80 <prvUnlockQueue+0x84>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	691b      	ldr	r3, [r3, #16]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d012      	beq.n	800df8a <prvUnlockQueue+0x8e>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	3310      	adds	r3, #16
 800df68:	4618      	mov	r0, r3
 800df6a:	f000 fd83 	bl	800ea74 <xTaskRemoveFromEventList>
 800df6e:	4603      	mov	r3, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d001      	beq.n	800df78 <prvUnlockQueue+0x7c>
 800df74:	f000 fe5a 	bl	800ec2c <vTaskMissedYield>
 800df78:	7bbb      	ldrb	r3, [r7, #14]
 800df7a:	3b01      	subs	r3, #1
 800df7c:	b2db      	uxtb	r3, r3
 800df7e:	73bb      	strb	r3, [r7, #14]
 800df80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df84:	2b00      	cmp	r3, #0
 800df86:	dce9      	bgt.n	800df5c <prvUnlockQueue+0x60>
 800df88:	e000      	b.n	800df8c <prvUnlockQueue+0x90>
 800df8a:	bf00      	nop
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	22ff      	movs	r2, #255	; 0xff
 800df90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df94:	f001 fcb6 	bl	800f904 <vPortExitCritical>
 800df98:	bf00      	nop
 800df9a:	3710      	adds	r7, #16
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <prvIsQueueEmpty>:
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	f001 fc7c 	bl	800f8a4 <vPortEnterCritical>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d102      	bne.n	800dfba <prvIsQueueEmpty+0x1a>
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	60fb      	str	r3, [r7, #12]
 800dfb8:	e001      	b.n	800dfbe <prvIsQueueEmpty+0x1e>
 800dfba:	2300      	movs	r3, #0
 800dfbc:	60fb      	str	r3, [r7, #12]
 800dfbe:	f001 fca1 	bl	800f904 <vPortExitCritical>
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3710      	adds	r7, #16
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <prvIsQueueFull>:
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	f001 fc66 	bl	800f8a4 <vPortEnterCritical>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d102      	bne.n	800dfea <prvIsQueueFull+0x1e>
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	60fb      	str	r3, [r7, #12]
 800dfe8:	e001      	b.n	800dfee <prvIsQueueFull+0x22>
 800dfea:	2300      	movs	r3, #0
 800dfec:	60fb      	str	r3, [r7, #12]
 800dfee:	f001 fc89 	bl	800f904 <vPortExitCritical>
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	4618      	mov	r0, r3
 800dff6:	3710      	adds	r7, #16
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <vQueueAddToRegistry>:
 800dffc:	b480      	push	{r7}
 800dffe:	b085      	sub	sp, #20
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
 800e006:	2300      	movs	r3, #0
 800e008:	60fb      	str	r3, [r7, #12]
 800e00a:	e014      	b.n	800e036 <vQueueAddToRegistry+0x3a>
 800e00c:	4a0f      	ldr	r2, [pc, #60]	; (800e04c <vQueueAddToRegistry+0x50>)
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d10b      	bne.n	800e030 <vQueueAddToRegistry+0x34>
 800e018:	490c      	ldr	r1, [pc, #48]	; (800e04c <vQueueAddToRegistry+0x50>)
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	683a      	ldr	r2, [r7, #0]
 800e01e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800e022:	4a0a      	ldr	r2, [pc, #40]	; (800e04c <vQueueAddToRegistry+0x50>)
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	00db      	lsls	r3, r3, #3
 800e028:	4413      	add	r3, r2
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	605a      	str	r2, [r3, #4]
 800e02e:	e006      	b.n	800e03e <vQueueAddToRegistry+0x42>
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	3301      	adds	r3, #1
 800e034:	60fb      	str	r3, [r7, #12]
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2b07      	cmp	r3, #7
 800e03a:	d9e7      	bls.n	800e00c <vQueueAddToRegistry+0x10>
 800e03c:	bf00      	nop
 800e03e:	bf00      	nop
 800e040:	3714      	adds	r7, #20
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop
 800e04c:	20002128 	.word	0x20002128

0800e050 <vQueueWaitForMessageRestricted>:
 800e050:	b580      	push	{r7, lr}
 800e052:	b086      	sub	sp, #24
 800e054:	af00      	add	r7, sp, #0
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	607a      	str	r2, [r7, #4]
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	617b      	str	r3, [r7, #20]
 800e060:	f001 fc20 	bl	800f8a4 <vPortEnterCritical>
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e06a:	b25b      	sxtb	r3, r3
 800e06c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e070:	d103      	bne.n	800e07a <vQueueWaitForMessageRestricted+0x2a>
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	2200      	movs	r2, #0
 800e076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e080:	b25b      	sxtb	r3, r3
 800e082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e086:	d103      	bne.n	800e090 <vQueueWaitForMessageRestricted+0x40>
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	2200      	movs	r2, #0
 800e08c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e090:	f001 fc38 	bl	800f904 <vPortExitCritical>
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d106      	bne.n	800e0aa <vQueueWaitForMessageRestricted+0x5a>
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	3324      	adds	r3, #36	; 0x24
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	68b9      	ldr	r1, [r7, #8]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f000 fcb9 	bl	800ea1c <vTaskPlaceOnEventListRestricted>
 800e0aa:	6978      	ldr	r0, [r7, #20]
 800e0ac:	f7ff ff26 	bl	800defc <prvUnlockQueue>
 800e0b0:	bf00      	nop
 800e0b2:	3718      	adds	r7, #24
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}

0800e0b8 <xTaskCreateStatic>:
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b08e      	sub	sp, #56	; 0x38
 800e0bc:	af04      	add	r7, sp, #16
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	607a      	str	r2, [r7, #4]
 800e0c4:	603b      	str	r3, [r7, #0]
 800e0c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d10a      	bne.n	800e0e2 <xTaskCreateStatic+0x2a>
 800e0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d0:	f383 8811 	msr	BASEPRI, r3
 800e0d4:	f3bf 8f6f 	isb	sy
 800e0d8:	f3bf 8f4f 	dsb	sy
 800e0dc:	623b      	str	r3, [r7, #32]
 800e0de:	bf00      	nop
 800e0e0:	e7fe      	b.n	800e0e0 <xTaskCreateStatic+0x28>
 800e0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d10a      	bne.n	800e0fe <xTaskCreateStatic+0x46>
 800e0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ec:	f383 8811 	msr	BASEPRI, r3
 800e0f0:	f3bf 8f6f 	isb	sy
 800e0f4:	f3bf 8f4f 	dsb	sy
 800e0f8:	61fb      	str	r3, [r7, #28]
 800e0fa:	bf00      	nop
 800e0fc:	e7fe      	b.n	800e0fc <xTaskCreateStatic+0x44>
 800e0fe:	235c      	movs	r3, #92	; 0x5c
 800e100:	613b      	str	r3, [r7, #16]
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	2b5c      	cmp	r3, #92	; 0x5c
 800e106:	d00a      	beq.n	800e11e <xTaskCreateStatic+0x66>
 800e108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10c:	f383 8811 	msr	BASEPRI, r3
 800e110:	f3bf 8f6f 	isb	sy
 800e114:	f3bf 8f4f 	dsb	sy
 800e118:	61bb      	str	r3, [r7, #24]
 800e11a:	bf00      	nop
 800e11c:	e7fe      	b.n	800e11c <xTaskCreateStatic+0x64>
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e122:	2b00      	cmp	r3, #0
 800e124:	d01e      	beq.n	800e164 <xTaskCreateStatic+0xac>
 800e126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d01b      	beq.n	800e164 <xTaskCreateStatic+0xac>
 800e12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12e:	627b      	str	r3, [r7, #36]	; 0x24
 800e130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e134:	631a      	str	r2, [r3, #48]	; 0x30
 800e136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e138:	2202      	movs	r2, #2
 800e13a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800e13e:	2300      	movs	r3, #0
 800e140:	9303      	str	r3, [sp, #12]
 800e142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e144:	9302      	str	r3, [sp, #8]
 800e146:	f107 0314 	add.w	r3, r7, #20
 800e14a:	9301      	str	r3, [sp, #4]
 800e14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	68b9      	ldr	r1, [r7, #8]
 800e156:	68f8      	ldr	r0, [r7, #12]
 800e158:	f000 f850 	bl	800e1fc <prvInitialiseNewTask>
 800e15c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e15e:	f000 f8dd 	bl	800e31c <prvAddNewTaskToReadyList>
 800e162:	e001      	b.n	800e168 <xTaskCreateStatic+0xb0>
 800e164:	2300      	movs	r3, #0
 800e166:	617b      	str	r3, [r7, #20]
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	4618      	mov	r0, r3
 800e16c:	3728      	adds	r7, #40	; 0x28
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}

0800e172 <xTaskCreate>:
 800e172:	b580      	push	{r7, lr}
 800e174:	b08c      	sub	sp, #48	; 0x30
 800e176:	af04      	add	r7, sp, #16
 800e178:	60f8      	str	r0, [r7, #12]
 800e17a:	60b9      	str	r1, [r7, #8]
 800e17c:	603b      	str	r3, [r7, #0]
 800e17e:	4613      	mov	r3, r2
 800e180:	80fb      	strh	r3, [r7, #6]
 800e182:	88fb      	ldrh	r3, [r7, #6]
 800e184:	009b      	lsls	r3, r3, #2
 800e186:	4618      	mov	r0, r3
 800e188:	f001 fcae 	bl	800fae8 <pvPortMalloc>
 800e18c:	6178      	str	r0, [r7, #20]
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d00e      	beq.n	800e1b2 <xTaskCreate+0x40>
 800e194:	205c      	movs	r0, #92	; 0x5c
 800e196:	f001 fca7 	bl	800fae8 <pvPortMalloc>
 800e19a:	61f8      	str	r0, [r7, #28]
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d003      	beq.n	800e1aa <xTaskCreate+0x38>
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	697a      	ldr	r2, [r7, #20]
 800e1a6:	631a      	str	r2, [r3, #48]	; 0x30
 800e1a8:	e005      	b.n	800e1b6 <xTaskCreate+0x44>
 800e1aa:	6978      	ldr	r0, [r7, #20]
 800e1ac:	f001 fd68 	bl	800fc80 <vPortFree>
 800e1b0:	e001      	b.n	800e1b6 <xTaskCreate+0x44>
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	61fb      	str	r3, [r7, #28]
 800e1b6:	69fb      	ldr	r3, [r7, #28]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d017      	beq.n	800e1ec <xTaskCreate+0x7a>
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800e1c4:	88fa      	ldrh	r2, [r7, #6]
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	9303      	str	r3, [sp, #12]
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	9302      	str	r3, [sp, #8]
 800e1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d0:	9301      	str	r3, [sp, #4]
 800e1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	68b9      	ldr	r1, [r7, #8]
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f000 f80e 	bl	800e1fc <prvInitialiseNewTask>
 800e1e0:	69f8      	ldr	r0, [r7, #28]
 800e1e2:	f000 f89b 	bl	800e31c <prvAddNewTaskToReadyList>
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	61bb      	str	r3, [r7, #24]
 800e1ea:	e002      	b.n	800e1f2 <xTaskCreate+0x80>
 800e1ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1f0:	61bb      	str	r3, [r7, #24]
 800e1f2:	69bb      	ldr	r3, [r7, #24]
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3720      	adds	r7, #32
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <prvInitialiseNewTask>:
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b088      	sub	sp, #32
 800e200:	af00      	add	r7, sp, #0
 800e202:	60f8      	str	r0, [r7, #12]
 800e204:	60b9      	str	r1, [r7, #8]
 800e206:	607a      	str	r2, [r7, #4]
 800e208:	603b      	str	r3, [r7, #0]
 800e20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	461a      	mov	r2, r3
 800e214:	21a5      	movs	r1, #165	; 0xa5
 800e216:	f001 fe89 	bl	800ff2c <memset>
 800e21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e21c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e224:	3b01      	subs	r3, #1
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	4413      	add	r3, r2
 800e22a:	61bb      	str	r3, [r7, #24]
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	f023 0307 	bic.w	r3, r3, #7
 800e232:	61bb      	str	r3, [r7, #24]
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	f003 0307 	and.w	r3, r3, #7
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d00a      	beq.n	800e254 <prvInitialiseNewTask+0x58>
 800e23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e242:	f383 8811 	msr	BASEPRI, r3
 800e246:	f3bf 8f6f 	isb	sy
 800e24a:	f3bf 8f4f 	dsb	sy
 800e24e:	617b      	str	r3, [r7, #20]
 800e250:	bf00      	nop
 800e252:	e7fe      	b.n	800e252 <prvInitialiseNewTask+0x56>
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d01f      	beq.n	800e29a <prvInitialiseNewTask+0x9e>
 800e25a:	2300      	movs	r3, #0
 800e25c:	61fb      	str	r3, [r7, #28]
 800e25e:	e012      	b.n	800e286 <prvInitialiseNewTask+0x8a>
 800e260:	68ba      	ldr	r2, [r7, #8]
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	4413      	add	r3, r2
 800e266:	7819      	ldrb	r1, [r3, #0]
 800e268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e26a:	69fb      	ldr	r3, [r7, #28]
 800e26c:	4413      	add	r3, r2
 800e26e:	3334      	adds	r3, #52	; 0x34
 800e270:	460a      	mov	r2, r1
 800e272:	701a      	strb	r2, [r3, #0]
 800e274:	68ba      	ldr	r2, [r7, #8]
 800e276:	69fb      	ldr	r3, [r7, #28]
 800e278:	4413      	add	r3, r2
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d006      	beq.n	800e28e <prvInitialiseNewTask+0x92>
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	3301      	adds	r3, #1
 800e284:	61fb      	str	r3, [r7, #28]
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	2b0f      	cmp	r3, #15
 800e28a:	d9e9      	bls.n	800e260 <prvInitialiseNewTask+0x64>
 800e28c:	e000      	b.n	800e290 <prvInitialiseNewTask+0x94>
 800e28e:	bf00      	nop
 800e290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e292:	2200      	movs	r2, #0
 800e294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e298:	e003      	b.n	800e2a2 <prvInitialiseNewTask+0xa6>
 800e29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29c:	2200      	movs	r2, #0
 800e29e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a4:	2b37      	cmp	r3, #55	; 0x37
 800e2a6:	d901      	bls.n	800e2ac <prvInitialiseNewTask+0xb0>
 800e2a8:	2337      	movs	r3, #55	; 0x37
 800e2aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2b0:	62da      	str	r2, [r3, #44]	; 0x2c
 800e2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2b6:	64da      	str	r2, [r3, #76]	; 0x4c
 800e2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	651a      	str	r2, [r3, #80]	; 0x50
 800e2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c0:	3304      	adds	r3, #4
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7ff f978 	bl	800d5b8 <vListInitialiseItem>
 800e2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ca:	3318      	adds	r3, #24
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7ff f973 	bl	800d5b8 <vListInitialiseItem>
 800e2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2d6:	611a      	str	r2, [r3, #16]
 800e2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e0:	619a      	str	r2, [r3, #24]
 800e2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2e6:	625a      	str	r2, [r3, #36]	; 0x24
 800e2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	655a      	str	r2, [r3, #84]	; 0x54
 800e2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800e2f6:	683a      	ldr	r2, [r7, #0]
 800e2f8:	68f9      	ldr	r1, [r7, #12]
 800e2fa:	69b8      	ldr	r0, [r7, #24]
 800e2fc:	f001 f9a6 	bl	800f64c <pxPortInitialiseStack>
 800e300:	4602      	mov	r2, r0
 800e302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e304:	601a      	str	r2, [r3, #0]
 800e306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d002      	beq.n	800e312 <prvInitialiseNewTask+0x116>
 800e30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e310:	601a      	str	r2, [r3, #0]
 800e312:	bf00      	nop
 800e314:	3720      	adds	r7, #32
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
	...

0800e31c <prvAddNewTaskToReadyList>:
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	f001 fabe 	bl	800f8a4 <vPortEnterCritical>
 800e328:	4b2d      	ldr	r3, [pc, #180]	; (800e3e0 <prvAddNewTaskToReadyList+0xc4>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	3301      	adds	r3, #1
 800e32e:	4a2c      	ldr	r2, [pc, #176]	; (800e3e0 <prvAddNewTaskToReadyList+0xc4>)
 800e330:	6013      	str	r3, [r2, #0]
 800e332:	4b2c      	ldr	r3, [pc, #176]	; (800e3e4 <prvAddNewTaskToReadyList+0xc8>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d109      	bne.n	800e34e <prvAddNewTaskToReadyList+0x32>
 800e33a:	4a2a      	ldr	r2, [pc, #168]	; (800e3e4 <prvAddNewTaskToReadyList+0xc8>)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6013      	str	r3, [r2, #0]
 800e340:	4b27      	ldr	r3, [pc, #156]	; (800e3e0 <prvAddNewTaskToReadyList+0xc4>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2b01      	cmp	r3, #1
 800e346:	d110      	bne.n	800e36a <prvAddNewTaskToReadyList+0x4e>
 800e348:	f000 fc94 	bl	800ec74 <prvInitialiseTaskLists>
 800e34c:	e00d      	b.n	800e36a <prvAddNewTaskToReadyList+0x4e>
 800e34e:	4b26      	ldr	r3, [pc, #152]	; (800e3e8 <prvAddNewTaskToReadyList+0xcc>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d109      	bne.n	800e36a <prvAddNewTaskToReadyList+0x4e>
 800e356:	4b23      	ldr	r3, [pc, #140]	; (800e3e4 <prvAddNewTaskToReadyList+0xc8>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e360:	429a      	cmp	r2, r3
 800e362:	d802      	bhi.n	800e36a <prvAddNewTaskToReadyList+0x4e>
 800e364:	4a1f      	ldr	r2, [pc, #124]	; (800e3e4 <prvAddNewTaskToReadyList+0xc8>)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6013      	str	r3, [r2, #0]
 800e36a:	4b20      	ldr	r3, [pc, #128]	; (800e3ec <prvAddNewTaskToReadyList+0xd0>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	3301      	adds	r3, #1
 800e370:	4a1e      	ldr	r2, [pc, #120]	; (800e3ec <prvAddNewTaskToReadyList+0xd0>)
 800e372:	6013      	str	r3, [r2, #0]
 800e374:	4b1d      	ldr	r3, [pc, #116]	; (800e3ec <prvAddNewTaskToReadyList+0xd0>)
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	645a      	str	r2, [r3, #68]	; 0x44
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e380:	4b1b      	ldr	r3, [pc, #108]	; (800e3f0 <prvAddNewTaskToReadyList+0xd4>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	429a      	cmp	r2, r3
 800e386:	d903      	bls.n	800e390 <prvAddNewTaskToReadyList+0x74>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e38c:	4a18      	ldr	r2, [pc, #96]	; (800e3f0 <prvAddNewTaskToReadyList+0xd4>)
 800e38e:	6013      	str	r3, [r2, #0]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e394:	4613      	mov	r3, r2
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	4413      	add	r3, r2
 800e39a:	009b      	lsls	r3, r3, #2
 800e39c:	4a15      	ldr	r2, [pc, #84]	; (800e3f4 <prvAddNewTaskToReadyList+0xd8>)
 800e39e:	441a      	add	r2, r3
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	3304      	adds	r3, #4
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	4610      	mov	r0, r2
 800e3a8:	f7ff f913 	bl	800d5d2 <vListInsertEnd>
 800e3ac:	f001 faaa 	bl	800f904 <vPortExitCritical>
 800e3b0:	4b0d      	ldr	r3, [pc, #52]	; (800e3e8 <prvAddNewTaskToReadyList+0xcc>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d00e      	beq.n	800e3d6 <prvAddNewTaskToReadyList+0xba>
 800e3b8:	4b0a      	ldr	r3, [pc, #40]	; (800e3e4 <prvAddNewTaskToReadyList+0xc8>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d207      	bcs.n	800e3d6 <prvAddNewTaskToReadyList+0xba>
 800e3c6:	4b0c      	ldr	r3, [pc, #48]	; (800e3f8 <prvAddNewTaskToReadyList+0xdc>)
 800e3c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3cc:	601a      	str	r2, [r3, #0]
 800e3ce:	f3bf 8f4f 	dsb	sy
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	bf00      	nop
 800e3d8:	3708      	adds	r7, #8
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	2000263c 	.word	0x2000263c
 800e3e4:	20002168 	.word	0x20002168
 800e3e8:	20002648 	.word	0x20002648
 800e3ec:	20002658 	.word	0x20002658
 800e3f0:	20002644 	.word	0x20002644
 800e3f4:	2000216c 	.word	0x2000216c
 800e3f8:	e000ed04 	.word	0xe000ed04

0800e3fc <vTaskDelayUntil>:
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b08a      	sub	sp, #40	; 0x28
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
 800e406:	2300      	movs	r3, #0
 800e408:	627b      	str	r3, [r7, #36]	; 0x24
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d10a      	bne.n	800e426 <vTaskDelayUntil+0x2a>
 800e410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e414:	f383 8811 	msr	BASEPRI, r3
 800e418:	f3bf 8f6f 	isb	sy
 800e41c:	f3bf 8f4f 	dsb	sy
 800e420:	617b      	str	r3, [r7, #20]
 800e422:	bf00      	nop
 800e424:	e7fe      	b.n	800e424 <vTaskDelayUntil+0x28>
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d10a      	bne.n	800e442 <vTaskDelayUntil+0x46>
 800e42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e430:	f383 8811 	msr	BASEPRI, r3
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	f3bf 8f4f 	dsb	sy
 800e43c:	613b      	str	r3, [r7, #16]
 800e43e:	bf00      	nop
 800e440:	e7fe      	b.n	800e440 <vTaskDelayUntil+0x44>
 800e442:	4b2a      	ldr	r3, [pc, #168]	; (800e4ec <vTaskDelayUntil+0xf0>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d00a      	beq.n	800e460 <vTaskDelayUntil+0x64>
 800e44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44e:	f383 8811 	msr	BASEPRI, r3
 800e452:	f3bf 8f6f 	isb	sy
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	60fb      	str	r3, [r7, #12]
 800e45c:	bf00      	nop
 800e45e:	e7fe      	b.n	800e45e <vTaskDelayUntil+0x62>
 800e460:	f000 f8e4 	bl	800e62c <vTaskSuspendAll>
 800e464:	4b22      	ldr	r3, [pc, #136]	; (800e4f0 <vTaskDelayUntil+0xf4>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	623b      	str	r3, [r7, #32]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	683a      	ldr	r2, [r7, #0]
 800e470:	4413      	add	r3, r2
 800e472:	61fb      	str	r3, [r7, #28]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	6a3a      	ldr	r2, [r7, #32]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d20b      	bcs.n	800e496 <vTaskDelayUntil+0x9a>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	69fa      	ldr	r2, [r7, #28]
 800e484:	429a      	cmp	r2, r3
 800e486:	d211      	bcs.n	800e4ac <vTaskDelayUntil+0xb0>
 800e488:	69fa      	ldr	r2, [r7, #28]
 800e48a:	6a3b      	ldr	r3, [r7, #32]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d90d      	bls.n	800e4ac <vTaskDelayUntil+0xb0>
 800e490:	2301      	movs	r3, #1
 800e492:	627b      	str	r3, [r7, #36]	; 0x24
 800e494:	e00a      	b.n	800e4ac <vTaskDelayUntil+0xb0>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	69fa      	ldr	r2, [r7, #28]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d303      	bcc.n	800e4a8 <vTaskDelayUntil+0xac>
 800e4a0:	69fa      	ldr	r2, [r7, #28]
 800e4a2:	6a3b      	ldr	r3, [r7, #32]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d901      	bls.n	800e4ac <vTaskDelayUntil+0xb0>
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	69fa      	ldr	r2, [r7, #28]
 800e4b0:	601a      	str	r2, [r3, #0]
 800e4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d006      	beq.n	800e4c6 <vTaskDelayUntil+0xca>
 800e4b8:	69fa      	ldr	r2, [r7, #28]
 800e4ba:	6a3b      	ldr	r3, [r7, #32]
 800e4bc:	1ad3      	subs	r3, r2, r3
 800e4be:	2100      	movs	r1, #0
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f000 fd21 	bl	800ef08 <prvAddCurrentTaskToDelayedList>
 800e4c6:	f000 f8bf 	bl	800e648 <xTaskResumeAll>
 800e4ca:	61b8      	str	r0, [r7, #24]
 800e4cc:	69bb      	ldr	r3, [r7, #24]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d107      	bne.n	800e4e2 <vTaskDelayUntil+0xe6>
 800e4d2:	4b08      	ldr	r3, [pc, #32]	; (800e4f4 <vTaskDelayUntil+0xf8>)
 800e4d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4d8:	601a      	str	r2, [r3, #0]
 800e4da:	f3bf 8f4f 	dsb	sy
 800e4de:	f3bf 8f6f 	isb	sy
 800e4e2:	bf00      	nop
 800e4e4:	3728      	adds	r7, #40	; 0x28
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
 800e4ea:	bf00      	nop
 800e4ec:	20002664 	.word	0x20002664
 800e4f0:	20002640 	.word	0x20002640
 800e4f4:	e000ed04 	.word	0xe000ed04

0800e4f8 <vTaskDelay>:
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b084      	sub	sp, #16
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	2300      	movs	r3, #0
 800e502:	60fb      	str	r3, [r7, #12]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d017      	beq.n	800e53a <vTaskDelay+0x42>
 800e50a:	4b13      	ldr	r3, [pc, #76]	; (800e558 <vTaskDelay+0x60>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d00a      	beq.n	800e528 <vTaskDelay+0x30>
 800e512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e516:	f383 8811 	msr	BASEPRI, r3
 800e51a:	f3bf 8f6f 	isb	sy
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	60bb      	str	r3, [r7, #8]
 800e524:	bf00      	nop
 800e526:	e7fe      	b.n	800e526 <vTaskDelay+0x2e>
 800e528:	f000 f880 	bl	800e62c <vTaskSuspendAll>
 800e52c:	2100      	movs	r1, #0
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f000 fcea 	bl	800ef08 <prvAddCurrentTaskToDelayedList>
 800e534:	f000 f888 	bl	800e648 <xTaskResumeAll>
 800e538:	60f8      	str	r0, [r7, #12]
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d107      	bne.n	800e550 <vTaskDelay+0x58>
 800e540:	4b06      	ldr	r3, [pc, #24]	; (800e55c <vTaskDelay+0x64>)
 800e542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e546:	601a      	str	r2, [r3, #0]
 800e548:	f3bf 8f4f 	dsb	sy
 800e54c:	f3bf 8f6f 	isb	sy
 800e550:	bf00      	nop
 800e552:	3710      	adds	r7, #16
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	20002664 	.word	0x20002664
 800e55c:	e000ed04 	.word	0xe000ed04

0800e560 <vTaskStartScheduler>:
 800e560:	b580      	push	{r7, lr}
 800e562:	b08a      	sub	sp, #40	; 0x28
 800e564:	af04      	add	r7, sp, #16
 800e566:	2300      	movs	r3, #0
 800e568:	60bb      	str	r3, [r7, #8]
 800e56a:	2300      	movs	r3, #0
 800e56c:	607b      	str	r3, [r7, #4]
 800e56e:	463a      	mov	r2, r7
 800e570:	1d39      	adds	r1, r7, #4
 800e572:	f107 0308 	add.w	r3, r7, #8
 800e576:	4618      	mov	r0, r3
 800e578:	f7fe ffca 	bl	800d510 <vApplicationGetIdleTaskMemory>
 800e57c:	6839      	ldr	r1, [r7, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	68ba      	ldr	r2, [r7, #8]
 800e582:	9202      	str	r2, [sp, #8]
 800e584:	9301      	str	r3, [sp, #4]
 800e586:	2300      	movs	r3, #0
 800e588:	9300      	str	r3, [sp, #0]
 800e58a:	2300      	movs	r3, #0
 800e58c:	460a      	mov	r2, r1
 800e58e:	4921      	ldr	r1, [pc, #132]	; (800e614 <vTaskStartScheduler+0xb4>)
 800e590:	4821      	ldr	r0, [pc, #132]	; (800e618 <vTaskStartScheduler+0xb8>)
 800e592:	f7ff fd91 	bl	800e0b8 <xTaskCreateStatic>
 800e596:	4603      	mov	r3, r0
 800e598:	4a20      	ldr	r2, [pc, #128]	; (800e61c <vTaskStartScheduler+0xbc>)
 800e59a:	6013      	str	r3, [r2, #0]
 800e59c:	4b1f      	ldr	r3, [pc, #124]	; (800e61c <vTaskStartScheduler+0xbc>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d002      	beq.n	800e5aa <vTaskStartScheduler+0x4a>
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	617b      	str	r3, [r7, #20]
 800e5a8:	e001      	b.n	800e5ae <vTaskStartScheduler+0x4e>
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	617b      	str	r3, [r7, #20]
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d102      	bne.n	800e5ba <vTaskStartScheduler+0x5a>
 800e5b4:	f000 fcfc 	bl	800efb0 <xTimerCreateTimerTask>
 800e5b8:	6178      	str	r0, [r7, #20]
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	d116      	bne.n	800e5ee <vTaskStartScheduler+0x8e>
 800e5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c4:	f383 8811 	msr	BASEPRI, r3
 800e5c8:	f3bf 8f6f 	isb	sy
 800e5cc:	f3bf 8f4f 	dsb	sy
 800e5d0:	613b      	str	r3, [r7, #16]
 800e5d2:	bf00      	nop
 800e5d4:	4b12      	ldr	r3, [pc, #72]	; (800e620 <vTaskStartScheduler+0xc0>)
 800e5d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5da:	601a      	str	r2, [r3, #0]
 800e5dc:	4b11      	ldr	r3, [pc, #68]	; (800e624 <vTaskStartScheduler+0xc4>)
 800e5de:	2201      	movs	r2, #1
 800e5e0:	601a      	str	r2, [r3, #0]
 800e5e2:	4b11      	ldr	r3, [pc, #68]	; (800e628 <vTaskStartScheduler+0xc8>)
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	601a      	str	r2, [r3, #0]
 800e5e8:	f001 f8ba 	bl	800f760 <xPortStartScheduler>
 800e5ec:	e00e      	b.n	800e60c <vTaskStartScheduler+0xac>
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5f4:	d10a      	bne.n	800e60c <vTaskStartScheduler+0xac>
 800e5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fa:	f383 8811 	msr	BASEPRI, r3
 800e5fe:	f3bf 8f6f 	isb	sy
 800e602:	f3bf 8f4f 	dsb	sy
 800e606:	60fb      	str	r3, [r7, #12]
 800e608:	bf00      	nop
 800e60a:	e7fe      	b.n	800e60a <vTaskStartScheduler+0xaa>
 800e60c:	bf00      	nop
 800e60e:	3718      	adds	r7, #24
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	080148ec 	.word	0x080148ec
 800e618:	0800ec45 	.word	0x0800ec45
 800e61c:	20002660 	.word	0x20002660
 800e620:	2000265c 	.word	0x2000265c
 800e624:	20002648 	.word	0x20002648
 800e628:	20002640 	.word	0x20002640

0800e62c <vTaskSuspendAll>:
 800e62c:	b480      	push	{r7}
 800e62e:	af00      	add	r7, sp, #0
 800e630:	4b04      	ldr	r3, [pc, #16]	; (800e644 <vTaskSuspendAll+0x18>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	3301      	adds	r3, #1
 800e636:	4a03      	ldr	r2, [pc, #12]	; (800e644 <vTaskSuspendAll+0x18>)
 800e638:	6013      	str	r3, [r2, #0]
 800e63a:	bf00      	nop
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr
 800e644:	20002664 	.word	0x20002664

0800e648 <xTaskResumeAll>:
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	2300      	movs	r3, #0
 800e650:	60fb      	str	r3, [r7, #12]
 800e652:	2300      	movs	r3, #0
 800e654:	60bb      	str	r3, [r7, #8]
 800e656:	4b42      	ldr	r3, [pc, #264]	; (800e760 <xTaskResumeAll+0x118>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d10a      	bne.n	800e674 <xTaskResumeAll+0x2c>
 800e65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	603b      	str	r3, [r7, #0]
 800e670:	bf00      	nop
 800e672:	e7fe      	b.n	800e672 <xTaskResumeAll+0x2a>
 800e674:	f001 f916 	bl	800f8a4 <vPortEnterCritical>
 800e678:	4b39      	ldr	r3, [pc, #228]	; (800e760 <xTaskResumeAll+0x118>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	3b01      	subs	r3, #1
 800e67e:	4a38      	ldr	r2, [pc, #224]	; (800e760 <xTaskResumeAll+0x118>)
 800e680:	6013      	str	r3, [r2, #0]
 800e682:	4b37      	ldr	r3, [pc, #220]	; (800e760 <xTaskResumeAll+0x118>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d162      	bne.n	800e750 <xTaskResumeAll+0x108>
 800e68a:	4b36      	ldr	r3, [pc, #216]	; (800e764 <xTaskResumeAll+0x11c>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d05e      	beq.n	800e750 <xTaskResumeAll+0x108>
 800e692:	e02f      	b.n	800e6f4 <xTaskResumeAll+0xac>
 800e694:	4b34      	ldr	r3, [pc, #208]	; (800e768 <xTaskResumeAll+0x120>)
 800e696:	68db      	ldr	r3, [r3, #12]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	60fb      	str	r3, [r7, #12]
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	3318      	adds	r3, #24
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7fe fff3 	bl	800d68c <uxListRemove>
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fe ffee 	bl	800d68c <uxListRemove>
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6b4:	4b2d      	ldr	r3, [pc, #180]	; (800e76c <xTaskResumeAll+0x124>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d903      	bls.n	800e6c4 <xTaskResumeAll+0x7c>
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c0:	4a2a      	ldr	r2, [pc, #168]	; (800e76c <xTaskResumeAll+0x124>)
 800e6c2:	6013      	str	r3, [r2, #0]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	4413      	add	r3, r2
 800e6ce:	009b      	lsls	r3, r3, #2
 800e6d0:	4a27      	ldr	r2, [pc, #156]	; (800e770 <xTaskResumeAll+0x128>)
 800e6d2:	441a      	add	r2, r3
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	3304      	adds	r3, #4
 800e6d8:	4619      	mov	r1, r3
 800e6da:	4610      	mov	r0, r2
 800e6dc:	f7fe ff79 	bl	800d5d2 <vListInsertEnd>
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e4:	4b23      	ldr	r3, [pc, #140]	; (800e774 <xTaskResumeAll+0x12c>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d302      	bcc.n	800e6f4 <xTaskResumeAll+0xac>
 800e6ee:	4b22      	ldr	r3, [pc, #136]	; (800e778 <xTaskResumeAll+0x130>)
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	601a      	str	r2, [r3, #0]
 800e6f4:	4b1c      	ldr	r3, [pc, #112]	; (800e768 <xTaskResumeAll+0x120>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d1cb      	bne.n	800e694 <xTaskResumeAll+0x4c>
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d001      	beq.n	800e706 <xTaskResumeAll+0xbe>
 800e702:	f000 fb55 	bl	800edb0 <prvResetNextTaskUnblockTime>
 800e706:	4b1d      	ldr	r3, [pc, #116]	; (800e77c <xTaskResumeAll+0x134>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	607b      	str	r3, [r7, #4]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d010      	beq.n	800e734 <xTaskResumeAll+0xec>
 800e712:	f000 f847 	bl	800e7a4 <xTaskIncrementTick>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d002      	beq.n	800e722 <xTaskResumeAll+0xda>
 800e71c:	4b16      	ldr	r3, [pc, #88]	; (800e778 <xTaskResumeAll+0x130>)
 800e71e:	2201      	movs	r2, #1
 800e720:	601a      	str	r2, [r3, #0]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	3b01      	subs	r3, #1
 800e726:	607b      	str	r3, [r7, #4]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d1f1      	bne.n	800e712 <xTaskResumeAll+0xca>
 800e72e:	4b13      	ldr	r3, [pc, #76]	; (800e77c <xTaskResumeAll+0x134>)
 800e730:	2200      	movs	r2, #0
 800e732:	601a      	str	r2, [r3, #0]
 800e734:	4b10      	ldr	r3, [pc, #64]	; (800e778 <xTaskResumeAll+0x130>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d009      	beq.n	800e750 <xTaskResumeAll+0x108>
 800e73c:	2301      	movs	r3, #1
 800e73e:	60bb      	str	r3, [r7, #8]
 800e740:	4b0f      	ldr	r3, [pc, #60]	; (800e780 <xTaskResumeAll+0x138>)
 800e742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e746:	601a      	str	r2, [r3, #0]
 800e748:	f3bf 8f4f 	dsb	sy
 800e74c:	f3bf 8f6f 	isb	sy
 800e750:	f001 f8d8 	bl	800f904 <vPortExitCritical>
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	4618      	mov	r0, r3
 800e758:	3710      	adds	r7, #16
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	20002664 	.word	0x20002664
 800e764:	2000263c 	.word	0x2000263c
 800e768:	200025fc 	.word	0x200025fc
 800e76c:	20002644 	.word	0x20002644
 800e770:	2000216c 	.word	0x2000216c
 800e774:	20002168 	.word	0x20002168
 800e778:	20002650 	.word	0x20002650
 800e77c:	2000264c 	.word	0x2000264c
 800e780:	e000ed04 	.word	0xe000ed04

0800e784 <xTaskGetTickCount>:
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	4b05      	ldr	r3, [pc, #20]	; (800e7a0 <xTaskGetTickCount+0x1c>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	607b      	str	r3, [r7, #4]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	4618      	mov	r0, r3
 800e794:	370c      	adds	r7, #12
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr
 800e79e:	bf00      	nop
 800e7a0:	20002640 	.word	0x20002640

0800e7a4 <xTaskIncrementTick>:
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b086      	sub	sp, #24
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	617b      	str	r3, [r7, #20]
 800e7ae:	4b4f      	ldr	r3, [pc, #316]	; (800e8ec <xTaskIncrementTick+0x148>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	f040 808f 	bne.w	800e8d6 <xTaskIncrementTick+0x132>
 800e7b8:	4b4d      	ldr	r3, [pc, #308]	; (800e8f0 <xTaskIncrementTick+0x14c>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	3301      	adds	r3, #1
 800e7be:	613b      	str	r3, [r7, #16]
 800e7c0:	4a4b      	ldr	r2, [pc, #300]	; (800e8f0 <xTaskIncrementTick+0x14c>)
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	6013      	str	r3, [r2, #0]
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d120      	bne.n	800e80e <xTaskIncrementTick+0x6a>
 800e7cc:	4b49      	ldr	r3, [pc, #292]	; (800e8f4 <xTaskIncrementTick+0x150>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d00a      	beq.n	800e7ec <xTaskIncrementTick+0x48>
 800e7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	603b      	str	r3, [r7, #0]
 800e7e8:	bf00      	nop
 800e7ea:	e7fe      	b.n	800e7ea <xTaskIncrementTick+0x46>
 800e7ec:	4b41      	ldr	r3, [pc, #260]	; (800e8f4 <xTaskIncrementTick+0x150>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	60fb      	str	r3, [r7, #12]
 800e7f2:	4b41      	ldr	r3, [pc, #260]	; (800e8f8 <xTaskIncrementTick+0x154>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4a3f      	ldr	r2, [pc, #252]	; (800e8f4 <xTaskIncrementTick+0x150>)
 800e7f8:	6013      	str	r3, [r2, #0]
 800e7fa:	4a3f      	ldr	r2, [pc, #252]	; (800e8f8 <xTaskIncrementTick+0x154>)
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	6013      	str	r3, [r2, #0]
 800e800:	4b3e      	ldr	r3, [pc, #248]	; (800e8fc <xTaskIncrementTick+0x158>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	3301      	adds	r3, #1
 800e806:	4a3d      	ldr	r2, [pc, #244]	; (800e8fc <xTaskIncrementTick+0x158>)
 800e808:	6013      	str	r3, [r2, #0]
 800e80a:	f000 fad1 	bl	800edb0 <prvResetNextTaskUnblockTime>
 800e80e:	4b3c      	ldr	r3, [pc, #240]	; (800e900 <xTaskIncrementTick+0x15c>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	693a      	ldr	r2, [r7, #16]
 800e814:	429a      	cmp	r2, r3
 800e816:	d349      	bcc.n	800e8ac <xTaskIncrementTick+0x108>
 800e818:	4b36      	ldr	r3, [pc, #216]	; (800e8f4 <xTaskIncrementTick+0x150>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d104      	bne.n	800e82c <xTaskIncrementTick+0x88>
 800e822:	4b37      	ldr	r3, [pc, #220]	; (800e900 <xTaskIncrementTick+0x15c>)
 800e824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e828:	601a      	str	r2, [r3, #0]
 800e82a:	e03f      	b.n	800e8ac <xTaskIncrementTick+0x108>
 800e82c:	4b31      	ldr	r3, [pc, #196]	; (800e8f4 <xTaskIncrementTick+0x150>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	60bb      	str	r3, [r7, #8]
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	607b      	str	r3, [r7, #4]
 800e83c:	693a      	ldr	r2, [r7, #16]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	429a      	cmp	r2, r3
 800e842:	d203      	bcs.n	800e84c <xTaskIncrementTick+0xa8>
 800e844:	4a2e      	ldr	r2, [pc, #184]	; (800e900 <xTaskIncrementTick+0x15c>)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6013      	str	r3, [r2, #0]
 800e84a:	e02f      	b.n	800e8ac <xTaskIncrementTick+0x108>
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	3304      	adds	r3, #4
 800e850:	4618      	mov	r0, r3
 800e852:	f7fe ff1b 	bl	800d68c <uxListRemove>
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d004      	beq.n	800e868 <xTaskIncrementTick+0xc4>
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	3318      	adds	r3, #24
 800e862:	4618      	mov	r0, r3
 800e864:	f7fe ff12 	bl	800d68c <uxListRemove>
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e86c:	4b25      	ldr	r3, [pc, #148]	; (800e904 <xTaskIncrementTick+0x160>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	429a      	cmp	r2, r3
 800e872:	d903      	bls.n	800e87c <xTaskIncrementTick+0xd8>
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e878:	4a22      	ldr	r2, [pc, #136]	; (800e904 <xTaskIncrementTick+0x160>)
 800e87a:	6013      	str	r3, [r2, #0]
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e880:	4613      	mov	r3, r2
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	4413      	add	r3, r2
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	4a1f      	ldr	r2, [pc, #124]	; (800e908 <xTaskIncrementTick+0x164>)
 800e88a:	441a      	add	r2, r3
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	3304      	adds	r3, #4
 800e890:	4619      	mov	r1, r3
 800e892:	4610      	mov	r0, r2
 800e894:	f7fe fe9d 	bl	800d5d2 <vListInsertEnd>
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e89c:	4b1b      	ldr	r3, [pc, #108]	; (800e90c <xTaskIncrementTick+0x168>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d3b8      	bcc.n	800e818 <xTaskIncrementTick+0x74>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	617b      	str	r3, [r7, #20]
 800e8aa:	e7b5      	b.n	800e818 <xTaskIncrementTick+0x74>
 800e8ac:	4b17      	ldr	r3, [pc, #92]	; (800e90c <xTaskIncrementTick+0x168>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8b2:	4915      	ldr	r1, [pc, #84]	; (800e908 <xTaskIncrementTick+0x164>)
 800e8b4:	4613      	mov	r3, r2
 800e8b6:	009b      	lsls	r3, r3, #2
 800e8b8:	4413      	add	r3, r2
 800e8ba:	009b      	lsls	r3, r3, #2
 800e8bc:	440b      	add	r3, r1
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d901      	bls.n	800e8c8 <xTaskIncrementTick+0x124>
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	617b      	str	r3, [r7, #20]
 800e8c8:	4b11      	ldr	r3, [pc, #68]	; (800e910 <xTaskIncrementTick+0x16c>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d007      	beq.n	800e8e0 <xTaskIncrementTick+0x13c>
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	617b      	str	r3, [r7, #20]
 800e8d4:	e004      	b.n	800e8e0 <xTaskIncrementTick+0x13c>
 800e8d6:	4b0f      	ldr	r3, [pc, #60]	; (800e914 <xTaskIncrementTick+0x170>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	4a0d      	ldr	r2, [pc, #52]	; (800e914 <xTaskIncrementTick+0x170>)
 800e8de:	6013      	str	r3, [r2, #0]
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3718      	adds	r7, #24
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	20002664 	.word	0x20002664
 800e8f0:	20002640 	.word	0x20002640
 800e8f4:	200025f4 	.word	0x200025f4
 800e8f8:	200025f8 	.word	0x200025f8
 800e8fc:	20002654 	.word	0x20002654
 800e900:	2000265c 	.word	0x2000265c
 800e904:	20002644 	.word	0x20002644
 800e908:	2000216c 	.word	0x2000216c
 800e90c:	20002168 	.word	0x20002168
 800e910:	20002650 	.word	0x20002650
 800e914:	2000264c 	.word	0x2000264c

0800e918 <vTaskSwitchContext>:
 800e918:	b480      	push	{r7}
 800e91a:	b085      	sub	sp, #20
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	4b28      	ldr	r3, [pc, #160]	; (800e9c0 <vTaskSwitchContext+0xa8>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d003      	beq.n	800e92e <vTaskSwitchContext+0x16>
 800e926:	4b27      	ldr	r3, [pc, #156]	; (800e9c4 <vTaskSwitchContext+0xac>)
 800e928:	2201      	movs	r2, #1
 800e92a:	601a      	str	r2, [r3, #0]
 800e92c:	e041      	b.n	800e9b2 <vTaskSwitchContext+0x9a>
 800e92e:	4b25      	ldr	r3, [pc, #148]	; (800e9c4 <vTaskSwitchContext+0xac>)
 800e930:	2200      	movs	r2, #0
 800e932:	601a      	str	r2, [r3, #0]
 800e934:	4b24      	ldr	r3, [pc, #144]	; (800e9c8 <vTaskSwitchContext+0xb0>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	60fb      	str	r3, [r7, #12]
 800e93a:	e010      	b.n	800e95e <vTaskSwitchContext+0x46>
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d10a      	bne.n	800e958 <vTaskSwitchContext+0x40>
 800e942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e946:	f383 8811 	msr	BASEPRI, r3
 800e94a:	f3bf 8f6f 	isb	sy
 800e94e:	f3bf 8f4f 	dsb	sy
 800e952:	607b      	str	r3, [r7, #4]
 800e954:	bf00      	nop
 800e956:	e7fe      	b.n	800e956 <vTaskSwitchContext+0x3e>
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	3b01      	subs	r3, #1
 800e95c:	60fb      	str	r3, [r7, #12]
 800e95e:	491b      	ldr	r1, [pc, #108]	; (800e9cc <vTaskSwitchContext+0xb4>)
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	4613      	mov	r3, r2
 800e964:	009b      	lsls	r3, r3, #2
 800e966:	4413      	add	r3, r2
 800e968:	009b      	lsls	r3, r3, #2
 800e96a:	440b      	add	r3, r1
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d0e4      	beq.n	800e93c <vTaskSwitchContext+0x24>
 800e972:	68fa      	ldr	r2, [r7, #12]
 800e974:	4613      	mov	r3, r2
 800e976:	009b      	lsls	r3, r3, #2
 800e978:	4413      	add	r3, r2
 800e97a:	009b      	lsls	r3, r3, #2
 800e97c:	4a13      	ldr	r2, [pc, #76]	; (800e9cc <vTaskSwitchContext+0xb4>)
 800e97e:	4413      	add	r3, r2
 800e980:	60bb      	str	r3, [r7, #8]
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	685a      	ldr	r2, [r3, #4]
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	605a      	str	r2, [r3, #4]
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	685a      	ldr	r2, [r3, #4]
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	3308      	adds	r3, #8
 800e994:	429a      	cmp	r2, r3
 800e996:	d104      	bne.n	800e9a2 <vTaskSwitchContext+0x8a>
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	685a      	ldr	r2, [r3, #4]
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	605a      	str	r2, [r3, #4]
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	4a09      	ldr	r2, [pc, #36]	; (800e9d0 <vTaskSwitchContext+0xb8>)
 800e9aa:	6013      	str	r3, [r2, #0]
 800e9ac:	4a06      	ldr	r2, [pc, #24]	; (800e9c8 <vTaskSwitchContext+0xb0>)
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	6013      	str	r3, [r2, #0]
 800e9b2:	bf00      	nop
 800e9b4:	3714      	adds	r7, #20
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	20002664 	.word	0x20002664
 800e9c4:	20002650 	.word	0x20002650
 800e9c8:	20002644 	.word	0x20002644
 800e9cc:	2000216c 	.word	0x2000216c
 800e9d0:	20002168 	.word	0x20002168

0800e9d4 <vTaskPlaceOnEventList>:
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d10a      	bne.n	800e9fa <vTaskPlaceOnEventList+0x26>
 800e9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e8:	f383 8811 	msr	BASEPRI, r3
 800e9ec:	f3bf 8f6f 	isb	sy
 800e9f0:	f3bf 8f4f 	dsb	sy
 800e9f4:	60fb      	str	r3, [r7, #12]
 800e9f6:	bf00      	nop
 800e9f8:	e7fe      	b.n	800e9f8 <vTaskPlaceOnEventList+0x24>
 800e9fa:	4b07      	ldr	r3, [pc, #28]	; (800ea18 <vTaskPlaceOnEventList+0x44>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	3318      	adds	r3, #24
 800ea00:	4619      	mov	r1, r3
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f7fe fe09 	bl	800d61a <vListInsert>
 800ea08:	2101      	movs	r1, #1
 800ea0a:	6838      	ldr	r0, [r7, #0]
 800ea0c:	f000 fa7c 	bl	800ef08 <prvAddCurrentTaskToDelayedList>
 800ea10:	bf00      	nop
 800ea12:	3710      	adds	r7, #16
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	20002168 	.word	0x20002168

0800ea1c <vTaskPlaceOnEventListRestricted>:
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b086      	sub	sp, #24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	607a      	str	r2, [r7, #4]
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d10a      	bne.n	800ea44 <vTaskPlaceOnEventListRestricted+0x28>
 800ea2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea32:	f383 8811 	msr	BASEPRI, r3
 800ea36:	f3bf 8f6f 	isb	sy
 800ea3a:	f3bf 8f4f 	dsb	sy
 800ea3e:	617b      	str	r3, [r7, #20]
 800ea40:	bf00      	nop
 800ea42:	e7fe      	b.n	800ea42 <vTaskPlaceOnEventListRestricted+0x26>
 800ea44:	4b0a      	ldr	r3, [pc, #40]	; (800ea70 <vTaskPlaceOnEventListRestricted+0x54>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	3318      	adds	r3, #24
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	68f8      	ldr	r0, [r7, #12]
 800ea4e:	f7fe fdc0 	bl	800d5d2 <vListInsertEnd>
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d002      	beq.n	800ea5e <vTaskPlaceOnEventListRestricted+0x42>
 800ea58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea5c:	60bb      	str	r3, [r7, #8]
 800ea5e:	6879      	ldr	r1, [r7, #4]
 800ea60:	68b8      	ldr	r0, [r7, #8]
 800ea62:	f000 fa51 	bl	800ef08 <prvAddCurrentTaskToDelayedList>
 800ea66:	bf00      	nop
 800ea68:	3718      	adds	r7, #24
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	20002168 	.word	0x20002168

0800ea74 <xTaskRemoveFromEventList>:
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b086      	sub	sp, #24
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	68db      	ldr	r3, [r3, #12]
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	613b      	str	r3, [r7, #16]
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d10a      	bne.n	800eaa0 <xTaskRemoveFromEventList+0x2c>
 800ea8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea8e:	f383 8811 	msr	BASEPRI, r3
 800ea92:	f3bf 8f6f 	isb	sy
 800ea96:	f3bf 8f4f 	dsb	sy
 800ea9a:	60fb      	str	r3, [r7, #12]
 800ea9c:	bf00      	nop
 800ea9e:	e7fe      	b.n	800ea9e <xTaskRemoveFromEventList+0x2a>
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	3318      	adds	r3, #24
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7fe fdf1 	bl	800d68c <uxListRemove>
 800eaaa:	4b1e      	ldr	r3, [pc, #120]	; (800eb24 <xTaskRemoveFromEventList+0xb0>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d11d      	bne.n	800eaee <xTaskRemoveFromEventList+0x7a>
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	3304      	adds	r3, #4
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7fe fde8 	bl	800d68c <uxListRemove>
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eac0:	4b19      	ldr	r3, [pc, #100]	; (800eb28 <xTaskRemoveFromEventList+0xb4>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d903      	bls.n	800ead0 <xTaskRemoveFromEventList+0x5c>
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eacc:	4a16      	ldr	r2, [pc, #88]	; (800eb28 <xTaskRemoveFromEventList+0xb4>)
 800eace:	6013      	str	r3, [r2, #0]
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ead4:	4613      	mov	r3, r2
 800ead6:	009b      	lsls	r3, r3, #2
 800ead8:	4413      	add	r3, r2
 800eada:	009b      	lsls	r3, r3, #2
 800eadc:	4a13      	ldr	r2, [pc, #76]	; (800eb2c <xTaskRemoveFromEventList+0xb8>)
 800eade:	441a      	add	r2, r3
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	3304      	adds	r3, #4
 800eae4:	4619      	mov	r1, r3
 800eae6:	4610      	mov	r0, r2
 800eae8:	f7fe fd73 	bl	800d5d2 <vListInsertEnd>
 800eaec:	e005      	b.n	800eafa <xTaskRemoveFromEventList+0x86>
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	3318      	adds	r3, #24
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	480e      	ldr	r0, [pc, #56]	; (800eb30 <xTaskRemoveFromEventList+0xbc>)
 800eaf6:	f7fe fd6c 	bl	800d5d2 <vListInsertEnd>
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eafe:	4b0d      	ldr	r3, [pc, #52]	; (800eb34 <xTaskRemoveFromEventList+0xc0>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d905      	bls.n	800eb14 <xTaskRemoveFromEventList+0xa0>
 800eb08:	2301      	movs	r3, #1
 800eb0a:	617b      	str	r3, [r7, #20]
 800eb0c:	4b0a      	ldr	r3, [pc, #40]	; (800eb38 <xTaskRemoveFromEventList+0xc4>)
 800eb0e:	2201      	movs	r2, #1
 800eb10:	601a      	str	r2, [r3, #0]
 800eb12:	e001      	b.n	800eb18 <xTaskRemoveFromEventList+0xa4>
 800eb14:	2300      	movs	r3, #0
 800eb16:	617b      	str	r3, [r7, #20]
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3718      	adds	r7, #24
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	20002664 	.word	0x20002664
 800eb28:	20002644 	.word	0x20002644
 800eb2c:	2000216c 	.word	0x2000216c
 800eb30:	200025fc 	.word	0x200025fc
 800eb34:	20002168 	.word	0x20002168
 800eb38:	20002650 	.word	0x20002650

0800eb3c <vTaskInternalSetTimeOutState>:
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	4b06      	ldr	r3, [pc, #24]	; (800eb60 <vTaskInternalSetTimeOutState+0x24>)
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	601a      	str	r2, [r3, #0]
 800eb4c:	4b05      	ldr	r3, [pc, #20]	; (800eb64 <vTaskInternalSetTimeOutState+0x28>)
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	605a      	str	r2, [r3, #4]
 800eb54:	bf00      	nop
 800eb56:	370c      	adds	r7, #12
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr
 800eb60:	20002654 	.word	0x20002654
 800eb64:	20002640 	.word	0x20002640

0800eb68 <xTaskCheckForTimeOut>:
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b088      	sub	sp, #32
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d10a      	bne.n	800eb8e <xTaskCheckForTimeOut+0x26>
 800eb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7c:	f383 8811 	msr	BASEPRI, r3
 800eb80:	f3bf 8f6f 	isb	sy
 800eb84:	f3bf 8f4f 	dsb	sy
 800eb88:	613b      	str	r3, [r7, #16]
 800eb8a:	bf00      	nop
 800eb8c:	e7fe      	b.n	800eb8c <xTaskCheckForTimeOut+0x24>
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d10a      	bne.n	800ebaa <xTaskCheckForTimeOut+0x42>
 800eb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb98:	f383 8811 	msr	BASEPRI, r3
 800eb9c:	f3bf 8f6f 	isb	sy
 800eba0:	f3bf 8f4f 	dsb	sy
 800eba4:	60fb      	str	r3, [r7, #12]
 800eba6:	bf00      	nop
 800eba8:	e7fe      	b.n	800eba8 <xTaskCheckForTimeOut+0x40>
 800ebaa:	f000 fe7b 	bl	800f8a4 <vPortEnterCritical>
 800ebae:	4b1d      	ldr	r3, [pc, #116]	; (800ec24 <xTaskCheckForTimeOut+0xbc>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	61bb      	str	r3, [r7, #24]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	69ba      	ldr	r2, [r7, #24]
 800ebba:	1ad3      	subs	r3, r2, r3
 800ebbc:	617b      	str	r3, [r7, #20]
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebc6:	d102      	bne.n	800ebce <xTaskCheckForTimeOut+0x66>
 800ebc8:	2300      	movs	r3, #0
 800ebca:	61fb      	str	r3, [r7, #28]
 800ebcc:	e023      	b.n	800ec16 <xTaskCheckForTimeOut+0xae>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681a      	ldr	r2, [r3, #0]
 800ebd2:	4b15      	ldr	r3, [pc, #84]	; (800ec28 <xTaskCheckForTimeOut+0xc0>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d007      	beq.n	800ebea <xTaskCheckForTimeOut+0x82>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	69ba      	ldr	r2, [r7, #24]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d302      	bcc.n	800ebea <xTaskCheckForTimeOut+0x82>
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	61fb      	str	r3, [r7, #28]
 800ebe8:	e015      	b.n	800ec16 <xTaskCheckForTimeOut+0xae>
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	697a      	ldr	r2, [r7, #20]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d20b      	bcs.n	800ec0c <xTaskCheckForTimeOut+0xa4>
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	1ad2      	subs	r2, r2, r3
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	601a      	str	r2, [r3, #0]
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f7ff ff9b 	bl	800eb3c <vTaskInternalSetTimeOutState>
 800ec06:	2300      	movs	r3, #0
 800ec08:	61fb      	str	r3, [r7, #28]
 800ec0a:	e004      	b.n	800ec16 <xTaskCheckForTimeOut+0xae>
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	601a      	str	r2, [r3, #0]
 800ec12:	2301      	movs	r3, #1
 800ec14:	61fb      	str	r3, [r7, #28]
 800ec16:	f000 fe75 	bl	800f904 <vPortExitCritical>
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3720      	adds	r7, #32
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}
 800ec24:	20002640 	.word	0x20002640
 800ec28:	20002654 	.word	0x20002654

0800ec2c <vTaskMissedYield>:
 800ec2c:	b480      	push	{r7}
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	4b03      	ldr	r3, [pc, #12]	; (800ec40 <vTaskMissedYield+0x14>)
 800ec32:	2201      	movs	r2, #1
 800ec34:	601a      	str	r2, [r3, #0]
 800ec36:	bf00      	nop
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr
 800ec40:	20002650 	.word	0x20002650

0800ec44 <prvIdleTask>:
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b082      	sub	sp, #8
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	f000 f852 	bl	800ecf4 <prvCheckTasksWaitingTermination>
 800ec50:	4b06      	ldr	r3, [pc, #24]	; (800ec6c <prvIdleTask+0x28>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	2b01      	cmp	r3, #1
 800ec56:	d9f9      	bls.n	800ec4c <prvIdleTask+0x8>
 800ec58:	4b05      	ldr	r3, [pc, #20]	; (800ec70 <prvIdleTask+0x2c>)
 800ec5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec5e:	601a      	str	r2, [r3, #0]
 800ec60:	f3bf 8f4f 	dsb	sy
 800ec64:	f3bf 8f6f 	isb	sy
 800ec68:	e7f0      	b.n	800ec4c <prvIdleTask+0x8>
 800ec6a:	bf00      	nop
 800ec6c:	2000216c 	.word	0x2000216c
 800ec70:	e000ed04 	.word	0xe000ed04

0800ec74 <prvInitialiseTaskLists>:
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	607b      	str	r3, [r7, #4]
 800ec7e:	e00c      	b.n	800ec9a <prvInitialiseTaskLists+0x26>
 800ec80:	687a      	ldr	r2, [r7, #4]
 800ec82:	4613      	mov	r3, r2
 800ec84:	009b      	lsls	r3, r3, #2
 800ec86:	4413      	add	r3, r2
 800ec88:	009b      	lsls	r3, r3, #2
 800ec8a:	4a12      	ldr	r2, [pc, #72]	; (800ecd4 <prvInitialiseTaskLists+0x60>)
 800ec8c:	4413      	add	r3, r2
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7fe fc72 	bl	800d578 <vListInitialise>
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	3301      	adds	r3, #1
 800ec98:	607b      	str	r3, [r7, #4]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2b37      	cmp	r3, #55	; 0x37
 800ec9e:	d9ef      	bls.n	800ec80 <prvInitialiseTaskLists+0xc>
 800eca0:	480d      	ldr	r0, [pc, #52]	; (800ecd8 <prvInitialiseTaskLists+0x64>)
 800eca2:	f7fe fc69 	bl	800d578 <vListInitialise>
 800eca6:	480d      	ldr	r0, [pc, #52]	; (800ecdc <prvInitialiseTaskLists+0x68>)
 800eca8:	f7fe fc66 	bl	800d578 <vListInitialise>
 800ecac:	480c      	ldr	r0, [pc, #48]	; (800ece0 <prvInitialiseTaskLists+0x6c>)
 800ecae:	f7fe fc63 	bl	800d578 <vListInitialise>
 800ecb2:	480c      	ldr	r0, [pc, #48]	; (800ece4 <prvInitialiseTaskLists+0x70>)
 800ecb4:	f7fe fc60 	bl	800d578 <vListInitialise>
 800ecb8:	480b      	ldr	r0, [pc, #44]	; (800ece8 <prvInitialiseTaskLists+0x74>)
 800ecba:	f7fe fc5d 	bl	800d578 <vListInitialise>
 800ecbe:	4b0b      	ldr	r3, [pc, #44]	; (800ecec <prvInitialiseTaskLists+0x78>)
 800ecc0:	4a05      	ldr	r2, [pc, #20]	; (800ecd8 <prvInitialiseTaskLists+0x64>)
 800ecc2:	601a      	str	r2, [r3, #0]
 800ecc4:	4b0a      	ldr	r3, [pc, #40]	; (800ecf0 <prvInitialiseTaskLists+0x7c>)
 800ecc6:	4a05      	ldr	r2, [pc, #20]	; (800ecdc <prvInitialiseTaskLists+0x68>)
 800ecc8:	601a      	str	r2, [r3, #0]
 800ecca:	bf00      	nop
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	2000216c 	.word	0x2000216c
 800ecd8:	200025cc 	.word	0x200025cc
 800ecdc:	200025e0 	.word	0x200025e0
 800ece0:	200025fc 	.word	0x200025fc
 800ece4:	20002610 	.word	0x20002610
 800ece8:	20002628 	.word	0x20002628
 800ecec:	200025f4 	.word	0x200025f4
 800ecf0:	200025f8 	.word	0x200025f8

0800ecf4 <prvCheckTasksWaitingTermination>:
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	e019      	b.n	800ed30 <prvCheckTasksWaitingTermination+0x3c>
 800ecfc:	f000 fdd2 	bl	800f8a4 <vPortEnterCritical>
 800ed00:	4b10      	ldr	r3, [pc, #64]	; (800ed44 <prvCheckTasksWaitingTermination+0x50>)
 800ed02:	68db      	ldr	r3, [r3, #12]
 800ed04:	68db      	ldr	r3, [r3, #12]
 800ed06:	607b      	str	r3, [r7, #4]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	3304      	adds	r3, #4
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f7fe fcbd 	bl	800d68c <uxListRemove>
 800ed12:	4b0d      	ldr	r3, [pc, #52]	; (800ed48 <prvCheckTasksWaitingTermination+0x54>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	3b01      	subs	r3, #1
 800ed18:	4a0b      	ldr	r2, [pc, #44]	; (800ed48 <prvCheckTasksWaitingTermination+0x54>)
 800ed1a:	6013      	str	r3, [r2, #0]
 800ed1c:	4b0b      	ldr	r3, [pc, #44]	; (800ed4c <prvCheckTasksWaitingTermination+0x58>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	3b01      	subs	r3, #1
 800ed22:	4a0a      	ldr	r2, [pc, #40]	; (800ed4c <prvCheckTasksWaitingTermination+0x58>)
 800ed24:	6013      	str	r3, [r2, #0]
 800ed26:	f000 fded 	bl	800f904 <vPortExitCritical>
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 f810 	bl	800ed50 <prvDeleteTCB>
 800ed30:	4b06      	ldr	r3, [pc, #24]	; (800ed4c <prvCheckTasksWaitingTermination+0x58>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d1e1      	bne.n	800ecfc <prvCheckTasksWaitingTermination+0x8>
 800ed38:	bf00      	nop
 800ed3a:	bf00      	nop
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	20002610 	.word	0x20002610
 800ed48:	2000263c 	.word	0x2000263c
 800ed4c:	20002624 	.word	0x20002624

0800ed50 <prvDeleteTCB>:
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d108      	bne.n	800ed74 <prvDeleteTCB+0x24>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed66:	4618      	mov	r0, r3
 800ed68:	f000 ff8a 	bl	800fc80 <vPortFree>
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f000 ff87 	bl	800fc80 <vPortFree>
 800ed72:	e018      	b.n	800eda6 <prvDeleteTCB+0x56>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	d103      	bne.n	800ed86 <prvDeleteTCB+0x36>
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f000 ff7e 	bl	800fc80 <vPortFree>
 800ed84:	e00f      	b.n	800eda6 <prvDeleteTCB+0x56>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ed8c:	2b02      	cmp	r3, #2
 800ed8e:	d00a      	beq.n	800eda6 <prvDeleteTCB+0x56>
 800ed90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed94:	f383 8811 	msr	BASEPRI, r3
 800ed98:	f3bf 8f6f 	isb	sy
 800ed9c:	f3bf 8f4f 	dsb	sy
 800eda0:	60fb      	str	r3, [r7, #12]
 800eda2:	bf00      	nop
 800eda4:	e7fe      	b.n	800eda4 <prvDeleteTCB+0x54>
 800eda6:	bf00      	nop
 800eda8:	3710      	adds	r7, #16
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}
	...

0800edb0 <prvResetNextTaskUnblockTime>:
 800edb0:	b480      	push	{r7}
 800edb2:	b083      	sub	sp, #12
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	4b0c      	ldr	r3, [pc, #48]	; (800ede8 <prvResetNextTaskUnblockTime+0x38>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d104      	bne.n	800edca <prvResetNextTaskUnblockTime+0x1a>
 800edc0:	4b0a      	ldr	r3, [pc, #40]	; (800edec <prvResetNextTaskUnblockTime+0x3c>)
 800edc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800edc6:	601a      	str	r2, [r3, #0]
 800edc8:	e008      	b.n	800eddc <prvResetNextTaskUnblockTime+0x2c>
 800edca:	4b07      	ldr	r3, [pc, #28]	; (800ede8 <prvResetNextTaskUnblockTime+0x38>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	68db      	ldr	r3, [r3, #12]
 800edd2:	607b      	str	r3, [r7, #4]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	685b      	ldr	r3, [r3, #4]
 800edd8:	4a04      	ldr	r2, [pc, #16]	; (800edec <prvResetNextTaskUnblockTime+0x3c>)
 800edda:	6013      	str	r3, [r2, #0]
 800eddc:	bf00      	nop
 800edde:	370c      	adds	r7, #12
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr
 800ede8:	200025f4 	.word	0x200025f4
 800edec:	2000265c 	.word	0x2000265c

0800edf0 <xTaskGetSchedulerState>:
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	4b0b      	ldr	r3, [pc, #44]	; (800ee24 <xTaskGetSchedulerState+0x34>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d102      	bne.n	800ee04 <xTaskGetSchedulerState+0x14>
 800edfe:	2301      	movs	r3, #1
 800ee00:	607b      	str	r3, [r7, #4]
 800ee02:	e008      	b.n	800ee16 <xTaskGetSchedulerState+0x26>
 800ee04:	4b08      	ldr	r3, [pc, #32]	; (800ee28 <xTaskGetSchedulerState+0x38>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d102      	bne.n	800ee12 <xTaskGetSchedulerState+0x22>
 800ee0c:	2302      	movs	r3, #2
 800ee0e:	607b      	str	r3, [r7, #4]
 800ee10:	e001      	b.n	800ee16 <xTaskGetSchedulerState+0x26>
 800ee12:	2300      	movs	r3, #0
 800ee14:	607b      	str	r3, [r7, #4]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	4618      	mov	r0, r3
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr
 800ee24:	20002648 	.word	0x20002648
 800ee28:	20002664 	.word	0x20002664

0800ee2c <xTaskPriorityDisinherit>:
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b086      	sub	sp, #24
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	613b      	str	r3, [r7, #16]
 800ee38:	2300      	movs	r3, #0
 800ee3a:	617b      	str	r3, [r7, #20]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d056      	beq.n	800eef0 <xTaskPriorityDisinherit+0xc4>
 800ee42:	4b2e      	ldr	r3, [pc, #184]	; (800eefc <xTaskPriorityDisinherit+0xd0>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	693a      	ldr	r2, [r7, #16]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d00a      	beq.n	800ee62 <xTaskPriorityDisinherit+0x36>
 800ee4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee50:	f383 8811 	msr	BASEPRI, r3
 800ee54:	f3bf 8f6f 	isb	sy
 800ee58:	f3bf 8f4f 	dsb	sy
 800ee5c:	60fb      	str	r3, [r7, #12]
 800ee5e:	bf00      	nop
 800ee60:	e7fe      	b.n	800ee60 <xTaskPriorityDisinherit+0x34>
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d10a      	bne.n	800ee80 <xTaskPriorityDisinherit+0x54>
 800ee6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee6e:	f383 8811 	msr	BASEPRI, r3
 800ee72:	f3bf 8f6f 	isb	sy
 800ee76:	f3bf 8f4f 	dsb	sy
 800ee7a:	60bb      	str	r3, [r7, #8]
 800ee7c:	bf00      	nop
 800ee7e:	e7fe      	b.n	800ee7e <xTaskPriorityDisinherit+0x52>
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee84:	1e5a      	subs	r2, r3, #1
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	651a      	str	r2, [r3, #80]	; 0x50
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d02c      	beq.n	800eef0 <xTaskPriorityDisinherit+0xc4>
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d128      	bne.n	800eef0 <xTaskPriorityDisinherit+0xc4>
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	3304      	adds	r3, #4
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fe fbf2 	bl	800d68c <uxListRemove>
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	62da      	str	r2, [r3, #44]	; 0x2c
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	619a      	str	r2, [r3, #24]
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eec0:	4b0f      	ldr	r3, [pc, #60]	; (800ef00 <xTaskPriorityDisinherit+0xd4>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d903      	bls.n	800eed0 <xTaskPriorityDisinherit+0xa4>
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eecc:	4a0c      	ldr	r2, [pc, #48]	; (800ef00 <xTaskPriorityDisinherit+0xd4>)
 800eece:	6013      	str	r3, [r2, #0]
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eed4:	4613      	mov	r3, r2
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	4413      	add	r3, r2
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	4a09      	ldr	r2, [pc, #36]	; (800ef04 <xTaskPriorityDisinherit+0xd8>)
 800eede:	441a      	add	r2, r3
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	3304      	adds	r3, #4
 800eee4:	4619      	mov	r1, r3
 800eee6:	4610      	mov	r0, r2
 800eee8:	f7fe fb73 	bl	800d5d2 <vListInsertEnd>
 800eeec:	2301      	movs	r3, #1
 800eeee:	617b      	str	r3, [r7, #20]
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	4618      	mov	r0, r3
 800eef4:	3718      	adds	r7, #24
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	20002168 	.word	0x20002168
 800ef00:	20002644 	.word	0x20002644
 800ef04:	2000216c 	.word	0x2000216c

0800ef08 <prvAddCurrentTaskToDelayedList>:
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b084      	sub	sp, #16
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
 800ef12:	4b21      	ldr	r3, [pc, #132]	; (800ef98 <prvAddCurrentTaskToDelayedList+0x90>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	60fb      	str	r3, [r7, #12]
 800ef18:	4b20      	ldr	r3, [pc, #128]	; (800ef9c <prvAddCurrentTaskToDelayedList+0x94>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	3304      	adds	r3, #4
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7fe fbb4 	bl	800d68c <uxListRemove>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef2a:	d10a      	bne.n	800ef42 <prvAddCurrentTaskToDelayedList+0x3a>
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d007      	beq.n	800ef42 <prvAddCurrentTaskToDelayedList+0x3a>
 800ef32:	4b1a      	ldr	r3, [pc, #104]	; (800ef9c <prvAddCurrentTaskToDelayedList+0x94>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	3304      	adds	r3, #4
 800ef38:	4619      	mov	r1, r3
 800ef3a:	4819      	ldr	r0, [pc, #100]	; (800efa0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ef3c:	f7fe fb49 	bl	800d5d2 <vListInsertEnd>
 800ef40:	e026      	b.n	800ef90 <prvAddCurrentTaskToDelayedList+0x88>
 800ef42:	68fa      	ldr	r2, [r7, #12]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	4413      	add	r3, r2
 800ef48:	60bb      	str	r3, [r7, #8]
 800ef4a:	4b14      	ldr	r3, [pc, #80]	; (800ef9c <prvAddCurrentTaskToDelayedList+0x94>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	68ba      	ldr	r2, [r7, #8]
 800ef50:	605a      	str	r2, [r3, #4]
 800ef52:	68ba      	ldr	r2, [r7, #8]
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d209      	bcs.n	800ef6e <prvAddCurrentTaskToDelayedList+0x66>
 800ef5a:	4b12      	ldr	r3, [pc, #72]	; (800efa4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ef5c:	681a      	ldr	r2, [r3, #0]
 800ef5e:	4b0f      	ldr	r3, [pc, #60]	; (800ef9c <prvAddCurrentTaskToDelayedList+0x94>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	3304      	adds	r3, #4
 800ef64:	4619      	mov	r1, r3
 800ef66:	4610      	mov	r0, r2
 800ef68:	f7fe fb57 	bl	800d61a <vListInsert>
 800ef6c:	e010      	b.n	800ef90 <prvAddCurrentTaskToDelayedList+0x88>
 800ef6e:	4b0e      	ldr	r3, [pc, #56]	; (800efa8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	4b0a      	ldr	r3, [pc, #40]	; (800ef9c <prvAddCurrentTaskToDelayedList+0x94>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	3304      	adds	r3, #4
 800ef78:	4619      	mov	r1, r3
 800ef7a:	4610      	mov	r0, r2
 800ef7c:	f7fe fb4d 	bl	800d61a <vListInsert>
 800ef80:	4b0a      	ldr	r3, [pc, #40]	; (800efac <prvAddCurrentTaskToDelayedList+0xa4>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	68ba      	ldr	r2, [r7, #8]
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d202      	bcs.n	800ef90 <prvAddCurrentTaskToDelayedList+0x88>
 800ef8a:	4a08      	ldr	r2, [pc, #32]	; (800efac <prvAddCurrentTaskToDelayedList+0xa4>)
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	6013      	str	r3, [r2, #0]
 800ef90:	bf00      	nop
 800ef92:	3710      	adds	r7, #16
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	20002640 	.word	0x20002640
 800ef9c:	20002168 	.word	0x20002168
 800efa0:	20002628 	.word	0x20002628
 800efa4:	200025f8 	.word	0x200025f8
 800efa8:	200025f4 	.word	0x200025f4
 800efac:	2000265c 	.word	0x2000265c

0800efb0 <xTimerCreateTimerTask>:
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b08a      	sub	sp, #40	; 0x28
 800efb4:	af04      	add	r7, sp, #16
 800efb6:	2300      	movs	r3, #0
 800efb8:	617b      	str	r3, [r7, #20]
 800efba:	f000 fb07 	bl	800f5cc <prvCheckForValidListAndQueue>
 800efbe:	4b1c      	ldr	r3, [pc, #112]	; (800f030 <xTimerCreateTimerTask+0x80>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d021      	beq.n	800f00a <xTimerCreateTimerTask+0x5a>
 800efc6:	2300      	movs	r3, #0
 800efc8:	60fb      	str	r3, [r7, #12]
 800efca:	2300      	movs	r3, #0
 800efcc:	60bb      	str	r3, [r7, #8]
 800efce:	1d3a      	adds	r2, r7, #4
 800efd0:	f107 0108 	add.w	r1, r7, #8
 800efd4:	f107 030c 	add.w	r3, r7, #12
 800efd8:	4618      	mov	r0, r3
 800efda:	f7fe fab3 	bl	800d544 <vApplicationGetTimerTaskMemory>
 800efde:	6879      	ldr	r1, [r7, #4]
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	68fa      	ldr	r2, [r7, #12]
 800efe4:	9202      	str	r2, [sp, #8]
 800efe6:	9301      	str	r3, [sp, #4]
 800efe8:	2302      	movs	r3, #2
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	2300      	movs	r3, #0
 800efee:	460a      	mov	r2, r1
 800eff0:	4910      	ldr	r1, [pc, #64]	; (800f034 <xTimerCreateTimerTask+0x84>)
 800eff2:	4811      	ldr	r0, [pc, #68]	; (800f038 <xTimerCreateTimerTask+0x88>)
 800eff4:	f7ff f860 	bl	800e0b8 <xTaskCreateStatic>
 800eff8:	4603      	mov	r3, r0
 800effa:	4a10      	ldr	r2, [pc, #64]	; (800f03c <xTimerCreateTimerTask+0x8c>)
 800effc:	6013      	str	r3, [r2, #0]
 800effe:	4b0f      	ldr	r3, [pc, #60]	; (800f03c <xTimerCreateTimerTask+0x8c>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d001      	beq.n	800f00a <xTimerCreateTimerTask+0x5a>
 800f006:	2301      	movs	r3, #1
 800f008:	617b      	str	r3, [r7, #20]
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d10a      	bne.n	800f026 <xTimerCreateTimerTask+0x76>
 800f010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f014:	f383 8811 	msr	BASEPRI, r3
 800f018:	f3bf 8f6f 	isb	sy
 800f01c:	f3bf 8f4f 	dsb	sy
 800f020:	613b      	str	r3, [r7, #16]
 800f022:	bf00      	nop
 800f024:	e7fe      	b.n	800f024 <xTimerCreateTimerTask+0x74>
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	4618      	mov	r0, r3
 800f02a:	3718      	adds	r7, #24
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}
 800f030:	20002698 	.word	0x20002698
 800f034:	080148f4 	.word	0x080148f4
 800f038:	0800f175 	.word	0x0800f175
 800f03c:	2000269c 	.word	0x2000269c

0800f040 <xTimerGenericCommand>:
 800f040:	b580      	push	{r7, lr}
 800f042:	b08a      	sub	sp, #40	; 0x28
 800f044:	af00      	add	r7, sp, #0
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	607a      	str	r2, [r7, #4]
 800f04c:	603b      	str	r3, [r7, #0]
 800f04e:	2300      	movs	r3, #0
 800f050:	627b      	str	r3, [r7, #36]	; 0x24
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d10a      	bne.n	800f06e <xTimerGenericCommand+0x2e>
 800f058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f05c:	f383 8811 	msr	BASEPRI, r3
 800f060:	f3bf 8f6f 	isb	sy
 800f064:	f3bf 8f4f 	dsb	sy
 800f068:	623b      	str	r3, [r7, #32]
 800f06a:	bf00      	nop
 800f06c:	e7fe      	b.n	800f06c <xTimerGenericCommand+0x2c>
 800f06e:	4b1a      	ldr	r3, [pc, #104]	; (800f0d8 <xTimerGenericCommand+0x98>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d02a      	beq.n	800f0cc <xTimerGenericCommand+0x8c>
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	613b      	str	r3, [r7, #16]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	617b      	str	r3, [r7, #20]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	61bb      	str	r3, [r7, #24]
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	2b05      	cmp	r3, #5
 800f086:	dc18      	bgt.n	800f0ba <xTimerGenericCommand+0x7a>
 800f088:	f7ff feb2 	bl	800edf0 <xTaskGetSchedulerState>
 800f08c:	4603      	mov	r3, r0
 800f08e:	2b02      	cmp	r3, #2
 800f090:	d109      	bne.n	800f0a6 <xTimerGenericCommand+0x66>
 800f092:	4b11      	ldr	r3, [pc, #68]	; (800f0d8 <xTimerGenericCommand+0x98>)
 800f094:	6818      	ldr	r0, [r3, #0]
 800f096:	f107 0110 	add.w	r1, r7, #16
 800f09a:	2300      	movs	r3, #0
 800f09c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f09e:	f7fe fc23 	bl	800d8e8 <xQueueGenericSend>
 800f0a2:	6278      	str	r0, [r7, #36]	; 0x24
 800f0a4:	e012      	b.n	800f0cc <xTimerGenericCommand+0x8c>
 800f0a6:	4b0c      	ldr	r3, [pc, #48]	; (800f0d8 <xTimerGenericCommand+0x98>)
 800f0a8:	6818      	ldr	r0, [r3, #0]
 800f0aa:	f107 0110 	add.w	r1, r7, #16
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	f7fe fc19 	bl	800d8e8 <xQueueGenericSend>
 800f0b6:	6278      	str	r0, [r7, #36]	; 0x24
 800f0b8:	e008      	b.n	800f0cc <xTimerGenericCommand+0x8c>
 800f0ba:	4b07      	ldr	r3, [pc, #28]	; (800f0d8 <xTimerGenericCommand+0x98>)
 800f0bc:	6818      	ldr	r0, [r3, #0]
 800f0be:	f107 0110 	add.w	r1, r7, #16
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	683a      	ldr	r2, [r7, #0]
 800f0c6:	f7fe fd0d 	bl	800dae4 <xQueueGenericSendFromISR>
 800f0ca:	6278      	str	r0, [r7, #36]	; 0x24
 800f0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3728      	adds	r7, #40	; 0x28
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	20002698 	.word	0x20002698

0800f0dc <prvProcessExpiredTimer>:
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b088      	sub	sp, #32
 800f0e0:	af02      	add	r7, sp, #8
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
 800f0e6:	4b22      	ldr	r3, [pc, #136]	; (800f170 <prvProcessExpiredTimer+0x94>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	68db      	ldr	r3, [r3, #12]
 800f0ec:	68db      	ldr	r3, [r3, #12]
 800f0ee:	617b      	str	r3, [r7, #20]
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	3304      	adds	r3, #4
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7fe fac9 	bl	800d68c <uxListRemove>
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f100:	f003 0304 	and.w	r3, r3, #4
 800f104:	2b00      	cmp	r3, #0
 800f106:	d022      	beq.n	800f14e <prvProcessExpiredTimer+0x72>
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	699a      	ldr	r2, [r3, #24]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	18d1      	adds	r1, r2, r3
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	683a      	ldr	r2, [r7, #0]
 800f114:	6978      	ldr	r0, [r7, #20]
 800f116:	f000 f8d1 	bl	800f2bc <prvInsertTimerInActiveList>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d01f      	beq.n	800f160 <prvProcessExpiredTimer+0x84>
 800f120:	2300      	movs	r3, #0
 800f122:	9300      	str	r3, [sp, #0]
 800f124:	2300      	movs	r3, #0
 800f126:	687a      	ldr	r2, [r7, #4]
 800f128:	2100      	movs	r1, #0
 800f12a:	6978      	ldr	r0, [r7, #20]
 800f12c:	f7ff ff88 	bl	800f040 <xTimerGenericCommand>
 800f130:	6138      	str	r0, [r7, #16]
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d113      	bne.n	800f160 <prvProcessExpiredTimer+0x84>
 800f138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f13c:	f383 8811 	msr	BASEPRI, r3
 800f140:	f3bf 8f6f 	isb	sy
 800f144:	f3bf 8f4f 	dsb	sy
 800f148:	60fb      	str	r3, [r7, #12]
 800f14a:	bf00      	nop
 800f14c:	e7fe      	b.n	800f14c <prvProcessExpiredTimer+0x70>
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f154:	f023 0301 	bic.w	r3, r3, #1
 800f158:	b2da      	uxtb	r2, r3
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	6a1b      	ldr	r3, [r3, #32]
 800f164:	6978      	ldr	r0, [r7, #20]
 800f166:	4798      	blx	r3
 800f168:	bf00      	nop
 800f16a:	3718      	adds	r7, #24
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	20002690 	.word	0x20002690

0800f174 <prvTimerTask>:
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	f107 0308 	add.w	r3, r7, #8
 800f180:	4618      	mov	r0, r3
 800f182:	f000 f857 	bl	800f234 <prvGetNextExpireTime>
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	4619      	mov	r1, r3
 800f18c:	68f8      	ldr	r0, [r7, #12]
 800f18e:	f000 f803 	bl	800f198 <prvProcessTimerOrBlockTask>
 800f192:	f000 f8d5 	bl	800f340 <prvProcessReceivedCommands>
 800f196:	e7f1      	b.n	800f17c <prvTimerTask+0x8>

0800f198 <prvProcessTimerOrBlockTask>:
 800f198:	b580      	push	{r7, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
 800f1a2:	f7ff fa43 	bl	800e62c <vTaskSuspendAll>
 800f1a6:	f107 0308 	add.w	r3, r7, #8
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f000 f866 	bl	800f27c <prvSampleTimeNow>
 800f1b0:	60f8      	str	r0, [r7, #12]
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d130      	bne.n	800f21a <prvProcessTimerOrBlockTask+0x82>
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d10a      	bne.n	800f1d4 <prvProcessTimerOrBlockTask+0x3c>
 800f1be:	687a      	ldr	r2, [r7, #4]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d806      	bhi.n	800f1d4 <prvProcessTimerOrBlockTask+0x3c>
 800f1c6:	f7ff fa3f 	bl	800e648 <xTaskResumeAll>
 800f1ca:	68f9      	ldr	r1, [r7, #12]
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f7ff ff85 	bl	800f0dc <prvProcessExpiredTimer>
 800f1d2:	e024      	b.n	800f21e <prvProcessTimerOrBlockTask+0x86>
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d008      	beq.n	800f1ec <prvProcessTimerOrBlockTask+0x54>
 800f1da:	4b13      	ldr	r3, [pc, #76]	; (800f228 <prvProcessTimerOrBlockTask+0x90>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d101      	bne.n	800f1e8 <prvProcessTimerOrBlockTask+0x50>
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	e000      	b.n	800f1ea <prvProcessTimerOrBlockTask+0x52>
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	603b      	str	r3, [r7, #0]
 800f1ec:	4b0f      	ldr	r3, [pc, #60]	; (800f22c <prvProcessTimerOrBlockTask+0x94>)
 800f1ee:	6818      	ldr	r0, [r3, #0]
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	1ad3      	subs	r3, r2, r3
 800f1f6:	683a      	ldr	r2, [r7, #0]
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	f7fe ff29 	bl	800e050 <vQueueWaitForMessageRestricted>
 800f1fe:	f7ff fa23 	bl	800e648 <xTaskResumeAll>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	d10a      	bne.n	800f21e <prvProcessTimerOrBlockTask+0x86>
 800f208:	4b09      	ldr	r3, [pc, #36]	; (800f230 <prvProcessTimerOrBlockTask+0x98>)
 800f20a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f20e:	601a      	str	r2, [r3, #0]
 800f210:	f3bf 8f4f 	dsb	sy
 800f214:	f3bf 8f6f 	isb	sy
 800f218:	e001      	b.n	800f21e <prvProcessTimerOrBlockTask+0x86>
 800f21a:	f7ff fa15 	bl	800e648 <xTaskResumeAll>
 800f21e:	bf00      	nop
 800f220:	3710      	adds	r7, #16
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}
 800f226:	bf00      	nop
 800f228:	20002694 	.word	0x20002694
 800f22c:	20002698 	.word	0x20002698
 800f230:	e000ed04 	.word	0xe000ed04

0800f234 <prvGetNextExpireTime>:
 800f234:	b480      	push	{r7}
 800f236:	b085      	sub	sp, #20
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	4b0e      	ldr	r3, [pc, #56]	; (800f278 <prvGetNextExpireTime+0x44>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d101      	bne.n	800f24a <prvGetNextExpireTime+0x16>
 800f246:	2201      	movs	r2, #1
 800f248:	e000      	b.n	800f24c <prvGetNextExpireTime+0x18>
 800f24a:	2200      	movs	r2, #0
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	601a      	str	r2, [r3, #0]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d105      	bne.n	800f264 <prvGetNextExpireTime+0x30>
 800f258:	4b07      	ldr	r3, [pc, #28]	; (800f278 <prvGetNextExpireTime+0x44>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	60fb      	str	r3, [r7, #12]
 800f262:	e001      	b.n	800f268 <prvGetNextExpireTime+0x34>
 800f264:	2300      	movs	r3, #0
 800f266:	60fb      	str	r3, [r7, #12]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	4618      	mov	r0, r3
 800f26c:	3714      	adds	r7, #20
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr
 800f276:	bf00      	nop
 800f278:	20002690 	.word	0x20002690

0800f27c <prvSampleTimeNow>:
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b084      	sub	sp, #16
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	f7ff fa7e 	bl	800e784 <xTaskGetTickCount>
 800f288:	60f8      	str	r0, [r7, #12]
 800f28a:	4b0b      	ldr	r3, [pc, #44]	; (800f2b8 <prvSampleTimeNow+0x3c>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	68fa      	ldr	r2, [r7, #12]
 800f290:	429a      	cmp	r2, r3
 800f292:	d205      	bcs.n	800f2a0 <prvSampleTimeNow+0x24>
 800f294:	f000 f936 	bl	800f504 <prvSwitchTimerLists>
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2201      	movs	r2, #1
 800f29c:	601a      	str	r2, [r3, #0]
 800f29e:	e002      	b.n	800f2a6 <prvSampleTimeNow+0x2a>
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	601a      	str	r2, [r3, #0]
 800f2a6:	4a04      	ldr	r2, [pc, #16]	; (800f2b8 <prvSampleTimeNow+0x3c>)
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	6013      	str	r3, [r2, #0]
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3710      	adds	r7, #16
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	200026a0 	.word	0x200026a0

0800f2bc <prvInsertTimerInActiveList>:
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b086      	sub	sp, #24
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	607a      	str	r2, [r7, #4]
 800f2c8:	603b      	str	r3, [r7, #0]
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	617b      	str	r3, [r7, #20]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	68ba      	ldr	r2, [r7, #8]
 800f2d2:	605a      	str	r2, [r3, #4]
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	68fa      	ldr	r2, [r7, #12]
 800f2d8:	611a      	str	r2, [r3, #16]
 800f2da:	68ba      	ldr	r2, [r7, #8]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d812      	bhi.n	800f308 <prvInsertTimerInActiveList+0x4c>
 800f2e2:	687a      	ldr	r2, [r7, #4]
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	1ad2      	subs	r2, r2, r3
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	699b      	ldr	r3, [r3, #24]
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d302      	bcc.n	800f2f6 <prvInsertTimerInActiveList+0x3a>
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	617b      	str	r3, [r7, #20]
 800f2f4:	e01b      	b.n	800f32e <prvInsertTimerInActiveList+0x72>
 800f2f6:	4b10      	ldr	r3, [pc, #64]	; (800f338 <prvInsertTimerInActiveList+0x7c>)
 800f2f8:	681a      	ldr	r2, [r3, #0]
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	3304      	adds	r3, #4
 800f2fe:	4619      	mov	r1, r3
 800f300:	4610      	mov	r0, r2
 800f302:	f7fe f98a 	bl	800d61a <vListInsert>
 800f306:	e012      	b.n	800f32e <prvInsertTimerInActiveList+0x72>
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d206      	bcs.n	800f31e <prvInsertTimerInActiveList+0x62>
 800f310:	68ba      	ldr	r2, [r7, #8]
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	429a      	cmp	r2, r3
 800f316:	d302      	bcc.n	800f31e <prvInsertTimerInActiveList+0x62>
 800f318:	2301      	movs	r3, #1
 800f31a:	617b      	str	r3, [r7, #20]
 800f31c:	e007      	b.n	800f32e <prvInsertTimerInActiveList+0x72>
 800f31e:	4b07      	ldr	r3, [pc, #28]	; (800f33c <prvInsertTimerInActiveList+0x80>)
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	3304      	adds	r3, #4
 800f326:	4619      	mov	r1, r3
 800f328:	4610      	mov	r0, r2
 800f32a:	f7fe f976 	bl	800d61a <vListInsert>
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	4618      	mov	r0, r3
 800f332:	3718      	adds	r7, #24
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	20002694 	.word	0x20002694
 800f33c:	20002690 	.word	0x20002690

0800f340 <prvProcessReceivedCommands>:
 800f340:	b580      	push	{r7, lr}
 800f342:	b08e      	sub	sp, #56	; 0x38
 800f344:	af02      	add	r7, sp, #8
 800f346:	e0ca      	b.n	800f4de <prvProcessReceivedCommands+0x19e>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	da18      	bge.n	800f380 <prvProcessReceivedCommands+0x40>
 800f34e:	1d3b      	adds	r3, r7, #4
 800f350:	3304      	adds	r3, #4
 800f352:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f356:	2b00      	cmp	r3, #0
 800f358:	d10a      	bne.n	800f370 <prvProcessReceivedCommands+0x30>
 800f35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f35e:	f383 8811 	msr	BASEPRI, r3
 800f362:	f3bf 8f6f 	isb	sy
 800f366:	f3bf 8f4f 	dsb	sy
 800f36a:	61fb      	str	r3, [r7, #28]
 800f36c:	bf00      	nop
 800f36e:	e7fe      	b.n	800f36e <prvProcessReceivedCommands+0x2e>
 800f370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f376:	6850      	ldr	r0, [r2, #4]
 800f378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f37a:	6892      	ldr	r2, [r2, #8]
 800f37c:	4611      	mov	r1, r2
 800f37e:	4798      	blx	r3
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2b00      	cmp	r3, #0
 800f384:	f2c0 80aa 	blt.w	800f4dc <prvProcessReceivedCommands+0x19c>
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38e:	695b      	ldr	r3, [r3, #20]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d004      	beq.n	800f39e <prvProcessReceivedCommands+0x5e>
 800f394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f396:	3304      	adds	r3, #4
 800f398:	4618      	mov	r0, r3
 800f39a:	f7fe f977 	bl	800d68c <uxListRemove>
 800f39e:	463b      	mov	r3, r7
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7ff ff6b 	bl	800f27c <prvSampleTimeNow>
 800f3a6:	6278      	str	r0, [r7, #36]	; 0x24
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b09      	cmp	r3, #9
 800f3ac:	f200 8097 	bhi.w	800f4de <prvProcessReceivedCommands+0x19e>
 800f3b0:	a201      	add	r2, pc, #4	; (adr r2, 800f3b8 <prvProcessReceivedCommands+0x78>)
 800f3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3b6:	bf00      	nop
 800f3b8:	0800f3e1 	.word	0x0800f3e1
 800f3bc:	0800f3e1 	.word	0x0800f3e1
 800f3c0:	0800f3e1 	.word	0x0800f3e1
 800f3c4:	0800f455 	.word	0x0800f455
 800f3c8:	0800f469 	.word	0x0800f469
 800f3cc:	0800f4b3 	.word	0x0800f4b3
 800f3d0:	0800f3e1 	.word	0x0800f3e1
 800f3d4:	0800f3e1 	.word	0x0800f3e1
 800f3d8:	0800f455 	.word	0x0800f455
 800f3dc:	0800f469 	.word	0x0800f469
 800f3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3e6:	f043 0301 	orr.w	r3, r3, #1
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800f3f2:	68ba      	ldr	r2, [r7, #8]
 800f3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f6:	699b      	ldr	r3, [r3, #24]
 800f3f8:	18d1      	adds	r1, r2, r3
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f400:	f7ff ff5c 	bl	800f2bc <prvInsertTimerInActiveList>
 800f404:	4603      	mov	r3, r0
 800f406:	2b00      	cmp	r3, #0
 800f408:	d069      	beq.n	800f4de <prvProcessReceivedCommands+0x19e>
 800f40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f40c:	6a1b      	ldr	r3, [r3, #32]
 800f40e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f410:	4798      	blx	r3
 800f412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f418:	f003 0304 	and.w	r3, r3, #4
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d05e      	beq.n	800f4de <prvProcessReceivedCommands+0x19e>
 800f420:	68ba      	ldr	r2, [r7, #8]
 800f422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f424:	699b      	ldr	r3, [r3, #24]
 800f426:	441a      	add	r2, r3
 800f428:	2300      	movs	r3, #0
 800f42a:	9300      	str	r3, [sp, #0]
 800f42c:	2300      	movs	r3, #0
 800f42e:	2100      	movs	r1, #0
 800f430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f432:	f7ff fe05 	bl	800f040 <xTimerGenericCommand>
 800f436:	6238      	str	r0, [r7, #32]
 800f438:	6a3b      	ldr	r3, [r7, #32]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d14f      	bne.n	800f4de <prvProcessReceivedCommands+0x19e>
 800f43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f442:	f383 8811 	msr	BASEPRI, r3
 800f446:	f3bf 8f6f 	isb	sy
 800f44a:	f3bf 8f4f 	dsb	sy
 800f44e:	61bb      	str	r3, [r7, #24]
 800f450:	bf00      	nop
 800f452:	e7fe      	b.n	800f452 <prvProcessReceivedCommands+0x112>
 800f454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f45a:	f023 0301 	bic.w	r3, r3, #1
 800f45e:	b2da      	uxtb	r2, r3
 800f460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f462:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800f466:	e03a      	b.n	800f4de <prvProcessReceivedCommands+0x19e>
 800f468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f46e:	f043 0301 	orr.w	r3, r3, #1
 800f472:	b2da      	uxtb	r2, r3
 800f474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800f47a:	68ba      	ldr	r2, [r7, #8]
 800f47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47e:	619a      	str	r2, [r3, #24]
 800f480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f482:	699b      	ldr	r3, [r3, #24]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d10a      	bne.n	800f49e <prvProcessReceivedCommands+0x15e>
 800f488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f48c:	f383 8811 	msr	BASEPRI, r3
 800f490:	f3bf 8f6f 	isb	sy
 800f494:	f3bf 8f4f 	dsb	sy
 800f498:	617b      	str	r3, [r7, #20]
 800f49a:	bf00      	nop
 800f49c:	e7fe      	b.n	800f49c <prvProcessReceivedCommands+0x15c>
 800f49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a0:	699a      	ldr	r2, [r3, #24]
 800f4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a4:	18d1      	adds	r1, r2, r3
 800f4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4ac:	f7ff ff06 	bl	800f2bc <prvInsertTimerInActiveList>
 800f4b0:	e015      	b.n	800f4de <prvProcessReceivedCommands+0x19e>
 800f4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4b8:	f003 0302 	and.w	r3, r3, #2
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d103      	bne.n	800f4c8 <prvProcessReceivedCommands+0x188>
 800f4c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4c2:	f000 fbdd 	bl	800fc80 <vPortFree>
 800f4c6:	e00a      	b.n	800f4de <prvProcessReceivedCommands+0x19e>
 800f4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4ce:	f023 0301 	bic.w	r3, r3, #1
 800f4d2:	b2da      	uxtb	r2, r3
 800f4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800f4da:	e000      	b.n	800f4de <prvProcessReceivedCommands+0x19e>
 800f4dc:	bf00      	nop
 800f4de:	4b08      	ldr	r3, [pc, #32]	; (800f500 <prvProcessReceivedCommands+0x1c0>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	1d39      	adds	r1, r7, #4
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7fe fb98 	bl	800dc1c <xQueueReceive>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	f47f af2a 	bne.w	800f348 <prvProcessReceivedCommands+0x8>
 800f4f4:	bf00      	nop
 800f4f6:	bf00      	nop
 800f4f8:	3730      	adds	r7, #48	; 0x30
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop
 800f500:	20002698 	.word	0x20002698

0800f504 <prvSwitchTimerLists>:
 800f504:	b580      	push	{r7, lr}
 800f506:	b088      	sub	sp, #32
 800f508:	af02      	add	r7, sp, #8
 800f50a:	e048      	b.n	800f59e <prvSwitchTimerLists+0x9a>
 800f50c:	4b2d      	ldr	r3, [pc, #180]	; (800f5c4 <prvSwitchTimerLists+0xc0>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	68db      	ldr	r3, [r3, #12]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	613b      	str	r3, [r7, #16]
 800f516:	4b2b      	ldr	r3, [pc, #172]	; (800f5c4 <prvSwitchTimerLists+0xc0>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	68db      	ldr	r3, [r3, #12]
 800f51c:	68db      	ldr	r3, [r3, #12]
 800f51e:	60fb      	str	r3, [r7, #12]
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	3304      	adds	r3, #4
 800f524:	4618      	mov	r0, r3
 800f526:	f7fe f8b1 	bl	800d68c <uxListRemove>
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	6a1b      	ldr	r3, [r3, #32]
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	4798      	blx	r3
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f538:	f003 0304 	and.w	r3, r3, #4
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d02e      	beq.n	800f59e <prvSwitchTimerLists+0x9a>
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	699b      	ldr	r3, [r3, #24]
 800f544:	693a      	ldr	r2, [r7, #16]
 800f546:	4413      	add	r3, r2
 800f548:	60bb      	str	r3, [r7, #8]
 800f54a:	68ba      	ldr	r2, [r7, #8]
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	429a      	cmp	r2, r3
 800f550:	d90e      	bls.n	800f570 <prvSwitchTimerLists+0x6c>
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	68ba      	ldr	r2, [r7, #8]
 800f556:	605a      	str	r2, [r3, #4]
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	68fa      	ldr	r2, [r7, #12]
 800f55c:	611a      	str	r2, [r3, #16]
 800f55e:	4b19      	ldr	r3, [pc, #100]	; (800f5c4 <prvSwitchTimerLists+0xc0>)
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	3304      	adds	r3, #4
 800f566:	4619      	mov	r1, r3
 800f568:	4610      	mov	r0, r2
 800f56a:	f7fe f856 	bl	800d61a <vListInsert>
 800f56e:	e016      	b.n	800f59e <prvSwitchTimerLists+0x9a>
 800f570:	2300      	movs	r3, #0
 800f572:	9300      	str	r3, [sp, #0]
 800f574:	2300      	movs	r3, #0
 800f576:	693a      	ldr	r2, [r7, #16]
 800f578:	2100      	movs	r1, #0
 800f57a:	68f8      	ldr	r0, [r7, #12]
 800f57c:	f7ff fd60 	bl	800f040 <xTimerGenericCommand>
 800f580:	6078      	str	r0, [r7, #4]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d10a      	bne.n	800f59e <prvSwitchTimerLists+0x9a>
 800f588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f58c:	f383 8811 	msr	BASEPRI, r3
 800f590:	f3bf 8f6f 	isb	sy
 800f594:	f3bf 8f4f 	dsb	sy
 800f598:	603b      	str	r3, [r7, #0]
 800f59a:	bf00      	nop
 800f59c:	e7fe      	b.n	800f59c <prvSwitchTimerLists+0x98>
 800f59e:	4b09      	ldr	r3, [pc, #36]	; (800f5c4 <prvSwitchTimerLists+0xc0>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d1b1      	bne.n	800f50c <prvSwitchTimerLists+0x8>
 800f5a8:	4b06      	ldr	r3, [pc, #24]	; (800f5c4 <prvSwitchTimerLists+0xc0>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	617b      	str	r3, [r7, #20]
 800f5ae:	4b06      	ldr	r3, [pc, #24]	; (800f5c8 <prvSwitchTimerLists+0xc4>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	4a04      	ldr	r2, [pc, #16]	; (800f5c4 <prvSwitchTimerLists+0xc0>)
 800f5b4:	6013      	str	r3, [r2, #0]
 800f5b6:	4a04      	ldr	r2, [pc, #16]	; (800f5c8 <prvSwitchTimerLists+0xc4>)
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	6013      	str	r3, [r2, #0]
 800f5bc:	bf00      	nop
 800f5be:	3718      	adds	r7, #24
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	20002690 	.word	0x20002690
 800f5c8:	20002694 	.word	0x20002694

0800f5cc <prvCheckForValidListAndQueue>:
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af02      	add	r7, sp, #8
 800f5d2:	f000 f967 	bl	800f8a4 <vPortEnterCritical>
 800f5d6:	4b15      	ldr	r3, [pc, #84]	; (800f62c <prvCheckForValidListAndQueue+0x60>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d120      	bne.n	800f620 <prvCheckForValidListAndQueue+0x54>
 800f5de:	4814      	ldr	r0, [pc, #80]	; (800f630 <prvCheckForValidListAndQueue+0x64>)
 800f5e0:	f7fd ffca 	bl	800d578 <vListInitialise>
 800f5e4:	4813      	ldr	r0, [pc, #76]	; (800f634 <prvCheckForValidListAndQueue+0x68>)
 800f5e6:	f7fd ffc7 	bl	800d578 <vListInitialise>
 800f5ea:	4b13      	ldr	r3, [pc, #76]	; (800f638 <prvCheckForValidListAndQueue+0x6c>)
 800f5ec:	4a10      	ldr	r2, [pc, #64]	; (800f630 <prvCheckForValidListAndQueue+0x64>)
 800f5ee:	601a      	str	r2, [r3, #0]
 800f5f0:	4b12      	ldr	r3, [pc, #72]	; (800f63c <prvCheckForValidListAndQueue+0x70>)
 800f5f2:	4a10      	ldr	r2, [pc, #64]	; (800f634 <prvCheckForValidListAndQueue+0x68>)
 800f5f4:	601a      	str	r2, [r3, #0]
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	9300      	str	r3, [sp, #0]
 800f5fa:	4b11      	ldr	r3, [pc, #68]	; (800f640 <prvCheckForValidListAndQueue+0x74>)
 800f5fc:	4a11      	ldr	r2, [pc, #68]	; (800f644 <prvCheckForValidListAndQueue+0x78>)
 800f5fe:	2110      	movs	r1, #16
 800f600:	200a      	movs	r0, #10
 800f602:	f7fe f8d5 	bl	800d7b0 <xQueueGenericCreateStatic>
 800f606:	4603      	mov	r3, r0
 800f608:	4a08      	ldr	r2, [pc, #32]	; (800f62c <prvCheckForValidListAndQueue+0x60>)
 800f60a:	6013      	str	r3, [r2, #0]
 800f60c:	4b07      	ldr	r3, [pc, #28]	; (800f62c <prvCheckForValidListAndQueue+0x60>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d005      	beq.n	800f620 <prvCheckForValidListAndQueue+0x54>
 800f614:	4b05      	ldr	r3, [pc, #20]	; (800f62c <prvCheckForValidListAndQueue+0x60>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	490b      	ldr	r1, [pc, #44]	; (800f648 <prvCheckForValidListAndQueue+0x7c>)
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7fe fcee 	bl	800dffc <vQueueAddToRegistry>
 800f620:	f000 f970 	bl	800f904 <vPortExitCritical>
 800f624:	bf00      	nop
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop
 800f62c:	20002698 	.word	0x20002698
 800f630:	20002668 	.word	0x20002668
 800f634:	2000267c 	.word	0x2000267c
 800f638:	20002690 	.word	0x20002690
 800f63c:	20002694 	.word	0x20002694
 800f640:	20002744 	.word	0x20002744
 800f644:	200026a4 	.word	0x200026a4
 800f648:	080148fc 	.word	0x080148fc

0800f64c <pxPortInitialiseStack>:
 800f64c:	b480      	push	{r7}
 800f64e:	b085      	sub	sp, #20
 800f650:	af00      	add	r7, sp, #0
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	607a      	str	r2, [r7, #4]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	3b04      	subs	r3, #4
 800f65c:	60fb      	str	r3, [r7, #12]
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f664:	601a      	str	r2, [r3, #0]
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	3b04      	subs	r3, #4
 800f66a:	60fb      	str	r3, [r7, #12]
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	f023 0201 	bic.w	r2, r3, #1
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	601a      	str	r2, [r3, #0]
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	3b04      	subs	r3, #4
 800f67a:	60fb      	str	r3, [r7, #12]
 800f67c:	4a0c      	ldr	r2, [pc, #48]	; (800f6b0 <pxPortInitialiseStack+0x64>)
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	601a      	str	r2, [r3, #0]
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	3b14      	subs	r3, #20
 800f686:	60fb      	str	r3, [r7, #12]
 800f688:	687a      	ldr	r2, [r7, #4]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	601a      	str	r2, [r3, #0]
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	3b04      	subs	r3, #4
 800f692:	60fb      	str	r3, [r7, #12]
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f06f 0202 	mvn.w	r2, #2
 800f69a:	601a      	str	r2, [r3, #0]
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	3b20      	subs	r3, #32
 800f6a0:	60fb      	str	r3, [r7, #12]
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3714      	adds	r7, #20
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr
 800f6b0:	0800f6b5 	.word	0x0800f6b5

0800f6b4 <prvTaskExitError>:
 800f6b4:	b480      	push	{r7}
 800f6b6:	b085      	sub	sp, #20
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	607b      	str	r3, [r7, #4]
 800f6be:	4b12      	ldr	r3, [pc, #72]	; (800f708 <prvTaskExitError+0x54>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6c6:	d00a      	beq.n	800f6de <prvTaskExitError+0x2a>
 800f6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6cc:	f383 8811 	msr	BASEPRI, r3
 800f6d0:	f3bf 8f6f 	isb	sy
 800f6d4:	f3bf 8f4f 	dsb	sy
 800f6d8:	60fb      	str	r3, [r7, #12]
 800f6da:	bf00      	nop
 800f6dc:	e7fe      	b.n	800f6dc <prvTaskExitError+0x28>
 800f6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e2:	f383 8811 	msr	BASEPRI, r3
 800f6e6:	f3bf 8f6f 	isb	sy
 800f6ea:	f3bf 8f4f 	dsb	sy
 800f6ee:	60bb      	str	r3, [r7, #8]
 800f6f0:	bf00      	nop
 800f6f2:	bf00      	nop
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d0fc      	beq.n	800f6f4 <prvTaskExitError+0x40>
 800f6fa:	bf00      	nop
 800f6fc:	bf00      	nop
 800f6fe:	3714      	adds	r7, #20
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr
 800f708:	20000010 	.word	0x20000010
 800f70c:	00000000 	.word	0x00000000

0800f710 <SVC_Handler>:
 800f710:	4b07      	ldr	r3, [pc, #28]	; (800f730 <pxCurrentTCBConst2>)
 800f712:	6819      	ldr	r1, [r3, #0]
 800f714:	6808      	ldr	r0, [r1, #0]
 800f716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f71a:	f380 8809 	msr	PSP, r0
 800f71e:	f3bf 8f6f 	isb	sy
 800f722:	f04f 0000 	mov.w	r0, #0
 800f726:	f380 8811 	msr	BASEPRI, r0
 800f72a:	4770      	bx	lr
 800f72c:	f3af 8000 	nop.w

0800f730 <pxCurrentTCBConst2>:
 800f730:	20002168 	.word	0x20002168
 800f734:	bf00      	nop
 800f736:	bf00      	nop

0800f738 <prvPortStartFirstTask>:
 800f738:	4808      	ldr	r0, [pc, #32]	; (800f75c <prvPortStartFirstTask+0x24>)
 800f73a:	6800      	ldr	r0, [r0, #0]
 800f73c:	6800      	ldr	r0, [r0, #0]
 800f73e:	f380 8808 	msr	MSP, r0
 800f742:	f04f 0000 	mov.w	r0, #0
 800f746:	f380 8814 	msr	CONTROL, r0
 800f74a:	b662      	cpsie	i
 800f74c:	b661      	cpsie	f
 800f74e:	f3bf 8f4f 	dsb	sy
 800f752:	f3bf 8f6f 	isb	sy
 800f756:	df00      	svc	0
 800f758:	bf00      	nop
 800f75a:	bf00      	nop
 800f75c:	e000ed08 	.word	0xe000ed08

0800f760 <xPortStartScheduler>:
 800f760:	b580      	push	{r7, lr}
 800f762:	b086      	sub	sp, #24
 800f764:	af00      	add	r7, sp, #0
 800f766:	4b46      	ldr	r3, [pc, #280]	; (800f880 <xPortStartScheduler+0x120>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	4a46      	ldr	r2, [pc, #280]	; (800f884 <xPortStartScheduler+0x124>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d10a      	bne.n	800f786 <xPortStartScheduler+0x26>
 800f770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f774:	f383 8811 	msr	BASEPRI, r3
 800f778:	f3bf 8f6f 	isb	sy
 800f77c:	f3bf 8f4f 	dsb	sy
 800f780:	613b      	str	r3, [r7, #16]
 800f782:	bf00      	nop
 800f784:	e7fe      	b.n	800f784 <xPortStartScheduler+0x24>
 800f786:	4b3e      	ldr	r3, [pc, #248]	; (800f880 <xPortStartScheduler+0x120>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	4a3f      	ldr	r2, [pc, #252]	; (800f888 <xPortStartScheduler+0x128>)
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d10a      	bne.n	800f7a6 <xPortStartScheduler+0x46>
 800f790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f794:	f383 8811 	msr	BASEPRI, r3
 800f798:	f3bf 8f6f 	isb	sy
 800f79c:	f3bf 8f4f 	dsb	sy
 800f7a0:	60fb      	str	r3, [r7, #12]
 800f7a2:	bf00      	nop
 800f7a4:	e7fe      	b.n	800f7a4 <xPortStartScheduler+0x44>
 800f7a6:	4b39      	ldr	r3, [pc, #228]	; (800f88c <xPortStartScheduler+0x12c>)
 800f7a8:	617b      	str	r3, [r7, #20]
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	607b      	str	r3, [r7, #4]
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	22ff      	movs	r2, #255	; 0xff
 800f7b6:	701a      	strb	r2, [r3, #0]
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	70fb      	strb	r3, [r7, #3]
 800f7c0:	78fb      	ldrb	r3, [r7, #3]
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f7c8:	b2da      	uxtb	r2, r3
 800f7ca:	4b31      	ldr	r3, [pc, #196]	; (800f890 <xPortStartScheduler+0x130>)
 800f7cc:	701a      	strb	r2, [r3, #0]
 800f7ce:	4b31      	ldr	r3, [pc, #196]	; (800f894 <xPortStartScheduler+0x134>)
 800f7d0:	2207      	movs	r2, #7
 800f7d2:	601a      	str	r2, [r3, #0]
 800f7d4:	e009      	b.n	800f7ea <xPortStartScheduler+0x8a>
 800f7d6:	4b2f      	ldr	r3, [pc, #188]	; (800f894 <xPortStartScheduler+0x134>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	3b01      	subs	r3, #1
 800f7dc:	4a2d      	ldr	r2, [pc, #180]	; (800f894 <xPortStartScheduler+0x134>)
 800f7de:	6013      	str	r3, [r2, #0]
 800f7e0:	78fb      	ldrb	r3, [r7, #3]
 800f7e2:	b2db      	uxtb	r3, r3
 800f7e4:	005b      	lsls	r3, r3, #1
 800f7e6:	b2db      	uxtb	r3, r3
 800f7e8:	70fb      	strb	r3, [r7, #3]
 800f7ea:	78fb      	ldrb	r3, [r7, #3]
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7f2:	2b80      	cmp	r3, #128	; 0x80
 800f7f4:	d0ef      	beq.n	800f7d6 <xPortStartScheduler+0x76>
 800f7f6:	4b27      	ldr	r3, [pc, #156]	; (800f894 <xPortStartScheduler+0x134>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f1c3 0307 	rsb	r3, r3, #7
 800f7fe:	2b04      	cmp	r3, #4
 800f800:	d00a      	beq.n	800f818 <xPortStartScheduler+0xb8>
 800f802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f806:	f383 8811 	msr	BASEPRI, r3
 800f80a:	f3bf 8f6f 	isb	sy
 800f80e:	f3bf 8f4f 	dsb	sy
 800f812:	60bb      	str	r3, [r7, #8]
 800f814:	bf00      	nop
 800f816:	e7fe      	b.n	800f816 <xPortStartScheduler+0xb6>
 800f818:	4b1e      	ldr	r3, [pc, #120]	; (800f894 <xPortStartScheduler+0x134>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	021b      	lsls	r3, r3, #8
 800f81e:	4a1d      	ldr	r2, [pc, #116]	; (800f894 <xPortStartScheduler+0x134>)
 800f820:	6013      	str	r3, [r2, #0]
 800f822:	4b1c      	ldr	r3, [pc, #112]	; (800f894 <xPortStartScheduler+0x134>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f82a:	4a1a      	ldr	r2, [pc, #104]	; (800f894 <xPortStartScheduler+0x134>)
 800f82c:	6013      	str	r3, [r2, #0]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	b2da      	uxtb	r2, r3
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	701a      	strb	r2, [r3, #0]
 800f836:	4b18      	ldr	r3, [pc, #96]	; (800f898 <xPortStartScheduler+0x138>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	4a17      	ldr	r2, [pc, #92]	; (800f898 <xPortStartScheduler+0x138>)
 800f83c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f840:	6013      	str	r3, [r2, #0]
 800f842:	4b15      	ldr	r3, [pc, #84]	; (800f898 <xPortStartScheduler+0x138>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	4a14      	ldr	r2, [pc, #80]	; (800f898 <xPortStartScheduler+0x138>)
 800f848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f84c:	6013      	str	r3, [r2, #0]
 800f84e:	f000 f8dd 	bl	800fa0c <vPortSetupTimerInterrupt>
 800f852:	4b12      	ldr	r3, [pc, #72]	; (800f89c <xPortStartScheduler+0x13c>)
 800f854:	2200      	movs	r2, #0
 800f856:	601a      	str	r2, [r3, #0]
 800f858:	f000 f8fc 	bl	800fa54 <vPortEnableVFP>
 800f85c:	4b10      	ldr	r3, [pc, #64]	; (800f8a0 <xPortStartScheduler+0x140>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4a0f      	ldr	r2, [pc, #60]	; (800f8a0 <xPortStartScheduler+0x140>)
 800f862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f866:	6013      	str	r3, [r2, #0]
 800f868:	f7ff ff66 	bl	800f738 <prvPortStartFirstTask>
 800f86c:	f7ff f854 	bl	800e918 <vTaskSwitchContext>
 800f870:	f7ff ff20 	bl	800f6b4 <prvTaskExitError>
 800f874:	2300      	movs	r3, #0
 800f876:	4618      	mov	r0, r3
 800f878:	3718      	adds	r7, #24
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	e000ed00 	.word	0xe000ed00
 800f884:	410fc271 	.word	0x410fc271
 800f888:	410fc270 	.word	0x410fc270
 800f88c:	e000e400 	.word	0xe000e400
 800f890:	20002794 	.word	0x20002794
 800f894:	20002798 	.word	0x20002798
 800f898:	e000ed20 	.word	0xe000ed20
 800f89c:	20000010 	.word	0x20000010
 800f8a0:	e000ef34 	.word	0xe000ef34

0800f8a4 <vPortEnterCritical>:
 800f8a4:	b480      	push	{r7}
 800f8a6:	b083      	sub	sp, #12
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ae:	f383 8811 	msr	BASEPRI, r3
 800f8b2:	f3bf 8f6f 	isb	sy
 800f8b6:	f3bf 8f4f 	dsb	sy
 800f8ba:	607b      	str	r3, [r7, #4]
 800f8bc:	bf00      	nop
 800f8be:	4b0f      	ldr	r3, [pc, #60]	; (800f8fc <vPortEnterCritical+0x58>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	4a0d      	ldr	r2, [pc, #52]	; (800f8fc <vPortEnterCritical+0x58>)
 800f8c6:	6013      	str	r3, [r2, #0]
 800f8c8:	4b0c      	ldr	r3, [pc, #48]	; (800f8fc <vPortEnterCritical+0x58>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d10f      	bne.n	800f8f0 <vPortEnterCritical+0x4c>
 800f8d0:	4b0b      	ldr	r3, [pc, #44]	; (800f900 <vPortEnterCritical+0x5c>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d00a      	beq.n	800f8f0 <vPortEnterCritical+0x4c>
 800f8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8de:	f383 8811 	msr	BASEPRI, r3
 800f8e2:	f3bf 8f6f 	isb	sy
 800f8e6:	f3bf 8f4f 	dsb	sy
 800f8ea:	603b      	str	r3, [r7, #0]
 800f8ec:	bf00      	nop
 800f8ee:	e7fe      	b.n	800f8ee <vPortEnterCritical+0x4a>
 800f8f0:	bf00      	nop
 800f8f2:	370c      	adds	r7, #12
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr
 800f8fc:	20000010 	.word	0x20000010
 800f900:	e000ed04 	.word	0xe000ed04

0800f904 <vPortExitCritical>:
 800f904:	b480      	push	{r7}
 800f906:	b083      	sub	sp, #12
 800f908:	af00      	add	r7, sp, #0
 800f90a:	4b12      	ldr	r3, [pc, #72]	; (800f954 <vPortExitCritical+0x50>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d10a      	bne.n	800f928 <vPortExitCritical+0x24>
 800f912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f916:	f383 8811 	msr	BASEPRI, r3
 800f91a:	f3bf 8f6f 	isb	sy
 800f91e:	f3bf 8f4f 	dsb	sy
 800f922:	607b      	str	r3, [r7, #4]
 800f924:	bf00      	nop
 800f926:	e7fe      	b.n	800f926 <vPortExitCritical+0x22>
 800f928:	4b0a      	ldr	r3, [pc, #40]	; (800f954 <vPortExitCritical+0x50>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	3b01      	subs	r3, #1
 800f92e:	4a09      	ldr	r2, [pc, #36]	; (800f954 <vPortExitCritical+0x50>)
 800f930:	6013      	str	r3, [r2, #0]
 800f932:	4b08      	ldr	r3, [pc, #32]	; (800f954 <vPortExitCritical+0x50>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d105      	bne.n	800f946 <vPortExitCritical+0x42>
 800f93a:	2300      	movs	r3, #0
 800f93c:	603b      	str	r3, [r7, #0]
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	f383 8811 	msr	BASEPRI, r3
 800f944:	bf00      	nop
 800f946:	bf00      	nop
 800f948:	370c      	adds	r7, #12
 800f94a:	46bd      	mov	sp, r7
 800f94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f950:	4770      	bx	lr
 800f952:	bf00      	nop
 800f954:	20000010 	.word	0x20000010
	...

0800f960 <PendSV_Handler>:
 800f960:	f3ef 8009 	mrs	r0, PSP
 800f964:	f3bf 8f6f 	isb	sy
 800f968:	4b15      	ldr	r3, [pc, #84]	; (800f9c0 <pxCurrentTCBConst>)
 800f96a:	681a      	ldr	r2, [r3, #0]
 800f96c:	f01e 0f10 	tst.w	lr, #16
 800f970:	bf08      	it	eq
 800f972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f97a:	6010      	str	r0, [r2, #0]
 800f97c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f980:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f984:	f380 8811 	msr	BASEPRI, r0
 800f988:	f3bf 8f4f 	dsb	sy
 800f98c:	f3bf 8f6f 	isb	sy
 800f990:	f7fe ffc2 	bl	800e918 <vTaskSwitchContext>
 800f994:	f04f 0000 	mov.w	r0, #0
 800f998:	f380 8811 	msr	BASEPRI, r0
 800f99c:	bc09      	pop	{r0, r3}
 800f99e:	6819      	ldr	r1, [r3, #0]
 800f9a0:	6808      	ldr	r0, [r1, #0]
 800f9a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a6:	f01e 0f10 	tst.w	lr, #16
 800f9aa:	bf08      	it	eq
 800f9ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f9b0:	f380 8809 	msr	PSP, r0
 800f9b4:	f3bf 8f6f 	isb	sy
 800f9b8:	4770      	bx	lr
 800f9ba:	bf00      	nop
 800f9bc:	f3af 8000 	nop.w

0800f9c0 <pxCurrentTCBConst>:
 800f9c0:	20002168 	.word	0x20002168
 800f9c4:	bf00      	nop
 800f9c6:	bf00      	nop

0800f9c8 <xPortSysTickHandler>:
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d2:	f383 8811 	msr	BASEPRI, r3
 800f9d6:	f3bf 8f6f 	isb	sy
 800f9da:	f3bf 8f4f 	dsb	sy
 800f9de:	607b      	str	r3, [r7, #4]
 800f9e0:	bf00      	nop
 800f9e2:	f7fe fedf 	bl	800e7a4 <xTaskIncrementTick>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d003      	beq.n	800f9f4 <xPortSysTickHandler+0x2c>
 800f9ec:	4b06      	ldr	r3, [pc, #24]	; (800fa08 <xPortSysTickHandler+0x40>)
 800f9ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9f2:	601a      	str	r2, [r3, #0]
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	603b      	str	r3, [r7, #0]
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	f383 8811 	msr	BASEPRI, r3
 800f9fe:	bf00      	nop
 800fa00:	bf00      	nop
 800fa02:	3708      	adds	r7, #8
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}
 800fa08:	e000ed04 	.word	0xe000ed04

0800fa0c <vPortSetupTimerInterrupt>:
 800fa0c:	b480      	push	{r7}
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	4b0b      	ldr	r3, [pc, #44]	; (800fa40 <vPortSetupTimerInterrupt+0x34>)
 800fa12:	2200      	movs	r2, #0
 800fa14:	601a      	str	r2, [r3, #0]
 800fa16:	4b0b      	ldr	r3, [pc, #44]	; (800fa44 <vPortSetupTimerInterrupt+0x38>)
 800fa18:	2200      	movs	r2, #0
 800fa1a:	601a      	str	r2, [r3, #0]
 800fa1c:	4b0a      	ldr	r3, [pc, #40]	; (800fa48 <vPortSetupTimerInterrupt+0x3c>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a0a      	ldr	r2, [pc, #40]	; (800fa4c <vPortSetupTimerInterrupt+0x40>)
 800fa22:	fba2 2303 	umull	r2, r3, r2, r3
 800fa26:	099b      	lsrs	r3, r3, #6
 800fa28:	4a09      	ldr	r2, [pc, #36]	; (800fa50 <vPortSetupTimerInterrupt+0x44>)
 800fa2a:	3b01      	subs	r3, #1
 800fa2c:	6013      	str	r3, [r2, #0]
 800fa2e:	4b04      	ldr	r3, [pc, #16]	; (800fa40 <vPortSetupTimerInterrupt+0x34>)
 800fa30:	2207      	movs	r2, #7
 800fa32:	601a      	str	r2, [r3, #0]
 800fa34:	bf00      	nop
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr
 800fa3e:	bf00      	nop
 800fa40:	e000e010 	.word	0xe000e010
 800fa44:	e000e018 	.word	0xe000e018
 800fa48:	20000004 	.word	0x20000004
 800fa4c:	10624dd3 	.word	0x10624dd3
 800fa50:	e000e014 	.word	0xe000e014

0800fa54 <vPortEnableVFP>:
 800fa54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fa64 <vPortEnableVFP+0x10>
 800fa58:	6801      	ldr	r1, [r0, #0]
 800fa5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fa5e:	6001      	str	r1, [r0, #0]
 800fa60:	4770      	bx	lr
 800fa62:	bf00      	nop
 800fa64:	e000ed88 	.word	0xe000ed88

0800fa68 <vPortValidateInterruptPriority>:
 800fa68:	b480      	push	{r7}
 800fa6a:	b085      	sub	sp, #20
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	f3ef 8305 	mrs	r3, IPSR
 800fa72:	60fb      	str	r3, [r7, #12]
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	2b0f      	cmp	r3, #15
 800fa78:	d914      	bls.n	800faa4 <vPortValidateInterruptPriority+0x3c>
 800fa7a:	4a17      	ldr	r2, [pc, #92]	; (800fad8 <vPortValidateInterruptPriority+0x70>)
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	4413      	add	r3, r2
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	72fb      	strb	r3, [r7, #11]
 800fa84:	4b15      	ldr	r3, [pc, #84]	; (800fadc <vPortValidateInterruptPriority+0x74>)
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	7afa      	ldrb	r2, [r7, #11]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d20a      	bcs.n	800faa4 <vPortValidateInterruptPriority+0x3c>
 800fa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa92:	f383 8811 	msr	BASEPRI, r3
 800fa96:	f3bf 8f6f 	isb	sy
 800fa9a:	f3bf 8f4f 	dsb	sy
 800fa9e:	607b      	str	r3, [r7, #4]
 800faa0:	bf00      	nop
 800faa2:	e7fe      	b.n	800faa2 <vPortValidateInterruptPriority+0x3a>
 800faa4:	4b0e      	ldr	r3, [pc, #56]	; (800fae0 <vPortValidateInterruptPriority+0x78>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800faac:	4b0d      	ldr	r3, [pc, #52]	; (800fae4 <vPortValidateInterruptPriority+0x7c>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d90a      	bls.n	800faca <vPortValidateInterruptPriority+0x62>
 800fab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab8:	f383 8811 	msr	BASEPRI, r3
 800fabc:	f3bf 8f6f 	isb	sy
 800fac0:	f3bf 8f4f 	dsb	sy
 800fac4:	603b      	str	r3, [r7, #0]
 800fac6:	bf00      	nop
 800fac8:	e7fe      	b.n	800fac8 <vPortValidateInterruptPriority+0x60>
 800faca:	bf00      	nop
 800facc:	3714      	adds	r7, #20
 800face:	46bd      	mov	sp, r7
 800fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad4:	4770      	bx	lr
 800fad6:	bf00      	nop
 800fad8:	e000e3f0 	.word	0xe000e3f0
 800fadc:	20002794 	.word	0x20002794
 800fae0:	e000ed0c 	.word	0xe000ed0c
 800fae4:	20002798 	.word	0x20002798

0800fae8 <pvPortMalloc>:
 800fae8:	b580      	push	{r7, lr}
 800faea:	b08a      	sub	sp, #40	; 0x28
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	2300      	movs	r3, #0
 800faf2:	61fb      	str	r3, [r7, #28]
 800faf4:	f7fe fd9a 	bl	800e62c <vTaskSuspendAll>
 800faf8:	4b5b      	ldr	r3, [pc, #364]	; (800fc68 <pvPortMalloc+0x180>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d101      	bne.n	800fb04 <pvPortMalloc+0x1c>
 800fb00:	f000 f920 	bl	800fd44 <prvHeapInit>
 800fb04:	4b59      	ldr	r3, [pc, #356]	; (800fc6c <pvPortMalloc+0x184>)
 800fb06:	681a      	ldr	r2, [r3, #0]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	4013      	ands	r3, r2
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f040 8093 	bne.w	800fc38 <pvPortMalloc+0x150>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d01d      	beq.n	800fb54 <pvPortMalloc+0x6c>
 800fb18:	2208      	movs	r2, #8
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	4413      	add	r3, r2
 800fb1e:	607b      	str	r3, [r7, #4]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f003 0307 	and.w	r3, r3, #7
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d014      	beq.n	800fb54 <pvPortMalloc+0x6c>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f023 0307 	bic.w	r3, r3, #7
 800fb30:	3308      	adds	r3, #8
 800fb32:	607b      	str	r3, [r7, #4]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f003 0307 	and.w	r3, r3, #7
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d00a      	beq.n	800fb54 <pvPortMalloc+0x6c>
 800fb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb42:	f383 8811 	msr	BASEPRI, r3
 800fb46:	f3bf 8f6f 	isb	sy
 800fb4a:	f3bf 8f4f 	dsb	sy
 800fb4e:	617b      	str	r3, [r7, #20]
 800fb50:	bf00      	nop
 800fb52:	e7fe      	b.n	800fb52 <pvPortMalloc+0x6a>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d06e      	beq.n	800fc38 <pvPortMalloc+0x150>
 800fb5a:	4b45      	ldr	r3, [pc, #276]	; (800fc70 <pvPortMalloc+0x188>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	687a      	ldr	r2, [r7, #4]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d869      	bhi.n	800fc38 <pvPortMalloc+0x150>
 800fb64:	4b43      	ldr	r3, [pc, #268]	; (800fc74 <pvPortMalloc+0x18c>)
 800fb66:	623b      	str	r3, [r7, #32]
 800fb68:	4b42      	ldr	r3, [pc, #264]	; (800fc74 <pvPortMalloc+0x18c>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	627b      	str	r3, [r7, #36]	; 0x24
 800fb6e:	e004      	b.n	800fb7a <pvPortMalloc+0x92>
 800fb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb72:	623b      	str	r3, [r7, #32]
 800fb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	627b      	str	r3, [r7, #36]	; 0x24
 800fb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	687a      	ldr	r2, [r7, #4]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d903      	bls.n	800fb8c <pvPortMalloc+0xa4>
 800fb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d1f1      	bne.n	800fb70 <pvPortMalloc+0x88>
 800fb8c:	4b36      	ldr	r3, [pc, #216]	; (800fc68 <pvPortMalloc+0x180>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d050      	beq.n	800fc38 <pvPortMalloc+0x150>
 800fb96:	6a3b      	ldr	r3, [r7, #32]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2208      	movs	r2, #8
 800fb9c:	4413      	add	r3, r2
 800fb9e:	61fb      	str	r3, [r7, #28]
 800fba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba2:	681a      	ldr	r2, [r3, #0]
 800fba4:	6a3b      	ldr	r3, [r7, #32]
 800fba6:	601a      	str	r2, [r3, #0]
 800fba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbaa:	685a      	ldr	r2, [r3, #4]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	1ad2      	subs	r2, r2, r3
 800fbb0:	2308      	movs	r3, #8
 800fbb2:	005b      	lsls	r3, r3, #1
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d91f      	bls.n	800fbf8 <pvPortMalloc+0x110>
 800fbb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	4413      	add	r3, r2
 800fbbe:	61bb      	str	r3, [r7, #24]
 800fbc0:	69bb      	ldr	r3, [r7, #24]
 800fbc2:	f003 0307 	and.w	r3, r3, #7
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d00a      	beq.n	800fbe0 <pvPortMalloc+0xf8>
 800fbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbce:	f383 8811 	msr	BASEPRI, r3
 800fbd2:	f3bf 8f6f 	isb	sy
 800fbd6:	f3bf 8f4f 	dsb	sy
 800fbda:	613b      	str	r3, [r7, #16]
 800fbdc:	bf00      	nop
 800fbde:	e7fe      	b.n	800fbde <pvPortMalloc+0xf6>
 800fbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe2:	685a      	ldr	r2, [r3, #4]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	1ad2      	subs	r2, r2, r3
 800fbe8:	69bb      	ldr	r3, [r7, #24]
 800fbea:	605a      	str	r2, [r3, #4]
 800fbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	605a      	str	r2, [r3, #4]
 800fbf2:	69b8      	ldr	r0, [r7, #24]
 800fbf4:	f000 f908 	bl	800fe08 <prvInsertBlockIntoFreeList>
 800fbf8:	4b1d      	ldr	r3, [pc, #116]	; (800fc70 <pvPortMalloc+0x188>)
 800fbfa:	681a      	ldr	r2, [r3, #0]
 800fbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	1ad3      	subs	r3, r2, r3
 800fc02:	4a1b      	ldr	r2, [pc, #108]	; (800fc70 <pvPortMalloc+0x188>)
 800fc04:	6013      	str	r3, [r2, #0]
 800fc06:	4b1a      	ldr	r3, [pc, #104]	; (800fc70 <pvPortMalloc+0x188>)
 800fc08:	681a      	ldr	r2, [r3, #0]
 800fc0a:	4b1b      	ldr	r3, [pc, #108]	; (800fc78 <pvPortMalloc+0x190>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d203      	bcs.n	800fc1a <pvPortMalloc+0x132>
 800fc12:	4b17      	ldr	r3, [pc, #92]	; (800fc70 <pvPortMalloc+0x188>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	4a18      	ldr	r2, [pc, #96]	; (800fc78 <pvPortMalloc+0x190>)
 800fc18:	6013      	str	r3, [r2, #0]
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1c:	685a      	ldr	r2, [r3, #4]
 800fc1e:	4b13      	ldr	r3, [pc, #76]	; (800fc6c <pvPortMalloc+0x184>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	431a      	orrs	r2, r3
 800fc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc26:	605a      	str	r2, [r3, #4]
 800fc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	601a      	str	r2, [r3, #0]
 800fc2e:	4b13      	ldr	r3, [pc, #76]	; (800fc7c <pvPortMalloc+0x194>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	3301      	adds	r3, #1
 800fc34:	4a11      	ldr	r2, [pc, #68]	; (800fc7c <pvPortMalloc+0x194>)
 800fc36:	6013      	str	r3, [r2, #0]
 800fc38:	f7fe fd06 	bl	800e648 <xTaskResumeAll>
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	f003 0307 	and.w	r3, r3, #7
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d00a      	beq.n	800fc5c <pvPortMalloc+0x174>
 800fc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc4a:	f383 8811 	msr	BASEPRI, r3
 800fc4e:	f3bf 8f6f 	isb	sy
 800fc52:	f3bf 8f4f 	dsb	sy
 800fc56:	60fb      	str	r3, [r7, #12]
 800fc58:	bf00      	nop
 800fc5a:	e7fe      	b.n	800fc5a <pvPortMalloc+0x172>
 800fc5c:	69fb      	ldr	r3, [r7, #28]
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3728      	adds	r7, #40	; 0x28
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}
 800fc66:	bf00      	nop
 800fc68:	200063a4 	.word	0x200063a4
 800fc6c:	200063b8 	.word	0x200063b8
 800fc70:	200063a8 	.word	0x200063a8
 800fc74:	2000639c 	.word	0x2000639c
 800fc78:	200063ac 	.word	0x200063ac
 800fc7c:	200063b0 	.word	0x200063b0

0800fc80 <vPortFree>:
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b086      	sub	sp, #24
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	617b      	str	r3, [r7, #20]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d04d      	beq.n	800fd2e <vPortFree+0xae>
 800fc92:	2308      	movs	r3, #8
 800fc94:	425b      	negs	r3, r3
 800fc96:	697a      	ldr	r2, [r7, #20]
 800fc98:	4413      	add	r3, r2
 800fc9a:	617b      	str	r3, [r7, #20]
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	613b      	str	r3, [r7, #16]
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	685a      	ldr	r2, [r3, #4]
 800fca4:	4b24      	ldr	r3, [pc, #144]	; (800fd38 <vPortFree+0xb8>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	4013      	ands	r3, r2
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d10a      	bne.n	800fcc4 <vPortFree+0x44>
 800fcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb2:	f383 8811 	msr	BASEPRI, r3
 800fcb6:	f3bf 8f6f 	isb	sy
 800fcba:	f3bf 8f4f 	dsb	sy
 800fcbe:	60fb      	str	r3, [r7, #12]
 800fcc0:	bf00      	nop
 800fcc2:	e7fe      	b.n	800fcc2 <vPortFree+0x42>
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d00a      	beq.n	800fce2 <vPortFree+0x62>
 800fccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd0:	f383 8811 	msr	BASEPRI, r3
 800fcd4:	f3bf 8f6f 	isb	sy
 800fcd8:	f3bf 8f4f 	dsb	sy
 800fcdc:	60bb      	str	r3, [r7, #8]
 800fcde:	bf00      	nop
 800fce0:	e7fe      	b.n	800fce0 <vPortFree+0x60>
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	685a      	ldr	r2, [r3, #4]
 800fce6:	4b14      	ldr	r3, [pc, #80]	; (800fd38 <vPortFree+0xb8>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4013      	ands	r3, r2
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d01e      	beq.n	800fd2e <vPortFree+0xae>
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d11a      	bne.n	800fd2e <vPortFree+0xae>
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	685a      	ldr	r2, [r3, #4]
 800fcfc:	4b0e      	ldr	r3, [pc, #56]	; (800fd38 <vPortFree+0xb8>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	43db      	mvns	r3, r3
 800fd02:	401a      	ands	r2, r3
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	605a      	str	r2, [r3, #4]
 800fd08:	f7fe fc90 	bl	800e62c <vTaskSuspendAll>
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	685a      	ldr	r2, [r3, #4]
 800fd10:	4b0a      	ldr	r3, [pc, #40]	; (800fd3c <vPortFree+0xbc>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	4413      	add	r3, r2
 800fd16:	4a09      	ldr	r2, [pc, #36]	; (800fd3c <vPortFree+0xbc>)
 800fd18:	6013      	str	r3, [r2, #0]
 800fd1a:	6938      	ldr	r0, [r7, #16]
 800fd1c:	f000 f874 	bl	800fe08 <prvInsertBlockIntoFreeList>
 800fd20:	4b07      	ldr	r3, [pc, #28]	; (800fd40 <vPortFree+0xc0>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	3301      	adds	r3, #1
 800fd26:	4a06      	ldr	r2, [pc, #24]	; (800fd40 <vPortFree+0xc0>)
 800fd28:	6013      	str	r3, [r2, #0]
 800fd2a:	f7fe fc8d 	bl	800e648 <xTaskResumeAll>
 800fd2e:	bf00      	nop
 800fd30:	3718      	adds	r7, #24
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
 800fd36:	bf00      	nop
 800fd38:	200063b8 	.word	0x200063b8
 800fd3c:	200063a8 	.word	0x200063a8
 800fd40:	200063b4 	.word	0x200063b4

0800fd44 <prvHeapInit>:
 800fd44:	b480      	push	{r7}
 800fd46:	b085      	sub	sp, #20
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fd4e:	60bb      	str	r3, [r7, #8]
 800fd50:	4b27      	ldr	r3, [pc, #156]	; (800fdf0 <prvHeapInit+0xac>)
 800fd52:	60fb      	str	r3, [r7, #12]
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	f003 0307 	and.w	r3, r3, #7
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d00c      	beq.n	800fd78 <prvHeapInit+0x34>
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	3307      	adds	r3, #7
 800fd62:	60fb      	str	r3, [r7, #12]
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	f023 0307 	bic.w	r3, r3, #7
 800fd6a:	60fb      	str	r3, [r7, #12]
 800fd6c:	68ba      	ldr	r2, [r7, #8]
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	1ad3      	subs	r3, r2, r3
 800fd72:	4a1f      	ldr	r2, [pc, #124]	; (800fdf0 <prvHeapInit+0xac>)
 800fd74:	4413      	add	r3, r2
 800fd76:	60bb      	str	r3, [r7, #8]
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	607b      	str	r3, [r7, #4]
 800fd7c:	4a1d      	ldr	r2, [pc, #116]	; (800fdf4 <prvHeapInit+0xb0>)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6013      	str	r3, [r2, #0]
 800fd82:	4b1c      	ldr	r3, [pc, #112]	; (800fdf4 <prvHeapInit+0xb0>)
 800fd84:	2200      	movs	r2, #0
 800fd86:	605a      	str	r2, [r3, #4]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	68ba      	ldr	r2, [r7, #8]
 800fd8c:	4413      	add	r3, r2
 800fd8e:	60fb      	str	r3, [r7, #12]
 800fd90:	2208      	movs	r2, #8
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	1a9b      	subs	r3, r3, r2
 800fd96:	60fb      	str	r3, [r7, #12]
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f023 0307 	bic.w	r3, r3, #7
 800fd9e:	60fb      	str	r3, [r7, #12]
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	4a15      	ldr	r2, [pc, #84]	; (800fdf8 <prvHeapInit+0xb4>)
 800fda4:	6013      	str	r3, [r2, #0]
 800fda6:	4b14      	ldr	r3, [pc, #80]	; (800fdf8 <prvHeapInit+0xb4>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	605a      	str	r2, [r3, #4]
 800fdae:	4b12      	ldr	r3, [pc, #72]	; (800fdf8 <prvHeapInit+0xb4>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	601a      	str	r2, [r3, #0]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	603b      	str	r3, [r7, #0]
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	68fa      	ldr	r2, [r7, #12]
 800fdbe:	1ad2      	subs	r2, r2, r3
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	605a      	str	r2, [r3, #4]
 800fdc4:	4b0c      	ldr	r3, [pc, #48]	; (800fdf8 <prvHeapInit+0xb4>)
 800fdc6:	681a      	ldr	r2, [r3, #0]
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	601a      	str	r2, [r3, #0]
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	685b      	ldr	r3, [r3, #4]
 800fdd0:	4a0a      	ldr	r2, [pc, #40]	; (800fdfc <prvHeapInit+0xb8>)
 800fdd2:	6013      	str	r3, [r2, #0]
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	4a09      	ldr	r2, [pc, #36]	; (800fe00 <prvHeapInit+0xbc>)
 800fdda:	6013      	str	r3, [r2, #0]
 800fddc:	4b09      	ldr	r3, [pc, #36]	; (800fe04 <prvHeapInit+0xc0>)
 800fdde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fde2:	601a      	str	r2, [r3, #0]
 800fde4:	bf00      	nop
 800fde6:	3714      	adds	r7, #20
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr
 800fdf0:	2000279c 	.word	0x2000279c
 800fdf4:	2000639c 	.word	0x2000639c
 800fdf8:	200063a4 	.word	0x200063a4
 800fdfc:	200063ac 	.word	0x200063ac
 800fe00:	200063a8 	.word	0x200063a8
 800fe04:	200063b8 	.word	0x200063b8

0800fe08 <prvInsertBlockIntoFreeList>:
 800fe08:	b480      	push	{r7}
 800fe0a:	b085      	sub	sp, #20
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	4b28      	ldr	r3, [pc, #160]	; (800feb4 <prvInsertBlockIntoFreeList+0xac>)
 800fe12:	60fb      	str	r3, [r7, #12]
 800fe14:	e002      	b.n	800fe1c <prvInsertBlockIntoFreeList+0x14>
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	60fb      	str	r3, [r7, #12]
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	687a      	ldr	r2, [r7, #4]
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d8f7      	bhi.n	800fe16 <prvInsertBlockIntoFreeList+0xe>
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	60bb      	str	r3, [r7, #8]
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	685b      	ldr	r3, [r3, #4]
 800fe2e:	68ba      	ldr	r2, [r7, #8]
 800fe30:	4413      	add	r3, r2
 800fe32:	687a      	ldr	r2, [r7, #4]
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d108      	bne.n	800fe4a <prvInsertBlockIntoFreeList+0x42>
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	685a      	ldr	r2, [r3, #4]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	441a      	add	r2, r3
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	605a      	str	r2, [r3, #4]
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	607b      	str	r3, [r7, #4]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	60bb      	str	r3, [r7, #8]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	685b      	ldr	r3, [r3, #4]
 800fe52:	68ba      	ldr	r2, [r7, #8]
 800fe54:	441a      	add	r2, r3
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	d118      	bne.n	800fe90 <prvInsertBlockIntoFreeList+0x88>
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	681a      	ldr	r2, [r3, #0]
 800fe62:	4b15      	ldr	r3, [pc, #84]	; (800feb8 <prvInsertBlockIntoFreeList+0xb0>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d00d      	beq.n	800fe86 <prvInsertBlockIntoFreeList+0x7e>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	685a      	ldr	r2, [r3, #4]
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	441a      	add	r2, r3
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	605a      	str	r2, [r3, #4]
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	681a      	ldr	r2, [r3, #0]
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	601a      	str	r2, [r3, #0]
 800fe84:	e008      	b.n	800fe98 <prvInsertBlockIntoFreeList+0x90>
 800fe86:	4b0c      	ldr	r3, [pc, #48]	; (800feb8 <prvInsertBlockIntoFreeList+0xb0>)
 800fe88:	681a      	ldr	r2, [r3, #0]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	601a      	str	r2, [r3, #0]
 800fe8e:	e003      	b.n	800fe98 <prvInsertBlockIntoFreeList+0x90>
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	681a      	ldr	r2, [r3, #0]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	601a      	str	r2, [r3, #0]
 800fe98:	68fa      	ldr	r2, [r7, #12]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	d002      	beq.n	800fea6 <prvInsertBlockIntoFreeList+0x9e>
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	687a      	ldr	r2, [r7, #4]
 800fea4:	601a      	str	r2, [r3, #0]
 800fea6:	bf00      	nop
 800fea8:	3714      	adds	r7, #20
 800feaa:	46bd      	mov	sp, r7
 800feac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop
 800feb4:	2000639c 	.word	0x2000639c
 800feb8:	200063a4 	.word	0x200063a4

0800febc <__errno>:
 800febc:	4b01      	ldr	r3, [pc, #4]	; (800fec4 <__errno+0x8>)
 800febe:	6818      	ldr	r0, [r3, #0]
 800fec0:	4770      	bx	lr
 800fec2:	bf00      	nop
 800fec4:	20000014 	.word	0x20000014

0800fec8 <__libc_init_array>:
 800fec8:	b570      	push	{r4, r5, r6, lr}
 800feca:	4d0d      	ldr	r5, [pc, #52]	; (800ff00 <__libc_init_array+0x38>)
 800fecc:	4c0d      	ldr	r4, [pc, #52]	; (800ff04 <__libc_init_array+0x3c>)
 800fece:	1b64      	subs	r4, r4, r5
 800fed0:	10a4      	asrs	r4, r4, #2
 800fed2:	2600      	movs	r6, #0
 800fed4:	42a6      	cmp	r6, r4
 800fed6:	d109      	bne.n	800feec <__libc_init_array+0x24>
 800fed8:	4d0b      	ldr	r5, [pc, #44]	; (800ff08 <__libc_init_array+0x40>)
 800feda:	4c0c      	ldr	r4, [pc, #48]	; (800ff0c <__libc_init_array+0x44>)
 800fedc:	f004 fc90 	bl	8014800 <_init>
 800fee0:	1b64      	subs	r4, r4, r5
 800fee2:	10a4      	asrs	r4, r4, #2
 800fee4:	2600      	movs	r6, #0
 800fee6:	42a6      	cmp	r6, r4
 800fee8:	d105      	bne.n	800fef6 <__libc_init_array+0x2e>
 800feea:	bd70      	pop	{r4, r5, r6, pc}
 800feec:	f855 3b04 	ldr.w	r3, [r5], #4
 800fef0:	4798      	blx	r3
 800fef2:	3601      	adds	r6, #1
 800fef4:	e7ee      	b.n	800fed4 <__libc_init_array+0xc>
 800fef6:	f855 3b04 	ldr.w	r3, [r5], #4
 800fefa:	4798      	blx	r3
 800fefc:	3601      	adds	r6, #1
 800fefe:	e7f2      	b.n	800fee6 <__libc_init_array+0x1e>
 800ff00:	080158bc 	.word	0x080158bc
 800ff04:	080158bc 	.word	0x080158bc
 800ff08:	080158bc 	.word	0x080158bc
 800ff0c:	080158c0 	.word	0x080158c0

0800ff10 <memcpy>:
 800ff10:	440a      	add	r2, r1
 800ff12:	4291      	cmp	r1, r2
 800ff14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ff18:	d100      	bne.n	800ff1c <memcpy+0xc>
 800ff1a:	4770      	bx	lr
 800ff1c:	b510      	push	{r4, lr}
 800ff1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff26:	4291      	cmp	r1, r2
 800ff28:	d1f9      	bne.n	800ff1e <memcpy+0xe>
 800ff2a:	bd10      	pop	{r4, pc}

0800ff2c <memset>:
 800ff2c:	4402      	add	r2, r0
 800ff2e:	4603      	mov	r3, r0
 800ff30:	4293      	cmp	r3, r2
 800ff32:	d100      	bne.n	800ff36 <memset+0xa>
 800ff34:	4770      	bx	lr
 800ff36:	f803 1b01 	strb.w	r1, [r3], #1
 800ff3a:	e7f9      	b.n	800ff30 <memset+0x4>

0800ff3c <__cvt>:
 800ff3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff40:	ec55 4b10 	vmov	r4, r5, d0
 800ff44:	2d00      	cmp	r5, #0
 800ff46:	460e      	mov	r6, r1
 800ff48:	4619      	mov	r1, r3
 800ff4a:	462b      	mov	r3, r5
 800ff4c:	bfbb      	ittet	lt
 800ff4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ff52:	461d      	movlt	r5, r3
 800ff54:	2300      	movge	r3, #0
 800ff56:	232d      	movlt	r3, #45	; 0x2d
 800ff58:	700b      	strb	r3, [r1, #0]
 800ff5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ff60:	4691      	mov	r9, r2
 800ff62:	f023 0820 	bic.w	r8, r3, #32
 800ff66:	bfbc      	itt	lt
 800ff68:	4622      	movlt	r2, r4
 800ff6a:	4614      	movlt	r4, r2
 800ff6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ff70:	d005      	beq.n	800ff7e <__cvt+0x42>
 800ff72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ff76:	d100      	bne.n	800ff7a <__cvt+0x3e>
 800ff78:	3601      	adds	r6, #1
 800ff7a:	2102      	movs	r1, #2
 800ff7c:	e000      	b.n	800ff80 <__cvt+0x44>
 800ff7e:	2103      	movs	r1, #3
 800ff80:	ab03      	add	r3, sp, #12
 800ff82:	9301      	str	r3, [sp, #4]
 800ff84:	ab02      	add	r3, sp, #8
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	ec45 4b10 	vmov	d0, r4, r5
 800ff8c:	4653      	mov	r3, sl
 800ff8e:	4632      	mov	r2, r6
 800ff90:	f001 fdae 	bl	8011af0 <_dtoa_r>
 800ff94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ff98:	4607      	mov	r7, r0
 800ff9a:	d102      	bne.n	800ffa2 <__cvt+0x66>
 800ff9c:	f019 0f01 	tst.w	r9, #1
 800ffa0:	d022      	beq.n	800ffe8 <__cvt+0xac>
 800ffa2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ffa6:	eb07 0906 	add.w	r9, r7, r6
 800ffaa:	d110      	bne.n	800ffce <__cvt+0x92>
 800ffac:	783b      	ldrb	r3, [r7, #0]
 800ffae:	2b30      	cmp	r3, #48	; 0x30
 800ffb0:	d10a      	bne.n	800ffc8 <__cvt+0x8c>
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	4629      	mov	r1, r5
 800ffba:	f7f0 fd85 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffbe:	b918      	cbnz	r0, 800ffc8 <__cvt+0x8c>
 800ffc0:	f1c6 0601 	rsb	r6, r6, #1
 800ffc4:	f8ca 6000 	str.w	r6, [sl]
 800ffc8:	f8da 3000 	ldr.w	r3, [sl]
 800ffcc:	4499      	add	r9, r3
 800ffce:	2200      	movs	r2, #0
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	4629      	mov	r1, r5
 800ffd6:	f7f0 fd77 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffda:	b108      	cbz	r0, 800ffe0 <__cvt+0xa4>
 800ffdc:	f8cd 900c 	str.w	r9, [sp, #12]
 800ffe0:	2230      	movs	r2, #48	; 0x30
 800ffe2:	9b03      	ldr	r3, [sp, #12]
 800ffe4:	454b      	cmp	r3, r9
 800ffe6:	d307      	bcc.n	800fff8 <__cvt+0xbc>
 800ffe8:	9b03      	ldr	r3, [sp, #12]
 800ffea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffec:	1bdb      	subs	r3, r3, r7
 800ffee:	4638      	mov	r0, r7
 800fff0:	6013      	str	r3, [r2, #0]
 800fff2:	b004      	add	sp, #16
 800fff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fff8:	1c59      	adds	r1, r3, #1
 800fffa:	9103      	str	r1, [sp, #12]
 800fffc:	701a      	strb	r2, [r3, #0]
 800fffe:	e7f0      	b.n	800ffe2 <__cvt+0xa6>

08010000 <__exponent>:
 8010000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010002:	4603      	mov	r3, r0
 8010004:	2900      	cmp	r1, #0
 8010006:	bfb8      	it	lt
 8010008:	4249      	neglt	r1, r1
 801000a:	f803 2b02 	strb.w	r2, [r3], #2
 801000e:	bfb4      	ite	lt
 8010010:	222d      	movlt	r2, #45	; 0x2d
 8010012:	222b      	movge	r2, #43	; 0x2b
 8010014:	2909      	cmp	r1, #9
 8010016:	7042      	strb	r2, [r0, #1]
 8010018:	dd2a      	ble.n	8010070 <__exponent+0x70>
 801001a:	f10d 0407 	add.w	r4, sp, #7
 801001e:	46a4      	mov	ip, r4
 8010020:	270a      	movs	r7, #10
 8010022:	46a6      	mov	lr, r4
 8010024:	460a      	mov	r2, r1
 8010026:	fb91 f6f7 	sdiv	r6, r1, r7
 801002a:	fb07 1516 	mls	r5, r7, r6, r1
 801002e:	3530      	adds	r5, #48	; 0x30
 8010030:	2a63      	cmp	r2, #99	; 0x63
 8010032:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8010036:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801003a:	4631      	mov	r1, r6
 801003c:	dcf1      	bgt.n	8010022 <__exponent+0x22>
 801003e:	3130      	adds	r1, #48	; 0x30
 8010040:	f1ae 0502 	sub.w	r5, lr, #2
 8010044:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010048:	1c44      	adds	r4, r0, #1
 801004a:	4629      	mov	r1, r5
 801004c:	4561      	cmp	r1, ip
 801004e:	d30a      	bcc.n	8010066 <__exponent+0x66>
 8010050:	f10d 0209 	add.w	r2, sp, #9
 8010054:	eba2 020e 	sub.w	r2, r2, lr
 8010058:	4565      	cmp	r5, ip
 801005a:	bf88      	it	hi
 801005c:	2200      	movhi	r2, #0
 801005e:	4413      	add	r3, r2
 8010060:	1a18      	subs	r0, r3, r0
 8010062:	b003      	add	sp, #12
 8010064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010066:	f811 2b01 	ldrb.w	r2, [r1], #1
 801006a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801006e:	e7ed      	b.n	801004c <__exponent+0x4c>
 8010070:	2330      	movs	r3, #48	; 0x30
 8010072:	3130      	adds	r1, #48	; 0x30
 8010074:	7083      	strb	r3, [r0, #2]
 8010076:	70c1      	strb	r1, [r0, #3]
 8010078:	1d03      	adds	r3, r0, #4
 801007a:	e7f1      	b.n	8010060 <__exponent+0x60>

0801007c <_printf_float>:
 801007c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010080:	ed2d 8b02 	vpush	{d8}
 8010084:	b08d      	sub	sp, #52	; 0x34
 8010086:	460c      	mov	r4, r1
 8010088:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801008c:	4616      	mov	r6, r2
 801008e:	461f      	mov	r7, r3
 8010090:	4605      	mov	r5, r0
 8010092:	f002 fe8b 	bl	8012dac <_localeconv_r>
 8010096:	f8d0 a000 	ldr.w	sl, [r0]
 801009a:	4650      	mov	r0, sl
 801009c:	f7f0 f898 	bl	80001d0 <strlen>
 80100a0:	2300      	movs	r3, #0
 80100a2:	930a      	str	r3, [sp, #40]	; 0x28
 80100a4:	6823      	ldr	r3, [r4, #0]
 80100a6:	9305      	str	r3, [sp, #20]
 80100a8:	f8d8 3000 	ldr.w	r3, [r8]
 80100ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80100b0:	3307      	adds	r3, #7
 80100b2:	f023 0307 	bic.w	r3, r3, #7
 80100b6:	f103 0208 	add.w	r2, r3, #8
 80100ba:	f8c8 2000 	str.w	r2, [r8]
 80100be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80100c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80100ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80100ce:	9307      	str	r3, [sp, #28]
 80100d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80100d4:	ee08 0a10 	vmov	s16, r0
 80100d8:	4b9f      	ldr	r3, [pc, #636]	; (8010358 <_printf_float+0x2dc>)
 80100da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100e2:	f7f0 fd23 	bl	8000b2c <__aeabi_dcmpun>
 80100e6:	bb88      	cbnz	r0, 801014c <_printf_float+0xd0>
 80100e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100ec:	4b9a      	ldr	r3, [pc, #616]	; (8010358 <_printf_float+0x2dc>)
 80100ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100f2:	f7f0 fcfd 	bl	8000af0 <__aeabi_dcmple>
 80100f6:	bb48      	cbnz	r0, 801014c <_printf_float+0xd0>
 80100f8:	2200      	movs	r2, #0
 80100fa:	2300      	movs	r3, #0
 80100fc:	4640      	mov	r0, r8
 80100fe:	4649      	mov	r1, r9
 8010100:	f7f0 fcec 	bl	8000adc <__aeabi_dcmplt>
 8010104:	b110      	cbz	r0, 801010c <_printf_float+0x90>
 8010106:	232d      	movs	r3, #45	; 0x2d
 8010108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801010c:	4b93      	ldr	r3, [pc, #588]	; (801035c <_printf_float+0x2e0>)
 801010e:	4894      	ldr	r0, [pc, #592]	; (8010360 <_printf_float+0x2e4>)
 8010110:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010114:	bf94      	ite	ls
 8010116:	4698      	movls	r8, r3
 8010118:	4680      	movhi	r8, r0
 801011a:	2303      	movs	r3, #3
 801011c:	6123      	str	r3, [r4, #16]
 801011e:	9b05      	ldr	r3, [sp, #20]
 8010120:	f023 0204 	bic.w	r2, r3, #4
 8010124:	6022      	str	r2, [r4, #0]
 8010126:	f04f 0900 	mov.w	r9, #0
 801012a:	9700      	str	r7, [sp, #0]
 801012c:	4633      	mov	r3, r6
 801012e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010130:	4621      	mov	r1, r4
 8010132:	4628      	mov	r0, r5
 8010134:	f000 f9d8 	bl	80104e8 <_printf_common>
 8010138:	3001      	adds	r0, #1
 801013a:	f040 8090 	bne.w	801025e <_printf_float+0x1e2>
 801013e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010142:	b00d      	add	sp, #52	; 0x34
 8010144:	ecbd 8b02 	vpop	{d8}
 8010148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801014c:	4642      	mov	r2, r8
 801014e:	464b      	mov	r3, r9
 8010150:	4640      	mov	r0, r8
 8010152:	4649      	mov	r1, r9
 8010154:	f7f0 fcea 	bl	8000b2c <__aeabi_dcmpun>
 8010158:	b140      	cbz	r0, 801016c <_printf_float+0xf0>
 801015a:	464b      	mov	r3, r9
 801015c:	2b00      	cmp	r3, #0
 801015e:	bfbc      	itt	lt
 8010160:	232d      	movlt	r3, #45	; 0x2d
 8010162:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010166:	487f      	ldr	r0, [pc, #508]	; (8010364 <_printf_float+0x2e8>)
 8010168:	4b7f      	ldr	r3, [pc, #508]	; (8010368 <_printf_float+0x2ec>)
 801016a:	e7d1      	b.n	8010110 <_printf_float+0x94>
 801016c:	6863      	ldr	r3, [r4, #4]
 801016e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010172:	9206      	str	r2, [sp, #24]
 8010174:	1c5a      	adds	r2, r3, #1
 8010176:	d13f      	bne.n	80101f8 <_printf_float+0x17c>
 8010178:	2306      	movs	r3, #6
 801017a:	6063      	str	r3, [r4, #4]
 801017c:	9b05      	ldr	r3, [sp, #20]
 801017e:	6861      	ldr	r1, [r4, #4]
 8010180:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010184:	2300      	movs	r3, #0
 8010186:	9303      	str	r3, [sp, #12]
 8010188:	ab0a      	add	r3, sp, #40	; 0x28
 801018a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801018e:	ab09      	add	r3, sp, #36	; 0x24
 8010190:	ec49 8b10 	vmov	d0, r8, r9
 8010194:	9300      	str	r3, [sp, #0]
 8010196:	6022      	str	r2, [r4, #0]
 8010198:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801019c:	4628      	mov	r0, r5
 801019e:	f7ff fecd 	bl	800ff3c <__cvt>
 80101a2:	9b06      	ldr	r3, [sp, #24]
 80101a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101a6:	2b47      	cmp	r3, #71	; 0x47
 80101a8:	4680      	mov	r8, r0
 80101aa:	d108      	bne.n	80101be <_printf_float+0x142>
 80101ac:	1cc8      	adds	r0, r1, #3
 80101ae:	db02      	blt.n	80101b6 <_printf_float+0x13a>
 80101b0:	6863      	ldr	r3, [r4, #4]
 80101b2:	4299      	cmp	r1, r3
 80101b4:	dd41      	ble.n	801023a <_printf_float+0x1be>
 80101b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80101ba:	fa5f fb8b 	uxtb.w	fp, fp
 80101be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80101c2:	d820      	bhi.n	8010206 <_printf_float+0x18a>
 80101c4:	3901      	subs	r1, #1
 80101c6:	465a      	mov	r2, fp
 80101c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80101cc:	9109      	str	r1, [sp, #36]	; 0x24
 80101ce:	f7ff ff17 	bl	8010000 <__exponent>
 80101d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101d4:	1813      	adds	r3, r2, r0
 80101d6:	2a01      	cmp	r2, #1
 80101d8:	4681      	mov	r9, r0
 80101da:	6123      	str	r3, [r4, #16]
 80101dc:	dc02      	bgt.n	80101e4 <_printf_float+0x168>
 80101de:	6822      	ldr	r2, [r4, #0]
 80101e0:	07d2      	lsls	r2, r2, #31
 80101e2:	d501      	bpl.n	80101e8 <_printf_float+0x16c>
 80101e4:	3301      	adds	r3, #1
 80101e6:	6123      	str	r3, [r4, #16]
 80101e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d09c      	beq.n	801012a <_printf_float+0xae>
 80101f0:	232d      	movs	r3, #45	; 0x2d
 80101f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101f6:	e798      	b.n	801012a <_printf_float+0xae>
 80101f8:	9a06      	ldr	r2, [sp, #24]
 80101fa:	2a47      	cmp	r2, #71	; 0x47
 80101fc:	d1be      	bne.n	801017c <_printf_float+0x100>
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d1bc      	bne.n	801017c <_printf_float+0x100>
 8010202:	2301      	movs	r3, #1
 8010204:	e7b9      	b.n	801017a <_printf_float+0xfe>
 8010206:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801020a:	d118      	bne.n	801023e <_printf_float+0x1c2>
 801020c:	2900      	cmp	r1, #0
 801020e:	6863      	ldr	r3, [r4, #4]
 8010210:	dd0b      	ble.n	801022a <_printf_float+0x1ae>
 8010212:	6121      	str	r1, [r4, #16]
 8010214:	b913      	cbnz	r3, 801021c <_printf_float+0x1a0>
 8010216:	6822      	ldr	r2, [r4, #0]
 8010218:	07d0      	lsls	r0, r2, #31
 801021a:	d502      	bpl.n	8010222 <_printf_float+0x1a6>
 801021c:	3301      	adds	r3, #1
 801021e:	440b      	add	r3, r1
 8010220:	6123      	str	r3, [r4, #16]
 8010222:	65a1      	str	r1, [r4, #88]	; 0x58
 8010224:	f04f 0900 	mov.w	r9, #0
 8010228:	e7de      	b.n	80101e8 <_printf_float+0x16c>
 801022a:	b913      	cbnz	r3, 8010232 <_printf_float+0x1b6>
 801022c:	6822      	ldr	r2, [r4, #0]
 801022e:	07d2      	lsls	r2, r2, #31
 8010230:	d501      	bpl.n	8010236 <_printf_float+0x1ba>
 8010232:	3302      	adds	r3, #2
 8010234:	e7f4      	b.n	8010220 <_printf_float+0x1a4>
 8010236:	2301      	movs	r3, #1
 8010238:	e7f2      	b.n	8010220 <_printf_float+0x1a4>
 801023a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801023e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010240:	4299      	cmp	r1, r3
 8010242:	db05      	blt.n	8010250 <_printf_float+0x1d4>
 8010244:	6823      	ldr	r3, [r4, #0]
 8010246:	6121      	str	r1, [r4, #16]
 8010248:	07d8      	lsls	r0, r3, #31
 801024a:	d5ea      	bpl.n	8010222 <_printf_float+0x1a6>
 801024c:	1c4b      	adds	r3, r1, #1
 801024e:	e7e7      	b.n	8010220 <_printf_float+0x1a4>
 8010250:	2900      	cmp	r1, #0
 8010252:	bfd4      	ite	le
 8010254:	f1c1 0202 	rsble	r2, r1, #2
 8010258:	2201      	movgt	r2, #1
 801025a:	4413      	add	r3, r2
 801025c:	e7e0      	b.n	8010220 <_printf_float+0x1a4>
 801025e:	6823      	ldr	r3, [r4, #0]
 8010260:	055a      	lsls	r2, r3, #21
 8010262:	d407      	bmi.n	8010274 <_printf_float+0x1f8>
 8010264:	6923      	ldr	r3, [r4, #16]
 8010266:	4642      	mov	r2, r8
 8010268:	4631      	mov	r1, r6
 801026a:	4628      	mov	r0, r5
 801026c:	47b8      	blx	r7
 801026e:	3001      	adds	r0, #1
 8010270:	d12c      	bne.n	80102cc <_printf_float+0x250>
 8010272:	e764      	b.n	801013e <_printf_float+0xc2>
 8010274:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010278:	f240 80e0 	bls.w	801043c <_printf_float+0x3c0>
 801027c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010280:	2200      	movs	r2, #0
 8010282:	2300      	movs	r3, #0
 8010284:	f7f0 fc20 	bl	8000ac8 <__aeabi_dcmpeq>
 8010288:	2800      	cmp	r0, #0
 801028a:	d034      	beq.n	80102f6 <_printf_float+0x27a>
 801028c:	4a37      	ldr	r2, [pc, #220]	; (801036c <_printf_float+0x2f0>)
 801028e:	2301      	movs	r3, #1
 8010290:	4631      	mov	r1, r6
 8010292:	4628      	mov	r0, r5
 8010294:	47b8      	blx	r7
 8010296:	3001      	adds	r0, #1
 8010298:	f43f af51 	beq.w	801013e <_printf_float+0xc2>
 801029c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102a0:	429a      	cmp	r2, r3
 80102a2:	db02      	blt.n	80102aa <_printf_float+0x22e>
 80102a4:	6823      	ldr	r3, [r4, #0]
 80102a6:	07d8      	lsls	r0, r3, #31
 80102a8:	d510      	bpl.n	80102cc <_printf_float+0x250>
 80102aa:	ee18 3a10 	vmov	r3, s16
 80102ae:	4652      	mov	r2, sl
 80102b0:	4631      	mov	r1, r6
 80102b2:	4628      	mov	r0, r5
 80102b4:	47b8      	blx	r7
 80102b6:	3001      	adds	r0, #1
 80102b8:	f43f af41 	beq.w	801013e <_printf_float+0xc2>
 80102bc:	f04f 0800 	mov.w	r8, #0
 80102c0:	f104 091a 	add.w	r9, r4, #26
 80102c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102c6:	3b01      	subs	r3, #1
 80102c8:	4543      	cmp	r3, r8
 80102ca:	dc09      	bgt.n	80102e0 <_printf_float+0x264>
 80102cc:	6823      	ldr	r3, [r4, #0]
 80102ce:	079b      	lsls	r3, r3, #30
 80102d0:	f100 8105 	bmi.w	80104de <_printf_float+0x462>
 80102d4:	68e0      	ldr	r0, [r4, #12]
 80102d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102d8:	4298      	cmp	r0, r3
 80102da:	bfb8      	it	lt
 80102dc:	4618      	movlt	r0, r3
 80102de:	e730      	b.n	8010142 <_printf_float+0xc6>
 80102e0:	2301      	movs	r3, #1
 80102e2:	464a      	mov	r2, r9
 80102e4:	4631      	mov	r1, r6
 80102e6:	4628      	mov	r0, r5
 80102e8:	47b8      	blx	r7
 80102ea:	3001      	adds	r0, #1
 80102ec:	f43f af27 	beq.w	801013e <_printf_float+0xc2>
 80102f0:	f108 0801 	add.w	r8, r8, #1
 80102f4:	e7e6      	b.n	80102c4 <_printf_float+0x248>
 80102f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	dc39      	bgt.n	8010370 <_printf_float+0x2f4>
 80102fc:	4a1b      	ldr	r2, [pc, #108]	; (801036c <_printf_float+0x2f0>)
 80102fe:	2301      	movs	r3, #1
 8010300:	4631      	mov	r1, r6
 8010302:	4628      	mov	r0, r5
 8010304:	47b8      	blx	r7
 8010306:	3001      	adds	r0, #1
 8010308:	f43f af19 	beq.w	801013e <_printf_float+0xc2>
 801030c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010310:	4313      	orrs	r3, r2
 8010312:	d102      	bne.n	801031a <_printf_float+0x29e>
 8010314:	6823      	ldr	r3, [r4, #0]
 8010316:	07d9      	lsls	r1, r3, #31
 8010318:	d5d8      	bpl.n	80102cc <_printf_float+0x250>
 801031a:	ee18 3a10 	vmov	r3, s16
 801031e:	4652      	mov	r2, sl
 8010320:	4631      	mov	r1, r6
 8010322:	4628      	mov	r0, r5
 8010324:	47b8      	blx	r7
 8010326:	3001      	adds	r0, #1
 8010328:	f43f af09 	beq.w	801013e <_printf_float+0xc2>
 801032c:	f04f 0900 	mov.w	r9, #0
 8010330:	f104 0a1a 	add.w	sl, r4, #26
 8010334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010336:	425b      	negs	r3, r3
 8010338:	454b      	cmp	r3, r9
 801033a:	dc01      	bgt.n	8010340 <_printf_float+0x2c4>
 801033c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801033e:	e792      	b.n	8010266 <_printf_float+0x1ea>
 8010340:	2301      	movs	r3, #1
 8010342:	4652      	mov	r2, sl
 8010344:	4631      	mov	r1, r6
 8010346:	4628      	mov	r0, r5
 8010348:	47b8      	blx	r7
 801034a:	3001      	adds	r0, #1
 801034c:	f43f aef7 	beq.w	801013e <_printf_float+0xc2>
 8010350:	f109 0901 	add.w	r9, r9, #1
 8010354:	e7ee      	b.n	8010334 <_printf_float+0x2b8>
 8010356:	bf00      	nop
 8010358:	7fefffff 	.word	0x7fefffff
 801035c:	08015414 	.word	0x08015414
 8010360:	08015418 	.word	0x08015418
 8010364:	08015420 	.word	0x08015420
 8010368:	0801541c 	.word	0x0801541c
 801036c:	08015424 	.word	0x08015424
 8010370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010372:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010374:	429a      	cmp	r2, r3
 8010376:	bfa8      	it	ge
 8010378:	461a      	movge	r2, r3
 801037a:	2a00      	cmp	r2, #0
 801037c:	4691      	mov	r9, r2
 801037e:	dc37      	bgt.n	80103f0 <_printf_float+0x374>
 8010380:	f04f 0b00 	mov.w	fp, #0
 8010384:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010388:	f104 021a 	add.w	r2, r4, #26
 801038c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801038e:	9305      	str	r3, [sp, #20]
 8010390:	eba3 0309 	sub.w	r3, r3, r9
 8010394:	455b      	cmp	r3, fp
 8010396:	dc33      	bgt.n	8010400 <_printf_float+0x384>
 8010398:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801039c:	429a      	cmp	r2, r3
 801039e:	db3b      	blt.n	8010418 <_printf_float+0x39c>
 80103a0:	6823      	ldr	r3, [r4, #0]
 80103a2:	07da      	lsls	r2, r3, #31
 80103a4:	d438      	bmi.n	8010418 <_printf_float+0x39c>
 80103a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103a8:	9a05      	ldr	r2, [sp, #20]
 80103aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80103ac:	1a9a      	subs	r2, r3, r2
 80103ae:	eba3 0901 	sub.w	r9, r3, r1
 80103b2:	4591      	cmp	r9, r2
 80103b4:	bfa8      	it	ge
 80103b6:	4691      	movge	r9, r2
 80103b8:	f1b9 0f00 	cmp.w	r9, #0
 80103bc:	dc35      	bgt.n	801042a <_printf_float+0x3ae>
 80103be:	f04f 0800 	mov.w	r8, #0
 80103c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80103c6:	f104 0a1a 	add.w	sl, r4, #26
 80103ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103ce:	1a9b      	subs	r3, r3, r2
 80103d0:	eba3 0309 	sub.w	r3, r3, r9
 80103d4:	4543      	cmp	r3, r8
 80103d6:	f77f af79 	ble.w	80102cc <_printf_float+0x250>
 80103da:	2301      	movs	r3, #1
 80103dc:	4652      	mov	r2, sl
 80103de:	4631      	mov	r1, r6
 80103e0:	4628      	mov	r0, r5
 80103e2:	47b8      	blx	r7
 80103e4:	3001      	adds	r0, #1
 80103e6:	f43f aeaa 	beq.w	801013e <_printf_float+0xc2>
 80103ea:	f108 0801 	add.w	r8, r8, #1
 80103ee:	e7ec      	b.n	80103ca <_printf_float+0x34e>
 80103f0:	4613      	mov	r3, r2
 80103f2:	4631      	mov	r1, r6
 80103f4:	4642      	mov	r2, r8
 80103f6:	4628      	mov	r0, r5
 80103f8:	47b8      	blx	r7
 80103fa:	3001      	adds	r0, #1
 80103fc:	d1c0      	bne.n	8010380 <_printf_float+0x304>
 80103fe:	e69e      	b.n	801013e <_printf_float+0xc2>
 8010400:	2301      	movs	r3, #1
 8010402:	4631      	mov	r1, r6
 8010404:	4628      	mov	r0, r5
 8010406:	9205      	str	r2, [sp, #20]
 8010408:	47b8      	blx	r7
 801040a:	3001      	adds	r0, #1
 801040c:	f43f ae97 	beq.w	801013e <_printf_float+0xc2>
 8010410:	9a05      	ldr	r2, [sp, #20]
 8010412:	f10b 0b01 	add.w	fp, fp, #1
 8010416:	e7b9      	b.n	801038c <_printf_float+0x310>
 8010418:	ee18 3a10 	vmov	r3, s16
 801041c:	4652      	mov	r2, sl
 801041e:	4631      	mov	r1, r6
 8010420:	4628      	mov	r0, r5
 8010422:	47b8      	blx	r7
 8010424:	3001      	adds	r0, #1
 8010426:	d1be      	bne.n	80103a6 <_printf_float+0x32a>
 8010428:	e689      	b.n	801013e <_printf_float+0xc2>
 801042a:	9a05      	ldr	r2, [sp, #20]
 801042c:	464b      	mov	r3, r9
 801042e:	4442      	add	r2, r8
 8010430:	4631      	mov	r1, r6
 8010432:	4628      	mov	r0, r5
 8010434:	47b8      	blx	r7
 8010436:	3001      	adds	r0, #1
 8010438:	d1c1      	bne.n	80103be <_printf_float+0x342>
 801043a:	e680      	b.n	801013e <_printf_float+0xc2>
 801043c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801043e:	2a01      	cmp	r2, #1
 8010440:	dc01      	bgt.n	8010446 <_printf_float+0x3ca>
 8010442:	07db      	lsls	r3, r3, #31
 8010444:	d538      	bpl.n	80104b8 <_printf_float+0x43c>
 8010446:	2301      	movs	r3, #1
 8010448:	4642      	mov	r2, r8
 801044a:	4631      	mov	r1, r6
 801044c:	4628      	mov	r0, r5
 801044e:	47b8      	blx	r7
 8010450:	3001      	adds	r0, #1
 8010452:	f43f ae74 	beq.w	801013e <_printf_float+0xc2>
 8010456:	ee18 3a10 	vmov	r3, s16
 801045a:	4652      	mov	r2, sl
 801045c:	4631      	mov	r1, r6
 801045e:	4628      	mov	r0, r5
 8010460:	47b8      	blx	r7
 8010462:	3001      	adds	r0, #1
 8010464:	f43f ae6b 	beq.w	801013e <_printf_float+0xc2>
 8010468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801046c:	2200      	movs	r2, #0
 801046e:	2300      	movs	r3, #0
 8010470:	f7f0 fb2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010474:	b9d8      	cbnz	r0, 80104ae <_printf_float+0x432>
 8010476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010478:	f108 0201 	add.w	r2, r8, #1
 801047c:	3b01      	subs	r3, #1
 801047e:	4631      	mov	r1, r6
 8010480:	4628      	mov	r0, r5
 8010482:	47b8      	blx	r7
 8010484:	3001      	adds	r0, #1
 8010486:	d10e      	bne.n	80104a6 <_printf_float+0x42a>
 8010488:	e659      	b.n	801013e <_printf_float+0xc2>
 801048a:	2301      	movs	r3, #1
 801048c:	4652      	mov	r2, sl
 801048e:	4631      	mov	r1, r6
 8010490:	4628      	mov	r0, r5
 8010492:	47b8      	blx	r7
 8010494:	3001      	adds	r0, #1
 8010496:	f43f ae52 	beq.w	801013e <_printf_float+0xc2>
 801049a:	f108 0801 	add.w	r8, r8, #1
 801049e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104a0:	3b01      	subs	r3, #1
 80104a2:	4543      	cmp	r3, r8
 80104a4:	dcf1      	bgt.n	801048a <_printf_float+0x40e>
 80104a6:	464b      	mov	r3, r9
 80104a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80104ac:	e6dc      	b.n	8010268 <_printf_float+0x1ec>
 80104ae:	f04f 0800 	mov.w	r8, #0
 80104b2:	f104 0a1a 	add.w	sl, r4, #26
 80104b6:	e7f2      	b.n	801049e <_printf_float+0x422>
 80104b8:	2301      	movs	r3, #1
 80104ba:	4642      	mov	r2, r8
 80104bc:	e7df      	b.n	801047e <_printf_float+0x402>
 80104be:	2301      	movs	r3, #1
 80104c0:	464a      	mov	r2, r9
 80104c2:	4631      	mov	r1, r6
 80104c4:	4628      	mov	r0, r5
 80104c6:	47b8      	blx	r7
 80104c8:	3001      	adds	r0, #1
 80104ca:	f43f ae38 	beq.w	801013e <_printf_float+0xc2>
 80104ce:	f108 0801 	add.w	r8, r8, #1
 80104d2:	68e3      	ldr	r3, [r4, #12]
 80104d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80104d6:	1a5b      	subs	r3, r3, r1
 80104d8:	4543      	cmp	r3, r8
 80104da:	dcf0      	bgt.n	80104be <_printf_float+0x442>
 80104dc:	e6fa      	b.n	80102d4 <_printf_float+0x258>
 80104de:	f04f 0800 	mov.w	r8, #0
 80104e2:	f104 0919 	add.w	r9, r4, #25
 80104e6:	e7f4      	b.n	80104d2 <_printf_float+0x456>

080104e8 <_printf_common>:
 80104e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104ec:	4616      	mov	r6, r2
 80104ee:	4699      	mov	r9, r3
 80104f0:	688a      	ldr	r2, [r1, #8]
 80104f2:	690b      	ldr	r3, [r1, #16]
 80104f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80104f8:	4293      	cmp	r3, r2
 80104fa:	bfb8      	it	lt
 80104fc:	4613      	movlt	r3, r2
 80104fe:	6033      	str	r3, [r6, #0]
 8010500:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010504:	4607      	mov	r7, r0
 8010506:	460c      	mov	r4, r1
 8010508:	b10a      	cbz	r2, 801050e <_printf_common+0x26>
 801050a:	3301      	adds	r3, #1
 801050c:	6033      	str	r3, [r6, #0]
 801050e:	6823      	ldr	r3, [r4, #0]
 8010510:	0699      	lsls	r1, r3, #26
 8010512:	bf42      	ittt	mi
 8010514:	6833      	ldrmi	r3, [r6, #0]
 8010516:	3302      	addmi	r3, #2
 8010518:	6033      	strmi	r3, [r6, #0]
 801051a:	6825      	ldr	r5, [r4, #0]
 801051c:	f015 0506 	ands.w	r5, r5, #6
 8010520:	d106      	bne.n	8010530 <_printf_common+0x48>
 8010522:	f104 0a19 	add.w	sl, r4, #25
 8010526:	68e3      	ldr	r3, [r4, #12]
 8010528:	6832      	ldr	r2, [r6, #0]
 801052a:	1a9b      	subs	r3, r3, r2
 801052c:	42ab      	cmp	r3, r5
 801052e:	dc26      	bgt.n	801057e <_printf_common+0x96>
 8010530:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010534:	1e13      	subs	r3, r2, #0
 8010536:	6822      	ldr	r2, [r4, #0]
 8010538:	bf18      	it	ne
 801053a:	2301      	movne	r3, #1
 801053c:	0692      	lsls	r2, r2, #26
 801053e:	d42b      	bmi.n	8010598 <_printf_common+0xb0>
 8010540:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010544:	4649      	mov	r1, r9
 8010546:	4638      	mov	r0, r7
 8010548:	47c0      	blx	r8
 801054a:	3001      	adds	r0, #1
 801054c:	d01e      	beq.n	801058c <_printf_common+0xa4>
 801054e:	6823      	ldr	r3, [r4, #0]
 8010550:	68e5      	ldr	r5, [r4, #12]
 8010552:	6832      	ldr	r2, [r6, #0]
 8010554:	f003 0306 	and.w	r3, r3, #6
 8010558:	2b04      	cmp	r3, #4
 801055a:	bf08      	it	eq
 801055c:	1aad      	subeq	r5, r5, r2
 801055e:	68a3      	ldr	r3, [r4, #8]
 8010560:	6922      	ldr	r2, [r4, #16]
 8010562:	bf0c      	ite	eq
 8010564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010568:	2500      	movne	r5, #0
 801056a:	4293      	cmp	r3, r2
 801056c:	bfc4      	itt	gt
 801056e:	1a9b      	subgt	r3, r3, r2
 8010570:	18ed      	addgt	r5, r5, r3
 8010572:	2600      	movs	r6, #0
 8010574:	341a      	adds	r4, #26
 8010576:	42b5      	cmp	r5, r6
 8010578:	d11a      	bne.n	80105b0 <_printf_common+0xc8>
 801057a:	2000      	movs	r0, #0
 801057c:	e008      	b.n	8010590 <_printf_common+0xa8>
 801057e:	2301      	movs	r3, #1
 8010580:	4652      	mov	r2, sl
 8010582:	4649      	mov	r1, r9
 8010584:	4638      	mov	r0, r7
 8010586:	47c0      	blx	r8
 8010588:	3001      	adds	r0, #1
 801058a:	d103      	bne.n	8010594 <_printf_common+0xac>
 801058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010594:	3501      	adds	r5, #1
 8010596:	e7c6      	b.n	8010526 <_printf_common+0x3e>
 8010598:	18e1      	adds	r1, r4, r3
 801059a:	1c5a      	adds	r2, r3, #1
 801059c:	2030      	movs	r0, #48	; 0x30
 801059e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80105a2:	4422      	add	r2, r4
 80105a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80105a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80105ac:	3302      	adds	r3, #2
 80105ae:	e7c7      	b.n	8010540 <_printf_common+0x58>
 80105b0:	2301      	movs	r3, #1
 80105b2:	4622      	mov	r2, r4
 80105b4:	4649      	mov	r1, r9
 80105b6:	4638      	mov	r0, r7
 80105b8:	47c0      	blx	r8
 80105ba:	3001      	adds	r0, #1
 80105bc:	d0e6      	beq.n	801058c <_printf_common+0xa4>
 80105be:	3601      	adds	r6, #1
 80105c0:	e7d9      	b.n	8010576 <_printf_common+0x8e>
	...

080105c4 <_printf_i>:
 80105c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80105c8:	7e0f      	ldrb	r7, [r1, #24]
 80105ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80105cc:	2f78      	cmp	r7, #120	; 0x78
 80105ce:	4691      	mov	r9, r2
 80105d0:	4680      	mov	r8, r0
 80105d2:	460c      	mov	r4, r1
 80105d4:	469a      	mov	sl, r3
 80105d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80105da:	d807      	bhi.n	80105ec <_printf_i+0x28>
 80105dc:	2f62      	cmp	r7, #98	; 0x62
 80105de:	d80a      	bhi.n	80105f6 <_printf_i+0x32>
 80105e0:	2f00      	cmp	r7, #0
 80105e2:	f000 80d8 	beq.w	8010796 <_printf_i+0x1d2>
 80105e6:	2f58      	cmp	r7, #88	; 0x58
 80105e8:	f000 80a3 	beq.w	8010732 <_printf_i+0x16e>
 80105ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80105f4:	e03a      	b.n	801066c <_printf_i+0xa8>
 80105f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80105fa:	2b15      	cmp	r3, #21
 80105fc:	d8f6      	bhi.n	80105ec <_printf_i+0x28>
 80105fe:	a101      	add	r1, pc, #4	; (adr r1, 8010604 <_printf_i+0x40>)
 8010600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010604:	0801065d 	.word	0x0801065d
 8010608:	08010671 	.word	0x08010671
 801060c:	080105ed 	.word	0x080105ed
 8010610:	080105ed 	.word	0x080105ed
 8010614:	080105ed 	.word	0x080105ed
 8010618:	080105ed 	.word	0x080105ed
 801061c:	08010671 	.word	0x08010671
 8010620:	080105ed 	.word	0x080105ed
 8010624:	080105ed 	.word	0x080105ed
 8010628:	080105ed 	.word	0x080105ed
 801062c:	080105ed 	.word	0x080105ed
 8010630:	0801077d 	.word	0x0801077d
 8010634:	080106a1 	.word	0x080106a1
 8010638:	0801075f 	.word	0x0801075f
 801063c:	080105ed 	.word	0x080105ed
 8010640:	080105ed 	.word	0x080105ed
 8010644:	0801079f 	.word	0x0801079f
 8010648:	080105ed 	.word	0x080105ed
 801064c:	080106a1 	.word	0x080106a1
 8010650:	080105ed 	.word	0x080105ed
 8010654:	080105ed 	.word	0x080105ed
 8010658:	08010767 	.word	0x08010767
 801065c:	682b      	ldr	r3, [r5, #0]
 801065e:	1d1a      	adds	r2, r3, #4
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	602a      	str	r2, [r5, #0]
 8010664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010668:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801066c:	2301      	movs	r3, #1
 801066e:	e0a3      	b.n	80107b8 <_printf_i+0x1f4>
 8010670:	6820      	ldr	r0, [r4, #0]
 8010672:	6829      	ldr	r1, [r5, #0]
 8010674:	0606      	lsls	r6, r0, #24
 8010676:	f101 0304 	add.w	r3, r1, #4
 801067a:	d50a      	bpl.n	8010692 <_printf_i+0xce>
 801067c:	680e      	ldr	r6, [r1, #0]
 801067e:	602b      	str	r3, [r5, #0]
 8010680:	2e00      	cmp	r6, #0
 8010682:	da03      	bge.n	801068c <_printf_i+0xc8>
 8010684:	232d      	movs	r3, #45	; 0x2d
 8010686:	4276      	negs	r6, r6
 8010688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801068c:	485e      	ldr	r0, [pc, #376]	; (8010808 <_printf_i+0x244>)
 801068e:	230a      	movs	r3, #10
 8010690:	e019      	b.n	80106c6 <_printf_i+0x102>
 8010692:	680e      	ldr	r6, [r1, #0]
 8010694:	602b      	str	r3, [r5, #0]
 8010696:	f010 0f40 	tst.w	r0, #64	; 0x40
 801069a:	bf18      	it	ne
 801069c:	b236      	sxthne	r6, r6
 801069e:	e7ef      	b.n	8010680 <_printf_i+0xbc>
 80106a0:	682b      	ldr	r3, [r5, #0]
 80106a2:	6820      	ldr	r0, [r4, #0]
 80106a4:	1d19      	adds	r1, r3, #4
 80106a6:	6029      	str	r1, [r5, #0]
 80106a8:	0601      	lsls	r1, r0, #24
 80106aa:	d501      	bpl.n	80106b0 <_printf_i+0xec>
 80106ac:	681e      	ldr	r6, [r3, #0]
 80106ae:	e002      	b.n	80106b6 <_printf_i+0xf2>
 80106b0:	0646      	lsls	r6, r0, #25
 80106b2:	d5fb      	bpl.n	80106ac <_printf_i+0xe8>
 80106b4:	881e      	ldrh	r6, [r3, #0]
 80106b6:	4854      	ldr	r0, [pc, #336]	; (8010808 <_printf_i+0x244>)
 80106b8:	2f6f      	cmp	r7, #111	; 0x6f
 80106ba:	bf0c      	ite	eq
 80106bc:	2308      	moveq	r3, #8
 80106be:	230a      	movne	r3, #10
 80106c0:	2100      	movs	r1, #0
 80106c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80106c6:	6865      	ldr	r5, [r4, #4]
 80106c8:	60a5      	str	r5, [r4, #8]
 80106ca:	2d00      	cmp	r5, #0
 80106cc:	bfa2      	ittt	ge
 80106ce:	6821      	ldrge	r1, [r4, #0]
 80106d0:	f021 0104 	bicge.w	r1, r1, #4
 80106d4:	6021      	strge	r1, [r4, #0]
 80106d6:	b90e      	cbnz	r6, 80106dc <_printf_i+0x118>
 80106d8:	2d00      	cmp	r5, #0
 80106da:	d04d      	beq.n	8010778 <_printf_i+0x1b4>
 80106dc:	4615      	mov	r5, r2
 80106de:	fbb6 f1f3 	udiv	r1, r6, r3
 80106e2:	fb03 6711 	mls	r7, r3, r1, r6
 80106e6:	5dc7      	ldrb	r7, [r0, r7]
 80106e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80106ec:	4637      	mov	r7, r6
 80106ee:	42bb      	cmp	r3, r7
 80106f0:	460e      	mov	r6, r1
 80106f2:	d9f4      	bls.n	80106de <_printf_i+0x11a>
 80106f4:	2b08      	cmp	r3, #8
 80106f6:	d10b      	bne.n	8010710 <_printf_i+0x14c>
 80106f8:	6823      	ldr	r3, [r4, #0]
 80106fa:	07de      	lsls	r6, r3, #31
 80106fc:	d508      	bpl.n	8010710 <_printf_i+0x14c>
 80106fe:	6923      	ldr	r3, [r4, #16]
 8010700:	6861      	ldr	r1, [r4, #4]
 8010702:	4299      	cmp	r1, r3
 8010704:	bfde      	ittt	le
 8010706:	2330      	movle	r3, #48	; 0x30
 8010708:	f805 3c01 	strble.w	r3, [r5, #-1]
 801070c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010710:	1b52      	subs	r2, r2, r5
 8010712:	6122      	str	r2, [r4, #16]
 8010714:	f8cd a000 	str.w	sl, [sp]
 8010718:	464b      	mov	r3, r9
 801071a:	aa03      	add	r2, sp, #12
 801071c:	4621      	mov	r1, r4
 801071e:	4640      	mov	r0, r8
 8010720:	f7ff fee2 	bl	80104e8 <_printf_common>
 8010724:	3001      	adds	r0, #1
 8010726:	d14c      	bne.n	80107c2 <_printf_i+0x1fe>
 8010728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801072c:	b004      	add	sp, #16
 801072e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010732:	4835      	ldr	r0, [pc, #212]	; (8010808 <_printf_i+0x244>)
 8010734:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010738:	6829      	ldr	r1, [r5, #0]
 801073a:	6823      	ldr	r3, [r4, #0]
 801073c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010740:	6029      	str	r1, [r5, #0]
 8010742:	061d      	lsls	r5, r3, #24
 8010744:	d514      	bpl.n	8010770 <_printf_i+0x1ac>
 8010746:	07df      	lsls	r7, r3, #31
 8010748:	bf44      	itt	mi
 801074a:	f043 0320 	orrmi.w	r3, r3, #32
 801074e:	6023      	strmi	r3, [r4, #0]
 8010750:	b91e      	cbnz	r6, 801075a <_printf_i+0x196>
 8010752:	6823      	ldr	r3, [r4, #0]
 8010754:	f023 0320 	bic.w	r3, r3, #32
 8010758:	6023      	str	r3, [r4, #0]
 801075a:	2310      	movs	r3, #16
 801075c:	e7b0      	b.n	80106c0 <_printf_i+0xfc>
 801075e:	6823      	ldr	r3, [r4, #0]
 8010760:	f043 0320 	orr.w	r3, r3, #32
 8010764:	6023      	str	r3, [r4, #0]
 8010766:	2378      	movs	r3, #120	; 0x78
 8010768:	4828      	ldr	r0, [pc, #160]	; (801080c <_printf_i+0x248>)
 801076a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801076e:	e7e3      	b.n	8010738 <_printf_i+0x174>
 8010770:	0659      	lsls	r1, r3, #25
 8010772:	bf48      	it	mi
 8010774:	b2b6      	uxthmi	r6, r6
 8010776:	e7e6      	b.n	8010746 <_printf_i+0x182>
 8010778:	4615      	mov	r5, r2
 801077a:	e7bb      	b.n	80106f4 <_printf_i+0x130>
 801077c:	682b      	ldr	r3, [r5, #0]
 801077e:	6826      	ldr	r6, [r4, #0]
 8010780:	6961      	ldr	r1, [r4, #20]
 8010782:	1d18      	adds	r0, r3, #4
 8010784:	6028      	str	r0, [r5, #0]
 8010786:	0635      	lsls	r5, r6, #24
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	d501      	bpl.n	8010790 <_printf_i+0x1cc>
 801078c:	6019      	str	r1, [r3, #0]
 801078e:	e002      	b.n	8010796 <_printf_i+0x1d2>
 8010790:	0670      	lsls	r0, r6, #25
 8010792:	d5fb      	bpl.n	801078c <_printf_i+0x1c8>
 8010794:	8019      	strh	r1, [r3, #0]
 8010796:	2300      	movs	r3, #0
 8010798:	6123      	str	r3, [r4, #16]
 801079a:	4615      	mov	r5, r2
 801079c:	e7ba      	b.n	8010714 <_printf_i+0x150>
 801079e:	682b      	ldr	r3, [r5, #0]
 80107a0:	1d1a      	adds	r2, r3, #4
 80107a2:	602a      	str	r2, [r5, #0]
 80107a4:	681d      	ldr	r5, [r3, #0]
 80107a6:	6862      	ldr	r2, [r4, #4]
 80107a8:	2100      	movs	r1, #0
 80107aa:	4628      	mov	r0, r5
 80107ac:	f7ef fd18 	bl	80001e0 <memchr>
 80107b0:	b108      	cbz	r0, 80107b6 <_printf_i+0x1f2>
 80107b2:	1b40      	subs	r0, r0, r5
 80107b4:	6060      	str	r0, [r4, #4]
 80107b6:	6863      	ldr	r3, [r4, #4]
 80107b8:	6123      	str	r3, [r4, #16]
 80107ba:	2300      	movs	r3, #0
 80107bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107c0:	e7a8      	b.n	8010714 <_printf_i+0x150>
 80107c2:	6923      	ldr	r3, [r4, #16]
 80107c4:	462a      	mov	r2, r5
 80107c6:	4649      	mov	r1, r9
 80107c8:	4640      	mov	r0, r8
 80107ca:	47d0      	blx	sl
 80107cc:	3001      	adds	r0, #1
 80107ce:	d0ab      	beq.n	8010728 <_printf_i+0x164>
 80107d0:	6823      	ldr	r3, [r4, #0]
 80107d2:	079b      	lsls	r3, r3, #30
 80107d4:	d413      	bmi.n	80107fe <_printf_i+0x23a>
 80107d6:	68e0      	ldr	r0, [r4, #12]
 80107d8:	9b03      	ldr	r3, [sp, #12]
 80107da:	4298      	cmp	r0, r3
 80107dc:	bfb8      	it	lt
 80107de:	4618      	movlt	r0, r3
 80107e0:	e7a4      	b.n	801072c <_printf_i+0x168>
 80107e2:	2301      	movs	r3, #1
 80107e4:	4632      	mov	r2, r6
 80107e6:	4649      	mov	r1, r9
 80107e8:	4640      	mov	r0, r8
 80107ea:	47d0      	blx	sl
 80107ec:	3001      	adds	r0, #1
 80107ee:	d09b      	beq.n	8010728 <_printf_i+0x164>
 80107f0:	3501      	adds	r5, #1
 80107f2:	68e3      	ldr	r3, [r4, #12]
 80107f4:	9903      	ldr	r1, [sp, #12]
 80107f6:	1a5b      	subs	r3, r3, r1
 80107f8:	42ab      	cmp	r3, r5
 80107fa:	dcf2      	bgt.n	80107e2 <_printf_i+0x21e>
 80107fc:	e7eb      	b.n	80107d6 <_printf_i+0x212>
 80107fe:	2500      	movs	r5, #0
 8010800:	f104 0619 	add.w	r6, r4, #25
 8010804:	e7f5      	b.n	80107f2 <_printf_i+0x22e>
 8010806:	bf00      	nop
 8010808:	08015426 	.word	0x08015426
 801080c:	08015437 	.word	0x08015437

08010810 <_scanf_float>:
 8010810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010814:	b087      	sub	sp, #28
 8010816:	4617      	mov	r7, r2
 8010818:	9303      	str	r3, [sp, #12]
 801081a:	688b      	ldr	r3, [r1, #8]
 801081c:	1e5a      	subs	r2, r3, #1
 801081e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010822:	bf83      	ittte	hi
 8010824:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010828:	195b      	addhi	r3, r3, r5
 801082a:	9302      	strhi	r3, [sp, #8]
 801082c:	2300      	movls	r3, #0
 801082e:	bf86      	itte	hi
 8010830:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010834:	608b      	strhi	r3, [r1, #8]
 8010836:	9302      	strls	r3, [sp, #8]
 8010838:	680b      	ldr	r3, [r1, #0]
 801083a:	468b      	mov	fp, r1
 801083c:	2500      	movs	r5, #0
 801083e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010842:	f84b 3b1c 	str.w	r3, [fp], #28
 8010846:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801084a:	4680      	mov	r8, r0
 801084c:	460c      	mov	r4, r1
 801084e:	465e      	mov	r6, fp
 8010850:	46aa      	mov	sl, r5
 8010852:	46a9      	mov	r9, r5
 8010854:	9501      	str	r5, [sp, #4]
 8010856:	68a2      	ldr	r2, [r4, #8]
 8010858:	b152      	cbz	r2, 8010870 <_scanf_float+0x60>
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	781b      	ldrb	r3, [r3, #0]
 801085e:	2b4e      	cmp	r3, #78	; 0x4e
 8010860:	d864      	bhi.n	801092c <_scanf_float+0x11c>
 8010862:	2b40      	cmp	r3, #64	; 0x40
 8010864:	d83c      	bhi.n	80108e0 <_scanf_float+0xd0>
 8010866:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801086a:	b2c8      	uxtb	r0, r1
 801086c:	280e      	cmp	r0, #14
 801086e:	d93a      	bls.n	80108e6 <_scanf_float+0xd6>
 8010870:	f1b9 0f00 	cmp.w	r9, #0
 8010874:	d003      	beq.n	801087e <_scanf_float+0x6e>
 8010876:	6823      	ldr	r3, [r4, #0]
 8010878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801087c:	6023      	str	r3, [r4, #0]
 801087e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010882:	f1ba 0f01 	cmp.w	sl, #1
 8010886:	f200 8113 	bhi.w	8010ab0 <_scanf_float+0x2a0>
 801088a:	455e      	cmp	r6, fp
 801088c:	f200 8105 	bhi.w	8010a9a <_scanf_float+0x28a>
 8010890:	2501      	movs	r5, #1
 8010892:	4628      	mov	r0, r5
 8010894:	b007      	add	sp, #28
 8010896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801089e:	2a0d      	cmp	r2, #13
 80108a0:	d8e6      	bhi.n	8010870 <_scanf_float+0x60>
 80108a2:	a101      	add	r1, pc, #4	; (adr r1, 80108a8 <_scanf_float+0x98>)
 80108a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80108a8:	080109e7 	.word	0x080109e7
 80108ac:	08010871 	.word	0x08010871
 80108b0:	08010871 	.word	0x08010871
 80108b4:	08010871 	.word	0x08010871
 80108b8:	08010a47 	.word	0x08010a47
 80108bc:	08010a1f 	.word	0x08010a1f
 80108c0:	08010871 	.word	0x08010871
 80108c4:	08010871 	.word	0x08010871
 80108c8:	080109f5 	.word	0x080109f5
 80108cc:	08010871 	.word	0x08010871
 80108d0:	08010871 	.word	0x08010871
 80108d4:	08010871 	.word	0x08010871
 80108d8:	08010871 	.word	0x08010871
 80108dc:	080109ad 	.word	0x080109ad
 80108e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80108e4:	e7db      	b.n	801089e <_scanf_float+0x8e>
 80108e6:	290e      	cmp	r1, #14
 80108e8:	d8c2      	bhi.n	8010870 <_scanf_float+0x60>
 80108ea:	a001      	add	r0, pc, #4	; (adr r0, 80108f0 <_scanf_float+0xe0>)
 80108ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80108f0:	0801099f 	.word	0x0801099f
 80108f4:	08010871 	.word	0x08010871
 80108f8:	0801099f 	.word	0x0801099f
 80108fc:	08010a33 	.word	0x08010a33
 8010900:	08010871 	.word	0x08010871
 8010904:	0801094d 	.word	0x0801094d
 8010908:	08010989 	.word	0x08010989
 801090c:	08010989 	.word	0x08010989
 8010910:	08010989 	.word	0x08010989
 8010914:	08010989 	.word	0x08010989
 8010918:	08010989 	.word	0x08010989
 801091c:	08010989 	.word	0x08010989
 8010920:	08010989 	.word	0x08010989
 8010924:	08010989 	.word	0x08010989
 8010928:	08010989 	.word	0x08010989
 801092c:	2b6e      	cmp	r3, #110	; 0x6e
 801092e:	d809      	bhi.n	8010944 <_scanf_float+0x134>
 8010930:	2b60      	cmp	r3, #96	; 0x60
 8010932:	d8b2      	bhi.n	801089a <_scanf_float+0x8a>
 8010934:	2b54      	cmp	r3, #84	; 0x54
 8010936:	d077      	beq.n	8010a28 <_scanf_float+0x218>
 8010938:	2b59      	cmp	r3, #89	; 0x59
 801093a:	d199      	bne.n	8010870 <_scanf_float+0x60>
 801093c:	2d07      	cmp	r5, #7
 801093e:	d197      	bne.n	8010870 <_scanf_float+0x60>
 8010940:	2508      	movs	r5, #8
 8010942:	e029      	b.n	8010998 <_scanf_float+0x188>
 8010944:	2b74      	cmp	r3, #116	; 0x74
 8010946:	d06f      	beq.n	8010a28 <_scanf_float+0x218>
 8010948:	2b79      	cmp	r3, #121	; 0x79
 801094a:	e7f6      	b.n	801093a <_scanf_float+0x12a>
 801094c:	6821      	ldr	r1, [r4, #0]
 801094e:	05c8      	lsls	r0, r1, #23
 8010950:	d51a      	bpl.n	8010988 <_scanf_float+0x178>
 8010952:	9b02      	ldr	r3, [sp, #8]
 8010954:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010958:	6021      	str	r1, [r4, #0]
 801095a:	f109 0901 	add.w	r9, r9, #1
 801095e:	b11b      	cbz	r3, 8010968 <_scanf_float+0x158>
 8010960:	3b01      	subs	r3, #1
 8010962:	3201      	adds	r2, #1
 8010964:	9302      	str	r3, [sp, #8]
 8010966:	60a2      	str	r2, [r4, #8]
 8010968:	68a3      	ldr	r3, [r4, #8]
 801096a:	3b01      	subs	r3, #1
 801096c:	60a3      	str	r3, [r4, #8]
 801096e:	6923      	ldr	r3, [r4, #16]
 8010970:	3301      	adds	r3, #1
 8010972:	6123      	str	r3, [r4, #16]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	3b01      	subs	r3, #1
 8010978:	2b00      	cmp	r3, #0
 801097a:	607b      	str	r3, [r7, #4]
 801097c:	f340 8084 	ble.w	8010a88 <_scanf_float+0x278>
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	3301      	adds	r3, #1
 8010984:	603b      	str	r3, [r7, #0]
 8010986:	e766      	b.n	8010856 <_scanf_float+0x46>
 8010988:	eb1a 0f05 	cmn.w	sl, r5
 801098c:	f47f af70 	bne.w	8010870 <_scanf_float+0x60>
 8010990:	6822      	ldr	r2, [r4, #0]
 8010992:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010996:	6022      	str	r2, [r4, #0]
 8010998:	f806 3b01 	strb.w	r3, [r6], #1
 801099c:	e7e4      	b.n	8010968 <_scanf_float+0x158>
 801099e:	6822      	ldr	r2, [r4, #0]
 80109a0:	0610      	lsls	r0, r2, #24
 80109a2:	f57f af65 	bpl.w	8010870 <_scanf_float+0x60>
 80109a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80109aa:	e7f4      	b.n	8010996 <_scanf_float+0x186>
 80109ac:	f1ba 0f00 	cmp.w	sl, #0
 80109b0:	d10e      	bne.n	80109d0 <_scanf_float+0x1c0>
 80109b2:	f1b9 0f00 	cmp.w	r9, #0
 80109b6:	d10e      	bne.n	80109d6 <_scanf_float+0x1c6>
 80109b8:	6822      	ldr	r2, [r4, #0]
 80109ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80109be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80109c2:	d108      	bne.n	80109d6 <_scanf_float+0x1c6>
 80109c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80109c8:	6022      	str	r2, [r4, #0]
 80109ca:	f04f 0a01 	mov.w	sl, #1
 80109ce:	e7e3      	b.n	8010998 <_scanf_float+0x188>
 80109d0:	f1ba 0f02 	cmp.w	sl, #2
 80109d4:	d055      	beq.n	8010a82 <_scanf_float+0x272>
 80109d6:	2d01      	cmp	r5, #1
 80109d8:	d002      	beq.n	80109e0 <_scanf_float+0x1d0>
 80109da:	2d04      	cmp	r5, #4
 80109dc:	f47f af48 	bne.w	8010870 <_scanf_float+0x60>
 80109e0:	3501      	adds	r5, #1
 80109e2:	b2ed      	uxtb	r5, r5
 80109e4:	e7d8      	b.n	8010998 <_scanf_float+0x188>
 80109e6:	f1ba 0f01 	cmp.w	sl, #1
 80109ea:	f47f af41 	bne.w	8010870 <_scanf_float+0x60>
 80109ee:	f04f 0a02 	mov.w	sl, #2
 80109f2:	e7d1      	b.n	8010998 <_scanf_float+0x188>
 80109f4:	b97d      	cbnz	r5, 8010a16 <_scanf_float+0x206>
 80109f6:	f1b9 0f00 	cmp.w	r9, #0
 80109fa:	f47f af3c 	bne.w	8010876 <_scanf_float+0x66>
 80109fe:	6822      	ldr	r2, [r4, #0]
 8010a00:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010a04:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010a08:	f47f af39 	bne.w	801087e <_scanf_float+0x6e>
 8010a0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010a10:	6022      	str	r2, [r4, #0]
 8010a12:	2501      	movs	r5, #1
 8010a14:	e7c0      	b.n	8010998 <_scanf_float+0x188>
 8010a16:	2d03      	cmp	r5, #3
 8010a18:	d0e2      	beq.n	80109e0 <_scanf_float+0x1d0>
 8010a1a:	2d05      	cmp	r5, #5
 8010a1c:	e7de      	b.n	80109dc <_scanf_float+0x1cc>
 8010a1e:	2d02      	cmp	r5, #2
 8010a20:	f47f af26 	bne.w	8010870 <_scanf_float+0x60>
 8010a24:	2503      	movs	r5, #3
 8010a26:	e7b7      	b.n	8010998 <_scanf_float+0x188>
 8010a28:	2d06      	cmp	r5, #6
 8010a2a:	f47f af21 	bne.w	8010870 <_scanf_float+0x60>
 8010a2e:	2507      	movs	r5, #7
 8010a30:	e7b2      	b.n	8010998 <_scanf_float+0x188>
 8010a32:	6822      	ldr	r2, [r4, #0]
 8010a34:	0591      	lsls	r1, r2, #22
 8010a36:	f57f af1b 	bpl.w	8010870 <_scanf_float+0x60>
 8010a3a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010a3e:	6022      	str	r2, [r4, #0]
 8010a40:	f8cd 9004 	str.w	r9, [sp, #4]
 8010a44:	e7a8      	b.n	8010998 <_scanf_float+0x188>
 8010a46:	6822      	ldr	r2, [r4, #0]
 8010a48:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010a4c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010a50:	d006      	beq.n	8010a60 <_scanf_float+0x250>
 8010a52:	0550      	lsls	r0, r2, #21
 8010a54:	f57f af0c 	bpl.w	8010870 <_scanf_float+0x60>
 8010a58:	f1b9 0f00 	cmp.w	r9, #0
 8010a5c:	f43f af0f 	beq.w	801087e <_scanf_float+0x6e>
 8010a60:	0591      	lsls	r1, r2, #22
 8010a62:	bf58      	it	pl
 8010a64:	9901      	ldrpl	r1, [sp, #4]
 8010a66:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010a6a:	bf58      	it	pl
 8010a6c:	eba9 0101 	subpl.w	r1, r9, r1
 8010a70:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010a74:	bf58      	it	pl
 8010a76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010a7a:	6022      	str	r2, [r4, #0]
 8010a7c:	f04f 0900 	mov.w	r9, #0
 8010a80:	e78a      	b.n	8010998 <_scanf_float+0x188>
 8010a82:	f04f 0a03 	mov.w	sl, #3
 8010a86:	e787      	b.n	8010998 <_scanf_float+0x188>
 8010a88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010a8c:	4639      	mov	r1, r7
 8010a8e:	4640      	mov	r0, r8
 8010a90:	4798      	blx	r3
 8010a92:	2800      	cmp	r0, #0
 8010a94:	f43f aedf 	beq.w	8010856 <_scanf_float+0x46>
 8010a98:	e6ea      	b.n	8010870 <_scanf_float+0x60>
 8010a9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010a9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010aa2:	463a      	mov	r2, r7
 8010aa4:	4640      	mov	r0, r8
 8010aa6:	4798      	blx	r3
 8010aa8:	6923      	ldr	r3, [r4, #16]
 8010aaa:	3b01      	subs	r3, #1
 8010aac:	6123      	str	r3, [r4, #16]
 8010aae:	e6ec      	b.n	801088a <_scanf_float+0x7a>
 8010ab0:	1e6b      	subs	r3, r5, #1
 8010ab2:	2b06      	cmp	r3, #6
 8010ab4:	d825      	bhi.n	8010b02 <_scanf_float+0x2f2>
 8010ab6:	2d02      	cmp	r5, #2
 8010ab8:	d836      	bhi.n	8010b28 <_scanf_float+0x318>
 8010aba:	455e      	cmp	r6, fp
 8010abc:	f67f aee8 	bls.w	8010890 <_scanf_float+0x80>
 8010ac0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ac4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010ac8:	463a      	mov	r2, r7
 8010aca:	4640      	mov	r0, r8
 8010acc:	4798      	blx	r3
 8010ace:	6923      	ldr	r3, [r4, #16]
 8010ad0:	3b01      	subs	r3, #1
 8010ad2:	6123      	str	r3, [r4, #16]
 8010ad4:	e7f1      	b.n	8010aba <_scanf_float+0x2aa>
 8010ad6:	9802      	ldr	r0, [sp, #8]
 8010ad8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010adc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010ae0:	9002      	str	r0, [sp, #8]
 8010ae2:	463a      	mov	r2, r7
 8010ae4:	4640      	mov	r0, r8
 8010ae6:	4798      	blx	r3
 8010ae8:	6923      	ldr	r3, [r4, #16]
 8010aea:	3b01      	subs	r3, #1
 8010aec:	6123      	str	r3, [r4, #16]
 8010aee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010af2:	fa5f fa8a 	uxtb.w	sl, sl
 8010af6:	f1ba 0f02 	cmp.w	sl, #2
 8010afa:	d1ec      	bne.n	8010ad6 <_scanf_float+0x2c6>
 8010afc:	3d03      	subs	r5, #3
 8010afe:	b2ed      	uxtb	r5, r5
 8010b00:	1b76      	subs	r6, r6, r5
 8010b02:	6823      	ldr	r3, [r4, #0]
 8010b04:	05da      	lsls	r2, r3, #23
 8010b06:	d52f      	bpl.n	8010b68 <_scanf_float+0x358>
 8010b08:	055b      	lsls	r3, r3, #21
 8010b0a:	d510      	bpl.n	8010b2e <_scanf_float+0x31e>
 8010b0c:	455e      	cmp	r6, fp
 8010b0e:	f67f aebf 	bls.w	8010890 <_scanf_float+0x80>
 8010b12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010b1a:	463a      	mov	r2, r7
 8010b1c:	4640      	mov	r0, r8
 8010b1e:	4798      	blx	r3
 8010b20:	6923      	ldr	r3, [r4, #16]
 8010b22:	3b01      	subs	r3, #1
 8010b24:	6123      	str	r3, [r4, #16]
 8010b26:	e7f1      	b.n	8010b0c <_scanf_float+0x2fc>
 8010b28:	46aa      	mov	sl, r5
 8010b2a:	9602      	str	r6, [sp, #8]
 8010b2c:	e7df      	b.n	8010aee <_scanf_float+0x2de>
 8010b2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010b32:	6923      	ldr	r3, [r4, #16]
 8010b34:	2965      	cmp	r1, #101	; 0x65
 8010b36:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010b3a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8010b3e:	6123      	str	r3, [r4, #16]
 8010b40:	d00c      	beq.n	8010b5c <_scanf_float+0x34c>
 8010b42:	2945      	cmp	r1, #69	; 0x45
 8010b44:	d00a      	beq.n	8010b5c <_scanf_float+0x34c>
 8010b46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b4a:	463a      	mov	r2, r7
 8010b4c:	4640      	mov	r0, r8
 8010b4e:	4798      	blx	r3
 8010b50:	6923      	ldr	r3, [r4, #16]
 8010b52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010b56:	3b01      	subs	r3, #1
 8010b58:	1eb5      	subs	r5, r6, #2
 8010b5a:	6123      	str	r3, [r4, #16]
 8010b5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b60:	463a      	mov	r2, r7
 8010b62:	4640      	mov	r0, r8
 8010b64:	4798      	blx	r3
 8010b66:	462e      	mov	r6, r5
 8010b68:	6825      	ldr	r5, [r4, #0]
 8010b6a:	f015 0510 	ands.w	r5, r5, #16
 8010b6e:	d159      	bne.n	8010c24 <_scanf_float+0x414>
 8010b70:	7035      	strb	r5, [r6, #0]
 8010b72:	6823      	ldr	r3, [r4, #0]
 8010b74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b7c:	d11b      	bne.n	8010bb6 <_scanf_float+0x3a6>
 8010b7e:	9b01      	ldr	r3, [sp, #4]
 8010b80:	454b      	cmp	r3, r9
 8010b82:	eba3 0209 	sub.w	r2, r3, r9
 8010b86:	d123      	bne.n	8010bd0 <_scanf_float+0x3c0>
 8010b88:	2200      	movs	r2, #0
 8010b8a:	4659      	mov	r1, fp
 8010b8c:	4640      	mov	r0, r8
 8010b8e:	f000 fe99 	bl	80118c4 <_strtod_r>
 8010b92:	6822      	ldr	r2, [r4, #0]
 8010b94:	9b03      	ldr	r3, [sp, #12]
 8010b96:	f012 0f02 	tst.w	r2, #2
 8010b9a:	ec57 6b10 	vmov	r6, r7, d0
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	d021      	beq.n	8010be6 <_scanf_float+0x3d6>
 8010ba2:	9903      	ldr	r1, [sp, #12]
 8010ba4:	1d1a      	adds	r2, r3, #4
 8010ba6:	600a      	str	r2, [r1, #0]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	e9c3 6700 	strd	r6, r7, [r3]
 8010bae:	68e3      	ldr	r3, [r4, #12]
 8010bb0:	3301      	adds	r3, #1
 8010bb2:	60e3      	str	r3, [r4, #12]
 8010bb4:	e66d      	b.n	8010892 <_scanf_float+0x82>
 8010bb6:	9b04      	ldr	r3, [sp, #16]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d0e5      	beq.n	8010b88 <_scanf_float+0x378>
 8010bbc:	9905      	ldr	r1, [sp, #20]
 8010bbe:	230a      	movs	r3, #10
 8010bc0:	462a      	mov	r2, r5
 8010bc2:	3101      	adds	r1, #1
 8010bc4:	4640      	mov	r0, r8
 8010bc6:	f000 ff05 	bl	80119d4 <_strtol_r>
 8010bca:	9b04      	ldr	r3, [sp, #16]
 8010bcc:	9e05      	ldr	r6, [sp, #20]
 8010bce:	1ac2      	subs	r2, r0, r3
 8010bd0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010bd4:	429e      	cmp	r6, r3
 8010bd6:	bf28      	it	cs
 8010bd8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010bdc:	4912      	ldr	r1, [pc, #72]	; (8010c28 <_scanf_float+0x418>)
 8010bde:	4630      	mov	r0, r6
 8010be0:	f000 f82c 	bl	8010c3c <siprintf>
 8010be4:	e7d0      	b.n	8010b88 <_scanf_float+0x378>
 8010be6:	9903      	ldr	r1, [sp, #12]
 8010be8:	f012 0f04 	tst.w	r2, #4
 8010bec:	f103 0204 	add.w	r2, r3, #4
 8010bf0:	600a      	str	r2, [r1, #0]
 8010bf2:	d1d9      	bne.n	8010ba8 <_scanf_float+0x398>
 8010bf4:	f8d3 8000 	ldr.w	r8, [r3]
 8010bf8:	ee10 2a10 	vmov	r2, s0
 8010bfc:	ee10 0a10 	vmov	r0, s0
 8010c00:	463b      	mov	r3, r7
 8010c02:	4639      	mov	r1, r7
 8010c04:	f7ef ff92 	bl	8000b2c <__aeabi_dcmpun>
 8010c08:	b128      	cbz	r0, 8010c16 <_scanf_float+0x406>
 8010c0a:	4808      	ldr	r0, [pc, #32]	; (8010c2c <_scanf_float+0x41c>)
 8010c0c:	f000 f810 	bl	8010c30 <nanf>
 8010c10:	ed88 0a00 	vstr	s0, [r8]
 8010c14:	e7cb      	b.n	8010bae <_scanf_float+0x39e>
 8010c16:	4630      	mov	r0, r6
 8010c18:	4639      	mov	r1, r7
 8010c1a:	f7ef ffe5 	bl	8000be8 <__aeabi_d2f>
 8010c1e:	f8c8 0000 	str.w	r0, [r8]
 8010c22:	e7c4      	b.n	8010bae <_scanf_float+0x39e>
 8010c24:	2500      	movs	r5, #0
 8010c26:	e634      	b.n	8010892 <_scanf_float+0x82>
 8010c28:	08015448 	.word	0x08015448
 8010c2c:	08015850 	.word	0x08015850

08010c30 <nanf>:
 8010c30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010c38 <nanf+0x8>
 8010c34:	4770      	bx	lr
 8010c36:	bf00      	nop
 8010c38:	7fc00000 	.word	0x7fc00000

08010c3c <siprintf>:
 8010c3c:	b40e      	push	{r1, r2, r3}
 8010c3e:	b500      	push	{lr}
 8010c40:	b09c      	sub	sp, #112	; 0x70
 8010c42:	ab1d      	add	r3, sp, #116	; 0x74
 8010c44:	9002      	str	r0, [sp, #8]
 8010c46:	9006      	str	r0, [sp, #24]
 8010c48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010c4c:	4809      	ldr	r0, [pc, #36]	; (8010c74 <siprintf+0x38>)
 8010c4e:	9107      	str	r1, [sp, #28]
 8010c50:	9104      	str	r1, [sp, #16]
 8010c52:	4909      	ldr	r1, [pc, #36]	; (8010c78 <siprintf+0x3c>)
 8010c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c58:	9105      	str	r1, [sp, #20]
 8010c5a:	6800      	ldr	r0, [r0, #0]
 8010c5c:	9301      	str	r3, [sp, #4]
 8010c5e:	a902      	add	r1, sp, #8
 8010c60:	f002 fed6 	bl	8013a10 <_svfiprintf_r>
 8010c64:	9b02      	ldr	r3, [sp, #8]
 8010c66:	2200      	movs	r2, #0
 8010c68:	701a      	strb	r2, [r3, #0]
 8010c6a:	b01c      	add	sp, #112	; 0x70
 8010c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c70:	b003      	add	sp, #12
 8010c72:	4770      	bx	lr
 8010c74:	20000014 	.word	0x20000014
 8010c78:	ffff0208 	.word	0xffff0208

08010c7c <sulp>:
 8010c7c:	b570      	push	{r4, r5, r6, lr}
 8010c7e:	4604      	mov	r4, r0
 8010c80:	460d      	mov	r5, r1
 8010c82:	ec45 4b10 	vmov	d0, r4, r5
 8010c86:	4616      	mov	r6, r2
 8010c88:	f002 fc20 	bl	80134cc <__ulp>
 8010c8c:	ec51 0b10 	vmov	r0, r1, d0
 8010c90:	b17e      	cbz	r6, 8010cb2 <sulp+0x36>
 8010c92:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010c96:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	dd09      	ble.n	8010cb2 <sulp+0x36>
 8010c9e:	051b      	lsls	r3, r3, #20
 8010ca0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010ca4:	2400      	movs	r4, #0
 8010ca6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010caa:	4622      	mov	r2, r4
 8010cac:	462b      	mov	r3, r5
 8010cae:	f7ef fca3 	bl	80005f8 <__aeabi_dmul>
 8010cb2:	bd70      	pop	{r4, r5, r6, pc}
 8010cb4:	0000      	movs	r0, r0
	...

08010cb8 <_strtod_l>:
 8010cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cbc:	ed2d 8b02 	vpush	{d8}
 8010cc0:	b09d      	sub	sp, #116	; 0x74
 8010cc2:	461f      	mov	r7, r3
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	9318      	str	r3, [sp, #96]	; 0x60
 8010cc8:	4ba2      	ldr	r3, [pc, #648]	; (8010f54 <_strtod_l+0x29c>)
 8010cca:	9213      	str	r2, [sp, #76]	; 0x4c
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	9305      	str	r3, [sp, #20]
 8010cd0:	4604      	mov	r4, r0
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	4688      	mov	r8, r1
 8010cd6:	f7ef fa7b 	bl	80001d0 <strlen>
 8010cda:	f04f 0a00 	mov.w	sl, #0
 8010cde:	4605      	mov	r5, r0
 8010ce0:	f04f 0b00 	mov.w	fp, #0
 8010ce4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010ce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010cea:	781a      	ldrb	r2, [r3, #0]
 8010cec:	2a2b      	cmp	r2, #43	; 0x2b
 8010cee:	d04e      	beq.n	8010d8e <_strtod_l+0xd6>
 8010cf0:	d83b      	bhi.n	8010d6a <_strtod_l+0xb2>
 8010cf2:	2a0d      	cmp	r2, #13
 8010cf4:	d834      	bhi.n	8010d60 <_strtod_l+0xa8>
 8010cf6:	2a08      	cmp	r2, #8
 8010cf8:	d834      	bhi.n	8010d64 <_strtod_l+0xac>
 8010cfa:	2a00      	cmp	r2, #0
 8010cfc:	d03e      	beq.n	8010d7c <_strtod_l+0xc4>
 8010cfe:	2300      	movs	r3, #0
 8010d00:	930a      	str	r3, [sp, #40]	; 0x28
 8010d02:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010d04:	7833      	ldrb	r3, [r6, #0]
 8010d06:	2b30      	cmp	r3, #48	; 0x30
 8010d08:	f040 80b0 	bne.w	8010e6c <_strtod_l+0x1b4>
 8010d0c:	7873      	ldrb	r3, [r6, #1]
 8010d0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010d12:	2b58      	cmp	r3, #88	; 0x58
 8010d14:	d168      	bne.n	8010de8 <_strtod_l+0x130>
 8010d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d18:	9301      	str	r3, [sp, #4]
 8010d1a:	ab18      	add	r3, sp, #96	; 0x60
 8010d1c:	9702      	str	r7, [sp, #8]
 8010d1e:	9300      	str	r3, [sp, #0]
 8010d20:	4a8d      	ldr	r2, [pc, #564]	; (8010f58 <_strtod_l+0x2a0>)
 8010d22:	ab19      	add	r3, sp, #100	; 0x64
 8010d24:	a917      	add	r1, sp, #92	; 0x5c
 8010d26:	4620      	mov	r0, r4
 8010d28:	f001 fd38 	bl	801279c <__gethex>
 8010d2c:	f010 0707 	ands.w	r7, r0, #7
 8010d30:	4605      	mov	r5, r0
 8010d32:	d005      	beq.n	8010d40 <_strtod_l+0x88>
 8010d34:	2f06      	cmp	r7, #6
 8010d36:	d12c      	bne.n	8010d92 <_strtod_l+0xda>
 8010d38:	3601      	adds	r6, #1
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	9617      	str	r6, [sp, #92]	; 0x5c
 8010d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8010d40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	f040 8590 	bne.w	8011868 <_strtod_l+0xbb0>
 8010d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d4a:	b1eb      	cbz	r3, 8010d88 <_strtod_l+0xd0>
 8010d4c:	4652      	mov	r2, sl
 8010d4e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010d52:	ec43 2b10 	vmov	d0, r2, r3
 8010d56:	b01d      	add	sp, #116	; 0x74
 8010d58:	ecbd 8b02 	vpop	{d8}
 8010d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d60:	2a20      	cmp	r2, #32
 8010d62:	d1cc      	bne.n	8010cfe <_strtod_l+0x46>
 8010d64:	3301      	adds	r3, #1
 8010d66:	9317      	str	r3, [sp, #92]	; 0x5c
 8010d68:	e7be      	b.n	8010ce8 <_strtod_l+0x30>
 8010d6a:	2a2d      	cmp	r2, #45	; 0x2d
 8010d6c:	d1c7      	bne.n	8010cfe <_strtod_l+0x46>
 8010d6e:	2201      	movs	r2, #1
 8010d70:	920a      	str	r2, [sp, #40]	; 0x28
 8010d72:	1c5a      	adds	r2, r3, #1
 8010d74:	9217      	str	r2, [sp, #92]	; 0x5c
 8010d76:	785b      	ldrb	r3, [r3, #1]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d1c2      	bne.n	8010d02 <_strtod_l+0x4a>
 8010d7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d7e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	f040 856e 	bne.w	8011864 <_strtod_l+0xbac>
 8010d88:	4652      	mov	r2, sl
 8010d8a:	465b      	mov	r3, fp
 8010d8c:	e7e1      	b.n	8010d52 <_strtod_l+0x9a>
 8010d8e:	2200      	movs	r2, #0
 8010d90:	e7ee      	b.n	8010d70 <_strtod_l+0xb8>
 8010d92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010d94:	b13a      	cbz	r2, 8010da6 <_strtod_l+0xee>
 8010d96:	2135      	movs	r1, #53	; 0x35
 8010d98:	a81a      	add	r0, sp, #104	; 0x68
 8010d9a:	f002 fca2 	bl	80136e2 <__copybits>
 8010d9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010da0:	4620      	mov	r0, r4
 8010da2:	f002 f861 	bl	8012e68 <_Bfree>
 8010da6:	3f01      	subs	r7, #1
 8010da8:	2f04      	cmp	r7, #4
 8010daa:	d806      	bhi.n	8010dba <_strtod_l+0x102>
 8010dac:	e8df f007 	tbb	[pc, r7]
 8010db0:	1714030a 	.word	0x1714030a
 8010db4:	0a          	.byte	0x0a
 8010db5:	00          	.byte	0x00
 8010db6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010dba:	0728      	lsls	r0, r5, #28
 8010dbc:	d5c0      	bpl.n	8010d40 <_strtod_l+0x88>
 8010dbe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010dc2:	e7bd      	b.n	8010d40 <_strtod_l+0x88>
 8010dc4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010dc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010dca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010dce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010dd2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010dd6:	e7f0      	b.n	8010dba <_strtod_l+0x102>
 8010dd8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010f5c <_strtod_l+0x2a4>
 8010ddc:	e7ed      	b.n	8010dba <_strtod_l+0x102>
 8010dde:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010de2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010de6:	e7e8      	b.n	8010dba <_strtod_l+0x102>
 8010de8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010dea:	1c5a      	adds	r2, r3, #1
 8010dec:	9217      	str	r2, [sp, #92]	; 0x5c
 8010dee:	785b      	ldrb	r3, [r3, #1]
 8010df0:	2b30      	cmp	r3, #48	; 0x30
 8010df2:	d0f9      	beq.n	8010de8 <_strtod_l+0x130>
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d0a3      	beq.n	8010d40 <_strtod_l+0x88>
 8010df8:	2301      	movs	r3, #1
 8010dfa:	f04f 0900 	mov.w	r9, #0
 8010dfe:	9304      	str	r3, [sp, #16]
 8010e00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e02:	9308      	str	r3, [sp, #32]
 8010e04:	f8cd 901c 	str.w	r9, [sp, #28]
 8010e08:	464f      	mov	r7, r9
 8010e0a:	220a      	movs	r2, #10
 8010e0c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010e0e:	7806      	ldrb	r6, [r0, #0]
 8010e10:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010e14:	b2d9      	uxtb	r1, r3
 8010e16:	2909      	cmp	r1, #9
 8010e18:	d92a      	bls.n	8010e70 <_strtod_l+0x1b8>
 8010e1a:	9905      	ldr	r1, [sp, #20]
 8010e1c:	462a      	mov	r2, r5
 8010e1e:	f002 ff0f 	bl	8013c40 <strncmp>
 8010e22:	b398      	cbz	r0, 8010e8c <_strtod_l+0x1d4>
 8010e24:	2000      	movs	r0, #0
 8010e26:	4632      	mov	r2, r6
 8010e28:	463d      	mov	r5, r7
 8010e2a:	9005      	str	r0, [sp, #20]
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	2a65      	cmp	r2, #101	; 0x65
 8010e30:	d001      	beq.n	8010e36 <_strtod_l+0x17e>
 8010e32:	2a45      	cmp	r2, #69	; 0x45
 8010e34:	d118      	bne.n	8010e68 <_strtod_l+0x1b0>
 8010e36:	b91d      	cbnz	r5, 8010e40 <_strtod_l+0x188>
 8010e38:	9a04      	ldr	r2, [sp, #16]
 8010e3a:	4302      	orrs	r2, r0
 8010e3c:	d09e      	beq.n	8010d7c <_strtod_l+0xc4>
 8010e3e:	2500      	movs	r5, #0
 8010e40:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8010e44:	f108 0201 	add.w	r2, r8, #1
 8010e48:	9217      	str	r2, [sp, #92]	; 0x5c
 8010e4a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010e4e:	2a2b      	cmp	r2, #43	; 0x2b
 8010e50:	d075      	beq.n	8010f3e <_strtod_l+0x286>
 8010e52:	2a2d      	cmp	r2, #45	; 0x2d
 8010e54:	d07b      	beq.n	8010f4e <_strtod_l+0x296>
 8010e56:	f04f 0c00 	mov.w	ip, #0
 8010e5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010e5e:	2909      	cmp	r1, #9
 8010e60:	f240 8082 	bls.w	8010f68 <_strtod_l+0x2b0>
 8010e64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010e68:	2600      	movs	r6, #0
 8010e6a:	e09d      	b.n	8010fa8 <_strtod_l+0x2f0>
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	e7c4      	b.n	8010dfa <_strtod_l+0x142>
 8010e70:	2f08      	cmp	r7, #8
 8010e72:	bfd8      	it	le
 8010e74:	9907      	ldrle	r1, [sp, #28]
 8010e76:	f100 0001 	add.w	r0, r0, #1
 8010e7a:	bfda      	itte	le
 8010e7c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010e80:	9307      	strle	r3, [sp, #28]
 8010e82:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010e86:	3701      	adds	r7, #1
 8010e88:	9017      	str	r0, [sp, #92]	; 0x5c
 8010e8a:	e7bf      	b.n	8010e0c <_strtod_l+0x154>
 8010e8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e8e:	195a      	adds	r2, r3, r5
 8010e90:	9217      	str	r2, [sp, #92]	; 0x5c
 8010e92:	5d5a      	ldrb	r2, [r3, r5]
 8010e94:	2f00      	cmp	r7, #0
 8010e96:	d037      	beq.n	8010f08 <_strtod_l+0x250>
 8010e98:	9005      	str	r0, [sp, #20]
 8010e9a:	463d      	mov	r5, r7
 8010e9c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010ea0:	2b09      	cmp	r3, #9
 8010ea2:	d912      	bls.n	8010eca <_strtod_l+0x212>
 8010ea4:	2301      	movs	r3, #1
 8010ea6:	e7c2      	b.n	8010e2e <_strtod_l+0x176>
 8010ea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010eaa:	1c5a      	adds	r2, r3, #1
 8010eac:	9217      	str	r2, [sp, #92]	; 0x5c
 8010eae:	785a      	ldrb	r2, [r3, #1]
 8010eb0:	3001      	adds	r0, #1
 8010eb2:	2a30      	cmp	r2, #48	; 0x30
 8010eb4:	d0f8      	beq.n	8010ea8 <_strtod_l+0x1f0>
 8010eb6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010eba:	2b08      	cmp	r3, #8
 8010ebc:	f200 84d9 	bhi.w	8011872 <_strtod_l+0xbba>
 8010ec0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ec2:	9005      	str	r0, [sp, #20]
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	9308      	str	r3, [sp, #32]
 8010ec8:	4605      	mov	r5, r0
 8010eca:	3a30      	subs	r2, #48	; 0x30
 8010ecc:	f100 0301 	add.w	r3, r0, #1
 8010ed0:	d014      	beq.n	8010efc <_strtod_l+0x244>
 8010ed2:	9905      	ldr	r1, [sp, #20]
 8010ed4:	4419      	add	r1, r3
 8010ed6:	9105      	str	r1, [sp, #20]
 8010ed8:	462b      	mov	r3, r5
 8010eda:	eb00 0e05 	add.w	lr, r0, r5
 8010ede:	210a      	movs	r1, #10
 8010ee0:	4573      	cmp	r3, lr
 8010ee2:	d113      	bne.n	8010f0c <_strtod_l+0x254>
 8010ee4:	182b      	adds	r3, r5, r0
 8010ee6:	2b08      	cmp	r3, #8
 8010ee8:	f105 0501 	add.w	r5, r5, #1
 8010eec:	4405      	add	r5, r0
 8010eee:	dc1c      	bgt.n	8010f2a <_strtod_l+0x272>
 8010ef0:	9907      	ldr	r1, [sp, #28]
 8010ef2:	230a      	movs	r3, #10
 8010ef4:	fb03 2301 	mla	r3, r3, r1, r2
 8010ef8:	9307      	str	r3, [sp, #28]
 8010efa:	2300      	movs	r3, #0
 8010efc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010efe:	1c51      	adds	r1, r2, #1
 8010f00:	9117      	str	r1, [sp, #92]	; 0x5c
 8010f02:	7852      	ldrb	r2, [r2, #1]
 8010f04:	4618      	mov	r0, r3
 8010f06:	e7c9      	b.n	8010e9c <_strtod_l+0x1e4>
 8010f08:	4638      	mov	r0, r7
 8010f0a:	e7d2      	b.n	8010eb2 <_strtod_l+0x1fa>
 8010f0c:	2b08      	cmp	r3, #8
 8010f0e:	dc04      	bgt.n	8010f1a <_strtod_l+0x262>
 8010f10:	9e07      	ldr	r6, [sp, #28]
 8010f12:	434e      	muls	r6, r1
 8010f14:	9607      	str	r6, [sp, #28]
 8010f16:	3301      	adds	r3, #1
 8010f18:	e7e2      	b.n	8010ee0 <_strtod_l+0x228>
 8010f1a:	f103 0c01 	add.w	ip, r3, #1
 8010f1e:	f1bc 0f10 	cmp.w	ip, #16
 8010f22:	bfd8      	it	le
 8010f24:	fb01 f909 	mulle.w	r9, r1, r9
 8010f28:	e7f5      	b.n	8010f16 <_strtod_l+0x25e>
 8010f2a:	2d10      	cmp	r5, #16
 8010f2c:	bfdc      	itt	le
 8010f2e:	230a      	movle	r3, #10
 8010f30:	fb03 2909 	mlale	r9, r3, r9, r2
 8010f34:	e7e1      	b.n	8010efa <_strtod_l+0x242>
 8010f36:	2300      	movs	r3, #0
 8010f38:	9305      	str	r3, [sp, #20]
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	e77c      	b.n	8010e38 <_strtod_l+0x180>
 8010f3e:	f04f 0c00 	mov.w	ip, #0
 8010f42:	f108 0202 	add.w	r2, r8, #2
 8010f46:	9217      	str	r2, [sp, #92]	; 0x5c
 8010f48:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010f4c:	e785      	b.n	8010e5a <_strtod_l+0x1a2>
 8010f4e:	f04f 0c01 	mov.w	ip, #1
 8010f52:	e7f6      	b.n	8010f42 <_strtod_l+0x28a>
 8010f54:	08015698 	.word	0x08015698
 8010f58:	08015450 	.word	0x08015450
 8010f5c:	7ff00000 	.word	0x7ff00000
 8010f60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010f62:	1c51      	adds	r1, r2, #1
 8010f64:	9117      	str	r1, [sp, #92]	; 0x5c
 8010f66:	7852      	ldrb	r2, [r2, #1]
 8010f68:	2a30      	cmp	r2, #48	; 0x30
 8010f6a:	d0f9      	beq.n	8010f60 <_strtod_l+0x2a8>
 8010f6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010f70:	2908      	cmp	r1, #8
 8010f72:	f63f af79 	bhi.w	8010e68 <_strtod_l+0x1b0>
 8010f76:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010f7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010f7c:	9206      	str	r2, [sp, #24]
 8010f7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010f80:	1c51      	adds	r1, r2, #1
 8010f82:	9117      	str	r1, [sp, #92]	; 0x5c
 8010f84:	7852      	ldrb	r2, [r2, #1]
 8010f86:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010f8a:	2e09      	cmp	r6, #9
 8010f8c:	d937      	bls.n	8010ffe <_strtod_l+0x346>
 8010f8e:	9e06      	ldr	r6, [sp, #24]
 8010f90:	1b89      	subs	r1, r1, r6
 8010f92:	2908      	cmp	r1, #8
 8010f94:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010f98:	dc02      	bgt.n	8010fa0 <_strtod_l+0x2e8>
 8010f9a:	4576      	cmp	r6, lr
 8010f9c:	bfa8      	it	ge
 8010f9e:	4676      	movge	r6, lr
 8010fa0:	f1bc 0f00 	cmp.w	ip, #0
 8010fa4:	d000      	beq.n	8010fa8 <_strtod_l+0x2f0>
 8010fa6:	4276      	negs	r6, r6
 8010fa8:	2d00      	cmp	r5, #0
 8010faa:	d14d      	bne.n	8011048 <_strtod_l+0x390>
 8010fac:	9904      	ldr	r1, [sp, #16]
 8010fae:	4301      	orrs	r1, r0
 8010fb0:	f47f aec6 	bne.w	8010d40 <_strtod_l+0x88>
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	f47f aee1 	bne.w	8010d7c <_strtod_l+0xc4>
 8010fba:	2a69      	cmp	r2, #105	; 0x69
 8010fbc:	d027      	beq.n	801100e <_strtod_l+0x356>
 8010fbe:	dc24      	bgt.n	801100a <_strtod_l+0x352>
 8010fc0:	2a49      	cmp	r2, #73	; 0x49
 8010fc2:	d024      	beq.n	801100e <_strtod_l+0x356>
 8010fc4:	2a4e      	cmp	r2, #78	; 0x4e
 8010fc6:	f47f aed9 	bne.w	8010d7c <_strtod_l+0xc4>
 8010fca:	499f      	ldr	r1, [pc, #636]	; (8011248 <_strtod_l+0x590>)
 8010fcc:	a817      	add	r0, sp, #92	; 0x5c
 8010fce:	f001 fe3d 	bl	8012c4c <__match>
 8010fd2:	2800      	cmp	r0, #0
 8010fd4:	f43f aed2 	beq.w	8010d7c <_strtod_l+0xc4>
 8010fd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	2b28      	cmp	r3, #40	; 0x28
 8010fde:	d12d      	bne.n	801103c <_strtod_l+0x384>
 8010fe0:	499a      	ldr	r1, [pc, #616]	; (801124c <_strtod_l+0x594>)
 8010fe2:	aa1a      	add	r2, sp, #104	; 0x68
 8010fe4:	a817      	add	r0, sp, #92	; 0x5c
 8010fe6:	f001 fe45 	bl	8012c74 <__hexnan>
 8010fea:	2805      	cmp	r0, #5
 8010fec:	d126      	bne.n	801103c <_strtod_l+0x384>
 8010fee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010ff0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8010ff4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010ff8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010ffc:	e6a0      	b.n	8010d40 <_strtod_l+0x88>
 8010ffe:	210a      	movs	r1, #10
 8011000:	fb01 2e0e 	mla	lr, r1, lr, r2
 8011004:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011008:	e7b9      	b.n	8010f7e <_strtod_l+0x2c6>
 801100a:	2a6e      	cmp	r2, #110	; 0x6e
 801100c:	e7db      	b.n	8010fc6 <_strtod_l+0x30e>
 801100e:	4990      	ldr	r1, [pc, #576]	; (8011250 <_strtod_l+0x598>)
 8011010:	a817      	add	r0, sp, #92	; 0x5c
 8011012:	f001 fe1b 	bl	8012c4c <__match>
 8011016:	2800      	cmp	r0, #0
 8011018:	f43f aeb0 	beq.w	8010d7c <_strtod_l+0xc4>
 801101c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801101e:	498d      	ldr	r1, [pc, #564]	; (8011254 <_strtod_l+0x59c>)
 8011020:	3b01      	subs	r3, #1
 8011022:	a817      	add	r0, sp, #92	; 0x5c
 8011024:	9317      	str	r3, [sp, #92]	; 0x5c
 8011026:	f001 fe11 	bl	8012c4c <__match>
 801102a:	b910      	cbnz	r0, 8011032 <_strtod_l+0x37a>
 801102c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801102e:	3301      	adds	r3, #1
 8011030:	9317      	str	r3, [sp, #92]	; 0x5c
 8011032:	f8df b230 	ldr.w	fp, [pc, #560]	; 8011264 <_strtod_l+0x5ac>
 8011036:	f04f 0a00 	mov.w	sl, #0
 801103a:	e681      	b.n	8010d40 <_strtod_l+0x88>
 801103c:	4886      	ldr	r0, [pc, #536]	; (8011258 <_strtod_l+0x5a0>)
 801103e:	f002 fde7 	bl	8013c10 <nan>
 8011042:	ec5b ab10 	vmov	sl, fp, d0
 8011046:	e67b      	b.n	8010d40 <_strtod_l+0x88>
 8011048:	9b05      	ldr	r3, [sp, #20]
 801104a:	9807      	ldr	r0, [sp, #28]
 801104c:	1af3      	subs	r3, r6, r3
 801104e:	2f00      	cmp	r7, #0
 8011050:	bf08      	it	eq
 8011052:	462f      	moveq	r7, r5
 8011054:	2d10      	cmp	r5, #16
 8011056:	9306      	str	r3, [sp, #24]
 8011058:	46a8      	mov	r8, r5
 801105a:	bfa8      	it	ge
 801105c:	f04f 0810 	movge.w	r8, #16
 8011060:	f7ef fa50 	bl	8000504 <__aeabi_ui2d>
 8011064:	2d09      	cmp	r5, #9
 8011066:	4682      	mov	sl, r0
 8011068:	468b      	mov	fp, r1
 801106a:	dd13      	ble.n	8011094 <_strtod_l+0x3dc>
 801106c:	4b7b      	ldr	r3, [pc, #492]	; (801125c <_strtod_l+0x5a4>)
 801106e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011072:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011076:	f7ef fabf 	bl	80005f8 <__aeabi_dmul>
 801107a:	4682      	mov	sl, r0
 801107c:	4648      	mov	r0, r9
 801107e:	468b      	mov	fp, r1
 8011080:	f7ef fa40 	bl	8000504 <__aeabi_ui2d>
 8011084:	4602      	mov	r2, r0
 8011086:	460b      	mov	r3, r1
 8011088:	4650      	mov	r0, sl
 801108a:	4659      	mov	r1, fp
 801108c:	f7ef f8fe 	bl	800028c <__adddf3>
 8011090:	4682      	mov	sl, r0
 8011092:	468b      	mov	fp, r1
 8011094:	2d0f      	cmp	r5, #15
 8011096:	dc38      	bgt.n	801110a <_strtod_l+0x452>
 8011098:	9b06      	ldr	r3, [sp, #24]
 801109a:	2b00      	cmp	r3, #0
 801109c:	f43f ae50 	beq.w	8010d40 <_strtod_l+0x88>
 80110a0:	dd24      	ble.n	80110ec <_strtod_l+0x434>
 80110a2:	2b16      	cmp	r3, #22
 80110a4:	dc0b      	bgt.n	80110be <_strtod_l+0x406>
 80110a6:	496d      	ldr	r1, [pc, #436]	; (801125c <_strtod_l+0x5a4>)
 80110a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80110ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110b0:	4652      	mov	r2, sl
 80110b2:	465b      	mov	r3, fp
 80110b4:	f7ef faa0 	bl	80005f8 <__aeabi_dmul>
 80110b8:	4682      	mov	sl, r0
 80110ba:	468b      	mov	fp, r1
 80110bc:	e640      	b.n	8010d40 <_strtod_l+0x88>
 80110be:	9a06      	ldr	r2, [sp, #24]
 80110c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80110c4:	4293      	cmp	r3, r2
 80110c6:	db20      	blt.n	801110a <_strtod_l+0x452>
 80110c8:	4c64      	ldr	r4, [pc, #400]	; (801125c <_strtod_l+0x5a4>)
 80110ca:	f1c5 050f 	rsb	r5, r5, #15
 80110ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80110d2:	4652      	mov	r2, sl
 80110d4:	465b      	mov	r3, fp
 80110d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110da:	f7ef fa8d 	bl	80005f8 <__aeabi_dmul>
 80110de:	9b06      	ldr	r3, [sp, #24]
 80110e0:	1b5d      	subs	r5, r3, r5
 80110e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80110e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80110ea:	e7e3      	b.n	80110b4 <_strtod_l+0x3fc>
 80110ec:	9b06      	ldr	r3, [sp, #24]
 80110ee:	3316      	adds	r3, #22
 80110f0:	db0b      	blt.n	801110a <_strtod_l+0x452>
 80110f2:	9b05      	ldr	r3, [sp, #20]
 80110f4:	1b9e      	subs	r6, r3, r6
 80110f6:	4b59      	ldr	r3, [pc, #356]	; (801125c <_strtod_l+0x5a4>)
 80110f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80110fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011100:	4650      	mov	r0, sl
 8011102:	4659      	mov	r1, fp
 8011104:	f7ef fba2 	bl	800084c <__aeabi_ddiv>
 8011108:	e7d6      	b.n	80110b8 <_strtod_l+0x400>
 801110a:	9b06      	ldr	r3, [sp, #24]
 801110c:	eba5 0808 	sub.w	r8, r5, r8
 8011110:	4498      	add	r8, r3
 8011112:	f1b8 0f00 	cmp.w	r8, #0
 8011116:	dd74      	ble.n	8011202 <_strtod_l+0x54a>
 8011118:	f018 030f 	ands.w	r3, r8, #15
 801111c:	d00a      	beq.n	8011134 <_strtod_l+0x47c>
 801111e:	494f      	ldr	r1, [pc, #316]	; (801125c <_strtod_l+0x5a4>)
 8011120:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011124:	4652      	mov	r2, sl
 8011126:	465b      	mov	r3, fp
 8011128:	e9d1 0100 	ldrd	r0, r1, [r1]
 801112c:	f7ef fa64 	bl	80005f8 <__aeabi_dmul>
 8011130:	4682      	mov	sl, r0
 8011132:	468b      	mov	fp, r1
 8011134:	f038 080f 	bics.w	r8, r8, #15
 8011138:	d04f      	beq.n	80111da <_strtod_l+0x522>
 801113a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801113e:	dd22      	ble.n	8011186 <_strtod_l+0x4ce>
 8011140:	2500      	movs	r5, #0
 8011142:	462e      	mov	r6, r5
 8011144:	9507      	str	r5, [sp, #28]
 8011146:	9505      	str	r5, [sp, #20]
 8011148:	2322      	movs	r3, #34	; 0x22
 801114a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8011264 <_strtod_l+0x5ac>
 801114e:	6023      	str	r3, [r4, #0]
 8011150:	f04f 0a00 	mov.w	sl, #0
 8011154:	9b07      	ldr	r3, [sp, #28]
 8011156:	2b00      	cmp	r3, #0
 8011158:	f43f adf2 	beq.w	8010d40 <_strtod_l+0x88>
 801115c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801115e:	4620      	mov	r0, r4
 8011160:	f001 fe82 	bl	8012e68 <_Bfree>
 8011164:	9905      	ldr	r1, [sp, #20]
 8011166:	4620      	mov	r0, r4
 8011168:	f001 fe7e 	bl	8012e68 <_Bfree>
 801116c:	4631      	mov	r1, r6
 801116e:	4620      	mov	r0, r4
 8011170:	f001 fe7a 	bl	8012e68 <_Bfree>
 8011174:	9907      	ldr	r1, [sp, #28]
 8011176:	4620      	mov	r0, r4
 8011178:	f001 fe76 	bl	8012e68 <_Bfree>
 801117c:	4629      	mov	r1, r5
 801117e:	4620      	mov	r0, r4
 8011180:	f001 fe72 	bl	8012e68 <_Bfree>
 8011184:	e5dc      	b.n	8010d40 <_strtod_l+0x88>
 8011186:	4b36      	ldr	r3, [pc, #216]	; (8011260 <_strtod_l+0x5a8>)
 8011188:	9304      	str	r3, [sp, #16]
 801118a:	2300      	movs	r3, #0
 801118c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011190:	4650      	mov	r0, sl
 8011192:	4659      	mov	r1, fp
 8011194:	4699      	mov	r9, r3
 8011196:	f1b8 0f01 	cmp.w	r8, #1
 801119a:	dc21      	bgt.n	80111e0 <_strtod_l+0x528>
 801119c:	b10b      	cbz	r3, 80111a2 <_strtod_l+0x4ea>
 801119e:	4682      	mov	sl, r0
 80111a0:	468b      	mov	fp, r1
 80111a2:	4b2f      	ldr	r3, [pc, #188]	; (8011260 <_strtod_l+0x5a8>)
 80111a4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80111a8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80111ac:	4652      	mov	r2, sl
 80111ae:	465b      	mov	r3, fp
 80111b0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80111b4:	f7ef fa20 	bl	80005f8 <__aeabi_dmul>
 80111b8:	4b2a      	ldr	r3, [pc, #168]	; (8011264 <_strtod_l+0x5ac>)
 80111ba:	460a      	mov	r2, r1
 80111bc:	400b      	ands	r3, r1
 80111be:	492a      	ldr	r1, [pc, #168]	; (8011268 <_strtod_l+0x5b0>)
 80111c0:	428b      	cmp	r3, r1
 80111c2:	4682      	mov	sl, r0
 80111c4:	d8bc      	bhi.n	8011140 <_strtod_l+0x488>
 80111c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80111ca:	428b      	cmp	r3, r1
 80111cc:	bf86      	itte	hi
 80111ce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801126c <_strtod_l+0x5b4>
 80111d2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80111d6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80111da:	2300      	movs	r3, #0
 80111dc:	9304      	str	r3, [sp, #16]
 80111de:	e084      	b.n	80112ea <_strtod_l+0x632>
 80111e0:	f018 0f01 	tst.w	r8, #1
 80111e4:	d005      	beq.n	80111f2 <_strtod_l+0x53a>
 80111e6:	9b04      	ldr	r3, [sp, #16]
 80111e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ec:	f7ef fa04 	bl	80005f8 <__aeabi_dmul>
 80111f0:	2301      	movs	r3, #1
 80111f2:	9a04      	ldr	r2, [sp, #16]
 80111f4:	3208      	adds	r2, #8
 80111f6:	f109 0901 	add.w	r9, r9, #1
 80111fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80111fe:	9204      	str	r2, [sp, #16]
 8011200:	e7c9      	b.n	8011196 <_strtod_l+0x4de>
 8011202:	d0ea      	beq.n	80111da <_strtod_l+0x522>
 8011204:	f1c8 0800 	rsb	r8, r8, #0
 8011208:	f018 020f 	ands.w	r2, r8, #15
 801120c:	d00a      	beq.n	8011224 <_strtod_l+0x56c>
 801120e:	4b13      	ldr	r3, [pc, #76]	; (801125c <_strtod_l+0x5a4>)
 8011210:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011214:	4650      	mov	r0, sl
 8011216:	4659      	mov	r1, fp
 8011218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801121c:	f7ef fb16 	bl	800084c <__aeabi_ddiv>
 8011220:	4682      	mov	sl, r0
 8011222:	468b      	mov	fp, r1
 8011224:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011228:	d0d7      	beq.n	80111da <_strtod_l+0x522>
 801122a:	f1b8 0f1f 	cmp.w	r8, #31
 801122e:	dd1f      	ble.n	8011270 <_strtod_l+0x5b8>
 8011230:	2500      	movs	r5, #0
 8011232:	462e      	mov	r6, r5
 8011234:	9507      	str	r5, [sp, #28]
 8011236:	9505      	str	r5, [sp, #20]
 8011238:	2322      	movs	r3, #34	; 0x22
 801123a:	f04f 0a00 	mov.w	sl, #0
 801123e:	f04f 0b00 	mov.w	fp, #0
 8011242:	6023      	str	r3, [r4, #0]
 8011244:	e786      	b.n	8011154 <_strtod_l+0x49c>
 8011246:	bf00      	nop
 8011248:	08015421 	.word	0x08015421
 801124c:	08015464 	.word	0x08015464
 8011250:	08015419 	.word	0x08015419
 8011254:	080155a4 	.word	0x080155a4
 8011258:	08015850 	.word	0x08015850
 801125c:	08015730 	.word	0x08015730
 8011260:	08015708 	.word	0x08015708
 8011264:	7ff00000 	.word	0x7ff00000
 8011268:	7ca00000 	.word	0x7ca00000
 801126c:	7fefffff 	.word	0x7fefffff
 8011270:	f018 0310 	ands.w	r3, r8, #16
 8011274:	bf18      	it	ne
 8011276:	236a      	movne	r3, #106	; 0x6a
 8011278:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8011628 <_strtod_l+0x970>
 801127c:	9304      	str	r3, [sp, #16]
 801127e:	4650      	mov	r0, sl
 8011280:	4659      	mov	r1, fp
 8011282:	2300      	movs	r3, #0
 8011284:	f018 0f01 	tst.w	r8, #1
 8011288:	d004      	beq.n	8011294 <_strtod_l+0x5dc>
 801128a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801128e:	f7ef f9b3 	bl	80005f8 <__aeabi_dmul>
 8011292:	2301      	movs	r3, #1
 8011294:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011298:	f109 0908 	add.w	r9, r9, #8
 801129c:	d1f2      	bne.n	8011284 <_strtod_l+0x5cc>
 801129e:	b10b      	cbz	r3, 80112a4 <_strtod_l+0x5ec>
 80112a0:	4682      	mov	sl, r0
 80112a2:	468b      	mov	fp, r1
 80112a4:	9b04      	ldr	r3, [sp, #16]
 80112a6:	b1c3      	cbz	r3, 80112da <_strtod_l+0x622>
 80112a8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80112ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	4659      	mov	r1, fp
 80112b4:	dd11      	ble.n	80112da <_strtod_l+0x622>
 80112b6:	2b1f      	cmp	r3, #31
 80112b8:	f340 8124 	ble.w	8011504 <_strtod_l+0x84c>
 80112bc:	2b34      	cmp	r3, #52	; 0x34
 80112be:	bfde      	ittt	le
 80112c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80112c4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80112c8:	fa03 f202 	lslle.w	r2, r3, r2
 80112cc:	f04f 0a00 	mov.w	sl, #0
 80112d0:	bfcc      	ite	gt
 80112d2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80112d6:	ea02 0b01 	andle.w	fp, r2, r1
 80112da:	2200      	movs	r2, #0
 80112dc:	2300      	movs	r3, #0
 80112de:	4650      	mov	r0, sl
 80112e0:	4659      	mov	r1, fp
 80112e2:	f7ef fbf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80112e6:	2800      	cmp	r0, #0
 80112e8:	d1a2      	bne.n	8011230 <_strtod_l+0x578>
 80112ea:	9b07      	ldr	r3, [sp, #28]
 80112ec:	9300      	str	r3, [sp, #0]
 80112ee:	9908      	ldr	r1, [sp, #32]
 80112f0:	462b      	mov	r3, r5
 80112f2:	463a      	mov	r2, r7
 80112f4:	4620      	mov	r0, r4
 80112f6:	f001 fe1f 	bl	8012f38 <__s2b>
 80112fa:	9007      	str	r0, [sp, #28]
 80112fc:	2800      	cmp	r0, #0
 80112fe:	f43f af1f 	beq.w	8011140 <_strtod_l+0x488>
 8011302:	9b05      	ldr	r3, [sp, #20]
 8011304:	1b9e      	subs	r6, r3, r6
 8011306:	9b06      	ldr	r3, [sp, #24]
 8011308:	2b00      	cmp	r3, #0
 801130a:	bfb4      	ite	lt
 801130c:	4633      	movlt	r3, r6
 801130e:	2300      	movge	r3, #0
 8011310:	930c      	str	r3, [sp, #48]	; 0x30
 8011312:	9b06      	ldr	r3, [sp, #24]
 8011314:	2500      	movs	r5, #0
 8011316:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801131a:	9312      	str	r3, [sp, #72]	; 0x48
 801131c:	462e      	mov	r6, r5
 801131e:	9b07      	ldr	r3, [sp, #28]
 8011320:	4620      	mov	r0, r4
 8011322:	6859      	ldr	r1, [r3, #4]
 8011324:	f001 fd60 	bl	8012de8 <_Balloc>
 8011328:	9005      	str	r0, [sp, #20]
 801132a:	2800      	cmp	r0, #0
 801132c:	f43f af0c 	beq.w	8011148 <_strtod_l+0x490>
 8011330:	9b07      	ldr	r3, [sp, #28]
 8011332:	691a      	ldr	r2, [r3, #16]
 8011334:	3202      	adds	r2, #2
 8011336:	f103 010c 	add.w	r1, r3, #12
 801133a:	0092      	lsls	r2, r2, #2
 801133c:	300c      	adds	r0, #12
 801133e:	f7fe fde7 	bl	800ff10 <memcpy>
 8011342:	ec4b ab10 	vmov	d0, sl, fp
 8011346:	aa1a      	add	r2, sp, #104	; 0x68
 8011348:	a919      	add	r1, sp, #100	; 0x64
 801134a:	4620      	mov	r0, r4
 801134c:	f002 f93a 	bl	80135c4 <__d2b>
 8011350:	ec4b ab18 	vmov	d8, sl, fp
 8011354:	9018      	str	r0, [sp, #96]	; 0x60
 8011356:	2800      	cmp	r0, #0
 8011358:	f43f aef6 	beq.w	8011148 <_strtod_l+0x490>
 801135c:	2101      	movs	r1, #1
 801135e:	4620      	mov	r0, r4
 8011360:	f001 fe84 	bl	801306c <__i2b>
 8011364:	4606      	mov	r6, r0
 8011366:	2800      	cmp	r0, #0
 8011368:	f43f aeee 	beq.w	8011148 <_strtod_l+0x490>
 801136c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801136e:	9904      	ldr	r1, [sp, #16]
 8011370:	2b00      	cmp	r3, #0
 8011372:	bfab      	itete	ge
 8011374:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8011376:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011378:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801137a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801137e:	bfac      	ite	ge
 8011380:	eb03 0902 	addge.w	r9, r3, r2
 8011384:	1ad7      	sublt	r7, r2, r3
 8011386:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011388:	eba3 0801 	sub.w	r8, r3, r1
 801138c:	4490      	add	r8, r2
 801138e:	4ba1      	ldr	r3, [pc, #644]	; (8011614 <_strtod_l+0x95c>)
 8011390:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011394:	4598      	cmp	r8, r3
 8011396:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801139a:	f280 80c7 	bge.w	801152c <_strtod_l+0x874>
 801139e:	eba3 0308 	sub.w	r3, r3, r8
 80113a2:	2b1f      	cmp	r3, #31
 80113a4:	eba2 0203 	sub.w	r2, r2, r3
 80113a8:	f04f 0101 	mov.w	r1, #1
 80113ac:	f300 80b1 	bgt.w	8011512 <_strtod_l+0x85a>
 80113b0:	fa01 f303 	lsl.w	r3, r1, r3
 80113b4:	930d      	str	r3, [sp, #52]	; 0x34
 80113b6:	2300      	movs	r3, #0
 80113b8:	9308      	str	r3, [sp, #32]
 80113ba:	eb09 0802 	add.w	r8, r9, r2
 80113be:	9b04      	ldr	r3, [sp, #16]
 80113c0:	45c1      	cmp	r9, r8
 80113c2:	4417      	add	r7, r2
 80113c4:	441f      	add	r7, r3
 80113c6:	464b      	mov	r3, r9
 80113c8:	bfa8      	it	ge
 80113ca:	4643      	movge	r3, r8
 80113cc:	42bb      	cmp	r3, r7
 80113ce:	bfa8      	it	ge
 80113d0:	463b      	movge	r3, r7
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	bfc2      	ittt	gt
 80113d6:	eba8 0803 	subgt.w	r8, r8, r3
 80113da:	1aff      	subgt	r7, r7, r3
 80113dc:	eba9 0903 	subgt.w	r9, r9, r3
 80113e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	dd17      	ble.n	8011416 <_strtod_l+0x75e>
 80113e6:	4631      	mov	r1, r6
 80113e8:	461a      	mov	r2, r3
 80113ea:	4620      	mov	r0, r4
 80113ec:	f001 fefe 	bl	80131ec <__pow5mult>
 80113f0:	4606      	mov	r6, r0
 80113f2:	2800      	cmp	r0, #0
 80113f4:	f43f aea8 	beq.w	8011148 <_strtod_l+0x490>
 80113f8:	4601      	mov	r1, r0
 80113fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80113fc:	4620      	mov	r0, r4
 80113fe:	f001 fe4b 	bl	8013098 <__multiply>
 8011402:	900b      	str	r0, [sp, #44]	; 0x2c
 8011404:	2800      	cmp	r0, #0
 8011406:	f43f ae9f 	beq.w	8011148 <_strtod_l+0x490>
 801140a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801140c:	4620      	mov	r0, r4
 801140e:	f001 fd2b 	bl	8012e68 <_Bfree>
 8011412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011414:	9318      	str	r3, [sp, #96]	; 0x60
 8011416:	f1b8 0f00 	cmp.w	r8, #0
 801141a:	f300 808c 	bgt.w	8011536 <_strtod_l+0x87e>
 801141e:	9b06      	ldr	r3, [sp, #24]
 8011420:	2b00      	cmp	r3, #0
 8011422:	dd08      	ble.n	8011436 <_strtod_l+0x77e>
 8011424:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011426:	9905      	ldr	r1, [sp, #20]
 8011428:	4620      	mov	r0, r4
 801142a:	f001 fedf 	bl	80131ec <__pow5mult>
 801142e:	9005      	str	r0, [sp, #20]
 8011430:	2800      	cmp	r0, #0
 8011432:	f43f ae89 	beq.w	8011148 <_strtod_l+0x490>
 8011436:	2f00      	cmp	r7, #0
 8011438:	dd08      	ble.n	801144c <_strtod_l+0x794>
 801143a:	9905      	ldr	r1, [sp, #20]
 801143c:	463a      	mov	r2, r7
 801143e:	4620      	mov	r0, r4
 8011440:	f001 ff2e 	bl	80132a0 <__lshift>
 8011444:	9005      	str	r0, [sp, #20]
 8011446:	2800      	cmp	r0, #0
 8011448:	f43f ae7e 	beq.w	8011148 <_strtod_l+0x490>
 801144c:	f1b9 0f00 	cmp.w	r9, #0
 8011450:	dd08      	ble.n	8011464 <_strtod_l+0x7ac>
 8011452:	4631      	mov	r1, r6
 8011454:	464a      	mov	r2, r9
 8011456:	4620      	mov	r0, r4
 8011458:	f001 ff22 	bl	80132a0 <__lshift>
 801145c:	4606      	mov	r6, r0
 801145e:	2800      	cmp	r0, #0
 8011460:	f43f ae72 	beq.w	8011148 <_strtod_l+0x490>
 8011464:	9a05      	ldr	r2, [sp, #20]
 8011466:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011468:	4620      	mov	r0, r4
 801146a:	f001 ffa5 	bl	80133b8 <__mdiff>
 801146e:	4605      	mov	r5, r0
 8011470:	2800      	cmp	r0, #0
 8011472:	f43f ae69 	beq.w	8011148 <_strtod_l+0x490>
 8011476:	68c3      	ldr	r3, [r0, #12]
 8011478:	930b      	str	r3, [sp, #44]	; 0x2c
 801147a:	2300      	movs	r3, #0
 801147c:	60c3      	str	r3, [r0, #12]
 801147e:	4631      	mov	r1, r6
 8011480:	f001 ff7e 	bl	8013380 <__mcmp>
 8011484:	2800      	cmp	r0, #0
 8011486:	da60      	bge.n	801154a <_strtod_l+0x892>
 8011488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801148a:	ea53 030a 	orrs.w	r3, r3, sl
 801148e:	f040 8082 	bne.w	8011596 <_strtod_l+0x8de>
 8011492:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011496:	2b00      	cmp	r3, #0
 8011498:	d17d      	bne.n	8011596 <_strtod_l+0x8de>
 801149a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801149e:	0d1b      	lsrs	r3, r3, #20
 80114a0:	051b      	lsls	r3, r3, #20
 80114a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80114a6:	d976      	bls.n	8011596 <_strtod_l+0x8de>
 80114a8:	696b      	ldr	r3, [r5, #20]
 80114aa:	b913      	cbnz	r3, 80114b2 <_strtod_l+0x7fa>
 80114ac:	692b      	ldr	r3, [r5, #16]
 80114ae:	2b01      	cmp	r3, #1
 80114b0:	dd71      	ble.n	8011596 <_strtod_l+0x8de>
 80114b2:	4629      	mov	r1, r5
 80114b4:	2201      	movs	r2, #1
 80114b6:	4620      	mov	r0, r4
 80114b8:	f001 fef2 	bl	80132a0 <__lshift>
 80114bc:	4631      	mov	r1, r6
 80114be:	4605      	mov	r5, r0
 80114c0:	f001 ff5e 	bl	8013380 <__mcmp>
 80114c4:	2800      	cmp	r0, #0
 80114c6:	dd66      	ble.n	8011596 <_strtod_l+0x8de>
 80114c8:	9904      	ldr	r1, [sp, #16]
 80114ca:	4a53      	ldr	r2, [pc, #332]	; (8011618 <_strtod_l+0x960>)
 80114cc:	465b      	mov	r3, fp
 80114ce:	2900      	cmp	r1, #0
 80114d0:	f000 8081 	beq.w	80115d6 <_strtod_l+0x91e>
 80114d4:	ea02 010b 	and.w	r1, r2, fp
 80114d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80114dc:	dc7b      	bgt.n	80115d6 <_strtod_l+0x91e>
 80114de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80114e2:	f77f aea9 	ble.w	8011238 <_strtod_l+0x580>
 80114e6:	4b4d      	ldr	r3, [pc, #308]	; (801161c <_strtod_l+0x964>)
 80114e8:	4650      	mov	r0, sl
 80114ea:	4659      	mov	r1, fp
 80114ec:	2200      	movs	r2, #0
 80114ee:	f7ef f883 	bl	80005f8 <__aeabi_dmul>
 80114f2:	460b      	mov	r3, r1
 80114f4:	4303      	orrs	r3, r0
 80114f6:	bf08      	it	eq
 80114f8:	2322      	moveq	r3, #34	; 0x22
 80114fa:	4682      	mov	sl, r0
 80114fc:	468b      	mov	fp, r1
 80114fe:	bf08      	it	eq
 8011500:	6023      	streq	r3, [r4, #0]
 8011502:	e62b      	b.n	801115c <_strtod_l+0x4a4>
 8011504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011508:	fa02 f303 	lsl.w	r3, r2, r3
 801150c:	ea03 0a0a 	and.w	sl, r3, sl
 8011510:	e6e3      	b.n	80112da <_strtod_l+0x622>
 8011512:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011516:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801151a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801151e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011522:	fa01 f308 	lsl.w	r3, r1, r8
 8011526:	9308      	str	r3, [sp, #32]
 8011528:	910d      	str	r1, [sp, #52]	; 0x34
 801152a:	e746      	b.n	80113ba <_strtod_l+0x702>
 801152c:	2300      	movs	r3, #0
 801152e:	9308      	str	r3, [sp, #32]
 8011530:	2301      	movs	r3, #1
 8011532:	930d      	str	r3, [sp, #52]	; 0x34
 8011534:	e741      	b.n	80113ba <_strtod_l+0x702>
 8011536:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011538:	4642      	mov	r2, r8
 801153a:	4620      	mov	r0, r4
 801153c:	f001 feb0 	bl	80132a0 <__lshift>
 8011540:	9018      	str	r0, [sp, #96]	; 0x60
 8011542:	2800      	cmp	r0, #0
 8011544:	f47f af6b 	bne.w	801141e <_strtod_l+0x766>
 8011548:	e5fe      	b.n	8011148 <_strtod_l+0x490>
 801154a:	465f      	mov	r7, fp
 801154c:	d16e      	bne.n	801162c <_strtod_l+0x974>
 801154e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011550:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011554:	b342      	cbz	r2, 80115a8 <_strtod_l+0x8f0>
 8011556:	4a32      	ldr	r2, [pc, #200]	; (8011620 <_strtod_l+0x968>)
 8011558:	4293      	cmp	r3, r2
 801155a:	d128      	bne.n	80115ae <_strtod_l+0x8f6>
 801155c:	9b04      	ldr	r3, [sp, #16]
 801155e:	4651      	mov	r1, sl
 8011560:	b1eb      	cbz	r3, 801159e <_strtod_l+0x8e6>
 8011562:	4b2d      	ldr	r3, [pc, #180]	; (8011618 <_strtod_l+0x960>)
 8011564:	403b      	ands	r3, r7
 8011566:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801156a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801156e:	d819      	bhi.n	80115a4 <_strtod_l+0x8ec>
 8011570:	0d1b      	lsrs	r3, r3, #20
 8011572:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011576:	fa02 f303 	lsl.w	r3, r2, r3
 801157a:	4299      	cmp	r1, r3
 801157c:	d117      	bne.n	80115ae <_strtod_l+0x8f6>
 801157e:	4b29      	ldr	r3, [pc, #164]	; (8011624 <_strtod_l+0x96c>)
 8011580:	429f      	cmp	r7, r3
 8011582:	d102      	bne.n	801158a <_strtod_l+0x8d2>
 8011584:	3101      	adds	r1, #1
 8011586:	f43f addf 	beq.w	8011148 <_strtod_l+0x490>
 801158a:	4b23      	ldr	r3, [pc, #140]	; (8011618 <_strtod_l+0x960>)
 801158c:	403b      	ands	r3, r7
 801158e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011592:	f04f 0a00 	mov.w	sl, #0
 8011596:	9b04      	ldr	r3, [sp, #16]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d1a4      	bne.n	80114e6 <_strtod_l+0x82e>
 801159c:	e5de      	b.n	801115c <_strtod_l+0x4a4>
 801159e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115a2:	e7ea      	b.n	801157a <_strtod_l+0x8c2>
 80115a4:	4613      	mov	r3, r2
 80115a6:	e7e8      	b.n	801157a <_strtod_l+0x8c2>
 80115a8:	ea53 030a 	orrs.w	r3, r3, sl
 80115ac:	d08c      	beq.n	80114c8 <_strtod_l+0x810>
 80115ae:	9b08      	ldr	r3, [sp, #32]
 80115b0:	b1db      	cbz	r3, 80115ea <_strtod_l+0x932>
 80115b2:	423b      	tst	r3, r7
 80115b4:	d0ef      	beq.n	8011596 <_strtod_l+0x8de>
 80115b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115b8:	9a04      	ldr	r2, [sp, #16]
 80115ba:	4650      	mov	r0, sl
 80115bc:	4659      	mov	r1, fp
 80115be:	b1c3      	cbz	r3, 80115f2 <_strtod_l+0x93a>
 80115c0:	f7ff fb5c 	bl	8010c7c <sulp>
 80115c4:	4602      	mov	r2, r0
 80115c6:	460b      	mov	r3, r1
 80115c8:	ec51 0b18 	vmov	r0, r1, d8
 80115cc:	f7ee fe5e 	bl	800028c <__adddf3>
 80115d0:	4682      	mov	sl, r0
 80115d2:	468b      	mov	fp, r1
 80115d4:	e7df      	b.n	8011596 <_strtod_l+0x8de>
 80115d6:	4013      	ands	r3, r2
 80115d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80115dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80115e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80115e4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80115e8:	e7d5      	b.n	8011596 <_strtod_l+0x8de>
 80115ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115ec:	ea13 0f0a 	tst.w	r3, sl
 80115f0:	e7e0      	b.n	80115b4 <_strtod_l+0x8fc>
 80115f2:	f7ff fb43 	bl	8010c7c <sulp>
 80115f6:	4602      	mov	r2, r0
 80115f8:	460b      	mov	r3, r1
 80115fa:	ec51 0b18 	vmov	r0, r1, d8
 80115fe:	f7ee fe43 	bl	8000288 <__aeabi_dsub>
 8011602:	2200      	movs	r2, #0
 8011604:	2300      	movs	r3, #0
 8011606:	4682      	mov	sl, r0
 8011608:	468b      	mov	fp, r1
 801160a:	f7ef fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 801160e:	2800      	cmp	r0, #0
 8011610:	d0c1      	beq.n	8011596 <_strtod_l+0x8de>
 8011612:	e611      	b.n	8011238 <_strtod_l+0x580>
 8011614:	fffffc02 	.word	0xfffffc02
 8011618:	7ff00000 	.word	0x7ff00000
 801161c:	39500000 	.word	0x39500000
 8011620:	000fffff 	.word	0x000fffff
 8011624:	7fefffff 	.word	0x7fefffff
 8011628:	08015478 	.word	0x08015478
 801162c:	4631      	mov	r1, r6
 801162e:	4628      	mov	r0, r5
 8011630:	f002 f824 	bl	801367c <__ratio>
 8011634:	ec59 8b10 	vmov	r8, r9, d0
 8011638:	ee10 0a10 	vmov	r0, s0
 801163c:	2200      	movs	r2, #0
 801163e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011642:	4649      	mov	r1, r9
 8011644:	f7ef fa54 	bl	8000af0 <__aeabi_dcmple>
 8011648:	2800      	cmp	r0, #0
 801164a:	d07a      	beq.n	8011742 <_strtod_l+0xa8a>
 801164c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801164e:	2b00      	cmp	r3, #0
 8011650:	d04a      	beq.n	80116e8 <_strtod_l+0xa30>
 8011652:	4b95      	ldr	r3, [pc, #596]	; (80118a8 <_strtod_l+0xbf0>)
 8011654:	2200      	movs	r2, #0
 8011656:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801165a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80118a8 <_strtod_l+0xbf0>
 801165e:	f04f 0800 	mov.w	r8, #0
 8011662:	4b92      	ldr	r3, [pc, #584]	; (80118ac <_strtod_l+0xbf4>)
 8011664:	403b      	ands	r3, r7
 8011666:	930d      	str	r3, [sp, #52]	; 0x34
 8011668:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801166a:	4b91      	ldr	r3, [pc, #580]	; (80118b0 <_strtod_l+0xbf8>)
 801166c:	429a      	cmp	r2, r3
 801166e:	f040 80b0 	bne.w	80117d2 <_strtod_l+0xb1a>
 8011672:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011676:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801167a:	ec4b ab10 	vmov	d0, sl, fp
 801167e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011682:	f001 ff23 	bl	80134cc <__ulp>
 8011686:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801168a:	ec53 2b10 	vmov	r2, r3, d0
 801168e:	f7ee ffb3 	bl	80005f8 <__aeabi_dmul>
 8011692:	4652      	mov	r2, sl
 8011694:	465b      	mov	r3, fp
 8011696:	f7ee fdf9 	bl	800028c <__adddf3>
 801169a:	460b      	mov	r3, r1
 801169c:	4983      	ldr	r1, [pc, #524]	; (80118ac <_strtod_l+0xbf4>)
 801169e:	4a85      	ldr	r2, [pc, #532]	; (80118b4 <_strtod_l+0xbfc>)
 80116a0:	4019      	ands	r1, r3
 80116a2:	4291      	cmp	r1, r2
 80116a4:	4682      	mov	sl, r0
 80116a6:	d960      	bls.n	801176a <_strtod_l+0xab2>
 80116a8:	ee18 3a90 	vmov	r3, s17
 80116ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80116b0:	4293      	cmp	r3, r2
 80116b2:	d104      	bne.n	80116be <_strtod_l+0xa06>
 80116b4:	ee18 3a10 	vmov	r3, s16
 80116b8:	3301      	adds	r3, #1
 80116ba:	f43f ad45 	beq.w	8011148 <_strtod_l+0x490>
 80116be:	f8df b200 	ldr.w	fp, [pc, #512]	; 80118c0 <_strtod_l+0xc08>
 80116c2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80116c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80116c8:	4620      	mov	r0, r4
 80116ca:	f001 fbcd 	bl	8012e68 <_Bfree>
 80116ce:	9905      	ldr	r1, [sp, #20]
 80116d0:	4620      	mov	r0, r4
 80116d2:	f001 fbc9 	bl	8012e68 <_Bfree>
 80116d6:	4631      	mov	r1, r6
 80116d8:	4620      	mov	r0, r4
 80116da:	f001 fbc5 	bl	8012e68 <_Bfree>
 80116de:	4629      	mov	r1, r5
 80116e0:	4620      	mov	r0, r4
 80116e2:	f001 fbc1 	bl	8012e68 <_Bfree>
 80116e6:	e61a      	b.n	801131e <_strtod_l+0x666>
 80116e8:	f1ba 0f00 	cmp.w	sl, #0
 80116ec:	d11b      	bne.n	8011726 <_strtod_l+0xa6e>
 80116ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80116f2:	b9f3      	cbnz	r3, 8011732 <_strtod_l+0xa7a>
 80116f4:	4b6c      	ldr	r3, [pc, #432]	; (80118a8 <_strtod_l+0xbf0>)
 80116f6:	2200      	movs	r2, #0
 80116f8:	4640      	mov	r0, r8
 80116fa:	4649      	mov	r1, r9
 80116fc:	f7ef f9ee 	bl	8000adc <__aeabi_dcmplt>
 8011700:	b9d0      	cbnz	r0, 8011738 <_strtod_l+0xa80>
 8011702:	4640      	mov	r0, r8
 8011704:	4649      	mov	r1, r9
 8011706:	4b6c      	ldr	r3, [pc, #432]	; (80118b8 <_strtod_l+0xc00>)
 8011708:	2200      	movs	r2, #0
 801170a:	f7ee ff75 	bl	80005f8 <__aeabi_dmul>
 801170e:	4680      	mov	r8, r0
 8011710:	4689      	mov	r9, r1
 8011712:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011716:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801171a:	9315      	str	r3, [sp, #84]	; 0x54
 801171c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011720:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011724:	e79d      	b.n	8011662 <_strtod_l+0x9aa>
 8011726:	f1ba 0f01 	cmp.w	sl, #1
 801172a:	d102      	bne.n	8011732 <_strtod_l+0xa7a>
 801172c:	2f00      	cmp	r7, #0
 801172e:	f43f ad83 	beq.w	8011238 <_strtod_l+0x580>
 8011732:	4b62      	ldr	r3, [pc, #392]	; (80118bc <_strtod_l+0xc04>)
 8011734:	2200      	movs	r2, #0
 8011736:	e78e      	b.n	8011656 <_strtod_l+0x99e>
 8011738:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80118b8 <_strtod_l+0xc00>
 801173c:	f04f 0800 	mov.w	r8, #0
 8011740:	e7e7      	b.n	8011712 <_strtod_l+0xa5a>
 8011742:	4b5d      	ldr	r3, [pc, #372]	; (80118b8 <_strtod_l+0xc00>)
 8011744:	4640      	mov	r0, r8
 8011746:	4649      	mov	r1, r9
 8011748:	2200      	movs	r2, #0
 801174a:	f7ee ff55 	bl	80005f8 <__aeabi_dmul>
 801174e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011750:	4680      	mov	r8, r0
 8011752:	4689      	mov	r9, r1
 8011754:	b933      	cbnz	r3, 8011764 <_strtod_l+0xaac>
 8011756:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801175a:	900e      	str	r0, [sp, #56]	; 0x38
 801175c:	930f      	str	r3, [sp, #60]	; 0x3c
 801175e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011762:	e7dd      	b.n	8011720 <_strtod_l+0xa68>
 8011764:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8011768:	e7f9      	b.n	801175e <_strtod_l+0xaa6>
 801176a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801176e:	9b04      	ldr	r3, [sp, #16]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d1a8      	bne.n	80116c6 <_strtod_l+0xa0e>
 8011774:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011778:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801177a:	0d1b      	lsrs	r3, r3, #20
 801177c:	051b      	lsls	r3, r3, #20
 801177e:	429a      	cmp	r2, r3
 8011780:	d1a1      	bne.n	80116c6 <_strtod_l+0xa0e>
 8011782:	4640      	mov	r0, r8
 8011784:	4649      	mov	r1, r9
 8011786:	f7ef fa97 	bl	8000cb8 <__aeabi_d2lz>
 801178a:	f7ee ff07 	bl	800059c <__aeabi_l2d>
 801178e:	4602      	mov	r2, r0
 8011790:	460b      	mov	r3, r1
 8011792:	4640      	mov	r0, r8
 8011794:	4649      	mov	r1, r9
 8011796:	f7ee fd77 	bl	8000288 <__aeabi_dsub>
 801179a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801179c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80117a0:	ea43 030a 	orr.w	r3, r3, sl
 80117a4:	4313      	orrs	r3, r2
 80117a6:	4680      	mov	r8, r0
 80117a8:	4689      	mov	r9, r1
 80117aa:	d055      	beq.n	8011858 <_strtod_l+0xba0>
 80117ac:	a336      	add	r3, pc, #216	; (adr r3, 8011888 <_strtod_l+0xbd0>)
 80117ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b2:	f7ef f993 	bl	8000adc <__aeabi_dcmplt>
 80117b6:	2800      	cmp	r0, #0
 80117b8:	f47f acd0 	bne.w	801115c <_strtod_l+0x4a4>
 80117bc:	a334      	add	r3, pc, #208	; (adr r3, 8011890 <_strtod_l+0xbd8>)
 80117be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c2:	4640      	mov	r0, r8
 80117c4:	4649      	mov	r1, r9
 80117c6:	f7ef f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 80117ca:	2800      	cmp	r0, #0
 80117cc:	f43f af7b 	beq.w	80116c6 <_strtod_l+0xa0e>
 80117d0:	e4c4      	b.n	801115c <_strtod_l+0x4a4>
 80117d2:	9b04      	ldr	r3, [sp, #16]
 80117d4:	b333      	cbz	r3, 8011824 <_strtod_l+0xb6c>
 80117d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80117dc:	d822      	bhi.n	8011824 <_strtod_l+0xb6c>
 80117de:	a32e      	add	r3, pc, #184	; (adr r3, 8011898 <_strtod_l+0xbe0>)
 80117e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e4:	4640      	mov	r0, r8
 80117e6:	4649      	mov	r1, r9
 80117e8:	f7ef f982 	bl	8000af0 <__aeabi_dcmple>
 80117ec:	b1a0      	cbz	r0, 8011818 <_strtod_l+0xb60>
 80117ee:	4649      	mov	r1, r9
 80117f0:	4640      	mov	r0, r8
 80117f2:	f7ef f9d9 	bl	8000ba8 <__aeabi_d2uiz>
 80117f6:	2801      	cmp	r0, #1
 80117f8:	bf38      	it	cc
 80117fa:	2001      	movcc	r0, #1
 80117fc:	f7ee fe82 	bl	8000504 <__aeabi_ui2d>
 8011800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011802:	4680      	mov	r8, r0
 8011804:	4689      	mov	r9, r1
 8011806:	bb23      	cbnz	r3, 8011852 <_strtod_l+0xb9a>
 8011808:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801180c:	9010      	str	r0, [sp, #64]	; 0x40
 801180e:	9311      	str	r3, [sp, #68]	; 0x44
 8011810:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011814:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801181a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801181c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011820:	1a9b      	subs	r3, r3, r2
 8011822:	9309      	str	r3, [sp, #36]	; 0x24
 8011824:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011828:	eeb0 0a48 	vmov.f32	s0, s16
 801182c:	eef0 0a68 	vmov.f32	s1, s17
 8011830:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011834:	f001 fe4a 	bl	80134cc <__ulp>
 8011838:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801183c:	ec53 2b10 	vmov	r2, r3, d0
 8011840:	f7ee feda 	bl	80005f8 <__aeabi_dmul>
 8011844:	ec53 2b18 	vmov	r2, r3, d8
 8011848:	f7ee fd20 	bl	800028c <__adddf3>
 801184c:	4682      	mov	sl, r0
 801184e:	468b      	mov	fp, r1
 8011850:	e78d      	b.n	801176e <_strtod_l+0xab6>
 8011852:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8011856:	e7db      	b.n	8011810 <_strtod_l+0xb58>
 8011858:	a311      	add	r3, pc, #68	; (adr r3, 80118a0 <_strtod_l+0xbe8>)
 801185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801185e:	f7ef f93d 	bl	8000adc <__aeabi_dcmplt>
 8011862:	e7b2      	b.n	80117ca <_strtod_l+0xb12>
 8011864:	2300      	movs	r3, #0
 8011866:	930a      	str	r3, [sp, #40]	; 0x28
 8011868:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801186a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801186c:	6013      	str	r3, [r2, #0]
 801186e:	f7ff ba6b 	b.w	8010d48 <_strtod_l+0x90>
 8011872:	2a65      	cmp	r2, #101	; 0x65
 8011874:	f43f ab5f 	beq.w	8010f36 <_strtod_l+0x27e>
 8011878:	2a45      	cmp	r2, #69	; 0x45
 801187a:	f43f ab5c 	beq.w	8010f36 <_strtod_l+0x27e>
 801187e:	2301      	movs	r3, #1
 8011880:	f7ff bb94 	b.w	8010fac <_strtod_l+0x2f4>
 8011884:	f3af 8000 	nop.w
 8011888:	94a03595 	.word	0x94a03595
 801188c:	3fdfffff 	.word	0x3fdfffff
 8011890:	35afe535 	.word	0x35afe535
 8011894:	3fe00000 	.word	0x3fe00000
 8011898:	ffc00000 	.word	0xffc00000
 801189c:	41dfffff 	.word	0x41dfffff
 80118a0:	94a03595 	.word	0x94a03595
 80118a4:	3fcfffff 	.word	0x3fcfffff
 80118a8:	3ff00000 	.word	0x3ff00000
 80118ac:	7ff00000 	.word	0x7ff00000
 80118b0:	7fe00000 	.word	0x7fe00000
 80118b4:	7c9fffff 	.word	0x7c9fffff
 80118b8:	3fe00000 	.word	0x3fe00000
 80118bc:	bff00000 	.word	0xbff00000
 80118c0:	7fefffff 	.word	0x7fefffff

080118c4 <_strtod_r>:
 80118c4:	4b01      	ldr	r3, [pc, #4]	; (80118cc <_strtod_r+0x8>)
 80118c6:	f7ff b9f7 	b.w	8010cb8 <_strtod_l>
 80118ca:	bf00      	nop
 80118cc:	2000007c 	.word	0x2000007c

080118d0 <_strtol_l.constprop.0>:
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118d6:	d001      	beq.n	80118dc <_strtol_l.constprop.0+0xc>
 80118d8:	2b24      	cmp	r3, #36	; 0x24
 80118da:	d906      	bls.n	80118ea <_strtol_l.constprop.0+0x1a>
 80118dc:	f7fe faee 	bl	800febc <__errno>
 80118e0:	2316      	movs	r3, #22
 80118e2:	6003      	str	r3, [r0, #0]
 80118e4:	2000      	movs	r0, #0
 80118e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80119d0 <_strtol_l.constprop.0+0x100>
 80118ee:	460d      	mov	r5, r1
 80118f0:	462e      	mov	r6, r5
 80118f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80118f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80118fa:	f017 0708 	ands.w	r7, r7, #8
 80118fe:	d1f7      	bne.n	80118f0 <_strtol_l.constprop.0+0x20>
 8011900:	2c2d      	cmp	r4, #45	; 0x2d
 8011902:	d132      	bne.n	801196a <_strtol_l.constprop.0+0x9a>
 8011904:	782c      	ldrb	r4, [r5, #0]
 8011906:	2701      	movs	r7, #1
 8011908:	1cb5      	adds	r5, r6, #2
 801190a:	2b00      	cmp	r3, #0
 801190c:	d05b      	beq.n	80119c6 <_strtol_l.constprop.0+0xf6>
 801190e:	2b10      	cmp	r3, #16
 8011910:	d109      	bne.n	8011926 <_strtol_l.constprop.0+0x56>
 8011912:	2c30      	cmp	r4, #48	; 0x30
 8011914:	d107      	bne.n	8011926 <_strtol_l.constprop.0+0x56>
 8011916:	782c      	ldrb	r4, [r5, #0]
 8011918:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801191c:	2c58      	cmp	r4, #88	; 0x58
 801191e:	d14d      	bne.n	80119bc <_strtol_l.constprop.0+0xec>
 8011920:	786c      	ldrb	r4, [r5, #1]
 8011922:	2310      	movs	r3, #16
 8011924:	3502      	adds	r5, #2
 8011926:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801192a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801192e:	f04f 0c00 	mov.w	ip, #0
 8011932:	fbb8 f9f3 	udiv	r9, r8, r3
 8011936:	4666      	mov	r6, ip
 8011938:	fb03 8a19 	mls	sl, r3, r9, r8
 801193c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011940:	f1be 0f09 	cmp.w	lr, #9
 8011944:	d816      	bhi.n	8011974 <_strtol_l.constprop.0+0xa4>
 8011946:	4674      	mov	r4, lr
 8011948:	42a3      	cmp	r3, r4
 801194a:	dd24      	ble.n	8011996 <_strtol_l.constprop.0+0xc6>
 801194c:	f1bc 0f00 	cmp.w	ip, #0
 8011950:	db1e      	blt.n	8011990 <_strtol_l.constprop.0+0xc0>
 8011952:	45b1      	cmp	r9, r6
 8011954:	d31c      	bcc.n	8011990 <_strtol_l.constprop.0+0xc0>
 8011956:	d101      	bne.n	801195c <_strtol_l.constprop.0+0x8c>
 8011958:	45a2      	cmp	sl, r4
 801195a:	db19      	blt.n	8011990 <_strtol_l.constprop.0+0xc0>
 801195c:	fb06 4603 	mla	r6, r6, r3, r4
 8011960:	f04f 0c01 	mov.w	ip, #1
 8011964:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011968:	e7e8      	b.n	801193c <_strtol_l.constprop.0+0x6c>
 801196a:	2c2b      	cmp	r4, #43	; 0x2b
 801196c:	bf04      	itt	eq
 801196e:	782c      	ldrbeq	r4, [r5, #0]
 8011970:	1cb5      	addeq	r5, r6, #2
 8011972:	e7ca      	b.n	801190a <_strtol_l.constprop.0+0x3a>
 8011974:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011978:	f1be 0f19 	cmp.w	lr, #25
 801197c:	d801      	bhi.n	8011982 <_strtol_l.constprop.0+0xb2>
 801197e:	3c37      	subs	r4, #55	; 0x37
 8011980:	e7e2      	b.n	8011948 <_strtol_l.constprop.0+0x78>
 8011982:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011986:	f1be 0f19 	cmp.w	lr, #25
 801198a:	d804      	bhi.n	8011996 <_strtol_l.constprop.0+0xc6>
 801198c:	3c57      	subs	r4, #87	; 0x57
 801198e:	e7db      	b.n	8011948 <_strtol_l.constprop.0+0x78>
 8011990:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8011994:	e7e6      	b.n	8011964 <_strtol_l.constprop.0+0x94>
 8011996:	f1bc 0f00 	cmp.w	ip, #0
 801199a:	da05      	bge.n	80119a8 <_strtol_l.constprop.0+0xd8>
 801199c:	2322      	movs	r3, #34	; 0x22
 801199e:	6003      	str	r3, [r0, #0]
 80119a0:	4646      	mov	r6, r8
 80119a2:	b942      	cbnz	r2, 80119b6 <_strtol_l.constprop.0+0xe6>
 80119a4:	4630      	mov	r0, r6
 80119a6:	e79e      	b.n	80118e6 <_strtol_l.constprop.0+0x16>
 80119a8:	b107      	cbz	r7, 80119ac <_strtol_l.constprop.0+0xdc>
 80119aa:	4276      	negs	r6, r6
 80119ac:	2a00      	cmp	r2, #0
 80119ae:	d0f9      	beq.n	80119a4 <_strtol_l.constprop.0+0xd4>
 80119b0:	f1bc 0f00 	cmp.w	ip, #0
 80119b4:	d000      	beq.n	80119b8 <_strtol_l.constprop.0+0xe8>
 80119b6:	1e69      	subs	r1, r5, #1
 80119b8:	6011      	str	r1, [r2, #0]
 80119ba:	e7f3      	b.n	80119a4 <_strtol_l.constprop.0+0xd4>
 80119bc:	2430      	movs	r4, #48	; 0x30
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d1b1      	bne.n	8011926 <_strtol_l.constprop.0+0x56>
 80119c2:	2308      	movs	r3, #8
 80119c4:	e7af      	b.n	8011926 <_strtol_l.constprop.0+0x56>
 80119c6:	2c30      	cmp	r4, #48	; 0x30
 80119c8:	d0a5      	beq.n	8011916 <_strtol_l.constprop.0+0x46>
 80119ca:	230a      	movs	r3, #10
 80119cc:	e7ab      	b.n	8011926 <_strtol_l.constprop.0+0x56>
 80119ce:	bf00      	nop
 80119d0:	080154a1 	.word	0x080154a1

080119d4 <_strtol_r>:
 80119d4:	f7ff bf7c 	b.w	80118d0 <_strtol_l.constprop.0>

080119d8 <quorem>:
 80119d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119dc:	6903      	ldr	r3, [r0, #16]
 80119de:	690c      	ldr	r4, [r1, #16]
 80119e0:	42a3      	cmp	r3, r4
 80119e2:	4607      	mov	r7, r0
 80119e4:	f2c0 8081 	blt.w	8011aea <quorem+0x112>
 80119e8:	3c01      	subs	r4, #1
 80119ea:	f101 0814 	add.w	r8, r1, #20
 80119ee:	f100 0514 	add.w	r5, r0, #20
 80119f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80119f6:	9301      	str	r3, [sp, #4]
 80119f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80119fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a00:	3301      	adds	r3, #1
 8011a02:	429a      	cmp	r2, r3
 8011a04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011a08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011a0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011a10:	d331      	bcc.n	8011a76 <quorem+0x9e>
 8011a12:	f04f 0e00 	mov.w	lr, #0
 8011a16:	4640      	mov	r0, r8
 8011a18:	46ac      	mov	ip, r5
 8011a1a:	46f2      	mov	sl, lr
 8011a1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011a20:	b293      	uxth	r3, r2
 8011a22:	fb06 e303 	mla	r3, r6, r3, lr
 8011a26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011a2a:	b29b      	uxth	r3, r3
 8011a2c:	ebaa 0303 	sub.w	r3, sl, r3
 8011a30:	f8dc a000 	ldr.w	sl, [ip]
 8011a34:	0c12      	lsrs	r2, r2, #16
 8011a36:	fa13 f38a 	uxtah	r3, r3, sl
 8011a3a:	fb06 e202 	mla	r2, r6, r2, lr
 8011a3e:	9300      	str	r3, [sp, #0]
 8011a40:	9b00      	ldr	r3, [sp, #0]
 8011a42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011a46:	b292      	uxth	r2, r2
 8011a48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011a4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011a50:	f8bd 3000 	ldrh.w	r3, [sp]
 8011a54:	4581      	cmp	r9, r0
 8011a56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a5a:	f84c 3b04 	str.w	r3, [ip], #4
 8011a5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011a62:	d2db      	bcs.n	8011a1c <quorem+0x44>
 8011a64:	f855 300b 	ldr.w	r3, [r5, fp]
 8011a68:	b92b      	cbnz	r3, 8011a76 <quorem+0x9e>
 8011a6a:	9b01      	ldr	r3, [sp, #4]
 8011a6c:	3b04      	subs	r3, #4
 8011a6e:	429d      	cmp	r5, r3
 8011a70:	461a      	mov	r2, r3
 8011a72:	d32e      	bcc.n	8011ad2 <quorem+0xfa>
 8011a74:	613c      	str	r4, [r7, #16]
 8011a76:	4638      	mov	r0, r7
 8011a78:	f001 fc82 	bl	8013380 <__mcmp>
 8011a7c:	2800      	cmp	r0, #0
 8011a7e:	db24      	blt.n	8011aca <quorem+0xf2>
 8011a80:	3601      	adds	r6, #1
 8011a82:	4628      	mov	r0, r5
 8011a84:	f04f 0c00 	mov.w	ip, #0
 8011a88:	f858 2b04 	ldr.w	r2, [r8], #4
 8011a8c:	f8d0 e000 	ldr.w	lr, [r0]
 8011a90:	b293      	uxth	r3, r2
 8011a92:	ebac 0303 	sub.w	r3, ip, r3
 8011a96:	0c12      	lsrs	r2, r2, #16
 8011a98:	fa13 f38e 	uxtah	r3, r3, lr
 8011a9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011aa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011aa4:	b29b      	uxth	r3, r3
 8011aa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011aaa:	45c1      	cmp	r9, r8
 8011aac:	f840 3b04 	str.w	r3, [r0], #4
 8011ab0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011ab4:	d2e8      	bcs.n	8011a88 <quorem+0xb0>
 8011ab6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011aba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011abe:	b922      	cbnz	r2, 8011aca <quorem+0xf2>
 8011ac0:	3b04      	subs	r3, #4
 8011ac2:	429d      	cmp	r5, r3
 8011ac4:	461a      	mov	r2, r3
 8011ac6:	d30a      	bcc.n	8011ade <quorem+0x106>
 8011ac8:	613c      	str	r4, [r7, #16]
 8011aca:	4630      	mov	r0, r6
 8011acc:	b003      	add	sp, #12
 8011ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ad2:	6812      	ldr	r2, [r2, #0]
 8011ad4:	3b04      	subs	r3, #4
 8011ad6:	2a00      	cmp	r2, #0
 8011ad8:	d1cc      	bne.n	8011a74 <quorem+0x9c>
 8011ada:	3c01      	subs	r4, #1
 8011adc:	e7c7      	b.n	8011a6e <quorem+0x96>
 8011ade:	6812      	ldr	r2, [r2, #0]
 8011ae0:	3b04      	subs	r3, #4
 8011ae2:	2a00      	cmp	r2, #0
 8011ae4:	d1f0      	bne.n	8011ac8 <quorem+0xf0>
 8011ae6:	3c01      	subs	r4, #1
 8011ae8:	e7eb      	b.n	8011ac2 <quorem+0xea>
 8011aea:	2000      	movs	r0, #0
 8011aec:	e7ee      	b.n	8011acc <quorem+0xf4>
	...

08011af0 <_dtoa_r>:
 8011af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011af4:	ed2d 8b04 	vpush	{d8-d9}
 8011af8:	ec57 6b10 	vmov	r6, r7, d0
 8011afc:	b093      	sub	sp, #76	; 0x4c
 8011afe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011b00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011b04:	9106      	str	r1, [sp, #24]
 8011b06:	ee10 aa10 	vmov	sl, s0
 8011b0a:	4604      	mov	r4, r0
 8011b0c:	9209      	str	r2, [sp, #36]	; 0x24
 8011b0e:	930c      	str	r3, [sp, #48]	; 0x30
 8011b10:	46bb      	mov	fp, r7
 8011b12:	b975      	cbnz	r5, 8011b32 <_dtoa_r+0x42>
 8011b14:	2010      	movs	r0, #16
 8011b16:	f001 f94d 	bl	8012db4 <malloc>
 8011b1a:	4602      	mov	r2, r0
 8011b1c:	6260      	str	r0, [r4, #36]	; 0x24
 8011b1e:	b920      	cbnz	r0, 8011b2a <_dtoa_r+0x3a>
 8011b20:	4ba7      	ldr	r3, [pc, #668]	; (8011dc0 <_dtoa_r+0x2d0>)
 8011b22:	21ea      	movs	r1, #234	; 0xea
 8011b24:	48a7      	ldr	r0, [pc, #668]	; (8011dc4 <_dtoa_r+0x2d4>)
 8011b26:	f002 f8ad 	bl	8013c84 <__assert_func>
 8011b2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011b2e:	6005      	str	r5, [r0, #0]
 8011b30:	60c5      	str	r5, [r0, #12]
 8011b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b34:	6819      	ldr	r1, [r3, #0]
 8011b36:	b151      	cbz	r1, 8011b4e <_dtoa_r+0x5e>
 8011b38:	685a      	ldr	r2, [r3, #4]
 8011b3a:	604a      	str	r2, [r1, #4]
 8011b3c:	2301      	movs	r3, #1
 8011b3e:	4093      	lsls	r3, r2
 8011b40:	608b      	str	r3, [r1, #8]
 8011b42:	4620      	mov	r0, r4
 8011b44:	f001 f990 	bl	8012e68 <_Bfree>
 8011b48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	601a      	str	r2, [r3, #0]
 8011b4e:	1e3b      	subs	r3, r7, #0
 8011b50:	bfaa      	itet	ge
 8011b52:	2300      	movge	r3, #0
 8011b54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011b58:	f8c8 3000 	strge.w	r3, [r8]
 8011b5c:	4b9a      	ldr	r3, [pc, #616]	; (8011dc8 <_dtoa_r+0x2d8>)
 8011b5e:	bfbc      	itt	lt
 8011b60:	2201      	movlt	r2, #1
 8011b62:	f8c8 2000 	strlt.w	r2, [r8]
 8011b66:	ea33 030b 	bics.w	r3, r3, fp
 8011b6a:	d11b      	bne.n	8011ba4 <_dtoa_r+0xb4>
 8011b6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011b72:	6013      	str	r3, [r2, #0]
 8011b74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b78:	4333      	orrs	r3, r6
 8011b7a:	f000 8592 	beq.w	80126a2 <_dtoa_r+0xbb2>
 8011b7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b80:	b963      	cbnz	r3, 8011b9c <_dtoa_r+0xac>
 8011b82:	4b92      	ldr	r3, [pc, #584]	; (8011dcc <_dtoa_r+0x2dc>)
 8011b84:	e022      	b.n	8011bcc <_dtoa_r+0xdc>
 8011b86:	4b92      	ldr	r3, [pc, #584]	; (8011dd0 <_dtoa_r+0x2e0>)
 8011b88:	9301      	str	r3, [sp, #4]
 8011b8a:	3308      	adds	r3, #8
 8011b8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011b8e:	6013      	str	r3, [r2, #0]
 8011b90:	9801      	ldr	r0, [sp, #4]
 8011b92:	b013      	add	sp, #76	; 0x4c
 8011b94:	ecbd 8b04 	vpop	{d8-d9}
 8011b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b9c:	4b8b      	ldr	r3, [pc, #556]	; (8011dcc <_dtoa_r+0x2dc>)
 8011b9e:	9301      	str	r3, [sp, #4]
 8011ba0:	3303      	adds	r3, #3
 8011ba2:	e7f3      	b.n	8011b8c <_dtoa_r+0x9c>
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	4650      	mov	r0, sl
 8011baa:	4659      	mov	r1, fp
 8011bac:	f7ee ff8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011bb0:	ec4b ab19 	vmov	d9, sl, fp
 8011bb4:	4680      	mov	r8, r0
 8011bb6:	b158      	cbz	r0, 8011bd0 <_dtoa_r+0xe0>
 8011bb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bba:	2301      	movs	r3, #1
 8011bbc:	6013      	str	r3, [r2, #0]
 8011bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	f000 856b 	beq.w	801269c <_dtoa_r+0xbac>
 8011bc6:	4883      	ldr	r0, [pc, #524]	; (8011dd4 <_dtoa_r+0x2e4>)
 8011bc8:	6018      	str	r0, [r3, #0]
 8011bca:	1e43      	subs	r3, r0, #1
 8011bcc:	9301      	str	r3, [sp, #4]
 8011bce:	e7df      	b.n	8011b90 <_dtoa_r+0xa0>
 8011bd0:	ec4b ab10 	vmov	d0, sl, fp
 8011bd4:	aa10      	add	r2, sp, #64	; 0x40
 8011bd6:	a911      	add	r1, sp, #68	; 0x44
 8011bd8:	4620      	mov	r0, r4
 8011bda:	f001 fcf3 	bl	80135c4 <__d2b>
 8011bde:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011be2:	ee08 0a10 	vmov	s16, r0
 8011be6:	2d00      	cmp	r5, #0
 8011be8:	f000 8084 	beq.w	8011cf4 <_dtoa_r+0x204>
 8011bec:	ee19 3a90 	vmov	r3, s19
 8011bf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011bf4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011bf8:	4656      	mov	r6, sl
 8011bfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011bfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011c02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011c06:	4b74      	ldr	r3, [pc, #464]	; (8011dd8 <_dtoa_r+0x2e8>)
 8011c08:	2200      	movs	r2, #0
 8011c0a:	4630      	mov	r0, r6
 8011c0c:	4639      	mov	r1, r7
 8011c0e:	f7ee fb3b 	bl	8000288 <__aeabi_dsub>
 8011c12:	a365      	add	r3, pc, #404	; (adr r3, 8011da8 <_dtoa_r+0x2b8>)
 8011c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c18:	f7ee fcee 	bl	80005f8 <__aeabi_dmul>
 8011c1c:	a364      	add	r3, pc, #400	; (adr r3, 8011db0 <_dtoa_r+0x2c0>)
 8011c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c22:	f7ee fb33 	bl	800028c <__adddf3>
 8011c26:	4606      	mov	r6, r0
 8011c28:	4628      	mov	r0, r5
 8011c2a:	460f      	mov	r7, r1
 8011c2c:	f7ee fc7a 	bl	8000524 <__aeabi_i2d>
 8011c30:	a361      	add	r3, pc, #388	; (adr r3, 8011db8 <_dtoa_r+0x2c8>)
 8011c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c36:	f7ee fcdf 	bl	80005f8 <__aeabi_dmul>
 8011c3a:	4602      	mov	r2, r0
 8011c3c:	460b      	mov	r3, r1
 8011c3e:	4630      	mov	r0, r6
 8011c40:	4639      	mov	r1, r7
 8011c42:	f7ee fb23 	bl	800028c <__adddf3>
 8011c46:	4606      	mov	r6, r0
 8011c48:	460f      	mov	r7, r1
 8011c4a:	f7ee ff85 	bl	8000b58 <__aeabi_d2iz>
 8011c4e:	2200      	movs	r2, #0
 8011c50:	9000      	str	r0, [sp, #0]
 8011c52:	2300      	movs	r3, #0
 8011c54:	4630      	mov	r0, r6
 8011c56:	4639      	mov	r1, r7
 8011c58:	f7ee ff40 	bl	8000adc <__aeabi_dcmplt>
 8011c5c:	b150      	cbz	r0, 8011c74 <_dtoa_r+0x184>
 8011c5e:	9800      	ldr	r0, [sp, #0]
 8011c60:	f7ee fc60 	bl	8000524 <__aeabi_i2d>
 8011c64:	4632      	mov	r2, r6
 8011c66:	463b      	mov	r3, r7
 8011c68:	f7ee ff2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c6c:	b910      	cbnz	r0, 8011c74 <_dtoa_r+0x184>
 8011c6e:	9b00      	ldr	r3, [sp, #0]
 8011c70:	3b01      	subs	r3, #1
 8011c72:	9300      	str	r3, [sp, #0]
 8011c74:	9b00      	ldr	r3, [sp, #0]
 8011c76:	2b16      	cmp	r3, #22
 8011c78:	d85a      	bhi.n	8011d30 <_dtoa_r+0x240>
 8011c7a:	9a00      	ldr	r2, [sp, #0]
 8011c7c:	4b57      	ldr	r3, [pc, #348]	; (8011ddc <_dtoa_r+0x2ec>)
 8011c7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c86:	ec51 0b19 	vmov	r0, r1, d9
 8011c8a:	f7ee ff27 	bl	8000adc <__aeabi_dcmplt>
 8011c8e:	2800      	cmp	r0, #0
 8011c90:	d050      	beq.n	8011d34 <_dtoa_r+0x244>
 8011c92:	9b00      	ldr	r3, [sp, #0]
 8011c94:	3b01      	subs	r3, #1
 8011c96:	9300      	str	r3, [sp, #0]
 8011c98:	2300      	movs	r3, #0
 8011c9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c9e:	1b5d      	subs	r5, r3, r5
 8011ca0:	1e6b      	subs	r3, r5, #1
 8011ca2:	9305      	str	r3, [sp, #20]
 8011ca4:	bf45      	ittet	mi
 8011ca6:	f1c5 0301 	rsbmi	r3, r5, #1
 8011caa:	9304      	strmi	r3, [sp, #16]
 8011cac:	2300      	movpl	r3, #0
 8011cae:	2300      	movmi	r3, #0
 8011cb0:	bf4c      	ite	mi
 8011cb2:	9305      	strmi	r3, [sp, #20]
 8011cb4:	9304      	strpl	r3, [sp, #16]
 8011cb6:	9b00      	ldr	r3, [sp, #0]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	db3d      	blt.n	8011d38 <_dtoa_r+0x248>
 8011cbc:	9b05      	ldr	r3, [sp, #20]
 8011cbe:	9a00      	ldr	r2, [sp, #0]
 8011cc0:	920a      	str	r2, [sp, #40]	; 0x28
 8011cc2:	4413      	add	r3, r2
 8011cc4:	9305      	str	r3, [sp, #20]
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	9307      	str	r3, [sp, #28]
 8011cca:	9b06      	ldr	r3, [sp, #24]
 8011ccc:	2b09      	cmp	r3, #9
 8011cce:	f200 8089 	bhi.w	8011de4 <_dtoa_r+0x2f4>
 8011cd2:	2b05      	cmp	r3, #5
 8011cd4:	bfc4      	itt	gt
 8011cd6:	3b04      	subgt	r3, #4
 8011cd8:	9306      	strgt	r3, [sp, #24]
 8011cda:	9b06      	ldr	r3, [sp, #24]
 8011cdc:	f1a3 0302 	sub.w	r3, r3, #2
 8011ce0:	bfcc      	ite	gt
 8011ce2:	2500      	movgt	r5, #0
 8011ce4:	2501      	movle	r5, #1
 8011ce6:	2b03      	cmp	r3, #3
 8011ce8:	f200 8087 	bhi.w	8011dfa <_dtoa_r+0x30a>
 8011cec:	e8df f003 	tbb	[pc, r3]
 8011cf0:	59383a2d 	.word	0x59383a2d
 8011cf4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011cf8:	441d      	add	r5, r3
 8011cfa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011cfe:	2b20      	cmp	r3, #32
 8011d00:	bfc1      	itttt	gt
 8011d02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011d06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011d0a:	fa0b f303 	lslgt.w	r3, fp, r3
 8011d0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011d12:	bfda      	itte	le
 8011d14:	f1c3 0320 	rsble	r3, r3, #32
 8011d18:	fa06 f003 	lslle.w	r0, r6, r3
 8011d1c:	4318      	orrgt	r0, r3
 8011d1e:	f7ee fbf1 	bl	8000504 <__aeabi_ui2d>
 8011d22:	2301      	movs	r3, #1
 8011d24:	4606      	mov	r6, r0
 8011d26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011d2a:	3d01      	subs	r5, #1
 8011d2c:	930e      	str	r3, [sp, #56]	; 0x38
 8011d2e:	e76a      	b.n	8011c06 <_dtoa_r+0x116>
 8011d30:	2301      	movs	r3, #1
 8011d32:	e7b2      	b.n	8011c9a <_dtoa_r+0x1aa>
 8011d34:	900b      	str	r0, [sp, #44]	; 0x2c
 8011d36:	e7b1      	b.n	8011c9c <_dtoa_r+0x1ac>
 8011d38:	9b04      	ldr	r3, [sp, #16]
 8011d3a:	9a00      	ldr	r2, [sp, #0]
 8011d3c:	1a9b      	subs	r3, r3, r2
 8011d3e:	9304      	str	r3, [sp, #16]
 8011d40:	4253      	negs	r3, r2
 8011d42:	9307      	str	r3, [sp, #28]
 8011d44:	2300      	movs	r3, #0
 8011d46:	930a      	str	r3, [sp, #40]	; 0x28
 8011d48:	e7bf      	b.n	8011cca <_dtoa_r+0x1da>
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	9308      	str	r3, [sp, #32]
 8011d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	dc55      	bgt.n	8011e00 <_dtoa_r+0x310>
 8011d54:	2301      	movs	r3, #1
 8011d56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011d5a:	461a      	mov	r2, r3
 8011d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8011d5e:	e00c      	b.n	8011d7a <_dtoa_r+0x28a>
 8011d60:	2301      	movs	r3, #1
 8011d62:	e7f3      	b.n	8011d4c <_dtoa_r+0x25c>
 8011d64:	2300      	movs	r3, #0
 8011d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d68:	9308      	str	r3, [sp, #32]
 8011d6a:	9b00      	ldr	r3, [sp, #0]
 8011d6c:	4413      	add	r3, r2
 8011d6e:	9302      	str	r3, [sp, #8]
 8011d70:	3301      	adds	r3, #1
 8011d72:	2b01      	cmp	r3, #1
 8011d74:	9303      	str	r3, [sp, #12]
 8011d76:	bfb8      	it	lt
 8011d78:	2301      	movlt	r3, #1
 8011d7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	6042      	str	r2, [r0, #4]
 8011d80:	2204      	movs	r2, #4
 8011d82:	f102 0614 	add.w	r6, r2, #20
 8011d86:	429e      	cmp	r6, r3
 8011d88:	6841      	ldr	r1, [r0, #4]
 8011d8a:	d93d      	bls.n	8011e08 <_dtoa_r+0x318>
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	f001 f82b 	bl	8012de8 <_Balloc>
 8011d92:	9001      	str	r0, [sp, #4]
 8011d94:	2800      	cmp	r0, #0
 8011d96:	d13b      	bne.n	8011e10 <_dtoa_r+0x320>
 8011d98:	4b11      	ldr	r3, [pc, #68]	; (8011de0 <_dtoa_r+0x2f0>)
 8011d9a:	4602      	mov	r2, r0
 8011d9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011da0:	e6c0      	b.n	8011b24 <_dtoa_r+0x34>
 8011da2:	2301      	movs	r3, #1
 8011da4:	e7df      	b.n	8011d66 <_dtoa_r+0x276>
 8011da6:	bf00      	nop
 8011da8:	636f4361 	.word	0x636f4361
 8011dac:	3fd287a7 	.word	0x3fd287a7
 8011db0:	8b60c8b3 	.word	0x8b60c8b3
 8011db4:	3fc68a28 	.word	0x3fc68a28
 8011db8:	509f79fb 	.word	0x509f79fb
 8011dbc:	3fd34413 	.word	0x3fd34413
 8011dc0:	080155ae 	.word	0x080155ae
 8011dc4:	080155c5 	.word	0x080155c5
 8011dc8:	7ff00000 	.word	0x7ff00000
 8011dcc:	080155aa 	.word	0x080155aa
 8011dd0:	080155a1 	.word	0x080155a1
 8011dd4:	08015425 	.word	0x08015425
 8011dd8:	3ff80000 	.word	0x3ff80000
 8011ddc:	08015730 	.word	0x08015730
 8011de0:	08015620 	.word	0x08015620
 8011de4:	2501      	movs	r5, #1
 8011de6:	2300      	movs	r3, #0
 8011de8:	9306      	str	r3, [sp, #24]
 8011dea:	9508      	str	r5, [sp, #32]
 8011dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011df0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011df4:	2200      	movs	r2, #0
 8011df6:	2312      	movs	r3, #18
 8011df8:	e7b0      	b.n	8011d5c <_dtoa_r+0x26c>
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	9308      	str	r3, [sp, #32]
 8011dfe:	e7f5      	b.n	8011dec <_dtoa_r+0x2fc>
 8011e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011e06:	e7b8      	b.n	8011d7a <_dtoa_r+0x28a>
 8011e08:	3101      	adds	r1, #1
 8011e0a:	6041      	str	r1, [r0, #4]
 8011e0c:	0052      	lsls	r2, r2, #1
 8011e0e:	e7b8      	b.n	8011d82 <_dtoa_r+0x292>
 8011e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e12:	9a01      	ldr	r2, [sp, #4]
 8011e14:	601a      	str	r2, [r3, #0]
 8011e16:	9b03      	ldr	r3, [sp, #12]
 8011e18:	2b0e      	cmp	r3, #14
 8011e1a:	f200 809d 	bhi.w	8011f58 <_dtoa_r+0x468>
 8011e1e:	2d00      	cmp	r5, #0
 8011e20:	f000 809a 	beq.w	8011f58 <_dtoa_r+0x468>
 8011e24:	9b00      	ldr	r3, [sp, #0]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	dd32      	ble.n	8011e90 <_dtoa_r+0x3a0>
 8011e2a:	4ab7      	ldr	r2, [pc, #732]	; (8012108 <_dtoa_r+0x618>)
 8011e2c:	f003 030f 	and.w	r3, r3, #15
 8011e30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011e34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011e38:	9b00      	ldr	r3, [sp, #0]
 8011e3a:	05d8      	lsls	r0, r3, #23
 8011e3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011e40:	d516      	bpl.n	8011e70 <_dtoa_r+0x380>
 8011e42:	4bb2      	ldr	r3, [pc, #712]	; (801210c <_dtoa_r+0x61c>)
 8011e44:	ec51 0b19 	vmov	r0, r1, d9
 8011e48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011e4c:	f7ee fcfe 	bl	800084c <__aeabi_ddiv>
 8011e50:	f007 070f 	and.w	r7, r7, #15
 8011e54:	4682      	mov	sl, r0
 8011e56:	468b      	mov	fp, r1
 8011e58:	2503      	movs	r5, #3
 8011e5a:	4eac      	ldr	r6, [pc, #688]	; (801210c <_dtoa_r+0x61c>)
 8011e5c:	b957      	cbnz	r7, 8011e74 <_dtoa_r+0x384>
 8011e5e:	4642      	mov	r2, r8
 8011e60:	464b      	mov	r3, r9
 8011e62:	4650      	mov	r0, sl
 8011e64:	4659      	mov	r1, fp
 8011e66:	f7ee fcf1 	bl	800084c <__aeabi_ddiv>
 8011e6a:	4682      	mov	sl, r0
 8011e6c:	468b      	mov	fp, r1
 8011e6e:	e028      	b.n	8011ec2 <_dtoa_r+0x3d2>
 8011e70:	2502      	movs	r5, #2
 8011e72:	e7f2      	b.n	8011e5a <_dtoa_r+0x36a>
 8011e74:	07f9      	lsls	r1, r7, #31
 8011e76:	d508      	bpl.n	8011e8a <_dtoa_r+0x39a>
 8011e78:	4640      	mov	r0, r8
 8011e7a:	4649      	mov	r1, r9
 8011e7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011e80:	f7ee fbba 	bl	80005f8 <__aeabi_dmul>
 8011e84:	3501      	adds	r5, #1
 8011e86:	4680      	mov	r8, r0
 8011e88:	4689      	mov	r9, r1
 8011e8a:	107f      	asrs	r7, r7, #1
 8011e8c:	3608      	adds	r6, #8
 8011e8e:	e7e5      	b.n	8011e5c <_dtoa_r+0x36c>
 8011e90:	f000 809b 	beq.w	8011fca <_dtoa_r+0x4da>
 8011e94:	9b00      	ldr	r3, [sp, #0]
 8011e96:	4f9d      	ldr	r7, [pc, #628]	; (801210c <_dtoa_r+0x61c>)
 8011e98:	425e      	negs	r6, r3
 8011e9a:	4b9b      	ldr	r3, [pc, #620]	; (8012108 <_dtoa_r+0x618>)
 8011e9c:	f006 020f 	and.w	r2, r6, #15
 8011ea0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea8:	ec51 0b19 	vmov	r0, r1, d9
 8011eac:	f7ee fba4 	bl	80005f8 <__aeabi_dmul>
 8011eb0:	1136      	asrs	r6, r6, #4
 8011eb2:	4682      	mov	sl, r0
 8011eb4:	468b      	mov	fp, r1
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	2502      	movs	r5, #2
 8011eba:	2e00      	cmp	r6, #0
 8011ebc:	d17a      	bne.n	8011fb4 <_dtoa_r+0x4c4>
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d1d3      	bne.n	8011e6a <_dtoa_r+0x37a>
 8011ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	f000 8082 	beq.w	8011fce <_dtoa_r+0x4de>
 8011eca:	4b91      	ldr	r3, [pc, #580]	; (8012110 <_dtoa_r+0x620>)
 8011ecc:	2200      	movs	r2, #0
 8011ece:	4650      	mov	r0, sl
 8011ed0:	4659      	mov	r1, fp
 8011ed2:	f7ee fe03 	bl	8000adc <__aeabi_dcmplt>
 8011ed6:	2800      	cmp	r0, #0
 8011ed8:	d079      	beq.n	8011fce <_dtoa_r+0x4de>
 8011eda:	9b03      	ldr	r3, [sp, #12]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d076      	beq.n	8011fce <_dtoa_r+0x4de>
 8011ee0:	9b02      	ldr	r3, [sp, #8]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	dd36      	ble.n	8011f54 <_dtoa_r+0x464>
 8011ee6:	9b00      	ldr	r3, [sp, #0]
 8011ee8:	4650      	mov	r0, sl
 8011eea:	4659      	mov	r1, fp
 8011eec:	1e5f      	subs	r7, r3, #1
 8011eee:	2200      	movs	r2, #0
 8011ef0:	4b88      	ldr	r3, [pc, #544]	; (8012114 <_dtoa_r+0x624>)
 8011ef2:	f7ee fb81 	bl	80005f8 <__aeabi_dmul>
 8011ef6:	9e02      	ldr	r6, [sp, #8]
 8011ef8:	4682      	mov	sl, r0
 8011efa:	468b      	mov	fp, r1
 8011efc:	3501      	adds	r5, #1
 8011efe:	4628      	mov	r0, r5
 8011f00:	f7ee fb10 	bl	8000524 <__aeabi_i2d>
 8011f04:	4652      	mov	r2, sl
 8011f06:	465b      	mov	r3, fp
 8011f08:	f7ee fb76 	bl	80005f8 <__aeabi_dmul>
 8011f0c:	4b82      	ldr	r3, [pc, #520]	; (8012118 <_dtoa_r+0x628>)
 8011f0e:	2200      	movs	r2, #0
 8011f10:	f7ee f9bc 	bl	800028c <__adddf3>
 8011f14:	46d0      	mov	r8, sl
 8011f16:	46d9      	mov	r9, fp
 8011f18:	4682      	mov	sl, r0
 8011f1a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011f1e:	2e00      	cmp	r6, #0
 8011f20:	d158      	bne.n	8011fd4 <_dtoa_r+0x4e4>
 8011f22:	4b7e      	ldr	r3, [pc, #504]	; (801211c <_dtoa_r+0x62c>)
 8011f24:	2200      	movs	r2, #0
 8011f26:	4640      	mov	r0, r8
 8011f28:	4649      	mov	r1, r9
 8011f2a:	f7ee f9ad 	bl	8000288 <__aeabi_dsub>
 8011f2e:	4652      	mov	r2, sl
 8011f30:	465b      	mov	r3, fp
 8011f32:	4680      	mov	r8, r0
 8011f34:	4689      	mov	r9, r1
 8011f36:	f7ee fdef 	bl	8000b18 <__aeabi_dcmpgt>
 8011f3a:	2800      	cmp	r0, #0
 8011f3c:	f040 8295 	bne.w	801246a <_dtoa_r+0x97a>
 8011f40:	4652      	mov	r2, sl
 8011f42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011f46:	4640      	mov	r0, r8
 8011f48:	4649      	mov	r1, r9
 8011f4a:	f7ee fdc7 	bl	8000adc <__aeabi_dcmplt>
 8011f4e:	2800      	cmp	r0, #0
 8011f50:	f040 8289 	bne.w	8012466 <_dtoa_r+0x976>
 8011f54:	ec5b ab19 	vmov	sl, fp, d9
 8011f58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	f2c0 8148 	blt.w	80121f0 <_dtoa_r+0x700>
 8011f60:	9a00      	ldr	r2, [sp, #0]
 8011f62:	2a0e      	cmp	r2, #14
 8011f64:	f300 8144 	bgt.w	80121f0 <_dtoa_r+0x700>
 8011f68:	4b67      	ldr	r3, [pc, #412]	; (8012108 <_dtoa_r+0x618>)
 8011f6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	f280 80d5 	bge.w	8012124 <_dtoa_r+0x634>
 8011f7a:	9b03      	ldr	r3, [sp, #12]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	f300 80d1 	bgt.w	8012124 <_dtoa_r+0x634>
 8011f82:	f040 826f 	bne.w	8012464 <_dtoa_r+0x974>
 8011f86:	4b65      	ldr	r3, [pc, #404]	; (801211c <_dtoa_r+0x62c>)
 8011f88:	2200      	movs	r2, #0
 8011f8a:	4640      	mov	r0, r8
 8011f8c:	4649      	mov	r1, r9
 8011f8e:	f7ee fb33 	bl	80005f8 <__aeabi_dmul>
 8011f92:	4652      	mov	r2, sl
 8011f94:	465b      	mov	r3, fp
 8011f96:	f7ee fdb5 	bl	8000b04 <__aeabi_dcmpge>
 8011f9a:	9e03      	ldr	r6, [sp, #12]
 8011f9c:	4637      	mov	r7, r6
 8011f9e:	2800      	cmp	r0, #0
 8011fa0:	f040 8245 	bne.w	801242e <_dtoa_r+0x93e>
 8011fa4:	9d01      	ldr	r5, [sp, #4]
 8011fa6:	2331      	movs	r3, #49	; 0x31
 8011fa8:	f805 3b01 	strb.w	r3, [r5], #1
 8011fac:	9b00      	ldr	r3, [sp, #0]
 8011fae:	3301      	adds	r3, #1
 8011fb0:	9300      	str	r3, [sp, #0]
 8011fb2:	e240      	b.n	8012436 <_dtoa_r+0x946>
 8011fb4:	07f2      	lsls	r2, r6, #31
 8011fb6:	d505      	bpl.n	8011fc4 <_dtoa_r+0x4d4>
 8011fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011fbc:	f7ee fb1c 	bl	80005f8 <__aeabi_dmul>
 8011fc0:	3501      	adds	r5, #1
 8011fc2:	2301      	movs	r3, #1
 8011fc4:	1076      	asrs	r6, r6, #1
 8011fc6:	3708      	adds	r7, #8
 8011fc8:	e777      	b.n	8011eba <_dtoa_r+0x3ca>
 8011fca:	2502      	movs	r5, #2
 8011fcc:	e779      	b.n	8011ec2 <_dtoa_r+0x3d2>
 8011fce:	9f00      	ldr	r7, [sp, #0]
 8011fd0:	9e03      	ldr	r6, [sp, #12]
 8011fd2:	e794      	b.n	8011efe <_dtoa_r+0x40e>
 8011fd4:	9901      	ldr	r1, [sp, #4]
 8011fd6:	4b4c      	ldr	r3, [pc, #304]	; (8012108 <_dtoa_r+0x618>)
 8011fd8:	4431      	add	r1, r6
 8011fda:	910d      	str	r1, [sp, #52]	; 0x34
 8011fdc:	9908      	ldr	r1, [sp, #32]
 8011fde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011fe2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011fe6:	2900      	cmp	r1, #0
 8011fe8:	d043      	beq.n	8012072 <_dtoa_r+0x582>
 8011fea:	494d      	ldr	r1, [pc, #308]	; (8012120 <_dtoa_r+0x630>)
 8011fec:	2000      	movs	r0, #0
 8011fee:	f7ee fc2d 	bl	800084c <__aeabi_ddiv>
 8011ff2:	4652      	mov	r2, sl
 8011ff4:	465b      	mov	r3, fp
 8011ff6:	f7ee f947 	bl	8000288 <__aeabi_dsub>
 8011ffa:	9d01      	ldr	r5, [sp, #4]
 8011ffc:	4682      	mov	sl, r0
 8011ffe:	468b      	mov	fp, r1
 8012000:	4649      	mov	r1, r9
 8012002:	4640      	mov	r0, r8
 8012004:	f7ee fda8 	bl	8000b58 <__aeabi_d2iz>
 8012008:	4606      	mov	r6, r0
 801200a:	f7ee fa8b 	bl	8000524 <__aeabi_i2d>
 801200e:	4602      	mov	r2, r0
 8012010:	460b      	mov	r3, r1
 8012012:	4640      	mov	r0, r8
 8012014:	4649      	mov	r1, r9
 8012016:	f7ee f937 	bl	8000288 <__aeabi_dsub>
 801201a:	3630      	adds	r6, #48	; 0x30
 801201c:	f805 6b01 	strb.w	r6, [r5], #1
 8012020:	4652      	mov	r2, sl
 8012022:	465b      	mov	r3, fp
 8012024:	4680      	mov	r8, r0
 8012026:	4689      	mov	r9, r1
 8012028:	f7ee fd58 	bl	8000adc <__aeabi_dcmplt>
 801202c:	2800      	cmp	r0, #0
 801202e:	d163      	bne.n	80120f8 <_dtoa_r+0x608>
 8012030:	4642      	mov	r2, r8
 8012032:	464b      	mov	r3, r9
 8012034:	4936      	ldr	r1, [pc, #216]	; (8012110 <_dtoa_r+0x620>)
 8012036:	2000      	movs	r0, #0
 8012038:	f7ee f926 	bl	8000288 <__aeabi_dsub>
 801203c:	4652      	mov	r2, sl
 801203e:	465b      	mov	r3, fp
 8012040:	f7ee fd4c 	bl	8000adc <__aeabi_dcmplt>
 8012044:	2800      	cmp	r0, #0
 8012046:	f040 80b5 	bne.w	80121b4 <_dtoa_r+0x6c4>
 801204a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801204c:	429d      	cmp	r5, r3
 801204e:	d081      	beq.n	8011f54 <_dtoa_r+0x464>
 8012050:	4b30      	ldr	r3, [pc, #192]	; (8012114 <_dtoa_r+0x624>)
 8012052:	2200      	movs	r2, #0
 8012054:	4650      	mov	r0, sl
 8012056:	4659      	mov	r1, fp
 8012058:	f7ee face 	bl	80005f8 <__aeabi_dmul>
 801205c:	4b2d      	ldr	r3, [pc, #180]	; (8012114 <_dtoa_r+0x624>)
 801205e:	4682      	mov	sl, r0
 8012060:	468b      	mov	fp, r1
 8012062:	4640      	mov	r0, r8
 8012064:	4649      	mov	r1, r9
 8012066:	2200      	movs	r2, #0
 8012068:	f7ee fac6 	bl	80005f8 <__aeabi_dmul>
 801206c:	4680      	mov	r8, r0
 801206e:	4689      	mov	r9, r1
 8012070:	e7c6      	b.n	8012000 <_dtoa_r+0x510>
 8012072:	4650      	mov	r0, sl
 8012074:	4659      	mov	r1, fp
 8012076:	f7ee fabf 	bl	80005f8 <__aeabi_dmul>
 801207a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801207c:	9d01      	ldr	r5, [sp, #4]
 801207e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012080:	4682      	mov	sl, r0
 8012082:	468b      	mov	fp, r1
 8012084:	4649      	mov	r1, r9
 8012086:	4640      	mov	r0, r8
 8012088:	f7ee fd66 	bl	8000b58 <__aeabi_d2iz>
 801208c:	4606      	mov	r6, r0
 801208e:	f7ee fa49 	bl	8000524 <__aeabi_i2d>
 8012092:	3630      	adds	r6, #48	; 0x30
 8012094:	4602      	mov	r2, r0
 8012096:	460b      	mov	r3, r1
 8012098:	4640      	mov	r0, r8
 801209a:	4649      	mov	r1, r9
 801209c:	f7ee f8f4 	bl	8000288 <__aeabi_dsub>
 80120a0:	f805 6b01 	strb.w	r6, [r5], #1
 80120a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120a6:	429d      	cmp	r5, r3
 80120a8:	4680      	mov	r8, r0
 80120aa:	4689      	mov	r9, r1
 80120ac:	f04f 0200 	mov.w	r2, #0
 80120b0:	d124      	bne.n	80120fc <_dtoa_r+0x60c>
 80120b2:	4b1b      	ldr	r3, [pc, #108]	; (8012120 <_dtoa_r+0x630>)
 80120b4:	4650      	mov	r0, sl
 80120b6:	4659      	mov	r1, fp
 80120b8:	f7ee f8e8 	bl	800028c <__adddf3>
 80120bc:	4602      	mov	r2, r0
 80120be:	460b      	mov	r3, r1
 80120c0:	4640      	mov	r0, r8
 80120c2:	4649      	mov	r1, r9
 80120c4:	f7ee fd28 	bl	8000b18 <__aeabi_dcmpgt>
 80120c8:	2800      	cmp	r0, #0
 80120ca:	d173      	bne.n	80121b4 <_dtoa_r+0x6c4>
 80120cc:	4652      	mov	r2, sl
 80120ce:	465b      	mov	r3, fp
 80120d0:	4913      	ldr	r1, [pc, #76]	; (8012120 <_dtoa_r+0x630>)
 80120d2:	2000      	movs	r0, #0
 80120d4:	f7ee f8d8 	bl	8000288 <__aeabi_dsub>
 80120d8:	4602      	mov	r2, r0
 80120da:	460b      	mov	r3, r1
 80120dc:	4640      	mov	r0, r8
 80120de:	4649      	mov	r1, r9
 80120e0:	f7ee fcfc 	bl	8000adc <__aeabi_dcmplt>
 80120e4:	2800      	cmp	r0, #0
 80120e6:	f43f af35 	beq.w	8011f54 <_dtoa_r+0x464>
 80120ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80120ec:	1e6b      	subs	r3, r5, #1
 80120ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80120f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80120f4:	2b30      	cmp	r3, #48	; 0x30
 80120f6:	d0f8      	beq.n	80120ea <_dtoa_r+0x5fa>
 80120f8:	9700      	str	r7, [sp, #0]
 80120fa:	e049      	b.n	8012190 <_dtoa_r+0x6a0>
 80120fc:	4b05      	ldr	r3, [pc, #20]	; (8012114 <_dtoa_r+0x624>)
 80120fe:	f7ee fa7b 	bl	80005f8 <__aeabi_dmul>
 8012102:	4680      	mov	r8, r0
 8012104:	4689      	mov	r9, r1
 8012106:	e7bd      	b.n	8012084 <_dtoa_r+0x594>
 8012108:	08015730 	.word	0x08015730
 801210c:	08015708 	.word	0x08015708
 8012110:	3ff00000 	.word	0x3ff00000
 8012114:	40240000 	.word	0x40240000
 8012118:	401c0000 	.word	0x401c0000
 801211c:	40140000 	.word	0x40140000
 8012120:	3fe00000 	.word	0x3fe00000
 8012124:	9d01      	ldr	r5, [sp, #4]
 8012126:	4656      	mov	r6, sl
 8012128:	465f      	mov	r7, fp
 801212a:	4642      	mov	r2, r8
 801212c:	464b      	mov	r3, r9
 801212e:	4630      	mov	r0, r6
 8012130:	4639      	mov	r1, r7
 8012132:	f7ee fb8b 	bl	800084c <__aeabi_ddiv>
 8012136:	f7ee fd0f 	bl	8000b58 <__aeabi_d2iz>
 801213a:	4682      	mov	sl, r0
 801213c:	f7ee f9f2 	bl	8000524 <__aeabi_i2d>
 8012140:	4642      	mov	r2, r8
 8012142:	464b      	mov	r3, r9
 8012144:	f7ee fa58 	bl	80005f8 <__aeabi_dmul>
 8012148:	4602      	mov	r2, r0
 801214a:	460b      	mov	r3, r1
 801214c:	4630      	mov	r0, r6
 801214e:	4639      	mov	r1, r7
 8012150:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012154:	f7ee f898 	bl	8000288 <__aeabi_dsub>
 8012158:	f805 6b01 	strb.w	r6, [r5], #1
 801215c:	9e01      	ldr	r6, [sp, #4]
 801215e:	9f03      	ldr	r7, [sp, #12]
 8012160:	1bae      	subs	r6, r5, r6
 8012162:	42b7      	cmp	r7, r6
 8012164:	4602      	mov	r2, r0
 8012166:	460b      	mov	r3, r1
 8012168:	d135      	bne.n	80121d6 <_dtoa_r+0x6e6>
 801216a:	f7ee f88f 	bl	800028c <__adddf3>
 801216e:	4642      	mov	r2, r8
 8012170:	464b      	mov	r3, r9
 8012172:	4606      	mov	r6, r0
 8012174:	460f      	mov	r7, r1
 8012176:	f7ee fccf 	bl	8000b18 <__aeabi_dcmpgt>
 801217a:	b9d0      	cbnz	r0, 80121b2 <_dtoa_r+0x6c2>
 801217c:	4642      	mov	r2, r8
 801217e:	464b      	mov	r3, r9
 8012180:	4630      	mov	r0, r6
 8012182:	4639      	mov	r1, r7
 8012184:	f7ee fca0 	bl	8000ac8 <__aeabi_dcmpeq>
 8012188:	b110      	cbz	r0, 8012190 <_dtoa_r+0x6a0>
 801218a:	f01a 0f01 	tst.w	sl, #1
 801218e:	d110      	bne.n	80121b2 <_dtoa_r+0x6c2>
 8012190:	4620      	mov	r0, r4
 8012192:	ee18 1a10 	vmov	r1, s16
 8012196:	f000 fe67 	bl	8012e68 <_Bfree>
 801219a:	2300      	movs	r3, #0
 801219c:	9800      	ldr	r0, [sp, #0]
 801219e:	702b      	strb	r3, [r5, #0]
 80121a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121a2:	3001      	adds	r0, #1
 80121a4:	6018      	str	r0, [r3, #0]
 80121a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	f43f acf1 	beq.w	8011b90 <_dtoa_r+0xa0>
 80121ae:	601d      	str	r5, [r3, #0]
 80121b0:	e4ee      	b.n	8011b90 <_dtoa_r+0xa0>
 80121b2:	9f00      	ldr	r7, [sp, #0]
 80121b4:	462b      	mov	r3, r5
 80121b6:	461d      	mov	r5, r3
 80121b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80121bc:	2a39      	cmp	r2, #57	; 0x39
 80121be:	d106      	bne.n	80121ce <_dtoa_r+0x6de>
 80121c0:	9a01      	ldr	r2, [sp, #4]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d1f7      	bne.n	80121b6 <_dtoa_r+0x6c6>
 80121c6:	9901      	ldr	r1, [sp, #4]
 80121c8:	2230      	movs	r2, #48	; 0x30
 80121ca:	3701      	adds	r7, #1
 80121cc:	700a      	strb	r2, [r1, #0]
 80121ce:	781a      	ldrb	r2, [r3, #0]
 80121d0:	3201      	adds	r2, #1
 80121d2:	701a      	strb	r2, [r3, #0]
 80121d4:	e790      	b.n	80120f8 <_dtoa_r+0x608>
 80121d6:	4ba6      	ldr	r3, [pc, #664]	; (8012470 <_dtoa_r+0x980>)
 80121d8:	2200      	movs	r2, #0
 80121da:	f7ee fa0d 	bl	80005f8 <__aeabi_dmul>
 80121de:	2200      	movs	r2, #0
 80121e0:	2300      	movs	r3, #0
 80121e2:	4606      	mov	r6, r0
 80121e4:	460f      	mov	r7, r1
 80121e6:	f7ee fc6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80121ea:	2800      	cmp	r0, #0
 80121ec:	d09d      	beq.n	801212a <_dtoa_r+0x63a>
 80121ee:	e7cf      	b.n	8012190 <_dtoa_r+0x6a0>
 80121f0:	9a08      	ldr	r2, [sp, #32]
 80121f2:	2a00      	cmp	r2, #0
 80121f4:	f000 80d7 	beq.w	80123a6 <_dtoa_r+0x8b6>
 80121f8:	9a06      	ldr	r2, [sp, #24]
 80121fa:	2a01      	cmp	r2, #1
 80121fc:	f300 80ba 	bgt.w	8012374 <_dtoa_r+0x884>
 8012200:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012202:	2a00      	cmp	r2, #0
 8012204:	f000 80b2 	beq.w	801236c <_dtoa_r+0x87c>
 8012208:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801220c:	9e07      	ldr	r6, [sp, #28]
 801220e:	9d04      	ldr	r5, [sp, #16]
 8012210:	9a04      	ldr	r2, [sp, #16]
 8012212:	441a      	add	r2, r3
 8012214:	9204      	str	r2, [sp, #16]
 8012216:	9a05      	ldr	r2, [sp, #20]
 8012218:	2101      	movs	r1, #1
 801221a:	441a      	add	r2, r3
 801221c:	4620      	mov	r0, r4
 801221e:	9205      	str	r2, [sp, #20]
 8012220:	f000 ff24 	bl	801306c <__i2b>
 8012224:	4607      	mov	r7, r0
 8012226:	2d00      	cmp	r5, #0
 8012228:	dd0c      	ble.n	8012244 <_dtoa_r+0x754>
 801222a:	9b05      	ldr	r3, [sp, #20]
 801222c:	2b00      	cmp	r3, #0
 801222e:	dd09      	ble.n	8012244 <_dtoa_r+0x754>
 8012230:	42ab      	cmp	r3, r5
 8012232:	9a04      	ldr	r2, [sp, #16]
 8012234:	bfa8      	it	ge
 8012236:	462b      	movge	r3, r5
 8012238:	1ad2      	subs	r2, r2, r3
 801223a:	9204      	str	r2, [sp, #16]
 801223c:	9a05      	ldr	r2, [sp, #20]
 801223e:	1aed      	subs	r5, r5, r3
 8012240:	1ad3      	subs	r3, r2, r3
 8012242:	9305      	str	r3, [sp, #20]
 8012244:	9b07      	ldr	r3, [sp, #28]
 8012246:	b31b      	cbz	r3, 8012290 <_dtoa_r+0x7a0>
 8012248:	9b08      	ldr	r3, [sp, #32]
 801224a:	2b00      	cmp	r3, #0
 801224c:	f000 80af 	beq.w	80123ae <_dtoa_r+0x8be>
 8012250:	2e00      	cmp	r6, #0
 8012252:	dd13      	ble.n	801227c <_dtoa_r+0x78c>
 8012254:	4639      	mov	r1, r7
 8012256:	4632      	mov	r2, r6
 8012258:	4620      	mov	r0, r4
 801225a:	f000 ffc7 	bl	80131ec <__pow5mult>
 801225e:	ee18 2a10 	vmov	r2, s16
 8012262:	4601      	mov	r1, r0
 8012264:	4607      	mov	r7, r0
 8012266:	4620      	mov	r0, r4
 8012268:	f000 ff16 	bl	8013098 <__multiply>
 801226c:	ee18 1a10 	vmov	r1, s16
 8012270:	4680      	mov	r8, r0
 8012272:	4620      	mov	r0, r4
 8012274:	f000 fdf8 	bl	8012e68 <_Bfree>
 8012278:	ee08 8a10 	vmov	s16, r8
 801227c:	9b07      	ldr	r3, [sp, #28]
 801227e:	1b9a      	subs	r2, r3, r6
 8012280:	d006      	beq.n	8012290 <_dtoa_r+0x7a0>
 8012282:	ee18 1a10 	vmov	r1, s16
 8012286:	4620      	mov	r0, r4
 8012288:	f000 ffb0 	bl	80131ec <__pow5mult>
 801228c:	ee08 0a10 	vmov	s16, r0
 8012290:	2101      	movs	r1, #1
 8012292:	4620      	mov	r0, r4
 8012294:	f000 feea 	bl	801306c <__i2b>
 8012298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801229a:	2b00      	cmp	r3, #0
 801229c:	4606      	mov	r6, r0
 801229e:	f340 8088 	ble.w	80123b2 <_dtoa_r+0x8c2>
 80122a2:	461a      	mov	r2, r3
 80122a4:	4601      	mov	r1, r0
 80122a6:	4620      	mov	r0, r4
 80122a8:	f000 ffa0 	bl	80131ec <__pow5mult>
 80122ac:	9b06      	ldr	r3, [sp, #24]
 80122ae:	2b01      	cmp	r3, #1
 80122b0:	4606      	mov	r6, r0
 80122b2:	f340 8081 	ble.w	80123b8 <_dtoa_r+0x8c8>
 80122b6:	f04f 0800 	mov.w	r8, #0
 80122ba:	6933      	ldr	r3, [r6, #16]
 80122bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80122c0:	6918      	ldr	r0, [r3, #16]
 80122c2:	f000 fe83 	bl	8012fcc <__hi0bits>
 80122c6:	f1c0 0020 	rsb	r0, r0, #32
 80122ca:	9b05      	ldr	r3, [sp, #20]
 80122cc:	4418      	add	r0, r3
 80122ce:	f010 001f 	ands.w	r0, r0, #31
 80122d2:	f000 8092 	beq.w	80123fa <_dtoa_r+0x90a>
 80122d6:	f1c0 0320 	rsb	r3, r0, #32
 80122da:	2b04      	cmp	r3, #4
 80122dc:	f340 808a 	ble.w	80123f4 <_dtoa_r+0x904>
 80122e0:	f1c0 001c 	rsb	r0, r0, #28
 80122e4:	9b04      	ldr	r3, [sp, #16]
 80122e6:	4403      	add	r3, r0
 80122e8:	9304      	str	r3, [sp, #16]
 80122ea:	9b05      	ldr	r3, [sp, #20]
 80122ec:	4403      	add	r3, r0
 80122ee:	4405      	add	r5, r0
 80122f0:	9305      	str	r3, [sp, #20]
 80122f2:	9b04      	ldr	r3, [sp, #16]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	dd07      	ble.n	8012308 <_dtoa_r+0x818>
 80122f8:	ee18 1a10 	vmov	r1, s16
 80122fc:	461a      	mov	r2, r3
 80122fe:	4620      	mov	r0, r4
 8012300:	f000 ffce 	bl	80132a0 <__lshift>
 8012304:	ee08 0a10 	vmov	s16, r0
 8012308:	9b05      	ldr	r3, [sp, #20]
 801230a:	2b00      	cmp	r3, #0
 801230c:	dd05      	ble.n	801231a <_dtoa_r+0x82a>
 801230e:	4631      	mov	r1, r6
 8012310:	461a      	mov	r2, r3
 8012312:	4620      	mov	r0, r4
 8012314:	f000 ffc4 	bl	80132a0 <__lshift>
 8012318:	4606      	mov	r6, r0
 801231a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801231c:	2b00      	cmp	r3, #0
 801231e:	d06e      	beq.n	80123fe <_dtoa_r+0x90e>
 8012320:	ee18 0a10 	vmov	r0, s16
 8012324:	4631      	mov	r1, r6
 8012326:	f001 f82b 	bl	8013380 <__mcmp>
 801232a:	2800      	cmp	r0, #0
 801232c:	da67      	bge.n	80123fe <_dtoa_r+0x90e>
 801232e:	9b00      	ldr	r3, [sp, #0]
 8012330:	3b01      	subs	r3, #1
 8012332:	ee18 1a10 	vmov	r1, s16
 8012336:	9300      	str	r3, [sp, #0]
 8012338:	220a      	movs	r2, #10
 801233a:	2300      	movs	r3, #0
 801233c:	4620      	mov	r0, r4
 801233e:	f000 fdb5 	bl	8012eac <__multadd>
 8012342:	9b08      	ldr	r3, [sp, #32]
 8012344:	ee08 0a10 	vmov	s16, r0
 8012348:	2b00      	cmp	r3, #0
 801234a:	f000 81b1 	beq.w	80126b0 <_dtoa_r+0xbc0>
 801234e:	2300      	movs	r3, #0
 8012350:	4639      	mov	r1, r7
 8012352:	220a      	movs	r2, #10
 8012354:	4620      	mov	r0, r4
 8012356:	f000 fda9 	bl	8012eac <__multadd>
 801235a:	9b02      	ldr	r3, [sp, #8]
 801235c:	2b00      	cmp	r3, #0
 801235e:	4607      	mov	r7, r0
 8012360:	f300 808e 	bgt.w	8012480 <_dtoa_r+0x990>
 8012364:	9b06      	ldr	r3, [sp, #24]
 8012366:	2b02      	cmp	r3, #2
 8012368:	dc51      	bgt.n	801240e <_dtoa_r+0x91e>
 801236a:	e089      	b.n	8012480 <_dtoa_r+0x990>
 801236c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801236e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012372:	e74b      	b.n	801220c <_dtoa_r+0x71c>
 8012374:	9b03      	ldr	r3, [sp, #12]
 8012376:	1e5e      	subs	r6, r3, #1
 8012378:	9b07      	ldr	r3, [sp, #28]
 801237a:	42b3      	cmp	r3, r6
 801237c:	bfbf      	itttt	lt
 801237e:	9b07      	ldrlt	r3, [sp, #28]
 8012380:	9607      	strlt	r6, [sp, #28]
 8012382:	1af2      	sublt	r2, r6, r3
 8012384:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012386:	bfb6      	itet	lt
 8012388:	189b      	addlt	r3, r3, r2
 801238a:	1b9e      	subge	r6, r3, r6
 801238c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801238e:	9b03      	ldr	r3, [sp, #12]
 8012390:	bfb8      	it	lt
 8012392:	2600      	movlt	r6, #0
 8012394:	2b00      	cmp	r3, #0
 8012396:	bfb7      	itett	lt
 8012398:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801239c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80123a0:	1a9d      	sublt	r5, r3, r2
 80123a2:	2300      	movlt	r3, #0
 80123a4:	e734      	b.n	8012210 <_dtoa_r+0x720>
 80123a6:	9e07      	ldr	r6, [sp, #28]
 80123a8:	9d04      	ldr	r5, [sp, #16]
 80123aa:	9f08      	ldr	r7, [sp, #32]
 80123ac:	e73b      	b.n	8012226 <_dtoa_r+0x736>
 80123ae:	9a07      	ldr	r2, [sp, #28]
 80123b0:	e767      	b.n	8012282 <_dtoa_r+0x792>
 80123b2:	9b06      	ldr	r3, [sp, #24]
 80123b4:	2b01      	cmp	r3, #1
 80123b6:	dc18      	bgt.n	80123ea <_dtoa_r+0x8fa>
 80123b8:	f1ba 0f00 	cmp.w	sl, #0
 80123bc:	d115      	bne.n	80123ea <_dtoa_r+0x8fa>
 80123be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80123c2:	b993      	cbnz	r3, 80123ea <_dtoa_r+0x8fa>
 80123c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80123c8:	0d1b      	lsrs	r3, r3, #20
 80123ca:	051b      	lsls	r3, r3, #20
 80123cc:	b183      	cbz	r3, 80123f0 <_dtoa_r+0x900>
 80123ce:	9b04      	ldr	r3, [sp, #16]
 80123d0:	3301      	adds	r3, #1
 80123d2:	9304      	str	r3, [sp, #16]
 80123d4:	9b05      	ldr	r3, [sp, #20]
 80123d6:	3301      	adds	r3, #1
 80123d8:	9305      	str	r3, [sp, #20]
 80123da:	f04f 0801 	mov.w	r8, #1
 80123de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	f47f af6a 	bne.w	80122ba <_dtoa_r+0x7ca>
 80123e6:	2001      	movs	r0, #1
 80123e8:	e76f      	b.n	80122ca <_dtoa_r+0x7da>
 80123ea:	f04f 0800 	mov.w	r8, #0
 80123ee:	e7f6      	b.n	80123de <_dtoa_r+0x8ee>
 80123f0:	4698      	mov	r8, r3
 80123f2:	e7f4      	b.n	80123de <_dtoa_r+0x8ee>
 80123f4:	f43f af7d 	beq.w	80122f2 <_dtoa_r+0x802>
 80123f8:	4618      	mov	r0, r3
 80123fa:	301c      	adds	r0, #28
 80123fc:	e772      	b.n	80122e4 <_dtoa_r+0x7f4>
 80123fe:	9b03      	ldr	r3, [sp, #12]
 8012400:	2b00      	cmp	r3, #0
 8012402:	dc37      	bgt.n	8012474 <_dtoa_r+0x984>
 8012404:	9b06      	ldr	r3, [sp, #24]
 8012406:	2b02      	cmp	r3, #2
 8012408:	dd34      	ble.n	8012474 <_dtoa_r+0x984>
 801240a:	9b03      	ldr	r3, [sp, #12]
 801240c:	9302      	str	r3, [sp, #8]
 801240e:	9b02      	ldr	r3, [sp, #8]
 8012410:	b96b      	cbnz	r3, 801242e <_dtoa_r+0x93e>
 8012412:	4631      	mov	r1, r6
 8012414:	2205      	movs	r2, #5
 8012416:	4620      	mov	r0, r4
 8012418:	f000 fd48 	bl	8012eac <__multadd>
 801241c:	4601      	mov	r1, r0
 801241e:	4606      	mov	r6, r0
 8012420:	ee18 0a10 	vmov	r0, s16
 8012424:	f000 ffac 	bl	8013380 <__mcmp>
 8012428:	2800      	cmp	r0, #0
 801242a:	f73f adbb 	bgt.w	8011fa4 <_dtoa_r+0x4b4>
 801242e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012430:	9d01      	ldr	r5, [sp, #4]
 8012432:	43db      	mvns	r3, r3
 8012434:	9300      	str	r3, [sp, #0]
 8012436:	f04f 0800 	mov.w	r8, #0
 801243a:	4631      	mov	r1, r6
 801243c:	4620      	mov	r0, r4
 801243e:	f000 fd13 	bl	8012e68 <_Bfree>
 8012442:	2f00      	cmp	r7, #0
 8012444:	f43f aea4 	beq.w	8012190 <_dtoa_r+0x6a0>
 8012448:	f1b8 0f00 	cmp.w	r8, #0
 801244c:	d005      	beq.n	801245a <_dtoa_r+0x96a>
 801244e:	45b8      	cmp	r8, r7
 8012450:	d003      	beq.n	801245a <_dtoa_r+0x96a>
 8012452:	4641      	mov	r1, r8
 8012454:	4620      	mov	r0, r4
 8012456:	f000 fd07 	bl	8012e68 <_Bfree>
 801245a:	4639      	mov	r1, r7
 801245c:	4620      	mov	r0, r4
 801245e:	f000 fd03 	bl	8012e68 <_Bfree>
 8012462:	e695      	b.n	8012190 <_dtoa_r+0x6a0>
 8012464:	2600      	movs	r6, #0
 8012466:	4637      	mov	r7, r6
 8012468:	e7e1      	b.n	801242e <_dtoa_r+0x93e>
 801246a:	9700      	str	r7, [sp, #0]
 801246c:	4637      	mov	r7, r6
 801246e:	e599      	b.n	8011fa4 <_dtoa_r+0x4b4>
 8012470:	40240000 	.word	0x40240000
 8012474:	9b08      	ldr	r3, [sp, #32]
 8012476:	2b00      	cmp	r3, #0
 8012478:	f000 80ca 	beq.w	8012610 <_dtoa_r+0xb20>
 801247c:	9b03      	ldr	r3, [sp, #12]
 801247e:	9302      	str	r3, [sp, #8]
 8012480:	2d00      	cmp	r5, #0
 8012482:	dd05      	ble.n	8012490 <_dtoa_r+0x9a0>
 8012484:	4639      	mov	r1, r7
 8012486:	462a      	mov	r2, r5
 8012488:	4620      	mov	r0, r4
 801248a:	f000 ff09 	bl	80132a0 <__lshift>
 801248e:	4607      	mov	r7, r0
 8012490:	f1b8 0f00 	cmp.w	r8, #0
 8012494:	d05b      	beq.n	801254e <_dtoa_r+0xa5e>
 8012496:	6879      	ldr	r1, [r7, #4]
 8012498:	4620      	mov	r0, r4
 801249a:	f000 fca5 	bl	8012de8 <_Balloc>
 801249e:	4605      	mov	r5, r0
 80124a0:	b928      	cbnz	r0, 80124ae <_dtoa_r+0x9be>
 80124a2:	4b87      	ldr	r3, [pc, #540]	; (80126c0 <_dtoa_r+0xbd0>)
 80124a4:	4602      	mov	r2, r0
 80124a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80124aa:	f7ff bb3b 	b.w	8011b24 <_dtoa_r+0x34>
 80124ae:	693a      	ldr	r2, [r7, #16]
 80124b0:	3202      	adds	r2, #2
 80124b2:	0092      	lsls	r2, r2, #2
 80124b4:	f107 010c 	add.w	r1, r7, #12
 80124b8:	300c      	adds	r0, #12
 80124ba:	f7fd fd29 	bl	800ff10 <memcpy>
 80124be:	2201      	movs	r2, #1
 80124c0:	4629      	mov	r1, r5
 80124c2:	4620      	mov	r0, r4
 80124c4:	f000 feec 	bl	80132a0 <__lshift>
 80124c8:	9b01      	ldr	r3, [sp, #4]
 80124ca:	f103 0901 	add.w	r9, r3, #1
 80124ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80124d2:	4413      	add	r3, r2
 80124d4:	9305      	str	r3, [sp, #20]
 80124d6:	f00a 0301 	and.w	r3, sl, #1
 80124da:	46b8      	mov	r8, r7
 80124dc:	9304      	str	r3, [sp, #16]
 80124de:	4607      	mov	r7, r0
 80124e0:	4631      	mov	r1, r6
 80124e2:	ee18 0a10 	vmov	r0, s16
 80124e6:	f7ff fa77 	bl	80119d8 <quorem>
 80124ea:	4641      	mov	r1, r8
 80124ec:	9002      	str	r0, [sp, #8]
 80124ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80124f2:	ee18 0a10 	vmov	r0, s16
 80124f6:	f000 ff43 	bl	8013380 <__mcmp>
 80124fa:	463a      	mov	r2, r7
 80124fc:	9003      	str	r0, [sp, #12]
 80124fe:	4631      	mov	r1, r6
 8012500:	4620      	mov	r0, r4
 8012502:	f000 ff59 	bl	80133b8 <__mdiff>
 8012506:	68c2      	ldr	r2, [r0, #12]
 8012508:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801250c:	4605      	mov	r5, r0
 801250e:	bb02      	cbnz	r2, 8012552 <_dtoa_r+0xa62>
 8012510:	4601      	mov	r1, r0
 8012512:	ee18 0a10 	vmov	r0, s16
 8012516:	f000 ff33 	bl	8013380 <__mcmp>
 801251a:	4602      	mov	r2, r0
 801251c:	4629      	mov	r1, r5
 801251e:	4620      	mov	r0, r4
 8012520:	9207      	str	r2, [sp, #28]
 8012522:	f000 fca1 	bl	8012e68 <_Bfree>
 8012526:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801252a:	ea43 0102 	orr.w	r1, r3, r2
 801252e:	9b04      	ldr	r3, [sp, #16]
 8012530:	430b      	orrs	r3, r1
 8012532:	464d      	mov	r5, r9
 8012534:	d10f      	bne.n	8012556 <_dtoa_r+0xa66>
 8012536:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801253a:	d02a      	beq.n	8012592 <_dtoa_r+0xaa2>
 801253c:	9b03      	ldr	r3, [sp, #12]
 801253e:	2b00      	cmp	r3, #0
 8012540:	dd02      	ble.n	8012548 <_dtoa_r+0xa58>
 8012542:	9b02      	ldr	r3, [sp, #8]
 8012544:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012548:	f88b a000 	strb.w	sl, [fp]
 801254c:	e775      	b.n	801243a <_dtoa_r+0x94a>
 801254e:	4638      	mov	r0, r7
 8012550:	e7ba      	b.n	80124c8 <_dtoa_r+0x9d8>
 8012552:	2201      	movs	r2, #1
 8012554:	e7e2      	b.n	801251c <_dtoa_r+0xa2c>
 8012556:	9b03      	ldr	r3, [sp, #12]
 8012558:	2b00      	cmp	r3, #0
 801255a:	db04      	blt.n	8012566 <_dtoa_r+0xa76>
 801255c:	9906      	ldr	r1, [sp, #24]
 801255e:	430b      	orrs	r3, r1
 8012560:	9904      	ldr	r1, [sp, #16]
 8012562:	430b      	orrs	r3, r1
 8012564:	d122      	bne.n	80125ac <_dtoa_r+0xabc>
 8012566:	2a00      	cmp	r2, #0
 8012568:	ddee      	ble.n	8012548 <_dtoa_r+0xa58>
 801256a:	ee18 1a10 	vmov	r1, s16
 801256e:	2201      	movs	r2, #1
 8012570:	4620      	mov	r0, r4
 8012572:	f000 fe95 	bl	80132a0 <__lshift>
 8012576:	4631      	mov	r1, r6
 8012578:	ee08 0a10 	vmov	s16, r0
 801257c:	f000 ff00 	bl	8013380 <__mcmp>
 8012580:	2800      	cmp	r0, #0
 8012582:	dc03      	bgt.n	801258c <_dtoa_r+0xa9c>
 8012584:	d1e0      	bne.n	8012548 <_dtoa_r+0xa58>
 8012586:	f01a 0f01 	tst.w	sl, #1
 801258a:	d0dd      	beq.n	8012548 <_dtoa_r+0xa58>
 801258c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012590:	d1d7      	bne.n	8012542 <_dtoa_r+0xa52>
 8012592:	2339      	movs	r3, #57	; 0x39
 8012594:	f88b 3000 	strb.w	r3, [fp]
 8012598:	462b      	mov	r3, r5
 801259a:	461d      	mov	r5, r3
 801259c:	3b01      	subs	r3, #1
 801259e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80125a2:	2a39      	cmp	r2, #57	; 0x39
 80125a4:	d071      	beq.n	801268a <_dtoa_r+0xb9a>
 80125a6:	3201      	adds	r2, #1
 80125a8:	701a      	strb	r2, [r3, #0]
 80125aa:	e746      	b.n	801243a <_dtoa_r+0x94a>
 80125ac:	2a00      	cmp	r2, #0
 80125ae:	dd07      	ble.n	80125c0 <_dtoa_r+0xad0>
 80125b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80125b4:	d0ed      	beq.n	8012592 <_dtoa_r+0xaa2>
 80125b6:	f10a 0301 	add.w	r3, sl, #1
 80125ba:	f88b 3000 	strb.w	r3, [fp]
 80125be:	e73c      	b.n	801243a <_dtoa_r+0x94a>
 80125c0:	9b05      	ldr	r3, [sp, #20]
 80125c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80125c6:	4599      	cmp	r9, r3
 80125c8:	d047      	beq.n	801265a <_dtoa_r+0xb6a>
 80125ca:	ee18 1a10 	vmov	r1, s16
 80125ce:	2300      	movs	r3, #0
 80125d0:	220a      	movs	r2, #10
 80125d2:	4620      	mov	r0, r4
 80125d4:	f000 fc6a 	bl	8012eac <__multadd>
 80125d8:	45b8      	cmp	r8, r7
 80125da:	ee08 0a10 	vmov	s16, r0
 80125de:	f04f 0300 	mov.w	r3, #0
 80125e2:	f04f 020a 	mov.w	r2, #10
 80125e6:	4641      	mov	r1, r8
 80125e8:	4620      	mov	r0, r4
 80125ea:	d106      	bne.n	80125fa <_dtoa_r+0xb0a>
 80125ec:	f000 fc5e 	bl	8012eac <__multadd>
 80125f0:	4680      	mov	r8, r0
 80125f2:	4607      	mov	r7, r0
 80125f4:	f109 0901 	add.w	r9, r9, #1
 80125f8:	e772      	b.n	80124e0 <_dtoa_r+0x9f0>
 80125fa:	f000 fc57 	bl	8012eac <__multadd>
 80125fe:	4639      	mov	r1, r7
 8012600:	4680      	mov	r8, r0
 8012602:	2300      	movs	r3, #0
 8012604:	220a      	movs	r2, #10
 8012606:	4620      	mov	r0, r4
 8012608:	f000 fc50 	bl	8012eac <__multadd>
 801260c:	4607      	mov	r7, r0
 801260e:	e7f1      	b.n	80125f4 <_dtoa_r+0xb04>
 8012610:	9b03      	ldr	r3, [sp, #12]
 8012612:	9302      	str	r3, [sp, #8]
 8012614:	9d01      	ldr	r5, [sp, #4]
 8012616:	ee18 0a10 	vmov	r0, s16
 801261a:	4631      	mov	r1, r6
 801261c:	f7ff f9dc 	bl	80119d8 <quorem>
 8012620:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012624:	9b01      	ldr	r3, [sp, #4]
 8012626:	f805 ab01 	strb.w	sl, [r5], #1
 801262a:	1aea      	subs	r2, r5, r3
 801262c:	9b02      	ldr	r3, [sp, #8]
 801262e:	4293      	cmp	r3, r2
 8012630:	dd09      	ble.n	8012646 <_dtoa_r+0xb56>
 8012632:	ee18 1a10 	vmov	r1, s16
 8012636:	2300      	movs	r3, #0
 8012638:	220a      	movs	r2, #10
 801263a:	4620      	mov	r0, r4
 801263c:	f000 fc36 	bl	8012eac <__multadd>
 8012640:	ee08 0a10 	vmov	s16, r0
 8012644:	e7e7      	b.n	8012616 <_dtoa_r+0xb26>
 8012646:	9b02      	ldr	r3, [sp, #8]
 8012648:	2b00      	cmp	r3, #0
 801264a:	bfc8      	it	gt
 801264c:	461d      	movgt	r5, r3
 801264e:	9b01      	ldr	r3, [sp, #4]
 8012650:	bfd8      	it	le
 8012652:	2501      	movle	r5, #1
 8012654:	441d      	add	r5, r3
 8012656:	f04f 0800 	mov.w	r8, #0
 801265a:	ee18 1a10 	vmov	r1, s16
 801265e:	2201      	movs	r2, #1
 8012660:	4620      	mov	r0, r4
 8012662:	f000 fe1d 	bl	80132a0 <__lshift>
 8012666:	4631      	mov	r1, r6
 8012668:	ee08 0a10 	vmov	s16, r0
 801266c:	f000 fe88 	bl	8013380 <__mcmp>
 8012670:	2800      	cmp	r0, #0
 8012672:	dc91      	bgt.n	8012598 <_dtoa_r+0xaa8>
 8012674:	d102      	bne.n	801267c <_dtoa_r+0xb8c>
 8012676:	f01a 0f01 	tst.w	sl, #1
 801267a:	d18d      	bne.n	8012598 <_dtoa_r+0xaa8>
 801267c:	462b      	mov	r3, r5
 801267e:	461d      	mov	r5, r3
 8012680:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012684:	2a30      	cmp	r2, #48	; 0x30
 8012686:	d0fa      	beq.n	801267e <_dtoa_r+0xb8e>
 8012688:	e6d7      	b.n	801243a <_dtoa_r+0x94a>
 801268a:	9a01      	ldr	r2, [sp, #4]
 801268c:	429a      	cmp	r2, r3
 801268e:	d184      	bne.n	801259a <_dtoa_r+0xaaa>
 8012690:	9b00      	ldr	r3, [sp, #0]
 8012692:	3301      	adds	r3, #1
 8012694:	9300      	str	r3, [sp, #0]
 8012696:	2331      	movs	r3, #49	; 0x31
 8012698:	7013      	strb	r3, [r2, #0]
 801269a:	e6ce      	b.n	801243a <_dtoa_r+0x94a>
 801269c:	4b09      	ldr	r3, [pc, #36]	; (80126c4 <_dtoa_r+0xbd4>)
 801269e:	f7ff ba95 	b.w	8011bcc <_dtoa_r+0xdc>
 80126a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	f47f aa6e 	bne.w	8011b86 <_dtoa_r+0x96>
 80126aa:	4b07      	ldr	r3, [pc, #28]	; (80126c8 <_dtoa_r+0xbd8>)
 80126ac:	f7ff ba8e 	b.w	8011bcc <_dtoa_r+0xdc>
 80126b0:	9b02      	ldr	r3, [sp, #8]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	dcae      	bgt.n	8012614 <_dtoa_r+0xb24>
 80126b6:	9b06      	ldr	r3, [sp, #24]
 80126b8:	2b02      	cmp	r3, #2
 80126ba:	f73f aea8 	bgt.w	801240e <_dtoa_r+0x91e>
 80126be:	e7a9      	b.n	8012614 <_dtoa_r+0xb24>
 80126c0:	08015620 	.word	0x08015620
 80126c4:	08015424 	.word	0x08015424
 80126c8:	080155a1 	.word	0x080155a1

080126cc <rshift>:
 80126cc:	6903      	ldr	r3, [r0, #16]
 80126ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80126d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80126da:	f100 0414 	add.w	r4, r0, #20
 80126de:	dd45      	ble.n	801276c <rshift+0xa0>
 80126e0:	f011 011f 	ands.w	r1, r1, #31
 80126e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80126e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80126ec:	d10c      	bne.n	8012708 <rshift+0x3c>
 80126ee:	f100 0710 	add.w	r7, r0, #16
 80126f2:	4629      	mov	r1, r5
 80126f4:	42b1      	cmp	r1, r6
 80126f6:	d334      	bcc.n	8012762 <rshift+0x96>
 80126f8:	1a9b      	subs	r3, r3, r2
 80126fa:	009b      	lsls	r3, r3, #2
 80126fc:	1eea      	subs	r2, r5, #3
 80126fe:	4296      	cmp	r6, r2
 8012700:	bf38      	it	cc
 8012702:	2300      	movcc	r3, #0
 8012704:	4423      	add	r3, r4
 8012706:	e015      	b.n	8012734 <rshift+0x68>
 8012708:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801270c:	f1c1 0820 	rsb	r8, r1, #32
 8012710:	40cf      	lsrs	r7, r1
 8012712:	f105 0e04 	add.w	lr, r5, #4
 8012716:	46a1      	mov	r9, r4
 8012718:	4576      	cmp	r6, lr
 801271a:	46f4      	mov	ip, lr
 801271c:	d815      	bhi.n	801274a <rshift+0x7e>
 801271e:	1a9a      	subs	r2, r3, r2
 8012720:	0092      	lsls	r2, r2, #2
 8012722:	3a04      	subs	r2, #4
 8012724:	3501      	adds	r5, #1
 8012726:	42ae      	cmp	r6, r5
 8012728:	bf38      	it	cc
 801272a:	2200      	movcc	r2, #0
 801272c:	18a3      	adds	r3, r4, r2
 801272e:	50a7      	str	r7, [r4, r2]
 8012730:	b107      	cbz	r7, 8012734 <rshift+0x68>
 8012732:	3304      	adds	r3, #4
 8012734:	1b1a      	subs	r2, r3, r4
 8012736:	42a3      	cmp	r3, r4
 8012738:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801273c:	bf08      	it	eq
 801273e:	2300      	moveq	r3, #0
 8012740:	6102      	str	r2, [r0, #16]
 8012742:	bf08      	it	eq
 8012744:	6143      	streq	r3, [r0, #20]
 8012746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801274a:	f8dc c000 	ldr.w	ip, [ip]
 801274e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012752:	ea4c 0707 	orr.w	r7, ip, r7
 8012756:	f849 7b04 	str.w	r7, [r9], #4
 801275a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801275e:	40cf      	lsrs	r7, r1
 8012760:	e7da      	b.n	8012718 <rshift+0x4c>
 8012762:	f851 cb04 	ldr.w	ip, [r1], #4
 8012766:	f847 cf04 	str.w	ip, [r7, #4]!
 801276a:	e7c3      	b.n	80126f4 <rshift+0x28>
 801276c:	4623      	mov	r3, r4
 801276e:	e7e1      	b.n	8012734 <rshift+0x68>

08012770 <__hexdig_fun>:
 8012770:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012774:	2b09      	cmp	r3, #9
 8012776:	d802      	bhi.n	801277e <__hexdig_fun+0xe>
 8012778:	3820      	subs	r0, #32
 801277a:	b2c0      	uxtb	r0, r0
 801277c:	4770      	bx	lr
 801277e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012782:	2b05      	cmp	r3, #5
 8012784:	d801      	bhi.n	801278a <__hexdig_fun+0x1a>
 8012786:	3847      	subs	r0, #71	; 0x47
 8012788:	e7f7      	b.n	801277a <__hexdig_fun+0xa>
 801278a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801278e:	2b05      	cmp	r3, #5
 8012790:	d801      	bhi.n	8012796 <__hexdig_fun+0x26>
 8012792:	3827      	subs	r0, #39	; 0x27
 8012794:	e7f1      	b.n	801277a <__hexdig_fun+0xa>
 8012796:	2000      	movs	r0, #0
 8012798:	4770      	bx	lr
	...

0801279c <__gethex>:
 801279c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a0:	ed2d 8b02 	vpush	{d8}
 80127a4:	b089      	sub	sp, #36	; 0x24
 80127a6:	ee08 0a10 	vmov	s16, r0
 80127aa:	9304      	str	r3, [sp, #16]
 80127ac:	4bb4      	ldr	r3, [pc, #720]	; (8012a80 <__gethex+0x2e4>)
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	9301      	str	r3, [sp, #4]
 80127b2:	4618      	mov	r0, r3
 80127b4:	468b      	mov	fp, r1
 80127b6:	4690      	mov	r8, r2
 80127b8:	f7ed fd0a 	bl	80001d0 <strlen>
 80127bc:	9b01      	ldr	r3, [sp, #4]
 80127be:	f8db 2000 	ldr.w	r2, [fp]
 80127c2:	4403      	add	r3, r0
 80127c4:	4682      	mov	sl, r0
 80127c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80127ca:	9305      	str	r3, [sp, #20]
 80127cc:	1c93      	adds	r3, r2, #2
 80127ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80127d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80127d6:	32fe      	adds	r2, #254	; 0xfe
 80127d8:	18d1      	adds	r1, r2, r3
 80127da:	461f      	mov	r7, r3
 80127dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80127e0:	9100      	str	r1, [sp, #0]
 80127e2:	2830      	cmp	r0, #48	; 0x30
 80127e4:	d0f8      	beq.n	80127d8 <__gethex+0x3c>
 80127e6:	f7ff ffc3 	bl	8012770 <__hexdig_fun>
 80127ea:	4604      	mov	r4, r0
 80127ec:	2800      	cmp	r0, #0
 80127ee:	d13a      	bne.n	8012866 <__gethex+0xca>
 80127f0:	9901      	ldr	r1, [sp, #4]
 80127f2:	4652      	mov	r2, sl
 80127f4:	4638      	mov	r0, r7
 80127f6:	f001 fa23 	bl	8013c40 <strncmp>
 80127fa:	4605      	mov	r5, r0
 80127fc:	2800      	cmp	r0, #0
 80127fe:	d168      	bne.n	80128d2 <__gethex+0x136>
 8012800:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012804:	eb07 060a 	add.w	r6, r7, sl
 8012808:	f7ff ffb2 	bl	8012770 <__hexdig_fun>
 801280c:	2800      	cmp	r0, #0
 801280e:	d062      	beq.n	80128d6 <__gethex+0x13a>
 8012810:	4633      	mov	r3, r6
 8012812:	7818      	ldrb	r0, [r3, #0]
 8012814:	2830      	cmp	r0, #48	; 0x30
 8012816:	461f      	mov	r7, r3
 8012818:	f103 0301 	add.w	r3, r3, #1
 801281c:	d0f9      	beq.n	8012812 <__gethex+0x76>
 801281e:	f7ff ffa7 	bl	8012770 <__hexdig_fun>
 8012822:	2301      	movs	r3, #1
 8012824:	fab0 f480 	clz	r4, r0
 8012828:	0964      	lsrs	r4, r4, #5
 801282a:	4635      	mov	r5, r6
 801282c:	9300      	str	r3, [sp, #0]
 801282e:	463a      	mov	r2, r7
 8012830:	4616      	mov	r6, r2
 8012832:	3201      	adds	r2, #1
 8012834:	7830      	ldrb	r0, [r6, #0]
 8012836:	f7ff ff9b 	bl	8012770 <__hexdig_fun>
 801283a:	2800      	cmp	r0, #0
 801283c:	d1f8      	bne.n	8012830 <__gethex+0x94>
 801283e:	9901      	ldr	r1, [sp, #4]
 8012840:	4652      	mov	r2, sl
 8012842:	4630      	mov	r0, r6
 8012844:	f001 f9fc 	bl	8013c40 <strncmp>
 8012848:	b980      	cbnz	r0, 801286c <__gethex+0xd0>
 801284a:	b94d      	cbnz	r5, 8012860 <__gethex+0xc4>
 801284c:	eb06 050a 	add.w	r5, r6, sl
 8012850:	462a      	mov	r2, r5
 8012852:	4616      	mov	r6, r2
 8012854:	3201      	adds	r2, #1
 8012856:	7830      	ldrb	r0, [r6, #0]
 8012858:	f7ff ff8a 	bl	8012770 <__hexdig_fun>
 801285c:	2800      	cmp	r0, #0
 801285e:	d1f8      	bne.n	8012852 <__gethex+0xb6>
 8012860:	1bad      	subs	r5, r5, r6
 8012862:	00ad      	lsls	r5, r5, #2
 8012864:	e004      	b.n	8012870 <__gethex+0xd4>
 8012866:	2400      	movs	r4, #0
 8012868:	4625      	mov	r5, r4
 801286a:	e7e0      	b.n	801282e <__gethex+0x92>
 801286c:	2d00      	cmp	r5, #0
 801286e:	d1f7      	bne.n	8012860 <__gethex+0xc4>
 8012870:	7833      	ldrb	r3, [r6, #0]
 8012872:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012876:	2b50      	cmp	r3, #80	; 0x50
 8012878:	d13b      	bne.n	80128f2 <__gethex+0x156>
 801287a:	7873      	ldrb	r3, [r6, #1]
 801287c:	2b2b      	cmp	r3, #43	; 0x2b
 801287e:	d02c      	beq.n	80128da <__gethex+0x13e>
 8012880:	2b2d      	cmp	r3, #45	; 0x2d
 8012882:	d02e      	beq.n	80128e2 <__gethex+0x146>
 8012884:	1c71      	adds	r1, r6, #1
 8012886:	f04f 0900 	mov.w	r9, #0
 801288a:	7808      	ldrb	r0, [r1, #0]
 801288c:	f7ff ff70 	bl	8012770 <__hexdig_fun>
 8012890:	1e43      	subs	r3, r0, #1
 8012892:	b2db      	uxtb	r3, r3
 8012894:	2b18      	cmp	r3, #24
 8012896:	d82c      	bhi.n	80128f2 <__gethex+0x156>
 8012898:	f1a0 0210 	sub.w	r2, r0, #16
 801289c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80128a0:	f7ff ff66 	bl	8012770 <__hexdig_fun>
 80128a4:	1e43      	subs	r3, r0, #1
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	2b18      	cmp	r3, #24
 80128aa:	d91d      	bls.n	80128e8 <__gethex+0x14c>
 80128ac:	f1b9 0f00 	cmp.w	r9, #0
 80128b0:	d000      	beq.n	80128b4 <__gethex+0x118>
 80128b2:	4252      	negs	r2, r2
 80128b4:	4415      	add	r5, r2
 80128b6:	f8cb 1000 	str.w	r1, [fp]
 80128ba:	b1e4      	cbz	r4, 80128f6 <__gethex+0x15a>
 80128bc:	9b00      	ldr	r3, [sp, #0]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	bf14      	ite	ne
 80128c2:	2700      	movne	r7, #0
 80128c4:	2706      	moveq	r7, #6
 80128c6:	4638      	mov	r0, r7
 80128c8:	b009      	add	sp, #36	; 0x24
 80128ca:	ecbd 8b02 	vpop	{d8}
 80128ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128d2:	463e      	mov	r6, r7
 80128d4:	4625      	mov	r5, r4
 80128d6:	2401      	movs	r4, #1
 80128d8:	e7ca      	b.n	8012870 <__gethex+0xd4>
 80128da:	f04f 0900 	mov.w	r9, #0
 80128de:	1cb1      	adds	r1, r6, #2
 80128e0:	e7d3      	b.n	801288a <__gethex+0xee>
 80128e2:	f04f 0901 	mov.w	r9, #1
 80128e6:	e7fa      	b.n	80128de <__gethex+0x142>
 80128e8:	230a      	movs	r3, #10
 80128ea:	fb03 0202 	mla	r2, r3, r2, r0
 80128ee:	3a10      	subs	r2, #16
 80128f0:	e7d4      	b.n	801289c <__gethex+0x100>
 80128f2:	4631      	mov	r1, r6
 80128f4:	e7df      	b.n	80128b6 <__gethex+0x11a>
 80128f6:	1bf3      	subs	r3, r6, r7
 80128f8:	3b01      	subs	r3, #1
 80128fa:	4621      	mov	r1, r4
 80128fc:	2b07      	cmp	r3, #7
 80128fe:	dc0b      	bgt.n	8012918 <__gethex+0x17c>
 8012900:	ee18 0a10 	vmov	r0, s16
 8012904:	f000 fa70 	bl	8012de8 <_Balloc>
 8012908:	4604      	mov	r4, r0
 801290a:	b940      	cbnz	r0, 801291e <__gethex+0x182>
 801290c:	4b5d      	ldr	r3, [pc, #372]	; (8012a84 <__gethex+0x2e8>)
 801290e:	4602      	mov	r2, r0
 8012910:	21de      	movs	r1, #222	; 0xde
 8012912:	485d      	ldr	r0, [pc, #372]	; (8012a88 <__gethex+0x2ec>)
 8012914:	f001 f9b6 	bl	8013c84 <__assert_func>
 8012918:	3101      	adds	r1, #1
 801291a:	105b      	asrs	r3, r3, #1
 801291c:	e7ee      	b.n	80128fc <__gethex+0x160>
 801291e:	f100 0914 	add.w	r9, r0, #20
 8012922:	f04f 0b00 	mov.w	fp, #0
 8012926:	f1ca 0301 	rsb	r3, sl, #1
 801292a:	f8cd 9008 	str.w	r9, [sp, #8]
 801292e:	f8cd b000 	str.w	fp, [sp]
 8012932:	9306      	str	r3, [sp, #24]
 8012934:	42b7      	cmp	r7, r6
 8012936:	d340      	bcc.n	80129ba <__gethex+0x21e>
 8012938:	9802      	ldr	r0, [sp, #8]
 801293a:	9b00      	ldr	r3, [sp, #0]
 801293c:	f840 3b04 	str.w	r3, [r0], #4
 8012940:	eba0 0009 	sub.w	r0, r0, r9
 8012944:	1080      	asrs	r0, r0, #2
 8012946:	0146      	lsls	r6, r0, #5
 8012948:	6120      	str	r0, [r4, #16]
 801294a:	4618      	mov	r0, r3
 801294c:	f000 fb3e 	bl	8012fcc <__hi0bits>
 8012950:	1a30      	subs	r0, r6, r0
 8012952:	f8d8 6000 	ldr.w	r6, [r8]
 8012956:	42b0      	cmp	r0, r6
 8012958:	dd63      	ble.n	8012a22 <__gethex+0x286>
 801295a:	1b87      	subs	r7, r0, r6
 801295c:	4639      	mov	r1, r7
 801295e:	4620      	mov	r0, r4
 8012960:	f000 fee2 	bl	8013728 <__any_on>
 8012964:	4682      	mov	sl, r0
 8012966:	b1a8      	cbz	r0, 8012994 <__gethex+0x1f8>
 8012968:	1e7b      	subs	r3, r7, #1
 801296a:	1159      	asrs	r1, r3, #5
 801296c:	f003 021f 	and.w	r2, r3, #31
 8012970:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012974:	f04f 0a01 	mov.w	sl, #1
 8012978:	fa0a f202 	lsl.w	r2, sl, r2
 801297c:	420a      	tst	r2, r1
 801297e:	d009      	beq.n	8012994 <__gethex+0x1f8>
 8012980:	4553      	cmp	r3, sl
 8012982:	dd05      	ble.n	8012990 <__gethex+0x1f4>
 8012984:	1eb9      	subs	r1, r7, #2
 8012986:	4620      	mov	r0, r4
 8012988:	f000 fece 	bl	8013728 <__any_on>
 801298c:	2800      	cmp	r0, #0
 801298e:	d145      	bne.n	8012a1c <__gethex+0x280>
 8012990:	f04f 0a02 	mov.w	sl, #2
 8012994:	4639      	mov	r1, r7
 8012996:	4620      	mov	r0, r4
 8012998:	f7ff fe98 	bl	80126cc <rshift>
 801299c:	443d      	add	r5, r7
 801299e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80129a2:	42ab      	cmp	r3, r5
 80129a4:	da4c      	bge.n	8012a40 <__gethex+0x2a4>
 80129a6:	ee18 0a10 	vmov	r0, s16
 80129aa:	4621      	mov	r1, r4
 80129ac:	f000 fa5c 	bl	8012e68 <_Bfree>
 80129b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80129b2:	2300      	movs	r3, #0
 80129b4:	6013      	str	r3, [r2, #0]
 80129b6:	27a3      	movs	r7, #163	; 0xa3
 80129b8:	e785      	b.n	80128c6 <__gethex+0x12a>
 80129ba:	1e73      	subs	r3, r6, #1
 80129bc:	9a05      	ldr	r2, [sp, #20]
 80129be:	9303      	str	r3, [sp, #12]
 80129c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80129c4:	4293      	cmp	r3, r2
 80129c6:	d019      	beq.n	80129fc <__gethex+0x260>
 80129c8:	f1bb 0f20 	cmp.w	fp, #32
 80129cc:	d107      	bne.n	80129de <__gethex+0x242>
 80129ce:	9b02      	ldr	r3, [sp, #8]
 80129d0:	9a00      	ldr	r2, [sp, #0]
 80129d2:	f843 2b04 	str.w	r2, [r3], #4
 80129d6:	9302      	str	r3, [sp, #8]
 80129d8:	2300      	movs	r3, #0
 80129da:	9300      	str	r3, [sp, #0]
 80129dc:	469b      	mov	fp, r3
 80129de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80129e2:	f7ff fec5 	bl	8012770 <__hexdig_fun>
 80129e6:	9b00      	ldr	r3, [sp, #0]
 80129e8:	f000 000f 	and.w	r0, r0, #15
 80129ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80129f0:	4303      	orrs	r3, r0
 80129f2:	9300      	str	r3, [sp, #0]
 80129f4:	f10b 0b04 	add.w	fp, fp, #4
 80129f8:	9b03      	ldr	r3, [sp, #12]
 80129fa:	e00d      	b.n	8012a18 <__gethex+0x27c>
 80129fc:	9b03      	ldr	r3, [sp, #12]
 80129fe:	9a06      	ldr	r2, [sp, #24]
 8012a00:	4413      	add	r3, r2
 8012a02:	42bb      	cmp	r3, r7
 8012a04:	d3e0      	bcc.n	80129c8 <__gethex+0x22c>
 8012a06:	4618      	mov	r0, r3
 8012a08:	9901      	ldr	r1, [sp, #4]
 8012a0a:	9307      	str	r3, [sp, #28]
 8012a0c:	4652      	mov	r2, sl
 8012a0e:	f001 f917 	bl	8013c40 <strncmp>
 8012a12:	9b07      	ldr	r3, [sp, #28]
 8012a14:	2800      	cmp	r0, #0
 8012a16:	d1d7      	bne.n	80129c8 <__gethex+0x22c>
 8012a18:	461e      	mov	r6, r3
 8012a1a:	e78b      	b.n	8012934 <__gethex+0x198>
 8012a1c:	f04f 0a03 	mov.w	sl, #3
 8012a20:	e7b8      	b.n	8012994 <__gethex+0x1f8>
 8012a22:	da0a      	bge.n	8012a3a <__gethex+0x29e>
 8012a24:	1a37      	subs	r7, r6, r0
 8012a26:	4621      	mov	r1, r4
 8012a28:	ee18 0a10 	vmov	r0, s16
 8012a2c:	463a      	mov	r2, r7
 8012a2e:	f000 fc37 	bl	80132a0 <__lshift>
 8012a32:	1bed      	subs	r5, r5, r7
 8012a34:	4604      	mov	r4, r0
 8012a36:	f100 0914 	add.w	r9, r0, #20
 8012a3a:	f04f 0a00 	mov.w	sl, #0
 8012a3e:	e7ae      	b.n	801299e <__gethex+0x202>
 8012a40:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012a44:	42a8      	cmp	r0, r5
 8012a46:	dd72      	ble.n	8012b2e <__gethex+0x392>
 8012a48:	1b45      	subs	r5, r0, r5
 8012a4a:	42ae      	cmp	r6, r5
 8012a4c:	dc36      	bgt.n	8012abc <__gethex+0x320>
 8012a4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012a52:	2b02      	cmp	r3, #2
 8012a54:	d02a      	beq.n	8012aac <__gethex+0x310>
 8012a56:	2b03      	cmp	r3, #3
 8012a58:	d02c      	beq.n	8012ab4 <__gethex+0x318>
 8012a5a:	2b01      	cmp	r3, #1
 8012a5c:	d11c      	bne.n	8012a98 <__gethex+0x2fc>
 8012a5e:	42ae      	cmp	r6, r5
 8012a60:	d11a      	bne.n	8012a98 <__gethex+0x2fc>
 8012a62:	2e01      	cmp	r6, #1
 8012a64:	d112      	bne.n	8012a8c <__gethex+0x2f0>
 8012a66:	9a04      	ldr	r2, [sp, #16]
 8012a68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012a6c:	6013      	str	r3, [r2, #0]
 8012a6e:	2301      	movs	r3, #1
 8012a70:	6123      	str	r3, [r4, #16]
 8012a72:	f8c9 3000 	str.w	r3, [r9]
 8012a76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012a78:	2762      	movs	r7, #98	; 0x62
 8012a7a:	601c      	str	r4, [r3, #0]
 8012a7c:	e723      	b.n	80128c6 <__gethex+0x12a>
 8012a7e:	bf00      	nop
 8012a80:	08015698 	.word	0x08015698
 8012a84:	08015620 	.word	0x08015620
 8012a88:	08015631 	.word	0x08015631
 8012a8c:	1e71      	subs	r1, r6, #1
 8012a8e:	4620      	mov	r0, r4
 8012a90:	f000 fe4a 	bl	8013728 <__any_on>
 8012a94:	2800      	cmp	r0, #0
 8012a96:	d1e6      	bne.n	8012a66 <__gethex+0x2ca>
 8012a98:	ee18 0a10 	vmov	r0, s16
 8012a9c:	4621      	mov	r1, r4
 8012a9e:	f000 f9e3 	bl	8012e68 <_Bfree>
 8012aa2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	6013      	str	r3, [r2, #0]
 8012aa8:	2750      	movs	r7, #80	; 0x50
 8012aaa:	e70c      	b.n	80128c6 <__gethex+0x12a>
 8012aac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d1f2      	bne.n	8012a98 <__gethex+0x2fc>
 8012ab2:	e7d8      	b.n	8012a66 <__gethex+0x2ca>
 8012ab4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d1d5      	bne.n	8012a66 <__gethex+0x2ca>
 8012aba:	e7ed      	b.n	8012a98 <__gethex+0x2fc>
 8012abc:	1e6f      	subs	r7, r5, #1
 8012abe:	f1ba 0f00 	cmp.w	sl, #0
 8012ac2:	d131      	bne.n	8012b28 <__gethex+0x38c>
 8012ac4:	b127      	cbz	r7, 8012ad0 <__gethex+0x334>
 8012ac6:	4639      	mov	r1, r7
 8012ac8:	4620      	mov	r0, r4
 8012aca:	f000 fe2d 	bl	8013728 <__any_on>
 8012ace:	4682      	mov	sl, r0
 8012ad0:	117b      	asrs	r3, r7, #5
 8012ad2:	2101      	movs	r1, #1
 8012ad4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012ad8:	f007 071f 	and.w	r7, r7, #31
 8012adc:	fa01 f707 	lsl.w	r7, r1, r7
 8012ae0:	421f      	tst	r7, r3
 8012ae2:	4629      	mov	r1, r5
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	bf18      	it	ne
 8012ae8:	f04a 0a02 	orrne.w	sl, sl, #2
 8012aec:	1b76      	subs	r6, r6, r5
 8012aee:	f7ff fded 	bl	80126cc <rshift>
 8012af2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012af6:	2702      	movs	r7, #2
 8012af8:	f1ba 0f00 	cmp.w	sl, #0
 8012afc:	d048      	beq.n	8012b90 <__gethex+0x3f4>
 8012afe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012b02:	2b02      	cmp	r3, #2
 8012b04:	d015      	beq.n	8012b32 <__gethex+0x396>
 8012b06:	2b03      	cmp	r3, #3
 8012b08:	d017      	beq.n	8012b3a <__gethex+0x39e>
 8012b0a:	2b01      	cmp	r3, #1
 8012b0c:	d109      	bne.n	8012b22 <__gethex+0x386>
 8012b0e:	f01a 0f02 	tst.w	sl, #2
 8012b12:	d006      	beq.n	8012b22 <__gethex+0x386>
 8012b14:	f8d9 0000 	ldr.w	r0, [r9]
 8012b18:	ea4a 0a00 	orr.w	sl, sl, r0
 8012b1c:	f01a 0f01 	tst.w	sl, #1
 8012b20:	d10e      	bne.n	8012b40 <__gethex+0x3a4>
 8012b22:	f047 0710 	orr.w	r7, r7, #16
 8012b26:	e033      	b.n	8012b90 <__gethex+0x3f4>
 8012b28:	f04f 0a01 	mov.w	sl, #1
 8012b2c:	e7d0      	b.n	8012ad0 <__gethex+0x334>
 8012b2e:	2701      	movs	r7, #1
 8012b30:	e7e2      	b.n	8012af8 <__gethex+0x35c>
 8012b32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b34:	f1c3 0301 	rsb	r3, r3, #1
 8012b38:	9315      	str	r3, [sp, #84]	; 0x54
 8012b3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d0f0      	beq.n	8012b22 <__gethex+0x386>
 8012b40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012b44:	f104 0314 	add.w	r3, r4, #20
 8012b48:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012b4c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012b50:	f04f 0c00 	mov.w	ip, #0
 8012b54:	4618      	mov	r0, r3
 8012b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b5a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8012b5e:	d01c      	beq.n	8012b9a <__gethex+0x3fe>
 8012b60:	3201      	adds	r2, #1
 8012b62:	6002      	str	r2, [r0, #0]
 8012b64:	2f02      	cmp	r7, #2
 8012b66:	f104 0314 	add.w	r3, r4, #20
 8012b6a:	d13f      	bne.n	8012bec <__gethex+0x450>
 8012b6c:	f8d8 2000 	ldr.w	r2, [r8]
 8012b70:	3a01      	subs	r2, #1
 8012b72:	42b2      	cmp	r2, r6
 8012b74:	d10a      	bne.n	8012b8c <__gethex+0x3f0>
 8012b76:	1171      	asrs	r1, r6, #5
 8012b78:	2201      	movs	r2, #1
 8012b7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012b7e:	f006 061f 	and.w	r6, r6, #31
 8012b82:	fa02 f606 	lsl.w	r6, r2, r6
 8012b86:	421e      	tst	r6, r3
 8012b88:	bf18      	it	ne
 8012b8a:	4617      	movne	r7, r2
 8012b8c:	f047 0720 	orr.w	r7, r7, #32
 8012b90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012b92:	601c      	str	r4, [r3, #0]
 8012b94:	9b04      	ldr	r3, [sp, #16]
 8012b96:	601d      	str	r5, [r3, #0]
 8012b98:	e695      	b.n	80128c6 <__gethex+0x12a>
 8012b9a:	4299      	cmp	r1, r3
 8012b9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012ba0:	d8d8      	bhi.n	8012b54 <__gethex+0x3b8>
 8012ba2:	68a3      	ldr	r3, [r4, #8]
 8012ba4:	459b      	cmp	fp, r3
 8012ba6:	db19      	blt.n	8012bdc <__gethex+0x440>
 8012ba8:	6861      	ldr	r1, [r4, #4]
 8012baa:	ee18 0a10 	vmov	r0, s16
 8012bae:	3101      	adds	r1, #1
 8012bb0:	f000 f91a 	bl	8012de8 <_Balloc>
 8012bb4:	4681      	mov	r9, r0
 8012bb6:	b918      	cbnz	r0, 8012bc0 <__gethex+0x424>
 8012bb8:	4b1a      	ldr	r3, [pc, #104]	; (8012c24 <__gethex+0x488>)
 8012bba:	4602      	mov	r2, r0
 8012bbc:	2184      	movs	r1, #132	; 0x84
 8012bbe:	e6a8      	b.n	8012912 <__gethex+0x176>
 8012bc0:	6922      	ldr	r2, [r4, #16]
 8012bc2:	3202      	adds	r2, #2
 8012bc4:	f104 010c 	add.w	r1, r4, #12
 8012bc8:	0092      	lsls	r2, r2, #2
 8012bca:	300c      	adds	r0, #12
 8012bcc:	f7fd f9a0 	bl	800ff10 <memcpy>
 8012bd0:	4621      	mov	r1, r4
 8012bd2:	ee18 0a10 	vmov	r0, s16
 8012bd6:	f000 f947 	bl	8012e68 <_Bfree>
 8012bda:	464c      	mov	r4, r9
 8012bdc:	6923      	ldr	r3, [r4, #16]
 8012bde:	1c5a      	adds	r2, r3, #1
 8012be0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012be4:	6122      	str	r2, [r4, #16]
 8012be6:	2201      	movs	r2, #1
 8012be8:	615a      	str	r2, [r3, #20]
 8012bea:	e7bb      	b.n	8012b64 <__gethex+0x3c8>
 8012bec:	6922      	ldr	r2, [r4, #16]
 8012bee:	455a      	cmp	r2, fp
 8012bf0:	dd0b      	ble.n	8012c0a <__gethex+0x46e>
 8012bf2:	2101      	movs	r1, #1
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	f7ff fd69 	bl	80126cc <rshift>
 8012bfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012bfe:	3501      	adds	r5, #1
 8012c00:	42ab      	cmp	r3, r5
 8012c02:	f6ff aed0 	blt.w	80129a6 <__gethex+0x20a>
 8012c06:	2701      	movs	r7, #1
 8012c08:	e7c0      	b.n	8012b8c <__gethex+0x3f0>
 8012c0a:	f016 061f 	ands.w	r6, r6, #31
 8012c0e:	d0fa      	beq.n	8012c06 <__gethex+0x46a>
 8012c10:	4453      	add	r3, sl
 8012c12:	f1c6 0620 	rsb	r6, r6, #32
 8012c16:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012c1a:	f000 f9d7 	bl	8012fcc <__hi0bits>
 8012c1e:	42b0      	cmp	r0, r6
 8012c20:	dbe7      	blt.n	8012bf2 <__gethex+0x456>
 8012c22:	e7f0      	b.n	8012c06 <__gethex+0x46a>
 8012c24:	08015620 	.word	0x08015620

08012c28 <L_shift>:
 8012c28:	f1c2 0208 	rsb	r2, r2, #8
 8012c2c:	0092      	lsls	r2, r2, #2
 8012c2e:	b570      	push	{r4, r5, r6, lr}
 8012c30:	f1c2 0620 	rsb	r6, r2, #32
 8012c34:	6843      	ldr	r3, [r0, #4]
 8012c36:	6804      	ldr	r4, [r0, #0]
 8012c38:	fa03 f506 	lsl.w	r5, r3, r6
 8012c3c:	432c      	orrs	r4, r5
 8012c3e:	40d3      	lsrs	r3, r2
 8012c40:	6004      	str	r4, [r0, #0]
 8012c42:	f840 3f04 	str.w	r3, [r0, #4]!
 8012c46:	4288      	cmp	r0, r1
 8012c48:	d3f4      	bcc.n	8012c34 <L_shift+0xc>
 8012c4a:	bd70      	pop	{r4, r5, r6, pc}

08012c4c <__match>:
 8012c4c:	b530      	push	{r4, r5, lr}
 8012c4e:	6803      	ldr	r3, [r0, #0]
 8012c50:	3301      	adds	r3, #1
 8012c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c56:	b914      	cbnz	r4, 8012c5e <__match+0x12>
 8012c58:	6003      	str	r3, [r0, #0]
 8012c5a:	2001      	movs	r0, #1
 8012c5c:	bd30      	pop	{r4, r5, pc}
 8012c5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012c66:	2d19      	cmp	r5, #25
 8012c68:	bf98      	it	ls
 8012c6a:	3220      	addls	r2, #32
 8012c6c:	42a2      	cmp	r2, r4
 8012c6e:	d0f0      	beq.n	8012c52 <__match+0x6>
 8012c70:	2000      	movs	r0, #0
 8012c72:	e7f3      	b.n	8012c5c <__match+0x10>

08012c74 <__hexnan>:
 8012c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c78:	680b      	ldr	r3, [r1, #0]
 8012c7a:	115e      	asrs	r6, r3, #5
 8012c7c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012c80:	f013 031f 	ands.w	r3, r3, #31
 8012c84:	b087      	sub	sp, #28
 8012c86:	bf18      	it	ne
 8012c88:	3604      	addne	r6, #4
 8012c8a:	2500      	movs	r5, #0
 8012c8c:	1f37      	subs	r7, r6, #4
 8012c8e:	4690      	mov	r8, r2
 8012c90:	6802      	ldr	r2, [r0, #0]
 8012c92:	9301      	str	r3, [sp, #4]
 8012c94:	4682      	mov	sl, r0
 8012c96:	f846 5c04 	str.w	r5, [r6, #-4]
 8012c9a:	46b9      	mov	r9, r7
 8012c9c:	463c      	mov	r4, r7
 8012c9e:	9502      	str	r5, [sp, #8]
 8012ca0:	46ab      	mov	fp, r5
 8012ca2:	7851      	ldrb	r1, [r2, #1]
 8012ca4:	1c53      	adds	r3, r2, #1
 8012ca6:	9303      	str	r3, [sp, #12]
 8012ca8:	b341      	cbz	r1, 8012cfc <__hexnan+0x88>
 8012caa:	4608      	mov	r0, r1
 8012cac:	9205      	str	r2, [sp, #20]
 8012cae:	9104      	str	r1, [sp, #16]
 8012cb0:	f7ff fd5e 	bl	8012770 <__hexdig_fun>
 8012cb4:	2800      	cmp	r0, #0
 8012cb6:	d14f      	bne.n	8012d58 <__hexnan+0xe4>
 8012cb8:	9904      	ldr	r1, [sp, #16]
 8012cba:	9a05      	ldr	r2, [sp, #20]
 8012cbc:	2920      	cmp	r1, #32
 8012cbe:	d818      	bhi.n	8012cf2 <__hexnan+0x7e>
 8012cc0:	9b02      	ldr	r3, [sp, #8]
 8012cc2:	459b      	cmp	fp, r3
 8012cc4:	dd13      	ble.n	8012cee <__hexnan+0x7a>
 8012cc6:	454c      	cmp	r4, r9
 8012cc8:	d206      	bcs.n	8012cd8 <__hexnan+0x64>
 8012cca:	2d07      	cmp	r5, #7
 8012ccc:	dc04      	bgt.n	8012cd8 <__hexnan+0x64>
 8012cce:	462a      	mov	r2, r5
 8012cd0:	4649      	mov	r1, r9
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	f7ff ffa8 	bl	8012c28 <L_shift>
 8012cd8:	4544      	cmp	r4, r8
 8012cda:	d950      	bls.n	8012d7e <__hexnan+0x10a>
 8012cdc:	2300      	movs	r3, #0
 8012cde:	f1a4 0904 	sub.w	r9, r4, #4
 8012ce2:	f844 3c04 	str.w	r3, [r4, #-4]
 8012ce6:	f8cd b008 	str.w	fp, [sp, #8]
 8012cea:	464c      	mov	r4, r9
 8012cec:	461d      	mov	r5, r3
 8012cee:	9a03      	ldr	r2, [sp, #12]
 8012cf0:	e7d7      	b.n	8012ca2 <__hexnan+0x2e>
 8012cf2:	2929      	cmp	r1, #41	; 0x29
 8012cf4:	d156      	bne.n	8012da4 <__hexnan+0x130>
 8012cf6:	3202      	adds	r2, #2
 8012cf8:	f8ca 2000 	str.w	r2, [sl]
 8012cfc:	f1bb 0f00 	cmp.w	fp, #0
 8012d00:	d050      	beq.n	8012da4 <__hexnan+0x130>
 8012d02:	454c      	cmp	r4, r9
 8012d04:	d206      	bcs.n	8012d14 <__hexnan+0xa0>
 8012d06:	2d07      	cmp	r5, #7
 8012d08:	dc04      	bgt.n	8012d14 <__hexnan+0xa0>
 8012d0a:	462a      	mov	r2, r5
 8012d0c:	4649      	mov	r1, r9
 8012d0e:	4620      	mov	r0, r4
 8012d10:	f7ff ff8a 	bl	8012c28 <L_shift>
 8012d14:	4544      	cmp	r4, r8
 8012d16:	d934      	bls.n	8012d82 <__hexnan+0x10e>
 8012d18:	f1a8 0204 	sub.w	r2, r8, #4
 8012d1c:	4623      	mov	r3, r4
 8012d1e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012d22:	f842 1f04 	str.w	r1, [r2, #4]!
 8012d26:	429f      	cmp	r7, r3
 8012d28:	d2f9      	bcs.n	8012d1e <__hexnan+0xaa>
 8012d2a:	1b3b      	subs	r3, r7, r4
 8012d2c:	f023 0303 	bic.w	r3, r3, #3
 8012d30:	3304      	adds	r3, #4
 8012d32:	3401      	adds	r4, #1
 8012d34:	3e03      	subs	r6, #3
 8012d36:	42b4      	cmp	r4, r6
 8012d38:	bf88      	it	hi
 8012d3a:	2304      	movhi	r3, #4
 8012d3c:	4443      	add	r3, r8
 8012d3e:	2200      	movs	r2, #0
 8012d40:	f843 2b04 	str.w	r2, [r3], #4
 8012d44:	429f      	cmp	r7, r3
 8012d46:	d2fb      	bcs.n	8012d40 <__hexnan+0xcc>
 8012d48:	683b      	ldr	r3, [r7, #0]
 8012d4a:	b91b      	cbnz	r3, 8012d54 <__hexnan+0xe0>
 8012d4c:	4547      	cmp	r7, r8
 8012d4e:	d127      	bne.n	8012da0 <__hexnan+0x12c>
 8012d50:	2301      	movs	r3, #1
 8012d52:	603b      	str	r3, [r7, #0]
 8012d54:	2005      	movs	r0, #5
 8012d56:	e026      	b.n	8012da6 <__hexnan+0x132>
 8012d58:	3501      	adds	r5, #1
 8012d5a:	2d08      	cmp	r5, #8
 8012d5c:	f10b 0b01 	add.w	fp, fp, #1
 8012d60:	dd06      	ble.n	8012d70 <__hexnan+0xfc>
 8012d62:	4544      	cmp	r4, r8
 8012d64:	d9c3      	bls.n	8012cee <__hexnan+0x7a>
 8012d66:	2300      	movs	r3, #0
 8012d68:	f844 3c04 	str.w	r3, [r4, #-4]
 8012d6c:	2501      	movs	r5, #1
 8012d6e:	3c04      	subs	r4, #4
 8012d70:	6822      	ldr	r2, [r4, #0]
 8012d72:	f000 000f 	and.w	r0, r0, #15
 8012d76:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012d7a:	6022      	str	r2, [r4, #0]
 8012d7c:	e7b7      	b.n	8012cee <__hexnan+0x7a>
 8012d7e:	2508      	movs	r5, #8
 8012d80:	e7b5      	b.n	8012cee <__hexnan+0x7a>
 8012d82:	9b01      	ldr	r3, [sp, #4]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d0df      	beq.n	8012d48 <__hexnan+0xd4>
 8012d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d8c:	f1c3 0320 	rsb	r3, r3, #32
 8012d90:	fa22 f303 	lsr.w	r3, r2, r3
 8012d94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012d98:	401a      	ands	r2, r3
 8012d9a:	f846 2c04 	str.w	r2, [r6, #-4]
 8012d9e:	e7d3      	b.n	8012d48 <__hexnan+0xd4>
 8012da0:	3f04      	subs	r7, #4
 8012da2:	e7d1      	b.n	8012d48 <__hexnan+0xd4>
 8012da4:	2004      	movs	r0, #4
 8012da6:	b007      	add	sp, #28
 8012da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012dac <_localeconv_r>:
 8012dac:	4800      	ldr	r0, [pc, #0]	; (8012db0 <_localeconv_r+0x4>)
 8012dae:	4770      	bx	lr
 8012db0:	2000016c 	.word	0x2000016c

08012db4 <malloc>:
 8012db4:	4b02      	ldr	r3, [pc, #8]	; (8012dc0 <malloc+0xc>)
 8012db6:	4601      	mov	r1, r0
 8012db8:	6818      	ldr	r0, [r3, #0]
 8012dba:	f000 bd59 	b.w	8013870 <_malloc_r>
 8012dbe:	bf00      	nop
 8012dc0:	20000014 	.word	0x20000014

08012dc4 <__ascii_mbtowc>:
 8012dc4:	b082      	sub	sp, #8
 8012dc6:	b901      	cbnz	r1, 8012dca <__ascii_mbtowc+0x6>
 8012dc8:	a901      	add	r1, sp, #4
 8012dca:	b142      	cbz	r2, 8012dde <__ascii_mbtowc+0x1a>
 8012dcc:	b14b      	cbz	r3, 8012de2 <__ascii_mbtowc+0x1e>
 8012dce:	7813      	ldrb	r3, [r2, #0]
 8012dd0:	600b      	str	r3, [r1, #0]
 8012dd2:	7812      	ldrb	r2, [r2, #0]
 8012dd4:	1e10      	subs	r0, r2, #0
 8012dd6:	bf18      	it	ne
 8012dd8:	2001      	movne	r0, #1
 8012dda:	b002      	add	sp, #8
 8012ddc:	4770      	bx	lr
 8012dde:	4610      	mov	r0, r2
 8012de0:	e7fb      	b.n	8012dda <__ascii_mbtowc+0x16>
 8012de2:	f06f 0001 	mvn.w	r0, #1
 8012de6:	e7f8      	b.n	8012dda <__ascii_mbtowc+0x16>

08012de8 <_Balloc>:
 8012de8:	b570      	push	{r4, r5, r6, lr}
 8012dea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012dec:	4604      	mov	r4, r0
 8012dee:	460d      	mov	r5, r1
 8012df0:	b976      	cbnz	r6, 8012e10 <_Balloc+0x28>
 8012df2:	2010      	movs	r0, #16
 8012df4:	f7ff ffde 	bl	8012db4 <malloc>
 8012df8:	4602      	mov	r2, r0
 8012dfa:	6260      	str	r0, [r4, #36]	; 0x24
 8012dfc:	b920      	cbnz	r0, 8012e08 <_Balloc+0x20>
 8012dfe:	4b18      	ldr	r3, [pc, #96]	; (8012e60 <_Balloc+0x78>)
 8012e00:	4818      	ldr	r0, [pc, #96]	; (8012e64 <_Balloc+0x7c>)
 8012e02:	2166      	movs	r1, #102	; 0x66
 8012e04:	f000 ff3e 	bl	8013c84 <__assert_func>
 8012e08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e0c:	6006      	str	r6, [r0, #0]
 8012e0e:	60c6      	str	r6, [r0, #12]
 8012e10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012e12:	68f3      	ldr	r3, [r6, #12]
 8012e14:	b183      	cbz	r3, 8012e38 <_Balloc+0x50>
 8012e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e18:	68db      	ldr	r3, [r3, #12]
 8012e1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012e1e:	b9b8      	cbnz	r0, 8012e50 <_Balloc+0x68>
 8012e20:	2101      	movs	r1, #1
 8012e22:	fa01 f605 	lsl.w	r6, r1, r5
 8012e26:	1d72      	adds	r2, r6, #5
 8012e28:	0092      	lsls	r2, r2, #2
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	f000 fc9d 	bl	801376a <_calloc_r>
 8012e30:	b160      	cbz	r0, 8012e4c <_Balloc+0x64>
 8012e32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012e36:	e00e      	b.n	8012e56 <_Balloc+0x6e>
 8012e38:	2221      	movs	r2, #33	; 0x21
 8012e3a:	2104      	movs	r1, #4
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	f000 fc94 	bl	801376a <_calloc_r>
 8012e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e44:	60f0      	str	r0, [r6, #12]
 8012e46:	68db      	ldr	r3, [r3, #12]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d1e4      	bne.n	8012e16 <_Balloc+0x2e>
 8012e4c:	2000      	movs	r0, #0
 8012e4e:	bd70      	pop	{r4, r5, r6, pc}
 8012e50:	6802      	ldr	r2, [r0, #0]
 8012e52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012e56:	2300      	movs	r3, #0
 8012e58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012e5c:	e7f7      	b.n	8012e4e <_Balloc+0x66>
 8012e5e:	bf00      	nop
 8012e60:	080155ae 	.word	0x080155ae
 8012e64:	080156ac 	.word	0x080156ac

08012e68 <_Bfree>:
 8012e68:	b570      	push	{r4, r5, r6, lr}
 8012e6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012e6c:	4605      	mov	r5, r0
 8012e6e:	460c      	mov	r4, r1
 8012e70:	b976      	cbnz	r6, 8012e90 <_Bfree+0x28>
 8012e72:	2010      	movs	r0, #16
 8012e74:	f7ff ff9e 	bl	8012db4 <malloc>
 8012e78:	4602      	mov	r2, r0
 8012e7a:	6268      	str	r0, [r5, #36]	; 0x24
 8012e7c:	b920      	cbnz	r0, 8012e88 <_Bfree+0x20>
 8012e7e:	4b09      	ldr	r3, [pc, #36]	; (8012ea4 <_Bfree+0x3c>)
 8012e80:	4809      	ldr	r0, [pc, #36]	; (8012ea8 <_Bfree+0x40>)
 8012e82:	218a      	movs	r1, #138	; 0x8a
 8012e84:	f000 fefe 	bl	8013c84 <__assert_func>
 8012e88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e8c:	6006      	str	r6, [r0, #0]
 8012e8e:	60c6      	str	r6, [r0, #12]
 8012e90:	b13c      	cbz	r4, 8012ea2 <_Bfree+0x3a>
 8012e92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012e94:	6862      	ldr	r2, [r4, #4]
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e9c:	6021      	str	r1, [r4, #0]
 8012e9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012ea2:	bd70      	pop	{r4, r5, r6, pc}
 8012ea4:	080155ae 	.word	0x080155ae
 8012ea8:	080156ac 	.word	0x080156ac

08012eac <__multadd>:
 8012eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eb0:	690d      	ldr	r5, [r1, #16]
 8012eb2:	4607      	mov	r7, r0
 8012eb4:	460c      	mov	r4, r1
 8012eb6:	461e      	mov	r6, r3
 8012eb8:	f101 0c14 	add.w	ip, r1, #20
 8012ebc:	2000      	movs	r0, #0
 8012ebe:	f8dc 3000 	ldr.w	r3, [ip]
 8012ec2:	b299      	uxth	r1, r3
 8012ec4:	fb02 6101 	mla	r1, r2, r1, r6
 8012ec8:	0c1e      	lsrs	r6, r3, #16
 8012eca:	0c0b      	lsrs	r3, r1, #16
 8012ecc:	fb02 3306 	mla	r3, r2, r6, r3
 8012ed0:	b289      	uxth	r1, r1
 8012ed2:	3001      	adds	r0, #1
 8012ed4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012ed8:	4285      	cmp	r5, r0
 8012eda:	f84c 1b04 	str.w	r1, [ip], #4
 8012ede:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012ee2:	dcec      	bgt.n	8012ebe <__multadd+0x12>
 8012ee4:	b30e      	cbz	r6, 8012f2a <__multadd+0x7e>
 8012ee6:	68a3      	ldr	r3, [r4, #8]
 8012ee8:	42ab      	cmp	r3, r5
 8012eea:	dc19      	bgt.n	8012f20 <__multadd+0x74>
 8012eec:	6861      	ldr	r1, [r4, #4]
 8012eee:	4638      	mov	r0, r7
 8012ef0:	3101      	adds	r1, #1
 8012ef2:	f7ff ff79 	bl	8012de8 <_Balloc>
 8012ef6:	4680      	mov	r8, r0
 8012ef8:	b928      	cbnz	r0, 8012f06 <__multadd+0x5a>
 8012efa:	4602      	mov	r2, r0
 8012efc:	4b0c      	ldr	r3, [pc, #48]	; (8012f30 <__multadd+0x84>)
 8012efe:	480d      	ldr	r0, [pc, #52]	; (8012f34 <__multadd+0x88>)
 8012f00:	21b5      	movs	r1, #181	; 0xb5
 8012f02:	f000 febf 	bl	8013c84 <__assert_func>
 8012f06:	6922      	ldr	r2, [r4, #16]
 8012f08:	3202      	adds	r2, #2
 8012f0a:	f104 010c 	add.w	r1, r4, #12
 8012f0e:	0092      	lsls	r2, r2, #2
 8012f10:	300c      	adds	r0, #12
 8012f12:	f7fc fffd 	bl	800ff10 <memcpy>
 8012f16:	4621      	mov	r1, r4
 8012f18:	4638      	mov	r0, r7
 8012f1a:	f7ff ffa5 	bl	8012e68 <_Bfree>
 8012f1e:	4644      	mov	r4, r8
 8012f20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012f24:	3501      	adds	r5, #1
 8012f26:	615e      	str	r6, [r3, #20]
 8012f28:	6125      	str	r5, [r4, #16]
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f30:	08015620 	.word	0x08015620
 8012f34:	080156ac 	.word	0x080156ac

08012f38 <__s2b>:
 8012f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f3c:	460c      	mov	r4, r1
 8012f3e:	4615      	mov	r5, r2
 8012f40:	461f      	mov	r7, r3
 8012f42:	2209      	movs	r2, #9
 8012f44:	3308      	adds	r3, #8
 8012f46:	4606      	mov	r6, r0
 8012f48:	fb93 f3f2 	sdiv	r3, r3, r2
 8012f4c:	2100      	movs	r1, #0
 8012f4e:	2201      	movs	r2, #1
 8012f50:	429a      	cmp	r2, r3
 8012f52:	db09      	blt.n	8012f68 <__s2b+0x30>
 8012f54:	4630      	mov	r0, r6
 8012f56:	f7ff ff47 	bl	8012de8 <_Balloc>
 8012f5a:	b940      	cbnz	r0, 8012f6e <__s2b+0x36>
 8012f5c:	4602      	mov	r2, r0
 8012f5e:	4b19      	ldr	r3, [pc, #100]	; (8012fc4 <__s2b+0x8c>)
 8012f60:	4819      	ldr	r0, [pc, #100]	; (8012fc8 <__s2b+0x90>)
 8012f62:	21ce      	movs	r1, #206	; 0xce
 8012f64:	f000 fe8e 	bl	8013c84 <__assert_func>
 8012f68:	0052      	lsls	r2, r2, #1
 8012f6a:	3101      	adds	r1, #1
 8012f6c:	e7f0      	b.n	8012f50 <__s2b+0x18>
 8012f6e:	9b08      	ldr	r3, [sp, #32]
 8012f70:	6143      	str	r3, [r0, #20]
 8012f72:	2d09      	cmp	r5, #9
 8012f74:	f04f 0301 	mov.w	r3, #1
 8012f78:	6103      	str	r3, [r0, #16]
 8012f7a:	dd16      	ble.n	8012faa <__s2b+0x72>
 8012f7c:	f104 0909 	add.w	r9, r4, #9
 8012f80:	46c8      	mov	r8, r9
 8012f82:	442c      	add	r4, r5
 8012f84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012f88:	4601      	mov	r1, r0
 8012f8a:	3b30      	subs	r3, #48	; 0x30
 8012f8c:	220a      	movs	r2, #10
 8012f8e:	4630      	mov	r0, r6
 8012f90:	f7ff ff8c 	bl	8012eac <__multadd>
 8012f94:	45a0      	cmp	r8, r4
 8012f96:	d1f5      	bne.n	8012f84 <__s2b+0x4c>
 8012f98:	f1a5 0408 	sub.w	r4, r5, #8
 8012f9c:	444c      	add	r4, r9
 8012f9e:	1b2d      	subs	r5, r5, r4
 8012fa0:	1963      	adds	r3, r4, r5
 8012fa2:	42bb      	cmp	r3, r7
 8012fa4:	db04      	blt.n	8012fb0 <__s2b+0x78>
 8012fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012faa:	340a      	adds	r4, #10
 8012fac:	2509      	movs	r5, #9
 8012fae:	e7f6      	b.n	8012f9e <__s2b+0x66>
 8012fb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012fb4:	4601      	mov	r1, r0
 8012fb6:	3b30      	subs	r3, #48	; 0x30
 8012fb8:	220a      	movs	r2, #10
 8012fba:	4630      	mov	r0, r6
 8012fbc:	f7ff ff76 	bl	8012eac <__multadd>
 8012fc0:	e7ee      	b.n	8012fa0 <__s2b+0x68>
 8012fc2:	bf00      	nop
 8012fc4:	08015620 	.word	0x08015620
 8012fc8:	080156ac 	.word	0x080156ac

08012fcc <__hi0bits>:
 8012fcc:	0c03      	lsrs	r3, r0, #16
 8012fce:	041b      	lsls	r3, r3, #16
 8012fd0:	b9d3      	cbnz	r3, 8013008 <__hi0bits+0x3c>
 8012fd2:	0400      	lsls	r0, r0, #16
 8012fd4:	2310      	movs	r3, #16
 8012fd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012fda:	bf04      	itt	eq
 8012fdc:	0200      	lsleq	r0, r0, #8
 8012fde:	3308      	addeq	r3, #8
 8012fe0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012fe4:	bf04      	itt	eq
 8012fe6:	0100      	lsleq	r0, r0, #4
 8012fe8:	3304      	addeq	r3, #4
 8012fea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012fee:	bf04      	itt	eq
 8012ff0:	0080      	lsleq	r0, r0, #2
 8012ff2:	3302      	addeq	r3, #2
 8012ff4:	2800      	cmp	r0, #0
 8012ff6:	db05      	blt.n	8013004 <__hi0bits+0x38>
 8012ff8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012ffc:	f103 0301 	add.w	r3, r3, #1
 8013000:	bf08      	it	eq
 8013002:	2320      	moveq	r3, #32
 8013004:	4618      	mov	r0, r3
 8013006:	4770      	bx	lr
 8013008:	2300      	movs	r3, #0
 801300a:	e7e4      	b.n	8012fd6 <__hi0bits+0xa>

0801300c <__lo0bits>:
 801300c:	6803      	ldr	r3, [r0, #0]
 801300e:	f013 0207 	ands.w	r2, r3, #7
 8013012:	4601      	mov	r1, r0
 8013014:	d00b      	beq.n	801302e <__lo0bits+0x22>
 8013016:	07da      	lsls	r2, r3, #31
 8013018:	d423      	bmi.n	8013062 <__lo0bits+0x56>
 801301a:	0798      	lsls	r0, r3, #30
 801301c:	bf49      	itett	mi
 801301e:	085b      	lsrmi	r3, r3, #1
 8013020:	089b      	lsrpl	r3, r3, #2
 8013022:	2001      	movmi	r0, #1
 8013024:	600b      	strmi	r3, [r1, #0]
 8013026:	bf5c      	itt	pl
 8013028:	600b      	strpl	r3, [r1, #0]
 801302a:	2002      	movpl	r0, #2
 801302c:	4770      	bx	lr
 801302e:	b298      	uxth	r0, r3
 8013030:	b9a8      	cbnz	r0, 801305e <__lo0bits+0x52>
 8013032:	0c1b      	lsrs	r3, r3, #16
 8013034:	2010      	movs	r0, #16
 8013036:	b2da      	uxtb	r2, r3
 8013038:	b90a      	cbnz	r2, 801303e <__lo0bits+0x32>
 801303a:	3008      	adds	r0, #8
 801303c:	0a1b      	lsrs	r3, r3, #8
 801303e:	071a      	lsls	r2, r3, #28
 8013040:	bf04      	itt	eq
 8013042:	091b      	lsreq	r3, r3, #4
 8013044:	3004      	addeq	r0, #4
 8013046:	079a      	lsls	r2, r3, #30
 8013048:	bf04      	itt	eq
 801304a:	089b      	lsreq	r3, r3, #2
 801304c:	3002      	addeq	r0, #2
 801304e:	07da      	lsls	r2, r3, #31
 8013050:	d403      	bmi.n	801305a <__lo0bits+0x4e>
 8013052:	085b      	lsrs	r3, r3, #1
 8013054:	f100 0001 	add.w	r0, r0, #1
 8013058:	d005      	beq.n	8013066 <__lo0bits+0x5a>
 801305a:	600b      	str	r3, [r1, #0]
 801305c:	4770      	bx	lr
 801305e:	4610      	mov	r0, r2
 8013060:	e7e9      	b.n	8013036 <__lo0bits+0x2a>
 8013062:	2000      	movs	r0, #0
 8013064:	4770      	bx	lr
 8013066:	2020      	movs	r0, #32
 8013068:	4770      	bx	lr
	...

0801306c <__i2b>:
 801306c:	b510      	push	{r4, lr}
 801306e:	460c      	mov	r4, r1
 8013070:	2101      	movs	r1, #1
 8013072:	f7ff feb9 	bl	8012de8 <_Balloc>
 8013076:	4602      	mov	r2, r0
 8013078:	b928      	cbnz	r0, 8013086 <__i2b+0x1a>
 801307a:	4b05      	ldr	r3, [pc, #20]	; (8013090 <__i2b+0x24>)
 801307c:	4805      	ldr	r0, [pc, #20]	; (8013094 <__i2b+0x28>)
 801307e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013082:	f000 fdff 	bl	8013c84 <__assert_func>
 8013086:	2301      	movs	r3, #1
 8013088:	6144      	str	r4, [r0, #20]
 801308a:	6103      	str	r3, [r0, #16]
 801308c:	bd10      	pop	{r4, pc}
 801308e:	bf00      	nop
 8013090:	08015620 	.word	0x08015620
 8013094:	080156ac 	.word	0x080156ac

08013098 <__multiply>:
 8013098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801309c:	4691      	mov	r9, r2
 801309e:	690a      	ldr	r2, [r1, #16]
 80130a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80130a4:	429a      	cmp	r2, r3
 80130a6:	bfb8      	it	lt
 80130a8:	460b      	movlt	r3, r1
 80130aa:	460c      	mov	r4, r1
 80130ac:	bfbc      	itt	lt
 80130ae:	464c      	movlt	r4, r9
 80130b0:	4699      	movlt	r9, r3
 80130b2:	6927      	ldr	r7, [r4, #16]
 80130b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80130b8:	68a3      	ldr	r3, [r4, #8]
 80130ba:	6861      	ldr	r1, [r4, #4]
 80130bc:	eb07 060a 	add.w	r6, r7, sl
 80130c0:	42b3      	cmp	r3, r6
 80130c2:	b085      	sub	sp, #20
 80130c4:	bfb8      	it	lt
 80130c6:	3101      	addlt	r1, #1
 80130c8:	f7ff fe8e 	bl	8012de8 <_Balloc>
 80130cc:	b930      	cbnz	r0, 80130dc <__multiply+0x44>
 80130ce:	4602      	mov	r2, r0
 80130d0:	4b44      	ldr	r3, [pc, #272]	; (80131e4 <__multiply+0x14c>)
 80130d2:	4845      	ldr	r0, [pc, #276]	; (80131e8 <__multiply+0x150>)
 80130d4:	f240 115d 	movw	r1, #349	; 0x15d
 80130d8:	f000 fdd4 	bl	8013c84 <__assert_func>
 80130dc:	f100 0514 	add.w	r5, r0, #20
 80130e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80130e4:	462b      	mov	r3, r5
 80130e6:	2200      	movs	r2, #0
 80130e8:	4543      	cmp	r3, r8
 80130ea:	d321      	bcc.n	8013130 <__multiply+0x98>
 80130ec:	f104 0314 	add.w	r3, r4, #20
 80130f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80130f4:	f109 0314 	add.w	r3, r9, #20
 80130f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80130fc:	9202      	str	r2, [sp, #8]
 80130fe:	1b3a      	subs	r2, r7, r4
 8013100:	3a15      	subs	r2, #21
 8013102:	f022 0203 	bic.w	r2, r2, #3
 8013106:	3204      	adds	r2, #4
 8013108:	f104 0115 	add.w	r1, r4, #21
 801310c:	428f      	cmp	r7, r1
 801310e:	bf38      	it	cc
 8013110:	2204      	movcc	r2, #4
 8013112:	9201      	str	r2, [sp, #4]
 8013114:	9a02      	ldr	r2, [sp, #8]
 8013116:	9303      	str	r3, [sp, #12]
 8013118:	429a      	cmp	r2, r3
 801311a:	d80c      	bhi.n	8013136 <__multiply+0x9e>
 801311c:	2e00      	cmp	r6, #0
 801311e:	dd03      	ble.n	8013128 <__multiply+0x90>
 8013120:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013124:	2b00      	cmp	r3, #0
 8013126:	d05a      	beq.n	80131de <__multiply+0x146>
 8013128:	6106      	str	r6, [r0, #16]
 801312a:	b005      	add	sp, #20
 801312c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013130:	f843 2b04 	str.w	r2, [r3], #4
 8013134:	e7d8      	b.n	80130e8 <__multiply+0x50>
 8013136:	f8b3 a000 	ldrh.w	sl, [r3]
 801313a:	f1ba 0f00 	cmp.w	sl, #0
 801313e:	d024      	beq.n	801318a <__multiply+0xf2>
 8013140:	f104 0e14 	add.w	lr, r4, #20
 8013144:	46a9      	mov	r9, r5
 8013146:	f04f 0c00 	mov.w	ip, #0
 801314a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801314e:	f8d9 1000 	ldr.w	r1, [r9]
 8013152:	fa1f fb82 	uxth.w	fp, r2
 8013156:	b289      	uxth	r1, r1
 8013158:	fb0a 110b 	mla	r1, sl, fp, r1
 801315c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013160:	f8d9 2000 	ldr.w	r2, [r9]
 8013164:	4461      	add	r1, ip
 8013166:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801316a:	fb0a c20b 	mla	r2, sl, fp, ip
 801316e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013172:	b289      	uxth	r1, r1
 8013174:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013178:	4577      	cmp	r7, lr
 801317a:	f849 1b04 	str.w	r1, [r9], #4
 801317e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013182:	d8e2      	bhi.n	801314a <__multiply+0xb2>
 8013184:	9a01      	ldr	r2, [sp, #4]
 8013186:	f845 c002 	str.w	ip, [r5, r2]
 801318a:	9a03      	ldr	r2, [sp, #12]
 801318c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013190:	3304      	adds	r3, #4
 8013192:	f1b9 0f00 	cmp.w	r9, #0
 8013196:	d020      	beq.n	80131da <__multiply+0x142>
 8013198:	6829      	ldr	r1, [r5, #0]
 801319a:	f104 0c14 	add.w	ip, r4, #20
 801319e:	46ae      	mov	lr, r5
 80131a0:	f04f 0a00 	mov.w	sl, #0
 80131a4:	f8bc b000 	ldrh.w	fp, [ip]
 80131a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80131ac:	fb09 220b 	mla	r2, r9, fp, r2
 80131b0:	4492      	add	sl, r2
 80131b2:	b289      	uxth	r1, r1
 80131b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80131b8:	f84e 1b04 	str.w	r1, [lr], #4
 80131bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80131c0:	f8be 1000 	ldrh.w	r1, [lr]
 80131c4:	0c12      	lsrs	r2, r2, #16
 80131c6:	fb09 1102 	mla	r1, r9, r2, r1
 80131ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80131ce:	4567      	cmp	r7, ip
 80131d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80131d4:	d8e6      	bhi.n	80131a4 <__multiply+0x10c>
 80131d6:	9a01      	ldr	r2, [sp, #4]
 80131d8:	50a9      	str	r1, [r5, r2]
 80131da:	3504      	adds	r5, #4
 80131dc:	e79a      	b.n	8013114 <__multiply+0x7c>
 80131de:	3e01      	subs	r6, #1
 80131e0:	e79c      	b.n	801311c <__multiply+0x84>
 80131e2:	bf00      	nop
 80131e4:	08015620 	.word	0x08015620
 80131e8:	080156ac 	.word	0x080156ac

080131ec <__pow5mult>:
 80131ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131f0:	4615      	mov	r5, r2
 80131f2:	f012 0203 	ands.w	r2, r2, #3
 80131f6:	4606      	mov	r6, r0
 80131f8:	460f      	mov	r7, r1
 80131fa:	d007      	beq.n	801320c <__pow5mult+0x20>
 80131fc:	4c25      	ldr	r4, [pc, #148]	; (8013294 <__pow5mult+0xa8>)
 80131fe:	3a01      	subs	r2, #1
 8013200:	2300      	movs	r3, #0
 8013202:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013206:	f7ff fe51 	bl	8012eac <__multadd>
 801320a:	4607      	mov	r7, r0
 801320c:	10ad      	asrs	r5, r5, #2
 801320e:	d03d      	beq.n	801328c <__pow5mult+0xa0>
 8013210:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013212:	b97c      	cbnz	r4, 8013234 <__pow5mult+0x48>
 8013214:	2010      	movs	r0, #16
 8013216:	f7ff fdcd 	bl	8012db4 <malloc>
 801321a:	4602      	mov	r2, r0
 801321c:	6270      	str	r0, [r6, #36]	; 0x24
 801321e:	b928      	cbnz	r0, 801322c <__pow5mult+0x40>
 8013220:	4b1d      	ldr	r3, [pc, #116]	; (8013298 <__pow5mult+0xac>)
 8013222:	481e      	ldr	r0, [pc, #120]	; (801329c <__pow5mult+0xb0>)
 8013224:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013228:	f000 fd2c 	bl	8013c84 <__assert_func>
 801322c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013230:	6004      	str	r4, [r0, #0]
 8013232:	60c4      	str	r4, [r0, #12]
 8013234:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013238:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801323c:	b94c      	cbnz	r4, 8013252 <__pow5mult+0x66>
 801323e:	f240 2171 	movw	r1, #625	; 0x271
 8013242:	4630      	mov	r0, r6
 8013244:	f7ff ff12 	bl	801306c <__i2b>
 8013248:	2300      	movs	r3, #0
 801324a:	f8c8 0008 	str.w	r0, [r8, #8]
 801324e:	4604      	mov	r4, r0
 8013250:	6003      	str	r3, [r0, #0]
 8013252:	f04f 0900 	mov.w	r9, #0
 8013256:	07eb      	lsls	r3, r5, #31
 8013258:	d50a      	bpl.n	8013270 <__pow5mult+0x84>
 801325a:	4639      	mov	r1, r7
 801325c:	4622      	mov	r2, r4
 801325e:	4630      	mov	r0, r6
 8013260:	f7ff ff1a 	bl	8013098 <__multiply>
 8013264:	4639      	mov	r1, r7
 8013266:	4680      	mov	r8, r0
 8013268:	4630      	mov	r0, r6
 801326a:	f7ff fdfd 	bl	8012e68 <_Bfree>
 801326e:	4647      	mov	r7, r8
 8013270:	106d      	asrs	r5, r5, #1
 8013272:	d00b      	beq.n	801328c <__pow5mult+0xa0>
 8013274:	6820      	ldr	r0, [r4, #0]
 8013276:	b938      	cbnz	r0, 8013288 <__pow5mult+0x9c>
 8013278:	4622      	mov	r2, r4
 801327a:	4621      	mov	r1, r4
 801327c:	4630      	mov	r0, r6
 801327e:	f7ff ff0b 	bl	8013098 <__multiply>
 8013282:	6020      	str	r0, [r4, #0]
 8013284:	f8c0 9000 	str.w	r9, [r0]
 8013288:	4604      	mov	r4, r0
 801328a:	e7e4      	b.n	8013256 <__pow5mult+0x6a>
 801328c:	4638      	mov	r0, r7
 801328e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013292:	bf00      	nop
 8013294:	080157f8 	.word	0x080157f8
 8013298:	080155ae 	.word	0x080155ae
 801329c:	080156ac 	.word	0x080156ac

080132a0 <__lshift>:
 80132a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132a4:	460c      	mov	r4, r1
 80132a6:	6849      	ldr	r1, [r1, #4]
 80132a8:	6923      	ldr	r3, [r4, #16]
 80132aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80132ae:	68a3      	ldr	r3, [r4, #8]
 80132b0:	4607      	mov	r7, r0
 80132b2:	4691      	mov	r9, r2
 80132b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80132b8:	f108 0601 	add.w	r6, r8, #1
 80132bc:	42b3      	cmp	r3, r6
 80132be:	db0b      	blt.n	80132d8 <__lshift+0x38>
 80132c0:	4638      	mov	r0, r7
 80132c2:	f7ff fd91 	bl	8012de8 <_Balloc>
 80132c6:	4605      	mov	r5, r0
 80132c8:	b948      	cbnz	r0, 80132de <__lshift+0x3e>
 80132ca:	4602      	mov	r2, r0
 80132cc:	4b2a      	ldr	r3, [pc, #168]	; (8013378 <__lshift+0xd8>)
 80132ce:	482b      	ldr	r0, [pc, #172]	; (801337c <__lshift+0xdc>)
 80132d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80132d4:	f000 fcd6 	bl	8013c84 <__assert_func>
 80132d8:	3101      	adds	r1, #1
 80132da:	005b      	lsls	r3, r3, #1
 80132dc:	e7ee      	b.n	80132bc <__lshift+0x1c>
 80132de:	2300      	movs	r3, #0
 80132e0:	f100 0114 	add.w	r1, r0, #20
 80132e4:	f100 0210 	add.w	r2, r0, #16
 80132e8:	4618      	mov	r0, r3
 80132ea:	4553      	cmp	r3, sl
 80132ec:	db37      	blt.n	801335e <__lshift+0xbe>
 80132ee:	6920      	ldr	r0, [r4, #16]
 80132f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80132f4:	f104 0314 	add.w	r3, r4, #20
 80132f8:	f019 091f 	ands.w	r9, r9, #31
 80132fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013300:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013304:	d02f      	beq.n	8013366 <__lshift+0xc6>
 8013306:	f1c9 0e20 	rsb	lr, r9, #32
 801330a:	468a      	mov	sl, r1
 801330c:	f04f 0c00 	mov.w	ip, #0
 8013310:	681a      	ldr	r2, [r3, #0]
 8013312:	fa02 f209 	lsl.w	r2, r2, r9
 8013316:	ea42 020c 	orr.w	r2, r2, ip
 801331a:	f84a 2b04 	str.w	r2, [sl], #4
 801331e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013322:	4298      	cmp	r0, r3
 8013324:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013328:	d8f2      	bhi.n	8013310 <__lshift+0x70>
 801332a:	1b03      	subs	r3, r0, r4
 801332c:	3b15      	subs	r3, #21
 801332e:	f023 0303 	bic.w	r3, r3, #3
 8013332:	3304      	adds	r3, #4
 8013334:	f104 0215 	add.w	r2, r4, #21
 8013338:	4290      	cmp	r0, r2
 801333a:	bf38      	it	cc
 801333c:	2304      	movcc	r3, #4
 801333e:	f841 c003 	str.w	ip, [r1, r3]
 8013342:	f1bc 0f00 	cmp.w	ip, #0
 8013346:	d001      	beq.n	801334c <__lshift+0xac>
 8013348:	f108 0602 	add.w	r6, r8, #2
 801334c:	3e01      	subs	r6, #1
 801334e:	4638      	mov	r0, r7
 8013350:	612e      	str	r6, [r5, #16]
 8013352:	4621      	mov	r1, r4
 8013354:	f7ff fd88 	bl	8012e68 <_Bfree>
 8013358:	4628      	mov	r0, r5
 801335a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801335e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013362:	3301      	adds	r3, #1
 8013364:	e7c1      	b.n	80132ea <__lshift+0x4a>
 8013366:	3904      	subs	r1, #4
 8013368:	f853 2b04 	ldr.w	r2, [r3], #4
 801336c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013370:	4298      	cmp	r0, r3
 8013372:	d8f9      	bhi.n	8013368 <__lshift+0xc8>
 8013374:	e7ea      	b.n	801334c <__lshift+0xac>
 8013376:	bf00      	nop
 8013378:	08015620 	.word	0x08015620
 801337c:	080156ac 	.word	0x080156ac

08013380 <__mcmp>:
 8013380:	b530      	push	{r4, r5, lr}
 8013382:	6902      	ldr	r2, [r0, #16]
 8013384:	690c      	ldr	r4, [r1, #16]
 8013386:	1b12      	subs	r2, r2, r4
 8013388:	d10e      	bne.n	80133a8 <__mcmp+0x28>
 801338a:	f100 0314 	add.w	r3, r0, #20
 801338e:	3114      	adds	r1, #20
 8013390:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013394:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013398:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801339c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80133a0:	42a5      	cmp	r5, r4
 80133a2:	d003      	beq.n	80133ac <__mcmp+0x2c>
 80133a4:	d305      	bcc.n	80133b2 <__mcmp+0x32>
 80133a6:	2201      	movs	r2, #1
 80133a8:	4610      	mov	r0, r2
 80133aa:	bd30      	pop	{r4, r5, pc}
 80133ac:	4283      	cmp	r3, r0
 80133ae:	d3f3      	bcc.n	8013398 <__mcmp+0x18>
 80133b0:	e7fa      	b.n	80133a8 <__mcmp+0x28>
 80133b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80133b6:	e7f7      	b.n	80133a8 <__mcmp+0x28>

080133b8 <__mdiff>:
 80133b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133bc:	460c      	mov	r4, r1
 80133be:	4606      	mov	r6, r0
 80133c0:	4611      	mov	r1, r2
 80133c2:	4620      	mov	r0, r4
 80133c4:	4690      	mov	r8, r2
 80133c6:	f7ff ffdb 	bl	8013380 <__mcmp>
 80133ca:	1e05      	subs	r5, r0, #0
 80133cc:	d110      	bne.n	80133f0 <__mdiff+0x38>
 80133ce:	4629      	mov	r1, r5
 80133d0:	4630      	mov	r0, r6
 80133d2:	f7ff fd09 	bl	8012de8 <_Balloc>
 80133d6:	b930      	cbnz	r0, 80133e6 <__mdiff+0x2e>
 80133d8:	4b3a      	ldr	r3, [pc, #232]	; (80134c4 <__mdiff+0x10c>)
 80133da:	4602      	mov	r2, r0
 80133dc:	f240 2132 	movw	r1, #562	; 0x232
 80133e0:	4839      	ldr	r0, [pc, #228]	; (80134c8 <__mdiff+0x110>)
 80133e2:	f000 fc4f 	bl	8013c84 <__assert_func>
 80133e6:	2301      	movs	r3, #1
 80133e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80133ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133f0:	bfa4      	itt	ge
 80133f2:	4643      	movge	r3, r8
 80133f4:	46a0      	movge	r8, r4
 80133f6:	4630      	mov	r0, r6
 80133f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80133fc:	bfa6      	itte	ge
 80133fe:	461c      	movge	r4, r3
 8013400:	2500      	movge	r5, #0
 8013402:	2501      	movlt	r5, #1
 8013404:	f7ff fcf0 	bl	8012de8 <_Balloc>
 8013408:	b920      	cbnz	r0, 8013414 <__mdiff+0x5c>
 801340a:	4b2e      	ldr	r3, [pc, #184]	; (80134c4 <__mdiff+0x10c>)
 801340c:	4602      	mov	r2, r0
 801340e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013412:	e7e5      	b.n	80133e0 <__mdiff+0x28>
 8013414:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013418:	6926      	ldr	r6, [r4, #16]
 801341a:	60c5      	str	r5, [r0, #12]
 801341c:	f104 0914 	add.w	r9, r4, #20
 8013420:	f108 0514 	add.w	r5, r8, #20
 8013424:	f100 0e14 	add.w	lr, r0, #20
 8013428:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801342c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013430:	f108 0210 	add.w	r2, r8, #16
 8013434:	46f2      	mov	sl, lr
 8013436:	2100      	movs	r1, #0
 8013438:	f859 3b04 	ldr.w	r3, [r9], #4
 801343c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013440:	fa1f f883 	uxth.w	r8, r3
 8013444:	fa11 f18b 	uxtah	r1, r1, fp
 8013448:	0c1b      	lsrs	r3, r3, #16
 801344a:	eba1 0808 	sub.w	r8, r1, r8
 801344e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013452:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013456:	fa1f f888 	uxth.w	r8, r8
 801345a:	1419      	asrs	r1, r3, #16
 801345c:	454e      	cmp	r6, r9
 801345e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013462:	f84a 3b04 	str.w	r3, [sl], #4
 8013466:	d8e7      	bhi.n	8013438 <__mdiff+0x80>
 8013468:	1b33      	subs	r3, r6, r4
 801346a:	3b15      	subs	r3, #21
 801346c:	f023 0303 	bic.w	r3, r3, #3
 8013470:	3304      	adds	r3, #4
 8013472:	3415      	adds	r4, #21
 8013474:	42a6      	cmp	r6, r4
 8013476:	bf38      	it	cc
 8013478:	2304      	movcc	r3, #4
 801347a:	441d      	add	r5, r3
 801347c:	4473      	add	r3, lr
 801347e:	469e      	mov	lr, r3
 8013480:	462e      	mov	r6, r5
 8013482:	4566      	cmp	r6, ip
 8013484:	d30e      	bcc.n	80134a4 <__mdiff+0xec>
 8013486:	f10c 0203 	add.w	r2, ip, #3
 801348a:	1b52      	subs	r2, r2, r5
 801348c:	f022 0203 	bic.w	r2, r2, #3
 8013490:	3d03      	subs	r5, #3
 8013492:	45ac      	cmp	ip, r5
 8013494:	bf38      	it	cc
 8013496:	2200      	movcc	r2, #0
 8013498:	441a      	add	r2, r3
 801349a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801349e:	b17b      	cbz	r3, 80134c0 <__mdiff+0x108>
 80134a0:	6107      	str	r7, [r0, #16]
 80134a2:	e7a3      	b.n	80133ec <__mdiff+0x34>
 80134a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80134a8:	fa11 f288 	uxtah	r2, r1, r8
 80134ac:	1414      	asrs	r4, r2, #16
 80134ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80134b2:	b292      	uxth	r2, r2
 80134b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80134b8:	f84e 2b04 	str.w	r2, [lr], #4
 80134bc:	1421      	asrs	r1, r4, #16
 80134be:	e7e0      	b.n	8013482 <__mdiff+0xca>
 80134c0:	3f01      	subs	r7, #1
 80134c2:	e7ea      	b.n	801349a <__mdiff+0xe2>
 80134c4:	08015620 	.word	0x08015620
 80134c8:	080156ac 	.word	0x080156ac

080134cc <__ulp>:
 80134cc:	b082      	sub	sp, #8
 80134ce:	ed8d 0b00 	vstr	d0, [sp]
 80134d2:	9b01      	ldr	r3, [sp, #4]
 80134d4:	4912      	ldr	r1, [pc, #72]	; (8013520 <__ulp+0x54>)
 80134d6:	4019      	ands	r1, r3
 80134d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80134dc:	2900      	cmp	r1, #0
 80134de:	dd05      	ble.n	80134ec <__ulp+0x20>
 80134e0:	2200      	movs	r2, #0
 80134e2:	460b      	mov	r3, r1
 80134e4:	ec43 2b10 	vmov	d0, r2, r3
 80134e8:	b002      	add	sp, #8
 80134ea:	4770      	bx	lr
 80134ec:	4249      	negs	r1, r1
 80134ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80134f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80134f6:	f04f 0200 	mov.w	r2, #0
 80134fa:	f04f 0300 	mov.w	r3, #0
 80134fe:	da04      	bge.n	801350a <__ulp+0x3e>
 8013500:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013504:	fa41 f300 	asr.w	r3, r1, r0
 8013508:	e7ec      	b.n	80134e4 <__ulp+0x18>
 801350a:	f1a0 0114 	sub.w	r1, r0, #20
 801350e:	291e      	cmp	r1, #30
 8013510:	bfda      	itte	le
 8013512:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013516:	fa20 f101 	lsrle.w	r1, r0, r1
 801351a:	2101      	movgt	r1, #1
 801351c:	460a      	mov	r2, r1
 801351e:	e7e1      	b.n	80134e4 <__ulp+0x18>
 8013520:	7ff00000 	.word	0x7ff00000

08013524 <__b2d>:
 8013524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013526:	6905      	ldr	r5, [r0, #16]
 8013528:	f100 0714 	add.w	r7, r0, #20
 801352c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013530:	1f2e      	subs	r6, r5, #4
 8013532:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013536:	4620      	mov	r0, r4
 8013538:	f7ff fd48 	bl	8012fcc <__hi0bits>
 801353c:	f1c0 0320 	rsb	r3, r0, #32
 8013540:	280a      	cmp	r0, #10
 8013542:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80135c0 <__b2d+0x9c>
 8013546:	600b      	str	r3, [r1, #0]
 8013548:	dc14      	bgt.n	8013574 <__b2d+0x50>
 801354a:	f1c0 0e0b 	rsb	lr, r0, #11
 801354e:	fa24 f10e 	lsr.w	r1, r4, lr
 8013552:	42b7      	cmp	r7, r6
 8013554:	ea41 030c 	orr.w	r3, r1, ip
 8013558:	bf34      	ite	cc
 801355a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801355e:	2100      	movcs	r1, #0
 8013560:	3015      	adds	r0, #21
 8013562:	fa04 f000 	lsl.w	r0, r4, r0
 8013566:	fa21 f10e 	lsr.w	r1, r1, lr
 801356a:	ea40 0201 	orr.w	r2, r0, r1
 801356e:	ec43 2b10 	vmov	d0, r2, r3
 8013572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013574:	42b7      	cmp	r7, r6
 8013576:	bf3a      	itte	cc
 8013578:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801357c:	f1a5 0608 	subcc.w	r6, r5, #8
 8013580:	2100      	movcs	r1, #0
 8013582:	380b      	subs	r0, #11
 8013584:	d017      	beq.n	80135b6 <__b2d+0x92>
 8013586:	f1c0 0c20 	rsb	ip, r0, #32
 801358a:	fa04 f500 	lsl.w	r5, r4, r0
 801358e:	42be      	cmp	r6, r7
 8013590:	fa21 f40c 	lsr.w	r4, r1, ip
 8013594:	ea45 0504 	orr.w	r5, r5, r4
 8013598:	bf8c      	ite	hi
 801359a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801359e:	2400      	movls	r4, #0
 80135a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80135a4:	fa01 f000 	lsl.w	r0, r1, r0
 80135a8:	fa24 f40c 	lsr.w	r4, r4, ip
 80135ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80135b0:	ea40 0204 	orr.w	r2, r0, r4
 80135b4:	e7db      	b.n	801356e <__b2d+0x4a>
 80135b6:	ea44 030c 	orr.w	r3, r4, ip
 80135ba:	460a      	mov	r2, r1
 80135bc:	e7d7      	b.n	801356e <__b2d+0x4a>
 80135be:	bf00      	nop
 80135c0:	3ff00000 	.word	0x3ff00000

080135c4 <__d2b>:
 80135c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80135c8:	4689      	mov	r9, r1
 80135ca:	2101      	movs	r1, #1
 80135cc:	ec57 6b10 	vmov	r6, r7, d0
 80135d0:	4690      	mov	r8, r2
 80135d2:	f7ff fc09 	bl	8012de8 <_Balloc>
 80135d6:	4604      	mov	r4, r0
 80135d8:	b930      	cbnz	r0, 80135e8 <__d2b+0x24>
 80135da:	4602      	mov	r2, r0
 80135dc:	4b25      	ldr	r3, [pc, #148]	; (8013674 <__d2b+0xb0>)
 80135de:	4826      	ldr	r0, [pc, #152]	; (8013678 <__d2b+0xb4>)
 80135e0:	f240 310a 	movw	r1, #778	; 0x30a
 80135e4:	f000 fb4e 	bl	8013c84 <__assert_func>
 80135e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80135ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80135f0:	bb35      	cbnz	r5, 8013640 <__d2b+0x7c>
 80135f2:	2e00      	cmp	r6, #0
 80135f4:	9301      	str	r3, [sp, #4]
 80135f6:	d028      	beq.n	801364a <__d2b+0x86>
 80135f8:	4668      	mov	r0, sp
 80135fa:	9600      	str	r6, [sp, #0]
 80135fc:	f7ff fd06 	bl	801300c <__lo0bits>
 8013600:	9900      	ldr	r1, [sp, #0]
 8013602:	b300      	cbz	r0, 8013646 <__d2b+0x82>
 8013604:	9a01      	ldr	r2, [sp, #4]
 8013606:	f1c0 0320 	rsb	r3, r0, #32
 801360a:	fa02 f303 	lsl.w	r3, r2, r3
 801360e:	430b      	orrs	r3, r1
 8013610:	40c2      	lsrs	r2, r0
 8013612:	6163      	str	r3, [r4, #20]
 8013614:	9201      	str	r2, [sp, #4]
 8013616:	9b01      	ldr	r3, [sp, #4]
 8013618:	61a3      	str	r3, [r4, #24]
 801361a:	2b00      	cmp	r3, #0
 801361c:	bf14      	ite	ne
 801361e:	2202      	movne	r2, #2
 8013620:	2201      	moveq	r2, #1
 8013622:	6122      	str	r2, [r4, #16]
 8013624:	b1d5      	cbz	r5, 801365c <__d2b+0x98>
 8013626:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801362a:	4405      	add	r5, r0
 801362c:	f8c9 5000 	str.w	r5, [r9]
 8013630:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013634:	f8c8 0000 	str.w	r0, [r8]
 8013638:	4620      	mov	r0, r4
 801363a:	b003      	add	sp, #12
 801363c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013644:	e7d5      	b.n	80135f2 <__d2b+0x2e>
 8013646:	6161      	str	r1, [r4, #20]
 8013648:	e7e5      	b.n	8013616 <__d2b+0x52>
 801364a:	a801      	add	r0, sp, #4
 801364c:	f7ff fcde 	bl	801300c <__lo0bits>
 8013650:	9b01      	ldr	r3, [sp, #4]
 8013652:	6163      	str	r3, [r4, #20]
 8013654:	2201      	movs	r2, #1
 8013656:	6122      	str	r2, [r4, #16]
 8013658:	3020      	adds	r0, #32
 801365a:	e7e3      	b.n	8013624 <__d2b+0x60>
 801365c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013660:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013664:	f8c9 0000 	str.w	r0, [r9]
 8013668:	6918      	ldr	r0, [r3, #16]
 801366a:	f7ff fcaf 	bl	8012fcc <__hi0bits>
 801366e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013672:	e7df      	b.n	8013634 <__d2b+0x70>
 8013674:	08015620 	.word	0x08015620
 8013678:	080156ac 	.word	0x080156ac

0801367c <__ratio>:
 801367c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013680:	4688      	mov	r8, r1
 8013682:	4669      	mov	r1, sp
 8013684:	4681      	mov	r9, r0
 8013686:	f7ff ff4d 	bl	8013524 <__b2d>
 801368a:	a901      	add	r1, sp, #4
 801368c:	4640      	mov	r0, r8
 801368e:	ec55 4b10 	vmov	r4, r5, d0
 8013692:	f7ff ff47 	bl	8013524 <__b2d>
 8013696:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801369a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801369e:	eba3 0c02 	sub.w	ip, r3, r2
 80136a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80136a6:	1a9b      	subs	r3, r3, r2
 80136a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80136ac:	ec51 0b10 	vmov	r0, r1, d0
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	bfd6      	itet	le
 80136b4:	460a      	movle	r2, r1
 80136b6:	462a      	movgt	r2, r5
 80136b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80136bc:	468b      	mov	fp, r1
 80136be:	462f      	mov	r7, r5
 80136c0:	bfd4      	ite	le
 80136c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80136c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80136ca:	4620      	mov	r0, r4
 80136cc:	ee10 2a10 	vmov	r2, s0
 80136d0:	465b      	mov	r3, fp
 80136d2:	4639      	mov	r1, r7
 80136d4:	f7ed f8ba 	bl	800084c <__aeabi_ddiv>
 80136d8:	ec41 0b10 	vmov	d0, r0, r1
 80136dc:	b003      	add	sp, #12
 80136de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080136e2 <__copybits>:
 80136e2:	3901      	subs	r1, #1
 80136e4:	b570      	push	{r4, r5, r6, lr}
 80136e6:	1149      	asrs	r1, r1, #5
 80136e8:	6914      	ldr	r4, [r2, #16]
 80136ea:	3101      	adds	r1, #1
 80136ec:	f102 0314 	add.w	r3, r2, #20
 80136f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80136f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80136f8:	1f05      	subs	r5, r0, #4
 80136fa:	42a3      	cmp	r3, r4
 80136fc:	d30c      	bcc.n	8013718 <__copybits+0x36>
 80136fe:	1aa3      	subs	r3, r4, r2
 8013700:	3b11      	subs	r3, #17
 8013702:	f023 0303 	bic.w	r3, r3, #3
 8013706:	3211      	adds	r2, #17
 8013708:	42a2      	cmp	r2, r4
 801370a:	bf88      	it	hi
 801370c:	2300      	movhi	r3, #0
 801370e:	4418      	add	r0, r3
 8013710:	2300      	movs	r3, #0
 8013712:	4288      	cmp	r0, r1
 8013714:	d305      	bcc.n	8013722 <__copybits+0x40>
 8013716:	bd70      	pop	{r4, r5, r6, pc}
 8013718:	f853 6b04 	ldr.w	r6, [r3], #4
 801371c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013720:	e7eb      	b.n	80136fa <__copybits+0x18>
 8013722:	f840 3b04 	str.w	r3, [r0], #4
 8013726:	e7f4      	b.n	8013712 <__copybits+0x30>

08013728 <__any_on>:
 8013728:	f100 0214 	add.w	r2, r0, #20
 801372c:	6900      	ldr	r0, [r0, #16]
 801372e:	114b      	asrs	r3, r1, #5
 8013730:	4298      	cmp	r0, r3
 8013732:	b510      	push	{r4, lr}
 8013734:	db11      	blt.n	801375a <__any_on+0x32>
 8013736:	dd0a      	ble.n	801374e <__any_on+0x26>
 8013738:	f011 011f 	ands.w	r1, r1, #31
 801373c:	d007      	beq.n	801374e <__any_on+0x26>
 801373e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013742:	fa24 f001 	lsr.w	r0, r4, r1
 8013746:	fa00 f101 	lsl.w	r1, r0, r1
 801374a:	428c      	cmp	r4, r1
 801374c:	d10b      	bne.n	8013766 <__any_on+0x3e>
 801374e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013752:	4293      	cmp	r3, r2
 8013754:	d803      	bhi.n	801375e <__any_on+0x36>
 8013756:	2000      	movs	r0, #0
 8013758:	bd10      	pop	{r4, pc}
 801375a:	4603      	mov	r3, r0
 801375c:	e7f7      	b.n	801374e <__any_on+0x26>
 801375e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013762:	2900      	cmp	r1, #0
 8013764:	d0f5      	beq.n	8013752 <__any_on+0x2a>
 8013766:	2001      	movs	r0, #1
 8013768:	e7f6      	b.n	8013758 <__any_on+0x30>

0801376a <_calloc_r>:
 801376a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801376c:	fba1 2402 	umull	r2, r4, r1, r2
 8013770:	b94c      	cbnz	r4, 8013786 <_calloc_r+0x1c>
 8013772:	4611      	mov	r1, r2
 8013774:	9201      	str	r2, [sp, #4]
 8013776:	f000 f87b 	bl	8013870 <_malloc_r>
 801377a:	9a01      	ldr	r2, [sp, #4]
 801377c:	4605      	mov	r5, r0
 801377e:	b930      	cbnz	r0, 801378e <_calloc_r+0x24>
 8013780:	4628      	mov	r0, r5
 8013782:	b003      	add	sp, #12
 8013784:	bd30      	pop	{r4, r5, pc}
 8013786:	220c      	movs	r2, #12
 8013788:	6002      	str	r2, [r0, #0]
 801378a:	2500      	movs	r5, #0
 801378c:	e7f8      	b.n	8013780 <_calloc_r+0x16>
 801378e:	4621      	mov	r1, r4
 8013790:	f7fc fbcc 	bl	800ff2c <memset>
 8013794:	e7f4      	b.n	8013780 <_calloc_r+0x16>
	...

08013798 <_free_r>:
 8013798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801379a:	2900      	cmp	r1, #0
 801379c:	d044      	beq.n	8013828 <_free_r+0x90>
 801379e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137a2:	9001      	str	r0, [sp, #4]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	f1a1 0404 	sub.w	r4, r1, #4
 80137aa:	bfb8      	it	lt
 80137ac:	18e4      	addlt	r4, r4, r3
 80137ae:	f000 fab3 	bl	8013d18 <__malloc_lock>
 80137b2:	4a1e      	ldr	r2, [pc, #120]	; (801382c <_free_r+0x94>)
 80137b4:	9801      	ldr	r0, [sp, #4]
 80137b6:	6813      	ldr	r3, [r2, #0]
 80137b8:	b933      	cbnz	r3, 80137c8 <_free_r+0x30>
 80137ba:	6063      	str	r3, [r4, #4]
 80137bc:	6014      	str	r4, [r2, #0]
 80137be:	b003      	add	sp, #12
 80137c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80137c4:	f000 baae 	b.w	8013d24 <__malloc_unlock>
 80137c8:	42a3      	cmp	r3, r4
 80137ca:	d908      	bls.n	80137de <_free_r+0x46>
 80137cc:	6825      	ldr	r5, [r4, #0]
 80137ce:	1961      	adds	r1, r4, r5
 80137d0:	428b      	cmp	r3, r1
 80137d2:	bf01      	itttt	eq
 80137d4:	6819      	ldreq	r1, [r3, #0]
 80137d6:	685b      	ldreq	r3, [r3, #4]
 80137d8:	1949      	addeq	r1, r1, r5
 80137da:	6021      	streq	r1, [r4, #0]
 80137dc:	e7ed      	b.n	80137ba <_free_r+0x22>
 80137de:	461a      	mov	r2, r3
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	b10b      	cbz	r3, 80137e8 <_free_r+0x50>
 80137e4:	42a3      	cmp	r3, r4
 80137e6:	d9fa      	bls.n	80137de <_free_r+0x46>
 80137e8:	6811      	ldr	r1, [r2, #0]
 80137ea:	1855      	adds	r5, r2, r1
 80137ec:	42a5      	cmp	r5, r4
 80137ee:	d10b      	bne.n	8013808 <_free_r+0x70>
 80137f0:	6824      	ldr	r4, [r4, #0]
 80137f2:	4421      	add	r1, r4
 80137f4:	1854      	adds	r4, r2, r1
 80137f6:	42a3      	cmp	r3, r4
 80137f8:	6011      	str	r1, [r2, #0]
 80137fa:	d1e0      	bne.n	80137be <_free_r+0x26>
 80137fc:	681c      	ldr	r4, [r3, #0]
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	6053      	str	r3, [r2, #4]
 8013802:	4421      	add	r1, r4
 8013804:	6011      	str	r1, [r2, #0]
 8013806:	e7da      	b.n	80137be <_free_r+0x26>
 8013808:	d902      	bls.n	8013810 <_free_r+0x78>
 801380a:	230c      	movs	r3, #12
 801380c:	6003      	str	r3, [r0, #0]
 801380e:	e7d6      	b.n	80137be <_free_r+0x26>
 8013810:	6825      	ldr	r5, [r4, #0]
 8013812:	1961      	adds	r1, r4, r5
 8013814:	428b      	cmp	r3, r1
 8013816:	bf04      	itt	eq
 8013818:	6819      	ldreq	r1, [r3, #0]
 801381a:	685b      	ldreq	r3, [r3, #4]
 801381c:	6063      	str	r3, [r4, #4]
 801381e:	bf04      	itt	eq
 8013820:	1949      	addeq	r1, r1, r5
 8013822:	6021      	streq	r1, [r4, #0]
 8013824:	6054      	str	r4, [r2, #4]
 8013826:	e7ca      	b.n	80137be <_free_r+0x26>
 8013828:	b003      	add	sp, #12
 801382a:	bd30      	pop	{r4, r5, pc}
 801382c:	200063bc 	.word	0x200063bc

08013830 <sbrk_aligned>:
 8013830:	b570      	push	{r4, r5, r6, lr}
 8013832:	4e0e      	ldr	r6, [pc, #56]	; (801386c <sbrk_aligned+0x3c>)
 8013834:	460c      	mov	r4, r1
 8013836:	6831      	ldr	r1, [r6, #0]
 8013838:	4605      	mov	r5, r0
 801383a:	b911      	cbnz	r1, 8013842 <sbrk_aligned+0x12>
 801383c:	f000 f9f0 	bl	8013c20 <_sbrk_r>
 8013840:	6030      	str	r0, [r6, #0]
 8013842:	4621      	mov	r1, r4
 8013844:	4628      	mov	r0, r5
 8013846:	f000 f9eb 	bl	8013c20 <_sbrk_r>
 801384a:	1c43      	adds	r3, r0, #1
 801384c:	d00a      	beq.n	8013864 <sbrk_aligned+0x34>
 801384e:	1cc4      	adds	r4, r0, #3
 8013850:	f024 0403 	bic.w	r4, r4, #3
 8013854:	42a0      	cmp	r0, r4
 8013856:	d007      	beq.n	8013868 <sbrk_aligned+0x38>
 8013858:	1a21      	subs	r1, r4, r0
 801385a:	4628      	mov	r0, r5
 801385c:	f000 f9e0 	bl	8013c20 <_sbrk_r>
 8013860:	3001      	adds	r0, #1
 8013862:	d101      	bne.n	8013868 <sbrk_aligned+0x38>
 8013864:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013868:	4620      	mov	r0, r4
 801386a:	bd70      	pop	{r4, r5, r6, pc}
 801386c:	200063c0 	.word	0x200063c0

08013870 <_malloc_r>:
 8013870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013874:	1ccd      	adds	r5, r1, #3
 8013876:	f025 0503 	bic.w	r5, r5, #3
 801387a:	3508      	adds	r5, #8
 801387c:	2d0c      	cmp	r5, #12
 801387e:	bf38      	it	cc
 8013880:	250c      	movcc	r5, #12
 8013882:	2d00      	cmp	r5, #0
 8013884:	4607      	mov	r7, r0
 8013886:	db01      	blt.n	801388c <_malloc_r+0x1c>
 8013888:	42a9      	cmp	r1, r5
 801388a:	d905      	bls.n	8013898 <_malloc_r+0x28>
 801388c:	230c      	movs	r3, #12
 801388e:	603b      	str	r3, [r7, #0]
 8013890:	2600      	movs	r6, #0
 8013892:	4630      	mov	r0, r6
 8013894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013898:	4e2e      	ldr	r6, [pc, #184]	; (8013954 <_malloc_r+0xe4>)
 801389a:	f000 fa3d 	bl	8013d18 <__malloc_lock>
 801389e:	6833      	ldr	r3, [r6, #0]
 80138a0:	461c      	mov	r4, r3
 80138a2:	bb34      	cbnz	r4, 80138f2 <_malloc_r+0x82>
 80138a4:	4629      	mov	r1, r5
 80138a6:	4638      	mov	r0, r7
 80138a8:	f7ff ffc2 	bl	8013830 <sbrk_aligned>
 80138ac:	1c43      	adds	r3, r0, #1
 80138ae:	4604      	mov	r4, r0
 80138b0:	d14d      	bne.n	801394e <_malloc_r+0xde>
 80138b2:	6834      	ldr	r4, [r6, #0]
 80138b4:	4626      	mov	r6, r4
 80138b6:	2e00      	cmp	r6, #0
 80138b8:	d140      	bne.n	801393c <_malloc_r+0xcc>
 80138ba:	6823      	ldr	r3, [r4, #0]
 80138bc:	4631      	mov	r1, r6
 80138be:	4638      	mov	r0, r7
 80138c0:	eb04 0803 	add.w	r8, r4, r3
 80138c4:	f000 f9ac 	bl	8013c20 <_sbrk_r>
 80138c8:	4580      	cmp	r8, r0
 80138ca:	d13a      	bne.n	8013942 <_malloc_r+0xd2>
 80138cc:	6821      	ldr	r1, [r4, #0]
 80138ce:	3503      	adds	r5, #3
 80138d0:	1a6d      	subs	r5, r5, r1
 80138d2:	f025 0503 	bic.w	r5, r5, #3
 80138d6:	3508      	adds	r5, #8
 80138d8:	2d0c      	cmp	r5, #12
 80138da:	bf38      	it	cc
 80138dc:	250c      	movcc	r5, #12
 80138de:	4629      	mov	r1, r5
 80138e0:	4638      	mov	r0, r7
 80138e2:	f7ff ffa5 	bl	8013830 <sbrk_aligned>
 80138e6:	3001      	adds	r0, #1
 80138e8:	d02b      	beq.n	8013942 <_malloc_r+0xd2>
 80138ea:	6823      	ldr	r3, [r4, #0]
 80138ec:	442b      	add	r3, r5
 80138ee:	6023      	str	r3, [r4, #0]
 80138f0:	e00e      	b.n	8013910 <_malloc_r+0xa0>
 80138f2:	6822      	ldr	r2, [r4, #0]
 80138f4:	1b52      	subs	r2, r2, r5
 80138f6:	d41e      	bmi.n	8013936 <_malloc_r+0xc6>
 80138f8:	2a0b      	cmp	r2, #11
 80138fa:	d916      	bls.n	801392a <_malloc_r+0xba>
 80138fc:	1961      	adds	r1, r4, r5
 80138fe:	42a3      	cmp	r3, r4
 8013900:	6025      	str	r5, [r4, #0]
 8013902:	bf18      	it	ne
 8013904:	6059      	strne	r1, [r3, #4]
 8013906:	6863      	ldr	r3, [r4, #4]
 8013908:	bf08      	it	eq
 801390a:	6031      	streq	r1, [r6, #0]
 801390c:	5162      	str	r2, [r4, r5]
 801390e:	604b      	str	r3, [r1, #4]
 8013910:	4638      	mov	r0, r7
 8013912:	f104 060b 	add.w	r6, r4, #11
 8013916:	f000 fa05 	bl	8013d24 <__malloc_unlock>
 801391a:	f026 0607 	bic.w	r6, r6, #7
 801391e:	1d23      	adds	r3, r4, #4
 8013920:	1af2      	subs	r2, r6, r3
 8013922:	d0b6      	beq.n	8013892 <_malloc_r+0x22>
 8013924:	1b9b      	subs	r3, r3, r6
 8013926:	50a3      	str	r3, [r4, r2]
 8013928:	e7b3      	b.n	8013892 <_malloc_r+0x22>
 801392a:	6862      	ldr	r2, [r4, #4]
 801392c:	42a3      	cmp	r3, r4
 801392e:	bf0c      	ite	eq
 8013930:	6032      	streq	r2, [r6, #0]
 8013932:	605a      	strne	r2, [r3, #4]
 8013934:	e7ec      	b.n	8013910 <_malloc_r+0xa0>
 8013936:	4623      	mov	r3, r4
 8013938:	6864      	ldr	r4, [r4, #4]
 801393a:	e7b2      	b.n	80138a2 <_malloc_r+0x32>
 801393c:	4634      	mov	r4, r6
 801393e:	6876      	ldr	r6, [r6, #4]
 8013940:	e7b9      	b.n	80138b6 <_malloc_r+0x46>
 8013942:	230c      	movs	r3, #12
 8013944:	603b      	str	r3, [r7, #0]
 8013946:	4638      	mov	r0, r7
 8013948:	f000 f9ec 	bl	8013d24 <__malloc_unlock>
 801394c:	e7a1      	b.n	8013892 <_malloc_r+0x22>
 801394e:	6025      	str	r5, [r4, #0]
 8013950:	e7de      	b.n	8013910 <_malloc_r+0xa0>
 8013952:	bf00      	nop
 8013954:	200063bc 	.word	0x200063bc

08013958 <__ssputs_r>:
 8013958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801395c:	688e      	ldr	r6, [r1, #8]
 801395e:	429e      	cmp	r6, r3
 8013960:	4682      	mov	sl, r0
 8013962:	460c      	mov	r4, r1
 8013964:	4690      	mov	r8, r2
 8013966:	461f      	mov	r7, r3
 8013968:	d838      	bhi.n	80139dc <__ssputs_r+0x84>
 801396a:	898a      	ldrh	r2, [r1, #12]
 801396c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013970:	d032      	beq.n	80139d8 <__ssputs_r+0x80>
 8013972:	6825      	ldr	r5, [r4, #0]
 8013974:	6909      	ldr	r1, [r1, #16]
 8013976:	eba5 0901 	sub.w	r9, r5, r1
 801397a:	6965      	ldr	r5, [r4, #20]
 801397c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013980:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013984:	3301      	adds	r3, #1
 8013986:	444b      	add	r3, r9
 8013988:	106d      	asrs	r5, r5, #1
 801398a:	429d      	cmp	r5, r3
 801398c:	bf38      	it	cc
 801398e:	461d      	movcc	r5, r3
 8013990:	0553      	lsls	r3, r2, #21
 8013992:	d531      	bpl.n	80139f8 <__ssputs_r+0xa0>
 8013994:	4629      	mov	r1, r5
 8013996:	f7ff ff6b 	bl	8013870 <_malloc_r>
 801399a:	4606      	mov	r6, r0
 801399c:	b950      	cbnz	r0, 80139b4 <__ssputs_r+0x5c>
 801399e:	230c      	movs	r3, #12
 80139a0:	f8ca 3000 	str.w	r3, [sl]
 80139a4:	89a3      	ldrh	r3, [r4, #12]
 80139a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139aa:	81a3      	strh	r3, [r4, #12]
 80139ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139b4:	6921      	ldr	r1, [r4, #16]
 80139b6:	464a      	mov	r2, r9
 80139b8:	f7fc faaa 	bl	800ff10 <memcpy>
 80139bc:	89a3      	ldrh	r3, [r4, #12]
 80139be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80139c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139c6:	81a3      	strh	r3, [r4, #12]
 80139c8:	6126      	str	r6, [r4, #16]
 80139ca:	6165      	str	r5, [r4, #20]
 80139cc:	444e      	add	r6, r9
 80139ce:	eba5 0509 	sub.w	r5, r5, r9
 80139d2:	6026      	str	r6, [r4, #0]
 80139d4:	60a5      	str	r5, [r4, #8]
 80139d6:	463e      	mov	r6, r7
 80139d8:	42be      	cmp	r6, r7
 80139da:	d900      	bls.n	80139de <__ssputs_r+0x86>
 80139dc:	463e      	mov	r6, r7
 80139de:	6820      	ldr	r0, [r4, #0]
 80139e0:	4632      	mov	r2, r6
 80139e2:	4641      	mov	r1, r8
 80139e4:	f000 f97e 	bl	8013ce4 <memmove>
 80139e8:	68a3      	ldr	r3, [r4, #8]
 80139ea:	1b9b      	subs	r3, r3, r6
 80139ec:	60a3      	str	r3, [r4, #8]
 80139ee:	6823      	ldr	r3, [r4, #0]
 80139f0:	4433      	add	r3, r6
 80139f2:	6023      	str	r3, [r4, #0]
 80139f4:	2000      	movs	r0, #0
 80139f6:	e7db      	b.n	80139b0 <__ssputs_r+0x58>
 80139f8:	462a      	mov	r2, r5
 80139fa:	f000 f999 	bl	8013d30 <_realloc_r>
 80139fe:	4606      	mov	r6, r0
 8013a00:	2800      	cmp	r0, #0
 8013a02:	d1e1      	bne.n	80139c8 <__ssputs_r+0x70>
 8013a04:	6921      	ldr	r1, [r4, #16]
 8013a06:	4650      	mov	r0, sl
 8013a08:	f7ff fec6 	bl	8013798 <_free_r>
 8013a0c:	e7c7      	b.n	801399e <__ssputs_r+0x46>
	...

08013a10 <_svfiprintf_r>:
 8013a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a14:	4698      	mov	r8, r3
 8013a16:	898b      	ldrh	r3, [r1, #12]
 8013a18:	061b      	lsls	r3, r3, #24
 8013a1a:	b09d      	sub	sp, #116	; 0x74
 8013a1c:	4607      	mov	r7, r0
 8013a1e:	460d      	mov	r5, r1
 8013a20:	4614      	mov	r4, r2
 8013a22:	d50e      	bpl.n	8013a42 <_svfiprintf_r+0x32>
 8013a24:	690b      	ldr	r3, [r1, #16]
 8013a26:	b963      	cbnz	r3, 8013a42 <_svfiprintf_r+0x32>
 8013a28:	2140      	movs	r1, #64	; 0x40
 8013a2a:	f7ff ff21 	bl	8013870 <_malloc_r>
 8013a2e:	6028      	str	r0, [r5, #0]
 8013a30:	6128      	str	r0, [r5, #16]
 8013a32:	b920      	cbnz	r0, 8013a3e <_svfiprintf_r+0x2e>
 8013a34:	230c      	movs	r3, #12
 8013a36:	603b      	str	r3, [r7, #0]
 8013a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a3c:	e0d1      	b.n	8013be2 <_svfiprintf_r+0x1d2>
 8013a3e:	2340      	movs	r3, #64	; 0x40
 8013a40:	616b      	str	r3, [r5, #20]
 8013a42:	2300      	movs	r3, #0
 8013a44:	9309      	str	r3, [sp, #36]	; 0x24
 8013a46:	2320      	movs	r3, #32
 8013a48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a50:	2330      	movs	r3, #48	; 0x30
 8013a52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013bfc <_svfiprintf_r+0x1ec>
 8013a56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a5a:	f04f 0901 	mov.w	r9, #1
 8013a5e:	4623      	mov	r3, r4
 8013a60:	469a      	mov	sl, r3
 8013a62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a66:	b10a      	cbz	r2, 8013a6c <_svfiprintf_r+0x5c>
 8013a68:	2a25      	cmp	r2, #37	; 0x25
 8013a6a:	d1f9      	bne.n	8013a60 <_svfiprintf_r+0x50>
 8013a6c:	ebba 0b04 	subs.w	fp, sl, r4
 8013a70:	d00b      	beq.n	8013a8a <_svfiprintf_r+0x7a>
 8013a72:	465b      	mov	r3, fp
 8013a74:	4622      	mov	r2, r4
 8013a76:	4629      	mov	r1, r5
 8013a78:	4638      	mov	r0, r7
 8013a7a:	f7ff ff6d 	bl	8013958 <__ssputs_r>
 8013a7e:	3001      	adds	r0, #1
 8013a80:	f000 80aa 	beq.w	8013bd8 <_svfiprintf_r+0x1c8>
 8013a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a86:	445a      	add	r2, fp
 8013a88:	9209      	str	r2, [sp, #36]	; 0x24
 8013a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	f000 80a2 	beq.w	8013bd8 <_svfiprintf_r+0x1c8>
 8013a94:	2300      	movs	r3, #0
 8013a96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013a9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a9e:	f10a 0a01 	add.w	sl, sl, #1
 8013aa2:	9304      	str	r3, [sp, #16]
 8013aa4:	9307      	str	r3, [sp, #28]
 8013aa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013aaa:	931a      	str	r3, [sp, #104]	; 0x68
 8013aac:	4654      	mov	r4, sl
 8013aae:	2205      	movs	r2, #5
 8013ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ab4:	4851      	ldr	r0, [pc, #324]	; (8013bfc <_svfiprintf_r+0x1ec>)
 8013ab6:	f7ec fb93 	bl	80001e0 <memchr>
 8013aba:	9a04      	ldr	r2, [sp, #16]
 8013abc:	b9d8      	cbnz	r0, 8013af6 <_svfiprintf_r+0xe6>
 8013abe:	06d0      	lsls	r0, r2, #27
 8013ac0:	bf44      	itt	mi
 8013ac2:	2320      	movmi	r3, #32
 8013ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ac8:	0711      	lsls	r1, r2, #28
 8013aca:	bf44      	itt	mi
 8013acc:	232b      	movmi	r3, #43	; 0x2b
 8013ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8013ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8013ad8:	d015      	beq.n	8013b06 <_svfiprintf_r+0xf6>
 8013ada:	9a07      	ldr	r2, [sp, #28]
 8013adc:	4654      	mov	r4, sl
 8013ade:	2000      	movs	r0, #0
 8013ae0:	f04f 0c0a 	mov.w	ip, #10
 8013ae4:	4621      	mov	r1, r4
 8013ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013aea:	3b30      	subs	r3, #48	; 0x30
 8013aec:	2b09      	cmp	r3, #9
 8013aee:	d94e      	bls.n	8013b8e <_svfiprintf_r+0x17e>
 8013af0:	b1b0      	cbz	r0, 8013b20 <_svfiprintf_r+0x110>
 8013af2:	9207      	str	r2, [sp, #28]
 8013af4:	e014      	b.n	8013b20 <_svfiprintf_r+0x110>
 8013af6:	eba0 0308 	sub.w	r3, r0, r8
 8013afa:	fa09 f303 	lsl.w	r3, r9, r3
 8013afe:	4313      	orrs	r3, r2
 8013b00:	9304      	str	r3, [sp, #16]
 8013b02:	46a2      	mov	sl, r4
 8013b04:	e7d2      	b.n	8013aac <_svfiprintf_r+0x9c>
 8013b06:	9b03      	ldr	r3, [sp, #12]
 8013b08:	1d19      	adds	r1, r3, #4
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	9103      	str	r1, [sp, #12]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	bfbb      	ittet	lt
 8013b12:	425b      	neglt	r3, r3
 8013b14:	f042 0202 	orrlt.w	r2, r2, #2
 8013b18:	9307      	strge	r3, [sp, #28]
 8013b1a:	9307      	strlt	r3, [sp, #28]
 8013b1c:	bfb8      	it	lt
 8013b1e:	9204      	strlt	r2, [sp, #16]
 8013b20:	7823      	ldrb	r3, [r4, #0]
 8013b22:	2b2e      	cmp	r3, #46	; 0x2e
 8013b24:	d10c      	bne.n	8013b40 <_svfiprintf_r+0x130>
 8013b26:	7863      	ldrb	r3, [r4, #1]
 8013b28:	2b2a      	cmp	r3, #42	; 0x2a
 8013b2a:	d135      	bne.n	8013b98 <_svfiprintf_r+0x188>
 8013b2c:	9b03      	ldr	r3, [sp, #12]
 8013b2e:	1d1a      	adds	r2, r3, #4
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	9203      	str	r2, [sp, #12]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	bfb8      	it	lt
 8013b38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013b3c:	3402      	adds	r4, #2
 8013b3e:	9305      	str	r3, [sp, #20]
 8013b40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013c0c <_svfiprintf_r+0x1fc>
 8013b44:	7821      	ldrb	r1, [r4, #0]
 8013b46:	2203      	movs	r2, #3
 8013b48:	4650      	mov	r0, sl
 8013b4a:	f7ec fb49 	bl	80001e0 <memchr>
 8013b4e:	b140      	cbz	r0, 8013b62 <_svfiprintf_r+0x152>
 8013b50:	2340      	movs	r3, #64	; 0x40
 8013b52:	eba0 000a 	sub.w	r0, r0, sl
 8013b56:	fa03 f000 	lsl.w	r0, r3, r0
 8013b5a:	9b04      	ldr	r3, [sp, #16]
 8013b5c:	4303      	orrs	r3, r0
 8013b5e:	3401      	adds	r4, #1
 8013b60:	9304      	str	r3, [sp, #16]
 8013b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b66:	4826      	ldr	r0, [pc, #152]	; (8013c00 <_svfiprintf_r+0x1f0>)
 8013b68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b6c:	2206      	movs	r2, #6
 8013b6e:	f7ec fb37 	bl	80001e0 <memchr>
 8013b72:	2800      	cmp	r0, #0
 8013b74:	d038      	beq.n	8013be8 <_svfiprintf_r+0x1d8>
 8013b76:	4b23      	ldr	r3, [pc, #140]	; (8013c04 <_svfiprintf_r+0x1f4>)
 8013b78:	bb1b      	cbnz	r3, 8013bc2 <_svfiprintf_r+0x1b2>
 8013b7a:	9b03      	ldr	r3, [sp, #12]
 8013b7c:	3307      	adds	r3, #7
 8013b7e:	f023 0307 	bic.w	r3, r3, #7
 8013b82:	3308      	adds	r3, #8
 8013b84:	9303      	str	r3, [sp, #12]
 8013b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b88:	4433      	add	r3, r6
 8013b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8013b8c:	e767      	b.n	8013a5e <_svfiprintf_r+0x4e>
 8013b8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b92:	460c      	mov	r4, r1
 8013b94:	2001      	movs	r0, #1
 8013b96:	e7a5      	b.n	8013ae4 <_svfiprintf_r+0xd4>
 8013b98:	2300      	movs	r3, #0
 8013b9a:	3401      	adds	r4, #1
 8013b9c:	9305      	str	r3, [sp, #20]
 8013b9e:	4619      	mov	r1, r3
 8013ba0:	f04f 0c0a 	mov.w	ip, #10
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013baa:	3a30      	subs	r2, #48	; 0x30
 8013bac:	2a09      	cmp	r2, #9
 8013bae:	d903      	bls.n	8013bb8 <_svfiprintf_r+0x1a8>
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d0c5      	beq.n	8013b40 <_svfiprintf_r+0x130>
 8013bb4:	9105      	str	r1, [sp, #20]
 8013bb6:	e7c3      	b.n	8013b40 <_svfiprintf_r+0x130>
 8013bb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8013bbc:	4604      	mov	r4, r0
 8013bbe:	2301      	movs	r3, #1
 8013bc0:	e7f0      	b.n	8013ba4 <_svfiprintf_r+0x194>
 8013bc2:	ab03      	add	r3, sp, #12
 8013bc4:	9300      	str	r3, [sp, #0]
 8013bc6:	462a      	mov	r2, r5
 8013bc8:	4b0f      	ldr	r3, [pc, #60]	; (8013c08 <_svfiprintf_r+0x1f8>)
 8013bca:	a904      	add	r1, sp, #16
 8013bcc:	4638      	mov	r0, r7
 8013bce:	f7fc fa55 	bl	801007c <_printf_float>
 8013bd2:	1c42      	adds	r2, r0, #1
 8013bd4:	4606      	mov	r6, r0
 8013bd6:	d1d6      	bne.n	8013b86 <_svfiprintf_r+0x176>
 8013bd8:	89ab      	ldrh	r3, [r5, #12]
 8013bda:	065b      	lsls	r3, r3, #25
 8013bdc:	f53f af2c 	bmi.w	8013a38 <_svfiprintf_r+0x28>
 8013be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013be2:	b01d      	add	sp, #116	; 0x74
 8013be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013be8:	ab03      	add	r3, sp, #12
 8013bea:	9300      	str	r3, [sp, #0]
 8013bec:	462a      	mov	r2, r5
 8013bee:	4b06      	ldr	r3, [pc, #24]	; (8013c08 <_svfiprintf_r+0x1f8>)
 8013bf0:	a904      	add	r1, sp, #16
 8013bf2:	4638      	mov	r0, r7
 8013bf4:	f7fc fce6 	bl	80105c4 <_printf_i>
 8013bf8:	e7eb      	b.n	8013bd2 <_svfiprintf_r+0x1c2>
 8013bfa:	bf00      	nop
 8013bfc:	08015804 	.word	0x08015804
 8013c00:	0801580e 	.word	0x0801580e
 8013c04:	0801007d 	.word	0x0801007d
 8013c08:	08013959 	.word	0x08013959
 8013c0c:	0801580a 	.word	0x0801580a

08013c10 <nan>:
 8013c10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013c18 <nan+0x8>
 8013c14:	4770      	bx	lr
 8013c16:	bf00      	nop
 8013c18:	00000000 	.word	0x00000000
 8013c1c:	7ff80000 	.word	0x7ff80000

08013c20 <_sbrk_r>:
 8013c20:	b538      	push	{r3, r4, r5, lr}
 8013c22:	4d06      	ldr	r5, [pc, #24]	; (8013c3c <_sbrk_r+0x1c>)
 8013c24:	2300      	movs	r3, #0
 8013c26:	4604      	mov	r4, r0
 8013c28:	4608      	mov	r0, r1
 8013c2a:	602b      	str	r3, [r5, #0]
 8013c2c:	f7f3 f968 	bl	8006f00 <_sbrk>
 8013c30:	1c43      	adds	r3, r0, #1
 8013c32:	d102      	bne.n	8013c3a <_sbrk_r+0x1a>
 8013c34:	682b      	ldr	r3, [r5, #0]
 8013c36:	b103      	cbz	r3, 8013c3a <_sbrk_r+0x1a>
 8013c38:	6023      	str	r3, [r4, #0]
 8013c3a:	bd38      	pop	{r3, r4, r5, pc}
 8013c3c:	200063c4 	.word	0x200063c4

08013c40 <strncmp>:
 8013c40:	b510      	push	{r4, lr}
 8013c42:	b17a      	cbz	r2, 8013c64 <strncmp+0x24>
 8013c44:	4603      	mov	r3, r0
 8013c46:	3901      	subs	r1, #1
 8013c48:	1884      	adds	r4, r0, r2
 8013c4a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013c4e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013c52:	4290      	cmp	r0, r2
 8013c54:	d101      	bne.n	8013c5a <strncmp+0x1a>
 8013c56:	42a3      	cmp	r3, r4
 8013c58:	d101      	bne.n	8013c5e <strncmp+0x1e>
 8013c5a:	1a80      	subs	r0, r0, r2
 8013c5c:	bd10      	pop	{r4, pc}
 8013c5e:	2800      	cmp	r0, #0
 8013c60:	d1f3      	bne.n	8013c4a <strncmp+0xa>
 8013c62:	e7fa      	b.n	8013c5a <strncmp+0x1a>
 8013c64:	4610      	mov	r0, r2
 8013c66:	e7f9      	b.n	8013c5c <strncmp+0x1c>

08013c68 <__ascii_wctomb>:
 8013c68:	b149      	cbz	r1, 8013c7e <__ascii_wctomb+0x16>
 8013c6a:	2aff      	cmp	r2, #255	; 0xff
 8013c6c:	bf85      	ittet	hi
 8013c6e:	238a      	movhi	r3, #138	; 0x8a
 8013c70:	6003      	strhi	r3, [r0, #0]
 8013c72:	700a      	strbls	r2, [r1, #0]
 8013c74:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013c78:	bf98      	it	ls
 8013c7a:	2001      	movls	r0, #1
 8013c7c:	4770      	bx	lr
 8013c7e:	4608      	mov	r0, r1
 8013c80:	4770      	bx	lr
	...

08013c84 <__assert_func>:
 8013c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c86:	4614      	mov	r4, r2
 8013c88:	461a      	mov	r2, r3
 8013c8a:	4b09      	ldr	r3, [pc, #36]	; (8013cb0 <__assert_func+0x2c>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	4605      	mov	r5, r0
 8013c90:	68d8      	ldr	r0, [r3, #12]
 8013c92:	b14c      	cbz	r4, 8013ca8 <__assert_func+0x24>
 8013c94:	4b07      	ldr	r3, [pc, #28]	; (8013cb4 <__assert_func+0x30>)
 8013c96:	9100      	str	r1, [sp, #0]
 8013c98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013c9c:	4906      	ldr	r1, [pc, #24]	; (8013cb8 <__assert_func+0x34>)
 8013c9e:	462b      	mov	r3, r5
 8013ca0:	f000 f80e 	bl	8013cc0 <fiprintf>
 8013ca4:	f000 fa8c 	bl	80141c0 <abort>
 8013ca8:	4b04      	ldr	r3, [pc, #16]	; (8013cbc <__assert_func+0x38>)
 8013caa:	461c      	mov	r4, r3
 8013cac:	e7f3      	b.n	8013c96 <__assert_func+0x12>
 8013cae:	bf00      	nop
 8013cb0:	20000014 	.word	0x20000014
 8013cb4:	08015815 	.word	0x08015815
 8013cb8:	08015822 	.word	0x08015822
 8013cbc:	08015850 	.word	0x08015850

08013cc0 <fiprintf>:
 8013cc0:	b40e      	push	{r1, r2, r3}
 8013cc2:	b503      	push	{r0, r1, lr}
 8013cc4:	4601      	mov	r1, r0
 8013cc6:	ab03      	add	r3, sp, #12
 8013cc8:	4805      	ldr	r0, [pc, #20]	; (8013ce0 <fiprintf+0x20>)
 8013cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cce:	6800      	ldr	r0, [r0, #0]
 8013cd0:	9301      	str	r3, [sp, #4]
 8013cd2:	f000 f885 	bl	8013de0 <_vfiprintf_r>
 8013cd6:	b002      	add	sp, #8
 8013cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013cdc:	b003      	add	sp, #12
 8013cde:	4770      	bx	lr
 8013ce0:	20000014 	.word	0x20000014

08013ce4 <memmove>:
 8013ce4:	4288      	cmp	r0, r1
 8013ce6:	b510      	push	{r4, lr}
 8013ce8:	eb01 0402 	add.w	r4, r1, r2
 8013cec:	d902      	bls.n	8013cf4 <memmove+0x10>
 8013cee:	4284      	cmp	r4, r0
 8013cf0:	4623      	mov	r3, r4
 8013cf2:	d807      	bhi.n	8013d04 <memmove+0x20>
 8013cf4:	1e43      	subs	r3, r0, #1
 8013cf6:	42a1      	cmp	r1, r4
 8013cf8:	d008      	beq.n	8013d0c <memmove+0x28>
 8013cfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013cfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013d02:	e7f8      	b.n	8013cf6 <memmove+0x12>
 8013d04:	4402      	add	r2, r0
 8013d06:	4601      	mov	r1, r0
 8013d08:	428a      	cmp	r2, r1
 8013d0a:	d100      	bne.n	8013d0e <memmove+0x2a>
 8013d0c:	bd10      	pop	{r4, pc}
 8013d0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013d12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013d16:	e7f7      	b.n	8013d08 <memmove+0x24>

08013d18 <__malloc_lock>:
 8013d18:	4801      	ldr	r0, [pc, #4]	; (8013d20 <__malloc_lock+0x8>)
 8013d1a:	f000 bc11 	b.w	8014540 <__retarget_lock_acquire_recursive>
 8013d1e:	bf00      	nop
 8013d20:	200063c8 	.word	0x200063c8

08013d24 <__malloc_unlock>:
 8013d24:	4801      	ldr	r0, [pc, #4]	; (8013d2c <__malloc_unlock+0x8>)
 8013d26:	f000 bc0c 	b.w	8014542 <__retarget_lock_release_recursive>
 8013d2a:	bf00      	nop
 8013d2c:	200063c8 	.word	0x200063c8

08013d30 <_realloc_r>:
 8013d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d34:	4680      	mov	r8, r0
 8013d36:	4614      	mov	r4, r2
 8013d38:	460e      	mov	r6, r1
 8013d3a:	b921      	cbnz	r1, 8013d46 <_realloc_r+0x16>
 8013d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d40:	4611      	mov	r1, r2
 8013d42:	f7ff bd95 	b.w	8013870 <_malloc_r>
 8013d46:	b92a      	cbnz	r2, 8013d54 <_realloc_r+0x24>
 8013d48:	f7ff fd26 	bl	8013798 <_free_r>
 8013d4c:	4625      	mov	r5, r4
 8013d4e:	4628      	mov	r0, r5
 8013d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d54:	f000 fc5c 	bl	8014610 <_malloc_usable_size_r>
 8013d58:	4284      	cmp	r4, r0
 8013d5a:	4607      	mov	r7, r0
 8013d5c:	d802      	bhi.n	8013d64 <_realloc_r+0x34>
 8013d5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013d62:	d812      	bhi.n	8013d8a <_realloc_r+0x5a>
 8013d64:	4621      	mov	r1, r4
 8013d66:	4640      	mov	r0, r8
 8013d68:	f7ff fd82 	bl	8013870 <_malloc_r>
 8013d6c:	4605      	mov	r5, r0
 8013d6e:	2800      	cmp	r0, #0
 8013d70:	d0ed      	beq.n	8013d4e <_realloc_r+0x1e>
 8013d72:	42bc      	cmp	r4, r7
 8013d74:	4622      	mov	r2, r4
 8013d76:	4631      	mov	r1, r6
 8013d78:	bf28      	it	cs
 8013d7a:	463a      	movcs	r2, r7
 8013d7c:	f7fc f8c8 	bl	800ff10 <memcpy>
 8013d80:	4631      	mov	r1, r6
 8013d82:	4640      	mov	r0, r8
 8013d84:	f7ff fd08 	bl	8013798 <_free_r>
 8013d88:	e7e1      	b.n	8013d4e <_realloc_r+0x1e>
 8013d8a:	4635      	mov	r5, r6
 8013d8c:	e7df      	b.n	8013d4e <_realloc_r+0x1e>

08013d8e <__sfputc_r>:
 8013d8e:	6893      	ldr	r3, [r2, #8]
 8013d90:	3b01      	subs	r3, #1
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	b410      	push	{r4}
 8013d96:	6093      	str	r3, [r2, #8]
 8013d98:	da08      	bge.n	8013dac <__sfputc_r+0x1e>
 8013d9a:	6994      	ldr	r4, [r2, #24]
 8013d9c:	42a3      	cmp	r3, r4
 8013d9e:	db01      	blt.n	8013da4 <__sfputc_r+0x16>
 8013da0:	290a      	cmp	r1, #10
 8013da2:	d103      	bne.n	8013dac <__sfputc_r+0x1e>
 8013da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013da8:	f000 b94a 	b.w	8014040 <__swbuf_r>
 8013dac:	6813      	ldr	r3, [r2, #0]
 8013dae:	1c58      	adds	r0, r3, #1
 8013db0:	6010      	str	r0, [r2, #0]
 8013db2:	7019      	strb	r1, [r3, #0]
 8013db4:	4608      	mov	r0, r1
 8013db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013dba:	4770      	bx	lr

08013dbc <__sfputs_r>:
 8013dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dbe:	4606      	mov	r6, r0
 8013dc0:	460f      	mov	r7, r1
 8013dc2:	4614      	mov	r4, r2
 8013dc4:	18d5      	adds	r5, r2, r3
 8013dc6:	42ac      	cmp	r4, r5
 8013dc8:	d101      	bne.n	8013dce <__sfputs_r+0x12>
 8013dca:	2000      	movs	r0, #0
 8013dcc:	e007      	b.n	8013dde <__sfputs_r+0x22>
 8013dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013dd2:	463a      	mov	r2, r7
 8013dd4:	4630      	mov	r0, r6
 8013dd6:	f7ff ffda 	bl	8013d8e <__sfputc_r>
 8013dda:	1c43      	adds	r3, r0, #1
 8013ddc:	d1f3      	bne.n	8013dc6 <__sfputs_r+0xa>
 8013dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013de0 <_vfiprintf_r>:
 8013de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013de4:	460d      	mov	r5, r1
 8013de6:	b09d      	sub	sp, #116	; 0x74
 8013de8:	4614      	mov	r4, r2
 8013dea:	4698      	mov	r8, r3
 8013dec:	4606      	mov	r6, r0
 8013dee:	b118      	cbz	r0, 8013df8 <_vfiprintf_r+0x18>
 8013df0:	6983      	ldr	r3, [r0, #24]
 8013df2:	b90b      	cbnz	r3, 8013df8 <_vfiprintf_r+0x18>
 8013df4:	f000 fb06 	bl	8014404 <__sinit>
 8013df8:	4b89      	ldr	r3, [pc, #548]	; (8014020 <_vfiprintf_r+0x240>)
 8013dfa:	429d      	cmp	r5, r3
 8013dfc:	d11b      	bne.n	8013e36 <_vfiprintf_r+0x56>
 8013dfe:	6875      	ldr	r5, [r6, #4]
 8013e00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e02:	07d9      	lsls	r1, r3, #31
 8013e04:	d405      	bmi.n	8013e12 <_vfiprintf_r+0x32>
 8013e06:	89ab      	ldrh	r3, [r5, #12]
 8013e08:	059a      	lsls	r2, r3, #22
 8013e0a:	d402      	bmi.n	8013e12 <_vfiprintf_r+0x32>
 8013e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e0e:	f000 fb97 	bl	8014540 <__retarget_lock_acquire_recursive>
 8013e12:	89ab      	ldrh	r3, [r5, #12]
 8013e14:	071b      	lsls	r3, r3, #28
 8013e16:	d501      	bpl.n	8013e1c <_vfiprintf_r+0x3c>
 8013e18:	692b      	ldr	r3, [r5, #16]
 8013e1a:	b9eb      	cbnz	r3, 8013e58 <_vfiprintf_r+0x78>
 8013e1c:	4629      	mov	r1, r5
 8013e1e:	4630      	mov	r0, r6
 8013e20:	f000 f960 	bl	80140e4 <__swsetup_r>
 8013e24:	b1c0      	cbz	r0, 8013e58 <_vfiprintf_r+0x78>
 8013e26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e28:	07dc      	lsls	r4, r3, #31
 8013e2a:	d50e      	bpl.n	8013e4a <_vfiprintf_r+0x6a>
 8013e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e30:	b01d      	add	sp, #116	; 0x74
 8013e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e36:	4b7b      	ldr	r3, [pc, #492]	; (8014024 <_vfiprintf_r+0x244>)
 8013e38:	429d      	cmp	r5, r3
 8013e3a:	d101      	bne.n	8013e40 <_vfiprintf_r+0x60>
 8013e3c:	68b5      	ldr	r5, [r6, #8]
 8013e3e:	e7df      	b.n	8013e00 <_vfiprintf_r+0x20>
 8013e40:	4b79      	ldr	r3, [pc, #484]	; (8014028 <_vfiprintf_r+0x248>)
 8013e42:	429d      	cmp	r5, r3
 8013e44:	bf08      	it	eq
 8013e46:	68f5      	ldreq	r5, [r6, #12]
 8013e48:	e7da      	b.n	8013e00 <_vfiprintf_r+0x20>
 8013e4a:	89ab      	ldrh	r3, [r5, #12]
 8013e4c:	0598      	lsls	r0, r3, #22
 8013e4e:	d4ed      	bmi.n	8013e2c <_vfiprintf_r+0x4c>
 8013e50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e52:	f000 fb76 	bl	8014542 <__retarget_lock_release_recursive>
 8013e56:	e7e9      	b.n	8013e2c <_vfiprintf_r+0x4c>
 8013e58:	2300      	movs	r3, #0
 8013e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8013e5c:	2320      	movs	r3, #32
 8013e5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e62:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e66:	2330      	movs	r3, #48	; 0x30
 8013e68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801402c <_vfiprintf_r+0x24c>
 8013e6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e70:	f04f 0901 	mov.w	r9, #1
 8013e74:	4623      	mov	r3, r4
 8013e76:	469a      	mov	sl, r3
 8013e78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e7c:	b10a      	cbz	r2, 8013e82 <_vfiprintf_r+0xa2>
 8013e7e:	2a25      	cmp	r2, #37	; 0x25
 8013e80:	d1f9      	bne.n	8013e76 <_vfiprintf_r+0x96>
 8013e82:	ebba 0b04 	subs.w	fp, sl, r4
 8013e86:	d00b      	beq.n	8013ea0 <_vfiprintf_r+0xc0>
 8013e88:	465b      	mov	r3, fp
 8013e8a:	4622      	mov	r2, r4
 8013e8c:	4629      	mov	r1, r5
 8013e8e:	4630      	mov	r0, r6
 8013e90:	f7ff ff94 	bl	8013dbc <__sfputs_r>
 8013e94:	3001      	adds	r0, #1
 8013e96:	f000 80aa 	beq.w	8013fee <_vfiprintf_r+0x20e>
 8013e9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e9c:	445a      	add	r2, fp
 8013e9e:	9209      	str	r2, [sp, #36]	; 0x24
 8013ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	f000 80a2 	beq.w	8013fee <_vfiprintf_r+0x20e>
 8013eaa:	2300      	movs	r3, #0
 8013eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013eb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013eb4:	f10a 0a01 	add.w	sl, sl, #1
 8013eb8:	9304      	str	r3, [sp, #16]
 8013eba:	9307      	str	r3, [sp, #28]
 8013ebc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ec0:	931a      	str	r3, [sp, #104]	; 0x68
 8013ec2:	4654      	mov	r4, sl
 8013ec4:	2205      	movs	r2, #5
 8013ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013eca:	4858      	ldr	r0, [pc, #352]	; (801402c <_vfiprintf_r+0x24c>)
 8013ecc:	f7ec f988 	bl	80001e0 <memchr>
 8013ed0:	9a04      	ldr	r2, [sp, #16]
 8013ed2:	b9d8      	cbnz	r0, 8013f0c <_vfiprintf_r+0x12c>
 8013ed4:	06d1      	lsls	r1, r2, #27
 8013ed6:	bf44      	itt	mi
 8013ed8:	2320      	movmi	r3, #32
 8013eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ede:	0713      	lsls	r3, r2, #28
 8013ee0:	bf44      	itt	mi
 8013ee2:	232b      	movmi	r3, #43	; 0x2b
 8013ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8013eec:	2b2a      	cmp	r3, #42	; 0x2a
 8013eee:	d015      	beq.n	8013f1c <_vfiprintf_r+0x13c>
 8013ef0:	9a07      	ldr	r2, [sp, #28]
 8013ef2:	4654      	mov	r4, sl
 8013ef4:	2000      	movs	r0, #0
 8013ef6:	f04f 0c0a 	mov.w	ip, #10
 8013efa:	4621      	mov	r1, r4
 8013efc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f00:	3b30      	subs	r3, #48	; 0x30
 8013f02:	2b09      	cmp	r3, #9
 8013f04:	d94e      	bls.n	8013fa4 <_vfiprintf_r+0x1c4>
 8013f06:	b1b0      	cbz	r0, 8013f36 <_vfiprintf_r+0x156>
 8013f08:	9207      	str	r2, [sp, #28]
 8013f0a:	e014      	b.n	8013f36 <_vfiprintf_r+0x156>
 8013f0c:	eba0 0308 	sub.w	r3, r0, r8
 8013f10:	fa09 f303 	lsl.w	r3, r9, r3
 8013f14:	4313      	orrs	r3, r2
 8013f16:	9304      	str	r3, [sp, #16]
 8013f18:	46a2      	mov	sl, r4
 8013f1a:	e7d2      	b.n	8013ec2 <_vfiprintf_r+0xe2>
 8013f1c:	9b03      	ldr	r3, [sp, #12]
 8013f1e:	1d19      	adds	r1, r3, #4
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	9103      	str	r1, [sp, #12]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	bfbb      	ittet	lt
 8013f28:	425b      	neglt	r3, r3
 8013f2a:	f042 0202 	orrlt.w	r2, r2, #2
 8013f2e:	9307      	strge	r3, [sp, #28]
 8013f30:	9307      	strlt	r3, [sp, #28]
 8013f32:	bfb8      	it	lt
 8013f34:	9204      	strlt	r2, [sp, #16]
 8013f36:	7823      	ldrb	r3, [r4, #0]
 8013f38:	2b2e      	cmp	r3, #46	; 0x2e
 8013f3a:	d10c      	bne.n	8013f56 <_vfiprintf_r+0x176>
 8013f3c:	7863      	ldrb	r3, [r4, #1]
 8013f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8013f40:	d135      	bne.n	8013fae <_vfiprintf_r+0x1ce>
 8013f42:	9b03      	ldr	r3, [sp, #12]
 8013f44:	1d1a      	adds	r2, r3, #4
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	9203      	str	r2, [sp, #12]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	bfb8      	it	lt
 8013f4e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013f52:	3402      	adds	r4, #2
 8013f54:	9305      	str	r3, [sp, #20]
 8013f56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801403c <_vfiprintf_r+0x25c>
 8013f5a:	7821      	ldrb	r1, [r4, #0]
 8013f5c:	2203      	movs	r2, #3
 8013f5e:	4650      	mov	r0, sl
 8013f60:	f7ec f93e 	bl	80001e0 <memchr>
 8013f64:	b140      	cbz	r0, 8013f78 <_vfiprintf_r+0x198>
 8013f66:	2340      	movs	r3, #64	; 0x40
 8013f68:	eba0 000a 	sub.w	r0, r0, sl
 8013f6c:	fa03 f000 	lsl.w	r0, r3, r0
 8013f70:	9b04      	ldr	r3, [sp, #16]
 8013f72:	4303      	orrs	r3, r0
 8013f74:	3401      	adds	r4, #1
 8013f76:	9304      	str	r3, [sp, #16]
 8013f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f7c:	482c      	ldr	r0, [pc, #176]	; (8014030 <_vfiprintf_r+0x250>)
 8013f7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f82:	2206      	movs	r2, #6
 8013f84:	f7ec f92c 	bl	80001e0 <memchr>
 8013f88:	2800      	cmp	r0, #0
 8013f8a:	d03f      	beq.n	801400c <_vfiprintf_r+0x22c>
 8013f8c:	4b29      	ldr	r3, [pc, #164]	; (8014034 <_vfiprintf_r+0x254>)
 8013f8e:	bb1b      	cbnz	r3, 8013fd8 <_vfiprintf_r+0x1f8>
 8013f90:	9b03      	ldr	r3, [sp, #12]
 8013f92:	3307      	adds	r3, #7
 8013f94:	f023 0307 	bic.w	r3, r3, #7
 8013f98:	3308      	adds	r3, #8
 8013f9a:	9303      	str	r3, [sp, #12]
 8013f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f9e:	443b      	add	r3, r7
 8013fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8013fa2:	e767      	b.n	8013e74 <_vfiprintf_r+0x94>
 8013fa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8013fa8:	460c      	mov	r4, r1
 8013faa:	2001      	movs	r0, #1
 8013fac:	e7a5      	b.n	8013efa <_vfiprintf_r+0x11a>
 8013fae:	2300      	movs	r3, #0
 8013fb0:	3401      	adds	r4, #1
 8013fb2:	9305      	str	r3, [sp, #20]
 8013fb4:	4619      	mov	r1, r3
 8013fb6:	f04f 0c0a 	mov.w	ip, #10
 8013fba:	4620      	mov	r0, r4
 8013fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013fc0:	3a30      	subs	r2, #48	; 0x30
 8013fc2:	2a09      	cmp	r2, #9
 8013fc4:	d903      	bls.n	8013fce <_vfiprintf_r+0x1ee>
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d0c5      	beq.n	8013f56 <_vfiprintf_r+0x176>
 8013fca:	9105      	str	r1, [sp, #20]
 8013fcc:	e7c3      	b.n	8013f56 <_vfiprintf_r+0x176>
 8013fce:	fb0c 2101 	mla	r1, ip, r1, r2
 8013fd2:	4604      	mov	r4, r0
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	e7f0      	b.n	8013fba <_vfiprintf_r+0x1da>
 8013fd8:	ab03      	add	r3, sp, #12
 8013fda:	9300      	str	r3, [sp, #0]
 8013fdc:	462a      	mov	r2, r5
 8013fde:	4b16      	ldr	r3, [pc, #88]	; (8014038 <_vfiprintf_r+0x258>)
 8013fe0:	a904      	add	r1, sp, #16
 8013fe2:	4630      	mov	r0, r6
 8013fe4:	f7fc f84a 	bl	801007c <_printf_float>
 8013fe8:	4607      	mov	r7, r0
 8013fea:	1c78      	adds	r0, r7, #1
 8013fec:	d1d6      	bne.n	8013f9c <_vfiprintf_r+0x1bc>
 8013fee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ff0:	07d9      	lsls	r1, r3, #31
 8013ff2:	d405      	bmi.n	8014000 <_vfiprintf_r+0x220>
 8013ff4:	89ab      	ldrh	r3, [r5, #12]
 8013ff6:	059a      	lsls	r2, r3, #22
 8013ff8:	d402      	bmi.n	8014000 <_vfiprintf_r+0x220>
 8013ffa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013ffc:	f000 faa1 	bl	8014542 <__retarget_lock_release_recursive>
 8014000:	89ab      	ldrh	r3, [r5, #12]
 8014002:	065b      	lsls	r3, r3, #25
 8014004:	f53f af12 	bmi.w	8013e2c <_vfiprintf_r+0x4c>
 8014008:	9809      	ldr	r0, [sp, #36]	; 0x24
 801400a:	e711      	b.n	8013e30 <_vfiprintf_r+0x50>
 801400c:	ab03      	add	r3, sp, #12
 801400e:	9300      	str	r3, [sp, #0]
 8014010:	462a      	mov	r2, r5
 8014012:	4b09      	ldr	r3, [pc, #36]	; (8014038 <_vfiprintf_r+0x258>)
 8014014:	a904      	add	r1, sp, #16
 8014016:	4630      	mov	r0, r6
 8014018:	f7fc fad4 	bl	80105c4 <_printf_i>
 801401c:	e7e4      	b.n	8013fe8 <_vfiprintf_r+0x208>
 801401e:	bf00      	nop
 8014020:	08015874 	.word	0x08015874
 8014024:	08015894 	.word	0x08015894
 8014028:	08015854 	.word	0x08015854
 801402c:	08015804 	.word	0x08015804
 8014030:	0801580e 	.word	0x0801580e
 8014034:	0801007d 	.word	0x0801007d
 8014038:	08013dbd 	.word	0x08013dbd
 801403c:	0801580a 	.word	0x0801580a

08014040 <__swbuf_r>:
 8014040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014042:	460e      	mov	r6, r1
 8014044:	4614      	mov	r4, r2
 8014046:	4605      	mov	r5, r0
 8014048:	b118      	cbz	r0, 8014052 <__swbuf_r+0x12>
 801404a:	6983      	ldr	r3, [r0, #24]
 801404c:	b90b      	cbnz	r3, 8014052 <__swbuf_r+0x12>
 801404e:	f000 f9d9 	bl	8014404 <__sinit>
 8014052:	4b21      	ldr	r3, [pc, #132]	; (80140d8 <__swbuf_r+0x98>)
 8014054:	429c      	cmp	r4, r3
 8014056:	d12b      	bne.n	80140b0 <__swbuf_r+0x70>
 8014058:	686c      	ldr	r4, [r5, #4]
 801405a:	69a3      	ldr	r3, [r4, #24]
 801405c:	60a3      	str	r3, [r4, #8]
 801405e:	89a3      	ldrh	r3, [r4, #12]
 8014060:	071a      	lsls	r2, r3, #28
 8014062:	d52f      	bpl.n	80140c4 <__swbuf_r+0x84>
 8014064:	6923      	ldr	r3, [r4, #16]
 8014066:	b36b      	cbz	r3, 80140c4 <__swbuf_r+0x84>
 8014068:	6923      	ldr	r3, [r4, #16]
 801406a:	6820      	ldr	r0, [r4, #0]
 801406c:	1ac0      	subs	r0, r0, r3
 801406e:	6963      	ldr	r3, [r4, #20]
 8014070:	b2f6      	uxtb	r6, r6
 8014072:	4283      	cmp	r3, r0
 8014074:	4637      	mov	r7, r6
 8014076:	dc04      	bgt.n	8014082 <__swbuf_r+0x42>
 8014078:	4621      	mov	r1, r4
 801407a:	4628      	mov	r0, r5
 801407c:	f000 f92e 	bl	80142dc <_fflush_r>
 8014080:	bb30      	cbnz	r0, 80140d0 <__swbuf_r+0x90>
 8014082:	68a3      	ldr	r3, [r4, #8]
 8014084:	3b01      	subs	r3, #1
 8014086:	60a3      	str	r3, [r4, #8]
 8014088:	6823      	ldr	r3, [r4, #0]
 801408a:	1c5a      	adds	r2, r3, #1
 801408c:	6022      	str	r2, [r4, #0]
 801408e:	701e      	strb	r6, [r3, #0]
 8014090:	6963      	ldr	r3, [r4, #20]
 8014092:	3001      	adds	r0, #1
 8014094:	4283      	cmp	r3, r0
 8014096:	d004      	beq.n	80140a2 <__swbuf_r+0x62>
 8014098:	89a3      	ldrh	r3, [r4, #12]
 801409a:	07db      	lsls	r3, r3, #31
 801409c:	d506      	bpl.n	80140ac <__swbuf_r+0x6c>
 801409e:	2e0a      	cmp	r6, #10
 80140a0:	d104      	bne.n	80140ac <__swbuf_r+0x6c>
 80140a2:	4621      	mov	r1, r4
 80140a4:	4628      	mov	r0, r5
 80140a6:	f000 f919 	bl	80142dc <_fflush_r>
 80140aa:	b988      	cbnz	r0, 80140d0 <__swbuf_r+0x90>
 80140ac:	4638      	mov	r0, r7
 80140ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140b0:	4b0a      	ldr	r3, [pc, #40]	; (80140dc <__swbuf_r+0x9c>)
 80140b2:	429c      	cmp	r4, r3
 80140b4:	d101      	bne.n	80140ba <__swbuf_r+0x7a>
 80140b6:	68ac      	ldr	r4, [r5, #8]
 80140b8:	e7cf      	b.n	801405a <__swbuf_r+0x1a>
 80140ba:	4b09      	ldr	r3, [pc, #36]	; (80140e0 <__swbuf_r+0xa0>)
 80140bc:	429c      	cmp	r4, r3
 80140be:	bf08      	it	eq
 80140c0:	68ec      	ldreq	r4, [r5, #12]
 80140c2:	e7ca      	b.n	801405a <__swbuf_r+0x1a>
 80140c4:	4621      	mov	r1, r4
 80140c6:	4628      	mov	r0, r5
 80140c8:	f000 f80c 	bl	80140e4 <__swsetup_r>
 80140cc:	2800      	cmp	r0, #0
 80140ce:	d0cb      	beq.n	8014068 <__swbuf_r+0x28>
 80140d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80140d4:	e7ea      	b.n	80140ac <__swbuf_r+0x6c>
 80140d6:	bf00      	nop
 80140d8:	08015874 	.word	0x08015874
 80140dc:	08015894 	.word	0x08015894
 80140e0:	08015854 	.word	0x08015854

080140e4 <__swsetup_r>:
 80140e4:	4b32      	ldr	r3, [pc, #200]	; (80141b0 <__swsetup_r+0xcc>)
 80140e6:	b570      	push	{r4, r5, r6, lr}
 80140e8:	681d      	ldr	r5, [r3, #0]
 80140ea:	4606      	mov	r6, r0
 80140ec:	460c      	mov	r4, r1
 80140ee:	b125      	cbz	r5, 80140fa <__swsetup_r+0x16>
 80140f0:	69ab      	ldr	r3, [r5, #24]
 80140f2:	b913      	cbnz	r3, 80140fa <__swsetup_r+0x16>
 80140f4:	4628      	mov	r0, r5
 80140f6:	f000 f985 	bl	8014404 <__sinit>
 80140fa:	4b2e      	ldr	r3, [pc, #184]	; (80141b4 <__swsetup_r+0xd0>)
 80140fc:	429c      	cmp	r4, r3
 80140fe:	d10f      	bne.n	8014120 <__swsetup_r+0x3c>
 8014100:	686c      	ldr	r4, [r5, #4]
 8014102:	89a3      	ldrh	r3, [r4, #12]
 8014104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014108:	0719      	lsls	r1, r3, #28
 801410a:	d42c      	bmi.n	8014166 <__swsetup_r+0x82>
 801410c:	06dd      	lsls	r5, r3, #27
 801410e:	d411      	bmi.n	8014134 <__swsetup_r+0x50>
 8014110:	2309      	movs	r3, #9
 8014112:	6033      	str	r3, [r6, #0]
 8014114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014118:	81a3      	strh	r3, [r4, #12]
 801411a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801411e:	e03e      	b.n	801419e <__swsetup_r+0xba>
 8014120:	4b25      	ldr	r3, [pc, #148]	; (80141b8 <__swsetup_r+0xd4>)
 8014122:	429c      	cmp	r4, r3
 8014124:	d101      	bne.n	801412a <__swsetup_r+0x46>
 8014126:	68ac      	ldr	r4, [r5, #8]
 8014128:	e7eb      	b.n	8014102 <__swsetup_r+0x1e>
 801412a:	4b24      	ldr	r3, [pc, #144]	; (80141bc <__swsetup_r+0xd8>)
 801412c:	429c      	cmp	r4, r3
 801412e:	bf08      	it	eq
 8014130:	68ec      	ldreq	r4, [r5, #12]
 8014132:	e7e6      	b.n	8014102 <__swsetup_r+0x1e>
 8014134:	0758      	lsls	r0, r3, #29
 8014136:	d512      	bpl.n	801415e <__swsetup_r+0x7a>
 8014138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801413a:	b141      	cbz	r1, 801414e <__swsetup_r+0x6a>
 801413c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014140:	4299      	cmp	r1, r3
 8014142:	d002      	beq.n	801414a <__swsetup_r+0x66>
 8014144:	4630      	mov	r0, r6
 8014146:	f7ff fb27 	bl	8013798 <_free_r>
 801414a:	2300      	movs	r3, #0
 801414c:	6363      	str	r3, [r4, #52]	; 0x34
 801414e:	89a3      	ldrh	r3, [r4, #12]
 8014150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014154:	81a3      	strh	r3, [r4, #12]
 8014156:	2300      	movs	r3, #0
 8014158:	6063      	str	r3, [r4, #4]
 801415a:	6923      	ldr	r3, [r4, #16]
 801415c:	6023      	str	r3, [r4, #0]
 801415e:	89a3      	ldrh	r3, [r4, #12]
 8014160:	f043 0308 	orr.w	r3, r3, #8
 8014164:	81a3      	strh	r3, [r4, #12]
 8014166:	6923      	ldr	r3, [r4, #16]
 8014168:	b94b      	cbnz	r3, 801417e <__swsetup_r+0x9a>
 801416a:	89a3      	ldrh	r3, [r4, #12]
 801416c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014174:	d003      	beq.n	801417e <__swsetup_r+0x9a>
 8014176:	4621      	mov	r1, r4
 8014178:	4630      	mov	r0, r6
 801417a:	f000 fa09 	bl	8014590 <__smakebuf_r>
 801417e:	89a0      	ldrh	r0, [r4, #12]
 8014180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014184:	f010 0301 	ands.w	r3, r0, #1
 8014188:	d00a      	beq.n	80141a0 <__swsetup_r+0xbc>
 801418a:	2300      	movs	r3, #0
 801418c:	60a3      	str	r3, [r4, #8]
 801418e:	6963      	ldr	r3, [r4, #20]
 8014190:	425b      	negs	r3, r3
 8014192:	61a3      	str	r3, [r4, #24]
 8014194:	6923      	ldr	r3, [r4, #16]
 8014196:	b943      	cbnz	r3, 80141aa <__swsetup_r+0xc6>
 8014198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801419c:	d1ba      	bne.n	8014114 <__swsetup_r+0x30>
 801419e:	bd70      	pop	{r4, r5, r6, pc}
 80141a0:	0781      	lsls	r1, r0, #30
 80141a2:	bf58      	it	pl
 80141a4:	6963      	ldrpl	r3, [r4, #20]
 80141a6:	60a3      	str	r3, [r4, #8]
 80141a8:	e7f4      	b.n	8014194 <__swsetup_r+0xb0>
 80141aa:	2000      	movs	r0, #0
 80141ac:	e7f7      	b.n	801419e <__swsetup_r+0xba>
 80141ae:	bf00      	nop
 80141b0:	20000014 	.word	0x20000014
 80141b4:	08015874 	.word	0x08015874
 80141b8:	08015894 	.word	0x08015894
 80141bc:	08015854 	.word	0x08015854

080141c0 <abort>:
 80141c0:	b508      	push	{r3, lr}
 80141c2:	2006      	movs	r0, #6
 80141c4:	f000 fa54 	bl	8014670 <raise>
 80141c8:	2001      	movs	r0, #1
 80141ca:	f7f2 fe21 	bl	8006e10 <_exit>
	...

080141d0 <__sflush_r>:
 80141d0:	898a      	ldrh	r2, [r1, #12]
 80141d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141d6:	4605      	mov	r5, r0
 80141d8:	0710      	lsls	r0, r2, #28
 80141da:	460c      	mov	r4, r1
 80141dc:	d458      	bmi.n	8014290 <__sflush_r+0xc0>
 80141de:	684b      	ldr	r3, [r1, #4]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	dc05      	bgt.n	80141f0 <__sflush_r+0x20>
 80141e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	dc02      	bgt.n	80141f0 <__sflush_r+0x20>
 80141ea:	2000      	movs	r0, #0
 80141ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80141f2:	2e00      	cmp	r6, #0
 80141f4:	d0f9      	beq.n	80141ea <__sflush_r+0x1a>
 80141f6:	2300      	movs	r3, #0
 80141f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80141fc:	682f      	ldr	r7, [r5, #0]
 80141fe:	602b      	str	r3, [r5, #0]
 8014200:	d032      	beq.n	8014268 <__sflush_r+0x98>
 8014202:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014204:	89a3      	ldrh	r3, [r4, #12]
 8014206:	075a      	lsls	r2, r3, #29
 8014208:	d505      	bpl.n	8014216 <__sflush_r+0x46>
 801420a:	6863      	ldr	r3, [r4, #4]
 801420c:	1ac0      	subs	r0, r0, r3
 801420e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014210:	b10b      	cbz	r3, 8014216 <__sflush_r+0x46>
 8014212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014214:	1ac0      	subs	r0, r0, r3
 8014216:	2300      	movs	r3, #0
 8014218:	4602      	mov	r2, r0
 801421a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801421c:	6a21      	ldr	r1, [r4, #32]
 801421e:	4628      	mov	r0, r5
 8014220:	47b0      	blx	r6
 8014222:	1c43      	adds	r3, r0, #1
 8014224:	89a3      	ldrh	r3, [r4, #12]
 8014226:	d106      	bne.n	8014236 <__sflush_r+0x66>
 8014228:	6829      	ldr	r1, [r5, #0]
 801422a:	291d      	cmp	r1, #29
 801422c:	d82c      	bhi.n	8014288 <__sflush_r+0xb8>
 801422e:	4a2a      	ldr	r2, [pc, #168]	; (80142d8 <__sflush_r+0x108>)
 8014230:	40ca      	lsrs	r2, r1
 8014232:	07d6      	lsls	r6, r2, #31
 8014234:	d528      	bpl.n	8014288 <__sflush_r+0xb8>
 8014236:	2200      	movs	r2, #0
 8014238:	6062      	str	r2, [r4, #4]
 801423a:	04d9      	lsls	r1, r3, #19
 801423c:	6922      	ldr	r2, [r4, #16]
 801423e:	6022      	str	r2, [r4, #0]
 8014240:	d504      	bpl.n	801424c <__sflush_r+0x7c>
 8014242:	1c42      	adds	r2, r0, #1
 8014244:	d101      	bne.n	801424a <__sflush_r+0x7a>
 8014246:	682b      	ldr	r3, [r5, #0]
 8014248:	b903      	cbnz	r3, 801424c <__sflush_r+0x7c>
 801424a:	6560      	str	r0, [r4, #84]	; 0x54
 801424c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801424e:	602f      	str	r7, [r5, #0]
 8014250:	2900      	cmp	r1, #0
 8014252:	d0ca      	beq.n	80141ea <__sflush_r+0x1a>
 8014254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014258:	4299      	cmp	r1, r3
 801425a:	d002      	beq.n	8014262 <__sflush_r+0x92>
 801425c:	4628      	mov	r0, r5
 801425e:	f7ff fa9b 	bl	8013798 <_free_r>
 8014262:	2000      	movs	r0, #0
 8014264:	6360      	str	r0, [r4, #52]	; 0x34
 8014266:	e7c1      	b.n	80141ec <__sflush_r+0x1c>
 8014268:	6a21      	ldr	r1, [r4, #32]
 801426a:	2301      	movs	r3, #1
 801426c:	4628      	mov	r0, r5
 801426e:	47b0      	blx	r6
 8014270:	1c41      	adds	r1, r0, #1
 8014272:	d1c7      	bne.n	8014204 <__sflush_r+0x34>
 8014274:	682b      	ldr	r3, [r5, #0]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d0c4      	beq.n	8014204 <__sflush_r+0x34>
 801427a:	2b1d      	cmp	r3, #29
 801427c:	d001      	beq.n	8014282 <__sflush_r+0xb2>
 801427e:	2b16      	cmp	r3, #22
 8014280:	d101      	bne.n	8014286 <__sflush_r+0xb6>
 8014282:	602f      	str	r7, [r5, #0]
 8014284:	e7b1      	b.n	80141ea <__sflush_r+0x1a>
 8014286:	89a3      	ldrh	r3, [r4, #12]
 8014288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801428c:	81a3      	strh	r3, [r4, #12]
 801428e:	e7ad      	b.n	80141ec <__sflush_r+0x1c>
 8014290:	690f      	ldr	r7, [r1, #16]
 8014292:	2f00      	cmp	r7, #0
 8014294:	d0a9      	beq.n	80141ea <__sflush_r+0x1a>
 8014296:	0793      	lsls	r3, r2, #30
 8014298:	680e      	ldr	r6, [r1, #0]
 801429a:	bf08      	it	eq
 801429c:	694b      	ldreq	r3, [r1, #20]
 801429e:	600f      	str	r7, [r1, #0]
 80142a0:	bf18      	it	ne
 80142a2:	2300      	movne	r3, #0
 80142a4:	eba6 0807 	sub.w	r8, r6, r7
 80142a8:	608b      	str	r3, [r1, #8]
 80142aa:	f1b8 0f00 	cmp.w	r8, #0
 80142ae:	dd9c      	ble.n	80141ea <__sflush_r+0x1a>
 80142b0:	6a21      	ldr	r1, [r4, #32]
 80142b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80142b4:	4643      	mov	r3, r8
 80142b6:	463a      	mov	r2, r7
 80142b8:	4628      	mov	r0, r5
 80142ba:	47b0      	blx	r6
 80142bc:	2800      	cmp	r0, #0
 80142be:	dc06      	bgt.n	80142ce <__sflush_r+0xfe>
 80142c0:	89a3      	ldrh	r3, [r4, #12]
 80142c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142c6:	81a3      	strh	r3, [r4, #12]
 80142c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80142cc:	e78e      	b.n	80141ec <__sflush_r+0x1c>
 80142ce:	4407      	add	r7, r0
 80142d0:	eba8 0800 	sub.w	r8, r8, r0
 80142d4:	e7e9      	b.n	80142aa <__sflush_r+0xda>
 80142d6:	bf00      	nop
 80142d8:	20400001 	.word	0x20400001

080142dc <_fflush_r>:
 80142dc:	b538      	push	{r3, r4, r5, lr}
 80142de:	690b      	ldr	r3, [r1, #16]
 80142e0:	4605      	mov	r5, r0
 80142e2:	460c      	mov	r4, r1
 80142e4:	b913      	cbnz	r3, 80142ec <_fflush_r+0x10>
 80142e6:	2500      	movs	r5, #0
 80142e8:	4628      	mov	r0, r5
 80142ea:	bd38      	pop	{r3, r4, r5, pc}
 80142ec:	b118      	cbz	r0, 80142f6 <_fflush_r+0x1a>
 80142ee:	6983      	ldr	r3, [r0, #24]
 80142f0:	b90b      	cbnz	r3, 80142f6 <_fflush_r+0x1a>
 80142f2:	f000 f887 	bl	8014404 <__sinit>
 80142f6:	4b14      	ldr	r3, [pc, #80]	; (8014348 <_fflush_r+0x6c>)
 80142f8:	429c      	cmp	r4, r3
 80142fa:	d11b      	bne.n	8014334 <_fflush_r+0x58>
 80142fc:	686c      	ldr	r4, [r5, #4]
 80142fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d0ef      	beq.n	80142e6 <_fflush_r+0xa>
 8014306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014308:	07d0      	lsls	r0, r2, #31
 801430a:	d404      	bmi.n	8014316 <_fflush_r+0x3a>
 801430c:	0599      	lsls	r1, r3, #22
 801430e:	d402      	bmi.n	8014316 <_fflush_r+0x3a>
 8014310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014312:	f000 f915 	bl	8014540 <__retarget_lock_acquire_recursive>
 8014316:	4628      	mov	r0, r5
 8014318:	4621      	mov	r1, r4
 801431a:	f7ff ff59 	bl	80141d0 <__sflush_r>
 801431e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014320:	07da      	lsls	r2, r3, #31
 8014322:	4605      	mov	r5, r0
 8014324:	d4e0      	bmi.n	80142e8 <_fflush_r+0xc>
 8014326:	89a3      	ldrh	r3, [r4, #12]
 8014328:	059b      	lsls	r3, r3, #22
 801432a:	d4dd      	bmi.n	80142e8 <_fflush_r+0xc>
 801432c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801432e:	f000 f908 	bl	8014542 <__retarget_lock_release_recursive>
 8014332:	e7d9      	b.n	80142e8 <_fflush_r+0xc>
 8014334:	4b05      	ldr	r3, [pc, #20]	; (801434c <_fflush_r+0x70>)
 8014336:	429c      	cmp	r4, r3
 8014338:	d101      	bne.n	801433e <_fflush_r+0x62>
 801433a:	68ac      	ldr	r4, [r5, #8]
 801433c:	e7df      	b.n	80142fe <_fflush_r+0x22>
 801433e:	4b04      	ldr	r3, [pc, #16]	; (8014350 <_fflush_r+0x74>)
 8014340:	429c      	cmp	r4, r3
 8014342:	bf08      	it	eq
 8014344:	68ec      	ldreq	r4, [r5, #12]
 8014346:	e7da      	b.n	80142fe <_fflush_r+0x22>
 8014348:	08015874 	.word	0x08015874
 801434c:	08015894 	.word	0x08015894
 8014350:	08015854 	.word	0x08015854

08014354 <std>:
 8014354:	2300      	movs	r3, #0
 8014356:	b510      	push	{r4, lr}
 8014358:	4604      	mov	r4, r0
 801435a:	e9c0 3300 	strd	r3, r3, [r0]
 801435e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014362:	6083      	str	r3, [r0, #8]
 8014364:	8181      	strh	r1, [r0, #12]
 8014366:	6643      	str	r3, [r0, #100]	; 0x64
 8014368:	81c2      	strh	r2, [r0, #14]
 801436a:	6183      	str	r3, [r0, #24]
 801436c:	4619      	mov	r1, r3
 801436e:	2208      	movs	r2, #8
 8014370:	305c      	adds	r0, #92	; 0x5c
 8014372:	f7fb fddb 	bl	800ff2c <memset>
 8014376:	4b05      	ldr	r3, [pc, #20]	; (801438c <std+0x38>)
 8014378:	6263      	str	r3, [r4, #36]	; 0x24
 801437a:	4b05      	ldr	r3, [pc, #20]	; (8014390 <std+0x3c>)
 801437c:	62a3      	str	r3, [r4, #40]	; 0x28
 801437e:	4b05      	ldr	r3, [pc, #20]	; (8014394 <std+0x40>)
 8014380:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014382:	4b05      	ldr	r3, [pc, #20]	; (8014398 <std+0x44>)
 8014384:	6224      	str	r4, [r4, #32]
 8014386:	6323      	str	r3, [r4, #48]	; 0x30
 8014388:	bd10      	pop	{r4, pc}
 801438a:	bf00      	nop
 801438c:	080146a9 	.word	0x080146a9
 8014390:	080146cb 	.word	0x080146cb
 8014394:	08014703 	.word	0x08014703
 8014398:	08014727 	.word	0x08014727

0801439c <_cleanup_r>:
 801439c:	4901      	ldr	r1, [pc, #4]	; (80143a4 <_cleanup_r+0x8>)
 801439e:	f000 b8af 	b.w	8014500 <_fwalk_reent>
 80143a2:	bf00      	nop
 80143a4:	080142dd 	.word	0x080142dd

080143a8 <__sfmoreglue>:
 80143a8:	b570      	push	{r4, r5, r6, lr}
 80143aa:	2268      	movs	r2, #104	; 0x68
 80143ac:	1e4d      	subs	r5, r1, #1
 80143ae:	4355      	muls	r5, r2
 80143b0:	460e      	mov	r6, r1
 80143b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80143b6:	f7ff fa5b 	bl	8013870 <_malloc_r>
 80143ba:	4604      	mov	r4, r0
 80143bc:	b140      	cbz	r0, 80143d0 <__sfmoreglue+0x28>
 80143be:	2100      	movs	r1, #0
 80143c0:	e9c0 1600 	strd	r1, r6, [r0]
 80143c4:	300c      	adds	r0, #12
 80143c6:	60a0      	str	r0, [r4, #8]
 80143c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80143cc:	f7fb fdae 	bl	800ff2c <memset>
 80143d0:	4620      	mov	r0, r4
 80143d2:	bd70      	pop	{r4, r5, r6, pc}

080143d4 <__sfp_lock_acquire>:
 80143d4:	4801      	ldr	r0, [pc, #4]	; (80143dc <__sfp_lock_acquire+0x8>)
 80143d6:	f000 b8b3 	b.w	8014540 <__retarget_lock_acquire_recursive>
 80143da:	bf00      	nop
 80143dc:	200063c9 	.word	0x200063c9

080143e0 <__sfp_lock_release>:
 80143e0:	4801      	ldr	r0, [pc, #4]	; (80143e8 <__sfp_lock_release+0x8>)
 80143e2:	f000 b8ae 	b.w	8014542 <__retarget_lock_release_recursive>
 80143e6:	bf00      	nop
 80143e8:	200063c9 	.word	0x200063c9

080143ec <__sinit_lock_acquire>:
 80143ec:	4801      	ldr	r0, [pc, #4]	; (80143f4 <__sinit_lock_acquire+0x8>)
 80143ee:	f000 b8a7 	b.w	8014540 <__retarget_lock_acquire_recursive>
 80143f2:	bf00      	nop
 80143f4:	200063ca 	.word	0x200063ca

080143f8 <__sinit_lock_release>:
 80143f8:	4801      	ldr	r0, [pc, #4]	; (8014400 <__sinit_lock_release+0x8>)
 80143fa:	f000 b8a2 	b.w	8014542 <__retarget_lock_release_recursive>
 80143fe:	bf00      	nop
 8014400:	200063ca 	.word	0x200063ca

08014404 <__sinit>:
 8014404:	b510      	push	{r4, lr}
 8014406:	4604      	mov	r4, r0
 8014408:	f7ff fff0 	bl	80143ec <__sinit_lock_acquire>
 801440c:	69a3      	ldr	r3, [r4, #24]
 801440e:	b11b      	cbz	r3, 8014418 <__sinit+0x14>
 8014410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014414:	f7ff bff0 	b.w	80143f8 <__sinit_lock_release>
 8014418:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801441c:	6523      	str	r3, [r4, #80]	; 0x50
 801441e:	4b13      	ldr	r3, [pc, #76]	; (801446c <__sinit+0x68>)
 8014420:	4a13      	ldr	r2, [pc, #76]	; (8014470 <__sinit+0x6c>)
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	62a2      	str	r2, [r4, #40]	; 0x28
 8014426:	42a3      	cmp	r3, r4
 8014428:	bf04      	itt	eq
 801442a:	2301      	moveq	r3, #1
 801442c:	61a3      	streq	r3, [r4, #24]
 801442e:	4620      	mov	r0, r4
 8014430:	f000 f820 	bl	8014474 <__sfp>
 8014434:	6060      	str	r0, [r4, #4]
 8014436:	4620      	mov	r0, r4
 8014438:	f000 f81c 	bl	8014474 <__sfp>
 801443c:	60a0      	str	r0, [r4, #8]
 801443e:	4620      	mov	r0, r4
 8014440:	f000 f818 	bl	8014474 <__sfp>
 8014444:	2200      	movs	r2, #0
 8014446:	60e0      	str	r0, [r4, #12]
 8014448:	2104      	movs	r1, #4
 801444a:	6860      	ldr	r0, [r4, #4]
 801444c:	f7ff ff82 	bl	8014354 <std>
 8014450:	68a0      	ldr	r0, [r4, #8]
 8014452:	2201      	movs	r2, #1
 8014454:	2109      	movs	r1, #9
 8014456:	f7ff ff7d 	bl	8014354 <std>
 801445a:	68e0      	ldr	r0, [r4, #12]
 801445c:	2202      	movs	r2, #2
 801445e:	2112      	movs	r1, #18
 8014460:	f7ff ff78 	bl	8014354 <std>
 8014464:	2301      	movs	r3, #1
 8014466:	61a3      	str	r3, [r4, #24]
 8014468:	e7d2      	b.n	8014410 <__sinit+0xc>
 801446a:	bf00      	nop
 801446c:	08015410 	.word	0x08015410
 8014470:	0801439d 	.word	0x0801439d

08014474 <__sfp>:
 8014474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014476:	4607      	mov	r7, r0
 8014478:	f7ff ffac 	bl	80143d4 <__sfp_lock_acquire>
 801447c:	4b1e      	ldr	r3, [pc, #120]	; (80144f8 <__sfp+0x84>)
 801447e:	681e      	ldr	r6, [r3, #0]
 8014480:	69b3      	ldr	r3, [r6, #24]
 8014482:	b913      	cbnz	r3, 801448a <__sfp+0x16>
 8014484:	4630      	mov	r0, r6
 8014486:	f7ff ffbd 	bl	8014404 <__sinit>
 801448a:	3648      	adds	r6, #72	; 0x48
 801448c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014490:	3b01      	subs	r3, #1
 8014492:	d503      	bpl.n	801449c <__sfp+0x28>
 8014494:	6833      	ldr	r3, [r6, #0]
 8014496:	b30b      	cbz	r3, 80144dc <__sfp+0x68>
 8014498:	6836      	ldr	r6, [r6, #0]
 801449a:	e7f7      	b.n	801448c <__sfp+0x18>
 801449c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80144a0:	b9d5      	cbnz	r5, 80144d8 <__sfp+0x64>
 80144a2:	4b16      	ldr	r3, [pc, #88]	; (80144fc <__sfp+0x88>)
 80144a4:	60e3      	str	r3, [r4, #12]
 80144a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80144aa:	6665      	str	r5, [r4, #100]	; 0x64
 80144ac:	f000 f847 	bl	801453e <__retarget_lock_init_recursive>
 80144b0:	f7ff ff96 	bl	80143e0 <__sfp_lock_release>
 80144b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80144b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80144bc:	6025      	str	r5, [r4, #0]
 80144be:	61a5      	str	r5, [r4, #24]
 80144c0:	2208      	movs	r2, #8
 80144c2:	4629      	mov	r1, r5
 80144c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80144c8:	f7fb fd30 	bl	800ff2c <memset>
 80144cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80144d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80144d4:	4620      	mov	r0, r4
 80144d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144d8:	3468      	adds	r4, #104	; 0x68
 80144da:	e7d9      	b.n	8014490 <__sfp+0x1c>
 80144dc:	2104      	movs	r1, #4
 80144de:	4638      	mov	r0, r7
 80144e0:	f7ff ff62 	bl	80143a8 <__sfmoreglue>
 80144e4:	4604      	mov	r4, r0
 80144e6:	6030      	str	r0, [r6, #0]
 80144e8:	2800      	cmp	r0, #0
 80144ea:	d1d5      	bne.n	8014498 <__sfp+0x24>
 80144ec:	f7ff ff78 	bl	80143e0 <__sfp_lock_release>
 80144f0:	230c      	movs	r3, #12
 80144f2:	603b      	str	r3, [r7, #0]
 80144f4:	e7ee      	b.n	80144d4 <__sfp+0x60>
 80144f6:	bf00      	nop
 80144f8:	08015410 	.word	0x08015410
 80144fc:	ffff0001 	.word	0xffff0001

08014500 <_fwalk_reent>:
 8014500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014504:	4606      	mov	r6, r0
 8014506:	4688      	mov	r8, r1
 8014508:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801450c:	2700      	movs	r7, #0
 801450e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014512:	f1b9 0901 	subs.w	r9, r9, #1
 8014516:	d505      	bpl.n	8014524 <_fwalk_reent+0x24>
 8014518:	6824      	ldr	r4, [r4, #0]
 801451a:	2c00      	cmp	r4, #0
 801451c:	d1f7      	bne.n	801450e <_fwalk_reent+0xe>
 801451e:	4638      	mov	r0, r7
 8014520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014524:	89ab      	ldrh	r3, [r5, #12]
 8014526:	2b01      	cmp	r3, #1
 8014528:	d907      	bls.n	801453a <_fwalk_reent+0x3a>
 801452a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801452e:	3301      	adds	r3, #1
 8014530:	d003      	beq.n	801453a <_fwalk_reent+0x3a>
 8014532:	4629      	mov	r1, r5
 8014534:	4630      	mov	r0, r6
 8014536:	47c0      	blx	r8
 8014538:	4307      	orrs	r7, r0
 801453a:	3568      	adds	r5, #104	; 0x68
 801453c:	e7e9      	b.n	8014512 <_fwalk_reent+0x12>

0801453e <__retarget_lock_init_recursive>:
 801453e:	4770      	bx	lr

08014540 <__retarget_lock_acquire_recursive>:
 8014540:	4770      	bx	lr

08014542 <__retarget_lock_release_recursive>:
 8014542:	4770      	bx	lr

08014544 <__swhatbuf_r>:
 8014544:	b570      	push	{r4, r5, r6, lr}
 8014546:	460e      	mov	r6, r1
 8014548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801454c:	2900      	cmp	r1, #0
 801454e:	b096      	sub	sp, #88	; 0x58
 8014550:	4614      	mov	r4, r2
 8014552:	461d      	mov	r5, r3
 8014554:	da08      	bge.n	8014568 <__swhatbuf_r+0x24>
 8014556:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801455a:	2200      	movs	r2, #0
 801455c:	602a      	str	r2, [r5, #0]
 801455e:	061a      	lsls	r2, r3, #24
 8014560:	d410      	bmi.n	8014584 <__swhatbuf_r+0x40>
 8014562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014566:	e00e      	b.n	8014586 <__swhatbuf_r+0x42>
 8014568:	466a      	mov	r2, sp
 801456a:	f000 f903 	bl	8014774 <_fstat_r>
 801456e:	2800      	cmp	r0, #0
 8014570:	dbf1      	blt.n	8014556 <__swhatbuf_r+0x12>
 8014572:	9a01      	ldr	r2, [sp, #4]
 8014574:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014578:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801457c:	425a      	negs	r2, r3
 801457e:	415a      	adcs	r2, r3
 8014580:	602a      	str	r2, [r5, #0]
 8014582:	e7ee      	b.n	8014562 <__swhatbuf_r+0x1e>
 8014584:	2340      	movs	r3, #64	; 0x40
 8014586:	2000      	movs	r0, #0
 8014588:	6023      	str	r3, [r4, #0]
 801458a:	b016      	add	sp, #88	; 0x58
 801458c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014590 <__smakebuf_r>:
 8014590:	898b      	ldrh	r3, [r1, #12]
 8014592:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014594:	079d      	lsls	r5, r3, #30
 8014596:	4606      	mov	r6, r0
 8014598:	460c      	mov	r4, r1
 801459a:	d507      	bpl.n	80145ac <__smakebuf_r+0x1c>
 801459c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80145a0:	6023      	str	r3, [r4, #0]
 80145a2:	6123      	str	r3, [r4, #16]
 80145a4:	2301      	movs	r3, #1
 80145a6:	6163      	str	r3, [r4, #20]
 80145a8:	b002      	add	sp, #8
 80145aa:	bd70      	pop	{r4, r5, r6, pc}
 80145ac:	ab01      	add	r3, sp, #4
 80145ae:	466a      	mov	r2, sp
 80145b0:	f7ff ffc8 	bl	8014544 <__swhatbuf_r>
 80145b4:	9900      	ldr	r1, [sp, #0]
 80145b6:	4605      	mov	r5, r0
 80145b8:	4630      	mov	r0, r6
 80145ba:	f7ff f959 	bl	8013870 <_malloc_r>
 80145be:	b948      	cbnz	r0, 80145d4 <__smakebuf_r+0x44>
 80145c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145c4:	059a      	lsls	r2, r3, #22
 80145c6:	d4ef      	bmi.n	80145a8 <__smakebuf_r+0x18>
 80145c8:	f023 0303 	bic.w	r3, r3, #3
 80145cc:	f043 0302 	orr.w	r3, r3, #2
 80145d0:	81a3      	strh	r3, [r4, #12]
 80145d2:	e7e3      	b.n	801459c <__smakebuf_r+0xc>
 80145d4:	4b0d      	ldr	r3, [pc, #52]	; (801460c <__smakebuf_r+0x7c>)
 80145d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80145d8:	89a3      	ldrh	r3, [r4, #12]
 80145da:	6020      	str	r0, [r4, #0]
 80145dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145e0:	81a3      	strh	r3, [r4, #12]
 80145e2:	9b00      	ldr	r3, [sp, #0]
 80145e4:	6163      	str	r3, [r4, #20]
 80145e6:	9b01      	ldr	r3, [sp, #4]
 80145e8:	6120      	str	r0, [r4, #16]
 80145ea:	b15b      	cbz	r3, 8014604 <__smakebuf_r+0x74>
 80145ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145f0:	4630      	mov	r0, r6
 80145f2:	f000 f8d1 	bl	8014798 <_isatty_r>
 80145f6:	b128      	cbz	r0, 8014604 <__smakebuf_r+0x74>
 80145f8:	89a3      	ldrh	r3, [r4, #12]
 80145fa:	f023 0303 	bic.w	r3, r3, #3
 80145fe:	f043 0301 	orr.w	r3, r3, #1
 8014602:	81a3      	strh	r3, [r4, #12]
 8014604:	89a0      	ldrh	r0, [r4, #12]
 8014606:	4305      	orrs	r5, r0
 8014608:	81a5      	strh	r5, [r4, #12]
 801460a:	e7cd      	b.n	80145a8 <__smakebuf_r+0x18>
 801460c:	0801439d 	.word	0x0801439d

08014610 <_malloc_usable_size_r>:
 8014610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014614:	1f18      	subs	r0, r3, #4
 8014616:	2b00      	cmp	r3, #0
 8014618:	bfbc      	itt	lt
 801461a:	580b      	ldrlt	r3, [r1, r0]
 801461c:	18c0      	addlt	r0, r0, r3
 801461e:	4770      	bx	lr

08014620 <_raise_r>:
 8014620:	291f      	cmp	r1, #31
 8014622:	b538      	push	{r3, r4, r5, lr}
 8014624:	4604      	mov	r4, r0
 8014626:	460d      	mov	r5, r1
 8014628:	d904      	bls.n	8014634 <_raise_r+0x14>
 801462a:	2316      	movs	r3, #22
 801462c:	6003      	str	r3, [r0, #0]
 801462e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014632:	bd38      	pop	{r3, r4, r5, pc}
 8014634:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014636:	b112      	cbz	r2, 801463e <_raise_r+0x1e>
 8014638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801463c:	b94b      	cbnz	r3, 8014652 <_raise_r+0x32>
 801463e:	4620      	mov	r0, r4
 8014640:	f000 f830 	bl	80146a4 <_getpid_r>
 8014644:	462a      	mov	r2, r5
 8014646:	4601      	mov	r1, r0
 8014648:	4620      	mov	r0, r4
 801464a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801464e:	f000 b817 	b.w	8014680 <_kill_r>
 8014652:	2b01      	cmp	r3, #1
 8014654:	d00a      	beq.n	801466c <_raise_r+0x4c>
 8014656:	1c59      	adds	r1, r3, #1
 8014658:	d103      	bne.n	8014662 <_raise_r+0x42>
 801465a:	2316      	movs	r3, #22
 801465c:	6003      	str	r3, [r0, #0]
 801465e:	2001      	movs	r0, #1
 8014660:	e7e7      	b.n	8014632 <_raise_r+0x12>
 8014662:	2400      	movs	r4, #0
 8014664:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014668:	4628      	mov	r0, r5
 801466a:	4798      	blx	r3
 801466c:	2000      	movs	r0, #0
 801466e:	e7e0      	b.n	8014632 <_raise_r+0x12>

08014670 <raise>:
 8014670:	4b02      	ldr	r3, [pc, #8]	; (801467c <raise+0xc>)
 8014672:	4601      	mov	r1, r0
 8014674:	6818      	ldr	r0, [r3, #0]
 8014676:	f7ff bfd3 	b.w	8014620 <_raise_r>
 801467a:	bf00      	nop
 801467c:	20000014 	.word	0x20000014

08014680 <_kill_r>:
 8014680:	b538      	push	{r3, r4, r5, lr}
 8014682:	4d07      	ldr	r5, [pc, #28]	; (80146a0 <_kill_r+0x20>)
 8014684:	2300      	movs	r3, #0
 8014686:	4604      	mov	r4, r0
 8014688:	4608      	mov	r0, r1
 801468a:	4611      	mov	r1, r2
 801468c:	602b      	str	r3, [r5, #0]
 801468e:	f7f2 fbaf 	bl	8006df0 <_kill>
 8014692:	1c43      	adds	r3, r0, #1
 8014694:	d102      	bne.n	801469c <_kill_r+0x1c>
 8014696:	682b      	ldr	r3, [r5, #0]
 8014698:	b103      	cbz	r3, 801469c <_kill_r+0x1c>
 801469a:	6023      	str	r3, [r4, #0]
 801469c:	bd38      	pop	{r3, r4, r5, pc}
 801469e:	bf00      	nop
 80146a0:	200063c4 	.word	0x200063c4

080146a4 <_getpid_r>:
 80146a4:	f7f2 bb9c 	b.w	8006de0 <_getpid>

080146a8 <__sread>:
 80146a8:	b510      	push	{r4, lr}
 80146aa:	460c      	mov	r4, r1
 80146ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146b0:	f000 f894 	bl	80147dc <_read_r>
 80146b4:	2800      	cmp	r0, #0
 80146b6:	bfab      	itete	ge
 80146b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80146ba:	89a3      	ldrhlt	r3, [r4, #12]
 80146bc:	181b      	addge	r3, r3, r0
 80146be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80146c2:	bfac      	ite	ge
 80146c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80146c6:	81a3      	strhlt	r3, [r4, #12]
 80146c8:	bd10      	pop	{r4, pc}

080146ca <__swrite>:
 80146ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146ce:	461f      	mov	r7, r3
 80146d0:	898b      	ldrh	r3, [r1, #12]
 80146d2:	05db      	lsls	r3, r3, #23
 80146d4:	4605      	mov	r5, r0
 80146d6:	460c      	mov	r4, r1
 80146d8:	4616      	mov	r6, r2
 80146da:	d505      	bpl.n	80146e8 <__swrite+0x1e>
 80146dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146e0:	2302      	movs	r3, #2
 80146e2:	2200      	movs	r2, #0
 80146e4:	f000 f868 	bl	80147b8 <_lseek_r>
 80146e8:	89a3      	ldrh	r3, [r4, #12]
 80146ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80146f2:	81a3      	strh	r3, [r4, #12]
 80146f4:	4632      	mov	r2, r6
 80146f6:	463b      	mov	r3, r7
 80146f8:	4628      	mov	r0, r5
 80146fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146fe:	f000 b817 	b.w	8014730 <_write_r>

08014702 <__sseek>:
 8014702:	b510      	push	{r4, lr}
 8014704:	460c      	mov	r4, r1
 8014706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801470a:	f000 f855 	bl	80147b8 <_lseek_r>
 801470e:	1c43      	adds	r3, r0, #1
 8014710:	89a3      	ldrh	r3, [r4, #12]
 8014712:	bf15      	itete	ne
 8014714:	6560      	strne	r0, [r4, #84]	; 0x54
 8014716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801471a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801471e:	81a3      	strheq	r3, [r4, #12]
 8014720:	bf18      	it	ne
 8014722:	81a3      	strhne	r3, [r4, #12]
 8014724:	bd10      	pop	{r4, pc}

08014726 <__sclose>:
 8014726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801472a:	f000 b813 	b.w	8014754 <_close_r>
	...

08014730 <_write_r>:
 8014730:	b538      	push	{r3, r4, r5, lr}
 8014732:	4d07      	ldr	r5, [pc, #28]	; (8014750 <_write_r+0x20>)
 8014734:	4604      	mov	r4, r0
 8014736:	4608      	mov	r0, r1
 8014738:	4611      	mov	r1, r2
 801473a:	2200      	movs	r2, #0
 801473c:	602a      	str	r2, [r5, #0]
 801473e:	461a      	mov	r2, r3
 8014740:	f7f2 fb8d 	bl	8006e5e <_write>
 8014744:	1c43      	adds	r3, r0, #1
 8014746:	d102      	bne.n	801474e <_write_r+0x1e>
 8014748:	682b      	ldr	r3, [r5, #0]
 801474a:	b103      	cbz	r3, 801474e <_write_r+0x1e>
 801474c:	6023      	str	r3, [r4, #0]
 801474e:	bd38      	pop	{r3, r4, r5, pc}
 8014750:	200063c4 	.word	0x200063c4

08014754 <_close_r>:
 8014754:	b538      	push	{r3, r4, r5, lr}
 8014756:	4d06      	ldr	r5, [pc, #24]	; (8014770 <_close_r+0x1c>)
 8014758:	2300      	movs	r3, #0
 801475a:	4604      	mov	r4, r0
 801475c:	4608      	mov	r0, r1
 801475e:	602b      	str	r3, [r5, #0]
 8014760:	f7f2 fb99 	bl	8006e96 <_close>
 8014764:	1c43      	adds	r3, r0, #1
 8014766:	d102      	bne.n	801476e <_close_r+0x1a>
 8014768:	682b      	ldr	r3, [r5, #0]
 801476a:	b103      	cbz	r3, 801476e <_close_r+0x1a>
 801476c:	6023      	str	r3, [r4, #0]
 801476e:	bd38      	pop	{r3, r4, r5, pc}
 8014770:	200063c4 	.word	0x200063c4

08014774 <_fstat_r>:
 8014774:	b538      	push	{r3, r4, r5, lr}
 8014776:	4d07      	ldr	r5, [pc, #28]	; (8014794 <_fstat_r+0x20>)
 8014778:	2300      	movs	r3, #0
 801477a:	4604      	mov	r4, r0
 801477c:	4608      	mov	r0, r1
 801477e:	4611      	mov	r1, r2
 8014780:	602b      	str	r3, [r5, #0]
 8014782:	f7f2 fb94 	bl	8006eae <_fstat>
 8014786:	1c43      	adds	r3, r0, #1
 8014788:	d102      	bne.n	8014790 <_fstat_r+0x1c>
 801478a:	682b      	ldr	r3, [r5, #0]
 801478c:	b103      	cbz	r3, 8014790 <_fstat_r+0x1c>
 801478e:	6023      	str	r3, [r4, #0]
 8014790:	bd38      	pop	{r3, r4, r5, pc}
 8014792:	bf00      	nop
 8014794:	200063c4 	.word	0x200063c4

08014798 <_isatty_r>:
 8014798:	b538      	push	{r3, r4, r5, lr}
 801479a:	4d06      	ldr	r5, [pc, #24]	; (80147b4 <_isatty_r+0x1c>)
 801479c:	2300      	movs	r3, #0
 801479e:	4604      	mov	r4, r0
 80147a0:	4608      	mov	r0, r1
 80147a2:	602b      	str	r3, [r5, #0]
 80147a4:	f7f2 fb93 	bl	8006ece <_isatty>
 80147a8:	1c43      	adds	r3, r0, #1
 80147aa:	d102      	bne.n	80147b2 <_isatty_r+0x1a>
 80147ac:	682b      	ldr	r3, [r5, #0]
 80147ae:	b103      	cbz	r3, 80147b2 <_isatty_r+0x1a>
 80147b0:	6023      	str	r3, [r4, #0]
 80147b2:	bd38      	pop	{r3, r4, r5, pc}
 80147b4:	200063c4 	.word	0x200063c4

080147b8 <_lseek_r>:
 80147b8:	b538      	push	{r3, r4, r5, lr}
 80147ba:	4d07      	ldr	r5, [pc, #28]	; (80147d8 <_lseek_r+0x20>)
 80147bc:	4604      	mov	r4, r0
 80147be:	4608      	mov	r0, r1
 80147c0:	4611      	mov	r1, r2
 80147c2:	2200      	movs	r2, #0
 80147c4:	602a      	str	r2, [r5, #0]
 80147c6:	461a      	mov	r2, r3
 80147c8:	f7f2 fb8c 	bl	8006ee4 <_lseek>
 80147cc:	1c43      	adds	r3, r0, #1
 80147ce:	d102      	bne.n	80147d6 <_lseek_r+0x1e>
 80147d0:	682b      	ldr	r3, [r5, #0]
 80147d2:	b103      	cbz	r3, 80147d6 <_lseek_r+0x1e>
 80147d4:	6023      	str	r3, [r4, #0]
 80147d6:	bd38      	pop	{r3, r4, r5, pc}
 80147d8:	200063c4 	.word	0x200063c4

080147dc <_read_r>:
 80147dc:	b538      	push	{r3, r4, r5, lr}
 80147de:	4d07      	ldr	r5, [pc, #28]	; (80147fc <_read_r+0x20>)
 80147e0:	4604      	mov	r4, r0
 80147e2:	4608      	mov	r0, r1
 80147e4:	4611      	mov	r1, r2
 80147e6:	2200      	movs	r2, #0
 80147e8:	602a      	str	r2, [r5, #0]
 80147ea:	461a      	mov	r2, r3
 80147ec:	f7f2 fb1a 	bl	8006e24 <_read>
 80147f0:	1c43      	adds	r3, r0, #1
 80147f2:	d102      	bne.n	80147fa <_read_r+0x1e>
 80147f4:	682b      	ldr	r3, [r5, #0]
 80147f6:	b103      	cbz	r3, 80147fa <_read_r+0x1e>
 80147f8:	6023      	str	r3, [r4, #0]
 80147fa:	bd38      	pop	{r3, r4, r5, pc}
 80147fc:	200063c4 	.word	0x200063c4

08014800 <_init>:
 8014800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014802:	bf00      	nop
 8014804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014806:	bc08      	pop	{r3}
 8014808:	469e      	mov	lr, r3
 801480a:	4770      	bx	lr

0801480c <_fini>:
 801480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801480e:	bf00      	nop
 8014810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014812:	bc08      	pop	{r3}
 8014814:	469e      	mov	lr, r3
 8014816:	4770      	bx	lr
