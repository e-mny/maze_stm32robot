
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000146d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001094  08014868  08014868  00024868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080158fc  080158fc  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  080158fc  080158fc  000258fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015904  08015904  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015904  08015904  00025904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015908  08015908  00025908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0801590c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          000061e4  200001e8  200001e8  000301e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200063cc  200063cc  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e658  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a29  00000000  00000000  0004e870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a20  00000000  00000000  000522a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d38  00000000  00000000  00053cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004adb  00000000  00000000  000559f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e199  00000000  00000000  0005a4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db518  00000000  00000000  0007866c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00153b84  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000084f4  00000000  00000000  00153bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014850 	.word	0x08014850

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08014850 	.word	0x08014850

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ffc:	f006 f816 	bl	800702c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001000:	f000 f850 	bl	80010a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001004:	f000 fb48 	bl	8001698 <MX_GPIO_Init>
	MX_TIM8_Init();
 8001008:	f000 fa72 	bl	80014f0 <MX_TIM8_Init>
	MX_TIM1_Init();
 800100c:	f000 f8d6 	bl	80011bc <MX_TIM1_Init>
	MX_USART3_UART_Init();
 8001010:	f000 fb18 	bl	8001644 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8001014:	f000 f8a4 	bl	8001160 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001018:	f000 f96e 	bl	80012f8 <MX_TIM2_Init>
	MX_TIM4_Init();
 800101c:	f000 fa14 	bl	8001448 <MX_TIM4_Init>
	MX_TIM3_Init();
 8001020:	f000 f9be 	bl	80013a0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 8001024:	f005 faf2 	bl	800660c <OLED_Init>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001028:	f00c f970 	bl	800d30c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <main+0x7c>)
 800102e:	2100      	movs	r1, #0
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <main+0x80>)
 8001032:	f00c f9b5 	bl	800d3a0 <osThreadNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a10      	ldr	r2, [pc, #64]	; (800107c <main+0x84>)
 800103a:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of OLEDTask */
	OLEDTaskHandle = osThreadNew(oled_show, NULL, &OLEDTask_attributes);
 800103c:	4a10      	ldr	r2, [pc, #64]	; (8001080 <main+0x88>)
 800103e:	2100      	movs	r1, #0
 8001040:	4810      	ldr	r0, [pc, #64]	; (8001084 <main+0x8c>)
 8001042:	f00c f9ad 	bl	800d3a0 <osThreadNew>
 8001046:	4603      	mov	r3, r0
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <main+0x90>)
 800104a:	6013      	str	r3, [r2, #0]

	/* creation of GyroRead */
	GyroReadHandle = osThreadNew(gyro_read, NULL, &GyroRead_attributes);
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <main+0x94>)
 800104e:	2100      	movs	r1, #0
 8001050:	480f      	ldr	r0, [pc, #60]	; (8001090 <main+0x98>)
 8001052:	f00c f9a5 	bl	800d3a0 <osThreadNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <main+0x9c>)
 800105a:	6013      	str	r3, [r2, #0]

	/* creation of ServoMotor */
	ServoMotorHandle = osThreadNew(servoMotor, NULL, &ServoMotor_attributes);
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <main+0xa0>)
 800105e:	2100      	movs	r1, #0
 8001060:	480e      	ldr	r0, [pc, #56]	; (800109c <main+0xa4>)
 8001062:	f00c f99d 	bl	800d3a0 <osThreadNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <main+0xa8>)
 800106a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800106c:	f00c f972 	bl	800d354 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001070:	e7fe      	b.n	8001070 <main+0x78>
 8001072:	bf00      	nop
 8001074:	0801494c 	.word	0x0801494c
 8001078:	08005c39 	.word	0x08005c39
 800107c:	20000404 	.word	0x20000404
 8001080:	08014970 	.word	0x08014970
 8001084:	08006099 	.word	0x08006099
 8001088:	20000408 	.word	0x20000408
 800108c:	08014994 	.word	0x08014994
 8001090:	080060a9 	.word	0x080060a9
 8001094:	2000040c 	.word	0x2000040c
 8001098:	080149b8 	.word	0x080149b8
 800109c:	08006289 	.word	0x08006289
 80010a0:	20000410 	.word	0x20000410

080010a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
 80010a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2230      	movs	r2, #48	; 0x30
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f00e ff62 	bl	800ff7c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <SystemClock_Config+0xb4>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <SystemClock_Config+0xb4>)
 80010d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <SystemClock_Config+0xb4>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <SystemClock_Config+0xb8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <SystemClock_Config+0xb8>)
 80010ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <SystemClock_Config+0xb8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001100:	2302      	movs	r3, #2
 8001102:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001108:	2310      	movs	r3, #16
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f008 ff23 	bl	8009f60 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x80>
		Error_Handler();
 8001120:	f005 f8c8 	bl	80062b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f009 f986 	bl	800a450 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xaa>
		Error_Handler();
 800114a:	f005 f8b3 	bl	80062b4 <Error_Handler>
	}
}
 800114e:	bf00      	nop
 8001150:	3750      	adds	r7, #80	; 0x50
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <MX_I2C1_Init+0x54>)
 8001168:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_I2C1_Init+0x50>)
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x58>)
 800116e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_I2C1_Init+0x50>)
 800117e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001182:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_I2C1_Init+0x50>)
 800119e:	f006 fb5d 	bl	800785c <HAL_I2C_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x4c>
		Error_Handler();
 80011a8:	f005 f884 	bl	80062b4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000204 	.word	0x20000204
 80011b4:	40005400 	.word	0x40005400
 80011b8:	00061a80 	.word	0x00061a80

080011bc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b096      	sub	sp, #88	; 0x58
 80011c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2220      	movs	r2, #32
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00e fec1 	bl	800ff7c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <MX_TIM1_Init+0x134>)
 80011fc:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <MX_TIM1_Init+0x138>)
 80011fe:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160;
 8001200:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001202:	22a0      	movs	r2, #160	; 0xa0
 8001204:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 800120c:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <MX_TIM1_Init+0x134>)
 800120e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001212:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <MX_TIM1_Init+0x134>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001226:	4832      	ldr	r0, [pc, #200]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001228:	f009 faf2 	bl	800a810 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8001232:	f005 f83f 	bl	80062b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800123c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001240:	4619      	mov	r1, r3
 8001242:	482b      	ldr	r0, [pc, #172]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001244:	f00a f966 	bl	800b514 <HAL_TIM_ConfigClockSource>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x96>
		Error_Handler();
 800124e:	f005 f831 	bl	80062b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001252:	4827      	ldr	r0, [pc, #156]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001254:	f009 fb2b 	bl	800a8ae <HAL_TIM_PWM_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0xa6>
		Error_Handler();
 800125e:	f005 f829 	bl	80062b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800126a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800126e:	4619      	mov	r1, r3
 8001270:	481f      	ldr	r0, [pc, #124]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001272:	f00a febd 	bl	800bff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 800127c:	f005 f81a 	bl	80062b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001280:	2360      	movs	r3, #96	; 0x60
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	220c      	movs	r2, #12
 800129e:	4619      	mov	r1, r3
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012a2:	f00a f875 	bl	800b390 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 80012ac:	f005 f802 	bl	80062b4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012d4:	f00a ff08 	bl	800c0e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM1_Init+0x126>
			!= HAL_OK) {
		Error_Handler();
 80012de:	f004 ffe9 	bl	80062b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80012e2:	4803      	ldr	r0, [pc, #12]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012e4:	f005 fcd4 	bl	8006c90 <HAL_TIM_MspPostInit>

}
 80012e8:	bf00      	nop
 80012ea:	3758      	adds	r7, #88	; 0x58
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000258 	.word	0x20000258
 80012f4:	40010000 	.word	0x40010000

080012f8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	; 0x30
 80012fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	2224      	movs	r2, #36	; 0x24
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f00e fe38 	bl	800ff7c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_TIM2_Init+0xa4>)
 8001316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_TIM2_Init+0xa4>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_TIM2_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_TIM2_Init+0xa4>)
 800132a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM2_Init+0xa4>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_TIM2_Init+0xa4>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800133c:	2301      	movs	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001344:	2301      	movs	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001354:	2301      	movs	r3, #1
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_TIM2_Init+0xa4>)
 8001368:	f009 fd3a 	bl	800ade0 <HAL_TIM_Encoder_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0x7e>
		Error_Handler();
 8001372:	f004 ff9f 	bl	80062b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_TIM2_Init+0xa4>)
 8001384:	f00a fe34 	bl	800bff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800138e:	f004 ff91 	bl	80062b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3730      	adds	r7, #48	; 0x30
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200002a0 	.word	0x200002a0

080013a0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013be:	4a21      	ldr	r2, [pc, #132]	; (8001444 <MX_TIM3_Init+0xa4>)
 80013c0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013c4:	2247      	movs	r2, #71	; 0x47
 80013c6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0xffff - 1;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013d4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 80013e2:	4817      	ldr	r0, [pc, #92]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013e4:	f009 fb84 	bl	800aaf0 <HAL_TIM_IC_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM3_Init+0x52>
		Error_Handler();
 80013ee:	f004 ff61 	bl	80062b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4619      	mov	r1, r3
 8001400:	480f      	ldr	r0, [pc, #60]	; (8001440 <MX_TIM3_Init+0xa0>)
 8001402:	f00a fdf5 	bl	800bff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM3_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 800140c:	f004 ff52 	bl	80062b4 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_TIM3_Init+0xa0>)
 8001428:	f009 ff16 	bl	800b258 <HAL_TIM_IC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0x96>
		Error_Handler();
 8001432:	f004 ff3f 	bl	80062b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200002e8 	.word	0x200002e8
 8001444:	40000400 	.word	0x40000400

08001448 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2224      	movs	r2, #36	; 0x24
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f00e fd90 	bl	800ff7c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001466:	4a21      	ldr	r2, [pc, #132]	; (80014ec <MX_TIM4_Init+0xa4>)
 8001468:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <MX_TIM4_Init+0xa0>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800148a:	2301      	movs	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014a2:	2301      	movs	r3, #1
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	4619      	mov	r1, r3
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <MX_TIM4_Init+0xa0>)
 80014b6:	f009 fc93 	bl	800ade0 <HAL_TIM_Encoder_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM4_Init+0x7c>
		Error_Handler();
 80014c0:	f004 fef8 	bl	80062b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_TIM4_Init+0xa0>)
 80014d2:	f00a fd8d 	bl	800bff0 <HAL_TIMEx_MasterConfigSynchronization>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM4_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80014dc:	f004 feea 	bl	80062b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	3730      	adds	r7, #48	; 0x30
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000330 	.word	0x20000330
 80014ec:	40000800 	.word	0x40000800

080014f0 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b096      	sub	sp, #88	; 0x58
 80014f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2220      	movs	r2, #32
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f00e fd27 	bl	800ff7c <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800152e:	4b43      	ldr	r3, [pc, #268]	; (800163c <MX_TIM8_Init+0x14c>)
 8001530:	4a43      	ldr	r2, [pc, #268]	; (8001640 <MX_TIM8_Init+0x150>)
 8001532:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001534:	4b41      	ldr	r3, [pc, #260]	; (800163c <MX_TIM8_Init+0x14c>)
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b40      	ldr	r3, [pc, #256]	; (800163c <MX_TIM8_Init+0x14c>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7199;
 8001540:	4b3e      	ldr	r3, [pc, #248]	; (800163c <MX_TIM8_Init+0x14c>)
 8001542:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001546:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001548:	4b3c      	ldr	r3, [pc, #240]	; (800163c <MX_TIM8_Init+0x14c>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <MX_TIM8_Init+0x14c>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001554:	4b39      	ldr	r3, [pc, #228]	; (800163c <MX_TIM8_Init+0x14c>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 800155a:	4838      	ldr	r0, [pc, #224]	; (800163c <MX_TIM8_Init+0x14c>)
 800155c:	f009 f958 	bl	800a810 <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM8_Init+0x7a>
		Error_Handler();
 8001566:	f004 fea5 	bl	80062b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8001570:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001574:	4619      	mov	r1, r3
 8001576:	4831      	ldr	r0, [pc, #196]	; (800163c <MX_TIM8_Init+0x14c>)
 8001578:	f009 ffcc 	bl	800b514 <HAL_TIM_ConfigClockSource>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM8_Init+0x96>
		Error_Handler();
 8001582:	f004 fe97 	bl	80062b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001586:	482d      	ldr	r0, [pc, #180]	; (800163c <MX_TIM8_Init+0x14c>)
 8001588:	f009 f991 	bl	800a8ae <HAL_TIM_PWM_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM8_Init+0xa6>
		Error_Handler();
 8001592:	f004 fe8f 	bl	80062b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800159e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015a2:	4619      	mov	r1, r3
 80015a4:	4825      	ldr	r0, [pc, #148]	; (800163c <MX_TIM8_Init+0x14c>)
 80015a6:	f00a fd23 	bl	800bff0 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM8_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80015b0:	f004 fe80 	bl	80062b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b4:	2360      	movs	r3, #96	; 0x60
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4818      	ldr	r0, [pc, #96]	; (800163c <MX_TIM8_Init+0x14c>)
 80015da:	f009 fed9 	bl	800b390 <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM8_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 80015e4:	f004 fe66 	bl	80062b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	2208      	movs	r2, #8
 80015ee:	4619      	mov	r1, r3
 80015f0:	4812      	ldr	r0, [pc, #72]	; (800163c <MX_TIM8_Init+0x14c>)
 80015f2:	f009 fecd 	bl	800b390 <HAL_TIM_PWM_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM8_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 80015fc:	f004 fe5a 	bl	80062b4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001618:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <MX_TIM8_Init+0x14c>)
 8001624:	f00a fd60 	bl	800c0e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM8_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 800162e:	f004 fe41 	bl	80062b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	3758      	adds	r7, #88	; 0x58
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000378 	.word	0x20000378
 8001640:	40010400 	.word	0x40010400

08001644 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_USART3_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800167c:	f00a fd9a 	bl	800c1b4 <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001686:	f004 fe15 	bl	80062b4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200003c0 	.word	0x200003c0
 8001694:	40004800 	.word	0x40004800

08001698 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b3a      	ldr	r3, [pc, #232]	; (800179c <MX_GPIO_Init+0x104>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a39      	ldr	r2, [pc, #228]	; (800179c <MX_GPIO_Init+0x104>)
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <MX_GPIO_Init+0x104>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b33      	ldr	r3, [pc, #204]	; (800179c <MX_GPIO_Init+0x104>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a32      	ldr	r2, [pc, #200]	; (800179c <MX_GPIO_Init+0x104>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b30      	ldr	r3, [pc, #192]	; (800179c <MX_GPIO_Init+0x104>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <MX_GPIO_Init+0x104>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a2b      	ldr	r2, [pc, #172]	; (800179c <MX_GPIO_Init+0x104>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <MX_GPIO_Init+0x104>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <MX_GPIO_Init+0x104>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a24      	ldr	r2, [pc, #144]	; (800179c <MX_GPIO_Init+0x104>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <MX_GPIO_Init+0x104>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800171e:	2200      	movs	r2, #0
 8001720:	f44f 51bf 	mov.w	r1, #6112	; 0x17e0
 8001724:	481e      	ldr	r0, [pc, #120]	; (80017a0 <MX_GPIO_Init+0x108>)
 8001726:	f006 f865 	bl	80077f4 <HAL_GPIO_WritePin>
			OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin
					| UltraSensor_Trigger_Pin | LED3_Pin | CIN1_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	210c      	movs	r1, #12
 800172e:	481d      	ldr	r0, [pc, #116]	; (80017a4 <MX_GPIO_Init+0x10c>)
 8001730:	f006 f860 	bl	80077f4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2120      	movs	r1, #32
 8001738:	481b      	ldr	r0, [pc, #108]	; (80017a8 <MX_GPIO_Init+0x110>)
 800173a:	f006 f85b 	bl	80077f4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
	 UltraSensor_Trigger_Pin LED3_Pin CIN1_Pin */
	GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin
 800173e:	f44f 53bf 	mov.w	r3, #6112	; 0x17e0
 8001742:	617b      	str	r3, [r7, #20]
			| OLED_DC_Pin | UltraSensor_Trigger_Pin | LED3_Pin | CIN1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4812      	ldr	r0, [pc, #72]	; (80017a0 <MX_GPIO_Init+0x108>)
 8001758:	f005 feb0 	bl	80074bc <HAL_GPIO_Init>

	/*Configure GPIO pins : AIN2_Pin AIN1_Pin */
	GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin;
 800175c:	230c      	movs	r3, #12
 800175e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001768:	2302      	movs	r3, #2
 800176a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	480c      	ldr	r0, [pc, #48]	; (80017a4 <MX_GPIO_Init+0x10c>)
 8001774:	f005 fea2 	bl	80074bc <HAL_GPIO_Init>

	/*Configure GPIO pin : CIN2_Pin */
	GPIO_InitStruct.Pin = CIN2_Pin;
 8001778:	2320      	movs	r3, #32
 800177a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CIN2_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_GPIO_Init+0x110>)
 8001790:	f005 fe94 	bl	80074bc <HAL_GPIO_Init>

}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40020800 	.word	0x40020800

080017ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// For own reference, this function seems to be called after
// interrupt from the HAL_UART_Receive_IT function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b08b      	sub	sp, #44	; 0x2c
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	6078      	str	r0, [r7, #4]
	//Prevent unused argument(s) compilation warning
	UNUSED(huart);
	static i = 0; //static means it doesn't get erase after every loop

	if (aRxBuffer[0] == 'n') {
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b6e      	cmp	r3, #110	; 0x6e
 80017ba:	d106      	bne.n	80017ca <HAL_UART_RxCpltCallback+0x1e>
		i = 0;
 80017bc:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
		newCmdReceived = 1;
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_UART_RxCpltCallback+0xb0>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
 80017c8:	e01e      	b.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
	} else if (i == 0) {
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_UART_RxCpltCallback+0x3a>
		cmd = aRxBuffer[0];
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_UART_RxCpltCallback+0xb4>)
 80017d8:	701a      	strb	r2, [r3, #0]
		i++;
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	e010      	b.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
	} else if (i > 0) {
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	dd0c      	ble.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
		data = data * 10 + (aRxBuffer[0] - '0');
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4413      	add	r3, r2
 8001802:	3b30      	subs	r3, #48	; 0x30
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 8001806:	6013      	str	r3, [r2, #0]
//		data = aRxBuffer[0];
	}

	uint8_t message1[20];
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 1);
 8001808:	2201      	movs	r2, #1
 800180a:	4912      	ldr	r1, [pc, #72]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 800180c:	4816      	ldr	r0, [pc, #88]	; (8001868 <HAL_UART_RxCpltCallback+0xbc>)
 800180e:	f00a fdb0 	bl	800c372 <HAL_UART_Receive_IT>
//	HAL_UART_Transmit(&huart3, (uint8_t *) aRxBuffer, 1, 0xFFFF);

	sprintf(message1, "%c %d %c %d\0", aRxBuffer[0], newCmdReceived, cmd, data);
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_UART_RxCpltCallback+0xb0>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461c      	mov	r4, r3
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_UART_RxCpltCallback+0xb4>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f107 000c 	add.w	r0, r7, #12
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	9200      	str	r2, [sp, #0]
 8001830:	4623      	mov	r3, r4
 8001832:	460a      	mov	r2, r1
 8001834:	490d      	ldr	r1, [pc, #52]	; (800186c <HAL_UART_RxCpltCallback+0xc0>)
 8001836:	f00f fa29 	bl	8010c8c <siprintf>
	OLED_ShowString(10, 40, message1);
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	461a      	mov	r2, r3
 8001840:	2128      	movs	r1, #40	; 0x28
 8001842:	200a      	movs	r0, #10
 8001844:	f004 feb0 	bl	80065a8 <OLED_ShowString>
	OLED_Refresh_Gram(); //Refresh Ram
 8001848:	f004 fd3a 	bl	80062c0 <OLED_Refresh_Gram>
}
 800184c:	bf00      	nop
 800184e:	3724      	adds	r7, #36	; 0x24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}
 8001854:	20000428 	.word	0x20000428
 8001858:	20000460 	.word	0x20000460
 800185c:	20000429 	.word	0x20000429
 8001860:	2000042a 	.word	0x2000042a
 8001864:	2000042c 	.word	0x2000042c
 8001868:	200003c0 	.word	0x200003c0
 800186c:	08014898 	.word	0x08014898

08001870 <delay>:

//reference: https://controllerstech.com/hcsr04-ultrasonic-sensor-and-stm32/
void delay(uint16_t time) {
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <delay+0x30>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time)
 8001882:	bf00      	nop
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <delay+0x30>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	429a      	cmp	r2, r3
 800188e:	d3f9      	bcc.n	8001884 <delay+0x14>
		;

}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	200002e8 	.word	0x200002e8

080018a4 <HCSR04_Read>:
void HCSR04_Read(void) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UltraSensor_Trigger_GPIO_Port, UltraSensor_Trigger_Pin,
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ae:	480b      	ldr	r0, [pc, #44]	; (80018dc <HCSR04_Read+0x38>)
 80018b0:	f005 ffa0 	bl	80077f4 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);  // pull the TRIG pin HIGH
	delay(10);  // wait for 10 us
 80018b4:	200a      	movs	r0, #10
 80018b6:	f7ff ffdb 	bl	8001870 <delay>
	HAL_GPIO_WritePin(UltraSensor_Trigger_GPIO_Port, UltraSensor_Trigger_Pin,
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c0:	4806      	ldr	r0, [pc, #24]	; (80018dc <HCSR04_Read+0x38>)
 80018c2:	f005 ff97 	bl	80077f4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);  // pull the TRIG pin low

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HCSR04_Read+0x3c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <HCSR04_Read+0x3c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0202 	orr.w	r2, r2, #2
 80018d4:	60da      	str	r2, [r3, #12]
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	200002e8 	.word	0x200002e8
 80018e4:	00000000 	.word	0x00000000

080018e8 <HAL_TIM_IC_CaptureCallback>:

//Called whenever falling or rising edge is captured
// Let's write the callback function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7f1b      	ldrb	r3, [r3, #28]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	f040 8082 	bne.w	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
			{
		if (Is_First_Captured == 0) // if the first value is not captured
 80018fa:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11a      	bne.n	8001938 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001902:	2100      	movs	r1, #0
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f009 fecd 	bl	800b6a4 <HAL_TIM_ReadCapturedValue>
 800190a:	4603      	mov	r3, r0
 800190c:	4a41      	ldr	r2, [pc, #260]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800190e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001910:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6a1a      	ldr	r2, [r3, #32]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 020a 	bic.w	r2, r2, #10
 8001924:	621a      	str	r2, [r3, #32]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6a1a      	ldr	r2, [r3, #32]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0202 	orr.w	r2, r2, #2
 8001934:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8001936:	e062      	b.n	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured == 1)   // if the first is already captured
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d15e      	bne.n	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001940:	2100      	movs	r1, #0
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f009 feae 	bl	800b6a4 <HAL_TIM_ReadCapturedValue>
 8001948:	4603      	mov	r3, r0
 800194a:	4a33      	ldr	r2, [pc, #204]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 800194c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8001956:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d907      	bls.n	8001972 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 8001962:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	4a2b      	ldr	r2, [pc, #172]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e00f      	b.n	8001992 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 8001972:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d909      	bls.n	8001992 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800198c:	33ff      	adds	r3, #255	; 0xff
 800198e:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001990:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.034 / 2;
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdb4 	bl	8000504 <__aeabi_ui2d>
 800199c:	a31a      	add	r3, pc, #104	; (adr r3, 8001a08 <HAL_TIM_IC_CaptureCallback+0x120>)
 800199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a2:	f7fe fe29 	bl	80005f8 <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b6:	f7fe ff49 	bl	800084c <__aeabi_ddiv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f911 	bl	8000be8 <__aeabi_d2f>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x138>)
 80019ca:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6a1a      	ldr	r2, [r3, #32]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 020a 	bic.w	r2, r2, #10
 80019e0:	621a      	str	r2, [r3, #32]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6a12      	ldr	r2, [r2, #32]
 80019ec:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0202 	bic.w	r2, r2, #2
 80019fc:	60da      	str	r2, [r3, #12]
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	b020c49c 	.word	0xb020c49c
 8001a0c:	3fa16872 	.word	0x3fa16872
 8001a10:	20000444 	.word	0x20000444
 8001a14:	20000438 	.word	0x20000438
 8001a18:	2000043c 	.word	0x2000043c
 8001a1c:	20000440 	.word	0x20000440
 8001a20:	20000448 	.word	0x20000448
 8001a24:	20000258 	.word	0x20000258

08001a28 <task2A2L>:
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
}

// 2nd obstacle after turning left
void task2A2L(uint32_t data) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b0a0      	sub	sp, #128	; 0x80
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	uint32_t offset_show[30];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001a30:	2100      	movs	r1, #0
 8001a32:	48aa      	ldr	r0, [pc, #680]	; (8001cdc <task2A2L+0x2b4>)
 8001a34:	f008 ff94 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001a38:	2108      	movs	r1, #8
 8001a3a:	48a8      	ldr	r0, [pc, #672]	; (8001cdc <task2A2L+0x2b4>)
 8001a3c:	f008 ff90 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001a40:	210c      	movs	r1, #12
 8001a42:	48a7      	ldr	r0, [pc, #668]	; (8001ce0 <task2A2L+0x2b8>)
 8001a44:	f008 ff8c 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2108      	movs	r1, #8
 8001a4c:	48a5      	ldr	r0, [pc, #660]	; (8001ce4 <task2A2L+0x2bc>)
 8001a4e:	f005 fed1 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2104      	movs	r1, #4
 8001a56:	48a3      	ldr	r0, [pc, #652]	; (8001ce4 <task2A2L+0x2bc>)
 8001a58:	f005 fecc 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a62:	48a1      	ldr	r0, [pc, #644]	; (8001ce8 <task2A2L+0x2c0>)
 8001a64:	f005 fec6 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	489f      	ldr	r0, [pc, #636]	; (8001cec <task2A2L+0x2c4>)
 8001a6e:	f005 fec1 	bl	80077f4 <HAL_GPIO_WritePin>
	moving = 0;
 8001a72:	4b9f      	ldr	r3, [pc, #636]	; (8001cf0 <task2A2L+0x2c8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]

	if (continueMoving) {
 8001a78:	4b9e      	ldr	r3, [pc, #632]	; (8001cf4 <task2A2L+0x2cc>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 81bf 	beq.w	8001e00 <task2A2L+0x3d8>
		//	uint8_t continueMoving;
		//if picture detected is left Yln
		if (data == 'l') {
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b6c      	cmp	r3, #108	; 0x6c
 8001a86:	f040 80d2 	bne.w	8001c2e <task2A2L+0x206>
			htim1.Instance->CCR4 = 117;
 8001a8a:	4b95      	ldr	r3, [pc, #596]	; (8001ce0 <task2A2L+0x2b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2275      	movs	r2, #117	; 0x75
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001a92:	4b92      	ldr	r3, [pc, #584]	; (8001cdc <task2A2L+0x2b4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 8001a9c:	4b8f      	ldr	r3, [pc, #572]	; (8001cdc <task2A2L+0x2b4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001aa4:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 8001aa6:	4b92      	ldr	r3, [pc, #584]	; (8001cf0 <task2A2L+0x2c8>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001aac:	e020      	b.n	8001af0 <task2A2L+0xc8>
				if ((int) totalAngle >= 60) {
 8001aae:	4b92      	ldr	r3, [pc, #584]	; (8001cf8 <task2A2L+0x2d0>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff f84e 	bl	8000b58 <__aeabi_d2iz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b3b      	cmp	r3, #59	; 0x3b
 8001ac0:	dc1b      	bgt.n	8001afa <task2A2L+0xd2>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001ac2:	4b8d      	ldr	r3, [pc, #564]	; (8001cf8 <task2A2L+0x2d0>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f7ff f844 	bl	8000b58 <__aeabi_d2iz>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	4989      	ldr	r1, [pc, #548]	; (8001cfc <task2A2L+0x2d4>)
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f00f f8d7 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001ade:	f107 0308 	add.w	r3, r7, #8
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	2114      	movs	r1, #20
 8001ae6:	200a      	movs	r0, #10
 8001ae8:	f004 fd5e 	bl	80065a8 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001aec:	f004 fbe8 	bl	80062c0 <OLED_Refresh_Gram>
			while (moving) {
 8001af0:	4b7f      	ldr	r3, [pc, #508]	; (8001cf0 <task2A2L+0x2c8>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1da      	bne.n	8001aae <task2A2L+0x86>
 8001af8:	e000      	b.n	8001afc <task2A2L+0xd4>
					break;
 8001afa:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001afc:	4b77      	ldr	r3, [pc, #476]	; (8001cdc <task2A2L+0x2b4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2200      	movs	r2, #0
 8001b02:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8001b04:	4b75      	ldr	r3, [pc, #468]	; (8001cdc <task2A2L+0x2b4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(60, 1);
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8001d00 <task2A2L+0x2d8>
 8001b12:	f001 fedd 	bl	80038d0 <moveGyroPID>
			htim1.Instance->CCR4 = RIGHT;
 8001b16:	4b72      	ldr	r3, [pc, #456]	; (8001ce0 <task2A2L+0x2b8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	22fa      	movs	r2, #250	; 0xfa
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001b1e:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <task2A2L+0x2b4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001b28:	4b6c      	ldr	r3, [pc, #432]	; (8001cdc <task2A2L+0x2b4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b30:	63da      	str	r2, [r3, #60]	; 0x3c
			// 		continueMoving = 0;

			while (moving) {
 8001b32:	e021      	b.n	8001b78 <task2A2L+0x150>
				if ((int) totalAngle <= -85) {
 8001b34:	4b70      	ldr	r3, [pc, #448]	; (8001cf8 <task2A2L+0x2d0>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f80b 	bl	8000b58 <__aeabi_d2iz>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8001b48:	db1b      	blt.n	8001b82 <task2A2L+0x15a>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001b4a:	4b6b      	ldr	r3, [pc, #428]	; (8001cf8 <task2A2L+0x2d0>)
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	f7ff f800 	bl	8000b58 <__aeabi_d2iz>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	4967      	ldr	r1, [pc, #412]	; (8001cfc <task2A2L+0x2d4>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f00f f893 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001b66:	f107 0308 	add.w	r3, r7, #8
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	2114      	movs	r1, #20
 8001b6e:	200a      	movs	r0, #10
 8001b70:	f004 fd1a 	bl	80065a8 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001b74:	f004 fba4 	bl	80062c0 <OLED_Refresh_Gram>
			while (moving) {
 8001b78:	4b5d      	ldr	r3, [pc, #372]	; (8001cf0 <task2A2L+0x2c8>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1d9      	bne.n	8001b34 <task2A2L+0x10c>
 8001b80:	e000      	b.n	8001b84 <task2A2L+0x15c>
					break;
 8001b82:	bf00      	nop
			}

			moving = 0;
 8001b84:	4b5a      	ldr	r3, [pc, #360]	; (8001cf0 <task2A2L+0x2c8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(50.0, 1);
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8001d04 <task2A2L+0x2dc>
 8001b90:	f002 fdfe 	bl	8004790 <moveGyroPIDOld>
			moving = 0;
 8001b94:	4b56      	ldr	r3, [pc, #344]	; (8001cf0 <task2A2L+0x2c8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
			delay(100);
 8001b9a:	2064      	movs	r0, #100	; 0x64
 8001b9c:	f7ff fe68 	bl	8001870 <delay>
			moving = 1;
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <task2A2L+0x2c8>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = RIGHT;
 8001ba6:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <task2A2L+0x2b8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	22fa      	movs	r2, #250	; 0xfa
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001bae:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <task2A2L+0x2b4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001bb6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001bb8:	4b48      	ldr	r3, [pc, #288]	; (8001cdc <task2A2L+0x2b4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bc0:	63da      	str	r2, [r3, #60]	; 0x3c

			while (moving) {
 8001bc2:	e021      	b.n	8001c08 <task2A2L+0x1e0>
				if ((int) totalAngle <= -90) // was 95. was 90
 8001bc4:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <task2A2L+0x2d0>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7fe ffc3 	bl	8000b58 <__aeabi_d2iz>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8001bd8:	db1b      	blt.n	8001c12 <task2A2L+0x1ea>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001bda:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <task2A2L+0x2d0>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	f7fe ffb8 	bl	8000b58 <__aeabi_d2iz>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f107 0308 	add.w	r3, r7, #8
 8001bee:	4943      	ldr	r1, [pc, #268]	; (8001cfc <task2A2L+0x2d4>)
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f00f f84b 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001bf6:	f107 0308 	add.w	r3, r7, #8
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2114      	movs	r1, #20
 8001bfe:	200a      	movs	r0, #10
 8001c00:	f004 fcd2 	bl	80065a8 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001c04:	f004 fb5c 	bl	80062c0 <OLED_Refresh_Gram>
			while (moving) {
 8001c08:	4b39      	ldr	r3, [pc, #228]	; (8001cf0 <task2A2L+0x2c8>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1d9      	bne.n	8001bc4 <task2A2L+0x19c>
 8001c10:	e000      	b.n	8001c14 <task2A2L+0x1ec>
					break;
 8001c12:	bf00      	nop
			}
			actualAngle = 0;
 8001c14:	493c      	ldr	r1, [pc, #240]	; (8001d08 <task2A2L+0x2e0>)
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	e9c1 2300 	strd	r2, r3, [r1]
			moving = 0;
 8001c22:	4b33      	ldr	r3, [pc, #204]	; (8001cf0 <task2A2L+0x2c8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 8001c28:	f001 fc28 	bl	800347c <moveUltraEndLeft>
 8001c2c:	e2aa      	b.n	8002184 <task2A2L+0x75c>

		} else {
			htim1.Instance->CCR4 = RIGHT;
 8001c2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <task2A2L+0x2b8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	22fa      	movs	r2, #250	; 0xfa
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001c36:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <task2A2L+0x2b4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001c3e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001c40:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <task2A2L+0x2b4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c48:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <task2A2L+0x2c8>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001c50:	e021      	b.n	8001c96 <task2A2L+0x26e>
				if ((int) totalAngle <= -1 * 60) {
 8001c52:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <task2A2L+0x2d0>)
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe ff7c 	bl	8000b58 <__aeabi_d2iz>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f113 0f3b 	cmn.w	r3, #59	; 0x3b
 8001c66:	db1b      	blt.n	8001ca0 <task2A2L+0x278>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001c68:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <task2A2L+0x2d0>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	f7fe ff71 	bl	8000b58 <__aeabi_d2iz>
 8001c76:	4602      	mov	r2, r0
 8001c78:	f107 0308 	add.w	r3, r7, #8
 8001c7c:	491f      	ldr	r1, [pc, #124]	; (8001cfc <task2A2L+0x2d4>)
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f00f f804 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2114      	movs	r1, #20
 8001c8c:	200a      	movs	r0, #10
 8001c8e:	f004 fc8b 	bl	80065a8 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001c92:	f004 fb15 	bl	80062c0 <OLED_Refresh_Gram>
			while (moving) {
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <task2A2L+0x2c8>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1d9      	bne.n	8001c52 <task2A2L+0x22a>
 8001c9e:	e000      	b.n	8001ca2 <task2A2L+0x27a>
					break;
 8001ca0:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <task2A2L+0x2b4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <task2A2L+0x2b4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(45.0, 1);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001d0c <task2A2L+0x2e4>
 8001cb8:	f001 fe0a 	bl	80038d0 <moveGyroPID>
			htim1.Instance->CCR4 = 110;
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <task2A2L+0x2b8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	226e      	movs	r2, #110	; 0x6e
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <task2A2L+0x2b4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ccc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8001cce:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <task2A2L+0x2b4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001cd6:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving) {
 8001cd8:	e03b      	b.n	8001d52 <task2A2L+0x32a>
 8001cda:	bf00      	nop
 8001cdc:	20000378 	.word	0x20000378
 8001ce0:	20000258 	.word	0x20000258
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	20000414 	.word	0x20000414
 8001cf4:	20000416 	.word	0x20000416
 8001cf8:	20000418 	.word	0x20000418
 8001cfc:	080148a8 	.word	0x080148a8
 8001d00:	42700000 	.word	0x42700000
 8001d04:	42480000 	.word	0x42480000
 8001d08:	20000420 	.word	0x20000420
 8001d0c:	42340000 	.word	0x42340000
				if ((int) totalAngle >= 85) {
 8001d10:	4ba9      	ldr	r3, [pc, #676]	; (8001fb8 <task2A2L+0x590>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f7fe ff1d 	bl	8000b58 <__aeabi_d2iz>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b54      	cmp	r3, #84	; 0x54
 8001d22:	dc1b      	bgt.n	8001d5c <task2A2L+0x334>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001d24:	4ba4      	ldr	r3, [pc, #656]	; (8001fb8 <task2A2L+0x590>)
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe ff13 	bl	8000b58 <__aeabi_d2iz>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f107 0308 	add.w	r3, r7, #8
 8001d38:	49a0      	ldr	r1, [pc, #640]	; (8001fbc <task2A2L+0x594>)
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f00e ffa6 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	461a      	mov	r2, r3
 8001d46:	2114      	movs	r1, #20
 8001d48:	200a      	movs	r0, #10
 8001d4a:	f004 fc2d 	bl	80065a8 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001d4e:	f004 fab7 	bl	80062c0 <OLED_Refresh_Gram>
			while (moving) {
 8001d52:	4b9b      	ldr	r3, [pc, #620]	; (8001fc0 <task2A2L+0x598>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1da      	bne.n	8001d10 <task2A2L+0x2e8>
 8001d5a:	e000      	b.n	8001d5e <task2A2L+0x336>
					break;
 8001d5c:	bf00      	nop
			}
			moving = 0;
 8001d5e:	4b98      	ldr	r3, [pc, #608]	; (8001fc0 <task2A2L+0x598>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(70.0, 1); // prev 23
 8001d64:	2001      	movs	r0, #1
 8001d66:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8001fc4 <task2A2L+0x59c>
 8001d6a:	f002 fd11 	bl	8004790 <moveGyroPIDOld>
			moving = 0;
 8001d6e:	4b94      	ldr	r3, [pc, #592]	; (8001fc0 <task2A2L+0x598>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = 115;
 8001d74:	4b94      	ldr	r3, [pc, #592]	; (8001fc8 <task2A2L+0x5a0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2273      	movs	r2, #115	; 0x73
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001d7c:	4b93      	ldr	r3, [pc, #588]	; (8001fcc <task2A2L+0x5a4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d84:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8001d86:	4b91      	ldr	r3, [pc, #580]	; (8001fcc <task2A2L+0x5a4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d8e:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8001d90:	2064      	movs	r0, #100	; 0x64
 8001d92:	f7ff fd6d 	bl	8001870 <delay>
			moving = 1;
 8001d96:	4b8a      	ldr	r3, [pc, #552]	; (8001fc0 <task2A2L+0x598>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001d9c:	e020      	b.n	8001de0 <task2A2L+0x3b8>
				if ((int) totalAngle >= 92) {
 8001d9e:	4b86      	ldr	r3, [pc, #536]	; (8001fb8 <task2A2L+0x590>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f7fe fed6 	bl	8000b58 <__aeabi_d2iz>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b5b      	cmp	r3, #91	; 0x5b
 8001db0:	dc1b      	bgt.n	8001dea <task2A2L+0x3c2>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001db2:	4b81      	ldr	r3, [pc, #516]	; (8001fb8 <task2A2L+0x590>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe fecc 	bl	8000b58 <__aeabi_d2iz>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	497d      	ldr	r1, [pc, #500]	; (8001fbc <task2A2L+0x594>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00e ff5f 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001dce:	f107 0308 	add.w	r3, r7, #8
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2114      	movs	r1, #20
 8001dd6:	200a      	movs	r0, #10
 8001dd8:	f004 fbe6 	bl	80065a8 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001ddc:	f004 fa70 	bl	80062c0 <OLED_Refresh_Gram>
			while (moving) {
 8001de0:	4b77      	ldr	r3, [pc, #476]	; (8001fc0 <task2A2L+0x598>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1da      	bne.n	8001d9e <task2A2L+0x376>
 8001de8:	e000      	b.n	8001dec <task2A2L+0x3c4>
					break;
 8001dea:	bf00      	nop
			}
			actualAngle = 0;
 8001dec:	4978      	ldr	r1, [pc, #480]	; (8001fd0 <task2A2L+0x5a8>)
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 8001dfa:	f001 f92f 	bl	800305c <moveUltraEnd>
 8001dfe:	e1c1      	b.n	8002184 <task2A2L+0x75c>
		}
	} else {
		// meaning continueMoving is 0, indicating that the car
		// stopped because ultrasonic distance hit before target angle hit
		//if picture detected is left Yln
		if (data == 'l') {
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b6c      	cmp	r3, #108	; 0x6c
 8001e04:	f040 80ea 	bne.w	8001fdc <task2A2L+0x5b4>
			htim1.Instance->CCR4 = 115;
 8001e08:	4b6f      	ldr	r3, [pc, #444]	; (8001fc8 <task2A2L+0x5a0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2273      	movs	r2, #115	; 0x73
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001e10:	4b6e      	ldr	r3, [pc, #440]	; (8001fcc <task2A2L+0x5a4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e18:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8001e1a:	4b6c      	ldr	r3, [pc, #432]	; (8001fcc <task2A2L+0x5a4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e22:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 8001e24:	4b66      	ldr	r3, [pc, #408]	; (8001fc0 <task2A2L+0x598>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001e2a:	e020      	b.n	8001e6e <task2A2L+0x446>
				if ((int) actualAngle >= 40) {
 8001e2c:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <task2A2L+0x5a8>)
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe fe8f 	bl	8000b58 <__aeabi_d2iz>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b27      	cmp	r3, #39	; 0x27
 8001e3e:	dc1b      	bgt.n	8001e78 <task2A2L+0x450>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001e40:	4b5d      	ldr	r3, [pc, #372]	; (8001fb8 <task2A2L+0x590>)
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe fe85 	bl	8000b58 <__aeabi_d2iz>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	f107 0308 	add.w	r3, r7, #8
 8001e54:	4959      	ldr	r1, [pc, #356]	; (8001fbc <task2A2L+0x594>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	f00e ff18 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001e5c:	f107 0308 	add.w	r3, r7, #8
 8001e60:	461a      	mov	r2, r3
 8001e62:	2114      	movs	r1, #20
 8001e64:	200a      	movs	r0, #10
 8001e66:	f004 fb9f 	bl	80065a8 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001e6a:	f004 fa29 	bl	80062c0 <OLED_Refresh_Gram>
			while (moving) {
 8001e6e:	4b54      	ldr	r3, [pc, #336]	; (8001fc0 <task2A2L+0x598>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1da      	bne.n	8001e2c <task2A2L+0x404>
 8001e76:	e000      	b.n	8001e7a <task2A2L+0x452>
					break;
 8001e78:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001e7a:	4b54      	ldr	r3, [pc, #336]	; (8001fcc <task2A2L+0x5a4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8001e82:	4b52      	ldr	r3, [pc, #328]	; (8001fcc <task2A2L+0x5a4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2200      	movs	r2, #0
 8001e88:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(73.0, 1);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001fd4 <task2A2L+0x5ac>
 8001e90:	f001 fd1e 	bl	80038d0 <moveGyroPID>
			htim1.Instance->CCR4 = RIGHT;
 8001e94:	4b4c      	ldr	r3, [pc, #304]	; (8001fc8 <task2A2L+0x5a0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	22fa      	movs	r2, #250	; 0xfa
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001e9c:	4b4b      	ldr	r3, [pc, #300]	; (8001fcc <task2A2L+0x5a4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ea4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001ea6:	4b49      	ldr	r3, [pc, #292]	; (8001fcc <task2A2L+0x5a4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eae:	63da      	str	r2, [r3, #60]	; 0x3c
			// 		continueMoving = 0;

			while (moving) {
 8001eb0:	e021      	b.n	8001ef6 <task2A2L+0x4ce>
				if ((int) actualAngle <= -1 * 90) {
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <task2A2L+0x5a8>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f7fe fe4c 	bl	8000b58 <__aeabi_d2iz>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8001ec6:	db1b      	blt.n	8001f00 <task2A2L+0x4d8>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001ec8:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <task2A2L+0x590>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7fe fe41 	bl	8000b58 <__aeabi_d2iz>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	4937      	ldr	r1, [pc, #220]	; (8001fbc <task2A2L+0x594>)
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f00e fed4 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001ee4:	f107 0308 	add.w	r3, r7, #8
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2114      	movs	r1, #20
 8001eec:	200a      	movs	r0, #10
 8001eee:	f004 fb5b 	bl	80065a8 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001ef2:	f004 f9e5 	bl	80062c0 <OLED_Refresh_Gram>
			while (moving) {
 8001ef6:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <task2A2L+0x598>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1d9      	bne.n	8001eb2 <task2A2L+0x48a>
 8001efe:	e000      	b.n	8001f02 <task2A2L+0x4da>
					break;
 8001f00:	bf00      	nop
			}

			moving = 0;
 8001f02:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <task2A2L+0x598>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(40.0, 1);
 8001f08:	2001      	movs	r0, #1
 8001f0a:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8001fd8 <task2A2L+0x5b0>
 8001f0e:	f002 fc3f 	bl	8004790 <moveGyroPIDOld>
			moving = 0;
 8001f12:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <task2A2L+0x598>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = RIGHT;
 8001f18:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <task2A2L+0x5a0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	22fa      	movs	r2, #250	; 0xfa
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001f20:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <task2A2L+0x5a4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <task2A2L+0x5a4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f32:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8001f34:	2064      	movs	r0, #100	; 0x64
 8001f36:	f7ff fc9b 	bl	8001870 <delay>
			moving = 0;
 8001f3a:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <task2A2L+0x598>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
			osDelay(1);
 8001f40:	2001      	movs	r0, #1
 8001f42:	f00b fac0 	bl	800d4c6 <osDelay>
			moving = 1;
 8001f46:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <task2A2L+0x598>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001f4c:	e021      	b.n	8001f92 <task2A2L+0x56a>
				if ((int) totalAngle <= -1 * 90) // note: i changed to actualAngle to try, original was totalAngle = -100
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <task2A2L+0x590>)
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f7fe fdfe 	bl	8000b58 <__aeabi_d2iz>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8001f62:	db1b      	blt.n	8001f9c <task2A2L+0x574>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <task2A2L+0x590>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7fe fdf3 	bl	8000b58 <__aeabi_d2iz>
 8001f72:	4602      	mov	r2, r0
 8001f74:	f107 0308 	add.w	r3, r7, #8
 8001f78:	4910      	ldr	r1, [pc, #64]	; (8001fbc <task2A2L+0x594>)
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f00e fe86 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	461a      	mov	r2, r3
 8001f86:	2114      	movs	r1, #20
 8001f88:	200a      	movs	r0, #10
 8001f8a:	f004 fb0d 	bl	80065a8 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001f8e:	f004 f997 	bl	80062c0 <OLED_Refresh_Gram>
			while (moving) {
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <task2A2L+0x598>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1d9      	bne.n	8001f4e <task2A2L+0x526>
 8001f9a:	e000      	b.n	8001f9e <task2A2L+0x576>
					break;
 8001f9c:	bf00      	nop
			}
			actualAngle = 0;
 8001f9e:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <task2A2L+0x5a8>)
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	e9c1 2300 	strd	r2, r3, [r1]
			moving = 0;
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <task2A2L+0x598>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 8001fb2:	f001 fa63 	bl	800347c <moveUltraEndLeft>
 8001fb6:	e0e5      	b.n	8002184 <task2A2L+0x75c>
 8001fb8:	20000418 	.word	0x20000418
 8001fbc:	080148a8 	.word	0x080148a8
 8001fc0:	20000414 	.word	0x20000414
 8001fc4:	428c0000 	.word	0x428c0000
 8001fc8:	20000258 	.word	0x20000258
 8001fcc:	20000378 	.word	0x20000378
 8001fd0:	20000420 	.word	0x20000420
 8001fd4:	42920000 	.word	0x42920000
 8001fd8:	42200000 	.word	0x42200000

		} else if (data == 'r') {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b72      	cmp	r3, #114	; 0x72
 8001fe0:	f040 80d0 	bne.w	8002184 <task2A2L+0x75c>
			htim1.Instance->CCR4 = RIGHT;
 8001fe4:	4b7a      	ldr	r3, [pc, #488]	; (80021d0 <task2A2L+0x7a8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	22fa      	movs	r2, #250	; 0xfa
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001fec:	4b79      	ldr	r3, [pc, #484]	; (80021d4 <task2A2L+0x7ac>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ff4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001ff6:	4b77      	ldr	r3, [pc, #476]	; (80021d4 <task2A2L+0x7ac>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ffe:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 8002000:	4b75      	ldr	r3, [pc, #468]	; (80021d8 <task2A2L+0x7b0>)
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8002006:	e021      	b.n	800204c <task2A2L+0x624>
				if ((int) totalAngle <= -1 * 60) // was 65
 8002008:	4b74      	ldr	r3, [pc, #464]	; (80021dc <task2A2L+0x7b4>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	f7fe fda1 	bl	8000b58 <__aeabi_d2iz>
 8002016:	4603      	mov	r3, r0
 8002018:	f113 0f3b 	cmn.w	r3, #59	; 0x3b
 800201c:	db1b      	blt.n	8002056 <task2A2L+0x62e>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 800201e:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <task2A2L+0x7b4>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fd96 	bl	8000b58 <__aeabi_d2iz>
 800202c:	4602      	mov	r2, r0
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	496b      	ldr	r1, [pc, #428]	; (80021e0 <task2A2L+0x7b8>)
 8002034:	4618      	mov	r0, r3
 8002036:	f00e fe29 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 800203a:	f107 0308 	add.w	r3, r7, #8
 800203e:	461a      	mov	r2, r3
 8002040:	2114      	movs	r1, #20
 8002042:	200a      	movs	r0, #10
 8002044:	f004 fab0 	bl	80065a8 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002048:	f004 f93a 	bl	80062c0 <OLED_Refresh_Gram>
			while (moving) {
 800204c:	4b62      	ldr	r3, [pc, #392]	; (80021d8 <task2A2L+0x7b0>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1d9      	bne.n	8002008 <task2A2L+0x5e0>
 8002054:	e000      	b.n	8002058 <task2A2L+0x630>
					break;
 8002056:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002058:	4b5e      	ldr	r3, [pc, #376]	; (80021d4 <task2A2L+0x7ac>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002060:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <task2A2L+0x7ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 0;
 8002068:	4b5b      	ldr	r3, [pc, #364]	; (80021d8 <task2A2L+0x7b0>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(45.0, 1); // was 55
 800206e:	2001      	movs	r0, #1
 8002070:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 80021e4 <task2A2L+0x7bc>
 8002074:	f002 fb8c 	bl	8004790 <moveGyroPIDOld>
			htim1.Instance->CCR4 = 110;
 8002078:	4b55      	ldr	r3, [pc, #340]	; (80021d0 <task2A2L+0x7a8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	226e      	movs	r2, #110	; 0x6e
 800207e:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8002080:	4b54      	ldr	r3, [pc, #336]	; (80021d4 <task2A2L+0x7ac>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 800208a:	4b52      	ldr	r3, [pc, #328]	; (80021d4 <task2A2L+0x7ac>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002092:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving) {
 8002094:	e020      	b.n	80020d8 <task2A2L+0x6b0>
				if ((int) actualAngle >= 83) {
 8002096:	4b54      	ldr	r3, [pc, #336]	; (80021e8 <task2A2L+0x7c0>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f7fe fd5a 	bl	8000b58 <__aeabi_d2iz>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b52      	cmp	r3, #82	; 0x52
 80020a8:	dc1b      	bgt.n	80020e2 <task2A2L+0x6ba>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 80020aa:	4b4c      	ldr	r3, [pc, #304]	; (80021dc <task2A2L+0x7b4>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7fe fd50 	bl	8000b58 <__aeabi_d2iz>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f107 0308 	add.w	r3, r7, #8
 80020be:	4948      	ldr	r1, [pc, #288]	; (80021e0 <task2A2L+0x7b8>)
 80020c0:	4618      	mov	r0, r3
 80020c2:	f00e fde3 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	461a      	mov	r2, r3
 80020cc:	2114      	movs	r1, #20
 80020ce:	200a      	movs	r0, #10
 80020d0:	f004 fa6a 	bl	80065a8 <OLED_ShowString>
				OLED_Refresh_Gram();
 80020d4:	f004 f8f4 	bl	80062c0 <OLED_Refresh_Gram>
			while (moving) {
 80020d8:	4b3f      	ldr	r3, [pc, #252]	; (80021d8 <task2A2L+0x7b0>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1da      	bne.n	8002096 <task2A2L+0x66e>
 80020e0:	e000      	b.n	80020e4 <task2A2L+0x6bc>
					break;
 80020e2:	bf00      	nop
			}
			moving = 0;
 80020e4:	4b3c      	ldr	r3, [pc, #240]	; (80021d8 <task2A2L+0x7b0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(60.0, 1); // prev 23
 80020ea:	2001      	movs	r0, #1
 80020ec:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80021ec <task2A2L+0x7c4>
 80020f0:	f002 fb4e 	bl	8004790 <moveGyroPIDOld>
			moving = 0;
 80020f4:	4b38      	ldr	r3, [pc, #224]	; (80021d8 <task2A2L+0x7b0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = 115;
 80020fa:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <task2A2L+0x7a8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2273      	movs	r2, #115	; 0x73
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8002102:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <task2A2L+0x7ac>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800210a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 800210c:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <task2A2L+0x7ac>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002114:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100); // delay because gyro needs time to reset
 8002116:	2064      	movs	r0, #100	; 0x64
 8002118:	f7ff fbaa 	bl	8001870 <delay>
			moving = 1;
 800211c:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <task2A2L+0x7b0>)
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8002122:	e020      	b.n	8002166 <task2A2L+0x73e>
				if ((int) totalAngle >= 105) {
 8002124:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <task2A2L+0x7b4>)
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	f7fe fd13 	bl	8000b58 <__aeabi_d2iz>
 8002132:	4603      	mov	r3, r0
 8002134:	2b68      	cmp	r3, #104	; 0x68
 8002136:	dc1b      	bgt.n	8002170 <task2A2L+0x748>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002138:	4b28      	ldr	r3, [pc, #160]	; (80021dc <task2A2L+0x7b4>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fd09 	bl	8000b58 <__aeabi_d2iz>
 8002146:	4602      	mov	r2, r0
 8002148:	f107 0308 	add.w	r3, r7, #8
 800214c:	4924      	ldr	r1, [pc, #144]	; (80021e0 <task2A2L+0x7b8>)
 800214e:	4618      	mov	r0, r3
 8002150:	f00e fd9c 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8002154:	f107 0308 	add.w	r3, r7, #8
 8002158:	461a      	mov	r2, r3
 800215a:	2114      	movs	r1, #20
 800215c:	200a      	movs	r0, #10
 800215e:	f004 fa23 	bl	80065a8 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002162:	f004 f8ad 	bl	80062c0 <OLED_Refresh_Gram>
			while (moving) {
 8002166:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <task2A2L+0x7b0>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1da      	bne.n	8002124 <task2A2L+0x6fc>
 800216e:	e000      	b.n	8002172 <task2A2L+0x74a>
					break;
 8002170:	bf00      	nop
			}
			actualAngle = 0;
 8002172:	491d      	ldr	r1, [pc, #116]	; (80021e8 <task2A2L+0x7c0>)
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 8002180:	f000 ff6c 	bl	800305c <moveUltraEnd>
		}
	}

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <task2A2L+0x7ac>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2200      	movs	r2, #0
 800218a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <task2A2L+0x7ac>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2200      	movs	r2, #0
 8002192:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance->CCR4 = STRAIGHT;
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <task2A2L+0x7a8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2296      	movs	r2, #150	; 0x96
 800219a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800219c:	2201      	movs	r2, #1
 800219e:	2108      	movs	r1, #8
 80021a0:	4813      	ldr	r0, [pc, #76]	; (80021f0 <task2A2L+0x7c8>)
 80021a2:	f005 fb27 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2104      	movs	r1, #4
 80021aa:	4811      	ldr	r0, [pc, #68]	; (80021f0 <task2A2L+0x7c8>)
 80021ac:	f005 fb22 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80021b0:	2201      	movs	r2, #1
 80021b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b6:	480f      	ldr	r0, [pc, #60]	; (80021f4 <task2A2L+0x7cc>)
 80021b8:	f005 fb1c 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	2120      	movs	r1, #32
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <task2A2L+0x7d0>)
 80021c2:	f005 fb17 	bl	80077f4 <HAL_GPIO_WritePin>
}
 80021c6:	bf00      	nop
 80021c8:	3780      	adds	r7, #128	; 0x80
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000258 	.word	0x20000258
 80021d4:	20000378 	.word	0x20000378
 80021d8:	20000414 	.word	0x20000414
 80021dc:	20000418 	.word	0x20000418
 80021e0:	080148a8 	.word	0x080148a8
 80021e4:	42340000 	.word	0x42340000
 80021e8:	20000420 	.word	0x20000420
 80021ec:	42700000 	.word	0x42700000
 80021f0:	40020000 	.word	0x40020000
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40020800 	.word	0x40020800

080021fc <secObstL>:

void secObstL() {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
//
//	osDelay(200);
//
//	moveGyroPID(distanceTraveled, 1);

	left90();
 8002200:	f003 f990 	bl	8005524 <left90>
	osDelay(400);
 8002204:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002208:	f00b f95d 	bl	800d4c6 <osDelay>
	moveGyroPID(5, 1);
 800220c:	2001      	movs	r0, #1
 800220e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002212:	f001 fb5d 	bl	80038d0 <moveGyroPID>
	osDelay(400);
 8002216:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800221a:	f00b f954 	bl	800d4c6 <osDelay>
	right90();
 800221e:	f003 fbdd 	bl	80059dc <right90>
	osDelay(400);
 8002222:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002226:	f00b f94e 	bl	800d4c6 <osDelay>
	moveGyroPID(20, 1);
 800222a:	2001      	movs	r0, #1
 800222c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002230:	f001 fb4e 	bl	80038d0 <moveGyroPID>
	osDelay(400);
 8002234:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002238:	f00b f945 	bl	800d4c6 <osDelay>
	right90();
 800223c:	f003 fbce 	bl	80059dc <right90>
	osDelay(400);
 8002240:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002244:	f00b f93f 	bl	800d4c6 <osDelay>
	moveGyroPID(70, 1);
 8002248:	2001      	movs	r0, #1
 800224a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80022b8 <secObstL+0xbc>
 800224e:	f001 fb3f 	bl	80038d0 <moveGyroPID>
	osDelay(400);
 8002252:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002256:	f00b f936 	bl	800d4c6 <osDelay>
	right90();
 800225a:	f003 fbbf 	bl	80059dc <right90>
	osDelay(400);
 800225e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002262:	f00b f930 	bl	800d4c6 <osDelay>
	moveGyroPIDFast(distanceTraveled + 10, 1);
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <secObstL+0xc0>)
 8002268:	edd3 7a00 	vldr	s15, [r3]
 800226c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002270:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002274:	2001      	movs	r0, #1
 8002276:	eeb0 0a67 	vmov.f32	s0, s15
 800227a:	f001 fed9 	bl	8004030 <moveGyroPIDFast>
	osDelay(400);
 800227e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002282:	f00b f920 	bl	800d4c6 <osDelay>
	right90();
 8002286:	f003 fba9 	bl	80059dc <right90>
	osDelay(400);
 800228a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800228e:	f00b f91a 	bl	800d4c6 <osDelay>
	moveGyroPID(8, 1);
 8002292:	2001      	movs	r0, #1
 8002294:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8002298:	f001 fb1a 	bl	80038d0 <moveGyroPID>
	osDelay(400);
 800229c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022a0:	f00b f911 	bl	800d4c6 <osDelay>
	left90();
 80022a4:	f003 f93e 	bl	8005524 <left90>
	osDelay(400);
 80022a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022ac:	f00b f90b 	bl	800d4c6 <osDelay>
	parkingMoveUltra();
 80022b0:	f000 fa8a 	bl	80027c8 <parkingMoveUltra>
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	428c0000 	.word	0x428c0000
 80022bc:	20000434 	.word	0x20000434

080022c0 <secObstR>:

void secObstR() {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	right90();
 80022c4:	f003 fb8a 	bl	80059dc <right90>
	osDelay(400);
 80022c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022cc:	f00b f8fb 	bl	800d4c6 <osDelay>
	moveGyroPID(5, 1);
 80022d0:	2001      	movs	r0, #1
 80022d2:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80022d6:	f001 fafb 	bl	80038d0 <moveGyroPID>
	osDelay(400);
 80022da:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022de:	f00b f8f2 	bl	800d4c6 <osDelay>
	left90();
 80022e2:	f003 f91f 	bl	8005524 <left90>
	osDelay(400);
 80022e6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022ea:	f00b f8ec 	bl	800d4c6 <osDelay>
	moveGyroPID(20, 1);
 80022ee:	2001      	movs	r0, #1
 80022f0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80022f4:	f001 faec 	bl	80038d0 <moveGyroPID>
	osDelay(400);
 80022f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022fc:	f00b f8e3 	bl	800d4c6 <osDelay>
	left90();
 8002300:	f003 f910 	bl	8005524 <left90>
	osDelay(400);
 8002304:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002308:	f00b f8dd 	bl	800d4c6 <osDelay>
	moveGyroPID(70, 1);
 800230c:	2001      	movs	r0, #1
 800230e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800237c <secObstR+0xbc>
 8002312:	f001 fadd 	bl	80038d0 <moveGyroPID>
	osDelay(400);
 8002316:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800231a:	f00b f8d4 	bl	800d4c6 <osDelay>
	left90();
 800231e:	f003 f901 	bl	8005524 <left90>
	osDelay(400);
 8002322:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002326:	f00b f8ce 	bl	800d4c6 <osDelay>
	moveGyroPIDFast(distanceTraveled + 10, 1);
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <secObstR+0xc0>)
 800232c:	edd3 7a00 	vldr	s15, [r3]
 8002330:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002334:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002338:	2001      	movs	r0, #1
 800233a:	eeb0 0a67 	vmov.f32	s0, s15
 800233e:	f001 fe77 	bl	8004030 <moveGyroPIDFast>
	osDelay(400);
 8002342:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002346:	f00b f8be 	bl	800d4c6 <osDelay>
	left90();
 800234a:	f003 f8eb 	bl	8005524 <left90>
	osDelay(400);
 800234e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002352:	f00b f8b8 	bl	800d4c6 <osDelay>
	moveGyroPID(8, 1);
 8002356:	2001      	movs	r0, #1
 8002358:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800235c:	f001 fab8 	bl	80038d0 <moveGyroPID>
	osDelay(400);
 8002360:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002364:	f00b f8af 	bl	800d4c6 <osDelay>
	right90();
 8002368:	f003 fb38 	bl	80059dc <right90>
	osDelay(400);
 800236c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002370:	f00b f8a9 	bl	800d4c6 <osDelay>
	parkingMoveUltra();
 8002374:	f000 fa28 	bl	80027c8 <parkingMoveUltra>
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	428c0000 	.word	0x428c0000
 8002380:	20000434 	.word	0x20000434
 8002384:	00000000 	.word	0x00000000

08002388 <moveUltra>:

void moveUltra() {
 8002388:	b580      	push	{r7, lr}
 800238a:	b0ae      	sub	sp, #184	; 0xb8
 800238c:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800238e:	2100      	movs	r1, #0
 8002390:	48bf      	ldr	r0, [pc, #764]	; (8002690 <moveUltra+0x308>)
 8002392:	f008 fae5 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002396:	2108      	movs	r1, #8
 8002398:	48bd      	ldr	r0, [pc, #756]	; (8002690 <moveUltra+0x308>)
 800239a:	f008 fae1 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800239e:	210c      	movs	r1, #12
 80023a0:	48bc      	ldr	r0, [pc, #752]	; (8002694 <moveUltra+0x30c>)
 80023a2:	f008 fadd 	bl	800a960 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80023a6:	4bbb      	ldr	r3, [pc, #748]	; (8002694 <moveUltra+0x30c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2296      	movs	r2, #150	; 0x96
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(40);
 80023ae:	2028      	movs	r0, #40	; 0x28
 80023b0:	f00b f889 	bl	800d4c6 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI, 3650, 3850,
 80023b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023b8:	2224      	movs	r2, #36	; 0x24
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f00d fddd 	bl	800ff7c <memset>
 80023c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023c6:	653b      	str	r3, [r7, #80]	; 0x50
 80023c8:	f640 6342 	movw	r3, #3650	; 0xe42
 80023cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80023ce:	f640 730a 	movw	r3, #3850	; 0xf0a
 80023d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023d4:	4bb0      	ldr	r3, [pc, #704]	; (8002698 <moveUltra+0x310>)
 80023d6:	663b      	str	r3, [r7, #96]	; 0x60
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI, 3650, 3850,
 80023d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023dc:	2224      	movs	r2, #36	; 0x24
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f00d fdcb 	bl	800ff7c <memset>
 80023e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ec:	f640 6342 	movw	r3, #3650	; 0xe42
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
 80023f2:	f640 730a 	movw	r3, #3850	; 0xf0a
 80023f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80023f8:	4ba7      	ldr	r3, [pc, #668]	; (8002698 <moveUltra+0x310>)
 80023fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 80023fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002400:	4618      	mov	r0, r3
 8002402:	f004 f98f 	bl	8006724 <PIDController_Init>
	PIDController_Init(&pidRight);
 8002406:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800240a:	4618      	mov	r0, r3
 800240c:	f004 f98a 	bl	8006724 <PIDController_Init>

	//reset angle
	actualAngle = 0;
 8002410:	49a2      	ldr	r1, [pc, #648]	; (800269c <moveUltra+0x314>)
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	e9c1 2300 	strd	r2, r3, [r1]

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 800241e:	4ba0      	ldr	r3, [pc, #640]	; (80026a0 <moveUltra+0x318>)
 8002420:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float wheel_rotationTicksR = 779; // for back right wheel
 8002424:	4b9f      	ldr	r3, [pc, #636]	; (80026a4 <moveUltra+0x31c>)
 8002426:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	float wheel_circumference = 21.1; // NEED TO MEASURE AND CHANGE
 800242a:	4b9f      	ldr	r3, [pc, #636]	; (80026a8 <moveUltra+0x320>)
 800242c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8002430:	213c      	movs	r1, #60	; 0x3c
 8002432:	489e      	ldr	r0, [pc, #632]	; (80026ac <moveUltra+0x324>)
 8002434:	f008 fd7a 	bl	800af2c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8002438:	213c      	movs	r1, #60	; 0x3c
 800243a:	489d      	ldr	r0, [pc, #628]	; (80026b0 <moveUltra+0x328>)
 800243c:	f008 fd76 	bl	800af2c <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8002440:	4b9a      	ldr	r3, [pc, #616]	; (80026ac <moveUltra+0x324>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 800244a:	4b99      	ldr	r3, [pc, #612]	; (80026b0 <moveUltra+0x328>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8002454:	f004 fe50 	bl	80070f8 <HAL_GetTick>
 8002458:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	uint32_t prevTime = startTime;
 800245c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002460:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distErrOffset;

	int servo;

	//pwm values
	uint16_t pwmValA = 2400;
 8002480:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002484:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint16_t pwmValC = 2400;
 8002488:	f44f 6316 	mov.w	r3, #2400	; 0x960
 800248c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002490:	2201      	movs	r2, #1
 8002492:	2108      	movs	r1, #8
 8002494:	4887      	ldr	r0, [pc, #540]	; (80026b4 <moveUltra+0x32c>)
 8002496:	f005 f9ad 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800249a:	2200      	movs	r2, #0
 800249c:	2104      	movs	r1, #4
 800249e:	4885      	ldr	r0, [pc, #532]	; (80026b4 <moveUltra+0x32c>)
 80024a0:	f005 f9a8 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80024a4:	2201      	movs	r2, #1
 80024a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024aa:	4883      	ldr	r0, [pc, #524]	; (80026b8 <moveUltra+0x330>)
 80024ac:	f005 f9a2 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2120      	movs	r1, #32
 80024b4:	4881      	ldr	r0, [pc, #516]	; (80026bc <moveUltra+0x334>)
 80024b6:	f005 f99d 	bl	80077f4 <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80024ba:	4b75      	ldr	r3, [pc, #468]	; (8002690 <moveUltra+0x308>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 80024c2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 80024c4:	4b72      	ldr	r3, [pc, #456]	; (8002690 <moveUltra+0x308>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 80024cc:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 80024ce:	f004 fe13 	bl	80070f8 <HAL_GetTick>
 80024d2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 80024d6:	4b7a      	ldr	r3, [pc, #488]	; (80026c0 <moveUltra+0x338>)
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 80024dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80024e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b3c      	cmp	r3, #60	; 0x3c
 80024e8:	d9e7      	bls.n	80024ba <moveUltra+0x132>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 80024ea:	4b70      	ldr	r3, [pc, #448]	; (80026ac <moveUltra+0x324>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 80024f4:	4b6e      	ldr	r3, [pc, #440]	; (80026b0 <moveUltra+0x328>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8002508:	4b68      	ldr	r3, [pc, #416]	; (80026ac <moveUltra+0x324>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b10      	cmp	r3, #16
 8002514:	d118      	bne.n	8002548 <moveUltra+0x1c0>
				if (leftTick < leftTick_prev)
 8002516:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800251a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800251e:	429a      	cmp	r2, r3
 8002520:	da07      	bge.n	8002532 <moveUltra+0x1aa>
					diffLeft = leftTick_prev - leftTick;
 8002522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002526:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002530:	e022      	b.n	8002578 <moveUltra+0x1f0>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8002532:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002536:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800253a:	33ff      	adds	r3, #255	; 0xff
 800253c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002540:	4413      	add	r3, r2
 8002542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002546:	e017      	b.n	8002578 <moveUltra+0x1f0>
			} else {
				if (leftTick > leftTick_prev)
 8002548:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800254c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002550:	429a      	cmp	r2, r3
 8002552:	dd07      	ble.n	8002564 <moveUltra+0x1dc>
					diffLeft = leftTick - leftTick_prev;
 8002554:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002558:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002562:	e009      	b.n	8002578 <moveUltra+0x1f0>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8002564:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002568:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800256c:	33ff      	adds	r3, #255	; 0xff
 800256e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002572:	4413      	add	r3, r2
 8002574:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8002578:	4b4d      	ldr	r3, [pc, #308]	; (80026b0 <moveUltra+0x328>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b10      	cmp	r3, #16
 8002584:	d115      	bne.n	80025b2 <moveUltra+0x22a>
				if (rightTick < rightTick_prev)
 8002586:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002588:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800258c:	429a      	cmp	r2, r3
 800258e:	da06      	bge.n	800259e <moveUltra+0x216>
					diffRight = rightTick_prev - rightTick;
 8002590:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002594:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800259c:	e01e      	b.n	80025dc <moveUltra+0x254>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 800259e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025a0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80025a4:	33ff      	adds	r3, #255	; 0xff
 80025a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025aa:	4413      	add	r3, r2
 80025ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025b0:	e014      	b.n	80025dc <moveUltra+0x254>
			} else {
				if (rightTick > rightTick_prev)
 80025b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80025b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025b8:	429a      	cmp	r2, r3
 80025ba:	dd06      	ble.n	80025ca <moveUltra+0x242>
					diffRight = rightTick - rightTick_prev;
 80025bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80025be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025c8:	e008      	b.n	80025dc <moveUltra+0x254>
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 80025ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025ce:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80025d2:	33ff      	adds	r3, #255	; 0xff
 80025d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80025d6:	4413      	add	r3, r2
 80025d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 80025dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025e0:	ee07 3a90 	vmov	s15, r3
 80025e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025e8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80025ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025f0:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80025f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 80025fc:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002600:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002608:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 800260c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002610:	ee07 3a90 	vmov	s15, r3
 8002614:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002618:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800261c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002620:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002628:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 800262c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002630:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002638:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//						pwmValC = PIDController_Update(&pidRight, totalDistance_left,
//								totalDistance_right * STRAIGHTRATIOF, pwmValC)
//
//						;

			if (actualAngle < -0.33) //veering right
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <moveUltra+0x314>)
 800263e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002642:	a30f      	add	r3, pc, #60	; (adr r3, 8002680 <moveUltra+0x2f8>)
 8002644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002648:	f7fe fa48 	bl	8000adc <__aeabi_dcmplt>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d004      	beq.n	800265c <moveUltra+0x2d4>
					{

				htim1.Instance->CCR4 = 140; //left abit. prev: 138
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <moveUltra+0x30c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	228c      	movs	r2, #140	; 0x8c
 8002658:	641a      	str	r2, [r3, #64]	; 0x40
 800265a:	e037      	b.n	80026cc <moveUltra+0x344>
			} else if (actualAngle > 0.33) //veering left
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <moveUltra+0x314>)
 800265e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002662:	a309      	add	r3, pc, #36	; (adr r3, 8002688 <moveUltra+0x300>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	f7fe fa56 	bl	8000b18 <__aeabi_dcmpgt>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d028      	beq.n	80026c4 <moveUltra+0x33c>
					{

				htim1.Instance->CCR4 = 155; //right a bit. prev: 152
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <moveUltra+0x30c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	229b      	movs	r2, #155	; 0x9b
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
 800267a:	e027      	b.n	80026cc <moveUltra+0x344>
 800267c:	f3af 8000 	nop.w
 8002680:	51eb851f 	.word	0x51eb851f
 8002684:	bfd51eb8 	.word	0xbfd51eb8
 8002688:	51eb851f 	.word	0x51eb851f
 800268c:	3fd51eb8 	.word	0x3fd51eb8
 8002690:	20000378 	.word	0x20000378
 8002694:	20000258 	.word	0x20000258
 8002698:	3d4ccccd 	.word	0x3d4ccccd
 800269c:	20000420 	.word	0x20000420
 80026a0:	44440000 	.word	0x44440000
 80026a4:	4442c000 	.word	0x4442c000
 80026a8:	41a8cccd 	.word	0x41a8cccd
 80026ac:	200002a0 	.word	0x200002a0
 80026b0:	20000330 	.word	0x20000330
 80026b4:	40020000 	.word	0x40020000
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40020800 	.word	0x40020800
 80026c0:	20000414 	.word	0x20000414
			} else {
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 80026c4:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <moveUltra+0x420>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2296      	movs	r2, #150	; 0x96
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
			}

			osDelay(10);
 80026cc:	200a      	movs	r0, #10
 80026ce:	f00a fefa 	bl	800d4c6 <osDelay>

			prevTime = currTime;
 80026d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 80026da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 80026e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 13.5) {
 80026e8:	4b30      	ldr	r3, [pc, #192]	; (80027ac <moveUltra+0x424>)
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	eeb2 7a0b 	vmov.f32	s14, #43	; 0x41580000  13.5
 80026f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fa:	d511      	bpl.n	8002720 <moveUltra+0x398>
				pwmValA = 1600;
 80026fc:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002700:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
				pwmValC = 1600;
 8002704:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002708:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
				if (Distance < 9.5)
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <moveUltra+0x424>)
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8002716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800271a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271e:	d400      	bmi.n	8002722 <moveUltra+0x39a>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002720:	e6cb      	b.n	80024ba <moveUltra+0x132>
					break;
 8002722:	bf00      	nop
			}
		}
	}

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <moveUltra+0x428>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2200      	movs	r2, #0
 800272a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_3, 0);
 800272c:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <moveUltra+0x428>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2200      	movs	r2, #0
 8002732:	63da      	str	r2, [r3, #60]	; 0x3c
	distanceTraveled = distanceTraveled
			+ ((totalDistance_left + totalDistance_right) / 2) + 10 + 30; // travelled + err + not counting
 8002734:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002738:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800273c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002740:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002744:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002748:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <moveUltra+0x42c>)
 800274a:	edd3 7a00 	vldr	s15, [r3]
 800274e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002752:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002756:	ee77 7a87 	vadd.f32	s15, s15, s14
 800275a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800275e:	ee77 7a87 	vadd.f32	s15, s15, s14
	distanceTraveled = distanceTraveled
 8002762:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <moveUltra+0x42c>)
 8002764:	edc3 7a00 	vstr	s15, [r3]
//	offsetAngle = targetAngle - actualAngle;
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <moveUltra+0x420>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2296      	movs	r2, #150	; 0x96
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002770:	2201      	movs	r2, #1
 8002772:	2108      	movs	r1, #8
 8002774:	4810      	ldr	r0, [pc, #64]	; (80027b8 <moveUltra+0x430>)
 8002776:	f005 f83d 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800277a:	2200      	movs	r2, #0
 800277c:	2104      	movs	r1, #4
 800277e:	480e      	ldr	r0, [pc, #56]	; (80027b8 <moveUltra+0x430>)
 8002780:	f005 f838 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8002784:	2201      	movs	r2, #1
 8002786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800278a:	480c      	ldr	r0, [pc, #48]	; (80027bc <moveUltra+0x434>)
 800278c:	f005 f832 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8002790:	2200      	movs	r2, #0
 8002792:	2120      	movs	r1, #32
 8002794:	480a      	ldr	r0, [pc, #40]	; (80027c0 <moveUltra+0x438>)
 8002796:	f005 f82d 	bl	80077f4 <HAL_GPIO_WritePin>

	osDelay(10);
 800279a:	200a      	movs	r0, #10
 800279c:	f00a fe93 	bl	800d4c6 <osDelay>
	return;
 80027a0:	bf00      	nop

}
 80027a2:	37b8      	adds	r7, #184	; 0xb8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000258 	.word	0x20000258
 80027ac:	20000448 	.word	0x20000448
 80027b0:	20000378 	.word	0x20000378
 80027b4:	20000434 	.word	0x20000434
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40020800 	.word	0x40020800
 80027c4:	00000000 	.word	0x00000000

080027c8 <parkingMoveUltra>:

void parkingMoveUltra() {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0ae      	sub	sp, #184	; 0xb8
 80027cc:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80027ce:	2100      	movs	r1, #0
 80027d0:	488a      	ldr	r0, [pc, #552]	; (80029fc <parkingMoveUltra+0x234>)
 80027d2:	f008 f8c5 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80027d6:	2108      	movs	r1, #8
 80027d8:	4888      	ldr	r0, [pc, #544]	; (80029fc <parkingMoveUltra+0x234>)
 80027da:	f008 f8c1 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80027de:	210c      	movs	r1, #12
 80027e0:	4887      	ldr	r0, [pc, #540]	; (8002a00 <parkingMoveUltra+0x238>)
 80027e2:	f008 f8bd 	bl	800a960 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80027e6:	4b86      	ldr	r3, [pc, #536]	; (8002a00 <parkingMoveUltra+0x238>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2296      	movs	r2, #150	; 0x96
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 80027ee:	2064      	movs	r0, #100	; 0x64
 80027f0:	f00a fe69 	bl	800d4c6 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI, 1900, 2100,
 80027f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027f8:	2224      	movs	r2, #36	; 0x24
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f00d fbbd 	bl	800ff7c <memset>
 8002802:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002806:	653b      	str	r3, [r7, #80]	; 0x50
 8002808:	f240 736c 	movw	r3, #1900	; 0x76c
 800280c:	65bb      	str	r3, [r7, #88]	; 0x58
 800280e:	f640 0334 	movw	r3, #2100	; 0x834
 8002812:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002814:	4b7b      	ldr	r3, [pc, #492]	; (8002a04 <parkingMoveUltra+0x23c>)
 8002816:	663b      	str	r3, [r7, #96]	; 0x60
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI, 1900, 2100,
 8002818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800281c:	2224      	movs	r2, #36	; 0x24
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f00d fbab 	bl	800ff7c <memset>
 8002826:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800282c:	f240 736c 	movw	r3, #1900	; 0x76c
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
 8002832:	f640 0334 	movw	r3, #2100	; 0x834
 8002836:	63bb      	str	r3, [r7, #56]	; 0x38
 8002838:	4b72      	ldr	r3, [pc, #456]	; (8002a04 <parkingMoveUltra+0x23c>)
 800283a:	63fb      	str	r3, [r7, #60]	; 0x3c
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 800283c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002840:	4618      	mov	r0, r3
 8002842:	f003 ff6f 	bl	8006724 <PIDController_Init>
	PIDController_Init(&pidRight);
 8002846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800284a:	4618      	mov	r0, r3
 800284c:	f003 ff6a 	bl	8006724 <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8002850:	4b6d      	ldr	r3, [pc, #436]	; (8002a08 <parkingMoveUltra+0x240>)
 8002852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float wheel_rotationTicksR = 779; // for back right wheel
 8002856:	4b6d      	ldr	r3, [pc, #436]	; (8002a0c <parkingMoveUltra+0x244>)
 8002858:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	float wheel_circumference = 23.56f; // NEED TO MEASURE AND CHANGE
 800285c:	4b6c      	ldr	r3, [pc, #432]	; (8002a10 <parkingMoveUltra+0x248>)
 800285e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8002862:	213c      	movs	r1, #60	; 0x3c
 8002864:	486b      	ldr	r0, [pc, #428]	; (8002a14 <parkingMoveUltra+0x24c>)
 8002866:	f008 fb61 	bl	800af2c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 800286a:	213c      	movs	r1, #60	; 0x3c
 800286c:	486a      	ldr	r0, [pc, #424]	; (8002a18 <parkingMoveUltra+0x250>)
 800286e:	f008 fb5d 	bl	800af2c <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8002872:	4b68      	ldr	r3, [pc, #416]	; (8002a14 <parkingMoveUltra+0x24c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 800287c:	4b66      	ldr	r3, [pc, #408]	; (8002a18 <parkingMoveUltra+0x250>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8002886:	f004 fc37 	bl	80070f8 <HAL_GetTick>
 800288a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	uint32_t prevTime = startTime;
 800288e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 80028b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80028b6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint16_t pwmValC = 2000;
 80028ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80028be:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80028c2:	2201      	movs	r2, #1
 80028c4:	2108      	movs	r1, #8
 80028c6:	4855      	ldr	r0, [pc, #340]	; (8002a1c <parkingMoveUltra+0x254>)
 80028c8:	f004 ff94 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80028cc:	2200      	movs	r2, #0
 80028ce:	2104      	movs	r1, #4
 80028d0:	4852      	ldr	r0, [pc, #328]	; (8002a1c <parkingMoveUltra+0x254>)
 80028d2:	f004 ff8f 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80028d6:	2201      	movs	r2, #1
 80028d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028dc:	4850      	ldr	r0, [pc, #320]	; (8002a20 <parkingMoveUltra+0x258>)
 80028de:	f004 ff89 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80028e2:	2200      	movs	r2, #0
 80028e4:	2120      	movs	r1, #32
 80028e6:	484f      	ldr	r0, [pc, #316]	; (8002a24 <parkingMoveUltra+0x25c>)
 80028e8:	f004 ff84 	bl	80077f4 <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80028ec:	4b43      	ldr	r3, [pc, #268]	; (80029fc <parkingMoveUltra+0x234>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 80028f4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 80028f6:	4b41      	ldr	r3, [pc, #260]	; (80029fc <parkingMoveUltra+0x234>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 80028fe:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 8002900:	f004 fbfa 	bl	80070f8 <HAL_GetTick>
 8002904:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 8002908:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <parkingMoveUltra+0x260>)
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60) {
 800290e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b3c      	cmp	r3, #60	; 0x3c
 800291a:	d9e7      	bls.n	80028ec <parkingMoveUltra+0x124>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 800291c:	4b3d      	ldr	r3, [pc, #244]	; (8002a14 <parkingMoveUltra+0x24c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8002926:	4b3c      	ldr	r3, [pc, #240]	; (8002a18 <parkingMoveUltra+0x250>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 800293a:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <parkingMoveUltra+0x24c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b10      	cmp	r3, #16
 8002946:	d118      	bne.n	800297a <parkingMoveUltra+0x1b2>
				if (leftTick < leftTick_prev)
 8002948:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800294c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002950:	429a      	cmp	r2, r3
 8002952:	da07      	bge.n	8002964 <parkingMoveUltra+0x19c>
					diffLeft = leftTick_prev - leftTick;
 8002954:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002958:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002962:	e022      	b.n	80029aa <parkingMoveUltra+0x1e2>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8002964:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002968:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800296c:	33ff      	adds	r3, #255	; 0xff
 800296e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002972:	4413      	add	r3, r2
 8002974:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002978:	e017      	b.n	80029aa <parkingMoveUltra+0x1e2>
			} else {
				if (leftTick > leftTick_prev)
 800297a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800297e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002982:	429a      	cmp	r2, r3
 8002984:	dd07      	ble.n	8002996 <parkingMoveUltra+0x1ce>
					diffLeft = leftTick - leftTick_prev;
 8002986:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800298a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002994:	e009      	b.n	80029aa <parkingMoveUltra+0x1e2>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8002996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800299a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800299e:	33ff      	adds	r3, #255	; 0xff
 80029a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029a4:	4413      	add	r3, r2
 80029a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 80029aa:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <parkingMoveUltra+0x250>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d115      	bne.n	80029e4 <parkingMoveUltra+0x21c>
				if (rightTick < rightTick_prev)
 80029b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80029ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029be:	429a      	cmp	r2, r3
 80029c0:	da06      	bge.n	80029d0 <parkingMoveUltra+0x208>
					diffRight = rightTick_prev - rightTick;
 80029c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029ce:	e036      	b.n	8002a3e <parkingMoveUltra+0x276>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 80029d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029d2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80029d6:	33ff      	adds	r3, #255	; 0xff
 80029d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029dc:	4413      	add	r3, r2
 80029de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029e2:	e02c      	b.n	8002a3e <parkingMoveUltra+0x276>
			} else {
				if (rightTick > rightTick_prev)
 80029e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80029e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029ea:	429a      	cmp	r2, r3
 80029ec:	dd1e      	ble.n	8002a2c <parkingMoveUltra+0x264>
					diffRight = rightTick - rightTick_prev;
 80029ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80029f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029fa:	e020      	b.n	8002a3e <parkingMoveUltra+0x276>
 80029fc:	20000378 	.word	0x20000378
 8002a00:	20000258 	.word	0x20000258
 8002a04:	3d4ccccd 	.word	0x3d4ccccd
 8002a08:	44440000 	.word	0x44440000
 8002a0c:	4442c000 	.word	0x4442c000
 8002a10:	41bc7ae1 	.word	0x41bc7ae1
 8002a14:	200002a0 	.word	0x200002a0
 8002a18:	20000330 	.word	0x20000330
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40020800 	.word	0x40020800
 8002a28:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8002a2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a30:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002a34:	33ff      	adds	r3, #255	; 0xff
 8002a36:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002a38:	4413      	add	r3, r2
 8002a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8002a3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a4a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a52:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 8002a5e:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002a62:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8002a6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a7a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a82:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 8002a8e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002a92:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//
//			pwmValC = PIDController_Update(&pidRight, totalDistance_left,
//					totalDistance_right * STRAIGHTRATIOF, pwmValC);

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (actualAngle < -0.333) //veering right
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <parkingMoveUltra+0x400>)
 8002aa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aa4:	a344      	add	r3, pc, #272	; (adr r3, 8002bb8 <parkingMoveUltra+0x3f0>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	f7fe f817 	bl	8000adc <__aeabi_dcmplt>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <parkingMoveUltra+0x2f4>
					{

				htim1.Instance->CCR4 = 138; //left abit
 8002ab4:	4b45      	ldr	r3, [pc, #276]	; (8002bcc <parkingMoveUltra+0x404>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	228a      	movs	r2, #138	; 0x8a
 8002aba:	641a      	str	r2, [r3, #64]	; 0x40
//				osDelay(10);
			}
			if (actualAngle > 0.333) //veering left
 8002abc:	4b42      	ldr	r3, [pc, #264]	; (8002bc8 <parkingMoveUltra+0x400>)
 8002abe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ac2:	a33f      	add	r3, pc, #252	; (adr r3, 8002bc0 <parkingMoveUltra+0x3f8>)
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	f7fe f826 	bl	8000b18 <__aeabi_dcmpgt>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <parkingMoveUltra+0x312>
					{

				htim1.Instance->CCR4 = 155; //right a bit
 8002ad2:	4b3e      	ldr	r3, [pc, #248]	; (8002bcc <parkingMoveUltra+0x404>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	229b      	movs	r2, #155	; 0x9b
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
//				osDelay(10);
			}
			if (actualAngle == 0.00) {
 8002ada:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <parkingMoveUltra+0x400>)
 8002adc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	f7fd ffee 	bl	8000ac8 <__aeabi_dcmpeq>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <parkingMoveUltra+0x332>
//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 8002af2:	4b36      	ldr	r3, [pc, #216]	; (8002bcc <parkingMoveUltra+0x404>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2296      	movs	r2, #150	; 0x96
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
//				osDelay(10);
			}

			prevTime = currTime;
 8002afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002afe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 8002b02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8002b0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 8) // prev was 10
 8002b10:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <parkingMoveUltra+0x408>)
 8002b12:	edd3 7a00 	vldr	s15, [r3]
 8002b16:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b22:	d511      	bpl.n	8002b48 <parkingMoveUltra+0x380>
					{
				pwmValA = 750;
 8002b24:	f240 23ee 	movw	r3, #750	; 0x2ee
 8002b28:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
				pwmValC = 750;
 8002b2c:	f240 23ee 	movw	r3, #750	; 0x2ee
 8002b30:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
				if (Distance < 4)
 8002b34:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <parkingMoveUltra+0x408>)
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b46:	d400      	bmi.n	8002b4a <parkingMoveUltra+0x382>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002b48:	e6d0      	b.n	80028ec <parkingMoveUltra+0x124>
					break;
 8002b4a:	bf00      	nop
			}
		}
	}

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA / 4);
 8002b4c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002b50:	089b      	lsrs	r3, r3, #2
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <parkingMoveUltra+0x40c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_3, pwmValC / 4);
 8002b5a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <parkingMoveUltra+0x40c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	63da      	str	r2, [r3, #60]	; 0x3c

//	moving = 0;
	move(0, 0);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8002bd8 <parkingMoveUltra+0x410>
 8002b6e:	f002 f8e9 	bl	8004d44 <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002b72:	2201      	movs	r2, #1
 8002b74:	2108      	movs	r1, #8
 8002b76:	4819      	ldr	r0, [pc, #100]	; (8002bdc <parkingMoveUltra+0x414>)
 8002b78:	f004 fe3c 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2104      	movs	r1, #4
 8002b80:	4816      	ldr	r0, [pc, #88]	; (8002bdc <parkingMoveUltra+0x414>)
 8002b82:	f004 fe37 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8002b86:	2201      	movs	r2, #1
 8002b88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b8c:	4814      	ldr	r0, [pc, #80]	; (8002be0 <parkingMoveUltra+0x418>)
 8002b8e:	f004 fe31 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2120      	movs	r1, #32
 8002b96:	4813      	ldr	r0, [pc, #76]	; (8002be4 <parkingMoveUltra+0x41c>)
 8002b98:	f004 fe2c 	bl	80077f4 <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <parkingMoveUltra+0x404>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2296      	movs	r2, #150	; 0x96
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8002ba4:	200a      	movs	r0, #10
 8002ba6:	f00a fc8e 	bl	800d4c6 <osDelay>
	return;
 8002baa:	bf00      	nop
}
 8002bac:	37b8      	adds	r7, #184	; 0xb8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	f3af 8000 	nop.w
 8002bb8:	3b645a1d 	.word	0x3b645a1d
 8002bbc:	bfd54fdf 	.word	0xbfd54fdf
 8002bc0:	3b645a1d 	.word	0x3b645a1d
 8002bc4:	3fd54fdf 	.word	0x3fd54fdf
 8002bc8:	20000420 	.word	0x20000420
 8002bcc:	20000258 	.word	0x20000258
 8002bd0:	20000448 	.word	0x20000448
 8002bd4:	20000378 	.word	0x20000378
 8002bd8:	00000000 	.word	0x00000000
 8002bdc:	40020000 	.word	0x40020000
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40020800 	.word	0x40020800

08002be8 <tooClose>:

void tooClose() {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b0ae      	sub	sp, #184	; 0xb8
 8002bec:	af00      	add	r7, sp, #0
#define PID_LIM_MIN  1800 //
#define PID_LIM_MAX  2200 //

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002bee:	2100      	movs	r1, #0
 8002bf0:	488e      	ldr	r0, [pc, #568]	; (8002e2c <tooClose+0x244>)
 8002bf2:	f007 feb5 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002bf6:	2108      	movs	r1, #8
 8002bf8:	488c      	ldr	r0, [pc, #560]	; (8002e2c <tooClose+0x244>)
 8002bfa:	f007 feb1 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002bfe:	210c      	movs	r1, #12
 8002c00:	488b      	ldr	r0, [pc, #556]	; (8002e30 <tooClose+0x248>)
 8002c02:	f007 fead 	bl	800a960 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8002c06:	4b8a      	ldr	r3, [pc, #552]	; (8002e30 <tooClose+0x248>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2296      	movs	r2, #150	; 0x96
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(40);
 8002c0e:	2028      	movs	r0, #40	; 0x28
 8002c10:	f00a fc59 	bl	800d4c6 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI, 1900, 2100,
 8002c14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c18:	2224      	movs	r2, #36	; 0x24
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f00d f9ad 	bl	800ff7c <memset>
 8002c22:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c26:	653b      	str	r3, [r7, #80]	; 0x50
 8002c28:	f240 736c 	movw	r3, #1900	; 0x76c
 8002c2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c2e:	f640 0334 	movw	r3, #2100	; 0x834
 8002c32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c34:	4b7f      	ldr	r3, [pc, #508]	; (8002e34 <tooClose+0x24c>)
 8002c36:	663b      	str	r3, [r7, #96]	; 0x60
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI, 1900, 2100,
 8002c38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c3c:	2224      	movs	r2, #36	; 0x24
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f00d f99b 	bl	800ff7c <memset>
 8002c46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c4c:	f240 736c 	movw	r3, #1900	; 0x76c
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
 8002c52:	f640 0334 	movw	r3, #2100	; 0x834
 8002c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c58:	4b76      	ldr	r3, [pc, #472]	; (8002e34 <tooClose+0x24c>)
 8002c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8002c5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c60:	4618      	mov	r0, r3
 8002c62:	f003 fd5f 	bl	8006724 <PIDController_Init>
	PIDController_Init(&pidRight);
 8002c66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f003 fd5a 	bl	8006724 <PIDController_Init>

	//reset angle
	actualAngle = 0;
 8002c70:	4971      	ldr	r1, [pc, #452]	; (8002e38 <tooClose+0x250>)
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	e9c1 2300 	strd	r2, r3, [r1]

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8002c7e:	4b6f      	ldr	r3, [pc, #444]	; (8002e3c <tooClose+0x254>)
 8002c80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float wheel_rotationTicksR = 779; // for back right wheel
 8002c84:	4b6e      	ldr	r3, [pc, #440]	; (8002e40 <tooClose+0x258>)
 8002c86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	float wheel_circumference = 21.1; // NEED TO MEASURE AND CHANGE
 8002c8a:	4b6e      	ldr	r3, [pc, #440]	; (8002e44 <tooClose+0x25c>)
 8002c8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8002c90:	213c      	movs	r1, #60	; 0x3c
 8002c92:	486d      	ldr	r0, [pc, #436]	; (8002e48 <tooClose+0x260>)
 8002c94:	f008 f94a 	bl	800af2c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8002c98:	213c      	movs	r1, #60	; 0x3c
 8002c9a:	486c      	ldr	r0, [pc, #432]	; (8002e4c <tooClose+0x264>)
 8002c9c:	f008 f946 	bl	800af2c <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8002ca0:	4b69      	ldr	r3, [pc, #420]	; (8002e48 <tooClose+0x260>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8002caa:	4b68      	ldr	r3, [pc, #416]	; (8002e4c <tooClose+0x264>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8002cb4:	f004 fa20 	bl	80070f8 <HAL_GetTick>
 8002cb8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	uint32_t prevTime = startTime;
 8002cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distErrOffset;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8002ce0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002ce4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint16_t pwmValC = 2000;
 8002ce8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002cec:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2108      	movs	r1, #8
 8002cf4:	4856      	ldr	r0, [pc, #344]	; (8002e50 <tooClose+0x268>)
 8002cf6:	f004 fd7d 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	2104      	movs	r1, #4
 8002cfe:	4854      	ldr	r0, [pc, #336]	; (8002e50 <tooClose+0x268>)
 8002d00:	f004 fd78 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8002d04:	2200      	movs	r2, #0
 8002d06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d0a:	4852      	ldr	r0, [pc, #328]	; (8002e54 <tooClose+0x26c>)
 8002d0c:	f004 fd72 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8002d10:	2201      	movs	r2, #1
 8002d12:	2120      	movs	r1, #32
 8002d14:	4850      	ldr	r0, [pc, #320]	; (8002e58 <tooClose+0x270>)
 8002d16:	f004 fd6d 	bl	80077f4 <HAL_GPIO_WritePin>
	// outdoor

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002d1a:	4b44      	ldr	r3, [pc, #272]	; (8002e2c <tooClose+0x244>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8002d22:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8002d24:	4b41      	ldr	r3, [pc, #260]	; (8002e2c <tooClose+0x244>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002d2c:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 8002d2e:	f004 f9e3 	bl	80070f8 <HAL_GetTick>
 8002d32:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 8002d36:	4b49      	ldr	r3, [pc, #292]	; (8002e5c <tooClose+0x274>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 8002d3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b3c      	cmp	r3, #60	; 0x3c
 8002d48:	d9e7      	bls.n	8002d1a <tooClose+0x132>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8002d4a:	4b3f      	ldr	r3, [pc, #252]	; (8002e48 <tooClose+0x260>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8002d54:	4b3d      	ldr	r3, [pc, #244]	; (8002e4c <tooClose+0x264>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8002d68:	4b37      	ldr	r3, [pc, #220]	; (8002e48 <tooClose+0x260>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d118      	bne.n	8002da8 <tooClose+0x1c0>
				if (leftTick < leftTick_prev)
 8002d76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	da07      	bge.n	8002d92 <tooClose+0x1aa>
					diffLeft = leftTick_prev - leftTick;
 8002d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d90:	e022      	b.n	8002dd8 <tooClose+0x1f0>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8002d92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d96:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002d9a:	33ff      	adds	r3, #255	; 0xff
 8002d9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002da0:	4413      	add	r3, r2
 8002da2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002da6:	e017      	b.n	8002dd8 <tooClose+0x1f0>
			} else {
				if (leftTick > leftTick_prev)
 8002da8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002db0:	429a      	cmp	r2, r3
 8002db2:	dd07      	ble.n	8002dc4 <tooClose+0x1dc>
					diffLeft = leftTick - leftTick_prev;
 8002db4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002db8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dc2:	e009      	b.n	8002dd8 <tooClose+0x1f0>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8002dc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002dc8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002dcc:	33ff      	adds	r3, #255	; 0xff
 8002dce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8002dd8:	4b1c      	ldr	r3, [pc, #112]	; (8002e4c <tooClose+0x264>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b10      	cmp	r3, #16
 8002de4:	d115      	bne.n	8002e12 <tooClose+0x22a>
				if (rightTick < rightTick_prev)
 8002de6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002de8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002dec:	429a      	cmp	r2, r3
 8002dee:	da06      	bge.n	8002dfe <tooClose+0x216>
					diffRight = rightTick_prev - rightTick;
 8002df0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002df4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dfc:	e039      	b.n	8002e72 <tooClose+0x28a>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 8002dfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e00:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002e04:	33ff      	adds	r3, #255	; 0xff
 8002e06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e10:	e02f      	b.n	8002e72 <tooClose+0x28a>
			} else {
				if (rightTick > rightTick_prev)
 8002e12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	dd21      	ble.n	8002e60 <tooClose+0x278>
					diffRight = rightTick - rightTick_prev;
 8002e1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e28:	e023      	b.n	8002e72 <tooClose+0x28a>
 8002e2a:	bf00      	nop
 8002e2c:	20000378 	.word	0x20000378
 8002e30:	20000258 	.word	0x20000258
 8002e34:	3d4ccccd 	.word	0x3d4ccccd
 8002e38:	20000420 	.word	0x20000420
 8002e3c:	44440000 	.word	0x44440000
 8002e40:	4442c000 	.word	0x4442c000
 8002e44:	41a8cccd 	.word	0x41a8cccd
 8002e48:	200002a0 	.word	0x200002a0
 8002e4c:	20000330 	.word	0x20000330
 8002e50:	40020000 	.word	0x40020000
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40020800 	.word	0x40020800
 8002e5c:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8002e60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e64:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002e68:	33ff      	adds	r3, #255	; 0xff
 8002e6a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8002e72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e7e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e86:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 8002e92:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002e96:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8002ea2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ea6:	ee07 3a90 	vmov	s15, r3
 8002eaa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002eae:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eb6:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ebe:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 8002ec2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002ec6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ece:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			// 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.

#define pwmValAadjust 300;
#define pwmValBadjust 525;

			pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8002ed2:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8002ed6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002eda:	4611      	mov	r1, r2
 8002edc:	edd7 0a2a 	vldr	s1, [r7, #168]	; 0xa8
 8002ee0:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f003 fc35 	bl	8006754 <PIDController_Update>
 8002eea:	4603      	mov	r3, r0
					totalDistance_left * STRAIGHTRATIOR, pwmValA)
					- pwmValAadjust
 8002eec:	b29b      	uxth	r3, r3
			pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8002eee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ef2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			;

			pwmValC = PIDController_Update(&pidRight,
 8002ef6:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002efa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002efe:	4611      	mov	r1, r2
 8002f00:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 8002f04:	ed97 0a2a 	vldr	s0, [r7, #168]	; 0xa8
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f003 fc23 	bl	8006754 <PIDController_Update>
 8002f0e:	4603      	mov	r3, r0
					totalDistance_left * STRAIGHTRATIOR, totalDistance_right,
					pwmValC) + pwmValBadjust
 8002f10:	b29b      	uxth	r3, r3
			pwmValC = PIDController_Update(&pidRight,
 8002f12:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8002f16:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
			;

			pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8002f1a:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8002f1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f22:	4611      	mov	r1, r2
 8002f24:	edd7 0a2a 	vldr	s1, [r7, #168]	; 0xa8
 8002f28:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f003 fc11 	bl	8006754 <PIDController_Update>
 8002f32:	4603      	mov	r3, r0
 8002f34:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
					totalDistance_left * STRAIGHTRATIOR, pwmValA);

			pwmValC = PIDController_Update(&pidRight,
 8002f38:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002f3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f40:	4611      	mov	r1, r2
 8002f42:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 8002f46:	ed97 0a2a 	vldr	s0, [r7, #168]	; 0xa8
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f003 fc02 	bl	8006754 <PIDController_Update>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
					totalDistance_left * STRAIGHTRATIOR, totalDistance_right,
					pwmValC);

			//if robot doesnt go straight, using gyro to adjust, straight = 145

			if (actualAngle > 0.33) //veering left
 8002f56:	4b3a      	ldr	r3, [pc, #232]	; (8003040 <tooClose+0x458>)
 8002f58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f5c:	a334      	add	r3, pc, #208	; (adr r3, 8003030 <tooClose+0x448>)
 8002f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f62:	f7fd fdd9 	bl	8000b18 <__aeabi_dcmpgt>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d004      	beq.n	8002f76 <tooClose+0x38e>
					{
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = 138; //left abit
 8002f6c:	4b35      	ldr	r3, [pc, #212]	; (8003044 <tooClose+0x45c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	228a      	movs	r2, #138	; 0x8a
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40
 8002f74:	e013      	b.n	8002f9e <tooClose+0x3b6>
			} else if (actualAngle < -0.33) //veering right
 8002f76:	4b32      	ldr	r3, [pc, #200]	; (8003040 <tooClose+0x458>)
 8002f78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f7c:	a32e      	add	r3, pc, #184	; (adr r3, 8003038 <tooClose+0x450>)
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	f7fd fdab 	bl	8000adc <__aeabi_dcmplt>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d004      	beq.n	8002f96 <tooClose+0x3ae>
					{
				//					 servo = STRAIGHT;
				htim1.Instance->CCR4 = 155; //right a bit
 8002f8c:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <tooClose+0x45c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	229b      	movs	r2, #155	; 0x9b
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
 8002f94:	e003      	b.n	8002f9e <tooClose+0x3b6>
			} else {
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 8002f96:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <tooClose+0x45c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2296      	movs	r2, #150	; 0x96
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
			}
			osDelay(10);
 8002f9e:	200a      	movs	r0, #10
 8002fa0:	f00a fa91 	bl	800d4c6 <osDelay>

			if (Distance > 4.25) {
 8002fa4:	4b28      	ldr	r3, [pc, #160]	; (8003048 <tooClose+0x460>)
 8002fa6:	edd3 7a00 	vldr	s15, [r3]
 8002faa:	eeb1 7a01 	vmov.f32	s14, #17	; 0x40880000  4.250
 8002fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb6:	dd0c      	ble.n	8002fd2 <tooClose+0x3ea>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8002fb8:	4b24      	ldr	r3, [pc, #144]	; (800304c <tooClose+0x464>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 8002fc0:	4b22      	ldr	r3, [pc, #136]	; (800304c <tooClose+0x464>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	63da      	str	r2, [r3, #60]	; 0x3c
				htim1.Instance->CCR4 = STRAIGHT; //centre
 8002fc8:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <tooClose+0x45c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2296      	movs	r2, #150	; 0x96
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8002fd0:	e00b      	b.n	8002fea <tooClose+0x402>
			}
			prevTime = currTime;
 8002fd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 8002fda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8002fe2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002fe8:	e697      	b.n	8002d1a <tooClose+0x132>
		}
	}
	//	moving = 0;
	//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002fea:	2201      	movs	r2, #1
 8002fec:	2108      	movs	r1, #8
 8002fee:	4818      	ldr	r0, [pc, #96]	; (8003050 <tooClose+0x468>)
 8002ff0:	f004 fc00 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2104      	movs	r1, #4
 8002ff8:	4815      	ldr	r0, [pc, #84]	; (8003050 <tooClose+0x468>)
 8002ffa:	f004 fbfb 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8002ffe:	2201      	movs	r2, #1
 8003000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003004:	4813      	ldr	r0, [pc, #76]	; (8003054 <tooClose+0x46c>)
 8003006:	f004 fbf5 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800300a:	2200      	movs	r2, #0
 800300c:	2120      	movs	r1, #32
 800300e:	4812      	ldr	r0, [pc, #72]	; (8003058 <tooClose+0x470>)
 8003010:	f004 fbf0 	bl	80077f4 <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <tooClose+0x45c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2296      	movs	r2, #150	; 0x96
 800301a:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 800301c:	200a      	movs	r0, #10
 800301e:	f00a fa52 	bl	800d4c6 <osDelay>
	return;
 8003022:	bf00      	nop
}
 8003024:	37b8      	adds	r7, #184	; 0xb8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	f3af 8000 	nop.w
 8003030:	51eb851f 	.word	0x51eb851f
 8003034:	3fd51eb8 	.word	0x3fd51eb8
 8003038:	51eb851f 	.word	0x51eb851f
 800303c:	bfd51eb8 	.word	0xbfd51eb8
 8003040:	20000420 	.word	0x20000420
 8003044:	20000258 	.word	0x20000258
 8003048:	20000448 	.word	0x20000448
 800304c:	20000378 	.word	0x20000378
 8003050:	40020000 	.word	0x40020000
 8003054:	40021000 	.word	0x40021000
 8003058:	40020800 	.word	0x40020800

0800305c <moveUltraEnd>:
void moveUltraEnd() {
 800305c:	b580      	push	{r7, lr}
 800305e:	b0ae      	sub	sp, #184	; 0xb8
 8003060:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003062:	2100      	movs	r1, #0
 8003064:	488e      	ldr	r0, [pc, #568]	; (80032a0 <moveUltraEnd+0x244>)
 8003066:	f007 fc7b 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800306a:	2108      	movs	r1, #8
 800306c:	488c      	ldr	r0, [pc, #560]	; (80032a0 <moveUltraEnd+0x244>)
 800306e:	f007 fc77 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003072:	210c      	movs	r1, #12
 8003074:	488b      	ldr	r0, [pc, #556]	; (80032a4 <moveUltraEnd+0x248>)
 8003076:	f007 fc73 	bl	800a960 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 800307a:	4b8a      	ldr	r3, [pc, #552]	; (80032a4 <moveUltraEnd+0x248>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2296      	movs	r2, #150	; 0x96
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 8003082:	2064      	movs	r0, #100	; 0x64
 8003084:	f00a fa1f 	bl	800d4c6 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8003088:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800308c:	2224      	movs	r2, #36	; 0x24
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f00c ff73 	bl	800ff7c <memset>
 8003096:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800309a:	653b      	str	r3, [r7, #80]	; 0x50
 800309c:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80030a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80030a2:	f640 0398 	movw	r3, #2200	; 0x898
 80030a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030a8:	4b7f      	ldr	r3, [pc, #508]	; (80032a8 <moveUltraEnd+0x24c>)
 80030aa:	663b      	str	r3, [r7, #96]	; 0x60
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 80030ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030b0:	2224      	movs	r2, #36	; 0x24
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f00c ff61 	bl	800ff7c <memset>
 80030ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c0:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
 80030c6:	f640 0398 	movw	r3, #2200	; 0x898
 80030ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80030cc:	4b76      	ldr	r3, [pc, #472]	; (80032a8 <moveUltraEnd+0x24c>)
 80030ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 80030d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030d4:	4618      	mov	r0, r3
 80030d6:	f003 fb25 	bl	8006724 <PIDController_Init>
	PIDController_Init(&pidRight);
 80030da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030de:	4618      	mov	r0, r3
 80030e0:	f003 fb20 	bl	8006724 <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 80030e4:	4b71      	ldr	r3, [pc, #452]	; (80032ac <moveUltraEnd+0x250>)
 80030e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 80030ea:	4b71      	ldr	r3, [pc, #452]	; (80032b0 <moveUltraEnd+0x254>)
 80030ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 80030f0:	4b70      	ldr	r3, [pc, #448]	; (80032b4 <moveUltraEnd+0x258>)
 80030f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 80030f6:	213c      	movs	r1, #60	; 0x3c
 80030f8:	486f      	ldr	r0, [pc, #444]	; (80032b8 <moveUltraEnd+0x25c>)
 80030fa:	f007 ff17 	bl	800af2c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 80030fe:	213c      	movs	r1, #60	; 0x3c
 8003100:	486e      	ldr	r0, [pc, #440]	; (80032bc <moveUltraEnd+0x260>)
 8003102:	f007 ff13 	bl	800af2c <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003106:	4b6c      	ldr	r3, [pc, #432]	; (80032b8 <moveUltraEnd+0x25c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8003110:	4b6a      	ldr	r3, [pc, #424]	; (80032bc <moveUltraEnd+0x260>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 800311a:	f003 ffed 	bl	80070f8 <HAL_GetTick>
 800311e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 8003122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003126:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	actualAngle = 0.00;
 8003146:	495e      	ldr	r1, [pc, #376]	; (80032c0 <moveUltraEnd+0x264>)
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9c1 2300 	strd	r2, r3, [r1]
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 3000;
 8003154:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003158:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 3000;
 800315c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003160:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003164:	2201      	movs	r2, #1
 8003166:	2108      	movs	r1, #8
 8003168:	4856      	ldr	r0, [pc, #344]	; (80032c4 <moveUltraEnd+0x268>)
 800316a:	f004 fb43 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800316e:	2200      	movs	r2, #0
 8003170:	2104      	movs	r1, #4
 8003172:	4854      	ldr	r0, [pc, #336]	; (80032c4 <moveUltraEnd+0x268>)
 8003174:	f004 fb3e 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003178:	2201      	movs	r2, #1
 800317a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800317e:	4852      	ldr	r0, [pc, #328]	; (80032c8 <moveUltraEnd+0x26c>)
 8003180:	f004 fb38 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003184:	2200      	movs	r2, #0
 8003186:	2120      	movs	r1, #32
 8003188:	4850      	ldr	r0, [pc, #320]	; (80032cc <moveUltraEnd+0x270>)
 800318a:	f004 fb33 	bl	80077f4 <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800318e:	4b44      	ldr	r3, [pc, #272]	; (80032a0 <moveUltraEnd+0x244>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8003196:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8003198:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <moveUltraEnd+0x244>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80031a0:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 80031a2:	f003 ffa9 	bl	80070f8 <HAL_GetTick>
 80031a6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 80031aa:	4b49      	ldr	r3, [pc, #292]	; (80032d0 <moveUltraEnd+0x274>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 80031b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80031b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b3c      	cmp	r3, #60	; 0x3c
 80031bc:	d9e7      	bls.n	800318e <moveUltraEnd+0x132>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 80031be:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <moveUltraEnd+0x25c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 80031c8:	4b3c      	ldr	r3, [pc, #240]	; (80032bc <moveUltraEnd+0x260>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80031dc:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <moveUltraEnd+0x25c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	2b10      	cmp	r3, #16
 80031e8:	d118      	bne.n	800321c <moveUltraEnd+0x1c0>
				if (leftTick < leftTick_prev)
 80031ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031f2:	429a      	cmp	r2, r3
 80031f4:	da07      	bge.n	8003206 <moveUltraEnd+0x1aa>
					diffLeft = leftTick_prev - leftTick;
 80031f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003204:	e022      	b.n	800324c <moveUltraEnd+0x1f0>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8003206:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800320a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800320e:	33ff      	adds	r3, #255	; 0xff
 8003210:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003214:	4413      	add	r3, r2
 8003216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800321a:	e017      	b.n	800324c <moveUltraEnd+0x1f0>
			} else {
				if (leftTick > leftTick_prev)
 800321c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003220:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003224:	429a      	cmp	r2, r3
 8003226:	dd07      	ble.n	8003238 <moveUltraEnd+0x1dc>
					diffLeft = leftTick - leftTick_prev;
 8003228:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800322c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003236:	e009      	b.n	800324c <moveUltraEnd+0x1f0>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8003238:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800323c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003240:	33ff      	adds	r3, #255	; 0xff
 8003242:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003246:	4413      	add	r3, r2
 8003248:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 800324c:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <moveUltraEnd+0x260>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2b10      	cmp	r3, #16
 8003258:	d115      	bne.n	8003286 <moveUltraEnd+0x22a>
				if (rightTick < rightTick_prev)
 800325a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800325c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003260:	429a      	cmp	r2, r3
 8003262:	da06      	bge.n	8003272 <moveUltraEnd+0x216>
					diffRight = rightTick_prev - rightTick;
 8003264:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003268:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003270:	e039      	b.n	80032e6 <moveUltraEnd+0x28a>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 8003272:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003274:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003278:	33ff      	adds	r3, #255	; 0xff
 800327a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800327e:	4413      	add	r3, r2
 8003280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003284:	e02f      	b.n	80032e6 <moveUltraEnd+0x28a>
			} else {
				if (rightTick > rightTick_prev)
 8003286:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003288:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800328c:	429a      	cmp	r2, r3
 800328e:	dd21      	ble.n	80032d4 <moveUltraEnd+0x278>
					diffRight = rightTick - rightTick_prev;
 8003290:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003292:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800329c:	e023      	b.n	80032e6 <moveUltraEnd+0x28a>
 800329e:	bf00      	nop
 80032a0:	20000378 	.word	0x20000378
 80032a4:	20000258 	.word	0x20000258
 80032a8:	3d4ccccd 	.word	0x3d4ccccd
 80032ac:	44440000 	.word	0x44440000
 80032b0:	4442c000 	.word	0x4442c000
 80032b4:	41b33333 	.word	0x41b33333
 80032b8:	200002a0 	.word	0x200002a0
 80032bc:	20000330 	.word	0x20000330
 80032c0:	20000420 	.word	0x20000420
 80032c4:	40020000 	.word	0x40020000
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40020800 	.word	0x40020800
 80032d0:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 80032d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80032d8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80032dc:	33ff      	adds	r3, #255	; 0xff
 80032de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80032e0:	4413      	add	r3, r2
 80032e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 80032e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80032f2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80032f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032fa:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80032fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003302:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 8003306:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800330a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800330e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003312:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8003316:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003322:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800332a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800332e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003332:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 8003336:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800333a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800333e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003342:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (actualAngle < 0.00) //veering right
 8003346:	4b46      	ldr	r3, [pc, #280]	; (8003460 <moveUltraEnd+0x404>)
 8003348:	e9d3 0100 	ldrd	r0, r1, [r3]
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	f7fd fbc2 	bl	8000adc <__aeabi_dcmplt>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d006      	beq.n	800336c <moveUltraEnd+0x310>
					{

				htim1.Instance->CCR4 = 138; //left abit
 800335e:	4b41      	ldr	r3, [pc, #260]	; (8003464 <moveUltraEnd+0x408>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	228a      	movs	r2, #138	; 0x8a
 8003364:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 8003366:	200a      	movs	r0, #10
 8003368:	f00a f8ad 	bl	800d4c6 <osDelay>
			}
			if (actualAngle > 0.00) //veering left
 800336c:	4b3c      	ldr	r3, [pc, #240]	; (8003460 <moveUltraEnd+0x404>)
 800336e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	f7fd fbcd 	bl	8000b18 <__aeabi_dcmpgt>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d006      	beq.n	8003392 <moveUltraEnd+0x336>
					{

				htim1.Instance->CCR4 = 152; //right a bit
 8003384:	4b37      	ldr	r3, [pc, #220]	; (8003464 <moveUltraEnd+0x408>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2298      	movs	r2, #152	; 0x98
 800338a:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 800338c:	200a      	movs	r0, #10
 800338e:	f00a f89a 	bl	800d4c6 <osDelay>
			}
			if (actualAngle == 0.00) {
 8003392:	4b33      	ldr	r3, [pc, #204]	; (8003460 <moveUltraEnd+0x404>)
 8003394:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	f7fd fb92 	bl	8000ac8 <__aeabi_dcmpeq>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d006      	beq.n	80033b8 <moveUltraEnd+0x35c>
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 80033aa:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <moveUltraEnd+0x408>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2296      	movs	r2, #150	; 0x96
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 80033b2:	200a      	movs	r0, #10
 80033b4:	f00a f887 	bl	800d4c6 <osDelay>
			}

			prevTime = currTime;
 80033b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 80033c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 80033c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 2) {
 80033ce:	4b26      	ldr	r3, [pc, #152]	; (8003468 <moveUltraEnd+0x40c>)
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80033d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e0:	d417      	bmi.n	8003412 <moveUltraEnd+0x3b6>
				break;
			}
			sprintf(messageA, "angle %5d\0", (int) (actualAngle));
 80033e2:	4b1f      	ldr	r3, [pc, #124]	; (8003460 <moveUltraEnd+0x404>)
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	4610      	mov	r0, r2
 80033ea:	4619      	mov	r1, r3
 80033ec:	f7fd fbb4 	bl	8000b58 <__aeabi_d2iz>
 80033f0:	4602      	mov	r2, r0
 80033f2:	f107 0318 	add.w	r3, r7, #24
 80033f6:	491d      	ldr	r1, [pc, #116]	; (800346c <moveUltraEnd+0x410>)
 80033f8:	4618      	mov	r0, r3
 80033fa:	f00d fc47 	bl	8010c8c <siprintf>
			OLED_ShowString(10, 20, messageA);
 80033fe:	f107 0318 	add.w	r3, r7, #24
 8003402:	461a      	mov	r2, r3
 8003404:	2114      	movs	r1, #20
 8003406:	200a      	movs	r0, #10
 8003408:	f003 f8ce 	bl	80065a8 <OLED_ShowString>
			OLED_Refresh_Gram();
 800340c:	f002 ff58 	bl	80062c0 <OLED_Refresh_Gram>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8003410:	e6bd      	b.n	800318e <moveUltraEnd+0x132>
				break;
 8003412:	bf00      	nop
		}
	}

//	moving = 0;
	move(1, 0);
 8003414:	2000      	movs	r0, #0
 8003416:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800341a:	f001 fc93 	bl	8004d44 <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800341e:	2201      	movs	r2, #1
 8003420:	2108      	movs	r1, #8
 8003422:	4813      	ldr	r0, [pc, #76]	; (8003470 <moveUltraEnd+0x414>)
 8003424:	f004 f9e6 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003428:	2200      	movs	r2, #0
 800342a:	2104      	movs	r1, #4
 800342c:	4810      	ldr	r0, [pc, #64]	; (8003470 <moveUltraEnd+0x414>)
 800342e:	f004 f9e1 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003432:	2201      	movs	r2, #1
 8003434:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003438:	480e      	ldr	r0, [pc, #56]	; (8003474 <moveUltraEnd+0x418>)
 800343a:	f004 f9db 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800343e:	2200      	movs	r2, #0
 8003440:	2120      	movs	r1, #32
 8003442:	480d      	ldr	r0, [pc, #52]	; (8003478 <moveUltraEnd+0x41c>)
 8003444:	f004 f9d6 	bl	80077f4 <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <moveUltraEnd+0x408>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2296      	movs	r2, #150	; 0x96
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8003450:	200a      	movs	r0, #10
 8003452:	f00a f838 	bl	800d4c6 <osDelay>
	return;
 8003456:	bf00      	nop

}
 8003458:	37b8      	adds	r7, #184	; 0xb8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000420 	.word	0x20000420
 8003464:	20000258 	.word	0x20000258
 8003468:	20000448 	.word	0x20000448
 800346c:	080148a8 	.word	0x080148a8
 8003470:	40020000 	.word	0x40020000
 8003474:	40021000 	.word	0x40021000
 8003478:	40020800 	.word	0x40020800

0800347c <moveUltraEndLeft>:

void moveUltraEndLeft() {
 800347c:	b580      	push	{r7, lr}
 800347e:	b0ae      	sub	sp, #184	; 0xb8
 8003480:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003482:	2100      	movs	r1, #0
 8003484:	488e      	ldr	r0, [pc, #568]	; (80036c0 <moveUltraEndLeft+0x244>)
 8003486:	f007 fa6b 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800348a:	2108      	movs	r1, #8
 800348c:	488c      	ldr	r0, [pc, #560]	; (80036c0 <moveUltraEndLeft+0x244>)
 800348e:	f007 fa67 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003492:	210c      	movs	r1, #12
 8003494:	488b      	ldr	r0, [pc, #556]	; (80036c4 <moveUltraEndLeft+0x248>)
 8003496:	f007 fa63 	bl	800a960 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 800349a:	4b8a      	ldr	r3, [pc, #552]	; (80036c4 <moveUltraEndLeft+0x248>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2296      	movs	r2, #150	; 0x96
 80034a0:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 80034a2:	2064      	movs	r0, #100	; 0x64
 80034a4:	f00a f80f 	bl	800d4c6 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 80034a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034ac:	2224      	movs	r2, #36	; 0x24
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f00c fd63 	bl	800ff7c <memset>
 80034b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80034ba:	653b      	str	r3, [r7, #80]	; 0x50
 80034bc:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80034c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80034c2:	f640 0398 	movw	r3, #2200	; 0x898
 80034c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034c8:	4b7f      	ldr	r3, [pc, #508]	; (80036c8 <moveUltraEndLeft+0x24c>)
 80034ca:	663b      	str	r3, [r7, #96]	; 0x60
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 80034cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034d0:	2224      	movs	r2, #36	; 0x24
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f00c fd51 	bl	800ff7c <memset>
 80034da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80034de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034e0:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
 80034e6:	f640 0398 	movw	r3, #2200	; 0x898
 80034ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80034ec:	4b76      	ldr	r3, [pc, #472]	; (80036c8 <moveUltraEndLeft+0x24c>)
 80034ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 80034f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034f4:	4618      	mov	r0, r3
 80034f6:	f003 f915 	bl	8006724 <PIDController_Init>
	PIDController_Init(&pidRight);
 80034fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 f910 	bl	8006724 <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8003504:	4b71      	ldr	r3, [pc, #452]	; (80036cc <moveUltraEndLeft+0x250>)
 8003506:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 800350a:	4b71      	ldr	r3, [pc, #452]	; (80036d0 <moveUltraEndLeft+0x254>)
 800350c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 8003510:	4b70      	ldr	r3, [pc, #448]	; (80036d4 <moveUltraEndLeft+0x258>)
 8003512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8003516:	213c      	movs	r1, #60	; 0x3c
 8003518:	486f      	ldr	r0, [pc, #444]	; (80036d8 <moveUltraEndLeft+0x25c>)
 800351a:	f007 fd07 	bl	800af2c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 800351e:	213c      	movs	r1, #60	; 0x3c
 8003520:	486e      	ldr	r0, [pc, #440]	; (80036dc <moveUltraEndLeft+0x260>)
 8003522:	f007 fd03 	bl	800af2c <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003526:	4b6c      	ldr	r3, [pc, #432]	; (80036d8 <moveUltraEndLeft+0x25c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8003530:	4b6a      	ldr	r3, [pc, #424]	; (80036dc <moveUltraEndLeft+0x260>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 800353a:	f003 fddd 	bl	80070f8 <HAL_GetTick>
 800353e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 8003542:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003546:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 3000;
 8003566:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800356a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 3000;
 800356e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003572:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003576:	2201      	movs	r2, #1
 8003578:	2108      	movs	r1, #8
 800357a:	4859      	ldr	r0, [pc, #356]	; (80036e0 <moveUltraEndLeft+0x264>)
 800357c:	f004 f93a 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003580:	2200      	movs	r2, #0
 8003582:	2104      	movs	r1, #4
 8003584:	4856      	ldr	r0, [pc, #344]	; (80036e0 <moveUltraEndLeft+0x264>)
 8003586:	f004 f935 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800358a:	2201      	movs	r2, #1
 800358c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003590:	4854      	ldr	r0, [pc, #336]	; (80036e4 <moveUltraEndLeft+0x268>)
 8003592:	f004 f92f 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003596:	2200      	movs	r2, #0
 8003598:	2120      	movs	r1, #32
 800359a:	4853      	ldr	r0, [pc, #332]	; (80036e8 <moveUltraEndLeft+0x26c>)
 800359c:	f004 f92a 	bl	80077f4 <HAL_GPIO_WritePin>

	totalAngle = 0.0;
 80035a0:	4952      	ldr	r1, [pc, #328]	; (80036ec <moveUltraEndLeft+0x270>)
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	e9c1 2300 	strd	r2, r3, [r1]

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80035ae:	4b44      	ldr	r3, [pc, #272]	; (80036c0 <moveUltraEndLeft+0x244>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80035b6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 80035b8:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <moveUltraEndLeft+0x244>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80035c0:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 80035c2:	f003 fd99 	bl	80070f8 <HAL_GetTick>
 80035c6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 80035ca:	4b49      	ldr	r3, [pc, #292]	; (80036f0 <moveUltraEndLeft+0x274>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 80035d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80035d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b3c      	cmp	r3, #60	; 0x3c
 80035dc:	d9e7      	bls.n	80035ae <moveUltraEndLeft+0x132>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 80035de:	4b3e      	ldr	r3, [pc, #248]	; (80036d8 <moveUltraEndLeft+0x25c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 80035e8:	4b3c      	ldr	r3, [pc, #240]	; (80036dc <moveUltraEndLeft+0x260>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80035fc:	4b36      	ldr	r3, [pc, #216]	; (80036d8 <moveUltraEndLeft+0x25c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	2b10      	cmp	r3, #16
 8003608:	d118      	bne.n	800363c <moveUltraEndLeft+0x1c0>
				if (leftTick < leftTick_prev)
 800360a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800360e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003612:	429a      	cmp	r2, r3
 8003614:	da07      	bge.n	8003626 <moveUltraEndLeft+0x1aa>
					diffLeft = leftTick_prev - leftTick;
 8003616:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800361a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003624:	e022      	b.n	800366c <moveUltraEndLeft+0x1f0>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8003626:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800362a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800362e:	33ff      	adds	r3, #255	; 0xff
 8003630:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003634:	4413      	add	r3, r2
 8003636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800363a:	e017      	b.n	800366c <moveUltraEndLeft+0x1f0>
			} else {
				if (leftTick > leftTick_prev)
 800363c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003640:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003644:	429a      	cmp	r2, r3
 8003646:	dd07      	ble.n	8003658 <moveUltraEndLeft+0x1dc>
					diffLeft = leftTick - leftTick_prev;
 8003648:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800364c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003656:	e009      	b.n	800366c <moveUltraEndLeft+0x1f0>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8003658:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800365c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003660:	33ff      	adds	r3, #255	; 0xff
 8003662:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003666:	4413      	add	r3, r2
 8003668:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 800366c:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <moveUltraEndLeft+0x260>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b10      	cmp	r3, #16
 8003678:	d115      	bne.n	80036a6 <moveUltraEndLeft+0x22a>
				if (rightTick < rightTick_prev)
 800367a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800367c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003680:	429a      	cmp	r2, r3
 8003682:	da06      	bge.n	8003692 <moveUltraEndLeft+0x216>
					diffRight = rightTick_prev - rightTick;
 8003684:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003688:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003690:	e039      	b.n	8003706 <moveUltraEndLeft+0x28a>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 8003692:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003694:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003698:	33ff      	adds	r3, #255	; 0xff
 800369a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800369e:	4413      	add	r3, r2
 80036a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036a4:	e02f      	b.n	8003706 <moveUltraEndLeft+0x28a>
			} else {
				if (rightTick > rightTick_prev)
 80036a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80036a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036ac:	429a      	cmp	r2, r3
 80036ae:	dd21      	ble.n	80036f4 <moveUltraEndLeft+0x278>
					diffRight = rightTick - rightTick_prev;
 80036b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80036b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036bc:	e023      	b.n	8003706 <moveUltraEndLeft+0x28a>
 80036be:	bf00      	nop
 80036c0:	20000378 	.word	0x20000378
 80036c4:	20000258 	.word	0x20000258
 80036c8:	3d4ccccd 	.word	0x3d4ccccd
 80036cc:	44440000 	.word	0x44440000
 80036d0:	4442c000 	.word	0x4442c000
 80036d4:	41b33333 	.word	0x41b33333
 80036d8:	200002a0 	.word	0x200002a0
 80036dc:	20000330 	.word	0x20000330
 80036e0:	40020000 	.word	0x40020000
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40020800 	.word	0x40020800
 80036ec:	20000418 	.word	0x20000418
 80036f0:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 80036f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036f8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80036fc:	33ff      	adds	r3, #255	; 0xff
 80036fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003700:	4413      	add	r3, r2
 8003702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8003706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003712:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800371a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800371e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003722:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 8003726:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800372a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800372e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003732:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8003736:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003742:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800374a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800374e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003752:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 8003756:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800375a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800375e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003762:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (totalAngle < 0.00) //veering right
 8003766:	4b46      	ldr	r3, [pc, #280]	; (8003880 <moveUltraEndLeft+0x404>)
 8003768:	e9d3 0100 	ldrd	r0, r1, [r3]
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	f7fd f9b2 	bl	8000adc <__aeabi_dcmplt>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d006      	beq.n	800378c <moveUltraEndLeft+0x310>
					{

				htim1.Instance->CCR4 = 138; //left abit
 800377e:	4b41      	ldr	r3, [pc, #260]	; (8003884 <moveUltraEndLeft+0x408>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	228a      	movs	r2, #138	; 0x8a
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 8003786:	200a      	movs	r0, #10
 8003788:	f009 fe9d 	bl	800d4c6 <osDelay>
			}
			if (totalAngle > 0.00) //veering left
 800378c:	4b3c      	ldr	r3, [pc, #240]	; (8003880 <moveUltraEndLeft+0x404>)
 800378e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	f7fd f9bd 	bl	8000b18 <__aeabi_dcmpgt>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d006      	beq.n	80037b2 <moveUltraEndLeft+0x336>
					{

				htim1.Instance->CCR4 = 152; //right a bit
 80037a4:	4b37      	ldr	r3, [pc, #220]	; (8003884 <moveUltraEndLeft+0x408>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2298      	movs	r2, #152	; 0x98
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 80037ac:	200a      	movs	r0, #10
 80037ae:	f009 fe8a 	bl	800d4c6 <osDelay>
			}
			if (totalAngle == 0.00) {
 80037b2:	4b33      	ldr	r3, [pc, #204]	; (8003880 <moveUltraEndLeft+0x404>)
 80037b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	f7fd f982 	bl	8000ac8 <__aeabi_dcmpeq>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d006      	beq.n	80037d8 <moveUltraEndLeft+0x35c>
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 80037ca:	4b2e      	ldr	r3, [pc, #184]	; (8003884 <moveUltraEndLeft+0x408>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2296      	movs	r2, #150	; 0x96
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 80037d2:	200a      	movs	r0, #10
 80037d4:	f009 fe77 	bl	800d4c6 <osDelay>
			}

			prevTime = currTime;
 80037d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 80037e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 80037e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 8) {
 80037ee:	4b26      	ldr	r3, [pc, #152]	; (8003888 <moveUltraEndLeft+0x40c>)
 80037f0:	edd3 7a00 	vldr	s15, [r3]
 80037f4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80037f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003800:	d417      	bmi.n	8003832 <moveUltraEndLeft+0x3b6>
				break;
			}
			sprintf(messageA, "angle %5d\0", (int) (actualAngle));
 8003802:	4b22      	ldr	r3, [pc, #136]	; (800388c <moveUltraEndLeft+0x410>)
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	4610      	mov	r0, r2
 800380a:	4619      	mov	r1, r3
 800380c:	f7fd f9a4 	bl	8000b58 <__aeabi_d2iz>
 8003810:	4602      	mov	r2, r0
 8003812:	f107 0318 	add.w	r3, r7, #24
 8003816:	491e      	ldr	r1, [pc, #120]	; (8003890 <moveUltraEndLeft+0x414>)
 8003818:	4618      	mov	r0, r3
 800381a:	f00d fa37 	bl	8010c8c <siprintf>
			OLED_ShowString(10, 20, messageA);
 800381e:	f107 0318 	add.w	r3, r7, #24
 8003822:	461a      	mov	r2, r3
 8003824:	2114      	movs	r1, #20
 8003826:	200a      	movs	r0, #10
 8003828:	f002 febe 	bl	80065a8 <OLED_ShowString>
			OLED_Refresh_Gram();
 800382c:	f002 fd48 	bl	80062c0 <OLED_Refresh_Gram>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8003830:	e6bd      	b.n	80035ae <moveUltraEndLeft+0x132>
				break;
 8003832:	bf00      	nop
		}
	}

//	moving = 0;
	move(1, 0);
 8003834:	2000      	movs	r0, #0
 8003836:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800383a:	f001 fa83 	bl	8004d44 <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800383e:	2201      	movs	r2, #1
 8003840:	2108      	movs	r1, #8
 8003842:	4814      	ldr	r0, [pc, #80]	; (8003894 <moveUltraEndLeft+0x418>)
 8003844:	f003 ffd6 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003848:	2200      	movs	r2, #0
 800384a:	2104      	movs	r1, #4
 800384c:	4811      	ldr	r0, [pc, #68]	; (8003894 <moveUltraEndLeft+0x418>)
 800384e:	f003 ffd1 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003852:	2201      	movs	r2, #1
 8003854:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003858:	480f      	ldr	r0, [pc, #60]	; (8003898 <moveUltraEndLeft+0x41c>)
 800385a:	f003 ffcb 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800385e:	2200      	movs	r2, #0
 8003860:	2120      	movs	r1, #32
 8003862:	480e      	ldr	r0, [pc, #56]	; (800389c <moveUltraEndLeft+0x420>)
 8003864:	f003 ffc6 	bl	80077f4 <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8003868:	4b06      	ldr	r3, [pc, #24]	; (8003884 <moveUltraEndLeft+0x408>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2296      	movs	r2, #150	; 0x96
 800386e:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8003870:	200a      	movs	r0, #10
 8003872:	f009 fe28 	bl	800d4c6 <osDelay>
	return;
 8003876:	bf00      	nop

}
 8003878:	37b8      	adds	r7, #184	; 0xb8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000418 	.word	0x20000418
 8003884:	20000258 	.word	0x20000258
 8003888:	20000448 	.word	0x20000448
 800388c:	20000420 	.word	0x20000420
 8003890:	080148a8 	.word	0x080148a8
 8003894:	40020000 	.word	0x40020000
 8003898:	40021000 	.word	0x40021000
 800389c:	40020800 	.word	0x40020800

080038a0 <sendToRPI>:
/**
 * @brief send msg to RPI through UART after execute command
 * @param msg[] for the message to be sent
 * @retval None
 */
void sendToRPI(char *msg) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), 0xFFFF);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7fc fc91 	bl	80001d0 <strlen>
 80038ae:	4603      	mov	r3, r0
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4803      	ldr	r0, [pc, #12]	; (80038c8 <sendToRPI+0x28>)
 80038ba:	f008 fcc8 	bl	800c24e <HAL_UART_Transmit>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200003c0 	.word	0x200003c0
 80038cc:	00000000 	.word	0x00000000

080038d0 <moveGyroPID>:

//gyro for straight
void moveGyroPID(float distance, int forward) {
 80038d0:	b5b0      	push	{r4, r5, r7, lr}
 80038d2:	b0b2      	sub	sp, #200	; 0xc8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80038da:	6038      	str	r0, [r7, #0]

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80038dc:	2100      	movs	r1, #0
 80038de:	489c      	ldr	r0, [pc, #624]	; (8003b50 <moveGyroPID+0x280>)
 80038e0:	f007 f83e 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80038e4:	2108      	movs	r1, #8
 80038e6:	489a      	ldr	r0, [pc, #616]	; (8003b50 <moveGyroPID+0x280>)
 80038e8:	f007 f83a 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80038ec:	210c      	movs	r1, #12
 80038ee:	4899      	ldr	r0, [pc, #612]	; (8003b54 <moveGyroPID+0x284>)
 80038f0:	f007 f836 	bl	800a960 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80038f4:	4b97      	ldr	r3, [pc, #604]	; (8003b54 <moveGyroPID+0x284>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2296      	movs	r2, #150	; 0x96
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(40);
 80038fc:	2028      	movs	r0, #40	; 0x28
 80038fe:	f009 fde2 	bl	800d4c6 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI, 1900, 2100,
 8003902:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003906:	2224      	movs	r2, #36	; 0x24
 8003908:	2100      	movs	r1, #0
 800390a:	4618      	mov	r0, r3
 800390c:	f00c fb36 	bl	800ff7c <memset>
 8003910:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003914:	65bb      	str	r3, [r7, #88]	; 0x58
 8003916:	f240 736c 	movw	r3, #1900	; 0x76c
 800391a:	663b      	str	r3, [r7, #96]	; 0x60
 800391c:	f640 0334 	movw	r3, #2100	; 0x834
 8003920:	667b      	str	r3, [r7, #100]	; 0x64
 8003922:	4b8d      	ldr	r3, [pc, #564]	; (8003b58 <moveGyroPID+0x288>)
 8003924:	66bb      	str	r3, [r7, #104]	; 0x68
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI, 1900, 2100,
 8003926:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800392a:	2224      	movs	r2, #36	; 0x24
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f00c fb24 	bl	800ff7c <memset>
 8003934:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003938:	637b      	str	r3, [r7, #52]	; 0x34
 800393a:	f240 736c 	movw	r3, #1900	; 0x76c
 800393e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003940:	f640 0334 	movw	r3, #2100	; 0x834
 8003944:	643b      	str	r3, [r7, #64]	; 0x40
 8003946:	4b84      	ldr	r3, [pc, #528]	; (8003b58 <moveGyroPID+0x288>)
 8003948:	647b      	str	r3, [r7, #68]	; 0x44
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 800394a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800394e:	4618      	mov	r0, r3
 8003950:	f002 fee8 	bl	8006724 <PIDController_Init>
	PIDController_Init(&pidRight);
 8003954:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003958:	4618      	mov	r0, r3
 800395a:	f002 fee3 	bl	8006724 <PIDController_Init>

	//reset angle
	actualAngle = 0;
 800395e:	497f      	ldr	r1, [pc, #508]	; (8003b5c <moveGyroPID+0x28c>)
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	e9c1 2300 	strd	r2, r3, [r1]

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 800396c:	4b7c      	ldr	r3, [pc, #496]	; (8003b60 <moveGyroPID+0x290>)
 800396e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float wheel_rotationTicksR = 779; // for back right wheel
 8003972:	4b7c      	ldr	r3, [pc, #496]	; (8003b64 <moveGyroPID+0x294>)
 8003974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	float wheel_circumference = 21.1; // NEED TO MEASURE AND CHANGE
 8003978:	4b7b      	ldr	r3, [pc, #492]	; (8003b68 <moveGyroPID+0x298>)
 800397a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 800397e:	213c      	movs	r1, #60	; 0x3c
 8003980:	487a      	ldr	r0, [pc, #488]	; (8003b6c <moveGyroPID+0x29c>)
 8003982:	f007 fad3 	bl	800af2c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8003986:	213c      	movs	r1, #60	; 0x3c
 8003988:	4879      	ldr	r0, [pc, #484]	; (8003b70 <moveGyroPID+0x2a0>)
 800398a:	f007 facf 	bl	800af2c <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 800398e:	4b77      	ldr	r3, [pc, #476]	; (8003b6c <moveGyroPID+0x29c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8003998:	4b75      	ldr	r3, [pc, #468]	; (8003b70 <moveGyroPID+0x2a0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 80039a2:	f003 fba9 	bl	80070f8 <HAL_GetTick>
 80039a6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	uint32_t prevTime = startTime;
 80039aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float totalDistance_right = 0;
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int diffRight = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distErrOffset;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 80039ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80039d2:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	uint16_t pwmValC = 2000;
 80039d6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80039da:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if (forward) {
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d015      	beq.n	8003a10 <moveGyroPID+0x140>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80039e4:	2201      	movs	r2, #1
 80039e6:	2108      	movs	r1, #8
 80039e8:	4862      	ldr	r0, [pc, #392]	; (8003b74 <moveGyroPID+0x2a4>)
 80039ea:	f003 ff03 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80039ee:	2200      	movs	r2, #0
 80039f0:	2104      	movs	r1, #4
 80039f2:	4860      	ldr	r0, [pc, #384]	; (8003b74 <moveGyroPID+0x2a4>)
 80039f4:	f003 fefe 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80039f8:	2201      	movs	r2, #1
 80039fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039fe:	485e      	ldr	r0, [pc, #376]	; (8003b78 <moveGyroPID+0x2a8>)
 8003a00:	f003 fef8 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003a04:	2200      	movs	r2, #0
 8003a06:	2120      	movs	r1, #32
 8003a08:	485c      	ldr	r0, [pc, #368]	; (8003b7c <moveGyroPID+0x2ac>)
 8003a0a:	f003 fef3 	bl	80077f4 <HAL_GPIO_WritePin>
 8003a0e:	e014      	b.n	8003a3a <moveGyroPID+0x16a>
	} else {
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8003a10:	2200      	movs	r2, #0
 8003a12:	2108      	movs	r1, #8
 8003a14:	4857      	ldr	r0, [pc, #348]	; (8003b74 <moveGyroPID+0x2a4>)
 8003a16:	f003 feed 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	2104      	movs	r1, #4
 8003a1e:	4855      	ldr	r0, [pc, #340]	; (8003b74 <moveGyroPID+0x2a4>)
 8003a20:	f003 fee8 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8003a24:	2200      	movs	r2, #0
 8003a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a2a:	4853      	ldr	r0, [pc, #332]	; (8003b78 <moveGyroPID+0x2a8>)
 8003a2c:	f003 fee2 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8003a30:	2201      	movs	r2, #1
 8003a32:	2120      	movs	r1, #32
 8003a34:	4851      	ldr	r0, [pc, #324]	; (8003b7c <moveGyroPID+0x2ac>)
 8003a36:	f003 fedd 	bl	80077f4 <HAL_GPIO_WritePin>
	//		else
	//			distErrOffset = DISTANCE_ERROR_OFFSETR;
	//	}

	// outdoor
	if (forward) {
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d045      	beq.n	8003acc <moveGyroPID+0x1fc>
		if (distance == 10)
 8003a40:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a44:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a48:	eef4 7a47 	vcmp.f32	s15, s14
 8003a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a50:	d103      	bne.n	8003a5a <moveGyroPID+0x18a>
			distErrOffset = -0.2;
 8003a52:	4b4b      	ldr	r3, [pc, #300]	; (8003b80 <moveGyroPID+0x2b0>)
 8003a54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a58:	e0a7      	b.n	8003baa <moveGyroPID+0x2da>
		else if (distance == 20)
 8003a5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a5e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003a62:	eef4 7a47 	vcmp.f32	s15, s14
 8003a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6a:	d103      	bne.n	8003a74 <moveGyroPID+0x1a4>
			distErrOffset = -0.15;
 8003a6c:	4b45      	ldr	r3, [pc, #276]	; (8003b84 <moveGyroPID+0x2b4>)
 8003a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a72:	e09a      	b.n	8003baa <moveGyroPID+0x2da>
		else if (distance == 30)
 8003a74:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a78:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003a7c:	eef4 7a47 	vcmp.f32	s15, s14
 8003a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a84:	d103      	bne.n	8003a8e <moveGyroPID+0x1be>
			distErrOffset = DISTANCE_ERROR_OFFSETF;
 8003a86:	4b40      	ldr	r3, [pc, #256]	; (8003b88 <moveGyroPID+0x2b8>)
 8003a88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a8c:	e08d      	b.n	8003baa <moveGyroPID+0x2da>
		else if (distance == 40)
 8003a8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a92:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003b8c <moveGyroPID+0x2bc>
 8003a96:	eef4 7a47 	vcmp.f32	s15, s14
 8003a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9e:	d103      	bne.n	8003aa8 <moveGyroPID+0x1d8>
			distErrOffset = DISTANCE_ERROR_OFFSETF;
 8003aa0:	4b39      	ldr	r3, [pc, #228]	; (8003b88 <moveGyroPID+0x2b8>)
 8003aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003aa6:	e080      	b.n	8003baa <moveGyroPID+0x2da>
		else if (distance == 50)
 8003aa8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aac:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003b90 <moveGyroPID+0x2c0>
 8003ab0:	eef4 7a47 	vcmp.f32	s15, s14
 8003ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab8:	d104      	bne.n	8003ac4 <moveGyroPID+0x1f4>
			distErrOffset = 0;
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ac2:	e072      	b.n	8003baa <moveGyroPID+0x2da>
		else
			distErrOffset = DISTANCE_ERROR_OFFSETF;
 8003ac4:	4b30      	ldr	r3, [pc, #192]	; (8003b88 <moveGyroPID+0x2b8>)
 8003ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003aca:	e06e      	b.n	8003baa <moveGyroPID+0x2da>
	} else {
		if (distance == 10)
 8003acc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ad0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ad4:	eef4 7a47 	vcmp.f32	s15, s14
 8003ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003adc:	d103      	bne.n	8003ae6 <moveGyroPID+0x216>
			distErrOffset = -0.1;
 8003ade:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <moveGyroPID+0x2c4>)
 8003ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ae4:	e061      	b.n	8003baa <moveGyroPID+0x2da>
		else if (distance == 20)
 8003ae6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aea:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003aee:	eef4 7a47 	vcmp.f32	s15, s14
 8003af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af6:	d103      	bne.n	8003b00 <moveGyroPID+0x230>
			distErrOffset = DISTANCE_ERROR_OFFSETR;
 8003af8:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <moveGyroPID+0x2c8>)
 8003afa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003afe:	e054      	b.n	8003baa <moveGyroPID+0x2da>
		else if (distance == 30)
 8003b00:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b04:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003b08:	eef4 7a47 	vcmp.f32	s15, s14
 8003b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b10:	d103      	bne.n	8003b1a <moveGyroPID+0x24a>
			distErrOffset = -0.03;
 8003b12:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <moveGyroPID+0x2cc>)
 8003b14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b18:	e047      	b.n	8003baa <moveGyroPID+0x2da>
		else if (distance == 40)
 8003b1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b1e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003b8c <moveGyroPID+0x2bc>
 8003b22:	eef4 7a47 	vcmp.f32	s15, s14
 8003b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b2a:	d103      	bne.n	8003b34 <moveGyroPID+0x264>
			distErrOffset = -0.02;
 8003b2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ba0 <moveGyroPID+0x2d0>)
 8003b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b32:	e03a      	b.n	8003baa <moveGyroPID+0x2da>
		else if (distance == 50)
 8003b34:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b38:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003b90 <moveGyroPID+0x2c0>
 8003b3c:	eef4 7a47 	vcmp.f32	s15, s14
 8003b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b44:	d12e      	bne.n	8003ba4 <moveGyroPID+0x2d4>
			distErrOffset = 0;
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b4e:	e02c      	b.n	8003baa <moveGyroPID+0x2da>
 8003b50:	20000378 	.word	0x20000378
 8003b54:	20000258 	.word	0x20000258
 8003b58:	3d4ccccd 	.word	0x3d4ccccd
 8003b5c:	20000420 	.word	0x20000420
 8003b60:	44440000 	.word	0x44440000
 8003b64:	4442c000 	.word	0x4442c000
 8003b68:	41a8cccd 	.word	0x41a8cccd
 8003b6c:	200002a0 	.word	0x200002a0
 8003b70:	20000330 	.word	0x20000330
 8003b74:	40020000 	.word	0x40020000
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40020800 	.word	0x40020800
 8003b80:	be4ccccd 	.word	0xbe4ccccd
 8003b84:	be19999a 	.word	0xbe19999a
 8003b88:	bd0f5c29 	.word	0xbd0f5c29
 8003b8c:	42200000 	.word	0x42200000
 8003b90:	42480000 	.word	0x42480000
 8003b94:	bdcccccd 	.word	0xbdcccccd
 8003b98:	bd75c28f 	.word	0xbd75c28f
 8003b9c:	bcf5c28f 	.word	0xbcf5c28f
 8003ba0:	bca3d70a 	.word	0xbca3d70a
		else
			distErrOffset = DISTANCE_ERROR_OFFSETR;
 8003ba4:	4bd2      	ldr	r3, [pc, #840]	; (8003ef0 <moveGyroPID+0x620>)
 8003ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	}

	/*Infinite loop*/
	for (;;) {
		if (totalDistance_left >= (distance + distanceError) * 0.9
 8003baa:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8003bae:	f7fc fccb 	bl	8000548 <__aeabi_f2d>
 8003bb2:	4604      	mov	r4, r0
 8003bb4:	460d      	mov	r5, r1
 8003bb6:	ed97 7a01 	vldr	s14, [r7, #4]
 8003bba:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc2:	ee17 0a90 	vmov	r0, s15
 8003bc6:	f7fc fcbf 	bl	8000548 <__aeabi_f2d>
 8003bca:	a3c3      	add	r3, pc, #780	; (adr r3, 8003ed8 <moveGyroPID+0x608>)
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f7fc fd12 	bl	80005f8 <__aeabi_dmul>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4620      	mov	r0, r4
 8003bda:	4629      	mov	r1, r5
 8003bdc:	f7fc ff92 	bl	8000b04 <__aeabi_dcmpge>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d11d      	bne.n	8003c22 <moveGyroPID+0x352>
				|| totalDistance_right >= (distance + distanceError) * 0.9) {
 8003be6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8003bea:	f7fc fcad 	bl	8000548 <__aeabi_f2d>
 8003bee:	4604      	mov	r4, r0
 8003bf0:	460d      	mov	r5, r1
 8003bf2:	ed97 7a01 	vldr	s14, [r7, #4]
 8003bf6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bfe:	ee17 0a90 	vmov	r0, s15
 8003c02:	f7fc fca1 	bl	8000548 <__aeabi_f2d>
 8003c06:	a3b4      	add	r3, pc, #720	; (adr r3, 8003ed8 <moveGyroPID+0x608>)
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f7fc fcf4 	bl	80005f8 <__aeabi_dmul>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4620      	mov	r0, r4
 8003c16:	4629      	mov	r1, r5
 8003c18:	f7fc ff74 	bl	8000b04 <__aeabi_dcmpge>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d007      	beq.n	8003c32 <moveGyroPID+0x362>
			pwmValA = 1000;
 8003c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c26:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			pwmValC = 1000;
 8003c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c2e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

		}

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8003c32:	4bb0      	ldr	r3, [pc, #704]	; (8003ef4 <moveGyroPID+0x624>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8003c3a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8003c3c:	4bad      	ldr	r3, [pc, #692]	; (8003ef4 <moveGyroPID+0x624>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8003c44:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 8003c46:	f003 fa57 	bl	80070f8 <HAL_GetTick>
 8003c4a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		moving = 1;
 8003c4e:	4baa      	ldr	r3, [pc, #680]	; (8003ef8 <moveGyroPID+0x628>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 8003c54:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003c58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b3c      	cmp	r3, #60	; 0x3c
 8003c60:	d9a3      	bls.n	8003baa <moveGyroPID+0x2da>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8003c62:	4ba6      	ldr	r3, [pc, #664]	; (8003efc <moveGyroPID+0x62c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8003c6c:	4ba4      	ldr	r3, [pc, #656]	; (8003f00 <moveGyroPID+0x630>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			diffLeft = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			diffRight = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8003c82:	4b9e      	ldr	r3, [pc, #632]	; (8003efc <moveGyroPID+0x62c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b10      	cmp	r3, #16
 8003c8e:	d118      	bne.n	8003cc2 <moveGyroPID+0x3f2>
				if (leftTick < leftTick_prev)
 8003c90:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	da07      	bge.n	8003cac <moveGyroPID+0x3dc>
					diffLeft = leftTick_prev - leftTick;
 8003c9c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003caa:	e022      	b.n	8003cf2 <moveGyroPID+0x422>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8003cac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cb0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003cb4:	33ff      	adds	r3, #255	; 0xff
 8003cb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cba:	4413      	add	r3, r2
 8003cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cc0:	e017      	b.n	8003cf2 <moveGyroPID+0x422>
			} else {
				if (leftTick > leftTick_prev)
 8003cc2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003cc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	dd07      	ble.n	8003cde <moveGyroPID+0x40e>
					diffLeft = leftTick - leftTick_prev;
 8003cce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003cd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cdc:	e009      	b.n	8003cf2 <moveGyroPID+0x422>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8003cde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ce2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003ce6:	33ff      	adds	r3, #255	; 0xff
 8003ce8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003cec:	4413      	add	r3, r2
 8003cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8003cf2:	4b83      	ldr	r3, [pc, #524]	; (8003f00 <moveGyroPID+0x630>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d118      	bne.n	8003d32 <moveGyroPID+0x462>
				if (rightTick < rightTick_prev)
 8003d00:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003d04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	da07      	bge.n	8003d1c <moveGyroPID+0x44c>
					diffRight = rightTick_prev - rightTick;
 8003d0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d1a:	e022      	b.n	8003d62 <moveGyroPID+0x492>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 8003d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d20:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003d24:	33ff      	adds	r3, #255	; 0xff
 8003d26:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d30:	e017      	b.n	8003d62 <moveGyroPID+0x492>
			} else {
				if (rightTick > rightTick_prev)
 8003d32:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003d36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	dd07      	ble.n	8003d4e <moveGyroPID+0x47e>
					diffRight = rightTick - rightTick_prev;
 8003d3e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003d42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d4c:	e009      	b.n	8003d62 <moveGyroPID+0x492>
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8003d4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d52:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003d56:	33ff      	adds	r3, #255	; 0xff
 8003d58:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8003d62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d6e:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8003d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d76:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
					* wheel_circumference;
			totalDistance_left += distLeft;
 8003d82:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003d86:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d8e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8003d92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d9e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003da6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dae:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
					* wheel_circumference;
			totalDistance_right += distRight;
 8003db2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003db6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dbe:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
			// 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.

#define pwmValAadjust 300;
#define pwmValBadjust 425;

			if (forward) {
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d030      	beq.n	8003e2a <moveGyroPID+0x55a>

				pwmValA = PIDController_Update(&pidLeft,
 8003dc8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003dcc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dd4:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8003dd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ddc:	4611      	mov	r1, r2
 8003dde:	edd7 0a2e 	vldr	s1, [r7, #184]	; 0xb8
 8003de2:	eeb0 0a67 	vmov.f32	s0, s15
 8003de6:	4618      	mov	r0, r3
 8003de8:	f002 fcb4 	bl	8006754 <PIDController_Update>
 8003dec:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF,
						totalDistance_left, pwmValA) - pwmValAadjust
 8003dee:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft,
 8003df0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003df4:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
				;

				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8003df8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003dfc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003e00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e04:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8003e08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	eef0 0a67 	vmov.f32	s1, s15
 8003e12:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 8003e16:	4618      	mov	r0, r3
 8003e18:	f002 fc9c 	bl	8006754 <PIDController_Update>
 8003e1c:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF, pwmValC)
						+ pwmValBadjust
 8003e1e:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8003e20:	f203 13a9 	addw	r3, r3, #425	; 0x1a9
 8003e24:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8003e28:	e023      	b.n	8003e72 <moveGyroPID+0x5a2>
				;
			} else {
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8003e2a:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8003e2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e32:	4611      	mov	r1, r2
 8003e34:	edd7 0a2e 	vldr	s1, [r7, #184]	; 0xb8
 8003e38:	ed97 0a2d 	vldr	s0, [r7, #180]	; 0xb4
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f002 fc89 	bl	8006754 <PIDController_Update>
 8003e42:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR, pwmValA)
						- pwmValAadjust
 8003e44:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8003e46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e4a:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
				;

				pwmValC = PIDController_Update(&pidRight,
 8003e4e:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8003e52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e56:	4611      	mov	r1, r2
 8003e58:	edd7 0a2d 	vldr	s1, [r7, #180]	; 0xb4
 8003e5c:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 8003e60:	4618      	mov	r0, r3
 8003e62:	f002 fc77 	bl	8006754 <PIDController_Update>
 8003e66:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR,
						totalDistance_right, pwmValC) + pwmValBadjust
 8003e68:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight,
 8003e6a:	f203 13a9 	addw	r3, r3, #425	; 0x1a9
 8003e6e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
//				pwmValC = PIDController_Update(&pidRight,
//						totalDistance_left * STRAIGHTRATIOR,
//						totalDistance_right, pwmValC);
//			}

			distanceError = distErrOffset * distance;
 8003e72:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (forward) {
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d041      	beq.n	8003f0c <moveGyroPID+0x63c>
				if (actualAngle < -0.33) //veering right
 8003e88:	4b1e      	ldr	r3, [pc, #120]	; (8003f04 <moveGyroPID+0x634>)
 8003e8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e8e:	a314      	add	r3, pc, #80	; (adr r3, 8003ee0 <moveGyroPID+0x610>)
 8003e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e94:	f7fc fe22 	bl	8000adc <__aeabi_dcmplt>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <moveGyroPID+0x5d8>
						{

					htim1.Instance->CCR4 = 138; //left abit. prev: 138
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <moveGyroPID+0x638>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	228a      	movs	r2, #138	; 0x8a
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ea6:	e055      	b.n	8003f54 <moveGyroPID+0x684>
				} else if (actualAngle > 0.33) //veering left
 8003ea8:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <moveGyroPID+0x634>)
 8003eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003eae:	a30e      	add	r3, pc, #56	; (adr r3, 8003ee8 <moveGyroPID+0x618>)
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f7fc fe30 	bl	8000b18 <__aeabi_dcmpgt>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d004      	beq.n	8003ec8 <moveGyroPID+0x5f8>
						{

					htim1.Instance->CCR4 = 155; //right a bit. prev: 152
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <moveGyroPID+0x638>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	229b      	movs	r2, #155	; 0x9b
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ec6:	e045      	b.n	8003f54 <moveGyroPID+0x684>
				} else {
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 8003ec8:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <moveGyroPID+0x638>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2296      	movs	r2, #150	; 0x96
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40
 8003ed0:	e040      	b.n	8003f54 <moveGyroPID+0x684>
 8003ed2:	bf00      	nop
 8003ed4:	f3af 8000 	nop.w
 8003ed8:	cccccccd 	.word	0xcccccccd
 8003edc:	3feccccc 	.word	0x3feccccc
 8003ee0:	51eb851f 	.word	0x51eb851f
 8003ee4:	bfd51eb8 	.word	0xbfd51eb8
 8003ee8:	51eb851f 	.word	0x51eb851f
 8003eec:	3fd51eb8 	.word	0x3fd51eb8
 8003ef0:	bd75c28f 	.word	0xbd75c28f
 8003ef4:	20000378 	.word	0x20000378
 8003ef8:	20000414 	.word	0x20000414
 8003efc:	200002a0 	.word	0x200002a0
 8003f00:	20000330 	.word	0x20000330
 8003f04:	20000420 	.word	0x20000420
 8003f08:	20000258 	.word	0x20000258
				}

			} else {
				if (actualAngle > 0.33) //veering left
 8003f0c:	4b42      	ldr	r3, [pc, #264]	; (8004018 <moveGyroPID+0x748>)
 8003f0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f12:	a33d      	add	r3, pc, #244	; (adr r3, 8004008 <moveGyroPID+0x738>)
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	f7fc fdfe 	bl	8000b18 <__aeabi_dcmpgt>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d004      	beq.n	8003f2c <moveGyroPID+0x65c>
						{
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = 138; //left abit
 8003f22:	4b3e      	ldr	r3, [pc, #248]	; (800401c <moveGyroPID+0x74c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	228a      	movs	r2, #138	; 0x8a
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
 8003f2a:	e013      	b.n	8003f54 <moveGyroPID+0x684>
				} else if (actualAngle < -0.33) //veering right
 8003f2c:	4b3a      	ldr	r3, [pc, #232]	; (8004018 <moveGyroPID+0x748>)
 8003f2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f32:	a337      	add	r3, pc, #220	; (adr r3, 8004010 <moveGyroPID+0x740>)
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	f7fc fdd0 	bl	8000adc <__aeabi_dcmplt>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d004      	beq.n	8003f4c <moveGyroPID+0x67c>
						{
					//					 servo = STRAIGHT;
					htim1.Instance->CCR4 = 155; //right a bit
 8003f42:	4b36      	ldr	r3, [pc, #216]	; (800401c <moveGyroPID+0x74c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	229b      	movs	r2, #155	; 0x9b
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
 8003f4a:	e003      	b.n	8003f54 <moveGyroPID+0x684>
				} else {
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 8003f4c:	4b33      	ldr	r3, [pc, #204]	; (800401c <moveGyroPID+0x74c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2296      	movs	r2, #150	; 0x96
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40
				}
			}
			osDelay(10);
 8003f54:	200a      	movs	r0, #10
 8003f56:	f009 fab6 	bl	800d4c6 <osDelay>

			if (totalDistance_left >= (distance + distanceError)
 8003f5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f5e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f66:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003f6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f72:	da0c      	bge.n	8003f8e <moveGyroPID+0x6be>
					|| totalDistance_right >= (distance + distanceError)) {
 8003f74:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f78:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f80:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003f84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8c:	db0c      	blt.n	8003fa8 <moveGyroPID+0x6d8>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8003f8e:	4b24      	ldr	r3, [pc, #144]	; (8004020 <moveGyroPID+0x750>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 8003f96:	4b22      	ldr	r3, [pc, #136]	; (8004020 <moveGyroPID+0x750>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	63da      	str	r2, [r3, #60]	; 0x3c
				htim1.Instance->CCR4 = STRAIGHT; //centre
 8003f9e:	4b1f      	ldr	r3, [pc, #124]	; (800401c <moveGyroPID+0x74c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2296      	movs	r2, #150	; 0x96
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40
				//				sprintf(messageB, "SRight: %2d\0", pwmValC);
				//				OLED_ShowString(10, 40, messageB);
				//				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
				//				OLED_ShowString(10, 50, messageB);
				//				OLED_Refresh_Gram();
				break;
 8003fa6:	e00c      	b.n	8003fc2 <moveGyroPID+0x6f2>
			//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
			//			OLED_ShowString(10, 30, messageA);
			//			sprintf(messageB, "SRight: %2d\0", diffRight);
			//			OLED_ShowString(10, 40, messageB);

			prevTime = currTime;
 8003fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			leftTick_prev = leftTick;
 8003fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			rightTick_prev = rightTick;
 8003fb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		if (totalDistance_left >= (distance + distanceError) * 0.9
 8003fc0:	e5f3      	b.n	8003baa <moveGyroPID+0x2da>
		}
	}
	//	moving = 0;
	//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	2108      	movs	r1, #8
 8003fc6:	4817      	ldr	r0, [pc, #92]	; (8004024 <moveGyroPID+0x754>)
 8003fc8:	f003 fc14 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2104      	movs	r1, #4
 8003fd0:	4814      	ldr	r0, [pc, #80]	; (8004024 <moveGyroPID+0x754>)
 8003fd2:	f003 fc0f 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fdc:	4812      	ldr	r0, [pc, #72]	; (8004028 <moveGyroPID+0x758>)
 8003fde:	f003 fc09 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2120      	movs	r1, #32
 8003fe6:	4811      	ldr	r0, [pc, #68]	; (800402c <moveGyroPID+0x75c>)
 8003fe8:	f003 fc04 	bl	80077f4 <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <moveGyroPID+0x74c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2296      	movs	r2, #150	; 0x96
 8003ff2:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8003ff4:	200a      	movs	r0, #10
 8003ff6:	f009 fa66 	bl	800d4c6 <osDelay>
	return;
 8003ffa:	bf00      	nop
}
 8003ffc:	37c8      	adds	r7, #200	; 0xc8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bdb0      	pop	{r4, r5, r7, pc}
 8004002:	bf00      	nop
 8004004:	f3af 8000 	nop.w
 8004008:	51eb851f 	.word	0x51eb851f
 800400c:	3fd51eb8 	.word	0x3fd51eb8
 8004010:	51eb851f 	.word	0x51eb851f
 8004014:	bfd51eb8 	.word	0xbfd51eb8
 8004018:	20000420 	.word	0x20000420
 800401c:	20000258 	.word	0x20000258
 8004020:	20000378 	.word	0x20000378
 8004024:	40020000 	.word	0x40020000
 8004028:	40021000 	.word	0x40021000
 800402c:	40020800 	.word	0x40020800

08004030 <moveGyroPIDFast>:

//gyro fast for straight
void moveGyroPIDFast(float distance, int forward) {
 8004030:	b5b0      	push	{r4, r5, r7, lr}
 8004032:	b0b2      	sub	sp, #200	; 0xc8
 8004034:	af00      	add	r7, sp, #0
 8004036:	ed87 0a01 	vstr	s0, [r7, #4]
 800403a:	6038      	str	r0, [r7, #0]

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800403c:	2100      	movs	r1, #0
 800403e:	489c      	ldr	r0, [pc, #624]	; (80042b0 <moveGyroPIDFast+0x280>)
 8004040:	f006 fc8e 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004044:	2108      	movs	r1, #8
 8004046:	489a      	ldr	r0, [pc, #616]	; (80042b0 <moveGyroPIDFast+0x280>)
 8004048:	f006 fc8a 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800404c:	210c      	movs	r1, #12
 800404e:	4899      	ldr	r0, [pc, #612]	; (80042b4 <moveGyroPIDFast+0x284>)
 8004050:	f006 fc86 	bl	800a960 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8004054:	4b97      	ldr	r3, [pc, #604]	; (80042b4 <moveGyroPIDFast+0x284>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2296      	movs	r2, #150	; 0x96
 800405a:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(40);
 800405c:	2028      	movs	r0, #40	; 0x28
 800405e:	f009 fa32 	bl	800d4c6 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI, 3350, 3650,
 8004062:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004066:	2224      	movs	r2, #36	; 0x24
 8004068:	2100      	movs	r1, #0
 800406a:	4618      	mov	r0, r3
 800406c:	f00b ff86 	bl	800ff7c <memset>
 8004070:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004074:	65bb      	str	r3, [r7, #88]	; 0x58
 8004076:	f640 5316 	movw	r3, #3350	; 0xd16
 800407a:	663b      	str	r3, [r7, #96]	; 0x60
 800407c:	f640 6342 	movw	r3, #3650	; 0xe42
 8004080:	667b      	str	r3, [r7, #100]	; 0x64
 8004082:	4b8d      	ldr	r3, [pc, #564]	; (80042b8 <moveGyroPIDFast+0x288>)
 8004084:	66bb      	str	r3, [r7, #104]	; 0x68
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI, 3350, 3650,
 8004086:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800408a:	2224      	movs	r2, #36	; 0x24
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f00b ff74 	bl	800ff7c <memset>
 8004094:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004098:	637b      	str	r3, [r7, #52]	; 0x34
 800409a:	f640 5316 	movw	r3, #3350	; 0xd16
 800409e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a0:	f640 6342 	movw	r3, #3650	; 0xe42
 80040a4:	643b      	str	r3, [r7, #64]	; 0x40
 80040a6:	4b84      	ldr	r3, [pc, #528]	; (80042b8 <moveGyroPIDFast+0x288>)
 80040a8:	647b      	str	r3, [r7, #68]	; 0x44
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 80040aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040ae:	4618      	mov	r0, r3
 80040b0:	f002 fb38 	bl	8006724 <PIDController_Init>
	PIDController_Init(&pidRight);
 80040b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80040b8:	4618      	mov	r0, r3
 80040ba:	f002 fb33 	bl	8006724 <PIDController_Init>

	//reset angle
	actualAngle = 0;
 80040be:	497f      	ldr	r1, [pc, #508]	; (80042bc <moveGyroPIDFast+0x28c>)
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9c1 2300 	strd	r2, r3, [r1]

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 80040cc:	4b7c      	ldr	r3, [pc, #496]	; (80042c0 <moveGyroPIDFast+0x290>)
 80040ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float wheel_rotationTicksR = 779; // for back right wheel
 80040d2:	4b7c      	ldr	r3, [pc, #496]	; (80042c4 <moveGyroPIDFast+0x294>)
 80040d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	float wheel_circumference = 21.1; // NEED TO MEASURE AND CHANGE
 80040d8:	4b7b      	ldr	r3, [pc, #492]	; (80042c8 <moveGyroPIDFast+0x298>)
 80040da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 80040de:	213c      	movs	r1, #60	; 0x3c
 80040e0:	487a      	ldr	r0, [pc, #488]	; (80042cc <moveGyroPIDFast+0x29c>)
 80040e2:	f006 ff23 	bl	800af2c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 80040e6:	213c      	movs	r1, #60	; 0x3c
 80040e8:	4879      	ldr	r0, [pc, #484]	; (80042d0 <moveGyroPIDFast+0x2a0>)
 80040ea:	f006 ff1f 	bl	800af2c <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80040ee:	4b77      	ldr	r3, [pc, #476]	; (80042cc <moveGyroPIDFast+0x29c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 80040f8:	4b75      	ldr	r3, [pc, #468]	; (80042d0 <moveGyroPIDFast+0x2a0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8004102:	f002 fff9 	bl	80070f8 <HAL_GetTick>
 8004106:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	uint32_t prevTime = startTime;
 800410a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800410e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float totalDistance_right = 0;
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int diffRight = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distErrOffset;

	int servo;

	//pwm values
	uint16_t pwmValA = 3500;
 800412e:	f640 53ac 	movw	r3, #3500	; 0xdac
 8004132:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	uint16_t pwmValC = 3500;
 8004136:	f640 53ac 	movw	r3, #3500	; 0xdac
 800413a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if (forward) {
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d015      	beq.n	8004170 <moveGyroPIDFast+0x140>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004144:	2201      	movs	r2, #1
 8004146:	2108      	movs	r1, #8
 8004148:	4862      	ldr	r0, [pc, #392]	; (80042d4 <moveGyroPIDFast+0x2a4>)
 800414a:	f003 fb53 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800414e:	2200      	movs	r2, #0
 8004150:	2104      	movs	r1, #4
 8004152:	4860      	ldr	r0, [pc, #384]	; (80042d4 <moveGyroPIDFast+0x2a4>)
 8004154:	f003 fb4e 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004158:	2201      	movs	r2, #1
 800415a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800415e:	485e      	ldr	r0, [pc, #376]	; (80042d8 <moveGyroPIDFast+0x2a8>)
 8004160:	f003 fb48 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004164:	2200      	movs	r2, #0
 8004166:	2120      	movs	r1, #32
 8004168:	485c      	ldr	r0, [pc, #368]	; (80042dc <moveGyroPIDFast+0x2ac>)
 800416a:	f003 fb43 	bl	80077f4 <HAL_GPIO_WritePin>
 800416e:	e014      	b.n	800419a <moveGyroPIDFast+0x16a>
	} else {
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8004170:	2200      	movs	r2, #0
 8004172:	2108      	movs	r1, #8
 8004174:	4857      	ldr	r0, [pc, #348]	; (80042d4 <moveGyroPIDFast+0x2a4>)
 8004176:	f003 fb3d 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800417a:	2201      	movs	r2, #1
 800417c:	2104      	movs	r1, #4
 800417e:	4855      	ldr	r0, [pc, #340]	; (80042d4 <moveGyroPIDFast+0x2a4>)
 8004180:	f003 fb38 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8004184:	2200      	movs	r2, #0
 8004186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800418a:	4853      	ldr	r0, [pc, #332]	; (80042d8 <moveGyroPIDFast+0x2a8>)
 800418c:	f003 fb32 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8004190:	2201      	movs	r2, #1
 8004192:	2120      	movs	r1, #32
 8004194:	4851      	ldr	r0, [pc, #324]	; (80042dc <moveGyroPIDFast+0x2ac>)
 8004196:	f003 fb2d 	bl	80077f4 <HAL_GPIO_WritePin>
	//		else
	//			distErrOffset = DISTANCE_ERROR_OFFSETR;
	//	}

	// outdoor
	if (forward) {
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d045      	beq.n	800422c <moveGyroPIDFast+0x1fc>
		if (distance == 10)
 80041a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80041a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80041a8:	eef4 7a47 	vcmp.f32	s15, s14
 80041ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b0:	d103      	bne.n	80041ba <moveGyroPIDFast+0x18a>
			distErrOffset = -0.2;
 80041b2:	4b4b      	ldr	r3, [pc, #300]	; (80042e0 <moveGyroPIDFast+0x2b0>)
 80041b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80041b8:	e0a7      	b.n	800430a <moveGyroPIDFast+0x2da>
		else if (distance == 20)
 80041ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80041be:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80041c2:	eef4 7a47 	vcmp.f32	s15, s14
 80041c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ca:	d103      	bne.n	80041d4 <moveGyroPIDFast+0x1a4>
			distErrOffset = -0.15;
 80041cc:	4b45      	ldr	r3, [pc, #276]	; (80042e4 <moveGyroPIDFast+0x2b4>)
 80041ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80041d2:	e09a      	b.n	800430a <moveGyroPIDFast+0x2da>
		else if (distance == 30)
 80041d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80041d8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80041dc:	eef4 7a47 	vcmp.f32	s15, s14
 80041e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e4:	d103      	bne.n	80041ee <moveGyroPIDFast+0x1be>
			distErrOffset = DISTANCE_ERROR_OFFSETF;
 80041e6:	4b40      	ldr	r3, [pc, #256]	; (80042e8 <moveGyroPIDFast+0x2b8>)
 80041e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80041ec:	e08d      	b.n	800430a <moveGyroPIDFast+0x2da>
		else if (distance == 40)
 80041ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80041f2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80042ec <moveGyroPIDFast+0x2bc>
 80041f6:	eef4 7a47 	vcmp.f32	s15, s14
 80041fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fe:	d103      	bne.n	8004208 <moveGyroPIDFast+0x1d8>
			distErrOffset = DISTANCE_ERROR_OFFSETF;
 8004200:	4b39      	ldr	r3, [pc, #228]	; (80042e8 <moveGyroPIDFast+0x2b8>)
 8004202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004206:	e080      	b.n	800430a <moveGyroPIDFast+0x2da>
		else if (distance == 50)
 8004208:	edd7 7a01 	vldr	s15, [r7, #4]
 800420c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80042f0 <moveGyroPIDFast+0x2c0>
 8004210:	eef4 7a47 	vcmp.f32	s15, s14
 8004214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004218:	d104      	bne.n	8004224 <moveGyroPIDFast+0x1f4>
			distErrOffset = 0;
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004222:	e072      	b.n	800430a <moveGyroPIDFast+0x2da>
		else
			distErrOffset = DISTANCE_ERROR_OFFSETF;
 8004224:	4b30      	ldr	r3, [pc, #192]	; (80042e8 <moveGyroPIDFast+0x2b8>)
 8004226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800422a:	e06e      	b.n	800430a <moveGyroPIDFast+0x2da>
	} else {
		if (distance == 10)
 800422c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004230:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004234:	eef4 7a47 	vcmp.f32	s15, s14
 8004238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423c:	d103      	bne.n	8004246 <moveGyroPIDFast+0x216>
			distErrOffset = -0.1;
 800423e:	4b2d      	ldr	r3, [pc, #180]	; (80042f4 <moveGyroPIDFast+0x2c4>)
 8004240:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004244:	e061      	b.n	800430a <moveGyroPIDFast+0x2da>
		else if (distance == 20)
 8004246:	edd7 7a01 	vldr	s15, [r7, #4]
 800424a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800424e:	eef4 7a47 	vcmp.f32	s15, s14
 8004252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004256:	d103      	bne.n	8004260 <moveGyroPIDFast+0x230>
			distErrOffset = DISTANCE_ERROR_OFFSETR;
 8004258:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <moveGyroPIDFast+0x2c8>)
 800425a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800425e:	e054      	b.n	800430a <moveGyroPIDFast+0x2da>
		else if (distance == 30)
 8004260:	edd7 7a01 	vldr	s15, [r7, #4]
 8004264:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004268:	eef4 7a47 	vcmp.f32	s15, s14
 800426c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004270:	d103      	bne.n	800427a <moveGyroPIDFast+0x24a>
			distErrOffset = -0.03;
 8004272:	4b22      	ldr	r3, [pc, #136]	; (80042fc <moveGyroPIDFast+0x2cc>)
 8004274:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004278:	e047      	b.n	800430a <moveGyroPIDFast+0x2da>
		else if (distance == 40)
 800427a:	edd7 7a01 	vldr	s15, [r7, #4]
 800427e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80042ec <moveGyroPIDFast+0x2bc>
 8004282:	eef4 7a47 	vcmp.f32	s15, s14
 8004286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428a:	d103      	bne.n	8004294 <moveGyroPIDFast+0x264>
			distErrOffset = -0.02;
 800428c:	4b1c      	ldr	r3, [pc, #112]	; (8004300 <moveGyroPIDFast+0x2d0>)
 800428e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004292:	e03a      	b.n	800430a <moveGyroPIDFast+0x2da>
		else if (distance == 50)
 8004294:	edd7 7a01 	vldr	s15, [r7, #4]
 8004298:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80042f0 <moveGyroPIDFast+0x2c0>
 800429c:	eef4 7a47 	vcmp.f32	s15, s14
 80042a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a4:	d12e      	bne.n	8004304 <moveGyroPIDFast+0x2d4>
			distErrOffset = 0;
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80042ae:	e02c      	b.n	800430a <moveGyroPIDFast+0x2da>
 80042b0:	20000378 	.word	0x20000378
 80042b4:	20000258 	.word	0x20000258
 80042b8:	3d4ccccd 	.word	0x3d4ccccd
 80042bc:	20000420 	.word	0x20000420
 80042c0:	44440000 	.word	0x44440000
 80042c4:	4442c000 	.word	0x4442c000
 80042c8:	41a8cccd 	.word	0x41a8cccd
 80042cc:	200002a0 	.word	0x200002a0
 80042d0:	20000330 	.word	0x20000330
 80042d4:	40020000 	.word	0x40020000
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40020800 	.word	0x40020800
 80042e0:	be4ccccd 	.word	0xbe4ccccd
 80042e4:	be19999a 	.word	0xbe19999a
 80042e8:	bd0f5c29 	.word	0xbd0f5c29
 80042ec:	42200000 	.word	0x42200000
 80042f0:	42480000 	.word	0x42480000
 80042f4:	bdcccccd 	.word	0xbdcccccd
 80042f8:	bd75c28f 	.word	0xbd75c28f
 80042fc:	bcf5c28f 	.word	0xbcf5c28f
 8004300:	bca3d70a 	.word	0xbca3d70a
		else
			distErrOffset = DISTANCE_ERROR_OFFSETR;
 8004304:	4bd2      	ldr	r3, [pc, #840]	; (8004650 <moveGyroPIDFast+0x620>)
 8004306:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	}

	/*Infinite loop*/
	for (;;) {
		if (totalDistance_left >= (distance + distanceError) * 0.9
 800430a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800430e:	f7fc f91b 	bl	8000548 <__aeabi_f2d>
 8004312:	4604      	mov	r4, r0
 8004314:	460d      	mov	r5, r1
 8004316:	ed97 7a01 	vldr	s14, [r7, #4]
 800431a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800431e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004322:	ee17 0a90 	vmov	r0, s15
 8004326:	f7fc f90f 	bl	8000548 <__aeabi_f2d>
 800432a:	a3c3      	add	r3, pc, #780	; (adr r3, 8004638 <moveGyroPIDFast+0x608>)
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	f7fc f962 	bl	80005f8 <__aeabi_dmul>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4620      	mov	r0, r4
 800433a:	4629      	mov	r1, r5
 800433c:	f7fc fbe2 	bl	8000b04 <__aeabi_dcmpge>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d11d      	bne.n	8004382 <moveGyroPIDFast+0x352>
				|| totalDistance_right >= (distance + distanceError) * 0.9) {
 8004346:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800434a:	f7fc f8fd 	bl	8000548 <__aeabi_f2d>
 800434e:	4604      	mov	r4, r0
 8004350:	460d      	mov	r5, r1
 8004352:	ed97 7a01 	vldr	s14, [r7, #4]
 8004356:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800435a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800435e:	ee17 0a90 	vmov	r0, s15
 8004362:	f7fc f8f1 	bl	8000548 <__aeabi_f2d>
 8004366:	a3b4      	add	r3, pc, #720	; (adr r3, 8004638 <moveGyroPIDFast+0x608>)
 8004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436c:	f7fc f944 	bl	80005f8 <__aeabi_dmul>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4620      	mov	r0, r4
 8004376:	4629      	mov	r1, r5
 8004378:	f7fc fbc4 	bl	8000b04 <__aeabi_dcmpge>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <moveGyroPIDFast+0x362>
			pwmValA = 1000;
 8004382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004386:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			pwmValC = 1000;
 800438a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800438e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

		}

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004392:	4bb0      	ldr	r3, [pc, #704]	; (8004654 <moveGyroPIDFast+0x624>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 800439a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 800439c:	4bad      	ldr	r3, [pc, #692]	; (8004654 <moveGyroPIDFast+0x624>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80043a4:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 80043a6:	f002 fea7 	bl	80070f8 <HAL_GetTick>
 80043aa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		moving = 1;
 80043ae:	4baa      	ldr	r3, [pc, #680]	; (8004658 <moveGyroPIDFast+0x628>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 80043b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80043b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b3c      	cmp	r3, #60	; 0x3c
 80043c0:	d9a3      	bls.n	800430a <moveGyroPIDFast+0x2da>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 80043c2:	4ba6      	ldr	r3, [pc, #664]	; (800465c <moveGyroPIDFast+0x62c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 80043cc:	4ba4      	ldr	r3, [pc, #656]	; (8004660 <moveGyroPIDFast+0x630>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			diffLeft = 0;
 80043d6:	2300      	movs	r3, #0
 80043d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			diffRight = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80043e2:	4b9e      	ldr	r3, [pc, #632]	; (800465c <moveGyroPIDFast+0x62c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b10      	cmp	r3, #16
 80043ee:	d118      	bne.n	8004422 <moveGyroPIDFast+0x3f2>
				if (leftTick < leftTick_prev)
 80043f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80043f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043f8:	429a      	cmp	r2, r3
 80043fa:	da07      	bge.n	800440c <moveGyroPIDFast+0x3dc>
					diffLeft = leftTick_prev - leftTick;
 80043fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004400:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800440a:	e022      	b.n	8004452 <moveGyroPIDFast+0x422>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 800440c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004410:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004414:	33ff      	adds	r3, #255	; 0xff
 8004416:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800441a:	4413      	add	r3, r2
 800441c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004420:	e017      	b.n	8004452 <moveGyroPIDFast+0x422>
			} else {
				if (leftTick > leftTick_prev)
 8004422:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004426:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800442a:	429a      	cmp	r2, r3
 800442c:	dd07      	ble.n	800443e <moveGyroPIDFast+0x40e>
					diffLeft = leftTick - leftTick_prev;
 800442e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800443c:	e009      	b.n	8004452 <moveGyroPIDFast+0x422>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 800443e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004442:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004446:	33ff      	adds	r3, #255	; 0xff
 8004448:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800444c:	4413      	add	r3, r2
 800444e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8004452:	4b83      	ldr	r3, [pc, #524]	; (8004660 <moveGyroPIDFast+0x630>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	2b10      	cmp	r3, #16
 800445e:	d118      	bne.n	8004492 <moveGyroPIDFast+0x462>
				if (rightTick < rightTick_prev)
 8004460:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004464:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004468:	429a      	cmp	r2, r3
 800446a:	da07      	bge.n	800447c <moveGyroPIDFast+0x44c>
					diffRight = rightTick_prev - rightTick;
 800446c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800447a:	e022      	b.n	80044c2 <moveGyroPIDFast+0x492>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 800447c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004480:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004484:	33ff      	adds	r3, #255	; 0xff
 8004486:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800448a:	4413      	add	r3, r2
 800448c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004490:	e017      	b.n	80044c2 <moveGyroPIDFast+0x492>
			} else {
				if (rightTick > rightTick_prev)
 8004492:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004496:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800449a:	429a      	cmp	r2, r3
 800449c:	dd07      	ble.n	80044ae <moveGyroPIDFast+0x47e>
					diffRight = rightTick - rightTick_prev;
 800449e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80044a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044ac:	e009      	b.n	80044c2 <moveGyroPIDFast+0x492>
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 80044ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044b2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80044b6:	33ff      	adds	r3, #255	; 0xff
 80044b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80044bc:	4413      	add	r3, r2
 80044be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 80044c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80044ce:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80044d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044d6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80044da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044de:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
					* wheel_circumference;
			totalDistance_left += distLeft;
 80044e2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80044e6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80044ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ee:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 80044f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80044fe:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004506:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800450a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800450e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
					* wheel_circumference;
			totalDistance_right += distRight;
 8004512:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004516:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800451a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800451e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
			// 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.

#define pwmValAadjust 300;
#define pwmValBadjust 425;

			if (forward) {
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d030      	beq.n	800458a <moveGyroPIDFast+0x55a>

				pwmValA = PIDController_Update(&pidLeft,
 8004528:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800452c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004534:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8004538:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800453c:	4611      	mov	r1, r2
 800453e:	edd7 0a2e 	vldr	s1, [r7, #184]	; 0xb8
 8004542:	eeb0 0a67 	vmov.f32	s0, s15
 8004546:	4618      	mov	r0, r3
 8004548:	f002 f904 	bl	8006754 <PIDController_Update>
 800454c:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF,
						totalDistance_left, pwmValA) - pwmValAadjust
 800454e:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft,
 8004550:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004554:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
				;

				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8004558:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800455c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004564:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8004568:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800456c:	4611      	mov	r1, r2
 800456e:	eef0 0a67 	vmov.f32	s1, s15
 8004572:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 8004576:	4618      	mov	r0, r3
 8004578:	f002 f8ec 	bl	8006754 <PIDController_Update>
 800457c:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF, pwmValC)
						+ pwmValBadjust
 800457e:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8004580:	f203 13a9 	addw	r3, r3, #425	; 0x1a9
 8004584:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8004588:	e023      	b.n	80045d2 <moveGyroPIDFast+0x5a2>
				;
			} else {
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 800458a:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 800458e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004592:	4611      	mov	r1, r2
 8004594:	edd7 0a2e 	vldr	s1, [r7, #184]	; 0xb8
 8004598:	ed97 0a2d 	vldr	s0, [r7, #180]	; 0xb4
 800459c:	4618      	mov	r0, r3
 800459e:	f002 f8d9 	bl	8006754 <PIDController_Update>
 80045a2:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR, pwmValA)
						- pwmValAadjust
 80045a4:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 80045a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045aa:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
				;

				pwmValC = PIDController_Update(&pidRight,
 80045ae:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80045b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80045b6:	4611      	mov	r1, r2
 80045b8:	edd7 0a2d 	vldr	s1, [r7, #180]	; 0xb4
 80045bc:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 80045c0:	4618      	mov	r0, r3
 80045c2:	f002 f8c7 	bl	8006754 <PIDController_Update>
 80045c6:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR,
						totalDistance_right, pwmValC) + pwmValBadjust
 80045c8:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight,
 80045ca:	f203 13a9 	addw	r3, r3, #425	; 0x1a9
 80045ce:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
//				pwmValC = PIDController_Update(&pidRight,
//						totalDistance_left * STRAIGHTRATIOR,
//						totalDistance_right, pwmValC);
//			}

			distanceError = distErrOffset * distance;
 80045d2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80045d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80045da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045de:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (forward) {
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d041      	beq.n	800466c <moveGyroPIDFast+0x63c>
				if (actualAngle < -0.33) //veering right
 80045e8:	4b1e      	ldr	r3, [pc, #120]	; (8004664 <moveGyroPIDFast+0x634>)
 80045ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045ee:	a314      	add	r3, pc, #80	; (adr r3, 8004640 <moveGyroPIDFast+0x610>)
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	f7fc fa72 	bl	8000adc <__aeabi_dcmplt>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <moveGyroPIDFast+0x5d8>
						{

					htim1.Instance->CCR4 = 138; //left abit. prev: 138
 80045fe:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <moveGyroPIDFast+0x638>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	228a      	movs	r2, #138	; 0x8a
 8004604:	641a      	str	r2, [r3, #64]	; 0x40
 8004606:	e055      	b.n	80046b4 <moveGyroPIDFast+0x684>
				} else if (actualAngle > 0.33) //veering left
 8004608:	4b16      	ldr	r3, [pc, #88]	; (8004664 <moveGyroPIDFast+0x634>)
 800460a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800460e:	a30e      	add	r3, pc, #56	; (adr r3, 8004648 <moveGyroPIDFast+0x618>)
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	f7fc fa80 	bl	8000b18 <__aeabi_dcmpgt>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <moveGyroPIDFast+0x5f8>
						{

					htim1.Instance->CCR4 = 155; //right a bit. prev: 152
 800461e:	4b12      	ldr	r3, [pc, #72]	; (8004668 <moveGyroPIDFast+0x638>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	229b      	movs	r2, #155	; 0x9b
 8004624:	641a      	str	r2, [r3, #64]	; 0x40
 8004626:	e045      	b.n	80046b4 <moveGyroPIDFast+0x684>
				} else {
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 8004628:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <moveGyroPIDFast+0x638>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2296      	movs	r2, #150	; 0x96
 800462e:	641a      	str	r2, [r3, #64]	; 0x40
 8004630:	e040      	b.n	80046b4 <moveGyroPIDFast+0x684>
 8004632:	bf00      	nop
 8004634:	f3af 8000 	nop.w
 8004638:	cccccccd 	.word	0xcccccccd
 800463c:	3feccccc 	.word	0x3feccccc
 8004640:	51eb851f 	.word	0x51eb851f
 8004644:	bfd51eb8 	.word	0xbfd51eb8
 8004648:	51eb851f 	.word	0x51eb851f
 800464c:	3fd51eb8 	.word	0x3fd51eb8
 8004650:	bd75c28f 	.word	0xbd75c28f
 8004654:	20000378 	.word	0x20000378
 8004658:	20000414 	.word	0x20000414
 800465c:	200002a0 	.word	0x200002a0
 8004660:	20000330 	.word	0x20000330
 8004664:	20000420 	.word	0x20000420
 8004668:	20000258 	.word	0x20000258
				}

			} else {
				if (actualAngle > 0.33) //veering left
 800466c:	4b42      	ldr	r3, [pc, #264]	; (8004778 <moveGyroPIDFast+0x748>)
 800466e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004672:	a33d      	add	r3, pc, #244	; (adr r3, 8004768 <moveGyroPIDFast+0x738>)
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f7fc fa4e 	bl	8000b18 <__aeabi_dcmpgt>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d004      	beq.n	800468c <moveGyroPIDFast+0x65c>
						{
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = 138; //left abit
 8004682:	4b3e      	ldr	r3, [pc, #248]	; (800477c <moveGyroPIDFast+0x74c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	228a      	movs	r2, #138	; 0x8a
 8004688:	641a      	str	r2, [r3, #64]	; 0x40
 800468a:	e013      	b.n	80046b4 <moveGyroPIDFast+0x684>
				} else if (actualAngle < -0.33) //veering right
 800468c:	4b3a      	ldr	r3, [pc, #232]	; (8004778 <moveGyroPIDFast+0x748>)
 800468e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004692:	a337      	add	r3, pc, #220	; (adr r3, 8004770 <moveGyroPIDFast+0x740>)
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f7fc fa20 	bl	8000adc <__aeabi_dcmplt>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d004      	beq.n	80046ac <moveGyroPIDFast+0x67c>
						{
					//					 servo = STRAIGHT;
					htim1.Instance->CCR4 = 155; //right a bit
 80046a2:	4b36      	ldr	r3, [pc, #216]	; (800477c <moveGyroPIDFast+0x74c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	229b      	movs	r2, #155	; 0x9b
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40
 80046aa:	e003      	b.n	80046b4 <moveGyroPIDFast+0x684>
				} else {
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 80046ac:	4b33      	ldr	r3, [pc, #204]	; (800477c <moveGyroPIDFast+0x74c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2296      	movs	r2, #150	; 0x96
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
				}
			}
			osDelay(10);
 80046b4:	200a      	movs	r0, #10
 80046b6:	f008 ff06 	bl	800d4c6 <osDelay>

			if (totalDistance_left >= (distance + distanceError)
 80046ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80046be:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80046c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046c6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80046ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d2:	da0c      	bge.n	80046ee <moveGyroPIDFast+0x6be>
					|| totalDistance_right >= (distance + distanceError)) {
 80046d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80046d8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80046dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046e0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80046e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ec:	db0c      	blt.n	8004708 <moveGyroPIDFast+0x6d8>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 80046ee:	4b24      	ldr	r3, [pc, #144]	; (8004780 <moveGyroPIDFast+0x750>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2200      	movs	r2, #0
 80046f4:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 80046f6:	4b22      	ldr	r3, [pc, #136]	; (8004780 <moveGyroPIDFast+0x750>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	63da      	str	r2, [r3, #60]	; 0x3c
				htim1.Instance->CCR4 = STRAIGHT; //centre
 80046fe:	4b1f      	ldr	r3, [pc, #124]	; (800477c <moveGyroPIDFast+0x74c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2296      	movs	r2, #150	; 0x96
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
				//				sprintf(messageB, "SRight: %2d\0", pwmValC);
				//				OLED_ShowString(10, 40, messageB);
				//				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
				//				OLED_ShowString(10, 50, messageB);
				//				OLED_Refresh_Gram();
				break;
 8004706:	e00c      	b.n	8004722 <moveGyroPIDFast+0x6f2>
			//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
			//			OLED_ShowString(10, 30, messageA);
			//			sprintf(messageB, "SRight: %2d\0", diffRight);
			//			OLED_ShowString(10, 40, messageB);

			prevTime = currTime;
 8004708:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800470c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			leftTick_prev = leftTick;
 8004710:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004714:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			rightTick_prev = rightTick;
 8004718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800471c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		if (totalDistance_left >= (distance + distanceError) * 0.9
 8004720:	e5f3      	b.n	800430a <moveGyroPIDFast+0x2da>
		}
	}
	//	moving = 0;
	//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004722:	2201      	movs	r2, #1
 8004724:	2108      	movs	r1, #8
 8004726:	4817      	ldr	r0, [pc, #92]	; (8004784 <moveGyroPIDFast+0x754>)
 8004728:	f003 f864 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800472c:	2200      	movs	r2, #0
 800472e:	2104      	movs	r1, #4
 8004730:	4814      	ldr	r0, [pc, #80]	; (8004784 <moveGyroPIDFast+0x754>)
 8004732:	f003 f85f 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004736:	2201      	movs	r2, #1
 8004738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800473c:	4812      	ldr	r0, [pc, #72]	; (8004788 <moveGyroPIDFast+0x758>)
 800473e:	f003 f859 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004742:	2200      	movs	r2, #0
 8004744:	2120      	movs	r1, #32
 8004746:	4811      	ldr	r0, [pc, #68]	; (800478c <moveGyroPIDFast+0x75c>)
 8004748:	f003 f854 	bl	80077f4 <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <moveGyroPIDFast+0x74c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2296      	movs	r2, #150	; 0x96
 8004752:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8004754:	200a      	movs	r0, #10
 8004756:	f008 feb6 	bl	800d4c6 <osDelay>
	return;
 800475a:	bf00      	nop
}
 800475c:	37c8      	adds	r7, #200	; 0xc8
 800475e:	46bd      	mov	sp, r7
 8004760:	bdb0      	pop	{r4, r5, r7, pc}
 8004762:	bf00      	nop
 8004764:	f3af 8000 	nop.w
 8004768:	51eb851f 	.word	0x51eb851f
 800476c:	3fd51eb8 	.word	0x3fd51eb8
 8004770:	51eb851f 	.word	0x51eb851f
 8004774:	bfd51eb8 	.word	0xbfd51eb8
 8004778:	20000420 	.word	0x20000420
 800477c:	20000258 	.word	0x20000258
 8004780:	20000378 	.word	0x20000378
 8004784:	40020000 	.word	0x40020000
 8004788:	40021000 	.word	0x40021000
 800478c:	40020800 	.word	0x40020800

08004790 <moveGyroPIDOld>:

// this is without the drastic servo movement
void moveGyroPIDOld(float distance, int forward) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b0b2      	sub	sp, #200	; 0xc8
 8004794:	af00      	add	r7, sp, #0
 8004796:	ed87 0a01 	vstr	s0, [r7, #4]
 800479a:	6038      	str	r0, [r7, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800479c:	2100      	movs	r1, #0
 800479e:	48bc      	ldr	r0, [pc, #752]	; (8004a90 <moveGyroPIDOld+0x300>)
 80047a0:	f006 f8de 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80047a4:	2108      	movs	r1, #8
 80047a6:	48ba      	ldr	r0, [pc, #744]	; (8004a90 <moveGyroPIDOld+0x300>)
 80047a8:	f006 f8da 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80047ac:	210c      	movs	r1, #12
 80047ae:	48b9      	ldr	r0, [pc, #740]	; (8004a94 <moveGyroPIDOld+0x304>)
 80047b0:	f006 f8d6 	bl	800a960 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80047b4:	4bb7      	ldr	r3, [pc, #732]	; (8004a94 <moveGyroPIDOld+0x304>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2296      	movs	r2, #150	; 0x96
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 80047bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80047c0:	2224      	movs	r2, #36	; 0x24
 80047c2:	2100      	movs	r1, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f00b fbd9 	bl	800ff7c <memset>
 80047ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80047ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80047d0:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80047d4:	663b      	str	r3, [r7, #96]	; 0x60
 80047d6:	f640 0398 	movw	r3, #2200	; 0x898
 80047da:	667b      	str	r3, [r7, #100]	; 0x64
 80047dc:	4bae      	ldr	r3, [pc, #696]	; (8004a98 <moveGyroPIDOld+0x308>)
 80047de:	66bb      	str	r3, [r7, #104]	; 0x68
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 80047e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047e4:	2224      	movs	r2, #36	; 0x24
 80047e6:	2100      	movs	r1, #0
 80047e8:	4618      	mov	r0, r3
 80047ea:	f00b fbc7 	bl	800ff7c <memset>
 80047ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80047f2:	637b      	str	r3, [r7, #52]	; 0x34
 80047f4:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80047f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047fa:	f640 0398 	movw	r3, #2200	; 0x898
 80047fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004800:	4ba5      	ldr	r3, [pc, #660]	; (8004a98 <moveGyroPIDOld+0x308>)
 8004802:	647b      	str	r3, [r7, #68]	; 0x44
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8004804:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004808:	4618      	mov	r0, r3
 800480a:	f001 ff8b 	bl	8006724 <PIDController_Init>
	PIDController_Init(&pidRight);
 800480e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004812:	4618      	mov	r0, r3
 8004814:	f001 ff86 	bl	8006724 <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8004818:	4ba0      	ldr	r3, [pc, #640]	; (8004a9c <moveGyroPIDOld+0x30c>)
 800481a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float wheel_rotationTicksR = 779; // for back right wheel
 800481e:	4ba0      	ldr	r3, [pc, #640]	; (8004aa0 <moveGyroPIDOld+0x310>)
 8004820:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	float wheel_circumference = 21.1f; // NEED TO MEASURE AND CHANGE
 8004824:	4b9f      	ldr	r3, [pc, #636]	; (8004aa4 <moveGyroPIDOld+0x314>)
 8004826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 800482a:	213c      	movs	r1, #60	; 0x3c
 800482c:	489e      	ldr	r0, [pc, #632]	; (8004aa8 <moveGyroPIDOld+0x318>)
 800482e:	f006 fb7d 	bl	800af2c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8004832:	213c      	movs	r1, #60	; 0x3c
 8004834:	489d      	ldr	r0, [pc, #628]	; (8004aac <moveGyroPIDOld+0x31c>)
 8004836:	f006 fb79 	bl	800af2c <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 800483a:	4b9b      	ldr	r3, [pc, #620]	; (8004aa8 <moveGyroPIDOld+0x318>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8004844:	4b99      	ldr	r3, [pc, #612]	; (8004aac <moveGyroPIDOld+0x31c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 800484e:	f002 fc53 	bl	80070f8 <HAL_GetTick>
 8004852:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	uint32_t prevTime = startTime;
 8004856:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800485a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 800485e:	f04f 0300 	mov.w	r3, #0
 8004862:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float totalDistance_right = 0;
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 800486e:	2300      	movs	r3, #0
 8004870:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int diffRight = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 800487a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800487e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint16_t pwmValC = 2000 * STRAIGHTRATIOF;
 8004882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004886:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if (forward) {
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d015      	beq.n	80048bc <moveGyroPIDOld+0x12c>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004890:	2201      	movs	r2, #1
 8004892:	2108      	movs	r1, #8
 8004894:	4886      	ldr	r0, [pc, #536]	; (8004ab0 <moveGyroPIDOld+0x320>)
 8004896:	f002 ffad 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800489a:	2200      	movs	r2, #0
 800489c:	2104      	movs	r1, #4
 800489e:	4884      	ldr	r0, [pc, #528]	; (8004ab0 <moveGyroPIDOld+0x320>)
 80048a0:	f002 ffa8 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80048a4:	2201      	movs	r2, #1
 80048a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048aa:	4882      	ldr	r0, [pc, #520]	; (8004ab4 <moveGyroPIDOld+0x324>)
 80048ac:	f002 ffa2 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80048b0:	2200      	movs	r2, #0
 80048b2:	2120      	movs	r1, #32
 80048b4:	4880      	ldr	r0, [pc, #512]	; (8004ab8 <moveGyroPIDOld+0x328>)
 80048b6:	f002 ff9d 	bl	80077f4 <HAL_GPIO_WritePin>
 80048ba:	e014      	b.n	80048e6 <moveGyroPIDOld+0x156>
	} else {
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80048bc:	2200      	movs	r2, #0
 80048be:	2108      	movs	r1, #8
 80048c0:	487b      	ldr	r0, [pc, #492]	; (8004ab0 <moveGyroPIDOld+0x320>)
 80048c2:	f002 ff97 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80048c6:	2201      	movs	r2, #1
 80048c8:	2104      	movs	r1, #4
 80048ca:	4879      	ldr	r0, [pc, #484]	; (8004ab0 <moveGyroPIDOld+0x320>)
 80048cc:	f002 ff92 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 80048d0:	2200      	movs	r2, #0
 80048d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048d6:	4877      	ldr	r0, [pc, #476]	; (8004ab4 <moveGyroPIDOld+0x324>)
 80048d8:	f002 ff8c 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 80048dc:	2201      	movs	r2, #1
 80048de:	2120      	movs	r1, #32
 80048e0:	4875      	ldr	r0, [pc, #468]	; (8004ab8 <moveGyroPIDOld+0x328>)
 80048e2:	f002 ff87 	bl	80077f4 <HAL_GPIO_WritePin>
	}

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80048e6:	4b6a      	ldr	r3, [pc, #424]	; (8004a90 <moveGyroPIDOld+0x300>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80048ee:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 80048f0:	4b67      	ldr	r3, [pc, #412]	; (8004a90 <moveGyroPIDOld+0x300>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 80048f8:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 80048fa:	f002 fbfd 	bl	80070f8 <HAL_GetTick>
 80048fe:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		moving = 1;
 8004902:	4b6e      	ldr	r3, [pc, #440]	; (8004abc <moveGyroPIDOld+0x32c>)
 8004904:	2201      	movs	r2, #1
 8004906:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 8004908:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800490c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b3c      	cmp	r3, #60	; 0x3c
 8004914:	d9e7      	bls.n	80048e6 <moveGyroPIDOld+0x156>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8004916:	4b64      	ldr	r3, [pc, #400]	; (8004aa8 <moveGyroPIDOld+0x318>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8004920:	4b62      	ldr	r3, [pc, #392]	; (8004aac <moveGyroPIDOld+0x31c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

			diffLeft = 0;
 800492a:	2300      	movs	r3, #0
 800492c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			diffRight = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8004936:	4b5c      	ldr	r3, [pc, #368]	; (8004aa8 <moveGyroPIDOld+0x318>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b10      	cmp	r3, #16
 8004942:	d118      	bne.n	8004976 <moveGyroPIDOld+0x1e6>
				if (leftTick < leftTick_prev)
 8004944:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004948:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800494c:	429a      	cmp	r2, r3
 800494e:	da07      	bge.n	8004960 <moveGyroPIDOld+0x1d0>
					diffLeft = leftTick_prev - leftTick;
 8004950:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004954:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800495e:	e022      	b.n	80049a6 <moveGyroPIDOld+0x216>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8004960:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004964:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004968:	33ff      	adds	r3, #255	; 0xff
 800496a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800496e:	4413      	add	r3, r2
 8004970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004974:	e017      	b.n	80049a6 <moveGyroPIDOld+0x216>
			} else {
				if (leftTick > leftTick_prev)
 8004976:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800497a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800497e:	429a      	cmp	r2, r3
 8004980:	dd07      	ble.n	8004992 <moveGyroPIDOld+0x202>
					diffLeft = leftTick - leftTick_prev;
 8004982:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004986:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004990:	e009      	b.n	80049a6 <moveGyroPIDOld+0x216>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8004992:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004996:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800499a:	33ff      	adds	r3, #255	; 0xff
 800499c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80049a0:	4413      	add	r3, r2
 80049a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 80049a6:	4b41      	ldr	r3, [pc, #260]	; (8004aac <moveGyroPIDOld+0x31c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b10      	cmp	r3, #16
 80049b2:	d118      	bne.n	80049e6 <moveGyroPIDOld+0x256>
				if (rightTick < rightTick_prev)
 80049b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80049b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049bc:	429a      	cmp	r2, r3
 80049be:	da07      	bge.n	80049d0 <moveGyroPIDOld+0x240>
					diffRight = rightTick_prev - rightTick;
 80049c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049ce:	e022      	b.n	8004a16 <moveGyroPIDOld+0x286>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 80049d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049d4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80049d8:	33ff      	adds	r3, #255	; 0xff
 80049da:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049de:	4413      	add	r3, r2
 80049e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049e4:	e017      	b.n	8004a16 <moveGyroPIDOld+0x286>
			} else {
				if (rightTick > rightTick_prev)
 80049e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80049ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049ee:	429a      	cmp	r2, r3
 80049f0:	dd07      	ble.n	8004a02 <moveGyroPIDOld+0x272>
					diffRight = rightTick - rightTick_prev;
 80049f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80049f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a00:	e009      	b.n	8004a16 <moveGyroPIDOld+0x286>
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8004a02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a06:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004a0a:	33ff      	adds	r3, #255	; 0xff
 8004a0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004a10:	4413      	add	r3, r2
 8004a12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8004a16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a22:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8004a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a2a:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8004a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a32:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					* wheel_circumference;
			totalDistance_left += distLeft;
 8004a36:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004a3a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a42:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8004a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a52:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8004a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a5a:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8004a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a62:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
					* wheel_circumference;
			totalDistance_right += distRight;
 8004a66:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004a6a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a72:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
//				 pwmValA = PIDController_Update(&pidLeft, totalDistance_right, totalDistance_left*STRAIGHTRATIOR, pwmValA);
//
//				 pwmValC = PIDController_Update(&pidRight, totalDistance_left*STRAIGHTRATIOR, totalDistance_right, pwmValC);
//			 }

			if (forward) {
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d025      	beq.n	8004ac8 <moveGyroPIDOld+0x338>
				distanceError = DISTANCE_ERROR_OFFSETF * distance;
 8004a7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a80:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004ac0 <moveGyroPIDOld+0x330>
 8004a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a88:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 8004a8c:	e024      	b.n	8004ad8 <moveGyroPIDOld+0x348>
 8004a8e:	bf00      	nop
 8004a90:	20000378 	.word	0x20000378
 8004a94:	20000258 	.word	0x20000258
 8004a98:	3d4ccccd 	.word	0x3d4ccccd
 8004a9c:	44440000 	.word	0x44440000
 8004aa0:	4442c000 	.word	0x4442c000
 8004aa4:	41a8cccd 	.word	0x41a8cccd
 8004aa8:	200002a0 	.word	0x200002a0
 8004aac:	20000330 	.word	0x20000330
 8004ab0:	40020000 	.word	0x40020000
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40020800 	.word	0x40020800
 8004abc:	20000414 	.word	0x20000414
 8004ac0:	bd0f5c29 	.word	0xbd0f5c29
 8004ac4:	bd75c28f 	.word	0xbd75c28f
			} else {
				distanceError = DISTANCE_ERROR_OFFSETR * distance;
 8004ac8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004acc:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8004ac4 <moveGyroPIDOld+0x334>
 8004ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ad4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
			}

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (forward) {
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d030      	beq.n	8004b40 <moveGyroPIDOld+0x3b0>
				if (totalAngle < 0.00) //veering right
 8004ade:	4b90      	ldr	r3, [pc, #576]	; (8004d20 <moveGyroPIDOld+0x590>)
 8004ae0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	f7fb fff6 	bl	8000adc <__aeabi_dcmplt>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <moveGyroPIDOld+0x36e>
						{

					htim1.Instance->CCR4 = 140; //left abit. prev: 138
 8004af6:	4b8b      	ldr	r3, [pc, #556]	; (8004d24 <moveGyroPIDOld+0x594>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	228c      	movs	r2, #140	; 0x8c
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40
				}
				if (totalAngle > 0.00) //veering left
 8004afe:	4b88      	ldr	r3, [pc, #544]	; (8004d20 <moveGyroPIDOld+0x590>)
 8004b00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	f7fc f804 	bl	8000b18 <__aeabi_dcmpgt>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <moveGyroPIDOld+0x38e>
						{

					htim1.Instance->CCR4 = 155; //right a bit. prev: 152
 8004b16:	4b83      	ldr	r3, [pc, #524]	; (8004d24 <moveGyroPIDOld+0x594>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	229b      	movs	r2, #155	; 0x9b
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40
				}
				if (totalAngle == 0.00) {
 8004b1e:	4b80      	ldr	r3, [pc, #512]	; (8004d20 <moveGyroPIDOld+0x590>)
 8004b20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	f7fb ffcc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d036      	beq.n	8004ba4 <moveGyroPIDOld+0x414>
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 8004b36:	4b7b      	ldr	r3, [pc, #492]	; (8004d24 <moveGyroPIDOld+0x594>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2296      	movs	r2, #150	; 0x96
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40
 8004b3e:	e031      	b.n	8004ba4 <moveGyroPIDOld+0x414>
				}

			} else {
				if (totalAngle > 0.00) //veering left
 8004b40:	4b77      	ldr	r3, [pc, #476]	; (8004d20 <moveGyroPIDOld+0x590>)
 8004b42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	f7fb ffe3 	bl	8000b18 <__aeabi_dcmpgt>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <moveGyroPIDOld+0x3d0>
						{
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = 140; //left abit
 8004b58:	4b72      	ldr	r3, [pc, #456]	; (8004d24 <moveGyroPIDOld+0x594>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	228c      	movs	r2, #140	; 0x8c
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40
				}
				if (totalAngle < 0.00) //veering right
 8004b60:	4b6f      	ldr	r3, [pc, #444]	; (8004d20 <moveGyroPIDOld+0x590>)
 8004b62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	f7fb ffb5 	bl	8000adc <__aeabi_dcmplt>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <moveGyroPIDOld+0x3f4>
						{
					servo = STRAIGHT;
 8004b78:	2396      	movs	r3, #150	; 0x96
 8004b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
					htim1.Instance->CCR4 = 155; //right a bit
 8004b7c:	4b69      	ldr	r3, [pc, #420]	; (8004d24 <moveGyroPIDOld+0x594>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	229b      	movs	r2, #155	; 0x9b
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40
				}
				if (totalAngle == 0.00) {
 8004b84:	4b66      	ldr	r3, [pc, #408]	; (8004d20 <moveGyroPIDOld+0x590>)
 8004b86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	f7fb ff99 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <moveGyroPIDOld+0x414>
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 8004b9c:	4b61      	ldr	r3, [pc, #388]	; (8004d24 <moveGyroPIDOld+0x594>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2296      	movs	r2, #150	; 0x96
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40
				}
			}
			osDelay(10);
 8004ba4:	200a      	movs	r0, #10
 8004ba6:	f008 fc8e 	bl	800d4c6 <osDelay>
			if (totalDistance_left >= (distance + distanceError)
 8004baa:	ed97 7a01 	vldr	s14, [r7, #4]
 8004bae:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bb6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc2:	da0c      	bge.n	8004bde <moveGyroPIDOld+0x44e>
					|| totalDistance_right >= (distance + distanceError)) {
 8004bc4:	ed97 7a01 	vldr	s14, [r7, #4]
 8004bc8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bd0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bdc:	db3f      	blt.n	8004c5e <moveGyroPIDOld+0x4ce>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8004bde:	4b52      	ldr	r3, [pc, #328]	; (8004d28 <moveGyroPIDOld+0x598>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2200      	movs	r2, #0
 8004be4:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 8004be6:	4b50      	ldr	r3, [pc, #320]	; (8004d28 <moveGyroPIDOld+0x598>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2200      	movs	r2, #0
 8004bec:	63da      	str	r2, [r3, #60]	; 0x3c
//				 moving = 0;
				sprintf(messageA, "dist: %.2f\0", distance);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fb fcaa 	bl	8000548 <__aeabi_f2d>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	f107 0020 	add.w	r0, r7, #32
 8004bfc:	494b      	ldr	r1, [pc, #300]	; (8004d2c <moveGyroPIDOld+0x59c>)
 8004bfe:	f00c f845 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 10, messageA);
 8004c02:	f107 0320 	add.w	r3, r7, #32
 8004c06:	461a      	mov	r2, r3
 8004c08:	210a      	movs	r1, #10
 8004c0a:	200a      	movs	r0, #10
 8004c0c:	f001 fccc 	bl	80065a8 <OLED_ShowString>
//				sprintf(messageA, "SLeft: %2d\0", pwmValA);
//				OLED_ShowString(10, 20, messageA);
				sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 8004c10:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8004c14:	f7fb fc98 	bl	8000548 <__aeabi_f2d>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	f107 0020 	add.w	r0, r7, #32
 8004c20:	4943      	ldr	r1, [pc, #268]	; (8004d30 <moveGyroPIDOld+0x5a0>)
 8004c22:	f00c f833 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 30, messageA);
 8004c26:	f107 0320 	add.w	r3, r7, #32
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	211e      	movs	r1, #30
 8004c2e:	200a      	movs	r0, #10
 8004c30:	f001 fcba 	bl	80065a8 <OLED_ShowString>
//
//				sprintf(messageB, "SRight: %2d\0", pwmValC);
//				OLED_ShowString(10, 40, messageB);
				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 8004c34:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8004c38:	f7fb fc86 	bl	8000548 <__aeabi_f2d>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	f107 000c 	add.w	r0, r7, #12
 8004c44:	493b      	ldr	r1, [pc, #236]	; (8004d34 <moveGyroPIDOld+0x5a4>)
 8004c46:	f00c f821 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 50, messageB);
 8004c4a:	f107 030c 	add.w	r3, r7, #12
 8004c4e:	461a      	mov	r2, r3
 8004c50:	2132      	movs	r1, #50	; 0x32
 8004c52:	200a      	movs	r0, #10
 8004c54:	f001 fca8 	bl	80065a8 <OLED_ShowString>
				OLED_Refresh_Gram();
 8004c58:	f001 fb32 	bl	80062c0 <OLED_Refresh_Gram>
				break;
 8004c5c:	e043      	b.n	8004ce6 <moveGyroPIDOld+0x556>
//			// OLED
//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
//			OLED_ShowString(10, 30, messageA);
//			sprintf(messageB, "SRight: %2d\0", diffRight);
//			OLED_ShowString(10, 40, messageB);
			sprintf(messageA, "dist: %.2f\0", distance);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fb fc72 	bl	8000548 <__aeabi_f2d>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	f107 0020 	add.w	r0, r7, #32
 8004c6c:	492f      	ldr	r1, [pc, #188]	; (8004d2c <moveGyroPIDOld+0x59c>)
 8004c6e:	f00c f80d 	bl	8010c8c <siprintf>
			OLED_ShowString(10, 10, messageA);
 8004c72:	f107 0320 	add.w	r3, r7, #32
 8004c76:	461a      	mov	r2, r3
 8004c78:	210a      	movs	r1, #10
 8004c7a:	200a      	movs	r0, #10
 8004c7c:	f001 fc94 	bl	80065a8 <OLED_ShowString>

			sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 8004c80:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8004c84:	f7fb fc60 	bl	8000548 <__aeabi_f2d>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	f107 0020 	add.w	r0, r7, #32
 8004c90:	4927      	ldr	r1, [pc, #156]	; (8004d30 <moveGyroPIDOld+0x5a0>)
 8004c92:	f00b fffb 	bl	8010c8c <siprintf>
			OLED_ShowString(10, 30, messageA);
 8004c96:	f107 0320 	add.w	r3, r7, #32
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	211e      	movs	r1, #30
 8004c9e:	200a      	movs	r0, #10
 8004ca0:	f001 fc82 	bl	80065a8 <OLED_ShowString>

			sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 8004ca4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8004ca8:	f7fb fc4e 	bl	8000548 <__aeabi_f2d>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	f107 000c 	add.w	r0, r7, #12
 8004cb4:	491f      	ldr	r1, [pc, #124]	; (8004d34 <moveGyroPIDOld+0x5a4>)
 8004cb6:	f00b ffe9 	bl	8010c8c <siprintf>
			OLED_ShowString(10, 50, messageB);
 8004cba:	f107 030c 	add.w	r3, r7, #12
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	2132      	movs	r1, #50	; 0x32
 8004cc2:	200a      	movs	r0, #10
 8004cc4:	f001 fc70 	bl	80065a8 <OLED_ShowString>
			OLED_Refresh_Gram();
 8004cc8:	f001 fafa 	bl	80062c0 <OLED_Refresh_Gram>

			prevTime = currTime;
 8004ccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			leftTick_prev = leftTick;
 8004cd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			rightTick_prev = rightTick;
 8004cdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ce0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004ce4:	e5ff      	b.n	80048e6 <moveGyroPIDOld+0x156>
		}
	}
//	moving = 0;
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	2108      	movs	r1, #8
 8004cea:	4813      	ldr	r0, [pc, #76]	; (8004d38 <moveGyroPIDOld+0x5a8>)
 8004cec:	f002 fd82 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2104      	movs	r1, #4
 8004cf4:	4810      	ldr	r0, [pc, #64]	; (8004d38 <moveGyroPIDOld+0x5a8>)
 8004cf6:	f002 fd7d 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d00:	480e      	ldr	r0, [pc, #56]	; (8004d3c <moveGyroPIDOld+0x5ac>)
 8004d02:	f002 fd77 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004d06:	2200      	movs	r2, #0
 8004d08:	2120      	movs	r1, #32
 8004d0a:	480d      	ldr	r0, [pc, #52]	; (8004d40 <moveGyroPIDOld+0x5b0>)
 8004d0c:	f002 fd72 	bl	80077f4 <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <moveGyroPIDOld+0x594>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2296      	movs	r2, #150	; 0x96
 8004d16:	641a      	str	r2, [r3, #64]	; 0x40
	return;
 8004d18:	bf00      	nop
}
 8004d1a:	37c8      	adds	r7, #200	; 0xc8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20000418 	.word	0x20000418
 8004d24:	20000258 	.word	0x20000258
 8004d28:	20000378 	.word	0x20000378
 8004d2c:	080148b4 	.word	0x080148b4
 8004d30:	080148c0 	.word	0x080148c0
 8004d34:	080148d0 	.word	0x080148d0
 8004d38:	40020000 	.word	0x40020000
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	40020800 	.word	0x40020800

08004d44 <move>:

void move(float distance, int forward) {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b0b0      	sub	sp, #192	; 0xc0
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d4e:	6038      	str	r0, [r7, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8004d50:	2100      	movs	r1, #0
 8004d52:	48d1      	ldr	r0, [pc, #836]	; (8005098 <move+0x354>)
 8004d54:	f005 fe04 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004d58:	2108      	movs	r1, #8
 8004d5a:	48cf      	ldr	r0, [pc, #828]	; (8005098 <move+0x354>)
 8004d5c:	f005 fe00 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004d60:	210c      	movs	r1, #12
 8004d62:	48ce      	ldr	r0, [pc, #824]	; (800509c <move+0x358>)
 8004d64:	f005 fdfc 	bl	800a960 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8004d68:	4bcc      	ldr	r3, [pc, #816]	; (800509c <move+0x358>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2296      	movs	r2, #150	; 0x96
 8004d6e:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 8004d70:	2064      	movs	r0, #100	; 0x64
 8004d72:	f008 fba8 	bl	800d4c6 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI, 500, 1500,
 8004d76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d7a:	2224      	movs	r2, #36	; 0x24
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f00b f8fc 	bl	800ff7c <memset>
 8004d84:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004d88:	657b      	str	r3, [r7, #84]	; 0x54
 8004d8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d90:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004d94:	663b      	str	r3, [r7, #96]	; 0x60
 8004d96:	4bc2      	ldr	r3, [pc, #776]	; (80050a0 <move+0x35c>)
 8004d98:	667b      	str	r3, [r7, #100]	; 0x64
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI, 500, 1500,
 8004d9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d9e:	2224      	movs	r2, #36	; 0x24
 8004da0:	2100      	movs	r1, #0
 8004da2:	4618      	mov	r0, r3
 8004da4:	f00b f8ea 	bl	800ff7c <memset>
 8004da8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004dac:	633b      	str	r3, [r7, #48]	; 0x30
 8004dae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004db4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dba:	4bb9      	ldr	r3, [pc, #740]	; (80050a0 <move+0x35c>)
 8004dbc:	643b      	str	r3, [r7, #64]	; 0x40
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8004dbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f001 fcae 	bl	8006724 <PIDController_Init>
	PIDController_Init(&pidRight);
 8004dc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f001 fca9 	bl	8006724 <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8004dd2:	4bb4      	ldr	r3, [pc, #720]	; (80050a4 <move+0x360>)
 8004dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8004dd8:	4bb3      	ldr	r3, [pc, #716]	; (80050a8 <move+0x364>)
 8004dda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 8004dde:	4bb3      	ldr	r3, [pc, #716]	; (80050ac <move+0x368>)
 8004de0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8004de4:	213c      	movs	r1, #60	; 0x3c
 8004de6:	48b2      	ldr	r0, [pc, #712]	; (80050b0 <move+0x36c>)
 8004de8:	f006 f8a0 	bl	800af2c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8004dec:	213c      	movs	r1, #60	; 0x3c
 8004dee:	48b1      	ldr	r0, [pc, #708]	; (80050b4 <move+0x370>)
 8004df0:	f006 f89c 	bl	800af2c <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8004df4:	4bae      	ldr	r3, [pc, #696]	; (80050b0 <move+0x36c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8004dfe:	4bad      	ldr	r3, [pc, #692]	; (80050b4 <move+0x370>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8004e08:	f002 f976 	bl	80070f8 <HAL_GetTick>
 8004e0c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 8004e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float totalDistance_right = 0;
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	int diffRight = 0;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8004e34:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004e38:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	uint16_t pwmValC = 2000;
 8004e3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004e40:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if (forward) {
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d015      	beq.n	8004e76 <move+0x132>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	2108      	movs	r1, #8
 8004e4e:	489a      	ldr	r0, [pc, #616]	; (80050b8 <move+0x374>)
 8004e50:	f002 fcd0 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004e54:	2200      	movs	r2, #0
 8004e56:	2104      	movs	r1, #4
 8004e58:	4897      	ldr	r0, [pc, #604]	; (80050b8 <move+0x374>)
 8004e5a:	f002 fccb 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e64:	4895      	ldr	r0, [pc, #596]	; (80050bc <move+0x378>)
 8004e66:	f002 fcc5 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2120      	movs	r1, #32
 8004e6e:	4894      	ldr	r0, [pc, #592]	; (80050c0 <move+0x37c>)
 8004e70:	f002 fcc0 	bl	80077f4 <HAL_GPIO_WritePin>
 8004e74:	e014      	b.n	8004ea0 <move+0x15c>
	} else {
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8004e76:	2200      	movs	r2, #0
 8004e78:	2108      	movs	r1, #8
 8004e7a:	488f      	ldr	r0, [pc, #572]	; (80050b8 <move+0x374>)
 8004e7c:	f002 fcba 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8004e80:	2201      	movs	r2, #1
 8004e82:	2104      	movs	r1, #4
 8004e84:	488c      	ldr	r0, [pc, #560]	; (80050b8 <move+0x374>)
 8004e86:	f002 fcb5 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e90:	488a      	ldr	r0, [pc, #552]	; (80050bc <move+0x378>)
 8004e92:	f002 fcaf 	bl	80077f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8004e96:	2201      	movs	r2, #1
 8004e98:	2120      	movs	r1, #32
 8004e9a:	4889      	ldr	r0, [pc, #548]	; (80050c0 <move+0x37c>)
 8004e9c:	f002 fcaa 	bl	80077f4 <HAL_GPIO_WritePin>
	}

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004ea0:	4b7d      	ldr	r3, [pc, #500]	; (8005098 <move+0x354>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004ea8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8004eaa:	4b7b      	ldr	r3, [pc, #492]	; (8005098 <move+0x354>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004eb2:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 8004eb4:	f002 f920 	bl	80070f8 <HAL_GetTick>
 8004eb8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		moving = 1;
 8004ebc:	4b81      	ldr	r3, [pc, #516]	; (80050c4 <move+0x380>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 8004ec2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004ec6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b3c      	cmp	r3, #60	; 0x3c
 8004ece:	d9e7      	bls.n	8004ea0 <move+0x15c>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8004ed0:	4b77      	ldr	r3, [pc, #476]	; (80050b0 <move+0x36c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8004eda:	4b76      	ldr	r3, [pc, #472]	; (80050b4 <move+0x370>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			diffLeft = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			diffRight = 0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8004ef0:	4b6f      	ldr	r3, [pc, #444]	; (80050b0 <move+0x36c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d118      	bne.n	8004f30 <move+0x1ec>
				if (leftTick < leftTick_prev)
 8004efe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004f02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f06:	429a      	cmp	r2, r3
 8004f08:	da07      	bge.n	8004f1a <move+0x1d6>
					diffLeft = leftTick_prev - leftTick;
 8004f0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f18:	e022      	b.n	8004f60 <move+0x21c>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8004f1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f1e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004f22:	33ff      	adds	r3, #255	; 0xff
 8004f24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f28:	4413      	add	r3, r2
 8004f2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f2e:	e017      	b.n	8004f60 <move+0x21c>
			} else {
				if (leftTick > leftTick_prev)
 8004f30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004f34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	dd07      	ble.n	8004f4c <move+0x208>
					diffLeft = leftTick - leftTick_prev;
 8004f3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004f40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f4a:	e009      	b.n	8004f60 <move+0x21c>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8004f4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f50:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004f54:	33ff      	adds	r3, #255	; 0xff
 8004f56:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8004f60:	4b54      	ldr	r3, [pc, #336]	; (80050b4 <move+0x370>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b10      	cmp	r3, #16
 8004f6c:	d118      	bne.n	8004fa0 <move+0x25c>
				if (rightTick < rightTick_prev)
 8004f6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f76:	429a      	cmp	r2, r3
 8004f78:	da07      	bge.n	8004f8a <move+0x246>
					diffRight = rightTick_prev - rightTick;
 8004f7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f88:	e022      	b.n	8004fd0 <move+0x28c>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 8004f8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f8e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004f92:	33ff      	adds	r3, #255	; 0xff
 8004f94:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f98:	4413      	add	r3, r2
 8004f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f9e:	e017      	b.n	8004fd0 <move+0x28c>
			} else {
				if (rightTick > rightTick_prev)
 8004fa0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	dd07      	ble.n	8004fbc <move+0x278>
					diffRight = rightTick - rightTick_prev;
 8004fac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004fba:	e009      	b.n	8004fd0 <move+0x28c>
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8004fbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fc0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004fc4:	33ff      	adds	r3, #255	; 0xff
 8004fc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fca:	4413      	add	r3, r2
 8004fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8004fd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fd4:	ee07 3a90 	vmov	s15, r3
 8004fd8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fdc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fe4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8004fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fec:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
					* wheel_circumference;
			totalDistance_left += distLeft;
 8004ff0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004ff4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8004ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ffc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8005000:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005004:	ee07 3a90 	vmov	s15, r3
 8005008:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800500c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005014:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_right += distRight;
 8005020:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005024:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800502c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
			// 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.

#define pwmValAadjust 300;
#define pwmValBadjust 525;

			if (forward) {
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d04c      	beq.n	80050d0 <move+0x38c>

				pwmValA = PIDController_Update(&pidLeft,
 8005036:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800503a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800503e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005042:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8005046:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800504a:	4611      	mov	r1, r2
 800504c:	edd7 0a2c 	vldr	s1, [r7, #176]	; 0xb0
 8005050:	eeb0 0a67 	vmov.f32	s0, s15
 8005054:	4618      	mov	r0, r3
 8005056:	f001 fb7d 	bl	8006754 <PIDController_Update>
 800505a:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF,
						totalDistance_left, pwmValA) - pwmValAadjust
 800505c:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft,
 800505e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005062:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
				;

				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8005066:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800506a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800506e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005072:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8005076:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800507a:	4611      	mov	r1, r2
 800507c:	eef0 0a67 	vmov.f32	s1, s15
 8005080:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8005084:	4618      	mov	r0, r3
 8005086:	f001 fb65 	bl	8006754 <PIDController_Update>
 800508a:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF, pwmValC)
						+ pwmValBadjust
 800508c:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 800508e:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8005092:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8005096:	e03f      	b.n	8005118 <move+0x3d4>
 8005098:	20000378 	.word	0x20000378
 800509c:	20000258 	.word	0x20000258
 80050a0:	3d4ccccd 	.word	0x3d4ccccd
 80050a4:	44440000 	.word	0x44440000
 80050a8:	4442c000 	.word	0x4442c000
 80050ac:	41b33333 	.word	0x41b33333
 80050b0:	200002a0 	.word	0x200002a0
 80050b4:	20000330 	.word	0x20000330
 80050b8:	40020000 	.word	0x40020000
 80050bc:	40021000 	.word	0x40021000
 80050c0:	40020800 	.word	0x40020800
 80050c4:	20000414 	.word	0x20000414
 80050c8:	bd0f5c29 	.word	0xbd0f5c29
 80050cc:	bd75c28f 	.word	0xbd75c28f
				;
			} else {
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 80050d0:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80050d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80050d8:	4611      	mov	r1, r2
 80050da:	edd7 0a2c 	vldr	s1, [r7, #176]	; 0xb0
 80050de:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 80050e2:	4618      	mov	r0, r3
 80050e4:	f001 fb36 	bl	8006754 <PIDController_Update>
 80050e8:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR, pwmValA)
						- pwmValAadjust
 80050ea:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 80050ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050f0:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
				;

				pwmValC = PIDController_Update(&pidRight,
 80050f4:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80050f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050fc:	4611      	mov	r1, r2
 80050fe:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 8005102:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8005106:	4618      	mov	r0, r3
 8005108:	f001 fb24 	bl	8006754 <PIDController_Update>
 800510c:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR,
						totalDistance_right, pwmValC) + pwmValBadjust
 800510e:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight,
 8005110:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8005114:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
				;
			}

			if (forward) {
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d008      	beq.n	8005130 <move+0x3ec>
				distanceError = DISTANCE_ERROR_OFFSETF * distance;
 800511e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005122:	ed1f 7a17 	vldr	s14, [pc, #-92]	; 80050c8 <move+0x384>
 8005126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800512a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 800512e:	e007      	b.n	8005140 <move+0x3fc>
			} else {
				distanceError = DISTANCE_ERROR_OFFSETR * distance;
 8005130:	edd7 7a01 	vldr	s15, [r7, #4]
 8005134:	ed1f 7a1b 	vldr	s14, [pc, #-108]	; 80050cc <move+0x388>
 8005138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800513c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
			}

			if (totalDistance_left >= (distance + distanceError)
 8005140:	ed97 7a01 	vldr	s14, [r7, #4]
 8005144:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800514c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005158:	da0c      	bge.n	8005174 <move+0x430>
					|| totalDistance_right >= (distance + distanceError)) {
 800515a:	ed97 7a01 	vldr	s14, [r7, #4]
 800515e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005166:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800516a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800516e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005172:	db60      	blt.n	8005236 <move+0x4f2>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8005174:	4b48      	ldr	r3, [pc, #288]	; (8005298 <move+0x554>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2200      	movs	r2, #0
 800517a:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 800517c:	4b46      	ldr	r3, [pc, #280]	; (8005298 <move+0x554>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2200      	movs	r2, #0
 8005182:	63da      	str	r2, [r3, #60]	; 0x3c
				moving = 0;
 8005184:	4b45      	ldr	r3, [pc, #276]	; (800529c <move+0x558>)
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
				sprintf(messageA, "dist: %.2f\0", distance);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fb f9dc 	bl	8000548 <__aeabi_f2d>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	f107 001c 	add.w	r0, r7, #28
 8005198:	4941      	ldr	r1, [pc, #260]	; (80052a0 <move+0x55c>)
 800519a:	f00b fd77 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 10, messageA);
 800519e:	f107 031c 	add.w	r3, r7, #28
 80051a2:	461a      	mov	r2, r3
 80051a4:	210a      	movs	r1, #10
 80051a6:	200a      	movs	r0, #10
 80051a8:	f001 f9fe 	bl	80065a8 <OLED_ShowString>
				sprintf(messageA, "SLeft: %2d\0", pwmValA);
 80051ac:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80051b0:	f107 031c 	add.w	r3, r7, #28
 80051b4:	493b      	ldr	r1, [pc, #236]	; (80052a4 <move+0x560>)
 80051b6:	4618      	mov	r0, r3
 80051b8:	f00b fd68 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 20, messageA);
 80051bc:	f107 031c 	add.w	r3, r7, #28
 80051c0:	461a      	mov	r2, r3
 80051c2:	2114      	movs	r1, #20
 80051c4:	200a      	movs	r0, #10
 80051c6:	f001 f9ef 	bl	80065a8 <OLED_ShowString>
				sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 80051ca:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80051ce:	f7fb f9bb 	bl	8000548 <__aeabi_f2d>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	f107 001c 	add.w	r0, r7, #28
 80051da:	4933      	ldr	r1, [pc, #204]	; (80052a8 <move+0x564>)
 80051dc:	f00b fd56 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 30, messageA);
 80051e0:	f107 031c 	add.w	r3, r7, #28
 80051e4:	461a      	mov	r2, r3
 80051e6:	211e      	movs	r1, #30
 80051e8:	200a      	movs	r0, #10
 80051ea:	f001 f9dd 	bl	80065a8 <OLED_ShowString>

				sprintf(messageB, "SRight: %2d\0", pwmValC);
 80051ee:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80051f2:	f107 0308 	add.w	r3, r7, #8
 80051f6:	492d      	ldr	r1, [pc, #180]	; (80052ac <move+0x568>)
 80051f8:	4618      	mov	r0, r3
 80051fa:	f00b fd47 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 40, messageB);
 80051fe:	f107 0308 	add.w	r3, r7, #8
 8005202:	461a      	mov	r2, r3
 8005204:	2128      	movs	r1, #40	; 0x28
 8005206:	200a      	movs	r0, #10
 8005208:	f001 f9ce 	bl	80065a8 <OLED_ShowString>
				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 800520c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8005210:	f7fb f99a 	bl	8000548 <__aeabi_f2d>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	f107 0008 	add.w	r0, r7, #8
 800521c:	4924      	ldr	r1, [pc, #144]	; (80052b0 <move+0x56c>)
 800521e:	f00b fd35 	bl	8010c8c <siprintf>
				OLED_ShowString(10, 50, messageB);
 8005222:	f107 0308 	add.w	r3, r7, #8
 8005226:	461a      	mov	r2, r3
 8005228:	2132      	movs	r1, #50	; 0x32
 800522a:	200a      	movs	r0, #10
 800522c:	f001 f9bc 	bl	80065a8 <OLED_ShowString>
				OLED_Refresh_Gram();
 8005230:	f001 f846 	bl	80062c0 <OLED_Refresh_Gram>
				break;
 8005234:	e00c      	b.n	8005250 <move+0x50c>
//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
//			OLED_ShowString(10, 30, messageA);
//			sprintf(messageB, "SRight: %2d\0", diffRight);
//			OLED_ShowString(10, 40, messageB);

			prevTime = currTime;
 8005236:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800523a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			leftTick_prev = leftTick;
 800523e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005242:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			rightTick_prev = rightTick;
 8005246:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800524a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800524e:	e627      	b.n	8004ea0 <move+0x15c>
		}
	}
	moving = 0;
 8005250:	4b12      	ldr	r3, [pc, #72]	; (800529c <move+0x558>)
 8005252:	2200      	movs	r2, #0
 8005254:	701a      	strb	r2, [r3, #0]
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8005256:	2201      	movs	r2, #1
 8005258:	2108      	movs	r1, #8
 800525a:	4816      	ldr	r0, [pc, #88]	; (80052b4 <move+0x570>)
 800525c:	f002 faca 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005260:	2200      	movs	r2, #0
 8005262:	2104      	movs	r1, #4
 8005264:	4813      	ldr	r0, [pc, #76]	; (80052b4 <move+0x570>)
 8005266:	f002 fac5 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800526a:	2201      	movs	r2, #1
 800526c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005270:	4811      	ldr	r0, [pc, #68]	; (80052b8 <move+0x574>)
 8005272:	f002 fabf 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005276:	2200      	movs	r2, #0
 8005278:	2120      	movs	r1, #32
 800527a:	4810      	ldr	r0, [pc, #64]	; (80052bc <move+0x578>)
 800527c:	f002 faba 	bl	80077f4 <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8005280:	4b0f      	ldr	r3, [pc, #60]	; (80052c0 <move+0x57c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2296      	movs	r2, #150	; 0x96
 8005286:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8005288:	200a      	movs	r0, #10
 800528a:	f008 f91c 	bl	800d4c6 <osDelay>
	return;
 800528e:	bf00      	nop
}
 8005290:	37c0      	adds	r7, #192	; 0xc0
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20000378 	.word	0x20000378
 800529c:	20000414 	.word	0x20000414
 80052a0:	080148b4 	.word	0x080148b4
 80052a4:	080148e0 	.word	0x080148e0
 80052a8:	080148c0 	.word	0x080148c0
 80052ac:	080148ec 	.word	0x080148ec
 80052b0:	080148d0 	.word	0x080148d0
 80052b4:	40020000 	.word	0x40020000
 80052b8:	40021000 	.word	0x40021000
 80052bc:	40020800 	.word	0x40020800
 80052c0:	20000258 	.word	0x20000258
 80052c4:	00000000 	.word	0x00000000

080052c8 <bLeft90>:

void bLeft90() {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
//	moving = 0;
//	move(0,0);
//	moveGyroPID(5.3, 0);

	// outdoor
	totalAngle = 0;
 80052ce:	4940      	ldr	r1, [pc, #256]	; (80053d0 <bLeft90+0x108>)
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80052dc:	2100      	movs	r1, #0
 80052de:	483d      	ldr	r0, [pc, #244]	; (80053d4 <bLeft90+0x10c>)
 80052e0:	f005 fb3e 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80052e4:	2108      	movs	r1, #8
 80052e6:	483b      	ldr	r0, [pc, #236]	; (80053d4 <bLeft90+0x10c>)
 80052e8:	f005 fb3a 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80052ec:	210c      	movs	r1, #12
 80052ee:	483a      	ldr	r0, [pc, #232]	; (80053d8 <bLeft90+0x110>)
 80052f0:	f005 fb36 	bl	800a960 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80052f4:	4b38      	ldr	r3, [pc, #224]	; (80053d8 <bLeft90+0x110>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2296      	movs	r2, #150	; 0x96
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40
	moveGyroPID(5.5, 1);
 80052fc:	2001      	movs	r0, #1
 80052fe:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 8005302:	f7fe fae5 	bl	80038d0 <moveGyroPID>

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8005306:	2200      	movs	r2, #0
 8005308:	2108      	movs	r1, #8
 800530a:	4834      	ldr	r0, [pc, #208]	; (80053dc <bLeft90+0x114>)
 800530c:	f002 fa72 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8005310:	2201      	movs	r2, #1
 8005312:	2104      	movs	r1, #4
 8005314:	4831      	ldr	r0, [pc, #196]	; (80053dc <bLeft90+0x114>)
 8005316:	f002 fa6d 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 800531a:	2200      	movs	r2, #0
 800531c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005320:	482f      	ldr	r0, [pc, #188]	; (80053e0 <bLeft90+0x118>)
 8005322:	f002 fa67 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8005326:	2201      	movs	r2, #1
 8005328:	2120      	movs	r1, #32
 800532a:	482e      	ldr	r0, [pc, #184]	; (80053e4 <bLeft90+0x11c>)
 800532c:	f002 fa62 	bl	80077f4 <HAL_GPIO_WritePin>
	moving = 1;
 8005330:	4b2d      	ldr	r3, [pc, #180]	; (80053e8 <bLeft90+0x120>)
 8005332:	2201      	movs	r2, #1
 8005334:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = LEFT;
 8005336:	4b28      	ldr	r3, [pc, #160]	; (80053d8 <bLeft90+0x110>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2269      	movs	r2, #105	; 0x69
 800533c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 500);
 800533e:	4b25      	ldr	r3, [pc, #148]	; (80053d4 <bLeft90+0x10c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2900);
 8005348:	4b22      	ldr	r3, [pc, #136]	; (80053d4 <bLeft90+0x10c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f640 3254 	movw	r2, #2900	; 0xb54
 8005350:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005352:	e017      	b.n	8005384 <bLeft90+0xbc>

		if (totalAngle <= -85) {
 8005354:	4b1e      	ldr	r3, [pc, #120]	; (80053d0 <bLeft90+0x108>)
 8005356:	e9d3 0100 	ldrd	r0, r1, [r3]
 800535a:	a31b      	add	r3, pc, #108	; (adr r3, 80053c8 <bLeft90+0x100>)
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	f7fb fbc6 	bl	8000af0 <__aeabi_dcmple>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d111      	bne.n	800538e <bLeft90+0xc6>
			break;
		}
		sprintf(messageA, "Langle %5d\0", (int) (totalAngle));
 800536a:	4b19      	ldr	r3, [pc, #100]	; (80053d0 <bLeft90+0x108>)
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	4610      	mov	r0, r2
 8005372:	4619      	mov	r1, r3
 8005374:	f7fb fbf0 	bl	8000b58 <__aeabi_d2iz>
 8005378:	4602      	mov	r2, r0
 800537a:	1d3b      	adds	r3, r7, #4
 800537c:	491b      	ldr	r1, [pc, #108]	; (80053ec <bLeft90+0x124>)
 800537e:	4618      	mov	r0, r3
 8005380:	f00b fc84 	bl	8010c8c <siprintf>
	while (moving) {
 8005384:	4b18      	ldr	r3, [pc, #96]	; (80053e8 <bLeft90+0x120>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e3      	bne.n	8005354 <bLeft90+0x8c>
 800538c:	e000      	b.n	8005390 <bLeft90+0xc8>
			break;
 800538e:	bf00      	nop
		//     OLED_ShowString(10,30, messageA);
		//     OLED_Refresh_Gram();
	}
	//  stop();
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005390:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <bLeft90+0x10c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2200      	movs	r2, #0
 8005396:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005398:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <bLeft90+0x10c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2200      	movs	r2, #0
 800539e:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80053a0:	4b11      	ldr	r3, [pc, #68]	; (80053e8 <bLeft90+0x120>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	701a      	strb	r2, [r3, #0]
	move(0, 0);
 80053a6:	2000      	movs	r0, #0
 80053a8:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80053f0 <bLeft90+0x128>
 80053ac:	f7ff fcca 	bl	8004d44 <move>
	moveGyroPID(3, 0);
 80053b0:	2000      	movs	r0, #0
 80053b2:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80053b6:	f7fe fa8b 	bl	80038d0 <moveGyroPID>
//	//  dir = (dir + 3) % 4 ;
//	//  x += axis[dir][0] * left_90[xydir];
//	//  xydir = (xydir + 1) % 2;
//	//  y += axis[dir][1] * left_90[xydir];

}
 80053ba:	bf00      	nop
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	f3af 8000 	nop.w
 80053c8:	00000000 	.word	0x00000000
 80053cc:	c0554000 	.word	0xc0554000
 80053d0:	20000418 	.word	0x20000418
 80053d4:	20000378 	.word	0x20000378
 80053d8:	20000258 	.word	0x20000258
 80053dc:	40020000 	.word	0x40020000
 80053e0:	40021000 	.word	0x40021000
 80053e4:	40020800 	.word	0x40020800
 80053e8:	20000414 	.word	0x20000414
 80053ec:	080148fc 	.word	0x080148fc
	...

080053f8 <bRight90>:

void bRight90() {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
//	move(0, 0);
//	moveGyroPID(1, 0);

	// outdoor
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80053fe:	2100      	movs	r1, #0
 8005400:	483f      	ldr	r0, [pc, #252]	; (8005500 <bRight90+0x108>)
 8005402:	f005 faad 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8005406:	2108      	movs	r1, #8
 8005408:	483d      	ldr	r0, [pc, #244]	; (8005500 <bRight90+0x108>)
 800540a:	f005 faa9 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800540e:	210c      	movs	r1, #12
 8005410:	483c      	ldr	r0, [pc, #240]	; (8005504 <bRight90+0x10c>)
 8005412:	f005 faa5 	bl	800a960 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8005416:	4b3b      	ldr	r3, [pc, #236]	; (8005504 <bRight90+0x10c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2296      	movs	r2, #150	; 0x96
 800541c:	641a      	str	r2, [r3, #64]	; 0x40

	moveGyroPID(7, 1);
 800541e:	2001      	movs	r0, #1
 8005420:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8005424:	f7fe fa54 	bl	80038d0 <moveGyroPID>
	totalAngle = 0;
 8005428:	4937      	ldr	r1, [pc, #220]	; (8005508 <bRight90+0x110>)
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	e9c1 2300 	strd	r2, r3, [r1]
	osDelay(100);
 8005436:	2064      	movs	r0, #100	; 0x64
 8005438:	f008 f845 	bl	800d4c6 <osDelay>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800543c:	2200      	movs	r2, #0
 800543e:	2108      	movs	r1, #8
 8005440:	4832      	ldr	r0, [pc, #200]	; (800550c <bRight90+0x114>)
 8005442:	f002 f9d7 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8005446:	2201      	movs	r2, #1
 8005448:	2104      	movs	r1, #4
 800544a:	4830      	ldr	r0, [pc, #192]	; (800550c <bRight90+0x114>)
 800544c:	f002 f9d2 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8005450:	2200      	movs	r2, #0
 8005452:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005456:	482e      	ldr	r0, [pc, #184]	; (8005510 <bRight90+0x118>)
 8005458:	f002 f9cc 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 800545c:	2201      	movs	r2, #1
 800545e:	2120      	movs	r1, #32
 8005460:	482c      	ldr	r0, [pc, #176]	; (8005514 <bRight90+0x11c>)
 8005462:	f002 f9c7 	bl	80077f4 <HAL_GPIO_WritePin>
	moving = 1;
 8005466:	4b2c      	ldr	r3, [pc, #176]	; (8005518 <bRight90+0x120>)
 8005468:	2201      	movs	r2, #1
 800546a:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 250;
 800546c:	4b25      	ldr	r3, [pc, #148]	; (8005504 <bRight90+0x10c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	22fa      	movs	r2, #250	; 0xfa
 8005472:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2700);
 8005474:	4b22      	ldr	r3, [pc, #136]	; (8005500 <bRight90+0x108>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f640 228c 	movw	r2, #2700	; 0xa8c
 800547c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 600);
 800547e:	4b20      	ldr	r3, [pc, #128]	; (8005500 <bRight90+0x108>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005486:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005488:	e017      	b.n	80054ba <bRight90+0xc2>

		if (totalAngle > 83) {
 800548a:	4b1f      	ldr	r3, [pc, #124]	; (8005508 <bRight90+0x110>)
 800548c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005490:	a319      	add	r3, pc, #100	; (adr r3, 80054f8 <bRight90+0x100>)
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f7fb fb3f 	bl	8000b18 <__aeabi_dcmpgt>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d111      	bne.n	80054c4 <bRight90+0xcc>
			break;
		}
		sprintf(messageA, "Langle %5d\0", (int) (totalAngle));
 80054a0:	4b19      	ldr	r3, [pc, #100]	; (8005508 <bRight90+0x110>)
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	4610      	mov	r0, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	f7fb fb55 	bl	8000b58 <__aeabi_d2iz>
 80054ae:	4602      	mov	r2, r0
 80054b0:	1d3b      	adds	r3, r7, #4
 80054b2:	491a      	ldr	r1, [pc, #104]	; (800551c <bRight90+0x124>)
 80054b4:	4618      	mov	r0, r3
 80054b6:	f00b fbe9 	bl	8010c8c <siprintf>
	while (moving) {
 80054ba:	4b17      	ldr	r3, [pc, #92]	; (8005518 <bRight90+0x120>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e3      	bne.n	800548a <bRight90+0x92>
 80054c2:	e000      	b.n	80054c6 <bRight90+0xce>
			break;
 80054c4:	bf00      	nop
		//     OLED_ShowString(10,30, messageA);
		//     OLED_Refresh_Gram();
	}
	//  stop();
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80054c6:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <bRight90+0x108>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2200      	movs	r2, #0
 80054cc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80054ce:	4b0c      	ldr	r3, [pc, #48]	; (8005500 <bRight90+0x108>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2200      	movs	r2, #0
 80054d4:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80054d6:	4b10      	ldr	r3, [pc, #64]	; (8005518 <bRight90+0x120>)
 80054d8:	2200      	movs	r2, #0
 80054da:	701a      	strb	r2, [r3, #0]
	move(0, 0);
 80054dc:	2000      	movs	r0, #0
 80054de:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005520 <bRight90+0x128>
 80054e2:	f7ff fc2f 	bl	8004d44 <move>
	moveGyroPID(2.5, 0);
 80054e6:	2000      	movs	r0, #0
 80054e8:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80054ec:	f7fe f9f0 	bl	80038d0 <moveGyroPID>

}
 80054f0:	bf00      	nop
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	00000000 	.word	0x00000000
 80054fc:	4054c000 	.word	0x4054c000
 8005500:	20000378 	.word	0x20000378
 8005504:	20000258 	.word	0x20000258
 8005508:	20000418 	.word	0x20000418
 800550c:	40020000 	.word	0x40020000
 8005510:	40021000 	.word	0x40021000
 8005514:	40020800 	.word	0x40020800
 8005518:	20000414 	.word	0x20000414
 800551c:	080148fc 	.word	0x080148fc
 8005520:	00000000 	.word	0x00000000

08005524 <left90>:

void left90() {
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
//	//comment for task 2
////	move(0, 0);
////	moveGyroPID(10, 0);

	// outdoor
	totalAngle = 0;
 800552a:	4932      	ldr	r1, [pc, #200]	; (80055f4 <left90+0xd0>)
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8005538:	2100      	movs	r1, #0
 800553a:	482f      	ldr	r0, [pc, #188]	; (80055f8 <left90+0xd4>)
 800553c:	f005 fa10 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8005540:	2108      	movs	r1, #8
 8005542:	482d      	ldr	r0, [pc, #180]	; (80055f8 <left90+0xd4>)
 8005544:	f005 fa0c 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005548:	210c      	movs	r1, #12
 800554a:	482c      	ldr	r0, [pc, #176]	; (80055fc <left90+0xd8>)
 800554c:	f005 fa08 	bl	800a960 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8005550:	4b2a      	ldr	r3, [pc, #168]	; (80055fc <left90+0xd8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2296      	movs	r2, #150	; 0x96
 8005556:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8005558:	2201      	movs	r2, #1
 800555a:	2108      	movs	r1, #8
 800555c:	4828      	ldr	r0, [pc, #160]	; (8005600 <left90+0xdc>)
 800555e:	f002 f949 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005562:	2200      	movs	r2, #0
 8005564:	2104      	movs	r1, #4
 8005566:	4826      	ldr	r0, [pc, #152]	; (8005600 <left90+0xdc>)
 8005568:	f002 f944 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800556c:	2201      	movs	r2, #1
 800556e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005572:	4824      	ldr	r0, [pc, #144]	; (8005604 <left90+0xe0>)
 8005574:	f002 f93e 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005578:	2200      	movs	r2, #0
 800557a:	2120      	movs	r1, #32
 800557c:	4822      	ldr	r0, [pc, #136]	; (8005608 <left90+0xe4>)
 800557e:	f002 f939 	bl	80077f4 <HAL_GPIO_WritePin>
	moving = 1;
 8005582:	4b22      	ldr	r3, [pc, #136]	; (800560c <left90+0xe8>)
 8005584:	2201      	movs	r2, #1
 8005586:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 103;
 8005588:	4b1c      	ldr	r3, [pc, #112]	; (80055fc <left90+0xd8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2267      	movs	r2, #103	; 0x67
 800558e:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 700);
 8005590:	4b19      	ldr	r3, [pc, #100]	; (80055f8 <left90+0xd4>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8005598:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2500);
 800559a:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <left90+0xd4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80055a2:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 80055a4:	e00a      	b.n	80055bc <left90+0x98>

		if (totalAngle >= 85) {
 80055a6:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <left90+0xd0>)
 80055a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	4b17      	ldr	r3, [pc, #92]	; (8005610 <left90+0xec>)
 80055b2:	f7fb faa7 	bl	8000b04 <__aeabi_dcmpge>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d104      	bne.n	80055c6 <left90+0xa2>
	while (moving) {
 80055bc:	4b13      	ldr	r3, [pc, #76]	; (800560c <left90+0xe8>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1f0      	bne.n	80055a6 <left90+0x82>
 80055c4:	e000      	b.n	80055c8 <left90+0xa4>
			break;
 80055c6:	bf00      	nop
		}
	}
//  stop();
	htim1.Instance->CCR4 = STRAIGHT; //centre
 80055c8:	4b0c      	ldr	r3, [pc, #48]	; (80055fc <left90+0xd8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2296      	movs	r2, #150	; 0x96
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(5);
 80055d0:	2005      	movs	r0, #5
 80055d2:	f007 ff78 	bl	800d4c6 <osDelay>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80055d6:	4b08      	ldr	r3, [pc, #32]	; (80055f8 <left90+0xd4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2200      	movs	r2, #0
 80055dc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80055de:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <left90+0xd4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2200      	movs	r2, #0
 80055e4:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80055e6:	4b09      	ldr	r3, [pc, #36]	; (800560c <left90+0xe8>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
	//comment for task 2
//	move(0, 0);
//	moveGyroPID(12.25, 0);
}
 80055ec:	bf00      	nop
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20000418 	.word	0x20000418
 80055f8:	20000378 	.word	0x20000378
 80055fc:	20000258 	.word	0x20000258
 8005600:	40020000 	.word	0x40020000
 8005604:	40021000 	.word	0x40021000
 8005608:	40020800 	.word	0x40020800
 800560c:	20000414 	.word	0x20000414
 8005610:	40554000 	.word	0x40554000
 8005614:	00000000 	.word	0x00000000

08005618 <goRoundObsticleL>:

void goRoundObsticleL() {
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
//	moving = 0;
//	totalAngle = 0;

	//outdooor
	// set up
	totalAngle = 0;
 800561e:	496c      	ldr	r1, [pc, #432]	; (80057d0 <goRoundObsticleL+0x1b8>)
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800562c:	2100      	movs	r1, #0
 800562e:	4869      	ldr	r0, [pc, #420]	; (80057d4 <goRoundObsticleL+0x1bc>)
 8005630:	f005 f996 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8005634:	2108      	movs	r1, #8
 8005636:	4867      	ldr	r0, [pc, #412]	; (80057d4 <goRoundObsticleL+0x1bc>)
 8005638:	f005 f992 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800563c:	210c      	movs	r1, #12
 800563e:	4866      	ldr	r0, [pc, #408]	; (80057d8 <goRoundObsticleL+0x1c0>)
 8005640:	f005 f98e 	bl	800a960 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8005644:	4b64      	ldr	r3, [pc, #400]	; (80057d8 <goRoundObsticleL+0x1c0>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2296      	movs	r2, #150	; 0x96
 800564a:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800564c:	2201      	movs	r2, #1
 800564e:	2108      	movs	r1, #8
 8005650:	4862      	ldr	r0, [pc, #392]	; (80057dc <goRoundObsticleL+0x1c4>)
 8005652:	f002 f8cf 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005656:	2200      	movs	r2, #0
 8005658:	2104      	movs	r1, #4
 800565a:	4860      	ldr	r0, [pc, #384]	; (80057dc <goRoundObsticleL+0x1c4>)
 800565c:	f002 f8ca 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005660:	2201      	movs	r2, #1
 8005662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005666:	485e      	ldr	r0, [pc, #376]	; (80057e0 <goRoundObsticleL+0x1c8>)
 8005668:	f002 f8c4 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800566c:	2200      	movs	r2, #0
 800566e:	2120      	movs	r1, #32
 8005670:	485c      	ldr	r0, [pc, #368]	; (80057e4 <goRoundObsticleL+0x1cc>)
 8005672:	f002 f8bf 	bl	80077f4 <HAL_GPIO_WritePin>
	moving = 1;
 8005676:	4b5c      	ldr	r3, [pc, #368]	; (80057e8 <goRoundObsticleL+0x1d0>)
 8005678:	2201      	movs	r2, #1
 800567a:	701a      	strb	r2, [r3, #0]

	// left
	htim1.Instance->CCR4 = 120;
 800567c:	4b56      	ldr	r3, [pc, #344]	; (80057d8 <goRoundObsticleL+0x1c0>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2278      	movs	r2, #120	; 0x78
 8005682:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 800);
 8005684:	4b53      	ldr	r3, [pc, #332]	; (80057d4 <goRoundObsticleL+0x1bc>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f44f 7248 	mov.w	r2, #800	; 0x320
 800568c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2500);
 800568e:	4b51      	ldr	r3, [pc, #324]	; (80057d4 <goRoundObsticleL+0x1bc>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005696:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005698:	e00a      	b.n	80056b0 <goRoundObsticleL+0x98>

		if (totalAngle >= 45) {
 800569a:	4b4d      	ldr	r3, [pc, #308]	; (80057d0 <goRoundObsticleL+0x1b8>)
 800569c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	4b51      	ldr	r3, [pc, #324]	; (80057ec <goRoundObsticleL+0x1d4>)
 80056a6:	f7fb fa2d 	bl	8000b04 <__aeabi_dcmpge>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d104      	bne.n	80056ba <goRoundObsticleL+0xa2>
	while (moving) {
 80056b0:	4b4d      	ldr	r3, [pc, #308]	; (80057e8 <goRoundObsticleL+0x1d0>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1f0      	bne.n	800569a <goRoundObsticleL+0x82>
 80056b8:	e000      	b.n	80056bc <goRoundObsticleL+0xa4>
			break;
 80056ba:	bf00      	nop
		}
	}

	osDelay(20);
 80056bc:	2014      	movs	r0, #20
 80056be:	f007 ff02 	bl	800d4c6 <osDelay>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80056c2:	4b44      	ldr	r3, [pc, #272]	; (80057d4 <goRoundObsticleL+0x1bc>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2200      	movs	r2, #0
 80056c8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80056ca:	4b42      	ldr	r3, [pc, #264]	; (80057d4 <goRoundObsticleL+0x1bc>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80056d2:	4b45      	ldr	r3, [pc, #276]	; (80057e8 <goRoundObsticleL+0x1d0>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	701a      	strb	r2, [r3, #0]

	// right180
	totalAngle = 0;
 80056d8:	493d      	ldr	r1, [pc, #244]	; (80057d0 <goRoundObsticleL+0x1b8>)
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	f04f 0300 	mov.w	r3, #0
 80056e2:	e9c1 2300 	strd	r2, r3, [r1]
	moving = 1;
 80056e6:	4b40      	ldr	r3, [pc, #256]	; (80057e8 <goRoundObsticleL+0x1d0>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 205;
 80056ec:	4b3a      	ldr	r3, [pc, #232]	; (80057d8 <goRoundObsticleL+0x1c0>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	22cd      	movs	r2, #205	; 0xcd
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2500);
 80056f4:	4b37      	ldr	r3, [pc, #220]	; (80057d4 <goRoundObsticleL+0x1bc>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80056fc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 780);
 80056fe:	4b35      	ldr	r3, [pc, #212]	; (80057d4 <goRoundObsticleL+0x1bc>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8005706:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005708:	e00a      	b.n	8005720 <goRoundObsticleL+0x108>

		if (totalAngle < -97) {
 800570a:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <goRoundObsticleL+0x1b8>)
 800570c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005710:	a32d      	add	r3, pc, #180	; (adr r3, 80057c8 <goRoundObsticleL+0x1b0>)
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	f7fb f9e1 	bl	8000adc <__aeabi_dcmplt>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d104      	bne.n	800572a <goRoundObsticleL+0x112>
	while (moving) {
 8005720:	4b31      	ldr	r3, [pc, #196]	; (80057e8 <goRoundObsticleL+0x1d0>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1f0      	bne.n	800570a <goRoundObsticleL+0xf2>
 8005728:	e000      	b.n	800572c <goRoundObsticleL+0x114>
			break;
 800572a:	bf00      	nop
		}
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800572c:	4b29      	ldr	r3, [pc, #164]	; (80057d4 <goRoundObsticleL+0x1bc>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2200      	movs	r2, #0
 8005732:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005734:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <goRoundObsticleL+0x1bc>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2200      	movs	r2, #0
 800573a:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 800573c:	4b2a      	ldr	r3, [pc, #168]	; (80057e8 <goRoundObsticleL+0x1d0>)
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]
	osDelay(20);
 8005742:	2014      	movs	r0, #20
 8005744:	f007 febf 	bl	800d4c6 <osDelay>

	// left
	totalAngle = 0;
 8005748:	4921      	ldr	r1, [pc, #132]	; (80057d0 <goRoundObsticleL+0x1b8>)
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	e9c1 2300 	strd	r2, r3, [r1]
	moving = 1;
 8005756:	4b24      	ldr	r3, [pc, #144]	; (80057e8 <goRoundObsticleL+0x1d0>)
 8005758:	2201      	movs	r2, #1
 800575a:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 104;
 800575c:	4b1e      	ldr	r3, [pc, #120]	; (80057d8 <goRoundObsticleL+0x1c0>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2268      	movs	r2, #104	; 0x68
 8005762:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 800);
 8005764:	4b1b      	ldr	r3, [pc, #108]	; (80057d4 <goRoundObsticleL+0x1bc>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f44f 7248 	mov.w	r2, #800	; 0x320
 800576c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2500);
 800576e:	4b19      	ldr	r3, [pc, #100]	; (80057d4 <goRoundObsticleL+0x1bc>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005776:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005778:	e00a      	b.n	8005790 <goRoundObsticleL+0x178>

		if (totalAngle >= 46) {
 800577a:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <goRoundObsticleL+0x1b8>)
 800577c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005780:	f04f 0200 	mov.w	r2, #0
 8005784:	4b1a      	ldr	r3, [pc, #104]	; (80057f0 <goRoundObsticleL+0x1d8>)
 8005786:	f7fb f9bd 	bl	8000b04 <__aeabi_dcmpge>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d104      	bne.n	800579a <goRoundObsticleL+0x182>
	while (moving) {
 8005790:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <goRoundObsticleL+0x1d0>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f0      	bne.n	800577a <goRoundObsticleL+0x162>
 8005798:	e000      	b.n	800579c <goRoundObsticleL+0x184>
			break;
 800579a:	bf00      	nop
		}
	}

	htim1.Instance->CCR4 = STRAIGHT; //centre
 800579c:	4b0e      	ldr	r3, [pc, #56]	; (80057d8 <goRoundObsticleL+0x1c0>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2296      	movs	r2, #150	; 0x96
 80057a2:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(20);
 80057a4:	2014      	movs	r0, #20
 80057a6:	f007 fe8e 	bl	800d4c6 <osDelay>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80057aa:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <goRoundObsticleL+0x1bc>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2200      	movs	r2, #0
 80057b0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80057b2:	4b08      	ldr	r3, [pc, #32]	; (80057d4 <goRoundObsticleL+0x1bc>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2200      	movs	r2, #0
 80057b8:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80057ba:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <goRoundObsticleL+0x1d0>)
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]
}
 80057c0:	bf00      	nop
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	00000000 	.word	0x00000000
 80057cc:	c0584000 	.word	0xc0584000
 80057d0:	20000418 	.word	0x20000418
 80057d4:	20000378 	.word	0x20000378
 80057d8:	20000258 	.word	0x20000258
 80057dc:	40020000 	.word	0x40020000
 80057e0:	40021000 	.word	0x40021000
 80057e4:	40020800 	.word	0x40020800
 80057e8:	20000414 	.word	0x20000414
 80057ec:	40468000 	.word	0x40468000
 80057f0:	40470000 	.word	0x40470000

080057f4 <goRoundObsticleR>:

void goRoundObsticleR() {
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
//	moving = 0;
//	totalAngle = 0;

	//outdoor
	// set up
	totalAngle = 0;
 80057fa:	496e      	ldr	r1, [pc, #440]	; (80059b4 <goRoundObsticleR+0x1c0>)
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8005808:	2100      	movs	r1, #0
 800580a:	486b      	ldr	r0, [pc, #428]	; (80059b8 <goRoundObsticleR+0x1c4>)
 800580c:	f005 f8a8 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8005810:	2108      	movs	r1, #8
 8005812:	4869      	ldr	r0, [pc, #420]	; (80059b8 <goRoundObsticleR+0x1c4>)
 8005814:	f005 f8a4 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005818:	210c      	movs	r1, #12
 800581a:	4868      	ldr	r0, [pc, #416]	; (80059bc <goRoundObsticleR+0x1c8>)
 800581c:	f005 f8a0 	bl	800a960 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8005820:	4b66      	ldr	r3, [pc, #408]	; (80059bc <goRoundObsticleR+0x1c8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2296      	movs	r2, #150	; 0x96
 8005826:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8005828:	2201      	movs	r2, #1
 800582a:	2108      	movs	r1, #8
 800582c:	4864      	ldr	r0, [pc, #400]	; (80059c0 <goRoundObsticleR+0x1cc>)
 800582e:	f001 ffe1 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005832:	2200      	movs	r2, #0
 8005834:	2104      	movs	r1, #4
 8005836:	4862      	ldr	r0, [pc, #392]	; (80059c0 <goRoundObsticleR+0x1cc>)
 8005838:	f001 ffdc 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800583c:	2201      	movs	r2, #1
 800583e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005842:	4860      	ldr	r0, [pc, #384]	; (80059c4 <goRoundObsticleR+0x1d0>)
 8005844:	f001 ffd6 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005848:	2200      	movs	r2, #0
 800584a:	2120      	movs	r1, #32
 800584c:	485e      	ldr	r0, [pc, #376]	; (80059c8 <goRoundObsticleR+0x1d4>)
 800584e:	f001 ffd1 	bl	80077f4 <HAL_GPIO_WritePin>
	moving = 1;
 8005852:	4b5e      	ldr	r3, [pc, #376]	; (80059cc <goRoundObsticleR+0x1d8>)
 8005854:	2201      	movs	r2, #1
 8005856:	701a      	strb	r2, [r3, #0]

	//right
	totalAngle = 0;
 8005858:	4956      	ldr	r1, [pc, #344]	; (80059b4 <goRoundObsticleR+0x1c0>)
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	e9c1 2300 	strd	r2, r3, [r1]
	htim1.Instance->CCR4 = 190;
 8005866:	4b55      	ldr	r3, [pc, #340]	; (80059bc <goRoundObsticleR+0x1c8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	22be      	movs	r2, #190	; 0xbe
 800586c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2500);
 800586e:	4b52      	ldr	r3, [pc, #328]	; (80059b8 <goRoundObsticleR+0x1c4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005876:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 800);
 8005878:	4b4f      	ldr	r3, [pc, #316]	; (80059b8 <goRoundObsticleR+0x1c4>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005880:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005882:	e00a      	b.n	800589a <goRoundObsticleR+0xa6>

		if (totalAngle <= -50) {
 8005884:	4b4b      	ldr	r3, [pc, #300]	; (80059b4 <goRoundObsticleR+0x1c0>)
 8005886:	e9d3 0100 	ldrd	r0, r1, [r3]
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	4b50      	ldr	r3, [pc, #320]	; (80059d0 <goRoundObsticleR+0x1dc>)
 8005890:	f7fb f92e 	bl	8000af0 <__aeabi_dcmple>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d104      	bne.n	80058a4 <goRoundObsticleR+0xb0>
	while (moving) {
 800589a:	4b4c      	ldr	r3, [pc, #304]	; (80059cc <goRoundObsticleR+0x1d8>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1f0      	bne.n	8005884 <goRoundObsticleR+0x90>
 80058a2:	e000      	b.n	80058a6 <goRoundObsticleR+0xb2>
			break;
 80058a4:	bf00      	nop
		}
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80058a6:	4b44      	ldr	r3, [pc, #272]	; (80059b8 <goRoundObsticleR+0x1c4>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2200      	movs	r2, #0
 80058ac:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80058ae:	4b42      	ldr	r3, [pc, #264]	; (80059b8 <goRoundObsticleR+0x1c4>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2200      	movs	r2, #0
 80058b4:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80058b6:	4b45      	ldr	r3, [pc, #276]	; (80059cc <goRoundObsticleR+0x1d8>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	701a      	strb	r2, [r3, #0]
	osDelay(20);
 80058bc:	2014      	movs	r0, #20
 80058be:	f007 fe02 	bl	800d4c6 <osDelay>

	// left180
	totalAngle = 0;
 80058c2:	493c      	ldr	r1, [pc, #240]	; (80059b4 <goRoundObsticleR+0x1c0>)
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	e9c1 2300 	strd	r2, r3, [r1]
	moving = 1;
 80058d0:	4b3e      	ldr	r3, [pc, #248]	; (80059cc <goRoundObsticleR+0x1d8>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 100;
 80058d6:	4b39      	ldr	r3, [pc, #228]	; (80059bc <goRoundObsticleR+0x1c8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2264      	movs	r2, #100	; 0x64
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 800);
 80058de:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <goRoundObsticleR+0x1c4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80058e6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2500);
 80058e8:	4b33      	ldr	r3, [pc, #204]	; (80059b8 <goRoundObsticleR+0x1c4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80058f0:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 80058f2:	e00a      	b.n	800590a <goRoundObsticleR+0x116>

		if (totalAngle >= 98) {
 80058f4:	4b2f      	ldr	r3, [pc, #188]	; (80059b4 <goRoundObsticleR+0x1c0>)
 80058f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	4b35      	ldr	r3, [pc, #212]	; (80059d4 <goRoundObsticleR+0x1e0>)
 8005900:	f7fb f900 	bl	8000b04 <__aeabi_dcmpge>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d104      	bne.n	8005914 <goRoundObsticleR+0x120>
	while (moving) {
 800590a:	4b30      	ldr	r3, [pc, #192]	; (80059cc <goRoundObsticleR+0x1d8>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f0      	bne.n	80058f4 <goRoundObsticleR+0x100>
 8005912:	e000      	b.n	8005916 <goRoundObsticleR+0x122>
			break;
 8005914:	bf00      	nop
		}
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005916:	4b28      	ldr	r3, [pc, #160]	; (80059b8 <goRoundObsticleR+0x1c4>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800591e:	4b26      	ldr	r3, [pc, #152]	; (80059b8 <goRoundObsticleR+0x1c4>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2200      	movs	r2, #0
 8005924:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 8005926:	4b29      	ldr	r3, [pc, #164]	; (80059cc <goRoundObsticleR+0x1d8>)
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
	osDelay(20);
 800592c:	2014      	movs	r0, #20
 800592e:	f007 fdca 	bl	800d4c6 <osDelay>

	// right
	totalAngle = 0;
 8005932:	4920      	ldr	r1, [pc, #128]	; (80059b4 <goRoundObsticleR+0x1c0>)
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	e9c1 2300 	strd	r2, r3, [r1]
	moving = 1;
 8005940:	4b22      	ldr	r3, [pc, #136]	; (80059cc <goRoundObsticleR+0x1d8>)
 8005942:	2201      	movs	r2, #1
 8005944:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 220;
 8005946:	4b1d      	ldr	r3, [pc, #116]	; (80059bc <goRoundObsticleR+0x1c8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	22dc      	movs	r2, #220	; 0xdc
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2500);
 800594e:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <goRoundObsticleR+0x1c4>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005956:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 800);
 8005958:	4b17      	ldr	r3, [pc, #92]	; (80059b8 <goRoundObsticleR+0x1c4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005960:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005962:	e00a      	b.n	800597a <goRoundObsticleR+0x186>

		if (totalAngle <= -44) {
 8005964:	4b13      	ldr	r3, [pc, #76]	; (80059b4 <goRoundObsticleR+0x1c0>)
 8005966:	e9d3 0100 	ldrd	r0, r1, [r3]
 800596a:	f04f 0200 	mov.w	r2, #0
 800596e:	4b1a      	ldr	r3, [pc, #104]	; (80059d8 <goRoundObsticleR+0x1e4>)
 8005970:	f7fb f8be 	bl	8000af0 <__aeabi_dcmple>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d104      	bne.n	8005984 <goRoundObsticleR+0x190>
	while (moving) {
 800597a:	4b14      	ldr	r3, [pc, #80]	; (80059cc <goRoundObsticleR+0x1d8>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f0      	bne.n	8005964 <goRoundObsticleR+0x170>
 8005982:	e000      	b.n	8005986 <goRoundObsticleR+0x192>
			break;
 8005984:	bf00      	nop
		}
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005986:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <goRoundObsticleR+0x1c4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2200      	movs	r2, #0
 800598c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800598e:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <goRoundObsticleR+0x1c4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2200      	movs	r2, #0
 8005994:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 8005996:	4b0d      	ldr	r3, [pc, #52]	; (80059cc <goRoundObsticleR+0x1d8>)
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = STRAIGHT; //centre
 800599c:	4b07      	ldr	r3, [pc, #28]	; (80059bc <goRoundObsticleR+0x1c8>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2296      	movs	r2, #150	; 0x96
 80059a2:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(20);
 80059a4:	2014      	movs	r0, #20
 80059a6:	f007 fd8e 	bl	800d4c6 <osDelay>

}
 80059aa:	bf00      	nop
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000418 	.word	0x20000418
 80059b8:	20000378 	.word	0x20000378
 80059bc:	20000258 	.word	0x20000258
 80059c0:	40020000 	.word	0x40020000
 80059c4:	40021000 	.word	0x40021000
 80059c8:	40020800 	.word	0x40020800
 80059cc:	20000414 	.word	0x20000414
 80059d0:	c0490000 	.word	0xc0490000
 80059d4:	40588000 	.word	0x40588000
 80059d8:	c0460000 	.word	0xc0460000

080059dc <right90>:

void right90() {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
//	//comment for task 2
////	move(0, 0);
////	moveGyroPID(10, 0);

	// outdoor
	totalAngle = 0;
 80059e2:	4939      	ldr	r1, [pc, #228]	; (8005ac8 <right90+0xec>)
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80059f0:	2100      	movs	r1, #0
 80059f2:	4836      	ldr	r0, [pc, #216]	; (8005acc <right90+0xf0>)
 80059f4:	f004 ffb4 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80059f8:	2108      	movs	r1, #8
 80059fa:	4834      	ldr	r0, [pc, #208]	; (8005acc <right90+0xf0>)
 80059fc:	f004 ffb0 	bl	800a960 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005a00:	210c      	movs	r1, #12
 8005a02:	4833      	ldr	r0, [pc, #204]	; (8005ad0 <right90+0xf4>)
 8005a04:	f004 ffac 	bl	800a960 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8005a08:	4b31      	ldr	r3, [pc, #196]	; (8005ad0 <right90+0xf4>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2296      	movs	r2, #150	; 0x96
 8005a0e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8005a10:	2201      	movs	r2, #1
 8005a12:	2108      	movs	r1, #8
 8005a14:	482f      	ldr	r0, [pc, #188]	; (8005ad4 <right90+0xf8>)
 8005a16:	f001 feed 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2104      	movs	r1, #4
 8005a1e:	482d      	ldr	r0, [pc, #180]	; (8005ad4 <right90+0xf8>)
 8005a20:	f001 fee8 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005a24:	2201      	movs	r2, #1
 8005a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a2a:	482b      	ldr	r0, [pc, #172]	; (8005ad8 <right90+0xfc>)
 8005a2c:	f001 fee2 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005a30:	2200      	movs	r2, #0
 8005a32:	2120      	movs	r1, #32
 8005a34:	4829      	ldr	r0, [pc, #164]	; (8005adc <right90+0x100>)
 8005a36:	f001 fedd 	bl	80077f4 <HAL_GPIO_WritePin>
	moving = 1;
 8005a3a:	4b29      	ldr	r3, [pc, #164]	; (8005ae0 <right90+0x104>)
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 250;
 8005a40:	4b23      	ldr	r3, [pc, #140]	; (8005ad0 <right90+0xf4>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	22fa      	movs	r2, #250	; 0xfa
 8005a46:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2400);
 8005a48:	4b20      	ldr	r3, [pc, #128]	; (8005acc <right90+0xf0>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8005a50:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 600);
 8005a52:	4b1e      	ldr	r3, [pc, #120]	; (8005acc <right90+0xf0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005a5a:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8005a5c:	e017      	b.n	8005a8e <right90+0xb2>

		if (totalAngle < -86) {
 8005a5e:	4b1a      	ldr	r3, [pc, #104]	; (8005ac8 <right90+0xec>)
 8005a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	4b1e      	ldr	r3, [pc, #120]	; (8005ae4 <right90+0x108>)
 8005a6a:	f7fb f837 	bl	8000adc <__aeabi_dcmplt>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d111      	bne.n	8005a98 <right90+0xbc>
			break;
		}
		sprintf(messageA, "Rangle %5d\0", (int) (totalAngle));
 8005a74:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <right90+0xec>)
 8005a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	f7fb f86b 	bl	8000b58 <__aeabi_d2iz>
 8005a82:	4602      	mov	r2, r0
 8005a84:	1d3b      	adds	r3, r7, #4
 8005a86:	4918      	ldr	r1, [pc, #96]	; (8005ae8 <right90+0x10c>)
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f00b f8ff 	bl	8010c8c <siprintf>
	while (moving) {
 8005a8e:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <right90+0x104>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e3      	bne.n	8005a5e <right90+0x82>
 8005a96:	e000      	b.n	8005a9a <right90+0xbe>
			break;
 8005a98:	bf00      	nop
	}
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8005a9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <right90+0xf4>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2296      	movs	r2, #150	; 0x96
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(5);
 8005aa2:	2005      	movs	r0, #5
 8005aa4:	f007 fd0f 	bl	800d4c6 <osDelay>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005aa8:	4b08      	ldr	r3, [pc, #32]	; (8005acc <right90+0xf0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2200      	movs	r2, #0
 8005aae:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005ab0:	4b06      	ldr	r3, [pc, #24]	; (8005acc <right90+0xf0>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 8005ab8:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <right90+0x104>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	701a      	strb	r2, [r3, #0]
	// comment for task 2
//	move(0, 0);
//	moveGyroPID(8.75, 0);
}
 8005abe:	bf00      	nop
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000418 	.word	0x20000418
 8005acc:	20000378 	.word	0x20000378
 8005ad0:	20000258 	.word	0x20000258
 8005ad4:	40020000 	.word	0x40020000
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	40020800 	.word	0x40020800
 8005ae0:	20000414 	.word	0x20000414
 8005ae4:	c0558000 	.word	0xc0558000
 8005ae8:	08014908 	.word	0x08014908

08005aec <readByte>:

	osDelay(100);
}

////////////////////GYRO FUNCTIONS//////////////////////////
void readByte(uint8_t addr, uint8_t *data) {
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	4603      	mov	r3, r0
 8005af4:	6039      	str	r1, [r7, #0]
 8005af6:	71fb      	strb	r3, [r7, #7]
	buff[0] = addr;
 8005af8:	4a0f      	ldr	r2, [pc, #60]	; (8005b38 <readByte+0x4c>)
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, buff, 1, 10);
 8005afe:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <readByte+0x50>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	b299      	uxth	r1, r3
 8005b08:	230a      	movs	r3, #10
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	4a0a      	ldr	r2, [pc, #40]	; (8005b38 <readByte+0x4c>)
 8005b10:	480b      	ldr	r0, [pc, #44]	; (8005b40 <readByte+0x54>)
 8005b12:	f001 ffe7 	bl	8007ae4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddr << 1, data, 2, 20);
 8005b16:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <readByte+0x50>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	b299      	uxth	r1, r3
 8005b20:	2314      	movs	r3, #20
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	2302      	movs	r3, #2
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	4805      	ldr	r0, [pc, #20]	; (8005b40 <readByte+0x54>)
 8005b2a:	f002 f8d9 	bl	8007ce0 <HAL_I2C_Master_Receive>

}
 8005b2e:	bf00      	nop
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	2000044c 	.word	0x2000044c
 8005b3c:	20000000 	.word	0x20000000
 8005b40:	20000204 	.word	0x20000204

08005b44 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	71fb      	strb	r3, [r7, #7]
 8005b50:	4613      	mov	r3, r2
 8005b52:	71bb      	strb	r3, [r7, #6]
	buff[0] = addr;
 8005b54:	4a0a      	ldr	r2, [pc, #40]	; (8005b80 <writeByte+0x3c>)
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	7013      	strb	r3, [r2, #0]
	buff[1] = data;
 8005b5a:	4a09      	ldr	r2, [pc, #36]	; (8005b80 <writeByte+0x3c>)
 8005b5c:	79bb      	ldrb	r3, [r7, #6]
 8005b5e:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, buff, 2, 20);
 8005b60:	4b08      	ldr	r3, [pc, #32]	; (8005b84 <writeByte+0x40>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	b299      	uxth	r1, r3
 8005b6a:	2314      	movs	r3, #20
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	2302      	movs	r3, #2
 8005b70:	4a03      	ldr	r2, [pc, #12]	; (8005b80 <writeByte+0x3c>)
 8005b72:	4805      	ldr	r0, [pc, #20]	; (8005b88 <writeByte+0x44>)
 8005b74:	f001 ffb6 	bl	8007ae4 <HAL_I2C_Master_Transmit>
}
 8005b78:	bf00      	nop
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	2000044c 	.word	0x2000044c
 8005b84:	20000000 	.word	0x20000000
 8005b88:	20000204 	.word	0x20000204

08005b8c <gyroStart>:

void gyroStart() {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
	writeByte(0x07, 0x07);
 8005b90:	2107      	movs	r1, #7
 8005b92:	2007      	movs	r0, #7
 8005b94:	f7ff ffd6 	bl	8005b44 <writeByte>
	osDelayUntil(10);
 8005b98:	200a      	movs	r0, #10
 8005b9a:	f007 fcaf 	bl	800d4fc <osDelayUntil>

	writeByte(0x07, 0x00);
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	2007      	movs	r0, #7
 8005ba2:	f7ff ffcf 	bl	8005b44 <writeByte>
	osDelayUntil(10);
 8005ba6:	200a      	movs	r0, #10
 8005ba8:	f007 fca8 	bl	800d4fc <osDelayUntil>
}
 8005bac:	bf00      	nop
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <gyroInit>:

void gyroInit() {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0

	writeByte(0x06, 0x00);
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	2006      	movs	r0, #6
 8005bb8:	f7ff ffc4 	bl	8005b44 <writeByte>
	osDelayUntil(10);
 8005bbc:	200a      	movs	r0, #10
 8005bbe:	f007 fc9d 	bl	800d4fc <osDelayUntil>
	writeByte(0x03, 0x80);
 8005bc2:	2180      	movs	r1, #128	; 0x80
 8005bc4:	2003      	movs	r0, #3
 8005bc6:	f7ff ffbd 	bl	8005b44 <writeByte>
	osDelayUntil(10);
 8005bca:	200a      	movs	r0, #10
 8005bcc:	f007 fc96 	bl	800d4fc <osDelayUntil>
	writeByte(0x07, 0x07);
 8005bd0:	2107      	movs	r1, #7
 8005bd2:	2007      	movs	r0, #7
 8005bd4:	f7ff ffb6 	bl	8005b44 <writeByte>
	osDelayUntil(10);
 8005bd8:	200a      	movs	r0, #10
 8005bda:	f007 fc8f 	bl	800d4fc <osDelayUntil>
	writeByte(0x06, 0x01);
 8005bde:	2101      	movs	r1, #1
 8005be0:	2006      	movs	r0, #6
 8005be2:	f7ff ffaf 	bl	8005b44 <writeByte>
	osDelayUntil(10);
 8005be6:	200a      	movs	r0, #10
 8005be8:	f007 fc88 	bl	800d4fc <osDelayUntil>
	writeByte(0x7F, 0x20);
 8005bec:	2120      	movs	r1, #32
 8005bee:	207f      	movs	r0, #127	; 0x7f
 8005bf0:	f7ff ffa8 	bl	8005b44 <writeByte>
	osDelayUntil(10);
 8005bf4:	200a      	movs	r0, #10
 8005bf6:	f007 fc81 	bl	800d4fc <osDelayUntil>
	writeByte(0x01, 0x2F);
 8005bfa:	212f      	movs	r1, #47	; 0x2f
 8005bfc:	2001      	movs	r0, #1
 8005bfe:	f7ff ffa1 	bl	8005b44 <writeByte>
	osDelayUntil(10);
 8005c02:	200a      	movs	r0, #10
 8005c04:	f007 fc7a 	bl	800d4fc <osDelayUntil>
	writeByte(0x0, 0x00);
 8005c08:	2100      	movs	r1, #0
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	f7ff ff9a 	bl	8005b44 <writeByte>
	osDelayUntil(10);
 8005c10:	200a      	movs	r0, #10
 8005c12:	f007 fc73 	bl	800d4fc <osDelayUntil>
	writeByte(0x7F, 0x00);
 8005c16:	2100      	movs	r1, #0
 8005c18:	207f      	movs	r0, #127	; 0x7f
 8005c1a:	f7ff ff93 	bl	8005b44 <writeByte>
	osDelayUntil(10);
 8005c1e:	200a      	movs	r0, #10
 8005c20:	f007 fc6c 	bl	800d4fc <osDelayUntil>
	writeByte(0x07, 0x00);
 8005c24:	2100      	movs	r1, #0
 8005c26:	2007      	movs	r0, #7
 8005c28:	f7ff ff8c 	bl	8005b44 <writeByte>
	osDelayUntil(10);
 8005c2c:	200a      	movs	r0, #10
 8005c2e:	f007 fc65 	bl	800d4fc <osDelayUntil>

}
 8005c32:	bf00      	nop
 8005c34:	bd80      	pop	{r7, pc}
	...

08005c38 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b090      	sub	sp, #64	; 0x40
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t instrBuffer[40], angle;
	uint16_t i = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	86fb      	strh	r3, [r7, #54]	; 0x36
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 1);
 8005c44:	2201      	movs	r2, #1
 8005c46:	49c0      	ldr	r1, [pc, #768]	; (8005f48 <StartDefaultTask+0x310>)
 8005c48:	48c0      	ldr	r0, [pc, #768]	; (8005f4c <StartDefaultTask+0x314>)
 8005c4a:	f006 fb92 	bl	800c372 <HAL_UART_Receive_IT>

	moving = 0;
 8005c4e:	4bc0      	ldr	r3, [pc, #768]	; (8005f50 <StartDefaultTask+0x318>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	701a      	strb	r2, [r3, #0]
	cmd = data = newCmdReceived = 0;
 8005c54:	4bbf      	ldr	r3, [pc, #764]	; (8005f54 <StartDefaultTask+0x31c>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]
 8005c5a:	4bbf      	ldr	r3, [pc, #764]	; (8005f58 <StartDefaultTask+0x320>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	4bbd      	ldr	r3, [pc, #756]	; (8005f58 <StartDefaultTask+0x320>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	4bbd      	ldr	r3, [pc, #756]	; (8005f5c <StartDefaultTask+0x324>)
 8005c68:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	for (;;) {

		//Toggle LED just to see if the code is running
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8005c6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c6e:	48bc      	ldr	r0, [pc, #752]	; (8005f60 <StartDefaultTask+0x328>)
 8005c70:	f001 fdd9 	bl	8007826 <HAL_GPIO_TogglePin>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005c74:	210c      	movs	r1, #12
 8005c76:	48bb      	ldr	r0, [pc, #748]	; (8005f64 <StartDefaultTask+0x32c>)
 8005c78:	f004 fe72 	bl	800a960 <HAL_TIM_PWM_Start>

		htim1.Instance->CCR4 = STRAIGHT; //centre
 8005c7c:	4bb9      	ldr	r3, [pc, #740]	; (8005f64 <StartDefaultTask+0x32c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2296      	movs	r2, #150	; 0x96
 8005c82:	641a      	str	r2, [r3, #64]	; 0x40

		sprintf(instrBuffer, "Dst: %.2f\0", Distance);
 8005c84:	4bb8      	ldr	r3, [pc, #736]	; (8005f68 <StartDefaultTask+0x330>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fa fc5d 	bl	8000548 <__aeabi_f2d>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	f107 000c 	add.w	r0, r7, #12
 8005c96:	49b5      	ldr	r1, [pc, #724]	; (8005f6c <StartDefaultTask+0x334>)
 8005c98:	f00a fff8 	bl	8010c8c <siprintf>
		OLED_ShowString(10, 30, instrBuffer);
 8005c9c:	f107 030c 	add.w	r3, r7, #12
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	211e      	movs	r1, #30
 8005ca4:	200a      	movs	r0, #10
 8005ca6:	f000 fc7f 	bl	80065a8 <OLED_ShowString>
		sprintf(instrBuffer, "Trv: %.2f\0", distanceTraveled);
 8005caa:	4bb1      	ldr	r3, [pc, #708]	; (8005f70 <StartDefaultTask+0x338>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fa fc4a 	bl	8000548 <__aeabi_f2d>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	f107 000c 	add.w	r0, r7, #12
 8005cbc:	49ad      	ldr	r1, [pc, #692]	; (8005f74 <StartDefaultTask+0x33c>)
 8005cbe:	f00a ffe5 	bl	8010c8c <siprintf>
		OLED_ShowString(10, 40, instrBuffer);
 8005cc2:	f107 030c 	add.w	r3, r7, #12
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	2128      	movs	r1, #40	; 0x28
 8005cca:	200a      	movs	r0, #10
 8005ccc:	f000 fc6c 	bl	80065a8 <OLED_ShowString>
		OLED_Refresh_Gram();
 8005cd0:	f000 faf6 	bl	80062c0 <OLED_Refresh_Gram>
		// 1: forward
		// 2: left
		// 3: right
		// 4: reverse
		// 5: shortest path
		if (newCmdReceived == 1) {
 8005cd4:	4b9f      	ldr	r3, [pc, #636]	; (8005f54 <StartDefaultTask+0x31c>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	f040 81cf 	bne.w	800607c <StartDefaultTask+0x444>
			newCmdReceived = 0;
 8005cde:	4b9d      	ldr	r3, [pc, #628]	; (8005f54 <StartDefaultTask+0x31c>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
			switch (cmd) {
 8005ce4:	4b9d      	ldr	r3, [pc, #628]	; (8005f5c <StartDefaultTask+0x324>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	3b4c      	subs	r3, #76	; 0x4c
 8005cea:	2b2c      	cmp	r3, #44	; 0x2c
 8005cec:	f200 81c2 	bhi.w	8006074 <StartDefaultTask+0x43c>
 8005cf0:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <StartDefaultTask+0xc0>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005f01 	.word	0x08005f01
 8005cfc:	08006075 	.word	0x08006075
 8005d00:	08006075 	.word	0x08006075
 8005d04:	08006075 	.word	0x08006075
 8005d08:	08006075 	.word	0x08006075
 8005d0c:	08006075 	.word	0x08006075
 8005d10:	08005f0d 	.word	0x08005f0d
 8005d14:	08006075 	.word	0x08006075
 8005d18:	08006057 	.word	0x08006057
 8005d1c:	08006075 	.word	0x08006075
 8005d20:	08006075 	.word	0x08006075
 8005d24:	08006075 	.word	0x08006075
 8005d28:	08005fcf 	.word	0x08005fcf
 8005d2c:	08006063 	.word	0x08006063
 8005d30:	08006075 	.word	0x08006075
 8005d34:	08006075 	.word	0x08006075
 8005d38:	08006075 	.word	0x08006075
 8005d3c:	08006075 	.word	0x08006075
 8005d40:	08006075 	.word	0x08006075
 8005d44:	08006075 	.word	0x08006075
 8005d48:	08006075 	.word	0x08006075
 8005d4c:	08005ed5 	.word	0x08005ed5
 8005d50:	08006075 	.word	0x08006075
 8005d54:	08006075 	.word	0x08006075
 8005d58:	08005ef5 	.word	0x08005ef5
 8005d5c:	08006075 	.word	0x08006075
 8005d60:	08006075 	.word	0x08006075
 8005d64:	08006075 	.word	0x08006075
 8005d68:	08006075 	.word	0x08006075
 8005d6c:	08006075 	.word	0x08006075
 8005d70:	08006075 	.word	0x08006075
 8005d74:	08006075 	.word	0x08006075
 8005d78:	08005e35 	.word	0x08005e35
 8005d7c:	08006075 	.word	0x08006075
 8005d80:	08006075 	.word	0x08006075
 8005d84:	08006075 	.word	0x08006075
 8005d88:	08006075 	.word	0x08006075
 8005d8c:	08006075 	.word	0x08006075
 8005d90:	08005e41 	.word	0x08005e41
 8005d94:	08005e4d 	.word	0x08005e4d
 8005d98:	0800604b 	.word	0x0800604b
 8005d9c:	0800603f 	.word	0x0800603f
 8005da0:	08006075 	.word	0x08006075
 8005da4:	08005dad 	.word	0x08005dad
 8005da8:	08005f19 	.word	0x08005f19
			case 'w':
				num_loops = floor(data / 50);
 8005dac:	4b6a      	ldr	r3, [pc, #424]	; (8005f58 <StartDefaultTask+0x320>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a71      	ldr	r2, [pc, #452]	; (8005f78 <StartDefaultTask+0x340>)
 8005db2:	fba2 2303 	umull	r2, r3, r2, r3
 8005db6:	091b      	lsrs	r3, r3, #4
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fa fba3 	bl	8000504 <__aeabi_ui2d>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	f7fa feef 	bl	8000ba8 <__aeabi_d2uiz>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	4b6b      	ldr	r3, [pc, #428]	; (8005f7c <StartDefaultTask+0x344>)
 8005dd0:	701a      	strb	r2, [r3, #0]
				remainder_dist = data % 50;
 8005dd2:	4b61      	ldr	r3, [pc, #388]	; (8005f58 <StartDefaultTask+0x320>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b68      	ldr	r3, [pc, #416]	; (8005f78 <StartDefaultTask+0x340>)
 8005dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ddc:	091b      	lsrs	r3, r3, #4
 8005dde:	2132      	movs	r1, #50	; 0x32
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	4b65      	ldr	r3, [pc, #404]	; (8005f80 <StartDefaultTask+0x348>)
 8005dea:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < num_loops; i++) {
 8005dec:	2300      	movs	r3, #0
 8005dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005df0:	e007      	b.n	8005e02 <StartDefaultTask+0x1ca>
					moveGyroPID(50, 1);
 8005df2:	2001      	movs	r0, #1
 8005df4:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8005f84 <StartDefaultTask+0x34c>
 8005df8:	f7fd fd6a 	bl	80038d0 <moveGyroPID>
				for (int i = 0; i < num_loops; i++) {
 8005dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dfe:	3301      	adds	r3, #1
 8005e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e02:	4b5e      	ldr	r3, [pc, #376]	; (8005f7c <StartDefaultTask+0x344>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	dbf1      	blt.n	8005df2 <StartDefaultTask+0x1ba>
				}
				if (remainder_dist != 0)
 8005e0e:	4b5c      	ldr	r3, [pc, #368]	; (8005f80 <StartDefaultTask+0x348>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <StartDefaultTask+0x1f4>
					moveGyroPID(remainder_dist, 1);
 8005e16:	4b5a      	ldr	r3, [pc, #360]	; (8005f80 <StartDefaultTask+0x348>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e22:	2001      	movs	r0, #1
 8005e24:	eeb0 0a67 	vmov.f32	s0, s15
 8005e28:	f7fd fd52 	bl	80038d0 <moveGyroPID>
//			moveGyroPIDOld(10,1);
//			gyro_move(data, 1);
//			sendToRPI("Forward done!f\n\0");
				sendToRPI("RPI:d");
 8005e2c:	4856      	ldr	r0, [pc, #344]	; (8005f88 <StartDefaultTask+0x350>)
 8005e2e:	f7fd fd37 	bl	80038a0 <sendToRPI>
				break;
 8005e32:	e120      	b.n	8006076 <StartDefaultTask+0x43e>
			case 'l':
//			turn(1, 1);
				left90();
 8005e34:	f7ff fb76 	bl	8005524 <left90>
//			sendToRPI("Left done!\0");
				sendToRPI("RPI:d");
 8005e38:	4853      	ldr	r0, [pc, #332]	; (8005f88 <StartDefaultTask+0x350>)
 8005e3a:	f7fd fd31 	bl	80038a0 <sendToRPI>
				break;
 8005e3e:	e11a      	b.n	8006076 <StartDefaultTask+0x43e>
			case 'r':
//			turn(0, 1);
				right90();
 8005e40:	f7ff fdcc 	bl	80059dc <right90>
//			sendToRPI("Right done!\0");
				sendToRPI("RPI:d");
 8005e44:	4850      	ldr	r0, [pc, #320]	; (8005f88 <StartDefaultTask+0x350>)
 8005e46:	f7fd fd2b 	bl	80038a0 <sendToRPI>
				break;
 8005e4a:	e114      	b.n	8006076 <StartDefaultTask+0x43e>
			case 's':
				num_loops = floor(data / 50);
 8005e4c:	4b42      	ldr	r3, [pc, #264]	; (8005f58 <StartDefaultTask+0x320>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a49      	ldr	r2, [pc, #292]	; (8005f78 <StartDefaultTask+0x340>)
 8005e52:	fba2 2303 	umull	r2, r3, r2, r3
 8005e56:	091b      	lsrs	r3, r3, #4
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fa fb53 	bl	8000504 <__aeabi_ui2d>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4610      	mov	r0, r2
 8005e64:	4619      	mov	r1, r3
 8005e66:	f7fa fe9f 	bl	8000ba8 <__aeabi_d2uiz>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	4b43      	ldr	r3, [pc, #268]	; (8005f7c <StartDefaultTask+0x344>)
 8005e70:	701a      	strb	r2, [r3, #0]
				remainder_dist = data % 50;
 8005e72:	4b39      	ldr	r3, [pc, #228]	; (8005f58 <StartDefaultTask+0x320>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4b40      	ldr	r3, [pc, #256]	; (8005f78 <StartDefaultTask+0x340>)
 8005e78:	fba3 1302 	umull	r1, r3, r3, r2
 8005e7c:	091b      	lsrs	r3, r3, #4
 8005e7e:	2132      	movs	r1, #50	; 0x32
 8005e80:	fb01 f303 	mul.w	r3, r1, r3
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	4b3d      	ldr	r3, [pc, #244]	; (8005f80 <StartDefaultTask+0x348>)
 8005e8a:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < num_loops; i++) {
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e90:	e007      	b.n	8005ea2 <StartDefaultTask+0x26a>
					moveGyroPID(50, 0);
 8005e92:	2000      	movs	r0, #0
 8005e94:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8005f84 <StartDefaultTask+0x34c>
 8005e98:	f7fd fd1a 	bl	80038d0 <moveGyroPID>
				for (int i = 0; i < num_loops; i++) {
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ea2:	4b36      	ldr	r3, [pc, #216]	; (8005f7c <StartDefaultTask+0x344>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	dbf1      	blt.n	8005e92 <StartDefaultTask+0x25a>
				}
				if (remainder_dist != 0)
 8005eae:	4b34      	ldr	r3, [pc, #208]	; (8005f80 <StartDefaultTask+0x348>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <StartDefaultTask+0x294>
					moveGyroPID(remainder_dist, 0);
 8005eb6:	4b32      	ldr	r3, [pc, #200]	; (8005f80 <StartDefaultTask+0x348>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ec8:	f7fd fd02 	bl	80038d0 <moveGyroPID>
				sendToRPI("RPI:d");
 8005ecc:	482e      	ldr	r0, [pc, #184]	; (8005f88 <StartDefaultTask+0x350>)
 8005ece:	f7fd fce7 	bl	80038a0 <sendToRPI>
				break;
 8005ed2:	e0d0      	b.n	8006076 <StartDefaultTask+0x43e>
			case 'a':
				if (Distance < 8)
 8005ed4:	4b24      	ldr	r3, [pc, #144]	; (8005f68 <StartDefaultTask+0x330>)
 8005ed6:	edd3 7a00 	vldr	s15, [r3]
 8005eda:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8005ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee6:	d501      	bpl.n	8005eec <StartDefaultTask+0x2b4>
					tooClose();
 8005ee8:	f7fc fe7e 	bl	8002be8 <tooClose>
				sendToRPI("RPI:d");
 8005eec:	4826      	ldr	r0, [pc, #152]	; (8005f88 <StartDefaultTask+0x350>)
 8005eee:	f7fd fcd7 	bl	80038a0 <sendToRPI>
				break;
 8005ef2:	e0c0      	b.n	8006076 <StartDefaultTask+0x43e>
			case 'd':
				parkingMoveUltra();
 8005ef4:	f7fc fc68 	bl	80027c8 <parkingMoveUltra>
				sendToRPI("RPI:d");
 8005ef8:	4823      	ldr	r0, [pc, #140]	; (8005f88 <StartDefaultTask+0x350>)
 8005efa:	f7fd fcd1 	bl	80038a0 <sendToRPI>
				break;
 8005efe:	e0ba      	b.n	8006076 <StartDefaultTask+0x43e>
			case 'L':
				bLeft90();
 8005f00:	f7ff f9e2 	bl	80052c8 <bLeft90>
//			sendToRPI("Reverse Left done!\0");
				sendToRPI("RPI:d");
 8005f04:	4820      	ldr	r0, [pc, #128]	; (8005f88 <StartDefaultTask+0x350>)
 8005f06:	f7fd fccb 	bl	80038a0 <sendToRPI>
				break;
 8005f0a:	e0b4      	b.n	8006076 <StartDefaultTask+0x43e>
			case 'R':
				bRight90();
 8005f0c:	f7ff fa74 	bl	80053f8 <bRight90>
//			sendToRPI("Reverse Right done!\0");
				sendToRPI("RPI:d");
 8005f10:	481d      	ldr	r0, [pc, #116]	; (8005f88 <StartDefaultTask+0x350>)
 8005f12:	f7fd fcc5 	bl	80038a0 <sendToRPI>
				break;
 8005f16:	e0ae      	b.n	8006076 <StartDefaultTask+0x43e>
			case 'x':
				goRoundObsticleL();
 8005f18:	f7ff fb7e 	bl	8005618 <goRoundObsticleL>

				htim1.Instance->CCR4 = STRAIGHT; //centre
 8005f1c:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <StartDefaultTask+0x32c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2296      	movs	r2, #150	; 0x96
 8005f22:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(300);
 8005f24:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005f28:	f007 facd 	bl	800d4c6 <osDelay>
				if (Distance < 8)
 8005f2c:	4b0e      	ldr	r3, [pc, #56]	; (8005f68 <StartDefaultTask+0x330>)
 8005f2e:	edd3 7a00 	vldr	s15, [r3]
 8005f32:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8005f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3e:	d525      	bpl.n	8005f8c <StartDefaultTask+0x354>
					tooClose();
 8005f40:	f7fc fe52 	bl	8002be8 <tooClose>
 8005f44:	e03d      	b.n	8005fc2 <StartDefaultTask+0x38a>
 8005f46:	bf00      	nop
 8005f48:	20000428 	.word	0x20000428
 8005f4c:	200003c0 	.word	0x200003c0
 8005f50:	20000414 	.word	0x20000414
 8005f54:	20000429 	.word	0x20000429
 8005f58:	2000042c 	.word	0x2000042c
 8005f5c:	2000042a 	.word	0x2000042a
 8005f60:	40021000 	.word	0x40021000
 8005f64:	20000258 	.word	0x20000258
 8005f68:	20000448 	.word	0x20000448
 8005f6c:	08014914 	.word	0x08014914
 8005f70:	20000434 	.word	0x20000434
 8005f74:	08014920 	.word	0x08014920
 8005f78:	51eb851f 	.word	0x51eb851f
 8005f7c:	20000430 	.word	0x20000430
 8005f80:	20000431 	.word	0x20000431
 8005f84:	42480000 	.word	0x42480000
 8005f88:	0801492c 	.word	0x0801492c
				else if (Distance < 8 || Distance > 100) {
 8005f8c:	4b3d      	ldr	r3, [pc, #244]	; (8006084 <StartDefaultTask+0x44c>)
 8005f8e:	edd3 7a00 	vldr	s15, [r3]
 8005f92:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8005f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f9e:	d409      	bmi.n	8005fb4 <StartDefaultTask+0x37c>
 8005fa0:	4b38      	ldr	r3, [pc, #224]	; (8006084 <StartDefaultTask+0x44c>)
 8005fa2:	edd3 7a00 	vldr	s15, [r3]
 8005fa6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006088 <StartDefaultTask+0x450>
 8005faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb2:	dd06      	ble.n	8005fc2 <StartDefaultTask+0x38a>
					moveGyroPID(1, 0);
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005fba:	f7fd fc89 	bl	80038d0 <moveGyroPID>
					tooClose();
 8005fbe:	f7fc fe13 	bl	8002be8 <tooClose>
				}
				moveUltra();
 8005fc2:	f7fc f9e1 	bl	8002388 <moveUltra>

				sendToRPI("RPI:d");
 8005fc6:	4831      	ldr	r0, [pc, #196]	; (800608c <StartDefaultTask+0x454>)
 8005fc8:	f7fd fc6a 	bl	80038a0 <sendToRPI>
				break;
 8005fcc:	e053      	b.n	8006076 <StartDefaultTask+0x43e>
			case 'X':
				goRoundObsticleR();
 8005fce:	f7ff fc11 	bl	80057f4 <goRoundObsticleR>

				htim1.Instance->CCR4 = STRAIGHT; //centre
 8005fd2:	4b2f      	ldr	r3, [pc, #188]	; (8006090 <StartDefaultTask+0x458>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2296      	movs	r2, #150	; 0x96
 8005fd8:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(1000);
 8005fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005fde:	f007 fa72 	bl	800d4c6 <osDelay>
				if (Distance < 8)
 8005fe2:	4b28      	ldr	r3, [pc, #160]	; (8006084 <StartDefaultTask+0x44c>)
 8005fe4:	edd3 7a00 	vldr	s15, [r3]
 8005fe8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8005fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff4:	d502      	bpl.n	8005ffc <StartDefaultTask+0x3c4>
					tooClose();
 8005ff6:	f7fc fdf7 	bl	8002be8 <tooClose>
 8005ffa:	e01a      	b.n	8006032 <StartDefaultTask+0x3fa>
				else if (Distance < 8 || Distance > 100) {
 8005ffc:	4b21      	ldr	r3, [pc, #132]	; (8006084 <StartDefaultTask+0x44c>)
 8005ffe:	edd3 7a00 	vldr	s15, [r3]
 8006002:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8006006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800600a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800600e:	d409      	bmi.n	8006024 <StartDefaultTask+0x3ec>
 8006010:	4b1c      	ldr	r3, [pc, #112]	; (8006084 <StartDefaultTask+0x44c>)
 8006012:	edd3 7a00 	vldr	s15, [r3]
 8006016:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006088 <StartDefaultTask+0x450>
 800601a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800601e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006022:	dd06      	ble.n	8006032 <StartDefaultTask+0x3fa>
					moveGyroPID(1, 0);
 8006024:	2000      	movs	r0, #0
 8006026:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800602a:	f7fd fc51 	bl	80038d0 <moveGyroPID>
					tooClose();
 800602e:	f7fc fddb 	bl	8002be8 <tooClose>
				}
				moveUltra();
 8006032:	f7fc f9a9 	bl	8002388 <moveUltra>
				sendToRPI("RPI:d");
 8006036:	4815      	ldr	r0, [pc, #84]	; (800608c <StartDefaultTask+0x454>)
 8006038:	f7fd fc32 	bl	80038a0 <sendToRPI>
				break;
 800603c:	e01b      	b.n	8006076 <StartDefaultTask+0x43e>
			case 'u':
				moveUltra();
 800603e:	f7fc f9a3 	bl	8002388 <moveUltra>
				sendToRPI("RPI:d");
 8006042:	4812      	ldr	r0, [pc, #72]	; (800608c <StartDefaultTask+0x454>)
 8006044:	f7fd fc2c 	bl	80038a0 <sendToRPI>
//				osDelay(50);
//				sendToRPI("RPI:s"); // command for rpi to take photo
//			osDelay(1000);
				break;
 8006048:	e015      	b.n	8006076 <StartDefaultTask+0x43e>
			case 't': // second
				secObstL();
 800604a:	f7fc f8d7 	bl	80021fc <secObstL>
				sendToRPI("RPI:d"); // command for rpi to take photo
 800604e:	480f      	ldr	r0, [pc, #60]	; (800608c <StartDefaultTask+0x454>)
 8006050:	f7fd fc26 	bl	80038a0 <sendToRPI>
//			osDelay(1000);
				break;
 8006054:	e00f      	b.n	8006076 <StartDefaultTask+0x43e>
			case 'T': // when first obstacle goes right-> Tln or Trn
				secObstR();
 8006056:	f7fc f933 	bl	80022c0 <secObstR>
				sendToRPI("RPI:d");
 800605a:	480c      	ldr	r0, [pc, #48]	; (800608c <StartDefaultTask+0x454>)
 800605c:	f7fd fc20 	bl	80038a0 <sendToRPI>
				break;
 8006060:	e009      	b.n	8006076 <StartDefaultTask+0x43e>
			case 'Y': // when first obstacle goes left-> Yln or Yrn
				task2A2L(data);
 8006062:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <StartDefaultTask+0x45c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f7fb fcde 	bl	8001a28 <task2A2L>
				sendToRPI("RPI:d");
 800606c:	4807      	ldr	r0, [pc, #28]	; (800608c <StartDefaultTask+0x454>)
 800606e:	f7fd fc17 	bl	80038a0 <sendToRPI>
				break;
 8006072:	e000      	b.n	8006076 <StartDefaultTask+0x43e>
			default:
				break;
 8006074:	bf00      	nop
			}

			data = 0;
 8006076:	4b07      	ldr	r3, [pc, #28]	; (8006094 <StartDefaultTask+0x45c>)
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]
		}
		osDelay(50);
 800607c:	2032      	movs	r0, #50	; 0x32
 800607e:	f007 fa22 	bl	800d4c6 <osDelay>
	for (;;) {
 8006082:	e5f2      	b.n	8005c6a <StartDefaultTask+0x32>
 8006084:	20000448 	.word	0x20000448
 8006088:	42c80000 	.word	0x42c80000
 800608c:	0801492c 	.word	0x0801492c
 8006090:	20000258 	.word	0x20000258
 8006094:	2000042c 	.word	0x2000042c

08006098 <oled_show>:
 * @brief Function implementing the OLEDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_oled_show */
void oled_show(void *argument) {
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN oled_show */
	/* Infinite loop */

	for (;;) {
 80060a0:	e7fe      	b.n	80060a0 <oled_show+0x8>
 80060a2:	0000      	movs	r0, r0
 80060a4:	0000      	movs	r0, r0
	...

080060a8 <gyro_read>:
 * @brief Function implementing the myTask09 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_gyro_read */
void gyro_read(void *argument) {
 80060a8:	b5b0      	push	{r4, r5, r7, lr}
 80060aa:	b090      	sub	sp, #64	; 0x40
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN gyro_read */
	/* Infinite loop */
	uint8_t val[2] = { 0, 0 };
 80060b0:	2300      	movs	r3, #0
 80060b2:	863b      	strh	r3, [r7, #48]	; 0x30
	uint16_t offset_show[20];
	int16_t angularSpeed = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint32_t tick = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	int dir, offset;
	offset = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	637b      	str	r3, [r7, #52]	; 0x34

	gyroInit();
 80060c0:	f7ff fd76 	bl	8005bb0 <gyroInit>
	gyroStart();
 80060c4:	f7ff fd62 	bl	8005b8c <gyroStart>
	tick = HAL_GetTick();
 80060c8:	f001 f816 	bl	80070f8 <HAL_GetTick>
 80060cc:	63f8      	str	r0, [r7, #60]	; 0x3c
	osDelayUntil(10);
 80060ce:	200a      	movs	r0, #10
 80060d0:	f007 fa14 	bl	800d4fc <osDelayUntil>
	actualAngle = 0;
 80060d4:	4966      	ldr	r1, [pc, #408]	; (8006270 <gyro_read+0x1c8>)
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	f04f 0300 	mov.w	r3, #0
 80060de:	e9c1 2300 	strd	r2, r3, [r1]

	for (;;) {

		if (HAL_GetTick() - tick >= 100L) {
 80060e2:	f001 f809 	bl	80070f8 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b63      	cmp	r3, #99	; 0x63
 80060ee:	d9f8      	bls.n	80060e2 <gyro_read+0x3a>

			//read gyro value Z-axis
			readByte(0x37, val);
 80060f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060f4:	4619      	mov	r1, r3
 80060f6:	2037      	movs	r0, #55	; 0x37
 80060f8:	f7ff fcf8 	bl	8005aec <readByte>
			//Angle per >100 ticks
			angularSpeed = (val[0] << 8) | val[1];
 80060fc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006100:	021b      	lsls	r3, r3, #8
 8006102:	b21a      	sxth	r2, r3
 8006104:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006108:	b21b      	sxth	r3, r3
 800610a:	4313      	orrs	r3, r2
 800610c:	877b      	strh	r3, [r7, #58]	; 0x3a

			if (moving || moveStraight) {
 800610e:	4b59      	ldr	r3, [pc, #356]	; (8006274 <gyro_read+0x1cc>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d104      	bne.n	8006120 <gyro_read+0x78>
 8006116:	4b58      	ldr	r3, [pc, #352]	; (8006278 <gyro_read+0x1d0>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 8095 	beq.w	800624a <gyro_read+0x1a2>
//			  actualAngle += (double)(angularSpeed + 0.5)*((HAL_GetTick() - tick)/16400.0)*1.02;
				totalAngle += (double) (angularSpeed + 0.5)
 8006120:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8006124:	4618      	mov	r0, r3
 8006126:	f7fa f9fd 	bl	8000524 <__aeabi_i2d>
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	4b53      	ldr	r3, [pc, #332]	; (800627c <gyro_read+0x1d4>)
 8006130:	f7fa f8ac 	bl	800028c <__adddf3>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4614      	mov	r4, r2
 800613a:	461d      	mov	r5, r3
						* ((HAL_GetTick() - tick) / 16400.0) * 1.02;
 800613c:	f000 ffdc 	bl	80070f8 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	4618      	mov	r0, r3
 8006148:	f7fa f9dc 	bl	8000504 <__aeabi_ui2d>
 800614c:	a344      	add	r3, pc, #272	; (adr r3, 8006260 <gyro_read+0x1b8>)
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	f7fa fb7b 	bl	800084c <__aeabi_ddiv>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	4620      	mov	r0, r4
 800615c:	4629      	mov	r1, r5
 800615e:	f7fa fa4b 	bl	80005f8 <__aeabi_dmul>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4610      	mov	r0, r2
 8006168:	4619      	mov	r1, r3
 800616a:	a33f      	add	r3, pc, #252	; (adr r3, 8006268 <gyro_read+0x1c0>)
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	f7fa fa42 	bl	80005f8 <__aeabi_dmul>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4610      	mov	r0, r2
 800617a:	4619      	mov	r1, r3
				totalAngle += (double) (angularSpeed + 0.5)
 800617c:	4b40      	ldr	r3, [pc, #256]	; (8006280 <gyro_read+0x1d8>)
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	f7fa f883 	bl	800028c <__adddf3>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	493d      	ldr	r1, [pc, #244]	; (8006280 <gyro_read+0x1d8>)
 800618c:	e9c1 2300 	strd	r2, r3, [r1]
				actualAngle += (double) (angularSpeed + 0.5)
 8006190:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8006194:	4618      	mov	r0, r3
 8006196:	f7fa f9c5 	bl	8000524 <__aeabi_i2d>
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	4b37      	ldr	r3, [pc, #220]	; (800627c <gyro_read+0x1d4>)
 80061a0:	f7fa f874 	bl	800028c <__adddf3>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4614      	mov	r4, r2
 80061aa:	461d      	mov	r5, r3
						* ((HAL_GetTick() - tick) / 16400.0) * 1.02;
 80061ac:	f000 ffa4 	bl	80070f8 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fa f9a4 	bl	8000504 <__aeabi_ui2d>
 80061bc:	a328      	add	r3, pc, #160	; (adr r3, 8006260 <gyro_read+0x1b8>)
 80061be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c2:	f7fa fb43 	bl	800084c <__aeabi_ddiv>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	4620      	mov	r0, r4
 80061cc:	4629      	mov	r1, r5
 80061ce:	f7fa fa13 	bl	80005f8 <__aeabi_dmul>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4610      	mov	r0, r2
 80061d8:	4619      	mov	r1, r3
 80061da:	a323      	add	r3, pc, #140	; (adr r3, 8006268 <gyro_read+0x1c0>)
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f7fa fa0a 	bl	80005f8 <__aeabi_dmul>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4610      	mov	r0, r2
 80061ea:	4619      	mov	r1, r3
				actualAngle += (double) (angularSpeed + 0.5)
 80061ec:	4b20      	ldr	r3, [pc, #128]	; (8006270 <gyro_read+0x1c8>)
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	f7fa f84b 	bl	800028c <__adddf3>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	491d      	ldr	r1, [pc, #116]	; (8006270 <gyro_read+0x1c8>)
 80061fc:	e9c1 2300 	strd	r2, r3, [r1]

//			  if(actualAngle >= 720)
//			  {
//				  actualAngle = 0;
//			  }
				if (totalAngle >= 720) {
 8006200:	4b1f      	ldr	r3, [pc, #124]	; (8006280 <gyro_read+0x1d8>)
 8006202:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	4b1e      	ldr	r3, [pc, #120]	; (8006284 <gyro_read+0x1dc>)
 800620c:	f7fa fc7a 	bl	8000b04 <__aeabi_dcmpge>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d006      	beq.n	8006224 <gyro_read+0x17c>
					totalAngle = 0;
 8006216:	491a      	ldr	r1, [pc, #104]	; (8006280 <gyro_read+0x1d8>)
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	f04f 0300 	mov.w	r3, #0
 8006220:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (actualAngle >= 720) {
 8006224:	4b12      	ldr	r3, [pc, #72]	; (8006270 <gyro_read+0x1c8>)
 8006226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800622a:	f04f 0200 	mov.w	r2, #0
 800622e:	4b15      	ldr	r3, [pc, #84]	; (8006284 <gyro_read+0x1dc>)
 8006230:	f7fa fc68 	bl	8000b04 <__aeabi_dcmpge>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00e      	beq.n	8006258 <gyro_read+0x1b0>
					actualAngle = 0;
 800623a:	490d      	ldr	r1, [pc, #52]	; (8006270 <gyro_read+0x1c8>)
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	f04f 0300 	mov.w	r3, #0
 8006244:	e9c1 2300 	strd	r2, r3, [r1]
				if (actualAngle >= 720) {
 8006248:	e006      	b.n	8006258 <gyro_read+0x1b0>
				}
			} else {
				totalAngle = 0;
 800624a:	490d      	ldr	r1, [pc, #52]	; (8006280 <gyro_read+0x1d8>)
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	f04f 0300 	mov.w	r3, #0
 8006254:	e9c1 2300 	strd	r2, r3, [r1]
//

//		  sprintf(offset_show, "angle:: %5d\0", (int)(actualAngle));
//		  OLED_ShowString(10,10, offset_show);
//		  OLED_Refresh_Gram();
			tick = HAL_GetTick();
 8006258:	f000 ff4e 	bl	80070f8 <HAL_GetTick>
 800625c:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (HAL_GetTick() - tick >= 100L) {
 800625e:	e740      	b.n	80060e2 <gyro_read+0x3a>
 8006260:	00000000 	.word	0x00000000
 8006264:	40d00400 	.word	0x40d00400
 8006268:	851eb852 	.word	0x851eb852
 800626c:	3ff051eb 	.word	0x3ff051eb
 8006270:	20000420 	.word	0x20000420
 8006274:	20000414 	.word	0x20000414
 8006278:	20000415 	.word	0x20000415
 800627c:	3fe00000 	.word	0x3fe00000
 8006280:	20000418 	.word	0x20000418
 8006284:	40868000 	.word	0x40868000

08006288 <servoMotor>:
 * @brief Function implementing the ServoMotor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_servoMotor */
void servoMotor(void *argument) {
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN servoMotor */
	uint8_t message[20];
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); //will call callback function when interrupt is detected
 8006290:	2100      	movs	r1, #0
 8006292:	4806      	ldr	r0, [pc, #24]	; (80062ac <servoMotor+0x24>)
 8006294:	f004 fc7c 	bl	800ab90 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8006298:	210c      	movs	r1, #12
 800629a:	4805      	ldr	r0, [pc, #20]	; (80062b0 <servoMotor+0x28>)
 800629c:	f004 fb60 	bl	800a960 <HAL_TIM_PWM_Start>
//		osDelay(2000);
//		htim1.Instance -> CCR4 = LEFT; //left
//		osDelay(2000);
//		htim1.Instance -> CCR4 = STRAIGHT; //centre
//		osDelay(2000);
		HCSR04_Read();
 80062a0:	f7fb fb00 	bl	80018a4 <HCSR04_Read>
//		sprintf(message, "distance: %5.2f\0", Distance);
//		OLED_ShowString(10, 50, message);
//		OLED_Refresh_Gram(); //Refresh Ram
		HAL_Delay(200);
 80062a4:	20c8      	movs	r0, #200	; 0xc8
 80062a6:	f000 ff33 	bl	8007110 <HAL_Delay>
		HCSR04_Read();
 80062aa:	e7f9      	b.n	80062a0 <servoMotor+0x18>
 80062ac:	200002e8 	.word	0x200002e8
 80062b0:	20000258 	.word	0x20000258

080062b4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80062b8:	b672      	cpsid	i
}
 80062ba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80062bc:	e7fe      	b.n	80062bc <Error_Handler+0x8>
	...

080062c0 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80062c6:	2300      	movs	r3, #0
 80062c8:	71fb      	strb	r3, [r7, #7]
 80062ca:	e026      	b.n	800631a <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	3b50      	subs	r3, #80	; 0x50
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2100      	movs	r1, #0
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 f82b 	bl	8006330 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80062da:	2100      	movs	r1, #0
 80062dc:	2000      	movs	r0, #0
 80062de:	f000 f827 	bl	8006330 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80062e2:	2100      	movs	r1, #0
 80062e4:	2010      	movs	r0, #16
 80062e6:	f000 f823 	bl	8006330 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80062ea:	2300      	movs	r3, #0
 80062ec:	71bb      	strb	r3, [r7, #6]
 80062ee:	e00d      	b.n	800630c <OLED_Refresh_Gram+0x4c>
 80062f0:	79ba      	ldrb	r2, [r7, #6]
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	490d      	ldr	r1, [pc, #52]	; (800632c <OLED_Refresh_Gram+0x6c>)
 80062f6:	00d2      	lsls	r2, r2, #3
 80062f8:	440a      	add	r2, r1
 80062fa:	4413      	add	r3, r2
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	2101      	movs	r1, #1
 8006300:	4618      	mov	r0, r3
 8006302:	f000 f815 	bl	8006330 <OLED_WR_Byte>
 8006306:	79bb      	ldrb	r3, [r7, #6]
 8006308:	3301      	adds	r3, #1
 800630a:	71bb      	strb	r3, [r7, #6]
 800630c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006310:	2b00      	cmp	r3, #0
 8006312:	daed      	bge.n	80062f0 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8006314:	79fb      	ldrb	r3, [r7, #7]
 8006316:	3301      	adds	r3, #1
 8006318:	71fb      	strb	r3, [r7, #7]
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	2b07      	cmp	r3, #7
 800631e:	d9d5      	bls.n	80062cc <OLED_Refresh_Gram+0xc>
	}   
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000464 	.word	0x20000464

08006330 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	4603      	mov	r3, r0
 8006338:	460a      	mov	r2, r1
 800633a:	71fb      	strb	r3, [r7, #7]
 800633c:	4613      	mov	r3, r2
 800633e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8006340:	79bb      	ldrb	r3, [r7, #6]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d006      	beq.n	8006354 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8006346:	2201      	movs	r2, #1
 8006348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800634c:	481c      	ldr	r0, [pc, #112]	; (80063c0 <OLED_WR_Byte+0x90>)
 800634e:	f001 fa51 	bl	80077f4 <HAL_GPIO_WritePin>
 8006352:	e005      	b.n	8006360 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8006354:	2200      	movs	r2, #0
 8006356:	f44f 7180 	mov.w	r1, #256	; 0x100
 800635a:	4819      	ldr	r0, [pc, #100]	; (80063c0 <OLED_WR_Byte+0x90>)
 800635c:	f001 fa4a 	bl	80077f4 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8006360:	2300      	movs	r3, #0
 8006362:	73fb      	strb	r3, [r7, #15]
 8006364:	e01e      	b.n	80063a4 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8006366:	2200      	movs	r2, #0
 8006368:	2120      	movs	r1, #32
 800636a:	4815      	ldr	r0, [pc, #84]	; (80063c0 <OLED_WR_Byte+0x90>)
 800636c:	f001 fa42 	bl	80077f4 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8006370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006374:	2b00      	cmp	r3, #0
 8006376:	da05      	bge.n	8006384 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8006378:	2201      	movs	r2, #1
 800637a:	2140      	movs	r1, #64	; 0x40
 800637c:	4810      	ldr	r0, [pc, #64]	; (80063c0 <OLED_WR_Byte+0x90>)
 800637e:	f001 fa39 	bl	80077f4 <HAL_GPIO_WritePin>
 8006382:	e004      	b.n	800638e <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8006384:	2200      	movs	r2, #0
 8006386:	2140      	movs	r1, #64	; 0x40
 8006388:	480d      	ldr	r0, [pc, #52]	; (80063c0 <OLED_WR_Byte+0x90>)
 800638a:	f001 fa33 	bl	80077f4 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800638e:	2201      	movs	r2, #1
 8006390:	2120      	movs	r1, #32
 8006392:	480b      	ldr	r0, [pc, #44]	; (80063c0 <OLED_WR_Byte+0x90>)
 8006394:	f001 fa2e 	bl	80077f4 <HAL_GPIO_WritePin>
		dat<<=1;   
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	3301      	adds	r3, #1
 80063a2:	73fb      	strb	r3, [r7, #15]
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	2b07      	cmp	r3, #7
 80063a8:	d9dd      	bls.n	8006366 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80063aa:	2201      	movs	r2, #1
 80063ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063b0:	4803      	ldr	r0, [pc, #12]	; (80063c0 <OLED_WR_Byte+0x90>)
 80063b2:	f001 fa1f 	bl	80077f4 <HAL_GPIO_WritePin>
} 
 80063b6:	bf00      	nop
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40021000 	.word	0x40021000

080063c4 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80063ca:	2300      	movs	r3, #0
 80063cc:	71fb      	strb	r3, [r7, #7]
 80063ce:	e014      	b.n	80063fa <OLED_Clear+0x36>
 80063d0:	2300      	movs	r3, #0
 80063d2:	71bb      	strb	r3, [r7, #6]
 80063d4:	e00a      	b.n	80063ec <OLED_Clear+0x28>
 80063d6:	79ba      	ldrb	r2, [r7, #6]
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	490c      	ldr	r1, [pc, #48]	; (800640c <OLED_Clear+0x48>)
 80063dc:	00d2      	lsls	r2, r2, #3
 80063de:	440a      	add	r2, r1
 80063e0:	4413      	add	r3, r2
 80063e2:	2200      	movs	r2, #0
 80063e4:	701a      	strb	r2, [r3, #0]
 80063e6:	79bb      	ldrb	r3, [r7, #6]
 80063e8:	3301      	adds	r3, #1
 80063ea:	71bb      	strb	r3, [r7, #6]
 80063ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	daf0      	bge.n	80063d6 <OLED_Clear+0x12>
 80063f4:	79fb      	ldrb	r3, [r7, #7]
 80063f6:	3301      	adds	r3, #1
 80063f8:	71fb      	strb	r3, [r7, #7]
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	2b07      	cmp	r3, #7
 80063fe:	d9e7      	bls.n	80063d0 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8006400:	f7ff ff5e 	bl	80062c0 <OLED_Refresh_Gram>
}
 8006404:	bf00      	nop
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	20000464 	.word	0x20000464

08006410 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	4603      	mov	r3, r0
 8006418:	71fb      	strb	r3, [r7, #7]
 800641a:	460b      	mov	r3, r1
 800641c:	71bb      	strb	r3, [r7, #6]
 800641e:	4613      	mov	r3, r2
 8006420:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8006422:	2300      	movs	r3, #0
 8006424:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8006426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800642a:	2b00      	cmp	r3, #0
 800642c:	db41      	blt.n	80064b2 <OLED_DrawPoint+0xa2>
 800642e:	79bb      	ldrb	r3, [r7, #6]
 8006430:	2b3f      	cmp	r3, #63	; 0x3f
 8006432:	d83e      	bhi.n	80064b2 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8006434:	79bb      	ldrb	r3, [r7, #6]
 8006436:	08db      	lsrs	r3, r3, #3
 8006438:	b2db      	uxtb	r3, r3
 800643a:	f1c3 0307 	rsb	r3, r3, #7
 800643e:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8006440:	79bb      	ldrb	r3, [r7, #6]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8006448:	7b7b      	ldrb	r3, [r7, #13]
 800644a:	f1c3 0307 	rsb	r3, r3, #7
 800644e:	2201      	movs	r2, #1
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8006456:	797b      	ldrb	r3, [r7, #5]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d012      	beq.n	8006482 <OLED_DrawPoint+0x72>
 800645c:	79fa      	ldrb	r2, [r7, #7]
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	4917      	ldr	r1, [pc, #92]	; (80064c0 <OLED_DrawPoint+0xb0>)
 8006462:	00d2      	lsls	r2, r2, #3
 8006464:	440a      	add	r2, r1
 8006466:	4413      	add	r3, r2
 8006468:	7818      	ldrb	r0, [r3, #0]
 800646a:	79fa      	ldrb	r2, [r7, #7]
 800646c:	7bbb      	ldrb	r3, [r7, #14]
 800646e:	7bf9      	ldrb	r1, [r7, #15]
 8006470:	4301      	orrs	r1, r0
 8006472:	b2c8      	uxtb	r0, r1
 8006474:	4912      	ldr	r1, [pc, #72]	; (80064c0 <OLED_DrawPoint+0xb0>)
 8006476:	00d2      	lsls	r2, r2, #3
 8006478:	440a      	add	r2, r1
 800647a:	4413      	add	r3, r2
 800647c:	4602      	mov	r2, r0
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	e018      	b.n	80064b4 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8006482:	79fa      	ldrb	r2, [r7, #7]
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	490e      	ldr	r1, [pc, #56]	; (80064c0 <OLED_DrawPoint+0xb0>)
 8006488:	00d2      	lsls	r2, r2, #3
 800648a:	440a      	add	r2, r1
 800648c:	4413      	add	r3, r2
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	b25a      	sxtb	r2, r3
 8006492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006496:	43db      	mvns	r3, r3
 8006498:	b25b      	sxtb	r3, r3
 800649a:	4013      	ands	r3, r2
 800649c:	b259      	sxtb	r1, r3
 800649e:	79fa      	ldrb	r2, [r7, #7]
 80064a0:	7bbb      	ldrb	r3, [r7, #14]
 80064a2:	b2c8      	uxtb	r0, r1
 80064a4:	4906      	ldr	r1, [pc, #24]	; (80064c0 <OLED_DrawPoint+0xb0>)
 80064a6:	00d2      	lsls	r2, r2, #3
 80064a8:	440a      	add	r2, r1
 80064aa:	4413      	add	r3, r2
 80064ac:	4602      	mov	r2, r0
 80064ae:	701a      	strb	r2, [r3, #0]
 80064b0:	e000      	b.n	80064b4 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80064b2:	bf00      	nop
}
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000464 	.word	0x20000464

080064c4 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80064c4:	b590      	push	{r4, r7, lr}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4604      	mov	r4, r0
 80064cc:	4608      	mov	r0, r1
 80064ce:	4611      	mov	r1, r2
 80064d0:	461a      	mov	r2, r3
 80064d2:	4623      	mov	r3, r4
 80064d4:	71fb      	strb	r3, [r7, #7]
 80064d6:	4603      	mov	r3, r0
 80064d8:	71bb      	strb	r3, [r7, #6]
 80064da:	460b      	mov	r3, r1
 80064dc:	717b      	strb	r3, [r7, #5]
 80064de:	4613      	mov	r3, r2
 80064e0:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80064e2:	79bb      	ldrb	r3, [r7, #6]
 80064e4:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80064e6:	797b      	ldrb	r3, [r7, #5]
 80064e8:	3b20      	subs	r3, #32
 80064ea:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80064ec:	2300      	movs	r3, #0
 80064ee:	73bb      	strb	r3, [r7, #14]
 80064f0:	e04d      	b.n	800658e <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80064f2:	793b      	ldrb	r3, [r7, #4]
 80064f4:	2b0c      	cmp	r3, #12
 80064f6:	d10b      	bne.n	8006510 <OLED_ShowChar+0x4c>
 80064f8:	797a      	ldrb	r2, [r7, #5]
 80064fa:	7bb9      	ldrb	r1, [r7, #14]
 80064fc:	4828      	ldr	r0, [pc, #160]	; (80065a0 <OLED_ShowChar+0xdc>)
 80064fe:	4613      	mov	r3, r2
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4403      	add	r3, r0
 8006508:	440b      	add	r3, r1
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	73fb      	strb	r3, [r7, #15]
 800650e:	e007      	b.n	8006520 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8006510:	797a      	ldrb	r2, [r7, #5]
 8006512:	7bbb      	ldrb	r3, [r7, #14]
 8006514:	4923      	ldr	r1, [pc, #140]	; (80065a4 <OLED_ShowChar+0xe0>)
 8006516:	0112      	lsls	r2, r2, #4
 8006518:	440a      	add	r2, r1
 800651a:	4413      	add	r3, r2
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8006520:	2300      	movs	r3, #0
 8006522:	737b      	strb	r3, [r7, #13]
 8006524:	e02d      	b.n	8006582 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8006526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800652a:	2b00      	cmp	r3, #0
 800652c:	da07      	bge.n	800653e <OLED_ShowChar+0x7a>
 800652e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006532:	79b9      	ldrb	r1, [r7, #6]
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff ff6a 	bl	8006410 <OLED_DrawPoint>
 800653c:	e00c      	b.n	8006558 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800653e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006542:	2b00      	cmp	r3, #0
 8006544:	bf0c      	ite	eq
 8006546:	2301      	moveq	r3, #1
 8006548:	2300      	movne	r3, #0
 800654a:	b2db      	uxtb	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	79b9      	ldrb	r1, [r7, #6]
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff ff5c 	bl	8006410 <OLED_DrawPoint>
			temp<<=1;
 8006558:	7bfb      	ldrb	r3, [r7, #15]
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	73fb      	strb	r3, [r7, #15]
			y++;
 800655e:	79bb      	ldrb	r3, [r7, #6]
 8006560:	3301      	adds	r3, #1
 8006562:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8006564:	79ba      	ldrb	r2, [r7, #6]
 8006566:	7b3b      	ldrb	r3, [r7, #12]
 8006568:	1ad2      	subs	r2, r2, r3
 800656a:	793b      	ldrb	r3, [r7, #4]
 800656c:	429a      	cmp	r2, r3
 800656e:	d105      	bne.n	800657c <OLED_ShowChar+0xb8>
			{
				y=y0;
 8006570:	7b3b      	ldrb	r3, [r7, #12]
 8006572:	71bb      	strb	r3, [r7, #6]
				x++;
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	3301      	adds	r3, #1
 8006578:	71fb      	strb	r3, [r7, #7]
				break;
 800657a:	e005      	b.n	8006588 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800657c:	7b7b      	ldrb	r3, [r7, #13]
 800657e:	3301      	adds	r3, #1
 8006580:	737b      	strb	r3, [r7, #13]
 8006582:	7b7b      	ldrb	r3, [r7, #13]
 8006584:	2b07      	cmp	r3, #7
 8006586:	d9ce      	bls.n	8006526 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	3301      	adds	r3, #1
 800658c:	73bb      	strb	r3, [r7, #14]
 800658e:	7bba      	ldrb	r2, [r7, #14]
 8006590:	793b      	ldrb	r3, [r7, #4]
 8006592:	429a      	cmp	r2, r3
 8006594:	d3ad      	bcc.n	80064f2 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8006596:	bf00      	nop
 8006598:	bf00      	nop
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	bd90      	pop	{r4, r7, pc}
 80065a0:	080149dc 	.word	0x080149dc
 80065a4:	08014e50 	.word	0x08014e50

080065a8 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	4603      	mov	r3, r0
 80065b0:	603a      	str	r2, [r7, #0]
 80065b2:	71fb      	strb	r3, [r7, #7]
 80065b4:	460b      	mov	r3, r1
 80065b6:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80065b8:	e01f      	b.n	80065fa <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	2b7a      	cmp	r3, #122	; 0x7a
 80065be:	d904      	bls.n	80065ca <OLED_ShowString+0x22>
 80065c0:	2300      	movs	r3, #0
 80065c2:	71fb      	strb	r3, [r7, #7]
 80065c4:	79bb      	ldrb	r3, [r7, #6]
 80065c6:	3310      	adds	r3, #16
 80065c8:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80065ca:	79bb      	ldrb	r3, [r7, #6]
 80065cc:	2b3a      	cmp	r3, #58	; 0x3a
 80065ce:	d905      	bls.n	80065dc <OLED_ShowString+0x34>
 80065d0:	2300      	movs	r3, #0
 80065d2:	71fb      	strb	r3, [r7, #7]
 80065d4:	79fb      	ldrb	r3, [r7, #7]
 80065d6:	71bb      	strb	r3, [r7, #6]
 80065d8:	f7ff fef4 	bl	80063c4 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781a      	ldrb	r2, [r3, #0]
 80065e0:	79b9      	ldrb	r1, [r7, #6]
 80065e2:	79f8      	ldrb	r0, [r7, #7]
 80065e4:	2301      	movs	r3, #1
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	230c      	movs	r3, #12
 80065ea:	f7ff ff6b 	bl	80064c4 <OLED_ShowChar>
        x+=8;
 80065ee:	79fb      	ldrb	r3, [r7, #7]
 80065f0:	3308      	adds	r3, #8
 80065f2:	71fb      	strb	r3, [r7, #7]
        p++;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	3301      	adds	r3, #1
 80065f8:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1db      	bne.n	80065ba <OLED_ShowString+0x12>
    }  
}	 
 8006602:	bf00      	nop
 8006604:	bf00      	nop
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <OLED_Init>:

void OLED_Init(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8006610:	f003 fc7e 	bl	8009f10 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8006614:	4b41      	ldr	r3, [pc, #260]	; (800671c <OLED_Init+0x110>)
 8006616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006618:	4a40      	ldr	r2, [pc, #256]	; (800671c <OLED_Init+0x110>)
 800661a:	f023 0301 	bic.w	r3, r3, #1
 800661e:	6713      	str	r3, [r2, #112]	; 0x70
 8006620:	4b3e      	ldr	r3, [pc, #248]	; (800671c <OLED_Init+0x110>)
 8006622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006624:	4a3d      	ldr	r2, [pc, #244]	; (800671c <OLED_Init+0x110>)
 8006626:	f023 0304 	bic.w	r3, r3, #4
 800662a:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800662c:	f003 fc84 	bl	8009f38 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8006630:	2200      	movs	r2, #0
 8006632:	2180      	movs	r1, #128	; 0x80
 8006634:	483a      	ldr	r0, [pc, #232]	; (8006720 <OLED_Init+0x114>)
 8006636:	f001 f8dd 	bl	80077f4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800663a:	2064      	movs	r0, #100	; 0x64
 800663c:	f000 fd68 	bl	8007110 <HAL_Delay>
	OLED_RST_Set();
 8006640:	2201      	movs	r2, #1
 8006642:	2180      	movs	r1, #128	; 0x80
 8006644:	4836      	ldr	r0, [pc, #216]	; (8006720 <OLED_Init+0x114>)
 8006646:	f001 f8d5 	bl	80077f4 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800664a:	2100      	movs	r1, #0
 800664c:	20ae      	movs	r0, #174	; 0xae
 800664e:	f7ff fe6f 	bl	8006330 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8006652:	2100      	movs	r1, #0
 8006654:	20d5      	movs	r0, #213	; 0xd5
 8006656:	f7ff fe6b 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800665a:	2100      	movs	r1, #0
 800665c:	2050      	movs	r0, #80	; 0x50
 800665e:	f7ff fe67 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8006662:	2100      	movs	r1, #0
 8006664:	20a8      	movs	r0, #168	; 0xa8
 8006666:	f7ff fe63 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800666a:	2100      	movs	r1, #0
 800666c:	203f      	movs	r0, #63	; 0x3f
 800666e:	f7ff fe5f 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8006672:	2100      	movs	r1, #0
 8006674:	20d3      	movs	r0, #211	; 0xd3
 8006676:	f7ff fe5b 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800667a:	2100      	movs	r1, #0
 800667c:	2000      	movs	r0, #0
 800667e:	f7ff fe57 	bl	8006330 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8006682:	2100      	movs	r1, #0
 8006684:	2040      	movs	r0, #64	; 0x40
 8006686:	f7ff fe53 	bl	8006330 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800668a:	2100      	movs	r1, #0
 800668c:	208d      	movs	r0, #141	; 0x8d
 800668e:	f7ff fe4f 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8006692:	2100      	movs	r1, #0
 8006694:	2014      	movs	r0, #20
 8006696:	f7ff fe4b 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800669a:	2100      	movs	r1, #0
 800669c:	2020      	movs	r0, #32
 800669e:	f7ff fe47 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80066a2:	2100      	movs	r1, #0
 80066a4:	2002      	movs	r0, #2
 80066a6:	f7ff fe43 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80066aa:	2100      	movs	r1, #0
 80066ac:	20a1      	movs	r0, #161	; 0xa1
 80066ae:	f7ff fe3f 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80066b2:	2100      	movs	r1, #0
 80066b4:	20c0      	movs	r0, #192	; 0xc0
 80066b6:	f7ff fe3b 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80066ba:	2100      	movs	r1, #0
 80066bc:	20da      	movs	r0, #218	; 0xda
 80066be:	f7ff fe37 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80066c2:	2100      	movs	r1, #0
 80066c4:	2012      	movs	r0, #18
 80066c6:	f7ff fe33 	bl	8006330 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80066ca:	2100      	movs	r1, #0
 80066cc:	2081      	movs	r0, #129	; 0x81
 80066ce:	f7ff fe2f 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80066d2:	2100      	movs	r1, #0
 80066d4:	20ef      	movs	r0, #239	; 0xef
 80066d6:	f7ff fe2b 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80066da:	2100      	movs	r1, #0
 80066dc:	20d9      	movs	r0, #217	; 0xd9
 80066de:	f7ff fe27 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80066e2:	2100      	movs	r1, #0
 80066e4:	20f1      	movs	r0, #241	; 0xf1
 80066e6:	f7ff fe23 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80066ea:	2100      	movs	r1, #0
 80066ec:	20db      	movs	r0, #219	; 0xdb
 80066ee:	f7ff fe1f 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80066f2:	2100      	movs	r1, #0
 80066f4:	2030      	movs	r0, #48	; 0x30
 80066f6:	f7ff fe1b 	bl	8006330 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80066fa:	2100      	movs	r1, #0
 80066fc:	20a4      	movs	r0, #164	; 0xa4
 80066fe:	f7ff fe17 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8006702:	2100      	movs	r1, #0
 8006704:	20a6      	movs	r0, #166	; 0xa6
 8006706:	f7ff fe13 	bl	8006330 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800670a:	2100      	movs	r1, #0
 800670c:	20af      	movs	r0, #175	; 0xaf
 800670e:	f7ff fe0f 	bl	8006330 <OLED_WR_Byte>
	OLED_Clear(); 
 8006712:	f7ff fe57 	bl	80063c4 <OLED_Clear>
}
 8006716:	bf00      	nop
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	40023800 	.word	0x40023800
 8006720:	40021000 	.word	0x40021000

08006724 <PIDController_Init>:
#include "pid.h"
#include "math.h"

void PIDController_Init(PIDController *pid) {
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	615a      	str	r2, [r3, #20]
	pid->prevError  = 0.0f;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	619a      	str	r2, [r3, #24]
	pid->prevMeasurement = 0.0f;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	61da      	str	r2, [r3, #28]
	pid->out = 0;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	621a      	str	r2, [r3, #32]

}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <PIDController_Update>:

int PIDController_Update(PIDController *pid, float setpoint, float measurement, int currentpwm) {
 8006754:	b480      	push	{r7}
 8006756:	b089      	sub	sp, #36	; 0x24
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	ed87 0a02 	vstr	s0, [r7, #8]
 8006760:	edc7 0a01 	vstr	s1, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8006766:	ed97 7a02 	vldr	s14, [r7, #8]
 800676a:	edd7 7a01 	vldr	s15, [r7, #4]
 800676e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006772:	edc7 7a07 	vstr	s15, [r7, #28]
    if (isnan(error) == 1) error = 0;
 8006776:	ed97 7a07 	vldr	s14, [r7, #28]
 800677a:	edd7 7a07 	vldr	s15, [r7, #28]
 800677e:	eeb4 7a67 	vcmp.f32	s14, s15
 8006782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006786:	d702      	bvc.n	800678e <PIDController_Update+0x3a>
 8006788:	f04f 0300 	mov.w	r3, #0
 800678c:	61fb      	str	r3, [r7, #28]
	// Proportional
    //int proportional = pid->Kp * error * currentpwm;

    // velocity implementation (instead of distance)
    int proportional;
    if (error >= 0) // positive error, need to increase pwm
 800678e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006792:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800679a:	db1b      	blt.n	80067d4 <PIDController_Update+0x80>
    {
    	 proportional = (int)((1 + pid->Kp * (error / setpoint)) * currentpwm); // kP * (1 + percentage of error based on setpoint) * currentpwm
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	ed93 7a00 	vldr	s14, [r3]
 80067a2:	ed97 6a07 	vldr	s12, [r7, #28]
 80067a6:	edd7 6a02 	vldr	s13, [r7, #8]
 80067aa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80067ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	ee07 3a90 	vmov	s15, r3
 80067c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067cc:	ee17 3a90 	vmov	r3, s15
 80067d0:	61bb      	str	r3, [r7, #24]
 80067d2:	e01a      	b.n	800680a <PIDController_Update+0xb6>
    }
    else // negative error, need to decrease pwm
    {
    	proportional = (int)((1 + pid->Kp * (error / measurement)) * currentpwm); // kP * (1 + percentage of error based on measurement) * currentpwm
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	ed93 7a00 	vldr	s14, [r3]
 80067da:	ed97 6a07 	vldr	s12, [r7, #28]
 80067de:	edd7 6a01 	vldr	s13, [r7, #4]
 80067e2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80067e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	ee07 3a90 	vmov	s15, r3
 80067f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006804:	ee17 3a90 	vmov	r3, s15
 8006808:	61bb      	str	r3, [r7, #24]
    }

	// Integral
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError) * currentpwm;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	ee07 3a90 	vmov	s15, r3
 8006812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	edd3 7a01 	vldr	s15, [r3, #4]
 800681c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006820:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	edd3 7a04 	vldr	s15, [r3, #16]
 800682a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	ed93 6a06 	vldr	s12, [r3, #24]
 8006834:	edd7 7a07 	vldr	s15, [r7, #28]
 8006838:	ee76 7a27 	vadd.f32	s15, s12, s15
 800683c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800684a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800684e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006852:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006856:	ee17 2a90 	vmov	r2, s15
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	615a      	str	r2, [r3, #20]

	// Anti-wind-up via dynamic integrator clamping
	int limMinInt, limMaxInt;

	// Compute integrator limits
	if (pid->limMax > proportional) {
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	429a      	cmp	r2, r3
 8006866:	da05      	bge.n	8006874 <PIDController_Update+0x120>

		limMaxInt = pid->limMax - proportional;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	e001      	b.n	8006878 <PIDController_Update+0x124>

	} else {

		limMaxInt = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	613b      	str	r3, [r7, #16]

	}

	if (pid->limMin < proportional) {
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	429a      	cmp	r2, r3
 8006880:	dd05      	ble.n	800688e <PIDController_Update+0x13a>

		limMinInt = pid->limMin - proportional;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	e001      	b.n	8006892 <PIDController_Update+0x13e>

	} else {

		limMinInt = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	617b      	str	r3, [r7, #20]

	}

	// Clamp integrator
    if (pid->integrator > limMaxInt) {
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	429a      	cmp	r2, r3
 800689a:	da03      	bge.n	80068a4 <PIDController_Update+0x150>

        pid->integrator = limMaxInt;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	615a      	str	r2, [r3, #20]
 80068a2:	e007      	b.n	80068b4 <PIDController_Update+0x160>

    } else if (pid->integrator < limMinInt) {
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	dd02      	ble.n	80068b4 <PIDController_Update+0x160>

        pid->integrator = limMinInt;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	615a      	str	r2, [r3, #20]

	/*
	* Compute output and apply limits
	*/

    pid->out = proportional + pid->integrator;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	695a      	ldr	r2, [r3, #20]
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	441a      	add	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	621a      	str	r2, [r3, #32]

    if (pid->out > pid->limMax) {
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a1a      	ldr	r2, [r3, #32]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	dd04      	ble.n	80068d6 <PIDController_Update+0x182>

        pid->out = pid->limMax;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	68da      	ldr	r2, [r3, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	621a      	str	r2, [r3, #32]
 80068d4:	e009      	b.n	80068ea <PIDController_Update+0x196>

    } else if (pid->out < pid->limMin) {
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a1a      	ldr	r2, [r3, #32]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	429a      	cmp	r2, r3
 80068e0:	da03      	bge.n	80068ea <PIDController_Update+0x196>

        pid->out = pid->limMin;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	621a      	str	r2, [r3, #32]

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	69fa      	ldr	r2, [r7, #28]
 80068ee:	619a      	str	r2, [r3, #24]
    pid->prevMeasurement = measurement;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	61da      	str	r2, [r3, #28]

	/* Return controller output */
    return pid->out;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]

}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3724      	adds	r7, #36	; 0x24
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
	...

08006908 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800690e:	2300      	movs	r3, #0
 8006910:	607b      	str	r3, [r7, #4]
 8006912:	4b12      	ldr	r3, [pc, #72]	; (800695c <HAL_MspInit+0x54>)
 8006914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006916:	4a11      	ldr	r2, [pc, #68]	; (800695c <HAL_MspInit+0x54>)
 8006918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800691c:	6453      	str	r3, [r2, #68]	; 0x44
 800691e:	4b0f      	ldr	r3, [pc, #60]	; (800695c <HAL_MspInit+0x54>)
 8006920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006926:	607b      	str	r3, [r7, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800692a:	2300      	movs	r3, #0
 800692c:	603b      	str	r3, [r7, #0]
 800692e:	4b0b      	ldr	r3, [pc, #44]	; (800695c <HAL_MspInit+0x54>)
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	4a0a      	ldr	r2, [pc, #40]	; (800695c <HAL_MspInit+0x54>)
 8006934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006938:	6413      	str	r3, [r2, #64]	; 0x40
 800693a:	4b08      	ldr	r3, [pc, #32]	; (800695c <HAL_MspInit+0x54>)
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006946:	2200      	movs	r2, #0
 8006948:	210f      	movs	r1, #15
 800694a:	f06f 0001 	mvn.w	r0, #1
 800694e:	f000 fcde 	bl	800730e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006952:	bf00      	nop
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	40023800 	.word	0x40023800

08006960 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08a      	sub	sp, #40	; 0x28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006968:	f107 0314 	add.w	r3, r7, #20
 800696c:	2200      	movs	r2, #0
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	605a      	str	r2, [r3, #4]
 8006972:	609a      	str	r2, [r3, #8]
 8006974:	60da      	str	r2, [r3, #12]
 8006976:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a1d      	ldr	r2, [pc, #116]	; (80069f4 <HAL_I2C_MspInit+0x94>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d134      	bne.n	80069ec <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006982:	2300      	movs	r3, #0
 8006984:	613b      	str	r3, [r7, #16]
 8006986:	4b1c      	ldr	r3, [pc, #112]	; (80069f8 <HAL_I2C_MspInit+0x98>)
 8006988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698a:	4a1b      	ldr	r2, [pc, #108]	; (80069f8 <HAL_I2C_MspInit+0x98>)
 800698c:	f043 0302 	orr.w	r3, r3, #2
 8006990:	6313      	str	r3, [r2, #48]	; 0x30
 8006992:	4b19      	ldr	r3, [pc, #100]	; (80069f8 <HAL_I2C_MspInit+0x98>)
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	613b      	str	r3, [r7, #16]
 800699c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GYRO_SCL_Pin|GYRO_SDA_Pin;
 800699e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80069a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069a4:	2312      	movs	r3, #18
 80069a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a8:	2300      	movs	r3, #0
 80069aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069ac:	2303      	movs	r3, #3
 80069ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80069b0:	2304      	movs	r3, #4
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069b4:	f107 0314 	add.w	r3, r7, #20
 80069b8:	4619      	mov	r1, r3
 80069ba:	4810      	ldr	r0, [pc, #64]	; (80069fc <HAL_I2C_MspInit+0x9c>)
 80069bc:	f000 fd7e 	bl	80074bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	4b0c      	ldr	r3, [pc, #48]	; (80069f8 <HAL_I2C_MspInit+0x98>)
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	4a0b      	ldr	r2, [pc, #44]	; (80069f8 <HAL_I2C_MspInit+0x98>)
 80069ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069ce:	6413      	str	r3, [r2, #64]	; 0x40
 80069d0:	4b09      	ldr	r3, [pc, #36]	; (80069f8 <HAL_I2C_MspInit+0x98>)
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80069dc:	2200      	movs	r2, #0
 80069de:	2105      	movs	r1, #5
 80069e0:	201f      	movs	r0, #31
 80069e2:	f000 fc94 	bl	800730e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80069e6:	201f      	movs	r0, #31
 80069e8:	f000 fcad 	bl	8007346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80069ec:	bf00      	nop
 80069ee:	3728      	adds	r7, #40	; 0x28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	40005400 	.word	0x40005400
 80069f8:	40023800 	.word	0x40023800
 80069fc:	40020400 	.word	0x40020400

08006a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08a      	sub	sp, #40	; 0x28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a08:	f107 0314 	add.w	r3, r7, #20
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	605a      	str	r2, [r3, #4]
 8006a12:	609a      	str	r2, [r3, #8]
 8006a14:	60da      	str	r2, [r3, #12]
 8006a16:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a23      	ldr	r2, [pc, #140]	; (8006aac <HAL_TIM_Base_MspInit+0xac>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d10e      	bne.n	8006a40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006a22:	2300      	movs	r3, #0
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	4b22      	ldr	r3, [pc, #136]	; (8006ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8006a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2a:	4a21      	ldr	r2, [pc, #132]	; (8006ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	6453      	str	r3, [r2, #68]	; 0x44
 8006a32:	4b1f      	ldr	r3, [pc, #124]	; (8006ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8006a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	613b      	str	r3, [r7, #16]
 8006a3c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006a3e:	e031      	b.n	8006aa4 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM8)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a1b      	ldr	r2, [pc, #108]	; (8006ab4 <HAL_TIM_Base_MspInit+0xb4>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d12c      	bne.n	8006aa4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]
 8006a4e:	4b18      	ldr	r3, [pc, #96]	; (8006ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8006a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a52:	4a17      	ldr	r2, [pc, #92]	; (8006ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8006a54:	f043 0302 	orr.w	r3, r3, #2
 8006a58:	6453      	str	r3, [r2, #68]	; 0x44
 8006a5a:	4b15      	ldr	r3, [pc, #84]	; (8006ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a66:	2300      	movs	r3, #0
 8006a68:	60bb      	str	r3, [r7, #8]
 8006a6a:	4b11      	ldr	r3, [pc, #68]	; (8006ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	4a10      	ldr	r2, [pc, #64]	; (8006ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8006a70:	f043 0304 	orr.w	r3, r3, #4
 8006a74:	6313      	str	r3, [r2, #48]	; 0x30
 8006a76:	4b0e      	ldr	r3, [pc, #56]	; (8006ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	60bb      	str	r3, [r7, #8]
 8006a80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin|PWMC_Pin|PWMD_Pin;
 8006a82:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a88:	2302      	movs	r3, #2
 8006a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a90:	2300      	movs	r3, #0
 8006a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006a94:	2303      	movs	r3, #3
 8006a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a98:	f107 0314 	add.w	r3, r7, #20
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4806      	ldr	r0, [pc, #24]	; (8006ab8 <HAL_TIM_Base_MspInit+0xb8>)
 8006aa0:	f000 fd0c 	bl	80074bc <HAL_GPIO_Init>
}
 8006aa4:	bf00      	nop
 8006aa6:	3728      	adds	r7, #40	; 0x28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	40010000 	.word	0x40010000
 8006ab0:	40023800 	.word	0x40023800
 8006ab4:	40010400 	.word	0x40010400
 8006ab8:	40020800 	.word	0x40020800

08006abc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08c      	sub	sp, #48	; 0x30
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ac4:	f107 031c 	add.w	r3, r7, #28
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	605a      	str	r2, [r3, #4]
 8006ace:	609a      	str	r2, [r3, #8]
 8006ad0:	60da      	str	r2, [r3, #12]
 8006ad2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006adc:	d14b      	bne.n	8006b76 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	4b3f      	ldr	r3, [pc, #252]	; (8006be0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	4a3e      	ldr	r2, [pc, #248]	; (8006be0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006ae8:	f043 0301 	orr.w	r3, r3, #1
 8006aec:	6413      	str	r3, [r2, #64]	; 0x40
 8006aee:	4b3c      	ldr	r3, [pc, #240]	; (8006be0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	61bb      	str	r3, [r7, #24]
 8006af8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]
 8006afe:	4b38      	ldr	r3, [pc, #224]	; (8006be0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b02:	4a37      	ldr	r2, [pc, #220]	; (8006be0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	6313      	str	r3, [r2, #48]	; 0x30
 8006b0a:	4b35      	ldr	r3, [pc, #212]	; (8006be0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b16:	2300      	movs	r3, #0
 8006b18:	613b      	str	r3, [r7, #16]
 8006b1a:	4b31      	ldr	r3, [pc, #196]	; (8006be0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1e:	4a30      	ldr	r2, [pc, #192]	; (8006be0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b20:	f043 0302 	orr.w	r3, r3, #2
 8006b24:	6313      	str	r3, [r2, #48]	; 0x30
 8006b26:	4b2e      	ldr	r3, [pc, #184]	; (8006be0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	613b      	str	r3, [r7, #16]
 8006b30:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA1_Pin;
 8006b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b38:	2302      	movs	r3, #2
 8006b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b40:	2300      	movs	r3, #0
 8006b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006b44:	2301      	movs	r3, #1
 8006b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA1_GPIO_Port, &GPIO_InitStruct);
 8006b48:	f107 031c 	add.w	r3, r7, #28
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4825      	ldr	r0, [pc, #148]	; (8006be4 <HAL_TIM_Encoder_MspInit+0x128>)
 8006b50:	f000 fcb4 	bl	80074bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA2_Pin;
 8006b54:	2308      	movs	r3, #8
 8006b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b58:	2302      	movs	r3, #2
 8006b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b60:	2300      	movs	r3, #0
 8006b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006b64:	2301      	movs	r3, #1
 8006b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA2_GPIO_Port, &GPIO_InitStruct);
 8006b68:	f107 031c 	add.w	r3, r7, #28
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	481e      	ldr	r0, [pc, #120]	; (8006be8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006b70:	f000 fca4 	bl	80074bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006b74:	e030      	b.n	8006bd8 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a1c      	ldr	r2, [pc, #112]	; (8006bec <HAL_TIM_Encoder_MspInit+0x130>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d12b      	bne.n	8006bd8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006b80:	2300      	movs	r3, #0
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	4b16      	ldr	r3, [pc, #88]	; (8006be0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b88:	4a15      	ldr	r2, [pc, #84]	; (8006be0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b8a:	f043 0304 	orr.w	r3, r3, #4
 8006b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8006b90:	4b13      	ldr	r3, [pc, #76]	; (8006be0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	60fb      	str	r3, [r7, #12]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60bb      	str	r3, [r7, #8]
 8006ba0:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba4:	4a0e      	ldr	r2, [pc, #56]	; (8006be0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006ba6:	f043 0302 	orr.w	r3, r3, #2
 8006baa:	6313      	str	r3, [r2, #48]	; 0x30
 8006bac:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderC1_Pin|EncoderC2_Pin;
 8006bb8:	23c0      	movs	r3, #192	; 0xc0
 8006bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006bc8:	2302      	movs	r3, #2
 8006bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bcc:	f107 031c 	add.w	r3, r7, #28
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4805      	ldr	r0, [pc, #20]	; (8006be8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006bd4:	f000 fc72 	bl	80074bc <HAL_GPIO_Init>
}
 8006bd8:	bf00      	nop
 8006bda:	3730      	adds	r7, #48	; 0x30
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	40023800 	.word	0x40023800
 8006be4:	40020000 	.word	0x40020000
 8006be8:	40020400 	.word	0x40020400
 8006bec:	40000800 	.word	0x40000800

08006bf0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08a      	sub	sp, #40	; 0x28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bf8:	f107 0314 	add.w	r3, r7, #20
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	605a      	str	r2, [r3, #4]
 8006c02:	609a      	str	r2, [r3, #8]
 8006c04:	60da      	str	r2, [r3, #12]
 8006c06:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1d      	ldr	r2, [pc, #116]	; (8006c84 <HAL_TIM_IC_MspInit+0x94>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d133      	bne.n	8006c7a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006c12:	2300      	movs	r3, #0
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	4b1c      	ldr	r3, [pc, #112]	; (8006c88 <HAL_TIM_IC_MspInit+0x98>)
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	4a1b      	ldr	r2, [pc, #108]	; (8006c88 <HAL_TIM_IC_MspInit+0x98>)
 8006c1c:	f043 0302 	orr.w	r3, r3, #2
 8006c20:	6413      	str	r3, [r2, #64]	; 0x40
 8006c22:	4b19      	ldr	r3, [pc, #100]	; (8006c88 <HAL_TIM_IC_MspInit+0x98>)
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	613b      	str	r3, [r7, #16]
 8006c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	4b15      	ldr	r3, [pc, #84]	; (8006c88 <HAL_TIM_IC_MspInit+0x98>)
 8006c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c36:	4a14      	ldr	r2, [pc, #80]	; (8006c88 <HAL_TIM_IC_MspInit+0x98>)
 8006c38:	f043 0302 	orr.w	r3, r3, #2
 8006c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c3e:	4b12      	ldr	r3, [pc, #72]	; (8006c88 <HAL_TIM_IC_MspInit+0x98>)
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = UltraSensor_Echo_Pin;
 8006c4a:	2310      	movs	r3, #16
 8006c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c4e:	2302      	movs	r3, #2
 8006c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c56:	2300      	movs	r3, #0
 8006c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(UltraSensor_Echo_GPIO_Port, &GPIO_InitStruct);
 8006c5e:	f107 0314 	add.w	r3, r7, #20
 8006c62:	4619      	mov	r1, r3
 8006c64:	4809      	ldr	r0, [pc, #36]	; (8006c8c <HAL_TIM_IC_MspInit+0x9c>)
 8006c66:	f000 fc29 	bl	80074bc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2105      	movs	r1, #5
 8006c6e:	201d      	movs	r0, #29
 8006c70:	f000 fb4d 	bl	800730e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006c74:	201d      	movs	r0, #29
 8006c76:	f000 fb66 	bl	8007346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006c7a:	bf00      	nop
 8006c7c:	3728      	adds	r7, #40	; 0x28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	40000400 	.word	0x40000400
 8006c88:	40023800 	.word	0x40023800
 8006c8c:	40020400 	.word	0x40020400

08006c90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b088      	sub	sp, #32
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c98:	f107 030c 	add.w	r3, r7, #12
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	605a      	str	r2, [r3, #4]
 8006ca2:	609a      	str	r2, [r3, #8]
 8006ca4:	60da      	str	r2, [r3, #12]
 8006ca6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a12      	ldr	r2, [pc, #72]	; (8006cf8 <HAL_TIM_MspPostInit+0x68>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d11e      	bne.n	8006cf0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60bb      	str	r3, [r7, #8]
 8006cb6:	4b11      	ldr	r3, [pc, #68]	; (8006cfc <HAL_TIM_MspPostInit+0x6c>)
 8006cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cba:	4a10      	ldr	r2, [pc, #64]	; (8006cfc <HAL_TIM_MspPostInit+0x6c>)
 8006cbc:	f043 0310 	orr.w	r3, r3, #16
 8006cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8006cc2:	4b0e      	ldr	r3, [pc, #56]	; (8006cfc <HAL_TIM_MspPostInit+0x6c>)
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	f003 0310 	and.w	r3, r3, #16
 8006cca:	60bb      	str	r3, [r7, #8]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8006cce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006cd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8006ce4:	f107 030c 	add.w	r3, r7, #12
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4805      	ldr	r0, [pc, #20]	; (8006d00 <HAL_TIM_MspPostInit+0x70>)
 8006cec:	f000 fbe6 	bl	80074bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006cf0:	bf00      	nop
 8006cf2:	3720      	adds	r7, #32
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	40010000 	.word	0x40010000
 8006cfc:	40023800 	.word	0x40023800
 8006d00:	40021000 	.word	0x40021000

08006d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	; 0x28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d0c:	f107 0314 	add.w	r3, r7, #20
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	605a      	str	r2, [r3, #4]
 8006d16:	609a      	str	r2, [r3, #8]
 8006d18:	60da      	str	r2, [r3, #12]
 8006d1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1d      	ldr	r2, [pc, #116]	; (8006d98 <HAL_UART_MspInit+0x94>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d134      	bne.n	8006d90 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006d26:	2300      	movs	r3, #0
 8006d28:	613b      	str	r3, [r7, #16]
 8006d2a:	4b1c      	ldr	r3, [pc, #112]	; (8006d9c <HAL_UART_MspInit+0x98>)
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	4a1b      	ldr	r2, [pc, #108]	; (8006d9c <HAL_UART_MspInit+0x98>)
 8006d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d34:	6413      	str	r3, [r2, #64]	; 0x40
 8006d36:	4b19      	ldr	r3, [pc, #100]	; (8006d9c <HAL_UART_MspInit+0x98>)
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d3e:	613b      	str	r3, [r7, #16]
 8006d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d42:	2300      	movs	r3, #0
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	4b15      	ldr	r3, [pc, #84]	; (8006d9c <HAL_UART_MspInit+0x98>)
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	4a14      	ldr	r2, [pc, #80]	; (8006d9c <HAL_UART_MspInit+0x98>)
 8006d4c:	f043 0304 	orr.w	r3, r3, #4
 8006d50:	6313      	str	r3, [r2, #48]	; 0x30
 8006d52:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <HAL_UART_MspInit+0x98>)
 8006d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006d5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d64:	2302      	movs	r3, #2
 8006d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006d70:	2307      	movs	r3, #7
 8006d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d74:	f107 0314 	add.w	r3, r7, #20
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4809      	ldr	r0, [pc, #36]	; (8006da0 <HAL_UART_MspInit+0x9c>)
 8006d7c:	f000 fb9e 	bl	80074bc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006d80:	2200      	movs	r2, #0
 8006d82:	2105      	movs	r1, #5
 8006d84:	2027      	movs	r0, #39	; 0x27
 8006d86:	f000 fac2 	bl	800730e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006d8a:	2027      	movs	r0, #39	; 0x27
 8006d8c:	f000 fadb 	bl	8007346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006d90:	bf00      	nop
 8006d92:	3728      	adds	r7, #40	; 0x28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	40004800 	.word	0x40004800
 8006d9c:	40023800 	.word	0x40023800
 8006da0:	40020800 	.word	0x40020800

08006da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006da4:	b480      	push	{r7}
 8006da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006da8:	e7fe      	b.n	8006da8 <NMI_Handler+0x4>

08006daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006daa:	b480      	push	{r7}
 8006dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006dae:	e7fe      	b.n	8006dae <HardFault_Handler+0x4>

08006db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006db4:	e7fe      	b.n	8006db4 <MemManage_Handler+0x4>

08006db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006db6:	b480      	push	{r7}
 8006db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006dba:	e7fe      	b.n	8006dba <BusFault_Handler+0x4>

08006dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006dc0:	e7fe      	b.n	8006dc0 <UsageFault_Handler+0x4>

08006dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006dc6:	bf00      	nop
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006dd4:	f000 f97c 	bl	80070d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006dd8:	f008 f82e 	bl	800ee38 <xTaskGetSchedulerState>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d001      	beq.n	8006de6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006de2:	f008 fe19 	bl	800fa18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006de6:	bf00      	nop
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006df0:	4802      	ldr	r0, [pc, #8]	; (8006dfc <TIM3_IRQHandler+0x10>)
 8006df2:	f004 f929 	bl	800b048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006df6:	bf00      	nop
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	200002e8 	.word	0x200002e8

08006e00 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006e04:	4802      	ldr	r0, [pc, #8]	; (8006e10 <I2C1_EV_IRQHandler+0x10>)
 8006e06:	f001 f991 	bl	800812c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006e0a:	bf00      	nop
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000204 	.word	0x20000204

08006e14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006e18:	4802      	ldr	r0, [pc, #8]	; (8006e24 <USART3_IRQHandler+0x10>)
 8006e1a:	f005 fadb 	bl	800c3d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006e1e:	bf00      	nop
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	200003c0 	.word	0x200003c0

08006e28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
	return 1;
 8006e2c:	2301      	movs	r3, #1
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <_kill>:

int _kill(int pid, int sig)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006e42:	f009 f863 	bl	800ff0c <__errno>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2216      	movs	r2, #22
 8006e4a:	601a      	str	r2, [r3, #0]
	return -1;
 8006e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <_exit>:

void _exit (int status)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff ffe7 	bl	8006e38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006e6a:	e7fe      	b.n	8006e6a <_exit+0x12>

08006e6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e78:	2300      	movs	r3, #0
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	e00a      	b.n	8006e94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006e7e:	f3af 8000 	nop.w
 8006e82:	4601      	mov	r1, r0
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	60ba      	str	r2, [r7, #8]
 8006e8a:	b2ca      	uxtb	r2, r1
 8006e8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	3301      	adds	r3, #1
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	dbf0      	blt.n	8006e7e <_read+0x12>
	}

return len;
 8006e9c:	687b      	ldr	r3, [r7, #4]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b086      	sub	sp, #24
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	617b      	str	r3, [r7, #20]
 8006eb6:	e009      	b.n	8006ecc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	60ba      	str	r2, [r7, #8]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	dbf1      	blt.n	8006eb8 <_write+0x12>
	}
	return len;
 8006ed4:	687b      	ldr	r3, [r7, #4]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <_close>:

int _close(int file)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b083      	sub	sp, #12
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
	return -1;
 8006ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f06:	605a      	str	r2, [r3, #4]
	return 0;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <_isatty>:

int _isatty(int file)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
	return 1;
 8006f1e:	2301      	movs	r3, #1
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
	return 0;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
	...

08006f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f50:	4a14      	ldr	r2, [pc, #80]	; (8006fa4 <_sbrk+0x5c>)
 8006f52:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <_sbrk+0x60>)
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f5c:	4b13      	ldr	r3, [pc, #76]	; (8006fac <_sbrk+0x64>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d102      	bne.n	8006f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f64:	4b11      	ldr	r3, [pc, #68]	; (8006fac <_sbrk+0x64>)
 8006f66:	4a12      	ldr	r2, [pc, #72]	; (8006fb0 <_sbrk+0x68>)
 8006f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f6a:	4b10      	ldr	r3, [pc, #64]	; (8006fac <_sbrk+0x64>)
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4413      	add	r3, r2
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d207      	bcs.n	8006f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f78:	f008 ffc8 	bl	800ff0c <__errno>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	220c      	movs	r2, #12
 8006f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f86:	e009      	b.n	8006f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006f88:	4b08      	ldr	r3, [pc, #32]	; (8006fac <_sbrk+0x64>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f8e:	4b07      	ldr	r3, [pc, #28]	; (8006fac <_sbrk+0x64>)
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4413      	add	r3, r2
 8006f96:	4a05      	ldr	r2, [pc, #20]	; (8006fac <_sbrk+0x64>)
 8006f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	20020000 	.word	0x20020000
 8006fa8:	00000400 	.word	0x00000400
 8006fac:	20000864 	.word	0x20000864
 8006fb0:	200063d0 	.word	0x200063d0

08006fb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006fb8:	4b06      	ldr	r3, [pc, #24]	; (8006fd4 <SystemInit+0x20>)
 8006fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fbe:	4a05      	ldr	r2, [pc, #20]	; (8006fd4 <SystemInit+0x20>)
 8006fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006fc8:	bf00      	nop
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	e000ed00 	.word	0xe000ed00

08006fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007010 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006fdc:	480d      	ldr	r0, [pc, #52]	; (8007014 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006fde:	490e      	ldr	r1, [pc, #56]	; (8007018 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006fe0:	4a0e      	ldr	r2, [pc, #56]	; (800701c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006fe4:	e002      	b.n	8006fec <LoopCopyDataInit>

08006fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006fea:	3304      	adds	r3, #4

08006fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ff0:	d3f9      	bcc.n	8006fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ff2:	4a0b      	ldr	r2, [pc, #44]	; (8007020 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006ff4:	4c0b      	ldr	r4, [pc, #44]	; (8007024 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ff8:	e001      	b.n	8006ffe <LoopFillZerobss>

08006ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ffc:	3204      	adds	r2, #4

08006ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007000:	d3fb      	bcc.n	8006ffa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007002:	f7ff ffd7 	bl	8006fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007006:	f008 ff87 	bl	800ff18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800700a:	f7f9 fff5 	bl	8000ff8 <main>
  bx  lr    
 800700e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007010:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007018:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800701c:	0801590c 	.word	0x0801590c
  ldr r2, =_sbss
 8007020:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8007024:	200063cc 	.word	0x200063cc

08007028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007028:	e7fe      	b.n	8007028 <ADC_IRQHandler>
	...

0800702c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007030:	4b0e      	ldr	r3, [pc, #56]	; (800706c <HAL_Init+0x40>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a0d      	ldr	r2, [pc, #52]	; (800706c <HAL_Init+0x40>)
 8007036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800703a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800703c:	4b0b      	ldr	r3, [pc, #44]	; (800706c <HAL_Init+0x40>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a0a      	ldr	r2, [pc, #40]	; (800706c <HAL_Init+0x40>)
 8007042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007048:	4b08      	ldr	r3, [pc, #32]	; (800706c <HAL_Init+0x40>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a07      	ldr	r2, [pc, #28]	; (800706c <HAL_Init+0x40>)
 800704e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007054:	2003      	movs	r0, #3
 8007056:	f000 f94f 	bl	80072f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800705a:	200f      	movs	r0, #15
 800705c:	f000 f808 	bl	8007070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007060:	f7ff fc52 	bl	8006908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	40023c00 	.word	0x40023c00

08007070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007078:	4b12      	ldr	r3, [pc, #72]	; (80070c4 <HAL_InitTick+0x54>)
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	4b12      	ldr	r3, [pc, #72]	; (80070c8 <HAL_InitTick+0x58>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	4619      	mov	r1, r3
 8007082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007086:	fbb3 f3f1 	udiv	r3, r3, r1
 800708a:	fbb2 f3f3 	udiv	r3, r2, r3
 800708e:	4618      	mov	r0, r3
 8007090:	f000 f967 	bl	8007362 <HAL_SYSTICK_Config>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e00e      	b.n	80070bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b0f      	cmp	r3, #15
 80070a2:	d80a      	bhi.n	80070ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80070a4:	2200      	movs	r2, #0
 80070a6:	6879      	ldr	r1, [r7, #4]
 80070a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070ac:	f000 f92f 	bl	800730e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80070b0:	4a06      	ldr	r2, [pc, #24]	; (80070cc <HAL_InitTick+0x5c>)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	e000      	b.n	80070bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20000004 	.word	0x20000004
 80070c8:	2000000c 	.word	0x2000000c
 80070cc:	20000008 	.word	0x20000008

080070d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80070d4:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <HAL_IncTick+0x20>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <HAL_IncTick+0x24>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4413      	add	r3, r2
 80070e0:	4a04      	ldr	r2, [pc, #16]	; (80070f4 <HAL_IncTick+0x24>)
 80070e2:	6013      	str	r3, [r2, #0]
}
 80070e4:	bf00      	nop
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	2000000c 	.word	0x2000000c
 80070f4:	20000868 	.word	0x20000868

080070f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
  return uwTick;
 80070fc:	4b03      	ldr	r3, [pc, #12]	; (800710c <HAL_GetTick+0x14>)
 80070fe:	681b      	ldr	r3, [r3, #0]
}
 8007100:	4618      	mov	r0, r3
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	20000868 	.word	0x20000868

08007110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007118:	f7ff ffee 	bl	80070f8 <HAL_GetTick>
 800711c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007128:	d005      	beq.n	8007136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800712a:	4b0a      	ldr	r3, [pc, #40]	; (8007154 <HAL_Delay+0x44>)
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007136:	bf00      	nop
 8007138:	f7ff ffde 	bl	80070f8 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	429a      	cmp	r2, r3
 8007146:	d8f7      	bhi.n	8007138 <HAL_Delay+0x28>
  {
  }
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	2000000c 	.word	0x2000000c

08007158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007168:	4b0c      	ldr	r3, [pc, #48]	; (800719c <__NVIC_SetPriorityGrouping+0x44>)
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007174:	4013      	ands	r3, r2
 8007176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800718a:	4a04      	ldr	r2, [pc, #16]	; (800719c <__NVIC_SetPriorityGrouping+0x44>)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	60d3      	str	r3, [r2, #12]
}
 8007190:	bf00      	nop
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	e000ed00 	.word	0xe000ed00

080071a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80071a0:	b480      	push	{r7}
 80071a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071a4:	4b04      	ldr	r3, [pc, #16]	; (80071b8 <__NVIC_GetPriorityGrouping+0x18>)
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	0a1b      	lsrs	r3, r3, #8
 80071aa:	f003 0307 	and.w	r3, r3, #7
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	e000ed00 	.word	0xe000ed00

080071bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	db0b      	blt.n	80071e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071ce:	79fb      	ldrb	r3, [r7, #7]
 80071d0:	f003 021f 	and.w	r2, r3, #31
 80071d4:	4907      	ldr	r1, [pc, #28]	; (80071f4 <__NVIC_EnableIRQ+0x38>)
 80071d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	2001      	movs	r0, #1
 80071de:	fa00 f202 	lsl.w	r2, r0, r2
 80071e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	e000e100 	.word	0xe000e100

080071f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	4603      	mov	r3, r0
 8007200:	6039      	str	r1, [r7, #0]
 8007202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007208:	2b00      	cmp	r3, #0
 800720a:	db0a      	blt.n	8007222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	b2da      	uxtb	r2, r3
 8007210:	490c      	ldr	r1, [pc, #48]	; (8007244 <__NVIC_SetPriority+0x4c>)
 8007212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007216:	0112      	lsls	r2, r2, #4
 8007218:	b2d2      	uxtb	r2, r2
 800721a:	440b      	add	r3, r1
 800721c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007220:	e00a      	b.n	8007238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	b2da      	uxtb	r2, r3
 8007226:	4908      	ldr	r1, [pc, #32]	; (8007248 <__NVIC_SetPriority+0x50>)
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	f003 030f 	and.w	r3, r3, #15
 800722e:	3b04      	subs	r3, #4
 8007230:	0112      	lsls	r2, r2, #4
 8007232:	b2d2      	uxtb	r2, r2
 8007234:	440b      	add	r3, r1
 8007236:	761a      	strb	r2, [r3, #24]
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	e000e100 	.word	0xe000e100
 8007248:	e000ed00 	.word	0xe000ed00

0800724c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800724c:	b480      	push	{r7}
 800724e:	b089      	sub	sp, #36	; 0x24
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f003 0307 	and.w	r3, r3, #7
 800725e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	f1c3 0307 	rsb	r3, r3, #7
 8007266:	2b04      	cmp	r3, #4
 8007268:	bf28      	it	cs
 800726a:	2304      	movcs	r3, #4
 800726c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	3304      	adds	r3, #4
 8007272:	2b06      	cmp	r3, #6
 8007274:	d902      	bls.n	800727c <NVIC_EncodePriority+0x30>
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	3b03      	subs	r3, #3
 800727a:	e000      	b.n	800727e <NVIC_EncodePriority+0x32>
 800727c:	2300      	movs	r3, #0
 800727e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	fa02 f303 	lsl.w	r3, r2, r3
 800728a:	43da      	mvns	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	401a      	ands	r2, r3
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007294:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	fa01 f303 	lsl.w	r3, r1, r3
 800729e:	43d9      	mvns	r1, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072a4:	4313      	orrs	r3, r2
         );
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3724      	adds	r7, #36	; 0x24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
	...

080072b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3b01      	subs	r3, #1
 80072c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072c4:	d301      	bcc.n	80072ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072c6:	2301      	movs	r3, #1
 80072c8:	e00f      	b.n	80072ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072ca:	4a0a      	ldr	r2, [pc, #40]	; (80072f4 <SysTick_Config+0x40>)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072d2:	210f      	movs	r1, #15
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072d8:	f7ff ff8e 	bl	80071f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072dc:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <SysTick_Config+0x40>)
 80072de:	2200      	movs	r2, #0
 80072e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072e2:	4b04      	ldr	r3, [pc, #16]	; (80072f4 <SysTick_Config+0x40>)
 80072e4:	2207      	movs	r2, #7
 80072e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	e000e010 	.word	0xe000e010

080072f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff ff29 	bl	8007158 <__NVIC_SetPriorityGrouping>
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800730e:	b580      	push	{r7, lr}
 8007310:	b086      	sub	sp, #24
 8007312:	af00      	add	r7, sp, #0
 8007314:	4603      	mov	r3, r0
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	607a      	str	r2, [r7, #4]
 800731a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800731c:	2300      	movs	r3, #0
 800731e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007320:	f7ff ff3e 	bl	80071a0 <__NVIC_GetPriorityGrouping>
 8007324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	68b9      	ldr	r1, [r7, #8]
 800732a:	6978      	ldr	r0, [r7, #20]
 800732c:	f7ff ff8e 	bl	800724c <NVIC_EncodePriority>
 8007330:	4602      	mov	r2, r0
 8007332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007336:	4611      	mov	r1, r2
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff ff5d 	bl	80071f8 <__NVIC_SetPriority>
}
 800733e:	bf00      	nop
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	4603      	mov	r3, r0
 800734e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff ff31 	bl	80071bc <__NVIC_EnableIRQ>
}
 800735a:	bf00      	nop
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff ffa2 	bl	80072b4 <SysTick_Config>
 8007370:	4603      	mov	r3, r0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007386:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007388:	f7ff feb6 	bl	80070f8 <HAL_GetTick>
 800738c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d008      	beq.n	80073ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2280      	movs	r2, #128	; 0x80
 800739e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e052      	b.n	8007452 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0216 	bic.w	r2, r2, #22
 80073ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695a      	ldr	r2, [r3, #20]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d103      	bne.n	80073dc <HAL_DMA_Abort+0x62>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d007      	beq.n	80073ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 0208 	bic.w	r2, r2, #8
 80073ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0201 	bic.w	r2, r2, #1
 80073fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073fc:	e013      	b.n	8007426 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073fe:	f7ff fe7b 	bl	80070f8 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b05      	cmp	r3, #5
 800740a:	d90c      	bls.n	8007426 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2220      	movs	r2, #32
 8007410:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2203      	movs	r2, #3
 8007416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e015      	b.n	8007452 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e4      	bne.n	80073fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007438:	223f      	movs	r2, #63	; 0x3f
 800743a:	409a      	lsls	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800745a:	b480      	push	{r7}
 800745c:	b083      	sub	sp, #12
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b02      	cmp	r3, #2
 800746c:	d004      	beq.n	8007478 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2280      	movs	r2, #128	; 0x80
 8007472:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e00c      	b.n	8007492 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2205      	movs	r2, #5
 800747c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0201 	bic.w	r2, r2, #1
 800748e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074ac:	b2db      	uxtb	r3, r3
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
	...

080074bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074bc:	b480      	push	{r7}
 80074be:	b089      	sub	sp, #36	; 0x24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80074d2:	2300      	movs	r3, #0
 80074d4:	61fb      	str	r3, [r7, #28]
 80074d6:	e16b      	b.n	80077b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80074d8:	2201      	movs	r2, #1
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	fa02 f303 	lsl.w	r3, r2, r3
 80074e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	4013      	ands	r3, r2
 80074ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	f040 815a 	bne.w	80077aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d005      	beq.n	800750e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800750a:	2b02      	cmp	r3, #2
 800750c:	d130      	bne.n	8007570 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	005b      	lsls	r3, r3, #1
 8007518:	2203      	movs	r2, #3
 800751a:	fa02 f303 	lsl.w	r3, r2, r3
 800751e:	43db      	mvns	r3, r3
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	4013      	ands	r3, r2
 8007524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	fa02 f303 	lsl.w	r3, r2, r3
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	4313      	orrs	r3, r2
 8007536:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	69ba      	ldr	r2, [r7, #24]
 800753c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007544:	2201      	movs	r2, #1
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	fa02 f303 	lsl.w	r3, r2, r3
 800754c:	43db      	mvns	r3, r3
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	4013      	ands	r3, r2
 8007552:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	091b      	lsrs	r3, r3, #4
 800755a:	f003 0201 	and.w	r2, r3, #1
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	fa02 f303 	lsl.w	r3, r2, r3
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	4313      	orrs	r3, r2
 8007568:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f003 0303 	and.w	r3, r3, #3
 8007578:	2b03      	cmp	r3, #3
 800757a:	d017      	beq.n	80075ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	2203      	movs	r2, #3
 8007588:	fa02 f303 	lsl.w	r3, r2, r3
 800758c:	43db      	mvns	r3, r3
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	4013      	ands	r3, r2
 8007592:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	fa02 f303 	lsl.w	r3, r2, r3
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f003 0303 	and.w	r3, r3, #3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d123      	bne.n	8007600 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	08da      	lsrs	r2, r3, #3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3208      	adds	r2, #8
 80075c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	f003 0307 	and.w	r3, r3, #7
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	220f      	movs	r2, #15
 80075d0:	fa02 f303 	lsl.w	r3, r2, r3
 80075d4:	43db      	mvns	r3, r3
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	4013      	ands	r3, r2
 80075da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	691a      	ldr	r2, [r3, #16]
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	f003 0307 	and.w	r3, r3, #7
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	08da      	lsrs	r2, r3, #3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3208      	adds	r2, #8
 80075fa:	69b9      	ldr	r1, [r7, #24]
 80075fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	2203      	movs	r2, #3
 800760c:	fa02 f303 	lsl.w	r3, r2, r3
 8007610:	43db      	mvns	r3, r3
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	4013      	ands	r3, r2
 8007616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f003 0203 	and.w	r2, r3, #3
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	fa02 f303 	lsl.w	r3, r2, r3
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	4313      	orrs	r3, r2
 800762c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 80b4 	beq.w	80077aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007642:	2300      	movs	r3, #0
 8007644:	60fb      	str	r3, [r7, #12]
 8007646:	4b60      	ldr	r3, [pc, #384]	; (80077c8 <HAL_GPIO_Init+0x30c>)
 8007648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764a:	4a5f      	ldr	r2, [pc, #380]	; (80077c8 <HAL_GPIO_Init+0x30c>)
 800764c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007650:	6453      	str	r3, [r2, #68]	; 0x44
 8007652:	4b5d      	ldr	r3, [pc, #372]	; (80077c8 <HAL_GPIO_Init+0x30c>)
 8007654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800765e:	4a5b      	ldr	r2, [pc, #364]	; (80077cc <HAL_GPIO_Init+0x310>)
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	089b      	lsrs	r3, r3, #2
 8007664:	3302      	adds	r3, #2
 8007666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800766a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	f003 0303 	and.w	r3, r3, #3
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	220f      	movs	r2, #15
 8007676:	fa02 f303 	lsl.w	r3, r2, r3
 800767a:	43db      	mvns	r3, r3
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	4013      	ands	r3, r2
 8007680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a52      	ldr	r2, [pc, #328]	; (80077d0 <HAL_GPIO_Init+0x314>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d02b      	beq.n	80076e2 <HAL_GPIO_Init+0x226>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a51      	ldr	r2, [pc, #324]	; (80077d4 <HAL_GPIO_Init+0x318>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d025      	beq.n	80076de <HAL_GPIO_Init+0x222>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a50      	ldr	r2, [pc, #320]	; (80077d8 <HAL_GPIO_Init+0x31c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d01f      	beq.n	80076da <HAL_GPIO_Init+0x21e>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a4f      	ldr	r2, [pc, #316]	; (80077dc <HAL_GPIO_Init+0x320>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d019      	beq.n	80076d6 <HAL_GPIO_Init+0x21a>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a4e      	ldr	r2, [pc, #312]	; (80077e0 <HAL_GPIO_Init+0x324>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d013      	beq.n	80076d2 <HAL_GPIO_Init+0x216>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a4d      	ldr	r2, [pc, #308]	; (80077e4 <HAL_GPIO_Init+0x328>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d00d      	beq.n	80076ce <HAL_GPIO_Init+0x212>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a4c      	ldr	r2, [pc, #304]	; (80077e8 <HAL_GPIO_Init+0x32c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d007      	beq.n	80076ca <HAL_GPIO_Init+0x20e>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a4b      	ldr	r2, [pc, #300]	; (80077ec <HAL_GPIO_Init+0x330>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d101      	bne.n	80076c6 <HAL_GPIO_Init+0x20a>
 80076c2:	2307      	movs	r3, #7
 80076c4:	e00e      	b.n	80076e4 <HAL_GPIO_Init+0x228>
 80076c6:	2308      	movs	r3, #8
 80076c8:	e00c      	b.n	80076e4 <HAL_GPIO_Init+0x228>
 80076ca:	2306      	movs	r3, #6
 80076cc:	e00a      	b.n	80076e4 <HAL_GPIO_Init+0x228>
 80076ce:	2305      	movs	r3, #5
 80076d0:	e008      	b.n	80076e4 <HAL_GPIO_Init+0x228>
 80076d2:	2304      	movs	r3, #4
 80076d4:	e006      	b.n	80076e4 <HAL_GPIO_Init+0x228>
 80076d6:	2303      	movs	r3, #3
 80076d8:	e004      	b.n	80076e4 <HAL_GPIO_Init+0x228>
 80076da:	2302      	movs	r3, #2
 80076dc:	e002      	b.n	80076e4 <HAL_GPIO_Init+0x228>
 80076de:	2301      	movs	r3, #1
 80076e0:	e000      	b.n	80076e4 <HAL_GPIO_Init+0x228>
 80076e2:	2300      	movs	r3, #0
 80076e4:	69fa      	ldr	r2, [r7, #28]
 80076e6:	f002 0203 	and.w	r2, r2, #3
 80076ea:	0092      	lsls	r2, r2, #2
 80076ec:	4093      	lsls	r3, r2
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076f4:	4935      	ldr	r1, [pc, #212]	; (80077cc <HAL_GPIO_Init+0x310>)
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	089b      	lsrs	r3, r3, #2
 80076fa:	3302      	adds	r3, #2
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007702:	4b3b      	ldr	r3, [pc, #236]	; (80077f0 <HAL_GPIO_Init+0x334>)
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	43db      	mvns	r3, r3
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	4013      	ands	r3, r2
 8007710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	4313      	orrs	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007726:	4a32      	ldr	r2, [pc, #200]	; (80077f0 <HAL_GPIO_Init+0x334>)
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800772c:	4b30      	ldr	r3, [pc, #192]	; (80077f0 <HAL_GPIO_Init+0x334>)
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	43db      	mvns	r3, r3
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	4013      	ands	r3, r2
 800773a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	4313      	orrs	r3, r2
 800774e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007750:	4a27      	ldr	r2, [pc, #156]	; (80077f0 <HAL_GPIO_Init+0x334>)
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007756:	4b26      	ldr	r3, [pc, #152]	; (80077f0 <HAL_GPIO_Init+0x334>)
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	43db      	mvns	r3, r3
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	4013      	ands	r3, r2
 8007764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	4313      	orrs	r3, r2
 8007778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800777a:	4a1d      	ldr	r2, [pc, #116]	; (80077f0 <HAL_GPIO_Init+0x334>)
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007780:	4b1b      	ldr	r3, [pc, #108]	; (80077f0 <HAL_GPIO_Init+0x334>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	43db      	mvns	r3, r3
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	4013      	ands	r3, r2
 800778e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800779c:	69ba      	ldr	r2, [r7, #24]
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80077a4:	4a12      	ldr	r2, [pc, #72]	; (80077f0 <HAL_GPIO_Init+0x334>)
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	3301      	adds	r3, #1
 80077ae:	61fb      	str	r3, [r7, #28]
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	2b0f      	cmp	r3, #15
 80077b4:	f67f ae90 	bls.w	80074d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	3724      	adds	r7, #36	; 0x24
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	40023800 	.word	0x40023800
 80077cc:	40013800 	.word	0x40013800
 80077d0:	40020000 	.word	0x40020000
 80077d4:	40020400 	.word	0x40020400
 80077d8:	40020800 	.word	0x40020800
 80077dc:	40020c00 	.word	0x40020c00
 80077e0:	40021000 	.word	0x40021000
 80077e4:	40021400 	.word	0x40021400
 80077e8:	40021800 	.word	0x40021800
 80077ec:	40021c00 	.word	0x40021c00
 80077f0:	40013c00 	.word	0x40013c00

080077f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	807b      	strh	r3, [r7, #2]
 8007800:	4613      	mov	r3, r2
 8007802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007804:	787b      	ldrb	r3, [r7, #1]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800780a:	887a      	ldrh	r2, [r7, #2]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007810:	e003      	b.n	800781a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007812:	887b      	ldrh	r3, [r7, #2]
 8007814:	041a      	lsls	r2, r3, #16
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	619a      	str	r2, [r3, #24]
}
 800781a:	bf00      	nop
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007826:	b480      	push	{r7}
 8007828:	b085      	sub	sp, #20
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	460b      	mov	r3, r1
 8007830:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007838:	887a      	ldrh	r2, [r7, #2]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	4013      	ands	r3, r2
 800783e:	041a      	lsls	r2, r3, #16
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	43d9      	mvns	r1, r3
 8007844:	887b      	ldrh	r3, [r7, #2]
 8007846:	400b      	ands	r3, r1
 8007848:	431a      	orrs	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	619a      	str	r2, [r3, #24]
}
 800784e:	bf00      	nop
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
	...

0800785c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e12b      	b.n	8007ac6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d106      	bne.n	8007888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff f86c 	bl	8006960 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2224      	movs	r2, #36	; 0x24
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f022 0201 	bic.w	r2, r2, #1
 800789e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80078c0:	f002 ff7e 	bl	800a7c0 <HAL_RCC_GetPCLK1Freq>
 80078c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	4a81      	ldr	r2, [pc, #516]	; (8007ad0 <HAL_I2C_Init+0x274>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d807      	bhi.n	80078e0 <HAL_I2C_Init+0x84>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4a80      	ldr	r2, [pc, #512]	; (8007ad4 <HAL_I2C_Init+0x278>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	bf94      	ite	ls
 80078d8:	2301      	movls	r3, #1
 80078da:	2300      	movhi	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	e006      	b.n	80078ee <HAL_I2C_Init+0x92>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4a7d      	ldr	r2, [pc, #500]	; (8007ad8 <HAL_I2C_Init+0x27c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	bf94      	ite	ls
 80078e8:	2301      	movls	r3, #1
 80078ea:	2300      	movhi	r3, #0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e0e7      	b.n	8007ac6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4a78      	ldr	r2, [pc, #480]	; (8007adc <HAL_I2C_Init+0x280>)
 80078fa:	fba2 2303 	umull	r2, r3, r2, r3
 80078fe:	0c9b      	lsrs	r3, r3, #18
 8007900:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	430a      	orrs	r2, r1
 8007914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	4a6a      	ldr	r2, [pc, #424]	; (8007ad0 <HAL_I2C_Init+0x274>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d802      	bhi.n	8007930 <HAL_I2C_Init+0xd4>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	3301      	adds	r3, #1
 800792e:	e009      	b.n	8007944 <HAL_I2C_Init+0xe8>
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007936:	fb02 f303 	mul.w	r3, r2, r3
 800793a:	4a69      	ldr	r2, [pc, #420]	; (8007ae0 <HAL_I2C_Init+0x284>)
 800793c:	fba2 2303 	umull	r2, r3, r2, r3
 8007940:	099b      	lsrs	r3, r3, #6
 8007942:	3301      	adds	r3, #1
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	6812      	ldr	r2, [r2, #0]
 8007948:	430b      	orrs	r3, r1
 800794a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007956:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	495c      	ldr	r1, [pc, #368]	; (8007ad0 <HAL_I2C_Init+0x274>)
 8007960:	428b      	cmp	r3, r1
 8007962:	d819      	bhi.n	8007998 <HAL_I2C_Init+0x13c>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	1e59      	subs	r1, r3, #1
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007972:	1c59      	adds	r1, r3, #1
 8007974:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007978:	400b      	ands	r3, r1
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <HAL_I2C_Init+0x138>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	1e59      	subs	r1, r3, #1
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	fbb1 f3f3 	udiv	r3, r1, r3
 800798c:	3301      	adds	r3, #1
 800798e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007992:	e051      	b.n	8007a38 <HAL_I2C_Init+0x1dc>
 8007994:	2304      	movs	r3, #4
 8007996:	e04f      	b.n	8007a38 <HAL_I2C_Init+0x1dc>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d111      	bne.n	80079c4 <HAL_I2C_Init+0x168>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	1e58      	subs	r0, r3, #1
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6859      	ldr	r1, [r3, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	440b      	add	r3, r1
 80079ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80079b2:	3301      	adds	r3, #1
 80079b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	bf0c      	ite	eq
 80079bc:	2301      	moveq	r3, #1
 80079be:	2300      	movne	r3, #0
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	e012      	b.n	80079ea <HAL_I2C_Init+0x18e>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	1e58      	subs	r0, r3, #1
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6859      	ldr	r1, [r3, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	440b      	add	r3, r1
 80079d2:	0099      	lsls	r1, r3, #2
 80079d4:	440b      	add	r3, r1
 80079d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80079da:	3301      	adds	r3, #1
 80079dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	bf0c      	ite	eq
 80079e4:	2301      	moveq	r3, #1
 80079e6:	2300      	movne	r3, #0
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <HAL_I2C_Init+0x196>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e022      	b.n	8007a38 <HAL_I2C_Init+0x1dc>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10e      	bne.n	8007a18 <HAL_I2C_Init+0x1bc>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	1e58      	subs	r0, r3, #1
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6859      	ldr	r1, [r3, #4]
 8007a02:	460b      	mov	r3, r1
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	440b      	add	r3, r1
 8007a08:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a16:	e00f      	b.n	8007a38 <HAL_I2C_Init+0x1dc>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	1e58      	subs	r0, r3, #1
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6859      	ldr	r1, [r3, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	440b      	add	r3, r1
 8007a26:	0099      	lsls	r1, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a2e:	3301      	adds	r3, #1
 8007a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a38:	6879      	ldr	r1, [r7, #4]
 8007a3a:	6809      	ldr	r1, [r1, #0]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	69da      	ldr	r2, [r3, #28]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	431a      	orrs	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007a66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	6911      	ldr	r1, [r2, #16]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	68d2      	ldr	r2, [r2, #12]
 8007a72:	4311      	orrs	r1, r2
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6812      	ldr	r2, [r2, #0]
 8007a78:	430b      	orrs	r3, r1
 8007a7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	695a      	ldr	r2, [r3, #20]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	430a      	orrs	r2, r1
 8007a96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 0201 	orr.w	r2, r2, #1
 8007aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	000186a0 	.word	0x000186a0
 8007ad4:	001e847f 	.word	0x001e847f
 8007ad8:	003d08ff 	.word	0x003d08ff
 8007adc:	431bde83 	.word	0x431bde83
 8007ae0:	10624dd3 	.word	0x10624dd3

08007ae4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	607a      	str	r2, [r7, #4]
 8007aee:	461a      	mov	r2, r3
 8007af0:	460b      	mov	r3, r1
 8007af2:	817b      	strh	r3, [r7, #10]
 8007af4:	4613      	mov	r3, r2
 8007af6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007af8:	f7ff fafe 	bl	80070f8 <HAL_GetTick>
 8007afc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b20      	cmp	r3, #32
 8007b08:	f040 80e0 	bne.w	8007ccc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	2319      	movs	r3, #25
 8007b12:	2201      	movs	r2, #1
 8007b14:	4970      	ldr	r1, [pc, #448]	; (8007cd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f001 ffd0 	bl	8009abc <I2C_WaitOnFlagUntilTimeout>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007b22:	2302      	movs	r3, #2
 8007b24:	e0d3      	b.n	8007cce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d101      	bne.n	8007b34 <HAL_I2C_Master_Transmit+0x50>
 8007b30:	2302      	movs	r3, #2
 8007b32:	e0cc      	b.n	8007cce <HAL_I2C_Master_Transmit+0x1ea>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d007      	beq.n	8007b5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f042 0201 	orr.w	r2, r2, #1
 8007b58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2221      	movs	r2, #33	; 0x21
 8007b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2210      	movs	r2, #16
 8007b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	893a      	ldrh	r2, [r7, #8]
 8007b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4a50      	ldr	r2, [pc, #320]	; (8007cdc <HAL_I2C_Master_Transmit+0x1f8>)
 8007b9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007b9c:	8979      	ldrh	r1, [r7, #10]
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	6a3a      	ldr	r2, [r7, #32]
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f001 fd92 	bl	80096cc <I2C_MasterRequestWrite>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e08d      	b.n	8007cce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	613b      	str	r3, [r7, #16]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	613b      	str	r3, [r7, #16]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	613b      	str	r3, [r7, #16]
 8007bc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007bc8:	e066      	b.n	8007c98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	6a39      	ldr	r1, [r7, #32]
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f002 f84a 	bl	8009c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00d      	beq.n	8007bf6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	2b04      	cmp	r3, #4
 8007be0:	d107      	bne.n	8007bf2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e06b      	b.n	8007cce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	781a      	ldrb	r2, [r3, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	3b01      	subs	r3, #1
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b04      	cmp	r3, #4
 8007c32:	d11b      	bne.n	8007c6c <HAL_I2C_Master_Transmit+0x188>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d017      	beq.n	8007c6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c40:	781a      	ldrb	r2, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c64:	3b01      	subs	r3, #1
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	6a39      	ldr	r1, [r7, #32]
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f002 f83a 	bl	8009cea <I2C_WaitOnBTFFlagUntilTimeout>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00d      	beq.n	8007c98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c80:	2b04      	cmp	r3, #4
 8007c82:	d107      	bne.n	8007c94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e01a      	b.n	8007cce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d194      	bne.n	8007bca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	e000      	b.n	8007cce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007ccc:	2302      	movs	r3, #2
  }
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	00100002 	.word	0x00100002
 8007cdc:	ffff0000 	.word	0xffff0000

08007ce0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08c      	sub	sp, #48	; 0x30
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	607a      	str	r2, [r7, #4]
 8007cea:	461a      	mov	r2, r3
 8007cec:	460b      	mov	r3, r1
 8007cee:	817b      	strh	r3, [r7, #10]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007cf4:	f7ff fa00 	bl	80070f8 <HAL_GetTick>
 8007cf8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b20      	cmp	r3, #32
 8007d04:	f040 820b 	bne.w	800811e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	2319      	movs	r3, #25
 8007d0e:	2201      	movs	r2, #1
 8007d10:	497c      	ldr	r1, [pc, #496]	; (8007f04 <HAL_I2C_Master_Receive+0x224>)
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f001 fed2 	bl	8009abc <I2C_WaitOnFlagUntilTimeout>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e1fe      	b.n	8008120 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d101      	bne.n	8007d30 <HAL_I2C_Master_Receive+0x50>
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	e1f7      	b.n	8008120 <HAL_I2C_Master_Receive+0x440>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d007      	beq.n	8007d56 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f042 0201 	orr.w	r2, r2, #1
 8007d54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2222      	movs	r2, #34	; 0x22
 8007d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2210      	movs	r2, #16
 8007d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	893a      	ldrh	r2, [r7, #8]
 8007d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4a5c      	ldr	r2, [pc, #368]	; (8007f08 <HAL_I2C_Master_Receive+0x228>)
 8007d96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007d98:	8979      	ldrh	r1, [r7, #10]
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f001 fd16 	bl	80097d0 <I2C_MasterRequestRead>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e1b8      	b.n	8008120 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d113      	bne.n	8007dde <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007db6:	2300      	movs	r3, #0
 8007db8:	623b      	str	r3, [r7, #32]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	623b      	str	r3, [r7, #32]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	623b      	str	r3, [r7, #32]
 8007dca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	e18c      	b.n	80080f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d11b      	bne.n	8007e1e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007df4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007df6:	2300      	movs	r3, #0
 8007df8:	61fb      	str	r3, [r7, #28]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	695b      	ldr	r3, [r3, #20]
 8007e00:	61fb      	str	r3, [r7, #28]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	61fb      	str	r3, [r7, #28]
 8007e0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	e16c      	b.n	80080f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d11b      	bne.n	8007e5e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e46:	2300      	movs	r3, #0
 8007e48:	61bb      	str	r3, [r7, #24]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	61bb      	str	r3, [r7, #24]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	61bb      	str	r3, [r7, #24]
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	e14c      	b.n	80080f8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	617b      	str	r3, [r7, #20]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	617b      	str	r3, [r7, #20]
 8007e82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007e84:	e138      	b.n	80080f8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	f200 80f1 	bhi.w	8008072 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d123      	bne.n	8007ee0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f001 ff97 	bl	8009dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e139      	b.n	8008120 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	691a      	ldr	r2, [r3, #16]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	b2d2      	uxtb	r2, r2
 8007eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ede:	e10b      	b.n	80080f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d14e      	bne.n	8007f86 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eee:	2200      	movs	r2, #0
 8007ef0:	4906      	ldr	r1, [pc, #24]	; (8007f0c <HAL_I2C_Master_Receive+0x22c>)
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f001 fde2 	bl	8009abc <I2C_WaitOnFlagUntilTimeout>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d008      	beq.n	8007f10 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e10e      	b.n	8008120 <HAL_I2C_Master_Receive+0x440>
 8007f02:	bf00      	nop
 8007f04:	00100002 	.word	0x00100002
 8007f08:	ffff0000 	.word	0xffff0000
 8007f0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	691a      	ldr	r2, [r3, #16]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	691a      	ldr	r2, [r3, #16]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	b2d2      	uxtb	r2, r2
 8007f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f84:	e0b8      	b.n	80080f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	4966      	ldr	r1, [pc, #408]	; (8008128 <HAL_I2C_Master_Receive+0x448>)
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f001 fd93 	bl	8009abc <I2C_WaitOnFlagUntilTimeout>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e0bf      	b.n	8008120 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	691a      	ldr	r2, [r3, #16]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fba:	b2d2      	uxtb	r2, r2
 8007fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc2:	1c5a      	adds	r2, r3, #1
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	2200      	movs	r2, #0
 8007fea:	494f      	ldr	r1, [pc, #316]	; (8008128 <HAL_I2C_Master_Receive+0x448>)
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f001 fd65 	bl	8009abc <I2C_WaitOnFlagUntilTimeout>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e091      	b.n	8008120 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800800a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	691a      	ldr	r2, [r3, #16]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008016:	b2d2      	uxtb	r2, r2
 8008018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008028:	3b01      	subs	r3, #1
 800802a:	b29a      	uxth	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008034:	b29b      	uxth	r3, r3
 8008036:	3b01      	subs	r3, #1
 8008038:	b29a      	uxth	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	b2d2      	uxtb	r2, r2
 800804a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800805a:	3b01      	subs	r3, #1
 800805c:	b29a      	uxth	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008066:	b29b      	uxth	r3, r3
 8008068:	3b01      	subs	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008070:	e042      	b.n	80080f8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008074:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f001 feaa 	bl	8009dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e04c      	b.n	8008120 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	691a      	ldr	r2, [r3, #16]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	b2d2      	uxtb	r2, r2
 8008092:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080a2:	3b01      	subs	r3, #1
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	3b01      	subs	r3, #1
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	f003 0304 	and.w	r3, r3, #4
 80080c2:	2b04      	cmp	r3, #4
 80080c4:	d118      	bne.n	80080f8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	691a      	ldr	r2, [r3, #16]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	b2d2      	uxtb	r2, r2
 80080d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e2:	3b01      	subs	r3, #1
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	3b01      	subs	r3, #1
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f47f aec2 	bne.w	8007e86 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2220      	movs	r2, #32
 8008106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	e000      	b.n	8008120 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800811e:	2302      	movs	r3, #2
  }
}
 8008120:	4618      	mov	r0, r3
 8008122:	3728      	adds	r7, #40	; 0x28
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	00010004 	.word	0x00010004

0800812c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008134:	2300      	movs	r3, #0
 8008136:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800814c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008154:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008156:	7bfb      	ldrb	r3, [r7, #15]
 8008158:	2b10      	cmp	r3, #16
 800815a:	d003      	beq.n	8008164 <HAL_I2C_EV_IRQHandler+0x38>
 800815c:	7bfb      	ldrb	r3, [r7, #15]
 800815e:	2b40      	cmp	r3, #64	; 0x40
 8008160:	f040 80c1 	bne.w	80082e6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10d      	bne.n	800819a <HAL_I2C_EV_IRQHandler+0x6e>
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008184:	d003      	beq.n	800818e <HAL_I2C_EV_IRQHandler+0x62>
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800818c:	d101      	bne.n	8008192 <HAL_I2C_EV_IRQHandler+0x66>
 800818e:	2301      	movs	r3, #1
 8008190:	e000      	b.n	8008194 <HAL_I2C_EV_IRQHandler+0x68>
 8008192:	2300      	movs	r3, #0
 8008194:	2b01      	cmp	r3, #1
 8008196:	f000 8132 	beq.w	80083fe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00c      	beq.n	80081be <HAL_I2C_EV_IRQHandler+0x92>
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	0a5b      	lsrs	r3, r3, #9
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d006      	beq.n	80081be <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 fe92 	bl	8009eda <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fcdc 	bl	8008b74 <I2C_Master_SB>
 80081bc:	e092      	b.n	80082e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	08db      	lsrs	r3, r3, #3
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d009      	beq.n	80081de <HAL_I2C_EV_IRQHandler+0xb2>
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	0a5b      	lsrs	r3, r3, #9
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fd52 	bl	8008c80 <I2C_Master_ADD10>
 80081dc:	e082      	b.n	80082e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	085b      	lsrs	r3, r3, #1
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d009      	beq.n	80081fe <HAL_I2C_EV_IRQHandler+0xd2>
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	0a5b      	lsrs	r3, r3, #9
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fd6c 	bl	8008cd4 <I2C_Master_ADDR>
 80081fc:	e072      	b.n	80082e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	089b      	lsrs	r3, r3, #2
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b00      	cmp	r3, #0
 8008208:	d03b      	beq.n	8008282 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008218:	f000 80f3 	beq.w	8008402 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	09db      	lsrs	r3, r3, #7
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00f      	beq.n	8008248 <HAL_I2C_EV_IRQHandler+0x11c>
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	0a9b      	lsrs	r3, r3, #10
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	2b00      	cmp	r3, #0
 8008232:	d009      	beq.n	8008248 <HAL_I2C_EV_IRQHandler+0x11c>
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	089b      	lsrs	r3, r3, #2
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b00      	cmp	r3, #0
 800823e:	d103      	bne.n	8008248 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f94c 	bl	80084de <I2C_MasterTransmit_TXE>
 8008246:	e04d      	b.n	80082e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	089b      	lsrs	r3, r3, #2
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 80d6 	beq.w	8008402 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	0a5b      	lsrs	r3, r3, #9
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 80cf 	beq.w	8008402 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	2b21      	cmp	r3, #33	; 0x21
 8008268:	d103      	bne.n	8008272 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f9d3 	bl	8008616 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008270:	e0c7      	b.n	8008402 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008272:	7bfb      	ldrb	r3, [r7, #15]
 8008274:	2b40      	cmp	r3, #64	; 0x40
 8008276:	f040 80c4 	bne.w	8008402 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fa41 	bl	8008702 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008280:	e0bf      	b.n	8008402 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800828c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008290:	f000 80b7 	beq.w	8008402 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	099b      	lsrs	r3, r3, #6
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00f      	beq.n	80082c0 <HAL_I2C_EV_IRQHandler+0x194>
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	0a9b      	lsrs	r3, r3, #10
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d009      	beq.n	80082c0 <HAL_I2C_EV_IRQHandler+0x194>
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	089b      	lsrs	r3, r3, #2
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d103      	bne.n	80082c0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fab6 	bl	800882a <I2C_MasterReceive_RXNE>
 80082be:	e011      	b.n	80082e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	089b      	lsrs	r3, r3, #2
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 809a 	beq.w	8008402 <HAL_I2C_EV_IRQHandler+0x2d6>
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	0a5b      	lsrs	r3, r3, #9
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 8093 	beq.w	8008402 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fb5f 	bl	80089a0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082e2:	e08e      	b.n	8008402 <HAL_I2C_EV_IRQHandler+0x2d6>
 80082e4:	e08d      	b.n	8008402 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d004      	beq.n	80082f8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	695b      	ldr	r3, [r3, #20]
 80082f4:	61fb      	str	r3, [r7, #28]
 80082f6:	e007      	b.n	8008308 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	085b      	lsrs	r3, r3, #1
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d012      	beq.n	800833a <HAL_I2C_EV_IRQHandler+0x20e>
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	0a5b      	lsrs	r3, r3, #9
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00c      	beq.n	800833a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008330:	69b9      	ldr	r1, [r7, #24]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 ff1d 	bl	8009172 <I2C_Slave_ADDR>
 8008338:	e066      	b.n	8008408 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	091b      	lsrs	r3, r3, #4
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	d009      	beq.n	800835a <HAL_I2C_EV_IRQHandler+0x22e>
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	0a5b      	lsrs	r3, r3, #9
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 ff58 	bl	8009208 <I2C_Slave_STOPF>
 8008358:	e056      	b.n	8008408 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800835a:	7bbb      	ldrb	r3, [r7, #14]
 800835c:	2b21      	cmp	r3, #33	; 0x21
 800835e:	d002      	beq.n	8008366 <HAL_I2C_EV_IRQHandler+0x23a>
 8008360:	7bbb      	ldrb	r3, [r7, #14]
 8008362:	2b29      	cmp	r3, #41	; 0x29
 8008364:	d125      	bne.n	80083b2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	09db      	lsrs	r3, r3, #7
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00f      	beq.n	8008392 <HAL_I2C_EV_IRQHandler+0x266>
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	0a9b      	lsrs	r3, r3, #10
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b00      	cmp	r3, #0
 800837c:	d009      	beq.n	8008392 <HAL_I2C_EV_IRQHandler+0x266>
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	089b      	lsrs	r3, r3, #2
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d103      	bne.n	8008392 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fe33 	bl	8008ff6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008390:	e039      	b.n	8008406 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	089b      	lsrs	r3, r3, #2
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b00      	cmp	r3, #0
 800839c:	d033      	beq.n	8008406 <HAL_I2C_EV_IRQHandler+0x2da>
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	0a5b      	lsrs	r3, r3, #9
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d02d      	beq.n	8008406 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fe60 	bl	8009070 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80083b0:	e029      	b.n	8008406 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	099b      	lsrs	r3, r3, #6
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00f      	beq.n	80083de <HAL_I2C_EV_IRQHandler+0x2b2>
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	0a9b      	lsrs	r3, r3, #10
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d009      	beq.n	80083de <HAL_I2C_EV_IRQHandler+0x2b2>
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	089b      	lsrs	r3, r3, #2
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d103      	bne.n	80083de <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fe6b 	bl	80090b2 <I2C_SlaveReceive_RXNE>
 80083dc:	e014      	b.n	8008408 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	089b      	lsrs	r3, r3, #2
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00e      	beq.n	8008408 <HAL_I2C_EV_IRQHandler+0x2dc>
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	0a5b      	lsrs	r3, r3, #9
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d008      	beq.n	8008408 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fe99 	bl	800912e <I2C_SlaveReceive_BTF>
 80083fc:	e004      	b.n	8008408 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80083fe:	bf00      	nop
 8008400:	e002      	b.n	8008408 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008402:	bf00      	nop
 8008404:	e000      	b.n	8008408 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008406:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008408:	3720      	adds	r7, #32
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008416:	bf00      	nop
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800842a:	bf00      	nop
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008452:	bf00      	nop
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	460b      	mov	r3, r1
 8008468:	70fb      	strb	r3, [r7, #3]
 800846a:	4613      	mov	r3, r2
 800846c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800846e:	bf00      	nop
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80084aa:	bf00      	nop
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80084be:	bf00      	nop
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80084d2:	bf00      	nop
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084f4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008500:	2b00      	cmp	r3, #0
 8008502:	d150      	bne.n	80085a6 <I2C_MasterTransmit_TXE+0xc8>
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	2b21      	cmp	r3, #33	; 0x21
 8008508:	d14d      	bne.n	80085a6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2b08      	cmp	r3, #8
 800850e:	d01d      	beq.n	800854c <I2C_MasterTransmit_TXE+0x6e>
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2b20      	cmp	r3, #32
 8008514:	d01a      	beq.n	800854c <I2C_MasterTransmit_TXE+0x6e>
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800851c:	d016      	beq.n	800854c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800852c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2211      	movs	r2, #17
 8008532:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2220      	movs	r2, #32
 8008540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7ff ff62 	bl	800840e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800854a:	e060      	b.n	800860e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800855a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800856a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2220      	movs	r2, #32
 8008576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b40      	cmp	r3, #64	; 0x40
 8008584:	d107      	bne.n	8008596 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7ff ff7d 	bl	800848e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008594:	e03b      	b.n	800860e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff ff35 	bl	800840e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80085a4:	e033      	b.n	800860e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	2b21      	cmp	r3, #33	; 0x21
 80085aa:	d005      	beq.n	80085b8 <I2C_MasterTransmit_TXE+0xda>
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
 80085ae:	2b40      	cmp	r3, #64	; 0x40
 80085b0:	d12d      	bne.n	800860e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	2b22      	cmp	r3, #34	; 0x22
 80085b6:	d12a      	bne.n	800860e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085bc:	b29b      	uxth	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d108      	bne.n	80085d4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085d0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80085d2:	e01c      	b.n	800860e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b40      	cmp	r3, #64	; 0x40
 80085de:	d103      	bne.n	80085e8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f88e 	bl	8008702 <I2C_MemoryTransmit_TXE_BTF>
}
 80085e6:	e012      	b.n	800860e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	781a      	ldrb	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008602:	b29b      	uxth	r3, r3
 8008604:	3b01      	subs	r3, #1
 8008606:	b29a      	uxth	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800860c:	e7ff      	b.n	800860e <I2C_MasterTransmit_TXE+0x130>
 800860e:	bf00      	nop
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008622:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b21      	cmp	r3, #33	; 0x21
 800862e:	d164      	bne.n	80086fa <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008634:	b29b      	uxth	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d012      	beq.n	8008660 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863e:	781a      	ldrb	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864a:	1c5a      	adds	r2, r3, #1
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008654:	b29b      	uxth	r3, r3
 8008656:	3b01      	subs	r3, #1
 8008658:	b29a      	uxth	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800865e:	e04c      	b.n	80086fa <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2b08      	cmp	r3, #8
 8008664:	d01d      	beq.n	80086a2 <I2C_MasterTransmit_BTF+0x8c>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2b20      	cmp	r3, #32
 800866a:	d01a      	beq.n	80086a2 <I2C_MasterTransmit_BTF+0x8c>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008672:	d016      	beq.n	80086a2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008682:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2211      	movs	r2, #17
 8008688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2220      	movs	r2, #32
 8008696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff feb7 	bl	800840e <HAL_I2C_MasterTxCpltCallback>
}
 80086a0:	e02b      	b.n	80086fa <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80086b0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086c0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b40      	cmp	r3, #64	; 0x40
 80086da:	d107      	bne.n	80086ec <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7ff fed2 	bl	800848e <HAL_I2C_MemTxCpltCallback>
}
 80086ea:	e006      	b.n	80086fa <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7ff fe8a 	bl	800840e <HAL_I2C_MasterTxCpltCallback>
}
 80086fa:	bf00      	nop
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008710:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008716:	2b00      	cmp	r3, #0
 8008718:	d11d      	bne.n	8008756 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800871e:	2b01      	cmp	r3, #1
 8008720:	d10b      	bne.n	800873a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008726:	b2da      	uxtb	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008732:	1c9a      	adds	r2, r3, #2
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8008738:	e073      	b.n	8008822 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800873e:	b29b      	uxth	r3, r3
 8008740:	121b      	asrs	r3, r3, #8
 8008742:	b2da      	uxtb	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800874e:	1c5a      	adds	r2, r3, #1
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008754:	e065      	b.n	8008822 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800875a:	2b01      	cmp	r3, #1
 800875c:	d10b      	bne.n	8008776 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008762:	b2da      	uxtb	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800876e:	1c5a      	adds	r2, r3, #1
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008774:	e055      	b.n	8008822 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800877a:	2b02      	cmp	r3, #2
 800877c:	d151      	bne.n	8008822 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800877e:	7bfb      	ldrb	r3, [r7, #15]
 8008780:	2b22      	cmp	r3, #34	; 0x22
 8008782:	d10d      	bne.n	80087a0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008792:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008798:	1c5a      	adds	r2, r3, #1
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800879e:	e040      	b.n	8008822 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d015      	beq.n	80087d6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
 80087ac:	2b21      	cmp	r3, #33	; 0x21
 80087ae:	d112      	bne.n	80087d6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	781a      	ldrb	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	3b01      	subs	r3, #1
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80087d4:	e025      	b.n	8008822 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087da:	b29b      	uxth	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d120      	bne.n	8008822 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
 80087e2:	2b21      	cmp	r3, #33	; 0x21
 80087e4:	d11d      	bne.n	8008822 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80087f4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008804:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2220      	movs	r2, #32
 8008810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff fe36 	bl	800848e <HAL_I2C_MemTxCpltCallback>
}
 8008822:	bf00      	nop
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b22      	cmp	r3, #34	; 0x22
 800883c:	f040 80ac 	bne.w	8008998 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008844:	b29b      	uxth	r3, r3
 8008846:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b03      	cmp	r3, #3
 800884c:	d921      	bls.n	8008892 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	691a      	ldr	r2, [r3, #16]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	b2d2      	uxtb	r2, r2
 800885a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800886a:	b29b      	uxth	r3, r3
 800886c:	3b01      	subs	r3, #1
 800886e:	b29a      	uxth	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008878:	b29b      	uxth	r3, r3
 800887a:	2b03      	cmp	r3, #3
 800887c:	f040 808c 	bne.w	8008998 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800888e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008890:	e082      	b.n	8008998 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008896:	2b02      	cmp	r3, #2
 8008898:	d075      	beq.n	8008986 <I2C_MasterReceive_RXNE+0x15c>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d002      	beq.n	80088a6 <I2C_MasterReceive_RXNE+0x7c>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d16f      	bne.n	8008986 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f001 fa60 	bl	8009d6c <I2C_WaitOnSTOPRequestThroughIT>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d142      	bne.n	8008938 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088c0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80088d0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	691a      	ldr	r2, [r3, #16]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	b2d2      	uxtb	r2, r2
 80088de:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	1c5a      	adds	r2, r3, #1
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	3b01      	subs	r3, #1
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2220      	movs	r2, #32
 80088fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b40      	cmp	r3, #64	; 0x40
 800890a:	d10a      	bne.n	8008922 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff fdc1 	bl	80084a2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008920:	e03a      	b.n	8008998 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2212      	movs	r2, #18
 800892e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7ff fd76 	bl	8008422 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008936:	e02f      	b.n	8008998 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685a      	ldr	r2, [r3, #4]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008946:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	691a      	ldr	r2, [r3, #16]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	b2d2      	uxtb	r2, r2
 8008954:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008964:	b29b      	uxth	r3, r3
 8008966:	3b01      	subs	r3, #1
 8008968:	b29a      	uxth	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2220      	movs	r2, #32
 8008972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff fd99 	bl	80084b6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008984:	e008      	b.n	8008998 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008994:	605a      	str	r2, [r3, #4]
}
 8008996:	e7ff      	b.n	8008998 <I2C_MasterReceive_RXNE+0x16e>
 8008998:	bf00      	nop
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	d11b      	bne.n	80089f0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089c6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	691a      	ldr	r2, [r3, #16]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d2:	b2d2      	uxtb	r2, r2
 80089d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	3b01      	subs	r3, #1
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80089ee:	e0bd      	b.n	8008b6c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	d129      	bne.n	8008a4e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a08:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	d00a      	beq.n	8008a26 <I2C_MasterReceive_BTF+0x86>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d007      	beq.n	8008a26 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a24:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	691a      	ldr	r2, [r3, #16]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	b2d2      	uxtb	r2, r2
 8008a32:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	3b01      	subs	r3, #1
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008a4c:	e08e      	b.n	8008b6c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d176      	bne.n	8008b46 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d002      	beq.n	8008a64 <I2C_MasterReceive_BTF+0xc4>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2b10      	cmp	r3, #16
 8008a62:	d108      	bne.n	8008a76 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	e019      	b.n	8008aaa <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b04      	cmp	r3, #4
 8008a7a:	d002      	beq.n	8008a82 <I2C_MasterReceive_BTF+0xe2>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d108      	bne.n	8008a94 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	e00a      	b.n	8008aaa <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b10      	cmp	r3, #16
 8008a98:	d007      	beq.n	8008aaa <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008aa8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	691a      	ldr	r2, [r3, #16]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	b2d2      	uxtb	r2, r2
 8008ab6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abc:	1c5a      	adds	r2, r3, #1
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691a      	ldr	r2, [r3, #16]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ada:	b2d2      	uxtb	r2, r2
 8008adc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae2:	1c5a      	adds	r2, r3, #1
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	3b01      	subs	r3, #1
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008b04:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b40      	cmp	r3, #64	; 0x40
 8008b18:	d10a      	bne.n	8008b30 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f7ff fcba 	bl	80084a2 <HAL_I2C_MemRxCpltCallback>
}
 8008b2e:	e01d      	b.n	8008b6c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2212      	movs	r2, #18
 8008b3c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7ff fc6f 	bl	8008422 <HAL_I2C_MasterRxCpltCallback>
}
 8008b44:	e012      	b.n	8008b6c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	691a      	ldr	r2, [r3, #16]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	b2d2      	uxtb	r2, r2
 8008b52:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	1c5a      	adds	r2, r3, #1
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	3b01      	subs	r3, #1
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008b6c:	bf00      	nop
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b40      	cmp	r3, #64	; 0x40
 8008b86:	d117      	bne.n	8008bb8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d109      	bne.n	8008ba4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	461a      	mov	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008ba0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008ba2:	e067      	b.n	8008c74 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	f043 0301 	orr.w	r3, r3, #1
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	611a      	str	r2, [r3, #16]
}
 8008bb6:	e05d      	b.n	8008c74 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bc0:	d133      	bne.n	8008c2a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b21      	cmp	r3, #33	; 0x21
 8008bcc:	d109      	bne.n	8008be2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008bde:	611a      	str	r2, [r3, #16]
 8008be0:	e008      	b.n	8008bf4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	f043 0301 	orr.w	r3, r3, #1
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d004      	beq.n	8008c06 <I2C_Master_SB+0x92>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d108      	bne.n	8008c18 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d032      	beq.n	8008c74 <I2C_Master_SB+0x100>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d02d      	beq.n	8008c74 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	685a      	ldr	r2, [r3, #4]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c26:	605a      	str	r2, [r3, #4]
}
 8008c28:	e024      	b.n	8008c74 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10e      	bne.n	8008c50 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	11db      	asrs	r3, r3, #7
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	f003 0306 	and.w	r3, r3, #6
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	f063 030f 	orn	r3, r3, #15
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	611a      	str	r2, [r3, #16]
}
 8008c4e:	e011      	b.n	8008c74 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d10d      	bne.n	8008c74 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	11db      	asrs	r3, r3, #7
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	f003 0306 	and.w	r3, r3, #6
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	f063 030e 	orn	r3, r3, #14
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	611a      	str	r2, [r3, #16]
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d004      	beq.n	8008ca6 <I2C_Master_ADD10+0x26>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d108      	bne.n	8008cb8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00c      	beq.n	8008cc8 <I2C_Master_ADD10+0x48>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d007      	beq.n	8008cc8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cc6:	605a      	str	r2, [r3, #4]
  }
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b091      	sub	sp, #68	; 0x44
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ce2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b22      	cmp	r3, #34	; 0x22
 8008cfc:	f040 8169 	bne.w	8008fd2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10f      	bne.n	8008d28 <I2C_Master_ADDR+0x54>
 8008d08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d0c:	2b40      	cmp	r3, #64	; 0x40
 8008d0e:	d10b      	bne.n	8008d28 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d10:	2300      	movs	r3, #0
 8008d12:	633b      	str	r3, [r7, #48]	; 0x30
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	633b      	str	r3, [r7, #48]	; 0x30
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	633b      	str	r3, [r7, #48]	; 0x30
 8008d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d26:	e160      	b.n	8008fea <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d11d      	bne.n	8008d6c <I2C_Master_ADDR+0x98>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d38:	d118      	bne.n	8008d6c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d5e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d64:	1c5a      	adds	r2, r3, #1
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	651a      	str	r2, [r3, #80]	; 0x50
 8008d6a:	e13e      	b.n	8008fea <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d113      	bne.n	8008d9e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d76:	2300      	movs	r3, #0
 8008d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d9a:	601a      	str	r2, [r3, #0]
 8008d9c:	e115      	b.n	8008fca <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	f040 808a 	bne.w	8008ebe <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008db0:	d137      	bne.n	8008e22 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dc0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dd0:	d113      	bne.n	8008dfa <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008de0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008de2:	2300      	movs	r3, #0
 8008de4:	627b      	str	r3, [r7, #36]	; 0x24
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	627b      	str	r3, [r7, #36]	; 0x24
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	e0e7      	b.n	8008fca <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	623b      	str	r3, [r7, #32]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	623b      	str	r3, [r7, #32]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	623b      	str	r3, [r7, #32]
 8008e0e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	e0d3      	b.n	8008fca <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	2b08      	cmp	r3, #8
 8008e26:	d02e      	beq.n	8008e86 <I2C_Master_ADDR+0x1b2>
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	2b20      	cmp	r3, #32
 8008e2c:	d02b      	beq.n	8008e86 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e30:	2b12      	cmp	r3, #18
 8008e32:	d102      	bne.n	8008e3a <I2C_Master_ADDR+0x166>
 8008e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d125      	bne.n	8008e86 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3c:	2b04      	cmp	r3, #4
 8008e3e:	d00e      	beq.n	8008e5e <I2C_Master_ADDR+0x18a>
 8008e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d00b      	beq.n	8008e5e <I2C_Master_ADDR+0x18a>
 8008e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e48:	2b10      	cmp	r3, #16
 8008e4a:	d008      	beq.n	8008e5e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	e007      	b.n	8008e6e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e6c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e6e:	2300      	movs	r3, #0
 8008e70:	61fb      	str	r3, [r7, #28]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	61fb      	str	r3, [r7, #28]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	61fb      	str	r3, [r7, #28]
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	e0a1      	b.n	8008fca <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e94:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e96:	2300      	movs	r3, #0
 8008e98:	61bb      	str	r3, [r7, #24]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	61bb      	str	r3, [r7, #24]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	61bb      	str	r3, [r7, #24]
 8008eaa:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	e085      	b.n	8008fca <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d14d      	bne.n	8008f64 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eca:	2b04      	cmp	r3, #4
 8008ecc:	d016      	beq.n	8008efc <I2C_Master_ADDR+0x228>
 8008ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d013      	beq.n	8008efc <I2C_Master_ADDR+0x228>
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed6:	2b10      	cmp	r3, #16
 8008ed8:	d010      	beq.n	8008efc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ee8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	e007      	b.n	8008f0c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f0a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f1a:	d117      	bne.n	8008f4c <I2C_Master_ADDR+0x278>
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f22:	d00b      	beq.n	8008f3c <I2C_Master_ADDR+0x268>
 8008f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d008      	beq.n	8008f3c <I2C_Master_ADDR+0x268>
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	2b08      	cmp	r3, #8
 8008f2e:	d005      	beq.n	8008f3c <I2C_Master_ADDR+0x268>
 8008f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f32:	2b10      	cmp	r3, #16
 8008f34:	d002      	beq.n	8008f3c <I2C_Master_ADDR+0x268>
 8008f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f38:	2b20      	cmp	r3, #32
 8008f3a:	d107      	bne.n	8008f4c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f4a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	617b      	str	r3, [r7, #20]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	e032      	b.n	8008fca <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f72:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f82:	d117      	bne.n	8008fb4 <I2C_Master_ADDR+0x2e0>
 8008f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f8a:	d00b      	beq.n	8008fa4 <I2C_Master_ADDR+0x2d0>
 8008f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d008      	beq.n	8008fa4 <I2C_Master_ADDR+0x2d0>
 8008f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f94:	2b08      	cmp	r3, #8
 8008f96:	d005      	beq.n	8008fa4 <I2C_Master_ADDR+0x2d0>
 8008f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9a:	2b10      	cmp	r3, #16
 8008f9c:	d002      	beq.n	8008fa4 <I2C_Master_ADDR+0x2d0>
 8008f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa0:	2b20      	cmp	r3, #32
 8008fa2:	d107      	bne.n	8008fb4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	685a      	ldr	r2, [r3, #4]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008fb2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	613b      	str	r3, [r7, #16]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	613b      	str	r3, [r7, #16]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	613b      	str	r3, [r7, #16]
 8008fc8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008fd0:	e00b      	b.n	8008fea <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60fb      	str	r3, [r7, #12]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
}
 8008fe8:	e7ff      	b.n	8008fea <I2C_Master_ADDR+0x316>
 8008fea:	bf00      	nop
 8008fec:	3744      	adds	r7, #68	; 0x44
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009004:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800900a:	b29b      	uxth	r3, r3
 800900c:	2b00      	cmp	r3, #0
 800900e:	d02b      	beq.n	8009068 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009014:	781a      	ldrb	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009020:	1c5a      	adds	r2, r3, #1
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800902a:	b29b      	uxth	r3, r3
 800902c:	3b01      	subs	r3, #1
 800902e:	b29a      	uxth	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009038:	b29b      	uxth	r3, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	d114      	bne.n	8009068 <I2C_SlaveTransmit_TXE+0x72>
 800903e:	7bfb      	ldrb	r3, [r7, #15]
 8009040:	2b29      	cmp	r3, #41	; 0x29
 8009042:	d111      	bne.n	8009068 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009052:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2221      	movs	r2, #33	; 0x21
 8009058:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2228      	movs	r2, #40	; 0x28
 800905e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7ff f9e7 	bl	8008436 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009068:	bf00      	nop
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800907c:	b29b      	uxth	r3, r3
 800907e:	2b00      	cmp	r3, #0
 8009080:	d011      	beq.n	80090a6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009086:	781a      	ldrb	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800909c:	b29b      	uxth	r3, r3
 800909e:	3b01      	subs	r3, #1
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80090a6:	bf00      	nop
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b084      	sub	sp, #16
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d02c      	beq.n	8009126 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	691a      	ldr	r2, [r3, #16]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d6:	b2d2      	uxtb	r2, r2
 80090d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	1c5a      	adds	r2, r3, #1
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	3b01      	subs	r3, #1
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d114      	bne.n	8009126 <I2C_SlaveReceive_RXNE+0x74>
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
 80090fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009100:	d111      	bne.n	8009126 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009110:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2222      	movs	r2, #34	; 0x22
 8009116:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2228      	movs	r2, #40	; 0x28
 800911c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7ff f992 	bl	800844a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009126:	bf00      	nop
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800912e:	b480      	push	{r7}
 8009130:	b083      	sub	sp, #12
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800913a:	b29b      	uxth	r3, r3
 800913c:	2b00      	cmp	r3, #0
 800913e:	d012      	beq.n	8009166 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	691a      	ldr	r2, [r3, #16]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914a:	b2d2      	uxtb	r2, r2
 800914c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009152:	1c5a      	adds	r2, r3, #1
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800915c:	b29b      	uxth	r3, r3
 800915e:	3b01      	subs	r3, #1
 8009160:	b29a      	uxth	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009166:	bf00      	nop
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b084      	sub	sp, #16
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800917c:	2300      	movs	r3, #0
 800917e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009186:	b2db      	uxtb	r3, r3
 8009188:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800918c:	2b28      	cmp	r3, #40	; 0x28
 800918e:	d127      	bne.n	80091e0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800919e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	089b      	lsrs	r3, r3, #2
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d101      	bne.n	80091b0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80091ac:	2301      	movs	r3, #1
 80091ae:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	09db      	lsrs	r3, r3, #7
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d103      	bne.n	80091c4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	81bb      	strh	r3, [r7, #12]
 80091c2:	e002      	b.n	80091ca <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80091d2:	89ba      	ldrh	r2, [r7, #12]
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	4619      	mov	r1, r3
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7ff f940 	bl	800845e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80091de:	e00e      	b.n	80091fe <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091e0:	2300      	movs	r3, #0
 80091e2:	60bb      	str	r3, [r7, #8]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	60bb      	str	r3, [r7, #8]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	60bb      	str	r3, [r7, #8]
 80091f4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80091fe:	bf00      	nop
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009216:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009226:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009228:	2300      	movs	r3, #0
 800922a:	60bb      	str	r3, [r7, #8]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	60bb      	str	r3, [r7, #8]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f042 0201 	orr.w	r2, r2, #1
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009254:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009264:	d172      	bne.n	800934c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	2b22      	cmp	r3, #34	; 0x22
 800926a:	d002      	beq.n	8009272 <I2C_Slave_STOPF+0x6a>
 800926c:	7bfb      	ldrb	r3, [r7, #15]
 800926e:	2b2a      	cmp	r3, #42	; 0x2a
 8009270:	d135      	bne.n	80092de <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	b29a      	uxth	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009284:	b29b      	uxth	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d005      	beq.n	8009296 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928e:	f043 0204 	orr.w	r2, r3, #4
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe f8f7 	bl	800749e <HAL_DMA_GetState>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d049      	beq.n	800934a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ba:	4a69      	ldr	r2, [pc, #420]	; (8009460 <I2C_Slave_STOPF+0x258>)
 80092bc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fe f8c9 	bl	800745a <HAL_DMA_Abort_IT>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d03d      	beq.n	800934a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80092d8:	4610      	mov	r0, r2
 80092da:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80092dc:	e035      	b.n	800934a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d005      	beq.n	8009302 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fa:	f043 0204 	orr.w	r2, r3, #4
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	685a      	ldr	r2, [r3, #4]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009310:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe f8c1 	bl	800749e <HAL_DMA_GetState>
 800931c:	4603      	mov	r3, r0
 800931e:	2b01      	cmp	r3, #1
 8009320:	d014      	beq.n	800934c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009326:	4a4e      	ldr	r2, [pc, #312]	; (8009460 <I2C_Slave_STOPF+0x258>)
 8009328:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800932e:	4618      	mov	r0, r3
 8009330:	f7fe f893 	bl	800745a <HAL_DMA_Abort_IT>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d008      	beq.n	800934c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009344:	4610      	mov	r0, r2
 8009346:	4798      	blx	r3
 8009348:	e000      	b.n	800934c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800934a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009350:	b29b      	uxth	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d03e      	beq.n	80093d4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	695b      	ldr	r3, [r3, #20]
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b04      	cmp	r3, #4
 8009362:	d112      	bne.n	800938a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	691a      	ldr	r2, [r3, #16]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936e:	b2d2      	uxtb	r2, r2
 8009370:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009376:	1c5a      	adds	r2, r3, #1
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009380:	b29b      	uxth	r3, r3
 8009382:	3b01      	subs	r3, #1
 8009384:	b29a      	uxth	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	695b      	ldr	r3, [r3, #20]
 8009390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009394:	2b40      	cmp	r3, #64	; 0x40
 8009396:	d112      	bne.n	80093be <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	691a      	ldr	r2, [r3, #16]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a2:	b2d2      	uxtb	r2, r2
 80093a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093aa:	1c5a      	adds	r2, r3, #1
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	3b01      	subs	r3, #1
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d005      	beq.n	80093d4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093cc:	f043 0204 	orr.w	r2, r3, #4
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d003      	beq.n	80093e4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f843 	bl	8009468 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80093e2:	e039      	b.n	8009458 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80093e4:	7bfb      	ldrb	r3, [r7, #15]
 80093e6:	2b2a      	cmp	r3, #42	; 0x2a
 80093e8:	d109      	bne.n	80093fe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2228      	movs	r2, #40	; 0x28
 80093f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7ff f826 	bl	800844a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b28      	cmp	r3, #40	; 0x28
 8009408:	d111      	bne.n	800942e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a15      	ldr	r2, [pc, #84]	; (8009464 <I2C_Slave_STOPF+0x25c>)
 800940e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2220      	movs	r2, #32
 800941a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f7ff f827 	bl	800847a <HAL_I2C_ListenCpltCallback>
}
 800942c:	e014      	b.n	8009458 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009432:	2b22      	cmp	r3, #34	; 0x22
 8009434:	d002      	beq.n	800943c <I2C_Slave_STOPF+0x234>
 8009436:	7bfb      	ldrb	r3, [r7, #15]
 8009438:	2b22      	cmp	r3, #34	; 0x22
 800943a:	d10d      	bne.n	8009458 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2220      	movs	r2, #32
 8009446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7fe fff9 	bl	800844a <HAL_I2C_SlaveRxCpltCallback>
}
 8009458:	bf00      	nop
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	0800996d 	.word	0x0800996d
 8009464:	ffff0000 	.word	0xffff0000

08009468 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009476:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800947e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	2b10      	cmp	r3, #16
 8009484:	d002      	beq.n	800948c <I2C_ITError+0x24>
 8009486:	7bbb      	ldrb	r3, [r7, #14]
 8009488:	2b40      	cmp	r3, #64	; 0x40
 800948a:	d10a      	bne.n	80094a2 <I2C_ITError+0x3a>
 800948c:	7bfb      	ldrb	r3, [r7, #15]
 800948e:	2b22      	cmp	r3, #34	; 0x22
 8009490:	d107      	bne.n	80094a2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094a0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
 80094a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80094a8:	2b28      	cmp	r3, #40	; 0x28
 80094aa:	d107      	bne.n	80094bc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2228      	movs	r2, #40	; 0x28
 80094b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80094ba:	e015      	b.n	80094e8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094ca:	d00a      	beq.n	80094e2 <I2C_ITError+0x7a>
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
 80094ce:	2b60      	cmp	r3, #96	; 0x60
 80094d0:	d007      	beq.n	80094e2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094f6:	d162      	bne.n	80095be <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009506:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800950c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b01      	cmp	r3, #1
 8009514:	d020      	beq.n	8009558 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800951a:	4a6a      	ldr	r2, [pc, #424]	; (80096c4 <I2C_ITError+0x25c>)
 800951c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009522:	4618      	mov	r0, r3
 8009524:	f7fd ff99 	bl	800745a <HAL_DMA_Abort_IT>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	f000 8089 	beq.w	8009642 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f022 0201 	bic.w	r2, r2, #1
 800953e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2220      	movs	r2, #32
 8009544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800954c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009552:	4610      	mov	r0, r2
 8009554:	4798      	blx	r3
 8009556:	e074      	b.n	8009642 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955c:	4a59      	ldr	r2, [pc, #356]	; (80096c4 <I2C_ITError+0x25c>)
 800955e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	4618      	mov	r0, r3
 8009566:	f7fd ff78 	bl	800745a <HAL_DMA_Abort_IT>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d068      	beq.n	8009642 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800957a:	2b40      	cmp	r3, #64	; 0x40
 800957c:	d10b      	bne.n	8009596 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	691a      	ldr	r2, [r3, #16]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	b2d2      	uxtb	r2, r2
 800958a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f022 0201 	bic.w	r2, r2, #1
 80095a4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2220      	movs	r2, #32
 80095aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80095b8:	4610      	mov	r0, r2
 80095ba:	4798      	blx	r3
 80095bc:	e041      	b.n	8009642 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b60      	cmp	r3, #96	; 0x60
 80095c8:	d125      	bne.n	8009616 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2220      	movs	r2, #32
 80095ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e2:	2b40      	cmp	r3, #64	; 0x40
 80095e4:	d10b      	bne.n	80095fe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	691a      	ldr	r2, [r3, #16]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f0:	b2d2      	uxtb	r2, r2
 80095f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	1c5a      	adds	r2, r3, #1
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f022 0201 	bic.w	r2, r2, #1
 800960c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7fe ff5b 	bl	80084ca <HAL_I2C_AbortCpltCallback>
 8009614:	e015      	b.n	8009642 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009620:	2b40      	cmp	r3, #64	; 0x40
 8009622:	d10b      	bne.n	800963c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	691a      	ldr	r2, [r3, #16]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962e:	b2d2      	uxtb	r2, r2
 8009630:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7fe ff3a 	bl	80084b6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009646:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10e      	bne.n	8009670 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009658:	2b00      	cmp	r3, #0
 800965a:	d109      	bne.n	8009670 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009662:	2b00      	cmp	r3, #0
 8009664:	d104      	bne.n	8009670 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800966c:	2b00      	cmp	r3, #0
 800966e:	d007      	beq.n	8009680 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800967e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009686:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968c:	f003 0304 	and.w	r3, r3, #4
 8009690:	2b04      	cmp	r3, #4
 8009692:	d113      	bne.n	80096bc <I2C_ITError+0x254>
 8009694:	7bfb      	ldrb	r3, [r7, #15]
 8009696:	2b28      	cmp	r3, #40	; 0x28
 8009698:	d110      	bne.n	80096bc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a0a      	ldr	r2, [pc, #40]	; (80096c8 <I2C_ITError+0x260>)
 800969e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2220      	movs	r2, #32
 80096aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7fe fedf 	bl	800847a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80096bc:	bf00      	nop
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	0800996d 	.word	0x0800996d
 80096c8:	ffff0000 	.word	0xffff0000

080096cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b088      	sub	sp, #32
 80096d0:	af02      	add	r7, sp, #8
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	607a      	str	r2, [r7, #4]
 80096d6:	603b      	str	r3, [r7, #0]
 80096d8:	460b      	mov	r3, r1
 80096da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	2b08      	cmp	r3, #8
 80096e6:	d006      	beq.n	80096f6 <I2C_MasterRequestWrite+0x2a>
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d003      	beq.n	80096f6 <I2C_MasterRequestWrite+0x2a>
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80096f4:	d108      	bne.n	8009708 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	e00b      	b.n	8009720 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970c:	2b12      	cmp	r3, #18
 800970e:	d107      	bne.n	8009720 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800971e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 f9c5 	bl	8009abc <I2C_WaitOnFlagUntilTimeout>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00d      	beq.n	8009754 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009746:	d103      	bne.n	8009750 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800974e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	e035      	b.n	80097c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800975c:	d108      	bne.n	8009770 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800975e:	897b      	ldrh	r3, [r7, #10]
 8009760:	b2db      	uxtb	r3, r3
 8009762:	461a      	mov	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800976c:	611a      	str	r2, [r3, #16]
 800976e:	e01b      	b.n	80097a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009770:	897b      	ldrh	r3, [r7, #10]
 8009772:	11db      	asrs	r3, r3, #7
 8009774:	b2db      	uxtb	r3, r3
 8009776:	f003 0306 	and.w	r3, r3, #6
 800977a:	b2db      	uxtb	r3, r3
 800977c:	f063 030f 	orn	r3, r3, #15
 8009780:	b2da      	uxtb	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	490e      	ldr	r1, [pc, #56]	; (80097c8 <I2C_MasterRequestWrite+0xfc>)
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 f9eb 	bl	8009b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e010      	b.n	80097c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800979e:	897b      	ldrh	r3, [r7, #10]
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	4907      	ldr	r1, [pc, #28]	; (80097cc <I2C_MasterRequestWrite+0x100>)
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 f9db 	bl	8009b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e000      	b.n	80097c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3718      	adds	r7, #24
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	00010008 	.word	0x00010008
 80097cc:	00010002 	.word	0x00010002

080097d0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b088      	sub	sp, #32
 80097d4:	af02      	add	r7, sp, #8
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	607a      	str	r2, [r7, #4]
 80097da:	603b      	str	r3, [r7, #0]
 80097dc:	460b      	mov	r3, r1
 80097de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80097f4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	2b08      	cmp	r3, #8
 80097fa:	d006      	beq.n	800980a <I2C_MasterRequestRead+0x3a>
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d003      	beq.n	800980a <I2C_MasterRequestRead+0x3a>
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009808:	d108      	bne.n	800981c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	e00b      	b.n	8009834 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009820:	2b11      	cmp	r3, #17
 8009822:	d107      	bne.n	8009834 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009832:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 f93b 	bl	8009abc <I2C_WaitOnFlagUntilTimeout>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00d      	beq.n	8009868 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800985a:	d103      	bne.n	8009864 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009862:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009864:	2303      	movs	r3, #3
 8009866:	e079      	b.n	800995c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009870:	d108      	bne.n	8009884 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009872:	897b      	ldrh	r3, [r7, #10]
 8009874:	b2db      	uxtb	r3, r3
 8009876:	f043 0301 	orr.w	r3, r3, #1
 800987a:	b2da      	uxtb	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	611a      	str	r2, [r3, #16]
 8009882:	e05f      	b.n	8009944 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009884:	897b      	ldrh	r3, [r7, #10]
 8009886:	11db      	asrs	r3, r3, #7
 8009888:	b2db      	uxtb	r3, r3
 800988a:	f003 0306 	and.w	r3, r3, #6
 800988e:	b2db      	uxtb	r3, r3
 8009890:	f063 030f 	orn	r3, r3, #15
 8009894:	b2da      	uxtb	r2, r3
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	4930      	ldr	r1, [pc, #192]	; (8009964 <I2C_MasterRequestRead+0x194>)
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 f961 	bl	8009b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d001      	beq.n	80098b2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e054      	b.n	800995c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80098b2:	897b      	ldrh	r3, [r7, #10]
 80098b4:	b2da      	uxtb	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	4929      	ldr	r1, [pc, #164]	; (8009968 <I2C_MasterRequestRead+0x198>)
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f000 f951 	bl	8009b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d001      	beq.n	80098d2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e044      	b.n	800995c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098d2:	2300      	movs	r3, #0
 80098d4:	613b      	str	r3, [r7, #16]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	613b      	str	r3, [r7, #16]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	613b      	str	r3, [r7, #16]
 80098e6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098f6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 f8d9 	bl	8009abc <I2C_WaitOnFlagUntilTimeout>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00d      	beq.n	800992c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800991a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800991e:	d103      	bne.n	8009928 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009926:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009928:	2303      	movs	r3, #3
 800992a:	e017      	b.n	800995c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800992c:	897b      	ldrh	r3, [r7, #10]
 800992e:	11db      	asrs	r3, r3, #7
 8009930:	b2db      	uxtb	r3, r3
 8009932:	f003 0306 	and.w	r3, r3, #6
 8009936:	b2db      	uxtb	r3, r3
 8009938:	f063 030e 	orn	r3, r3, #14
 800993c:	b2da      	uxtb	r2, r3
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	4907      	ldr	r1, [pc, #28]	; (8009968 <I2C_MasterRequestRead+0x198>)
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 f90d 	bl	8009b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e000      	b.n	800995c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	00010008 	.word	0x00010008
 8009968:	00010002 	.word	0x00010002

0800996c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009974:	2300      	movs	r3, #0
 8009976:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009984:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009986:	4b4b      	ldr	r3, [pc, #300]	; (8009ab4 <I2C_DMAAbort+0x148>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	08db      	lsrs	r3, r3, #3
 800998c:	4a4a      	ldr	r2, [pc, #296]	; (8009ab8 <I2C_DMAAbort+0x14c>)
 800998e:	fba2 2303 	umull	r2, r3, r2, r3
 8009992:	0a1a      	lsrs	r2, r3, #8
 8009994:	4613      	mov	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	4413      	add	r3, r2
 800999a:	00da      	lsls	r2, r3, #3
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d106      	bne.n	80099b4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099aa:	f043 0220 	orr.w	r2, r3, #32
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80099b2:	e00a      	b.n	80099ca <I2C_DMAAbort+0x5e>
    }
    count--;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	3b01      	subs	r3, #1
 80099b8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099c8:	d0ea      	beq.n	80099a0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d003      	beq.n	80099da <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d6:	2200      	movs	r2, #0
 80099d8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e6:	2200      	movs	r2, #0
 80099e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099f8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2200      	movs	r2, #0
 80099fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d003      	beq.n	8009a10 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d003      	beq.n	8009a20 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f022 0201 	bic.w	r2, r2, #1
 8009a2e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b60      	cmp	r3, #96	; 0x60
 8009a3a:	d10e      	bne.n	8009a5a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	2220      	movs	r2, #32
 8009a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009a52:	6978      	ldr	r0, [r7, #20]
 8009a54:	f7fe fd39 	bl	80084ca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009a58:	e027      	b.n	8009aaa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a5a:	7cfb      	ldrb	r3, [r7, #19]
 8009a5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a60:	2b28      	cmp	r3, #40	; 0x28
 8009a62:	d117      	bne.n	8009a94 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f042 0201 	orr.w	r2, r2, #1
 8009a72:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2200      	movs	r2, #0
 8009a88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	2228      	movs	r2, #40	; 0x28
 8009a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009a92:	e007      	b.n	8009aa4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	2220      	movs	r2, #32
 8009a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009aa4:	6978      	ldr	r0, [r7, #20]
 8009aa6:	f7fe fd06 	bl	80084b6 <HAL_I2C_ErrorCallback>
}
 8009aaa:	bf00      	nop
 8009aac:	3718      	adds	r7, #24
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	20000004 	.word	0x20000004
 8009ab8:	14f8b589 	.word	0x14f8b589

08009abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	603b      	str	r3, [r7, #0]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009acc:	e025      	b.n	8009b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ad4:	d021      	beq.n	8009b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ad6:	f7fd fb0f 	bl	80070f8 <HAL_GetTick>
 8009ada:	4602      	mov	r2, r0
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	683a      	ldr	r2, [r7, #0]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d302      	bcc.n	8009aec <I2C_WaitOnFlagUntilTimeout+0x30>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d116      	bne.n	8009b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2220      	movs	r2, #32
 8009af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b06:	f043 0220 	orr.w	r2, r3, #32
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e023      	b.n	8009b62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	0c1b      	lsrs	r3, r3, #16
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d10d      	bne.n	8009b40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	43da      	mvns	r2, r3
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	4013      	ands	r3, r2
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	bf0c      	ite	eq
 8009b36:	2301      	moveq	r3, #1
 8009b38:	2300      	movne	r3, #0
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	e00c      	b.n	8009b5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	43da      	mvns	r2, r3
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	bf0c      	ite	eq
 8009b52:	2301      	moveq	r3, #1
 8009b54:	2300      	movne	r3, #0
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	461a      	mov	r2, r3
 8009b5a:	79fb      	ldrb	r3, [r7, #7]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d0b6      	beq.n	8009ace <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b084      	sub	sp, #16
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	60f8      	str	r0, [r7, #12]
 8009b72:	60b9      	str	r1, [r7, #8]
 8009b74:	607a      	str	r2, [r7, #4]
 8009b76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b78:	e051      	b.n	8009c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b88:	d123      	bne.n	8009bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009ba2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2220      	movs	r2, #32
 8009bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bbe:	f043 0204 	orr.w	r2, r3, #4
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e046      	b.n	8009c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bd8:	d021      	beq.n	8009c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bda:	f7fd fa8d 	bl	80070f8 <HAL_GetTick>
 8009bde:	4602      	mov	r2, r0
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d302      	bcc.n	8009bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d116      	bne.n	8009c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2220      	movs	r2, #32
 8009bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0a:	f043 0220 	orr.w	r2, r3, #32
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e020      	b.n	8009c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	0c1b      	lsrs	r3, r3, #16
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d10c      	bne.n	8009c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	43da      	mvns	r2, r3
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	4013      	ands	r3, r2
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	bf14      	ite	ne
 8009c3a:	2301      	movne	r3, #1
 8009c3c:	2300      	moveq	r3, #0
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	e00b      	b.n	8009c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	43da      	mvns	r2, r3
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	bf14      	ite	ne
 8009c54:	2301      	movne	r3, #1
 8009c56:	2300      	moveq	r3, #0
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d18d      	bne.n	8009b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c74:	e02d      	b.n	8009cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f000 f900 	bl	8009e7c <I2C_IsAcknowledgeFailed>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e02d      	b.n	8009ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c8c:	d021      	beq.n	8009cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c8e:	f7fd fa33 	bl	80070f8 <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d302      	bcc.n	8009ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d116      	bne.n	8009cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2220      	movs	r2, #32
 8009cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbe:	f043 0220 	orr.w	r2, r3, #32
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e007      	b.n	8009ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	695b      	ldr	r3, [r3, #20]
 8009cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cdc:	2b80      	cmp	r3, #128	; 0x80
 8009cde:	d1ca      	bne.n	8009c76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	60f8      	str	r0, [r7, #12]
 8009cf2:	60b9      	str	r1, [r7, #8]
 8009cf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009cf6:	e02d      	b.n	8009d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f000 f8bf 	bl	8009e7c <I2C_IsAcknowledgeFailed>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e02d      	b.n	8009d64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d0e:	d021      	beq.n	8009d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d10:	f7fd f9f2 	bl	80070f8 <HAL_GetTick>
 8009d14:	4602      	mov	r2, r0
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	1ad3      	subs	r3, r2, r3
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d302      	bcc.n	8009d26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d116      	bne.n	8009d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d40:	f043 0220 	orr.w	r2, r3, #32
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e007      	b.n	8009d64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	f003 0304 	and.w	r3, r3, #4
 8009d5e:	2b04      	cmp	r3, #4
 8009d60:	d1ca      	bne.n	8009cf8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d74:	2300      	movs	r3, #0
 8009d76:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009d78:	4b13      	ldr	r3, [pc, #76]	; (8009dc8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	08db      	lsrs	r3, r3, #3
 8009d7e:	4a13      	ldr	r2, [pc, #76]	; (8009dcc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009d80:	fba2 2303 	umull	r2, r3, r2, r3
 8009d84:	0a1a      	lsrs	r2, r3, #8
 8009d86:	4613      	mov	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d107      	bne.n	8009daa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9e:	f043 0220 	orr.w	r2, r3, #32
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e008      	b.n	8009dbc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009db8:	d0e9      	beq.n	8009d8e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	20000004 	.word	0x20000004
 8009dcc:	14f8b589 	.word	0x14f8b589

08009dd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ddc:	e042      	b.n	8009e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	695b      	ldr	r3, [r3, #20]
 8009de4:	f003 0310 	and.w	r3, r3, #16
 8009de8:	2b10      	cmp	r3, #16
 8009dea:	d119      	bne.n	8009e20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f06f 0210 	mvn.w	r2, #16
 8009df4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2220      	movs	r2, #32
 8009e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e029      	b.n	8009e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e20:	f7fd f96a 	bl	80070f8 <HAL_GetTick>
 8009e24:	4602      	mov	r2, r0
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d302      	bcc.n	8009e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d116      	bne.n	8009e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2220      	movs	r2, #32
 8009e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e50:	f043 0220 	orr.w	r2, r3, #32
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e60:	2301      	movs	r3, #1
 8009e62:	e007      	b.n	8009e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	695b      	ldr	r3, [r3, #20]
 8009e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e6e:	2b40      	cmp	r3, #64	; 0x40
 8009e70:	d1b5      	bne.n	8009dde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e92:	d11b      	bne.n	8009ecc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2220      	movs	r2, #32
 8009ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb8:	f043 0204 	orr.w	r2, r3, #4
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e000      	b.n	8009ece <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009eda:	b480      	push	{r7}
 8009edc:	b083      	sub	sp, #12
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009eea:	d103      	bne.n	8009ef4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009ef2:	e007      	b.n	8009f04 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009efc:	d102      	bne.n	8009f04 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2208      	movs	r2, #8
 8009f02:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009f16:	4b06      	ldr	r3, [pc, #24]	; (8009f30 <HAL_PWR_EnableBkUpAccess+0x20>)
 8009f18:	2201      	movs	r2, #1
 8009f1a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8009f1c:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <HAL_PWR_EnableBkUpAccess+0x24>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8009f22:	687b      	ldr	r3, [r7, #4]
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	420e0020 	.word	0x420e0020
 8009f34:	40007000 	.word	0x40007000

08009f38 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8009f3e:	4b06      	ldr	r3, [pc, #24]	; (8009f58 <HAL_PWR_DisableBkUpAccess+0x20>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8009f44:	4b05      	ldr	r3, [pc, #20]	; (8009f5c <HAL_PWR_DisableBkUpAccess+0x24>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8009f4a:	687b      	ldr	r3, [r7, #4]
}
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	420e0020 	.word	0x420e0020
 8009f5c:	40007000 	.word	0x40007000

08009f60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d101      	bne.n	8009f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e267      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d075      	beq.n	800a06a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009f7e:	4b88      	ldr	r3, [pc, #544]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	f003 030c 	and.w	r3, r3, #12
 8009f86:	2b04      	cmp	r3, #4
 8009f88:	d00c      	beq.n	8009fa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f8a:	4b85      	ldr	r3, [pc, #532]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009f92:	2b08      	cmp	r3, #8
 8009f94:	d112      	bne.n	8009fbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f96:	4b82      	ldr	r3, [pc, #520]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fa2:	d10b      	bne.n	8009fbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fa4:	4b7e      	ldr	r3, [pc, #504]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d05b      	beq.n	800a068 <HAL_RCC_OscConfig+0x108>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d157      	bne.n	800a068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e242      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fc4:	d106      	bne.n	8009fd4 <HAL_RCC_OscConfig+0x74>
 8009fc6:	4b76      	ldr	r3, [pc, #472]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a75      	ldr	r2, [pc, #468]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 8009fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fd0:	6013      	str	r3, [r2, #0]
 8009fd2:	e01d      	b.n	800a010 <HAL_RCC_OscConfig+0xb0>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fdc:	d10c      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x98>
 8009fde:	4b70      	ldr	r3, [pc, #448]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a6f      	ldr	r2, [pc, #444]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 8009fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009fe8:	6013      	str	r3, [r2, #0]
 8009fea:	4b6d      	ldr	r3, [pc, #436]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a6c      	ldr	r2, [pc, #432]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 8009ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ff4:	6013      	str	r3, [r2, #0]
 8009ff6:	e00b      	b.n	800a010 <HAL_RCC_OscConfig+0xb0>
 8009ff8:	4b69      	ldr	r3, [pc, #420]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a68      	ldr	r2, [pc, #416]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 8009ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a002:	6013      	str	r3, [r2, #0]
 800a004:	4b66      	ldr	r3, [pc, #408]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a65      	ldr	r2, [pc, #404]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 800a00a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a00e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d013      	beq.n	800a040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a018:	f7fd f86e 	bl	80070f8 <HAL_GetTick>
 800a01c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a01e:	e008      	b.n	800a032 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a020:	f7fd f86a 	bl	80070f8 <HAL_GetTick>
 800a024:	4602      	mov	r2, r0
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	2b64      	cmp	r3, #100	; 0x64
 800a02c:	d901      	bls.n	800a032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a02e:	2303      	movs	r3, #3
 800a030:	e207      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a032:	4b5b      	ldr	r3, [pc, #364]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d0f0      	beq.n	800a020 <HAL_RCC_OscConfig+0xc0>
 800a03e:	e014      	b.n	800a06a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a040:	f7fd f85a 	bl	80070f8 <HAL_GetTick>
 800a044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a046:	e008      	b.n	800a05a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a048:	f7fd f856 	bl	80070f8 <HAL_GetTick>
 800a04c:	4602      	mov	r2, r0
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	2b64      	cmp	r3, #100	; 0x64
 800a054:	d901      	bls.n	800a05a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a056:	2303      	movs	r3, #3
 800a058:	e1f3      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a05a:	4b51      	ldr	r3, [pc, #324]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1f0      	bne.n	800a048 <HAL_RCC_OscConfig+0xe8>
 800a066:	e000      	b.n	800a06a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f003 0302 	and.w	r3, r3, #2
 800a072:	2b00      	cmp	r3, #0
 800a074:	d063      	beq.n	800a13e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a076:	4b4a      	ldr	r3, [pc, #296]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f003 030c 	and.w	r3, r3, #12
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00b      	beq.n	800a09a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a082:	4b47      	ldr	r3, [pc, #284]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a08a:	2b08      	cmp	r3, #8
 800a08c:	d11c      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a08e:	4b44      	ldr	r3, [pc, #272]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d116      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a09a:	4b41      	ldr	r3, [pc, #260]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 0302 	and.w	r3, r3, #2
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d005      	beq.n	800a0b2 <HAL_RCC_OscConfig+0x152>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d001      	beq.n	800a0b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e1c7      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0b2:	4b3b      	ldr	r3, [pc, #236]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	4937      	ldr	r1, [pc, #220]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0c6:	e03a      	b.n	800a13e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d020      	beq.n	800a112 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a0d0:	4b34      	ldr	r3, [pc, #208]	; (800a1a4 <HAL_RCC_OscConfig+0x244>)
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0d6:	f7fd f80f 	bl	80070f8 <HAL_GetTick>
 800a0da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0dc:	e008      	b.n	800a0f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a0de:	f7fd f80b 	bl	80070f8 <HAL_GetTick>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d901      	bls.n	800a0f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e1a8      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0f0:	4b2b      	ldr	r3, [pc, #172]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 0302 	and.w	r3, r3, #2
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d0f0      	beq.n	800a0de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0fc:	4b28      	ldr	r3, [pc, #160]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	00db      	lsls	r3, r3, #3
 800a10a:	4925      	ldr	r1, [pc, #148]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 800a10c:	4313      	orrs	r3, r2
 800a10e:	600b      	str	r3, [r1, #0]
 800a110:	e015      	b.n	800a13e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a112:	4b24      	ldr	r3, [pc, #144]	; (800a1a4 <HAL_RCC_OscConfig+0x244>)
 800a114:	2200      	movs	r2, #0
 800a116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a118:	f7fc ffee 	bl	80070f8 <HAL_GetTick>
 800a11c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a11e:	e008      	b.n	800a132 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a120:	f7fc ffea 	bl	80070f8 <HAL_GetTick>
 800a124:	4602      	mov	r2, r0
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d901      	bls.n	800a132 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a12e:	2303      	movs	r3, #3
 800a130:	e187      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a132:	4b1b      	ldr	r3, [pc, #108]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 0302 	and.w	r3, r3, #2
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d1f0      	bne.n	800a120 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 0308 	and.w	r3, r3, #8
 800a146:	2b00      	cmp	r3, #0
 800a148:	d036      	beq.n	800a1b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d016      	beq.n	800a180 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a152:	4b15      	ldr	r3, [pc, #84]	; (800a1a8 <HAL_RCC_OscConfig+0x248>)
 800a154:	2201      	movs	r2, #1
 800a156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a158:	f7fc ffce 	bl	80070f8 <HAL_GetTick>
 800a15c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a15e:	e008      	b.n	800a172 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a160:	f7fc ffca 	bl	80070f8 <HAL_GetTick>
 800a164:	4602      	mov	r2, r0
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d901      	bls.n	800a172 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a16e:	2303      	movs	r3, #3
 800a170:	e167      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a172:	4b0b      	ldr	r3, [pc, #44]	; (800a1a0 <HAL_RCC_OscConfig+0x240>)
 800a174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a176:	f003 0302 	and.w	r3, r3, #2
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d0f0      	beq.n	800a160 <HAL_RCC_OscConfig+0x200>
 800a17e:	e01b      	b.n	800a1b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a180:	4b09      	ldr	r3, [pc, #36]	; (800a1a8 <HAL_RCC_OscConfig+0x248>)
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a186:	f7fc ffb7 	bl	80070f8 <HAL_GetTick>
 800a18a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a18c:	e00e      	b.n	800a1ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a18e:	f7fc ffb3 	bl	80070f8 <HAL_GetTick>
 800a192:	4602      	mov	r2, r0
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	2b02      	cmp	r3, #2
 800a19a:	d907      	bls.n	800a1ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e150      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
 800a1a0:	40023800 	.word	0x40023800
 800a1a4:	42470000 	.word	0x42470000
 800a1a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1ac:	4b88      	ldr	r3, [pc, #544]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a1ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1b0:	f003 0302 	and.w	r3, r3, #2
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1ea      	bne.n	800a18e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f000 8097 	beq.w	800a2f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1ca:	4b81      	ldr	r3, [pc, #516]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10f      	bne.n	800a1f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	60bb      	str	r3, [r7, #8]
 800a1da:	4b7d      	ldr	r3, [pc, #500]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1de:	4a7c      	ldr	r2, [pc, #496]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a1e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1e4:	6413      	str	r3, [r2, #64]	; 0x40
 800a1e6:	4b7a      	ldr	r3, [pc, #488]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1ee:	60bb      	str	r3, [r7, #8]
 800a1f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a1f6:	4b77      	ldr	r3, [pc, #476]	; (800a3d4 <HAL_RCC_OscConfig+0x474>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d118      	bne.n	800a234 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a202:	4b74      	ldr	r3, [pc, #464]	; (800a3d4 <HAL_RCC_OscConfig+0x474>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a73      	ldr	r2, [pc, #460]	; (800a3d4 <HAL_RCC_OscConfig+0x474>)
 800a208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a20c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a20e:	f7fc ff73 	bl	80070f8 <HAL_GetTick>
 800a212:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a214:	e008      	b.n	800a228 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a216:	f7fc ff6f 	bl	80070f8 <HAL_GetTick>
 800a21a:	4602      	mov	r2, r0
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	2b02      	cmp	r3, #2
 800a222:	d901      	bls.n	800a228 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a224:	2303      	movs	r3, #3
 800a226:	e10c      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a228:	4b6a      	ldr	r3, [pc, #424]	; (800a3d4 <HAL_RCC_OscConfig+0x474>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a230:	2b00      	cmp	r3, #0
 800a232:	d0f0      	beq.n	800a216 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d106      	bne.n	800a24a <HAL_RCC_OscConfig+0x2ea>
 800a23c:	4b64      	ldr	r3, [pc, #400]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a23e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a240:	4a63      	ldr	r2, [pc, #396]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a242:	f043 0301 	orr.w	r3, r3, #1
 800a246:	6713      	str	r3, [r2, #112]	; 0x70
 800a248:	e01c      	b.n	800a284 <HAL_RCC_OscConfig+0x324>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	2b05      	cmp	r3, #5
 800a250:	d10c      	bne.n	800a26c <HAL_RCC_OscConfig+0x30c>
 800a252:	4b5f      	ldr	r3, [pc, #380]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a256:	4a5e      	ldr	r2, [pc, #376]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a258:	f043 0304 	orr.w	r3, r3, #4
 800a25c:	6713      	str	r3, [r2, #112]	; 0x70
 800a25e:	4b5c      	ldr	r3, [pc, #368]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a262:	4a5b      	ldr	r2, [pc, #364]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a264:	f043 0301 	orr.w	r3, r3, #1
 800a268:	6713      	str	r3, [r2, #112]	; 0x70
 800a26a:	e00b      	b.n	800a284 <HAL_RCC_OscConfig+0x324>
 800a26c:	4b58      	ldr	r3, [pc, #352]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a26e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a270:	4a57      	ldr	r2, [pc, #348]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a272:	f023 0301 	bic.w	r3, r3, #1
 800a276:	6713      	str	r3, [r2, #112]	; 0x70
 800a278:	4b55      	ldr	r3, [pc, #340]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a27a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27c:	4a54      	ldr	r2, [pc, #336]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a27e:	f023 0304 	bic.w	r3, r3, #4
 800a282:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d015      	beq.n	800a2b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a28c:	f7fc ff34 	bl	80070f8 <HAL_GetTick>
 800a290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a292:	e00a      	b.n	800a2aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a294:	f7fc ff30 	bl	80070f8 <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d901      	bls.n	800a2aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e0cb      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2aa:	4b49      	ldr	r3, [pc, #292]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ae:	f003 0302 	and.w	r3, r3, #2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0ee      	beq.n	800a294 <HAL_RCC_OscConfig+0x334>
 800a2b6:	e014      	b.n	800a2e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2b8:	f7fc ff1e 	bl	80070f8 <HAL_GetTick>
 800a2bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2be:	e00a      	b.n	800a2d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2c0:	f7fc ff1a 	bl	80070f8 <HAL_GetTick>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	1ad3      	subs	r3, r2, r3
 800a2ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d901      	bls.n	800a2d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	e0b5      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2d6:	4b3e      	ldr	r3, [pc, #248]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a2d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2da:	f003 0302 	and.w	r3, r3, #2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1ee      	bne.n	800a2c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a2e2:	7dfb      	ldrb	r3, [r7, #23]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d105      	bne.n	800a2f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2e8:	4b39      	ldr	r3, [pc, #228]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ec:	4a38      	ldr	r2, [pc, #224]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a2ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f000 80a1 	beq.w	800a440 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a2fe:	4b34      	ldr	r3, [pc, #208]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	f003 030c 	and.w	r3, r3, #12
 800a306:	2b08      	cmp	r3, #8
 800a308:	d05c      	beq.n	800a3c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d141      	bne.n	800a396 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a312:	4b31      	ldr	r3, [pc, #196]	; (800a3d8 <HAL_RCC_OscConfig+0x478>)
 800a314:	2200      	movs	r2, #0
 800a316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a318:	f7fc feee 	bl	80070f8 <HAL_GetTick>
 800a31c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a31e:	e008      	b.n	800a332 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a320:	f7fc feea 	bl	80070f8 <HAL_GetTick>
 800a324:	4602      	mov	r2, r0
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d901      	bls.n	800a332 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e087      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a332:	4b27      	ldr	r3, [pc, #156]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1f0      	bne.n	800a320 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	69da      	ldr	r2, [r3, #28]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	431a      	orrs	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34c:	019b      	lsls	r3, r3, #6
 800a34e:	431a      	orrs	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a354:	085b      	lsrs	r3, r3, #1
 800a356:	3b01      	subs	r3, #1
 800a358:	041b      	lsls	r3, r3, #16
 800a35a:	431a      	orrs	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a360:	061b      	lsls	r3, r3, #24
 800a362:	491b      	ldr	r1, [pc, #108]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a364:	4313      	orrs	r3, r2
 800a366:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a368:	4b1b      	ldr	r3, [pc, #108]	; (800a3d8 <HAL_RCC_OscConfig+0x478>)
 800a36a:	2201      	movs	r2, #1
 800a36c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a36e:	f7fc fec3 	bl	80070f8 <HAL_GetTick>
 800a372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a374:	e008      	b.n	800a388 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a376:	f7fc febf 	bl	80070f8 <HAL_GetTick>
 800a37a:	4602      	mov	r2, r0
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	2b02      	cmp	r3, #2
 800a382:	d901      	bls.n	800a388 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a384:	2303      	movs	r3, #3
 800a386:	e05c      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a388:	4b11      	ldr	r3, [pc, #68]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a390:	2b00      	cmp	r3, #0
 800a392:	d0f0      	beq.n	800a376 <HAL_RCC_OscConfig+0x416>
 800a394:	e054      	b.n	800a440 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a396:	4b10      	ldr	r3, [pc, #64]	; (800a3d8 <HAL_RCC_OscConfig+0x478>)
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a39c:	f7fc feac 	bl	80070f8 <HAL_GetTick>
 800a3a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3a2:	e008      	b.n	800a3b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a3a4:	f7fc fea8 	bl	80070f8 <HAL_GetTick>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d901      	bls.n	800a3b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e045      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3b6:	4b06      	ldr	r3, [pc, #24]	; (800a3d0 <HAL_RCC_OscConfig+0x470>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1f0      	bne.n	800a3a4 <HAL_RCC_OscConfig+0x444>
 800a3c2:	e03d      	b.n	800a440 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d107      	bne.n	800a3dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e038      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
 800a3d0:	40023800 	.word	0x40023800
 800a3d4:	40007000 	.word	0x40007000
 800a3d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a3dc:	4b1b      	ldr	r3, [pc, #108]	; (800a44c <HAL_RCC_OscConfig+0x4ec>)
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d028      	beq.n	800a43c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d121      	bne.n	800a43c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a402:	429a      	cmp	r2, r3
 800a404:	d11a      	bne.n	800a43c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a40c:	4013      	ands	r3, r2
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a412:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a414:	4293      	cmp	r3, r2
 800a416:	d111      	bne.n	800a43c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a422:	085b      	lsrs	r3, r3, #1
 800a424:	3b01      	subs	r3, #1
 800a426:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a428:	429a      	cmp	r2, r3
 800a42a:	d107      	bne.n	800a43c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a436:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a438:	429a      	cmp	r2, r3
 800a43a:	d001      	beq.n	800a440 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e000      	b.n	800a442 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3718      	adds	r7, #24
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	40023800 	.word	0x40023800

0800a450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d101      	bne.n	800a464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	e0cc      	b.n	800a5fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a464:	4b68      	ldr	r3, [pc, #416]	; (800a608 <HAL_RCC_ClockConfig+0x1b8>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 0307 	and.w	r3, r3, #7
 800a46c:	683a      	ldr	r2, [r7, #0]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d90c      	bls.n	800a48c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a472:	4b65      	ldr	r3, [pc, #404]	; (800a608 <HAL_RCC_ClockConfig+0x1b8>)
 800a474:	683a      	ldr	r2, [r7, #0]
 800a476:	b2d2      	uxtb	r2, r2
 800a478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a47a:	4b63      	ldr	r3, [pc, #396]	; (800a608 <HAL_RCC_ClockConfig+0x1b8>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 0307 	and.w	r3, r3, #7
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	429a      	cmp	r2, r3
 800a486:	d001      	beq.n	800a48c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	e0b8      	b.n	800a5fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0302 	and.w	r3, r3, #2
 800a494:	2b00      	cmp	r3, #0
 800a496:	d020      	beq.n	800a4da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0304 	and.w	r3, r3, #4
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d005      	beq.n	800a4b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a4a4:	4b59      	ldr	r3, [pc, #356]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	4a58      	ldr	r2, [pc, #352]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a4aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a4ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 0308 	and.w	r3, r3, #8
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d005      	beq.n	800a4c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a4bc:	4b53      	ldr	r3, [pc, #332]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	4a52      	ldr	r2, [pc, #328]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a4c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a4c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4c8:	4b50      	ldr	r3, [pc, #320]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	494d      	ldr	r1, [pc, #308]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 0301 	and.w	r3, r3, #1
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d044      	beq.n	800a570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d107      	bne.n	800a4fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4ee:	4b47      	ldr	r3, [pc, #284]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d119      	bne.n	800a52e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e07f      	b.n	800a5fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	2b02      	cmp	r3, #2
 800a504:	d003      	beq.n	800a50e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a50a:	2b03      	cmp	r3, #3
 800a50c:	d107      	bne.n	800a51e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a50e:	4b3f      	ldr	r3, [pc, #252]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d109      	bne.n	800a52e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e06f      	b.n	800a5fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a51e:	4b3b      	ldr	r3, [pc, #236]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 0302 	and.w	r3, r3, #2
 800a526:	2b00      	cmp	r3, #0
 800a528:	d101      	bne.n	800a52e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e067      	b.n	800a5fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a52e:	4b37      	ldr	r3, [pc, #220]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f023 0203 	bic.w	r2, r3, #3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	4934      	ldr	r1, [pc, #208]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a53c:	4313      	orrs	r3, r2
 800a53e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a540:	f7fc fdda 	bl	80070f8 <HAL_GetTick>
 800a544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a546:	e00a      	b.n	800a55e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a548:	f7fc fdd6 	bl	80070f8 <HAL_GetTick>
 800a54c:	4602      	mov	r2, r0
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	f241 3288 	movw	r2, #5000	; 0x1388
 800a556:	4293      	cmp	r3, r2
 800a558:	d901      	bls.n	800a55e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a55a:	2303      	movs	r3, #3
 800a55c:	e04f      	b.n	800a5fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a55e:	4b2b      	ldr	r3, [pc, #172]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	f003 020c 	and.w	r2, r3, #12
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d1eb      	bne.n	800a548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a570:	4b25      	ldr	r3, [pc, #148]	; (800a608 <HAL_RCC_ClockConfig+0x1b8>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 0307 	and.w	r3, r3, #7
 800a578:	683a      	ldr	r2, [r7, #0]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d20c      	bcs.n	800a598 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a57e:	4b22      	ldr	r3, [pc, #136]	; (800a608 <HAL_RCC_ClockConfig+0x1b8>)
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	b2d2      	uxtb	r2, r2
 800a584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a586:	4b20      	ldr	r3, [pc, #128]	; (800a608 <HAL_RCC_ClockConfig+0x1b8>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f003 0307 	and.w	r3, r3, #7
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	429a      	cmp	r2, r3
 800a592:	d001      	beq.n	800a598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	e032      	b.n	800a5fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 0304 	and.w	r3, r3, #4
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d008      	beq.n	800a5b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a5a4:	4b19      	ldr	r3, [pc, #100]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	4916      	ldr	r1, [pc, #88]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0308 	and.w	r3, r3, #8
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d009      	beq.n	800a5d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a5c2:	4b12      	ldr	r3, [pc, #72]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	00db      	lsls	r3, r3, #3
 800a5d0:	490e      	ldr	r1, [pc, #56]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a5d6:	f000 f821 	bl	800a61c <HAL_RCC_GetSysClockFreq>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	4b0b      	ldr	r3, [pc, #44]	; (800a60c <HAL_RCC_ClockConfig+0x1bc>)
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	091b      	lsrs	r3, r3, #4
 800a5e2:	f003 030f 	and.w	r3, r3, #15
 800a5e6:	490a      	ldr	r1, [pc, #40]	; (800a610 <HAL_RCC_ClockConfig+0x1c0>)
 800a5e8:	5ccb      	ldrb	r3, [r1, r3]
 800a5ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ee:	4a09      	ldr	r2, [pc, #36]	; (800a614 <HAL_RCC_ClockConfig+0x1c4>)
 800a5f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a5f2:	4b09      	ldr	r3, [pc, #36]	; (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fc fd3a 	bl	8007070 <HAL_InitTick>

  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	40023c00 	.word	0x40023c00
 800a60c:	40023800 	.word	0x40023800
 800a610:	08015440 	.word	0x08015440
 800a614:	20000004 	.word	0x20000004
 800a618:	20000008 	.word	0x20000008

0800a61c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a61c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a620:	b090      	sub	sp, #64	; 0x40
 800a622:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a624:	2300      	movs	r3, #0
 800a626:	637b      	str	r3, [r7, #52]	; 0x34
 800a628:	2300      	movs	r3, #0
 800a62a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a62c:	2300      	movs	r3, #0
 800a62e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800a630:	2300      	movs	r3, #0
 800a632:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a634:	4b59      	ldr	r3, [pc, #356]	; (800a79c <HAL_RCC_GetSysClockFreq+0x180>)
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	f003 030c 	and.w	r3, r3, #12
 800a63c:	2b08      	cmp	r3, #8
 800a63e:	d00d      	beq.n	800a65c <HAL_RCC_GetSysClockFreq+0x40>
 800a640:	2b08      	cmp	r3, #8
 800a642:	f200 80a1 	bhi.w	800a788 <HAL_RCC_GetSysClockFreq+0x16c>
 800a646:	2b00      	cmp	r3, #0
 800a648:	d002      	beq.n	800a650 <HAL_RCC_GetSysClockFreq+0x34>
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	d003      	beq.n	800a656 <HAL_RCC_GetSysClockFreq+0x3a>
 800a64e:	e09b      	b.n	800a788 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a650:	4b53      	ldr	r3, [pc, #332]	; (800a7a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800a652:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800a654:	e09b      	b.n	800a78e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a656:	4b53      	ldr	r3, [pc, #332]	; (800a7a4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a658:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a65a:	e098      	b.n	800a78e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a65c:	4b4f      	ldr	r3, [pc, #316]	; (800a79c <HAL_RCC_GetSysClockFreq+0x180>)
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a664:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a666:	4b4d      	ldr	r3, [pc, #308]	; (800a79c <HAL_RCC_GetSysClockFreq+0x180>)
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d028      	beq.n	800a6c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a672:	4b4a      	ldr	r3, [pc, #296]	; (800a79c <HAL_RCC_GetSysClockFreq+0x180>)
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	099b      	lsrs	r3, r3, #6
 800a678:	2200      	movs	r2, #0
 800a67a:	623b      	str	r3, [r7, #32]
 800a67c:	627a      	str	r2, [r7, #36]	; 0x24
 800a67e:	6a3b      	ldr	r3, [r7, #32]
 800a680:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a684:	2100      	movs	r1, #0
 800a686:	4b47      	ldr	r3, [pc, #284]	; (800a7a4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a688:	fb03 f201 	mul.w	r2, r3, r1
 800a68c:	2300      	movs	r3, #0
 800a68e:	fb00 f303 	mul.w	r3, r0, r3
 800a692:	4413      	add	r3, r2
 800a694:	4a43      	ldr	r2, [pc, #268]	; (800a7a4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a696:	fba0 1202 	umull	r1, r2, r0, r2
 800a69a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a69c:	460a      	mov	r2, r1
 800a69e:	62ba      	str	r2, [r7, #40]	; 0x28
 800a6a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6a2:	4413      	add	r3, r2
 800a6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	61bb      	str	r3, [r7, #24]
 800a6ac:	61fa      	str	r2, [r7, #28]
 800a6ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a6b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a6b6:	f7f6 fae7 	bl	8000c88 <__aeabi_uldivmod>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	460b      	mov	r3, r1
 800a6be:	4613      	mov	r3, r2
 800a6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6c2:	e053      	b.n	800a76c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a6c4:	4b35      	ldr	r3, [pc, #212]	; (800a79c <HAL_RCC_GetSysClockFreq+0x180>)
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	099b      	lsrs	r3, r3, #6
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	613b      	str	r3, [r7, #16]
 800a6ce:	617a      	str	r2, [r7, #20]
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a6d6:	f04f 0b00 	mov.w	fp, #0
 800a6da:	4652      	mov	r2, sl
 800a6dc:	465b      	mov	r3, fp
 800a6de:	f04f 0000 	mov.w	r0, #0
 800a6e2:	f04f 0100 	mov.w	r1, #0
 800a6e6:	0159      	lsls	r1, r3, #5
 800a6e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a6ec:	0150      	lsls	r0, r2, #5
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	ebb2 080a 	subs.w	r8, r2, sl
 800a6f6:	eb63 090b 	sbc.w	r9, r3, fp
 800a6fa:	f04f 0200 	mov.w	r2, #0
 800a6fe:	f04f 0300 	mov.w	r3, #0
 800a702:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a706:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a70a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a70e:	ebb2 0408 	subs.w	r4, r2, r8
 800a712:	eb63 0509 	sbc.w	r5, r3, r9
 800a716:	f04f 0200 	mov.w	r2, #0
 800a71a:	f04f 0300 	mov.w	r3, #0
 800a71e:	00eb      	lsls	r3, r5, #3
 800a720:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a724:	00e2      	lsls	r2, r4, #3
 800a726:	4614      	mov	r4, r2
 800a728:	461d      	mov	r5, r3
 800a72a:	eb14 030a 	adds.w	r3, r4, sl
 800a72e:	603b      	str	r3, [r7, #0]
 800a730:	eb45 030b 	adc.w	r3, r5, fp
 800a734:	607b      	str	r3, [r7, #4]
 800a736:	f04f 0200 	mov.w	r2, #0
 800a73a:	f04f 0300 	mov.w	r3, #0
 800a73e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a742:	4629      	mov	r1, r5
 800a744:	028b      	lsls	r3, r1, #10
 800a746:	4621      	mov	r1, r4
 800a748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a74c:	4621      	mov	r1, r4
 800a74e:	028a      	lsls	r2, r1, #10
 800a750:	4610      	mov	r0, r2
 800a752:	4619      	mov	r1, r3
 800a754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a756:	2200      	movs	r2, #0
 800a758:	60bb      	str	r3, [r7, #8]
 800a75a:	60fa      	str	r2, [r7, #12]
 800a75c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a760:	f7f6 fa92 	bl	8000c88 <__aeabi_uldivmod>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	4613      	mov	r3, r2
 800a76a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a76c:	4b0b      	ldr	r3, [pc, #44]	; (800a79c <HAL_RCC_GetSysClockFreq+0x180>)
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	0c1b      	lsrs	r3, r3, #16
 800a772:	f003 0303 	and.w	r3, r3, #3
 800a776:	3301      	adds	r3, #1
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800a77c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a780:	fbb2 f3f3 	udiv	r3, r2, r3
 800a784:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a786:	e002      	b.n	800a78e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a788:	4b05      	ldr	r3, [pc, #20]	; (800a7a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800a78a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a78c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a790:	4618      	mov	r0, r3
 800a792:	3740      	adds	r7, #64	; 0x40
 800a794:	46bd      	mov	sp, r7
 800a796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a79a:	bf00      	nop
 800a79c:	40023800 	.word	0x40023800
 800a7a0:	00f42400 	.word	0x00f42400
 800a7a4:	017d7840 	.word	0x017d7840

0800a7a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a7ac:	4b03      	ldr	r3, [pc, #12]	; (800a7bc <HAL_RCC_GetHCLKFreq+0x14>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	20000004 	.word	0x20000004

0800a7c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a7c4:	f7ff fff0 	bl	800a7a8 <HAL_RCC_GetHCLKFreq>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	0a9b      	lsrs	r3, r3, #10
 800a7d0:	f003 0307 	and.w	r3, r3, #7
 800a7d4:	4903      	ldr	r1, [pc, #12]	; (800a7e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7d6:	5ccb      	ldrb	r3, [r1, r3]
 800a7d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	40023800 	.word	0x40023800
 800a7e4:	08015450 	.word	0x08015450

0800a7e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a7ec:	f7ff ffdc 	bl	800a7a8 <HAL_RCC_GetHCLKFreq>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	4b05      	ldr	r3, [pc, #20]	; (800a808 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	0b5b      	lsrs	r3, r3, #13
 800a7f8:	f003 0307 	and.w	r3, r3, #7
 800a7fc:	4903      	ldr	r1, [pc, #12]	; (800a80c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a7fe:	5ccb      	ldrb	r3, [r1, r3]
 800a800:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a804:	4618      	mov	r0, r3
 800a806:	bd80      	pop	{r7, pc}
 800a808:	40023800 	.word	0x40023800
 800a80c:	08015450 	.word	0x08015450

0800a810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d101      	bne.n	800a822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e041      	b.n	800a8a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d106      	bne.n	800a83c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f7fc f8e2 	bl	8006a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2202      	movs	r2, #2
 800a840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	3304      	adds	r3, #4
 800a84c:	4619      	mov	r1, r3
 800a84e:	4610      	mov	r0, r2
 800a850:	f000 ff94 	bl	800b77c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b082      	sub	sp, #8
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e041      	b.n	800a944 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d106      	bne.n	800a8da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f839 	bl	800a94c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2202      	movs	r2, #2
 800a8de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	f000 ff45 	bl	800b77c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2201      	movs	r2, #1
 800a91e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2201      	movs	r2, #1
 800a926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2201      	movs	r2, #1
 800a93e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a942:	2300      	movs	r3, #0
}
 800a944:	4618      	mov	r0, r3
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a954:	bf00      	nop
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d109      	bne.n	800a984 <HAL_TIM_PWM_Start+0x24>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a976:	b2db      	uxtb	r3, r3
 800a978:	2b01      	cmp	r3, #1
 800a97a:	bf14      	ite	ne
 800a97c:	2301      	movne	r3, #1
 800a97e:	2300      	moveq	r3, #0
 800a980:	b2db      	uxtb	r3, r3
 800a982:	e022      	b.n	800a9ca <HAL_TIM_PWM_Start+0x6a>
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	2b04      	cmp	r3, #4
 800a988:	d109      	bne.n	800a99e <HAL_TIM_PWM_Start+0x3e>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b01      	cmp	r3, #1
 800a994:	bf14      	ite	ne
 800a996:	2301      	movne	r3, #1
 800a998:	2300      	moveq	r3, #0
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	e015      	b.n	800a9ca <HAL_TIM_PWM_Start+0x6a>
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2b08      	cmp	r3, #8
 800a9a2:	d109      	bne.n	800a9b8 <HAL_TIM_PWM_Start+0x58>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	bf14      	ite	ne
 800a9b0:	2301      	movne	r3, #1
 800a9b2:	2300      	moveq	r3, #0
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	e008      	b.n	800a9ca <HAL_TIM_PWM_Start+0x6a>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	bf14      	ite	ne
 800a9c4:	2301      	movne	r3, #1
 800a9c6:	2300      	moveq	r3, #0
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e07c      	b.n	800aacc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d104      	bne.n	800a9e2 <HAL_TIM_PWM_Start+0x82>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2202      	movs	r2, #2
 800a9dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9e0:	e013      	b.n	800aa0a <HAL_TIM_PWM_Start+0xaa>
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	2b04      	cmp	r3, #4
 800a9e6:	d104      	bne.n	800a9f2 <HAL_TIM_PWM_Start+0x92>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9f0:	e00b      	b.n	800aa0a <HAL_TIM_PWM_Start+0xaa>
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b08      	cmp	r3, #8
 800a9f6:	d104      	bne.n	800aa02 <HAL_TIM_PWM_Start+0xa2>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2202      	movs	r2, #2
 800a9fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa00:	e003      	b.n	800aa0a <HAL_TIM_PWM_Start+0xaa>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2202      	movs	r2, #2
 800aa06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f001 fac6 	bl	800bfa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a2d      	ldr	r2, [pc, #180]	; (800aad4 <HAL_TIM_PWM_Start+0x174>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d004      	beq.n	800aa2c <HAL_TIM_PWM_Start+0xcc>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a2c      	ldr	r2, [pc, #176]	; (800aad8 <HAL_TIM_PWM_Start+0x178>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d101      	bne.n	800aa30 <HAL_TIM_PWM_Start+0xd0>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e000      	b.n	800aa32 <HAL_TIM_PWM_Start+0xd2>
 800aa30:	2300      	movs	r3, #0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d007      	beq.n	800aa46 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a22      	ldr	r2, [pc, #136]	; (800aad4 <HAL_TIM_PWM_Start+0x174>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d022      	beq.n	800aa96 <HAL_TIM_PWM_Start+0x136>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa58:	d01d      	beq.n	800aa96 <HAL_TIM_PWM_Start+0x136>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a1f      	ldr	r2, [pc, #124]	; (800aadc <HAL_TIM_PWM_Start+0x17c>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d018      	beq.n	800aa96 <HAL_TIM_PWM_Start+0x136>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a1d      	ldr	r2, [pc, #116]	; (800aae0 <HAL_TIM_PWM_Start+0x180>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d013      	beq.n	800aa96 <HAL_TIM_PWM_Start+0x136>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a1c      	ldr	r2, [pc, #112]	; (800aae4 <HAL_TIM_PWM_Start+0x184>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d00e      	beq.n	800aa96 <HAL_TIM_PWM_Start+0x136>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a16      	ldr	r2, [pc, #88]	; (800aad8 <HAL_TIM_PWM_Start+0x178>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d009      	beq.n	800aa96 <HAL_TIM_PWM_Start+0x136>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a18      	ldr	r2, [pc, #96]	; (800aae8 <HAL_TIM_PWM_Start+0x188>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d004      	beq.n	800aa96 <HAL_TIM_PWM_Start+0x136>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a16      	ldr	r2, [pc, #88]	; (800aaec <HAL_TIM_PWM_Start+0x18c>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d111      	bne.n	800aaba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	f003 0307 	and.w	r3, r3, #7
 800aaa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2b06      	cmp	r3, #6
 800aaa6:	d010      	beq.n	800aaca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f042 0201 	orr.w	r2, r2, #1
 800aab6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aab8:	e007      	b.n	800aaca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f042 0201 	orr.w	r2, r2, #1
 800aac8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	40010000 	.word	0x40010000
 800aad8:	40010400 	.word	0x40010400
 800aadc:	40000400 	.word	0x40000400
 800aae0:	40000800 	.word	0x40000800
 800aae4:	40000c00 	.word	0x40000c00
 800aae8:	40014000 	.word	0x40014000
 800aaec:	40001800 	.word	0x40001800

0800aaf0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d101      	bne.n	800ab02 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e041      	b.n	800ab86 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d106      	bne.n	800ab1c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7fc f86a 	bl	8006bf0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2202      	movs	r2, #2
 800ab20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	4610      	mov	r0, r2
 800ab30:	f000 fe24 	bl	800b77c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3708      	adds	r7, #8
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
	...

0800ab90 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d104      	bne.n	800abae <HAL_TIM_IC_Start_IT+0x1e>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	e013      	b.n	800abd6 <HAL_TIM_IC_Start_IT+0x46>
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	2b04      	cmp	r3, #4
 800abb2:	d104      	bne.n	800abbe <HAL_TIM_IC_Start_IT+0x2e>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	e00b      	b.n	800abd6 <HAL_TIM_IC_Start_IT+0x46>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2b08      	cmp	r3, #8
 800abc2:	d104      	bne.n	800abce <HAL_TIM_IC_Start_IT+0x3e>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	e003      	b.n	800abd6 <HAL_TIM_IC_Start_IT+0x46>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d104      	bne.n	800abe8 <HAL_TIM_IC_Start_IT+0x58>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	e013      	b.n	800ac10 <HAL_TIM_IC_Start_IT+0x80>
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	2b04      	cmp	r3, #4
 800abec:	d104      	bne.n	800abf8 <HAL_TIM_IC_Start_IT+0x68>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	e00b      	b.n	800ac10 <HAL_TIM_IC_Start_IT+0x80>
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	2b08      	cmp	r3, #8
 800abfc:	d104      	bne.n	800ac08 <HAL_TIM_IC_Start_IT+0x78>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	e003      	b.n	800ac10 <HAL_TIM_IC_Start_IT+0x80>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800ac12:	7bbb      	ldrb	r3, [r7, #14]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d102      	bne.n	800ac1e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800ac18:	7b7b      	ldrb	r3, [r7, #13]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d001      	beq.n	800ac22 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e0cc      	b.n	800adbc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d104      	bne.n	800ac32 <HAL_TIM_IC_Start_IT+0xa2>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac30:	e013      	b.n	800ac5a <HAL_TIM_IC_Start_IT+0xca>
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2b04      	cmp	r3, #4
 800ac36:	d104      	bne.n	800ac42 <HAL_TIM_IC_Start_IT+0xb2>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac40:	e00b      	b.n	800ac5a <HAL_TIM_IC_Start_IT+0xca>
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	2b08      	cmp	r3, #8
 800ac46:	d104      	bne.n	800ac52 <HAL_TIM_IC_Start_IT+0xc2>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac50:	e003      	b.n	800ac5a <HAL_TIM_IC_Start_IT+0xca>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2202      	movs	r2, #2
 800ac56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d104      	bne.n	800ac6a <HAL_TIM_IC_Start_IT+0xda>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2202      	movs	r2, #2
 800ac64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac68:	e013      	b.n	800ac92 <HAL_TIM_IC_Start_IT+0x102>
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	2b04      	cmp	r3, #4
 800ac6e:	d104      	bne.n	800ac7a <HAL_TIM_IC_Start_IT+0xea>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac78:	e00b      	b.n	800ac92 <HAL_TIM_IC_Start_IT+0x102>
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	2b08      	cmp	r3, #8
 800ac7e:	d104      	bne.n	800ac8a <HAL_TIM_IC_Start_IT+0xfa>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2202      	movs	r2, #2
 800ac84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac88:	e003      	b.n	800ac92 <HAL_TIM_IC_Start_IT+0x102>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2202      	movs	r2, #2
 800ac8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b0c      	cmp	r3, #12
 800ac96:	d841      	bhi.n	800ad1c <HAL_TIM_IC_Start_IT+0x18c>
 800ac98:	a201      	add	r2, pc, #4	; (adr r2, 800aca0 <HAL_TIM_IC_Start_IT+0x110>)
 800ac9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac9e:	bf00      	nop
 800aca0:	0800acd5 	.word	0x0800acd5
 800aca4:	0800ad1d 	.word	0x0800ad1d
 800aca8:	0800ad1d 	.word	0x0800ad1d
 800acac:	0800ad1d 	.word	0x0800ad1d
 800acb0:	0800ace7 	.word	0x0800ace7
 800acb4:	0800ad1d 	.word	0x0800ad1d
 800acb8:	0800ad1d 	.word	0x0800ad1d
 800acbc:	0800ad1d 	.word	0x0800ad1d
 800acc0:	0800acf9 	.word	0x0800acf9
 800acc4:	0800ad1d 	.word	0x0800ad1d
 800acc8:	0800ad1d 	.word	0x0800ad1d
 800accc:	0800ad1d 	.word	0x0800ad1d
 800acd0:	0800ad0b 	.word	0x0800ad0b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68da      	ldr	r2, [r3, #12]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f042 0202 	orr.w	r2, r2, #2
 800ace2:	60da      	str	r2, [r3, #12]
      break;
 800ace4:	e01d      	b.n	800ad22 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68da      	ldr	r2, [r3, #12]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f042 0204 	orr.w	r2, r2, #4
 800acf4:	60da      	str	r2, [r3, #12]
      break;
 800acf6:	e014      	b.n	800ad22 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68da      	ldr	r2, [r3, #12]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f042 0208 	orr.w	r2, r2, #8
 800ad06:	60da      	str	r2, [r3, #12]
      break;
 800ad08:	e00b      	b.n	800ad22 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	68da      	ldr	r2, [r3, #12]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f042 0210 	orr.w	r2, r2, #16
 800ad18:	60da      	str	r2, [r3, #12]
      break;
 800ad1a:	e002      	b.n	800ad22 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad20:	bf00      	nop
  }

  if (status == HAL_OK)
 800ad22:	7bfb      	ldrb	r3, [r7, #15]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d148      	bne.n	800adba <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	6839      	ldr	r1, [r7, #0]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f001 f937 	bl	800bfa4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a22      	ldr	r2, [pc, #136]	; (800adc4 <HAL_TIM_IC_Start_IT+0x234>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d022      	beq.n	800ad86 <HAL_TIM_IC_Start_IT+0x1f6>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad48:	d01d      	beq.n	800ad86 <HAL_TIM_IC_Start_IT+0x1f6>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a1e      	ldr	r2, [pc, #120]	; (800adc8 <HAL_TIM_IC_Start_IT+0x238>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d018      	beq.n	800ad86 <HAL_TIM_IC_Start_IT+0x1f6>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a1c      	ldr	r2, [pc, #112]	; (800adcc <HAL_TIM_IC_Start_IT+0x23c>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d013      	beq.n	800ad86 <HAL_TIM_IC_Start_IT+0x1f6>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a1b      	ldr	r2, [pc, #108]	; (800add0 <HAL_TIM_IC_Start_IT+0x240>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d00e      	beq.n	800ad86 <HAL_TIM_IC_Start_IT+0x1f6>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a19      	ldr	r2, [pc, #100]	; (800add4 <HAL_TIM_IC_Start_IT+0x244>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d009      	beq.n	800ad86 <HAL_TIM_IC_Start_IT+0x1f6>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a18      	ldr	r2, [pc, #96]	; (800add8 <HAL_TIM_IC_Start_IT+0x248>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d004      	beq.n	800ad86 <HAL_TIM_IC_Start_IT+0x1f6>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a16      	ldr	r2, [pc, #88]	; (800addc <HAL_TIM_IC_Start_IT+0x24c>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d111      	bne.n	800adaa <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	f003 0307 	and.w	r3, r3, #7
 800ad90:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	2b06      	cmp	r3, #6
 800ad96:	d010      	beq.n	800adba <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f042 0201 	orr.w	r2, r2, #1
 800ada6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ada8:	e007      	b.n	800adba <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f042 0201 	orr.w	r2, r2, #1
 800adb8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800adba:	7bfb      	ldrb	r3, [r7, #15]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	40010000 	.word	0x40010000
 800adc8:	40000400 	.word	0x40000400
 800adcc:	40000800 	.word	0x40000800
 800add0:	40000c00 	.word	0x40000c00
 800add4:	40010400 	.word	0x40010400
 800add8:	40014000 	.word	0x40014000
 800addc:	40001800 	.word	0x40001800

0800ade0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d101      	bne.n	800adf4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	e097      	b.n	800af24 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d106      	bne.n	800ae0e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7fb fe57 	bl	8006abc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2202      	movs	r2, #2
 800ae12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	6812      	ldr	r2, [r2, #0]
 800ae20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae24:	f023 0307 	bic.w	r3, r3, #7
 800ae28:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	3304      	adds	r3, #4
 800ae32:	4619      	mov	r1, r3
 800ae34:	4610      	mov	r0, r2
 800ae36:	f000 fca1 	bl	800b77c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	699b      	ldr	r3, [r3, #24]
 800ae48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	6a1b      	ldr	r3, [r3, #32]
 800ae50:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae62:	f023 0303 	bic.w	r3, r3, #3
 800ae66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	689a      	ldr	r2, [r3, #8]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	699b      	ldr	r3, [r3, #24]
 800ae70:	021b      	lsls	r3, r3, #8
 800ae72:	4313      	orrs	r3, r2
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ae80:	f023 030c 	bic.w	r3, r3, #12
 800ae84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	68da      	ldr	r2, [r3, #12]
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	69db      	ldr	r3, [r3, #28]
 800ae9a:	021b      	lsls	r3, r3, #8
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	693a      	ldr	r2, [r7, #16]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	011a      	lsls	r2, r3, #4
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	6a1b      	ldr	r3, [r3, #32]
 800aeae:	031b      	lsls	r3, r3, #12
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800aebe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800aec6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	685a      	ldr	r2, [r3, #4]
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	695b      	ldr	r3, [r3, #20]
 800aed0:	011b      	lsls	r3, r3, #4
 800aed2:	4313      	orrs	r3, r2
 800aed4:	68fa      	ldr	r2, [r7, #12]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2201      	movs	r2, #1
 800aefe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3718      	adds	r7, #24
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af3c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800af44:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af4c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800af54:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d110      	bne.n	800af7e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d102      	bne.n	800af68 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800af62:	7b7b      	ldrb	r3, [r7, #13]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d001      	beq.n	800af6c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	e069      	b.n	800b040 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2202      	movs	r2, #2
 800af70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2202      	movs	r2, #2
 800af78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af7c:	e031      	b.n	800afe2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	2b04      	cmp	r3, #4
 800af82:	d110      	bne.n	800afa6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800af84:	7bbb      	ldrb	r3, [r7, #14]
 800af86:	2b01      	cmp	r3, #1
 800af88:	d102      	bne.n	800af90 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800af8a:	7b3b      	ldrb	r3, [r7, #12]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d001      	beq.n	800af94 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	e055      	b.n	800b040 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2202      	movs	r2, #2
 800af98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2202      	movs	r2, #2
 800afa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800afa4:	e01d      	b.n	800afe2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800afa6:	7bfb      	ldrb	r3, [r7, #15]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d108      	bne.n	800afbe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800afac:	7bbb      	ldrb	r3, [r7, #14]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d105      	bne.n	800afbe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800afb2:	7b7b      	ldrb	r3, [r7, #13]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d102      	bne.n	800afbe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800afb8:	7b3b      	ldrb	r3, [r7, #12]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d001      	beq.n	800afc2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	e03e      	b.n	800b040 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2202      	movs	r2, #2
 800afc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2202      	movs	r2, #2
 800afce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2202      	movs	r2, #2
 800afd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2202      	movs	r2, #2
 800afde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d003      	beq.n	800aff0 <HAL_TIM_Encoder_Start+0xc4>
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	2b04      	cmp	r3, #4
 800afec:	d008      	beq.n	800b000 <HAL_TIM_Encoder_Start+0xd4>
 800afee:	e00f      	b.n	800b010 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2201      	movs	r2, #1
 800aff6:	2100      	movs	r1, #0
 800aff8:	4618      	mov	r0, r3
 800affa:	f000 ffd3 	bl	800bfa4 <TIM_CCxChannelCmd>
      break;
 800affe:	e016      	b.n	800b02e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2201      	movs	r2, #1
 800b006:	2104      	movs	r1, #4
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 ffcb 	bl	800bfa4 <TIM_CCxChannelCmd>
      break;
 800b00e:	e00e      	b.n	800b02e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2201      	movs	r2, #1
 800b016:	2100      	movs	r1, #0
 800b018:	4618      	mov	r0, r3
 800b01a:	f000 ffc3 	bl	800bfa4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2201      	movs	r2, #1
 800b024:	2104      	movs	r1, #4
 800b026:	4618      	mov	r0, r3
 800b028:	f000 ffbc 	bl	800bfa4 <TIM_CCxChannelCmd>
      break;
 800b02c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f042 0201 	orr.w	r2, r2, #1
 800b03c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	691b      	ldr	r3, [r3, #16]
 800b056:	f003 0302 	and.w	r3, r3, #2
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d122      	bne.n	800b0a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	f003 0302 	and.w	r3, r3, #2
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d11b      	bne.n	800b0a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f06f 0202 	mvn.w	r2, #2
 800b074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2201      	movs	r2, #1
 800b07a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	f003 0303 	and.w	r3, r3, #3
 800b086:	2b00      	cmp	r3, #0
 800b088:	d003      	beq.n	800b092 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7f6 fc2c 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800b090:	e005      	b.n	800b09e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fb54 	bl	800b740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 fb5b 	bl	800b754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	f003 0304 	and.w	r3, r3, #4
 800b0ae:	2b04      	cmp	r3, #4
 800b0b0:	d122      	bne.n	800b0f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	f003 0304 	and.w	r3, r3, #4
 800b0bc:	2b04      	cmp	r3, #4
 800b0be:	d11b      	bne.n	800b0f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f06f 0204 	mvn.w	r2, #4
 800b0c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2202      	movs	r2, #2
 800b0ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	699b      	ldr	r3, [r3, #24]
 800b0d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d003      	beq.n	800b0e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f7f6 fc02 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800b0e4:	e005      	b.n	800b0f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fb2a 	bl	800b740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 fb31 	bl	800b754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	691b      	ldr	r3, [r3, #16]
 800b0fe:	f003 0308 	and.w	r3, r3, #8
 800b102:	2b08      	cmp	r3, #8
 800b104:	d122      	bne.n	800b14c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	f003 0308 	and.w	r3, r3, #8
 800b110:	2b08      	cmp	r3, #8
 800b112:	d11b      	bne.n	800b14c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f06f 0208 	mvn.w	r2, #8
 800b11c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2204      	movs	r2, #4
 800b122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	69db      	ldr	r3, [r3, #28]
 800b12a:	f003 0303 	and.w	r3, r3, #3
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d003      	beq.n	800b13a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7f6 fbd8 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800b138:	e005      	b.n	800b146 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fb00 	bl	800b740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fb07 	bl	800b754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	691b      	ldr	r3, [r3, #16]
 800b152:	f003 0310 	and.w	r3, r3, #16
 800b156:	2b10      	cmp	r3, #16
 800b158:	d122      	bne.n	800b1a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	f003 0310 	and.w	r3, r3, #16
 800b164:	2b10      	cmp	r3, #16
 800b166:	d11b      	bne.n	800b1a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f06f 0210 	mvn.w	r2, #16
 800b170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2208      	movs	r2, #8
 800b176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	69db      	ldr	r3, [r3, #28]
 800b17e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b182:	2b00      	cmp	r3, #0
 800b184:	d003      	beq.n	800b18e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7f6 fbae 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800b18c:	e005      	b.n	800b19a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 fad6 	bl	800b740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fadd 	bl	800b754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	f003 0301 	and.w	r3, r3, #1
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d10e      	bne.n	800b1cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	f003 0301 	and.w	r3, r3, #1
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d107      	bne.n	800b1cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f06f 0201 	mvn.w	r2, #1
 800b1c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fab0 	bl	800b72c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1d6:	2b80      	cmp	r3, #128	; 0x80
 800b1d8:	d10e      	bne.n	800b1f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1e4:	2b80      	cmp	r3, #128	; 0x80
 800b1e6:	d107      	bne.n	800b1f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b1f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 ffd4 	bl	800c1a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b202:	2b40      	cmp	r3, #64	; 0x40
 800b204:	d10e      	bne.n	800b224 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b210:	2b40      	cmp	r3, #64	; 0x40
 800b212:	d107      	bne.n	800b224 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b21c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 faa2 	bl	800b768 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	f003 0320 	and.w	r3, r3, #32
 800b22e:	2b20      	cmp	r3, #32
 800b230:	d10e      	bne.n	800b250 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	f003 0320 	and.w	r3, r3, #32
 800b23c:	2b20      	cmp	r3, #32
 800b23e:	d107      	bne.n	800b250 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f06f 0220 	mvn.w	r2, #32
 800b248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 ff9e 	bl	800c18c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b250:	bf00      	nop
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b264:	2300      	movs	r3, #0
 800b266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d101      	bne.n	800b276 <HAL_TIM_IC_ConfigChannel+0x1e>
 800b272:	2302      	movs	r3, #2
 800b274:	e088      	b.n	800b388 <HAL_TIM_IC_ConfigChannel+0x130>
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2201      	movs	r2, #1
 800b27a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d11b      	bne.n	800b2bc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6818      	ldr	r0, [r3, #0]
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	6819      	ldr	r1, [r3, #0]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	685a      	ldr	r2, [r3, #4]
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	f000 fcc2 	bl	800bc1c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	699a      	ldr	r2, [r3, #24]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f022 020c 	bic.w	r2, r2, #12
 800b2a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	6999      	ldr	r1, [r3, #24]
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	689a      	ldr	r2, [r3, #8]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	430a      	orrs	r2, r1
 800b2b8:	619a      	str	r2, [r3, #24]
 800b2ba:	e060      	b.n	800b37e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b04      	cmp	r3, #4
 800b2c0:	d11c      	bne.n	800b2fc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6818      	ldr	r0, [r3, #0]
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	6819      	ldr	r1, [r3, #0]
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	685a      	ldr	r2, [r3, #4]
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	f000 fd46 	bl	800bd62 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	699a      	ldr	r2, [r3, #24]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b2e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6999      	ldr	r1, [r3, #24]
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	021a      	lsls	r2, r3, #8
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	430a      	orrs	r2, r1
 800b2f8:	619a      	str	r2, [r3, #24]
 800b2fa:	e040      	b.n	800b37e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2b08      	cmp	r3, #8
 800b300:	d11b      	bne.n	800b33a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6818      	ldr	r0, [r3, #0]
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	6819      	ldr	r1, [r3, #0]
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	685a      	ldr	r2, [r3, #4]
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	f000 fd93 	bl	800be3c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	69da      	ldr	r2, [r3, #28]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f022 020c 	bic.w	r2, r2, #12
 800b324:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	69d9      	ldr	r1, [r3, #28]
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	689a      	ldr	r2, [r3, #8]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	430a      	orrs	r2, r1
 800b336:	61da      	str	r2, [r3, #28]
 800b338:	e021      	b.n	800b37e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2b0c      	cmp	r3, #12
 800b33e:	d11c      	bne.n	800b37a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6818      	ldr	r0, [r3, #0]
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	6819      	ldr	r1, [r3, #0]
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	f000 fdb0 	bl	800beb4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	69da      	ldr	r2, [r3, #28]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b362:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	69d9      	ldr	r1, [r3, #28]
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	021a      	lsls	r2, r3, #8
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	430a      	orrs	r2, r1
 800b376:	61da      	str	r2, [r3, #28]
 800b378:	e001      	b.n	800b37e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2200      	movs	r2, #0
 800b382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b386:	7dfb      	ldrb	r3, [r7, #23]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3718      	adds	r7, #24
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b39c:	2300      	movs	r3, #0
 800b39e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d101      	bne.n	800b3ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b3aa:	2302      	movs	r3, #2
 800b3ac:	e0ae      	b.n	800b50c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2b0c      	cmp	r3, #12
 800b3ba:	f200 809f 	bhi.w	800b4fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b3be:	a201      	add	r2, pc, #4	; (adr r2, 800b3c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c4:	0800b3f9 	.word	0x0800b3f9
 800b3c8:	0800b4fd 	.word	0x0800b4fd
 800b3cc:	0800b4fd 	.word	0x0800b4fd
 800b3d0:	0800b4fd 	.word	0x0800b4fd
 800b3d4:	0800b439 	.word	0x0800b439
 800b3d8:	0800b4fd 	.word	0x0800b4fd
 800b3dc:	0800b4fd 	.word	0x0800b4fd
 800b3e0:	0800b4fd 	.word	0x0800b4fd
 800b3e4:	0800b47b 	.word	0x0800b47b
 800b3e8:	0800b4fd 	.word	0x0800b4fd
 800b3ec:	0800b4fd 	.word	0x0800b4fd
 800b3f0:	0800b4fd 	.word	0x0800b4fd
 800b3f4:	0800b4bb 	.word	0x0800b4bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	68b9      	ldr	r1, [r7, #8]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 fa5c 	bl	800b8bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	699a      	ldr	r2, [r3, #24]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f042 0208 	orr.w	r2, r2, #8
 800b412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	699a      	ldr	r2, [r3, #24]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f022 0204 	bic.w	r2, r2, #4
 800b422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	6999      	ldr	r1, [r3, #24]
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	691a      	ldr	r2, [r3, #16]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	430a      	orrs	r2, r1
 800b434:	619a      	str	r2, [r3, #24]
      break;
 800b436:	e064      	b.n	800b502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68b9      	ldr	r1, [r7, #8]
 800b43e:	4618      	mov	r0, r3
 800b440:	f000 faac 	bl	800b99c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	699a      	ldr	r2, [r3, #24]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	699a      	ldr	r2, [r3, #24]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	6999      	ldr	r1, [r3, #24]
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	021a      	lsls	r2, r3, #8
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	430a      	orrs	r2, r1
 800b476:	619a      	str	r2, [r3, #24]
      break;
 800b478:	e043      	b.n	800b502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	68b9      	ldr	r1, [r7, #8]
 800b480:	4618      	mov	r0, r3
 800b482:	f000 fb01 	bl	800ba88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	69da      	ldr	r2, [r3, #28]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f042 0208 	orr.w	r2, r2, #8
 800b494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	69da      	ldr	r2, [r3, #28]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f022 0204 	bic.w	r2, r2, #4
 800b4a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	69d9      	ldr	r1, [r3, #28]
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	691a      	ldr	r2, [r3, #16]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	430a      	orrs	r2, r1
 800b4b6:	61da      	str	r2, [r3, #28]
      break;
 800b4b8:	e023      	b.n	800b502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	68b9      	ldr	r1, [r7, #8]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f000 fb55 	bl	800bb70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	69da      	ldr	r2, [r3, #28]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	69da      	ldr	r2, [r3, #28]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	69d9      	ldr	r1, [r3, #28]
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	021a      	lsls	r2, r3, #8
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	430a      	orrs	r2, r1
 800b4f8:	61da      	str	r2, [r3, #28]
      break;
 800b4fa:	e002      	b.n	800b502 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	75fb      	strb	r3, [r7, #23]
      break;
 800b500:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2200      	movs	r2, #0
 800b506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b50a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3718      	adds	r7, #24
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b51e:	2300      	movs	r3, #0
 800b520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d101      	bne.n	800b530 <HAL_TIM_ConfigClockSource+0x1c>
 800b52c:	2302      	movs	r3, #2
 800b52e:	e0b4      	b.n	800b69a <HAL_TIM_ConfigClockSource+0x186>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2202      	movs	r2, #2
 800b53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b54e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b556:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b568:	d03e      	beq.n	800b5e8 <HAL_TIM_ConfigClockSource+0xd4>
 800b56a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b56e:	f200 8087 	bhi.w	800b680 <HAL_TIM_ConfigClockSource+0x16c>
 800b572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b576:	f000 8086 	beq.w	800b686 <HAL_TIM_ConfigClockSource+0x172>
 800b57a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b57e:	d87f      	bhi.n	800b680 <HAL_TIM_ConfigClockSource+0x16c>
 800b580:	2b70      	cmp	r3, #112	; 0x70
 800b582:	d01a      	beq.n	800b5ba <HAL_TIM_ConfigClockSource+0xa6>
 800b584:	2b70      	cmp	r3, #112	; 0x70
 800b586:	d87b      	bhi.n	800b680 <HAL_TIM_ConfigClockSource+0x16c>
 800b588:	2b60      	cmp	r3, #96	; 0x60
 800b58a:	d050      	beq.n	800b62e <HAL_TIM_ConfigClockSource+0x11a>
 800b58c:	2b60      	cmp	r3, #96	; 0x60
 800b58e:	d877      	bhi.n	800b680 <HAL_TIM_ConfigClockSource+0x16c>
 800b590:	2b50      	cmp	r3, #80	; 0x50
 800b592:	d03c      	beq.n	800b60e <HAL_TIM_ConfigClockSource+0xfa>
 800b594:	2b50      	cmp	r3, #80	; 0x50
 800b596:	d873      	bhi.n	800b680 <HAL_TIM_ConfigClockSource+0x16c>
 800b598:	2b40      	cmp	r3, #64	; 0x40
 800b59a:	d058      	beq.n	800b64e <HAL_TIM_ConfigClockSource+0x13a>
 800b59c:	2b40      	cmp	r3, #64	; 0x40
 800b59e:	d86f      	bhi.n	800b680 <HAL_TIM_ConfigClockSource+0x16c>
 800b5a0:	2b30      	cmp	r3, #48	; 0x30
 800b5a2:	d064      	beq.n	800b66e <HAL_TIM_ConfigClockSource+0x15a>
 800b5a4:	2b30      	cmp	r3, #48	; 0x30
 800b5a6:	d86b      	bhi.n	800b680 <HAL_TIM_ConfigClockSource+0x16c>
 800b5a8:	2b20      	cmp	r3, #32
 800b5aa:	d060      	beq.n	800b66e <HAL_TIM_ConfigClockSource+0x15a>
 800b5ac:	2b20      	cmp	r3, #32
 800b5ae:	d867      	bhi.n	800b680 <HAL_TIM_ConfigClockSource+0x16c>
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d05c      	beq.n	800b66e <HAL_TIM_ConfigClockSource+0x15a>
 800b5b4:	2b10      	cmp	r3, #16
 800b5b6:	d05a      	beq.n	800b66e <HAL_TIM_ConfigClockSource+0x15a>
 800b5b8:	e062      	b.n	800b680 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6818      	ldr	r0, [r3, #0]
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	6899      	ldr	r1, [r3, #8]
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	685a      	ldr	r2, [r3, #4]
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	f000 fccb 	bl	800bf64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b5dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	609a      	str	r2, [r3, #8]
      break;
 800b5e6:	e04f      	b.n	800b688 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6818      	ldr	r0, [r3, #0]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	6899      	ldr	r1, [r3, #8]
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	685a      	ldr	r2, [r3, #4]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	f000 fcb4 	bl	800bf64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	689a      	ldr	r2, [r3, #8]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b60a:	609a      	str	r2, [r3, #8]
      break;
 800b60c:	e03c      	b.n	800b688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6818      	ldr	r0, [r3, #0]
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	6859      	ldr	r1, [r3, #4]
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	461a      	mov	r2, r3
 800b61c:	f000 fb72 	bl	800bd04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2150      	movs	r1, #80	; 0x50
 800b626:	4618      	mov	r0, r3
 800b628:	f000 fc81 	bl	800bf2e <TIM_ITRx_SetConfig>
      break;
 800b62c:	e02c      	b.n	800b688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6818      	ldr	r0, [r3, #0]
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	6859      	ldr	r1, [r3, #4]
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	461a      	mov	r2, r3
 800b63c:	f000 fbce 	bl	800bddc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2160      	movs	r1, #96	; 0x60
 800b646:	4618      	mov	r0, r3
 800b648:	f000 fc71 	bl	800bf2e <TIM_ITRx_SetConfig>
      break;
 800b64c:	e01c      	b.n	800b688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6818      	ldr	r0, [r3, #0]
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	6859      	ldr	r1, [r3, #4]
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	461a      	mov	r2, r3
 800b65c:	f000 fb52 	bl	800bd04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2140      	movs	r1, #64	; 0x40
 800b666:	4618      	mov	r0, r3
 800b668:	f000 fc61 	bl	800bf2e <TIM_ITRx_SetConfig>
      break;
 800b66c:	e00c      	b.n	800b688 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4619      	mov	r1, r3
 800b678:	4610      	mov	r0, r2
 800b67a:	f000 fc58 	bl	800bf2e <TIM_ITRx_SetConfig>
      break;
 800b67e:	e003      	b.n	800b688 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b680:	2301      	movs	r3, #1
 800b682:	73fb      	strb	r3, [r7, #15]
      break;
 800b684:	e000      	b.n	800b688 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b686:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b698:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
	...

0800b6a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	2b0c      	cmp	r3, #12
 800b6b6:	d831      	bhi.n	800b71c <HAL_TIM_ReadCapturedValue+0x78>
 800b6b8:	a201      	add	r2, pc, #4	; (adr r2, 800b6c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800b6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6be:	bf00      	nop
 800b6c0:	0800b6f5 	.word	0x0800b6f5
 800b6c4:	0800b71d 	.word	0x0800b71d
 800b6c8:	0800b71d 	.word	0x0800b71d
 800b6cc:	0800b71d 	.word	0x0800b71d
 800b6d0:	0800b6ff 	.word	0x0800b6ff
 800b6d4:	0800b71d 	.word	0x0800b71d
 800b6d8:	0800b71d 	.word	0x0800b71d
 800b6dc:	0800b71d 	.word	0x0800b71d
 800b6e0:	0800b709 	.word	0x0800b709
 800b6e4:	0800b71d 	.word	0x0800b71d
 800b6e8:	0800b71d 	.word	0x0800b71d
 800b6ec:	0800b71d 	.word	0x0800b71d
 800b6f0:	0800b713 	.word	0x0800b713
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6fa:	60fb      	str	r3, [r7, #12]

      break;
 800b6fc:	e00f      	b.n	800b71e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b704:	60fb      	str	r3, [r7, #12]

      break;
 800b706:	e00a      	b.n	800b71e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b70e:	60fb      	str	r3, [r7, #12]

      break;
 800b710:	e005      	b.n	800b71e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b718:	60fb      	str	r3, [r7, #12]

      break;
 800b71a:	e000      	b.n	800b71e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800b71c:	bf00      	nop
  }

  return tmpreg;
 800b71e:	68fb      	ldr	r3, [r7, #12]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3714      	adds	r7, #20
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b734:	bf00      	nop
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b748:	bf00      	nop
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b75c:	bf00      	nop
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b770:	bf00      	nop
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a40      	ldr	r2, [pc, #256]	; (800b890 <TIM_Base_SetConfig+0x114>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d013      	beq.n	800b7bc <TIM_Base_SetConfig+0x40>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b79a:	d00f      	beq.n	800b7bc <TIM_Base_SetConfig+0x40>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a3d      	ldr	r2, [pc, #244]	; (800b894 <TIM_Base_SetConfig+0x118>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d00b      	beq.n	800b7bc <TIM_Base_SetConfig+0x40>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4a3c      	ldr	r2, [pc, #240]	; (800b898 <TIM_Base_SetConfig+0x11c>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d007      	beq.n	800b7bc <TIM_Base_SetConfig+0x40>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	4a3b      	ldr	r2, [pc, #236]	; (800b89c <TIM_Base_SetConfig+0x120>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d003      	beq.n	800b7bc <TIM_Base_SetConfig+0x40>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4a3a      	ldr	r2, [pc, #232]	; (800b8a0 <TIM_Base_SetConfig+0x124>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d108      	bne.n	800b7ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a2f      	ldr	r2, [pc, #188]	; (800b890 <TIM_Base_SetConfig+0x114>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d02b      	beq.n	800b82e <TIM_Base_SetConfig+0xb2>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7dc:	d027      	beq.n	800b82e <TIM_Base_SetConfig+0xb2>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a2c      	ldr	r2, [pc, #176]	; (800b894 <TIM_Base_SetConfig+0x118>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d023      	beq.n	800b82e <TIM_Base_SetConfig+0xb2>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a2b      	ldr	r2, [pc, #172]	; (800b898 <TIM_Base_SetConfig+0x11c>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d01f      	beq.n	800b82e <TIM_Base_SetConfig+0xb2>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a2a      	ldr	r2, [pc, #168]	; (800b89c <TIM_Base_SetConfig+0x120>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d01b      	beq.n	800b82e <TIM_Base_SetConfig+0xb2>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a29      	ldr	r2, [pc, #164]	; (800b8a0 <TIM_Base_SetConfig+0x124>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d017      	beq.n	800b82e <TIM_Base_SetConfig+0xb2>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4a28      	ldr	r2, [pc, #160]	; (800b8a4 <TIM_Base_SetConfig+0x128>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d013      	beq.n	800b82e <TIM_Base_SetConfig+0xb2>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4a27      	ldr	r2, [pc, #156]	; (800b8a8 <TIM_Base_SetConfig+0x12c>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d00f      	beq.n	800b82e <TIM_Base_SetConfig+0xb2>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	4a26      	ldr	r2, [pc, #152]	; (800b8ac <TIM_Base_SetConfig+0x130>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d00b      	beq.n	800b82e <TIM_Base_SetConfig+0xb2>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	4a25      	ldr	r2, [pc, #148]	; (800b8b0 <TIM_Base_SetConfig+0x134>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d007      	beq.n	800b82e <TIM_Base_SetConfig+0xb2>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4a24      	ldr	r2, [pc, #144]	; (800b8b4 <TIM_Base_SetConfig+0x138>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d003      	beq.n	800b82e <TIM_Base_SetConfig+0xb2>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4a23      	ldr	r2, [pc, #140]	; (800b8b8 <TIM_Base_SetConfig+0x13c>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d108      	bne.n	800b840 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	689a      	ldr	r2, [r3, #8]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a0a      	ldr	r2, [pc, #40]	; (800b890 <TIM_Base_SetConfig+0x114>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d003      	beq.n	800b874 <TIM_Base_SetConfig+0xf8>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4a0c      	ldr	r2, [pc, #48]	; (800b8a0 <TIM_Base_SetConfig+0x124>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d103      	bne.n	800b87c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	691a      	ldr	r2, [r3, #16]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2201      	movs	r2, #1
 800b880:	615a      	str	r2, [r3, #20]
}
 800b882:	bf00      	nop
 800b884:	3714      	adds	r7, #20
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	40010000 	.word	0x40010000
 800b894:	40000400 	.word	0x40000400
 800b898:	40000800 	.word	0x40000800
 800b89c:	40000c00 	.word	0x40000c00
 800b8a0:	40010400 	.word	0x40010400
 800b8a4:	40014000 	.word	0x40014000
 800b8a8:	40014400 	.word	0x40014400
 800b8ac:	40014800 	.word	0x40014800
 800b8b0:	40001800 	.word	0x40001800
 800b8b4:	40001c00 	.word	0x40001c00
 800b8b8:	40002000 	.word	0x40002000

0800b8bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b087      	sub	sp, #28
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a1b      	ldr	r3, [r3, #32]
 800b8ca:	f023 0201 	bic.w	r2, r3, #1
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6a1b      	ldr	r3, [r3, #32]
 800b8d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	699b      	ldr	r3, [r3, #24]
 800b8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f023 0303 	bic.w	r3, r3, #3
 800b8f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	f023 0302 	bic.w	r3, r3, #2
 800b904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	697a      	ldr	r2, [r7, #20]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a20      	ldr	r2, [pc, #128]	; (800b994 <TIM_OC1_SetConfig+0xd8>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d003      	beq.n	800b920 <TIM_OC1_SetConfig+0x64>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4a1f      	ldr	r2, [pc, #124]	; (800b998 <TIM_OC1_SetConfig+0xdc>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d10c      	bne.n	800b93a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	f023 0308 	bic.w	r3, r3, #8
 800b926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	697a      	ldr	r2, [r7, #20]
 800b92e:	4313      	orrs	r3, r2
 800b930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	f023 0304 	bic.w	r3, r3, #4
 800b938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a15      	ldr	r2, [pc, #84]	; (800b994 <TIM_OC1_SetConfig+0xd8>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d003      	beq.n	800b94a <TIM_OC1_SetConfig+0x8e>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a14      	ldr	r2, [pc, #80]	; (800b998 <TIM_OC1_SetConfig+0xdc>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d111      	bne.n	800b96e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	695b      	ldr	r3, [r3, #20]
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	4313      	orrs	r3, r2
 800b962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	693a      	ldr	r2, [r7, #16]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	693a      	ldr	r2, [r7, #16]
 800b972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	685a      	ldr	r2, [r3, #4]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	697a      	ldr	r2, [r7, #20]
 800b986:	621a      	str	r2, [r3, #32]
}
 800b988:	bf00      	nop
 800b98a:	371c      	adds	r7, #28
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr
 800b994:	40010000 	.word	0x40010000
 800b998:	40010400 	.word	0x40010400

0800b99c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b087      	sub	sp, #28
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6a1b      	ldr	r3, [r3, #32]
 800b9aa:	f023 0210 	bic.w	r2, r3, #16
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6a1b      	ldr	r3, [r3, #32]
 800b9b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	021b      	lsls	r3, r3, #8
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	f023 0320 	bic.w	r3, r3, #32
 800b9e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	011b      	lsls	r3, r3, #4
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a22      	ldr	r2, [pc, #136]	; (800ba80 <TIM_OC2_SetConfig+0xe4>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d003      	beq.n	800ba04 <TIM_OC2_SetConfig+0x68>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a21      	ldr	r2, [pc, #132]	; (800ba84 <TIM_OC2_SetConfig+0xe8>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d10d      	bne.n	800ba20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	011b      	lsls	r3, r3, #4
 800ba12:	697a      	ldr	r2, [r7, #20]
 800ba14:	4313      	orrs	r3, r2
 800ba16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4a17      	ldr	r2, [pc, #92]	; (800ba80 <TIM_OC2_SetConfig+0xe4>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d003      	beq.n	800ba30 <TIM_OC2_SetConfig+0x94>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a16      	ldr	r2, [pc, #88]	; (800ba84 <TIM_OC2_SetConfig+0xe8>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d113      	bne.n	800ba58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	695b      	ldr	r3, [r3, #20]
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	693a      	ldr	r2, [r7, #16]
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	693a      	ldr	r2, [r7, #16]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	693a      	ldr	r2, [r7, #16]
 800ba5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	685a      	ldr	r2, [r3, #4]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	621a      	str	r2, [r3, #32]
}
 800ba72:	bf00      	nop
 800ba74:	371c      	adds	r7, #28
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	40010000 	.word	0x40010000
 800ba84:	40010400 	.word	0x40010400

0800ba88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b087      	sub	sp, #28
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a1b      	ldr	r3, [r3, #32]
 800ba96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a1b      	ldr	r3, [r3, #32]
 800baa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	69db      	ldr	r3, [r3, #28]
 800baae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f023 0303 	bic.w	r3, r3, #3
 800babe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	021b      	lsls	r3, r3, #8
 800bad8:	697a      	ldr	r2, [r7, #20]
 800bada:	4313      	orrs	r3, r2
 800badc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4a21      	ldr	r2, [pc, #132]	; (800bb68 <TIM_OC3_SetConfig+0xe0>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d003      	beq.n	800baee <TIM_OC3_SetConfig+0x66>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4a20      	ldr	r2, [pc, #128]	; (800bb6c <TIM_OC3_SetConfig+0xe4>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d10d      	bne.n	800bb0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800baf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	68db      	ldr	r3, [r3, #12]
 800bafa:	021b      	lsls	r3, r3, #8
 800bafc:	697a      	ldr	r2, [r7, #20]
 800bafe:	4313      	orrs	r3, r2
 800bb00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a16      	ldr	r2, [pc, #88]	; (800bb68 <TIM_OC3_SetConfig+0xe0>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d003      	beq.n	800bb1a <TIM_OC3_SetConfig+0x92>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a15      	ldr	r2, [pc, #84]	; (800bb6c <TIM_OC3_SetConfig+0xe4>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d113      	bne.n	800bb42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	695b      	ldr	r3, [r3, #20]
 800bb2e:	011b      	lsls	r3, r3, #4
 800bb30:	693a      	ldr	r2, [r7, #16]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	699b      	ldr	r3, [r3, #24]
 800bb3a:	011b      	lsls	r3, r3, #4
 800bb3c:	693a      	ldr	r2, [r7, #16]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	693a      	ldr	r2, [r7, #16]
 800bb46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	685a      	ldr	r2, [r3, #4]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	697a      	ldr	r2, [r7, #20]
 800bb5a:	621a      	str	r2, [r3, #32]
}
 800bb5c:	bf00      	nop
 800bb5e:	371c      	adds	r7, #28
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr
 800bb68:	40010000 	.word	0x40010000
 800bb6c:	40010400 	.word	0x40010400

0800bb70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b087      	sub	sp, #28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6a1b      	ldr	r3, [r3, #32]
 800bb7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6a1b      	ldr	r3, [r3, #32]
 800bb8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	69db      	ldr	r3, [r3, #28]
 800bb96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	021b      	lsls	r3, r3, #8
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bbba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	031b      	lsls	r3, r3, #12
 800bbc2:	693a      	ldr	r2, [r7, #16]
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4a12      	ldr	r2, [pc, #72]	; (800bc14 <TIM_OC4_SetConfig+0xa4>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d003      	beq.n	800bbd8 <TIM_OC4_SetConfig+0x68>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4a11      	ldr	r2, [pc, #68]	; (800bc18 <TIM_OC4_SetConfig+0xa8>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d109      	bne.n	800bbec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	695b      	ldr	r3, [r3, #20]
 800bbe4:	019b      	lsls	r3, r3, #6
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	697a      	ldr	r2, [r7, #20]
 800bbf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	685a      	ldr	r2, [r3, #4]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	693a      	ldr	r2, [r7, #16]
 800bc04:	621a      	str	r2, [r3, #32]
}
 800bc06:	bf00      	nop
 800bc08:	371c      	adds	r7, #28
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	40010000 	.word	0x40010000
 800bc18:	40010400 	.word	0x40010400

0800bc1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b087      	sub	sp, #28
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6a1b      	ldr	r3, [r3, #32]
 800bc2e:	f023 0201 	bic.w	r2, r3, #1
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	699b      	ldr	r3, [r3, #24]
 800bc3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6a1b      	ldr	r3, [r3, #32]
 800bc40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	4a28      	ldr	r2, [pc, #160]	; (800bce8 <TIM_TI1_SetConfig+0xcc>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d01b      	beq.n	800bc82 <TIM_TI1_SetConfig+0x66>
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc50:	d017      	beq.n	800bc82 <TIM_TI1_SetConfig+0x66>
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	4a25      	ldr	r2, [pc, #148]	; (800bcec <TIM_TI1_SetConfig+0xd0>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d013      	beq.n	800bc82 <TIM_TI1_SetConfig+0x66>
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	4a24      	ldr	r2, [pc, #144]	; (800bcf0 <TIM_TI1_SetConfig+0xd4>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d00f      	beq.n	800bc82 <TIM_TI1_SetConfig+0x66>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	4a23      	ldr	r2, [pc, #140]	; (800bcf4 <TIM_TI1_SetConfig+0xd8>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d00b      	beq.n	800bc82 <TIM_TI1_SetConfig+0x66>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	4a22      	ldr	r2, [pc, #136]	; (800bcf8 <TIM_TI1_SetConfig+0xdc>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d007      	beq.n	800bc82 <TIM_TI1_SetConfig+0x66>
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	4a21      	ldr	r2, [pc, #132]	; (800bcfc <TIM_TI1_SetConfig+0xe0>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d003      	beq.n	800bc82 <TIM_TI1_SetConfig+0x66>
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	4a20      	ldr	r2, [pc, #128]	; (800bd00 <TIM_TI1_SetConfig+0xe4>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d101      	bne.n	800bc86 <TIM_TI1_SetConfig+0x6a>
 800bc82:	2301      	movs	r3, #1
 800bc84:	e000      	b.n	800bc88 <TIM_TI1_SetConfig+0x6c>
 800bc86:	2300      	movs	r3, #0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d008      	beq.n	800bc9e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	f023 0303 	bic.w	r3, r3, #3
 800bc92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800bc94:	697a      	ldr	r2, [r7, #20]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	617b      	str	r3, [r7, #20]
 800bc9c:	e003      	b.n	800bca6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	f043 0301 	orr.w	r3, r3, #1
 800bca4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bcac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	011b      	lsls	r3, r3, #4
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	697a      	ldr	r2, [r7, #20]
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	f023 030a 	bic.w	r3, r3, #10
 800bcc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	f003 030a 	and.w	r3, r3, #10
 800bcc8:	693a      	ldr	r2, [r7, #16]
 800bcca:	4313      	orrs	r3, r2
 800bccc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	697a      	ldr	r2, [r7, #20]
 800bcd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	693a      	ldr	r2, [r7, #16]
 800bcd8:	621a      	str	r2, [r3, #32]
}
 800bcda:	bf00      	nop
 800bcdc:	371c      	adds	r7, #28
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	40010000 	.word	0x40010000
 800bcec:	40000400 	.word	0x40000400
 800bcf0:	40000800 	.word	0x40000800
 800bcf4:	40000c00 	.word	0x40000c00
 800bcf8:	40010400 	.word	0x40010400
 800bcfc:	40014000 	.word	0x40014000
 800bd00:	40001800 	.word	0x40001800

0800bd04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b087      	sub	sp, #28
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6a1b      	ldr	r3, [r3, #32]
 800bd14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6a1b      	ldr	r3, [r3, #32]
 800bd1a:	f023 0201 	bic.w	r2, r3, #1
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	699b      	ldr	r3, [r3, #24]
 800bd26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	011b      	lsls	r3, r3, #4
 800bd34:	693a      	ldr	r2, [r7, #16]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	f023 030a 	bic.w	r3, r3, #10
 800bd40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd42:	697a      	ldr	r2, [r7, #20]
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	4313      	orrs	r3, r2
 800bd48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	693a      	ldr	r2, [r7, #16]
 800bd4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	697a      	ldr	r2, [r7, #20]
 800bd54:	621a      	str	r2, [r3, #32]
}
 800bd56:	bf00      	nop
 800bd58:	371c      	adds	r7, #28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr

0800bd62 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bd62:	b480      	push	{r7}
 800bd64:	b087      	sub	sp, #28
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	60f8      	str	r0, [r7, #12]
 800bd6a:	60b9      	str	r1, [r7, #8]
 800bd6c:	607a      	str	r2, [r7, #4]
 800bd6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6a1b      	ldr	r3, [r3, #32]
 800bd74:	f023 0210 	bic.w	r2, r3, #16
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	699b      	ldr	r3, [r3, #24]
 800bd80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6a1b      	ldr	r3, [r3, #32]
 800bd86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	021b      	lsls	r3, r3, #8
 800bd94:	697a      	ldr	r2, [r7, #20]
 800bd96:	4313      	orrs	r3, r2
 800bd98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bda0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	031b      	lsls	r3, r3, #12
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	697a      	ldr	r2, [r7, #20]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bdb4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	011b      	lsls	r3, r3, #4
 800bdba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bdbe:	693a      	ldr	r2, [r7, #16]
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	693a      	ldr	r2, [r7, #16]
 800bdce:	621a      	str	r2, [r3, #32]
}
 800bdd0:	bf00      	nop
 800bdd2:	371c      	adds	r7, #28
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b087      	sub	sp, #28
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6a1b      	ldr	r3, [r3, #32]
 800bdec:	f023 0210 	bic.w	r2, r3, #16
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6a1b      	ldr	r3, [r3, #32]
 800bdfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	031b      	lsls	r3, r3, #12
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	4313      	orrs	r3, r2
 800be10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	011b      	lsls	r3, r3, #4
 800be1e:	693a      	ldr	r2, [r7, #16]
 800be20:	4313      	orrs	r3, r2
 800be22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	621a      	str	r2, [r3, #32]
}
 800be30:	bf00      	nop
 800be32:	371c      	adds	r7, #28
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b087      	sub	sp, #28
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
 800be48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6a1b      	ldr	r3, [r3, #32]
 800be4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	69db      	ldr	r3, [r3, #28]
 800be5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6a1b      	ldr	r3, [r3, #32]
 800be60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	f023 0303 	bic.w	r3, r3, #3
 800be68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800be6a:	697a      	ldr	r2, [r7, #20]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4313      	orrs	r3, r2
 800be70:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	011b      	lsls	r3, r3, #4
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	697a      	ldr	r2, [r7, #20]
 800be82:	4313      	orrs	r3, r2
 800be84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800be8c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	021b      	lsls	r3, r3, #8
 800be92:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800be96:	693a      	ldr	r2, [r7, #16]
 800be98:	4313      	orrs	r3, r2
 800be9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	697a      	ldr	r2, [r7, #20]
 800bea0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	693a      	ldr	r2, [r7, #16]
 800bea6:	621a      	str	r2, [r3, #32]
}
 800bea8:	bf00      	nop
 800beaa:	371c      	adds	r7, #28
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b087      	sub	sp, #28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
 800bec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	69db      	ldr	r3, [r3, #28]
 800bed2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6a1b      	ldr	r3, [r3, #32]
 800bed8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bee0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	021b      	lsls	r3, r3, #8
 800bee6:	697a      	ldr	r2, [r7, #20]
 800bee8:	4313      	orrs	r3, r2
 800beea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bef2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	031b      	lsls	r3, r3, #12
 800bef8:	b29b      	uxth	r3, r3
 800befa:	697a      	ldr	r2, [r7, #20]
 800befc:	4313      	orrs	r3, r2
 800befe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bf06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	031b      	lsls	r3, r3, #12
 800bf0c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bf10:	693a      	ldr	r2, [r7, #16]
 800bf12:	4313      	orrs	r3, r2
 800bf14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	697a      	ldr	r2, [r7, #20]
 800bf1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	693a      	ldr	r2, [r7, #16]
 800bf20:	621a      	str	r2, [r3, #32]
}
 800bf22:	bf00      	nop
 800bf24:	371c      	adds	r7, #28
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b085      	sub	sp, #20
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf46:	683a      	ldr	r2, [r7, #0]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	f043 0307 	orr.w	r3, r3, #7
 800bf50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	609a      	str	r2, [r3, #8]
}
 800bf58:	bf00      	nop
 800bf5a:	3714      	adds	r7, #20
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b087      	sub	sp, #28
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
 800bf70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	021a      	lsls	r2, r3, #8
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	431a      	orrs	r2, r3
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	697a      	ldr	r2, [r7, #20]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	697a      	ldr	r2, [r7, #20]
 800bf96:	609a      	str	r2, [r3, #8]
}
 800bf98:	bf00      	nop
 800bf9a:	371c      	adds	r7, #28
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b087      	sub	sp, #28
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	f003 031f 	and.w	r3, r3, #31
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	6a1a      	ldr	r2, [r3, #32]
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	43db      	mvns	r3, r3
 800bfc6:	401a      	ands	r2, r3
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6a1a      	ldr	r2, [r3, #32]
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	f003 031f 	and.w	r3, r3, #31
 800bfd6:	6879      	ldr	r1, [r7, #4]
 800bfd8:	fa01 f303 	lsl.w	r3, r1, r3
 800bfdc:	431a      	orrs	r2, r3
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	621a      	str	r2, [r3, #32]
}
 800bfe2:	bf00      	nop
 800bfe4:	371c      	adds	r7, #28
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
	...

0800bff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c000:	2b01      	cmp	r3, #1
 800c002:	d101      	bne.n	800c008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c004:	2302      	movs	r3, #2
 800c006:	e05a      	b.n	800c0be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2202      	movs	r2, #2
 800c014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c02e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	4313      	orrs	r3, r2
 800c038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68fa      	ldr	r2, [r7, #12]
 800c040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a21      	ldr	r2, [pc, #132]	; (800c0cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d022      	beq.n	800c092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c054:	d01d      	beq.n	800c092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a1d      	ldr	r2, [pc, #116]	; (800c0d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d018      	beq.n	800c092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a1b      	ldr	r2, [pc, #108]	; (800c0d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d013      	beq.n	800c092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a1a      	ldr	r2, [pc, #104]	; (800c0d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d00e      	beq.n	800c092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a18      	ldr	r2, [pc, #96]	; (800c0dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d009      	beq.n	800c092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a17      	ldr	r2, [pc, #92]	; (800c0e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d004      	beq.n	800c092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a15      	ldr	r2, [pc, #84]	; (800c0e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d10c      	bne.n	800c0ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	68ba      	ldr	r2, [r7, #8]
 800c0aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3714      	adds	r7, #20
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	40010000 	.word	0x40010000
 800c0d0:	40000400 	.word	0x40000400
 800c0d4:	40000800 	.word	0x40000800
 800c0d8:	40000c00 	.word	0x40000c00
 800c0dc:	40010400 	.word	0x40010400
 800c0e0:	40014000 	.word	0x40014000
 800c0e4:	40001800 	.word	0x40001800

0800c0e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d101      	bne.n	800c104 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c100:	2302      	movs	r3, #2
 800c102:	e03d      	b.n	800c180 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	4313      	orrs	r3, r2
 800c118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	4313      	orrs	r3, r2
 800c126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	4313      	orrs	r3, r2
 800c134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4313      	orrs	r3, r2
 800c142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	4313      	orrs	r3, r2
 800c150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	695b      	ldr	r3, [r3, #20]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	69db      	ldr	r3, [r3, #28]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3714      	adds	r7, #20
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c194:	bf00      	nop
 800c196:	370c      	adds	r7, #12
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1a8:	bf00      	nop
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e03f      	b.n	800c246 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d106      	bne.n	800c1e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7fa fd92 	bl	8006d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2224      	movs	r2, #36	; 0x24
 800c1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	68da      	ldr	r2, [r3, #12]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 fddf 	bl	800cdbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	691a      	ldr	r2, [r3, #16]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c20c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	695a      	ldr	r2, [r3, #20]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c21c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68da      	ldr	r2, [r3, #12]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c22c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2200      	movs	r2, #0
 800c232:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2220      	movs	r2, #32
 800c238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2220      	movs	r2, #32
 800c240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3708      	adds	r7, #8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b08a      	sub	sp, #40	; 0x28
 800c252:	af02      	add	r7, sp, #8
 800c254:	60f8      	str	r0, [r7, #12]
 800c256:	60b9      	str	r1, [r7, #8]
 800c258:	603b      	str	r3, [r7, #0]
 800c25a:	4613      	mov	r3, r2
 800c25c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c25e:	2300      	movs	r3, #0
 800c260:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	2b20      	cmp	r3, #32
 800c26c:	d17c      	bne.n	800c368 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d002      	beq.n	800c27a <HAL_UART_Transmit+0x2c>
 800c274:	88fb      	ldrh	r3, [r7, #6]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d101      	bne.n	800c27e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c27a:	2301      	movs	r3, #1
 800c27c:	e075      	b.n	800c36a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c284:	2b01      	cmp	r3, #1
 800c286:	d101      	bne.n	800c28c <HAL_UART_Transmit+0x3e>
 800c288:	2302      	movs	r3, #2
 800c28a:	e06e      	b.n	800c36a <HAL_UART_Transmit+0x11c>
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2201      	movs	r2, #1
 800c290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2200      	movs	r2, #0
 800c298:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2221      	movs	r2, #33	; 0x21
 800c29e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c2a2:	f7fa ff29 	bl	80070f8 <HAL_GetTick>
 800c2a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	88fa      	ldrh	r2, [r7, #6]
 800c2ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	88fa      	ldrh	r2, [r7, #6]
 800c2b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2bc:	d108      	bne.n	800c2d0 <HAL_UART_Transmit+0x82>
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	691b      	ldr	r3, [r3, #16]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d104      	bne.n	800c2d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	61bb      	str	r3, [r7, #24]
 800c2ce:	e003      	b.n	800c2d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c2e0:	e02a      	b.n	800c338 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	9300      	str	r3, [sp, #0]
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	2180      	movs	r1, #128	; 0x80
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f000 fb1f 	bl	800c930 <UART_WaitOnFlagUntilTimeout>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d001      	beq.n	800c2fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	e036      	b.n	800c36a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d10b      	bne.n	800c31a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	881b      	ldrh	r3, [r3, #0]
 800c306:	461a      	mov	r2, r3
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c310:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	3302      	adds	r3, #2
 800c316:	61bb      	str	r3, [r7, #24]
 800c318:	e007      	b.n	800c32a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	781a      	ldrb	r2, [r3, #0]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	3301      	adds	r3, #1
 800c328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c32e:	b29b      	uxth	r3, r3
 800c330:	3b01      	subs	r3, #1
 800c332:	b29a      	uxth	r2, r3
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1cf      	bne.n	800c2e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	2200      	movs	r2, #0
 800c34a:	2140      	movs	r1, #64	; 0x40
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f000 faef 	bl	800c930 <UART_WaitOnFlagUntilTimeout>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	d001      	beq.n	800c35c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c358:	2303      	movs	r3, #3
 800c35a:	e006      	b.n	800c36a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2220      	movs	r2, #32
 800c360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c364:	2300      	movs	r3, #0
 800c366:	e000      	b.n	800c36a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c368:	2302      	movs	r3, #2
  }
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3720      	adds	r7, #32
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c372:	b580      	push	{r7, lr}
 800c374:	b084      	sub	sp, #16
 800c376:	af00      	add	r7, sp, #0
 800c378:	60f8      	str	r0, [r7, #12]
 800c37a:	60b9      	str	r1, [r7, #8]
 800c37c:	4613      	mov	r3, r2
 800c37e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c386:	b2db      	uxtb	r3, r3
 800c388:	2b20      	cmp	r3, #32
 800c38a:	d11d      	bne.n	800c3c8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d002      	beq.n	800c398 <HAL_UART_Receive_IT+0x26>
 800c392:	88fb      	ldrh	r3, [r7, #6]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d101      	bne.n	800c39c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c398:	2301      	movs	r3, #1
 800c39a:	e016      	b.n	800c3ca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d101      	bne.n	800c3aa <HAL_UART_Receive_IT+0x38>
 800c3a6:	2302      	movs	r3, #2
 800c3a8:	e00f      	b.n	800c3ca <HAL_UART_Receive_IT+0x58>
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c3b8:	88fb      	ldrh	r3, [r7, #6]
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	68b9      	ldr	r1, [r7, #8]
 800c3be:	68f8      	ldr	r0, [r7, #12]
 800c3c0:	f000 fb24 	bl	800ca0c <UART_Start_Receive_IT>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	e000      	b.n	800c3ca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c3c8:	2302      	movs	r3, #2
  }
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
	...

0800c3d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b0ba      	sub	sp, #232	; 0xe8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	695b      	ldr	r3, [r3, #20]
 800c3f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c400:	2300      	movs	r3, #0
 800c402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c40a:	f003 030f 	and.w	r3, r3, #15
 800c40e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10f      	bne.n	800c43a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c41a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c41e:	f003 0320 	and.w	r3, r3, #32
 800c422:	2b00      	cmp	r3, #0
 800c424:	d009      	beq.n	800c43a <HAL_UART_IRQHandler+0x66>
 800c426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c42a:	f003 0320 	and.w	r3, r3, #32
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d003      	beq.n	800c43a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 fc07 	bl	800cc46 <UART_Receive_IT>
      return;
 800c438:	e256      	b.n	800c8e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c43a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c43e:	2b00      	cmp	r3, #0
 800c440:	f000 80de 	beq.w	800c600 <HAL_UART_IRQHandler+0x22c>
 800c444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c448:	f003 0301 	and.w	r3, r3, #1
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d106      	bne.n	800c45e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c454:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f000 80d1 	beq.w	800c600 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c45e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c462:	f003 0301 	and.w	r3, r3, #1
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00b      	beq.n	800c482 <HAL_UART_IRQHandler+0xae>
 800c46a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c46e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c472:	2b00      	cmp	r3, #0
 800c474:	d005      	beq.n	800c482 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c47a:	f043 0201 	orr.w	r2, r3, #1
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c486:	f003 0304 	and.w	r3, r3, #4
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00b      	beq.n	800c4a6 <HAL_UART_IRQHandler+0xd2>
 800c48e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c492:	f003 0301 	and.w	r3, r3, #1
 800c496:	2b00      	cmp	r3, #0
 800c498:	d005      	beq.n	800c4a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c49e:	f043 0202 	orr.w	r2, r3, #2
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c4a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4aa:	f003 0302 	and.w	r3, r3, #2
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00b      	beq.n	800c4ca <HAL_UART_IRQHandler+0xf6>
 800c4b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4b6:	f003 0301 	and.w	r3, r3, #1
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d005      	beq.n	800c4ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c2:	f043 0204 	orr.w	r2, r3, #4
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c4ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4ce:	f003 0308 	and.w	r3, r3, #8
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d011      	beq.n	800c4fa <HAL_UART_IRQHandler+0x126>
 800c4d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4da:	f003 0320 	and.w	r3, r3, #32
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d105      	bne.n	800c4ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c4e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4e6:	f003 0301 	and.w	r3, r3, #1
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d005      	beq.n	800c4fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f2:	f043 0208 	orr.w	r2, r3, #8
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f000 81ed 	beq.w	800c8de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c508:	f003 0320 	and.w	r3, r3, #32
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d008      	beq.n	800c522 <HAL_UART_IRQHandler+0x14e>
 800c510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c514:	f003 0320 	and.w	r3, r3, #32
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d002      	beq.n	800c522 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 fb92 	bl	800cc46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	695b      	ldr	r3, [r3, #20]
 800c528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c52c:	2b40      	cmp	r3, #64	; 0x40
 800c52e:	bf0c      	ite	eq
 800c530:	2301      	moveq	r3, #1
 800c532:	2300      	movne	r3, #0
 800c534:	b2db      	uxtb	r3, r3
 800c536:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c53e:	f003 0308 	and.w	r3, r3, #8
 800c542:	2b00      	cmp	r3, #0
 800c544:	d103      	bne.n	800c54e <HAL_UART_IRQHandler+0x17a>
 800c546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d04f      	beq.n	800c5ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 fa9a 	bl	800ca88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	695b      	ldr	r3, [r3, #20]
 800c55a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c55e:	2b40      	cmp	r3, #64	; 0x40
 800c560:	d141      	bne.n	800c5e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	3314      	adds	r3, #20
 800c568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c56c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c570:	e853 3f00 	ldrex	r3, [r3]
 800c574:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c57c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c580:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	3314      	adds	r3, #20
 800c58a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c58e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c592:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c596:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c59a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c59e:	e841 2300 	strex	r3, r2, [r1]
 800c5a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c5a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1d9      	bne.n	800c562 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d013      	beq.n	800c5de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ba:	4a7d      	ldr	r2, [pc, #500]	; (800c7b0 <HAL_UART_IRQHandler+0x3dc>)
 800c5bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7fa ff49 	bl	800745a <HAL_DMA_Abort_IT>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d016      	beq.n	800c5fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c5d8:	4610      	mov	r0, r2
 800c5da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5dc:	e00e      	b.n	800c5fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 f990 	bl	800c904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5e4:	e00a      	b.n	800c5fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f98c 	bl	800c904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5ec:	e006      	b.n	800c5fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 f988 	bl	800c904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c5fa:	e170      	b.n	800c8de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5fc:	bf00      	nop
    return;
 800c5fe:	e16e      	b.n	800c8de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c604:	2b01      	cmp	r3, #1
 800c606:	f040 814a 	bne.w	800c89e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c60a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c60e:	f003 0310 	and.w	r3, r3, #16
 800c612:	2b00      	cmp	r3, #0
 800c614:	f000 8143 	beq.w	800c89e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c61c:	f003 0310 	and.w	r3, r3, #16
 800c620:	2b00      	cmp	r3, #0
 800c622:	f000 813c 	beq.w	800c89e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c626:	2300      	movs	r3, #0
 800c628:	60bb      	str	r3, [r7, #8]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	60bb      	str	r3, [r7, #8]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	60bb      	str	r3, [r7, #8]
 800c63a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c646:	2b40      	cmp	r3, #64	; 0x40
 800c648:	f040 80b4 	bne.w	800c7b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c658:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f000 8140 	beq.w	800c8e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c666:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c66a:	429a      	cmp	r2, r3
 800c66c:	f080 8139 	bcs.w	800c8e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c676:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c67c:	69db      	ldr	r3, [r3, #28]
 800c67e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c682:	f000 8088 	beq.w	800c796 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	330c      	adds	r3, #12
 800c68c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c690:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c694:	e853 3f00 	ldrex	r3, [r3]
 800c698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c69c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c6a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	330c      	adds	r3, #12
 800c6ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c6b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c6b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c6be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c6c2:	e841 2300 	strex	r3, r2, [r1]
 800c6c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c6ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d1d9      	bne.n	800c686 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	3314      	adds	r3, #20
 800c6d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6dc:	e853 3f00 	ldrex	r3, [r3]
 800c6e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c6e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c6e4:	f023 0301 	bic.w	r3, r3, #1
 800c6e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	3314      	adds	r3, #20
 800c6f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c6f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c6fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c6fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c702:	e841 2300 	strex	r3, r2, [r1]
 800c706:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d1e1      	bne.n	800c6d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	3314      	adds	r3, #20
 800c714:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c718:	e853 3f00 	ldrex	r3, [r3]
 800c71c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c71e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	3314      	adds	r3, #20
 800c72e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c732:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c734:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c736:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c738:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c73a:	e841 2300 	strex	r3, r2, [r1]
 800c73e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c740:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1e3      	bne.n	800c70e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2220      	movs	r2, #32
 800c74a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	330c      	adds	r3, #12
 800c75a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c75e:	e853 3f00 	ldrex	r3, [r3]
 800c762:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c766:	f023 0310 	bic.w	r3, r3, #16
 800c76a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	330c      	adds	r3, #12
 800c774:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c778:	65ba      	str	r2, [r7, #88]	; 0x58
 800c77a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c77e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c780:	e841 2300 	strex	r3, r2, [r1]
 800c784:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1e3      	bne.n	800c754 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c790:	4618      	mov	r0, r3
 800c792:	f7fa fdf2 	bl	800737a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	1ad3      	subs	r3, r2, r3
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 f8b6 	bl	800c918 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c7ac:	e099      	b.n	800c8e2 <HAL_UART_IRQHandler+0x50e>
 800c7ae:	bf00      	nop
 800c7b0:	0800cb4f 	.word	0x0800cb4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	1ad3      	subs	r3, r2, r3
 800c7c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f000 808b 	beq.w	800c8e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c7d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f000 8086 	beq.w	800c8e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	330c      	adds	r3, #12
 800c7e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e4:	e853 3f00 	ldrex	r3, [r3]
 800c7e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c7f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	330c      	adds	r3, #12
 800c7fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c7fe:	647a      	str	r2, [r7, #68]	; 0x44
 800c800:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c802:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c804:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c806:	e841 2300 	strex	r3, r2, [r1]
 800c80a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1e3      	bne.n	800c7da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	3314      	adds	r3, #20
 800c818:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81c:	e853 3f00 	ldrex	r3, [r3]
 800c820:	623b      	str	r3, [r7, #32]
   return(result);
 800c822:	6a3b      	ldr	r3, [r7, #32]
 800c824:	f023 0301 	bic.w	r3, r3, #1
 800c828:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	3314      	adds	r3, #20
 800c832:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c836:	633a      	str	r2, [r7, #48]	; 0x30
 800c838:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c83c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c83e:	e841 2300 	strex	r3, r2, [r1]
 800c842:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c846:	2b00      	cmp	r3, #0
 800c848:	d1e3      	bne.n	800c812 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2220      	movs	r2, #32
 800c84e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2200      	movs	r2, #0
 800c856:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	330c      	adds	r3, #12
 800c85e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	e853 3f00 	ldrex	r3, [r3]
 800c866:	60fb      	str	r3, [r7, #12]
   return(result);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f023 0310 	bic.w	r3, r3, #16
 800c86e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	330c      	adds	r3, #12
 800c878:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c87c:	61fa      	str	r2, [r7, #28]
 800c87e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c880:	69b9      	ldr	r1, [r7, #24]
 800c882:	69fa      	ldr	r2, [r7, #28]
 800c884:	e841 2300 	strex	r3, r2, [r1]
 800c888:	617b      	str	r3, [r7, #20]
   return(result);
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1e3      	bne.n	800c858 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c890:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c894:	4619      	mov	r1, r3
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f83e 	bl	800c918 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c89c:	e023      	b.n	800c8e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d009      	beq.n	800c8be <HAL_UART_IRQHandler+0x4ea>
 800c8aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d003      	beq.n	800c8be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 f95d 	bl	800cb76 <UART_Transmit_IT>
    return;
 800c8bc:	e014      	b.n	800c8e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c8be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00e      	beq.n	800c8e8 <HAL_UART_IRQHandler+0x514>
 800c8ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d008      	beq.n	800c8e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 f99d 	bl	800cc16 <UART_EndTransmit_IT>
    return;
 800c8dc:	e004      	b.n	800c8e8 <HAL_UART_IRQHandler+0x514>
    return;
 800c8de:	bf00      	nop
 800c8e0:	e002      	b.n	800c8e8 <HAL_UART_IRQHandler+0x514>
      return;
 800c8e2:	bf00      	nop
 800c8e4:	e000      	b.n	800c8e8 <HAL_UART_IRQHandler+0x514>
      return;
 800c8e6:	bf00      	nop
  }
}
 800c8e8:	37e8      	adds	r7, #232	; 0xe8
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop

0800c8f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c90c:	bf00      	nop
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	460b      	mov	r3, r1
 800c922:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c924:	bf00      	nop
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b090      	sub	sp, #64	; 0x40
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	603b      	str	r3, [r7, #0]
 800c93c:	4613      	mov	r3, r2
 800c93e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c940:	e050      	b.n	800c9e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c948:	d04c      	beq.n	800c9e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c94a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d007      	beq.n	800c960 <UART_WaitOnFlagUntilTimeout+0x30>
 800c950:	f7fa fbd2 	bl	80070f8 <HAL_GetTick>
 800c954:	4602      	mov	r2, r0
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	1ad3      	subs	r3, r2, r3
 800c95a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d241      	bcs.n	800c9e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	330c      	adds	r3, #12
 800c966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	e853 3f00 	ldrex	r3, [r3]
 800c96e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c976:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	330c      	adds	r3, #12
 800c97e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c980:	637a      	str	r2, [r7, #52]	; 0x34
 800c982:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c984:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c988:	e841 2300 	strex	r3, r2, [r1]
 800c98c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c990:	2b00      	cmp	r3, #0
 800c992:	d1e5      	bne.n	800c960 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	3314      	adds	r3, #20
 800c99a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	e853 3f00 	ldrex	r3, [r3]
 800c9a2:	613b      	str	r3, [r7, #16]
   return(result);
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	f023 0301 	bic.w	r3, r3, #1
 800c9aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	3314      	adds	r3, #20
 800c9b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9b4:	623a      	str	r2, [r7, #32]
 800c9b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b8:	69f9      	ldr	r1, [r7, #28]
 800c9ba:	6a3a      	ldr	r2, [r7, #32]
 800c9bc:	e841 2300 	strex	r3, r2, [r1]
 800c9c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d1e5      	bne.n	800c994 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2220      	movs	r2, #32
 800c9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2220      	movs	r2, #32
 800c9d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c9e0:	2303      	movs	r3, #3
 800c9e2:	e00f      	b.n	800ca04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	4013      	ands	r3, r2
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	bf0c      	ite	eq
 800c9f4:	2301      	moveq	r3, #1
 800c9f6:	2300      	movne	r3, #0
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	79fb      	ldrb	r3, [r7, #7]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d09f      	beq.n	800c942 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ca02:	2300      	movs	r3, #0
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3740      	adds	r7, #64	; 0x40
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	4613      	mov	r3, r2
 800ca18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	88fa      	ldrh	r2, [r7, #6]
 800ca24:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	88fa      	ldrh	r2, [r7, #6]
 800ca2a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2222      	movs	r2, #34	; 0x22
 800ca36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d007      	beq.n	800ca5a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	68da      	ldr	r2, [r3, #12]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ca58:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	695a      	ldr	r2, [r3, #20]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f042 0201 	orr.w	r2, r2, #1
 800ca68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	68da      	ldr	r2, [r3, #12]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f042 0220 	orr.w	r2, r2, #32
 800ca78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ca7a:	2300      	movs	r3, #0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b095      	sub	sp, #84	; 0x54
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	330c      	adds	r3, #12
 800ca96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca9a:	e853 3f00 	ldrex	r3, [r3]
 800ca9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800caa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	330c      	adds	r3, #12
 800caae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cab0:	643a      	str	r2, [r7, #64]	; 0x40
 800cab2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cab6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cab8:	e841 2300 	strex	r3, r2, [r1]
 800cabc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d1e5      	bne.n	800ca90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	3314      	adds	r3, #20
 800caca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cacc:	6a3b      	ldr	r3, [r7, #32]
 800cace:	e853 3f00 	ldrex	r3, [r3]
 800cad2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	f023 0301 	bic.w	r3, r3, #1
 800cada:	64bb      	str	r3, [r7, #72]	; 0x48
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	3314      	adds	r3, #20
 800cae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cae4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800caea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caec:	e841 2300 	strex	r3, r2, [r1]
 800caf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1e5      	bne.n	800cac4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d119      	bne.n	800cb34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	330c      	adds	r3, #12
 800cb06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	e853 3f00 	ldrex	r3, [r3]
 800cb0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	f023 0310 	bic.w	r3, r3, #16
 800cb16:	647b      	str	r3, [r7, #68]	; 0x44
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	330c      	adds	r3, #12
 800cb1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb20:	61ba      	str	r2, [r7, #24]
 800cb22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb24:	6979      	ldr	r1, [r7, #20]
 800cb26:	69ba      	ldr	r2, [r7, #24]
 800cb28:	e841 2300 	strex	r3, r2, [r1]
 800cb2c:	613b      	str	r3, [r7, #16]
   return(result);
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1e5      	bne.n	800cb00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2220      	movs	r2, #32
 800cb38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cb42:	bf00      	nop
 800cb44:	3754      	adds	r7, #84	; 0x54
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr

0800cb4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b084      	sub	sp, #16
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2200      	movs	r2, #0
 800cb66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f7ff fecb 	bl	800c904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb6e:	bf00      	nop
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cb76:	b480      	push	{r7}
 800cb78:	b085      	sub	sp, #20
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	2b21      	cmp	r3, #33	; 0x21
 800cb88:	d13e      	bne.n	800cc08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb92:	d114      	bne.n	800cbbe <UART_Transmit_IT+0x48>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	691b      	ldr	r3, [r3, #16]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d110      	bne.n	800cbbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6a1b      	ldr	r3, [r3, #32]
 800cba0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	881b      	ldrh	r3, [r3, #0]
 800cba6:	461a      	mov	r2, r3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6a1b      	ldr	r3, [r3, #32]
 800cbb6:	1c9a      	adds	r2, r3, #2
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	621a      	str	r2, [r3, #32]
 800cbbc:	e008      	b.n	800cbd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a1b      	ldr	r3, [r3, #32]
 800cbc2:	1c59      	adds	r1, r3, #1
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	6211      	str	r1, [r2, #32]
 800cbc8:	781a      	ldrb	r2, [r3, #0]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	3b01      	subs	r3, #1
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	4619      	mov	r1, r3
 800cbde:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d10f      	bne.n	800cc04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	68da      	ldr	r2, [r3, #12]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cbf2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	68da      	ldr	r2, [r3, #12]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cc04:	2300      	movs	r3, #0
 800cc06:	e000      	b.n	800cc0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cc08:	2302      	movs	r3, #2
  }
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3714      	adds	r7, #20
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr

0800cc16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b082      	sub	sp, #8
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68da      	ldr	r2, [r3, #12]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2220      	movs	r2, #32
 800cc32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7ff fe5a 	bl	800c8f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cc3c:	2300      	movs	r3, #0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3708      	adds	r7, #8
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b08c      	sub	sp, #48	; 0x30
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	2b22      	cmp	r3, #34	; 0x22
 800cc58:	f040 80ab 	bne.w	800cdb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	689b      	ldr	r3, [r3, #8]
 800cc60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc64:	d117      	bne.n	800cc96 <UART_Receive_IT+0x50>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	691b      	ldr	r3, [r3, #16]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d113      	bne.n	800cc96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc84:	b29a      	uxth	r2, r3
 800cc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc8e:	1c9a      	adds	r2, r3, #2
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	629a      	str	r2, [r3, #40]	; 0x28
 800cc94:	e026      	b.n	800cce4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	689b      	ldr	r3, [r3, #8]
 800cca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cca8:	d007      	beq.n	800ccba <UART_Receive_IT+0x74>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d10a      	bne.n	800ccc8 <UART_Receive_IT+0x82>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	691b      	ldr	r3, [r3, #16]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d106      	bne.n	800ccc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	b2da      	uxtb	r2, r3
 800ccc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc4:	701a      	strb	r2, [r3, #0]
 800ccc6:	e008      	b.n	800ccda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	b2db      	uxtb	r3, r3
 800ccd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccd4:	b2da      	uxtb	r2, r3
 800ccd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccde:	1c5a      	adds	r2, r3, #1
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	3b01      	subs	r3, #1
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d15a      	bne.n	800cdae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	68da      	ldr	r2, [r3, #12]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f022 0220 	bic.w	r2, r2, #32
 800cd06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	68da      	ldr	r2, [r3, #12]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	695a      	ldr	r2, [r3, #20]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f022 0201 	bic.w	r2, r2, #1
 800cd26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2220      	movs	r2, #32
 800cd2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d135      	bne.n	800cda4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	330c      	adds	r3, #12
 800cd44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	e853 3f00 	ldrex	r3, [r3]
 800cd4c:	613b      	str	r3, [r7, #16]
   return(result);
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	f023 0310 	bic.w	r3, r3, #16
 800cd54:	627b      	str	r3, [r7, #36]	; 0x24
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	330c      	adds	r3, #12
 800cd5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd5e:	623a      	str	r2, [r7, #32]
 800cd60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd62:	69f9      	ldr	r1, [r7, #28]
 800cd64:	6a3a      	ldr	r2, [r7, #32]
 800cd66:	e841 2300 	strex	r3, r2, [r1]
 800cd6a:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1e5      	bne.n	800cd3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f003 0310 	and.w	r3, r3, #16
 800cd7c:	2b10      	cmp	r3, #16
 800cd7e:	d10a      	bne.n	800cd96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cd80:	2300      	movs	r3, #0
 800cd82:	60fb      	str	r3, [r7, #12]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	60fb      	str	r3, [r7, #12]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	60fb      	str	r3, [r7, #12]
 800cd94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f7ff fdbb 	bl	800c918 <HAL_UARTEx_RxEventCallback>
 800cda2:	e002      	b.n	800cdaa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f7f4 fd01 	bl	80017ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	e002      	b.n	800cdb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	e000      	b.n	800cdb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800cdb2:	2302      	movs	r3, #2
  }
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3730      	adds	r7, #48	; 0x30
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cdbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cdc0:	b0c0      	sub	sp, #256	; 0x100
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cdc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	691b      	ldr	r3, [r3, #16]
 800cdd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cdd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdd8:	68d9      	ldr	r1, [r3, #12]
 800cdda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	ea40 0301 	orr.w	r3, r0, r1
 800cde4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cde6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdea:	689a      	ldr	r2, [r3, #8]
 800cdec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdf0:	691b      	ldr	r3, [r3, #16]
 800cdf2:	431a      	orrs	r2, r3
 800cdf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdf8:	695b      	ldr	r3, [r3, #20]
 800cdfa:	431a      	orrs	r2, r3
 800cdfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce00:	69db      	ldr	r3, [r3, #28]
 800ce02:	4313      	orrs	r3, r2
 800ce04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ce08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ce14:	f021 010c 	bic.w	r1, r1, #12
 800ce18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ce22:	430b      	orrs	r3, r1
 800ce24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	695b      	ldr	r3, [r3, #20]
 800ce2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ce32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce36:	6999      	ldr	r1, [r3, #24]
 800ce38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	ea40 0301 	orr.w	r3, r0, r1
 800ce42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ce44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	4b8f      	ldr	r3, [pc, #572]	; (800d088 <UART_SetConfig+0x2cc>)
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d005      	beq.n	800ce5c <UART_SetConfig+0xa0>
 800ce50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	4b8d      	ldr	r3, [pc, #564]	; (800d08c <UART_SetConfig+0x2d0>)
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d104      	bne.n	800ce66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ce5c:	f7fd fcc4 	bl	800a7e8 <HAL_RCC_GetPCLK2Freq>
 800ce60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ce64:	e003      	b.n	800ce6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ce66:	f7fd fcab 	bl	800a7c0 <HAL_RCC_GetPCLK1Freq>
 800ce6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce72:	69db      	ldr	r3, [r3, #28]
 800ce74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce78:	f040 810c 	bne.w	800d094 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ce7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce80:	2200      	movs	r2, #0
 800ce82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ce86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ce8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ce8e:	4622      	mov	r2, r4
 800ce90:	462b      	mov	r3, r5
 800ce92:	1891      	adds	r1, r2, r2
 800ce94:	65b9      	str	r1, [r7, #88]	; 0x58
 800ce96:	415b      	adcs	r3, r3
 800ce98:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ce9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ce9e:	4621      	mov	r1, r4
 800cea0:	eb12 0801 	adds.w	r8, r2, r1
 800cea4:	4629      	mov	r1, r5
 800cea6:	eb43 0901 	adc.w	r9, r3, r1
 800ceaa:	f04f 0200 	mov.w	r2, #0
 800ceae:	f04f 0300 	mov.w	r3, #0
 800ceb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ceb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ceba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cebe:	4690      	mov	r8, r2
 800cec0:	4699      	mov	r9, r3
 800cec2:	4623      	mov	r3, r4
 800cec4:	eb18 0303 	adds.w	r3, r8, r3
 800cec8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cecc:	462b      	mov	r3, r5
 800cece:	eb49 0303 	adc.w	r3, r9, r3
 800ced2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ced6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cee2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cee6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ceea:	460b      	mov	r3, r1
 800ceec:	18db      	adds	r3, r3, r3
 800ceee:	653b      	str	r3, [r7, #80]	; 0x50
 800cef0:	4613      	mov	r3, r2
 800cef2:	eb42 0303 	adc.w	r3, r2, r3
 800cef6:	657b      	str	r3, [r7, #84]	; 0x54
 800cef8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cefc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cf00:	f7f3 fec2 	bl	8000c88 <__aeabi_uldivmod>
 800cf04:	4602      	mov	r2, r0
 800cf06:	460b      	mov	r3, r1
 800cf08:	4b61      	ldr	r3, [pc, #388]	; (800d090 <UART_SetConfig+0x2d4>)
 800cf0a:	fba3 2302 	umull	r2, r3, r3, r2
 800cf0e:	095b      	lsrs	r3, r3, #5
 800cf10:	011c      	lsls	r4, r3, #4
 800cf12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf16:	2200      	movs	r2, #0
 800cf18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cf1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cf20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cf24:	4642      	mov	r2, r8
 800cf26:	464b      	mov	r3, r9
 800cf28:	1891      	adds	r1, r2, r2
 800cf2a:	64b9      	str	r1, [r7, #72]	; 0x48
 800cf2c:	415b      	adcs	r3, r3
 800cf2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cf34:	4641      	mov	r1, r8
 800cf36:	eb12 0a01 	adds.w	sl, r2, r1
 800cf3a:	4649      	mov	r1, r9
 800cf3c:	eb43 0b01 	adc.w	fp, r3, r1
 800cf40:	f04f 0200 	mov.w	r2, #0
 800cf44:	f04f 0300 	mov.w	r3, #0
 800cf48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cf4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cf50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf54:	4692      	mov	sl, r2
 800cf56:	469b      	mov	fp, r3
 800cf58:	4643      	mov	r3, r8
 800cf5a:	eb1a 0303 	adds.w	r3, sl, r3
 800cf5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cf62:	464b      	mov	r3, r9
 800cf64:	eb4b 0303 	adc.w	r3, fp, r3
 800cf68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cf6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cf78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cf7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cf80:	460b      	mov	r3, r1
 800cf82:	18db      	adds	r3, r3, r3
 800cf84:	643b      	str	r3, [r7, #64]	; 0x40
 800cf86:	4613      	mov	r3, r2
 800cf88:	eb42 0303 	adc.w	r3, r2, r3
 800cf8c:	647b      	str	r3, [r7, #68]	; 0x44
 800cf8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cf92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cf96:	f7f3 fe77 	bl	8000c88 <__aeabi_uldivmod>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	4611      	mov	r1, r2
 800cfa0:	4b3b      	ldr	r3, [pc, #236]	; (800d090 <UART_SetConfig+0x2d4>)
 800cfa2:	fba3 2301 	umull	r2, r3, r3, r1
 800cfa6:	095b      	lsrs	r3, r3, #5
 800cfa8:	2264      	movs	r2, #100	; 0x64
 800cfaa:	fb02 f303 	mul.w	r3, r2, r3
 800cfae:	1acb      	subs	r3, r1, r3
 800cfb0:	00db      	lsls	r3, r3, #3
 800cfb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cfb6:	4b36      	ldr	r3, [pc, #216]	; (800d090 <UART_SetConfig+0x2d4>)
 800cfb8:	fba3 2302 	umull	r2, r3, r3, r2
 800cfbc:	095b      	lsrs	r3, r3, #5
 800cfbe:	005b      	lsls	r3, r3, #1
 800cfc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cfc4:	441c      	add	r4, r3
 800cfc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cfd0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cfd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cfd8:	4642      	mov	r2, r8
 800cfda:	464b      	mov	r3, r9
 800cfdc:	1891      	adds	r1, r2, r2
 800cfde:	63b9      	str	r1, [r7, #56]	; 0x38
 800cfe0:	415b      	adcs	r3, r3
 800cfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfe4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cfe8:	4641      	mov	r1, r8
 800cfea:	1851      	adds	r1, r2, r1
 800cfec:	6339      	str	r1, [r7, #48]	; 0x30
 800cfee:	4649      	mov	r1, r9
 800cff0:	414b      	adcs	r3, r1
 800cff2:	637b      	str	r3, [r7, #52]	; 0x34
 800cff4:	f04f 0200 	mov.w	r2, #0
 800cff8:	f04f 0300 	mov.w	r3, #0
 800cffc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d000:	4659      	mov	r1, fp
 800d002:	00cb      	lsls	r3, r1, #3
 800d004:	4651      	mov	r1, sl
 800d006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d00a:	4651      	mov	r1, sl
 800d00c:	00ca      	lsls	r2, r1, #3
 800d00e:	4610      	mov	r0, r2
 800d010:	4619      	mov	r1, r3
 800d012:	4603      	mov	r3, r0
 800d014:	4642      	mov	r2, r8
 800d016:	189b      	adds	r3, r3, r2
 800d018:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d01c:	464b      	mov	r3, r9
 800d01e:	460a      	mov	r2, r1
 800d020:	eb42 0303 	adc.w	r3, r2, r3
 800d024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d034:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d038:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d03c:	460b      	mov	r3, r1
 800d03e:	18db      	adds	r3, r3, r3
 800d040:	62bb      	str	r3, [r7, #40]	; 0x28
 800d042:	4613      	mov	r3, r2
 800d044:	eb42 0303 	adc.w	r3, r2, r3
 800d048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d04a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d04e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d052:	f7f3 fe19 	bl	8000c88 <__aeabi_uldivmod>
 800d056:	4602      	mov	r2, r0
 800d058:	460b      	mov	r3, r1
 800d05a:	4b0d      	ldr	r3, [pc, #52]	; (800d090 <UART_SetConfig+0x2d4>)
 800d05c:	fba3 1302 	umull	r1, r3, r3, r2
 800d060:	095b      	lsrs	r3, r3, #5
 800d062:	2164      	movs	r1, #100	; 0x64
 800d064:	fb01 f303 	mul.w	r3, r1, r3
 800d068:	1ad3      	subs	r3, r2, r3
 800d06a:	00db      	lsls	r3, r3, #3
 800d06c:	3332      	adds	r3, #50	; 0x32
 800d06e:	4a08      	ldr	r2, [pc, #32]	; (800d090 <UART_SetConfig+0x2d4>)
 800d070:	fba2 2303 	umull	r2, r3, r2, r3
 800d074:	095b      	lsrs	r3, r3, #5
 800d076:	f003 0207 	and.w	r2, r3, #7
 800d07a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4422      	add	r2, r4
 800d082:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d084:	e105      	b.n	800d292 <UART_SetConfig+0x4d6>
 800d086:	bf00      	nop
 800d088:	40011000 	.word	0x40011000
 800d08c:	40011400 	.word	0x40011400
 800d090:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d094:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d098:	2200      	movs	r2, #0
 800d09a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d09e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d0a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d0a6:	4642      	mov	r2, r8
 800d0a8:	464b      	mov	r3, r9
 800d0aa:	1891      	adds	r1, r2, r2
 800d0ac:	6239      	str	r1, [r7, #32]
 800d0ae:	415b      	adcs	r3, r3
 800d0b0:	627b      	str	r3, [r7, #36]	; 0x24
 800d0b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d0b6:	4641      	mov	r1, r8
 800d0b8:	1854      	adds	r4, r2, r1
 800d0ba:	4649      	mov	r1, r9
 800d0bc:	eb43 0501 	adc.w	r5, r3, r1
 800d0c0:	f04f 0200 	mov.w	r2, #0
 800d0c4:	f04f 0300 	mov.w	r3, #0
 800d0c8:	00eb      	lsls	r3, r5, #3
 800d0ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d0ce:	00e2      	lsls	r2, r4, #3
 800d0d0:	4614      	mov	r4, r2
 800d0d2:	461d      	mov	r5, r3
 800d0d4:	4643      	mov	r3, r8
 800d0d6:	18e3      	adds	r3, r4, r3
 800d0d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d0dc:	464b      	mov	r3, r9
 800d0de:	eb45 0303 	adc.w	r3, r5, r3
 800d0e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d0e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d0f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d0f6:	f04f 0200 	mov.w	r2, #0
 800d0fa:	f04f 0300 	mov.w	r3, #0
 800d0fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d102:	4629      	mov	r1, r5
 800d104:	008b      	lsls	r3, r1, #2
 800d106:	4621      	mov	r1, r4
 800d108:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d10c:	4621      	mov	r1, r4
 800d10e:	008a      	lsls	r2, r1, #2
 800d110:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d114:	f7f3 fdb8 	bl	8000c88 <__aeabi_uldivmod>
 800d118:	4602      	mov	r2, r0
 800d11a:	460b      	mov	r3, r1
 800d11c:	4b60      	ldr	r3, [pc, #384]	; (800d2a0 <UART_SetConfig+0x4e4>)
 800d11e:	fba3 2302 	umull	r2, r3, r3, r2
 800d122:	095b      	lsrs	r3, r3, #5
 800d124:	011c      	lsls	r4, r3, #4
 800d126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d12a:	2200      	movs	r2, #0
 800d12c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d130:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d134:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d138:	4642      	mov	r2, r8
 800d13a:	464b      	mov	r3, r9
 800d13c:	1891      	adds	r1, r2, r2
 800d13e:	61b9      	str	r1, [r7, #24]
 800d140:	415b      	adcs	r3, r3
 800d142:	61fb      	str	r3, [r7, #28]
 800d144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d148:	4641      	mov	r1, r8
 800d14a:	1851      	adds	r1, r2, r1
 800d14c:	6139      	str	r1, [r7, #16]
 800d14e:	4649      	mov	r1, r9
 800d150:	414b      	adcs	r3, r1
 800d152:	617b      	str	r3, [r7, #20]
 800d154:	f04f 0200 	mov.w	r2, #0
 800d158:	f04f 0300 	mov.w	r3, #0
 800d15c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d160:	4659      	mov	r1, fp
 800d162:	00cb      	lsls	r3, r1, #3
 800d164:	4651      	mov	r1, sl
 800d166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d16a:	4651      	mov	r1, sl
 800d16c:	00ca      	lsls	r2, r1, #3
 800d16e:	4610      	mov	r0, r2
 800d170:	4619      	mov	r1, r3
 800d172:	4603      	mov	r3, r0
 800d174:	4642      	mov	r2, r8
 800d176:	189b      	adds	r3, r3, r2
 800d178:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d17c:	464b      	mov	r3, r9
 800d17e:	460a      	mov	r2, r1
 800d180:	eb42 0303 	adc.w	r3, r2, r3
 800d184:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	2200      	movs	r2, #0
 800d190:	67bb      	str	r3, [r7, #120]	; 0x78
 800d192:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d194:	f04f 0200 	mov.w	r2, #0
 800d198:	f04f 0300 	mov.w	r3, #0
 800d19c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d1a0:	4649      	mov	r1, r9
 800d1a2:	008b      	lsls	r3, r1, #2
 800d1a4:	4641      	mov	r1, r8
 800d1a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d1aa:	4641      	mov	r1, r8
 800d1ac:	008a      	lsls	r2, r1, #2
 800d1ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d1b2:	f7f3 fd69 	bl	8000c88 <__aeabi_uldivmod>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	4b39      	ldr	r3, [pc, #228]	; (800d2a0 <UART_SetConfig+0x4e4>)
 800d1bc:	fba3 1302 	umull	r1, r3, r3, r2
 800d1c0:	095b      	lsrs	r3, r3, #5
 800d1c2:	2164      	movs	r1, #100	; 0x64
 800d1c4:	fb01 f303 	mul.w	r3, r1, r3
 800d1c8:	1ad3      	subs	r3, r2, r3
 800d1ca:	011b      	lsls	r3, r3, #4
 800d1cc:	3332      	adds	r3, #50	; 0x32
 800d1ce:	4a34      	ldr	r2, [pc, #208]	; (800d2a0 <UART_SetConfig+0x4e4>)
 800d1d0:	fba2 2303 	umull	r2, r3, r2, r3
 800d1d4:	095b      	lsrs	r3, r3, #5
 800d1d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d1da:	441c      	add	r4, r3
 800d1dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	673b      	str	r3, [r7, #112]	; 0x70
 800d1e4:	677a      	str	r2, [r7, #116]	; 0x74
 800d1e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d1ea:	4642      	mov	r2, r8
 800d1ec:	464b      	mov	r3, r9
 800d1ee:	1891      	adds	r1, r2, r2
 800d1f0:	60b9      	str	r1, [r7, #8]
 800d1f2:	415b      	adcs	r3, r3
 800d1f4:	60fb      	str	r3, [r7, #12]
 800d1f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d1fa:	4641      	mov	r1, r8
 800d1fc:	1851      	adds	r1, r2, r1
 800d1fe:	6039      	str	r1, [r7, #0]
 800d200:	4649      	mov	r1, r9
 800d202:	414b      	adcs	r3, r1
 800d204:	607b      	str	r3, [r7, #4]
 800d206:	f04f 0200 	mov.w	r2, #0
 800d20a:	f04f 0300 	mov.w	r3, #0
 800d20e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d212:	4659      	mov	r1, fp
 800d214:	00cb      	lsls	r3, r1, #3
 800d216:	4651      	mov	r1, sl
 800d218:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d21c:	4651      	mov	r1, sl
 800d21e:	00ca      	lsls	r2, r1, #3
 800d220:	4610      	mov	r0, r2
 800d222:	4619      	mov	r1, r3
 800d224:	4603      	mov	r3, r0
 800d226:	4642      	mov	r2, r8
 800d228:	189b      	adds	r3, r3, r2
 800d22a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d22c:	464b      	mov	r3, r9
 800d22e:	460a      	mov	r2, r1
 800d230:	eb42 0303 	adc.w	r3, r2, r3
 800d234:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	2200      	movs	r2, #0
 800d23e:	663b      	str	r3, [r7, #96]	; 0x60
 800d240:	667a      	str	r2, [r7, #100]	; 0x64
 800d242:	f04f 0200 	mov.w	r2, #0
 800d246:	f04f 0300 	mov.w	r3, #0
 800d24a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d24e:	4649      	mov	r1, r9
 800d250:	008b      	lsls	r3, r1, #2
 800d252:	4641      	mov	r1, r8
 800d254:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d258:	4641      	mov	r1, r8
 800d25a:	008a      	lsls	r2, r1, #2
 800d25c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d260:	f7f3 fd12 	bl	8000c88 <__aeabi_uldivmod>
 800d264:	4602      	mov	r2, r0
 800d266:	460b      	mov	r3, r1
 800d268:	4b0d      	ldr	r3, [pc, #52]	; (800d2a0 <UART_SetConfig+0x4e4>)
 800d26a:	fba3 1302 	umull	r1, r3, r3, r2
 800d26e:	095b      	lsrs	r3, r3, #5
 800d270:	2164      	movs	r1, #100	; 0x64
 800d272:	fb01 f303 	mul.w	r3, r1, r3
 800d276:	1ad3      	subs	r3, r2, r3
 800d278:	011b      	lsls	r3, r3, #4
 800d27a:	3332      	adds	r3, #50	; 0x32
 800d27c:	4a08      	ldr	r2, [pc, #32]	; (800d2a0 <UART_SetConfig+0x4e4>)
 800d27e:	fba2 2303 	umull	r2, r3, r2, r3
 800d282:	095b      	lsrs	r3, r3, #5
 800d284:	f003 020f 	and.w	r2, r3, #15
 800d288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4422      	add	r2, r4
 800d290:	609a      	str	r2, [r3, #8]
}
 800d292:	bf00      	nop
 800d294:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d298:	46bd      	mov	sp, r7
 800d29a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d29e:	bf00      	nop
 800d2a0:	51eb851f 	.word	0x51eb851f

0800d2a4 <__NVIC_SetPriority>:
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	6039      	str	r1, [r7, #0]
 800d2ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d2b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	db0a      	blt.n	800d2ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	b2da      	uxtb	r2, r3
 800d2bc:	490c      	ldr	r1, [pc, #48]	; (800d2f0 <__NVIC_SetPriority+0x4c>)
 800d2be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2c2:	0112      	lsls	r2, r2, #4
 800d2c4:	b2d2      	uxtb	r2, r2
 800d2c6:	440b      	add	r3, r1
 800d2c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d2cc:	e00a      	b.n	800d2e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	b2da      	uxtb	r2, r3
 800d2d2:	4908      	ldr	r1, [pc, #32]	; (800d2f4 <__NVIC_SetPriority+0x50>)
 800d2d4:	79fb      	ldrb	r3, [r7, #7]
 800d2d6:	f003 030f 	and.w	r3, r3, #15
 800d2da:	3b04      	subs	r3, #4
 800d2dc:	0112      	lsls	r2, r2, #4
 800d2de:	b2d2      	uxtb	r2, r2
 800d2e0:	440b      	add	r3, r1
 800d2e2:	761a      	strb	r2, [r3, #24]
}
 800d2e4:	bf00      	nop
 800d2e6:	370c      	adds	r7, #12
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr
 800d2f0:	e000e100 	.word	0xe000e100
 800d2f4:	e000ed00 	.word	0xe000ed00

0800d2f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	f06f 0004 	mvn.w	r0, #4
 800d302:	f7ff ffcf 	bl	800d2a4 <__NVIC_SetPriority>
#endif
}
 800d306:	bf00      	nop
 800d308:	bd80      	pop	{r7, pc}
	...

0800d30c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d312:	f3ef 8305 	mrs	r3, IPSR
 800d316:	603b      	str	r3, [r7, #0]
  return(result);
 800d318:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d003      	beq.n	800d326 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d31e:	f06f 0305 	mvn.w	r3, #5
 800d322:	607b      	str	r3, [r7, #4]
 800d324:	e00c      	b.n	800d340 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d326:	4b0a      	ldr	r3, [pc, #40]	; (800d350 <osKernelInitialize+0x44>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d105      	bne.n	800d33a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d32e:	4b08      	ldr	r3, [pc, #32]	; (800d350 <osKernelInitialize+0x44>)
 800d330:	2201      	movs	r2, #1
 800d332:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d334:	2300      	movs	r3, #0
 800d336:	607b      	str	r3, [r7, #4]
 800d338:	e002      	b.n	800d340 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d33a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d33e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d340:	687b      	ldr	r3, [r7, #4]
}
 800d342:	4618      	mov	r0, r3
 800d344:	370c      	adds	r7, #12
 800d346:	46bd      	mov	sp, r7
 800d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34c:	4770      	bx	lr
 800d34e:	bf00      	nop
 800d350:	2000086c 	.word	0x2000086c

0800d354 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d35a:	f3ef 8305 	mrs	r3, IPSR
 800d35e:	603b      	str	r3, [r7, #0]
  return(result);
 800d360:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d362:	2b00      	cmp	r3, #0
 800d364:	d003      	beq.n	800d36e <osKernelStart+0x1a>
    stat = osErrorISR;
 800d366:	f06f 0305 	mvn.w	r3, #5
 800d36a:	607b      	str	r3, [r7, #4]
 800d36c:	e010      	b.n	800d390 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d36e:	4b0b      	ldr	r3, [pc, #44]	; (800d39c <osKernelStart+0x48>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b01      	cmp	r3, #1
 800d374:	d109      	bne.n	800d38a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d376:	f7ff ffbf 	bl	800d2f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d37a:	4b08      	ldr	r3, [pc, #32]	; (800d39c <osKernelStart+0x48>)
 800d37c:	2202      	movs	r2, #2
 800d37e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d380:	f001 f912 	bl	800e5a8 <vTaskStartScheduler>
      stat = osOK;
 800d384:	2300      	movs	r3, #0
 800d386:	607b      	str	r3, [r7, #4]
 800d388:	e002      	b.n	800d390 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d38a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d38e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d390:	687b      	ldr	r3, [r7, #4]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3708      	adds	r7, #8
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	2000086c 	.word	0x2000086c

0800d3a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b08e      	sub	sp, #56	; 0x38
 800d3a4:	af04      	add	r7, sp, #16
 800d3a6:	60f8      	str	r0, [r7, #12]
 800d3a8:	60b9      	str	r1, [r7, #8]
 800d3aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3b0:	f3ef 8305 	mrs	r3, IPSR
 800d3b4:	617b      	str	r3, [r7, #20]
  return(result);
 800d3b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d17f      	bne.n	800d4bc <osThreadNew+0x11c>
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d07c      	beq.n	800d4bc <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800d3c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d3c6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d3c8:	2318      	movs	r3, #24
 800d3ca:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d3d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3d4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d045      	beq.n	800d468 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d002      	beq.n	800d3ea <osThreadNew+0x4a>
        name = attr->name;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	699b      	ldr	r3, [r3, #24]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d002      	beq.n	800d3f8 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	699b      	ldr	r3, [r3, #24]
 800d3f6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d008      	beq.n	800d410 <osThreadNew+0x70>
 800d3fe:	69fb      	ldr	r3, [r7, #28]
 800d400:	2b38      	cmp	r3, #56	; 0x38
 800d402:	d805      	bhi.n	800d410 <osThreadNew+0x70>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	f003 0301 	and.w	r3, r3, #1
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d001      	beq.n	800d414 <osThreadNew+0x74>
        return (NULL);
 800d410:	2300      	movs	r3, #0
 800d412:	e054      	b.n	800d4be <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	695b      	ldr	r3, [r3, #20]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d003      	beq.n	800d424 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	695b      	ldr	r3, [r3, #20]
 800d420:	089b      	lsrs	r3, r3, #2
 800d422:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	689b      	ldr	r3, [r3, #8]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d00e      	beq.n	800d44a <osThreadNew+0xaa>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	68db      	ldr	r3, [r3, #12]
 800d430:	2b5b      	cmp	r3, #91	; 0x5b
 800d432:	d90a      	bls.n	800d44a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d006      	beq.n	800d44a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	695b      	ldr	r3, [r3, #20]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d002      	beq.n	800d44a <osThreadNew+0xaa>
        mem = 1;
 800d444:	2301      	movs	r3, #1
 800d446:	61bb      	str	r3, [r7, #24]
 800d448:	e010      	b.n	800d46c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	689b      	ldr	r3, [r3, #8]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10c      	bne.n	800d46c <osThreadNew+0xcc>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	68db      	ldr	r3, [r3, #12]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d108      	bne.n	800d46c <osThreadNew+0xcc>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	691b      	ldr	r3, [r3, #16]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d104      	bne.n	800d46c <osThreadNew+0xcc>
          mem = 0;
 800d462:	2300      	movs	r3, #0
 800d464:	61bb      	str	r3, [r7, #24]
 800d466:	e001      	b.n	800d46c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800d468:	2300      	movs	r3, #0
 800d46a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d110      	bne.n	800d494 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d47a:	9202      	str	r2, [sp, #8]
 800d47c:	9301      	str	r3, [sp, #4]
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	9300      	str	r3, [sp, #0]
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	6a3a      	ldr	r2, [r7, #32]
 800d486:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f000 fe39 	bl	800e100 <xTaskCreateStatic>
 800d48e:	4603      	mov	r3, r0
 800d490:	613b      	str	r3, [r7, #16]
 800d492:	e013      	b.n	800d4bc <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d110      	bne.n	800d4bc <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d49a:	6a3b      	ldr	r3, [r7, #32]
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	f107 0310 	add.w	r3, r7, #16
 800d4a2:	9301      	str	r3, [sp, #4]
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f000 fe84 	bl	800e1ba <xTaskCreate>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d001      	beq.n	800d4bc <osThreadNew+0x11c>
            hTask = NULL;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d4bc:	693b      	ldr	r3, [r7, #16]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3728      	adds	r7, #40	; 0x28
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b084      	sub	sp, #16
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4ce:	f3ef 8305 	mrs	r3, IPSR
 800d4d2:	60bb      	str	r3, [r7, #8]
  return(result);
 800d4d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d003      	beq.n	800d4e2 <osDelay+0x1c>
    stat = osErrorISR;
 800d4da:	f06f 0305 	mvn.w	r3, #5
 800d4de:	60fb      	str	r3, [r7, #12]
 800d4e0:	e007      	b.n	800d4f2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d002      	beq.n	800d4f2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f001 f827 	bl	800e540 <vTaskDelay>
    }
  }

  return (stat);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3710      	adds	r7, #16
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b086      	sub	sp, #24
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d504:	f3ef 8305 	mrs	r3, IPSR
 800d508:	60fb      	str	r3, [r7, #12]
  return(result);
 800d50a:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d003      	beq.n	800d518 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800d510:	f06f 0305 	mvn.w	r3, #5
 800d514:	617b      	str	r3, [r7, #20]
 800d516:	e019      	b.n	800d54c <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800d518:	2300      	movs	r3, #0
 800d51a:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800d51c:	f001 f956 	bl	800e7cc <xTaskGetTickCount>
 800d520:	4603      	mov	r3, r0
 800d522:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	1ad3      	subs	r3, r2, r3
 800d52a:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d009      	beq.n	800d546 <osDelayUntil+0x4a>
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	2b00      	cmp	r3, #0
 800d536:	db06      	blt.n	800d546 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800d538:	f107 0308 	add.w	r3, r7, #8
 800d53c:	6939      	ldr	r1, [r7, #16]
 800d53e:	4618      	mov	r0, r3
 800d540:	f000 ff80 	bl	800e444 <vTaskDelayUntil>
 800d544:	e002      	b.n	800d54c <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800d546:	f06f 0303 	mvn.w	r3, #3
 800d54a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d54c:	697b      	ldr	r3, [r7, #20]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3718      	adds	r7, #24
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
	...

0800d558 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d558:	b480      	push	{r7}
 800d55a:	b085      	sub	sp, #20
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	60b9      	str	r1, [r7, #8]
 800d562:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	4a07      	ldr	r2, [pc, #28]	; (800d584 <vApplicationGetIdleTaskMemory+0x2c>)
 800d568:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	4a06      	ldr	r2, [pc, #24]	; (800d588 <vApplicationGetIdleTaskMemory+0x30>)
 800d56e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d576:	601a      	str	r2, [r3, #0]
}
 800d578:	bf00      	nop
 800d57a:	3714      	adds	r7, #20
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr
 800d584:	20000870 	.word	0x20000870
 800d588:	200008cc 	.word	0x200008cc

0800d58c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d58c:	b480      	push	{r7}
 800d58e:	b085      	sub	sp, #20
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	4a07      	ldr	r2, [pc, #28]	; (800d5b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800d59c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	4a06      	ldr	r2, [pc, #24]	; (800d5bc <vApplicationGetTimerTaskMemory+0x30>)
 800d5a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d5aa:	601a      	str	r2, [r3, #0]
}
 800d5ac:	bf00      	nop
 800d5ae:	3714      	adds	r7, #20
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr
 800d5b8:	200010cc 	.word	0x200010cc
 800d5bc:	20001128 	.word	0x20001128

0800d5c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b083      	sub	sp, #12
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f103 0208 	add.w	r2, r3, #8
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f103 0208 	add.w	r2, r3, #8
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f103 0208 	add.w	r2, r3, #8
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d5f4:	bf00      	nop
 800d5f6:	370c      	adds	r7, #12
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d600:	b480      	push	{r7}
 800d602:	b083      	sub	sp, #12
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d60e:	bf00      	nop
 800d610:	370c      	adds	r7, #12
 800d612:	46bd      	mov	sp, r7
 800d614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d618:	4770      	bx	lr

0800d61a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d61a:	b480      	push	{r7}
 800d61c:	b085      	sub	sp, #20
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
 800d622:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	689a      	ldr	r2, [r3, #8]
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	683a      	ldr	r2, [r7, #0]
 800d63e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	683a      	ldr	r2, [r7, #0]
 800d644:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	1c5a      	adds	r2, r3, #1
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	601a      	str	r2, [r3, #0]
}
 800d656:	bf00      	nop
 800d658:	3714      	adds	r7, #20
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d662:	b480      	push	{r7}
 800d664:	b085      	sub	sp, #20
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
 800d66a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d678:	d103      	bne.n	800d682 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	691b      	ldr	r3, [r3, #16]
 800d67e:	60fb      	str	r3, [r7, #12]
 800d680:	e00c      	b.n	800d69c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	3308      	adds	r3, #8
 800d686:	60fb      	str	r3, [r7, #12]
 800d688:	e002      	b.n	800d690 <vListInsert+0x2e>
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	60fb      	str	r3, [r7, #12]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	68ba      	ldr	r2, [r7, #8]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d2f6      	bcs.n	800d68a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	685a      	ldr	r2, [r3, #4]
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	683a      	ldr	r2, [r7, #0]
 800d6aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	68fa      	ldr	r2, [r7, #12]
 800d6b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	683a      	ldr	r2, [r7, #0]
 800d6b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	1c5a      	adds	r2, r3, #1
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	601a      	str	r2, [r3, #0]
}
 800d6c8:	bf00      	nop
 800d6ca:	3714      	adds	r7, #20
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr

0800d6d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	691b      	ldr	r3, [r3, #16]
 800d6e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	687a      	ldr	r2, [r7, #4]
 800d6e8:	6892      	ldr	r2, [r2, #8]
 800d6ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	689b      	ldr	r3, [r3, #8]
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	6852      	ldr	r2, [r2, #4]
 800d6f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d103      	bne.n	800d708 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	689a      	ldr	r2, [r3, #8]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2200      	movs	r2, #0
 800d70c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	1e5a      	subs	r2, r3, #1
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	681b      	ldr	r3, [r3, #0]
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3714      	adds	r7, #20
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr

0800d728 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d10a      	bne.n	800d752 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d740:	f383 8811 	msr	BASEPRI, r3
 800d744:	f3bf 8f6f 	isb	sy
 800d748:	f3bf 8f4f 	dsb	sy
 800d74c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d74e:	bf00      	nop
 800d750:	e7fe      	b.n	800d750 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d752:	f002 f8cf 	bl	800f8f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d75e:	68f9      	ldr	r1, [r7, #12]
 800d760:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d762:	fb01 f303 	mul.w	r3, r1, r3
 800d766:	441a      	add	r2, r3
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2200      	movs	r2, #0
 800d770:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d782:	3b01      	subs	r3, #1
 800d784:	68f9      	ldr	r1, [r7, #12]
 800d786:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d788:	fb01 f303 	mul.w	r3, r1, r3
 800d78c:	441a      	add	r2, r3
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	22ff      	movs	r2, #255	; 0xff
 800d796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	22ff      	movs	r2, #255	; 0xff
 800d79e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d114      	bne.n	800d7d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	691b      	ldr	r3, [r3, #16]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d01a      	beq.n	800d7e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	3310      	adds	r3, #16
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f001 f981 	bl	800eabc <xTaskRemoveFromEventList>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d012      	beq.n	800d7e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d7c0:	4b0c      	ldr	r3, [pc, #48]	; (800d7f4 <xQueueGenericReset+0xcc>)
 800d7c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7c6:	601a      	str	r2, [r3, #0]
 800d7c8:	f3bf 8f4f 	dsb	sy
 800d7cc:	f3bf 8f6f 	isb	sy
 800d7d0:	e009      	b.n	800d7e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	3310      	adds	r3, #16
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7ff fef2 	bl	800d5c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	3324      	adds	r3, #36	; 0x24
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f7ff feed 	bl	800d5c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d7e6:	f002 f8b5 	bl	800f954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d7ea:	2301      	movs	r3, #1
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3710      	adds	r7, #16
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	e000ed04 	.word	0xe000ed04

0800d7f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b08e      	sub	sp, #56	; 0x38
 800d7fc:	af02      	add	r7, sp, #8
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	60b9      	str	r1, [r7, #8]
 800d802:	607a      	str	r2, [r7, #4]
 800d804:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d10a      	bne.n	800d822 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d810:	f383 8811 	msr	BASEPRI, r3
 800d814:	f3bf 8f6f 	isb	sy
 800d818:	f3bf 8f4f 	dsb	sy
 800d81c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d81e:	bf00      	nop
 800d820:	e7fe      	b.n	800d820 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d10a      	bne.n	800d83e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82c:	f383 8811 	msr	BASEPRI, r3
 800d830:	f3bf 8f6f 	isb	sy
 800d834:	f3bf 8f4f 	dsb	sy
 800d838:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d83a:	bf00      	nop
 800d83c:	e7fe      	b.n	800d83c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d002      	beq.n	800d84a <xQueueGenericCreateStatic+0x52>
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d001      	beq.n	800d84e <xQueueGenericCreateStatic+0x56>
 800d84a:	2301      	movs	r3, #1
 800d84c:	e000      	b.n	800d850 <xQueueGenericCreateStatic+0x58>
 800d84e:	2300      	movs	r3, #0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10a      	bne.n	800d86a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d858:	f383 8811 	msr	BASEPRI, r3
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	623b      	str	r3, [r7, #32]
}
 800d866:	bf00      	nop
 800d868:	e7fe      	b.n	800d868 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d102      	bne.n	800d876 <xQueueGenericCreateStatic+0x7e>
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d101      	bne.n	800d87a <xQueueGenericCreateStatic+0x82>
 800d876:	2301      	movs	r3, #1
 800d878:	e000      	b.n	800d87c <xQueueGenericCreateStatic+0x84>
 800d87a:	2300      	movs	r3, #0
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d10a      	bne.n	800d896 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d884:	f383 8811 	msr	BASEPRI, r3
 800d888:	f3bf 8f6f 	isb	sy
 800d88c:	f3bf 8f4f 	dsb	sy
 800d890:	61fb      	str	r3, [r7, #28]
}
 800d892:	bf00      	nop
 800d894:	e7fe      	b.n	800d894 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d896:	2350      	movs	r3, #80	; 0x50
 800d898:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	2b50      	cmp	r3, #80	; 0x50
 800d89e:	d00a      	beq.n	800d8b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	61bb      	str	r3, [r7, #24]
}
 800d8b2:	bf00      	nop
 800d8b4:	e7fe      	b.n	800d8b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d8b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00d      	beq.n	800d8de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d8ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	4613      	mov	r3, r2
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	68b9      	ldr	r1, [r7, #8]
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	f000 f805 	bl	800d8e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3730      	adds	r7, #48	; 0x30
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]
 800d8f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d103      	bne.n	800d904 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	69ba      	ldr	r2, [r7, #24]
 800d900:	601a      	str	r2, [r3, #0]
 800d902:	e002      	b.n	800d90a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	687a      	ldr	r2, [r7, #4]
 800d908:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	68ba      	ldr	r2, [r7, #8]
 800d914:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d916:	2101      	movs	r1, #1
 800d918:	69b8      	ldr	r0, [r7, #24]
 800d91a:	f7ff ff05 	bl	800d728 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	78fa      	ldrb	r2, [r7, #3]
 800d922:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d926:	bf00      	nop
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
	...

0800d930 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b08e      	sub	sp, #56	; 0x38
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	60b9      	str	r1, [r7, #8]
 800d93a:	607a      	str	r2, [r7, #4]
 800d93c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d93e:	2300      	movs	r3, #0
 800d940:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d10a      	bne.n	800d962 <xQueueGenericSend+0x32>
	__asm volatile
 800d94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d950:	f383 8811 	msr	BASEPRI, r3
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d95e:	bf00      	nop
 800d960:	e7fe      	b.n	800d960 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d103      	bne.n	800d970 <xQueueGenericSend+0x40>
 800d968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d101      	bne.n	800d974 <xQueueGenericSend+0x44>
 800d970:	2301      	movs	r3, #1
 800d972:	e000      	b.n	800d976 <xQueueGenericSend+0x46>
 800d974:	2300      	movs	r3, #0
 800d976:	2b00      	cmp	r3, #0
 800d978:	d10a      	bne.n	800d990 <xQueueGenericSend+0x60>
	__asm volatile
 800d97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97e:	f383 8811 	msr	BASEPRI, r3
 800d982:	f3bf 8f6f 	isb	sy
 800d986:	f3bf 8f4f 	dsb	sy
 800d98a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d98c:	bf00      	nop
 800d98e:	e7fe      	b.n	800d98e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	2b02      	cmp	r3, #2
 800d994:	d103      	bne.n	800d99e <xQueueGenericSend+0x6e>
 800d996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	d101      	bne.n	800d9a2 <xQueueGenericSend+0x72>
 800d99e:	2301      	movs	r3, #1
 800d9a0:	e000      	b.n	800d9a4 <xQueueGenericSend+0x74>
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d10a      	bne.n	800d9be <xQueueGenericSend+0x8e>
	__asm volatile
 800d9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ac:	f383 8811 	msr	BASEPRI, r3
 800d9b0:	f3bf 8f6f 	isb	sy
 800d9b4:	f3bf 8f4f 	dsb	sy
 800d9b8:	623b      	str	r3, [r7, #32]
}
 800d9ba:	bf00      	nop
 800d9bc:	e7fe      	b.n	800d9bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9be:	f001 fa3b 	bl	800ee38 <xTaskGetSchedulerState>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d102      	bne.n	800d9ce <xQueueGenericSend+0x9e>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d101      	bne.n	800d9d2 <xQueueGenericSend+0xa2>
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e000      	b.n	800d9d4 <xQueueGenericSend+0xa4>
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d10a      	bne.n	800d9ee <xQueueGenericSend+0xbe>
	__asm volatile
 800d9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9dc:	f383 8811 	msr	BASEPRI, r3
 800d9e0:	f3bf 8f6f 	isb	sy
 800d9e4:	f3bf 8f4f 	dsb	sy
 800d9e8:	61fb      	str	r3, [r7, #28]
}
 800d9ea:	bf00      	nop
 800d9ec:	e7fe      	b.n	800d9ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9ee:	f001 ff81 	bl	800f8f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d302      	bcc.n	800da04 <xQueueGenericSend+0xd4>
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	2b02      	cmp	r3, #2
 800da02:	d129      	bne.n	800da58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800da04:	683a      	ldr	r2, [r7, #0]
 800da06:	68b9      	ldr	r1, [r7, #8]
 800da08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da0a:	f000 fa0b 	bl	800de24 <prvCopyDataToQueue>
 800da0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da14:	2b00      	cmp	r3, #0
 800da16:	d010      	beq.n	800da3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1a:	3324      	adds	r3, #36	; 0x24
 800da1c:	4618      	mov	r0, r3
 800da1e:	f001 f84d 	bl	800eabc <xTaskRemoveFromEventList>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d013      	beq.n	800da50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800da28:	4b3f      	ldr	r3, [pc, #252]	; (800db28 <xQueueGenericSend+0x1f8>)
 800da2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da2e:	601a      	str	r2, [r3, #0]
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	e00a      	b.n	800da50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800da3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d007      	beq.n	800da50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800da40:	4b39      	ldr	r3, [pc, #228]	; (800db28 <xQueueGenericSend+0x1f8>)
 800da42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da46:	601a      	str	r2, [r3, #0]
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800da50:	f001 ff80 	bl	800f954 <vPortExitCritical>
				return pdPASS;
 800da54:	2301      	movs	r3, #1
 800da56:	e063      	b.n	800db20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d103      	bne.n	800da66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da5e:	f001 ff79 	bl	800f954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800da62:	2300      	movs	r3, #0
 800da64:	e05c      	b.n	800db20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d106      	bne.n	800da7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da6c:	f107 0314 	add.w	r3, r7, #20
 800da70:	4618      	mov	r0, r3
 800da72:	f001 f887 	bl	800eb84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da76:	2301      	movs	r3, #1
 800da78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da7a:	f001 ff6b 	bl	800f954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da7e:	f000 fdf9 	bl	800e674 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da82:	f001 ff37 	bl	800f8f4 <vPortEnterCritical>
 800da86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da8c:	b25b      	sxtb	r3, r3
 800da8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da92:	d103      	bne.n	800da9c <xQueueGenericSend+0x16c>
 800da94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da96:	2200      	movs	r2, #0
 800da98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800daa2:	b25b      	sxtb	r3, r3
 800daa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800daa8:	d103      	bne.n	800dab2 <xQueueGenericSend+0x182>
 800daaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daac:	2200      	movs	r2, #0
 800daae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dab2:	f001 ff4f 	bl	800f954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dab6:	1d3a      	adds	r2, r7, #4
 800dab8:	f107 0314 	add.w	r3, r7, #20
 800dabc:	4611      	mov	r1, r2
 800dabe:	4618      	mov	r0, r3
 800dac0:	f001 f876 	bl	800ebb0 <xTaskCheckForTimeOut>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d124      	bne.n	800db14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800daca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dacc:	f000 faa2 	bl	800e014 <prvIsQueueFull>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d018      	beq.n	800db08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad8:	3310      	adds	r3, #16
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	4611      	mov	r1, r2
 800dade:	4618      	mov	r0, r3
 800dae0:	f000 ff9c 	bl	800ea1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dae6:	f000 fa2d 	bl	800df44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800daea:	f000 fdd1 	bl	800e690 <xTaskResumeAll>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	f47f af7c 	bne.w	800d9ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800daf6:	4b0c      	ldr	r3, [pc, #48]	; (800db28 <xQueueGenericSend+0x1f8>)
 800daf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dafc:	601a      	str	r2, [r3, #0]
 800dafe:	f3bf 8f4f 	dsb	sy
 800db02:	f3bf 8f6f 	isb	sy
 800db06:	e772      	b.n	800d9ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800db08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db0a:	f000 fa1b 	bl	800df44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db0e:	f000 fdbf 	bl	800e690 <xTaskResumeAll>
 800db12:	e76c      	b.n	800d9ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800db14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db16:	f000 fa15 	bl	800df44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db1a:	f000 fdb9 	bl	800e690 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800db1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800db20:	4618      	mov	r0, r3
 800db22:	3738      	adds	r7, #56	; 0x38
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	e000ed04 	.word	0xe000ed04

0800db2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b090      	sub	sp, #64	; 0x40
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	607a      	str	r2, [r7, #4]
 800db38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800db3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db40:	2b00      	cmp	r3, #0
 800db42:	d10a      	bne.n	800db5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800db44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db48:	f383 8811 	msr	BASEPRI, r3
 800db4c:	f3bf 8f6f 	isb	sy
 800db50:	f3bf 8f4f 	dsb	sy
 800db54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800db56:	bf00      	nop
 800db58:	e7fe      	b.n	800db58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d103      	bne.n	800db68 <xQueueGenericSendFromISR+0x3c>
 800db60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db64:	2b00      	cmp	r3, #0
 800db66:	d101      	bne.n	800db6c <xQueueGenericSendFromISR+0x40>
 800db68:	2301      	movs	r3, #1
 800db6a:	e000      	b.n	800db6e <xQueueGenericSendFromISR+0x42>
 800db6c:	2300      	movs	r3, #0
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d10a      	bne.n	800db88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800db72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	627b      	str	r3, [r7, #36]	; 0x24
}
 800db84:	bf00      	nop
 800db86:	e7fe      	b.n	800db86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	2b02      	cmp	r3, #2
 800db8c:	d103      	bne.n	800db96 <xQueueGenericSendFromISR+0x6a>
 800db8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db92:	2b01      	cmp	r3, #1
 800db94:	d101      	bne.n	800db9a <xQueueGenericSendFromISR+0x6e>
 800db96:	2301      	movs	r3, #1
 800db98:	e000      	b.n	800db9c <xQueueGenericSendFromISR+0x70>
 800db9a:	2300      	movs	r3, #0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d10a      	bne.n	800dbb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800dba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba4:	f383 8811 	msr	BASEPRI, r3
 800dba8:	f3bf 8f6f 	isb	sy
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	623b      	str	r3, [r7, #32]
}
 800dbb2:	bf00      	nop
 800dbb4:	e7fe      	b.n	800dbb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbb6:	f001 ff7f 	bl	800fab8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dbba:	f3ef 8211 	mrs	r2, BASEPRI
 800dbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc2:	f383 8811 	msr	BASEPRI, r3
 800dbc6:	f3bf 8f6f 	isb	sy
 800dbca:	f3bf 8f4f 	dsb	sy
 800dbce:	61fa      	str	r2, [r7, #28]
 800dbd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dbd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dbd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d302      	bcc.n	800dbe8 <xQueueGenericSendFromISR+0xbc>
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	2b02      	cmp	r3, #2
 800dbe6:	d12f      	bne.n	800dc48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dbf8:	683a      	ldr	r2, [r7, #0]
 800dbfa:	68b9      	ldr	r1, [r7, #8]
 800dbfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dbfe:	f000 f911 	bl	800de24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dc02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800dc06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc0a:	d112      	bne.n	800dc32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d016      	beq.n	800dc42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc16:	3324      	adds	r3, #36	; 0x24
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f000 ff4f 	bl	800eabc <xTaskRemoveFromEventList>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d00e      	beq.n	800dc42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00b      	beq.n	800dc42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	601a      	str	r2, [r3, #0]
 800dc30:	e007      	b.n	800dc42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dc32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dc36:	3301      	adds	r3, #1
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	b25a      	sxtb	r2, r3
 800dc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dc42:	2301      	movs	r3, #1
 800dc44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800dc46:	e001      	b.n	800dc4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dc56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3740      	adds	r7, #64	; 0x40
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
	...

0800dc64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b08c      	sub	sp, #48	; 0x30
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dc70:	2300      	movs	r3, #0
 800dc72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d10a      	bne.n	800dc94 <xQueueReceive+0x30>
	__asm volatile
 800dc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc82:	f383 8811 	msr	BASEPRI, r3
 800dc86:	f3bf 8f6f 	isb	sy
 800dc8a:	f3bf 8f4f 	dsb	sy
 800dc8e:	623b      	str	r3, [r7, #32]
}
 800dc90:	bf00      	nop
 800dc92:	e7fe      	b.n	800dc92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d103      	bne.n	800dca2 <xQueueReceive+0x3e>
 800dc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d101      	bne.n	800dca6 <xQueueReceive+0x42>
 800dca2:	2301      	movs	r3, #1
 800dca4:	e000      	b.n	800dca8 <xQueueReceive+0x44>
 800dca6:	2300      	movs	r3, #0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d10a      	bne.n	800dcc2 <xQueueReceive+0x5e>
	__asm volatile
 800dcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb0:	f383 8811 	msr	BASEPRI, r3
 800dcb4:	f3bf 8f6f 	isb	sy
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	61fb      	str	r3, [r7, #28]
}
 800dcbe:	bf00      	nop
 800dcc0:	e7fe      	b.n	800dcc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dcc2:	f001 f8b9 	bl	800ee38 <xTaskGetSchedulerState>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d102      	bne.n	800dcd2 <xQueueReceive+0x6e>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d101      	bne.n	800dcd6 <xQueueReceive+0x72>
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e000      	b.n	800dcd8 <xQueueReceive+0x74>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d10a      	bne.n	800dcf2 <xQueueReceive+0x8e>
	__asm volatile
 800dcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce0:	f383 8811 	msr	BASEPRI, r3
 800dce4:	f3bf 8f6f 	isb	sy
 800dce8:	f3bf 8f4f 	dsb	sy
 800dcec:	61bb      	str	r3, [r7, #24]
}
 800dcee:	bf00      	nop
 800dcf0:	e7fe      	b.n	800dcf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dcf2:	f001 fdff 	bl	800f8f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d01f      	beq.n	800dd42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd02:	68b9      	ldr	r1, [r7, #8]
 800dd04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd06:	f000 f8f7 	bl	800def8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0c:	1e5a      	subs	r2, r3, #1
 800dd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd14:	691b      	ldr	r3, [r3, #16]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00f      	beq.n	800dd3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1c:	3310      	adds	r3, #16
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f000 fecc 	bl	800eabc <xTaskRemoveFromEventList>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d007      	beq.n	800dd3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dd2a:	4b3d      	ldr	r3, [pc, #244]	; (800de20 <xQueueReceive+0x1bc>)
 800dd2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd30:	601a      	str	r2, [r3, #0]
 800dd32:	f3bf 8f4f 	dsb	sy
 800dd36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dd3a:	f001 fe0b 	bl	800f954 <vPortExitCritical>
				return pdPASS;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	e069      	b.n	800de16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d103      	bne.n	800dd50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dd48:	f001 fe04 	bl	800f954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	e062      	b.n	800de16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d106      	bne.n	800dd64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd56:	f107 0310 	add.w	r3, r7, #16
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f000 ff12 	bl	800eb84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd60:	2301      	movs	r3, #1
 800dd62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd64:	f001 fdf6 	bl	800f954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd68:	f000 fc84 	bl	800e674 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd6c:	f001 fdc2 	bl	800f8f4 <vPortEnterCritical>
 800dd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd76:	b25b      	sxtb	r3, r3
 800dd78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd7c:	d103      	bne.n	800dd86 <xQueueReceive+0x122>
 800dd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd80:	2200      	movs	r2, #0
 800dd82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd8c:	b25b      	sxtb	r3, r3
 800dd8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd92:	d103      	bne.n	800dd9c <xQueueReceive+0x138>
 800dd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd96:	2200      	movs	r2, #0
 800dd98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd9c:	f001 fdda 	bl	800f954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dda0:	1d3a      	adds	r2, r7, #4
 800dda2:	f107 0310 	add.w	r3, r7, #16
 800dda6:	4611      	mov	r1, r2
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f000 ff01 	bl	800ebb0 <xTaskCheckForTimeOut>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d123      	bne.n	800ddfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ddb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddb6:	f000 f917 	bl	800dfe8 <prvIsQueueEmpty>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d017      	beq.n	800ddf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ddc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc2:	3324      	adds	r3, #36	; 0x24
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	4611      	mov	r1, r2
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f000 fe27 	bl	800ea1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ddce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddd0:	f000 f8b8 	bl	800df44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ddd4:	f000 fc5c 	bl	800e690 <xTaskResumeAll>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d189      	bne.n	800dcf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ddde:	4b10      	ldr	r3, [pc, #64]	; (800de20 <xQueueReceive+0x1bc>)
 800dde0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dde4:	601a      	str	r2, [r3, #0]
 800dde6:	f3bf 8f4f 	dsb	sy
 800ddea:	f3bf 8f6f 	isb	sy
 800ddee:	e780      	b.n	800dcf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ddf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddf2:	f000 f8a7 	bl	800df44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ddf6:	f000 fc4b 	bl	800e690 <xTaskResumeAll>
 800ddfa:	e77a      	b.n	800dcf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ddfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddfe:	f000 f8a1 	bl	800df44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de02:	f000 fc45 	bl	800e690 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de08:	f000 f8ee 	bl	800dfe8 <prvIsQueueEmpty>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	f43f af6f 	beq.w	800dcf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800de14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800de16:	4618      	mov	r0, r3
 800de18:	3730      	adds	r7, #48	; 0x30
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	e000ed04 	.word	0xe000ed04

0800de24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800de30:	2300      	movs	r3, #0
 800de32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d10d      	bne.n	800de5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d14d      	bne.n	800dee6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	4618      	mov	r0, r3
 800de50:	f001 f810 	bl	800ee74 <xTaskPriorityDisinherit>
 800de54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2200      	movs	r2, #0
 800de5a:	609a      	str	r2, [r3, #8]
 800de5c:	e043      	b.n	800dee6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d119      	bne.n	800de98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6858      	ldr	r0, [r3, #4]
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de6c:	461a      	mov	r2, r3
 800de6e:	68b9      	ldr	r1, [r7, #8]
 800de70:	f002 f876 	bl	800ff60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	685a      	ldr	r2, [r3, #4]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de7c:	441a      	add	r2, r3
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	685a      	ldr	r2, [r3, #4]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	689b      	ldr	r3, [r3, #8]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d32b      	bcc.n	800dee6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	605a      	str	r2, [r3, #4]
 800de96:	e026      	b.n	800dee6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	68d8      	ldr	r0, [r3, #12]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dea0:	461a      	mov	r2, r3
 800dea2:	68b9      	ldr	r1, [r7, #8]
 800dea4:	f002 f85c 	bl	800ff60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	68da      	ldr	r2, [r3, #12]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb0:	425b      	negs	r3, r3
 800deb2:	441a      	add	r2, r3
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	68da      	ldr	r2, [r3, #12]
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d207      	bcs.n	800ded4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	689a      	ldr	r2, [r3, #8]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800decc:	425b      	negs	r3, r3
 800dece:	441a      	add	r2, r3
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b02      	cmp	r3, #2
 800ded8:	d105      	bne.n	800dee6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d002      	beq.n	800dee6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	3b01      	subs	r3, #1
 800dee4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	1c5a      	adds	r2, r3, #1
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800deee:	697b      	ldr	r3, [r7, #20]
}
 800def0:	4618      	mov	r0, r3
 800def2:	3718      	adds	r7, #24
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df06:	2b00      	cmp	r3, #0
 800df08:	d018      	beq.n	800df3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	68da      	ldr	r2, [r3, #12]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df12:	441a      	add	r2, r3
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	68da      	ldr	r2, [r3, #12]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	429a      	cmp	r2, r3
 800df22:	d303      	bcc.n	800df2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681a      	ldr	r2, [r3, #0]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	68d9      	ldr	r1, [r3, #12]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df34:	461a      	mov	r2, r3
 800df36:	6838      	ldr	r0, [r7, #0]
 800df38:	f002 f812 	bl	800ff60 <memcpy>
	}
}
 800df3c:	bf00      	nop
 800df3e:	3708      	adds	r7, #8
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800df4c:	f001 fcd2 	bl	800f8f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df58:	e011      	b.n	800df7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d012      	beq.n	800df88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	3324      	adds	r3, #36	; 0x24
 800df66:	4618      	mov	r0, r3
 800df68:	f000 fda8 	bl	800eabc <xTaskRemoveFromEventList>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d001      	beq.n	800df76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800df72:	f000 fe7f 	bl	800ec74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800df76:	7bfb      	ldrb	r3, [r7, #15]
 800df78:	3b01      	subs	r3, #1
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df82:	2b00      	cmp	r3, #0
 800df84:	dce9      	bgt.n	800df5a <prvUnlockQueue+0x16>
 800df86:	e000      	b.n	800df8a <prvUnlockQueue+0x46>
					break;
 800df88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	22ff      	movs	r2, #255	; 0xff
 800df8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800df92:	f001 fcdf 	bl	800f954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800df96:	f001 fcad 	bl	800f8f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfa0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dfa2:	e011      	b.n	800dfc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	691b      	ldr	r3, [r3, #16]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d012      	beq.n	800dfd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	3310      	adds	r3, #16
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f000 fd83 	bl	800eabc <xTaskRemoveFromEventList>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d001      	beq.n	800dfc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dfbc:	f000 fe5a 	bl	800ec74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dfc0:	7bbb      	ldrb	r3, [r7, #14]
 800dfc2:	3b01      	subs	r3, #1
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dfc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	dce9      	bgt.n	800dfa4 <prvUnlockQueue+0x60>
 800dfd0:	e000      	b.n	800dfd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dfd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	22ff      	movs	r2, #255	; 0xff
 800dfd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dfdc:	f001 fcba 	bl	800f954 <vPortExitCritical>
}
 800dfe0:	bf00      	nop
 800dfe2:	3710      	adds	r7, #16
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dff0:	f001 fc80 	bl	800f8f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d102      	bne.n	800e002 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dffc:	2301      	movs	r3, #1
 800dffe:	60fb      	str	r3, [r7, #12]
 800e000:	e001      	b.n	800e006 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e002:	2300      	movs	r3, #0
 800e004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e006:	f001 fca5 	bl	800f954 <vPortExitCritical>

	return xReturn;
 800e00a:	68fb      	ldr	r3, [r7, #12]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3710      	adds	r7, #16
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e01c:	f001 fc6a 	bl	800f8f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e028:	429a      	cmp	r2, r3
 800e02a:	d102      	bne.n	800e032 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e02c:	2301      	movs	r3, #1
 800e02e:	60fb      	str	r3, [r7, #12]
 800e030:	e001      	b.n	800e036 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e032:	2300      	movs	r3, #0
 800e034:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e036:	f001 fc8d 	bl	800f954 <vPortExitCritical>

	return xReturn;
 800e03a:	68fb      	ldr	r3, [r7, #12]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3710      	adds	r7, #16
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e044:	b480      	push	{r7}
 800e046:	b085      	sub	sp, #20
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e04e:	2300      	movs	r3, #0
 800e050:	60fb      	str	r3, [r7, #12]
 800e052:	e014      	b.n	800e07e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e054:	4a0f      	ldr	r2, [pc, #60]	; (800e094 <vQueueAddToRegistry+0x50>)
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d10b      	bne.n	800e078 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e060:	490c      	ldr	r1, [pc, #48]	; (800e094 <vQueueAddToRegistry+0x50>)
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	683a      	ldr	r2, [r7, #0]
 800e066:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e06a:	4a0a      	ldr	r2, [pc, #40]	; (800e094 <vQueueAddToRegistry+0x50>)
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	00db      	lsls	r3, r3, #3
 800e070:	4413      	add	r3, r2
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e076:	e006      	b.n	800e086 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	3301      	adds	r3, #1
 800e07c:	60fb      	str	r3, [r7, #12]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2b07      	cmp	r3, #7
 800e082:	d9e7      	bls.n	800e054 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e084:	bf00      	nop
 800e086:	bf00      	nop
 800e088:	3714      	adds	r7, #20
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop
 800e094:	20002128 	.word	0x20002128

0800e098 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b086      	sub	sp, #24
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e0a8:	f001 fc24 	bl	800f8f4 <vPortEnterCritical>
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0b2:	b25b      	sxtb	r3, r3
 800e0b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0b8:	d103      	bne.n	800e0c2 <vQueueWaitForMessageRestricted+0x2a>
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0c8:	b25b      	sxtb	r3, r3
 800e0ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0ce:	d103      	bne.n	800e0d8 <vQueueWaitForMessageRestricted+0x40>
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0d8:	f001 fc3c 	bl	800f954 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d106      	bne.n	800e0f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	3324      	adds	r3, #36	; 0x24
 800e0e8:	687a      	ldr	r2, [r7, #4]
 800e0ea:	68b9      	ldr	r1, [r7, #8]
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f000 fcb9 	bl	800ea64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e0f2:	6978      	ldr	r0, [r7, #20]
 800e0f4:	f7ff ff26 	bl	800df44 <prvUnlockQueue>
	}
 800e0f8:	bf00      	nop
 800e0fa:	3718      	adds	r7, #24
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e100:	b580      	push	{r7, lr}
 800e102:	b08e      	sub	sp, #56	; 0x38
 800e104:	af04      	add	r7, sp, #16
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	607a      	str	r2, [r7, #4]
 800e10c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10a      	bne.n	800e12a <xTaskCreateStatic+0x2a>
	__asm volatile
 800e114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e118:	f383 8811 	msr	BASEPRI, r3
 800e11c:	f3bf 8f6f 	isb	sy
 800e120:	f3bf 8f4f 	dsb	sy
 800e124:	623b      	str	r3, [r7, #32]
}
 800e126:	bf00      	nop
 800e128:	e7fe      	b.n	800e128 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d10a      	bne.n	800e146 <xTaskCreateStatic+0x46>
	__asm volatile
 800e130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e134:	f383 8811 	msr	BASEPRI, r3
 800e138:	f3bf 8f6f 	isb	sy
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	61fb      	str	r3, [r7, #28]
}
 800e142:	bf00      	nop
 800e144:	e7fe      	b.n	800e144 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e146:	235c      	movs	r3, #92	; 0x5c
 800e148:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	2b5c      	cmp	r3, #92	; 0x5c
 800e14e:	d00a      	beq.n	800e166 <xTaskCreateStatic+0x66>
	__asm volatile
 800e150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e154:	f383 8811 	msr	BASEPRI, r3
 800e158:	f3bf 8f6f 	isb	sy
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	61bb      	str	r3, [r7, #24]
}
 800e162:	bf00      	nop
 800e164:	e7fe      	b.n	800e164 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e166:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d01e      	beq.n	800e1ac <xTaskCreateStatic+0xac>
 800e16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e170:	2b00      	cmp	r3, #0
 800e172:	d01b      	beq.n	800e1ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e176:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e17c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e180:	2202      	movs	r2, #2
 800e182:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e186:	2300      	movs	r3, #0
 800e188:	9303      	str	r3, [sp, #12]
 800e18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18c:	9302      	str	r3, [sp, #8]
 800e18e:	f107 0314 	add.w	r3, r7, #20
 800e192:	9301      	str	r3, [sp, #4]
 800e194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e196:	9300      	str	r3, [sp, #0]
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	68b9      	ldr	r1, [r7, #8]
 800e19e:	68f8      	ldr	r0, [r7, #12]
 800e1a0:	f000 f850 	bl	800e244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e1a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1a6:	f000 f8dd 	bl	800e364 <prvAddNewTaskToReadyList>
 800e1aa:	e001      	b.n	800e1b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e1b0:	697b      	ldr	r3, [r7, #20]
	}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3728      	adds	r7, #40	; 0x28
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}

0800e1ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e1ba:	b580      	push	{r7, lr}
 800e1bc:	b08c      	sub	sp, #48	; 0x30
 800e1be:	af04      	add	r7, sp, #16
 800e1c0:	60f8      	str	r0, [r7, #12]
 800e1c2:	60b9      	str	r1, [r7, #8]
 800e1c4:	603b      	str	r3, [r7, #0]
 800e1c6:	4613      	mov	r3, r2
 800e1c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e1ca:	88fb      	ldrh	r3, [r7, #6]
 800e1cc:	009b      	lsls	r3, r3, #2
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f001 fcb2 	bl	800fb38 <pvPortMalloc>
 800e1d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d00e      	beq.n	800e1fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e1dc:	205c      	movs	r0, #92	; 0x5c
 800e1de:	f001 fcab 	bl	800fb38 <pvPortMalloc>
 800e1e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d003      	beq.n	800e1f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e1ea:	69fb      	ldr	r3, [r7, #28]
 800e1ec:	697a      	ldr	r2, [r7, #20]
 800e1ee:	631a      	str	r2, [r3, #48]	; 0x30
 800e1f0:	e005      	b.n	800e1fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e1f2:	6978      	ldr	r0, [r7, #20]
 800e1f4:	f001 fd6c 	bl	800fcd0 <vPortFree>
 800e1f8:	e001      	b.n	800e1fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d017      	beq.n	800e234 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	2200      	movs	r2, #0
 800e208:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e20c:	88fa      	ldrh	r2, [r7, #6]
 800e20e:	2300      	movs	r3, #0
 800e210:	9303      	str	r3, [sp, #12]
 800e212:	69fb      	ldr	r3, [r7, #28]
 800e214:	9302      	str	r3, [sp, #8]
 800e216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e218:	9301      	str	r3, [sp, #4]
 800e21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21c:	9300      	str	r3, [sp, #0]
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	68b9      	ldr	r1, [r7, #8]
 800e222:	68f8      	ldr	r0, [r7, #12]
 800e224:	f000 f80e 	bl	800e244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e228:	69f8      	ldr	r0, [r7, #28]
 800e22a:	f000 f89b 	bl	800e364 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e22e:	2301      	movs	r3, #1
 800e230:	61bb      	str	r3, [r7, #24]
 800e232:	e002      	b.n	800e23a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e238:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e23a:	69bb      	ldr	r3, [r7, #24]
	}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3720      	adds	r7, #32
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b088      	sub	sp, #32
 800e248:	af00      	add	r7, sp, #0
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	60b9      	str	r1, [r7, #8]
 800e24e:	607a      	str	r2, [r7, #4]
 800e250:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e254:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	461a      	mov	r2, r3
 800e25c:	21a5      	movs	r1, #165	; 0xa5
 800e25e:	f001 fe8d 	bl	800ff7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e26c:	3b01      	subs	r3, #1
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	4413      	add	r3, r2
 800e272:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e274:	69bb      	ldr	r3, [r7, #24]
 800e276:	f023 0307 	bic.w	r3, r3, #7
 800e27a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e27c:	69bb      	ldr	r3, [r7, #24]
 800e27e:	f003 0307 	and.w	r3, r3, #7
 800e282:	2b00      	cmp	r3, #0
 800e284:	d00a      	beq.n	800e29c <prvInitialiseNewTask+0x58>
	__asm volatile
 800e286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28a:	f383 8811 	msr	BASEPRI, r3
 800e28e:	f3bf 8f6f 	isb	sy
 800e292:	f3bf 8f4f 	dsb	sy
 800e296:	617b      	str	r3, [r7, #20]
}
 800e298:	bf00      	nop
 800e29a:	e7fe      	b.n	800e29a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d01f      	beq.n	800e2e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	61fb      	str	r3, [r7, #28]
 800e2a6:	e012      	b.n	800e2ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e2a8:	68ba      	ldr	r2, [r7, #8]
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	4413      	add	r3, r2
 800e2ae:	7819      	ldrb	r1, [r3, #0]
 800e2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2b2:	69fb      	ldr	r3, [r7, #28]
 800e2b4:	4413      	add	r3, r2
 800e2b6:	3334      	adds	r3, #52	; 0x34
 800e2b8:	460a      	mov	r2, r1
 800e2ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e2bc:	68ba      	ldr	r2, [r7, #8]
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d006      	beq.n	800e2d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2c8:	69fb      	ldr	r3, [r7, #28]
 800e2ca:	3301      	adds	r3, #1
 800e2cc:	61fb      	str	r3, [r7, #28]
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	2b0f      	cmp	r3, #15
 800e2d2:	d9e9      	bls.n	800e2a8 <prvInitialiseNewTask+0x64>
 800e2d4:	e000      	b.n	800e2d8 <prvInitialiseNewTask+0x94>
			{
				break;
 800e2d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e2e0:	e003      	b.n	800e2ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ec:	2b37      	cmp	r3, #55	; 0x37
 800e2ee:	d901      	bls.n	800e2f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e2f0:	2337      	movs	r3, #55	; 0x37
 800e2f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e302:	2200      	movs	r2, #0
 800e304:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e308:	3304      	adds	r3, #4
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7ff f978 	bl	800d600 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e312:	3318      	adds	r3, #24
 800e314:	4618      	mov	r0, r3
 800e316:	f7ff f973 	bl	800d600 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e31e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e322:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e328:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e32e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e332:	2200      	movs	r2, #0
 800e334:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e338:	2200      	movs	r2, #0
 800e33a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e33e:	683a      	ldr	r2, [r7, #0]
 800e340:	68f9      	ldr	r1, [r7, #12]
 800e342:	69b8      	ldr	r0, [r7, #24]
 800e344:	f001 f9a6 	bl	800f694 <pxPortInitialiseStack>
 800e348:	4602      	mov	r2, r0
 800e34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e350:	2b00      	cmp	r3, #0
 800e352:	d002      	beq.n	800e35a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e358:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e35a:	bf00      	nop
 800e35c:	3720      	adds	r7, #32
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
	...

0800e364 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e36c:	f001 fac2 	bl	800f8f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e370:	4b2d      	ldr	r3, [pc, #180]	; (800e428 <prvAddNewTaskToReadyList+0xc4>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	3301      	adds	r3, #1
 800e376:	4a2c      	ldr	r2, [pc, #176]	; (800e428 <prvAddNewTaskToReadyList+0xc4>)
 800e378:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e37a:	4b2c      	ldr	r3, [pc, #176]	; (800e42c <prvAddNewTaskToReadyList+0xc8>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d109      	bne.n	800e396 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e382:	4a2a      	ldr	r2, [pc, #168]	; (800e42c <prvAddNewTaskToReadyList+0xc8>)
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e388:	4b27      	ldr	r3, [pc, #156]	; (800e428 <prvAddNewTaskToReadyList+0xc4>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	d110      	bne.n	800e3b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e390:	f000 fc94 	bl	800ecbc <prvInitialiseTaskLists>
 800e394:	e00d      	b.n	800e3b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e396:	4b26      	ldr	r3, [pc, #152]	; (800e430 <prvAddNewTaskToReadyList+0xcc>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d109      	bne.n	800e3b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e39e:	4b23      	ldr	r3, [pc, #140]	; (800e42c <prvAddNewTaskToReadyList+0xc8>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d802      	bhi.n	800e3b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e3ac:	4a1f      	ldr	r2, [pc, #124]	; (800e42c <prvAddNewTaskToReadyList+0xc8>)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e3b2:	4b20      	ldr	r3, [pc, #128]	; (800e434 <prvAddNewTaskToReadyList+0xd0>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	4a1e      	ldr	r2, [pc, #120]	; (800e434 <prvAddNewTaskToReadyList+0xd0>)
 800e3ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e3bc:	4b1d      	ldr	r3, [pc, #116]	; (800e434 <prvAddNewTaskToReadyList+0xd0>)
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3c8:	4b1b      	ldr	r3, [pc, #108]	; (800e438 <prvAddNewTaskToReadyList+0xd4>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d903      	bls.n	800e3d8 <prvAddNewTaskToReadyList+0x74>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d4:	4a18      	ldr	r2, [pc, #96]	; (800e438 <prvAddNewTaskToReadyList+0xd4>)
 800e3d6:	6013      	str	r3, [r2, #0]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3dc:	4613      	mov	r3, r2
 800e3de:	009b      	lsls	r3, r3, #2
 800e3e0:	4413      	add	r3, r2
 800e3e2:	009b      	lsls	r3, r3, #2
 800e3e4:	4a15      	ldr	r2, [pc, #84]	; (800e43c <prvAddNewTaskToReadyList+0xd8>)
 800e3e6:	441a      	add	r2, r3
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	3304      	adds	r3, #4
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	4610      	mov	r0, r2
 800e3f0:	f7ff f913 	bl	800d61a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e3f4:	f001 faae 	bl	800f954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e3f8:	4b0d      	ldr	r3, [pc, #52]	; (800e430 <prvAddNewTaskToReadyList+0xcc>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d00e      	beq.n	800e41e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e400:	4b0a      	ldr	r3, [pc, #40]	; (800e42c <prvAddNewTaskToReadyList+0xc8>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d207      	bcs.n	800e41e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e40e:	4b0c      	ldr	r3, [pc, #48]	; (800e440 <prvAddNewTaskToReadyList+0xdc>)
 800e410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e414:	601a      	str	r2, [r3, #0]
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e41e:	bf00      	nop
 800e420:	3708      	adds	r7, #8
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop
 800e428:	2000263c 	.word	0x2000263c
 800e42c:	20002168 	.word	0x20002168
 800e430:	20002648 	.word	0x20002648
 800e434:	20002658 	.word	0x20002658
 800e438:	20002644 	.word	0x20002644
 800e43c:	2000216c 	.word	0x2000216c
 800e440:	e000ed04 	.word	0xe000ed04

0800e444 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e444:	b580      	push	{r7, lr}
 800e446:	b08a      	sub	sp, #40	; 0x28
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e44e:	2300      	movs	r3, #0
 800e450:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d10a      	bne.n	800e46e <vTaskDelayUntil+0x2a>
	__asm volatile
 800e458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45c:	f383 8811 	msr	BASEPRI, r3
 800e460:	f3bf 8f6f 	isb	sy
 800e464:	f3bf 8f4f 	dsb	sy
 800e468:	617b      	str	r3, [r7, #20]
}
 800e46a:	bf00      	nop
 800e46c:	e7fe      	b.n	800e46c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d10a      	bne.n	800e48a <vTaskDelayUntil+0x46>
	__asm volatile
 800e474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e478:	f383 8811 	msr	BASEPRI, r3
 800e47c:	f3bf 8f6f 	isb	sy
 800e480:	f3bf 8f4f 	dsb	sy
 800e484:	613b      	str	r3, [r7, #16]
}
 800e486:	bf00      	nop
 800e488:	e7fe      	b.n	800e488 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e48a:	4b2a      	ldr	r3, [pc, #168]	; (800e534 <vTaskDelayUntil+0xf0>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d00a      	beq.n	800e4a8 <vTaskDelayUntil+0x64>
	__asm volatile
 800e492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e496:	f383 8811 	msr	BASEPRI, r3
 800e49a:	f3bf 8f6f 	isb	sy
 800e49e:	f3bf 8f4f 	dsb	sy
 800e4a2:	60fb      	str	r3, [r7, #12]
}
 800e4a4:	bf00      	nop
 800e4a6:	e7fe      	b.n	800e4a6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e4a8:	f000 f8e4 	bl	800e674 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e4ac:	4b22      	ldr	r3, [pc, #136]	; (800e538 <vTaskDelayUntil+0xf4>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	683a      	ldr	r2, [r7, #0]
 800e4b8:	4413      	add	r3, r2
 800e4ba:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	6a3a      	ldr	r2, [r7, #32]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d20b      	bcs.n	800e4de <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	69fa      	ldr	r2, [r7, #28]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d211      	bcs.n	800e4f4 <vTaskDelayUntil+0xb0>
 800e4d0:	69fa      	ldr	r2, [r7, #28]
 800e4d2:	6a3b      	ldr	r3, [r7, #32]
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d90d      	bls.n	800e4f4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e4d8:	2301      	movs	r3, #1
 800e4da:	627b      	str	r3, [r7, #36]	; 0x24
 800e4dc:	e00a      	b.n	800e4f4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	69fa      	ldr	r2, [r7, #28]
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d303      	bcc.n	800e4f0 <vTaskDelayUntil+0xac>
 800e4e8:	69fa      	ldr	r2, [r7, #28]
 800e4ea:	6a3b      	ldr	r3, [r7, #32]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d901      	bls.n	800e4f4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	69fa      	ldr	r2, [r7, #28]
 800e4f8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d006      	beq.n	800e50e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e500:	69fa      	ldr	r2, [r7, #28]
 800e502:	6a3b      	ldr	r3, [r7, #32]
 800e504:	1ad3      	subs	r3, r2, r3
 800e506:	2100      	movs	r1, #0
 800e508:	4618      	mov	r0, r3
 800e50a:	f000 fd21 	bl	800ef50 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e50e:	f000 f8bf 	bl	800e690 <xTaskResumeAll>
 800e512:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e514:	69bb      	ldr	r3, [r7, #24]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d107      	bne.n	800e52a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e51a:	4b08      	ldr	r3, [pc, #32]	; (800e53c <vTaskDelayUntil+0xf8>)
 800e51c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e520:	601a      	str	r2, [r3, #0]
 800e522:	f3bf 8f4f 	dsb	sy
 800e526:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e52a:	bf00      	nop
 800e52c:	3728      	adds	r7, #40	; 0x28
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	20002664 	.word	0x20002664
 800e538:	20002640 	.word	0x20002640
 800e53c:	e000ed04 	.word	0xe000ed04

0800e540 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e540:	b580      	push	{r7, lr}
 800e542:	b084      	sub	sp, #16
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e548:	2300      	movs	r3, #0
 800e54a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d017      	beq.n	800e582 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e552:	4b13      	ldr	r3, [pc, #76]	; (800e5a0 <vTaskDelay+0x60>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00a      	beq.n	800e570 <vTaskDelay+0x30>
	__asm volatile
 800e55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55e:	f383 8811 	msr	BASEPRI, r3
 800e562:	f3bf 8f6f 	isb	sy
 800e566:	f3bf 8f4f 	dsb	sy
 800e56a:	60bb      	str	r3, [r7, #8]
}
 800e56c:	bf00      	nop
 800e56e:	e7fe      	b.n	800e56e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e570:	f000 f880 	bl	800e674 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e574:	2100      	movs	r1, #0
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 fcea 	bl	800ef50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e57c:	f000 f888 	bl	800e690 <xTaskResumeAll>
 800e580:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d107      	bne.n	800e598 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e588:	4b06      	ldr	r3, [pc, #24]	; (800e5a4 <vTaskDelay+0x64>)
 800e58a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e58e:	601a      	str	r2, [r3, #0]
 800e590:	f3bf 8f4f 	dsb	sy
 800e594:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e598:	bf00      	nop
 800e59a:	3710      	adds	r7, #16
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	20002664 	.word	0x20002664
 800e5a4:	e000ed04 	.word	0xe000ed04

0800e5a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b08a      	sub	sp, #40	; 0x28
 800e5ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e5b6:	463a      	mov	r2, r7
 800e5b8:	1d39      	adds	r1, r7, #4
 800e5ba:	f107 0308 	add.w	r3, r7, #8
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fe ffca 	bl	800d558 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e5c4:	6839      	ldr	r1, [r7, #0]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	68ba      	ldr	r2, [r7, #8]
 800e5ca:	9202      	str	r2, [sp, #8]
 800e5cc:	9301      	str	r3, [sp, #4]
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	9300      	str	r3, [sp, #0]
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	460a      	mov	r2, r1
 800e5d6:	4921      	ldr	r1, [pc, #132]	; (800e65c <vTaskStartScheduler+0xb4>)
 800e5d8:	4821      	ldr	r0, [pc, #132]	; (800e660 <vTaskStartScheduler+0xb8>)
 800e5da:	f7ff fd91 	bl	800e100 <xTaskCreateStatic>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	4a20      	ldr	r2, [pc, #128]	; (800e664 <vTaskStartScheduler+0xbc>)
 800e5e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e5e4:	4b1f      	ldr	r3, [pc, #124]	; (800e664 <vTaskStartScheduler+0xbc>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d002      	beq.n	800e5f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	617b      	str	r3, [r7, #20]
 800e5f0:	e001      	b.n	800e5f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d102      	bne.n	800e602 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e5fc:	f000 fcfc 	bl	800eff8 <xTimerCreateTimerTask>
 800e600:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	2b01      	cmp	r3, #1
 800e606:	d116      	bne.n	800e636 <vTaskStartScheduler+0x8e>
	__asm volatile
 800e608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60c:	f383 8811 	msr	BASEPRI, r3
 800e610:	f3bf 8f6f 	isb	sy
 800e614:	f3bf 8f4f 	dsb	sy
 800e618:	613b      	str	r3, [r7, #16]
}
 800e61a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e61c:	4b12      	ldr	r3, [pc, #72]	; (800e668 <vTaskStartScheduler+0xc0>)
 800e61e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e622:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e624:	4b11      	ldr	r3, [pc, #68]	; (800e66c <vTaskStartScheduler+0xc4>)
 800e626:	2201      	movs	r2, #1
 800e628:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e62a:	4b11      	ldr	r3, [pc, #68]	; (800e670 <vTaskStartScheduler+0xc8>)
 800e62c:	2200      	movs	r2, #0
 800e62e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e630:	f001 f8be 	bl	800f7b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e634:	e00e      	b.n	800e654 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e63c:	d10a      	bne.n	800e654 <vTaskStartScheduler+0xac>
	__asm volatile
 800e63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e642:	f383 8811 	msr	BASEPRI, r3
 800e646:	f3bf 8f6f 	isb	sy
 800e64a:	f3bf 8f4f 	dsb	sy
 800e64e:	60fb      	str	r3, [r7, #12]
}
 800e650:	bf00      	nop
 800e652:	e7fe      	b.n	800e652 <vTaskStartScheduler+0xaa>
}
 800e654:	bf00      	nop
 800e656:	3718      	adds	r7, #24
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	08014934 	.word	0x08014934
 800e660:	0800ec8d 	.word	0x0800ec8d
 800e664:	20002660 	.word	0x20002660
 800e668:	2000265c 	.word	0x2000265c
 800e66c:	20002648 	.word	0x20002648
 800e670:	20002640 	.word	0x20002640

0800e674 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e674:	b480      	push	{r7}
 800e676:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e678:	4b04      	ldr	r3, [pc, #16]	; (800e68c <vTaskSuspendAll+0x18>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	3301      	adds	r3, #1
 800e67e:	4a03      	ldr	r2, [pc, #12]	; (800e68c <vTaskSuspendAll+0x18>)
 800e680:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e682:	bf00      	nop
 800e684:	46bd      	mov	sp, r7
 800e686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68a:	4770      	bx	lr
 800e68c:	20002664 	.word	0x20002664

0800e690 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e696:	2300      	movs	r3, #0
 800e698:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e69a:	2300      	movs	r3, #0
 800e69c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e69e:	4b42      	ldr	r3, [pc, #264]	; (800e7a8 <xTaskResumeAll+0x118>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d10a      	bne.n	800e6bc <xTaskResumeAll+0x2c>
	__asm volatile
 800e6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6aa:	f383 8811 	msr	BASEPRI, r3
 800e6ae:	f3bf 8f6f 	isb	sy
 800e6b2:	f3bf 8f4f 	dsb	sy
 800e6b6:	603b      	str	r3, [r7, #0]
}
 800e6b8:	bf00      	nop
 800e6ba:	e7fe      	b.n	800e6ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e6bc:	f001 f91a 	bl	800f8f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e6c0:	4b39      	ldr	r3, [pc, #228]	; (800e7a8 <xTaskResumeAll+0x118>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	3b01      	subs	r3, #1
 800e6c6:	4a38      	ldr	r2, [pc, #224]	; (800e7a8 <xTaskResumeAll+0x118>)
 800e6c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6ca:	4b37      	ldr	r3, [pc, #220]	; (800e7a8 <xTaskResumeAll+0x118>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d162      	bne.n	800e798 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e6d2:	4b36      	ldr	r3, [pc, #216]	; (800e7ac <xTaskResumeAll+0x11c>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d05e      	beq.n	800e798 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6da:	e02f      	b.n	800e73c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6dc:	4b34      	ldr	r3, [pc, #208]	; (800e7b0 <xTaskResumeAll+0x120>)
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	3318      	adds	r3, #24
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7fe fff3 	bl	800d6d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	3304      	adds	r3, #4
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fe ffee 	bl	800d6d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6fc:	4b2d      	ldr	r3, [pc, #180]	; (800e7b4 <xTaskResumeAll+0x124>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	429a      	cmp	r2, r3
 800e702:	d903      	bls.n	800e70c <xTaskResumeAll+0x7c>
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e708:	4a2a      	ldr	r2, [pc, #168]	; (800e7b4 <xTaskResumeAll+0x124>)
 800e70a:	6013      	str	r3, [r2, #0]
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e710:	4613      	mov	r3, r2
 800e712:	009b      	lsls	r3, r3, #2
 800e714:	4413      	add	r3, r2
 800e716:	009b      	lsls	r3, r3, #2
 800e718:	4a27      	ldr	r2, [pc, #156]	; (800e7b8 <xTaskResumeAll+0x128>)
 800e71a:	441a      	add	r2, r3
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	3304      	adds	r3, #4
 800e720:	4619      	mov	r1, r3
 800e722:	4610      	mov	r0, r2
 800e724:	f7fe ff79 	bl	800d61a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e72c:	4b23      	ldr	r3, [pc, #140]	; (800e7bc <xTaskResumeAll+0x12c>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e732:	429a      	cmp	r2, r3
 800e734:	d302      	bcc.n	800e73c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e736:	4b22      	ldr	r3, [pc, #136]	; (800e7c0 <xTaskResumeAll+0x130>)
 800e738:	2201      	movs	r2, #1
 800e73a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e73c:	4b1c      	ldr	r3, [pc, #112]	; (800e7b0 <xTaskResumeAll+0x120>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d1cb      	bne.n	800e6dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d001      	beq.n	800e74e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e74a:	f000 fb55 	bl	800edf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e74e:	4b1d      	ldr	r3, [pc, #116]	; (800e7c4 <xTaskResumeAll+0x134>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d010      	beq.n	800e77c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e75a:	f000 f847 	bl	800e7ec <xTaskIncrementTick>
 800e75e:	4603      	mov	r3, r0
 800e760:	2b00      	cmp	r3, #0
 800e762:	d002      	beq.n	800e76a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e764:	4b16      	ldr	r3, [pc, #88]	; (800e7c0 <xTaskResumeAll+0x130>)
 800e766:	2201      	movs	r2, #1
 800e768:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	3b01      	subs	r3, #1
 800e76e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d1f1      	bne.n	800e75a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e776:	4b13      	ldr	r3, [pc, #76]	; (800e7c4 <xTaskResumeAll+0x134>)
 800e778:	2200      	movs	r2, #0
 800e77a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e77c:	4b10      	ldr	r3, [pc, #64]	; (800e7c0 <xTaskResumeAll+0x130>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d009      	beq.n	800e798 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e784:	2301      	movs	r3, #1
 800e786:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e788:	4b0f      	ldr	r3, [pc, #60]	; (800e7c8 <xTaskResumeAll+0x138>)
 800e78a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e78e:	601a      	str	r2, [r3, #0]
 800e790:	f3bf 8f4f 	dsb	sy
 800e794:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e798:	f001 f8dc 	bl	800f954 <vPortExitCritical>

	return xAlreadyYielded;
 800e79c:	68bb      	ldr	r3, [r7, #8]
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3710      	adds	r7, #16
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	20002664 	.word	0x20002664
 800e7ac:	2000263c 	.word	0x2000263c
 800e7b0:	200025fc 	.word	0x200025fc
 800e7b4:	20002644 	.word	0x20002644
 800e7b8:	2000216c 	.word	0x2000216c
 800e7bc:	20002168 	.word	0x20002168
 800e7c0:	20002650 	.word	0x20002650
 800e7c4:	2000264c 	.word	0x2000264c
 800e7c8:	e000ed04 	.word	0xe000ed04

0800e7cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e7d2:	4b05      	ldr	r3, [pc, #20]	; (800e7e8 <xTaskGetTickCount+0x1c>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e7d8:	687b      	ldr	r3, [r7, #4]
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	370c      	adds	r7, #12
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr
 800e7e6:	bf00      	nop
 800e7e8:	20002640 	.word	0x20002640

0800e7ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b086      	sub	sp, #24
 800e7f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7f6:	4b4f      	ldr	r3, [pc, #316]	; (800e934 <xTaskIncrementTick+0x148>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	f040 808f 	bne.w	800e91e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e800:	4b4d      	ldr	r3, [pc, #308]	; (800e938 <xTaskIncrementTick+0x14c>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	3301      	adds	r3, #1
 800e806:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e808:	4a4b      	ldr	r2, [pc, #300]	; (800e938 <xTaskIncrementTick+0x14c>)
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d120      	bne.n	800e856 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e814:	4b49      	ldr	r3, [pc, #292]	; (800e93c <xTaskIncrementTick+0x150>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d00a      	beq.n	800e834 <xTaskIncrementTick+0x48>
	__asm volatile
 800e81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e822:	f383 8811 	msr	BASEPRI, r3
 800e826:	f3bf 8f6f 	isb	sy
 800e82a:	f3bf 8f4f 	dsb	sy
 800e82e:	603b      	str	r3, [r7, #0]
}
 800e830:	bf00      	nop
 800e832:	e7fe      	b.n	800e832 <xTaskIncrementTick+0x46>
 800e834:	4b41      	ldr	r3, [pc, #260]	; (800e93c <xTaskIncrementTick+0x150>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	60fb      	str	r3, [r7, #12]
 800e83a:	4b41      	ldr	r3, [pc, #260]	; (800e940 <xTaskIncrementTick+0x154>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4a3f      	ldr	r2, [pc, #252]	; (800e93c <xTaskIncrementTick+0x150>)
 800e840:	6013      	str	r3, [r2, #0]
 800e842:	4a3f      	ldr	r2, [pc, #252]	; (800e940 <xTaskIncrementTick+0x154>)
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	6013      	str	r3, [r2, #0]
 800e848:	4b3e      	ldr	r3, [pc, #248]	; (800e944 <xTaskIncrementTick+0x158>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	3301      	adds	r3, #1
 800e84e:	4a3d      	ldr	r2, [pc, #244]	; (800e944 <xTaskIncrementTick+0x158>)
 800e850:	6013      	str	r3, [r2, #0]
 800e852:	f000 fad1 	bl	800edf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e856:	4b3c      	ldr	r3, [pc, #240]	; (800e948 <xTaskIncrementTick+0x15c>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	693a      	ldr	r2, [r7, #16]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d349      	bcc.n	800e8f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e860:	4b36      	ldr	r3, [pc, #216]	; (800e93c <xTaskIncrementTick+0x150>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d104      	bne.n	800e874 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e86a:	4b37      	ldr	r3, [pc, #220]	; (800e948 <xTaskIncrementTick+0x15c>)
 800e86c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e870:	601a      	str	r2, [r3, #0]
					break;
 800e872:	e03f      	b.n	800e8f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e874:	4b31      	ldr	r3, [pc, #196]	; (800e93c <xTaskIncrementTick+0x150>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e884:	693a      	ldr	r2, [r7, #16]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d203      	bcs.n	800e894 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e88c:	4a2e      	ldr	r2, [pc, #184]	; (800e948 <xTaskIncrementTick+0x15c>)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e892:	e02f      	b.n	800e8f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	3304      	adds	r3, #4
 800e898:	4618      	mov	r0, r3
 800e89a:	f7fe ff1b 	bl	800d6d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d004      	beq.n	800e8b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	3318      	adds	r3, #24
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7fe ff12 	bl	800d6d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8b4:	4b25      	ldr	r3, [pc, #148]	; (800e94c <xTaskIncrementTick+0x160>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d903      	bls.n	800e8c4 <xTaskIncrementTick+0xd8>
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c0:	4a22      	ldr	r2, [pc, #136]	; (800e94c <xTaskIncrementTick+0x160>)
 800e8c2:	6013      	str	r3, [r2, #0]
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8c8:	4613      	mov	r3, r2
 800e8ca:	009b      	lsls	r3, r3, #2
 800e8cc:	4413      	add	r3, r2
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	4a1f      	ldr	r2, [pc, #124]	; (800e950 <xTaskIncrementTick+0x164>)
 800e8d2:	441a      	add	r2, r3
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	3304      	adds	r3, #4
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4610      	mov	r0, r2
 800e8dc:	f7fe fe9d 	bl	800d61a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8e4:	4b1b      	ldr	r3, [pc, #108]	; (800e954 <xTaskIncrementTick+0x168>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d3b8      	bcc.n	800e860 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8f2:	e7b5      	b.n	800e860 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e8f4:	4b17      	ldr	r3, [pc, #92]	; (800e954 <xTaskIncrementTick+0x168>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8fa:	4915      	ldr	r1, [pc, #84]	; (800e950 <xTaskIncrementTick+0x164>)
 800e8fc:	4613      	mov	r3, r2
 800e8fe:	009b      	lsls	r3, r3, #2
 800e900:	4413      	add	r3, r2
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	440b      	add	r3, r1
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	2b01      	cmp	r3, #1
 800e90a:	d901      	bls.n	800e910 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e90c:	2301      	movs	r3, #1
 800e90e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e910:	4b11      	ldr	r3, [pc, #68]	; (800e958 <xTaskIncrementTick+0x16c>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d007      	beq.n	800e928 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e918:	2301      	movs	r3, #1
 800e91a:	617b      	str	r3, [r7, #20]
 800e91c:	e004      	b.n	800e928 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e91e:	4b0f      	ldr	r3, [pc, #60]	; (800e95c <xTaskIncrementTick+0x170>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	3301      	adds	r3, #1
 800e924:	4a0d      	ldr	r2, [pc, #52]	; (800e95c <xTaskIncrementTick+0x170>)
 800e926:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e928:	697b      	ldr	r3, [r7, #20]
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3718      	adds	r7, #24
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	20002664 	.word	0x20002664
 800e938:	20002640 	.word	0x20002640
 800e93c:	200025f4 	.word	0x200025f4
 800e940:	200025f8 	.word	0x200025f8
 800e944:	20002654 	.word	0x20002654
 800e948:	2000265c 	.word	0x2000265c
 800e94c:	20002644 	.word	0x20002644
 800e950:	2000216c 	.word	0x2000216c
 800e954:	20002168 	.word	0x20002168
 800e958:	20002650 	.word	0x20002650
 800e95c:	2000264c 	.word	0x2000264c

0800e960 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e960:	b480      	push	{r7}
 800e962:	b085      	sub	sp, #20
 800e964:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e966:	4b28      	ldr	r3, [pc, #160]	; (800ea08 <vTaskSwitchContext+0xa8>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d003      	beq.n	800e976 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e96e:	4b27      	ldr	r3, [pc, #156]	; (800ea0c <vTaskSwitchContext+0xac>)
 800e970:	2201      	movs	r2, #1
 800e972:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e974:	e041      	b.n	800e9fa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e976:	4b25      	ldr	r3, [pc, #148]	; (800ea0c <vTaskSwitchContext+0xac>)
 800e978:	2200      	movs	r2, #0
 800e97a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e97c:	4b24      	ldr	r3, [pc, #144]	; (800ea10 <vTaskSwitchContext+0xb0>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	60fb      	str	r3, [r7, #12]
 800e982:	e010      	b.n	800e9a6 <vTaskSwitchContext+0x46>
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d10a      	bne.n	800e9a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800e98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e98e:	f383 8811 	msr	BASEPRI, r3
 800e992:	f3bf 8f6f 	isb	sy
 800e996:	f3bf 8f4f 	dsb	sy
 800e99a:	607b      	str	r3, [r7, #4]
}
 800e99c:	bf00      	nop
 800e99e:	e7fe      	b.n	800e99e <vTaskSwitchContext+0x3e>
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	3b01      	subs	r3, #1
 800e9a4:	60fb      	str	r3, [r7, #12]
 800e9a6:	491b      	ldr	r1, [pc, #108]	; (800ea14 <vTaskSwitchContext+0xb4>)
 800e9a8:	68fa      	ldr	r2, [r7, #12]
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	4413      	add	r3, r2
 800e9b0:	009b      	lsls	r3, r3, #2
 800e9b2:	440b      	add	r3, r1
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d0e4      	beq.n	800e984 <vTaskSwitchContext+0x24>
 800e9ba:	68fa      	ldr	r2, [r7, #12]
 800e9bc:	4613      	mov	r3, r2
 800e9be:	009b      	lsls	r3, r3, #2
 800e9c0:	4413      	add	r3, r2
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	4a13      	ldr	r2, [pc, #76]	; (800ea14 <vTaskSwitchContext+0xb4>)
 800e9c6:	4413      	add	r3, r2
 800e9c8:	60bb      	str	r3, [r7, #8]
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	685a      	ldr	r2, [r3, #4]
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	605a      	str	r2, [r3, #4]
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	685a      	ldr	r2, [r3, #4]
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	3308      	adds	r3, #8
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d104      	bne.n	800e9ea <vTaskSwitchContext+0x8a>
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	685a      	ldr	r2, [r3, #4]
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	605a      	str	r2, [r3, #4]
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	68db      	ldr	r3, [r3, #12]
 800e9f0:	4a09      	ldr	r2, [pc, #36]	; (800ea18 <vTaskSwitchContext+0xb8>)
 800e9f2:	6013      	str	r3, [r2, #0]
 800e9f4:	4a06      	ldr	r2, [pc, #24]	; (800ea10 <vTaskSwitchContext+0xb0>)
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	6013      	str	r3, [r2, #0]
}
 800e9fa:	bf00      	nop
 800e9fc:	3714      	adds	r7, #20
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea04:	4770      	bx	lr
 800ea06:	bf00      	nop
 800ea08:	20002664 	.word	0x20002664
 800ea0c:	20002650 	.word	0x20002650
 800ea10:	20002644 	.word	0x20002644
 800ea14:	2000216c 	.word	0x2000216c
 800ea18:	20002168 	.word	0x20002168

0800ea1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d10a      	bne.n	800ea42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ea2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea30:	f383 8811 	msr	BASEPRI, r3
 800ea34:	f3bf 8f6f 	isb	sy
 800ea38:	f3bf 8f4f 	dsb	sy
 800ea3c:	60fb      	str	r3, [r7, #12]
}
 800ea3e:	bf00      	nop
 800ea40:	e7fe      	b.n	800ea40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea42:	4b07      	ldr	r3, [pc, #28]	; (800ea60 <vTaskPlaceOnEventList+0x44>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	3318      	adds	r3, #24
 800ea48:	4619      	mov	r1, r3
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f7fe fe09 	bl	800d662 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ea50:	2101      	movs	r1, #1
 800ea52:	6838      	ldr	r0, [r7, #0]
 800ea54:	f000 fa7c 	bl	800ef50 <prvAddCurrentTaskToDelayedList>
}
 800ea58:	bf00      	nop
 800ea5a:	3710      	adds	r7, #16
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	20002168 	.word	0x20002168

0800ea64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b086      	sub	sp, #24
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d10a      	bne.n	800ea8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ea76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea7a:	f383 8811 	msr	BASEPRI, r3
 800ea7e:	f3bf 8f6f 	isb	sy
 800ea82:	f3bf 8f4f 	dsb	sy
 800ea86:	617b      	str	r3, [r7, #20]
}
 800ea88:	bf00      	nop
 800ea8a:	e7fe      	b.n	800ea8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea8c:	4b0a      	ldr	r3, [pc, #40]	; (800eab8 <vTaskPlaceOnEventListRestricted+0x54>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	3318      	adds	r3, #24
 800ea92:	4619      	mov	r1, r3
 800ea94:	68f8      	ldr	r0, [r7, #12]
 800ea96:	f7fe fdc0 	bl	800d61a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d002      	beq.n	800eaa6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800eaa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eaa4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800eaa6:	6879      	ldr	r1, [r7, #4]
 800eaa8:	68b8      	ldr	r0, [r7, #8]
 800eaaa:	f000 fa51 	bl	800ef50 <prvAddCurrentTaskToDelayedList>
	}
 800eaae:	bf00      	nop
 800eab0:	3718      	adds	r7, #24
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop
 800eab8:	20002168 	.word	0x20002168

0800eabc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b086      	sub	sp, #24
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	68db      	ldr	r3, [r3, #12]
 800eac8:	68db      	ldr	r3, [r3, #12]
 800eaca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d10a      	bne.n	800eae8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ead2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead6:	f383 8811 	msr	BASEPRI, r3
 800eada:	f3bf 8f6f 	isb	sy
 800eade:	f3bf 8f4f 	dsb	sy
 800eae2:	60fb      	str	r3, [r7, #12]
}
 800eae4:	bf00      	nop
 800eae6:	e7fe      	b.n	800eae6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	3318      	adds	r3, #24
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7fe fdf1 	bl	800d6d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eaf2:	4b1e      	ldr	r3, [pc, #120]	; (800eb6c <xTaskRemoveFromEventList+0xb0>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d11d      	bne.n	800eb36 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	3304      	adds	r3, #4
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fe fde8 	bl	800d6d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb08:	4b19      	ldr	r3, [pc, #100]	; (800eb70 <xTaskRemoveFromEventList+0xb4>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d903      	bls.n	800eb18 <xTaskRemoveFromEventList+0x5c>
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb14:	4a16      	ldr	r2, [pc, #88]	; (800eb70 <xTaskRemoveFromEventList+0xb4>)
 800eb16:	6013      	str	r3, [r2, #0]
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	009b      	lsls	r3, r3, #2
 800eb20:	4413      	add	r3, r2
 800eb22:	009b      	lsls	r3, r3, #2
 800eb24:	4a13      	ldr	r2, [pc, #76]	; (800eb74 <xTaskRemoveFromEventList+0xb8>)
 800eb26:	441a      	add	r2, r3
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	3304      	adds	r3, #4
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	4610      	mov	r0, r2
 800eb30:	f7fe fd73 	bl	800d61a <vListInsertEnd>
 800eb34:	e005      	b.n	800eb42 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	3318      	adds	r3, #24
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	480e      	ldr	r0, [pc, #56]	; (800eb78 <xTaskRemoveFromEventList+0xbc>)
 800eb3e:	f7fe fd6c 	bl	800d61a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb46:	4b0d      	ldr	r3, [pc, #52]	; (800eb7c <xTaskRemoveFromEventList+0xc0>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d905      	bls.n	800eb5c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eb50:	2301      	movs	r3, #1
 800eb52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eb54:	4b0a      	ldr	r3, [pc, #40]	; (800eb80 <xTaskRemoveFromEventList+0xc4>)
 800eb56:	2201      	movs	r2, #1
 800eb58:	601a      	str	r2, [r3, #0]
 800eb5a:	e001      	b.n	800eb60 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eb60:	697b      	ldr	r3, [r7, #20]
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3718      	adds	r7, #24
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	20002664 	.word	0x20002664
 800eb70:	20002644 	.word	0x20002644
 800eb74:	2000216c 	.word	0x2000216c
 800eb78:	200025fc 	.word	0x200025fc
 800eb7c:	20002168 	.word	0x20002168
 800eb80:	20002650 	.word	0x20002650

0800eb84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eb8c:	4b06      	ldr	r3, [pc, #24]	; (800eba8 <vTaskInternalSetTimeOutState+0x24>)
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eb94:	4b05      	ldr	r3, [pc, #20]	; (800ebac <vTaskInternalSetTimeOutState+0x28>)
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	605a      	str	r2, [r3, #4]
}
 800eb9c:	bf00      	nop
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr
 800eba8:	20002654 	.word	0x20002654
 800ebac:	20002640 	.word	0x20002640

0800ebb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b088      	sub	sp, #32
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d10a      	bne.n	800ebd6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ebc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc4:	f383 8811 	msr	BASEPRI, r3
 800ebc8:	f3bf 8f6f 	isb	sy
 800ebcc:	f3bf 8f4f 	dsb	sy
 800ebd0:	613b      	str	r3, [r7, #16]
}
 800ebd2:	bf00      	nop
 800ebd4:	e7fe      	b.n	800ebd4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d10a      	bne.n	800ebf2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ebdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe0:	f383 8811 	msr	BASEPRI, r3
 800ebe4:	f3bf 8f6f 	isb	sy
 800ebe8:	f3bf 8f4f 	dsb	sy
 800ebec:	60fb      	str	r3, [r7, #12]
}
 800ebee:	bf00      	nop
 800ebf0:	e7fe      	b.n	800ebf0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ebf2:	f000 fe7f 	bl	800f8f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ebf6:	4b1d      	ldr	r3, [pc, #116]	; (800ec6c <xTaskCheckForTimeOut+0xbc>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	69ba      	ldr	r2, [r7, #24]
 800ec02:	1ad3      	subs	r3, r2, r3
 800ec04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec0e:	d102      	bne.n	800ec16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ec10:	2300      	movs	r3, #0
 800ec12:	61fb      	str	r3, [r7, #28]
 800ec14:	e023      	b.n	800ec5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	4b15      	ldr	r3, [pc, #84]	; (800ec70 <xTaskCheckForTimeOut+0xc0>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d007      	beq.n	800ec32 <xTaskCheckForTimeOut+0x82>
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	69ba      	ldr	r2, [r7, #24]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d302      	bcc.n	800ec32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	61fb      	str	r3, [r7, #28]
 800ec30:	e015      	b.n	800ec5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	697a      	ldr	r2, [r7, #20]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d20b      	bcs.n	800ec54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	681a      	ldr	r2, [r3, #0]
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	1ad2      	subs	r2, r2, r3
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f7ff ff9b 	bl	800eb84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	61fb      	str	r3, [r7, #28]
 800ec52:	e004      	b.n	800ec5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	2200      	movs	r2, #0
 800ec58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ec5e:	f000 fe79 	bl	800f954 <vPortExitCritical>

	return xReturn;
 800ec62:	69fb      	ldr	r3, [r7, #28]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3720      	adds	r7, #32
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	20002640 	.word	0x20002640
 800ec70:	20002654 	.word	0x20002654

0800ec74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ec74:	b480      	push	{r7}
 800ec76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ec78:	4b03      	ldr	r3, [pc, #12]	; (800ec88 <vTaskMissedYield+0x14>)
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	601a      	str	r2, [r3, #0]
}
 800ec7e:	bf00      	nop
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr
 800ec88:	20002650 	.word	0x20002650

0800ec8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ec94:	f000 f852 	bl	800ed3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ec98:	4b06      	ldr	r3, [pc, #24]	; (800ecb4 <prvIdleTask+0x28>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d9f9      	bls.n	800ec94 <prvIdleTask+0x8>
			{
				taskYIELD();
 800eca0:	4b05      	ldr	r3, [pc, #20]	; (800ecb8 <prvIdleTask+0x2c>)
 800eca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eca6:	601a      	str	r2, [r3, #0]
 800eca8:	f3bf 8f4f 	dsb	sy
 800ecac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ecb0:	e7f0      	b.n	800ec94 <prvIdleTask+0x8>
 800ecb2:	bf00      	nop
 800ecb4:	2000216c 	.word	0x2000216c
 800ecb8:	e000ed04 	.word	0xe000ed04

0800ecbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	607b      	str	r3, [r7, #4]
 800ecc6:	e00c      	b.n	800ece2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ecc8:	687a      	ldr	r2, [r7, #4]
 800ecca:	4613      	mov	r3, r2
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	4413      	add	r3, r2
 800ecd0:	009b      	lsls	r3, r3, #2
 800ecd2:	4a12      	ldr	r2, [pc, #72]	; (800ed1c <prvInitialiseTaskLists+0x60>)
 800ecd4:	4413      	add	r3, r2
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7fe fc72 	bl	800d5c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	3301      	adds	r3, #1
 800ece0:	607b      	str	r3, [r7, #4]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2b37      	cmp	r3, #55	; 0x37
 800ece6:	d9ef      	bls.n	800ecc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ece8:	480d      	ldr	r0, [pc, #52]	; (800ed20 <prvInitialiseTaskLists+0x64>)
 800ecea:	f7fe fc69 	bl	800d5c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ecee:	480d      	ldr	r0, [pc, #52]	; (800ed24 <prvInitialiseTaskLists+0x68>)
 800ecf0:	f7fe fc66 	bl	800d5c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ecf4:	480c      	ldr	r0, [pc, #48]	; (800ed28 <prvInitialiseTaskLists+0x6c>)
 800ecf6:	f7fe fc63 	bl	800d5c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ecfa:	480c      	ldr	r0, [pc, #48]	; (800ed2c <prvInitialiseTaskLists+0x70>)
 800ecfc:	f7fe fc60 	bl	800d5c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ed00:	480b      	ldr	r0, [pc, #44]	; (800ed30 <prvInitialiseTaskLists+0x74>)
 800ed02:	f7fe fc5d 	bl	800d5c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ed06:	4b0b      	ldr	r3, [pc, #44]	; (800ed34 <prvInitialiseTaskLists+0x78>)
 800ed08:	4a05      	ldr	r2, [pc, #20]	; (800ed20 <prvInitialiseTaskLists+0x64>)
 800ed0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed0c:	4b0a      	ldr	r3, [pc, #40]	; (800ed38 <prvInitialiseTaskLists+0x7c>)
 800ed0e:	4a05      	ldr	r2, [pc, #20]	; (800ed24 <prvInitialiseTaskLists+0x68>)
 800ed10:	601a      	str	r2, [r3, #0]
}
 800ed12:	bf00      	nop
 800ed14:	3708      	adds	r7, #8
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	2000216c 	.word	0x2000216c
 800ed20:	200025cc 	.word	0x200025cc
 800ed24:	200025e0 	.word	0x200025e0
 800ed28:	200025fc 	.word	0x200025fc
 800ed2c:	20002610 	.word	0x20002610
 800ed30:	20002628 	.word	0x20002628
 800ed34:	200025f4 	.word	0x200025f4
 800ed38:	200025f8 	.word	0x200025f8

0800ed3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed42:	e019      	b.n	800ed78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ed44:	f000 fdd6 	bl	800f8f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed48:	4b10      	ldr	r3, [pc, #64]	; (800ed8c <prvCheckTasksWaitingTermination+0x50>)
 800ed4a:	68db      	ldr	r3, [r3, #12]
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	3304      	adds	r3, #4
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7fe fcbd 	bl	800d6d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ed5a:	4b0d      	ldr	r3, [pc, #52]	; (800ed90 <prvCheckTasksWaitingTermination+0x54>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	3b01      	subs	r3, #1
 800ed60:	4a0b      	ldr	r2, [pc, #44]	; (800ed90 <prvCheckTasksWaitingTermination+0x54>)
 800ed62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ed64:	4b0b      	ldr	r3, [pc, #44]	; (800ed94 <prvCheckTasksWaitingTermination+0x58>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	4a0a      	ldr	r2, [pc, #40]	; (800ed94 <prvCheckTasksWaitingTermination+0x58>)
 800ed6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ed6e:	f000 fdf1 	bl	800f954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 f810 	bl	800ed98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed78:	4b06      	ldr	r3, [pc, #24]	; (800ed94 <prvCheckTasksWaitingTermination+0x58>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d1e1      	bne.n	800ed44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ed80:	bf00      	nop
 800ed82:	bf00      	nop
 800ed84:	3708      	adds	r7, #8
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	20002610 	.word	0x20002610
 800ed90:	2000263c 	.word	0x2000263c
 800ed94:	20002624 	.word	0x20002624

0800ed98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d108      	bne.n	800edbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edae:	4618      	mov	r0, r3
 800edb0:	f000 ff8e 	bl	800fcd0 <vPortFree>
				vPortFree( pxTCB );
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 ff8b 	bl	800fcd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800edba:	e018      	b.n	800edee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d103      	bne.n	800edce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f000 ff82 	bl	800fcd0 <vPortFree>
	}
 800edcc:	e00f      	b.n	800edee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800edd4:	2b02      	cmp	r3, #2
 800edd6:	d00a      	beq.n	800edee <prvDeleteTCB+0x56>
	__asm volatile
 800edd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eddc:	f383 8811 	msr	BASEPRI, r3
 800ede0:	f3bf 8f6f 	isb	sy
 800ede4:	f3bf 8f4f 	dsb	sy
 800ede8:	60fb      	str	r3, [r7, #12]
}
 800edea:	bf00      	nop
 800edec:	e7fe      	b.n	800edec <prvDeleteTCB+0x54>
	}
 800edee:	bf00      	nop
 800edf0:	3710      	adds	r7, #16
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
	...

0800edf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800edf8:	b480      	push	{r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800edfe:	4b0c      	ldr	r3, [pc, #48]	; (800ee30 <prvResetNextTaskUnblockTime+0x38>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d104      	bne.n	800ee12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ee08:	4b0a      	ldr	r3, [pc, #40]	; (800ee34 <prvResetNextTaskUnblockTime+0x3c>)
 800ee0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ee10:	e008      	b.n	800ee24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee12:	4b07      	ldr	r3, [pc, #28]	; (800ee30 <prvResetNextTaskUnblockTime+0x38>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	68db      	ldr	r3, [r3, #12]
 800ee1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	4a04      	ldr	r2, [pc, #16]	; (800ee34 <prvResetNextTaskUnblockTime+0x3c>)
 800ee22:	6013      	str	r3, [r2, #0]
}
 800ee24:	bf00      	nop
 800ee26:	370c      	adds	r7, #12
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2e:	4770      	bx	lr
 800ee30:	200025f4 	.word	0x200025f4
 800ee34:	2000265c 	.word	0x2000265c

0800ee38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ee38:	b480      	push	{r7}
 800ee3a:	b083      	sub	sp, #12
 800ee3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ee3e:	4b0b      	ldr	r3, [pc, #44]	; (800ee6c <xTaskGetSchedulerState+0x34>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d102      	bne.n	800ee4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ee46:	2301      	movs	r3, #1
 800ee48:	607b      	str	r3, [r7, #4]
 800ee4a:	e008      	b.n	800ee5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee4c:	4b08      	ldr	r3, [pc, #32]	; (800ee70 <xTaskGetSchedulerState+0x38>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d102      	bne.n	800ee5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ee54:	2302      	movs	r3, #2
 800ee56:	607b      	str	r3, [r7, #4]
 800ee58:	e001      	b.n	800ee5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ee5e:	687b      	ldr	r3, [r7, #4]
	}
 800ee60:	4618      	mov	r0, r3
 800ee62:	370c      	adds	r7, #12
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr
 800ee6c:	20002648 	.word	0x20002648
 800ee70:	20002664 	.word	0x20002664

0800ee74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b086      	sub	sp, #24
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ee80:	2300      	movs	r3, #0
 800ee82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d056      	beq.n	800ef38 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ee8a:	4b2e      	ldr	r3, [pc, #184]	; (800ef44 <xTaskPriorityDisinherit+0xd0>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	693a      	ldr	r2, [r7, #16]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d00a      	beq.n	800eeaa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ee94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee98:	f383 8811 	msr	BASEPRI, r3
 800ee9c:	f3bf 8f6f 	isb	sy
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	60fb      	str	r3, [r7, #12]
}
 800eea6:	bf00      	nop
 800eea8:	e7fe      	b.n	800eea8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eeaa:	693b      	ldr	r3, [r7, #16]
 800eeac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d10a      	bne.n	800eec8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800eeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb6:	f383 8811 	msr	BASEPRI, r3
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	60bb      	str	r3, [r7, #8]
}
 800eec4:	bf00      	nop
 800eec6:	e7fe      	b.n	800eec6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eecc:	1e5a      	subs	r2, r3, #1
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d02c      	beq.n	800ef38 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d128      	bne.n	800ef38 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	3304      	adds	r3, #4
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7fe fbf2 	bl	800d6d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eefc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef08:	4b0f      	ldr	r3, [pc, #60]	; (800ef48 <xTaskPriorityDisinherit+0xd4>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d903      	bls.n	800ef18 <xTaskPriorityDisinherit+0xa4>
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef14:	4a0c      	ldr	r2, [pc, #48]	; (800ef48 <xTaskPriorityDisinherit+0xd4>)
 800ef16:	6013      	str	r3, [r2, #0]
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef1c:	4613      	mov	r3, r2
 800ef1e:	009b      	lsls	r3, r3, #2
 800ef20:	4413      	add	r3, r2
 800ef22:	009b      	lsls	r3, r3, #2
 800ef24:	4a09      	ldr	r2, [pc, #36]	; (800ef4c <xTaskPriorityDisinherit+0xd8>)
 800ef26:	441a      	add	r2, r3
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	3304      	adds	r3, #4
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	4610      	mov	r0, r2
 800ef30:	f7fe fb73 	bl	800d61a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ef34:	2301      	movs	r3, #1
 800ef36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef38:	697b      	ldr	r3, [r7, #20]
	}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3718      	adds	r7, #24
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	20002168 	.word	0x20002168
 800ef48:	20002644 	.word	0x20002644
 800ef4c:	2000216c 	.word	0x2000216c

0800ef50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ef5a:	4b21      	ldr	r3, [pc, #132]	; (800efe0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef60:	4b20      	ldr	r3, [pc, #128]	; (800efe4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	3304      	adds	r3, #4
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fe fbb4 	bl	800d6d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef72:	d10a      	bne.n	800ef8a <prvAddCurrentTaskToDelayedList+0x3a>
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d007      	beq.n	800ef8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef7a:	4b1a      	ldr	r3, [pc, #104]	; (800efe4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	3304      	adds	r3, #4
 800ef80:	4619      	mov	r1, r3
 800ef82:	4819      	ldr	r0, [pc, #100]	; (800efe8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ef84:	f7fe fb49 	bl	800d61a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ef88:	e026      	b.n	800efd8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ef8a:	68fa      	ldr	r2, [r7, #12]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	4413      	add	r3, r2
 800ef90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ef92:	4b14      	ldr	r3, [pc, #80]	; (800efe4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	68ba      	ldr	r2, [r7, #8]
 800ef98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ef9a:	68ba      	ldr	r2, [r7, #8]
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d209      	bcs.n	800efb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efa2:	4b12      	ldr	r3, [pc, #72]	; (800efec <prvAddCurrentTaskToDelayedList+0x9c>)
 800efa4:	681a      	ldr	r2, [r3, #0]
 800efa6:	4b0f      	ldr	r3, [pc, #60]	; (800efe4 <prvAddCurrentTaskToDelayedList+0x94>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	3304      	adds	r3, #4
 800efac:	4619      	mov	r1, r3
 800efae:	4610      	mov	r0, r2
 800efb0:	f7fe fb57 	bl	800d662 <vListInsert>
}
 800efb4:	e010      	b.n	800efd8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efb6:	4b0e      	ldr	r3, [pc, #56]	; (800eff0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	4b0a      	ldr	r3, [pc, #40]	; (800efe4 <prvAddCurrentTaskToDelayedList+0x94>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	3304      	adds	r3, #4
 800efc0:	4619      	mov	r1, r3
 800efc2:	4610      	mov	r0, r2
 800efc4:	f7fe fb4d 	bl	800d662 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800efc8:	4b0a      	ldr	r3, [pc, #40]	; (800eff4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	68ba      	ldr	r2, [r7, #8]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d202      	bcs.n	800efd8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800efd2:	4a08      	ldr	r2, [pc, #32]	; (800eff4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	6013      	str	r3, [r2, #0]
}
 800efd8:	bf00      	nop
 800efda:	3710      	adds	r7, #16
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}
 800efe0:	20002640 	.word	0x20002640
 800efe4:	20002168 	.word	0x20002168
 800efe8:	20002628 	.word	0x20002628
 800efec:	200025f8 	.word	0x200025f8
 800eff0:	200025f4 	.word	0x200025f4
 800eff4:	2000265c 	.word	0x2000265c

0800eff8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b08a      	sub	sp, #40	; 0x28
 800effc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800effe:	2300      	movs	r3, #0
 800f000:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f002:	f000 fb07 	bl	800f614 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f006:	4b1c      	ldr	r3, [pc, #112]	; (800f078 <xTimerCreateTimerTask+0x80>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d021      	beq.n	800f052 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f00e:	2300      	movs	r3, #0
 800f010:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f012:	2300      	movs	r3, #0
 800f014:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f016:	1d3a      	adds	r2, r7, #4
 800f018:	f107 0108 	add.w	r1, r7, #8
 800f01c:	f107 030c 	add.w	r3, r7, #12
 800f020:	4618      	mov	r0, r3
 800f022:	f7fe fab3 	bl	800d58c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f026:	6879      	ldr	r1, [r7, #4]
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	68fa      	ldr	r2, [r7, #12]
 800f02c:	9202      	str	r2, [sp, #8]
 800f02e:	9301      	str	r3, [sp, #4]
 800f030:	2302      	movs	r3, #2
 800f032:	9300      	str	r3, [sp, #0]
 800f034:	2300      	movs	r3, #0
 800f036:	460a      	mov	r2, r1
 800f038:	4910      	ldr	r1, [pc, #64]	; (800f07c <xTimerCreateTimerTask+0x84>)
 800f03a:	4811      	ldr	r0, [pc, #68]	; (800f080 <xTimerCreateTimerTask+0x88>)
 800f03c:	f7ff f860 	bl	800e100 <xTaskCreateStatic>
 800f040:	4603      	mov	r3, r0
 800f042:	4a10      	ldr	r2, [pc, #64]	; (800f084 <xTimerCreateTimerTask+0x8c>)
 800f044:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f046:	4b0f      	ldr	r3, [pc, #60]	; (800f084 <xTimerCreateTimerTask+0x8c>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d001      	beq.n	800f052 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f04e:	2301      	movs	r3, #1
 800f050:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d10a      	bne.n	800f06e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f05c:	f383 8811 	msr	BASEPRI, r3
 800f060:	f3bf 8f6f 	isb	sy
 800f064:	f3bf 8f4f 	dsb	sy
 800f068:	613b      	str	r3, [r7, #16]
}
 800f06a:	bf00      	nop
 800f06c:	e7fe      	b.n	800f06c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f06e:	697b      	ldr	r3, [r7, #20]
}
 800f070:	4618      	mov	r0, r3
 800f072:	3718      	adds	r7, #24
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}
 800f078:	20002698 	.word	0x20002698
 800f07c:	0801493c 	.word	0x0801493c
 800f080:	0800f1bd 	.word	0x0800f1bd
 800f084:	2000269c 	.word	0x2000269c

0800f088 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b08a      	sub	sp, #40	; 0x28
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	607a      	str	r2, [r7, #4]
 800f094:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f096:	2300      	movs	r3, #0
 800f098:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d10a      	bne.n	800f0b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a4:	f383 8811 	msr	BASEPRI, r3
 800f0a8:	f3bf 8f6f 	isb	sy
 800f0ac:	f3bf 8f4f 	dsb	sy
 800f0b0:	623b      	str	r3, [r7, #32]
}
 800f0b2:	bf00      	nop
 800f0b4:	e7fe      	b.n	800f0b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f0b6:	4b1a      	ldr	r3, [pc, #104]	; (800f120 <xTimerGenericCommand+0x98>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d02a      	beq.n	800f114 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	2b05      	cmp	r3, #5
 800f0ce:	dc18      	bgt.n	800f102 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f0d0:	f7ff feb2 	bl	800ee38 <xTaskGetSchedulerState>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b02      	cmp	r3, #2
 800f0d8:	d109      	bne.n	800f0ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f0da:	4b11      	ldr	r3, [pc, #68]	; (800f120 <xTimerGenericCommand+0x98>)
 800f0dc:	6818      	ldr	r0, [r3, #0]
 800f0de:	f107 0110 	add.w	r1, r7, #16
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0e6:	f7fe fc23 	bl	800d930 <xQueueGenericSend>
 800f0ea:	6278      	str	r0, [r7, #36]	; 0x24
 800f0ec:	e012      	b.n	800f114 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f0ee:	4b0c      	ldr	r3, [pc, #48]	; (800f120 <xTimerGenericCommand+0x98>)
 800f0f0:	6818      	ldr	r0, [r3, #0]
 800f0f2:	f107 0110 	add.w	r1, r7, #16
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f7fe fc19 	bl	800d930 <xQueueGenericSend>
 800f0fe:	6278      	str	r0, [r7, #36]	; 0x24
 800f100:	e008      	b.n	800f114 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f102:	4b07      	ldr	r3, [pc, #28]	; (800f120 <xTimerGenericCommand+0x98>)
 800f104:	6818      	ldr	r0, [r3, #0]
 800f106:	f107 0110 	add.w	r1, r7, #16
 800f10a:	2300      	movs	r3, #0
 800f10c:	683a      	ldr	r2, [r7, #0]
 800f10e:	f7fe fd0d 	bl	800db2c <xQueueGenericSendFromISR>
 800f112:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f116:	4618      	mov	r0, r3
 800f118:	3728      	adds	r7, #40	; 0x28
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	20002698 	.word	0x20002698

0800f124 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b088      	sub	sp, #32
 800f128:	af02      	add	r7, sp, #8
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f12e:	4b22      	ldr	r3, [pc, #136]	; (800f1b8 <prvProcessExpiredTimer+0x94>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	68db      	ldr	r3, [r3, #12]
 800f134:	68db      	ldr	r3, [r3, #12]
 800f136:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	3304      	adds	r3, #4
 800f13c:	4618      	mov	r0, r3
 800f13e:	f7fe fac9 	bl	800d6d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f148:	f003 0304 	and.w	r3, r3, #4
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d022      	beq.n	800f196 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	699a      	ldr	r2, [r3, #24]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	18d1      	adds	r1, r2, r3
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	683a      	ldr	r2, [r7, #0]
 800f15c:	6978      	ldr	r0, [r7, #20]
 800f15e:	f000 f8d1 	bl	800f304 <prvInsertTimerInActiveList>
 800f162:	4603      	mov	r3, r0
 800f164:	2b00      	cmp	r3, #0
 800f166:	d01f      	beq.n	800f1a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f168:	2300      	movs	r3, #0
 800f16a:	9300      	str	r3, [sp, #0]
 800f16c:	2300      	movs	r3, #0
 800f16e:	687a      	ldr	r2, [r7, #4]
 800f170:	2100      	movs	r1, #0
 800f172:	6978      	ldr	r0, [r7, #20]
 800f174:	f7ff ff88 	bl	800f088 <xTimerGenericCommand>
 800f178:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d113      	bne.n	800f1a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f184:	f383 8811 	msr	BASEPRI, r3
 800f188:	f3bf 8f6f 	isb	sy
 800f18c:	f3bf 8f4f 	dsb	sy
 800f190:	60fb      	str	r3, [r7, #12]
}
 800f192:	bf00      	nop
 800f194:	e7fe      	b.n	800f194 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f19c:	f023 0301 	bic.w	r3, r3, #1
 800f1a0:	b2da      	uxtb	r2, r3
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	6a1b      	ldr	r3, [r3, #32]
 800f1ac:	6978      	ldr	r0, [r7, #20]
 800f1ae:	4798      	blx	r3
}
 800f1b0:	bf00      	nop
 800f1b2:	3718      	adds	r7, #24
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}
 800f1b8:	20002690 	.word	0x20002690

0800f1bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f1c4:	f107 0308 	add.w	r3, r7, #8
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f000 f857 	bl	800f27c <prvGetNextExpireTime>
 800f1ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	4619      	mov	r1, r3
 800f1d4:	68f8      	ldr	r0, [r7, #12]
 800f1d6:	f000 f803 	bl	800f1e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f1da:	f000 f8d5 	bl	800f388 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f1de:	e7f1      	b.n	800f1c4 <prvTimerTask+0x8>

0800f1e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b084      	sub	sp, #16
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f1ea:	f7ff fa43 	bl	800e674 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1ee:	f107 0308 	add.w	r3, r7, #8
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f000 f866 	bl	800f2c4 <prvSampleTimeNow>
 800f1f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d130      	bne.n	800f262 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d10a      	bne.n	800f21c <prvProcessTimerOrBlockTask+0x3c>
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d806      	bhi.n	800f21c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f20e:	f7ff fa3f 	bl	800e690 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f212:	68f9      	ldr	r1, [r7, #12]
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f7ff ff85 	bl	800f124 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f21a:	e024      	b.n	800f266 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d008      	beq.n	800f234 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f222:	4b13      	ldr	r3, [pc, #76]	; (800f270 <prvProcessTimerOrBlockTask+0x90>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d101      	bne.n	800f230 <prvProcessTimerOrBlockTask+0x50>
 800f22c:	2301      	movs	r3, #1
 800f22e:	e000      	b.n	800f232 <prvProcessTimerOrBlockTask+0x52>
 800f230:	2300      	movs	r3, #0
 800f232:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f234:	4b0f      	ldr	r3, [pc, #60]	; (800f274 <prvProcessTimerOrBlockTask+0x94>)
 800f236:	6818      	ldr	r0, [r3, #0]
 800f238:	687a      	ldr	r2, [r7, #4]
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	1ad3      	subs	r3, r2, r3
 800f23e:	683a      	ldr	r2, [r7, #0]
 800f240:	4619      	mov	r1, r3
 800f242:	f7fe ff29 	bl	800e098 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f246:	f7ff fa23 	bl	800e690 <xTaskResumeAll>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d10a      	bne.n	800f266 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f250:	4b09      	ldr	r3, [pc, #36]	; (800f278 <prvProcessTimerOrBlockTask+0x98>)
 800f252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f256:	601a      	str	r2, [r3, #0]
 800f258:	f3bf 8f4f 	dsb	sy
 800f25c:	f3bf 8f6f 	isb	sy
}
 800f260:	e001      	b.n	800f266 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f262:	f7ff fa15 	bl	800e690 <xTaskResumeAll>
}
 800f266:	bf00      	nop
 800f268:	3710      	adds	r7, #16
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}
 800f26e:	bf00      	nop
 800f270:	20002694 	.word	0x20002694
 800f274:	20002698 	.word	0x20002698
 800f278:	e000ed04 	.word	0xe000ed04

0800f27c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f27c:	b480      	push	{r7}
 800f27e:	b085      	sub	sp, #20
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f284:	4b0e      	ldr	r3, [pc, #56]	; (800f2c0 <prvGetNextExpireTime+0x44>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d101      	bne.n	800f292 <prvGetNextExpireTime+0x16>
 800f28e:	2201      	movs	r2, #1
 800f290:	e000      	b.n	800f294 <prvGetNextExpireTime+0x18>
 800f292:	2200      	movs	r2, #0
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d105      	bne.n	800f2ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f2a0:	4b07      	ldr	r3, [pc, #28]	; (800f2c0 <prvGetNextExpireTime+0x44>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	68db      	ldr	r3, [r3, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	60fb      	str	r3, [r7, #12]
 800f2aa:	e001      	b.n	800f2b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3714      	adds	r7, #20
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop
 800f2c0:	20002690 	.word	0x20002690

0800f2c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f2cc:	f7ff fa7e 	bl	800e7cc <xTaskGetTickCount>
 800f2d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f2d2:	4b0b      	ldr	r3, [pc, #44]	; (800f300 <prvSampleTimeNow+0x3c>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	68fa      	ldr	r2, [r7, #12]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d205      	bcs.n	800f2e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f2dc:	f000 f936 	bl	800f54c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	601a      	str	r2, [r3, #0]
 800f2e6:	e002      	b.n	800f2ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f2ee:	4a04      	ldr	r2, [pc, #16]	; (800f300 <prvSampleTimeNow+0x3c>)
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3710      	adds	r7, #16
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	200026a0 	.word	0x200026a0

0800f304 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b086      	sub	sp, #24
 800f308:	af00      	add	r7, sp, #0
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	607a      	str	r2, [r7, #4]
 800f310:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f312:	2300      	movs	r3, #0
 800f314:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	68ba      	ldr	r2, [r7, #8]
 800f31a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	68fa      	ldr	r2, [r7, #12]
 800f320:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f322:	68ba      	ldr	r2, [r7, #8]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	429a      	cmp	r2, r3
 800f328:	d812      	bhi.n	800f350 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	1ad2      	subs	r2, r2, r3
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	699b      	ldr	r3, [r3, #24]
 800f334:	429a      	cmp	r2, r3
 800f336:	d302      	bcc.n	800f33e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f338:	2301      	movs	r3, #1
 800f33a:	617b      	str	r3, [r7, #20]
 800f33c:	e01b      	b.n	800f376 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f33e:	4b10      	ldr	r3, [pc, #64]	; (800f380 <prvInsertTimerInActiveList+0x7c>)
 800f340:	681a      	ldr	r2, [r3, #0]
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	3304      	adds	r3, #4
 800f346:	4619      	mov	r1, r3
 800f348:	4610      	mov	r0, r2
 800f34a:	f7fe f98a 	bl	800d662 <vListInsert>
 800f34e:	e012      	b.n	800f376 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f350:	687a      	ldr	r2, [r7, #4]
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	429a      	cmp	r2, r3
 800f356:	d206      	bcs.n	800f366 <prvInsertTimerInActiveList+0x62>
 800f358:	68ba      	ldr	r2, [r7, #8]
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	429a      	cmp	r2, r3
 800f35e:	d302      	bcc.n	800f366 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f360:	2301      	movs	r3, #1
 800f362:	617b      	str	r3, [r7, #20]
 800f364:	e007      	b.n	800f376 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f366:	4b07      	ldr	r3, [pc, #28]	; (800f384 <prvInsertTimerInActiveList+0x80>)
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	3304      	adds	r3, #4
 800f36e:	4619      	mov	r1, r3
 800f370:	4610      	mov	r0, r2
 800f372:	f7fe f976 	bl	800d662 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f376:	697b      	ldr	r3, [r7, #20]
}
 800f378:	4618      	mov	r0, r3
 800f37a:	3718      	adds	r7, #24
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	20002694 	.word	0x20002694
 800f384:	20002690 	.word	0x20002690

0800f388 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b08e      	sub	sp, #56	; 0x38
 800f38c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f38e:	e0ca      	b.n	800f526 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2b00      	cmp	r3, #0
 800f394:	da18      	bge.n	800f3c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f396:	1d3b      	adds	r3, r7, #4
 800f398:	3304      	adds	r3, #4
 800f39a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d10a      	bne.n	800f3b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3a6:	f383 8811 	msr	BASEPRI, r3
 800f3aa:	f3bf 8f6f 	isb	sy
 800f3ae:	f3bf 8f4f 	dsb	sy
 800f3b2:	61fb      	str	r3, [r7, #28]
}
 800f3b4:	bf00      	nop
 800f3b6:	e7fe      	b.n	800f3b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3be:	6850      	ldr	r0, [r2, #4]
 800f3c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3c2:	6892      	ldr	r2, [r2, #8]
 800f3c4:	4611      	mov	r1, r2
 800f3c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	f2c0 80aa 	blt.w	800f524 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d6:	695b      	ldr	r3, [r3, #20]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d004      	beq.n	800f3e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3de:	3304      	adds	r3, #4
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7fe f977 	bl	800d6d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f3e6:	463b      	mov	r3, r7
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7ff ff6b 	bl	800f2c4 <prvSampleTimeNow>
 800f3ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2b09      	cmp	r3, #9
 800f3f4:	f200 8097 	bhi.w	800f526 <prvProcessReceivedCommands+0x19e>
 800f3f8:	a201      	add	r2, pc, #4	; (adr r2, 800f400 <prvProcessReceivedCommands+0x78>)
 800f3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3fe:	bf00      	nop
 800f400:	0800f429 	.word	0x0800f429
 800f404:	0800f429 	.word	0x0800f429
 800f408:	0800f429 	.word	0x0800f429
 800f40c:	0800f49d 	.word	0x0800f49d
 800f410:	0800f4b1 	.word	0x0800f4b1
 800f414:	0800f4fb 	.word	0x0800f4fb
 800f418:	0800f429 	.word	0x0800f429
 800f41c:	0800f429 	.word	0x0800f429
 800f420:	0800f49d 	.word	0x0800f49d
 800f424:	0800f4b1 	.word	0x0800f4b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f42a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f42e:	f043 0301 	orr.w	r3, r3, #1
 800f432:	b2da      	uxtb	r2, r3
 800f434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f43a:	68ba      	ldr	r2, [r7, #8]
 800f43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f43e:	699b      	ldr	r3, [r3, #24]
 800f440:	18d1      	adds	r1, r2, r3
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f448:	f7ff ff5c 	bl	800f304 <prvInsertTimerInActiveList>
 800f44c:	4603      	mov	r3, r0
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d069      	beq.n	800f526 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f454:	6a1b      	ldr	r3, [r3, #32]
 800f456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f458:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f460:	f003 0304 	and.w	r3, r3, #4
 800f464:	2b00      	cmp	r3, #0
 800f466:	d05e      	beq.n	800f526 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f468:	68ba      	ldr	r2, [r7, #8]
 800f46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46c:	699b      	ldr	r3, [r3, #24]
 800f46e:	441a      	add	r2, r3
 800f470:	2300      	movs	r3, #0
 800f472:	9300      	str	r3, [sp, #0]
 800f474:	2300      	movs	r3, #0
 800f476:	2100      	movs	r1, #0
 800f478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f47a:	f7ff fe05 	bl	800f088 <xTimerGenericCommand>
 800f47e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f480:	6a3b      	ldr	r3, [r7, #32]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d14f      	bne.n	800f526 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f48a:	f383 8811 	msr	BASEPRI, r3
 800f48e:	f3bf 8f6f 	isb	sy
 800f492:	f3bf 8f4f 	dsb	sy
 800f496:	61bb      	str	r3, [r7, #24]
}
 800f498:	bf00      	nop
 800f49a:	e7fe      	b.n	800f49a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4a2:	f023 0301 	bic.w	r3, r3, #1
 800f4a6:	b2da      	uxtb	r2, r3
 800f4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f4ae:	e03a      	b.n	800f526 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4b6:	f043 0301 	orr.w	r3, r3, #1
 800f4ba:	b2da      	uxtb	r2, r3
 800f4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f4c2:	68ba      	ldr	r2, [r7, #8]
 800f4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ca:	699b      	ldr	r3, [r3, #24]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d10a      	bne.n	800f4e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d4:	f383 8811 	msr	BASEPRI, r3
 800f4d8:	f3bf 8f6f 	isb	sy
 800f4dc:	f3bf 8f4f 	dsb	sy
 800f4e0:	617b      	str	r3, [r7, #20]
}
 800f4e2:	bf00      	nop
 800f4e4:	e7fe      	b.n	800f4e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e8:	699a      	ldr	r2, [r3, #24]
 800f4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ec:	18d1      	adds	r1, r2, r3
 800f4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4f4:	f7ff ff06 	bl	800f304 <prvInsertTimerInActiveList>
					break;
 800f4f8:	e015      	b.n	800f526 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f500:	f003 0302 	and.w	r3, r3, #2
 800f504:	2b00      	cmp	r3, #0
 800f506:	d103      	bne.n	800f510 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f50a:	f000 fbe1 	bl	800fcd0 <vPortFree>
 800f50e:	e00a      	b.n	800f526 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f512:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f516:	f023 0301 	bic.w	r3, r3, #1
 800f51a:	b2da      	uxtb	r2, r3
 800f51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f522:	e000      	b.n	800f526 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f524:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f526:	4b08      	ldr	r3, [pc, #32]	; (800f548 <prvProcessReceivedCommands+0x1c0>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	1d39      	adds	r1, r7, #4
 800f52c:	2200      	movs	r2, #0
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fe fb98 	bl	800dc64 <xQueueReceive>
 800f534:	4603      	mov	r3, r0
 800f536:	2b00      	cmp	r3, #0
 800f538:	f47f af2a 	bne.w	800f390 <prvProcessReceivedCommands+0x8>
	}
}
 800f53c:	bf00      	nop
 800f53e:	bf00      	nop
 800f540:	3730      	adds	r7, #48	; 0x30
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	20002698 	.word	0x20002698

0800f54c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b088      	sub	sp, #32
 800f550:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f552:	e048      	b.n	800f5e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f554:	4b2d      	ldr	r3, [pc, #180]	; (800f60c <prvSwitchTimerLists+0xc0>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	68db      	ldr	r3, [r3, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f55e:	4b2b      	ldr	r3, [pc, #172]	; (800f60c <prvSwitchTimerLists+0xc0>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	68db      	ldr	r3, [r3, #12]
 800f564:	68db      	ldr	r3, [r3, #12]
 800f566:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	3304      	adds	r3, #4
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7fe f8b1 	bl	800d6d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	6a1b      	ldr	r3, [r3, #32]
 800f576:	68f8      	ldr	r0, [r7, #12]
 800f578:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f580:	f003 0304 	and.w	r3, r3, #4
 800f584:	2b00      	cmp	r3, #0
 800f586:	d02e      	beq.n	800f5e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	699b      	ldr	r3, [r3, #24]
 800f58c:	693a      	ldr	r2, [r7, #16]
 800f58e:	4413      	add	r3, r2
 800f590:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f592:	68ba      	ldr	r2, [r7, #8]
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	429a      	cmp	r2, r3
 800f598:	d90e      	bls.n	800f5b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	68ba      	ldr	r2, [r7, #8]
 800f59e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	68fa      	ldr	r2, [r7, #12]
 800f5a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f5a6:	4b19      	ldr	r3, [pc, #100]	; (800f60c <prvSwitchTimerLists+0xc0>)
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	3304      	adds	r3, #4
 800f5ae:	4619      	mov	r1, r3
 800f5b0:	4610      	mov	r0, r2
 800f5b2:	f7fe f856 	bl	800d662 <vListInsert>
 800f5b6:	e016      	b.n	800f5e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	9300      	str	r3, [sp, #0]
 800f5bc:	2300      	movs	r3, #0
 800f5be:	693a      	ldr	r2, [r7, #16]
 800f5c0:	2100      	movs	r1, #0
 800f5c2:	68f8      	ldr	r0, [r7, #12]
 800f5c4:	f7ff fd60 	bl	800f088 <xTimerGenericCommand>
 800f5c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d10a      	bne.n	800f5e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d4:	f383 8811 	msr	BASEPRI, r3
 800f5d8:	f3bf 8f6f 	isb	sy
 800f5dc:	f3bf 8f4f 	dsb	sy
 800f5e0:	603b      	str	r3, [r7, #0]
}
 800f5e2:	bf00      	nop
 800f5e4:	e7fe      	b.n	800f5e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5e6:	4b09      	ldr	r3, [pc, #36]	; (800f60c <prvSwitchTimerLists+0xc0>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d1b1      	bne.n	800f554 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f5f0:	4b06      	ldr	r3, [pc, #24]	; (800f60c <prvSwitchTimerLists+0xc0>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f5f6:	4b06      	ldr	r3, [pc, #24]	; (800f610 <prvSwitchTimerLists+0xc4>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	4a04      	ldr	r2, [pc, #16]	; (800f60c <prvSwitchTimerLists+0xc0>)
 800f5fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f5fe:	4a04      	ldr	r2, [pc, #16]	; (800f610 <prvSwitchTimerLists+0xc4>)
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	6013      	str	r3, [r2, #0]
}
 800f604:	bf00      	nop
 800f606:	3718      	adds	r7, #24
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	20002690 	.word	0x20002690
 800f610:	20002694 	.word	0x20002694

0800f614 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b082      	sub	sp, #8
 800f618:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f61a:	f000 f96b 	bl	800f8f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f61e:	4b15      	ldr	r3, [pc, #84]	; (800f674 <prvCheckForValidListAndQueue+0x60>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d120      	bne.n	800f668 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f626:	4814      	ldr	r0, [pc, #80]	; (800f678 <prvCheckForValidListAndQueue+0x64>)
 800f628:	f7fd ffca 	bl	800d5c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f62c:	4813      	ldr	r0, [pc, #76]	; (800f67c <prvCheckForValidListAndQueue+0x68>)
 800f62e:	f7fd ffc7 	bl	800d5c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f632:	4b13      	ldr	r3, [pc, #76]	; (800f680 <prvCheckForValidListAndQueue+0x6c>)
 800f634:	4a10      	ldr	r2, [pc, #64]	; (800f678 <prvCheckForValidListAndQueue+0x64>)
 800f636:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f638:	4b12      	ldr	r3, [pc, #72]	; (800f684 <prvCheckForValidListAndQueue+0x70>)
 800f63a:	4a10      	ldr	r2, [pc, #64]	; (800f67c <prvCheckForValidListAndQueue+0x68>)
 800f63c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f63e:	2300      	movs	r3, #0
 800f640:	9300      	str	r3, [sp, #0]
 800f642:	4b11      	ldr	r3, [pc, #68]	; (800f688 <prvCheckForValidListAndQueue+0x74>)
 800f644:	4a11      	ldr	r2, [pc, #68]	; (800f68c <prvCheckForValidListAndQueue+0x78>)
 800f646:	2110      	movs	r1, #16
 800f648:	200a      	movs	r0, #10
 800f64a:	f7fe f8d5 	bl	800d7f8 <xQueueGenericCreateStatic>
 800f64e:	4603      	mov	r3, r0
 800f650:	4a08      	ldr	r2, [pc, #32]	; (800f674 <prvCheckForValidListAndQueue+0x60>)
 800f652:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f654:	4b07      	ldr	r3, [pc, #28]	; (800f674 <prvCheckForValidListAndQueue+0x60>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d005      	beq.n	800f668 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f65c:	4b05      	ldr	r3, [pc, #20]	; (800f674 <prvCheckForValidListAndQueue+0x60>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	490b      	ldr	r1, [pc, #44]	; (800f690 <prvCheckForValidListAndQueue+0x7c>)
 800f662:	4618      	mov	r0, r3
 800f664:	f7fe fcee 	bl	800e044 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f668:	f000 f974 	bl	800f954 <vPortExitCritical>
}
 800f66c:	bf00      	nop
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	20002698 	.word	0x20002698
 800f678:	20002668 	.word	0x20002668
 800f67c:	2000267c 	.word	0x2000267c
 800f680:	20002690 	.word	0x20002690
 800f684:	20002694 	.word	0x20002694
 800f688:	20002744 	.word	0x20002744
 800f68c:	200026a4 	.word	0x200026a4
 800f690:	08014944 	.word	0x08014944

0800f694 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f694:	b480      	push	{r7}
 800f696:	b085      	sub	sp, #20
 800f698:	af00      	add	r7, sp, #0
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	3b04      	subs	r3, #4
 800f6a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f6ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	3b04      	subs	r3, #4
 800f6b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	f023 0201 	bic.w	r2, r3, #1
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	3b04      	subs	r3, #4
 800f6c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f6c4:	4a0c      	ldr	r2, [pc, #48]	; (800f6f8 <pxPortInitialiseStack+0x64>)
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	3b14      	subs	r3, #20
 800f6ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f6d0:	687a      	ldr	r2, [r7, #4]
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	3b04      	subs	r3, #4
 800f6da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f06f 0202 	mvn.w	r2, #2
 800f6e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	3b20      	subs	r3, #32
 800f6e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3714      	adds	r7, #20
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr
 800f6f8:	0800f6fd 	.word	0x0800f6fd

0800f6fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b085      	sub	sp, #20
 800f700:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f702:	2300      	movs	r3, #0
 800f704:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f706:	4b12      	ldr	r3, [pc, #72]	; (800f750 <prvTaskExitError+0x54>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f70e:	d00a      	beq.n	800f726 <prvTaskExitError+0x2a>
	__asm volatile
 800f710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f714:	f383 8811 	msr	BASEPRI, r3
 800f718:	f3bf 8f6f 	isb	sy
 800f71c:	f3bf 8f4f 	dsb	sy
 800f720:	60fb      	str	r3, [r7, #12]
}
 800f722:	bf00      	nop
 800f724:	e7fe      	b.n	800f724 <prvTaskExitError+0x28>
	__asm volatile
 800f726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f72a:	f383 8811 	msr	BASEPRI, r3
 800f72e:	f3bf 8f6f 	isb	sy
 800f732:	f3bf 8f4f 	dsb	sy
 800f736:	60bb      	str	r3, [r7, #8]
}
 800f738:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f73a:	bf00      	nop
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d0fc      	beq.n	800f73c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f742:	bf00      	nop
 800f744:	bf00      	nop
 800f746:	3714      	adds	r7, #20
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr
 800f750:	20000010 	.word	0x20000010
	...

0800f760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f760:	4b07      	ldr	r3, [pc, #28]	; (800f780 <pxCurrentTCBConst2>)
 800f762:	6819      	ldr	r1, [r3, #0]
 800f764:	6808      	ldr	r0, [r1, #0]
 800f766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f76a:	f380 8809 	msr	PSP, r0
 800f76e:	f3bf 8f6f 	isb	sy
 800f772:	f04f 0000 	mov.w	r0, #0
 800f776:	f380 8811 	msr	BASEPRI, r0
 800f77a:	4770      	bx	lr
 800f77c:	f3af 8000 	nop.w

0800f780 <pxCurrentTCBConst2>:
 800f780:	20002168 	.word	0x20002168
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f784:	bf00      	nop
 800f786:	bf00      	nop

0800f788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f788:	4808      	ldr	r0, [pc, #32]	; (800f7ac <prvPortStartFirstTask+0x24>)
 800f78a:	6800      	ldr	r0, [r0, #0]
 800f78c:	6800      	ldr	r0, [r0, #0]
 800f78e:	f380 8808 	msr	MSP, r0
 800f792:	f04f 0000 	mov.w	r0, #0
 800f796:	f380 8814 	msr	CONTROL, r0
 800f79a:	b662      	cpsie	i
 800f79c:	b661      	cpsie	f
 800f79e:	f3bf 8f4f 	dsb	sy
 800f7a2:	f3bf 8f6f 	isb	sy
 800f7a6:	df00      	svc	0
 800f7a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f7aa:	bf00      	nop
 800f7ac:	e000ed08 	.word	0xe000ed08

0800f7b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b086      	sub	sp, #24
 800f7b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f7b6:	4b46      	ldr	r3, [pc, #280]	; (800f8d0 <xPortStartScheduler+0x120>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4a46      	ldr	r2, [pc, #280]	; (800f8d4 <xPortStartScheduler+0x124>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d10a      	bne.n	800f7d6 <xPortStartScheduler+0x26>
	__asm volatile
 800f7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c4:	f383 8811 	msr	BASEPRI, r3
 800f7c8:	f3bf 8f6f 	isb	sy
 800f7cc:	f3bf 8f4f 	dsb	sy
 800f7d0:	613b      	str	r3, [r7, #16]
}
 800f7d2:	bf00      	nop
 800f7d4:	e7fe      	b.n	800f7d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f7d6:	4b3e      	ldr	r3, [pc, #248]	; (800f8d0 <xPortStartScheduler+0x120>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4a3f      	ldr	r2, [pc, #252]	; (800f8d8 <xPortStartScheduler+0x128>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d10a      	bne.n	800f7f6 <xPortStartScheduler+0x46>
	__asm volatile
 800f7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e4:	f383 8811 	msr	BASEPRI, r3
 800f7e8:	f3bf 8f6f 	isb	sy
 800f7ec:	f3bf 8f4f 	dsb	sy
 800f7f0:	60fb      	str	r3, [r7, #12]
}
 800f7f2:	bf00      	nop
 800f7f4:	e7fe      	b.n	800f7f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f7f6:	4b39      	ldr	r3, [pc, #228]	; (800f8dc <xPortStartScheduler+0x12c>)
 800f7f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	781b      	ldrb	r3, [r3, #0]
 800f7fe:	b2db      	uxtb	r3, r3
 800f800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f802:	697b      	ldr	r3, [r7, #20]
 800f804:	22ff      	movs	r2, #255	; 0xff
 800f806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f810:	78fb      	ldrb	r3, [r7, #3]
 800f812:	b2db      	uxtb	r3, r3
 800f814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f818:	b2da      	uxtb	r2, r3
 800f81a:	4b31      	ldr	r3, [pc, #196]	; (800f8e0 <xPortStartScheduler+0x130>)
 800f81c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f81e:	4b31      	ldr	r3, [pc, #196]	; (800f8e4 <xPortStartScheduler+0x134>)
 800f820:	2207      	movs	r2, #7
 800f822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f824:	e009      	b.n	800f83a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f826:	4b2f      	ldr	r3, [pc, #188]	; (800f8e4 <xPortStartScheduler+0x134>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	3b01      	subs	r3, #1
 800f82c:	4a2d      	ldr	r2, [pc, #180]	; (800f8e4 <xPortStartScheduler+0x134>)
 800f82e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f830:	78fb      	ldrb	r3, [r7, #3]
 800f832:	b2db      	uxtb	r3, r3
 800f834:	005b      	lsls	r3, r3, #1
 800f836:	b2db      	uxtb	r3, r3
 800f838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f83a:	78fb      	ldrb	r3, [r7, #3]
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f842:	2b80      	cmp	r3, #128	; 0x80
 800f844:	d0ef      	beq.n	800f826 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f846:	4b27      	ldr	r3, [pc, #156]	; (800f8e4 <xPortStartScheduler+0x134>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	f1c3 0307 	rsb	r3, r3, #7
 800f84e:	2b04      	cmp	r3, #4
 800f850:	d00a      	beq.n	800f868 <xPortStartScheduler+0xb8>
	__asm volatile
 800f852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f856:	f383 8811 	msr	BASEPRI, r3
 800f85a:	f3bf 8f6f 	isb	sy
 800f85e:	f3bf 8f4f 	dsb	sy
 800f862:	60bb      	str	r3, [r7, #8]
}
 800f864:	bf00      	nop
 800f866:	e7fe      	b.n	800f866 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f868:	4b1e      	ldr	r3, [pc, #120]	; (800f8e4 <xPortStartScheduler+0x134>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	021b      	lsls	r3, r3, #8
 800f86e:	4a1d      	ldr	r2, [pc, #116]	; (800f8e4 <xPortStartScheduler+0x134>)
 800f870:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f872:	4b1c      	ldr	r3, [pc, #112]	; (800f8e4 <xPortStartScheduler+0x134>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f87a:	4a1a      	ldr	r2, [pc, #104]	; (800f8e4 <xPortStartScheduler+0x134>)
 800f87c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	b2da      	uxtb	r2, r3
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f886:	4b18      	ldr	r3, [pc, #96]	; (800f8e8 <xPortStartScheduler+0x138>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	4a17      	ldr	r2, [pc, #92]	; (800f8e8 <xPortStartScheduler+0x138>)
 800f88c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f892:	4b15      	ldr	r3, [pc, #84]	; (800f8e8 <xPortStartScheduler+0x138>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	4a14      	ldr	r2, [pc, #80]	; (800f8e8 <xPortStartScheduler+0x138>)
 800f898:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f89c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f89e:	f000 f8dd 	bl	800fa5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f8a2:	4b12      	ldr	r3, [pc, #72]	; (800f8ec <xPortStartScheduler+0x13c>)
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f8a8:	f000 f8fc 	bl	800faa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f8ac:	4b10      	ldr	r3, [pc, #64]	; (800f8f0 <xPortStartScheduler+0x140>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	4a0f      	ldr	r2, [pc, #60]	; (800f8f0 <xPortStartScheduler+0x140>)
 800f8b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f8b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f8b8:	f7ff ff66 	bl	800f788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f8bc:	f7ff f850 	bl	800e960 <vTaskSwitchContext>
	prvTaskExitError();
 800f8c0:	f7ff ff1c 	bl	800f6fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f8c4:	2300      	movs	r3, #0
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3718      	adds	r7, #24
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	e000ed00 	.word	0xe000ed00
 800f8d4:	410fc271 	.word	0x410fc271
 800f8d8:	410fc270 	.word	0x410fc270
 800f8dc:	e000e400 	.word	0xe000e400
 800f8e0:	20002794 	.word	0x20002794
 800f8e4:	20002798 	.word	0x20002798
 800f8e8:	e000ed20 	.word	0xe000ed20
 800f8ec:	20000010 	.word	0x20000010
 800f8f0:	e000ef34 	.word	0xe000ef34

0800f8f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
	__asm volatile
 800f8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8fe:	f383 8811 	msr	BASEPRI, r3
 800f902:	f3bf 8f6f 	isb	sy
 800f906:	f3bf 8f4f 	dsb	sy
 800f90a:	607b      	str	r3, [r7, #4]
}
 800f90c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f90e:	4b0f      	ldr	r3, [pc, #60]	; (800f94c <vPortEnterCritical+0x58>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	3301      	adds	r3, #1
 800f914:	4a0d      	ldr	r2, [pc, #52]	; (800f94c <vPortEnterCritical+0x58>)
 800f916:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f918:	4b0c      	ldr	r3, [pc, #48]	; (800f94c <vPortEnterCritical+0x58>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d10f      	bne.n	800f940 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f920:	4b0b      	ldr	r3, [pc, #44]	; (800f950 <vPortEnterCritical+0x5c>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	b2db      	uxtb	r3, r3
 800f926:	2b00      	cmp	r3, #0
 800f928:	d00a      	beq.n	800f940 <vPortEnterCritical+0x4c>
	__asm volatile
 800f92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f92e:	f383 8811 	msr	BASEPRI, r3
 800f932:	f3bf 8f6f 	isb	sy
 800f936:	f3bf 8f4f 	dsb	sy
 800f93a:	603b      	str	r3, [r7, #0]
}
 800f93c:	bf00      	nop
 800f93e:	e7fe      	b.n	800f93e <vPortEnterCritical+0x4a>
	}
}
 800f940:	bf00      	nop
 800f942:	370c      	adds	r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr
 800f94c:	20000010 	.word	0x20000010
 800f950:	e000ed04 	.word	0xe000ed04

0800f954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f95a:	4b12      	ldr	r3, [pc, #72]	; (800f9a4 <vPortExitCritical+0x50>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d10a      	bne.n	800f978 <vPortExitCritical+0x24>
	__asm volatile
 800f962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f966:	f383 8811 	msr	BASEPRI, r3
 800f96a:	f3bf 8f6f 	isb	sy
 800f96e:	f3bf 8f4f 	dsb	sy
 800f972:	607b      	str	r3, [r7, #4]
}
 800f974:	bf00      	nop
 800f976:	e7fe      	b.n	800f976 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f978:	4b0a      	ldr	r3, [pc, #40]	; (800f9a4 <vPortExitCritical+0x50>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	3b01      	subs	r3, #1
 800f97e:	4a09      	ldr	r2, [pc, #36]	; (800f9a4 <vPortExitCritical+0x50>)
 800f980:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f982:	4b08      	ldr	r3, [pc, #32]	; (800f9a4 <vPortExitCritical+0x50>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d105      	bne.n	800f996 <vPortExitCritical+0x42>
 800f98a:	2300      	movs	r3, #0
 800f98c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	f383 8811 	msr	BASEPRI, r3
}
 800f994:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f996:	bf00      	nop
 800f998:	370c      	adds	r7, #12
 800f99a:	46bd      	mov	sp, r7
 800f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a0:	4770      	bx	lr
 800f9a2:	bf00      	nop
 800f9a4:	20000010 	.word	0x20000010
	...

0800f9b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f9b0:	f3ef 8009 	mrs	r0, PSP
 800f9b4:	f3bf 8f6f 	isb	sy
 800f9b8:	4b15      	ldr	r3, [pc, #84]	; (800fa10 <pxCurrentTCBConst>)
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	f01e 0f10 	tst.w	lr, #16
 800f9c0:	bf08      	it	eq
 800f9c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f9c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ca:	6010      	str	r0, [r2, #0]
 800f9cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f9d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f9d4:	f380 8811 	msr	BASEPRI, r0
 800f9d8:	f3bf 8f4f 	dsb	sy
 800f9dc:	f3bf 8f6f 	isb	sy
 800f9e0:	f7fe ffbe 	bl	800e960 <vTaskSwitchContext>
 800f9e4:	f04f 0000 	mov.w	r0, #0
 800f9e8:	f380 8811 	msr	BASEPRI, r0
 800f9ec:	bc09      	pop	{r0, r3}
 800f9ee:	6819      	ldr	r1, [r3, #0]
 800f9f0:	6808      	ldr	r0, [r1, #0]
 800f9f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f6:	f01e 0f10 	tst.w	lr, #16
 800f9fa:	bf08      	it	eq
 800f9fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fa00:	f380 8809 	msr	PSP, r0
 800fa04:	f3bf 8f6f 	isb	sy
 800fa08:	4770      	bx	lr
 800fa0a:	bf00      	nop
 800fa0c:	f3af 8000 	nop.w

0800fa10 <pxCurrentTCBConst>:
 800fa10:	20002168 	.word	0x20002168
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fa14:	bf00      	nop
 800fa16:	bf00      	nop

0800fa18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa22:	f383 8811 	msr	BASEPRI, r3
 800fa26:	f3bf 8f6f 	isb	sy
 800fa2a:	f3bf 8f4f 	dsb	sy
 800fa2e:	607b      	str	r3, [r7, #4]
}
 800fa30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fa32:	f7fe fedb 	bl	800e7ec <xTaskIncrementTick>
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d003      	beq.n	800fa44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fa3c:	4b06      	ldr	r3, [pc, #24]	; (800fa58 <xPortSysTickHandler+0x40>)
 800fa3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa42:	601a      	str	r2, [r3, #0]
 800fa44:	2300      	movs	r3, #0
 800fa46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	f383 8811 	msr	BASEPRI, r3
}
 800fa4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fa50:	bf00      	nop
 800fa52:	3708      	adds	r7, #8
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	e000ed04 	.word	0xe000ed04

0800fa5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fa60:	4b0b      	ldr	r3, [pc, #44]	; (800fa90 <vPortSetupTimerInterrupt+0x34>)
 800fa62:	2200      	movs	r2, #0
 800fa64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fa66:	4b0b      	ldr	r3, [pc, #44]	; (800fa94 <vPortSetupTimerInterrupt+0x38>)
 800fa68:	2200      	movs	r2, #0
 800fa6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fa6c:	4b0a      	ldr	r3, [pc, #40]	; (800fa98 <vPortSetupTimerInterrupt+0x3c>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	4a0a      	ldr	r2, [pc, #40]	; (800fa9c <vPortSetupTimerInterrupt+0x40>)
 800fa72:	fba2 2303 	umull	r2, r3, r2, r3
 800fa76:	099b      	lsrs	r3, r3, #6
 800fa78:	4a09      	ldr	r2, [pc, #36]	; (800faa0 <vPortSetupTimerInterrupt+0x44>)
 800fa7a:	3b01      	subs	r3, #1
 800fa7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fa7e:	4b04      	ldr	r3, [pc, #16]	; (800fa90 <vPortSetupTimerInterrupt+0x34>)
 800fa80:	2207      	movs	r2, #7
 800fa82:	601a      	str	r2, [r3, #0]
}
 800fa84:	bf00      	nop
 800fa86:	46bd      	mov	sp, r7
 800fa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8c:	4770      	bx	lr
 800fa8e:	bf00      	nop
 800fa90:	e000e010 	.word	0xe000e010
 800fa94:	e000e018 	.word	0xe000e018
 800fa98:	20000004 	.word	0x20000004
 800fa9c:	10624dd3 	.word	0x10624dd3
 800faa0:	e000e014 	.word	0xe000e014

0800faa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800faa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fab4 <vPortEnableVFP+0x10>
 800faa8:	6801      	ldr	r1, [r0, #0]
 800faaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800faae:	6001      	str	r1, [r0, #0]
 800fab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fab2:	bf00      	nop
 800fab4:	e000ed88 	.word	0xe000ed88

0800fab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fab8:	b480      	push	{r7}
 800faba:	b085      	sub	sp, #20
 800fabc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fabe:	f3ef 8305 	mrs	r3, IPSR
 800fac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	2b0f      	cmp	r3, #15
 800fac8:	d914      	bls.n	800faf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800faca:	4a17      	ldr	r2, [pc, #92]	; (800fb28 <vPortValidateInterruptPriority+0x70>)
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	4413      	add	r3, r2
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fad4:	4b15      	ldr	r3, [pc, #84]	; (800fb2c <vPortValidateInterruptPriority+0x74>)
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	7afa      	ldrb	r2, [r7, #11]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d20a      	bcs.n	800faf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae2:	f383 8811 	msr	BASEPRI, r3
 800fae6:	f3bf 8f6f 	isb	sy
 800faea:	f3bf 8f4f 	dsb	sy
 800faee:	607b      	str	r3, [r7, #4]
}
 800faf0:	bf00      	nop
 800faf2:	e7fe      	b.n	800faf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800faf4:	4b0e      	ldr	r3, [pc, #56]	; (800fb30 <vPortValidateInterruptPriority+0x78>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fafc:	4b0d      	ldr	r3, [pc, #52]	; (800fb34 <vPortValidateInterruptPriority+0x7c>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d90a      	bls.n	800fb1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb08:	f383 8811 	msr	BASEPRI, r3
 800fb0c:	f3bf 8f6f 	isb	sy
 800fb10:	f3bf 8f4f 	dsb	sy
 800fb14:	603b      	str	r3, [r7, #0]
}
 800fb16:	bf00      	nop
 800fb18:	e7fe      	b.n	800fb18 <vPortValidateInterruptPriority+0x60>
	}
 800fb1a:	bf00      	nop
 800fb1c:	3714      	adds	r7, #20
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr
 800fb26:	bf00      	nop
 800fb28:	e000e3f0 	.word	0xe000e3f0
 800fb2c:	20002794 	.word	0x20002794
 800fb30:	e000ed0c 	.word	0xe000ed0c
 800fb34:	20002798 	.word	0x20002798

0800fb38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b08a      	sub	sp, #40	; 0x28
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fb40:	2300      	movs	r3, #0
 800fb42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fb44:	f7fe fd96 	bl	800e674 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fb48:	4b5b      	ldr	r3, [pc, #364]	; (800fcb8 <pvPortMalloc+0x180>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d101      	bne.n	800fb54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fb50:	f000 f920 	bl	800fd94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fb54:	4b59      	ldr	r3, [pc, #356]	; (800fcbc <pvPortMalloc+0x184>)
 800fb56:	681a      	ldr	r2, [r3, #0]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	4013      	ands	r3, r2
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	f040 8093 	bne.w	800fc88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d01d      	beq.n	800fba4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fb68:	2208      	movs	r2, #8
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4413      	add	r3, r2
 800fb6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f003 0307 	and.w	r3, r3, #7
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d014      	beq.n	800fba4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f023 0307 	bic.w	r3, r3, #7
 800fb80:	3308      	adds	r3, #8
 800fb82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f003 0307 	and.w	r3, r3, #7
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d00a      	beq.n	800fba4 <pvPortMalloc+0x6c>
	__asm volatile
 800fb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb92:	f383 8811 	msr	BASEPRI, r3
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	617b      	str	r3, [r7, #20]
}
 800fba0:	bf00      	nop
 800fba2:	e7fe      	b.n	800fba2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d06e      	beq.n	800fc88 <pvPortMalloc+0x150>
 800fbaa:	4b45      	ldr	r3, [pc, #276]	; (800fcc0 <pvPortMalloc+0x188>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d869      	bhi.n	800fc88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fbb4:	4b43      	ldr	r3, [pc, #268]	; (800fcc4 <pvPortMalloc+0x18c>)
 800fbb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fbb8:	4b42      	ldr	r3, [pc, #264]	; (800fcc4 <pvPortMalloc+0x18c>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbbe:	e004      	b.n	800fbca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d903      	bls.n	800fbdc <pvPortMalloc+0xa4>
 800fbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d1f1      	bne.n	800fbc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fbdc:	4b36      	ldr	r3, [pc, #216]	; (800fcb8 <pvPortMalloc+0x180>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d050      	beq.n	800fc88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fbe6:	6a3b      	ldr	r3, [r7, #32]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	2208      	movs	r2, #8
 800fbec:	4413      	add	r3, r2
 800fbee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf2:	681a      	ldr	r2, [r3, #0]
 800fbf4:	6a3b      	ldr	r3, [r7, #32]
 800fbf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfa:	685a      	ldr	r2, [r3, #4]
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	1ad2      	subs	r2, r2, r3
 800fc00:	2308      	movs	r3, #8
 800fc02:	005b      	lsls	r3, r3, #1
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d91f      	bls.n	800fc48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fc08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc10:	69bb      	ldr	r3, [r7, #24]
 800fc12:	f003 0307 	and.w	r3, r3, #7
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d00a      	beq.n	800fc30 <pvPortMalloc+0xf8>
	__asm volatile
 800fc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc1e:	f383 8811 	msr	BASEPRI, r3
 800fc22:	f3bf 8f6f 	isb	sy
 800fc26:	f3bf 8f4f 	dsb	sy
 800fc2a:	613b      	str	r3, [r7, #16]
}
 800fc2c:	bf00      	nop
 800fc2e:	e7fe      	b.n	800fc2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc32:	685a      	ldr	r2, [r3, #4]
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	1ad2      	subs	r2, r2, r3
 800fc38:	69bb      	ldr	r3, [r7, #24]
 800fc3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3e:	687a      	ldr	r2, [r7, #4]
 800fc40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fc42:	69b8      	ldr	r0, [r7, #24]
 800fc44:	f000 f908 	bl	800fe58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fc48:	4b1d      	ldr	r3, [pc, #116]	; (800fcc0 <pvPortMalloc+0x188>)
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	1ad3      	subs	r3, r2, r3
 800fc52:	4a1b      	ldr	r2, [pc, #108]	; (800fcc0 <pvPortMalloc+0x188>)
 800fc54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fc56:	4b1a      	ldr	r3, [pc, #104]	; (800fcc0 <pvPortMalloc+0x188>)
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	4b1b      	ldr	r3, [pc, #108]	; (800fcc8 <pvPortMalloc+0x190>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d203      	bcs.n	800fc6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fc62:	4b17      	ldr	r3, [pc, #92]	; (800fcc0 <pvPortMalloc+0x188>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	4a18      	ldr	r2, [pc, #96]	; (800fcc8 <pvPortMalloc+0x190>)
 800fc68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6c:	685a      	ldr	r2, [r3, #4]
 800fc6e:	4b13      	ldr	r3, [pc, #76]	; (800fcbc <pvPortMalloc+0x184>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	431a      	orrs	r2, r3
 800fc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fc7e:	4b13      	ldr	r3, [pc, #76]	; (800fccc <pvPortMalloc+0x194>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	3301      	adds	r3, #1
 800fc84:	4a11      	ldr	r2, [pc, #68]	; (800fccc <pvPortMalloc+0x194>)
 800fc86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fc88:	f7fe fd02 	bl	800e690 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc8c:	69fb      	ldr	r3, [r7, #28]
 800fc8e:	f003 0307 	and.w	r3, r3, #7
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d00a      	beq.n	800fcac <pvPortMalloc+0x174>
	__asm volatile
 800fc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc9a:	f383 8811 	msr	BASEPRI, r3
 800fc9e:	f3bf 8f6f 	isb	sy
 800fca2:	f3bf 8f4f 	dsb	sy
 800fca6:	60fb      	str	r3, [r7, #12]
}
 800fca8:	bf00      	nop
 800fcaa:	e7fe      	b.n	800fcaa <pvPortMalloc+0x172>
	return pvReturn;
 800fcac:	69fb      	ldr	r3, [r7, #28]
}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	3728      	adds	r7, #40	; 0x28
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	bf00      	nop
 800fcb8:	200063a4 	.word	0x200063a4
 800fcbc:	200063b8 	.word	0x200063b8
 800fcc0:	200063a8 	.word	0x200063a8
 800fcc4:	2000639c 	.word	0x2000639c
 800fcc8:	200063ac 	.word	0x200063ac
 800fccc:	200063b0 	.word	0x200063b0

0800fcd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b086      	sub	sp, #24
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d04d      	beq.n	800fd7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fce2:	2308      	movs	r3, #8
 800fce4:	425b      	negs	r3, r3
 800fce6:	697a      	ldr	r2, [r7, #20]
 800fce8:	4413      	add	r3, r2
 800fcea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	685a      	ldr	r2, [r3, #4]
 800fcf4:	4b24      	ldr	r3, [pc, #144]	; (800fd88 <vPortFree+0xb8>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	4013      	ands	r3, r2
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d10a      	bne.n	800fd14 <vPortFree+0x44>
	__asm volatile
 800fcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd02:	f383 8811 	msr	BASEPRI, r3
 800fd06:	f3bf 8f6f 	isb	sy
 800fd0a:	f3bf 8f4f 	dsb	sy
 800fd0e:	60fb      	str	r3, [r7, #12]
}
 800fd10:	bf00      	nop
 800fd12:	e7fe      	b.n	800fd12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d00a      	beq.n	800fd32 <vPortFree+0x62>
	__asm volatile
 800fd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd20:	f383 8811 	msr	BASEPRI, r3
 800fd24:	f3bf 8f6f 	isb	sy
 800fd28:	f3bf 8f4f 	dsb	sy
 800fd2c:	60bb      	str	r3, [r7, #8]
}
 800fd2e:	bf00      	nop
 800fd30:	e7fe      	b.n	800fd30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	685a      	ldr	r2, [r3, #4]
 800fd36:	4b14      	ldr	r3, [pc, #80]	; (800fd88 <vPortFree+0xb8>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	4013      	ands	r3, r2
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d01e      	beq.n	800fd7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d11a      	bne.n	800fd7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	685a      	ldr	r2, [r3, #4]
 800fd4c:	4b0e      	ldr	r3, [pc, #56]	; (800fd88 <vPortFree+0xb8>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	43db      	mvns	r3, r3
 800fd52:	401a      	ands	r2, r3
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fd58:	f7fe fc8c 	bl	800e674 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	685a      	ldr	r2, [r3, #4]
 800fd60:	4b0a      	ldr	r3, [pc, #40]	; (800fd8c <vPortFree+0xbc>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4413      	add	r3, r2
 800fd66:	4a09      	ldr	r2, [pc, #36]	; (800fd8c <vPortFree+0xbc>)
 800fd68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fd6a:	6938      	ldr	r0, [r7, #16]
 800fd6c:	f000 f874 	bl	800fe58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fd70:	4b07      	ldr	r3, [pc, #28]	; (800fd90 <vPortFree+0xc0>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	3301      	adds	r3, #1
 800fd76:	4a06      	ldr	r2, [pc, #24]	; (800fd90 <vPortFree+0xc0>)
 800fd78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fd7a:	f7fe fc89 	bl	800e690 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fd7e:	bf00      	nop
 800fd80:	3718      	adds	r7, #24
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	bf00      	nop
 800fd88:	200063b8 	.word	0x200063b8
 800fd8c:	200063a8 	.word	0x200063a8
 800fd90:	200063b4 	.word	0x200063b4

0800fd94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fd94:	b480      	push	{r7}
 800fd96:	b085      	sub	sp, #20
 800fd98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fd9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fd9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fda0:	4b27      	ldr	r3, [pc, #156]	; (800fe40 <prvHeapInit+0xac>)
 800fda2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f003 0307 	and.w	r3, r3, #7
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d00c      	beq.n	800fdc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	3307      	adds	r3, #7
 800fdb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	f023 0307 	bic.w	r3, r3, #7
 800fdba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fdbc:	68ba      	ldr	r2, [r7, #8]
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	1ad3      	subs	r3, r2, r3
 800fdc2:	4a1f      	ldr	r2, [pc, #124]	; (800fe40 <prvHeapInit+0xac>)
 800fdc4:	4413      	add	r3, r2
 800fdc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fdcc:	4a1d      	ldr	r2, [pc, #116]	; (800fe44 <prvHeapInit+0xb0>)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fdd2:	4b1c      	ldr	r3, [pc, #112]	; (800fe44 <prvHeapInit+0xb0>)
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	68ba      	ldr	r2, [r7, #8]
 800fddc:	4413      	add	r3, r2
 800fdde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fde0:	2208      	movs	r2, #8
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	1a9b      	subs	r3, r3, r2
 800fde6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f023 0307 	bic.w	r3, r3, #7
 800fdee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	4a15      	ldr	r2, [pc, #84]	; (800fe48 <prvHeapInit+0xb4>)
 800fdf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fdf6:	4b14      	ldr	r3, [pc, #80]	; (800fe48 <prvHeapInit+0xb4>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fdfe:	4b12      	ldr	r3, [pc, #72]	; (800fe48 <prvHeapInit+0xb4>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	2200      	movs	r2, #0
 800fe04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	68fa      	ldr	r2, [r7, #12]
 800fe0e:	1ad2      	subs	r2, r2, r3
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fe14:	4b0c      	ldr	r3, [pc, #48]	; (800fe48 <prvHeapInit+0xb4>)
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	4a0a      	ldr	r2, [pc, #40]	; (800fe4c <prvHeapInit+0xb8>)
 800fe22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	685b      	ldr	r3, [r3, #4]
 800fe28:	4a09      	ldr	r2, [pc, #36]	; (800fe50 <prvHeapInit+0xbc>)
 800fe2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fe2c:	4b09      	ldr	r3, [pc, #36]	; (800fe54 <prvHeapInit+0xc0>)
 800fe2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fe32:	601a      	str	r2, [r3, #0]
}
 800fe34:	bf00      	nop
 800fe36:	3714      	adds	r7, #20
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr
 800fe40:	2000279c 	.word	0x2000279c
 800fe44:	2000639c 	.word	0x2000639c
 800fe48:	200063a4 	.word	0x200063a4
 800fe4c:	200063ac 	.word	0x200063ac
 800fe50:	200063a8 	.word	0x200063a8
 800fe54:	200063b8 	.word	0x200063b8

0800fe58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b085      	sub	sp, #20
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fe60:	4b28      	ldr	r3, [pc, #160]	; (800ff04 <prvInsertBlockIntoFreeList+0xac>)
 800fe62:	60fb      	str	r3, [r7, #12]
 800fe64:	e002      	b.n	800fe6c <prvInsertBlockIntoFreeList+0x14>
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	60fb      	str	r3, [r7, #12]
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d8f7      	bhi.n	800fe66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	685b      	ldr	r3, [r3, #4]
 800fe7e:	68ba      	ldr	r2, [r7, #8]
 800fe80:	4413      	add	r3, r2
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d108      	bne.n	800fe9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	685a      	ldr	r2, [r3, #4]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	441a      	add	r2, r3
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	685b      	ldr	r3, [r3, #4]
 800fea2:	68ba      	ldr	r2, [r7, #8]
 800fea4:	441a      	add	r2, r3
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d118      	bne.n	800fee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	681a      	ldr	r2, [r3, #0]
 800feb2:	4b15      	ldr	r3, [pc, #84]	; (800ff08 <prvInsertBlockIntoFreeList+0xb0>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d00d      	beq.n	800fed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	685a      	ldr	r2, [r3, #4]
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	441a      	add	r2, r3
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	681a      	ldr	r2, [r3, #0]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	601a      	str	r2, [r3, #0]
 800fed4:	e008      	b.n	800fee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fed6:	4b0c      	ldr	r3, [pc, #48]	; (800ff08 <prvInsertBlockIntoFreeList+0xb0>)
 800fed8:	681a      	ldr	r2, [r3, #0]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	601a      	str	r2, [r3, #0]
 800fede:	e003      	b.n	800fee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	681a      	ldr	r2, [r3, #0]
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fee8:	68fa      	ldr	r2, [r7, #12]
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	429a      	cmp	r2, r3
 800feee:	d002      	beq.n	800fef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	687a      	ldr	r2, [r7, #4]
 800fef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fef6:	bf00      	nop
 800fef8:	3714      	adds	r7, #20
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr
 800ff02:	bf00      	nop
 800ff04:	2000639c 	.word	0x2000639c
 800ff08:	200063a4 	.word	0x200063a4

0800ff0c <__errno>:
 800ff0c:	4b01      	ldr	r3, [pc, #4]	; (800ff14 <__errno+0x8>)
 800ff0e:	6818      	ldr	r0, [r3, #0]
 800ff10:	4770      	bx	lr
 800ff12:	bf00      	nop
 800ff14:	20000014 	.word	0x20000014

0800ff18 <__libc_init_array>:
 800ff18:	b570      	push	{r4, r5, r6, lr}
 800ff1a:	4d0d      	ldr	r5, [pc, #52]	; (800ff50 <__libc_init_array+0x38>)
 800ff1c:	4c0d      	ldr	r4, [pc, #52]	; (800ff54 <__libc_init_array+0x3c>)
 800ff1e:	1b64      	subs	r4, r4, r5
 800ff20:	10a4      	asrs	r4, r4, #2
 800ff22:	2600      	movs	r6, #0
 800ff24:	42a6      	cmp	r6, r4
 800ff26:	d109      	bne.n	800ff3c <__libc_init_array+0x24>
 800ff28:	4d0b      	ldr	r5, [pc, #44]	; (800ff58 <__libc_init_array+0x40>)
 800ff2a:	4c0c      	ldr	r4, [pc, #48]	; (800ff5c <__libc_init_array+0x44>)
 800ff2c:	f004 fc90 	bl	8014850 <_init>
 800ff30:	1b64      	subs	r4, r4, r5
 800ff32:	10a4      	asrs	r4, r4, #2
 800ff34:	2600      	movs	r6, #0
 800ff36:	42a6      	cmp	r6, r4
 800ff38:	d105      	bne.n	800ff46 <__libc_init_array+0x2e>
 800ff3a:	bd70      	pop	{r4, r5, r6, pc}
 800ff3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff40:	4798      	blx	r3
 800ff42:	3601      	adds	r6, #1
 800ff44:	e7ee      	b.n	800ff24 <__libc_init_array+0xc>
 800ff46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff4a:	4798      	blx	r3
 800ff4c:	3601      	adds	r6, #1
 800ff4e:	e7f2      	b.n	800ff36 <__libc_init_array+0x1e>
 800ff50:	08015904 	.word	0x08015904
 800ff54:	08015904 	.word	0x08015904
 800ff58:	08015904 	.word	0x08015904
 800ff5c:	08015908 	.word	0x08015908

0800ff60 <memcpy>:
 800ff60:	440a      	add	r2, r1
 800ff62:	4291      	cmp	r1, r2
 800ff64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ff68:	d100      	bne.n	800ff6c <memcpy+0xc>
 800ff6a:	4770      	bx	lr
 800ff6c:	b510      	push	{r4, lr}
 800ff6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff76:	4291      	cmp	r1, r2
 800ff78:	d1f9      	bne.n	800ff6e <memcpy+0xe>
 800ff7a:	bd10      	pop	{r4, pc}

0800ff7c <memset>:
 800ff7c:	4402      	add	r2, r0
 800ff7e:	4603      	mov	r3, r0
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d100      	bne.n	800ff86 <memset+0xa>
 800ff84:	4770      	bx	lr
 800ff86:	f803 1b01 	strb.w	r1, [r3], #1
 800ff8a:	e7f9      	b.n	800ff80 <memset+0x4>

0800ff8c <__cvt>:
 800ff8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff90:	ec55 4b10 	vmov	r4, r5, d0
 800ff94:	2d00      	cmp	r5, #0
 800ff96:	460e      	mov	r6, r1
 800ff98:	4619      	mov	r1, r3
 800ff9a:	462b      	mov	r3, r5
 800ff9c:	bfbb      	ittet	lt
 800ff9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ffa2:	461d      	movlt	r5, r3
 800ffa4:	2300      	movge	r3, #0
 800ffa6:	232d      	movlt	r3, #45	; 0x2d
 800ffa8:	700b      	strb	r3, [r1, #0]
 800ffaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ffb0:	4691      	mov	r9, r2
 800ffb2:	f023 0820 	bic.w	r8, r3, #32
 800ffb6:	bfbc      	itt	lt
 800ffb8:	4622      	movlt	r2, r4
 800ffba:	4614      	movlt	r4, r2
 800ffbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ffc0:	d005      	beq.n	800ffce <__cvt+0x42>
 800ffc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ffc6:	d100      	bne.n	800ffca <__cvt+0x3e>
 800ffc8:	3601      	adds	r6, #1
 800ffca:	2102      	movs	r1, #2
 800ffcc:	e000      	b.n	800ffd0 <__cvt+0x44>
 800ffce:	2103      	movs	r1, #3
 800ffd0:	ab03      	add	r3, sp, #12
 800ffd2:	9301      	str	r3, [sp, #4]
 800ffd4:	ab02      	add	r3, sp, #8
 800ffd6:	9300      	str	r3, [sp, #0]
 800ffd8:	ec45 4b10 	vmov	d0, r4, r5
 800ffdc:	4653      	mov	r3, sl
 800ffde:	4632      	mov	r2, r6
 800ffe0:	f001 fdae 	bl	8011b40 <_dtoa_r>
 800ffe4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ffe8:	4607      	mov	r7, r0
 800ffea:	d102      	bne.n	800fff2 <__cvt+0x66>
 800ffec:	f019 0f01 	tst.w	r9, #1
 800fff0:	d022      	beq.n	8010038 <__cvt+0xac>
 800fff2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fff6:	eb07 0906 	add.w	r9, r7, r6
 800fffa:	d110      	bne.n	801001e <__cvt+0x92>
 800fffc:	783b      	ldrb	r3, [r7, #0]
 800fffe:	2b30      	cmp	r3, #48	; 0x30
 8010000:	d10a      	bne.n	8010018 <__cvt+0x8c>
 8010002:	2200      	movs	r2, #0
 8010004:	2300      	movs	r3, #0
 8010006:	4620      	mov	r0, r4
 8010008:	4629      	mov	r1, r5
 801000a:	f7f0 fd5d 	bl	8000ac8 <__aeabi_dcmpeq>
 801000e:	b918      	cbnz	r0, 8010018 <__cvt+0x8c>
 8010010:	f1c6 0601 	rsb	r6, r6, #1
 8010014:	f8ca 6000 	str.w	r6, [sl]
 8010018:	f8da 3000 	ldr.w	r3, [sl]
 801001c:	4499      	add	r9, r3
 801001e:	2200      	movs	r2, #0
 8010020:	2300      	movs	r3, #0
 8010022:	4620      	mov	r0, r4
 8010024:	4629      	mov	r1, r5
 8010026:	f7f0 fd4f 	bl	8000ac8 <__aeabi_dcmpeq>
 801002a:	b108      	cbz	r0, 8010030 <__cvt+0xa4>
 801002c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010030:	2230      	movs	r2, #48	; 0x30
 8010032:	9b03      	ldr	r3, [sp, #12]
 8010034:	454b      	cmp	r3, r9
 8010036:	d307      	bcc.n	8010048 <__cvt+0xbc>
 8010038:	9b03      	ldr	r3, [sp, #12]
 801003a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801003c:	1bdb      	subs	r3, r3, r7
 801003e:	4638      	mov	r0, r7
 8010040:	6013      	str	r3, [r2, #0]
 8010042:	b004      	add	sp, #16
 8010044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010048:	1c59      	adds	r1, r3, #1
 801004a:	9103      	str	r1, [sp, #12]
 801004c:	701a      	strb	r2, [r3, #0]
 801004e:	e7f0      	b.n	8010032 <__cvt+0xa6>

08010050 <__exponent>:
 8010050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010052:	4603      	mov	r3, r0
 8010054:	2900      	cmp	r1, #0
 8010056:	bfb8      	it	lt
 8010058:	4249      	neglt	r1, r1
 801005a:	f803 2b02 	strb.w	r2, [r3], #2
 801005e:	bfb4      	ite	lt
 8010060:	222d      	movlt	r2, #45	; 0x2d
 8010062:	222b      	movge	r2, #43	; 0x2b
 8010064:	2909      	cmp	r1, #9
 8010066:	7042      	strb	r2, [r0, #1]
 8010068:	dd2a      	ble.n	80100c0 <__exponent+0x70>
 801006a:	f10d 0407 	add.w	r4, sp, #7
 801006e:	46a4      	mov	ip, r4
 8010070:	270a      	movs	r7, #10
 8010072:	46a6      	mov	lr, r4
 8010074:	460a      	mov	r2, r1
 8010076:	fb91 f6f7 	sdiv	r6, r1, r7
 801007a:	fb07 1516 	mls	r5, r7, r6, r1
 801007e:	3530      	adds	r5, #48	; 0x30
 8010080:	2a63      	cmp	r2, #99	; 0x63
 8010082:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8010086:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801008a:	4631      	mov	r1, r6
 801008c:	dcf1      	bgt.n	8010072 <__exponent+0x22>
 801008e:	3130      	adds	r1, #48	; 0x30
 8010090:	f1ae 0502 	sub.w	r5, lr, #2
 8010094:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010098:	1c44      	adds	r4, r0, #1
 801009a:	4629      	mov	r1, r5
 801009c:	4561      	cmp	r1, ip
 801009e:	d30a      	bcc.n	80100b6 <__exponent+0x66>
 80100a0:	f10d 0209 	add.w	r2, sp, #9
 80100a4:	eba2 020e 	sub.w	r2, r2, lr
 80100a8:	4565      	cmp	r5, ip
 80100aa:	bf88      	it	hi
 80100ac:	2200      	movhi	r2, #0
 80100ae:	4413      	add	r3, r2
 80100b0:	1a18      	subs	r0, r3, r0
 80100b2:	b003      	add	sp, #12
 80100b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80100be:	e7ed      	b.n	801009c <__exponent+0x4c>
 80100c0:	2330      	movs	r3, #48	; 0x30
 80100c2:	3130      	adds	r1, #48	; 0x30
 80100c4:	7083      	strb	r3, [r0, #2]
 80100c6:	70c1      	strb	r1, [r0, #3]
 80100c8:	1d03      	adds	r3, r0, #4
 80100ca:	e7f1      	b.n	80100b0 <__exponent+0x60>

080100cc <_printf_float>:
 80100cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d0:	ed2d 8b02 	vpush	{d8}
 80100d4:	b08d      	sub	sp, #52	; 0x34
 80100d6:	460c      	mov	r4, r1
 80100d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80100dc:	4616      	mov	r6, r2
 80100de:	461f      	mov	r7, r3
 80100e0:	4605      	mov	r5, r0
 80100e2:	f002 fe8b 	bl	8012dfc <_localeconv_r>
 80100e6:	f8d0 a000 	ldr.w	sl, [r0]
 80100ea:	4650      	mov	r0, sl
 80100ec:	f7f0 f870 	bl	80001d0 <strlen>
 80100f0:	2300      	movs	r3, #0
 80100f2:	930a      	str	r3, [sp, #40]	; 0x28
 80100f4:	6823      	ldr	r3, [r4, #0]
 80100f6:	9305      	str	r3, [sp, #20]
 80100f8:	f8d8 3000 	ldr.w	r3, [r8]
 80100fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010100:	3307      	adds	r3, #7
 8010102:	f023 0307 	bic.w	r3, r3, #7
 8010106:	f103 0208 	add.w	r2, r3, #8
 801010a:	f8c8 2000 	str.w	r2, [r8]
 801010e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010112:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010116:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801011a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801011e:	9307      	str	r3, [sp, #28]
 8010120:	f8cd 8018 	str.w	r8, [sp, #24]
 8010124:	ee08 0a10 	vmov	s16, r0
 8010128:	4b9f      	ldr	r3, [pc, #636]	; (80103a8 <_printf_float+0x2dc>)
 801012a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801012e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010132:	f7f0 fcfb 	bl	8000b2c <__aeabi_dcmpun>
 8010136:	bb88      	cbnz	r0, 801019c <_printf_float+0xd0>
 8010138:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801013c:	4b9a      	ldr	r3, [pc, #616]	; (80103a8 <_printf_float+0x2dc>)
 801013e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010142:	f7f0 fcd5 	bl	8000af0 <__aeabi_dcmple>
 8010146:	bb48      	cbnz	r0, 801019c <_printf_float+0xd0>
 8010148:	2200      	movs	r2, #0
 801014a:	2300      	movs	r3, #0
 801014c:	4640      	mov	r0, r8
 801014e:	4649      	mov	r1, r9
 8010150:	f7f0 fcc4 	bl	8000adc <__aeabi_dcmplt>
 8010154:	b110      	cbz	r0, 801015c <_printf_float+0x90>
 8010156:	232d      	movs	r3, #45	; 0x2d
 8010158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801015c:	4b93      	ldr	r3, [pc, #588]	; (80103ac <_printf_float+0x2e0>)
 801015e:	4894      	ldr	r0, [pc, #592]	; (80103b0 <_printf_float+0x2e4>)
 8010160:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010164:	bf94      	ite	ls
 8010166:	4698      	movls	r8, r3
 8010168:	4680      	movhi	r8, r0
 801016a:	2303      	movs	r3, #3
 801016c:	6123      	str	r3, [r4, #16]
 801016e:	9b05      	ldr	r3, [sp, #20]
 8010170:	f023 0204 	bic.w	r2, r3, #4
 8010174:	6022      	str	r2, [r4, #0]
 8010176:	f04f 0900 	mov.w	r9, #0
 801017a:	9700      	str	r7, [sp, #0]
 801017c:	4633      	mov	r3, r6
 801017e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010180:	4621      	mov	r1, r4
 8010182:	4628      	mov	r0, r5
 8010184:	f000 f9d8 	bl	8010538 <_printf_common>
 8010188:	3001      	adds	r0, #1
 801018a:	f040 8090 	bne.w	80102ae <_printf_float+0x1e2>
 801018e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010192:	b00d      	add	sp, #52	; 0x34
 8010194:	ecbd 8b02 	vpop	{d8}
 8010198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801019c:	4642      	mov	r2, r8
 801019e:	464b      	mov	r3, r9
 80101a0:	4640      	mov	r0, r8
 80101a2:	4649      	mov	r1, r9
 80101a4:	f7f0 fcc2 	bl	8000b2c <__aeabi_dcmpun>
 80101a8:	b140      	cbz	r0, 80101bc <_printf_float+0xf0>
 80101aa:	464b      	mov	r3, r9
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	bfbc      	itt	lt
 80101b0:	232d      	movlt	r3, #45	; 0x2d
 80101b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80101b6:	487f      	ldr	r0, [pc, #508]	; (80103b4 <_printf_float+0x2e8>)
 80101b8:	4b7f      	ldr	r3, [pc, #508]	; (80103b8 <_printf_float+0x2ec>)
 80101ba:	e7d1      	b.n	8010160 <_printf_float+0x94>
 80101bc:	6863      	ldr	r3, [r4, #4]
 80101be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80101c2:	9206      	str	r2, [sp, #24]
 80101c4:	1c5a      	adds	r2, r3, #1
 80101c6:	d13f      	bne.n	8010248 <_printf_float+0x17c>
 80101c8:	2306      	movs	r3, #6
 80101ca:	6063      	str	r3, [r4, #4]
 80101cc:	9b05      	ldr	r3, [sp, #20]
 80101ce:	6861      	ldr	r1, [r4, #4]
 80101d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80101d4:	2300      	movs	r3, #0
 80101d6:	9303      	str	r3, [sp, #12]
 80101d8:	ab0a      	add	r3, sp, #40	; 0x28
 80101da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80101de:	ab09      	add	r3, sp, #36	; 0x24
 80101e0:	ec49 8b10 	vmov	d0, r8, r9
 80101e4:	9300      	str	r3, [sp, #0]
 80101e6:	6022      	str	r2, [r4, #0]
 80101e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80101ec:	4628      	mov	r0, r5
 80101ee:	f7ff fecd 	bl	800ff8c <__cvt>
 80101f2:	9b06      	ldr	r3, [sp, #24]
 80101f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101f6:	2b47      	cmp	r3, #71	; 0x47
 80101f8:	4680      	mov	r8, r0
 80101fa:	d108      	bne.n	801020e <_printf_float+0x142>
 80101fc:	1cc8      	adds	r0, r1, #3
 80101fe:	db02      	blt.n	8010206 <_printf_float+0x13a>
 8010200:	6863      	ldr	r3, [r4, #4]
 8010202:	4299      	cmp	r1, r3
 8010204:	dd41      	ble.n	801028a <_printf_float+0x1be>
 8010206:	f1ab 0b02 	sub.w	fp, fp, #2
 801020a:	fa5f fb8b 	uxtb.w	fp, fp
 801020e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010212:	d820      	bhi.n	8010256 <_printf_float+0x18a>
 8010214:	3901      	subs	r1, #1
 8010216:	465a      	mov	r2, fp
 8010218:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801021c:	9109      	str	r1, [sp, #36]	; 0x24
 801021e:	f7ff ff17 	bl	8010050 <__exponent>
 8010222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010224:	1813      	adds	r3, r2, r0
 8010226:	2a01      	cmp	r2, #1
 8010228:	4681      	mov	r9, r0
 801022a:	6123      	str	r3, [r4, #16]
 801022c:	dc02      	bgt.n	8010234 <_printf_float+0x168>
 801022e:	6822      	ldr	r2, [r4, #0]
 8010230:	07d2      	lsls	r2, r2, #31
 8010232:	d501      	bpl.n	8010238 <_printf_float+0x16c>
 8010234:	3301      	adds	r3, #1
 8010236:	6123      	str	r3, [r4, #16]
 8010238:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801023c:	2b00      	cmp	r3, #0
 801023e:	d09c      	beq.n	801017a <_printf_float+0xae>
 8010240:	232d      	movs	r3, #45	; 0x2d
 8010242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010246:	e798      	b.n	801017a <_printf_float+0xae>
 8010248:	9a06      	ldr	r2, [sp, #24]
 801024a:	2a47      	cmp	r2, #71	; 0x47
 801024c:	d1be      	bne.n	80101cc <_printf_float+0x100>
 801024e:	2b00      	cmp	r3, #0
 8010250:	d1bc      	bne.n	80101cc <_printf_float+0x100>
 8010252:	2301      	movs	r3, #1
 8010254:	e7b9      	b.n	80101ca <_printf_float+0xfe>
 8010256:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801025a:	d118      	bne.n	801028e <_printf_float+0x1c2>
 801025c:	2900      	cmp	r1, #0
 801025e:	6863      	ldr	r3, [r4, #4]
 8010260:	dd0b      	ble.n	801027a <_printf_float+0x1ae>
 8010262:	6121      	str	r1, [r4, #16]
 8010264:	b913      	cbnz	r3, 801026c <_printf_float+0x1a0>
 8010266:	6822      	ldr	r2, [r4, #0]
 8010268:	07d0      	lsls	r0, r2, #31
 801026a:	d502      	bpl.n	8010272 <_printf_float+0x1a6>
 801026c:	3301      	adds	r3, #1
 801026e:	440b      	add	r3, r1
 8010270:	6123      	str	r3, [r4, #16]
 8010272:	65a1      	str	r1, [r4, #88]	; 0x58
 8010274:	f04f 0900 	mov.w	r9, #0
 8010278:	e7de      	b.n	8010238 <_printf_float+0x16c>
 801027a:	b913      	cbnz	r3, 8010282 <_printf_float+0x1b6>
 801027c:	6822      	ldr	r2, [r4, #0]
 801027e:	07d2      	lsls	r2, r2, #31
 8010280:	d501      	bpl.n	8010286 <_printf_float+0x1ba>
 8010282:	3302      	adds	r3, #2
 8010284:	e7f4      	b.n	8010270 <_printf_float+0x1a4>
 8010286:	2301      	movs	r3, #1
 8010288:	e7f2      	b.n	8010270 <_printf_float+0x1a4>
 801028a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801028e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010290:	4299      	cmp	r1, r3
 8010292:	db05      	blt.n	80102a0 <_printf_float+0x1d4>
 8010294:	6823      	ldr	r3, [r4, #0]
 8010296:	6121      	str	r1, [r4, #16]
 8010298:	07d8      	lsls	r0, r3, #31
 801029a:	d5ea      	bpl.n	8010272 <_printf_float+0x1a6>
 801029c:	1c4b      	adds	r3, r1, #1
 801029e:	e7e7      	b.n	8010270 <_printf_float+0x1a4>
 80102a0:	2900      	cmp	r1, #0
 80102a2:	bfd4      	ite	le
 80102a4:	f1c1 0202 	rsble	r2, r1, #2
 80102a8:	2201      	movgt	r2, #1
 80102aa:	4413      	add	r3, r2
 80102ac:	e7e0      	b.n	8010270 <_printf_float+0x1a4>
 80102ae:	6823      	ldr	r3, [r4, #0]
 80102b0:	055a      	lsls	r2, r3, #21
 80102b2:	d407      	bmi.n	80102c4 <_printf_float+0x1f8>
 80102b4:	6923      	ldr	r3, [r4, #16]
 80102b6:	4642      	mov	r2, r8
 80102b8:	4631      	mov	r1, r6
 80102ba:	4628      	mov	r0, r5
 80102bc:	47b8      	blx	r7
 80102be:	3001      	adds	r0, #1
 80102c0:	d12c      	bne.n	801031c <_printf_float+0x250>
 80102c2:	e764      	b.n	801018e <_printf_float+0xc2>
 80102c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80102c8:	f240 80e0 	bls.w	801048c <_printf_float+0x3c0>
 80102cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80102d0:	2200      	movs	r2, #0
 80102d2:	2300      	movs	r3, #0
 80102d4:	f7f0 fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80102d8:	2800      	cmp	r0, #0
 80102da:	d034      	beq.n	8010346 <_printf_float+0x27a>
 80102dc:	4a37      	ldr	r2, [pc, #220]	; (80103bc <_printf_float+0x2f0>)
 80102de:	2301      	movs	r3, #1
 80102e0:	4631      	mov	r1, r6
 80102e2:	4628      	mov	r0, r5
 80102e4:	47b8      	blx	r7
 80102e6:	3001      	adds	r0, #1
 80102e8:	f43f af51 	beq.w	801018e <_printf_float+0xc2>
 80102ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102f0:	429a      	cmp	r2, r3
 80102f2:	db02      	blt.n	80102fa <_printf_float+0x22e>
 80102f4:	6823      	ldr	r3, [r4, #0]
 80102f6:	07d8      	lsls	r0, r3, #31
 80102f8:	d510      	bpl.n	801031c <_printf_float+0x250>
 80102fa:	ee18 3a10 	vmov	r3, s16
 80102fe:	4652      	mov	r2, sl
 8010300:	4631      	mov	r1, r6
 8010302:	4628      	mov	r0, r5
 8010304:	47b8      	blx	r7
 8010306:	3001      	adds	r0, #1
 8010308:	f43f af41 	beq.w	801018e <_printf_float+0xc2>
 801030c:	f04f 0800 	mov.w	r8, #0
 8010310:	f104 091a 	add.w	r9, r4, #26
 8010314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010316:	3b01      	subs	r3, #1
 8010318:	4543      	cmp	r3, r8
 801031a:	dc09      	bgt.n	8010330 <_printf_float+0x264>
 801031c:	6823      	ldr	r3, [r4, #0]
 801031e:	079b      	lsls	r3, r3, #30
 8010320:	f100 8105 	bmi.w	801052e <_printf_float+0x462>
 8010324:	68e0      	ldr	r0, [r4, #12]
 8010326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010328:	4298      	cmp	r0, r3
 801032a:	bfb8      	it	lt
 801032c:	4618      	movlt	r0, r3
 801032e:	e730      	b.n	8010192 <_printf_float+0xc6>
 8010330:	2301      	movs	r3, #1
 8010332:	464a      	mov	r2, r9
 8010334:	4631      	mov	r1, r6
 8010336:	4628      	mov	r0, r5
 8010338:	47b8      	blx	r7
 801033a:	3001      	adds	r0, #1
 801033c:	f43f af27 	beq.w	801018e <_printf_float+0xc2>
 8010340:	f108 0801 	add.w	r8, r8, #1
 8010344:	e7e6      	b.n	8010314 <_printf_float+0x248>
 8010346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010348:	2b00      	cmp	r3, #0
 801034a:	dc39      	bgt.n	80103c0 <_printf_float+0x2f4>
 801034c:	4a1b      	ldr	r2, [pc, #108]	; (80103bc <_printf_float+0x2f0>)
 801034e:	2301      	movs	r3, #1
 8010350:	4631      	mov	r1, r6
 8010352:	4628      	mov	r0, r5
 8010354:	47b8      	blx	r7
 8010356:	3001      	adds	r0, #1
 8010358:	f43f af19 	beq.w	801018e <_printf_float+0xc2>
 801035c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010360:	4313      	orrs	r3, r2
 8010362:	d102      	bne.n	801036a <_printf_float+0x29e>
 8010364:	6823      	ldr	r3, [r4, #0]
 8010366:	07d9      	lsls	r1, r3, #31
 8010368:	d5d8      	bpl.n	801031c <_printf_float+0x250>
 801036a:	ee18 3a10 	vmov	r3, s16
 801036e:	4652      	mov	r2, sl
 8010370:	4631      	mov	r1, r6
 8010372:	4628      	mov	r0, r5
 8010374:	47b8      	blx	r7
 8010376:	3001      	adds	r0, #1
 8010378:	f43f af09 	beq.w	801018e <_printf_float+0xc2>
 801037c:	f04f 0900 	mov.w	r9, #0
 8010380:	f104 0a1a 	add.w	sl, r4, #26
 8010384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010386:	425b      	negs	r3, r3
 8010388:	454b      	cmp	r3, r9
 801038a:	dc01      	bgt.n	8010390 <_printf_float+0x2c4>
 801038c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801038e:	e792      	b.n	80102b6 <_printf_float+0x1ea>
 8010390:	2301      	movs	r3, #1
 8010392:	4652      	mov	r2, sl
 8010394:	4631      	mov	r1, r6
 8010396:	4628      	mov	r0, r5
 8010398:	47b8      	blx	r7
 801039a:	3001      	adds	r0, #1
 801039c:	f43f aef7 	beq.w	801018e <_printf_float+0xc2>
 80103a0:	f109 0901 	add.w	r9, r9, #1
 80103a4:	e7ee      	b.n	8010384 <_printf_float+0x2b8>
 80103a6:	bf00      	nop
 80103a8:	7fefffff 	.word	0x7fefffff
 80103ac:	0801545c 	.word	0x0801545c
 80103b0:	08015460 	.word	0x08015460
 80103b4:	08015468 	.word	0x08015468
 80103b8:	08015464 	.word	0x08015464
 80103bc:	0801546c 	.word	0x0801546c
 80103c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103c4:	429a      	cmp	r2, r3
 80103c6:	bfa8      	it	ge
 80103c8:	461a      	movge	r2, r3
 80103ca:	2a00      	cmp	r2, #0
 80103cc:	4691      	mov	r9, r2
 80103ce:	dc37      	bgt.n	8010440 <_printf_float+0x374>
 80103d0:	f04f 0b00 	mov.w	fp, #0
 80103d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80103d8:	f104 021a 	add.w	r2, r4, #26
 80103dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103de:	9305      	str	r3, [sp, #20]
 80103e0:	eba3 0309 	sub.w	r3, r3, r9
 80103e4:	455b      	cmp	r3, fp
 80103e6:	dc33      	bgt.n	8010450 <_printf_float+0x384>
 80103e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103ec:	429a      	cmp	r2, r3
 80103ee:	db3b      	blt.n	8010468 <_printf_float+0x39c>
 80103f0:	6823      	ldr	r3, [r4, #0]
 80103f2:	07da      	lsls	r2, r3, #31
 80103f4:	d438      	bmi.n	8010468 <_printf_float+0x39c>
 80103f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103f8:	9a05      	ldr	r2, [sp, #20]
 80103fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80103fc:	1a9a      	subs	r2, r3, r2
 80103fe:	eba3 0901 	sub.w	r9, r3, r1
 8010402:	4591      	cmp	r9, r2
 8010404:	bfa8      	it	ge
 8010406:	4691      	movge	r9, r2
 8010408:	f1b9 0f00 	cmp.w	r9, #0
 801040c:	dc35      	bgt.n	801047a <_printf_float+0x3ae>
 801040e:	f04f 0800 	mov.w	r8, #0
 8010412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010416:	f104 0a1a 	add.w	sl, r4, #26
 801041a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801041e:	1a9b      	subs	r3, r3, r2
 8010420:	eba3 0309 	sub.w	r3, r3, r9
 8010424:	4543      	cmp	r3, r8
 8010426:	f77f af79 	ble.w	801031c <_printf_float+0x250>
 801042a:	2301      	movs	r3, #1
 801042c:	4652      	mov	r2, sl
 801042e:	4631      	mov	r1, r6
 8010430:	4628      	mov	r0, r5
 8010432:	47b8      	blx	r7
 8010434:	3001      	adds	r0, #1
 8010436:	f43f aeaa 	beq.w	801018e <_printf_float+0xc2>
 801043a:	f108 0801 	add.w	r8, r8, #1
 801043e:	e7ec      	b.n	801041a <_printf_float+0x34e>
 8010440:	4613      	mov	r3, r2
 8010442:	4631      	mov	r1, r6
 8010444:	4642      	mov	r2, r8
 8010446:	4628      	mov	r0, r5
 8010448:	47b8      	blx	r7
 801044a:	3001      	adds	r0, #1
 801044c:	d1c0      	bne.n	80103d0 <_printf_float+0x304>
 801044e:	e69e      	b.n	801018e <_printf_float+0xc2>
 8010450:	2301      	movs	r3, #1
 8010452:	4631      	mov	r1, r6
 8010454:	4628      	mov	r0, r5
 8010456:	9205      	str	r2, [sp, #20]
 8010458:	47b8      	blx	r7
 801045a:	3001      	adds	r0, #1
 801045c:	f43f ae97 	beq.w	801018e <_printf_float+0xc2>
 8010460:	9a05      	ldr	r2, [sp, #20]
 8010462:	f10b 0b01 	add.w	fp, fp, #1
 8010466:	e7b9      	b.n	80103dc <_printf_float+0x310>
 8010468:	ee18 3a10 	vmov	r3, s16
 801046c:	4652      	mov	r2, sl
 801046e:	4631      	mov	r1, r6
 8010470:	4628      	mov	r0, r5
 8010472:	47b8      	blx	r7
 8010474:	3001      	adds	r0, #1
 8010476:	d1be      	bne.n	80103f6 <_printf_float+0x32a>
 8010478:	e689      	b.n	801018e <_printf_float+0xc2>
 801047a:	9a05      	ldr	r2, [sp, #20]
 801047c:	464b      	mov	r3, r9
 801047e:	4442      	add	r2, r8
 8010480:	4631      	mov	r1, r6
 8010482:	4628      	mov	r0, r5
 8010484:	47b8      	blx	r7
 8010486:	3001      	adds	r0, #1
 8010488:	d1c1      	bne.n	801040e <_printf_float+0x342>
 801048a:	e680      	b.n	801018e <_printf_float+0xc2>
 801048c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801048e:	2a01      	cmp	r2, #1
 8010490:	dc01      	bgt.n	8010496 <_printf_float+0x3ca>
 8010492:	07db      	lsls	r3, r3, #31
 8010494:	d538      	bpl.n	8010508 <_printf_float+0x43c>
 8010496:	2301      	movs	r3, #1
 8010498:	4642      	mov	r2, r8
 801049a:	4631      	mov	r1, r6
 801049c:	4628      	mov	r0, r5
 801049e:	47b8      	blx	r7
 80104a0:	3001      	adds	r0, #1
 80104a2:	f43f ae74 	beq.w	801018e <_printf_float+0xc2>
 80104a6:	ee18 3a10 	vmov	r3, s16
 80104aa:	4652      	mov	r2, sl
 80104ac:	4631      	mov	r1, r6
 80104ae:	4628      	mov	r0, r5
 80104b0:	47b8      	blx	r7
 80104b2:	3001      	adds	r0, #1
 80104b4:	f43f ae6b 	beq.w	801018e <_printf_float+0xc2>
 80104b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80104bc:	2200      	movs	r2, #0
 80104be:	2300      	movs	r3, #0
 80104c0:	f7f0 fb02 	bl	8000ac8 <__aeabi_dcmpeq>
 80104c4:	b9d8      	cbnz	r0, 80104fe <_printf_float+0x432>
 80104c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104c8:	f108 0201 	add.w	r2, r8, #1
 80104cc:	3b01      	subs	r3, #1
 80104ce:	4631      	mov	r1, r6
 80104d0:	4628      	mov	r0, r5
 80104d2:	47b8      	blx	r7
 80104d4:	3001      	adds	r0, #1
 80104d6:	d10e      	bne.n	80104f6 <_printf_float+0x42a>
 80104d8:	e659      	b.n	801018e <_printf_float+0xc2>
 80104da:	2301      	movs	r3, #1
 80104dc:	4652      	mov	r2, sl
 80104de:	4631      	mov	r1, r6
 80104e0:	4628      	mov	r0, r5
 80104e2:	47b8      	blx	r7
 80104e4:	3001      	adds	r0, #1
 80104e6:	f43f ae52 	beq.w	801018e <_printf_float+0xc2>
 80104ea:	f108 0801 	add.w	r8, r8, #1
 80104ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104f0:	3b01      	subs	r3, #1
 80104f2:	4543      	cmp	r3, r8
 80104f4:	dcf1      	bgt.n	80104da <_printf_float+0x40e>
 80104f6:	464b      	mov	r3, r9
 80104f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80104fc:	e6dc      	b.n	80102b8 <_printf_float+0x1ec>
 80104fe:	f04f 0800 	mov.w	r8, #0
 8010502:	f104 0a1a 	add.w	sl, r4, #26
 8010506:	e7f2      	b.n	80104ee <_printf_float+0x422>
 8010508:	2301      	movs	r3, #1
 801050a:	4642      	mov	r2, r8
 801050c:	e7df      	b.n	80104ce <_printf_float+0x402>
 801050e:	2301      	movs	r3, #1
 8010510:	464a      	mov	r2, r9
 8010512:	4631      	mov	r1, r6
 8010514:	4628      	mov	r0, r5
 8010516:	47b8      	blx	r7
 8010518:	3001      	adds	r0, #1
 801051a:	f43f ae38 	beq.w	801018e <_printf_float+0xc2>
 801051e:	f108 0801 	add.w	r8, r8, #1
 8010522:	68e3      	ldr	r3, [r4, #12]
 8010524:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010526:	1a5b      	subs	r3, r3, r1
 8010528:	4543      	cmp	r3, r8
 801052a:	dcf0      	bgt.n	801050e <_printf_float+0x442>
 801052c:	e6fa      	b.n	8010324 <_printf_float+0x258>
 801052e:	f04f 0800 	mov.w	r8, #0
 8010532:	f104 0919 	add.w	r9, r4, #25
 8010536:	e7f4      	b.n	8010522 <_printf_float+0x456>

08010538 <_printf_common>:
 8010538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801053c:	4616      	mov	r6, r2
 801053e:	4699      	mov	r9, r3
 8010540:	688a      	ldr	r2, [r1, #8]
 8010542:	690b      	ldr	r3, [r1, #16]
 8010544:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010548:	4293      	cmp	r3, r2
 801054a:	bfb8      	it	lt
 801054c:	4613      	movlt	r3, r2
 801054e:	6033      	str	r3, [r6, #0]
 8010550:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010554:	4607      	mov	r7, r0
 8010556:	460c      	mov	r4, r1
 8010558:	b10a      	cbz	r2, 801055e <_printf_common+0x26>
 801055a:	3301      	adds	r3, #1
 801055c:	6033      	str	r3, [r6, #0]
 801055e:	6823      	ldr	r3, [r4, #0]
 8010560:	0699      	lsls	r1, r3, #26
 8010562:	bf42      	ittt	mi
 8010564:	6833      	ldrmi	r3, [r6, #0]
 8010566:	3302      	addmi	r3, #2
 8010568:	6033      	strmi	r3, [r6, #0]
 801056a:	6825      	ldr	r5, [r4, #0]
 801056c:	f015 0506 	ands.w	r5, r5, #6
 8010570:	d106      	bne.n	8010580 <_printf_common+0x48>
 8010572:	f104 0a19 	add.w	sl, r4, #25
 8010576:	68e3      	ldr	r3, [r4, #12]
 8010578:	6832      	ldr	r2, [r6, #0]
 801057a:	1a9b      	subs	r3, r3, r2
 801057c:	42ab      	cmp	r3, r5
 801057e:	dc26      	bgt.n	80105ce <_printf_common+0x96>
 8010580:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010584:	1e13      	subs	r3, r2, #0
 8010586:	6822      	ldr	r2, [r4, #0]
 8010588:	bf18      	it	ne
 801058a:	2301      	movne	r3, #1
 801058c:	0692      	lsls	r2, r2, #26
 801058e:	d42b      	bmi.n	80105e8 <_printf_common+0xb0>
 8010590:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010594:	4649      	mov	r1, r9
 8010596:	4638      	mov	r0, r7
 8010598:	47c0      	blx	r8
 801059a:	3001      	adds	r0, #1
 801059c:	d01e      	beq.n	80105dc <_printf_common+0xa4>
 801059e:	6823      	ldr	r3, [r4, #0]
 80105a0:	68e5      	ldr	r5, [r4, #12]
 80105a2:	6832      	ldr	r2, [r6, #0]
 80105a4:	f003 0306 	and.w	r3, r3, #6
 80105a8:	2b04      	cmp	r3, #4
 80105aa:	bf08      	it	eq
 80105ac:	1aad      	subeq	r5, r5, r2
 80105ae:	68a3      	ldr	r3, [r4, #8]
 80105b0:	6922      	ldr	r2, [r4, #16]
 80105b2:	bf0c      	ite	eq
 80105b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105b8:	2500      	movne	r5, #0
 80105ba:	4293      	cmp	r3, r2
 80105bc:	bfc4      	itt	gt
 80105be:	1a9b      	subgt	r3, r3, r2
 80105c0:	18ed      	addgt	r5, r5, r3
 80105c2:	2600      	movs	r6, #0
 80105c4:	341a      	adds	r4, #26
 80105c6:	42b5      	cmp	r5, r6
 80105c8:	d11a      	bne.n	8010600 <_printf_common+0xc8>
 80105ca:	2000      	movs	r0, #0
 80105cc:	e008      	b.n	80105e0 <_printf_common+0xa8>
 80105ce:	2301      	movs	r3, #1
 80105d0:	4652      	mov	r2, sl
 80105d2:	4649      	mov	r1, r9
 80105d4:	4638      	mov	r0, r7
 80105d6:	47c0      	blx	r8
 80105d8:	3001      	adds	r0, #1
 80105da:	d103      	bne.n	80105e4 <_printf_common+0xac>
 80105dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105e4:	3501      	adds	r5, #1
 80105e6:	e7c6      	b.n	8010576 <_printf_common+0x3e>
 80105e8:	18e1      	adds	r1, r4, r3
 80105ea:	1c5a      	adds	r2, r3, #1
 80105ec:	2030      	movs	r0, #48	; 0x30
 80105ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80105f2:	4422      	add	r2, r4
 80105f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80105f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80105fc:	3302      	adds	r3, #2
 80105fe:	e7c7      	b.n	8010590 <_printf_common+0x58>
 8010600:	2301      	movs	r3, #1
 8010602:	4622      	mov	r2, r4
 8010604:	4649      	mov	r1, r9
 8010606:	4638      	mov	r0, r7
 8010608:	47c0      	blx	r8
 801060a:	3001      	adds	r0, #1
 801060c:	d0e6      	beq.n	80105dc <_printf_common+0xa4>
 801060e:	3601      	adds	r6, #1
 8010610:	e7d9      	b.n	80105c6 <_printf_common+0x8e>
	...

08010614 <_printf_i>:
 8010614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010618:	7e0f      	ldrb	r7, [r1, #24]
 801061a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801061c:	2f78      	cmp	r7, #120	; 0x78
 801061e:	4691      	mov	r9, r2
 8010620:	4680      	mov	r8, r0
 8010622:	460c      	mov	r4, r1
 8010624:	469a      	mov	sl, r3
 8010626:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801062a:	d807      	bhi.n	801063c <_printf_i+0x28>
 801062c:	2f62      	cmp	r7, #98	; 0x62
 801062e:	d80a      	bhi.n	8010646 <_printf_i+0x32>
 8010630:	2f00      	cmp	r7, #0
 8010632:	f000 80d8 	beq.w	80107e6 <_printf_i+0x1d2>
 8010636:	2f58      	cmp	r7, #88	; 0x58
 8010638:	f000 80a3 	beq.w	8010782 <_printf_i+0x16e>
 801063c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010640:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010644:	e03a      	b.n	80106bc <_printf_i+0xa8>
 8010646:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801064a:	2b15      	cmp	r3, #21
 801064c:	d8f6      	bhi.n	801063c <_printf_i+0x28>
 801064e:	a101      	add	r1, pc, #4	; (adr r1, 8010654 <_printf_i+0x40>)
 8010650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010654:	080106ad 	.word	0x080106ad
 8010658:	080106c1 	.word	0x080106c1
 801065c:	0801063d 	.word	0x0801063d
 8010660:	0801063d 	.word	0x0801063d
 8010664:	0801063d 	.word	0x0801063d
 8010668:	0801063d 	.word	0x0801063d
 801066c:	080106c1 	.word	0x080106c1
 8010670:	0801063d 	.word	0x0801063d
 8010674:	0801063d 	.word	0x0801063d
 8010678:	0801063d 	.word	0x0801063d
 801067c:	0801063d 	.word	0x0801063d
 8010680:	080107cd 	.word	0x080107cd
 8010684:	080106f1 	.word	0x080106f1
 8010688:	080107af 	.word	0x080107af
 801068c:	0801063d 	.word	0x0801063d
 8010690:	0801063d 	.word	0x0801063d
 8010694:	080107ef 	.word	0x080107ef
 8010698:	0801063d 	.word	0x0801063d
 801069c:	080106f1 	.word	0x080106f1
 80106a0:	0801063d 	.word	0x0801063d
 80106a4:	0801063d 	.word	0x0801063d
 80106a8:	080107b7 	.word	0x080107b7
 80106ac:	682b      	ldr	r3, [r5, #0]
 80106ae:	1d1a      	adds	r2, r3, #4
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	602a      	str	r2, [r5, #0]
 80106b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80106bc:	2301      	movs	r3, #1
 80106be:	e0a3      	b.n	8010808 <_printf_i+0x1f4>
 80106c0:	6820      	ldr	r0, [r4, #0]
 80106c2:	6829      	ldr	r1, [r5, #0]
 80106c4:	0606      	lsls	r6, r0, #24
 80106c6:	f101 0304 	add.w	r3, r1, #4
 80106ca:	d50a      	bpl.n	80106e2 <_printf_i+0xce>
 80106cc:	680e      	ldr	r6, [r1, #0]
 80106ce:	602b      	str	r3, [r5, #0]
 80106d0:	2e00      	cmp	r6, #0
 80106d2:	da03      	bge.n	80106dc <_printf_i+0xc8>
 80106d4:	232d      	movs	r3, #45	; 0x2d
 80106d6:	4276      	negs	r6, r6
 80106d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106dc:	485e      	ldr	r0, [pc, #376]	; (8010858 <_printf_i+0x244>)
 80106de:	230a      	movs	r3, #10
 80106e0:	e019      	b.n	8010716 <_printf_i+0x102>
 80106e2:	680e      	ldr	r6, [r1, #0]
 80106e4:	602b      	str	r3, [r5, #0]
 80106e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80106ea:	bf18      	it	ne
 80106ec:	b236      	sxthne	r6, r6
 80106ee:	e7ef      	b.n	80106d0 <_printf_i+0xbc>
 80106f0:	682b      	ldr	r3, [r5, #0]
 80106f2:	6820      	ldr	r0, [r4, #0]
 80106f4:	1d19      	adds	r1, r3, #4
 80106f6:	6029      	str	r1, [r5, #0]
 80106f8:	0601      	lsls	r1, r0, #24
 80106fa:	d501      	bpl.n	8010700 <_printf_i+0xec>
 80106fc:	681e      	ldr	r6, [r3, #0]
 80106fe:	e002      	b.n	8010706 <_printf_i+0xf2>
 8010700:	0646      	lsls	r6, r0, #25
 8010702:	d5fb      	bpl.n	80106fc <_printf_i+0xe8>
 8010704:	881e      	ldrh	r6, [r3, #0]
 8010706:	4854      	ldr	r0, [pc, #336]	; (8010858 <_printf_i+0x244>)
 8010708:	2f6f      	cmp	r7, #111	; 0x6f
 801070a:	bf0c      	ite	eq
 801070c:	2308      	moveq	r3, #8
 801070e:	230a      	movne	r3, #10
 8010710:	2100      	movs	r1, #0
 8010712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010716:	6865      	ldr	r5, [r4, #4]
 8010718:	60a5      	str	r5, [r4, #8]
 801071a:	2d00      	cmp	r5, #0
 801071c:	bfa2      	ittt	ge
 801071e:	6821      	ldrge	r1, [r4, #0]
 8010720:	f021 0104 	bicge.w	r1, r1, #4
 8010724:	6021      	strge	r1, [r4, #0]
 8010726:	b90e      	cbnz	r6, 801072c <_printf_i+0x118>
 8010728:	2d00      	cmp	r5, #0
 801072a:	d04d      	beq.n	80107c8 <_printf_i+0x1b4>
 801072c:	4615      	mov	r5, r2
 801072e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010732:	fb03 6711 	mls	r7, r3, r1, r6
 8010736:	5dc7      	ldrb	r7, [r0, r7]
 8010738:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801073c:	4637      	mov	r7, r6
 801073e:	42bb      	cmp	r3, r7
 8010740:	460e      	mov	r6, r1
 8010742:	d9f4      	bls.n	801072e <_printf_i+0x11a>
 8010744:	2b08      	cmp	r3, #8
 8010746:	d10b      	bne.n	8010760 <_printf_i+0x14c>
 8010748:	6823      	ldr	r3, [r4, #0]
 801074a:	07de      	lsls	r6, r3, #31
 801074c:	d508      	bpl.n	8010760 <_printf_i+0x14c>
 801074e:	6923      	ldr	r3, [r4, #16]
 8010750:	6861      	ldr	r1, [r4, #4]
 8010752:	4299      	cmp	r1, r3
 8010754:	bfde      	ittt	le
 8010756:	2330      	movle	r3, #48	; 0x30
 8010758:	f805 3c01 	strble.w	r3, [r5, #-1]
 801075c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010760:	1b52      	subs	r2, r2, r5
 8010762:	6122      	str	r2, [r4, #16]
 8010764:	f8cd a000 	str.w	sl, [sp]
 8010768:	464b      	mov	r3, r9
 801076a:	aa03      	add	r2, sp, #12
 801076c:	4621      	mov	r1, r4
 801076e:	4640      	mov	r0, r8
 8010770:	f7ff fee2 	bl	8010538 <_printf_common>
 8010774:	3001      	adds	r0, #1
 8010776:	d14c      	bne.n	8010812 <_printf_i+0x1fe>
 8010778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801077c:	b004      	add	sp, #16
 801077e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010782:	4835      	ldr	r0, [pc, #212]	; (8010858 <_printf_i+0x244>)
 8010784:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010788:	6829      	ldr	r1, [r5, #0]
 801078a:	6823      	ldr	r3, [r4, #0]
 801078c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010790:	6029      	str	r1, [r5, #0]
 8010792:	061d      	lsls	r5, r3, #24
 8010794:	d514      	bpl.n	80107c0 <_printf_i+0x1ac>
 8010796:	07df      	lsls	r7, r3, #31
 8010798:	bf44      	itt	mi
 801079a:	f043 0320 	orrmi.w	r3, r3, #32
 801079e:	6023      	strmi	r3, [r4, #0]
 80107a0:	b91e      	cbnz	r6, 80107aa <_printf_i+0x196>
 80107a2:	6823      	ldr	r3, [r4, #0]
 80107a4:	f023 0320 	bic.w	r3, r3, #32
 80107a8:	6023      	str	r3, [r4, #0]
 80107aa:	2310      	movs	r3, #16
 80107ac:	e7b0      	b.n	8010710 <_printf_i+0xfc>
 80107ae:	6823      	ldr	r3, [r4, #0]
 80107b0:	f043 0320 	orr.w	r3, r3, #32
 80107b4:	6023      	str	r3, [r4, #0]
 80107b6:	2378      	movs	r3, #120	; 0x78
 80107b8:	4828      	ldr	r0, [pc, #160]	; (801085c <_printf_i+0x248>)
 80107ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80107be:	e7e3      	b.n	8010788 <_printf_i+0x174>
 80107c0:	0659      	lsls	r1, r3, #25
 80107c2:	bf48      	it	mi
 80107c4:	b2b6      	uxthmi	r6, r6
 80107c6:	e7e6      	b.n	8010796 <_printf_i+0x182>
 80107c8:	4615      	mov	r5, r2
 80107ca:	e7bb      	b.n	8010744 <_printf_i+0x130>
 80107cc:	682b      	ldr	r3, [r5, #0]
 80107ce:	6826      	ldr	r6, [r4, #0]
 80107d0:	6961      	ldr	r1, [r4, #20]
 80107d2:	1d18      	adds	r0, r3, #4
 80107d4:	6028      	str	r0, [r5, #0]
 80107d6:	0635      	lsls	r5, r6, #24
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	d501      	bpl.n	80107e0 <_printf_i+0x1cc>
 80107dc:	6019      	str	r1, [r3, #0]
 80107de:	e002      	b.n	80107e6 <_printf_i+0x1d2>
 80107e0:	0670      	lsls	r0, r6, #25
 80107e2:	d5fb      	bpl.n	80107dc <_printf_i+0x1c8>
 80107e4:	8019      	strh	r1, [r3, #0]
 80107e6:	2300      	movs	r3, #0
 80107e8:	6123      	str	r3, [r4, #16]
 80107ea:	4615      	mov	r5, r2
 80107ec:	e7ba      	b.n	8010764 <_printf_i+0x150>
 80107ee:	682b      	ldr	r3, [r5, #0]
 80107f0:	1d1a      	adds	r2, r3, #4
 80107f2:	602a      	str	r2, [r5, #0]
 80107f4:	681d      	ldr	r5, [r3, #0]
 80107f6:	6862      	ldr	r2, [r4, #4]
 80107f8:	2100      	movs	r1, #0
 80107fa:	4628      	mov	r0, r5
 80107fc:	f7ef fcf0 	bl	80001e0 <memchr>
 8010800:	b108      	cbz	r0, 8010806 <_printf_i+0x1f2>
 8010802:	1b40      	subs	r0, r0, r5
 8010804:	6060      	str	r0, [r4, #4]
 8010806:	6863      	ldr	r3, [r4, #4]
 8010808:	6123      	str	r3, [r4, #16]
 801080a:	2300      	movs	r3, #0
 801080c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010810:	e7a8      	b.n	8010764 <_printf_i+0x150>
 8010812:	6923      	ldr	r3, [r4, #16]
 8010814:	462a      	mov	r2, r5
 8010816:	4649      	mov	r1, r9
 8010818:	4640      	mov	r0, r8
 801081a:	47d0      	blx	sl
 801081c:	3001      	adds	r0, #1
 801081e:	d0ab      	beq.n	8010778 <_printf_i+0x164>
 8010820:	6823      	ldr	r3, [r4, #0]
 8010822:	079b      	lsls	r3, r3, #30
 8010824:	d413      	bmi.n	801084e <_printf_i+0x23a>
 8010826:	68e0      	ldr	r0, [r4, #12]
 8010828:	9b03      	ldr	r3, [sp, #12]
 801082a:	4298      	cmp	r0, r3
 801082c:	bfb8      	it	lt
 801082e:	4618      	movlt	r0, r3
 8010830:	e7a4      	b.n	801077c <_printf_i+0x168>
 8010832:	2301      	movs	r3, #1
 8010834:	4632      	mov	r2, r6
 8010836:	4649      	mov	r1, r9
 8010838:	4640      	mov	r0, r8
 801083a:	47d0      	blx	sl
 801083c:	3001      	adds	r0, #1
 801083e:	d09b      	beq.n	8010778 <_printf_i+0x164>
 8010840:	3501      	adds	r5, #1
 8010842:	68e3      	ldr	r3, [r4, #12]
 8010844:	9903      	ldr	r1, [sp, #12]
 8010846:	1a5b      	subs	r3, r3, r1
 8010848:	42ab      	cmp	r3, r5
 801084a:	dcf2      	bgt.n	8010832 <_printf_i+0x21e>
 801084c:	e7eb      	b.n	8010826 <_printf_i+0x212>
 801084e:	2500      	movs	r5, #0
 8010850:	f104 0619 	add.w	r6, r4, #25
 8010854:	e7f5      	b.n	8010842 <_printf_i+0x22e>
 8010856:	bf00      	nop
 8010858:	0801546e 	.word	0x0801546e
 801085c:	0801547f 	.word	0x0801547f

08010860 <_scanf_float>:
 8010860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010864:	b087      	sub	sp, #28
 8010866:	4617      	mov	r7, r2
 8010868:	9303      	str	r3, [sp, #12]
 801086a:	688b      	ldr	r3, [r1, #8]
 801086c:	1e5a      	subs	r2, r3, #1
 801086e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010872:	bf83      	ittte	hi
 8010874:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010878:	195b      	addhi	r3, r3, r5
 801087a:	9302      	strhi	r3, [sp, #8]
 801087c:	2300      	movls	r3, #0
 801087e:	bf86      	itte	hi
 8010880:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010884:	608b      	strhi	r3, [r1, #8]
 8010886:	9302      	strls	r3, [sp, #8]
 8010888:	680b      	ldr	r3, [r1, #0]
 801088a:	468b      	mov	fp, r1
 801088c:	2500      	movs	r5, #0
 801088e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010892:	f84b 3b1c 	str.w	r3, [fp], #28
 8010896:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801089a:	4680      	mov	r8, r0
 801089c:	460c      	mov	r4, r1
 801089e:	465e      	mov	r6, fp
 80108a0:	46aa      	mov	sl, r5
 80108a2:	46a9      	mov	r9, r5
 80108a4:	9501      	str	r5, [sp, #4]
 80108a6:	68a2      	ldr	r2, [r4, #8]
 80108a8:	b152      	cbz	r2, 80108c0 <_scanf_float+0x60>
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	781b      	ldrb	r3, [r3, #0]
 80108ae:	2b4e      	cmp	r3, #78	; 0x4e
 80108b0:	d864      	bhi.n	801097c <_scanf_float+0x11c>
 80108b2:	2b40      	cmp	r3, #64	; 0x40
 80108b4:	d83c      	bhi.n	8010930 <_scanf_float+0xd0>
 80108b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80108ba:	b2c8      	uxtb	r0, r1
 80108bc:	280e      	cmp	r0, #14
 80108be:	d93a      	bls.n	8010936 <_scanf_float+0xd6>
 80108c0:	f1b9 0f00 	cmp.w	r9, #0
 80108c4:	d003      	beq.n	80108ce <_scanf_float+0x6e>
 80108c6:	6823      	ldr	r3, [r4, #0]
 80108c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80108cc:	6023      	str	r3, [r4, #0]
 80108ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80108d2:	f1ba 0f01 	cmp.w	sl, #1
 80108d6:	f200 8113 	bhi.w	8010b00 <_scanf_float+0x2a0>
 80108da:	455e      	cmp	r6, fp
 80108dc:	f200 8105 	bhi.w	8010aea <_scanf_float+0x28a>
 80108e0:	2501      	movs	r5, #1
 80108e2:	4628      	mov	r0, r5
 80108e4:	b007      	add	sp, #28
 80108e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80108ee:	2a0d      	cmp	r2, #13
 80108f0:	d8e6      	bhi.n	80108c0 <_scanf_float+0x60>
 80108f2:	a101      	add	r1, pc, #4	; (adr r1, 80108f8 <_scanf_float+0x98>)
 80108f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80108f8:	08010a37 	.word	0x08010a37
 80108fc:	080108c1 	.word	0x080108c1
 8010900:	080108c1 	.word	0x080108c1
 8010904:	080108c1 	.word	0x080108c1
 8010908:	08010a97 	.word	0x08010a97
 801090c:	08010a6f 	.word	0x08010a6f
 8010910:	080108c1 	.word	0x080108c1
 8010914:	080108c1 	.word	0x080108c1
 8010918:	08010a45 	.word	0x08010a45
 801091c:	080108c1 	.word	0x080108c1
 8010920:	080108c1 	.word	0x080108c1
 8010924:	080108c1 	.word	0x080108c1
 8010928:	080108c1 	.word	0x080108c1
 801092c:	080109fd 	.word	0x080109fd
 8010930:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010934:	e7db      	b.n	80108ee <_scanf_float+0x8e>
 8010936:	290e      	cmp	r1, #14
 8010938:	d8c2      	bhi.n	80108c0 <_scanf_float+0x60>
 801093a:	a001      	add	r0, pc, #4	; (adr r0, 8010940 <_scanf_float+0xe0>)
 801093c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010940:	080109ef 	.word	0x080109ef
 8010944:	080108c1 	.word	0x080108c1
 8010948:	080109ef 	.word	0x080109ef
 801094c:	08010a83 	.word	0x08010a83
 8010950:	080108c1 	.word	0x080108c1
 8010954:	0801099d 	.word	0x0801099d
 8010958:	080109d9 	.word	0x080109d9
 801095c:	080109d9 	.word	0x080109d9
 8010960:	080109d9 	.word	0x080109d9
 8010964:	080109d9 	.word	0x080109d9
 8010968:	080109d9 	.word	0x080109d9
 801096c:	080109d9 	.word	0x080109d9
 8010970:	080109d9 	.word	0x080109d9
 8010974:	080109d9 	.word	0x080109d9
 8010978:	080109d9 	.word	0x080109d9
 801097c:	2b6e      	cmp	r3, #110	; 0x6e
 801097e:	d809      	bhi.n	8010994 <_scanf_float+0x134>
 8010980:	2b60      	cmp	r3, #96	; 0x60
 8010982:	d8b2      	bhi.n	80108ea <_scanf_float+0x8a>
 8010984:	2b54      	cmp	r3, #84	; 0x54
 8010986:	d077      	beq.n	8010a78 <_scanf_float+0x218>
 8010988:	2b59      	cmp	r3, #89	; 0x59
 801098a:	d199      	bne.n	80108c0 <_scanf_float+0x60>
 801098c:	2d07      	cmp	r5, #7
 801098e:	d197      	bne.n	80108c0 <_scanf_float+0x60>
 8010990:	2508      	movs	r5, #8
 8010992:	e029      	b.n	80109e8 <_scanf_float+0x188>
 8010994:	2b74      	cmp	r3, #116	; 0x74
 8010996:	d06f      	beq.n	8010a78 <_scanf_float+0x218>
 8010998:	2b79      	cmp	r3, #121	; 0x79
 801099a:	e7f6      	b.n	801098a <_scanf_float+0x12a>
 801099c:	6821      	ldr	r1, [r4, #0]
 801099e:	05c8      	lsls	r0, r1, #23
 80109a0:	d51a      	bpl.n	80109d8 <_scanf_float+0x178>
 80109a2:	9b02      	ldr	r3, [sp, #8]
 80109a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80109a8:	6021      	str	r1, [r4, #0]
 80109aa:	f109 0901 	add.w	r9, r9, #1
 80109ae:	b11b      	cbz	r3, 80109b8 <_scanf_float+0x158>
 80109b0:	3b01      	subs	r3, #1
 80109b2:	3201      	adds	r2, #1
 80109b4:	9302      	str	r3, [sp, #8]
 80109b6:	60a2      	str	r2, [r4, #8]
 80109b8:	68a3      	ldr	r3, [r4, #8]
 80109ba:	3b01      	subs	r3, #1
 80109bc:	60a3      	str	r3, [r4, #8]
 80109be:	6923      	ldr	r3, [r4, #16]
 80109c0:	3301      	adds	r3, #1
 80109c2:	6123      	str	r3, [r4, #16]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	3b01      	subs	r3, #1
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	607b      	str	r3, [r7, #4]
 80109cc:	f340 8084 	ble.w	8010ad8 <_scanf_float+0x278>
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	3301      	adds	r3, #1
 80109d4:	603b      	str	r3, [r7, #0]
 80109d6:	e766      	b.n	80108a6 <_scanf_float+0x46>
 80109d8:	eb1a 0f05 	cmn.w	sl, r5
 80109dc:	f47f af70 	bne.w	80108c0 <_scanf_float+0x60>
 80109e0:	6822      	ldr	r2, [r4, #0]
 80109e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80109e6:	6022      	str	r2, [r4, #0]
 80109e8:	f806 3b01 	strb.w	r3, [r6], #1
 80109ec:	e7e4      	b.n	80109b8 <_scanf_float+0x158>
 80109ee:	6822      	ldr	r2, [r4, #0]
 80109f0:	0610      	lsls	r0, r2, #24
 80109f2:	f57f af65 	bpl.w	80108c0 <_scanf_float+0x60>
 80109f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80109fa:	e7f4      	b.n	80109e6 <_scanf_float+0x186>
 80109fc:	f1ba 0f00 	cmp.w	sl, #0
 8010a00:	d10e      	bne.n	8010a20 <_scanf_float+0x1c0>
 8010a02:	f1b9 0f00 	cmp.w	r9, #0
 8010a06:	d10e      	bne.n	8010a26 <_scanf_float+0x1c6>
 8010a08:	6822      	ldr	r2, [r4, #0]
 8010a0a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010a0e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010a12:	d108      	bne.n	8010a26 <_scanf_float+0x1c6>
 8010a14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010a18:	6022      	str	r2, [r4, #0]
 8010a1a:	f04f 0a01 	mov.w	sl, #1
 8010a1e:	e7e3      	b.n	80109e8 <_scanf_float+0x188>
 8010a20:	f1ba 0f02 	cmp.w	sl, #2
 8010a24:	d055      	beq.n	8010ad2 <_scanf_float+0x272>
 8010a26:	2d01      	cmp	r5, #1
 8010a28:	d002      	beq.n	8010a30 <_scanf_float+0x1d0>
 8010a2a:	2d04      	cmp	r5, #4
 8010a2c:	f47f af48 	bne.w	80108c0 <_scanf_float+0x60>
 8010a30:	3501      	adds	r5, #1
 8010a32:	b2ed      	uxtb	r5, r5
 8010a34:	e7d8      	b.n	80109e8 <_scanf_float+0x188>
 8010a36:	f1ba 0f01 	cmp.w	sl, #1
 8010a3a:	f47f af41 	bne.w	80108c0 <_scanf_float+0x60>
 8010a3e:	f04f 0a02 	mov.w	sl, #2
 8010a42:	e7d1      	b.n	80109e8 <_scanf_float+0x188>
 8010a44:	b97d      	cbnz	r5, 8010a66 <_scanf_float+0x206>
 8010a46:	f1b9 0f00 	cmp.w	r9, #0
 8010a4a:	f47f af3c 	bne.w	80108c6 <_scanf_float+0x66>
 8010a4e:	6822      	ldr	r2, [r4, #0]
 8010a50:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010a54:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010a58:	f47f af39 	bne.w	80108ce <_scanf_float+0x6e>
 8010a5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010a60:	6022      	str	r2, [r4, #0]
 8010a62:	2501      	movs	r5, #1
 8010a64:	e7c0      	b.n	80109e8 <_scanf_float+0x188>
 8010a66:	2d03      	cmp	r5, #3
 8010a68:	d0e2      	beq.n	8010a30 <_scanf_float+0x1d0>
 8010a6a:	2d05      	cmp	r5, #5
 8010a6c:	e7de      	b.n	8010a2c <_scanf_float+0x1cc>
 8010a6e:	2d02      	cmp	r5, #2
 8010a70:	f47f af26 	bne.w	80108c0 <_scanf_float+0x60>
 8010a74:	2503      	movs	r5, #3
 8010a76:	e7b7      	b.n	80109e8 <_scanf_float+0x188>
 8010a78:	2d06      	cmp	r5, #6
 8010a7a:	f47f af21 	bne.w	80108c0 <_scanf_float+0x60>
 8010a7e:	2507      	movs	r5, #7
 8010a80:	e7b2      	b.n	80109e8 <_scanf_float+0x188>
 8010a82:	6822      	ldr	r2, [r4, #0]
 8010a84:	0591      	lsls	r1, r2, #22
 8010a86:	f57f af1b 	bpl.w	80108c0 <_scanf_float+0x60>
 8010a8a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010a8e:	6022      	str	r2, [r4, #0]
 8010a90:	f8cd 9004 	str.w	r9, [sp, #4]
 8010a94:	e7a8      	b.n	80109e8 <_scanf_float+0x188>
 8010a96:	6822      	ldr	r2, [r4, #0]
 8010a98:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010a9c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010aa0:	d006      	beq.n	8010ab0 <_scanf_float+0x250>
 8010aa2:	0550      	lsls	r0, r2, #21
 8010aa4:	f57f af0c 	bpl.w	80108c0 <_scanf_float+0x60>
 8010aa8:	f1b9 0f00 	cmp.w	r9, #0
 8010aac:	f43f af0f 	beq.w	80108ce <_scanf_float+0x6e>
 8010ab0:	0591      	lsls	r1, r2, #22
 8010ab2:	bf58      	it	pl
 8010ab4:	9901      	ldrpl	r1, [sp, #4]
 8010ab6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010aba:	bf58      	it	pl
 8010abc:	eba9 0101 	subpl.w	r1, r9, r1
 8010ac0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010ac4:	bf58      	it	pl
 8010ac6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010aca:	6022      	str	r2, [r4, #0]
 8010acc:	f04f 0900 	mov.w	r9, #0
 8010ad0:	e78a      	b.n	80109e8 <_scanf_float+0x188>
 8010ad2:	f04f 0a03 	mov.w	sl, #3
 8010ad6:	e787      	b.n	80109e8 <_scanf_float+0x188>
 8010ad8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010adc:	4639      	mov	r1, r7
 8010ade:	4640      	mov	r0, r8
 8010ae0:	4798      	blx	r3
 8010ae2:	2800      	cmp	r0, #0
 8010ae4:	f43f aedf 	beq.w	80108a6 <_scanf_float+0x46>
 8010ae8:	e6ea      	b.n	80108c0 <_scanf_float+0x60>
 8010aea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010aee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010af2:	463a      	mov	r2, r7
 8010af4:	4640      	mov	r0, r8
 8010af6:	4798      	blx	r3
 8010af8:	6923      	ldr	r3, [r4, #16]
 8010afa:	3b01      	subs	r3, #1
 8010afc:	6123      	str	r3, [r4, #16]
 8010afe:	e6ec      	b.n	80108da <_scanf_float+0x7a>
 8010b00:	1e6b      	subs	r3, r5, #1
 8010b02:	2b06      	cmp	r3, #6
 8010b04:	d825      	bhi.n	8010b52 <_scanf_float+0x2f2>
 8010b06:	2d02      	cmp	r5, #2
 8010b08:	d836      	bhi.n	8010b78 <_scanf_float+0x318>
 8010b0a:	455e      	cmp	r6, fp
 8010b0c:	f67f aee8 	bls.w	80108e0 <_scanf_float+0x80>
 8010b10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b14:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010b18:	463a      	mov	r2, r7
 8010b1a:	4640      	mov	r0, r8
 8010b1c:	4798      	blx	r3
 8010b1e:	6923      	ldr	r3, [r4, #16]
 8010b20:	3b01      	subs	r3, #1
 8010b22:	6123      	str	r3, [r4, #16]
 8010b24:	e7f1      	b.n	8010b0a <_scanf_float+0x2aa>
 8010b26:	9802      	ldr	r0, [sp, #8]
 8010b28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b2c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010b30:	9002      	str	r0, [sp, #8]
 8010b32:	463a      	mov	r2, r7
 8010b34:	4640      	mov	r0, r8
 8010b36:	4798      	blx	r3
 8010b38:	6923      	ldr	r3, [r4, #16]
 8010b3a:	3b01      	subs	r3, #1
 8010b3c:	6123      	str	r3, [r4, #16]
 8010b3e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010b42:	fa5f fa8a 	uxtb.w	sl, sl
 8010b46:	f1ba 0f02 	cmp.w	sl, #2
 8010b4a:	d1ec      	bne.n	8010b26 <_scanf_float+0x2c6>
 8010b4c:	3d03      	subs	r5, #3
 8010b4e:	b2ed      	uxtb	r5, r5
 8010b50:	1b76      	subs	r6, r6, r5
 8010b52:	6823      	ldr	r3, [r4, #0]
 8010b54:	05da      	lsls	r2, r3, #23
 8010b56:	d52f      	bpl.n	8010bb8 <_scanf_float+0x358>
 8010b58:	055b      	lsls	r3, r3, #21
 8010b5a:	d510      	bpl.n	8010b7e <_scanf_float+0x31e>
 8010b5c:	455e      	cmp	r6, fp
 8010b5e:	f67f aebf 	bls.w	80108e0 <_scanf_float+0x80>
 8010b62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010b6a:	463a      	mov	r2, r7
 8010b6c:	4640      	mov	r0, r8
 8010b6e:	4798      	blx	r3
 8010b70:	6923      	ldr	r3, [r4, #16]
 8010b72:	3b01      	subs	r3, #1
 8010b74:	6123      	str	r3, [r4, #16]
 8010b76:	e7f1      	b.n	8010b5c <_scanf_float+0x2fc>
 8010b78:	46aa      	mov	sl, r5
 8010b7a:	9602      	str	r6, [sp, #8]
 8010b7c:	e7df      	b.n	8010b3e <_scanf_float+0x2de>
 8010b7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010b82:	6923      	ldr	r3, [r4, #16]
 8010b84:	2965      	cmp	r1, #101	; 0x65
 8010b86:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010b8a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8010b8e:	6123      	str	r3, [r4, #16]
 8010b90:	d00c      	beq.n	8010bac <_scanf_float+0x34c>
 8010b92:	2945      	cmp	r1, #69	; 0x45
 8010b94:	d00a      	beq.n	8010bac <_scanf_float+0x34c>
 8010b96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b9a:	463a      	mov	r2, r7
 8010b9c:	4640      	mov	r0, r8
 8010b9e:	4798      	blx	r3
 8010ba0:	6923      	ldr	r3, [r4, #16]
 8010ba2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010ba6:	3b01      	subs	r3, #1
 8010ba8:	1eb5      	subs	r5, r6, #2
 8010baa:	6123      	str	r3, [r4, #16]
 8010bac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010bb0:	463a      	mov	r2, r7
 8010bb2:	4640      	mov	r0, r8
 8010bb4:	4798      	blx	r3
 8010bb6:	462e      	mov	r6, r5
 8010bb8:	6825      	ldr	r5, [r4, #0]
 8010bba:	f015 0510 	ands.w	r5, r5, #16
 8010bbe:	d159      	bne.n	8010c74 <_scanf_float+0x414>
 8010bc0:	7035      	strb	r5, [r6, #0]
 8010bc2:	6823      	ldr	r3, [r4, #0]
 8010bc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010bcc:	d11b      	bne.n	8010c06 <_scanf_float+0x3a6>
 8010bce:	9b01      	ldr	r3, [sp, #4]
 8010bd0:	454b      	cmp	r3, r9
 8010bd2:	eba3 0209 	sub.w	r2, r3, r9
 8010bd6:	d123      	bne.n	8010c20 <_scanf_float+0x3c0>
 8010bd8:	2200      	movs	r2, #0
 8010bda:	4659      	mov	r1, fp
 8010bdc:	4640      	mov	r0, r8
 8010bde:	f000 fe99 	bl	8011914 <_strtod_r>
 8010be2:	6822      	ldr	r2, [r4, #0]
 8010be4:	9b03      	ldr	r3, [sp, #12]
 8010be6:	f012 0f02 	tst.w	r2, #2
 8010bea:	ec57 6b10 	vmov	r6, r7, d0
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	d021      	beq.n	8010c36 <_scanf_float+0x3d6>
 8010bf2:	9903      	ldr	r1, [sp, #12]
 8010bf4:	1d1a      	adds	r2, r3, #4
 8010bf6:	600a      	str	r2, [r1, #0]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	e9c3 6700 	strd	r6, r7, [r3]
 8010bfe:	68e3      	ldr	r3, [r4, #12]
 8010c00:	3301      	adds	r3, #1
 8010c02:	60e3      	str	r3, [r4, #12]
 8010c04:	e66d      	b.n	80108e2 <_scanf_float+0x82>
 8010c06:	9b04      	ldr	r3, [sp, #16]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d0e5      	beq.n	8010bd8 <_scanf_float+0x378>
 8010c0c:	9905      	ldr	r1, [sp, #20]
 8010c0e:	230a      	movs	r3, #10
 8010c10:	462a      	mov	r2, r5
 8010c12:	3101      	adds	r1, #1
 8010c14:	4640      	mov	r0, r8
 8010c16:	f000 ff05 	bl	8011a24 <_strtol_r>
 8010c1a:	9b04      	ldr	r3, [sp, #16]
 8010c1c:	9e05      	ldr	r6, [sp, #20]
 8010c1e:	1ac2      	subs	r2, r0, r3
 8010c20:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010c24:	429e      	cmp	r6, r3
 8010c26:	bf28      	it	cs
 8010c28:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010c2c:	4912      	ldr	r1, [pc, #72]	; (8010c78 <_scanf_float+0x418>)
 8010c2e:	4630      	mov	r0, r6
 8010c30:	f000 f82c 	bl	8010c8c <siprintf>
 8010c34:	e7d0      	b.n	8010bd8 <_scanf_float+0x378>
 8010c36:	9903      	ldr	r1, [sp, #12]
 8010c38:	f012 0f04 	tst.w	r2, #4
 8010c3c:	f103 0204 	add.w	r2, r3, #4
 8010c40:	600a      	str	r2, [r1, #0]
 8010c42:	d1d9      	bne.n	8010bf8 <_scanf_float+0x398>
 8010c44:	f8d3 8000 	ldr.w	r8, [r3]
 8010c48:	ee10 2a10 	vmov	r2, s0
 8010c4c:	ee10 0a10 	vmov	r0, s0
 8010c50:	463b      	mov	r3, r7
 8010c52:	4639      	mov	r1, r7
 8010c54:	f7ef ff6a 	bl	8000b2c <__aeabi_dcmpun>
 8010c58:	b128      	cbz	r0, 8010c66 <_scanf_float+0x406>
 8010c5a:	4808      	ldr	r0, [pc, #32]	; (8010c7c <_scanf_float+0x41c>)
 8010c5c:	f000 f810 	bl	8010c80 <nanf>
 8010c60:	ed88 0a00 	vstr	s0, [r8]
 8010c64:	e7cb      	b.n	8010bfe <_scanf_float+0x39e>
 8010c66:	4630      	mov	r0, r6
 8010c68:	4639      	mov	r1, r7
 8010c6a:	f7ef ffbd 	bl	8000be8 <__aeabi_d2f>
 8010c6e:	f8c8 0000 	str.w	r0, [r8]
 8010c72:	e7c4      	b.n	8010bfe <_scanf_float+0x39e>
 8010c74:	2500      	movs	r5, #0
 8010c76:	e634      	b.n	80108e2 <_scanf_float+0x82>
 8010c78:	08015490 	.word	0x08015490
 8010c7c:	08015898 	.word	0x08015898

08010c80 <nanf>:
 8010c80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010c88 <nanf+0x8>
 8010c84:	4770      	bx	lr
 8010c86:	bf00      	nop
 8010c88:	7fc00000 	.word	0x7fc00000

08010c8c <siprintf>:
 8010c8c:	b40e      	push	{r1, r2, r3}
 8010c8e:	b500      	push	{lr}
 8010c90:	b09c      	sub	sp, #112	; 0x70
 8010c92:	ab1d      	add	r3, sp, #116	; 0x74
 8010c94:	9002      	str	r0, [sp, #8]
 8010c96:	9006      	str	r0, [sp, #24]
 8010c98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010c9c:	4809      	ldr	r0, [pc, #36]	; (8010cc4 <siprintf+0x38>)
 8010c9e:	9107      	str	r1, [sp, #28]
 8010ca0:	9104      	str	r1, [sp, #16]
 8010ca2:	4909      	ldr	r1, [pc, #36]	; (8010cc8 <siprintf+0x3c>)
 8010ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ca8:	9105      	str	r1, [sp, #20]
 8010caa:	6800      	ldr	r0, [r0, #0]
 8010cac:	9301      	str	r3, [sp, #4]
 8010cae:	a902      	add	r1, sp, #8
 8010cb0:	f002 fed6 	bl	8013a60 <_svfiprintf_r>
 8010cb4:	9b02      	ldr	r3, [sp, #8]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	701a      	strb	r2, [r3, #0]
 8010cba:	b01c      	add	sp, #112	; 0x70
 8010cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cc0:	b003      	add	sp, #12
 8010cc2:	4770      	bx	lr
 8010cc4:	20000014 	.word	0x20000014
 8010cc8:	ffff0208 	.word	0xffff0208

08010ccc <sulp>:
 8010ccc:	b570      	push	{r4, r5, r6, lr}
 8010cce:	4604      	mov	r4, r0
 8010cd0:	460d      	mov	r5, r1
 8010cd2:	ec45 4b10 	vmov	d0, r4, r5
 8010cd6:	4616      	mov	r6, r2
 8010cd8:	f002 fc20 	bl	801351c <__ulp>
 8010cdc:	ec51 0b10 	vmov	r0, r1, d0
 8010ce0:	b17e      	cbz	r6, 8010d02 <sulp+0x36>
 8010ce2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010ce6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	dd09      	ble.n	8010d02 <sulp+0x36>
 8010cee:	051b      	lsls	r3, r3, #20
 8010cf0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010cf4:	2400      	movs	r4, #0
 8010cf6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010cfa:	4622      	mov	r2, r4
 8010cfc:	462b      	mov	r3, r5
 8010cfe:	f7ef fc7b 	bl	80005f8 <__aeabi_dmul>
 8010d02:	bd70      	pop	{r4, r5, r6, pc}
 8010d04:	0000      	movs	r0, r0
	...

08010d08 <_strtod_l>:
 8010d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d0c:	ed2d 8b02 	vpush	{d8}
 8010d10:	b09d      	sub	sp, #116	; 0x74
 8010d12:	461f      	mov	r7, r3
 8010d14:	2300      	movs	r3, #0
 8010d16:	9318      	str	r3, [sp, #96]	; 0x60
 8010d18:	4ba2      	ldr	r3, [pc, #648]	; (8010fa4 <_strtod_l+0x29c>)
 8010d1a:	9213      	str	r2, [sp, #76]	; 0x4c
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	9305      	str	r3, [sp, #20]
 8010d20:	4604      	mov	r4, r0
 8010d22:	4618      	mov	r0, r3
 8010d24:	4688      	mov	r8, r1
 8010d26:	f7ef fa53 	bl	80001d0 <strlen>
 8010d2a:	f04f 0a00 	mov.w	sl, #0
 8010d2e:	4605      	mov	r5, r0
 8010d30:	f04f 0b00 	mov.w	fp, #0
 8010d34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010d38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d3a:	781a      	ldrb	r2, [r3, #0]
 8010d3c:	2a2b      	cmp	r2, #43	; 0x2b
 8010d3e:	d04e      	beq.n	8010dde <_strtod_l+0xd6>
 8010d40:	d83b      	bhi.n	8010dba <_strtod_l+0xb2>
 8010d42:	2a0d      	cmp	r2, #13
 8010d44:	d834      	bhi.n	8010db0 <_strtod_l+0xa8>
 8010d46:	2a08      	cmp	r2, #8
 8010d48:	d834      	bhi.n	8010db4 <_strtod_l+0xac>
 8010d4a:	2a00      	cmp	r2, #0
 8010d4c:	d03e      	beq.n	8010dcc <_strtod_l+0xc4>
 8010d4e:	2300      	movs	r3, #0
 8010d50:	930a      	str	r3, [sp, #40]	; 0x28
 8010d52:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010d54:	7833      	ldrb	r3, [r6, #0]
 8010d56:	2b30      	cmp	r3, #48	; 0x30
 8010d58:	f040 80b0 	bne.w	8010ebc <_strtod_l+0x1b4>
 8010d5c:	7873      	ldrb	r3, [r6, #1]
 8010d5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010d62:	2b58      	cmp	r3, #88	; 0x58
 8010d64:	d168      	bne.n	8010e38 <_strtod_l+0x130>
 8010d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d68:	9301      	str	r3, [sp, #4]
 8010d6a:	ab18      	add	r3, sp, #96	; 0x60
 8010d6c:	9702      	str	r7, [sp, #8]
 8010d6e:	9300      	str	r3, [sp, #0]
 8010d70:	4a8d      	ldr	r2, [pc, #564]	; (8010fa8 <_strtod_l+0x2a0>)
 8010d72:	ab19      	add	r3, sp, #100	; 0x64
 8010d74:	a917      	add	r1, sp, #92	; 0x5c
 8010d76:	4620      	mov	r0, r4
 8010d78:	f001 fd38 	bl	80127ec <__gethex>
 8010d7c:	f010 0707 	ands.w	r7, r0, #7
 8010d80:	4605      	mov	r5, r0
 8010d82:	d005      	beq.n	8010d90 <_strtod_l+0x88>
 8010d84:	2f06      	cmp	r7, #6
 8010d86:	d12c      	bne.n	8010de2 <_strtod_l+0xda>
 8010d88:	3601      	adds	r6, #1
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	9617      	str	r6, [sp, #92]	; 0x5c
 8010d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8010d90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	f040 8590 	bne.w	80118b8 <_strtod_l+0xbb0>
 8010d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d9a:	b1eb      	cbz	r3, 8010dd8 <_strtod_l+0xd0>
 8010d9c:	4652      	mov	r2, sl
 8010d9e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010da2:	ec43 2b10 	vmov	d0, r2, r3
 8010da6:	b01d      	add	sp, #116	; 0x74
 8010da8:	ecbd 8b02 	vpop	{d8}
 8010dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010db0:	2a20      	cmp	r2, #32
 8010db2:	d1cc      	bne.n	8010d4e <_strtod_l+0x46>
 8010db4:	3301      	adds	r3, #1
 8010db6:	9317      	str	r3, [sp, #92]	; 0x5c
 8010db8:	e7be      	b.n	8010d38 <_strtod_l+0x30>
 8010dba:	2a2d      	cmp	r2, #45	; 0x2d
 8010dbc:	d1c7      	bne.n	8010d4e <_strtod_l+0x46>
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	920a      	str	r2, [sp, #40]	; 0x28
 8010dc2:	1c5a      	adds	r2, r3, #1
 8010dc4:	9217      	str	r2, [sp, #92]	; 0x5c
 8010dc6:	785b      	ldrb	r3, [r3, #1]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d1c2      	bne.n	8010d52 <_strtod_l+0x4a>
 8010dcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010dce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	f040 856e 	bne.w	80118b4 <_strtod_l+0xbac>
 8010dd8:	4652      	mov	r2, sl
 8010dda:	465b      	mov	r3, fp
 8010ddc:	e7e1      	b.n	8010da2 <_strtod_l+0x9a>
 8010dde:	2200      	movs	r2, #0
 8010de0:	e7ee      	b.n	8010dc0 <_strtod_l+0xb8>
 8010de2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010de4:	b13a      	cbz	r2, 8010df6 <_strtod_l+0xee>
 8010de6:	2135      	movs	r1, #53	; 0x35
 8010de8:	a81a      	add	r0, sp, #104	; 0x68
 8010dea:	f002 fca2 	bl	8013732 <__copybits>
 8010dee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010df0:	4620      	mov	r0, r4
 8010df2:	f002 f861 	bl	8012eb8 <_Bfree>
 8010df6:	3f01      	subs	r7, #1
 8010df8:	2f04      	cmp	r7, #4
 8010dfa:	d806      	bhi.n	8010e0a <_strtod_l+0x102>
 8010dfc:	e8df f007 	tbb	[pc, r7]
 8010e00:	1714030a 	.word	0x1714030a
 8010e04:	0a          	.byte	0x0a
 8010e05:	00          	.byte	0x00
 8010e06:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010e0a:	0728      	lsls	r0, r5, #28
 8010e0c:	d5c0      	bpl.n	8010d90 <_strtod_l+0x88>
 8010e0e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010e12:	e7bd      	b.n	8010d90 <_strtod_l+0x88>
 8010e14:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010e18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010e1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010e1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010e22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010e26:	e7f0      	b.n	8010e0a <_strtod_l+0x102>
 8010e28:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010fac <_strtod_l+0x2a4>
 8010e2c:	e7ed      	b.n	8010e0a <_strtod_l+0x102>
 8010e2e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010e32:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010e36:	e7e8      	b.n	8010e0a <_strtod_l+0x102>
 8010e38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e3a:	1c5a      	adds	r2, r3, #1
 8010e3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8010e3e:	785b      	ldrb	r3, [r3, #1]
 8010e40:	2b30      	cmp	r3, #48	; 0x30
 8010e42:	d0f9      	beq.n	8010e38 <_strtod_l+0x130>
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d0a3      	beq.n	8010d90 <_strtod_l+0x88>
 8010e48:	2301      	movs	r3, #1
 8010e4a:	f04f 0900 	mov.w	r9, #0
 8010e4e:	9304      	str	r3, [sp, #16]
 8010e50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e52:	9308      	str	r3, [sp, #32]
 8010e54:	f8cd 901c 	str.w	r9, [sp, #28]
 8010e58:	464f      	mov	r7, r9
 8010e5a:	220a      	movs	r2, #10
 8010e5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010e5e:	7806      	ldrb	r6, [r0, #0]
 8010e60:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010e64:	b2d9      	uxtb	r1, r3
 8010e66:	2909      	cmp	r1, #9
 8010e68:	d92a      	bls.n	8010ec0 <_strtod_l+0x1b8>
 8010e6a:	9905      	ldr	r1, [sp, #20]
 8010e6c:	462a      	mov	r2, r5
 8010e6e:	f002 ff0f 	bl	8013c90 <strncmp>
 8010e72:	b398      	cbz	r0, 8010edc <_strtod_l+0x1d4>
 8010e74:	2000      	movs	r0, #0
 8010e76:	4632      	mov	r2, r6
 8010e78:	463d      	mov	r5, r7
 8010e7a:	9005      	str	r0, [sp, #20]
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	2a65      	cmp	r2, #101	; 0x65
 8010e80:	d001      	beq.n	8010e86 <_strtod_l+0x17e>
 8010e82:	2a45      	cmp	r2, #69	; 0x45
 8010e84:	d118      	bne.n	8010eb8 <_strtod_l+0x1b0>
 8010e86:	b91d      	cbnz	r5, 8010e90 <_strtod_l+0x188>
 8010e88:	9a04      	ldr	r2, [sp, #16]
 8010e8a:	4302      	orrs	r2, r0
 8010e8c:	d09e      	beq.n	8010dcc <_strtod_l+0xc4>
 8010e8e:	2500      	movs	r5, #0
 8010e90:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8010e94:	f108 0201 	add.w	r2, r8, #1
 8010e98:	9217      	str	r2, [sp, #92]	; 0x5c
 8010e9a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010e9e:	2a2b      	cmp	r2, #43	; 0x2b
 8010ea0:	d075      	beq.n	8010f8e <_strtod_l+0x286>
 8010ea2:	2a2d      	cmp	r2, #45	; 0x2d
 8010ea4:	d07b      	beq.n	8010f9e <_strtod_l+0x296>
 8010ea6:	f04f 0c00 	mov.w	ip, #0
 8010eaa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010eae:	2909      	cmp	r1, #9
 8010eb0:	f240 8082 	bls.w	8010fb8 <_strtod_l+0x2b0>
 8010eb4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010eb8:	2600      	movs	r6, #0
 8010eba:	e09d      	b.n	8010ff8 <_strtod_l+0x2f0>
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	e7c4      	b.n	8010e4a <_strtod_l+0x142>
 8010ec0:	2f08      	cmp	r7, #8
 8010ec2:	bfd8      	it	le
 8010ec4:	9907      	ldrle	r1, [sp, #28]
 8010ec6:	f100 0001 	add.w	r0, r0, #1
 8010eca:	bfda      	itte	le
 8010ecc:	fb02 3301 	mlale	r3, r2, r1, r3
 8010ed0:	9307      	strle	r3, [sp, #28]
 8010ed2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010ed6:	3701      	adds	r7, #1
 8010ed8:	9017      	str	r0, [sp, #92]	; 0x5c
 8010eda:	e7bf      	b.n	8010e5c <_strtod_l+0x154>
 8010edc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ede:	195a      	adds	r2, r3, r5
 8010ee0:	9217      	str	r2, [sp, #92]	; 0x5c
 8010ee2:	5d5a      	ldrb	r2, [r3, r5]
 8010ee4:	2f00      	cmp	r7, #0
 8010ee6:	d037      	beq.n	8010f58 <_strtod_l+0x250>
 8010ee8:	9005      	str	r0, [sp, #20]
 8010eea:	463d      	mov	r5, r7
 8010eec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010ef0:	2b09      	cmp	r3, #9
 8010ef2:	d912      	bls.n	8010f1a <_strtod_l+0x212>
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	e7c2      	b.n	8010e7e <_strtod_l+0x176>
 8010ef8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010efa:	1c5a      	adds	r2, r3, #1
 8010efc:	9217      	str	r2, [sp, #92]	; 0x5c
 8010efe:	785a      	ldrb	r2, [r3, #1]
 8010f00:	3001      	adds	r0, #1
 8010f02:	2a30      	cmp	r2, #48	; 0x30
 8010f04:	d0f8      	beq.n	8010ef8 <_strtod_l+0x1f0>
 8010f06:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010f0a:	2b08      	cmp	r3, #8
 8010f0c:	f200 84d9 	bhi.w	80118c2 <_strtod_l+0xbba>
 8010f10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f12:	9005      	str	r0, [sp, #20]
 8010f14:	2000      	movs	r0, #0
 8010f16:	9308      	str	r3, [sp, #32]
 8010f18:	4605      	mov	r5, r0
 8010f1a:	3a30      	subs	r2, #48	; 0x30
 8010f1c:	f100 0301 	add.w	r3, r0, #1
 8010f20:	d014      	beq.n	8010f4c <_strtod_l+0x244>
 8010f22:	9905      	ldr	r1, [sp, #20]
 8010f24:	4419      	add	r1, r3
 8010f26:	9105      	str	r1, [sp, #20]
 8010f28:	462b      	mov	r3, r5
 8010f2a:	eb00 0e05 	add.w	lr, r0, r5
 8010f2e:	210a      	movs	r1, #10
 8010f30:	4573      	cmp	r3, lr
 8010f32:	d113      	bne.n	8010f5c <_strtod_l+0x254>
 8010f34:	182b      	adds	r3, r5, r0
 8010f36:	2b08      	cmp	r3, #8
 8010f38:	f105 0501 	add.w	r5, r5, #1
 8010f3c:	4405      	add	r5, r0
 8010f3e:	dc1c      	bgt.n	8010f7a <_strtod_l+0x272>
 8010f40:	9907      	ldr	r1, [sp, #28]
 8010f42:	230a      	movs	r3, #10
 8010f44:	fb03 2301 	mla	r3, r3, r1, r2
 8010f48:	9307      	str	r3, [sp, #28]
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010f4e:	1c51      	adds	r1, r2, #1
 8010f50:	9117      	str	r1, [sp, #92]	; 0x5c
 8010f52:	7852      	ldrb	r2, [r2, #1]
 8010f54:	4618      	mov	r0, r3
 8010f56:	e7c9      	b.n	8010eec <_strtod_l+0x1e4>
 8010f58:	4638      	mov	r0, r7
 8010f5a:	e7d2      	b.n	8010f02 <_strtod_l+0x1fa>
 8010f5c:	2b08      	cmp	r3, #8
 8010f5e:	dc04      	bgt.n	8010f6a <_strtod_l+0x262>
 8010f60:	9e07      	ldr	r6, [sp, #28]
 8010f62:	434e      	muls	r6, r1
 8010f64:	9607      	str	r6, [sp, #28]
 8010f66:	3301      	adds	r3, #1
 8010f68:	e7e2      	b.n	8010f30 <_strtod_l+0x228>
 8010f6a:	f103 0c01 	add.w	ip, r3, #1
 8010f6e:	f1bc 0f10 	cmp.w	ip, #16
 8010f72:	bfd8      	it	le
 8010f74:	fb01 f909 	mulle.w	r9, r1, r9
 8010f78:	e7f5      	b.n	8010f66 <_strtod_l+0x25e>
 8010f7a:	2d10      	cmp	r5, #16
 8010f7c:	bfdc      	itt	le
 8010f7e:	230a      	movle	r3, #10
 8010f80:	fb03 2909 	mlale	r9, r3, r9, r2
 8010f84:	e7e1      	b.n	8010f4a <_strtod_l+0x242>
 8010f86:	2300      	movs	r3, #0
 8010f88:	9305      	str	r3, [sp, #20]
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	e77c      	b.n	8010e88 <_strtod_l+0x180>
 8010f8e:	f04f 0c00 	mov.w	ip, #0
 8010f92:	f108 0202 	add.w	r2, r8, #2
 8010f96:	9217      	str	r2, [sp, #92]	; 0x5c
 8010f98:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010f9c:	e785      	b.n	8010eaa <_strtod_l+0x1a2>
 8010f9e:	f04f 0c01 	mov.w	ip, #1
 8010fa2:	e7f6      	b.n	8010f92 <_strtod_l+0x28a>
 8010fa4:	080156e0 	.word	0x080156e0
 8010fa8:	08015498 	.word	0x08015498
 8010fac:	7ff00000 	.word	0x7ff00000
 8010fb0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010fb2:	1c51      	adds	r1, r2, #1
 8010fb4:	9117      	str	r1, [sp, #92]	; 0x5c
 8010fb6:	7852      	ldrb	r2, [r2, #1]
 8010fb8:	2a30      	cmp	r2, #48	; 0x30
 8010fba:	d0f9      	beq.n	8010fb0 <_strtod_l+0x2a8>
 8010fbc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010fc0:	2908      	cmp	r1, #8
 8010fc2:	f63f af79 	bhi.w	8010eb8 <_strtod_l+0x1b0>
 8010fc6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010fca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010fcc:	9206      	str	r2, [sp, #24]
 8010fce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010fd0:	1c51      	adds	r1, r2, #1
 8010fd2:	9117      	str	r1, [sp, #92]	; 0x5c
 8010fd4:	7852      	ldrb	r2, [r2, #1]
 8010fd6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010fda:	2e09      	cmp	r6, #9
 8010fdc:	d937      	bls.n	801104e <_strtod_l+0x346>
 8010fde:	9e06      	ldr	r6, [sp, #24]
 8010fe0:	1b89      	subs	r1, r1, r6
 8010fe2:	2908      	cmp	r1, #8
 8010fe4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010fe8:	dc02      	bgt.n	8010ff0 <_strtod_l+0x2e8>
 8010fea:	4576      	cmp	r6, lr
 8010fec:	bfa8      	it	ge
 8010fee:	4676      	movge	r6, lr
 8010ff0:	f1bc 0f00 	cmp.w	ip, #0
 8010ff4:	d000      	beq.n	8010ff8 <_strtod_l+0x2f0>
 8010ff6:	4276      	negs	r6, r6
 8010ff8:	2d00      	cmp	r5, #0
 8010ffa:	d14d      	bne.n	8011098 <_strtod_l+0x390>
 8010ffc:	9904      	ldr	r1, [sp, #16]
 8010ffe:	4301      	orrs	r1, r0
 8011000:	f47f aec6 	bne.w	8010d90 <_strtod_l+0x88>
 8011004:	2b00      	cmp	r3, #0
 8011006:	f47f aee1 	bne.w	8010dcc <_strtod_l+0xc4>
 801100a:	2a69      	cmp	r2, #105	; 0x69
 801100c:	d027      	beq.n	801105e <_strtod_l+0x356>
 801100e:	dc24      	bgt.n	801105a <_strtod_l+0x352>
 8011010:	2a49      	cmp	r2, #73	; 0x49
 8011012:	d024      	beq.n	801105e <_strtod_l+0x356>
 8011014:	2a4e      	cmp	r2, #78	; 0x4e
 8011016:	f47f aed9 	bne.w	8010dcc <_strtod_l+0xc4>
 801101a:	499f      	ldr	r1, [pc, #636]	; (8011298 <_strtod_l+0x590>)
 801101c:	a817      	add	r0, sp, #92	; 0x5c
 801101e:	f001 fe3d 	bl	8012c9c <__match>
 8011022:	2800      	cmp	r0, #0
 8011024:	f43f aed2 	beq.w	8010dcc <_strtod_l+0xc4>
 8011028:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	2b28      	cmp	r3, #40	; 0x28
 801102e:	d12d      	bne.n	801108c <_strtod_l+0x384>
 8011030:	499a      	ldr	r1, [pc, #616]	; (801129c <_strtod_l+0x594>)
 8011032:	aa1a      	add	r2, sp, #104	; 0x68
 8011034:	a817      	add	r0, sp, #92	; 0x5c
 8011036:	f001 fe45 	bl	8012cc4 <__hexnan>
 801103a:	2805      	cmp	r0, #5
 801103c:	d126      	bne.n	801108c <_strtod_l+0x384>
 801103e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011040:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8011044:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011048:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801104c:	e6a0      	b.n	8010d90 <_strtod_l+0x88>
 801104e:	210a      	movs	r1, #10
 8011050:	fb01 2e0e 	mla	lr, r1, lr, r2
 8011054:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011058:	e7b9      	b.n	8010fce <_strtod_l+0x2c6>
 801105a:	2a6e      	cmp	r2, #110	; 0x6e
 801105c:	e7db      	b.n	8011016 <_strtod_l+0x30e>
 801105e:	4990      	ldr	r1, [pc, #576]	; (80112a0 <_strtod_l+0x598>)
 8011060:	a817      	add	r0, sp, #92	; 0x5c
 8011062:	f001 fe1b 	bl	8012c9c <__match>
 8011066:	2800      	cmp	r0, #0
 8011068:	f43f aeb0 	beq.w	8010dcc <_strtod_l+0xc4>
 801106c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801106e:	498d      	ldr	r1, [pc, #564]	; (80112a4 <_strtod_l+0x59c>)
 8011070:	3b01      	subs	r3, #1
 8011072:	a817      	add	r0, sp, #92	; 0x5c
 8011074:	9317      	str	r3, [sp, #92]	; 0x5c
 8011076:	f001 fe11 	bl	8012c9c <__match>
 801107a:	b910      	cbnz	r0, 8011082 <_strtod_l+0x37a>
 801107c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801107e:	3301      	adds	r3, #1
 8011080:	9317      	str	r3, [sp, #92]	; 0x5c
 8011082:	f8df b230 	ldr.w	fp, [pc, #560]	; 80112b4 <_strtod_l+0x5ac>
 8011086:	f04f 0a00 	mov.w	sl, #0
 801108a:	e681      	b.n	8010d90 <_strtod_l+0x88>
 801108c:	4886      	ldr	r0, [pc, #536]	; (80112a8 <_strtod_l+0x5a0>)
 801108e:	f002 fde7 	bl	8013c60 <nan>
 8011092:	ec5b ab10 	vmov	sl, fp, d0
 8011096:	e67b      	b.n	8010d90 <_strtod_l+0x88>
 8011098:	9b05      	ldr	r3, [sp, #20]
 801109a:	9807      	ldr	r0, [sp, #28]
 801109c:	1af3      	subs	r3, r6, r3
 801109e:	2f00      	cmp	r7, #0
 80110a0:	bf08      	it	eq
 80110a2:	462f      	moveq	r7, r5
 80110a4:	2d10      	cmp	r5, #16
 80110a6:	9306      	str	r3, [sp, #24]
 80110a8:	46a8      	mov	r8, r5
 80110aa:	bfa8      	it	ge
 80110ac:	f04f 0810 	movge.w	r8, #16
 80110b0:	f7ef fa28 	bl	8000504 <__aeabi_ui2d>
 80110b4:	2d09      	cmp	r5, #9
 80110b6:	4682      	mov	sl, r0
 80110b8:	468b      	mov	fp, r1
 80110ba:	dd13      	ble.n	80110e4 <_strtod_l+0x3dc>
 80110bc:	4b7b      	ldr	r3, [pc, #492]	; (80112ac <_strtod_l+0x5a4>)
 80110be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80110c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80110c6:	f7ef fa97 	bl	80005f8 <__aeabi_dmul>
 80110ca:	4682      	mov	sl, r0
 80110cc:	4648      	mov	r0, r9
 80110ce:	468b      	mov	fp, r1
 80110d0:	f7ef fa18 	bl	8000504 <__aeabi_ui2d>
 80110d4:	4602      	mov	r2, r0
 80110d6:	460b      	mov	r3, r1
 80110d8:	4650      	mov	r0, sl
 80110da:	4659      	mov	r1, fp
 80110dc:	f7ef f8d6 	bl	800028c <__adddf3>
 80110e0:	4682      	mov	sl, r0
 80110e2:	468b      	mov	fp, r1
 80110e4:	2d0f      	cmp	r5, #15
 80110e6:	dc38      	bgt.n	801115a <_strtod_l+0x452>
 80110e8:	9b06      	ldr	r3, [sp, #24]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	f43f ae50 	beq.w	8010d90 <_strtod_l+0x88>
 80110f0:	dd24      	ble.n	801113c <_strtod_l+0x434>
 80110f2:	2b16      	cmp	r3, #22
 80110f4:	dc0b      	bgt.n	801110e <_strtod_l+0x406>
 80110f6:	496d      	ldr	r1, [pc, #436]	; (80112ac <_strtod_l+0x5a4>)
 80110f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80110fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011100:	4652      	mov	r2, sl
 8011102:	465b      	mov	r3, fp
 8011104:	f7ef fa78 	bl	80005f8 <__aeabi_dmul>
 8011108:	4682      	mov	sl, r0
 801110a:	468b      	mov	fp, r1
 801110c:	e640      	b.n	8010d90 <_strtod_l+0x88>
 801110e:	9a06      	ldr	r2, [sp, #24]
 8011110:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011114:	4293      	cmp	r3, r2
 8011116:	db20      	blt.n	801115a <_strtod_l+0x452>
 8011118:	4c64      	ldr	r4, [pc, #400]	; (80112ac <_strtod_l+0x5a4>)
 801111a:	f1c5 050f 	rsb	r5, r5, #15
 801111e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011122:	4652      	mov	r2, sl
 8011124:	465b      	mov	r3, fp
 8011126:	e9d1 0100 	ldrd	r0, r1, [r1]
 801112a:	f7ef fa65 	bl	80005f8 <__aeabi_dmul>
 801112e:	9b06      	ldr	r3, [sp, #24]
 8011130:	1b5d      	subs	r5, r3, r5
 8011132:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011136:	e9d4 2300 	ldrd	r2, r3, [r4]
 801113a:	e7e3      	b.n	8011104 <_strtod_l+0x3fc>
 801113c:	9b06      	ldr	r3, [sp, #24]
 801113e:	3316      	adds	r3, #22
 8011140:	db0b      	blt.n	801115a <_strtod_l+0x452>
 8011142:	9b05      	ldr	r3, [sp, #20]
 8011144:	1b9e      	subs	r6, r3, r6
 8011146:	4b59      	ldr	r3, [pc, #356]	; (80112ac <_strtod_l+0x5a4>)
 8011148:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801114c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011150:	4650      	mov	r0, sl
 8011152:	4659      	mov	r1, fp
 8011154:	f7ef fb7a 	bl	800084c <__aeabi_ddiv>
 8011158:	e7d6      	b.n	8011108 <_strtod_l+0x400>
 801115a:	9b06      	ldr	r3, [sp, #24]
 801115c:	eba5 0808 	sub.w	r8, r5, r8
 8011160:	4498      	add	r8, r3
 8011162:	f1b8 0f00 	cmp.w	r8, #0
 8011166:	dd74      	ble.n	8011252 <_strtod_l+0x54a>
 8011168:	f018 030f 	ands.w	r3, r8, #15
 801116c:	d00a      	beq.n	8011184 <_strtod_l+0x47c>
 801116e:	494f      	ldr	r1, [pc, #316]	; (80112ac <_strtod_l+0x5a4>)
 8011170:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011174:	4652      	mov	r2, sl
 8011176:	465b      	mov	r3, fp
 8011178:	e9d1 0100 	ldrd	r0, r1, [r1]
 801117c:	f7ef fa3c 	bl	80005f8 <__aeabi_dmul>
 8011180:	4682      	mov	sl, r0
 8011182:	468b      	mov	fp, r1
 8011184:	f038 080f 	bics.w	r8, r8, #15
 8011188:	d04f      	beq.n	801122a <_strtod_l+0x522>
 801118a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801118e:	dd22      	ble.n	80111d6 <_strtod_l+0x4ce>
 8011190:	2500      	movs	r5, #0
 8011192:	462e      	mov	r6, r5
 8011194:	9507      	str	r5, [sp, #28]
 8011196:	9505      	str	r5, [sp, #20]
 8011198:	2322      	movs	r3, #34	; 0x22
 801119a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80112b4 <_strtod_l+0x5ac>
 801119e:	6023      	str	r3, [r4, #0]
 80111a0:	f04f 0a00 	mov.w	sl, #0
 80111a4:	9b07      	ldr	r3, [sp, #28]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	f43f adf2 	beq.w	8010d90 <_strtod_l+0x88>
 80111ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 80111ae:	4620      	mov	r0, r4
 80111b0:	f001 fe82 	bl	8012eb8 <_Bfree>
 80111b4:	9905      	ldr	r1, [sp, #20]
 80111b6:	4620      	mov	r0, r4
 80111b8:	f001 fe7e 	bl	8012eb8 <_Bfree>
 80111bc:	4631      	mov	r1, r6
 80111be:	4620      	mov	r0, r4
 80111c0:	f001 fe7a 	bl	8012eb8 <_Bfree>
 80111c4:	9907      	ldr	r1, [sp, #28]
 80111c6:	4620      	mov	r0, r4
 80111c8:	f001 fe76 	bl	8012eb8 <_Bfree>
 80111cc:	4629      	mov	r1, r5
 80111ce:	4620      	mov	r0, r4
 80111d0:	f001 fe72 	bl	8012eb8 <_Bfree>
 80111d4:	e5dc      	b.n	8010d90 <_strtod_l+0x88>
 80111d6:	4b36      	ldr	r3, [pc, #216]	; (80112b0 <_strtod_l+0x5a8>)
 80111d8:	9304      	str	r3, [sp, #16]
 80111da:	2300      	movs	r3, #0
 80111dc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80111e0:	4650      	mov	r0, sl
 80111e2:	4659      	mov	r1, fp
 80111e4:	4699      	mov	r9, r3
 80111e6:	f1b8 0f01 	cmp.w	r8, #1
 80111ea:	dc21      	bgt.n	8011230 <_strtod_l+0x528>
 80111ec:	b10b      	cbz	r3, 80111f2 <_strtod_l+0x4ea>
 80111ee:	4682      	mov	sl, r0
 80111f0:	468b      	mov	fp, r1
 80111f2:	4b2f      	ldr	r3, [pc, #188]	; (80112b0 <_strtod_l+0x5a8>)
 80111f4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80111f8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80111fc:	4652      	mov	r2, sl
 80111fe:	465b      	mov	r3, fp
 8011200:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011204:	f7ef f9f8 	bl	80005f8 <__aeabi_dmul>
 8011208:	4b2a      	ldr	r3, [pc, #168]	; (80112b4 <_strtod_l+0x5ac>)
 801120a:	460a      	mov	r2, r1
 801120c:	400b      	ands	r3, r1
 801120e:	492a      	ldr	r1, [pc, #168]	; (80112b8 <_strtod_l+0x5b0>)
 8011210:	428b      	cmp	r3, r1
 8011212:	4682      	mov	sl, r0
 8011214:	d8bc      	bhi.n	8011190 <_strtod_l+0x488>
 8011216:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801121a:	428b      	cmp	r3, r1
 801121c:	bf86      	itte	hi
 801121e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80112bc <_strtod_l+0x5b4>
 8011222:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8011226:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801122a:	2300      	movs	r3, #0
 801122c:	9304      	str	r3, [sp, #16]
 801122e:	e084      	b.n	801133a <_strtod_l+0x632>
 8011230:	f018 0f01 	tst.w	r8, #1
 8011234:	d005      	beq.n	8011242 <_strtod_l+0x53a>
 8011236:	9b04      	ldr	r3, [sp, #16]
 8011238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123c:	f7ef f9dc 	bl	80005f8 <__aeabi_dmul>
 8011240:	2301      	movs	r3, #1
 8011242:	9a04      	ldr	r2, [sp, #16]
 8011244:	3208      	adds	r2, #8
 8011246:	f109 0901 	add.w	r9, r9, #1
 801124a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801124e:	9204      	str	r2, [sp, #16]
 8011250:	e7c9      	b.n	80111e6 <_strtod_l+0x4de>
 8011252:	d0ea      	beq.n	801122a <_strtod_l+0x522>
 8011254:	f1c8 0800 	rsb	r8, r8, #0
 8011258:	f018 020f 	ands.w	r2, r8, #15
 801125c:	d00a      	beq.n	8011274 <_strtod_l+0x56c>
 801125e:	4b13      	ldr	r3, [pc, #76]	; (80112ac <_strtod_l+0x5a4>)
 8011260:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011264:	4650      	mov	r0, sl
 8011266:	4659      	mov	r1, fp
 8011268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126c:	f7ef faee 	bl	800084c <__aeabi_ddiv>
 8011270:	4682      	mov	sl, r0
 8011272:	468b      	mov	fp, r1
 8011274:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011278:	d0d7      	beq.n	801122a <_strtod_l+0x522>
 801127a:	f1b8 0f1f 	cmp.w	r8, #31
 801127e:	dd1f      	ble.n	80112c0 <_strtod_l+0x5b8>
 8011280:	2500      	movs	r5, #0
 8011282:	462e      	mov	r6, r5
 8011284:	9507      	str	r5, [sp, #28]
 8011286:	9505      	str	r5, [sp, #20]
 8011288:	2322      	movs	r3, #34	; 0x22
 801128a:	f04f 0a00 	mov.w	sl, #0
 801128e:	f04f 0b00 	mov.w	fp, #0
 8011292:	6023      	str	r3, [r4, #0]
 8011294:	e786      	b.n	80111a4 <_strtod_l+0x49c>
 8011296:	bf00      	nop
 8011298:	08015469 	.word	0x08015469
 801129c:	080154ac 	.word	0x080154ac
 80112a0:	08015461 	.word	0x08015461
 80112a4:	080155ec 	.word	0x080155ec
 80112a8:	08015898 	.word	0x08015898
 80112ac:	08015778 	.word	0x08015778
 80112b0:	08015750 	.word	0x08015750
 80112b4:	7ff00000 	.word	0x7ff00000
 80112b8:	7ca00000 	.word	0x7ca00000
 80112bc:	7fefffff 	.word	0x7fefffff
 80112c0:	f018 0310 	ands.w	r3, r8, #16
 80112c4:	bf18      	it	ne
 80112c6:	236a      	movne	r3, #106	; 0x6a
 80112c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8011678 <_strtod_l+0x970>
 80112cc:	9304      	str	r3, [sp, #16]
 80112ce:	4650      	mov	r0, sl
 80112d0:	4659      	mov	r1, fp
 80112d2:	2300      	movs	r3, #0
 80112d4:	f018 0f01 	tst.w	r8, #1
 80112d8:	d004      	beq.n	80112e4 <_strtod_l+0x5dc>
 80112da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80112de:	f7ef f98b 	bl	80005f8 <__aeabi_dmul>
 80112e2:	2301      	movs	r3, #1
 80112e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80112e8:	f109 0908 	add.w	r9, r9, #8
 80112ec:	d1f2      	bne.n	80112d4 <_strtod_l+0x5cc>
 80112ee:	b10b      	cbz	r3, 80112f4 <_strtod_l+0x5ec>
 80112f0:	4682      	mov	sl, r0
 80112f2:	468b      	mov	fp, r1
 80112f4:	9b04      	ldr	r3, [sp, #16]
 80112f6:	b1c3      	cbz	r3, 801132a <_strtod_l+0x622>
 80112f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80112fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011300:	2b00      	cmp	r3, #0
 8011302:	4659      	mov	r1, fp
 8011304:	dd11      	ble.n	801132a <_strtod_l+0x622>
 8011306:	2b1f      	cmp	r3, #31
 8011308:	f340 8124 	ble.w	8011554 <_strtod_l+0x84c>
 801130c:	2b34      	cmp	r3, #52	; 0x34
 801130e:	bfde      	ittt	le
 8011310:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011314:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8011318:	fa03 f202 	lslle.w	r2, r3, r2
 801131c:	f04f 0a00 	mov.w	sl, #0
 8011320:	bfcc      	ite	gt
 8011322:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011326:	ea02 0b01 	andle.w	fp, r2, r1
 801132a:	2200      	movs	r2, #0
 801132c:	2300      	movs	r3, #0
 801132e:	4650      	mov	r0, sl
 8011330:	4659      	mov	r1, fp
 8011332:	f7ef fbc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8011336:	2800      	cmp	r0, #0
 8011338:	d1a2      	bne.n	8011280 <_strtod_l+0x578>
 801133a:	9b07      	ldr	r3, [sp, #28]
 801133c:	9300      	str	r3, [sp, #0]
 801133e:	9908      	ldr	r1, [sp, #32]
 8011340:	462b      	mov	r3, r5
 8011342:	463a      	mov	r2, r7
 8011344:	4620      	mov	r0, r4
 8011346:	f001 fe1f 	bl	8012f88 <__s2b>
 801134a:	9007      	str	r0, [sp, #28]
 801134c:	2800      	cmp	r0, #0
 801134e:	f43f af1f 	beq.w	8011190 <_strtod_l+0x488>
 8011352:	9b05      	ldr	r3, [sp, #20]
 8011354:	1b9e      	subs	r6, r3, r6
 8011356:	9b06      	ldr	r3, [sp, #24]
 8011358:	2b00      	cmp	r3, #0
 801135a:	bfb4      	ite	lt
 801135c:	4633      	movlt	r3, r6
 801135e:	2300      	movge	r3, #0
 8011360:	930c      	str	r3, [sp, #48]	; 0x30
 8011362:	9b06      	ldr	r3, [sp, #24]
 8011364:	2500      	movs	r5, #0
 8011366:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801136a:	9312      	str	r3, [sp, #72]	; 0x48
 801136c:	462e      	mov	r6, r5
 801136e:	9b07      	ldr	r3, [sp, #28]
 8011370:	4620      	mov	r0, r4
 8011372:	6859      	ldr	r1, [r3, #4]
 8011374:	f001 fd60 	bl	8012e38 <_Balloc>
 8011378:	9005      	str	r0, [sp, #20]
 801137a:	2800      	cmp	r0, #0
 801137c:	f43f af0c 	beq.w	8011198 <_strtod_l+0x490>
 8011380:	9b07      	ldr	r3, [sp, #28]
 8011382:	691a      	ldr	r2, [r3, #16]
 8011384:	3202      	adds	r2, #2
 8011386:	f103 010c 	add.w	r1, r3, #12
 801138a:	0092      	lsls	r2, r2, #2
 801138c:	300c      	adds	r0, #12
 801138e:	f7fe fde7 	bl	800ff60 <memcpy>
 8011392:	ec4b ab10 	vmov	d0, sl, fp
 8011396:	aa1a      	add	r2, sp, #104	; 0x68
 8011398:	a919      	add	r1, sp, #100	; 0x64
 801139a:	4620      	mov	r0, r4
 801139c:	f002 f93a 	bl	8013614 <__d2b>
 80113a0:	ec4b ab18 	vmov	d8, sl, fp
 80113a4:	9018      	str	r0, [sp, #96]	; 0x60
 80113a6:	2800      	cmp	r0, #0
 80113a8:	f43f aef6 	beq.w	8011198 <_strtod_l+0x490>
 80113ac:	2101      	movs	r1, #1
 80113ae:	4620      	mov	r0, r4
 80113b0:	f001 fe84 	bl	80130bc <__i2b>
 80113b4:	4606      	mov	r6, r0
 80113b6:	2800      	cmp	r0, #0
 80113b8:	f43f aeee 	beq.w	8011198 <_strtod_l+0x490>
 80113bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80113be:	9904      	ldr	r1, [sp, #16]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	bfab      	itete	ge
 80113c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80113c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80113c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80113ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80113ce:	bfac      	ite	ge
 80113d0:	eb03 0902 	addge.w	r9, r3, r2
 80113d4:	1ad7      	sublt	r7, r2, r3
 80113d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80113d8:	eba3 0801 	sub.w	r8, r3, r1
 80113dc:	4490      	add	r8, r2
 80113de:	4ba1      	ldr	r3, [pc, #644]	; (8011664 <_strtod_l+0x95c>)
 80113e0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80113e4:	4598      	cmp	r8, r3
 80113e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80113ea:	f280 80c7 	bge.w	801157c <_strtod_l+0x874>
 80113ee:	eba3 0308 	sub.w	r3, r3, r8
 80113f2:	2b1f      	cmp	r3, #31
 80113f4:	eba2 0203 	sub.w	r2, r2, r3
 80113f8:	f04f 0101 	mov.w	r1, #1
 80113fc:	f300 80b1 	bgt.w	8011562 <_strtod_l+0x85a>
 8011400:	fa01 f303 	lsl.w	r3, r1, r3
 8011404:	930d      	str	r3, [sp, #52]	; 0x34
 8011406:	2300      	movs	r3, #0
 8011408:	9308      	str	r3, [sp, #32]
 801140a:	eb09 0802 	add.w	r8, r9, r2
 801140e:	9b04      	ldr	r3, [sp, #16]
 8011410:	45c1      	cmp	r9, r8
 8011412:	4417      	add	r7, r2
 8011414:	441f      	add	r7, r3
 8011416:	464b      	mov	r3, r9
 8011418:	bfa8      	it	ge
 801141a:	4643      	movge	r3, r8
 801141c:	42bb      	cmp	r3, r7
 801141e:	bfa8      	it	ge
 8011420:	463b      	movge	r3, r7
 8011422:	2b00      	cmp	r3, #0
 8011424:	bfc2      	ittt	gt
 8011426:	eba8 0803 	subgt.w	r8, r8, r3
 801142a:	1aff      	subgt	r7, r7, r3
 801142c:	eba9 0903 	subgt.w	r9, r9, r3
 8011430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011432:	2b00      	cmp	r3, #0
 8011434:	dd17      	ble.n	8011466 <_strtod_l+0x75e>
 8011436:	4631      	mov	r1, r6
 8011438:	461a      	mov	r2, r3
 801143a:	4620      	mov	r0, r4
 801143c:	f001 fefe 	bl	801323c <__pow5mult>
 8011440:	4606      	mov	r6, r0
 8011442:	2800      	cmp	r0, #0
 8011444:	f43f aea8 	beq.w	8011198 <_strtod_l+0x490>
 8011448:	4601      	mov	r1, r0
 801144a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801144c:	4620      	mov	r0, r4
 801144e:	f001 fe4b 	bl	80130e8 <__multiply>
 8011452:	900b      	str	r0, [sp, #44]	; 0x2c
 8011454:	2800      	cmp	r0, #0
 8011456:	f43f ae9f 	beq.w	8011198 <_strtod_l+0x490>
 801145a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801145c:	4620      	mov	r0, r4
 801145e:	f001 fd2b 	bl	8012eb8 <_Bfree>
 8011462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011464:	9318      	str	r3, [sp, #96]	; 0x60
 8011466:	f1b8 0f00 	cmp.w	r8, #0
 801146a:	f300 808c 	bgt.w	8011586 <_strtod_l+0x87e>
 801146e:	9b06      	ldr	r3, [sp, #24]
 8011470:	2b00      	cmp	r3, #0
 8011472:	dd08      	ble.n	8011486 <_strtod_l+0x77e>
 8011474:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011476:	9905      	ldr	r1, [sp, #20]
 8011478:	4620      	mov	r0, r4
 801147a:	f001 fedf 	bl	801323c <__pow5mult>
 801147e:	9005      	str	r0, [sp, #20]
 8011480:	2800      	cmp	r0, #0
 8011482:	f43f ae89 	beq.w	8011198 <_strtod_l+0x490>
 8011486:	2f00      	cmp	r7, #0
 8011488:	dd08      	ble.n	801149c <_strtod_l+0x794>
 801148a:	9905      	ldr	r1, [sp, #20]
 801148c:	463a      	mov	r2, r7
 801148e:	4620      	mov	r0, r4
 8011490:	f001 ff2e 	bl	80132f0 <__lshift>
 8011494:	9005      	str	r0, [sp, #20]
 8011496:	2800      	cmp	r0, #0
 8011498:	f43f ae7e 	beq.w	8011198 <_strtod_l+0x490>
 801149c:	f1b9 0f00 	cmp.w	r9, #0
 80114a0:	dd08      	ble.n	80114b4 <_strtod_l+0x7ac>
 80114a2:	4631      	mov	r1, r6
 80114a4:	464a      	mov	r2, r9
 80114a6:	4620      	mov	r0, r4
 80114a8:	f001 ff22 	bl	80132f0 <__lshift>
 80114ac:	4606      	mov	r6, r0
 80114ae:	2800      	cmp	r0, #0
 80114b0:	f43f ae72 	beq.w	8011198 <_strtod_l+0x490>
 80114b4:	9a05      	ldr	r2, [sp, #20]
 80114b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80114b8:	4620      	mov	r0, r4
 80114ba:	f001 ffa5 	bl	8013408 <__mdiff>
 80114be:	4605      	mov	r5, r0
 80114c0:	2800      	cmp	r0, #0
 80114c2:	f43f ae69 	beq.w	8011198 <_strtod_l+0x490>
 80114c6:	68c3      	ldr	r3, [r0, #12]
 80114c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80114ca:	2300      	movs	r3, #0
 80114cc:	60c3      	str	r3, [r0, #12]
 80114ce:	4631      	mov	r1, r6
 80114d0:	f001 ff7e 	bl	80133d0 <__mcmp>
 80114d4:	2800      	cmp	r0, #0
 80114d6:	da60      	bge.n	801159a <_strtod_l+0x892>
 80114d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114da:	ea53 030a 	orrs.w	r3, r3, sl
 80114de:	f040 8082 	bne.w	80115e6 <_strtod_l+0x8de>
 80114e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d17d      	bne.n	80115e6 <_strtod_l+0x8de>
 80114ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80114ee:	0d1b      	lsrs	r3, r3, #20
 80114f0:	051b      	lsls	r3, r3, #20
 80114f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80114f6:	d976      	bls.n	80115e6 <_strtod_l+0x8de>
 80114f8:	696b      	ldr	r3, [r5, #20]
 80114fa:	b913      	cbnz	r3, 8011502 <_strtod_l+0x7fa>
 80114fc:	692b      	ldr	r3, [r5, #16]
 80114fe:	2b01      	cmp	r3, #1
 8011500:	dd71      	ble.n	80115e6 <_strtod_l+0x8de>
 8011502:	4629      	mov	r1, r5
 8011504:	2201      	movs	r2, #1
 8011506:	4620      	mov	r0, r4
 8011508:	f001 fef2 	bl	80132f0 <__lshift>
 801150c:	4631      	mov	r1, r6
 801150e:	4605      	mov	r5, r0
 8011510:	f001 ff5e 	bl	80133d0 <__mcmp>
 8011514:	2800      	cmp	r0, #0
 8011516:	dd66      	ble.n	80115e6 <_strtod_l+0x8de>
 8011518:	9904      	ldr	r1, [sp, #16]
 801151a:	4a53      	ldr	r2, [pc, #332]	; (8011668 <_strtod_l+0x960>)
 801151c:	465b      	mov	r3, fp
 801151e:	2900      	cmp	r1, #0
 8011520:	f000 8081 	beq.w	8011626 <_strtod_l+0x91e>
 8011524:	ea02 010b 	and.w	r1, r2, fp
 8011528:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801152c:	dc7b      	bgt.n	8011626 <_strtod_l+0x91e>
 801152e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011532:	f77f aea9 	ble.w	8011288 <_strtod_l+0x580>
 8011536:	4b4d      	ldr	r3, [pc, #308]	; (801166c <_strtod_l+0x964>)
 8011538:	4650      	mov	r0, sl
 801153a:	4659      	mov	r1, fp
 801153c:	2200      	movs	r2, #0
 801153e:	f7ef f85b 	bl	80005f8 <__aeabi_dmul>
 8011542:	460b      	mov	r3, r1
 8011544:	4303      	orrs	r3, r0
 8011546:	bf08      	it	eq
 8011548:	2322      	moveq	r3, #34	; 0x22
 801154a:	4682      	mov	sl, r0
 801154c:	468b      	mov	fp, r1
 801154e:	bf08      	it	eq
 8011550:	6023      	streq	r3, [r4, #0]
 8011552:	e62b      	b.n	80111ac <_strtod_l+0x4a4>
 8011554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011558:	fa02 f303 	lsl.w	r3, r2, r3
 801155c:	ea03 0a0a 	and.w	sl, r3, sl
 8011560:	e6e3      	b.n	801132a <_strtod_l+0x622>
 8011562:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011566:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801156a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801156e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011572:	fa01 f308 	lsl.w	r3, r1, r8
 8011576:	9308      	str	r3, [sp, #32]
 8011578:	910d      	str	r1, [sp, #52]	; 0x34
 801157a:	e746      	b.n	801140a <_strtod_l+0x702>
 801157c:	2300      	movs	r3, #0
 801157e:	9308      	str	r3, [sp, #32]
 8011580:	2301      	movs	r3, #1
 8011582:	930d      	str	r3, [sp, #52]	; 0x34
 8011584:	e741      	b.n	801140a <_strtod_l+0x702>
 8011586:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011588:	4642      	mov	r2, r8
 801158a:	4620      	mov	r0, r4
 801158c:	f001 feb0 	bl	80132f0 <__lshift>
 8011590:	9018      	str	r0, [sp, #96]	; 0x60
 8011592:	2800      	cmp	r0, #0
 8011594:	f47f af6b 	bne.w	801146e <_strtod_l+0x766>
 8011598:	e5fe      	b.n	8011198 <_strtod_l+0x490>
 801159a:	465f      	mov	r7, fp
 801159c:	d16e      	bne.n	801167c <_strtod_l+0x974>
 801159e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80115a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80115a4:	b342      	cbz	r2, 80115f8 <_strtod_l+0x8f0>
 80115a6:	4a32      	ldr	r2, [pc, #200]	; (8011670 <_strtod_l+0x968>)
 80115a8:	4293      	cmp	r3, r2
 80115aa:	d128      	bne.n	80115fe <_strtod_l+0x8f6>
 80115ac:	9b04      	ldr	r3, [sp, #16]
 80115ae:	4651      	mov	r1, sl
 80115b0:	b1eb      	cbz	r3, 80115ee <_strtod_l+0x8e6>
 80115b2:	4b2d      	ldr	r3, [pc, #180]	; (8011668 <_strtod_l+0x960>)
 80115b4:	403b      	ands	r3, r7
 80115b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80115ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80115be:	d819      	bhi.n	80115f4 <_strtod_l+0x8ec>
 80115c0:	0d1b      	lsrs	r3, r3, #20
 80115c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80115c6:	fa02 f303 	lsl.w	r3, r2, r3
 80115ca:	4299      	cmp	r1, r3
 80115cc:	d117      	bne.n	80115fe <_strtod_l+0x8f6>
 80115ce:	4b29      	ldr	r3, [pc, #164]	; (8011674 <_strtod_l+0x96c>)
 80115d0:	429f      	cmp	r7, r3
 80115d2:	d102      	bne.n	80115da <_strtod_l+0x8d2>
 80115d4:	3101      	adds	r1, #1
 80115d6:	f43f addf 	beq.w	8011198 <_strtod_l+0x490>
 80115da:	4b23      	ldr	r3, [pc, #140]	; (8011668 <_strtod_l+0x960>)
 80115dc:	403b      	ands	r3, r7
 80115de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80115e2:	f04f 0a00 	mov.w	sl, #0
 80115e6:	9b04      	ldr	r3, [sp, #16]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d1a4      	bne.n	8011536 <_strtod_l+0x82e>
 80115ec:	e5de      	b.n	80111ac <_strtod_l+0x4a4>
 80115ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115f2:	e7ea      	b.n	80115ca <_strtod_l+0x8c2>
 80115f4:	4613      	mov	r3, r2
 80115f6:	e7e8      	b.n	80115ca <_strtod_l+0x8c2>
 80115f8:	ea53 030a 	orrs.w	r3, r3, sl
 80115fc:	d08c      	beq.n	8011518 <_strtod_l+0x810>
 80115fe:	9b08      	ldr	r3, [sp, #32]
 8011600:	b1db      	cbz	r3, 801163a <_strtod_l+0x932>
 8011602:	423b      	tst	r3, r7
 8011604:	d0ef      	beq.n	80115e6 <_strtod_l+0x8de>
 8011606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011608:	9a04      	ldr	r2, [sp, #16]
 801160a:	4650      	mov	r0, sl
 801160c:	4659      	mov	r1, fp
 801160e:	b1c3      	cbz	r3, 8011642 <_strtod_l+0x93a>
 8011610:	f7ff fb5c 	bl	8010ccc <sulp>
 8011614:	4602      	mov	r2, r0
 8011616:	460b      	mov	r3, r1
 8011618:	ec51 0b18 	vmov	r0, r1, d8
 801161c:	f7ee fe36 	bl	800028c <__adddf3>
 8011620:	4682      	mov	sl, r0
 8011622:	468b      	mov	fp, r1
 8011624:	e7df      	b.n	80115e6 <_strtod_l+0x8de>
 8011626:	4013      	ands	r3, r2
 8011628:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801162c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011630:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011634:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011638:	e7d5      	b.n	80115e6 <_strtod_l+0x8de>
 801163a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801163c:	ea13 0f0a 	tst.w	r3, sl
 8011640:	e7e0      	b.n	8011604 <_strtod_l+0x8fc>
 8011642:	f7ff fb43 	bl	8010ccc <sulp>
 8011646:	4602      	mov	r2, r0
 8011648:	460b      	mov	r3, r1
 801164a:	ec51 0b18 	vmov	r0, r1, d8
 801164e:	f7ee fe1b 	bl	8000288 <__aeabi_dsub>
 8011652:	2200      	movs	r2, #0
 8011654:	2300      	movs	r3, #0
 8011656:	4682      	mov	sl, r0
 8011658:	468b      	mov	fp, r1
 801165a:	f7ef fa35 	bl	8000ac8 <__aeabi_dcmpeq>
 801165e:	2800      	cmp	r0, #0
 8011660:	d0c1      	beq.n	80115e6 <_strtod_l+0x8de>
 8011662:	e611      	b.n	8011288 <_strtod_l+0x580>
 8011664:	fffffc02 	.word	0xfffffc02
 8011668:	7ff00000 	.word	0x7ff00000
 801166c:	39500000 	.word	0x39500000
 8011670:	000fffff 	.word	0x000fffff
 8011674:	7fefffff 	.word	0x7fefffff
 8011678:	080154c0 	.word	0x080154c0
 801167c:	4631      	mov	r1, r6
 801167e:	4628      	mov	r0, r5
 8011680:	f002 f824 	bl	80136cc <__ratio>
 8011684:	ec59 8b10 	vmov	r8, r9, d0
 8011688:	ee10 0a10 	vmov	r0, s0
 801168c:	2200      	movs	r2, #0
 801168e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011692:	4649      	mov	r1, r9
 8011694:	f7ef fa2c 	bl	8000af0 <__aeabi_dcmple>
 8011698:	2800      	cmp	r0, #0
 801169a:	d07a      	beq.n	8011792 <_strtod_l+0xa8a>
 801169c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d04a      	beq.n	8011738 <_strtod_l+0xa30>
 80116a2:	4b95      	ldr	r3, [pc, #596]	; (80118f8 <_strtod_l+0xbf0>)
 80116a4:	2200      	movs	r2, #0
 80116a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80116aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80118f8 <_strtod_l+0xbf0>
 80116ae:	f04f 0800 	mov.w	r8, #0
 80116b2:	4b92      	ldr	r3, [pc, #584]	; (80118fc <_strtod_l+0xbf4>)
 80116b4:	403b      	ands	r3, r7
 80116b6:	930d      	str	r3, [sp, #52]	; 0x34
 80116b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80116ba:	4b91      	ldr	r3, [pc, #580]	; (8011900 <_strtod_l+0xbf8>)
 80116bc:	429a      	cmp	r2, r3
 80116be:	f040 80b0 	bne.w	8011822 <_strtod_l+0xb1a>
 80116c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80116c6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80116ca:	ec4b ab10 	vmov	d0, sl, fp
 80116ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80116d2:	f001 ff23 	bl	801351c <__ulp>
 80116d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80116da:	ec53 2b10 	vmov	r2, r3, d0
 80116de:	f7ee ff8b 	bl	80005f8 <__aeabi_dmul>
 80116e2:	4652      	mov	r2, sl
 80116e4:	465b      	mov	r3, fp
 80116e6:	f7ee fdd1 	bl	800028c <__adddf3>
 80116ea:	460b      	mov	r3, r1
 80116ec:	4983      	ldr	r1, [pc, #524]	; (80118fc <_strtod_l+0xbf4>)
 80116ee:	4a85      	ldr	r2, [pc, #532]	; (8011904 <_strtod_l+0xbfc>)
 80116f0:	4019      	ands	r1, r3
 80116f2:	4291      	cmp	r1, r2
 80116f4:	4682      	mov	sl, r0
 80116f6:	d960      	bls.n	80117ba <_strtod_l+0xab2>
 80116f8:	ee18 3a90 	vmov	r3, s17
 80116fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011700:	4293      	cmp	r3, r2
 8011702:	d104      	bne.n	801170e <_strtod_l+0xa06>
 8011704:	ee18 3a10 	vmov	r3, s16
 8011708:	3301      	adds	r3, #1
 801170a:	f43f ad45 	beq.w	8011198 <_strtod_l+0x490>
 801170e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8011910 <_strtod_l+0xc08>
 8011712:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011716:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011718:	4620      	mov	r0, r4
 801171a:	f001 fbcd 	bl	8012eb8 <_Bfree>
 801171e:	9905      	ldr	r1, [sp, #20]
 8011720:	4620      	mov	r0, r4
 8011722:	f001 fbc9 	bl	8012eb8 <_Bfree>
 8011726:	4631      	mov	r1, r6
 8011728:	4620      	mov	r0, r4
 801172a:	f001 fbc5 	bl	8012eb8 <_Bfree>
 801172e:	4629      	mov	r1, r5
 8011730:	4620      	mov	r0, r4
 8011732:	f001 fbc1 	bl	8012eb8 <_Bfree>
 8011736:	e61a      	b.n	801136e <_strtod_l+0x666>
 8011738:	f1ba 0f00 	cmp.w	sl, #0
 801173c:	d11b      	bne.n	8011776 <_strtod_l+0xa6e>
 801173e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011742:	b9f3      	cbnz	r3, 8011782 <_strtod_l+0xa7a>
 8011744:	4b6c      	ldr	r3, [pc, #432]	; (80118f8 <_strtod_l+0xbf0>)
 8011746:	2200      	movs	r2, #0
 8011748:	4640      	mov	r0, r8
 801174a:	4649      	mov	r1, r9
 801174c:	f7ef f9c6 	bl	8000adc <__aeabi_dcmplt>
 8011750:	b9d0      	cbnz	r0, 8011788 <_strtod_l+0xa80>
 8011752:	4640      	mov	r0, r8
 8011754:	4649      	mov	r1, r9
 8011756:	4b6c      	ldr	r3, [pc, #432]	; (8011908 <_strtod_l+0xc00>)
 8011758:	2200      	movs	r2, #0
 801175a:	f7ee ff4d 	bl	80005f8 <__aeabi_dmul>
 801175e:	4680      	mov	r8, r0
 8011760:	4689      	mov	r9, r1
 8011762:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011766:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801176a:	9315      	str	r3, [sp, #84]	; 0x54
 801176c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011770:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011774:	e79d      	b.n	80116b2 <_strtod_l+0x9aa>
 8011776:	f1ba 0f01 	cmp.w	sl, #1
 801177a:	d102      	bne.n	8011782 <_strtod_l+0xa7a>
 801177c:	2f00      	cmp	r7, #0
 801177e:	f43f ad83 	beq.w	8011288 <_strtod_l+0x580>
 8011782:	4b62      	ldr	r3, [pc, #392]	; (801190c <_strtod_l+0xc04>)
 8011784:	2200      	movs	r2, #0
 8011786:	e78e      	b.n	80116a6 <_strtod_l+0x99e>
 8011788:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8011908 <_strtod_l+0xc00>
 801178c:	f04f 0800 	mov.w	r8, #0
 8011790:	e7e7      	b.n	8011762 <_strtod_l+0xa5a>
 8011792:	4b5d      	ldr	r3, [pc, #372]	; (8011908 <_strtod_l+0xc00>)
 8011794:	4640      	mov	r0, r8
 8011796:	4649      	mov	r1, r9
 8011798:	2200      	movs	r2, #0
 801179a:	f7ee ff2d 	bl	80005f8 <__aeabi_dmul>
 801179e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117a0:	4680      	mov	r8, r0
 80117a2:	4689      	mov	r9, r1
 80117a4:	b933      	cbnz	r3, 80117b4 <_strtod_l+0xaac>
 80117a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80117aa:	900e      	str	r0, [sp, #56]	; 0x38
 80117ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80117ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80117b2:	e7dd      	b.n	8011770 <_strtod_l+0xa68>
 80117b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80117b8:	e7f9      	b.n	80117ae <_strtod_l+0xaa6>
 80117ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80117be:	9b04      	ldr	r3, [sp, #16]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d1a8      	bne.n	8011716 <_strtod_l+0xa0e>
 80117c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80117c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80117ca:	0d1b      	lsrs	r3, r3, #20
 80117cc:	051b      	lsls	r3, r3, #20
 80117ce:	429a      	cmp	r2, r3
 80117d0:	d1a1      	bne.n	8011716 <_strtod_l+0xa0e>
 80117d2:	4640      	mov	r0, r8
 80117d4:	4649      	mov	r1, r9
 80117d6:	f7ef fa6f 	bl	8000cb8 <__aeabi_d2lz>
 80117da:	f7ee fedf 	bl	800059c <__aeabi_l2d>
 80117de:	4602      	mov	r2, r0
 80117e0:	460b      	mov	r3, r1
 80117e2:	4640      	mov	r0, r8
 80117e4:	4649      	mov	r1, r9
 80117e6:	f7ee fd4f 	bl	8000288 <__aeabi_dsub>
 80117ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80117ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80117f0:	ea43 030a 	orr.w	r3, r3, sl
 80117f4:	4313      	orrs	r3, r2
 80117f6:	4680      	mov	r8, r0
 80117f8:	4689      	mov	r9, r1
 80117fa:	d055      	beq.n	80118a8 <_strtod_l+0xba0>
 80117fc:	a336      	add	r3, pc, #216	; (adr r3, 80118d8 <_strtod_l+0xbd0>)
 80117fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011802:	f7ef f96b 	bl	8000adc <__aeabi_dcmplt>
 8011806:	2800      	cmp	r0, #0
 8011808:	f47f acd0 	bne.w	80111ac <_strtod_l+0x4a4>
 801180c:	a334      	add	r3, pc, #208	; (adr r3, 80118e0 <_strtod_l+0xbd8>)
 801180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011812:	4640      	mov	r0, r8
 8011814:	4649      	mov	r1, r9
 8011816:	f7ef f97f 	bl	8000b18 <__aeabi_dcmpgt>
 801181a:	2800      	cmp	r0, #0
 801181c:	f43f af7b 	beq.w	8011716 <_strtod_l+0xa0e>
 8011820:	e4c4      	b.n	80111ac <_strtod_l+0x4a4>
 8011822:	9b04      	ldr	r3, [sp, #16]
 8011824:	b333      	cbz	r3, 8011874 <_strtod_l+0xb6c>
 8011826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011828:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801182c:	d822      	bhi.n	8011874 <_strtod_l+0xb6c>
 801182e:	a32e      	add	r3, pc, #184	; (adr r3, 80118e8 <_strtod_l+0xbe0>)
 8011830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011834:	4640      	mov	r0, r8
 8011836:	4649      	mov	r1, r9
 8011838:	f7ef f95a 	bl	8000af0 <__aeabi_dcmple>
 801183c:	b1a0      	cbz	r0, 8011868 <_strtod_l+0xb60>
 801183e:	4649      	mov	r1, r9
 8011840:	4640      	mov	r0, r8
 8011842:	f7ef f9b1 	bl	8000ba8 <__aeabi_d2uiz>
 8011846:	2801      	cmp	r0, #1
 8011848:	bf38      	it	cc
 801184a:	2001      	movcc	r0, #1
 801184c:	f7ee fe5a 	bl	8000504 <__aeabi_ui2d>
 8011850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011852:	4680      	mov	r8, r0
 8011854:	4689      	mov	r9, r1
 8011856:	bb23      	cbnz	r3, 80118a2 <_strtod_l+0xb9a>
 8011858:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801185c:	9010      	str	r0, [sp, #64]	; 0x40
 801185e:	9311      	str	r3, [sp, #68]	; 0x44
 8011860:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011864:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801186a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801186c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011870:	1a9b      	subs	r3, r3, r2
 8011872:	9309      	str	r3, [sp, #36]	; 0x24
 8011874:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011878:	eeb0 0a48 	vmov.f32	s0, s16
 801187c:	eef0 0a68 	vmov.f32	s1, s17
 8011880:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011884:	f001 fe4a 	bl	801351c <__ulp>
 8011888:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801188c:	ec53 2b10 	vmov	r2, r3, d0
 8011890:	f7ee feb2 	bl	80005f8 <__aeabi_dmul>
 8011894:	ec53 2b18 	vmov	r2, r3, d8
 8011898:	f7ee fcf8 	bl	800028c <__adddf3>
 801189c:	4682      	mov	sl, r0
 801189e:	468b      	mov	fp, r1
 80118a0:	e78d      	b.n	80117be <_strtod_l+0xab6>
 80118a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80118a6:	e7db      	b.n	8011860 <_strtod_l+0xb58>
 80118a8:	a311      	add	r3, pc, #68	; (adr r3, 80118f0 <_strtod_l+0xbe8>)
 80118aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ae:	f7ef f915 	bl	8000adc <__aeabi_dcmplt>
 80118b2:	e7b2      	b.n	801181a <_strtod_l+0xb12>
 80118b4:	2300      	movs	r3, #0
 80118b6:	930a      	str	r3, [sp, #40]	; 0x28
 80118b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80118ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80118bc:	6013      	str	r3, [r2, #0]
 80118be:	f7ff ba6b 	b.w	8010d98 <_strtod_l+0x90>
 80118c2:	2a65      	cmp	r2, #101	; 0x65
 80118c4:	f43f ab5f 	beq.w	8010f86 <_strtod_l+0x27e>
 80118c8:	2a45      	cmp	r2, #69	; 0x45
 80118ca:	f43f ab5c 	beq.w	8010f86 <_strtod_l+0x27e>
 80118ce:	2301      	movs	r3, #1
 80118d0:	f7ff bb94 	b.w	8010ffc <_strtod_l+0x2f4>
 80118d4:	f3af 8000 	nop.w
 80118d8:	94a03595 	.word	0x94a03595
 80118dc:	3fdfffff 	.word	0x3fdfffff
 80118e0:	35afe535 	.word	0x35afe535
 80118e4:	3fe00000 	.word	0x3fe00000
 80118e8:	ffc00000 	.word	0xffc00000
 80118ec:	41dfffff 	.word	0x41dfffff
 80118f0:	94a03595 	.word	0x94a03595
 80118f4:	3fcfffff 	.word	0x3fcfffff
 80118f8:	3ff00000 	.word	0x3ff00000
 80118fc:	7ff00000 	.word	0x7ff00000
 8011900:	7fe00000 	.word	0x7fe00000
 8011904:	7c9fffff 	.word	0x7c9fffff
 8011908:	3fe00000 	.word	0x3fe00000
 801190c:	bff00000 	.word	0xbff00000
 8011910:	7fefffff 	.word	0x7fefffff

08011914 <_strtod_r>:
 8011914:	4b01      	ldr	r3, [pc, #4]	; (801191c <_strtod_r+0x8>)
 8011916:	f7ff b9f7 	b.w	8010d08 <_strtod_l>
 801191a:	bf00      	nop
 801191c:	2000007c 	.word	0x2000007c

08011920 <_strtol_l.constprop.0>:
 8011920:	2b01      	cmp	r3, #1
 8011922:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011926:	d001      	beq.n	801192c <_strtol_l.constprop.0+0xc>
 8011928:	2b24      	cmp	r3, #36	; 0x24
 801192a:	d906      	bls.n	801193a <_strtol_l.constprop.0+0x1a>
 801192c:	f7fe faee 	bl	800ff0c <__errno>
 8011930:	2316      	movs	r3, #22
 8011932:	6003      	str	r3, [r0, #0]
 8011934:	2000      	movs	r0, #0
 8011936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801193a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011a20 <_strtol_l.constprop.0+0x100>
 801193e:	460d      	mov	r5, r1
 8011940:	462e      	mov	r6, r5
 8011942:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011946:	f814 700c 	ldrb.w	r7, [r4, ip]
 801194a:	f017 0708 	ands.w	r7, r7, #8
 801194e:	d1f7      	bne.n	8011940 <_strtol_l.constprop.0+0x20>
 8011950:	2c2d      	cmp	r4, #45	; 0x2d
 8011952:	d132      	bne.n	80119ba <_strtol_l.constprop.0+0x9a>
 8011954:	782c      	ldrb	r4, [r5, #0]
 8011956:	2701      	movs	r7, #1
 8011958:	1cb5      	adds	r5, r6, #2
 801195a:	2b00      	cmp	r3, #0
 801195c:	d05b      	beq.n	8011a16 <_strtol_l.constprop.0+0xf6>
 801195e:	2b10      	cmp	r3, #16
 8011960:	d109      	bne.n	8011976 <_strtol_l.constprop.0+0x56>
 8011962:	2c30      	cmp	r4, #48	; 0x30
 8011964:	d107      	bne.n	8011976 <_strtol_l.constprop.0+0x56>
 8011966:	782c      	ldrb	r4, [r5, #0]
 8011968:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801196c:	2c58      	cmp	r4, #88	; 0x58
 801196e:	d14d      	bne.n	8011a0c <_strtol_l.constprop.0+0xec>
 8011970:	786c      	ldrb	r4, [r5, #1]
 8011972:	2310      	movs	r3, #16
 8011974:	3502      	adds	r5, #2
 8011976:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801197a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801197e:	f04f 0c00 	mov.w	ip, #0
 8011982:	fbb8 f9f3 	udiv	r9, r8, r3
 8011986:	4666      	mov	r6, ip
 8011988:	fb03 8a19 	mls	sl, r3, r9, r8
 801198c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011990:	f1be 0f09 	cmp.w	lr, #9
 8011994:	d816      	bhi.n	80119c4 <_strtol_l.constprop.0+0xa4>
 8011996:	4674      	mov	r4, lr
 8011998:	42a3      	cmp	r3, r4
 801199a:	dd24      	ble.n	80119e6 <_strtol_l.constprop.0+0xc6>
 801199c:	f1bc 0f00 	cmp.w	ip, #0
 80119a0:	db1e      	blt.n	80119e0 <_strtol_l.constprop.0+0xc0>
 80119a2:	45b1      	cmp	r9, r6
 80119a4:	d31c      	bcc.n	80119e0 <_strtol_l.constprop.0+0xc0>
 80119a6:	d101      	bne.n	80119ac <_strtol_l.constprop.0+0x8c>
 80119a8:	45a2      	cmp	sl, r4
 80119aa:	db19      	blt.n	80119e0 <_strtol_l.constprop.0+0xc0>
 80119ac:	fb06 4603 	mla	r6, r6, r3, r4
 80119b0:	f04f 0c01 	mov.w	ip, #1
 80119b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80119b8:	e7e8      	b.n	801198c <_strtol_l.constprop.0+0x6c>
 80119ba:	2c2b      	cmp	r4, #43	; 0x2b
 80119bc:	bf04      	itt	eq
 80119be:	782c      	ldrbeq	r4, [r5, #0]
 80119c0:	1cb5      	addeq	r5, r6, #2
 80119c2:	e7ca      	b.n	801195a <_strtol_l.constprop.0+0x3a>
 80119c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80119c8:	f1be 0f19 	cmp.w	lr, #25
 80119cc:	d801      	bhi.n	80119d2 <_strtol_l.constprop.0+0xb2>
 80119ce:	3c37      	subs	r4, #55	; 0x37
 80119d0:	e7e2      	b.n	8011998 <_strtol_l.constprop.0+0x78>
 80119d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80119d6:	f1be 0f19 	cmp.w	lr, #25
 80119da:	d804      	bhi.n	80119e6 <_strtol_l.constprop.0+0xc6>
 80119dc:	3c57      	subs	r4, #87	; 0x57
 80119de:	e7db      	b.n	8011998 <_strtol_l.constprop.0+0x78>
 80119e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80119e4:	e7e6      	b.n	80119b4 <_strtol_l.constprop.0+0x94>
 80119e6:	f1bc 0f00 	cmp.w	ip, #0
 80119ea:	da05      	bge.n	80119f8 <_strtol_l.constprop.0+0xd8>
 80119ec:	2322      	movs	r3, #34	; 0x22
 80119ee:	6003      	str	r3, [r0, #0]
 80119f0:	4646      	mov	r6, r8
 80119f2:	b942      	cbnz	r2, 8011a06 <_strtol_l.constprop.0+0xe6>
 80119f4:	4630      	mov	r0, r6
 80119f6:	e79e      	b.n	8011936 <_strtol_l.constprop.0+0x16>
 80119f8:	b107      	cbz	r7, 80119fc <_strtol_l.constprop.0+0xdc>
 80119fa:	4276      	negs	r6, r6
 80119fc:	2a00      	cmp	r2, #0
 80119fe:	d0f9      	beq.n	80119f4 <_strtol_l.constprop.0+0xd4>
 8011a00:	f1bc 0f00 	cmp.w	ip, #0
 8011a04:	d000      	beq.n	8011a08 <_strtol_l.constprop.0+0xe8>
 8011a06:	1e69      	subs	r1, r5, #1
 8011a08:	6011      	str	r1, [r2, #0]
 8011a0a:	e7f3      	b.n	80119f4 <_strtol_l.constprop.0+0xd4>
 8011a0c:	2430      	movs	r4, #48	; 0x30
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d1b1      	bne.n	8011976 <_strtol_l.constprop.0+0x56>
 8011a12:	2308      	movs	r3, #8
 8011a14:	e7af      	b.n	8011976 <_strtol_l.constprop.0+0x56>
 8011a16:	2c30      	cmp	r4, #48	; 0x30
 8011a18:	d0a5      	beq.n	8011966 <_strtol_l.constprop.0+0x46>
 8011a1a:	230a      	movs	r3, #10
 8011a1c:	e7ab      	b.n	8011976 <_strtol_l.constprop.0+0x56>
 8011a1e:	bf00      	nop
 8011a20:	080154e9 	.word	0x080154e9

08011a24 <_strtol_r>:
 8011a24:	f7ff bf7c 	b.w	8011920 <_strtol_l.constprop.0>

08011a28 <quorem>:
 8011a28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a2c:	6903      	ldr	r3, [r0, #16]
 8011a2e:	690c      	ldr	r4, [r1, #16]
 8011a30:	42a3      	cmp	r3, r4
 8011a32:	4607      	mov	r7, r0
 8011a34:	f2c0 8081 	blt.w	8011b3a <quorem+0x112>
 8011a38:	3c01      	subs	r4, #1
 8011a3a:	f101 0814 	add.w	r8, r1, #20
 8011a3e:	f100 0514 	add.w	r5, r0, #20
 8011a42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a46:	9301      	str	r3, [sp, #4]
 8011a48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011a4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a50:	3301      	adds	r3, #1
 8011a52:	429a      	cmp	r2, r3
 8011a54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011a58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011a5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011a60:	d331      	bcc.n	8011ac6 <quorem+0x9e>
 8011a62:	f04f 0e00 	mov.w	lr, #0
 8011a66:	4640      	mov	r0, r8
 8011a68:	46ac      	mov	ip, r5
 8011a6a:	46f2      	mov	sl, lr
 8011a6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011a70:	b293      	uxth	r3, r2
 8011a72:	fb06 e303 	mla	r3, r6, r3, lr
 8011a76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011a7a:	b29b      	uxth	r3, r3
 8011a7c:	ebaa 0303 	sub.w	r3, sl, r3
 8011a80:	f8dc a000 	ldr.w	sl, [ip]
 8011a84:	0c12      	lsrs	r2, r2, #16
 8011a86:	fa13 f38a 	uxtah	r3, r3, sl
 8011a8a:	fb06 e202 	mla	r2, r6, r2, lr
 8011a8e:	9300      	str	r3, [sp, #0]
 8011a90:	9b00      	ldr	r3, [sp, #0]
 8011a92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011a96:	b292      	uxth	r2, r2
 8011a98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011a9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011aa0:	f8bd 3000 	ldrh.w	r3, [sp]
 8011aa4:	4581      	cmp	r9, r0
 8011aa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011aaa:	f84c 3b04 	str.w	r3, [ip], #4
 8011aae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011ab2:	d2db      	bcs.n	8011a6c <quorem+0x44>
 8011ab4:	f855 300b 	ldr.w	r3, [r5, fp]
 8011ab8:	b92b      	cbnz	r3, 8011ac6 <quorem+0x9e>
 8011aba:	9b01      	ldr	r3, [sp, #4]
 8011abc:	3b04      	subs	r3, #4
 8011abe:	429d      	cmp	r5, r3
 8011ac0:	461a      	mov	r2, r3
 8011ac2:	d32e      	bcc.n	8011b22 <quorem+0xfa>
 8011ac4:	613c      	str	r4, [r7, #16]
 8011ac6:	4638      	mov	r0, r7
 8011ac8:	f001 fc82 	bl	80133d0 <__mcmp>
 8011acc:	2800      	cmp	r0, #0
 8011ace:	db24      	blt.n	8011b1a <quorem+0xf2>
 8011ad0:	3601      	adds	r6, #1
 8011ad2:	4628      	mov	r0, r5
 8011ad4:	f04f 0c00 	mov.w	ip, #0
 8011ad8:	f858 2b04 	ldr.w	r2, [r8], #4
 8011adc:	f8d0 e000 	ldr.w	lr, [r0]
 8011ae0:	b293      	uxth	r3, r2
 8011ae2:	ebac 0303 	sub.w	r3, ip, r3
 8011ae6:	0c12      	lsrs	r2, r2, #16
 8011ae8:	fa13 f38e 	uxtah	r3, r3, lr
 8011aec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011af0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011afa:	45c1      	cmp	r9, r8
 8011afc:	f840 3b04 	str.w	r3, [r0], #4
 8011b00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011b04:	d2e8      	bcs.n	8011ad8 <quorem+0xb0>
 8011b06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011b0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011b0e:	b922      	cbnz	r2, 8011b1a <quorem+0xf2>
 8011b10:	3b04      	subs	r3, #4
 8011b12:	429d      	cmp	r5, r3
 8011b14:	461a      	mov	r2, r3
 8011b16:	d30a      	bcc.n	8011b2e <quorem+0x106>
 8011b18:	613c      	str	r4, [r7, #16]
 8011b1a:	4630      	mov	r0, r6
 8011b1c:	b003      	add	sp, #12
 8011b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b22:	6812      	ldr	r2, [r2, #0]
 8011b24:	3b04      	subs	r3, #4
 8011b26:	2a00      	cmp	r2, #0
 8011b28:	d1cc      	bne.n	8011ac4 <quorem+0x9c>
 8011b2a:	3c01      	subs	r4, #1
 8011b2c:	e7c7      	b.n	8011abe <quorem+0x96>
 8011b2e:	6812      	ldr	r2, [r2, #0]
 8011b30:	3b04      	subs	r3, #4
 8011b32:	2a00      	cmp	r2, #0
 8011b34:	d1f0      	bne.n	8011b18 <quorem+0xf0>
 8011b36:	3c01      	subs	r4, #1
 8011b38:	e7eb      	b.n	8011b12 <quorem+0xea>
 8011b3a:	2000      	movs	r0, #0
 8011b3c:	e7ee      	b.n	8011b1c <quorem+0xf4>
	...

08011b40 <_dtoa_r>:
 8011b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b44:	ed2d 8b04 	vpush	{d8-d9}
 8011b48:	ec57 6b10 	vmov	r6, r7, d0
 8011b4c:	b093      	sub	sp, #76	; 0x4c
 8011b4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011b50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011b54:	9106      	str	r1, [sp, #24]
 8011b56:	ee10 aa10 	vmov	sl, s0
 8011b5a:	4604      	mov	r4, r0
 8011b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8011b5e:	930c      	str	r3, [sp, #48]	; 0x30
 8011b60:	46bb      	mov	fp, r7
 8011b62:	b975      	cbnz	r5, 8011b82 <_dtoa_r+0x42>
 8011b64:	2010      	movs	r0, #16
 8011b66:	f001 f94d 	bl	8012e04 <malloc>
 8011b6a:	4602      	mov	r2, r0
 8011b6c:	6260      	str	r0, [r4, #36]	; 0x24
 8011b6e:	b920      	cbnz	r0, 8011b7a <_dtoa_r+0x3a>
 8011b70:	4ba7      	ldr	r3, [pc, #668]	; (8011e10 <_dtoa_r+0x2d0>)
 8011b72:	21ea      	movs	r1, #234	; 0xea
 8011b74:	48a7      	ldr	r0, [pc, #668]	; (8011e14 <_dtoa_r+0x2d4>)
 8011b76:	f002 f8ad 	bl	8013cd4 <__assert_func>
 8011b7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011b7e:	6005      	str	r5, [r0, #0]
 8011b80:	60c5      	str	r5, [r0, #12]
 8011b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b84:	6819      	ldr	r1, [r3, #0]
 8011b86:	b151      	cbz	r1, 8011b9e <_dtoa_r+0x5e>
 8011b88:	685a      	ldr	r2, [r3, #4]
 8011b8a:	604a      	str	r2, [r1, #4]
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	4093      	lsls	r3, r2
 8011b90:	608b      	str	r3, [r1, #8]
 8011b92:	4620      	mov	r0, r4
 8011b94:	f001 f990 	bl	8012eb8 <_Bfree>
 8011b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	601a      	str	r2, [r3, #0]
 8011b9e:	1e3b      	subs	r3, r7, #0
 8011ba0:	bfaa      	itet	ge
 8011ba2:	2300      	movge	r3, #0
 8011ba4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011ba8:	f8c8 3000 	strge.w	r3, [r8]
 8011bac:	4b9a      	ldr	r3, [pc, #616]	; (8011e18 <_dtoa_r+0x2d8>)
 8011bae:	bfbc      	itt	lt
 8011bb0:	2201      	movlt	r2, #1
 8011bb2:	f8c8 2000 	strlt.w	r2, [r8]
 8011bb6:	ea33 030b 	bics.w	r3, r3, fp
 8011bba:	d11b      	bne.n	8011bf4 <_dtoa_r+0xb4>
 8011bbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bbe:	f242 730f 	movw	r3, #9999	; 0x270f
 8011bc2:	6013      	str	r3, [r2, #0]
 8011bc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011bc8:	4333      	orrs	r3, r6
 8011bca:	f000 8592 	beq.w	80126f2 <_dtoa_r+0xbb2>
 8011bce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011bd0:	b963      	cbnz	r3, 8011bec <_dtoa_r+0xac>
 8011bd2:	4b92      	ldr	r3, [pc, #584]	; (8011e1c <_dtoa_r+0x2dc>)
 8011bd4:	e022      	b.n	8011c1c <_dtoa_r+0xdc>
 8011bd6:	4b92      	ldr	r3, [pc, #584]	; (8011e20 <_dtoa_r+0x2e0>)
 8011bd8:	9301      	str	r3, [sp, #4]
 8011bda:	3308      	adds	r3, #8
 8011bdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011bde:	6013      	str	r3, [r2, #0]
 8011be0:	9801      	ldr	r0, [sp, #4]
 8011be2:	b013      	add	sp, #76	; 0x4c
 8011be4:	ecbd 8b04 	vpop	{d8-d9}
 8011be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bec:	4b8b      	ldr	r3, [pc, #556]	; (8011e1c <_dtoa_r+0x2dc>)
 8011bee:	9301      	str	r3, [sp, #4]
 8011bf0:	3303      	adds	r3, #3
 8011bf2:	e7f3      	b.n	8011bdc <_dtoa_r+0x9c>
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	4650      	mov	r0, sl
 8011bfa:	4659      	mov	r1, fp
 8011bfc:	f7ee ff64 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c00:	ec4b ab19 	vmov	d9, sl, fp
 8011c04:	4680      	mov	r8, r0
 8011c06:	b158      	cbz	r0, 8011c20 <_dtoa_r+0xe0>
 8011c08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	6013      	str	r3, [r2, #0]
 8011c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	f000 856b 	beq.w	80126ec <_dtoa_r+0xbac>
 8011c16:	4883      	ldr	r0, [pc, #524]	; (8011e24 <_dtoa_r+0x2e4>)
 8011c18:	6018      	str	r0, [r3, #0]
 8011c1a:	1e43      	subs	r3, r0, #1
 8011c1c:	9301      	str	r3, [sp, #4]
 8011c1e:	e7df      	b.n	8011be0 <_dtoa_r+0xa0>
 8011c20:	ec4b ab10 	vmov	d0, sl, fp
 8011c24:	aa10      	add	r2, sp, #64	; 0x40
 8011c26:	a911      	add	r1, sp, #68	; 0x44
 8011c28:	4620      	mov	r0, r4
 8011c2a:	f001 fcf3 	bl	8013614 <__d2b>
 8011c2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011c32:	ee08 0a10 	vmov	s16, r0
 8011c36:	2d00      	cmp	r5, #0
 8011c38:	f000 8084 	beq.w	8011d44 <_dtoa_r+0x204>
 8011c3c:	ee19 3a90 	vmov	r3, s19
 8011c40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011c44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011c48:	4656      	mov	r6, sl
 8011c4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011c4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011c52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011c56:	4b74      	ldr	r3, [pc, #464]	; (8011e28 <_dtoa_r+0x2e8>)
 8011c58:	2200      	movs	r2, #0
 8011c5a:	4630      	mov	r0, r6
 8011c5c:	4639      	mov	r1, r7
 8011c5e:	f7ee fb13 	bl	8000288 <__aeabi_dsub>
 8011c62:	a365      	add	r3, pc, #404	; (adr r3, 8011df8 <_dtoa_r+0x2b8>)
 8011c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c68:	f7ee fcc6 	bl	80005f8 <__aeabi_dmul>
 8011c6c:	a364      	add	r3, pc, #400	; (adr r3, 8011e00 <_dtoa_r+0x2c0>)
 8011c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c72:	f7ee fb0b 	bl	800028c <__adddf3>
 8011c76:	4606      	mov	r6, r0
 8011c78:	4628      	mov	r0, r5
 8011c7a:	460f      	mov	r7, r1
 8011c7c:	f7ee fc52 	bl	8000524 <__aeabi_i2d>
 8011c80:	a361      	add	r3, pc, #388	; (adr r3, 8011e08 <_dtoa_r+0x2c8>)
 8011c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c86:	f7ee fcb7 	bl	80005f8 <__aeabi_dmul>
 8011c8a:	4602      	mov	r2, r0
 8011c8c:	460b      	mov	r3, r1
 8011c8e:	4630      	mov	r0, r6
 8011c90:	4639      	mov	r1, r7
 8011c92:	f7ee fafb 	bl	800028c <__adddf3>
 8011c96:	4606      	mov	r6, r0
 8011c98:	460f      	mov	r7, r1
 8011c9a:	f7ee ff5d 	bl	8000b58 <__aeabi_d2iz>
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	9000      	str	r0, [sp, #0]
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	4630      	mov	r0, r6
 8011ca6:	4639      	mov	r1, r7
 8011ca8:	f7ee ff18 	bl	8000adc <__aeabi_dcmplt>
 8011cac:	b150      	cbz	r0, 8011cc4 <_dtoa_r+0x184>
 8011cae:	9800      	ldr	r0, [sp, #0]
 8011cb0:	f7ee fc38 	bl	8000524 <__aeabi_i2d>
 8011cb4:	4632      	mov	r2, r6
 8011cb6:	463b      	mov	r3, r7
 8011cb8:	f7ee ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 8011cbc:	b910      	cbnz	r0, 8011cc4 <_dtoa_r+0x184>
 8011cbe:	9b00      	ldr	r3, [sp, #0]
 8011cc0:	3b01      	subs	r3, #1
 8011cc2:	9300      	str	r3, [sp, #0]
 8011cc4:	9b00      	ldr	r3, [sp, #0]
 8011cc6:	2b16      	cmp	r3, #22
 8011cc8:	d85a      	bhi.n	8011d80 <_dtoa_r+0x240>
 8011cca:	9a00      	ldr	r2, [sp, #0]
 8011ccc:	4b57      	ldr	r3, [pc, #348]	; (8011e2c <_dtoa_r+0x2ec>)
 8011cce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd6:	ec51 0b19 	vmov	r0, r1, d9
 8011cda:	f7ee feff 	bl	8000adc <__aeabi_dcmplt>
 8011cde:	2800      	cmp	r0, #0
 8011ce0:	d050      	beq.n	8011d84 <_dtoa_r+0x244>
 8011ce2:	9b00      	ldr	r3, [sp, #0]
 8011ce4:	3b01      	subs	r3, #1
 8011ce6:	9300      	str	r3, [sp, #0]
 8011ce8:	2300      	movs	r3, #0
 8011cea:	930b      	str	r3, [sp, #44]	; 0x2c
 8011cec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011cee:	1b5d      	subs	r5, r3, r5
 8011cf0:	1e6b      	subs	r3, r5, #1
 8011cf2:	9305      	str	r3, [sp, #20]
 8011cf4:	bf45      	ittet	mi
 8011cf6:	f1c5 0301 	rsbmi	r3, r5, #1
 8011cfa:	9304      	strmi	r3, [sp, #16]
 8011cfc:	2300      	movpl	r3, #0
 8011cfe:	2300      	movmi	r3, #0
 8011d00:	bf4c      	ite	mi
 8011d02:	9305      	strmi	r3, [sp, #20]
 8011d04:	9304      	strpl	r3, [sp, #16]
 8011d06:	9b00      	ldr	r3, [sp, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	db3d      	blt.n	8011d88 <_dtoa_r+0x248>
 8011d0c:	9b05      	ldr	r3, [sp, #20]
 8011d0e:	9a00      	ldr	r2, [sp, #0]
 8011d10:	920a      	str	r2, [sp, #40]	; 0x28
 8011d12:	4413      	add	r3, r2
 8011d14:	9305      	str	r3, [sp, #20]
 8011d16:	2300      	movs	r3, #0
 8011d18:	9307      	str	r3, [sp, #28]
 8011d1a:	9b06      	ldr	r3, [sp, #24]
 8011d1c:	2b09      	cmp	r3, #9
 8011d1e:	f200 8089 	bhi.w	8011e34 <_dtoa_r+0x2f4>
 8011d22:	2b05      	cmp	r3, #5
 8011d24:	bfc4      	itt	gt
 8011d26:	3b04      	subgt	r3, #4
 8011d28:	9306      	strgt	r3, [sp, #24]
 8011d2a:	9b06      	ldr	r3, [sp, #24]
 8011d2c:	f1a3 0302 	sub.w	r3, r3, #2
 8011d30:	bfcc      	ite	gt
 8011d32:	2500      	movgt	r5, #0
 8011d34:	2501      	movle	r5, #1
 8011d36:	2b03      	cmp	r3, #3
 8011d38:	f200 8087 	bhi.w	8011e4a <_dtoa_r+0x30a>
 8011d3c:	e8df f003 	tbb	[pc, r3]
 8011d40:	59383a2d 	.word	0x59383a2d
 8011d44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011d48:	441d      	add	r5, r3
 8011d4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011d4e:	2b20      	cmp	r3, #32
 8011d50:	bfc1      	itttt	gt
 8011d52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011d56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011d5a:	fa0b f303 	lslgt.w	r3, fp, r3
 8011d5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011d62:	bfda      	itte	le
 8011d64:	f1c3 0320 	rsble	r3, r3, #32
 8011d68:	fa06 f003 	lslle.w	r0, r6, r3
 8011d6c:	4318      	orrgt	r0, r3
 8011d6e:	f7ee fbc9 	bl	8000504 <__aeabi_ui2d>
 8011d72:	2301      	movs	r3, #1
 8011d74:	4606      	mov	r6, r0
 8011d76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011d7a:	3d01      	subs	r5, #1
 8011d7c:	930e      	str	r3, [sp, #56]	; 0x38
 8011d7e:	e76a      	b.n	8011c56 <_dtoa_r+0x116>
 8011d80:	2301      	movs	r3, #1
 8011d82:	e7b2      	b.n	8011cea <_dtoa_r+0x1aa>
 8011d84:	900b      	str	r0, [sp, #44]	; 0x2c
 8011d86:	e7b1      	b.n	8011cec <_dtoa_r+0x1ac>
 8011d88:	9b04      	ldr	r3, [sp, #16]
 8011d8a:	9a00      	ldr	r2, [sp, #0]
 8011d8c:	1a9b      	subs	r3, r3, r2
 8011d8e:	9304      	str	r3, [sp, #16]
 8011d90:	4253      	negs	r3, r2
 8011d92:	9307      	str	r3, [sp, #28]
 8011d94:	2300      	movs	r3, #0
 8011d96:	930a      	str	r3, [sp, #40]	; 0x28
 8011d98:	e7bf      	b.n	8011d1a <_dtoa_r+0x1da>
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	9308      	str	r3, [sp, #32]
 8011d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	dc55      	bgt.n	8011e50 <_dtoa_r+0x310>
 8011da4:	2301      	movs	r3, #1
 8011da6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011daa:	461a      	mov	r2, r3
 8011dac:	9209      	str	r2, [sp, #36]	; 0x24
 8011dae:	e00c      	b.n	8011dca <_dtoa_r+0x28a>
 8011db0:	2301      	movs	r3, #1
 8011db2:	e7f3      	b.n	8011d9c <_dtoa_r+0x25c>
 8011db4:	2300      	movs	r3, #0
 8011db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011db8:	9308      	str	r3, [sp, #32]
 8011dba:	9b00      	ldr	r3, [sp, #0]
 8011dbc:	4413      	add	r3, r2
 8011dbe:	9302      	str	r3, [sp, #8]
 8011dc0:	3301      	adds	r3, #1
 8011dc2:	2b01      	cmp	r3, #1
 8011dc4:	9303      	str	r3, [sp, #12]
 8011dc6:	bfb8      	it	lt
 8011dc8:	2301      	movlt	r3, #1
 8011dca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011dcc:	2200      	movs	r2, #0
 8011dce:	6042      	str	r2, [r0, #4]
 8011dd0:	2204      	movs	r2, #4
 8011dd2:	f102 0614 	add.w	r6, r2, #20
 8011dd6:	429e      	cmp	r6, r3
 8011dd8:	6841      	ldr	r1, [r0, #4]
 8011dda:	d93d      	bls.n	8011e58 <_dtoa_r+0x318>
 8011ddc:	4620      	mov	r0, r4
 8011dde:	f001 f82b 	bl	8012e38 <_Balloc>
 8011de2:	9001      	str	r0, [sp, #4]
 8011de4:	2800      	cmp	r0, #0
 8011de6:	d13b      	bne.n	8011e60 <_dtoa_r+0x320>
 8011de8:	4b11      	ldr	r3, [pc, #68]	; (8011e30 <_dtoa_r+0x2f0>)
 8011dea:	4602      	mov	r2, r0
 8011dec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011df0:	e6c0      	b.n	8011b74 <_dtoa_r+0x34>
 8011df2:	2301      	movs	r3, #1
 8011df4:	e7df      	b.n	8011db6 <_dtoa_r+0x276>
 8011df6:	bf00      	nop
 8011df8:	636f4361 	.word	0x636f4361
 8011dfc:	3fd287a7 	.word	0x3fd287a7
 8011e00:	8b60c8b3 	.word	0x8b60c8b3
 8011e04:	3fc68a28 	.word	0x3fc68a28
 8011e08:	509f79fb 	.word	0x509f79fb
 8011e0c:	3fd34413 	.word	0x3fd34413
 8011e10:	080155f6 	.word	0x080155f6
 8011e14:	0801560d 	.word	0x0801560d
 8011e18:	7ff00000 	.word	0x7ff00000
 8011e1c:	080155f2 	.word	0x080155f2
 8011e20:	080155e9 	.word	0x080155e9
 8011e24:	0801546d 	.word	0x0801546d
 8011e28:	3ff80000 	.word	0x3ff80000
 8011e2c:	08015778 	.word	0x08015778
 8011e30:	08015668 	.word	0x08015668
 8011e34:	2501      	movs	r5, #1
 8011e36:	2300      	movs	r3, #0
 8011e38:	9306      	str	r3, [sp, #24]
 8011e3a:	9508      	str	r5, [sp, #32]
 8011e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011e44:	2200      	movs	r2, #0
 8011e46:	2312      	movs	r3, #18
 8011e48:	e7b0      	b.n	8011dac <_dtoa_r+0x26c>
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	9308      	str	r3, [sp, #32]
 8011e4e:	e7f5      	b.n	8011e3c <_dtoa_r+0x2fc>
 8011e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011e56:	e7b8      	b.n	8011dca <_dtoa_r+0x28a>
 8011e58:	3101      	adds	r1, #1
 8011e5a:	6041      	str	r1, [r0, #4]
 8011e5c:	0052      	lsls	r2, r2, #1
 8011e5e:	e7b8      	b.n	8011dd2 <_dtoa_r+0x292>
 8011e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e62:	9a01      	ldr	r2, [sp, #4]
 8011e64:	601a      	str	r2, [r3, #0]
 8011e66:	9b03      	ldr	r3, [sp, #12]
 8011e68:	2b0e      	cmp	r3, #14
 8011e6a:	f200 809d 	bhi.w	8011fa8 <_dtoa_r+0x468>
 8011e6e:	2d00      	cmp	r5, #0
 8011e70:	f000 809a 	beq.w	8011fa8 <_dtoa_r+0x468>
 8011e74:	9b00      	ldr	r3, [sp, #0]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	dd32      	ble.n	8011ee0 <_dtoa_r+0x3a0>
 8011e7a:	4ab7      	ldr	r2, [pc, #732]	; (8012158 <_dtoa_r+0x618>)
 8011e7c:	f003 030f 	and.w	r3, r3, #15
 8011e80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011e84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011e88:	9b00      	ldr	r3, [sp, #0]
 8011e8a:	05d8      	lsls	r0, r3, #23
 8011e8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011e90:	d516      	bpl.n	8011ec0 <_dtoa_r+0x380>
 8011e92:	4bb2      	ldr	r3, [pc, #712]	; (801215c <_dtoa_r+0x61c>)
 8011e94:	ec51 0b19 	vmov	r0, r1, d9
 8011e98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011e9c:	f7ee fcd6 	bl	800084c <__aeabi_ddiv>
 8011ea0:	f007 070f 	and.w	r7, r7, #15
 8011ea4:	4682      	mov	sl, r0
 8011ea6:	468b      	mov	fp, r1
 8011ea8:	2503      	movs	r5, #3
 8011eaa:	4eac      	ldr	r6, [pc, #688]	; (801215c <_dtoa_r+0x61c>)
 8011eac:	b957      	cbnz	r7, 8011ec4 <_dtoa_r+0x384>
 8011eae:	4642      	mov	r2, r8
 8011eb0:	464b      	mov	r3, r9
 8011eb2:	4650      	mov	r0, sl
 8011eb4:	4659      	mov	r1, fp
 8011eb6:	f7ee fcc9 	bl	800084c <__aeabi_ddiv>
 8011eba:	4682      	mov	sl, r0
 8011ebc:	468b      	mov	fp, r1
 8011ebe:	e028      	b.n	8011f12 <_dtoa_r+0x3d2>
 8011ec0:	2502      	movs	r5, #2
 8011ec2:	e7f2      	b.n	8011eaa <_dtoa_r+0x36a>
 8011ec4:	07f9      	lsls	r1, r7, #31
 8011ec6:	d508      	bpl.n	8011eda <_dtoa_r+0x39a>
 8011ec8:	4640      	mov	r0, r8
 8011eca:	4649      	mov	r1, r9
 8011ecc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011ed0:	f7ee fb92 	bl	80005f8 <__aeabi_dmul>
 8011ed4:	3501      	adds	r5, #1
 8011ed6:	4680      	mov	r8, r0
 8011ed8:	4689      	mov	r9, r1
 8011eda:	107f      	asrs	r7, r7, #1
 8011edc:	3608      	adds	r6, #8
 8011ede:	e7e5      	b.n	8011eac <_dtoa_r+0x36c>
 8011ee0:	f000 809b 	beq.w	801201a <_dtoa_r+0x4da>
 8011ee4:	9b00      	ldr	r3, [sp, #0]
 8011ee6:	4f9d      	ldr	r7, [pc, #628]	; (801215c <_dtoa_r+0x61c>)
 8011ee8:	425e      	negs	r6, r3
 8011eea:	4b9b      	ldr	r3, [pc, #620]	; (8012158 <_dtoa_r+0x618>)
 8011eec:	f006 020f 	and.w	r2, r6, #15
 8011ef0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef8:	ec51 0b19 	vmov	r0, r1, d9
 8011efc:	f7ee fb7c 	bl	80005f8 <__aeabi_dmul>
 8011f00:	1136      	asrs	r6, r6, #4
 8011f02:	4682      	mov	sl, r0
 8011f04:	468b      	mov	fp, r1
 8011f06:	2300      	movs	r3, #0
 8011f08:	2502      	movs	r5, #2
 8011f0a:	2e00      	cmp	r6, #0
 8011f0c:	d17a      	bne.n	8012004 <_dtoa_r+0x4c4>
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d1d3      	bne.n	8011eba <_dtoa_r+0x37a>
 8011f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	f000 8082 	beq.w	801201e <_dtoa_r+0x4de>
 8011f1a:	4b91      	ldr	r3, [pc, #580]	; (8012160 <_dtoa_r+0x620>)
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	4650      	mov	r0, sl
 8011f20:	4659      	mov	r1, fp
 8011f22:	f7ee fddb 	bl	8000adc <__aeabi_dcmplt>
 8011f26:	2800      	cmp	r0, #0
 8011f28:	d079      	beq.n	801201e <_dtoa_r+0x4de>
 8011f2a:	9b03      	ldr	r3, [sp, #12]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d076      	beq.n	801201e <_dtoa_r+0x4de>
 8011f30:	9b02      	ldr	r3, [sp, #8]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	dd36      	ble.n	8011fa4 <_dtoa_r+0x464>
 8011f36:	9b00      	ldr	r3, [sp, #0]
 8011f38:	4650      	mov	r0, sl
 8011f3a:	4659      	mov	r1, fp
 8011f3c:	1e5f      	subs	r7, r3, #1
 8011f3e:	2200      	movs	r2, #0
 8011f40:	4b88      	ldr	r3, [pc, #544]	; (8012164 <_dtoa_r+0x624>)
 8011f42:	f7ee fb59 	bl	80005f8 <__aeabi_dmul>
 8011f46:	9e02      	ldr	r6, [sp, #8]
 8011f48:	4682      	mov	sl, r0
 8011f4a:	468b      	mov	fp, r1
 8011f4c:	3501      	adds	r5, #1
 8011f4e:	4628      	mov	r0, r5
 8011f50:	f7ee fae8 	bl	8000524 <__aeabi_i2d>
 8011f54:	4652      	mov	r2, sl
 8011f56:	465b      	mov	r3, fp
 8011f58:	f7ee fb4e 	bl	80005f8 <__aeabi_dmul>
 8011f5c:	4b82      	ldr	r3, [pc, #520]	; (8012168 <_dtoa_r+0x628>)
 8011f5e:	2200      	movs	r2, #0
 8011f60:	f7ee f994 	bl	800028c <__adddf3>
 8011f64:	46d0      	mov	r8, sl
 8011f66:	46d9      	mov	r9, fp
 8011f68:	4682      	mov	sl, r0
 8011f6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011f6e:	2e00      	cmp	r6, #0
 8011f70:	d158      	bne.n	8012024 <_dtoa_r+0x4e4>
 8011f72:	4b7e      	ldr	r3, [pc, #504]	; (801216c <_dtoa_r+0x62c>)
 8011f74:	2200      	movs	r2, #0
 8011f76:	4640      	mov	r0, r8
 8011f78:	4649      	mov	r1, r9
 8011f7a:	f7ee f985 	bl	8000288 <__aeabi_dsub>
 8011f7e:	4652      	mov	r2, sl
 8011f80:	465b      	mov	r3, fp
 8011f82:	4680      	mov	r8, r0
 8011f84:	4689      	mov	r9, r1
 8011f86:	f7ee fdc7 	bl	8000b18 <__aeabi_dcmpgt>
 8011f8a:	2800      	cmp	r0, #0
 8011f8c:	f040 8295 	bne.w	80124ba <_dtoa_r+0x97a>
 8011f90:	4652      	mov	r2, sl
 8011f92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011f96:	4640      	mov	r0, r8
 8011f98:	4649      	mov	r1, r9
 8011f9a:	f7ee fd9f 	bl	8000adc <__aeabi_dcmplt>
 8011f9e:	2800      	cmp	r0, #0
 8011fa0:	f040 8289 	bne.w	80124b6 <_dtoa_r+0x976>
 8011fa4:	ec5b ab19 	vmov	sl, fp, d9
 8011fa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	f2c0 8148 	blt.w	8012240 <_dtoa_r+0x700>
 8011fb0:	9a00      	ldr	r2, [sp, #0]
 8011fb2:	2a0e      	cmp	r2, #14
 8011fb4:	f300 8144 	bgt.w	8012240 <_dtoa_r+0x700>
 8011fb8:	4b67      	ldr	r3, [pc, #412]	; (8012158 <_dtoa_r+0x618>)
 8011fba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011fbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	f280 80d5 	bge.w	8012174 <_dtoa_r+0x634>
 8011fca:	9b03      	ldr	r3, [sp, #12]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	f300 80d1 	bgt.w	8012174 <_dtoa_r+0x634>
 8011fd2:	f040 826f 	bne.w	80124b4 <_dtoa_r+0x974>
 8011fd6:	4b65      	ldr	r3, [pc, #404]	; (801216c <_dtoa_r+0x62c>)
 8011fd8:	2200      	movs	r2, #0
 8011fda:	4640      	mov	r0, r8
 8011fdc:	4649      	mov	r1, r9
 8011fde:	f7ee fb0b 	bl	80005f8 <__aeabi_dmul>
 8011fe2:	4652      	mov	r2, sl
 8011fe4:	465b      	mov	r3, fp
 8011fe6:	f7ee fd8d 	bl	8000b04 <__aeabi_dcmpge>
 8011fea:	9e03      	ldr	r6, [sp, #12]
 8011fec:	4637      	mov	r7, r6
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	f040 8245 	bne.w	801247e <_dtoa_r+0x93e>
 8011ff4:	9d01      	ldr	r5, [sp, #4]
 8011ff6:	2331      	movs	r3, #49	; 0x31
 8011ff8:	f805 3b01 	strb.w	r3, [r5], #1
 8011ffc:	9b00      	ldr	r3, [sp, #0]
 8011ffe:	3301      	adds	r3, #1
 8012000:	9300      	str	r3, [sp, #0]
 8012002:	e240      	b.n	8012486 <_dtoa_r+0x946>
 8012004:	07f2      	lsls	r2, r6, #31
 8012006:	d505      	bpl.n	8012014 <_dtoa_r+0x4d4>
 8012008:	e9d7 2300 	ldrd	r2, r3, [r7]
 801200c:	f7ee faf4 	bl	80005f8 <__aeabi_dmul>
 8012010:	3501      	adds	r5, #1
 8012012:	2301      	movs	r3, #1
 8012014:	1076      	asrs	r6, r6, #1
 8012016:	3708      	adds	r7, #8
 8012018:	e777      	b.n	8011f0a <_dtoa_r+0x3ca>
 801201a:	2502      	movs	r5, #2
 801201c:	e779      	b.n	8011f12 <_dtoa_r+0x3d2>
 801201e:	9f00      	ldr	r7, [sp, #0]
 8012020:	9e03      	ldr	r6, [sp, #12]
 8012022:	e794      	b.n	8011f4e <_dtoa_r+0x40e>
 8012024:	9901      	ldr	r1, [sp, #4]
 8012026:	4b4c      	ldr	r3, [pc, #304]	; (8012158 <_dtoa_r+0x618>)
 8012028:	4431      	add	r1, r6
 801202a:	910d      	str	r1, [sp, #52]	; 0x34
 801202c:	9908      	ldr	r1, [sp, #32]
 801202e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012032:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012036:	2900      	cmp	r1, #0
 8012038:	d043      	beq.n	80120c2 <_dtoa_r+0x582>
 801203a:	494d      	ldr	r1, [pc, #308]	; (8012170 <_dtoa_r+0x630>)
 801203c:	2000      	movs	r0, #0
 801203e:	f7ee fc05 	bl	800084c <__aeabi_ddiv>
 8012042:	4652      	mov	r2, sl
 8012044:	465b      	mov	r3, fp
 8012046:	f7ee f91f 	bl	8000288 <__aeabi_dsub>
 801204a:	9d01      	ldr	r5, [sp, #4]
 801204c:	4682      	mov	sl, r0
 801204e:	468b      	mov	fp, r1
 8012050:	4649      	mov	r1, r9
 8012052:	4640      	mov	r0, r8
 8012054:	f7ee fd80 	bl	8000b58 <__aeabi_d2iz>
 8012058:	4606      	mov	r6, r0
 801205a:	f7ee fa63 	bl	8000524 <__aeabi_i2d>
 801205e:	4602      	mov	r2, r0
 8012060:	460b      	mov	r3, r1
 8012062:	4640      	mov	r0, r8
 8012064:	4649      	mov	r1, r9
 8012066:	f7ee f90f 	bl	8000288 <__aeabi_dsub>
 801206a:	3630      	adds	r6, #48	; 0x30
 801206c:	f805 6b01 	strb.w	r6, [r5], #1
 8012070:	4652      	mov	r2, sl
 8012072:	465b      	mov	r3, fp
 8012074:	4680      	mov	r8, r0
 8012076:	4689      	mov	r9, r1
 8012078:	f7ee fd30 	bl	8000adc <__aeabi_dcmplt>
 801207c:	2800      	cmp	r0, #0
 801207e:	d163      	bne.n	8012148 <_dtoa_r+0x608>
 8012080:	4642      	mov	r2, r8
 8012082:	464b      	mov	r3, r9
 8012084:	4936      	ldr	r1, [pc, #216]	; (8012160 <_dtoa_r+0x620>)
 8012086:	2000      	movs	r0, #0
 8012088:	f7ee f8fe 	bl	8000288 <__aeabi_dsub>
 801208c:	4652      	mov	r2, sl
 801208e:	465b      	mov	r3, fp
 8012090:	f7ee fd24 	bl	8000adc <__aeabi_dcmplt>
 8012094:	2800      	cmp	r0, #0
 8012096:	f040 80b5 	bne.w	8012204 <_dtoa_r+0x6c4>
 801209a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801209c:	429d      	cmp	r5, r3
 801209e:	d081      	beq.n	8011fa4 <_dtoa_r+0x464>
 80120a0:	4b30      	ldr	r3, [pc, #192]	; (8012164 <_dtoa_r+0x624>)
 80120a2:	2200      	movs	r2, #0
 80120a4:	4650      	mov	r0, sl
 80120a6:	4659      	mov	r1, fp
 80120a8:	f7ee faa6 	bl	80005f8 <__aeabi_dmul>
 80120ac:	4b2d      	ldr	r3, [pc, #180]	; (8012164 <_dtoa_r+0x624>)
 80120ae:	4682      	mov	sl, r0
 80120b0:	468b      	mov	fp, r1
 80120b2:	4640      	mov	r0, r8
 80120b4:	4649      	mov	r1, r9
 80120b6:	2200      	movs	r2, #0
 80120b8:	f7ee fa9e 	bl	80005f8 <__aeabi_dmul>
 80120bc:	4680      	mov	r8, r0
 80120be:	4689      	mov	r9, r1
 80120c0:	e7c6      	b.n	8012050 <_dtoa_r+0x510>
 80120c2:	4650      	mov	r0, sl
 80120c4:	4659      	mov	r1, fp
 80120c6:	f7ee fa97 	bl	80005f8 <__aeabi_dmul>
 80120ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120cc:	9d01      	ldr	r5, [sp, #4]
 80120ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80120d0:	4682      	mov	sl, r0
 80120d2:	468b      	mov	fp, r1
 80120d4:	4649      	mov	r1, r9
 80120d6:	4640      	mov	r0, r8
 80120d8:	f7ee fd3e 	bl	8000b58 <__aeabi_d2iz>
 80120dc:	4606      	mov	r6, r0
 80120de:	f7ee fa21 	bl	8000524 <__aeabi_i2d>
 80120e2:	3630      	adds	r6, #48	; 0x30
 80120e4:	4602      	mov	r2, r0
 80120e6:	460b      	mov	r3, r1
 80120e8:	4640      	mov	r0, r8
 80120ea:	4649      	mov	r1, r9
 80120ec:	f7ee f8cc 	bl	8000288 <__aeabi_dsub>
 80120f0:	f805 6b01 	strb.w	r6, [r5], #1
 80120f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120f6:	429d      	cmp	r5, r3
 80120f8:	4680      	mov	r8, r0
 80120fa:	4689      	mov	r9, r1
 80120fc:	f04f 0200 	mov.w	r2, #0
 8012100:	d124      	bne.n	801214c <_dtoa_r+0x60c>
 8012102:	4b1b      	ldr	r3, [pc, #108]	; (8012170 <_dtoa_r+0x630>)
 8012104:	4650      	mov	r0, sl
 8012106:	4659      	mov	r1, fp
 8012108:	f7ee f8c0 	bl	800028c <__adddf3>
 801210c:	4602      	mov	r2, r0
 801210e:	460b      	mov	r3, r1
 8012110:	4640      	mov	r0, r8
 8012112:	4649      	mov	r1, r9
 8012114:	f7ee fd00 	bl	8000b18 <__aeabi_dcmpgt>
 8012118:	2800      	cmp	r0, #0
 801211a:	d173      	bne.n	8012204 <_dtoa_r+0x6c4>
 801211c:	4652      	mov	r2, sl
 801211e:	465b      	mov	r3, fp
 8012120:	4913      	ldr	r1, [pc, #76]	; (8012170 <_dtoa_r+0x630>)
 8012122:	2000      	movs	r0, #0
 8012124:	f7ee f8b0 	bl	8000288 <__aeabi_dsub>
 8012128:	4602      	mov	r2, r0
 801212a:	460b      	mov	r3, r1
 801212c:	4640      	mov	r0, r8
 801212e:	4649      	mov	r1, r9
 8012130:	f7ee fcd4 	bl	8000adc <__aeabi_dcmplt>
 8012134:	2800      	cmp	r0, #0
 8012136:	f43f af35 	beq.w	8011fa4 <_dtoa_r+0x464>
 801213a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801213c:	1e6b      	subs	r3, r5, #1
 801213e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012140:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012144:	2b30      	cmp	r3, #48	; 0x30
 8012146:	d0f8      	beq.n	801213a <_dtoa_r+0x5fa>
 8012148:	9700      	str	r7, [sp, #0]
 801214a:	e049      	b.n	80121e0 <_dtoa_r+0x6a0>
 801214c:	4b05      	ldr	r3, [pc, #20]	; (8012164 <_dtoa_r+0x624>)
 801214e:	f7ee fa53 	bl	80005f8 <__aeabi_dmul>
 8012152:	4680      	mov	r8, r0
 8012154:	4689      	mov	r9, r1
 8012156:	e7bd      	b.n	80120d4 <_dtoa_r+0x594>
 8012158:	08015778 	.word	0x08015778
 801215c:	08015750 	.word	0x08015750
 8012160:	3ff00000 	.word	0x3ff00000
 8012164:	40240000 	.word	0x40240000
 8012168:	401c0000 	.word	0x401c0000
 801216c:	40140000 	.word	0x40140000
 8012170:	3fe00000 	.word	0x3fe00000
 8012174:	9d01      	ldr	r5, [sp, #4]
 8012176:	4656      	mov	r6, sl
 8012178:	465f      	mov	r7, fp
 801217a:	4642      	mov	r2, r8
 801217c:	464b      	mov	r3, r9
 801217e:	4630      	mov	r0, r6
 8012180:	4639      	mov	r1, r7
 8012182:	f7ee fb63 	bl	800084c <__aeabi_ddiv>
 8012186:	f7ee fce7 	bl	8000b58 <__aeabi_d2iz>
 801218a:	4682      	mov	sl, r0
 801218c:	f7ee f9ca 	bl	8000524 <__aeabi_i2d>
 8012190:	4642      	mov	r2, r8
 8012192:	464b      	mov	r3, r9
 8012194:	f7ee fa30 	bl	80005f8 <__aeabi_dmul>
 8012198:	4602      	mov	r2, r0
 801219a:	460b      	mov	r3, r1
 801219c:	4630      	mov	r0, r6
 801219e:	4639      	mov	r1, r7
 80121a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80121a4:	f7ee f870 	bl	8000288 <__aeabi_dsub>
 80121a8:	f805 6b01 	strb.w	r6, [r5], #1
 80121ac:	9e01      	ldr	r6, [sp, #4]
 80121ae:	9f03      	ldr	r7, [sp, #12]
 80121b0:	1bae      	subs	r6, r5, r6
 80121b2:	42b7      	cmp	r7, r6
 80121b4:	4602      	mov	r2, r0
 80121b6:	460b      	mov	r3, r1
 80121b8:	d135      	bne.n	8012226 <_dtoa_r+0x6e6>
 80121ba:	f7ee f867 	bl	800028c <__adddf3>
 80121be:	4642      	mov	r2, r8
 80121c0:	464b      	mov	r3, r9
 80121c2:	4606      	mov	r6, r0
 80121c4:	460f      	mov	r7, r1
 80121c6:	f7ee fca7 	bl	8000b18 <__aeabi_dcmpgt>
 80121ca:	b9d0      	cbnz	r0, 8012202 <_dtoa_r+0x6c2>
 80121cc:	4642      	mov	r2, r8
 80121ce:	464b      	mov	r3, r9
 80121d0:	4630      	mov	r0, r6
 80121d2:	4639      	mov	r1, r7
 80121d4:	f7ee fc78 	bl	8000ac8 <__aeabi_dcmpeq>
 80121d8:	b110      	cbz	r0, 80121e0 <_dtoa_r+0x6a0>
 80121da:	f01a 0f01 	tst.w	sl, #1
 80121de:	d110      	bne.n	8012202 <_dtoa_r+0x6c2>
 80121e0:	4620      	mov	r0, r4
 80121e2:	ee18 1a10 	vmov	r1, s16
 80121e6:	f000 fe67 	bl	8012eb8 <_Bfree>
 80121ea:	2300      	movs	r3, #0
 80121ec:	9800      	ldr	r0, [sp, #0]
 80121ee:	702b      	strb	r3, [r5, #0]
 80121f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121f2:	3001      	adds	r0, #1
 80121f4:	6018      	str	r0, [r3, #0]
 80121f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	f43f acf1 	beq.w	8011be0 <_dtoa_r+0xa0>
 80121fe:	601d      	str	r5, [r3, #0]
 8012200:	e4ee      	b.n	8011be0 <_dtoa_r+0xa0>
 8012202:	9f00      	ldr	r7, [sp, #0]
 8012204:	462b      	mov	r3, r5
 8012206:	461d      	mov	r5, r3
 8012208:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801220c:	2a39      	cmp	r2, #57	; 0x39
 801220e:	d106      	bne.n	801221e <_dtoa_r+0x6de>
 8012210:	9a01      	ldr	r2, [sp, #4]
 8012212:	429a      	cmp	r2, r3
 8012214:	d1f7      	bne.n	8012206 <_dtoa_r+0x6c6>
 8012216:	9901      	ldr	r1, [sp, #4]
 8012218:	2230      	movs	r2, #48	; 0x30
 801221a:	3701      	adds	r7, #1
 801221c:	700a      	strb	r2, [r1, #0]
 801221e:	781a      	ldrb	r2, [r3, #0]
 8012220:	3201      	adds	r2, #1
 8012222:	701a      	strb	r2, [r3, #0]
 8012224:	e790      	b.n	8012148 <_dtoa_r+0x608>
 8012226:	4ba6      	ldr	r3, [pc, #664]	; (80124c0 <_dtoa_r+0x980>)
 8012228:	2200      	movs	r2, #0
 801222a:	f7ee f9e5 	bl	80005f8 <__aeabi_dmul>
 801222e:	2200      	movs	r2, #0
 8012230:	2300      	movs	r3, #0
 8012232:	4606      	mov	r6, r0
 8012234:	460f      	mov	r7, r1
 8012236:	f7ee fc47 	bl	8000ac8 <__aeabi_dcmpeq>
 801223a:	2800      	cmp	r0, #0
 801223c:	d09d      	beq.n	801217a <_dtoa_r+0x63a>
 801223e:	e7cf      	b.n	80121e0 <_dtoa_r+0x6a0>
 8012240:	9a08      	ldr	r2, [sp, #32]
 8012242:	2a00      	cmp	r2, #0
 8012244:	f000 80d7 	beq.w	80123f6 <_dtoa_r+0x8b6>
 8012248:	9a06      	ldr	r2, [sp, #24]
 801224a:	2a01      	cmp	r2, #1
 801224c:	f300 80ba 	bgt.w	80123c4 <_dtoa_r+0x884>
 8012250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012252:	2a00      	cmp	r2, #0
 8012254:	f000 80b2 	beq.w	80123bc <_dtoa_r+0x87c>
 8012258:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801225c:	9e07      	ldr	r6, [sp, #28]
 801225e:	9d04      	ldr	r5, [sp, #16]
 8012260:	9a04      	ldr	r2, [sp, #16]
 8012262:	441a      	add	r2, r3
 8012264:	9204      	str	r2, [sp, #16]
 8012266:	9a05      	ldr	r2, [sp, #20]
 8012268:	2101      	movs	r1, #1
 801226a:	441a      	add	r2, r3
 801226c:	4620      	mov	r0, r4
 801226e:	9205      	str	r2, [sp, #20]
 8012270:	f000 ff24 	bl	80130bc <__i2b>
 8012274:	4607      	mov	r7, r0
 8012276:	2d00      	cmp	r5, #0
 8012278:	dd0c      	ble.n	8012294 <_dtoa_r+0x754>
 801227a:	9b05      	ldr	r3, [sp, #20]
 801227c:	2b00      	cmp	r3, #0
 801227e:	dd09      	ble.n	8012294 <_dtoa_r+0x754>
 8012280:	42ab      	cmp	r3, r5
 8012282:	9a04      	ldr	r2, [sp, #16]
 8012284:	bfa8      	it	ge
 8012286:	462b      	movge	r3, r5
 8012288:	1ad2      	subs	r2, r2, r3
 801228a:	9204      	str	r2, [sp, #16]
 801228c:	9a05      	ldr	r2, [sp, #20]
 801228e:	1aed      	subs	r5, r5, r3
 8012290:	1ad3      	subs	r3, r2, r3
 8012292:	9305      	str	r3, [sp, #20]
 8012294:	9b07      	ldr	r3, [sp, #28]
 8012296:	b31b      	cbz	r3, 80122e0 <_dtoa_r+0x7a0>
 8012298:	9b08      	ldr	r3, [sp, #32]
 801229a:	2b00      	cmp	r3, #0
 801229c:	f000 80af 	beq.w	80123fe <_dtoa_r+0x8be>
 80122a0:	2e00      	cmp	r6, #0
 80122a2:	dd13      	ble.n	80122cc <_dtoa_r+0x78c>
 80122a4:	4639      	mov	r1, r7
 80122a6:	4632      	mov	r2, r6
 80122a8:	4620      	mov	r0, r4
 80122aa:	f000 ffc7 	bl	801323c <__pow5mult>
 80122ae:	ee18 2a10 	vmov	r2, s16
 80122b2:	4601      	mov	r1, r0
 80122b4:	4607      	mov	r7, r0
 80122b6:	4620      	mov	r0, r4
 80122b8:	f000 ff16 	bl	80130e8 <__multiply>
 80122bc:	ee18 1a10 	vmov	r1, s16
 80122c0:	4680      	mov	r8, r0
 80122c2:	4620      	mov	r0, r4
 80122c4:	f000 fdf8 	bl	8012eb8 <_Bfree>
 80122c8:	ee08 8a10 	vmov	s16, r8
 80122cc:	9b07      	ldr	r3, [sp, #28]
 80122ce:	1b9a      	subs	r2, r3, r6
 80122d0:	d006      	beq.n	80122e0 <_dtoa_r+0x7a0>
 80122d2:	ee18 1a10 	vmov	r1, s16
 80122d6:	4620      	mov	r0, r4
 80122d8:	f000 ffb0 	bl	801323c <__pow5mult>
 80122dc:	ee08 0a10 	vmov	s16, r0
 80122e0:	2101      	movs	r1, #1
 80122e2:	4620      	mov	r0, r4
 80122e4:	f000 feea 	bl	80130bc <__i2b>
 80122e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	4606      	mov	r6, r0
 80122ee:	f340 8088 	ble.w	8012402 <_dtoa_r+0x8c2>
 80122f2:	461a      	mov	r2, r3
 80122f4:	4601      	mov	r1, r0
 80122f6:	4620      	mov	r0, r4
 80122f8:	f000 ffa0 	bl	801323c <__pow5mult>
 80122fc:	9b06      	ldr	r3, [sp, #24]
 80122fe:	2b01      	cmp	r3, #1
 8012300:	4606      	mov	r6, r0
 8012302:	f340 8081 	ble.w	8012408 <_dtoa_r+0x8c8>
 8012306:	f04f 0800 	mov.w	r8, #0
 801230a:	6933      	ldr	r3, [r6, #16]
 801230c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012310:	6918      	ldr	r0, [r3, #16]
 8012312:	f000 fe83 	bl	801301c <__hi0bits>
 8012316:	f1c0 0020 	rsb	r0, r0, #32
 801231a:	9b05      	ldr	r3, [sp, #20]
 801231c:	4418      	add	r0, r3
 801231e:	f010 001f 	ands.w	r0, r0, #31
 8012322:	f000 8092 	beq.w	801244a <_dtoa_r+0x90a>
 8012326:	f1c0 0320 	rsb	r3, r0, #32
 801232a:	2b04      	cmp	r3, #4
 801232c:	f340 808a 	ble.w	8012444 <_dtoa_r+0x904>
 8012330:	f1c0 001c 	rsb	r0, r0, #28
 8012334:	9b04      	ldr	r3, [sp, #16]
 8012336:	4403      	add	r3, r0
 8012338:	9304      	str	r3, [sp, #16]
 801233a:	9b05      	ldr	r3, [sp, #20]
 801233c:	4403      	add	r3, r0
 801233e:	4405      	add	r5, r0
 8012340:	9305      	str	r3, [sp, #20]
 8012342:	9b04      	ldr	r3, [sp, #16]
 8012344:	2b00      	cmp	r3, #0
 8012346:	dd07      	ble.n	8012358 <_dtoa_r+0x818>
 8012348:	ee18 1a10 	vmov	r1, s16
 801234c:	461a      	mov	r2, r3
 801234e:	4620      	mov	r0, r4
 8012350:	f000 ffce 	bl	80132f0 <__lshift>
 8012354:	ee08 0a10 	vmov	s16, r0
 8012358:	9b05      	ldr	r3, [sp, #20]
 801235a:	2b00      	cmp	r3, #0
 801235c:	dd05      	ble.n	801236a <_dtoa_r+0x82a>
 801235e:	4631      	mov	r1, r6
 8012360:	461a      	mov	r2, r3
 8012362:	4620      	mov	r0, r4
 8012364:	f000 ffc4 	bl	80132f0 <__lshift>
 8012368:	4606      	mov	r6, r0
 801236a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801236c:	2b00      	cmp	r3, #0
 801236e:	d06e      	beq.n	801244e <_dtoa_r+0x90e>
 8012370:	ee18 0a10 	vmov	r0, s16
 8012374:	4631      	mov	r1, r6
 8012376:	f001 f82b 	bl	80133d0 <__mcmp>
 801237a:	2800      	cmp	r0, #0
 801237c:	da67      	bge.n	801244e <_dtoa_r+0x90e>
 801237e:	9b00      	ldr	r3, [sp, #0]
 8012380:	3b01      	subs	r3, #1
 8012382:	ee18 1a10 	vmov	r1, s16
 8012386:	9300      	str	r3, [sp, #0]
 8012388:	220a      	movs	r2, #10
 801238a:	2300      	movs	r3, #0
 801238c:	4620      	mov	r0, r4
 801238e:	f000 fdb5 	bl	8012efc <__multadd>
 8012392:	9b08      	ldr	r3, [sp, #32]
 8012394:	ee08 0a10 	vmov	s16, r0
 8012398:	2b00      	cmp	r3, #0
 801239a:	f000 81b1 	beq.w	8012700 <_dtoa_r+0xbc0>
 801239e:	2300      	movs	r3, #0
 80123a0:	4639      	mov	r1, r7
 80123a2:	220a      	movs	r2, #10
 80123a4:	4620      	mov	r0, r4
 80123a6:	f000 fda9 	bl	8012efc <__multadd>
 80123aa:	9b02      	ldr	r3, [sp, #8]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	4607      	mov	r7, r0
 80123b0:	f300 808e 	bgt.w	80124d0 <_dtoa_r+0x990>
 80123b4:	9b06      	ldr	r3, [sp, #24]
 80123b6:	2b02      	cmp	r3, #2
 80123b8:	dc51      	bgt.n	801245e <_dtoa_r+0x91e>
 80123ba:	e089      	b.n	80124d0 <_dtoa_r+0x990>
 80123bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80123be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80123c2:	e74b      	b.n	801225c <_dtoa_r+0x71c>
 80123c4:	9b03      	ldr	r3, [sp, #12]
 80123c6:	1e5e      	subs	r6, r3, #1
 80123c8:	9b07      	ldr	r3, [sp, #28]
 80123ca:	42b3      	cmp	r3, r6
 80123cc:	bfbf      	itttt	lt
 80123ce:	9b07      	ldrlt	r3, [sp, #28]
 80123d0:	9607      	strlt	r6, [sp, #28]
 80123d2:	1af2      	sublt	r2, r6, r3
 80123d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80123d6:	bfb6      	itet	lt
 80123d8:	189b      	addlt	r3, r3, r2
 80123da:	1b9e      	subge	r6, r3, r6
 80123dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80123de:	9b03      	ldr	r3, [sp, #12]
 80123e0:	bfb8      	it	lt
 80123e2:	2600      	movlt	r6, #0
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	bfb7      	itett	lt
 80123e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80123ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80123f0:	1a9d      	sublt	r5, r3, r2
 80123f2:	2300      	movlt	r3, #0
 80123f4:	e734      	b.n	8012260 <_dtoa_r+0x720>
 80123f6:	9e07      	ldr	r6, [sp, #28]
 80123f8:	9d04      	ldr	r5, [sp, #16]
 80123fa:	9f08      	ldr	r7, [sp, #32]
 80123fc:	e73b      	b.n	8012276 <_dtoa_r+0x736>
 80123fe:	9a07      	ldr	r2, [sp, #28]
 8012400:	e767      	b.n	80122d2 <_dtoa_r+0x792>
 8012402:	9b06      	ldr	r3, [sp, #24]
 8012404:	2b01      	cmp	r3, #1
 8012406:	dc18      	bgt.n	801243a <_dtoa_r+0x8fa>
 8012408:	f1ba 0f00 	cmp.w	sl, #0
 801240c:	d115      	bne.n	801243a <_dtoa_r+0x8fa>
 801240e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012412:	b993      	cbnz	r3, 801243a <_dtoa_r+0x8fa>
 8012414:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012418:	0d1b      	lsrs	r3, r3, #20
 801241a:	051b      	lsls	r3, r3, #20
 801241c:	b183      	cbz	r3, 8012440 <_dtoa_r+0x900>
 801241e:	9b04      	ldr	r3, [sp, #16]
 8012420:	3301      	adds	r3, #1
 8012422:	9304      	str	r3, [sp, #16]
 8012424:	9b05      	ldr	r3, [sp, #20]
 8012426:	3301      	adds	r3, #1
 8012428:	9305      	str	r3, [sp, #20]
 801242a:	f04f 0801 	mov.w	r8, #1
 801242e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012430:	2b00      	cmp	r3, #0
 8012432:	f47f af6a 	bne.w	801230a <_dtoa_r+0x7ca>
 8012436:	2001      	movs	r0, #1
 8012438:	e76f      	b.n	801231a <_dtoa_r+0x7da>
 801243a:	f04f 0800 	mov.w	r8, #0
 801243e:	e7f6      	b.n	801242e <_dtoa_r+0x8ee>
 8012440:	4698      	mov	r8, r3
 8012442:	e7f4      	b.n	801242e <_dtoa_r+0x8ee>
 8012444:	f43f af7d 	beq.w	8012342 <_dtoa_r+0x802>
 8012448:	4618      	mov	r0, r3
 801244a:	301c      	adds	r0, #28
 801244c:	e772      	b.n	8012334 <_dtoa_r+0x7f4>
 801244e:	9b03      	ldr	r3, [sp, #12]
 8012450:	2b00      	cmp	r3, #0
 8012452:	dc37      	bgt.n	80124c4 <_dtoa_r+0x984>
 8012454:	9b06      	ldr	r3, [sp, #24]
 8012456:	2b02      	cmp	r3, #2
 8012458:	dd34      	ble.n	80124c4 <_dtoa_r+0x984>
 801245a:	9b03      	ldr	r3, [sp, #12]
 801245c:	9302      	str	r3, [sp, #8]
 801245e:	9b02      	ldr	r3, [sp, #8]
 8012460:	b96b      	cbnz	r3, 801247e <_dtoa_r+0x93e>
 8012462:	4631      	mov	r1, r6
 8012464:	2205      	movs	r2, #5
 8012466:	4620      	mov	r0, r4
 8012468:	f000 fd48 	bl	8012efc <__multadd>
 801246c:	4601      	mov	r1, r0
 801246e:	4606      	mov	r6, r0
 8012470:	ee18 0a10 	vmov	r0, s16
 8012474:	f000 ffac 	bl	80133d0 <__mcmp>
 8012478:	2800      	cmp	r0, #0
 801247a:	f73f adbb 	bgt.w	8011ff4 <_dtoa_r+0x4b4>
 801247e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012480:	9d01      	ldr	r5, [sp, #4]
 8012482:	43db      	mvns	r3, r3
 8012484:	9300      	str	r3, [sp, #0]
 8012486:	f04f 0800 	mov.w	r8, #0
 801248a:	4631      	mov	r1, r6
 801248c:	4620      	mov	r0, r4
 801248e:	f000 fd13 	bl	8012eb8 <_Bfree>
 8012492:	2f00      	cmp	r7, #0
 8012494:	f43f aea4 	beq.w	80121e0 <_dtoa_r+0x6a0>
 8012498:	f1b8 0f00 	cmp.w	r8, #0
 801249c:	d005      	beq.n	80124aa <_dtoa_r+0x96a>
 801249e:	45b8      	cmp	r8, r7
 80124a0:	d003      	beq.n	80124aa <_dtoa_r+0x96a>
 80124a2:	4641      	mov	r1, r8
 80124a4:	4620      	mov	r0, r4
 80124a6:	f000 fd07 	bl	8012eb8 <_Bfree>
 80124aa:	4639      	mov	r1, r7
 80124ac:	4620      	mov	r0, r4
 80124ae:	f000 fd03 	bl	8012eb8 <_Bfree>
 80124b2:	e695      	b.n	80121e0 <_dtoa_r+0x6a0>
 80124b4:	2600      	movs	r6, #0
 80124b6:	4637      	mov	r7, r6
 80124b8:	e7e1      	b.n	801247e <_dtoa_r+0x93e>
 80124ba:	9700      	str	r7, [sp, #0]
 80124bc:	4637      	mov	r7, r6
 80124be:	e599      	b.n	8011ff4 <_dtoa_r+0x4b4>
 80124c0:	40240000 	.word	0x40240000
 80124c4:	9b08      	ldr	r3, [sp, #32]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	f000 80ca 	beq.w	8012660 <_dtoa_r+0xb20>
 80124cc:	9b03      	ldr	r3, [sp, #12]
 80124ce:	9302      	str	r3, [sp, #8]
 80124d0:	2d00      	cmp	r5, #0
 80124d2:	dd05      	ble.n	80124e0 <_dtoa_r+0x9a0>
 80124d4:	4639      	mov	r1, r7
 80124d6:	462a      	mov	r2, r5
 80124d8:	4620      	mov	r0, r4
 80124da:	f000 ff09 	bl	80132f0 <__lshift>
 80124de:	4607      	mov	r7, r0
 80124e0:	f1b8 0f00 	cmp.w	r8, #0
 80124e4:	d05b      	beq.n	801259e <_dtoa_r+0xa5e>
 80124e6:	6879      	ldr	r1, [r7, #4]
 80124e8:	4620      	mov	r0, r4
 80124ea:	f000 fca5 	bl	8012e38 <_Balloc>
 80124ee:	4605      	mov	r5, r0
 80124f0:	b928      	cbnz	r0, 80124fe <_dtoa_r+0x9be>
 80124f2:	4b87      	ldr	r3, [pc, #540]	; (8012710 <_dtoa_r+0xbd0>)
 80124f4:	4602      	mov	r2, r0
 80124f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80124fa:	f7ff bb3b 	b.w	8011b74 <_dtoa_r+0x34>
 80124fe:	693a      	ldr	r2, [r7, #16]
 8012500:	3202      	adds	r2, #2
 8012502:	0092      	lsls	r2, r2, #2
 8012504:	f107 010c 	add.w	r1, r7, #12
 8012508:	300c      	adds	r0, #12
 801250a:	f7fd fd29 	bl	800ff60 <memcpy>
 801250e:	2201      	movs	r2, #1
 8012510:	4629      	mov	r1, r5
 8012512:	4620      	mov	r0, r4
 8012514:	f000 feec 	bl	80132f0 <__lshift>
 8012518:	9b01      	ldr	r3, [sp, #4]
 801251a:	f103 0901 	add.w	r9, r3, #1
 801251e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012522:	4413      	add	r3, r2
 8012524:	9305      	str	r3, [sp, #20]
 8012526:	f00a 0301 	and.w	r3, sl, #1
 801252a:	46b8      	mov	r8, r7
 801252c:	9304      	str	r3, [sp, #16]
 801252e:	4607      	mov	r7, r0
 8012530:	4631      	mov	r1, r6
 8012532:	ee18 0a10 	vmov	r0, s16
 8012536:	f7ff fa77 	bl	8011a28 <quorem>
 801253a:	4641      	mov	r1, r8
 801253c:	9002      	str	r0, [sp, #8]
 801253e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012542:	ee18 0a10 	vmov	r0, s16
 8012546:	f000 ff43 	bl	80133d0 <__mcmp>
 801254a:	463a      	mov	r2, r7
 801254c:	9003      	str	r0, [sp, #12]
 801254e:	4631      	mov	r1, r6
 8012550:	4620      	mov	r0, r4
 8012552:	f000 ff59 	bl	8013408 <__mdiff>
 8012556:	68c2      	ldr	r2, [r0, #12]
 8012558:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801255c:	4605      	mov	r5, r0
 801255e:	bb02      	cbnz	r2, 80125a2 <_dtoa_r+0xa62>
 8012560:	4601      	mov	r1, r0
 8012562:	ee18 0a10 	vmov	r0, s16
 8012566:	f000 ff33 	bl	80133d0 <__mcmp>
 801256a:	4602      	mov	r2, r0
 801256c:	4629      	mov	r1, r5
 801256e:	4620      	mov	r0, r4
 8012570:	9207      	str	r2, [sp, #28]
 8012572:	f000 fca1 	bl	8012eb8 <_Bfree>
 8012576:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801257a:	ea43 0102 	orr.w	r1, r3, r2
 801257e:	9b04      	ldr	r3, [sp, #16]
 8012580:	430b      	orrs	r3, r1
 8012582:	464d      	mov	r5, r9
 8012584:	d10f      	bne.n	80125a6 <_dtoa_r+0xa66>
 8012586:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801258a:	d02a      	beq.n	80125e2 <_dtoa_r+0xaa2>
 801258c:	9b03      	ldr	r3, [sp, #12]
 801258e:	2b00      	cmp	r3, #0
 8012590:	dd02      	ble.n	8012598 <_dtoa_r+0xa58>
 8012592:	9b02      	ldr	r3, [sp, #8]
 8012594:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012598:	f88b a000 	strb.w	sl, [fp]
 801259c:	e775      	b.n	801248a <_dtoa_r+0x94a>
 801259e:	4638      	mov	r0, r7
 80125a0:	e7ba      	b.n	8012518 <_dtoa_r+0x9d8>
 80125a2:	2201      	movs	r2, #1
 80125a4:	e7e2      	b.n	801256c <_dtoa_r+0xa2c>
 80125a6:	9b03      	ldr	r3, [sp, #12]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	db04      	blt.n	80125b6 <_dtoa_r+0xa76>
 80125ac:	9906      	ldr	r1, [sp, #24]
 80125ae:	430b      	orrs	r3, r1
 80125b0:	9904      	ldr	r1, [sp, #16]
 80125b2:	430b      	orrs	r3, r1
 80125b4:	d122      	bne.n	80125fc <_dtoa_r+0xabc>
 80125b6:	2a00      	cmp	r2, #0
 80125b8:	ddee      	ble.n	8012598 <_dtoa_r+0xa58>
 80125ba:	ee18 1a10 	vmov	r1, s16
 80125be:	2201      	movs	r2, #1
 80125c0:	4620      	mov	r0, r4
 80125c2:	f000 fe95 	bl	80132f0 <__lshift>
 80125c6:	4631      	mov	r1, r6
 80125c8:	ee08 0a10 	vmov	s16, r0
 80125cc:	f000 ff00 	bl	80133d0 <__mcmp>
 80125d0:	2800      	cmp	r0, #0
 80125d2:	dc03      	bgt.n	80125dc <_dtoa_r+0xa9c>
 80125d4:	d1e0      	bne.n	8012598 <_dtoa_r+0xa58>
 80125d6:	f01a 0f01 	tst.w	sl, #1
 80125da:	d0dd      	beq.n	8012598 <_dtoa_r+0xa58>
 80125dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80125e0:	d1d7      	bne.n	8012592 <_dtoa_r+0xa52>
 80125e2:	2339      	movs	r3, #57	; 0x39
 80125e4:	f88b 3000 	strb.w	r3, [fp]
 80125e8:	462b      	mov	r3, r5
 80125ea:	461d      	mov	r5, r3
 80125ec:	3b01      	subs	r3, #1
 80125ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80125f2:	2a39      	cmp	r2, #57	; 0x39
 80125f4:	d071      	beq.n	80126da <_dtoa_r+0xb9a>
 80125f6:	3201      	adds	r2, #1
 80125f8:	701a      	strb	r2, [r3, #0]
 80125fa:	e746      	b.n	801248a <_dtoa_r+0x94a>
 80125fc:	2a00      	cmp	r2, #0
 80125fe:	dd07      	ble.n	8012610 <_dtoa_r+0xad0>
 8012600:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012604:	d0ed      	beq.n	80125e2 <_dtoa_r+0xaa2>
 8012606:	f10a 0301 	add.w	r3, sl, #1
 801260a:	f88b 3000 	strb.w	r3, [fp]
 801260e:	e73c      	b.n	801248a <_dtoa_r+0x94a>
 8012610:	9b05      	ldr	r3, [sp, #20]
 8012612:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012616:	4599      	cmp	r9, r3
 8012618:	d047      	beq.n	80126aa <_dtoa_r+0xb6a>
 801261a:	ee18 1a10 	vmov	r1, s16
 801261e:	2300      	movs	r3, #0
 8012620:	220a      	movs	r2, #10
 8012622:	4620      	mov	r0, r4
 8012624:	f000 fc6a 	bl	8012efc <__multadd>
 8012628:	45b8      	cmp	r8, r7
 801262a:	ee08 0a10 	vmov	s16, r0
 801262e:	f04f 0300 	mov.w	r3, #0
 8012632:	f04f 020a 	mov.w	r2, #10
 8012636:	4641      	mov	r1, r8
 8012638:	4620      	mov	r0, r4
 801263a:	d106      	bne.n	801264a <_dtoa_r+0xb0a>
 801263c:	f000 fc5e 	bl	8012efc <__multadd>
 8012640:	4680      	mov	r8, r0
 8012642:	4607      	mov	r7, r0
 8012644:	f109 0901 	add.w	r9, r9, #1
 8012648:	e772      	b.n	8012530 <_dtoa_r+0x9f0>
 801264a:	f000 fc57 	bl	8012efc <__multadd>
 801264e:	4639      	mov	r1, r7
 8012650:	4680      	mov	r8, r0
 8012652:	2300      	movs	r3, #0
 8012654:	220a      	movs	r2, #10
 8012656:	4620      	mov	r0, r4
 8012658:	f000 fc50 	bl	8012efc <__multadd>
 801265c:	4607      	mov	r7, r0
 801265e:	e7f1      	b.n	8012644 <_dtoa_r+0xb04>
 8012660:	9b03      	ldr	r3, [sp, #12]
 8012662:	9302      	str	r3, [sp, #8]
 8012664:	9d01      	ldr	r5, [sp, #4]
 8012666:	ee18 0a10 	vmov	r0, s16
 801266a:	4631      	mov	r1, r6
 801266c:	f7ff f9dc 	bl	8011a28 <quorem>
 8012670:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012674:	9b01      	ldr	r3, [sp, #4]
 8012676:	f805 ab01 	strb.w	sl, [r5], #1
 801267a:	1aea      	subs	r2, r5, r3
 801267c:	9b02      	ldr	r3, [sp, #8]
 801267e:	4293      	cmp	r3, r2
 8012680:	dd09      	ble.n	8012696 <_dtoa_r+0xb56>
 8012682:	ee18 1a10 	vmov	r1, s16
 8012686:	2300      	movs	r3, #0
 8012688:	220a      	movs	r2, #10
 801268a:	4620      	mov	r0, r4
 801268c:	f000 fc36 	bl	8012efc <__multadd>
 8012690:	ee08 0a10 	vmov	s16, r0
 8012694:	e7e7      	b.n	8012666 <_dtoa_r+0xb26>
 8012696:	9b02      	ldr	r3, [sp, #8]
 8012698:	2b00      	cmp	r3, #0
 801269a:	bfc8      	it	gt
 801269c:	461d      	movgt	r5, r3
 801269e:	9b01      	ldr	r3, [sp, #4]
 80126a0:	bfd8      	it	le
 80126a2:	2501      	movle	r5, #1
 80126a4:	441d      	add	r5, r3
 80126a6:	f04f 0800 	mov.w	r8, #0
 80126aa:	ee18 1a10 	vmov	r1, s16
 80126ae:	2201      	movs	r2, #1
 80126b0:	4620      	mov	r0, r4
 80126b2:	f000 fe1d 	bl	80132f0 <__lshift>
 80126b6:	4631      	mov	r1, r6
 80126b8:	ee08 0a10 	vmov	s16, r0
 80126bc:	f000 fe88 	bl	80133d0 <__mcmp>
 80126c0:	2800      	cmp	r0, #0
 80126c2:	dc91      	bgt.n	80125e8 <_dtoa_r+0xaa8>
 80126c4:	d102      	bne.n	80126cc <_dtoa_r+0xb8c>
 80126c6:	f01a 0f01 	tst.w	sl, #1
 80126ca:	d18d      	bne.n	80125e8 <_dtoa_r+0xaa8>
 80126cc:	462b      	mov	r3, r5
 80126ce:	461d      	mov	r5, r3
 80126d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80126d4:	2a30      	cmp	r2, #48	; 0x30
 80126d6:	d0fa      	beq.n	80126ce <_dtoa_r+0xb8e>
 80126d8:	e6d7      	b.n	801248a <_dtoa_r+0x94a>
 80126da:	9a01      	ldr	r2, [sp, #4]
 80126dc:	429a      	cmp	r2, r3
 80126de:	d184      	bne.n	80125ea <_dtoa_r+0xaaa>
 80126e0:	9b00      	ldr	r3, [sp, #0]
 80126e2:	3301      	adds	r3, #1
 80126e4:	9300      	str	r3, [sp, #0]
 80126e6:	2331      	movs	r3, #49	; 0x31
 80126e8:	7013      	strb	r3, [r2, #0]
 80126ea:	e6ce      	b.n	801248a <_dtoa_r+0x94a>
 80126ec:	4b09      	ldr	r3, [pc, #36]	; (8012714 <_dtoa_r+0xbd4>)
 80126ee:	f7ff ba95 	b.w	8011c1c <_dtoa_r+0xdc>
 80126f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	f47f aa6e 	bne.w	8011bd6 <_dtoa_r+0x96>
 80126fa:	4b07      	ldr	r3, [pc, #28]	; (8012718 <_dtoa_r+0xbd8>)
 80126fc:	f7ff ba8e 	b.w	8011c1c <_dtoa_r+0xdc>
 8012700:	9b02      	ldr	r3, [sp, #8]
 8012702:	2b00      	cmp	r3, #0
 8012704:	dcae      	bgt.n	8012664 <_dtoa_r+0xb24>
 8012706:	9b06      	ldr	r3, [sp, #24]
 8012708:	2b02      	cmp	r3, #2
 801270a:	f73f aea8 	bgt.w	801245e <_dtoa_r+0x91e>
 801270e:	e7a9      	b.n	8012664 <_dtoa_r+0xb24>
 8012710:	08015668 	.word	0x08015668
 8012714:	0801546c 	.word	0x0801546c
 8012718:	080155e9 	.word	0x080155e9

0801271c <rshift>:
 801271c:	6903      	ldr	r3, [r0, #16]
 801271e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012722:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012726:	ea4f 1261 	mov.w	r2, r1, asr #5
 801272a:	f100 0414 	add.w	r4, r0, #20
 801272e:	dd45      	ble.n	80127bc <rshift+0xa0>
 8012730:	f011 011f 	ands.w	r1, r1, #31
 8012734:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012738:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801273c:	d10c      	bne.n	8012758 <rshift+0x3c>
 801273e:	f100 0710 	add.w	r7, r0, #16
 8012742:	4629      	mov	r1, r5
 8012744:	42b1      	cmp	r1, r6
 8012746:	d334      	bcc.n	80127b2 <rshift+0x96>
 8012748:	1a9b      	subs	r3, r3, r2
 801274a:	009b      	lsls	r3, r3, #2
 801274c:	1eea      	subs	r2, r5, #3
 801274e:	4296      	cmp	r6, r2
 8012750:	bf38      	it	cc
 8012752:	2300      	movcc	r3, #0
 8012754:	4423      	add	r3, r4
 8012756:	e015      	b.n	8012784 <rshift+0x68>
 8012758:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801275c:	f1c1 0820 	rsb	r8, r1, #32
 8012760:	40cf      	lsrs	r7, r1
 8012762:	f105 0e04 	add.w	lr, r5, #4
 8012766:	46a1      	mov	r9, r4
 8012768:	4576      	cmp	r6, lr
 801276a:	46f4      	mov	ip, lr
 801276c:	d815      	bhi.n	801279a <rshift+0x7e>
 801276e:	1a9a      	subs	r2, r3, r2
 8012770:	0092      	lsls	r2, r2, #2
 8012772:	3a04      	subs	r2, #4
 8012774:	3501      	adds	r5, #1
 8012776:	42ae      	cmp	r6, r5
 8012778:	bf38      	it	cc
 801277a:	2200      	movcc	r2, #0
 801277c:	18a3      	adds	r3, r4, r2
 801277e:	50a7      	str	r7, [r4, r2]
 8012780:	b107      	cbz	r7, 8012784 <rshift+0x68>
 8012782:	3304      	adds	r3, #4
 8012784:	1b1a      	subs	r2, r3, r4
 8012786:	42a3      	cmp	r3, r4
 8012788:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801278c:	bf08      	it	eq
 801278e:	2300      	moveq	r3, #0
 8012790:	6102      	str	r2, [r0, #16]
 8012792:	bf08      	it	eq
 8012794:	6143      	streq	r3, [r0, #20]
 8012796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801279a:	f8dc c000 	ldr.w	ip, [ip]
 801279e:	fa0c fc08 	lsl.w	ip, ip, r8
 80127a2:	ea4c 0707 	orr.w	r7, ip, r7
 80127a6:	f849 7b04 	str.w	r7, [r9], #4
 80127aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80127ae:	40cf      	lsrs	r7, r1
 80127b0:	e7da      	b.n	8012768 <rshift+0x4c>
 80127b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80127b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80127ba:	e7c3      	b.n	8012744 <rshift+0x28>
 80127bc:	4623      	mov	r3, r4
 80127be:	e7e1      	b.n	8012784 <rshift+0x68>

080127c0 <__hexdig_fun>:
 80127c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80127c4:	2b09      	cmp	r3, #9
 80127c6:	d802      	bhi.n	80127ce <__hexdig_fun+0xe>
 80127c8:	3820      	subs	r0, #32
 80127ca:	b2c0      	uxtb	r0, r0
 80127cc:	4770      	bx	lr
 80127ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80127d2:	2b05      	cmp	r3, #5
 80127d4:	d801      	bhi.n	80127da <__hexdig_fun+0x1a>
 80127d6:	3847      	subs	r0, #71	; 0x47
 80127d8:	e7f7      	b.n	80127ca <__hexdig_fun+0xa>
 80127da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80127de:	2b05      	cmp	r3, #5
 80127e0:	d801      	bhi.n	80127e6 <__hexdig_fun+0x26>
 80127e2:	3827      	subs	r0, #39	; 0x27
 80127e4:	e7f1      	b.n	80127ca <__hexdig_fun+0xa>
 80127e6:	2000      	movs	r0, #0
 80127e8:	4770      	bx	lr
	...

080127ec <__gethex>:
 80127ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127f0:	ed2d 8b02 	vpush	{d8}
 80127f4:	b089      	sub	sp, #36	; 0x24
 80127f6:	ee08 0a10 	vmov	s16, r0
 80127fa:	9304      	str	r3, [sp, #16]
 80127fc:	4bb4      	ldr	r3, [pc, #720]	; (8012ad0 <__gethex+0x2e4>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	9301      	str	r3, [sp, #4]
 8012802:	4618      	mov	r0, r3
 8012804:	468b      	mov	fp, r1
 8012806:	4690      	mov	r8, r2
 8012808:	f7ed fce2 	bl	80001d0 <strlen>
 801280c:	9b01      	ldr	r3, [sp, #4]
 801280e:	f8db 2000 	ldr.w	r2, [fp]
 8012812:	4403      	add	r3, r0
 8012814:	4682      	mov	sl, r0
 8012816:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801281a:	9305      	str	r3, [sp, #20]
 801281c:	1c93      	adds	r3, r2, #2
 801281e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012822:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012826:	32fe      	adds	r2, #254	; 0xfe
 8012828:	18d1      	adds	r1, r2, r3
 801282a:	461f      	mov	r7, r3
 801282c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012830:	9100      	str	r1, [sp, #0]
 8012832:	2830      	cmp	r0, #48	; 0x30
 8012834:	d0f8      	beq.n	8012828 <__gethex+0x3c>
 8012836:	f7ff ffc3 	bl	80127c0 <__hexdig_fun>
 801283a:	4604      	mov	r4, r0
 801283c:	2800      	cmp	r0, #0
 801283e:	d13a      	bne.n	80128b6 <__gethex+0xca>
 8012840:	9901      	ldr	r1, [sp, #4]
 8012842:	4652      	mov	r2, sl
 8012844:	4638      	mov	r0, r7
 8012846:	f001 fa23 	bl	8013c90 <strncmp>
 801284a:	4605      	mov	r5, r0
 801284c:	2800      	cmp	r0, #0
 801284e:	d168      	bne.n	8012922 <__gethex+0x136>
 8012850:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012854:	eb07 060a 	add.w	r6, r7, sl
 8012858:	f7ff ffb2 	bl	80127c0 <__hexdig_fun>
 801285c:	2800      	cmp	r0, #0
 801285e:	d062      	beq.n	8012926 <__gethex+0x13a>
 8012860:	4633      	mov	r3, r6
 8012862:	7818      	ldrb	r0, [r3, #0]
 8012864:	2830      	cmp	r0, #48	; 0x30
 8012866:	461f      	mov	r7, r3
 8012868:	f103 0301 	add.w	r3, r3, #1
 801286c:	d0f9      	beq.n	8012862 <__gethex+0x76>
 801286e:	f7ff ffa7 	bl	80127c0 <__hexdig_fun>
 8012872:	2301      	movs	r3, #1
 8012874:	fab0 f480 	clz	r4, r0
 8012878:	0964      	lsrs	r4, r4, #5
 801287a:	4635      	mov	r5, r6
 801287c:	9300      	str	r3, [sp, #0]
 801287e:	463a      	mov	r2, r7
 8012880:	4616      	mov	r6, r2
 8012882:	3201      	adds	r2, #1
 8012884:	7830      	ldrb	r0, [r6, #0]
 8012886:	f7ff ff9b 	bl	80127c0 <__hexdig_fun>
 801288a:	2800      	cmp	r0, #0
 801288c:	d1f8      	bne.n	8012880 <__gethex+0x94>
 801288e:	9901      	ldr	r1, [sp, #4]
 8012890:	4652      	mov	r2, sl
 8012892:	4630      	mov	r0, r6
 8012894:	f001 f9fc 	bl	8013c90 <strncmp>
 8012898:	b980      	cbnz	r0, 80128bc <__gethex+0xd0>
 801289a:	b94d      	cbnz	r5, 80128b0 <__gethex+0xc4>
 801289c:	eb06 050a 	add.w	r5, r6, sl
 80128a0:	462a      	mov	r2, r5
 80128a2:	4616      	mov	r6, r2
 80128a4:	3201      	adds	r2, #1
 80128a6:	7830      	ldrb	r0, [r6, #0]
 80128a8:	f7ff ff8a 	bl	80127c0 <__hexdig_fun>
 80128ac:	2800      	cmp	r0, #0
 80128ae:	d1f8      	bne.n	80128a2 <__gethex+0xb6>
 80128b0:	1bad      	subs	r5, r5, r6
 80128b2:	00ad      	lsls	r5, r5, #2
 80128b4:	e004      	b.n	80128c0 <__gethex+0xd4>
 80128b6:	2400      	movs	r4, #0
 80128b8:	4625      	mov	r5, r4
 80128ba:	e7e0      	b.n	801287e <__gethex+0x92>
 80128bc:	2d00      	cmp	r5, #0
 80128be:	d1f7      	bne.n	80128b0 <__gethex+0xc4>
 80128c0:	7833      	ldrb	r3, [r6, #0]
 80128c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80128c6:	2b50      	cmp	r3, #80	; 0x50
 80128c8:	d13b      	bne.n	8012942 <__gethex+0x156>
 80128ca:	7873      	ldrb	r3, [r6, #1]
 80128cc:	2b2b      	cmp	r3, #43	; 0x2b
 80128ce:	d02c      	beq.n	801292a <__gethex+0x13e>
 80128d0:	2b2d      	cmp	r3, #45	; 0x2d
 80128d2:	d02e      	beq.n	8012932 <__gethex+0x146>
 80128d4:	1c71      	adds	r1, r6, #1
 80128d6:	f04f 0900 	mov.w	r9, #0
 80128da:	7808      	ldrb	r0, [r1, #0]
 80128dc:	f7ff ff70 	bl	80127c0 <__hexdig_fun>
 80128e0:	1e43      	subs	r3, r0, #1
 80128e2:	b2db      	uxtb	r3, r3
 80128e4:	2b18      	cmp	r3, #24
 80128e6:	d82c      	bhi.n	8012942 <__gethex+0x156>
 80128e8:	f1a0 0210 	sub.w	r2, r0, #16
 80128ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80128f0:	f7ff ff66 	bl	80127c0 <__hexdig_fun>
 80128f4:	1e43      	subs	r3, r0, #1
 80128f6:	b2db      	uxtb	r3, r3
 80128f8:	2b18      	cmp	r3, #24
 80128fa:	d91d      	bls.n	8012938 <__gethex+0x14c>
 80128fc:	f1b9 0f00 	cmp.w	r9, #0
 8012900:	d000      	beq.n	8012904 <__gethex+0x118>
 8012902:	4252      	negs	r2, r2
 8012904:	4415      	add	r5, r2
 8012906:	f8cb 1000 	str.w	r1, [fp]
 801290a:	b1e4      	cbz	r4, 8012946 <__gethex+0x15a>
 801290c:	9b00      	ldr	r3, [sp, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	bf14      	ite	ne
 8012912:	2700      	movne	r7, #0
 8012914:	2706      	moveq	r7, #6
 8012916:	4638      	mov	r0, r7
 8012918:	b009      	add	sp, #36	; 0x24
 801291a:	ecbd 8b02 	vpop	{d8}
 801291e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012922:	463e      	mov	r6, r7
 8012924:	4625      	mov	r5, r4
 8012926:	2401      	movs	r4, #1
 8012928:	e7ca      	b.n	80128c0 <__gethex+0xd4>
 801292a:	f04f 0900 	mov.w	r9, #0
 801292e:	1cb1      	adds	r1, r6, #2
 8012930:	e7d3      	b.n	80128da <__gethex+0xee>
 8012932:	f04f 0901 	mov.w	r9, #1
 8012936:	e7fa      	b.n	801292e <__gethex+0x142>
 8012938:	230a      	movs	r3, #10
 801293a:	fb03 0202 	mla	r2, r3, r2, r0
 801293e:	3a10      	subs	r2, #16
 8012940:	e7d4      	b.n	80128ec <__gethex+0x100>
 8012942:	4631      	mov	r1, r6
 8012944:	e7df      	b.n	8012906 <__gethex+0x11a>
 8012946:	1bf3      	subs	r3, r6, r7
 8012948:	3b01      	subs	r3, #1
 801294a:	4621      	mov	r1, r4
 801294c:	2b07      	cmp	r3, #7
 801294e:	dc0b      	bgt.n	8012968 <__gethex+0x17c>
 8012950:	ee18 0a10 	vmov	r0, s16
 8012954:	f000 fa70 	bl	8012e38 <_Balloc>
 8012958:	4604      	mov	r4, r0
 801295a:	b940      	cbnz	r0, 801296e <__gethex+0x182>
 801295c:	4b5d      	ldr	r3, [pc, #372]	; (8012ad4 <__gethex+0x2e8>)
 801295e:	4602      	mov	r2, r0
 8012960:	21de      	movs	r1, #222	; 0xde
 8012962:	485d      	ldr	r0, [pc, #372]	; (8012ad8 <__gethex+0x2ec>)
 8012964:	f001 f9b6 	bl	8013cd4 <__assert_func>
 8012968:	3101      	adds	r1, #1
 801296a:	105b      	asrs	r3, r3, #1
 801296c:	e7ee      	b.n	801294c <__gethex+0x160>
 801296e:	f100 0914 	add.w	r9, r0, #20
 8012972:	f04f 0b00 	mov.w	fp, #0
 8012976:	f1ca 0301 	rsb	r3, sl, #1
 801297a:	f8cd 9008 	str.w	r9, [sp, #8]
 801297e:	f8cd b000 	str.w	fp, [sp]
 8012982:	9306      	str	r3, [sp, #24]
 8012984:	42b7      	cmp	r7, r6
 8012986:	d340      	bcc.n	8012a0a <__gethex+0x21e>
 8012988:	9802      	ldr	r0, [sp, #8]
 801298a:	9b00      	ldr	r3, [sp, #0]
 801298c:	f840 3b04 	str.w	r3, [r0], #4
 8012990:	eba0 0009 	sub.w	r0, r0, r9
 8012994:	1080      	asrs	r0, r0, #2
 8012996:	0146      	lsls	r6, r0, #5
 8012998:	6120      	str	r0, [r4, #16]
 801299a:	4618      	mov	r0, r3
 801299c:	f000 fb3e 	bl	801301c <__hi0bits>
 80129a0:	1a30      	subs	r0, r6, r0
 80129a2:	f8d8 6000 	ldr.w	r6, [r8]
 80129a6:	42b0      	cmp	r0, r6
 80129a8:	dd63      	ble.n	8012a72 <__gethex+0x286>
 80129aa:	1b87      	subs	r7, r0, r6
 80129ac:	4639      	mov	r1, r7
 80129ae:	4620      	mov	r0, r4
 80129b0:	f000 fee2 	bl	8013778 <__any_on>
 80129b4:	4682      	mov	sl, r0
 80129b6:	b1a8      	cbz	r0, 80129e4 <__gethex+0x1f8>
 80129b8:	1e7b      	subs	r3, r7, #1
 80129ba:	1159      	asrs	r1, r3, #5
 80129bc:	f003 021f 	and.w	r2, r3, #31
 80129c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80129c4:	f04f 0a01 	mov.w	sl, #1
 80129c8:	fa0a f202 	lsl.w	r2, sl, r2
 80129cc:	420a      	tst	r2, r1
 80129ce:	d009      	beq.n	80129e4 <__gethex+0x1f8>
 80129d0:	4553      	cmp	r3, sl
 80129d2:	dd05      	ble.n	80129e0 <__gethex+0x1f4>
 80129d4:	1eb9      	subs	r1, r7, #2
 80129d6:	4620      	mov	r0, r4
 80129d8:	f000 fece 	bl	8013778 <__any_on>
 80129dc:	2800      	cmp	r0, #0
 80129de:	d145      	bne.n	8012a6c <__gethex+0x280>
 80129e0:	f04f 0a02 	mov.w	sl, #2
 80129e4:	4639      	mov	r1, r7
 80129e6:	4620      	mov	r0, r4
 80129e8:	f7ff fe98 	bl	801271c <rshift>
 80129ec:	443d      	add	r5, r7
 80129ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80129f2:	42ab      	cmp	r3, r5
 80129f4:	da4c      	bge.n	8012a90 <__gethex+0x2a4>
 80129f6:	ee18 0a10 	vmov	r0, s16
 80129fa:	4621      	mov	r1, r4
 80129fc:	f000 fa5c 	bl	8012eb8 <_Bfree>
 8012a00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012a02:	2300      	movs	r3, #0
 8012a04:	6013      	str	r3, [r2, #0]
 8012a06:	27a3      	movs	r7, #163	; 0xa3
 8012a08:	e785      	b.n	8012916 <__gethex+0x12a>
 8012a0a:	1e73      	subs	r3, r6, #1
 8012a0c:	9a05      	ldr	r2, [sp, #20]
 8012a0e:	9303      	str	r3, [sp, #12]
 8012a10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012a14:	4293      	cmp	r3, r2
 8012a16:	d019      	beq.n	8012a4c <__gethex+0x260>
 8012a18:	f1bb 0f20 	cmp.w	fp, #32
 8012a1c:	d107      	bne.n	8012a2e <__gethex+0x242>
 8012a1e:	9b02      	ldr	r3, [sp, #8]
 8012a20:	9a00      	ldr	r2, [sp, #0]
 8012a22:	f843 2b04 	str.w	r2, [r3], #4
 8012a26:	9302      	str	r3, [sp, #8]
 8012a28:	2300      	movs	r3, #0
 8012a2a:	9300      	str	r3, [sp, #0]
 8012a2c:	469b      	mov	fp, r3
 8012a2e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012a32:	f7ff fec5 	bl	80127c0 <__hexdig_fun>
 8012a36:	9b00      	ldr	r3, [sp, #0]
 8012a38:	f000 000f 	and.w	r0, r0, #15
 8012a3c:	fa00 f00b 	lsl.w	r0, r0, fp
 8012a40:	4303      	orrs	r3, r0
 8012a42:	9300      	str	r3, [sp, #0]
 8012a44:	f10b 0b04 	add.w	fp, fp, #4
 8012a48:	9b03      	ldr	r3, [sp, #12]
 8012a4a:	e00d      	b.n	8012a68 <__gethex+0x27c>
 8012a4c:	9b03      	ldr	r3, [sp, #12]
 8012a4e:	9a06      	ldr	r2, [sp, #24]
 8012a50:	4413      	add	r3, r2
 8012a52:	42bb      	cmp	r3, r7
 8012a54:	d3e0      	bcc.n	8012a18 <__gethex+0x22c>
 8012a56:	4618      	mov	r0, r3
 8012a58:	9901      	ldr	r1, [sp, #4]
 8012a5a:	9307      	str	r3, [sp, #28]
 8012a5c:	4652      	mov	r2, sl
 8012a5e:	f001 f917 	bl	8013c90 <strncmp>
 8012a62:	9b07      	ldr	r3, [sp, #28]
 8012a64:	2800      	cmp	r0, #0
 8012a66:	d1d7      	bne.n	8012a18 <__gethex+0x22c>
 8012a68:	461e      	mov	r6, r3
 8012a6a:	e78b      	b.n	8012984 <__gethex+0x198>
 8012a6c:	f04f 0a03 	mov.w	sl, #3
 8012a70:	e7b8      	b.n	80129e4 <__gethex+0x1f8>
 8012a72:	da0a      	bge.n	8012a8a <__gethex+0x29e>
 8012a74:	1a37      	subs	r7, r6, r0
 8012a76:	4621      	mov	r1, r4
 8012a78:	ee18 0a10 	vmov	r0, s16
 8012a7c:	463a      	mov	r2, r7
 8012a7e:	f000 fc37 	bl	80132f0 <__lshift>
 8012a82:	1bed      	subs	r5, r5, r7
 8012a84:	4604      	mov	r4, r0
 8012a86:	f100 0914 	add.w	r9, r0, #20
 8012a8a:	f04f 0a00 	mov.w	sl, #0
 8012a8e:	e7ae      	b.n	80129ee <__gethex+0x202>
 8012a90:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012a94:	42a8      	cmp	r0, r5
 8012a96:	dd72      	ble.n	8012b7e <__gethex+0x392>
 8012a98:	1b45      	subs	r5, r0, r5
 8012a9a:	42ae      	cmp	r6, r5
 8012a9c:	dc36      	bgt.n	8012b0c <__gethex+0x320>
 8012a9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012aa2:	2b02      	cmp	r3, #2
 8012aa4:	d02a      	beq.n	8012afc <__gethex+0x310>
 8012aa6:	2b03      	cmp	r3, #3
 8012aa8:	d02c      	beq.n	8012b04 <__gethex+0x318>
 8012aaa:	2b01      	cmp	r3, #1
 8012aac:	d11c      	bne.n	8012ae8 <__gethex+0x2fc>
 8012aae:	42ae      	cmp	r6, r5
 8012ab0:	d11a      	bne.n	8012ae8 <__gethex+0x2fc>
 8012ab2:	2e01      	cmp	r6, #1
 8012ab4:	d112      	bne.n	8012adc <__gethex+0x2f0>
 8012ab6:	9a04      	ldr	r2, [sp, #16]
 8012ab8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012abc:	6013      	str	r3, [r2, #0]
 8012abe:	2301      	movs	r3, #1
 8012ac0:	6123      	str	r3, [r4, #16]
 8012ac2:	f8c9 3000 	str.w	r3, [r9]
 8012ac6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012ac8:	2762      	movs	r7, #98	; 0x62
 8012aca:	601c      	str	r4, [r3, #0]
 8012acc:	e723      	b.n	8012916 <__gethex+0x12a>
 8012ace:	bf00      	nop
 8012ad0:	080156e0 	.word	0x080156e0
 8012ad4:	08015668 	.word	0x08015668
 8012ad8:	08015679 	.word	0x08015679
 8012adc:	1e71      	subs	r1, r6, #1
 8012ade:	4620      	mov	r0, r4
 8012ae0:	f000 fe4a 	bl	8013778 <__any_on>
 8012ae4:	2800      	cmp	r0, #0
 8012ae6:	d1e6      	bne.n	8012ab6 <__gethex+0x2ca>
 8012ae8:	ee18 0a10 	vmov	r0, s16
 8012aec:	4621      	mov	r1, r4
 8012aee:	f000 f9e3 	bl	8012eb8 <_Bfree>
 8012af2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012af4:	2300      	movs	r3, #0
 8012af6:	6013      	str	r3, [r2, #0]
 8012af8:	2750      	movs	r7, #80	; 0x50
 8012afa:	e70c      	b.n	8012916 <__gethex+0x12a>
 8012afc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d1f2      	bne.n	8012ae8 <__gethex+0x2fc>
 8012b02:	e7d8      	b.n	8012ab6 <__gethex+0x2ca>
 8012b04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d1d5      	bne.n	8012ab6 <__gethex+0x2ca>
 8012b0a:	e7ed      	b.n	8012ae8 <__gethex+0x2fc>
 8012b0c:	1e6f      	subs	r7, r5, #1
 8012b0e:	f1ba 0f00 	cmp.w	sl, #0
 8012b12:	d131      	bne.n	8012b78 <__gethex+0x38c>
 8012b14:	b127      	cbz	r7, 8012b20 <__gethex+0x334>
 8012b16:	4639      	mov	r1, r7
 8012b18:	4620      	mov	r0, r4
 8012b1a:	f000 fe2d 	bl	8013778 <__any_on>
 8012b1e:	4682      	mov	sl, r0
 8012b20:	117b      	asrs	r3, r7, #5
 8012b22:	2101      	movs	r1, #1
 8012b24:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012b28:	f007 071f 	and.w	r7, r7, #31
 8012b2c:	fa01 f707 	lsl.w	r7, r1, r7
 8012b30:	421f      	tst	r7, r3
 8012b32:	4629      	mov	r1, r5
 8012b34:	4620      	mov	r0, r4
 8012b36:	bf18      	it	ne
 8012b38:	f04a 0a02 	orrne.w	sl, sl, #2
 8012b3c:	1b76      	subs	r6, r6, r5
 8012b3e:	f7ff fded 	bl	801271c <rshift>
 8012b42:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012b46:	2702      	movs	r7, #2
 8012b48:	f1ba 0f00 	cmp.w	sl, #0
 8012b4c:	d048      	beq.n	8012be0 <__gethex+0x3f4>
 8012b4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012b52:	2b02      	cmp	r3, #2
 8012b54:	d015      	beq.n	8012b82 <__gethex+0x396>
 8012b56:	2b03      	cmp	r3, #3
 8012b58:	d017      	beq.n	8012b8a <__gethex+0x39e>
 8012b5a:	2b01      	cmp	r3, #1
 8012b5c:	d109      	bne.n	8012b72 <__gethex+0x386>
 8012b5e:	f01a 0f02 	tst.w	sl, #2
 8012b62:	d006      	beq.n	8012b72 <__gethex+0x386>
 8012b64:	f8d9 0000 	ldr.w	r0, [r9]
 8012b68:	ea4a 0a00 	orr.w	sl, sl, r0
 8012b6c:	f01a 0f01 	tst.w	sl, #1
 8012b70:	d10e      	bne.n	8012b90 <__gethex+0x3a4>
 8012b72:	f047 0710 	orr.w	r7, r7, #16
 8012b76:	e033      	b.n	8012be0 <__gethex+0x3f4>
 8012b78:	f04f 0a01 	mov.w	sl, #1
 8012b7c:	e7d0      	b.n	8012b20 <__gethex+0x334>
 8012b7e:	2701      	movs	r7, #1
 8012b80:	e7e2      	b.n	8012b48 <__gethex+0x35c>
 8012b82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b84:	f1c3 0301 	rsb	r3, r3, #1
 8012b88:	9315      	str	r3, [sp, #84]	; 0x54
 8012b8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d0f0      	beq.n	8012b72 <__gethex+0x386>
 8012b90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012b94:	f104 0314 	add.w	r3, r4, #20
 8012b98:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012b9c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012ba0:	f04f 0c00 	mov.w	ip, #0
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012baa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8012bae:	d01c      	beq.n	8012bea <__gethex+0x3fe>
 8012bb0:	3201      	adds	r2, #1
 8012bb2:	6002      	str	r2, [r0, #0]
 8012bb4:	2f02      	cmp	r7, #2
 8012bb6:	f104 0314 	add.w	r3, r4, #20
 8012bba:	d13f      	bne.n	8012c3c <__gethex+0x450>
 8012bbc:	f8d8 2000 	ldr.w	r2, [r8]
 8012bc0:	3a01      	subs	r2, #1
 8012bc2:	42b2      	cmp	r2, r6
 8012bc4:	d10a      	bne.n	8012bdc <__gethex+0x3f0>
 8012bc6:	1171      	asrs	r1, r6, #5
 8012bc8:	2201      	movs	r2, #1
 8012bca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012bce:	f006 061f 	and.w	r6, r6, #31
 8012bd2:	fa02 f606 	lsl.w	r6, r2, r6
 8012bd6:	421e      	tst	r6, r3
 8012bd8:	bf18      	it	ne
 8012bda:	4617      	movne	r7, r2
 8012bdc:	f047 0720 	orr.w	r7, r7, #32
 8012be0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012be2:	601c      	str	r4, [r3, #0]
 8012be4:	9b04      	ldr	r3, [sp, #16]
 8012be6:	601d      	str	r5, [r3, #0]
 8012be8:	e695      	b.n	8012916 <__gethex+0x12a>
 8012bea:	4299      	cmp	r1, r3
 8012bec:	f843 cc04 	str.w	ip, [r3, #-4]
 8012bf0:	d8d8      	bhi.n	8012ba4 <__gethex+0x3b8>
 8012bf2:	68a3      	ldr	r3, [r4, #8]
 8012bf4:	459b      	cmp	fp, r3
 8012bf6:	db19      	blt.n	8012c2c <__gethex+0x440>
 8012bf8:	6861      	ldr	r1, [r4, #4]
 8012bfa:	ee18 0a10 	vmov	r0, s16
 8012bfe:	3101      	adds	r1, #1
 8012c00:	f000 f91a 	bl	8012e38 <_Balloc>
 8012c04:	4681      	mov	r9, r0
 8012c06:	b918      	cbnz	r0, 8012c10 <__gethex+0x424>
 8012c08:	4b1a      	ldr	r3, [pc, #104]	; (8012c74 <__gethex+0x488>)
 8012c0a:	4602      	mov	r2, r0
 8012c0c:	2184      	movs	r1, #132	; 0x84
 8012c0e:	e6a8      	b.n	8012962 <__gethex+0x176>
 8012c10:	6922      	ldr	r2, [r4, #16]
 8012c12:	3202      	adds	r2, #2
 8012c14:	f104 010c 	add.w	r1, r4, #12
 8012c18:	0092      	lsls	r2, r2, #2
 8012c1a:	300c      	adds	r0, #12
 8012c1c:	f7fd f9a0 	bl	800ff60 <memcpy>
 8012c20:	4621      	mov	r1, r4
 8012c22:	ee18 0a10 	vmov	r0, s16
 8012c26:	f000 f947 	bl	8012eb8 <_Bfree>
 8012c2a:	464c      	mov	r4, r9
 8012c2c:	6923      	ldr	r3, [r4, #16]
 8012c2e:	1c5a      	adds	r2, r3, #1
 8012c30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012c34:	6122      	str	r2, [r4, #16]
 8012c36:	2201      	movs	r2, #1
 8012c38:	615a      	str	r2, [r3, #20]
 8012c3a:	e7bb      	b.n	8012bb4 <__gethex+0x3c8>
 8012c3c:	6922      	ldr	r2, [r4, #16]
 8012c3e:	455a      	cmp	r2, fp
 8012c40:	dd0b      	ble.n	8012c5a <__gethex+0x46e>
 8012c42:	2101      	movs	r1, #1
 8012c44:	4620      	mov	r0, r4
 8012c46:	f7ff fd69 	bl	801271c <rshift>
 8012c4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012c4e:	3501      	adds	r5, #1
 8012c50:	42ab      	cmp	r3, r5
 8012c52:	f6ff aed0 	blt.w	80129f6 <__gethex+0x20a>
 8012c56:	2701      	movs	r7, #1
 8012c58:	e7c0      	b.n	8012bdc <__gethex+0x3f0>
 8012c5a:	f016 061f 	ands.w	r6, r6, #31
 8012c5e:	d0fa      	beq.n	8012c56 <__gethex+0x46a>
 8012c60:	4453      	add	r3, sl
 8012c62:	f1c6 0620 	rsb	r6, r6, #32
 8012c66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012c6a:	f000 f9d7 	bl	801301c <__hi0bits>
 8012c6e:	42b0      	cmp	r0, r6
 8012c70:	dbe7      	blt.n	8012c42 <__gethex+0x456>
 8012c72:	e7f0      	b.n	8012c56 <__gethex+0x46a>
 8012c74:	08015668 	.word	0x08015668

08012c78 <L_shift>:
 8012c78:	f1c2 0208 	rsb	r2, r2, #8
 8012c7c:	0092      	lsls	r2, r2, #2
 8012c7e:	b570      	push	{r4, r5, r6, lr}
 8012c80:	f1c2 0620 	rsb	r6, r2, #32
 8012c84:	6843      	ldr	r3, [r0, #4]
 8012c86:	6804      	ldr	r4, [r0, #0]
 8012c88:	fa03 f506 	lsl.w	r5, r3, r6
 8012c8c:	432c      	orrs	r4, r5
 8012c8e:	40d3      	lsrs	r3, r2
 8012c90:	6004      	str	r4, [r0, #0]
 8012c92:	f840 3f04 	str.w	r3, [r0, #4]!
 8012c96:	4288      	cmp	r0, r1
 8012c98:	d3f4      	bcc.n	8012c84 <L_shift+0xc>
 8012c9a:	bd70      	pop	{r4, r5, r6, pc}

08012c9c <__match>:
 8012c9c:	b530      	push	{r4, r5, lr}
 8012c9e:	6803      	ldr	r3, [r0, #0]
 8012ca0:	3301      	adds	r3, #1
 8012ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ca6:	b914      	cbnz	r4, 8012cae <__match+0x12>
 8012ca8:	6003      	str	r3, [r0, #0]
 8012caa:	2001      	movs	r0, #1
 8012cac:	bd30      	pop	{r4, r5, pc}
 8012cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012cb6:	2d19      	cmp	r5, #25
 8012cb8:	bf98      	it	ls
 8012cba:	3220      	addls	r2, #32
 8012cbc:	42a2      	cmp	r2, r4
 8012cbe:	d0f0      	beq.n	8012ca2 <__match+0x6>
 8012cc0:	2000      	movs	r0, #0
 8012cc2:	e7f3      	b.n	8012cac <__match+0x10>

08012cc4 <__hexnan>:
 8012cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cc8:	680b      	ldr	r3, [r1, #0]
 8012cca:	115e      	asrs	r6, r3, #5
 8012ccc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012cd0:	f013 031f 	ands.w	r3, r3, #31
 8012cd4:	b087      	sub	sp, #28
 8012cd6:	bf18      	it	ne
 8012cd8:	3604      	addne	r6, #4
 8012cda:	2500      	movs	r5, #0
 8012cdc:	1f37      	subs	r7, r6, #4
 8012cde:	4690      	mov	r8, r2
 8012ce0:	6802      	ldr	r2, [r0, #0]
 8012ce2:	9301      	str	r3, [sp, #4]
 8012ce4:	4682      	mov	sl, r0
 8012ce6:	f846 5c04 	str.w	r5, [r6, #-4]
 8012cea:	46b9      	mov	r9, r7
 8012cec:	463c      	mov	r4, r7
 8012cee:	9502      	str	r5, [sp, #8]
 8012cf0:	46ab      	mov	fp, r5
 8012cf2:	7851      	ldrb	r1, [r2, #1]
 8012cf4:	1c53      	adds	r3, r2, #1
 8012cf6:	9303      	str	r3, [sp, #12]
 8012cf8:	b341      	cbz	r1, 8012d4c <__hexnan+0x88>
 8012cfa:	4608      	mov	r0, r1
 8012cfc:	9205      	str	r2, [sp, #20]
 8012cfe:	9104      	str	r1, [sp, #16]
 8012d00:	f7ff fd5e 	bl	80127c0 <__hexdig_fun>
 8012d04:	2800      	cmp	r0, #0
 8012d06:	d14f      	bne.n	8012da8 <__hexnan+0xe4>
 8012d08:	9904      	ldr	r1, [sp, #16]
 8012d0a:	9a05      	ldr	r2, [sp, #20]
 8012d0c:	2920      	cmp	r1, #32
 8012d0e:	d818      	bhi.n	8012d42 <__hexnan+0x7e>
 8012d10:	9b02      	ldr	r3, [sp, #8]
 8012d12:	459b      	cmp	fp, r3
 8012d14:	dd13      	ble.n	8012d3e <__hexnan+0x7a>
 8012d16:	454c      	cmp	r4, r9
 8012d18:	d206      	bcs.n	8012d28 <__hexnan+0x64>
 8012d1a:	2d07      	cmp	r5, #7
 8012d1c:	dc04      	bgt.n	8012d28 <__hexnan+0x64>
 8012d1e:	462a      	mov	r2, r5
 8012d20:	4649      	mov	r1, r9
 8012d22:	4620      	mov	r0, r4
 8012d24:	f7ff ffa8 	bl	8012c78 <L_shift>
 8012d28:	4544      	cmp	r4, r8
 8012d2a:	d950      	bls.n	8012dce <__hexnan+0x10a>
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	f1a4 0904 	sub.w	r9, r4, #4
 8012d32:	f844 3c04 	str.w	r3, [r4, #-4]
 8012d36:	f8cd b008 	str.w	fp, [sp, #8]
 8012d3a:	464c      	mov	r4, r9
 8012d3c:	461d      	mov	r5, r3
 8012d3e:	9a03      	ldr	r2, [sp, #12]
 8012d40:	e7d7      	b.n	8012cf2 <__hexnan+0x2e>
 8012d42:	2929      	cmp	r1, #41	; 0x29
 8012d44:	d156      	bne.n	8012df4 <__hexnan+0x130>
 8012d46:	3202      	adds	r2, #2
 8012d48:	f8ca 2000 	str.w	r2, [sl]
 8012d4c:	f1bb 0f00 	cmp.w	fp, #0
 8012d50:	d050      	beq.n	8012df4 <__hexnan+0x130>
 8012d52:	454c      	cmp	r4, r9
 8012d54:	d206      	bcs.n	8012d64 <__hexnan+0xa0>
 8012d56:	2d07      	cmp	r5, #7
 8012d58:	dc04      	bgt.n	8012d64 <__hexnan+0xa0>
 8012d5a:	462a      	mov	r2, r5
 8012d5c:	4649      	mov	r1, r9
 8012d5e:	4620      	mov	r0, r4
 8012d60:	f7ff ff8a 	bl	8012c78 <L_shift>
 8012d64:	4544      	cmp	r4, r8
 8012d66:	d934      	bls.n	8012dd2 <__hexnan+0x10e>
 8012d68:	f1a8 0204 	sub.w	r2, r8, #4
 8012d6c:	4623      	mov	r3, r4
 8012d6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012d72:	f842 1f04 	str.w	r1, [r2, #4]!
 8012d76:	429f      	cmp	r7, r3
 8012d78:	d2f9      	bcs.n	8012d6e <__hexnan+0xaa>
 8012d7a:	1b3b      	subs	r3, r7, r4
 8012d7c:	f023 0303 	bic.w	r3, r3, #3
 8012d80:	3304      	adds	r3, #4
 8012d82:	3401      	adds	r4, #1
 8012d84:	3e03      	subs	r6, #3
 8012d86:	42b4      	cmp	r4, r6
 8012d88:	bf88      	it	hi
 8012d8a:	2304      	movhi	r3, #4
 8012d8c:	4443      	add	r3, r8
 8012d8e:	2200      	movs	r2, #0
 8012d90:	f843 2b04 	str.w	r2, [r3], #4
 8012d94:	429f      	cmp	r7, r3
 8012d96:	d2fb      	bcs.n	8012d90 <__hexnan+0xcc>
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	b91b      	cbnz	r3, 8012da4 <__hexnan+0xe0>
 8012d9c:	4547      	cmp	r7, r8
 8012d9e:	d127      	bne.n	8012df0 <__hexnan+0x12c>
 8012da0:	2301      	movs	r3, #1
 8012da2:	603b      	str	r3, [r7, #0]
 8012da4:	2005      	movs	r0, #5
 8012da6:	e026      	b.n	8012df6 <__hexnan+0x132>
 8012da8:	3501      	adds	r5, #1
 8012daa:	2d08      	cmp	r5, #8
 8012dac:	f10b 0b01 	add.w	fp, fp, #1
 8012db0:	dd06      	ble.n	8012dc0 <__hexnan+0xfc>
 8012db2:	4544      	cmp	r4, r8
 8012db4:	d9c3      	bls.n	8012d3e <__hexnan+0x7a>
 8012db6:	2300      	movs	r3, #0
 8012db8:	f844 3c04 	str.w	r3, [r4, #-4]
 8012dbc:	2501      	movs	r5, #1
 8012dbe:	3c04      	subs	r4, #4
 8012dc0:	6822      	ldr	r2, [r4, #0]
 8012dc2:	f000 000f 	and.w	r0, r0, #15
 8012dc6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012dca:	6022      	str	r2, [r4, #0]
 8012dcc:	e7b7      	b.n	8012d3e <__hexnan+0x7a>
 8012dce:	2508      	movs	r5, #8
 8012dd0:	e7b5      	b.n	8012d3e <__hexnan+0x7a>
 8012dd2:	9b01      	ldr	r3, [sp, #4]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d0df      	beq.n	8012d98 <__hexnan+0xd4>
 8012dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012ddc:	f1c3 0320 	rsb	r3, r3, #32
 8012de0:	fa22 f303 	lsr.w	r3, r2, r3
 8012de4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012de8:	401a      	ands	r2, r3
 8012dea:	f846 2c04 	str.w	r2, [r6, #-4]
 8012dee:	e7d3      	b.n	8012d98 <__hexnan+0xd4>
 8012df0:	3f04      	subs	r7, #4
 8012df2:	e7d1      	b.n	8012d98 <__hexnan+0xd4>
 8012df4:	2004      	movs	r0, #4
 8012df6:	b007      	add	sp, #28
 8012df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012dfc <_localeconv_r>:
 8012dfc:	4800      	ldr	r0, [pc, #0]	; (8012e00 <_localeconv_r+0x4>)
 8012dfe:	4770      	bx	lr
 8012e00:	2000016c 	.word	0x2000016c

08012e04 <malloc>:
 8012e04:	4b02      	ldr	r3, [pc, #8]	; (8012e10 <malloc+0xc>)
 8012e06:	4601      	mov	r1, r0
 8012e08:	6818      	ldr	r0, [r3, #0]
 8012e0a:	f000 bd59 	b.w	80138c0 <_malloc_r>
 8012e0e:	bf00      	nop
 8012e10:	20000014 	.word	0x20000014

08012e14 <__ascii_mbtowc>:
 8012e14:	b082      	sub	sp, #8
 8012e16:	b901      	cbnz	r1, 8012e1a <__ascii_mbtowc+0x6>
 8012e18:	a901      	add	r1, sp, #4
 8012e1a:	b142      	cbz	r2, 8012e2e <__ascii_mbtowc+0x1a>
 8012e1c:	b14b      	cbz	r3, 8012e32 <__ascii_mbtowc+0x1e>
 8012e1e:	7813      	ldrb	r3, [r2, #0]
 8012e20:	600b      	str	r3, [r1, #0]
 8012e22:	7812      	ldrb	r2, [r2, #0]
 8012e24:	1e10      	subs	r0, r2, #0
 8012e26:	bf18      	it	ne
 8012e28:	2001      	movne	r0, #1
 8012e2a:	b002      	add	sp, #8
 8012e2c:	4770      	bx	lr
 8012e2e:	4610      	mov	r0, r2
 8012e30:	e7fb      	b.n	8012e2a <__ascii_mbtowc+0x16>
 8012e32:	f06f 0001 	mvn.w	r0, #1
 8012e36:	e7f8      	b.n	8012e2a <__ascii_mbtowc+0x16>

08012e38 <_Balloc>:
 8012e38:	b570      	push	{r4, r5, r6, lr}
 8012e3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012e3c:	4604      	mov	r4, r0
 8012e3e:	460d      	mov	r5, r1
 8012e40:	b976      	cbnz	r6, 8012e60 <_Balloc+0x28>
 8012e42:	2010      	movs	r0, #16
 8012e44:	f7ff ffde 	bl	8012e04 <malloc>
 8012e48:	4602      	mov	r2, r0
 8012e4a:	6260      	str	r0, [r4, #36]	; 0x24
 8012e4c:	b920      	cbnz	r0, 8012e58 <_Balloc+0x20>
 8012e4e:	4b18      	ldr	r3, [pc, #96]	; (8012eb0 <_Balloc+0x78>)
 8012e50:	4818      	ldr	r0, [pc, #96]	; (8012eb4 <_Balloc+0x7c>)
 8012e52:	2166      	movs	r1, #102	; 0x66
 8012e54:	f000 ff3e 	bl	8013cd4 <__assert_func>
 8012e58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e5c:	6006      	str	r6, [r0, #0]
 8012e5e:	60c6      	str	r6, [r0, #12]
 8012e60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012e62:	68f3      	ldr	r3, [r6, #12]
 8012e64:	b183      	cbz	r3, 8012e88 <_Balloc+0x50>
 8012e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e68:	68db      	ldr	r3, [r3, #12]
 8012e6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012e6e:	b9b8      	cbnz	r0, 8012ea0 <_Balloc+0x68>
 8012e70:	2101      	movs	r1, #1
 8012e72:	fa01 f605 	lsl.w	r6, r1, r5
 8012e76:	1d72      	adds	r2, r6, #5
 8012e78:	0092      	lsls	r2, r2, #2
 8012e7a:	4620      	mov	r0, r4
 8012e7c:	f000 fc9d 	bl	80137ba <_calloc_r>
 8012e80:	b160      	cbz	r0, 8012e9c <_Balloc+0x64>
 8012e82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012e86:	e00e      	b.n	8012ea6 <_Balloc+0x6e>
 8012e88:	2221      	movs	r2, #33	; 0x21
 8012e8a:	2104      	movs	r1, #4
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	f000 fc94 	bl	80137ba <_calloc_r>
 8012e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e94:	60f0      	str	r0, [r6, #12]
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d1e4      	bne.n	8012e66 <_Balloc+0x2e>
 8012e9c:	2000      	movs	r0, #0
 8012e9e:	bd70      	pop	{r4, r5, r6, pc}
 8012ea0:	6802      	ldr	r2, [r0, #0]
 8012ea2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012eac:	e7f7      	b.n	8012e9e <_Balloc+0x66>
 8012eae:	bf00      	nop
 8012eb0:	080155f6 	.word	0x080155f6
 8012eb4:	080156f4 	.word	0x080156f4

08012eb8 <_Bfree>:
 8012eb8:	b570      	push	{r4, r5, r6, lr}
 8012eba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012ebc:	4605      	mov	r5, r0
 8012ebe:	460c      	mov	r4, r1
 8012ec0:	b976      	cbnz	r6, 8012ee0 <_Bfree+0x28>
 8012ec2:	2010      	movs	r0, #16
 8012ec4:	f7ff ff9e 	bl	8012e04 <malloc>
 8012ec8:	4602      	mov	r2, r0
 8012eca:	6268      	str	r0, [r5, #36]	; 0x24
 8012ecc:	b920      	cbnz	r0, 8012ed8 <_Bfree+0x20>
 8012ece:	4b09      	ldr	r3, [pc, #36]	; (8012ef4 <_Bfree+0x3c>)
 8012ed0:	4809      	ldr	r0, [pc, #36]	; (8012ef8 <_Bfree+0x40>)
 8012ed2:	218a      	movs	r1, #138	; 0x8a
 8012ed4:	f000 fefe 	bl	8013cd4 <__assert_func>
 8012ed8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012edc:	6006      	str	r6, [r0, #0]
 8012ede:	60c6      	str	r6, [r0, #12]
 8012ee0:	b13c      	cbz	r4, 8012ef2 <_Bfree+0x3a>
 8012ee2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012ee4:	6862      	ldr	r2, [r4, #4]
 8012ee6:	68db      	ldr	r3, [r3, #12]
 8012ee8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012eec:	6021      	str	r1, [r4, #0]
 8012eee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012ef2:	bd70      	pop	{r4, r5, r6, pc}
 8012ef4:	080155f6 	.word	0x080155f6
 8012ef8:	080156f4 	.word	0x080156f4

08012efc <__multadd>:
 8012efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f00:	690d      	ldr	r5, [r1, #16]
 8012f02:	4607      	mov	r7, r0
 8012f04:	460c      	mov	r4, r1
 8012f06:	461e      	mov	r6, r3
 8012f08:	f101 0c14 	add.w	ip, r1, #20
 8012f0c:	2000      	movs	r0, #0
 8012f0e:	f8dc 3000 	ldr.w	r3, [ip]
 8012f12:	b299      	uxth	r1, r3
 8012f14:	fb02 6101 	mla	r1, r2, r1, r6
 8012f18:	0c1e      	lsrs	r6, r3, #16
 8012f1a:	0c0b      	lsrs	r3, r1, #16
 8012f1c:	fb02 3306 	mla	r3, r2, r6, r3
 8012f20:	b289      	uxth	r1, r1
 8012f22:	3001      	adds	r0, #1
 8012f24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012f28:	4285      	cmp	r5, r0
 8012f2a:	f84c 1b04 	str.w	r1, [ip], #4
 8012f2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012f32:	dcec      	bgt.n	8012f0e <__multadd+0x12>
 8012f34:	b30e      	cbz	r6, 8012f7a <__multadd+0x7e>
 8012f36:	68a3      	ldr	r3, [r4, #8]
 8012f38:	42ab      	cmp	r3, r5
 8012f3a:	dc19      	bgt.n	8012f70 <__multadd+0x74>
 8012f3c:	6861      	ldr	r1, [r4, #4]
 8012f3e:	4638      	mov	r0, r7
 8012f40:	3101      	adds	r1, #1
 8012f42:	f7ff ff79 	bl	8012e38 <_Balloc>
 8012f46:	4680      	mov	r8, r0
 8012f48:	b928      	cbnz	r0, 8012f56 <__multadd+0x5a>
 8012f4a:	4602      	mov	r2, r0
 8012f4c:	4b0c      	ldr	r3, [pc, #48]	; (8012f80 <__multadd+0x84>)
 8012f4e:	480d      	ldr	r0, [pc, #52]	; (8012f84 <__multadd+0x88>)
 8012f50:	21b5      	movs	r1, #181	; 0xb5
 8012f52:	f000 febf 	bl	8013cd4 <__assert_func>
 8012f56:	6922      	ldr	r2, [r4, #16]
 8012f58:	3202      	adds	r2, #2
 8012f5a:	f104 010c 	add.w	r1, r4, #12
 8012f5e:	0092      	lsls	r2, r2, #2
 8012f60:	300c      	adds	r0, #12
 8012f62:	f7fc fffd 	bl	800ff60 <memcpy>
 8012f66:	4621      	mov	r1, r4
 8012f68:	4638      	mov	r0, r7
 8012f6a:	f7ff ffa5 	bl	8012eb8 <_Bfree>
 8012f6e:	4644      	mov	r4, r8
 8012f70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012f74:	3501      	adds	r5, #1
 8012f76:	615e      	str	r6, [r3, #20]
 8012f78:	6125      	str	r5, [r4, #16]
 8012f7a:	4620      	mov	r0, r4
 8012f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f80:	08015668 	.word	0x08015668
 8012f84:	080156f4 	.word	0x080156f4

08012f88 <__s2b>:
 8012f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f8c:	460c      	mov	r4, r1
 8012f8e:	4615      	mov	r5, r2
 8012f90:	461f      	mov	r7, r3
 8012f92:	2209      	movs	r2, #9
 8012f94:	3308      	adds	r3, #8
 8012f96:	4606      	mov	r6, r0
 8012f98:	fb93 f3f2 	sdiv	r3, r3, r2
 8012f9c:	2100      	movs	r1, #0
 8012f9e:	2201      	movs	r2, #1
 8012fa0:	429a      	cmp	r2, r3
 8012fa2:	db09      	blt.n	8012fb8 <__s2b+0x30>
 8012fa4:	4630      	mov	r0, r6
 8012fa6:	f7ff ff47 	bl	8012e38 <_Balloc>
 8012faa:	b940      	cbnz	r0, 8012fbe <__s2b+0x36>
 8012fac:	4602      	mov	r2, r0
 8012fae:	4b19      	ldr	r3, [pc, #100]	; (8013014 <__s2b+0x8c>)
 8012fb0:	4819      	ldr	r0, [pc, #100]	; (8013018 <__s2b+0x90>)
 8012fb2:	21ce      	movs	r1, #206	; 0xce
 8012fb4:	f000 fe8e 	bl	8013cd4 <__assert_func>
 8012fb8:	0052      	lsls	r2, r2, #1
 8012fba:	3101      	adds	r1, #1
 8012fbc:	e7f0      	b.n	8012fa0 <__s2b+0x18>
 8012fbe:	9b08      	ldr	r3, [sp, #32]
 8012fc0:	6143      	str	r3, [r0, #20]
 8012fc2:	2d09      	cmp	r5, #9
 8012fc4:	f04f 0301 	mov.w	r3, #1
 8012fc8:	6103      	str	r3, [r0, #16]
 8012fca:	dd16      	ble.n	8012ffa <__s2b+0x72>
 8012fcc:	f104 0909 	add.w	r9, r4, #9
 8012fd0:	46c8      	mov	r8, r9
 8012fd2:	442c      	add	r4, r5
 8012fd4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012fd8:	4601      	mov	r1, r0
 8012fda:	3b30      	subs	r3, #48	; 0x30
 8012fdc:	220a      	movs	r2, #10
 8012fde:	4630      	mov	r0, r6
 8012fe0:	f7ff ff8c 	bl	8012efc <__multadd>
 8012fe4:	45a0      	cmp	r8, r4
 8012fe6:	d1f5      	bne.n	8012fd4 <__s2b+0x4c>
 8012fe8:	f1a5 0408 	sub.w	r4, r5, #8
 8012fec:	444c      	add	r4, r9
 8012fee:	1b2d      	subs	r5, r5, r4
 8012ff0:	1963      	adds	r3, r4, r5
 8012ff2:	42bb      	cmp	r3, r7
 8012ff4:	db04      	blt.n	8013000 <__s2b+0x78>
 8012ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ffa:	340a      	adds	r4, #10
 8012ffc:	2509      	movs	r5, #9
 8012ffe:	e7f6      	b.n	8012fee <__s2b+0x66>
 8013000:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013004:	4601      	mov	r1, r0
 8013006:	3b30      	subs	r3, #48	; 0x30
 8013008:	220a      	movs	r2, #10
 801300a:	4630      	mov	r0, r6
 801300c:	f7ff ff76 	bl	8012efc <__multadd>
 8013010:	e7ee      	b.n	8012ff0 <__s2b+0x68>
 8013012:	bf00      	nop
 8013014:	08015668 	.word	0x08015668
 8013018:	080156f4 	.word	0x080156f4

0801301c <__hi0bits>:
 801301c:	0c03      	lsrs	r3, r0, #16
 801301e:	041b      	lsls	r3, r3, #16
 8013020:	b9d3      	cbnz	r3, 8013058 <__hi0bits+0x3c>
 8013022:	0400      	lsls	r0, r0, #16
 8013024:	2310      	movs	r3, #16
 8013026:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801302a:	bf04      	itt	eq
 801302c:	0200      	lsleq	r0, r0, #8
 801302e:	3308      	addeq	r3, #8
 8013030:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013034:	bf04      	itt	eq
 8013036:	0100      	lsleq	r0, r0, #4
 8013038:	3304      	addeq	r3, #4
 801303a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801303e:	bf04      	itt	eq
 8013040:	0080      	lsleq	r0, r0, #2
 8013042:	3302      	addeq	r3, #2
 8013044:	2800      	cmp	r0, #0
 8013046:	db05      	blt.n	8013054 <__hi0bits+0x38>
 8013048:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801304c:	f103 0301 	add.w	r3, r3, #1
 8013050:	bf08      	it	eq
 8013052:	2320      	moveq	r3, #32
 8013054:	4618      	mov	r0, r3
 8013056:	4770      	bx	lr
 8013058:	2300      	movs	r3, #0
 801305a:	e7e4      	b.n	8013026 <__hi0bits+0xa>

0801305c <__lo0bits>:
 801305c:	6803      	ldr	r3, [r0, #0]
 801305e:	f013 0207 	ands.w	r2, r3, #7
 8013062:	4601      	mov	r1, r0
 8013064:	d00b      	beq.n	801307e <__lo0bits+0x22>
 8013066:	07da      	lsls	r2, r3, #31
 8013068:	d423      	bmi.n	80130b2 <__lo0bits+0x56>
 801306a:	0798      	lsls	r0, r3, #30
 801306c:	bf49      	itett	mi
 801306e:	085b      	lsrmi	r3, r3, #1
 8013070:	089b      	lsrpl	r3, r3, #2
 8013072:	2001      	movmi	r0, #1
 8013074:	600b      	strmi	r3, [r1, #0]
 8013076:	bf5c      	itt	pl
 8013078:	600b      	strpl	r3, [r1, #0]
 801307a:	2002      	movpl	r0, #2
 801307c:	4770      	bx	lr
 801307e:	b298      	uxth	r0, r3
 8013080:	b9a8      	cbnz	r0, 80130ae <__lo0bits+0x52>
 8013082:	0c1b      	lsrs	r3, r3, #16
 8013084:	2010      	movs	r0, #16
 8013086:	b2da      	uxtb	r2, r3
 8013088:	b90a      	cbnz	r2, 801308e <__lo0bits+0x32>
 801308a:	3008      	adds	r0, #8
 801308c:	0a1b      	lsrs	r3, r3, #8
 801308e:	071a      	lsls	r2, r3, #28
 8013090:	bf04      	itt	eq
 8013092:	091b      	lsreq	r3, r3, #4
 8013094:	3004      	addeq	r0, #4
 8013096:	079a      	lsls	r2, r3, #30
 8013098:	bf04      	itt	eq
 801309a:	089b      	lsreq	r3, r3, #2
 801309c:	3002      	addeq	r0, #2
 801309e:	07da      	lsls	r2, r3, #31
 80130a0:	d403      	bmi.n	80130aa <__lo0bits+0x4e>
 80130a2:	085b      	lsrs	r3, r3, #1
 80130a4:	f100 0001 	add.w	r0, r0, #1
 80130a8:	d005      	beq.n	80130b6 <__lo0bits+0x5a>
 80130aa:	600b      	str	r3, [r1, #0]
 80130ac:	4770      	bx	lr
 80130ae:	4610      	mov	r0, r2
 80130b0:	e7e9      	b.n	8013086 <__lo0bits+0x2a>
 80130b2:	2000      	movs	r0, #0
 80130b4:	4770      	bx	lr
 80130b6:	2020      	movs	r0, #32
 80130b8:	4770      	bx	lr
	...

080130bc <__i2b>:
 80130bc:	b510      	push	{r4, lr}
 80130be:	460c      	mov	r4, r1
 80130c0:	2101      	movs	r1, #1
 80130c2:	f7ff feb9 	bl	8012e38 <_Balloc>
 80130c6:	4602      	mov	r2, r0
 80130c8:	b928      	cbnz	r0, 80130d6 <__i2b+0x1a>
 80130ca:	4b05      	ldr	r3, [pc, #20]	; (80130e0 <__i2b+0x24>)
 80130cc:	4805      	ldr	r0, [pc, #20]	; (80130e4 <__i2b+0x28>)
 80130ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80130d2:	f000 fdff 	bl	8013cd4 <__assert_func>
 80130d6:	2301      	movs	r3, #1
 80130d8:	6144      	str	r4, [r0, #20]
 80130da:	6103      	str	r3, [r0, #16]
 80130dc:	bd10      	pop	{r4, pc}
 80130de:	bf00      	nop
 80130e0:	08015668 	.word	0x08015668
 80130e4:	080156f4 	.word	0x080156f4

080130e8 <__multiply>:
 80130e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ec:	4691      	mov	r9, r2
 80130ee:	690a      	ldr	r2, [r1, #16]
 80130f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80130f4:	429a      	cmp	r2, r3
 80130f6:	bfb8      	it	lt
 80130f8:	460b      	movlt	r3, r1
 80130fa:	460c      	mov	r4, r1
 80130fc:	bfbc      	itt	lt
 80130fe:	464c      	movlt	r4, r9
 8013100:	4699      	movlt	r9, r3
 8013102:	6927      	ldr	r7, [r4, #16]
 8013104:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013108:	68a3      	ldr	r3, [r4, #8]
 801310a:	6861      	ldr	r1, [r4, #4]
 801310c:	eb07 060a 	add.w	r6, r7, sl
 8013110:	42b3      	cmp	r3, r6
 8013112:	b085      	sub	sp, #20
 8013114:	bfb8      	it	lt
 8013116:	3101      	addlt	r1, #1
 8013118:	f7ff fe8e 	bl	8012e38 <_Balloc>
 801311c:	b930      	cbnz	r0, 801312c <__multiply+0x44>
 801311e:	4602      	mov	r2, r0
 8013120:	4b44      	ldr	r3, [pc, #272]	; (8013234 <__multiply+0x14c>)
 8013122:	4845      	ldr	r0, [pc, #276]	; (8013238 <__multiply+0x150>)
 8013124:	f240 115d 	movw	r1, #349	; 0x15d
 8013128:	f000 fdd4 	bl	8013cd4 <__assert_func>
 801312c:	f100 0514 	add.w	r5, r0, #20
 8013130:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013134:	462b      	mov	r3, r5
 8013136:	2200      	movs	r2, #0
 8013138:	4543      	cmp	r3, r8
 801313a:	d321      	bcc.n	8013180 <__multiply+0x98>
 801313c:	f104 0314 	add.w	r3, r4, #20
 8013140:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013144:	f109 0314 	add.w	r3, r9, #20
 8013148:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801314c:	9202      	str	r2, [sp, #8]
 801314e:	1b3a      	subs	r2, r7, r4
 8013150:	3a15      	subs	r2, #21
 8013152:	f022 0203 	bic.w	r2, r2, #3
 8013156:	3204      	adds	r2, #4
 8013158:	f104 0115 	add.w	r1, r4, #21
 801315c:	428f      	cmp	r7, r1
 801315e:	bf38      	it	cc
 8013160:	2204      	movcc	r2, #4
 8013162:	9201      	str	r2, [sp, #4]
 8013164:	9a02      	ldr	r2, [sp, #8]
 8013166:	9303      	str	r3, [sp, #12]
 8013168:	429a      	cmp	r2, r3
 801316a:	d80c      	bhi.n	8013186 <__multiply+0x9e>
 801316c:	2e00      	cmp	r6, #0
 801316e:	dd03      	ble.n	8013178 <__multiply+0x90>
 8013170:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013174:	2b00      	cmp	r3, #0
 8013176:	d05a      	beq.n	801322e <__multiply+0x146>
 8013178:	6106      	str	r6, [r0, #16]
 801317a:	b005      	add	sp, #20
 801317c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013180:	f843 2b04 	str.w	r2, [r3], #4
 8013184:	e7d8      	b.n	8013138 <__multiply+0x50>
 8013186:	f8b3 a000 	ldrh.w	sl, [r3]
 801318a:	f1ba 0f00 	cmp.w	sl, #0
 801318e:	d024      	beq.n	80131da <__multiply+0xf2>
 8013190:	f104 0e14 	add.w	lr, r4, #20
 8013194:	46a9      	mov	r9, r5
 8013196:	f04f 0c00 	mov.w	ip, #0
 801319a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801319e:	f8d9 1000 	ldr.w	r1, [r9]
 80131a2:	fa1f fb82 	uxth.w	fp, r2
 80131a6:	b289      	uxth	r1, r1
 80131a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80131ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80131b0:	f8d9 2000 	ldr.w	r2, [r9]
 80131b4:	4461      	add	r1, ip
 80131b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80131ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80131be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80131c2:	b289      	uxth	r1, r1
 80131c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80131c8:	4577      	cmp	r7, lr
 80131ca:	f849 1b04 	str.w	r1, [r9], #4
 80131ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80131d2:	d8e2      	bhi.n	801319a <__multiply+0xb2>
 80131d4:	9a01      	ldr	r2, [sp, #4]
 80131d6:	f845 c002 	str.w	ip, [r5, r2]
 80131da:	9a03      	ldr	r2, [sp, #12]
 80131dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80131e0:	3304      	adds	r3, #4
 80131e2:	f1b9 0f00 	cmp.w	r9, #0
 80131e6:	d020      	beq.n	801322a <__multiply+0x142>
 80131e8:	6829      	ldr	r1, [r5, #0]
 80131ea:	f104 0c14 	add.w	ip, r4, #20
 80131ee:	46ae      	mov	lr, r5
 80131f0:	f04f 0a00 	mov.w	sl, #0
 80131f4:	f8bc b000 	ldrh.w	fp, [ip]
 80131f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80131fc:	fb09 220b 	mla	r2, r9, fp, r2
 8013200:	4492      	add	sl, r2
 8013202:	b289      	uxth	r1, r1
 8013204:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013208:	f84e 1b04 	str.w	r1, [lr], #4
 801320c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013210:	f8be 1000 	ldrh.w	r1, [lr]
 8013214:	0c12      	lsrs	r2, r2, #16
 8013216:	fb09 1102 	mla	r1, r9, r2, r1
 801321a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801321e:	4567      	cmp	r7, ip
 8013220:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013224:	d8e6      	bhi.n	80131f4 <__multiply+0x10c>
 8013226:	9a01      	ldr	r2, [sp, #4]
 8013228:	50a9      	str	r1, [r5, r2]
 801322a:	3504      	adds	r5, #4
 801322c:	e79a      	b.n	8013164 <__multiply+0x7c>
 801322e:	3e01      	subs	r6, #1
 8013230:	e79c      	b.n	801316c <__multiply+0x84>
 8013232:	bf00      	nop
 8013234:	08015668 	.word	0x08015668
 8013238:	080156f4 	.word	0x080156f4

0801323c <__pow5mult>:
 801323c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013240:	4615      	mov	r5, r2
 8013242:	f012 0203 	ands.w	r2, r2, #3
 8013246:	4606      	mov	r6, r0
 8013248:	460f      	mov	r7, r1
 801324a:	d007      	beq.n	801325c <__pow5mult+0x20>
 801324c:	4c25      	ldr	r4, [pc, #148]	; (80132e4 <__pow5mult+0xa8>)
 801324e:	3a01      	subs	r2, #1
 8013250:	2300      	movs	r3, #0
 8013252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013256:	f7ff fe51 	bl	8012efc <__multadd>
 801325a:	4607      	mov	r7, r0
 801325c:	10ad      	asrs	r5, r5, #2
 801325e:	d03d      	beq.n	80132dc <__pow5mult+0xa0>
 8013260:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013262:	b97c      	cbnz	r4, 8013284 <__pow5mult+0x48>
 8013264:	2010      	movs	r0, #16
 8013266:	f7ff fdcd 	bl	8012e04 <malloc>
 801326a:	4602      	mov	r2, r0
 801326c:	6270      	str	r0, [r6, #36]	; 0x24
 801326e:	b928      	cbnz	r0, 801327c <__pow5mult+0x40>
 8013270:	4b1d      	ldr	r3, [pc, #116]	; (80132e8 <__pow5mult+0xac>)
 8013272:	481e      	ldr	r0, [pc, #120]	; (80132ec <__pow5mult+0xb0>)
 8013274:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013278:	f000 fd2c 	bl	8013cd4 <__assert_func>
 801327c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013280:	6004      	str	r4, [r0, #0]
 8013282:	60c4      	str	r4, [r0, #12]
 8013284:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801328c:	b94c      	cbnz	r4, 80132a2 <__pow5mult+0x66>
 801328e:	f240 2171 	movw	r1, #625	; 0x271
 8013292:	4630      	mov	r0, r6
 8013294:	f7ff ff12 	bl	80130bc <__i2b>
 8013298:	2300      	movs	r3, #0
 801329a:	f8c8 0008 	str.w	r0, [r8, #8]
 801329e:	4604      	mov	r4, r0
 80132a0:	6003      	str	r3, [r0, #0]
 80132a2:	f04f 0900 	mov.w	r9, #0
 80132a6:	07eb      	lsls	r3, r5, #31
 80132a8:	d50a      	bpl.n	80132c0 <__pow5mult+0x84>
 80132aa:	4639      	mov	r1, r7
 80132ac:	4622      	mov	r2, r4
 80132ae:	4630      	mov	r0, r6
 80132b0:	f7ff ff1a 	bl	80130e8 <__multiply>
 80132b4:	4639      	mov	r1, r7
 80132b6:	4680      	mov	r8, r0
 80132b8:	4630      	mov	r0, r6
 80132ba:	f7ff fdfd 	bl	8012eb8 <_Bfree>
 80132be:	4647      	mov	r7, r8
 80132c0:	106d      	asrs	r5, r5, #1
 80132c2:	d00b      	beq.n	80132dc <__pow5mult+0xa0>
 80132c4:	6820      	ldr	r0, [r4, #0]
 80132c6:	b938      	cbnz	r0, 80132d8 <__pow5mult+0x9c>
 80132c8:	4622      	mov	r2, r4
 80132ca:	4621      	mov	r1, r4
 80132cc:	4630      	mov	r0, r6
 80132ce:	f7ff ff0b 	bl	80130e8 <__multiply>
 80132d2:	6020      	str	r0, [r4, #0]
 80132d4:	f8c0 9000 	str.w	r9, [r0]
 80132d8:	4604      	mov	r4, r0
 80132da:	e7e4      	b.n	80132a6 <__pow5mult+0x6a>
 80132dc:	4638      	mov	r0, r7
 80132de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132e2:	bf00      	nop
 80132e4:	08015840 	.word	0x08015840
 80132e8:	080155f6 	.word	0x080155f6
 80132ec:	080156f4 	.word	0x080156f4

080132f0 <__lshift>:
 80132f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132f4:	460c      	mov	r4, r1
 80132f6:	6849      	ldr	r1, [r1, #4]
 80132f8:	6923      	ldr	r3, [r4, #16]
 80132fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80132fe:	68a3      	ldr	r3, [r4, #8]
 8013300:	4607      	mov	r7, r0
 8013302:	4691      	mov	r9, r2
 8013304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013308:	f108 0601 	add.w	r6, r8, #1
 801330c:	42b3      	cmp	r3, r6
 801330e:	db0b      	blt.n	8013328 <__lshift+0x38>
 8013310:	4638      	mov	r0, r7
 8013312:	f7ff fd91 	bl	8012e38 <_Balloc>
 8013316:	4605      	mov	r5, r0
 8013318:	b948      	cbnz	r0, 801332e <__lshift+0x3e>
 801331a:	4602      	mov	r2, r0
 801331c:	4b2a      	ldr	r3, [pc, #168]	; (80133c8 <__lshift+0xd8>)
 801331e:	482b      	ldr	r0, [pc, #172]	; (80133cc <__lshift+0xdc>)
 8013320:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013324:	f000 fcd6 	bl	8013cd4 <__assert_func>
 8013328:	3101      	adds	r1, #1
 801332a:	005b      	lsls	r3, r3, #1
 801332c:	e7ee      	b.n	801330c <__lshift+0x1c>
 801332e:	2300      	movs	r3, #0
 8013330:	f100 0114 	add.w	r1, r0, #20
 8013334:	f100 0210 	add.w	r2, r0, #16
 8013338:	4618      	mov	r0, r3
 801333a:	4553      	cmp	r3, sl
 801333c:	db37      	blt.n	80133ae <__lshift+0xbe>
 801333e:	6920      	ldr	r0, [r4, #16]
 8013340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013344:	f104 0314 	add.w	r3, r4, #20
 8013348:	f019 091f 	ands.w	r9, r9, #31
 801334c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013350:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013354:	d02f      	beq.n	80133b6 <__lshift+0xc6>
 8013356:	f1c9 0e20 	rsb	lr, r9, #32
 801335a:	468a      	mov	sl, r1
 801335c:	f04f 0c00 	mov.w	ip, #0
 8013360:	681a      	ldr	r2, [r3, #0]
 8013362:	fa02 f209 	lsl.w	r2, r2, r9
 8013366:	ea42 020c 	orr.w	r2, r2, ip
 801336a:	f84a 2b04 	str.w	r2, [sl], #4
 801336e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013372:	4298      	cmp	r0, r3
 8013374:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013378:	d8f2      	bhi.n	8013360 <__lshift+0x70>
 801337a:	1b03      	subs	r3, r0, r4
 801337c:	3b15      	subs	r3, #21
 801337e:	f023 0303 	bic.w	r3, r3, #3
 8013382:	3304      	adds	r3, #4
 8013384:	f104 0215 	add.w	r2, r4, #21
 8013388:	4290      	cmp	r0, r2
 801338a:	bf38      	it	cc
 801338c:	2304      	movcc	r3, #4
 801338e:	f841 c003 	str.w	ip, [r1, r3]
 8013392:	f1bc 0f00 	cmp.w	ip, #0
 8013396:	d001      	beq.n	801339c <__lshift+0xac>
 8013398:	f108 0602 	add.w	r6, r8, #2
 801339c:	3e01      	subs	r6, #1
 801339e:	4638      	mov	r0, r7
 80133a0:	612e      	str	r6, [r5, #16]
 80133a2:	4621      	mov	r1, r4
 80133a4:	f7ff fd88 	bl	8012eb8 <_Bfree>
 80133a8:	4628      	mov	r0, r5
 80133aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80133b2:	3301      	adds	r3, #1
 80133b4:	e7c1      	b.n	801333a <__lshift+0x4a>
 80133b6:	3904      	subs	r1, #4
 80133b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80133bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80133c0:	4298      	cmp	r0, r3
 80133c2:	d8f9      	bhi.n	80133b8 <__lshift+0xc8>
 80133c4:	e7ea      	b.n	801339c <__lshift+0xac>
 80133c6:	bf00      	nop
 80133c8:	08015668 	.word	0x08015668
 80133cc:	080156f4 	.word	0x080156f4

080133d0 <__mcmp>:
 80133d0:	b530      	push	{r4, r5, lr}
 80133d2:	6902      	ldr	r2, [r0, #16]
 80133d4:	690c      	ldr	r4, [r1, #16]
 80133d6:	1b12      	subs	r2, r2, r4
 80133d8:	d10e      	bne.n	80133f8 <__mcmp+0x28>
 80133da:	f100 0314 	add.w	r3, r0, #20
 80133de:	3114      	adds	r1, #20
 80133e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80133e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80133e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80133ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80133f0:	42a5      	cmp	r5, r4
 80133f2:	d003      	beq.n	80133fc <__mcmp+0x2c>
 80133f4:	d305      	bcc.n	8013402 <__mcmp+0x32>
 80133f6:	2201      	movs	r2, #1
 80133f8:	4610      	mov	r0, r2
 80133fa:	bd30      	pop	{r4, r5, pc}
 80133fc:	4283      	cmp	r3, r0
 80133fe:	d3f3      	bcc.n	80133e8 <__mcmp+0x18>
 8013400:	e7fa      	b.n	80133f8 <__mcmp+0x28>
 8013402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013406:	e7f7      	b.n	80133f8 <__mcmp+0x28>

08013408 <__mdiff>:
 8013408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801340c:	460c      	mov	r4, r1
 801340e:	4606      	mov	r6, r0
 8013410:	4611      	mov	r1, r2
 8013412:	4620      	mov	r0, r4
 8013414:	4690      	mov	r8, r2
 8013416:	f7ff ffdb 	bl	80133d0 <__mcmp>
 801341a:	1e05      	subs	r5, r0, #0
 801341c:	d110      	bne.n	8013440 <__mdiff+0x38>
 801341e:	4629      	mov	r1, r5
 8013420:	4630      	mov	r0, r6
 8013422:	f7ff fd09 	bl	8012e38 <_Balloc>
 8013426:	b930      	cbnz	r0, 8013436 <__mdiff+0x2e>
 8013428:	4b3a      	ldr	r3, [pc, #232]	; (8013514 <__mdiff+0x10c>)
 801342a:	4602      	mov	r2, r0
 801342c:	f240 2132 	movw	r1, #562	; 0x232
 8013430:	4839      	ldr	r0, [pc, #228]	; (8013518 <__mdiff+0x110>)
 8013432:	f000 fc4f 	bl	8013cd4 <__assert_func>
 8013436:	2301      	movs	r3, #1
 8013438:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801343c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013440:	bfa4      	itt	ge
 8013442:	4643      	movge	r3, r8
 8013444:	46a0      	movge	r8, r4
 8013446:	4630      	mov	r0, r6
 8013448:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801344c:	bfa6      	itte	ge
 801344e:	461c      	movge	r4, r3
 8013450:	2500      	movge	r5, #0
 8013452:	2501      	movlt	r5, #1
 8013454:	f7ff fcf0 	bl	8012e38 <_Balloc>
 8013458:	b920      	cbnz	r0, 8013464 <__mdiff+0x5c>
 801345a:	4b2e      	ldr	r3, [pc, #184]	; (8013514 <__mdiff+0x10c>)
 801345c:	4602      	mov	r2, r0
 801345e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013462:	e7e5      	b.n	8013430 <__mdiff+0x28>
 8013464:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013468:	6926      	ldr	r6, [r4, #16]
 801346a:	60c5      	str	r5, [r0, #12]
 801346c:	f104 0914 	add.w	r9, r4, #20
 8013470:	f108 0514 	add.w	r5, r8, #20
 8013474:	f100 0e14 	add.w	lr, r0, #20
 8013478:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801347c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013480:	f108 0210 	add.w	r2, r8, #16
 8013484:	46f2      	mov	sl, lr
 8013486:	2100      	movs	r1, #0
 8013488:	f859 3b04 	ldr.w	r3, [r9], #4
 801348c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013490:	fa1f f883 	uxth.w	r8, r3
 8013494:	fa11 f18b 	uxtah	r1, r1, fp
 8013498:	0c1b      	lsrs	r3, r3, #16
 801349a:	eba1 0808 	sub.w	r8, r1, r8
 801349e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80134a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80134a6:	fa1f f888 	uxth.w	r8, r8
 80134aa:	1419      	asrs	r1, r3, #16
 80134ac:	454e      	cmp	r6, r9
 80134ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80134b2:	f84a 3b04 	str.w	r3, [sl], #4
 80134b6:	d8e7      	bhi.n	8013488 <__mdiff+0x80>
 80134b8:	1b33      	subs	r3, r6, r4
 80134ba:	3b15      	subs	r3, #21
 80134bc:	f023 0303 	bic.w	r3, r3, #3
 80134c0:	3304      	adds	r3, #4
 80134c2:	3415      	adds	r4, #21
 80134c4:	42a6      	cmp	r6, r4
 80134c6:	bf38      	it	cc
 80134c8:	2304      	movcc	r3, #4
 80134ca:	441d      	add	r5, r3
 80134cc:	4473      	add	r3, lr
 80134ce:	469e      	mov	lr, r3
 80134d0:	462e      	mov	r6, r5
 80134d2:	4566      	cmp	r6, ip
 80134d4:	d30e      	bcc.n	80134f4 <__mdiff+0xec>
 80134d6:	f10c 0203 	add.w	r2, ip, #3
 80134da:	1b52      	subs	r2, r2, r5
 80134dc:	f022 0203 	bic.w	r2, r2, #3
 80134e0:	3d03      	subs	r5, #3
 80134e2:	45ac      	cmp	ip, r5
 80134e4:	bf38      	it	cc
 80134e6:	2200      	movcc	r2, #0
 80134e8:	441a      	add	r2, r3
 80134ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80134ee:	b17b      	cbz	r3, 8013510 <__mdiff+0x108>
 80134f0:	6107      	str	r7, [r0, #16]
 80134f2:	e7a3      	b.n	801343c <__mdiff+0x34>
 80134f4:	f856 8b04 	ldr.w	r8, [r6], #4
 80134f8:	fa11 f288 	uxtah	r2, r1, r8
 80134fc:	1414      	asrs	r4, r2, #16
 80134fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013502:	b292      	uxth	r2, r2
 8013504:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013508:	f84e 2b04 	str.w	r2, [lr], #4
 801350c:	1421      	asrs	r1, r4, #16
 801350e:	e7e0      	b.n	80134d2 <__mdiff+0xca>
 8013510:	3f01      	subs	r7, #1
 8013512:	e7ea      	b.n	80134ea <__mdiff+0xe2>
 8013514:	08015668 	.word	0x08015668
 8013518:	080156f4 	.word	0x080156f4

0801351c <__ulp>:
 801351c:	b082      	sub	sp, #8
 801351e:	ed8d 0b00 	vstr	d0, [sp]
 8013522:	9b01      	ldr	r3, [sp, #4]
 8013524:	4912      	ldr	r1, [pc, #72]	; (8013570 <__ulp+0x54>)
 8013526:	4019      	ands	r1, r3
 8013528:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801352c:	2900      	cmp	r1, #0
 801352e:	dd05      	ble.n	801353c <__ulp+0x20>
 8013530:	2200      	movs	r2, #0
 8013532:	460b      	mov	r3, r1
 8013534:	ec43 2b10 	vmov	d0, r2, r3
 8013538:	b002      	add	sp, #8
 801353a:	4770      	bx	lr
 801353c:	4249      	negs	r1, r1
 801353e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013542:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013546:	f04f 0200 	mov.w	r2, #0
 801354a:	f04f 0300 	mov.w	r3, #0
 801354e:	da04      	bge.n	801355a <__ulp+0x3e>
 8013550:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013554:	fa41 f300 	asr.w	r3, r1, r0
 8013558:	e7ec      	b.n	8013534 <__ulp+0x18>
 801355a:	f1a0 0114 	sub.w	r1, r0, #20
 801355e:	291e      	cmp	r1, #30
 8013560:	bfda      	itte	le
 8013562:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013566:	fa20 f101 	lsrle.w	r1, r0, r1
 801356a:	2101      	movgt	r1, #1
 801356c:	460a      	mov	r2, r1
 801356e:	e7e1      	b.n	8013534 <__ulp+0x18>
 8013570:	7ff00000 	.word	0x7ff00000

08013574 <__b2d>:
 8013574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013576:	6905      	ldr	r5, [r0, #16]
 8013578:	f100 0714 	add.w	r7, r0, #20
 801357c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013580:	1f2e      	subs	r6, r5, #4
 8013582:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013586:	4620      	mov	r0, r4
 8013588:	f7ff fd48 	bl	801301c <__hi0bits>
 801358c:	f1c0 0320 	rsb	r3, r0, #32
 8013590:	280a      	cmp	r0, #10
 8013592:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013610 <__b2d+0x9c>
 8013596:	600b      	str	r3, [r1, #0]
 8013598:	dc14      	bgt.n	80135c4 <__b2d+0x50>
 801359a:	f1c0 0e0b 	rsb	lr, r0, #11
 801359e:	fa24 f10e 	lsr.w	r1, r4, lr
 80135a2:	42b7      	cmp	r7, r6
 80135a4:	ea41 030c 	orr.w	r3, r1, ip
 80135a8:	bf34      	ite	cc
 80135aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80135ae:	2100      	movcs	r1, #0
 80135b0:	3015      	adds	r0, #21
 80135b2:	fa04 f000 	lsl.w	r0, r4, r0
 80135b6:	fa21 f10e 	lsr.w	r1, r1, lr
 80135ba:	ea40 0201 	orr.w	r2, r0, r1
 80135be:	ec43 2b10 	vmov	d0, r2, r3
 80135c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135c4:	42b7      	cmp	r7, r6
 80135c6:	bf3a      	itte	cc
 80135c8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80135cc:	f1a5 0608 	subcc.w	r6, r5, #8
 80135d0:	2100      	movcs	r1, #0
 80135d2:	380b      	subs	r0, #11
 80135d4:	d017      	beq.n	8013606 <__b2d+0x92>
 80135d6:	f1c0 0c20 	rsb	ip, r0, #32
 80135da:	fa04 f500 	lsl.w	r5, r4, r0
 80135de:	42be      	cmp	r6, r7
 80135e0:	fa21 f40c 	lsr.w	r4, r1, ip
 80135e4:	ea45 0504 	orr.w	r5, r5, r4
 80135e8:	bf8c      	ite	hi
 80135ea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80135ee:	2400      	movls	r4, #0
 80135f0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80135f4:	fa01 f000 	lsl.w	r0, r1, r0
 80135f8:	fa24 f40c 	lsr.w	r4, r4, ip
 80135fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013600:	ea40 0204 	orr.w	r2, r0, r4
 8013604:	e7db      	b.n	80135be <__b2d+0x4a>
 8013606:	ea44 030c 	orr.w	r3, r4, ip
 801360a:	460a      	mov	r2, r1
 801360c:	e7d7      	b.n	80135be <__b2d+0x4a>
 801360e:	bf00      	nop
 8013610:	3ff00000 	.word	0x3ff00000

08013614 <__d2b>:
 8013614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013618:	4689      	mov	r9, r1
 801361a:	2101      	movs	r1, #1
 801361c:	ec57 6b10 	vmov	r6, r7, d0
 8013620:	4690      	mov	r8, r2
 8013622:	f7ff fc09 	bl	8012e38 <_Balloc>
 8013626:	4604      	mov	r4, r0
 8013628:	b930      	cbnz	r0, 8013638 <__d2b+0x24>
 801362a:	4602      	mov	r2, r0
 801362c:	4b25      	ldr	r3, [pc, #148]	; (80136c4 <__d2b+0xb0>)
 801362e:	4826      	ldr	r0, [pc, #152]	; (80136c8 <__d2b+0xb4>)
 8013630:	f240 310a 	movw	r1, #778	; 0x30a
 8013634:	f000 fb4e 	bl	8013cd4 <__assert_func>
 8013638:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801363c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013640:	bb35      	cbnz	r5, 8013690 <__d2b+0x7c>
 8013642:	2e00      	cmp	r6, #0
 8013644:	9301      	str	r3, [sp, #4]
 8013646:	d028      	beq.n	801369a <__d2b+0x86>
 8013648:	4668      	mov	r0, sp
 801364a:	9600      	str	r6, [sp, #0]
 801364c:	f7ff fd06 	bl	801305c <__lo0bits>
 8013650:	9900      	ldr	r1, [sp, #0]
 8013652:	b300      	cbz	r0, 8013696 <__d2b+0x82>
 8013654:	9a01      	ldr	r2, [sp, #4]
 8013656:	f1c0 0320 	rsb	r3, r0, #32
 801365a:	fa02 f303 	lsl.w	r3, r2, r3
 801365e:	430b      	orrs	r3, r1
 8013660:	40c2      	lsrs	r2, r0
 8013662:	6163      	str	r3, [r4, #20]
 8013664:	9201      	str	r2, [sp, #4]
 8013666:	9b01      	ldr	r3, [sp, #4]
 8013668:	61a3      	str	r3, [r4, #24]
 801366a:	2b00      	cmp	r3, #0
 801366c:	bf14      	ite	ne
 801366e:	2202      	movne	r2, #2
 8013670:	2201      	moveq	r2, #1
 8013672:	6122      	str	r2, [r4, #16]
 8013674:	b1d5      	cbz	r5, 80136ac <__d2b+0x98>
 8013676:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801367a:	4405      	add	r5, r0
 801367c:	f8c9 5000 	str.w	r5, [r9]
 8013680:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013684:	f8c8 0000 	str.w	r0, [r8]
 8013688:	4620      	mov	r0, r4
 801368a:	b003      	add	sp, #12
 801368c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013694:	e7d5      	b.n	8013642 <__d2b+0x2e>
 8013696:	6161      	str	r1, [r4, #20]
 8013698:	e7e5      	b.n	8013666 <__d2b+0x52>
 801369a:	a801      	add	r0, sp, #4
 801369c:	f7ff fcde 	bl	801305c <__lo0bits>
 80136a0:	9b01      	ldr	r3, [sp, #4]
 80136a2:	6163      	str	r3, [r4, #20]
 80136a4:	2201      	movs	r2, #1
 80136a6:	6122      	str	r2, [r4, #16]
 80136a8:	3020      	adds	r0, #32
 80136aa:	e7e3      	b.n	8013674 <__d2b+0x60>
 80136ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80136b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80136b4:	f8c9 0000 	str.w	r0, [r9]
 80136b8:	6918      	ldr	r0, [r3, #16]
 80136ba:	f7ff fcaf 	bl	801301c <__hi0bits>
 80136be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80136c2:	e7df      	b.n	8013684 <__d2b+0x70>
 80136c4:	08015668 	.word	0x08015668
 80136c8:	080156f4 	.word	0x080156f4

080136cc <__ratio>:
 80136cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136d0:	4688      	mov	r8, r1
 80136d2:	4669      	mov	r1, sp
 80136d4:	4681      	mov	r9, r0
 80136d6:	f7ff ff4d 	bl	8013574 <__b2d>
 80136da:	a901      	add	r1, sp, #4
 80136dc:	4640      	mov	r0, r8
 80136de:	ec55 4b10 	vmov	r4, r5, d0
 80136e2:	f7ff ff47 	bl	8013574 <__b2d>
 80136e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80136ea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80136ee:	eba3 0c02 	sub.w	ip, r3, r2
 80136f2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80136f6:	1a9b      	subs	r3, r3, r2
 80136f8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80136fc:	ec51 0b10 	vmov	r0, r1, d0
 8013700:	2b00      	cmp	r3, #0
 8013702:	bfd6      	itet	le
 8013704:	460a      	movle	r2, r1
 8013706:	462a      	movgt	r2, r5
 8013708:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801370c:	468b      	mov	fp, r1
 801370e:	462f      	mov	r7, r5
 8013710:	bfd4      	ite	le
 8013712:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013716:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801371a:	4620      	mov	r0, r4
 801371c:	ee10 2a10 	vmov	r2, s0
 8013720:	465b      	mov	r3, fp
 8013722:	4639      	mov	r1, r7
 8013724:	f7ed f892 	bl	800084c <__aeabi_ddiv>
 8013728:	ec41 0b10 	vmov	d0, r0, r1
 801372c:	b003      	add	sp, #12
 801372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013732 <__copybits>:
 8013732:	3901      	subs	r1, #1
 8013734:	b570      	push	{r4, r5, r6, lr}
 8013736:	1149      	asrs	r1, r1, #5
 8013738:	6914      	ldr	r4, [r2, #16]
 801373a:	3101      	adds	r1, #1
 801373c:	f102 0314 	add.w	r3, r2, #20
 8013740:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013744:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013748:	1f05      	subs	r5, r0, #4
 801374a:	42a3      	cmp	r3, r4
 801374c:	d30c      	bcc.n	8013768 <__copybits+0x36>
 801374e:	1aa3      	subs	r3, r4, r2
 8013750:	3b11      	subs	r3, #17
 8013752:	f023 0303 	bic.w	r3, r3, #3
 8013756:	3211      	adds	r2, #17
 8013758:	42a2      	cmp	r2, r4
 801375a:	bf88      	it	hi
 801375c:	2300      	movhi	r3, #0
 801375e:	4418      	add	r0, r3
 8013760:	2300      	movs	r3, #0
 8013762:	4288      	cmp	r0, r1
 8013764:	d305      	bcc.n	8013772 <__copybits+0x40>
 8013766:	bd70      	pop	{r4, r5, r6, pc}
 8013768:	f853 6b04 	ldr.w	r6, [r3], #4
 801376c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013770:	e7eb      	b.n	801374a <__copybits+0x18>
 8013772:	f840 3b04 	str.w	r3, [r0], #4
 8013776:	e7f4      	b.n	8013762 <__copybits+0x30>

08013778 <__any_on>:
 8013778:	f100 0214 	add.w	r2, r0, #20
 801377c:	6900      	ldr	r0, [r0, #16]
 801377e:	114b      	asrs	r3, r1, #5
 8013780:	4298      	cmp	r0, r3
 8013782:	b510      	push	{r4, lr}
 8013784:	db11      	blt.n	80137aa <__any_on+0x32>
 8013786:	dd0a      	ble.n	801379e <__any_on+0x26>
 8013788:	f011 011f 	ands.w	r1, r1, #31
 801378c:	d007      	beq.n	801379e <__any_on+0x26>
 801378e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013792:	fa24 f001 	lsr.w	r0, r4, r1
 8013796:	fa00 f101 	lsl.w	r1, r0, r1
 801379a:	428c      	cmp	r4, r1
 801379c:	d10b      	bne.n	80137b6 <__any_on+0x3e>
 801379e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80137a2:	4293      	cmp	r3, r2
 80137a4:	d803      	bhi.n	80137ae <__any_on+0x36>
 80137a6:	2000      	movs	r0, #0
 80137a8:	bd10      	pop	{r4, pc}
 80137aa:	4603      	mov	r3, r0
 80137ac:	e7f7      	b.n	801379e <__any_on+0x26>
 80137ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80137b2:	2900      	cmp	r1, #0
 80137b4:	d0f5      	beq.n	80137a2 <__any_on+0x2a>
 80137b6:	2001      	movs	r0, #1
 80137b8:	e7f6      	b.n	80137a8 <__any_on+0x30>

080137ba <_calloc_r>:
 80137ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80137bc:	fba1 2402 	umull	r2, r4, r1, r2
 80137c0:	b94c      	cbnz	r4, 80137d6 <_calloc_r+0x1c>
 80137c2:	4611      	mov	r1, r2
 80137c4:	9201      	str	r2, [sp, #4]
 80137c6:	f000 f87b 	bl	80138c0 <_malloc_r>
 80137ca:	9a01      	ldr	r2, [sp, #4]
 80137cc:	4605      	mov	r5, r0
 80137ce:	b930      	cbnz	r0, 80137de <_calloc_r+0x24>
 80137d0:	4628      	mov	r0, r5
 80137d2:	b003      	add	sp, #12
 80137d4:	bd30      	pop	{r4, r5, pc}
 80137d6:	220c      	movs	r2, #12
 80137d8:	6002      	str	r2, [r0, #0]
 80137da:	2500      	movs	r5, #0
 80137dc:	e7f8      	b.n	80137d0 <_calloc_r+0x16>
 80137de:	4621      	mov	r1, r4
 80137e0:	f7fc fbcc 	bl	800ff7c <memset>
 80137e4:	e7f4      	b.n	80137d0 <_calloc_r+0x16>
	...

080137e8 <_free_r>:
 80137e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80137ea:	2900      	cmp	r1, #0
 80137ec:	d044      	beq.n	8013878 <_free_r+0x90>
 80137ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137f2:	9001      	str	r0, [sp, #4]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	f1a1 0404 	sub.w	r4, r1, #4
 80137fa:	bfb8      	it	lt
 80137fc:	18e4      	addlt	r4, r4, r3
 80137fe:	f000 fab3 	bl	8013d68 <__malloc_lock>
 8013802:	4a1e      	ldr	r2, [pc, #120]	; (801387c <_free_r+0x94>)
 8013804:	9801      	ldr	r0, [sp, #4]
 8013806:	6813      	ldr	r3, [r2, #0]
 8013808:	b933      	cbnz	r3, 8013818 <_free_r+0x30>
 801380a:	6063      	str	r3, [r4, #4]
 801380c:	6014      	str	r4, [r2, #0]
 801380e:	b003      	add	sp, #12
 8013810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013814:	f000 baae 	b.w	8013d74 <__malloc_unlock>
 8013818:	42a3      	cmp	r3, r4
 801381a:	d908      	bls.n	801382e <_free_r+0x46>
 801381c:	6825      	ldr	r5, [r4, #0]
 801381e:	1961      	adds	r1, r4, r5
 8013820:	428b      	cmp	r3, r1
 8013822:	bf01      	itttt	eq
 8013824:	6819      	ldreq	r1, [r3, #0]
 8013826:	685b      	ldreq	r3, [r3, #4]
 8013828:	1949      	addeq	r1, r1, r5
 801382a:	6021      	streq	r1, [r4, #0]
 801382c:	e7ed      	b.n	801380a <_free_r+0x22>
 801382e:	461a      	mov	r2, r3
 8013830:	685b      	ldr	r3, [r3, #4]
 8013832:	b10b      	cbz	r3, 8013838 <_free_r+0x50>
 8013834:	42a3      	cmp	r3, r4
 8013836:	d9fa      	bls.n	801382e <_free_r+0x46>
 8013838:	6811      	ldr	r1, [r2, #0]
 801383a:	1855      	adds	r5, r2, r1
 801383c:	42a5      	cmp	r5, r4
 801383e:	d10b      	bne.n	8013858 <_free_r+0x70>
 8013840:	6824      	ldr	r4, [r4, #0]
 8013842:	4421      	add	r1, r4
 8013844:	1854      	adds	r4, r2, r1
 8013846:	42a3      	cmp	r3, r4
 8013848:	6011      	str	r1, [r2, #0]
 801384a:	d1e0      	bne.n	801380e <_free_r+0x26>
 801384c:	681c      	ldr	r4, [r3, #0]
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	6053      	str	r3, [r2, #4]
 8013852:	4421      	add	r1, r4
 8013854:	6011      	str	r1, [r2, #0]
 8013856:	e7da      	b.n	801380e <_free_r+0x26>
 8013858:	d902      	bls.n	8013860 <_free_r+0x78>
 801385a:	230c      	movs	r3, #12
 801385c:	6003      	str	r3, [r0, #0]
 801385e:	e7d6      	b.n	801380e <_free_r+0x26>
 8013860:	6825      	ldr	r5, [r4, #0]
 8013862:	1961      	adds	r1, r4, r5
 8013864:	428b      	cmp	r3, r1
 8013866:	bf04      	itt	eq
 8013868:	6819      	ldreq	r1, [r3, #0]
 801386a:	685b      	ldreq	r3, [r3, #4]
 801386c:	6063      	str	r3, [r4, #4]
 801386e:	bf04      	itt	eq
 8013870:	1949      	addeq	r1, r1, r5
 8013872:	6021      	streq	r1, [r4, #0]
 8013874:	6054      	str	r4, [r2, #4]
 8013876:	e7ca      	b.n	801380e <_free_r+0x26>
 8013878:	b003      	add	sp, #12
 801387a:	bd30      	pop	{r4, r5, pc}
 801387c:	200063bc 	.word	0x200063bc

08013880 <sbrk_aligned>:
 8013880:	b570      	push	{r4, r5, r6, lr}
 8013882:	4e0e      	ldr	r6, [pc, #56]	; (80138bc <sbrk_aligned+0x3c>)
 8013884:	460c      	mov	r4, r1
 8013886:	6831      	ldr	r1, [r6, #0]
 8013888:	4605      	mov	r5, r0
 801388a:	b911      	cbnz	r1, 8013892 <sbrk_aligned+0x12>
 801388c:	f000 f9f0 	bl	8013c70 <_sbrk_r>
 8013890:	6030      	str	r0, [r6, #0]
 8013892:	4621      	mov	r1, r4
 8013894:	4628      	mov	r0, r5
 8013896:	f000 f9eb 	bl	8013c70 <_sbrk_r>
 801389a:	1c43      	adds	r3, r0, #1
 801389c:	d00a      	beq.n	80138b4 <sbrk_aligned+0x34>
 801389e:	1cc4      	adds	r4, r0, #3
 80138a0:	f024 0403 	bic.w	r4, r4, #3
 80138a4:	42a0      	cmp	r0, r4
 80138a6:	d007      	beq.n	80138b8 <sbrk_aligned+0x38>
 80138a8:	1a21      	subs	r1, r4, r0
 80138aa:	4628      	mov	r0, r5
 80138ac:	f000 f9e0 	bl	8013c70 <_sbrk_r>
 80138b0:	3001      	adds	r0, #1
 80138b2:	d101      	bne.n	80138b8 <sbrk_aligned+0x38>
 80138b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80138b8:	4620      	mov	r0, r4
 80138ba:	bd70      	pop	{r4, r5, r6, pc}
 80138bc:	200063c0 	.word	0x200063c0

080138c0 <_malloc_r>:
 80138c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138c4:	1ccd      	adds	r5, r1, #3
 80138c6:	f025 0503 	bic.w	r5, r5, #3
 80138ca:	3508      	adds	r5, #8
 80138cc:	2d0c      	cmp	r5, #12
 80138ce:	bf38      	it	cc
 80138d0:	250c      	movcc	r5, #12
 80138d2:	2d00      	cmp	r5, #0
 80138d4:	4607      	mov	r7, r0
 80138d6:	db01      	blt.n	80138dc <_malloc_r+0x1c>
 80138d8:	42a9      	cmp	r1, r5
 80138da:	d905      	bls.n	80138e8 <_malloc_r+0x28>
 80138dc:	230c      	movs	r3, #12
 80138de:	603b      	str	r3, [r7, #0]
 80138e0:	2600      	movs	r6, #0
 80138e2:	4630      	mov	r0, r6
 80138e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138e8:	4e2e      	ldr	r6, [pc, #184]	; (80139a4 <_malloc_r+0xe4>)
 80138ea:	f000 fa3d 	bl	8013d68 <__malloc_lock>
 80138ee:	6833      	ldr	r3, [r6, #0]
 80138f0:	461c      	mov	r4, r3
 80138f2:	bb34      	cbnz	r4, 8013942 <_malloc_r+0x82>
 80138f4:	4629      	mov	r1, r5
 80138f6:	4638      	mov	r0, r7
 80138f8:	f7ff ffc2 	bl	8013880 <sbrk_aligned>
 80138fc:	1c43      	adds	r3, r0, #1
 80138fe:	4604      	mov	r4, r0
 8013900:	d14d      	bne.n	801399e <_malloc_r+0xde>
 8013902:	6834      	ldr	r4, [r6, #0]
 8013904:	4626      	mov	r6, r4
 8013906:	2e00      	cmp	r6, #0
 8013908:	d140      	bne.n	801398c <_malloc_r+0xcc>
 801390a:	6823      	ldr	r3, [r4, #0]
 801390c:	4631      	mov	r1, r6
 801390e:	4638      	mov	r0, r7
 8013910:	eb04 0803 	add.w	r8, r4, r3
 8013914:	f000 f9ac 	bl	8013c70 <_sbrk_r>
 8013918:	4580      	cmp	r8, r0
 801391a:	d13a      	bne.n	8013992 <_malloc_r+0xd2>
 801391c:	6821      	ldr	r1, [r4, #0]
 801391e:	3503      	adds	r5, #3
 8013920:	1a6d      	subs	r5, r5, r1
 8013922:	f025 0503 	bic.w	r5, r5, #3
 8013926:	3508      	adds	r5, #8
 8013928:	2d0c      	cmp	r5, #12
 801392a:	bf38      	it	cc
 801392c:	250c      	movcc	r5, #12
 801392e:	4629      	mov	r1, r5
 8013930:	4638      	mov	r0, r7
 8013932:	f7ff ffa5 	bl	8013880 <sbrk_aligned>
 8013936:	3001      	adds	r0, #1
 8013938:	d02b      	beq.n	8013992 <_malloc_r+0xd2>
 801393a:	6823      	ldr	r3, [r4, #0]
 801393c:	442b      	add	r3, r5
 801393e:	6023      	str	r3, [r4, #0]
 8013940:	e00e      	b.n	8013960 <_malloc_r+0xa0>
 8013942:	6822      	ldr	r2, [r4, #0]
 8013944:	1b52      	subs	r2, r2, r5
 8013946:	d41e      	bmi.n	8013986 <_malloc_r+0xc6>
 8013948:	2a0b      	cmp	r2, #11
 801394a:	d916      	bls.n	801397a <_malloc_r+0xba>
 801394c:	1961      	adds	r1, r4, r5
 801394e:	42a3      	cmp	r3, r4
 8013950:	6025      	str	r5, [r4, #0]
 8013952:	bf18      	it	ne
 8013954:	6059      	strne	r1, [r3, #4]
 8013956:	6863      	ldr	r3, [r4, #4]
 8013958:	bf08      	it	eq
 801395a:	6031      	streq	r1, [r6, #0]
 801395c:	5162      	str	r2, [r4, r5]
 801395e:	604b      	str	r3, [r1, #4]
 8013960:	4638      	mov	r0, r7
 8013962:	f104 060b 	add.w	r6, r4, #11
 8013966:	f000 fa05 	bl	8013d74 <__malloc_unlock>
 801396a:	f026 0607 	bic.w	r6, r6, #7
 801396e:	1d23      	adds	r3, r4, #4
 8013970:	1af2      	subs	r2, r6, r3
 8013972:	d0b6      	beq.n	80138e2 <_malloc_r+0x22>
 8013974:	1b9b      	subs	r3, r3, r6
 8013976:	50a3      	str	r3, [r4, r2]
 8013978:	e7b3      	b.n	80138e2 <_malloc_r+0x22>
 801397a:	6862      	ldr	r2, [r4, #4]
 801397c:	42a3      	cmp	r3, r4
 801397e:	bf0c      	ite	eq
 8013980:	6032      	streq	r2, [r6, #0]
 8013982:	605a      	strne	r2, [r3, #4]
 8013984:	e7ec      	b.n	8013960 <_malloc_r+0xa0>
 8013986:	4623      	mov	r3, r4
 8013988:	6864      	ldr	r4, [r4, #4]
 801398a:	e7b2      	b.n	80138f2 <_malloc_r+0x32>
 801398c:	4634      	mov	r4, r6
 801398e:	6876      	ldr	r6, [r6, #4]
 8013990:	e7b9      	b.n	8013906 <_malloc_r+0x46>
 8013992:	230c      	movs	r3, #12
 8013994:	603b      	str	r3, [r7, #0]
 8013996:	4638      	mov	r0, r7
 8013998:	f000 f9ec 	bl	8013d74 <__malloc_unlock>
 801399c:	e7a1      	b.n	80138e2 <_malloc_r+0x22>
 801399e:	6025      	str	r5, [r4, #0]
 80139a0:	e7de      	b.n	8013960 <_malloc_r+0xa0>
 80139a2:	bf00      	nop
 80139a4:	200063bc 	.word	0x200063bc

080139a8 <__ssputs_r>:
 80139a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139ac:	688e      	ldr	r6, [r1, #8]
 80139ae:	429e      	cmp	r6, r3
 80139b0:	4682      	mov	sl, r0
 80139b2:	460c      	mov	r4, r1
 80139b4:	4690      	mov	r8, r2
 80139b6:	461f      	mov	r7, r3
 80139b8:	d838      	bhi.n	8013a2c <__ssputs_r+0x84>
 80139ba:	898a      	ldrh	r2, [r1, #12]
 80139bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80139c0:	d032      	beq.n	8013a28 <__ssputs_r+0x80>
 80139c2:	6825      	ldr	r5, [r4, #0]
 80139c4:	6909      	ldr	r1, [r1, #16]
 80139c6:	eba5 0901 	sub.w	r9, r5, r1
 80139ca:	6965      	ldr	r5, [r4, #20]
 80139cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80139d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80139d4:	3301      	adds	r3, #1
 80139d6:	444b      	add	r3, r9
 80139d8:	106d      	asrs	r5, r5, #1
 80139da:	429d      	cmp	r5, r3
 80139dc:	bf38      	it	cc
 80139de:	461d      	movcc	r5, r3
 80139e0:	0553      	lsls	r3, r2, #21
 80139e2:	d531      	bpl.n	8013a48 <__ssputs_r+0xa0>
 80139e4:	4629      	mov	r1, r5
 80139e6:	f7ff ff6b 	bl	80138c0 <_malloc_r>
 80139ea:	4606      	mov	r6, r0
 80139ec:	b950      	cbnz	r0, 8013a04 <__ssputs_r+0x5c>
 80139ee:	230c      	movs	r3, #12
 80139f0:	f8ca 3000 	str.w	r3, [sl]
 80139f4:	89a3      	ldrh	r3, [r4, #12]
 80139f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139fa:	81a3      	strh	r3, [r4, #12]
 80139fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a04:	6921      	ldr	r1, [r4, #16]
 8013a06:	464a      	mov	r2, r9
 8013a08:	f7fc faaa 	bl	800ff60 <memcpy>
 8013a0c:	89a3      	ldrh	r3, [r4, #12]
 8013a0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a16:	81a3      	strh	r3, [r4, #12]
 8013a18:	6126      	str	r6, [r4, #16]
 8013a1a:	6165      	str	r5, [r4, #20]
 8013a1c:	444e      	add	r6, r9
 8013a1e:	eba5 0509 	sub.w	r5, r5, r9
 8013a22:	6026      	str	r6, [r4, #0]
 8013a24:	60a5      	str	r5, [r4, #8]
 8013a26:	463e      	mov	r6, r7
 8013a28:	42be      	cmp	r6, r7
 8013a2a:	d900      	bls.n	8013a2e <__ssputs_r+0x86>
 8013a2c:	463e      	mov	r6, r7
 8013a2e:	6820      	ldr	r0, [r4, #0]
 8013a30:	4632      	mov	r2, r6
 8013a32:	4641      	mov	r1, r8
 8013a34:	f000 f97e 	bl	8013d34 <memmove>
 8013a38:	68a3      	ldr	r3, [r4, #8]
 8013a3a:	1b9b      	subs	r3, r3, r6
 8013a3c:	60a3      	str	r3, [r4, #8]
 8013a3e:	6823      	ldr	r3, [r4, #0]
 8013a40:	4433      	add	r3, r6
 8013a42:	6023      	str	r3, [r4, #0]
 8013a44:	2000      	movs	r0, #0
 8013a46:	e7db      	b.n	8013a00 <__ssputs_r+0x58>
 8013a48:	462a      	mov	r2, r5
 8013a4a:	f000 f999 	bl	8013d80 <_realloc_r>
 8013a4e:	4606      	mov	r6, r0
 8013a50:	2800      	cmp	r0, #0
 8013a52:	d1e1      	bne.n	8013a18 <__ssputs_r+0x70>
 8013a54:	6921      	ldr	r1, [r4, #16]
 8013a56:	4650      	mov	r0, sl
 8013a58:	f7ff fec6 	bl	80137e8 <_free_r>
 8013a5c:	e7c7      	b.n	80139ee <__ssputs_r+0x46>
	...

08013a60 <_svfiprintf_r>:
 8013a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a64:	4698      	mov	r8, r3
 8013a66:	898b      	ldrh	r3, [r1, #12]
 8013a68:	061b      	lsls	r3, r3, #24
 8013a6a:	b09d      	sub	sp, #116	; 0x74
 8013a6c:	4607      	mov	r7, r0
 8013a6e:	460d      	mov	r5, r1
 8013a70:	4614      	mov	r4, r2
 8013a72:	d50e      	bpl.n	8013a92 <_svfiprintf_r+0x32>
 8013a74:	690b      	ldr	r3, [r1, #16]
 8013a76:	b963      	cbnz	r3, 8013a92 <_svfiprintf_r+0x32>
 8013a78:	2140      	movs	r1, #64	; 0x40
 8013a7a:	f7ff ff21 	bl	80138c0 <_malloc_r>
 8013a7e:	6028      	str	r0, [r5, #0]
 8013a80:	6128      	str	r0, [r5, #16]
 8013a82:	b920      	cbnz	r0, 8013a8e <_svfiprintf_r+0x2e>
 8013a84:	230c      	movs	r3, #12
 8013a86:	603b      	str	r3, [r7, #0]
 8013a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a8c:	e0d1      	b.n	8013c32 <_svfiprintf_r+0x1d2>
 8013a8e:	2340      	movs	r3, #64	; 0x40
 8013a90:	616b      	str	r3, [r5, #20]
 8013a92:	2300      	movs	r3, #0
 8013a94:	9309      	str	r3, [sp, #36]	; 0x24
 8013a96:	2320      	movs	r3, #32
 8013a98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013aa0:	2330      	movs	r3, #48	; 0x30
 8013aa2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013c4c <_svfiprintf_r+0x1ec>
 8013aa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013aaa:	f04f 0901 	mov.w	r9, #1
 8013aae:	4623      	mov	r3, r4
 8013ab0:	469a      	mov	sl, r3
 8013ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ab6:	b10a      	cbz	r2, 8013abc <_svfiprintf_r+0x5c>
 8013ab8:	2a25      	cmp	r2, #37	; 0x25
 8013aba:	d1f9      	bne.n	8013ab0 <_svfiprintf_r+0x50>
 8013abc:	ebba 0b04 	subs.w	fp, sl, r4
 8013ac0:	d00b      	beq.n	8013ada <_svfiprintf_r+0x7a>
 8013ac2:	465b      	mov	r3, fp
 8013ac4:	4622      	mov	r2, r4
 8013ac6:	4629      	mov	r1, r5
 8013ac8:	4638      	mov	r0, r7
 8013aca:	f7ff ff6d 	bl	80139a8 <__ssputs_r>
 8013ace:	3001      	adds	r0, #1
 8013ad0:	f000 80aa 	beq.w	8013c28 <_svfiprintf_r+0x1c8>
 8013ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ad6:	445a      	add	r2, fp
 8013ad8:	9209      	str	r2, [sp, #36]	; 0x24
 8013ada:	f89a 3000 	ldrb.w	r3, [sl]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	f000 80a2 	beq.w	8013c28 <_svfiprintf_r+0x1c8>
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013aea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013aee:	f10a 0a01 	add.w	sl, sl, #1
 8013af2:	9304      	str	r3, [sp, #16]
 8013af4:	9307      	str	r3, [sp, #28]
 8013af6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013afa:	931a      	str	r3, [sp, #104]	; 0x68
 8013afc:	4654      	mov	r4, sl
 8013afe:	2205      	movs	r2, #5
 8013b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b04:	4851      	ldr	r0, [pc, #324]	; (8013c4c <_svfiprintf_r+0x1ec>)
 8013b06:	f7ec fb6b 	bl	80001e0 <memchr>
 8013b0a:	9a04      	ldr	r2, [sp, #16]
 8013b0c:	b9d8      	cbnz	r0, 8013b46 <_svfiprintf_r+0xe6>
 8013b0e:	06d0      	lsls	r0, r2, #27
 8013b10:	bf44      	itt	mi
 8013b12:	2320      	movmi	r3, #32
 8013b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b18:	0711      	lsls	r1, r2, #28
 8013b1a:	bf44      	itt	mi
 8013b1c:	232b      	movmi	r3, #43	; 0x2b
 8013b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b22:	f89a 3000 	ldrb.w	r3, [sl]
 8013b26:	2b2a      	cmp	r3, #42	; 0x2a
 8013b28:	d015      	beq.n	8013b56 <_svfiprintf_r+0xf6>
 8013b2a:	9a07      	ldr	r2, [sp, #28]
 8013b2c:	4654      	mov	r4, sl
 8013b2e:	2000      	movs	r0, #0
 8013b30:	f04f 0c0a 	mov.w	ip, #10
 8013b34:	4621      	mov	r1, r4
 8013b36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b3a:	3b30      	subs	r3, #48	; 0x30
 8013b3c:	2b09      	cmp	r3, #9
 8013b3e:	d94e      	bls.n	8013bde <_svfiprintf_r+0x17e>
 8013b40:	b1b0      	cbz	r0, 8013b70 <_svfiprintf_r+0x110>
 8013b42:	9207      	str	r2, [sp, #28]
 8013b44:	e014      	b.n	8013b70 <_svfiprintf_r+0x110>
 8013b46:	eba0 0308 	sub.w	r3, r0, r8
 8013b4a:	fa09 f303 	lsl.w	r3, r9, r3
 8013b4e:	4313      	orrs	r3, r2
 8013b50:	9304      	str	r3, [sp, #16]
 8013b52:	46a2      	mov	sl, r4
 8013b54:	e7d2      	b.n	8013afc <_svfiprintf_r+0x9c>
 8013b56:	9b03      	ldr	r3, [sp, #12]
 8013b58:	1d19      	adds	r1, r3, #4
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	9103      	str	r1, [sp, #12]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	bfbb      	ittet	lt
 8013b62:	425b      	neglt	r3, r3
 8013b64:	f042 0202 	orrlt.w	r2, r2, #2
 8013b68:	9307      	strge	r3, [sp, #28]
 8013b6a:	9307      	strlt	r3, [sp, #28]
 8013b6c:	bfb8      	it	lt
 8013b6e:	9204      	strlt	r2, [sp, #16]
 8013b70:	7823      	ldrb	r3, [r4, #0]
 8013b72:	2b2e      	cmp	r3, #46	; 0x2e
 8013b74:	d10c      	bne.n	8013b90 <_svfiprintf_r+0x130>
 8013b76:	7863      	ldrb	r3, [r4, #1]
 8013b78:	2b2a      	cmp	r3, #42	; 0x2a
 8013b7a:	d135      	bne.n	8013be8 <_svfiprintf_r+0x188>
 8013b7c:	9b03      	ldr	r3, [sp, #12]
 8013b7e:	1d1a      	adds	r2, r3, #4
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	9203      	str	r2, [sp, #12]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	bfb8      	it	lt
 8013b88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013b8c:	3402      	adds	r4, #2
 8013b8e:	9305      	str	r3, [sp, #20]
 8013b90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013c5c <_svfiprintf_r+0x1fc>
 8013b94:	7821      	ldrb	r1, [r4, #0]
 8013b96:	2203      	movs	r2, #3
 8013b98:	4650      	mov	r0, sl
 8013b9a:	f7ec fb21 	bl	80001e0 <memchr>
 8013b9e:	b140      	cbz	r0, 8013bb2 <_svfiprintf_r+0x152>
 8013ba0:	2340      	movs	r3, #64	; 0x40
 8013ba2:	eba0 000a 	sub.w	r0, r0, sl
 8013ba6:	fa03 f000 	lsl.w	r0, r3, r0
 8013baa:	9b04      	ldr	r3, [sp, #16]
 8013bac:	4303      	orrs	r3, r0
 8013bae:	3401      	adds	r4, #1
 8013bb0:	9304      	str	r3, [sp, #16]
 8013bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bb6:	4826      	ldr	r0, [pc, #152]	; (8013c50 <_svfiprintf_r+0x1f0>)
 8013bb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013bbc:	2206      	movs	r2, #6
 8013bbe:	f7ec fb0f 	bl	80001e0 <memchr>
 8013bc2:	2800      	cmp	r0, #0
 8013bc4:	d038      	beq.n	8013c38 <_svfiprintf_r+0x1d8>
 8013bc6:	4b23      	ldr	r3, [pc, #140]	; (8013c54 <_svfiprintf_r+0x1f4>)
 8013bc8:	bb1b      	cbnz	r3, 8013c12 <_svfiprintf_r+0x1b2>
 8013bca:	9b03      	ldr	r3, [sp, #12]
 8013bcc:	3307      	adds	r3, #7
 8013bce:	f023 0307 	bic.w	r3, r3, #7
 8013bd2:	3308      	adds	r3, #8
 8013bd4:	9303      	str	r3, [sp, #12]
 8013bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bd8:	4433      	add	r3, r6
 8013bda:	9309      	str	r3, [sp, #36]	; 0x24
 8013bdc:	e767      	b.n	8013aae <_svfiprintf_r+0x4e>
 8013bde:	fb0c 3202 	mla	r2, ip, r2, r3
 8013be2:	460c      	mov	r4, r1
 8013be4:	2001      	movs	r0, #1
 8013be6:	e7a5      	b.n	8013b34 <_svfiprintf_r+0xd4>
 8013be8:	2300      	movs	r3, #0
 8013bea:	3401      	adds	r4, #1
 8013bec:	9305      	str	r3, [sp, #20]
 8013bee:	4619      	mov	r1, r3
 8013bf0:	f04f 0c0a 	mov.w	ip, #10
 8013bf4:	4620      	mov	r0, r4
 8013bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013bfa:	3a30      	subs	r2, #48	; 0x30
 8013bfc:	2a09      	cmp	r2, #9
 8013bfe:	d903      	bls.n	8013c08 <_svfiprintf_r+0x1a8>
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d0c5      	beq.n	8013b90 <_svfiprintf_r+0x130>
 8013c04:	9105      	str	r1, [sp, #20]
 8013c06:	e7c3      	b.n	8013b90 <_svfiprintf_r+0x130>
 8013c08:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c0c:	4604      	mov	r4, r0
 8013c0e:	2301      	movs	r3, #1
 8013c10:	e7f0      	b.n	8013bf4 <_svfiprintf_r+0x194>
 8013c12:	ab03      	add	r3, sp, #12
 8013c14:	9300      	str	r3, [sp, #0]
 8013c16:	462a      	mov	r2, r5
 8013c18:	4b0f      	ldr	r3, [pc, #60]	; (8013c58 <_svfiprintf_r+0x1f8>)
 8013c1a:	a904      	add	r1, sp, #16
 8013c1c:	4638      	mov	r0, r7
 8013c1e:	f7fc fa55 	bl	80100cc <_printf_float>
 8013c22:	1c42      	adds	r2, r0, #1
 8013c24:	4606      	mov	r6, r0
 8013c26:	d1d6      	bne.n	8013bd6 <_svfiprintf_r+0x176>
 8013c28:	89ab      	ldrh	r3, [r5, #12]
 8013c2a:	065b      	lsls	r3, r3, #25
 8013c2c:	f53f af2c 	bmi.w	8013a88 <_svfiprintf_r+0x28>
 8013c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c32:	b01d      	add	sp, #116	; 0x74
 8013c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c38:	ab03      	add	r3, sp, #12
 8013c3a:	9300      	str	r3, [sp, #0]
 8013c3c:	462a      	mov	r2, r5
 8013c3e:	4b06      	ldr	r3, [pc, #24]	; (8013c58 <_svfiprintf_r+0x1f8>)
 8013c40:	a904      	add	r1, sp, #16
 8013c42:	4638      	mov	r0, r7
 8013c44:	f7fc fce6 	bl	8010614 <_printf_i>
 8013c48:	e7eb      	b.n	8013c22 <_svfiprintf_r+0x1c2>
 8013c4a:	bf00      	nop
 8013c4c:	0801584c 	.word	0x0801584c
 8013c50:	08015856 	.word	0x08015856
 8013c54:	080100cd 	.word	0x080100cd
 8013c58:	080139a9 	.word	0x080139a9
 8013c5c:	08015852 	.word	0x08015852

08013c60 <nan>:
 8013c60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013c68 <nan+0x8>
 8013c64:	4770      	bx	lr
 8013c66:	bf00      	nop
 8013c68:	00000000 	.word	0x00000000
 8013c6c:	7ff80000 	.word	0x7ff80000

08013c70 <_sbrk_r>:
 8013c70:	b538      	push	{r3, r4, r5, lr}
 8013c72:	4d06      	ldr	r5, [pc, #24]	; (8013c8c <_sbrk_r+0x1c>)
 8013c74:	2300      	movs	r3, #0
 8013c76:	4604      	mov	r4, r0
 8013c78:	4608      	mov	r0, r1
 8013c7a:	602b      	str	r3, [r5, #0]
 8013c7c:	f7f3 f964 	bl	8006f48 <_sbrk>
 8013c80:	1c43      	adds	r3, r0, #1
 8013c82:	d102      	bne.n	8013c8a <_sbrk_r+0x1a>
 8013c84:	682b      	ldr	r3, [r5, #0]
 8013c86:	b103      	cbz	r3, 8013c8a <_sbrk_r+0x1a>
 8013c88:	6023      	str	r3, [r4, #0]
 8013c8a:	bd38      	pop	{r3, r4, r5, pc}
 8013c8c:	200063c4 	.word	0x200063c4

08013c90 <strncmp>:
 8013c90:	b510      	push	{r4, lr}
 8013c92:	b17a      	cbz	r2, 8013cb4 <strncmp+0x24>
 8013c94:	4603      	mov	r3, r0
 8013c96:	3901      	subs	r1, #1
 8013c98:	1884      	adds	r4, r0, r2
 8013c9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013c9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013ca2:	4290      	cmp	r0, r2
 8013ca4:	d101      	bne.n	8013caa <strncmp+0x1a>
 8013ca6:	42a3      	cmp	r3, r4
 8013ca8:	d101      	bne.n	8013cae <strncmp+0x1e>
 8013caa:	1a80      	subs	r0, r0, r2
 8013cac:	bd10      	pop	{r4, pc}
 8013cae:	2800      	cmp	r0, #0
 8013cb0:	d1f3      	bne.n	8013c9a <strncmp+0xa>
 8013cb2:	e7fa      	b.n	8013caa <strncmp+0x1a>
 8013cb4:	4610      	mov	r0, r2
 8013cb6:	e7f9      	b.n	8013cac <strncmp+0x1c>

08013cb8 <__ascii_wctomb>:
 8013cb8:	b149      	cbz	r1, 8013cce <__ascii_wctomb+0x16>
 8013cba:	2aff      	cmp	r2, #255	; 0xff
 8013cbc:	bf85      	ittet	hi
 8013cbe:	238a      	movhi	r3, #138	; 0x8a
 8013cc0:	6003      	strhi	r3, [r0, #0]
 8013cc2:	700a      	strbls	r2, [r1, #0]
 8013cc4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013cc8:	bf98      	it	ls
 8013cca:	2001      	movls	r0, #1
 8013ccc:	4770      	bx	lr
 8013cce:	4608      	mov	r0, r1
 8013cd0:	4770      	bx	lr
	...

08013cd4 <__assert_func>:
 8013cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013cd6:	4614      	mov	r4, r2
 8013cd8:	461a      	mov	r2, r3
 8013cda:	4b09      	ldr	r3, [pc, #36]	; (8013d00 <__assert_func+0x2c>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	4605      	mov	r5, r0
 8013ce0:	68d8      	ldr	r0, [r3, #12]
 8013ce2:	b14c      	cbz	r4, 8013cf8 <__assert_func+0x24>
 8013ce4:	4b07      	ldr	r3, [pc, #28]	; (8013d04 <__assert_func+0x30>)
 8013ce6:	9100      	str	r1, [sp, #0]
 8013ce8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013cec:	4906      	ldr	r1, [pc, #24]	; (8013d08 <__assert_func+0x34>)
 8013cee:	462b      	mov	r3, r5
 8013cf0:	f000 f80e 	bl	8013d10 <fiprintf>
 8013cf4:	f000 fa8c 	bl	8014210 <abort>
 8013cf8:	4b04      	ldr	r3, [pc, #16]	; (8013d0c <__assert_func+0x38>)
 8013cfa:	461c      	mov	r4, r3
 8013cfc:	e7f3      	b.n	8013ce6 <__assert_func+0x12>
 8013cfe:	bf00      	nop
 8013d00:	20000014 	.word	0x20000014
 8013d04:	0801585d 	.word	0x0801585d
 8013d08:	0801586a 	.word	0x0801586a
 8013d0c:	08015898 	.word	0x08015898

08013d10 <fiprintf>:
 8013d10:	b40e      	push	{r1, r2, r3}
 8013d12:	b503      	push	{r0, r1, lr}
 8013d14:	4601      	mov	r1, r0
 8013d16:	ab03      	add	r3, sp, #12
 8013d18:	4805      	ldr	r0, [pc, #20]	; (8013d30 <fiprintf+0x20>)
 8013d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d1e:	6800      	ldr	r0, [r0, #0]
 8013d20:	9301      	str	r3, [sp, #4]
 8013d22:	f000 f885 	bl	8013e30 <_vfiprintf_r>
 8013d26:	b002      	add	sp, #8
 8013d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d2c:	b003      	add	sp, #12
 8013d2e:	4770      	bx	lr
 8013d30:	20000014 	.word	0x20000014

08013d34 <memmove>:
 8013d34:	4288      	cmp	r0, r1
 8013d36:	b510      	push	{r4, lr}
 8013d38:	eb01 0402 	add.w	r4, r1, r2
 8013d3c:	d902      	bls.n	8013d44 <memmove+0x10>
 8013d3e:	4284      	cmp	r4, r0
 8013d40:	4623      	mov	r3, r4
 8013d42:	d807      	bhi.n	8013d54 <memmove+0x20>
 8013d44:	1e43      	subs	r3, r0, #1
 8013d46:	42a1      	cmp	r1, r4
 8013d48:	d008      	beq.n	8013d5c <memmove+0x28>
 8013d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013d52:	e7f8      	b.n	8013d46 <memmove+0x12>
 8013d54:	4402      	add	r2, r0
 8013d56:	4601      	mov	r1, r0
 8013d58:	428a      	cmp	r2, r1
 8013d5a:	d100      	bne.n	8013d5e <memmove+0x2a>
 8013d5c:	bd10      	pop	{r4, pc}
 8013d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013d62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013d66:	e7f7      	b.n	8013d58 <memmove+0x24>

08013d68 <__malloc_lock>:
 8013d68:	4801      	ldr	r0, [pc, #4]	; (8013d70 <__malloc_lock+0x8>)
 8013d6a:	f000 bc11 	b.w	8014590 <__retarget_lock_acquire_recursive>
 8013d6e:	bf00      	nop
 8013d70:	200063c8 	.word	0x200063c8

08013d74 <__malloc_unlock>:
 8013d74:	4801      	ldr	r0, [pc, #4]	; (8013d7c <__malloc_unlock+0x8>)
 8013d76:	f000 bc0c 	b.w	8014592 <__retarget_lock_release_recursive>
 8013d7a:	bf00      	nop
 8013d7c:	200063c8 	.word	0x200063c8

08013d80 <_realloc_r>:
 8013d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d84:	4680      	mov	r8, r0
 8013d86:	4614      	mov	r4, r2
 8013d88:	460e      	mov	r6, r1
 8013d8a:	b921      	cbnz	r1, 8013d96 <_realloc_r+0x16>
 8013d8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d90:	4611      	mov	r1, r2
 8013d92:	f7ff bd95 	b.w	80138c0 <_malloc_r>
 8013d96:	b92a      	cbnz	r2, 8013da4 <_realloc_r+0x24>
 8013d98:	f7ff fd26 	bl	80137e8 <_free_r>
 8013d9c:	4625      	mov	r5, r4
 8013d9e:	4628      	mov	r0, r5
 8013da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013da4:	f000 fc5c 	bl	8014660 <_malloc_usable_size_r>
 8013da8:	4284      	cmp	r4, r0
 8013daa:	4607      	mov	r7, r0
 8013dac:	d802      	bhi.n	8013db4 <_realloc_r+0x34>
 8013dae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013db2:	d812      	bhi.n	8013dda <_realloc_r+0x5a>
 8013db4:	4621      	mov	r1, r4
 8013db6:	4640      	mov	r0, r8
 8013db8:	f7ff fd82 	bl	80138c0 <_malloc_r>
 8013dbc:	4605      	mov	r5, r0
 8013dbe:	2800      	cmp	r0, #0
 8013dc0:	d0ed      	beq.n	8013d9e <_realloc_r+0x1e>
 8013dc2:	42bc      	cmp	r4, r7
 8013dc4:	4622      	mov	r2, r4
 8013dc6:	4631      	mov	r1, r6
 8013dc8:	bf28      	it	cs
 8013dca:	463a      	movcs	r2, r7
 8013dcc:	f7fc f8c8 	bl	800ff60 <memcpy>
 8013dd0:	4631      	mov	r1, r6
 8013dd2:	4640      	mov	r0, r8
 8013dd4:	f7ff fd08 	bl	80137e8 <_free_r>
 8013dd8:	e7e1      	b.n	8013d9e <_realloc_r+0x1e>
 8013dda:	4635      	mov	r5, r6
 8013ddc:	e7df      	b.n	8013d9e <_realloc_r+0x1e>

08013dde <__sfputc_r>:
 8013dde:	6893      	ldr	r3, [r2, #8]
 8013de0:	3b01      	subs	r3, #1
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	b410      	push	{r4}
 8013de6:	6093      	str	r3, [r2, #8]
 8013de8:	da08      	bge.n	8013dfc <__sfputc_r+0x1e>
 8013dea:	6994      	ldr	r4, [r2, #24]
 8013dec:	42a3      	cmp	r3, r4
 8013dee:	db01      	blt.n	8013df4 <__sfputc_r+0x16>
 8013df0:	290a      	cmp	r1, #10
 8013df2:	d103      	bne.n	8013dfc <__sfputc_r+0x1e>
 8013df4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013df8:	f000 b94a 	b.w	8014090 <__swbuf_r>
 8013dfc:	6813      	ldr	r3, [r2, #0]
 8013dfe:	1c58      	adds	r0, r3, #1
 8013e00:	6010      	str	r0, [r2, #0]
 8013e02:	7019      	strb	r1, [r3, #0]
 8013e04:	4608      	mov	r0, r1
 8013e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e0a:	4770      	bx	lr

08013e0c <__sfputs_r>:
 8013e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e0e:	4606      	mov	r6, r0
 8013e10:	460f      	mov	r7, r1
 8013e12:	4614      	mov	r4, r2
 8013e14:	18d5      	adds	r5, r2, r3
 8013e16:	42ac      	cmp	r4, r5
 8013e18:	d101      	bne.n	8013e1e <__sfputs_r+0x12>
 8013e1a:	2000      	movs	r0, #0
 8013e1c:	e007      	b.n	8013e2e <__sfputs_r+0x22>
 8013e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e22:	463a      	mov	r2, r7
 8013e24:	4630      	mov	r0, r6
 8013e26:	f7ff ffda 	bl	8013dde <__sfputc_r>
 8013e2a:	1c43      	adds	r3, r0, #1
 8013e2c:	d1f3      	bne.n	8013e16 <__sfputs_r+0xa>
 8013e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013e30 <_vfiprintf_r>:
 8013e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e34:	460d      	mov	r5, r1
 8013e36:	b09d      	sub	sp, #116	; 0x74
 8013e38:	4614      	mov	r4, r2
 8013e3a:	4698      	mov	r8, r3
 8013e3c:	4606      	mov	r6, r0
 8013e3e:	b118      	cbz	r0, 8013e48 <_vfiprintf_r+0x18>
 8013e40:	6983      	ldr	r3, [r0, #24]
 8013e42:	b90b      	cbnz	r3, 8013e48 <_vfiprintf_r+0x18>
 8013e44:	f000 fb06 	bl	8014454 <__sinit>
 8013e48:	4b89      	ldr	r3, [pc, #548]	; (8014070 <_vfiprintf_r+0x240>)
 8013e4a:	429d      	cmp	r5, r3
 8013e4c:	d11b      	bne.n	8013e86 <_vfiprintf_r+0x56>
 8013e4e:	6875      	ldr	r5, [r6, #4]
 8013e50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e52:	07d9      	lsls	r1, r3, #31
 8013e54:	d405      	bmi.n	8013e62 <_vfiprintf_r+0x32>
 8013e56:	89ab      	ldrh	r3, [r5, #12]
 8013e58:	059a      	lsls	r2, r3, #22
 8013e5a:	d402      	bmi.n	8013e62 <_vfiprintf_r+0x32>
 8013e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e5e:	f000 fb97 	bl	8014590 <__retarget_lock_acquire_recursive>
 8013e62:	89ab      	ldrh	r3, [r5, #12]
 8013e64:	071b      	lsls	r3, r3, #28
 8013e66:	d501      	bpl.n	8013e6c <_vfiprintf_r+0x3c>
 8013e68:	692b      	ldr	r3, [r5, #16]
 8013e6a:	b9eb      	cbnz	r3, 8013ea8 <_vfiprintf_r+0x78>
 8013e6c:	4629      	mov	r1, r5
 8013e6e:	4630      	mov	r0, r6
 8013e70:	f000 f960 	bl	8014134 <__swsetup_r>
 8013e74:	b1c0      	cbz	r0, 8013ea8 <_vfiprintf_r+0x78>
 8013e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e78:	07dc      	lsls	r4, r3, #31
 8013e7a:	d50e      	bpl.n	8013e9a <_vfiprintf_r+0x6a>
 8013e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e80:	b01d      	add	sp, #116	; 0x74
 8013e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e86:	4b7b      	ldr	r3, [pc, #492]	; (8014074 <_vfiprintf_r+0x244>)
 8013e88:	429d      	cmp	r5, r3
 8013e8a:	d101      	bne.n	8013e90 <_vfiprintf_r+0x60>
 8013e8c:	68b5      	ldr	r5, [r6, #8]
 8013e8e:	e7df      	b.n	8013e50 <_vfiprintf_r+0x20>
 8013e90:	4b79      	ldr	r3, [pc, #484]	; (8014078 <_vfiprintf_r+0x248>)
 8013e92:	429d      	cmp	r5, r3
 8013e94:	bf08      	it	eq
 8013e96:	68f5      	ldreq	r5, [r6, #12]
 8013e98:	e7da      	b.n	8013e50 <_vfiprintf_r+0x20>
 8013e9a:	89ab      	ldrh	r3, [r5, #12]
 8013e9c:	0598      	lsls	r0, r3, #22
 8013e9e:	d4ed      	bmi.n	8013e7c <_vfiprintf_r+0x4c>
 8013ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013ea2:	f000 fb76 	bl	8014592 <__retarget_lock_release_recursive>
 8013ea6:	e7e9      	b.n	8013e7c <_vfiprintf_r+0x4c>
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8013eac:	2320      	movs	r3, #32
 8013eae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8013eb6:	2330      	movs	r3, #48	; 0x30
 8013eb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801407c <_vfiprintf_r+0x24c>
 8013ebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013ec0:	f04f 0901 	mov.w	r9, #1
 8013ec4:	4623      	mov	r3, r4
 8013ec6:	469a      	mov	sl, r3
 8013ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ecc:	b10a      	cbz	r2, 8013ed2 <_vfiprintf_r+0xa2>
 8013ece:	2a25      	cmp	r2, #37	; 0x25
 8013ed0:	d1f9      	bne.n	8013ec6 <_vfiprintf_r+0x96>
 8013ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8013ed6:	d00b      	beq.n	8013ef0 <_vfiprintf_r+0xc0>
 8013ed8:	465b      	mov	r3, fp
 8013eda:	4622      	mov	r2, r4
 8013edc:	4629      	mov	r1, r5
 8013ede:	4630      	mov	r0, r6
 8013ee0:	f7ff ff94 	bl	8013e0c <__sfputs_r>
 8013ee4:	3001      	adds	r0, #1
 8013ee6:	f000 80aa 	beq.w	801403e <_vfiprintf_r+0x20e>
 8013eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013eec:	445a      	add	r2, fp
 8013eee:	9209      	str	r2, [sp, #36]	; 0x24
 8013ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	f000 80a2 	beq.w	801403e <_vfiprintf_r+0x20e>
 8013efa:	2300      	movs	r3, #0
 8013efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f04:	f10a 0a01 	add.w	sl, sl, #1
 8013f08:	9304      	str	r3, [sp, #16]
 8013f0a:	9307      	str	r3, [sp, #28]
 8013f0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013f10:	931a      	str	r3, [sp, #104]	; 0x68
 8013f12:	4654      	mov	r4, sl
 8013f14:	2205      	movs	r2, #5
 8013f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f1a:	4858      	ldr	r0, [pc, #352]	; (801407c <_vfiprintf_r+0x24c>)
 8013f1c:	f7ec f960 	bl	80001e0 <memchr>
 8013f20:	9a04      	ldr	r2, [sp, #16]
 8013f22:	b9d8      	cbnz	r0, 8013f5c <_vfiprintf_r+0x12c>
 8013f24:	06d1      	lsls	r1, r2, #27
 8013f26:	bf44      	itt	mi
 8013f28:	2320      	movmi	r3, #32
 8013f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f2e:	0713      	lsls	r3, r2, #28
 8013f30:	bf44      	itt	mi
 8013f32:	232b      	movmi	r3, #43	; 0x2b
 8013f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f38:	f89a 3000 	ldrb.w	r3, [sl]
 8013f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8013f3e:	d015      	beq.n	8013f6c <_vfiprintf_r+0x13c>
 8013f40:	9a07      	ldr	r2, [sp, #28]
 8013f42:	4654      	mov	r4, sl
 8013f44:	2000      	movs	r0, #0
 8013f46:	f04f 0c0a 	mov.w	ip, #10
 8013f4a:	4621      	mov	r1, r4
 8013f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f50:	3b30      	subs	r3, #48	; 0x30
 8013f52:	2b09      	cmp	r3, #9
 8013f54:	d94e      	bls.n	8013ff4 <_vfiprintf_r+0x1c4>
 8013f56:	b1b0      	cbz	r0, 8013f86 <_vfiprintf_r+0x156>
 8013f58:	9207      	str	r2, [sp, #28]
 8013f5a:	e014      	b.n	8013f86 <_vfiprintf_r+0x156>
 8013f5c:	eba0 0308 	sub.w	r3, r0, r8
 8013f60:	fa09 f303 	lsl.w	r3, r9, r3
 8013f64:	4313      	orrs	r3, r2
 8013f66:	9304      	str	r3, [sp, #16]
 8013f68:	46a2      	mov	sl, r4
 8013f6a:	e7d2      	b.n	8013f12 <_vfiprintf_r+0xe2>
 8013f6c:	9b03      	ldr	r3, [sp, #12]
 8013f6e:	1d19      	adds	r1, r3, #4
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	9103      	str	r1, [sp, #12]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	bfbb      	ittet	lt
 8013f78:	425b      	neglt	r3, r3
 8013f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8013f7e:	9307      	strge	r3, [sp, #28]
 8013f80:	9307      	strlt	r3, [sp, #28]
 8013f82:	bfb8      	it	lt
 8013f84:	9204      	strlt	r2, [sp, #16]
 8013f86:	7823      	ldrb	r3, [r4, #0]
 8013f88:	2b2e      	cmp	r3, #46	; 0x2e
 8013f8a:	d10c      	bne.n	8013fa6 <_vfiprintf_r+0x176>
 8013f8c:	7863      	ldrb	r3, [r4, #1]
 8013f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8013f90:	d135      	bne.n	8013ffe <_vfiprintf_r+0x1ce>
 8013f92:	9b03      	ldr	r3, [sp, #12]
 8013f94:	1d1a      	adds	r2, r3, #4
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	9203      	str	r2, [sp, #12]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	bfb8      	it	lt
 8013f9e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013fa2:	3402      	adds	r4, #2
 8013fa4:	9305      	str	r3, [sp, #20]
 8013fa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801408c <_vfiprintf_r+0x25c>
 8013faa:	7821      	ldrb	r1, [r4, #0]
 8013fac:	2203      	movs	r2, #3
 8013fae:	4650      	mov	r0, sl
 8013fb0:	f7ec f916 	bl	80001e0 <memchr>
 8013fb4:	b140      	cbz	r0, 8013fc8 <_vfiprintf_r+0x198>
 8013fb6:	2340      	movs	r3, #64	; 0x40
 8013fb8:	eba0 000a 	sub.w	r0, r0, sl
 8013fbc:	fa03 f000 	lsl.w	r0, r3, r0
 8013fc0:	9b04      	ldr	r3, [sp, #16]
 8013fc2:	4303      	orrs	r3, r0
 8013fc4:	3401      	adds	r4, #1
 8013fc6:	9304      	str	r3, [sp, #16]
 8013fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fcc:	482c      	ldr	r0, [pc, #176]	; (8014080 <_vfiprintf_r+0x250>)
 8013fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013fd2:	2206      	movs	r2, #6
 8013fd4:	f7ec f904 	bl	80001e0 <memchr>
 8013fd8:	2800      	cmp	r0, #0
 8013fda:	d03f      	beq.n	801405c <_vfiprintf_r+0x22c>
 8013fdc:	4b29      	ldr	r3, [pc, #164]	; (8014084 <_vfiprintf_r+0x254>)
 8013fde:	bb1b      	cbnz	r3, 8014028 <_vfiprintf_r+0x1f8>
 8013fe0:	9b03      	ldr	r3, [sp, #12]
 8013fe2:	3307      	adds	r3, #7
 8013fe4:	f023 0307 	bic.w	r3, r3, #7
 8013fe8:	3308      	adds	r3, #8
 8013fea:	9303      	str	r3, [sp, #12]
 8013fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fee:	443b      	add	r3, r7
 8013ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ff2:	e767      	b.n	8013ec4 <_vfiprintf_r+0x94>
 8013ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ff8:	460c      	mov	r4, r1
 8013ffa:	2001      	movs	r0, #1
 8013ffc:	e7a5      	b.n	8013f4a <_vfiprintf_r+0x11a>
 8013ffe:	2300      	movs	r3, #0
 8014000:	3401      	adds	r4, #1
 8014002:	9305      	str	r3, [sp, #20]
 8014004:	4619      	mov	r1, r3
 8014006:	f04f 0c0a 	mov.w	ip, #10
 801400a:	4620      	mov	r0, r4
 801400c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014010:	3a30      	subs	r2, #48	; 0x30
 8014012:	2a09      	cmp	r2, #9
 8014014:	d903      	bls.n	801401e <_vfiprintf_r+0x1ee>
 8014016:	2b00      	cmp	r3, #0
 8014018:	d0c5      	beq.n	8013fa6 <_vfiprintf_r+0x176>
 801401a:	9105      	str	r1, [sp, #20]
 801401c:	e7c3      	b.n	8013fa6 <_vfiprintf_r+0x176>
 801401e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014022:	4604      	mov	r4, r0
 8014024:	2301      	movs	r3, #1
 8014026:	e7f0      	b.n	801400a <_vfiprintf_r+0x1da>
 8014028:	ab03      	add	r3, sp, #12
 801402a:	9300      	str	r3, [sp, #0]
 801402c:	462a      	mov	r2, r5
 801402e:	4b16      	ldr	r3, [pc, #88]	; (8014088 <_vfiprintf_r+0x258>)
 8014030:	a904      	add	r1, sp, #16
 8014032:	4630      	mov	r0, r6
 8014034:	f7fc f84a 	bl	80100cc <_printf_float>
 8014038:	4607      	mov	r7, r0
 801403a:	1c78      	adds	r0, r7, #1
 801403c:	d1d6      	bne.n	8013fec <_vfiprintf_r+0x1bc>
 801403e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014040:	07d9      	lsls	r1, r3, #31
 8014042:	d405      	bmi.n	8014050 <_vfiprintf_r+0x220>
 8014044:	89ab      	ldrh	r3, [r5, #12]
 8014046:	059a      	lsls	r2, r3, #22
 8014048:	d402      	bmi.n	8014050 <_vfiprintf_r+0x220>
 801404a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801404c:	f000 faa1 	bl	8014592 <__retarget_lock_release_recursive>
 8014050:	89ab      	ldrh	r3, [r5, #12]
 8014052:	065b      	lsls	r3, r3, #25
 8014054:	f53f af12 	bmi.w	8013e7c <_vfiprintf_r+0x4c>
 8014058:	9809      	ldr	r0, [sp, #36]	; 0x24
 801405a:	e711      	b.n	8013e80 <_vfiprintf_r+0x50>
 801405c:	ab03      	add	r3, sp, #12
 801405e:	9300      	str	r3, [sp, #0]
 8014060:	462a      	mov	r2, r5
 8014062:	4b09      	ldr	r3, [pc, #36]	; (8014088 <_vfiprintf_r+0x258>)
 8014064:	a904      	add	r1, sp, #16
 8014066:	4630      	mov	r0, r6
 8014068:	f7fc fad4 	bl	8010614 <_printf_i>
 801406c:	e7e4      	b.n	8014038 <_vfiprintf_r+0x208>
 801406e:	bf00      	nop
 8014070:	080158bc 	.word	0x080158bc
 8014074:	080158dc 	.word	0x080158dc
 8014078:	0801589c 	.word	0x0801589c
 801407c:	0801584c 	.word	0x0801584c
 8014080:	08015856 	.word	0x08015856
 8014084:	080100cd 	.word	0x080100cd
 8014088:	08013e0d 	.word	0x08013e0d
 801408c:	08015852 	.word	0x08015852

08014090 <__swbuf_r>:
 8014090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014092:	460e      	mov	r6, r1
 8014094:	4614      	mov	r4, r2
 8014096:	4605      	mov	r5, r0
 8014098:	b118      	cbz	r0, 80140a2 <__swbuf_r+0x12>
 801409a:	6983      	ldr	r3, [r0, #24]
 801409c:	b90b      	cbnz	r3, 80140a2 <__swbuf_r+0x12>
 801409e:	f000 f9d9 	bl	8014454 <__sinit>
 80140a2:	4b21      	ldr	r3, [pc, #132]	; (8014128 <__swbuf_r+0x98>)
 80140a4:	429c      	cmp	r4, r3
 80140a6:	d12b      	bne.n	8014100 <__swbuf_r+0x70>
 80140a8:	686c      	ldr	r4, [r5, #4]
 80140aa:	69a3      	ldr	r3, [r4, #24]
 80140ac:	60a3      	str	r3, [r4, #8]
 80140ae:	89a3      	ldrh	r3, [r4, #12]
 80140b0:	071a      	lsls	r2, r3, #28
 80140b2:	d52f      	bpl.n	8014114 <__swbuf_r+0x84>
 80140b4:	6923      	ldr	r3, [r4, #16]
 80140b6:	b36b      	cbz	r3, 8014114 <__swbuf_r+0x84>
 80140b8:	6923      	ldr	r3, [r4, #16]
 80140ba:	6820      	ldr	r0, [r4, #0]
 80140bc:	1ac0      	subs	r0, r0, r3
 80140be:	6963      	ldr	r3, [r4, #20]
 80140c0:	b2f6      	uxtb	r6, r6
 80140c2:	4283      	cmp	r3, r0
 80140c4:	4637      	mov	r7, r6
 80140c6:	dc04      	bgt.n	80140d2 <__swbuf_r+0x42>
 80140c8:	4621      	mov	r1, r4
 80140ca:	4628      	mov	r0, r5
 80140cc:	f000 f92e 	bl	801432c <_fflush_r>
 80140d0:	bb30      	cbnz	r0, 8014120 <__swbuf_r+0x90>
 80140d2:	68a3      	ldr	r3, [r4, #8]
 80140d4:	3b01      	subs	r3, #1
 80140d6:	60a3      	str	r3, [r4, #8]
 80140d8:	6823      	ldr	r3, [r4, #0]
 80140da:	1c5a      	adds	r2, r3, #1
 80140dc:	6022      	str	r2, [r4, #0]
 80140de:	701e      	strb	r6, [r3, #0]
 80140e0:	6963      	ldr	r3, [r4, #20]
 80140e2:	3001      	adds	r0, #1
 80140e4:	4283      	cmp	r3, r0
 80140e6:	d004      	beq.n	80140f2 <__swbuf_r+0x62>
 80140e8:	89a3      	ldrh	r3, [r4, #12]
 80140ea:	07db      	lsls	r3, r3, #31
 80140ec:	d506      	bpl.n	80140fc <__swbuf_r+0x6c>
 80140ee:	2e0a      	cmp	r6, #10
 80140f0:	d104      	bne.n	80140fc <__swbuf_r+0x6c>
 80140f2:	4621      	mov	r1, r4
 80140f4:	4628      	mov	r0, r5
 80140f6:	f000 f919 	bl	801432c <_fflush_r>
 80140fa:	b988      	cbnz	r0, 8014120 <__swbuf_r+0x90>
 80140fc:	4638      	mov	r0, r7
 80140fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014100:	4b0a      	ldr	r3, [pc, #40]	; (801412c <__swbuf_r+0x9c>)
 8014102:	429c      	cmp	r4, r3
 8014104:	d101      	bne.n	801410a <__swbuf_r+0x7a>
 8014106:	68ac      	ldr	r4, [r5, #8]
 8014108:	e7cf      	b.n	80140aa <__swbuf_r+0x1a>
 801410a:	4b09      	ldr	r3, [pc, #36]	; (8014130 <__swbuf_r+0xa0>)
 801410c:	429c      	cmp	r4, r3
 801410e:	bf08      	it	eq
 8014110:	68ec      	ldreq	r4, [r5, #12]
 8014112:	e7ca      	b.n	80140aa <__swbuf_r+0x1a>
 8014114:	4621      	mov	r1, r4
 8014116:	4628      	mov	r0, r5
 8014118:	f000 f80c 	bl	8014134 <__swsetup_r>
 801411c:	2800      	cmp	r0, #0
 801411e:	d0cb      	beq.n	80140b8 <__swbuf_r+0x28>
 8014120:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014124:	e7ea      	b.n	80140fc <__swbuf_r+0x6c>
 8014126:	bf00      	nop
 8014128:	080158bc 	.word	0x080158bc
 801412c:	080158dc 	.word	0x080158dc
 8014130:	0801589c 	.word	0x0801589c

08014134 <__swsetup_r>:
 8014134:	4b32      	ldr	r3, [pc, #200]	; (8014200 <__swsetup_r+0xcc>)
 8014136:	b570      	push	{r4, r5, r6, lr}
 8014138:	681d      	ldr	r5, [r3, #0]
 801413a:	4606      	mov	r6, r0
 801413c:	460c      	mov	r4, r1
 801413e:	b125      	cbz	r5, 801414a <__swsetup_r+0x16>
 8014140:	69ab      	ldr	r3, [r5, #24]
 8014142:	b913      	cbnz	r3, 801414a <__swsetup_r+0x16>
 8014144:	4628      	mov	r0, r5
 8014146:	f000 f985 	bl	8014454 <__sinit>
 801414a:	4b2e      	ldr	r3, [pc, #184]	; (8014204 <__swsetup_r+0xd0>)
 801414c:	429c      	cmp	r4, r3
 801414e:	d10f      	bne.n	8014170 <__swsetup_r+0x3c>
 8014150:	686c      	ldr	r4, [r5, #4]
 8014152:	89a3      	ldrh	r3, [r4, #12]
 8014154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014158:	0719      	lsls	r1, r3, #28
 801415a:	d42c      	bmi.n	80141b6 <__swsetup_r+0x82>
 801415c:	06dd      	lsls	r5, r3, #27
 801415e:	d411      	bmi.n	8014184 <__swsetup_r+0x50>
 8014160:	2309      	movs	r3, #9
 8014162:	6033      	str	r3, [r6, #0]
 8014164:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014168:	81a3      	strh	r3, [r4, #12]
 801416a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801416e:	e03e      	b.n	80141ee <__swsetup_r+0xba>
 8014170:	4b25      	ldr	r3, [pc, #148]	; (8014208 <__swsetup_r+0xd4>)
 8014172:	429c      	cmp	r4, r3
 8014174:	d101      	bne.n	801417a <__swsetup_r+0x46>
 8014176:	68ac      	ldr	r4, [r5, #8]
 8014178:	e7eb      	b.n	8014152 <__swsetup_r+0x1e>
 801417a:	4b24      	ldr	r3, [pc, #144]	; (801420c <__swsetup_r+0xd8>)
 801417c:	429c      	cmp	r4, r3
 801417e:	bf08      	it	eq
 8014180:	68ec      	ldreq	r4, [r5, #12]
 8014182:	e7e6      	b.n	8014152 <__swsetup_r+0x1e>
 8014184:	0758      	lsls	r0, r3, #29
 8014186:	d512      	bpl.n	80141ae <__swsetup_r+0x7a>
 8014188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801418a:	b141      	cbz	r1, 801419e <__swsetup_r+0x6a>
 801418c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014190:	4299      	cmp	r1, r3
 8014192:	d002      	beq.n	801419a <__swsetup_r+0x66>
 8014194:	4630      	mov	r0, r6
 8014196:	f7ff fb27 	bl	80137e8 <_free_r>
 801419a:	2300      	movs	r3, #0
 801419c:	6363      	str	r3, [r4, #52]	; 0x34
 801419e:	89a3      	ldrh	r3, [r4, #12]
 80141a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80141a4:	81a3      	strh	r3, [r4, #12]
 80141a6:	2300      	movs	r3, #0
 80141a8:	6063      	str	r3, [r4, #4]
 80141aa:	6923      	ldr	r3, [r4, #16]
 80141ac:	6023      	str	r3, [r4, #0]
 80141ae:	89a3      	ldrh	r3, [r4, #12]
 80141b0:	f043 0308 	orr.w	r3, r3, #8
 80141b4:	81a3      	strh	r3, [r4, #12]
 80141b6:	6923      	ldr	r3, [r4, #16]
 80141b8:	b94b      	cbnz	r3, 80141ce <__swsetup_r+0x9a>
 80141ba:	89a3      	ldrh	r3, [r4, #12]
 80141bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80141c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80141c4:	d003      	beq.n	80141ce <__swsetup_r+0x9a>
 80141c6:	4621      	mov	r1, r4
 80141c8:	4630      	mov	r0, r6
 80141ca:	f000 fa09 	bl	80145e0 <__smakebuf_r>
 80141ce:	89a0      	ldrh	r0, [r4, #12]
 80141d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80141d4:	f010 0301 	ands.w	r3, r0, #1
 80141d8:	d00a      	beq.n	80141f0 <__swsetup_r+0xbc>
 80141da:	2300      	movs	r3, #0
 80141dc:	60a3      	str	r3, [r4, #8]
 80141de:	6963      	ldr	r3, [r4, #20]
 80141e0:	425b      	negs	r3, r3
 80141e2:	61a3      	str	r3, [r4, #24]
 80141e4:	6923      	ldr	r3, [r4, #16]
 80141e6:	b943      	cbnz	r3, 80141fa <__swsetup_r+0xc6>
 80141e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80141ec:	d1ba      	bne.n	8014164 <__swsetup_r+0x30>
 80141ee:	bd70      	pop	{r4, r5, r6, pc}
 80141f0:	0781      	lsls	r1, r0, #30
 80141f2:	bf58      	it	pl
 80141f4:	6963      	ldrpl	r3, [r4, #20]
 80141f6:	60a3      	str	r3, [r4, #8]
 80141f8:	e7f4      	b.n	80141e4 <__swsetup_r+0xb0>
 80141fa:	2000      	movs	r0, #0
 80141fc:	e7f7      	b.n	80141ee <__swsetup_r+0xba>
 80141fe:	bf00      	nop
 8014200:	20000014 	.word	0x20000014
 8014204:	080158bc 	.word	0x080158bc
 8014208:	080158dc 	.word	0x080158dc
 801420c:	0801589c 	.word	0x0801589c

08014210 <abort>:
 8014210:	b508      	push	{r3, lr}
 8014212:	2006      	movs	r0, #6
 8014214:	f000 fa54 	bl	80146c0 <raise>
 8014218:	2001      	movs	r0, #1
 801421a:	f7f2 fe1d 	bl	8006e58 <_exit>
	...

08014220 <__sflush_r>:
 8014220:	898a      	ldrh	r2, [r1, #12]
 8014222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014226:	4605      	mov	r5, r0
 8014228:	0710      	lsls	r0, r2, #28
 801422a:	460c      	mov	r4, r1
 801422c:	d458      	bmi.n	80142e0 <__sflush_r+0xc0>
 801422e:	684b      	ldr	r3, [r1, #4]
 8014230:	2b00      	cmp	r3, #0
 8014232:	dc05      	bgt.n	8014240 <__sflush_r+0x20>
 8014234:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014236:	2b00      	cmp	r3, #0
 8014238:	dc02      	bgt.n	8014240 <__sflush_r+0x20>
 801423a:	2000      	movs	r0, #0
 801423c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014242:	2e00      	cmp	r6, #0
 8014244:	d0f9      	beq.n	801423a <__sflush_r+0x1a>
 8014246:	2300      	movs	r3, #0
 8014248:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801424c:	682f      	ldr	r7, [r5, #0]
 801424e:	602b      	str	r3, [r5, #0]
 8014250:	d032      	beq.n	80142b8 <__sflush_r+0x98>
 8014252:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014254:	89a3      	ldrh	r3, [r4, #12]
 8014256:	075a      	lsls	r2, r3, #29
 8014258:	d505      	bpl.n	8014266 <__sflush_r+0x46>
 801425a:	6863      	ldr	r3, [r4, #4]
 801425c:	1ac0      	subs	r0, r0, r3
 801425e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014260:	b10b      	cbz	r3, 8014266 <__sflush_r+0x46>
 8014262:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014264:	1ac0      	subs	r0, r0, r3
 8014266:	2300      	movs	r3, #0
 8014268:	4602      	mov	r2, r0
 801426a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801426c:	6a21      	ldr	r1, [r4, #32]
 801426e:	4628      	mov	r0, r5
 8014270:	47b0      	blx	r6
 8014272:	1c43      	adds	r3, r0, #1
 8014274:	89a3      	ldrh	r3, [r4, #12]
 8014276:	d106      	bne.n	8014286 <__sflush_r+0x66>
 8014278:	6829      	ldr	r1, [r5, #0]
 801427a:	291d      	cmp	r1, #29
 801427c:	d82c      	bhi.n	80142d8 <__sflush_r+0xb8>
 801427e:	4a2a      	ldr	r2, [pc, #168]	; (8014328 <__sflush_r+0x108>)
 8014280:	40ca      	lsrs	r2, r1
 8014282:	07d6      	lsls	r6, r2, #31
 8014284:	d528      	bpl.n	80142d8 <__sflush_r+0xb8>
 8014286:	2200      	movs	r2, #0
 8014288:	6062      	str	r2, [r4, #4]
 801428a:	04d9      	lsls	r1, r3, #19
 801428c:	6922      	ldr	r2, [r4, #16]
 801428e:	6022      	str	r2, [r4, #0]
 8014290:	d504      	bpl.n	801429c <__sflush_r+0x7c>
 8014292:	1c42      	adds	r2, r0, #1
 8014294:	d101      	bne.n	801429a <__sflush_r+0x7a>
 8014296:	682b      	ldr	r3, [r5, #0]
 8014298:	b903      	cbnz	r3, 801429c <__sflush_r+0x7c>
 801429a:	6560      	str	r0, [r4, #84]	; 0x54
 801429c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801429e:	602f      	str	r7, [r5, #0]
 80142a0:	2900      	cmp	r1, #0
 80142a2:	d0ca      	beq.n	801423a <__sflush_r+0x1a>
 80142a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80142a8:	4299      	cmp	r1, r3
 80142aa:	d002      	beq.n	80142b2 <__sflush_r+0x92>
 80142ac:	4628      	mov	r0, r5
 80142ae:	f7ff fa9b 	bl	80137e8 <_free_r>
 80142b2:	2000      	movs	r0, #0
 80142b4:	6360      	str	r0, [r4, #52]	; 0x34
 80142b6:	e7c1      	b.n	801423c <__sflush_r+0x1c>
 80142b8:	6a21      	ldr	r1, [r4, #32]
 80142ba:	2301      	movs	r3, #1
 80142bc:	4628      	mov	r0, r5
 80142be:	47b0      	blx	r6
 80142c0:	1c41      	adds	r1, r0, #1
 80142c2:	d1c7      	bne.n	8014254 <__sflush_r+0x34>
 80142c4:	682b      	ldr	r3, [r5, #0]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d0c4      	beq.n	8014254 <__sflush_r+0x34>
 80142ca:	2b1d      	cmp	r3, #29
 80142cc:	d001      	beq.n	80142d2 <__sflush_r+0xb2>
 80142ce:	2b16      	cmp	r3, #22
 80142d0:	d101      	bne.n	80142d6 <__sflush_r+0xb6>
 80142d2:	602f      	str	r7, [r5, #0]
 80142d4:	e7b1      	b.n	801423a <__sflush_r+0x1a>
 80142d6:	89a3      	ldrh	r3, [r4, #12]
 80142d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142dc:	81a3      	strh	r3, [r4, #12]
 80142de:	e7ad      	b.n	801423c <__sflush_r+0x1c>
 80142e0:	690f      	ldr	r7, [r1, #16]
 80142e2:	2f00      	cmp	r7, #0
 80142e4:	d0a9      	beq.n	801423a <__sflush_r+0x1a>
 80142e6:	0793      	lsls	r3, r2, #30
 80142e8:	680e      	ldr	r6, [r1, #0]
 80142ea:	bf08      	it	eq
 80142ec:	694b      	ldreq	r3, [r1, #20]
 80142ee:	600f      	str	r7, [r1, #0]
 80142f0:	bf18      	it	ne
 80142f2:	2300      	movne	r3, #0
 80142f4:	eba6 0807 	sub.w	r8, r6, r7
 80142f8:	608b      	str	r3, [r1, #8]
 80142fa:	f1b8 0f00 	cmp.w	r8, #0
 80142fe:	dd9c      	ble.n	801423a <__sflush_r+0x1a>
 8014300:	6a21      	ldr	r1, [r4, #32]
 8014302:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014304:	4643      	mov	r3, r8
 8014306:	463a      	mov	r2, r7
 8014308:	4628      	mov	r0, r5
 801430a:	47b0      	blx	r6
 801430c:	2800      	cmp	r0, #0
 801430e:	dc06      	bgt.n	801431e <__sflush_r+0xfe>
 8014310:	89a3      	ldrh	r3, [r4, #12]
 8014312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014316:	81a3      	strh	r3, [r4, #12]
 8014318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801431c:	e78e      	b.n	801423c <__sflush_r+0x1c>
 801431e:	4407      	add	r7, r0
 8014320:	eba8 0800 	sub.w	r8, r8, r0
 8014324:	e7e9      	b.n	80142fa <__sflush_r+0xda>
 8014326:	bf00      	nop
 8014328:	20400001 	.word	0x20400001

0801432c <_fflush_r>:
 801432c:	b538      	push	{r3, r4, r5, lr}
 801432e:	690b      	ldr	r3, [r1, #16]
 8014330:	4605      	mov	r5, r0
 8014332:	460c      	mov	r4, r1
 8014334:	b913      	cbnz	r3, 801433c <_fflush_r+0x10>
 8014336:	2500      	movs	r5, #0
 8014338:	4628      	mov	r0, r5
 801433a:	bd38      	pop	{r3, r4, r5, pc}
 801433c:	b118      	cbz	r0, 8014346 <_fflush_r+0x1a>
 801433e:	6983      	ldr	r3, [r0, #24]
 8014340:	b90b      	cbnz	r3, 8014346 <_fflush_r+0x1a>
 8014342:	f000 f887 	bl	8014454 <__sinit>
 8014346:	4b14      	ldr	r3, [pc, #80]	; (8014398 <_fflush_r+0x6c>)
 8014348:	429c      	cmp	r4, r3
 801434a:	d11b      	bne.n	8014384 <_fflush_r+0x58>
 801434c:	686c      	ldr	r4, [r5, #4]
 801434e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d0ef      	beq.n	8014336 <_fflush_r+0xa>
 8014356:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014358:	07d0      	lsls	r0, r2, #31
 801435a:	d404      	bmi.n	8014366 <_fflush_r+0x3a>
 801435c:	0599      	lsls	r1, r3, #22
 801435e:	d402      	bmi.n	8014366 <_fflush_r+0x3a>
 8014360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014362:	f000 f915 	bl	8014590 <__retarget_lock_acquire_recursive>
 8014366:	4628      	mov	r0, r5
 8014368:	4621      	mov	r1, r4
 801436a:	f7ff ff59 	bl	8014220 <__sflush_r>
 801436e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014370:	07da      	lsls	r2, r3, #31
 8014372:	4605      	mov	r5, r0
 8014374:	d4e0      	bmi.n	8014338 <_fflush_r+0xc>
 8014376:	89a3      	ldrh	r3, [r4, #12]
 8014378:	059b      	lsls	r3, r3, #22
 801437a:	d4dd      	bmi.n	8014338 <_fflush_r+0xc>
 801437c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801437e:	f000 f908 	bl	8014592 <__retarget_lock_release_recursive>
 8014382:	e7d9      	b.n	8014338 <_fflush_r+0xc>
 8014384:	4b05      	ldr	r3, [pc, #20]	; (801439c <_fflush_r+0x70>)
 8014386:	429c      	cmp	r4, r3
 8014388:	d101      	bne.n	801438e <_fflush_r+0x62>
 801438a:	68ac      	ldr	r4, [r5, #8]
 801438c:	e7df      	b.n	801434e <_fflush_r+0x22>
 801438e:	4b04      	ldr	r3, [pc, #16]	; (80143a0 <_fflush_r+0x74>)
 8014390:	429c      	cmp	r4, r3
 8014392:	bf08      	it	eq
 8014394:	68ec      	ldreq	r4, [r5, #12]
 8014396:	e7da      	b.n	801434e <_fflush_r+0x22>
 8014398:	080158bc 	.word	0x080158bc
 801439c:	080158dc 	.word	0x080158dc
 80143a0:	0801589c 	.word	0x0801589c

080143a4 <std>:
 80143a4:	2300      	movs	r3, #0
 80143a6:	b510      	push	{r4, lr}
 80143a8:	4604      	mov	r4, r0
 80143aa:	e9c0 3300 	strd	r3, r3, [r0]
 80143ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80143b2:	6083      	str	r3, [r0, #8]
 80143b4:	8181      	strh	r1, [r0, #12]
 80143b6:	6643      	str	r3, [r0, #100]	; 0x64
 80143b8:	81c2      	strh	r2, [r0, #14]
 80143ba:	6183      	str	r3, [r0, #24]
 80143bc:	4619      	mov	r1, r3
 80143be:	2208      	movs	r2, #8
 80143c0:	305c      	adds	r0, #92	; 0x5c
 80143c2:	f7fb fddb 	bl	800ff7c <memset>
 80143c6:	4b05      	ldr	r3, [pc, #20]	; (80143dc <std+0x38>)
 80143c8:	6263      	str	r3, [r4, #36]	; 0x24
 80143ca:	4b05      	ldr	r3, [pc, #20]	; (80143e0 <std+0x3c>)
 80143cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80143ce:	4b05      	ldr	r3, [pc, #20]	; (80143e4 <std+0x40>)
 80143d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80143d2:	4b05      	ldr	r3, [pc, #20]	; (80143e8 <std+0x44>)
 80143d4:	6224      	str	r4, [r4, #32]
 80143d6:	6323      	str	r3, [r4, #48]	; 0x30
 80143d8:	bd10      	pop	{r4, pc}
 80143da:	bf00      	nop
 80143dc:	080146f9 	.word	0x080146f9
 80143e0:	0801471b 	.word	0x0801471b
 80143e4:	08014753 	.word	0x08014753
 80143e8:	08014777 	.word	0x08014777

080143ec <_cleanup_r>:
 80143ec:	4901      	ldr	r1, [pc, #4]	; (80143f4 <_cleanup_r+0x8>)
 80143ee:	f000 b8af 	b.w	8014550 <_fwalk_reent>
 80143f2:	bf00      	nop
 80143f4:	0801432d 	.word	0x0801432d

080143f8 <__sfmoreglue>:
 80143f8:	b570      	push	{r4, r5, r6, lr}
 80143fa:	2268      	movs	r2, #104	; 0x68
 80143fc:	1e4d      	subs	r5, r1, #1
 80143fe:	4355      	muls	r5, r2
 8014400:	460e      	mov	r6, r1
 8014402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014406:	f7ff fa5b 	bl	80138c0 <_malloc_r>
 801440a:	4604      	mov	r4, r0
 801440c:	b140      	cbz	r0, 8014420 <__sfmoreglue+0x28>
 801440e:	2100      	movs	r1, #0
 8014410:	e9c0 1600 	strd	r1, r6, [r0]
 8014414:	300c      	adds	r0, #12
 8014416:	60a0      	str	r0, [r4, #8]
 8014418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801441c:	f7fb fdae 	bl	800ff7c <memset>
 8014420:	4620      	mov	r0, r4
 8014422:	bd70      	pop	{r4, r5, r6, pc}

08014424 <__sfp_lock_acquire>:
 8014424:	4801      	ldr	r0, [pc, #4]	; (801442c <__sfp_lock_acquire+0x8>)
 8014426:	f000 b8b3 	b.w	8014590 <__retarget_lock_acquire_recursive>
 801442a:	bf00      	nop
 801442c:	200063c9 	.word	0x200063c9

08014430 <__sfp_lock_release>:
 8014430:	4801      	ldr	r0, [pc, #4]	; (8014438 <__sfp_lock_release+0x8>)
 8014432:	f000 b8ae 	b.w	8014592 <__retarget_lock_release_recursive>
 8014436:	bf00      	nop
 8014438:	200063c9 	.word	0x200063c9

0801443c <__sinit_lock_acquire>:
 801443c:	4801      	ldr	r0, [pc, #4]	; (8014444 <__sinit_lock_acquire+0x8>)
 801443e:	f000 b8a7 	b.w	8014590 <__retarget_lock_acquire_recursive>
 8014442:	bf00      	nop
 8014444:	200063ca 	.word	0x200063ca

08014448 <__sinit_lock_release>:
 8014448:	4801      	ldr	r0, [pc, #4]	; (8014450 <__sinit_lock_release+0x8>)
 801444a:	f000 b8a2 	b.w	8014592 <__retarget_lock_release_recursive>
 801444e:	bf00      	nop
 8014450:	200063ca 	.word	0x200063ca

08014454 <__sinit>:
 8014454:	b510      	push	{r4, lr}
 8014456:	4604      	mov	r4, r0
 8014458:	f7ff fff0 	bl	801443c <__sinit_lock_acquire>
 801445c:	69a3      	ldr	r3, [r4, #24]
 801445e:	b11b      	cbz	r3, 8014468 <__sinit+0x14>
 8014460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014464:	f7ff bff0 	b.w	8014448 <__sinit_lock_release>
 8014468:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801446c:	6523      	str	r3, [r4, #80]	; 0x50
 801446e:	4b13      	ldr	r3, [pc, #76]	; (80144bc <__sinit+0x68>)
 8014470:	4a13      	ldr	r2, [pc, #76]	; (80144c0 <__sinit+0x6c>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	62a2      	str	r2, [r4, #40]	; 0x28
 8014476:	42a3      	cmp	r3, r4
 8014478:	bf04      	itt	eq
 801447a:	2301      	moveq	r3, #1
 801447c:	61a3      	streq	r3, [r4, #24]
 801447e:	4620      	mov	r0, r4
 8014480:	f000 f820 	bl	80144c4 <__sfp>
 8014484:	6060      	str	r0, [r4, #4]
 8014486:	4620      	mov	r0, r4
 8014488:	f000 f81c 	bl	80144c4 <__sfp>
 801448c:	60a0      	str	r0, [r4, #8]
 801448e:	4620      	mov	r0, r4
 8014490:	f000 f818 	bl	80144c4 <__sfp>
 8014494:	2200      	movs	r2, #0
 8014496:	60e0      	str	r0, [r4, #12]
 8014498:	2104      	movs	r1, #4
 801449a:	6860      	ldr	r0, [r4, #4]
 801449c:	f7ff ff82 	bl	80143a4 <std>
 80144a0:	68a0      	ldr	r0, [r4, #8]
 80144a2:	2201      	movs	r2, #1
 80144a4:	2109      	movs	r1, #9
 80144a6:	f7ff ff7d 	bl	80143a4 <std>
 80144aa:	68e0      	ldr	r0, [r4, #12]
 80144ac:	2202      	movs	r2, #2
 80144ae:	2112      	movs	r1, #18
 80144b0:	f7ff ff78 	bl	80143a4 <std>
 80144b4:	2301      	movs	r3, #1
 80144b6:	61a3      	str	r3, [r4, #24]
 80144b8:	e7d2      	b.n	8014460 <__sinit+0xc>
 80144ba:	bf00      	nop
 80144bc:	08015458 	.word	0x08015458
 80144c0:	080143ed 	.word	0x080143ed

080144c4 <__sfp>:
 80144c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144c6:	4607      	mov	r7, r0
 80144c8:	f7ff ffac 	bl	8014424 <__sfp_lock_acquire>
 80144cc:	4b1e      	ldr	r3, [pc, #120]	; (8014548 <__sfp+0x84>)
 80144ce:	681e      	ldr	r6, [r3, #0]
 80144d0:	69b3      	ldr	r3, [r6, #24]
 80144d2:	b913      	cbnz	r3, 80144da <__sfp+0x16>
 80144d4:	4630      	mov	r0, r6
 80144d6:	f7ff ffbd 	bl	8014454 <__sinit>
 80144da:	3648      	adds	r6, #72	; 0x48
 80144dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80144e0:	3b01      	subs	r3, #1
 80144e2:	d503      	bpl.n	80144ec <__sfp+0x28>
 80144e4:	6833      	ldr	r3, [r6, #0]
 80144e6:	b30b      	cbz	r3, 801452c <__sfp+0x68>
 80144e8:	6836      	ldr	r6, [r6, #0]
 80144ea:	e7f7      	b.n	80144dc <__sfp+0x18>
 80144ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80144f0:	b9d5      	cbnz	r5, 8014528 <__sfp+0x64>
 80144f2:	4b16      	ldr	r3, [pc, #88]	; (801454c <__sfp+0x88>)
 80144f4:	60e3      	str	r3, [r4, #12]
 80144f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80144fa:	6665      	str	r5, [r4, #100]	; 0x64
 80144fc:	f000 f847 	bl	801458e <__retarget_lock_init_recursive>
 8014500:	f7ff ff96 	bl	8014430 <__sfp_lock_release>
 8014504:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014508:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801450c:	6025      	str	r5, [r4, #0]
 801450e:	61a5      	str	r5, [r4, #24]
 8014510:	2208      	movs	r2, #8
 8014512:	4629      	mov	r1, r5
 8014514:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014518:	f7fb fd30 	bl	800ff7c <memset>
 801451c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014520:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014524:	4620      	mov	r0, r4
 8014526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014528:	3468      	adds	r4, #104	; 0x68
 801452a:	e7d9      	b.n	80144e0 <__sfp+0x1c>
 801452c:	2104      	movs	r1, #4
 801452e:	4638      	mov	r0, r7
 8014530:	f7ff ff62 	bl	80143f8 <__sfmoreglue>
 8014534:	4604      	mov	r4, r0
 8014536:	6030      	str	r0, [r6, #0]
 8014538:	2800      	cmp	r0, #0
 801453a:	d1d5      	bne.n	80144e8 <__sfp+0x24>
 801453c:	f7ff ff78 	bl	8014430 <__sfp_lock_release>
 8014540:	230c      	movs	r3, #12
 8014542:	603b      	str	r3, [r7, #0]
 8014544:	e7ee      	b.n	8014524 <__sfp+0x60>
 8014546:	bf00      	nop
 8014548:	08015458 	.word	0x08015458
 801454c:	ffff0001 	.word	0xffff0001

08014550 <_fwalk_reent>:
 8014550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014554:	4606      	mov	r6, r0
 8014556:	4688      	mov	r8, r1
 8014558:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801455c:	2700      	movs	r7, #0
 801455e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014562:	f1b9 0901 	subs.w	r9, r9, #1
 8014566:	d505      	bpl.n	8014574 <_fwalk_reent+0x24>
 8014568:	6824      	ldr	r4, [r4, #0]
 801456a:	2c00      	cmp	r4, #0
 801456c:	d1f7      	bne.n	801455e <_fwalk_reent+0xe>
 801456e:	4638      	mov	r0, r7
 8014570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014574:	89ab      	ldrh	r3, [r5, #12]
 8014576:	2b01      	cmp	r3, #1
 8014578:	d907      	bls.n	801458a <_fwalk_reent+0x3a>
 801457a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801457e:	3301      	adds	r3, #1
 8014580:	d003      	beq.n	801458a <_fwalk_reent+0x3a>
 8014582:	4629      	mov	r1, r5
 8014584:	4630      	mov	r0, r6
 8014586:	47c0      	blx	r8
 8014588:	4307      	orrs	r7, r0
 801458a:	3568      	adds	r5, #104	; 0x68
 801458c:	e7e9      	b.n	8014562 <_fwalk_reent+0x12>

0801458e <__retarget_lock_init_recursive>:
 801458e:	4770      	bx	lr

08014590 <__retarget_lock_acquire_recursive>:
 8014590:	4770      	bx	lr

08014592 <__retarget_lock_release_recursive>:
 8014592:	4770      	bx	lr

08014594 <__swhatbuf_r>:
 8014594:	b570      	push	{r4, r5, r6, lr}
 8014596:	460e      	mov	r6, r1
 8014598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801459c:	2900      	cmp	r1, #0
 801459e:	b096      	sub	sp, #88	; 0x58
 80145a0:	4614      	mov	r4, r2
 80145a2:	461d      	mov	r5, r3
 80145a4:	da08      	bge.n	80145b8 <__swhatbuf_r+0x24>
 80145a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80145aa:	2200      	movs	r2, #0
 80145ac:	602a      	str	r2, [r5, #0]
 80145ae:	061a      	lsls	r2, r3, #24
 80145b0:	d410      	bmi.n	80145d4 <__swhatbuf_r+0x40>
 80145b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80145b6:	e00e      	b.n	80145d6 <__swhatbuf_r+0x42>
 80145b8:	466a      	mov	r2, sp
 80145ba:	f000 f903 	bl	80147c4 <_fstat_r>
 80145be:	2800      	cmp	r0, #0
 80145c0:	dbf1      	blt.n	80145a6 <__swhatbuf_r+0x12>
 80145c2:	9a01      	ldr	r2, [sp, #4]
 80145c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80145c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80145cc:	425a      	negs	r2, r3
 80145ce:	415a      	adcs	r2, r3
 80145d0:	602a      	str	r2, [r5, #0]
 80145d2:	e7ee      	b.n	80145b2 <__swhatbuf_r+0x1e>
 80145d4:	2340      	movs	r3, #64	; 0x40
 80145d6:	2000      	movs	r0, #0
 80145d8:	6023      	str	r3, [r4, #0]
 80145da:	b016      	add	sp, #88	; 0x58
 80145dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080145e0 <__smakebuf_r>:
 80145e0:	898b      	ldrh	r3, [r1, #12]
 80145e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145e4:	079d      	lsls	r5, r3, #30
 80145e6:	4606      	mov	r6, r0
 80145e8:	460c      	mov	r4, r1
 80145ea:	d507      	bpl.n	80145fc <__smakebuf_r+0x1c>
 80145ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80145f0:	6023      	str	r3, [r4, #0]
 80145f2:	6123      	str	r3, [r4, #16]
 80145f4:	2301      	movs	r3, #1
 80145f6:	6163      	str	r3, [r4, #20]
 80145f8:	b002      	add	sp, #8
 80145fa:	bd70      	pop	{r4, r5, r6, pc}
 80145fc:	ab01      	add	r3, sp, #4
 80145fe:	466a      	mov	r2, sp
 8014600:	f7ff ffc8 	bl	8014594 <__swhatbuf_r>
 8014604:	9900      	ldr	r1, [sp, #0]
 8014606:	4605      	mov	r5, r0
 8014608:	4630      	mov	r0, r6
 801460a:	f7ff f959 	bl	80138c0 <_malloc_r>
 801460e:	b948      	cbnz	r0, 8014624 <__smakebuf_r+0x44>
 8014610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014614:	059a      	lsls	r2, r3, #22
 8014616:	d4ef      	bmi.n	80145f8 <__smakebuf_r+0x18>
 8014618:	f023 0303 	bic.w	r3, r3, #3
 801461c:	f043 0302 	orr.w	r3, r3, #2
 8014620:	81a3      	strh	r3, [r4, #12]
 8014622:	e7e3      	b.n	80145ec <__smakebuf_r+0xc>
 8014624:	4b0d      	ldr	r3, [pc, #52]	; (801465c <__smakebuf_r+0x7c>)
 8014626:	62b3      	str	r3, [r6, #40]	; 0x28
 8014628:	89a3      	ldrh	r3, [r4, #12]
 801462a:	6020      	str	r0, [r4, #0]
 801462c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014630:	81a3      	strh	r3, [r4, #12]
 8014632:	9b00      	ldr	r3, [sp, #0]
 8014634:	6163      	str	r3, [r4, #20]
 8014636:	9b01      	ldr	r3, [sp, #4]
 8014638:	6120      	str	r0, [r4, #16]
 801463a:	b15b      	cbz	r3, 8014654 <__smakebuf_r+0x74>
 801463c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014640:	4630      	mov	r0, r6
 8014642:	f000 f8d1 	bl	80147e8 <_isatty_r>
 8014646:	b128      	cbz	r0, 8014654 <__smakebuf_r+0x74>
 8014648:	89a3      	ldrh	r3, [r4, #12]
 801464a:	f023 0303 	bic.w	r3, r3, #3
 801464e:	f043 0301 	orr.w	r3, r3, #1
 8014652:	81a3      	strh	r3, [r4, #12]
 8014654:	89a0      	ldrh	r0, [r4, #12]
 8014656:	4305      	orrs	r5, r0
 8014658:	81a5      	strh	r5, [r4, #12]
 801465a:	e7cd      	b.n	80145f8 <__smakebuf_r+0x18>
 801465c:	080143ed 	.word	0x080143ed

08014660 <_malloc_usable_size_r>:
 8014660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014664:	1f18      	subs	r0, r3, #4
 8014666:	2b00      	cmp	r3, #0
 8014668:	bfbc      	itt	lt
 801466a:	580b      	ldrlt	r3, [r1, r0]
 801466c:	18c0      	addlt	r0, r0, r3
 801466e:	4770      	bx	lr

08014670 <_raise_r>:
 8014670:	291f      	cmp	r1, #31
 8014672:	b538      	push	{r3, r4, r5, lr}
 8014674:	4604      	mov	r4, r0
 8014676:	460d      	mov	r5, r1
 8014678:	d904      	bls.n	8014684 <_raise_r+0x14>
 801467a:	2316      	movs	r3, #22
 801467c:	6003      	str	r3, [r0, #0]
 801467e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014682:	bd38      	pop	{r3, r4, r5, pc}
 8014684:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014686:	b112      	cbz	r2, 801468e <_raise_r+0x1e>
 8014688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801468c:	b94b      	cbnz	r3, 80146a2 <_raise_r+0x32>
 801468e:	4620      	mov	r0, r4
 8014690:	f000 f830 	bl	80146f4 <_getpid_r>
 8014694:	462a      	mov	r2, r5
 8014696:	4601      	mov	r1, r0
 8014698:	4620      	mov	r0, r4
 801469a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801469e:	f000 b817 	b.w	80146d0 <_kill_r>
 80146a2:	2b01      	cmp	r3, #1
 80146a4:	d00a      	beq.n	80146bc <_raise_r+0x4c>
 80146a6:	1c59      	adds	r1, r3, #1
 80146a8:	d103      	bne.n	80146b2 <_raise_r+0x42>
 80146aa:	2316      	movs	r3, #22
 80146ac:	6003      	str	r3, [r0, #0]
 80146ae:	2001      	movs	r0, #1
 80146b0:	e7e7      	b.n	8014682 <_raise_r+0x12>
 80146b2:	2400      	movs	r4, #0
 80146b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80146b8:	4628      	mov	r0, r5
 80146ba:	4798      	blx	r3
 80146bc:	2000      	movs	r0, #0
 80146be:	e7e0      	b.n	8014682 <_raise_r+0x12>

080146c0 <raise>:
 80146c0:	4b02      	ldr	r3, [pc, #8]	; (80146cc <raise+0xc>)
 80146c2:	4601      	mov	r1, r0
 80146c4:	6818      	ldr	r0, [r3, #0]
 80146c6:	f7ff bfd3 	b.w	8014670 <_raise_r>
 80146ca:	bf00      	nop
 80146cc:	20000014 	.word	0x20000014

080146d0 <_kill_r>:
 80146d0:	b538      	push	{r3, r4, r5, lr}
 80146d2:	4d07      	ldr	r5, [pc, #28]	; (80146f0 <_kill_r+0x20>)
 80146d4:	2300      	movs	r3, #0
 80146d6:	4604      	mov	r4, r0
 80146d8:	4608      	mov	r0, r1
 80146da:	4611      	mov	r1, r2
 80146dc:	602b      	str	r3, [r5, #0]
 80146de:	f7f2 fbab 	bl	8006e38 <_kill>
 80146e2:	1c43      	adds	r3, r0, #1
 80146e4:	d102      	bne.n	80146ec <_kill_r+0x1c>
 80146e6:	682b      	ldr	r3, [r5, #0]
 80146e8:	b103      	cbz	r3, 80146ec <_kill_r+0x1c>
 80146ea:	6023      	str	r3, [r4, #0]
 80146ec:	bd38      	pop	{r3, r4, r5, pc}
 80146ee:	bf00      	nop
 80146f0:	200063c4 	.word	0x200063c4

080146f4 <_getpid_r>:
 80146f4:	f7f2 bb98 	b.w	8006e28 <_getpid>

080146f8 <__sread>:
 80146f8:	b510      	push	{r4, lr}
 80146fa:	460c      	mov	r4, r1
 80146fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014700:	f000 f894 	bl	801482c <_read_r>
 8014704:	2800      	cmp	r0, #0
 8014706:	bfab      	itete	ge
 8014708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801470a:	89a3      	ldrhlt	r3, [r4, #12]
 801470c:	181b      	addge	r3, r3, r0
 801470e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014712:	bfac      	ite	ge
 8014714:	6563      	strge	r3, [r4, #84]	; 0x54
 8014716:	81a3      	strhlt	r3, [r4, #12]
 8014718:	bd10      	pop	{r4, pc}

0801471a <__swrite>:
 801471a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801471e:	461f      	mov	r7, r3
 8014720:	898b      	ldrh	r3, [r1, #12]
 8014722:	05db      	lsls	r3, r3, #23
 8014724:	4605      	mov	r5, r0
 8014726:	460c      	mov	r4, r1
 8014728:	4616      	mov	r6, r2
 801472a:	d505      	bpl.n	8014738 <__swrite+0x1e>
 801472c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014730:	2302      	movs	r3, #2
 8014732:	2200      	movs	r2, #0
 8014734:	f000 f868 	bl	8014808 <_lseek_r>
 8014738:	89a3      	ldrh	r3, [r4, #12]
 801473a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801473e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014742:	81a3      	strh	r3, [r4, #12]
 8014744:	4632      	mov	r2, r6
 8014746:	463b      	mov	r3, r7
 8014748:	4628      	mov	r0, r5
 801474a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801474e:	f000 b817 	b.w	8014780 <_write_r>

08014752 <__sseek>:
 8014752:	b510      	push	{r4, lr}
 8014754:	460c      	mov	r4, r1
 8014756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801475a:	f000 f855 	bl	8014808 <_lseek_r>
 801475e:	1c43      	adds	r3, r0, #1
 8014760:	89a3      	ldrh	r3, [r4, #12]
 8014762:	bf15      	itete	ne
 8014764:	6560      	strne	r0, [r4, #84]	; 0x54
 8014766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801476a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801476e:	81a3      	strheq	r3, [r4, #12]
 8014770:	bf18      	it	ne
 8014772:	81a3      	strhne	r3, [r4, #12]
 8014774:	bd10      	pop	{r4, pc}

08014776 <__sclose>:
 8014776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801477a:	f000 b813 	b.w	80147a4 <_close_r>
	...

08014780 <_write_r>:
 8014780:	b538      	push	{r3, r4, r5, lr}
 8014782:	4d07      	ldr	r5, [pc, #28]	; (80147a0 <_write_r+0x20>)
 8014784:	4604      	mov	r4, r0
 8014786:	4608      	mov	r0, r1
 8014788:	4611      	mov	r1, r2
 801478a:	2200      	movs	r2, #0
 801478c:	602a      	str	r2, [r5, #0]
 801478e:	461a      	mov	r2, r3
 8014790:	f7f2 fb89 	bl	8006ea6 <_write>
 8014794:	1c43      	adds	r3, r0, #1
 8014796:	d102      	bne.n	801479e <_write_r+0x1e>
 8014798:	682b      	ldr	r3, [r5, #0]
 801479a:	b103      	cbz	r3, 801479e <_write_r+0x1e>
 801479c:	6023      	str	r3, [r4, #0]
 801479e:	bd38      	pop	{r3, r4, r5, pc}
 80147a0:	200063c4 	.word	0x200063c4

080147a4 <_close_r>:
 80147a4:	b538      	push	{r3, r4, r5, lr}
 80147a6:	4d06      	ldr	r5, [pc, #24]	; (80147c0 <_close_r+0x1c>)
 80147a8:	2300      	movs	r3, #0
 80147aa:	4604      	mov	r4, r0
 80147ac:	4608      	mov	r0, r1
 80147ae:	602b      	str	r3, [r5, #0]
 80147b0:	f7f2 fb95 	bl	8006ede <_close>
 80147b4:	1c43      	adds	r3, r0, #1
 80147b6:	d102      	bne.n	80147be <_close_r+0x1a>
 80147b8:	682b      	ldr	r3, [r5, #0]
 80147ba:	b103      	cbz	r3, 80147be <_close_r+0x1a>
 80147bc:	6023      	str	r3, [r4, #0]
 80147be:	bd38      	pop	{r3, r4, r5, pc}
 80147c0:	200063c4 	.word	0x200063c4

080147c4 <_fstat_r>:
 80147c4:	b538      	push	{r3, r4, r5, lr}
 80147c6:	4d07      	ldr	r5, [pc, #28]	; (80147e4 <_fstat_r+0x20>)
 80147c8:	2300      	movs	r3, #0
 80147ca:	4604      	mov	r4, r0
 80147cc:	4608      	mov	r0, r1
 80147ce:	4611      	mov	r1, r2
 80147d0:	602b      	str	r3, [r5, #0]
 80147d2:	f7f2 fb90 	bl	8006ef6 <_fstat>
 80147d6:	1c43      	adds	r3, r0, #1
 80147d8:	d102      	bne.n	80147e0 <_fstat_r+0x1c>
 80147da:	682b      	ldr	r3, [r5, #0]
 80147dc:	b103      	cbz	r3, 80147e0 <_fstat_r+0x1c>
 80147de:	6023      	str	r3, [r4, #0]
 80147e0:	bd38      	pop	{r3, r4, r5, pc}
 80147e2:	bf00      	nop
 80147e4:	200063c4 	.word	0x200063c4

080147e8 <_isatty_r>:
 80147e8:	b538      	push	{r3, r4, r5, lr}
 80147ea:	4d06      	ldr	r5, [pc, #24]	; (8014804 <_isatty_r+0x1c>)
 80147ec:	2300      	movs	r3, #0
 80147ee:	4604      	mov	r4, r0
 80147f0:	4608      	mov	r0, r1
 80147f2:	602b      	str	r3, [r5, #0]
 80147f4:	f7f2 fb8f 	bl	8006f16 <_isatty>
 80147f8:	1c43      	adds	r3, r0, #1
 80147fa:	d102      	bne.n	8014802 <_isatty_r+0x1a>
 80147fc:	682b      	ldr	r3, [r5, #0]
 80147fe:	b103      	cbz	r3, 8014802 <_isatty_r+0x1a>
 8014800:	6023      	str	r3, [r4, #0]
 8014802:	bd38      	pop	{r3, r4, r5, pc}
 8014804:	200063c4 	.word	0x200063c4

08014808 <_lseek_r>:
 8014808:	b538      	push	{r3, r4, r5, lr}
 801480a:	4d07      	ldr	r5, [pc, #28]	; (8014828 <_lseek_r+0x20>)
 801480c:	4604      	mov	r4, r0
 801480e:	4608      	mov	r0, r1
 8014810:	4611      	mov	r1, r2
 8014812:	2200      	movs	r2, #0
 8014814:	602a      	str	r2, [r5, #0]
 8014816:	461a      	mov	r2, r3
 8014818:	f7f2 fb88 	bl	8006f2c <_lseek>
 801481c:	1c43      	adds	r3, r0, #1
 801481e:	d102      	bne.n	8014826 <_lseek_r+0x1e>
 8014820:	682b      	ldr	r3, [r5, #0]
 8014822:	b103      	cbz	r3, 8014826 <_lseek_r+0x1e>
 8014824:	6023      	str	r3, [r4, #0]
 8014826:	bd38      	pop	{r3, r4, r5, pc}
 8014828:	200063c4 	.word	0x200063c4

0801482c <_read_r>:
 801482c:	b538      	push	{r3, r4, r5, lr}
 801482e:	4d07      	ldr	r5, [pc, #28]	; (801484c <_read_r+0x20>)
 8014830:	4604      	mov	r4, r0
 8014832:	4608      	mov	r0, r1
 8014834:	4611      	mov	r1, r2
 8014836:	2200      	movs	r2, #0
 8014838:	602a      	str	r2, [r5, #0]
 801483a:	461a      	mov	r2, r3
 801483c:	f7f2 fb16 	bl	8006e6c <_read>
 8014840:	1c43      	adds	r3, r0, #1
 8014842:	d102      	bne.n	801484a <_read_r+0x1e>
 8014844:	682b      	ldr	r3, [r5, #0]
 8014846:	b103      	cbz	r3, 801484a <_read_r+0x1e>
 8014848:	6023      	str	r3, [r4, #0]
 801484a:	bd38      	pop	{r3, r4, r5, pc}
 801484c:	200063c4 	.word	0x200063c4

08014850 <_init>:
 8014850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014852:	bf00      	nop
 8014854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014856:	bc08      	pop	{r3}
 8014858:	469e      	mov	lr, r3
 801485a:	4770      	bx	lr

0801485c <_fini>:
 801485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801485e:	bf00      	nop
 8014860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014862:	bc08      	pop	{r3}
 8014864:	469e      	mov	lr, r3
 8014866:	4770      	bx	lr
