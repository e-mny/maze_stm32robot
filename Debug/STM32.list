
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014498  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001084  08014628  08014628  00024628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080156ac  080156ac  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  080156ac  080156ac  000256ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080156b4  080156b4  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080156b4  080156b4  000256b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080156b8  080156b8  000256b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080156bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          000061e0  200001e8  200001e8  000301e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200063c8  200063c8  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e042  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a01  00000000  00000000  0004e25a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e8  00000000  00000000  00051c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d30  00000000  00000000  00053648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004ad5  00000000  00000000  00055378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001daf9  00000000  00000000  00059e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db4c3  00000000  00000000  00077946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00152e09  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000083f8  00000000  00000000  00152e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014610 	.word	0x08014610

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08014610 	.word	0x08014610

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffc:	f005 fef6 	bl	8006dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001000:	f000 f850 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001004:	f000 fb48 	bl	8001698 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001008:	f000 fa72 	bl	80014f0 <MX_TIM8_Init>
  MX_TIM1_Init();
 800100c:	f000 f8d6 	bl	80011bc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001010:	f000 fb18 	bl	8001644 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001014:	f000 f8a4 	bl	8001160 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001018:	f000 f96e 	bl	80012f8 <MX_TIM2_Init>
  MX_TIM4_Init();
 800101c:	f000 fa14 	bl	8001448 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001020:	f000 f9be 	bl	80013a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8001024:	f005 f9d2 	bl	80063cc <OLED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001028:	f00c f850 	bl	800d0cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <main+0x7c>)
 800102e:	2100      	movs	r1, #0
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <main+0x80>)
 8001032:	f00c f895 	bl	800d160 <osThreadNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a10      	ldr	r2, [pc, #64]	; (800107c <main+0x84>)
 800103a:	6013      	str	r3, [r2, #0]

  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(oled_show, NULL, &OLEDTask_attributes);
 800103c:	4a10      	ldr	r2, [pc, #64]	; (8001080 <main+0x88>)
 800103e:	2100      	movs	r1, #0
 8001040:	4810      	ldr	r0, [pc, #64]	; (8001084 <main+0x8c>)
 8001042:	f00c f88d 	bl	800d160 <osThreadNew>
 8001046:	4603      	mov	r3, r0
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <main+0x90>)
 800104a:	6013      	str	r3, [r2, #0]

  /* creation of GyroRead */
  GyroReadHandle = osThreadNew(gyro_read, NULL, &GyroRead_attributes);
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <main+0x94>)
 800104e:	2100      	movs	r1, #0
 8001050:	480f      	ldr	r0, [pc, #60]	; (8001090 <main+0x98>)
 8001052:	f00c f885 	bl	800d160 <osThreadNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <main+0x9c>)
 800105a:	6013      	str	r3, [r2, #0]

  /* creation of ServoMotor */
  ServoMotorHandle = osThreadNew(servoMotor, NULL, &ServoMotor_attributes);
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <main+0xa0>)
 800105e:	2100      	movs	r1, #0
 8001060:	480e      	ldr	r0, [pc, #56]	; (800109c <main+0xa4>)
 8001062:	f00c f87d 	bl	800d160 <osThreadNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <main+0xa8>)
 800106a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800106c:	f00c f852 	bl	800d114 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001070:	e7fe      	b.n	8001070 <main+0x78>
 8001072:	bf00      	nop
 8001074:	080146fc 	.word	0x080146fc
 8001078:	08005b11 	.word	0x08005b11
 800107c:	20000404 	.word	0x20000404
 8001080:	08014720 	.word	0x08014720
 8001084:	08005e5d 	.word	0x08005e5d
 8001088:	20000408 	.word	0x20000408
 800108c:	08014744 	.word	0x08014744
 8001090:	08005e69 	.word	0x08005e69
 8001094:	2000040c 	.word	0x2000040c
 8001098:	08014768 	.word	0x08014768
 800109c:	08006049 	.word	0x08006049
 80010a0:	20000410 	.word	0x20000410

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2230      	movs	r2, #48	; 0x30
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f00e fe42 	bl	800fd3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <SystemClock_Config+0xb4>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <SystemClock_Config+0xb4>)
 80010d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <SystemClock_Config+0xb4>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <SystemClock_Config+0xb8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <SystemClock_Config+0xb8>)
 80010ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <SystemClock_Config+0xb8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001100:	2302      	movs	r3, #2
 8001102:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001108:	2310      	movs	r3, #16
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f008 fe03 	bl	8009d20 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001120:	f004 ffa8 	bl	8006074 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f009 f866 	bl	800a210 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800114a:	f004 ff93 	bl	8006074 <Error_Handler>
  }
}
 800114e:	bf00      	nop
 8001150:	3750      	adds	r7, #80	; 0x50
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <MX_I2C1_Init+0x54>)
 8001168:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_I2C1_Init+0x50>)
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x58>)
 800116e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_I2C1_Init+0x50>)
 800117e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001182:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_I2C1_Init+0x50>)
 800119e:	f006 fa3d 	bl	800761c <HAL_I2C_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a8:	f004 ff64 	bl	8006074 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000204 	.word	0x20000204
 80011b4:	40005400 	.word	0x40005400
 80011b8:	00061a80 	.word	0x00061a80

080011bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b096      	sub	sp, #88	; 0x58
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2220      	movs	r2, #32
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00e fda1 	bl	800fd3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <MX_TIM1_Init+0x134>)
 80011fc:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <MX_TIM1_Init+0x138>)
 80011fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001200:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001202:	22a0      	movs	r2, #160	; 0xa0
 8001204:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800120c:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <MX_TIM1_Init+0x134>)
 800120e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001212:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <MX_TIM1_Init+0x134>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001226:	4832      	ldr	r0, [pc, #200]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001228:	f009 f9d2 	bl	800a5d0 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001232:	f004 ff1f 	bl	8006074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800123c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001240:	4619      	mov	r1, r3
 8001242:	482b      	ldr	r0, [pc, #172]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001244:	f00a f846 	bl	800b2d4 <HAL_TIM_ConfigClockSource>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800124e:	f004 ff11 	bl	8006074 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001252:	4827      	ldr	r0, [pc, #156]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001254:	f009 fa0b 	bl	800a66e <HAL_TIM_PWM_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800125e:	f004 ff09 	bl	8006074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800126a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800126e:	4619      	mov	r1, r3
 8001270:	481f      	ldr	r0, [pc, #124]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001272:	f00a fd9d 	bl	800bdb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800127c:	f004 fefa 	bl	8006074 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001280:	2360      	movs	r3, #96	; 0x60
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	220c      	movs	r2, #12
 800129e:	4619      	mov	r1, r3
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012a2:	f009 ff55 	bl	800b150 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80012ac:	f004 fee2 	bl	8006074 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012d4:	f00a fde8 	bl	800bea8 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80012de:	f004 fec9 	bl	8006074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012e2:	4803      	ldr	r0, [pc, #12]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012e4:	f005 fbb4 	bl	8006a50 <HAL_TIM_MspPostInit>

}
 80012e8:	bf00      	nop
 80012ea:	3758      	adds	r7, #88	; 0x58
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000258 	.word	0x20000258
 80012f4:	40010000 	.word	0x40010000

080012f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	; 0x30
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	2224      	movs	r2, #36	; 0x24
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f00e fd18 	bl	800fd3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_TIM2_Init+0xa4>)
 8001316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_TIM2_Init+0xa4>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_TIM2_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_TIM2_Init+0xa4>)
 800132a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM2_Init+0xa4>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_TIM2_Init+0xa4>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800133c:	2301      	movs	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001344:	2301      	movs	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001354:	2301      	movs	r3, #1
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_TIM2_Init+0xa4>)
 8001368:	f009 fc1a 	bl	800aba0 <HAL_TIM_Encoder_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001372:	f004 fe7f 	bl	8006074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_TIM2_Init+0xa4>)
 8001384:	f00a fd14 	bl	800bdb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800138e:	f004 fe71 	bl	8006074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3730      	adds	r7, #48	; 0x30
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200002a0 	.word	0x200002a0

080013a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013be:	4a21      	ldr	r2, [pc, #132]	; (8001444 <MX_TIM3_Init+0xa4>)
 80013c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013c4:	2247      	movs	r2, #71	; 0x47
 80013c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80013e2:	4817      	ldr	r0, [pc, #92]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013e4:	f009 fa64 	bl	800a8b0 <HAL_TIM_IC_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80013ee:	f004 fe41 	bl	8006074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4619      	mov	r1, r3
 8001400:	480f      	ldr	r0, [pc, #60]	; (8001440 <MX_TIM3_Init+0xa0>)
 8001402:	f00a fcd5 	bl	800bdb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800140c:	f004 fe32 	bl	8006074 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_TIM3_Init+0xa0>)
 8001428:	f009 fdf6 	bl	800b018 <HAL_TIM_IC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001432:	f004 fe1f 	bl	8006074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200002e8 	.word	0x200002e8
 8001444:	40000400 	.word	0x40000400

08001448 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2224      	movs	r2, #36	; 0x24
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f00e fc70 	bl	800fd3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001466:	4a21      	ldr	r2, [pc, #132]	; (80014ec <MX_TIM4_Init+0xa4>)
 8001468:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <MX_TIM4_Init+0xa0>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800148a:	2301      	movs	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014a2:	2301      	movs	r3, #1
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	4619      	mov	r1, r3
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <MX_TIM4_Init+0xa0>)
 80014b6:	f009 fb73 	bl	800aba0 <HAL_TIM_Encoder_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80014c0:	f004 fdd8 	bl	8006074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_TIM4_Init+0xa0>)
 80014d2:	f00a fc6d 	bl	800bdb0 <HAL_TIMEx_MasterConfigSynchronization>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80014dc:	f004 fdca 	bl	8006074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	3730      	adds	r7, #48	; 0x30
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000330 	.word	0x20000330
 80014ec:	40000800 	.word	0x40000800

080014f0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b096      	sub	sp, #88	; 0x58
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2220      	movs	r2, #32
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f00e fc07 	bl	800fd3c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800152e:	4b43      	ldr	r3, [pc, #268]	; (800163c <MX_TIM8_Init+0x14c>)
 8001530:	4a43      	ldr	r2, [pc, #268]	; (8001640 <MX_TIM8_Init+0x150>)
 8001532:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001534:	4b41      	ldr	r3, [pc, #260]	; (800163c <MX_TIM8_Init+0x14c>)
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b40      	ldr	r3, [pc, #256]	; (800163c <MX_TIM8_Init+0x14c>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001540:	4b3e      	ldr	r3, [pc, #248]	; (800163c <MX_TIM8_Init+0x14c>)
 8001542:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001546:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001548:	4b3c      	ldr	r3, [pc, #240]	; (800163c <MX_TIM8_Init+0x14c>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <MX_TIM8_Init+0x14c>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001554:	4b39      	ldr	r3, [pc, #228]	; (800163c <MX_TIM8_Init+0x14c>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800155a:	4838      	ldr	r0, [pc, #224]	; (800163c <MX_TIM8_Init+0x14c>)
 800155c:	f009 f838 	bl	800a5d0 <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001566:	f004 fd85 	bl	8006074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001570:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001574:	4619      	mov	r1, r3
 8001576:	4831      	ldr	r0, [pc, #196]	; (800163c <MX_TIM8_Init+0x14c>)
 8001578:	f009 feac 	bl	800b2d4 <HAL_TIM_ConfigClockSource>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001582:	f004 fd77 	bl	8006074 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001586:	482d      	ldr	r0, [pc, #180]	; (800163c <MX_TIM8_Init+0x14c>)
 8001588:	f009 f871 	bl	800a66e <HAL_TIM_PWM_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001592:	f004 fd6f 	bl	8006074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800159e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015a2:	4619      	mov	r1, r3
 80015a4:	4825      	ldr	r0, [pc, #148]	; (800163c <MX_TIM8_Init+0x14c>)
 80015a6:	f00a fc03 	bl	800bdb0 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80015b0:	f004 fd60 	bl	8006074 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b4:	2360      	movs	r3, #96	; 0x60
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4818      	ldr	r0, [pc, #96]	; (800163c <MX_TIM8_Init+0x14c>)
 80015da:	f009 fdb9 	bl	800b150 <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80015e4:	f004 fd46 	bl	8006074 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	2208      	movs	r2, #8
 80015ee:	4619      	mov	r1, r3
 80015f0:	4812      	ldr	r0, [pc, #72]	; (800163c <MX_TIM8_Init+0x14c>)
 80015f2:	f009 fdad 	bl	800b150 <HAL_TIM_PWM_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80015fc:	f004 fd3a 	bl	8006074 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001618:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <MX_TIM8_Init+0x14c>)
 8001624:	f00a fc40 	bl	800bea8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800162e:	f004 fd21 	bl	8006074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	3758      	adds	r7, #88	; 0x58
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000378 	.word	0x20000378
 8001640:	40010400 	.word	0x40010400

08001644 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_USART3_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800167c:	f00a fc7a 	bl	800bf74 <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001686:	f004 fcf5 	bl	8006074 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200003c0 	.word	0x200003c0
 8001694:	40004800 	.word	0x40004800

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b3a      	ldr	r3, [pc, #232]	; (800179c <MX_GPIO_Init+0x104>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a39      	ldr	r2, [pc, #228]	; (800179c <MX_GPIO_Init+0x104>)
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <MX_GPIO_Init+0x104>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b33      	ldr	r3, [pc, #204]	; (800179c <MX_GPIO_Init+0x104>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a32      	ldr	r2, [pc, #200]	; (800179c <MX_GPIO_Init+0x104>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b30      	ldr	r3, [pc, #192]	; (800179c <MX_GPIO_Init+0x104>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <MX_GPIO_Init+0x104>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a2b      	ldr	r2, [pc, #172]	; (800179c <MX_GPIO_Init+0x104>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <MX_GPIO_Init+0x104>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <MX_GPIO_Init+0x104>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a24      	ldr	r2, [pc, #144]	; (800179c <MX_GPIO_Init+0x104>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <MX_GPIO_Init+0x104>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800171e:	2200      	movs	r2, #0
 8001720:	f44f 51bf 	mov.w	r1, #6112	; 0x17e0
 8001724:	481e      	ldr	r0, [pc, #120]	; (80017a0 <MX_GPIO_Init+0x108>)
 8001726:	f005 ff45 	bl	80075b4 <HAL_GPIO_WritePin>
                          |UltraSensor_Trigger_Pin|LED3_Pin|CIN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	210c      	movs	r1, #12
 800172e:	481d      	ldr	r0, [pc, #116]	; (80017a4 <MX_GPIO_Init+0x10c>)
 8001730:	f005 ff40 	bl	80075b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2120      	movs	r1, #32
 8001738:	481b      	ldr	r0, [pc, #108]	; (80017a8 <MX_GPIO_Init+0x110>)
 800173a:	f005 ff3b 	bl	80075b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           UltraSensor_Trigger_Pin LED3_Pin CIN1_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800173e:	f44f 53bf 	mov.w	r3, #6112	; 0x17e0
 8001742:	617b      	str	r3, [r7, #20]
                          |UltraSensor_Trigger_Pin|LED3_Pin|CIN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4812      	ldr	r0, [pc, #72]	; (80017a0 <MX_GPIO_Init+0x108>)
 8001758:	f005 fd90 	bl	800727c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin;
 800175c:	230c      	movs	r3, #12
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001768:	2302      	movs	r3, #2
 800176a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	480c      	ldr	r0, [pc, #48]	; (80017a4 <MX_GPIO_Init+0x10c>)
 8001774:	f005 fd82 	bl	800727c <HAL_GPIO_Init>

  /*Configure GPIO pin : CIN2_Pin */
  GPIO_InitStruct.Pin = CIN2_Pin;
 8001778:	2320      	movs	r3, #32
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CIN2_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_GPIO_Init+0x110>)
 8001790:	f005 fd74 	bl	800727c <HAL_GPIO_Init>

}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40020800 	.word	0x40020800

080017ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// For own reference, this function seems to be called after
// interrupt from the HAL_UART_Receive_IT function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b08b      	sub	sp, #44	; 0x2c
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	6078      	str	r0, [r7, #4]
	//Prevent unused argument(s) compilation warning
	UNUSED(huart);
	static i = 0; //static means it doesn't get erase after every loop

	if (aRxBuffer[0] == 'n'){
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b6e      	cmp	r3, #110	; 0x6e
 80017ba:	d106      	bne.n	80017ca <HAL_UART_RxCpltCallback+0x1e>
		i = 0;
 80017bc:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
		newCmdReceived = 1;
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_UART_RxCpltCallback+0xb0>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
 80017c8:	e01e      	b.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
	}
	else if (i==0)
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_UART_RxCpltCallback+0x3a>
	{
		cmd = aRxBuffer[0];
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_UART_RxCpltCallback+0xb4>)
 80017d8:	701a      	strb	r2, [r3, #0]
		i++;
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	e010      	b.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
	}
	else if (i > 0)
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	dd0c      	ble.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
	{
		data = data*10 + (aRxBuffer[0] - '0');
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4413      	add	r3, r2
 8001802:	3b30      	subs	r3, #48	; 0x30
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 8001806:	6013      	str	r3, [r2, #0]
//		data = aRxBuffer[0];
	}

	uint8_t message1[20];
	HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer, 1);
 8001808:	2201      	movs	r2, #1
 800180a:	4912      	ldr	r1, [pc, #72]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 800180c:	4816      	ldr	r0, [pc, #88]	; (8001868 <HAL_UART_RxCpltCallback+0xbc>)
 800180e:	f00a fc90 	bl	800c132 <HAL_UART_Receive_IT>
//	HAL_UART_Transmit(&huart3, (uint8_t *) aRxBuffer, 1, 0xFFFF);


	sprintf(message1, "%c %d %c %d\0", aRxBuffer[0], newCmdReceived, cmd, data);
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_UART_RxCpltCallback+0xb0>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461c      	mov	r4, r3
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_UART_RxCpltCallback+0xb4>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f107 000c 	add.w	r0, r7, #12
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	9200      	str	r2, [sp, #0]
 8001830:	4623      	mov	r3, r4
 8001832:	460a      	mov	r2, r1
 8001834:	490d      	ldr	r1, [pc, #52]	; (800186c <HAL_UART_RxCpltCallback+0xc0>)
 8001836:	f00f f909 	bl	8010a4c <siprintf>
	OLED_ShowString(10, 40, message1);
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	461a      	mov	r2, r3
 8001840:	2128      	movs	r1, #40	; 0x28
 8001842:	200a      	movs	r0, #10
 8001844:	f004 fd90 	bl	8006368 <OLED_ShowString>
	OLED_Refresh_Gram(); //Refresh Ram
 8001848:	f004 fc1a 	bl	8006080 <OLED_Refresh_Gram>
}
 800184c:	bf00      	nop
 800184e:	3724      	adds	r7, #36	; 0x24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}
 8001854:	20000428 	.word	0x20000428
 8001858:	2000045c 	.word	0x2000045c
 800185c:	20000429 	.word	0x20000429
 8001860:	2000042a 	.word	0x2000042a
 8001864:	2000042c 	.word	0x2000042c
 8001868:	200003c0 	.word	0x200003c0
 800186c:	08014658 	.word	0x08014658

08001870 <delay>:

//reference: https://controllerstech.com/hcsr04-ultrasonic-sensor-and-stm32/
void delay(uint16_t time)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <delay+0x30>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
 8001882:	bf00      	nop
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <delay+0x30>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	429a      	cmp	r2, r3
 800188e:	d3f9      	bcc.n	8001884 <delay+0x14>

}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	200002e8 	.word	0x200002e8

080018a4 <HCSR04_Read>:
void HCSR04_Read (void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UltraSensor_Trigger_GPIO_Port, UltraSensor_Trigger_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ae:	480b      	ldr	r0, [pc, #44]	; (80018dc <HCSR04_Read+0x38>)
 80018b0:	f005 fe80 	bl	80075b4 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80018b4:	200a      	movs	r0, #10
 80018b6:	f7ff ffdb 	bl	8001870 <delay>
	HAL_GPIO_WritePin(UltraSensor_Trigger_GPIO_Port, UltraSensor_Trigger_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c0:	4806      	ldr	r0, [pc, #24]	; (80018dc <HCSR04_Read+0x38>)
 80018c2:	f005 fe77 	bl	80075b4 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HCSR04_Read+0x3c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <HCSR04_Read+0x3c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0202 	orr.w	r2, r2, #2
 80018d4:	60da      	str	r2, [r3, #12]
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	200002e8 	.word	0x200002e8
 80018e4:	00000000 	.word	0x00000000

080018e8 <HAL_TIM_IC_CaptureCallback>:

//Called whenever falling or rising edge is captured
// Let's write the callback function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7f1b      	ldrb	r3, [r3, #28]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	f040 8082 	bne.w	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80018fa:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11a      	bne.n	8001938 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001902:	2100      	movs	r1, #0
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f009 fdad 	bl	800b464 <HAL_TIM_ReadCapturedValue>
 800190a:	4603      	mov	r3, r0
 800190c:	4a41      	ldr	r2, [pc, #260]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800190e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001910:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6a1a      	ldr	r2, [r3, #32]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 020a 	bic.w	r2, r2, #10
 8001924:	621a      	str	r2, [r3, #32]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6a1a      	ldr	r2, [r3, #32]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0202 	orr.w	r2, r2, #2
 8001934:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8001936:	e062      	b.n	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d15e      	bne.n	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001940:	2100      	movs	r1, #0
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f009 fd8e 	bl	800b464 <HAL_TIM_ReadCapturedValue>
 8001948:	4603      	mov	r3, r0
 800194a:	4a33      	ldr	r2, [pc, #204]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 800194c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8001956:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d907      	bls.n	8001972 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8001962:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	4a2b      	ldr	r2, [pc, #172]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e00f      	b.n	8001992 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8001972:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d909      	bls.n	8001992 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800198c:	33ff      	adds	r3, #255	; 0xff
 800198e:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001990:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.034/2;
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdb4 	bl	8000504 <__aeabi_ui2d>
 800199c:	a31a      	add	r3, pc, #104	; (adr r3, 8001a08 <HAL_TIM_IC_CaptureCallback+0x120>)
 800199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a2:	f7fe fe29 	bl	80005f8 <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b6:	f7fe ff49 	bl	800084c <__aeabi_ddiv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f911 	bl	8000be8 <__aeabi_d2f>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x138>)
 80019ca:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6a1a      	ldr	r2, [r3, #32]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 020a 	bic.w	r2, r2, #10
 80019e0:	621a      	str	r2, [r3, #32]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6a12      	ldr	r2, [r2, #32]
 80019ec:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0202 	bic.w	r2, r2, #2
 80019fc:	60da      	str	r2, [r3, #12]
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	b020c49c 	.word	0xb020c49c
 8001a0c:	3fa16872 	.word	0x3fa16872
 8001a10:	20000440 	.word	0x20000440
 8001a14:	20000434 	.word	0x20000434
 8001a18:	20000438 	.word	0x20000438
 8001a1c:	2000043c 	.word	0x2000043c
 8001a20:	20000444 	.word	0x20000444
 8001a24:	20000258 	.word	0x20000258

08001a28 <task2A>:


void task2A(uint32_t data)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b0a0      	sub	sp, #128	; 0x80
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	uint32_t offset_show[30];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001a30:	2100      	movs	r1, #0
 8001a32:	48b4      	ldr	r0, [pc, #720]	; (8001d04 <task2A+0x2dc>)
 8001a34:	f008 fe74 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001a38:	2108      	movs	r1, #8
 8001a3a:	48b2      	ldr	r0, [pc, #712]	; (8001d04 <task2A+0x2dc>)
 8001a3c:	f008 fe70 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001a40:	210c      	movs	r1, #12
 8001a42:	48b1      	ldr	r0, [pc, #708]	; (8001d08 <task2A+0x2e0>)
 8001a44:	f008 fe6c 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2108      	movs	r1, #8
 8001a4c:	48af      	ldr	r0, [pc, #700]	; (8001d0c <task2A+0x2e4>)
 8001a4e:	f005 fdb1 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2104      	movs	r1, #4
 8001a56:	48ad      	ldr	r0, [pc, #692]	; (8001d0c <task2A+0x2e4>)
 8001a58:	f005 fdac 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a62:	48ab      	ldr	r0, [pc, #684]	; (8001d10 <task2A+0x2e8>)
 8001a64:	f005 fda6 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	48a9      	ldr	r0, [pc, #676]	; (8001d14 <task2A+0x2ec>)
 8001a6e:	f005 fda1 	bl	80075b4 <HAL_GPIO_WritePin>

 	//if picture detected is left tln
 	if (data == 'l')
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b6c      	cmp	r3, #108	; 0x6c
 8001a76:	f040 8088 	bne.w	8001b8a <task2A+0x162>
 	{
 		htim1.Instance -> CCR4 = 115;
 8001a7a:	4ba3      	ldr	r3, [pc, #652]	; (8001d08 <task2A+0x2e0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2273      	movs	r2, #115	; 0x73
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
 		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001a82:	4ba0      	ldr	r3, [pc, #640]	; (8001d04 <task2A+0x2dc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a8a:	635a      	str	r2, [r3, #52]	; 0x34
 		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 8001a8c:	4b9d      	ldr	r3, [pc, #628]	; (8001d04 <task2A+0x2dc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a94:	63da      	str	r2, [r3, #60]	; 0x3c
 		 moving = 1;
 8001a96:	4ba0      	ldr	r3, [pc, #640]	; (8001d18 <task2A+0x2f0>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
 		 while (moving)
 8001a9c:	e020      	b.n	8001ae0 <task2A+0xb8>
 		 {
 			 if ((int)totalAngle >= 27)
 8001a9e:	4b9f      	ldr	r3, [pc, #636]	; (8001d1c <task2A+0x2f4>)
 8001aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7ff f856 	bl	8000b58 <__aeabi_d2iz>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b1a      	cmp	r3, #26
 8001ab0:	dc1b      	bgt.n	8001aea <task2A+0xc2>
 			 {
 				break;
 			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8001ab2:	4b9a      	ldr	r3, [pc, #616]	; (8001d1c <task2A+0x2f4>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7ff f84c 	bl	8000b58 <__aeabi_d2iz>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	4996      	ldr	r1, [pc, #600]	; (8001d20 <task2A+0x2f8>)
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f00e ffbf 	bl	8010a4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2114      	movs	r1, #20
 8001ad6:	200a      	movs	r0, #10
 8001ad8:	f004 fc46 	bl	8006368 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8001adc:	f004 fad0 	bl	8006080 <OLED_Refresh_Gram>
 		 while (moving)
 8001ae0:	4b8d      	ldr	r3, [pc, #564]	; (8001d18 <task2A+0x2f0>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1da      	bne.n	8001a9e <task2A+0x76>
 8001ae8:	e000      	b.n	8001aec <task2A+0xc4>
 				break;
 8001aea:	bf00      	nop
 		 }
 		 moveGyroPID(60, 1);
 8001aec:	2001      	movs	r0, #1
 8001aee:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8001d24 <task2A+0x2fc>
 8001af2:	f002 f995 	bl	8003e20 <moveGyroPID>
 		htim1.Instance -> CCR4 = RIGHT;
 8001af6:	4b84      	ldr	r3, [pc, #528]	; (8001d08 <task2A+0x2e0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	22fa      	movs	r2, #250	; 0xfa
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
 		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2000);
 8001afe:	4b81      	ldr	r3, [pc, #516]	; (8001d04 <task2A+0x2dc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b06:	635a      	str	r2, [r3, #52]	; 0x34
 		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001b08:	4b7e      	ldr	r3, [pc, #504]	; (8001d04 <task2A+0x2dc>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b10:	63da      	str	r2, [r3, #60]	; 0x3c
 		continueMoving = 0;
 8001b12:	4b85      	ldr	r3, [pc, #532]	; (8001d28 <task2A+0x300>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
 		while (Distance > 14)
 8001b18:	e025      	b.n	8001b66 <task2A+0x13e>
 		{
 			if (totalAngle <= -1*15){
 8001b1a:	4b80      	ldr	r3, [pc, #512]	; (8001d1c <task2A+0x2f4>)
 8001b1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b81      	ldr	r3, [pc, #516]	; (8001d2c <task2A+0x304>)
 8001b26:	f7fe ffe3 	bl	8000af0 <__aeabi_dcmple>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <task2A+0x110>
 				continueMoving = 1;
 8001b30:	4b7d      	ldr	r3, [pc, #500]	; (8001d28 <task2A+0x300>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
// 				sendToRPI("here");
 				break;
 8001b36:	e020      	b.n	8001b7a <task2A+0x152>
 			}


			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8001b38:	4b78      	ldr	r3, [pc, #480]	; (8001d1c <task2A+0x2f4>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7ff f809 	bl	8000b58 <__aeabi_d2iz>
 8001b46:	4602      	mov	r2, r0
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	4974      	ldr	r1, [pc, #464]	; (8001d20 <task2A+0x2f8>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00e ff7c 	bl	8010a4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2114      	movs	r1, #20
 8001b5c:	200a      	movs	r0, #10
 8001b5e:	f004 fc03 	bl	8006368 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8001b62:	f004 fa8d 	bl	8006080 <OLED_Refresh_Gram>
 		while (Distance > 14)
 8001b66:	4b72      	ldr	r3, [pc, #456]	; (8001d30 <task2A+0x308>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	dccf      	bgt.n	8001b1a <task2A+0xf2>
 		 }
 		if(continueMoving)
 8001b7a:	4b6b      	ldr	r3, [pc, #428]	; (8001d28 <task2A+0x300>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 808e 	beq.w	8001ca0 <task2A+0x278>
 		{
 			moveUltraExtreme();
 8001b84:	f001 ff4a 	bl	8003a1c <moveUltraExtreme>
 8001b88:	e08a      	b.n	8001ca0 <task2A+0x278>
 		}


 	}
 	else if (data == 'r')
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b72      	cmp	r3, #114	; 0x72
 8001b8e:	f040 8087 	bne.w	8001ca0 <task2A+0x278>
 	{
 		htim1.Instance -> CCR4 = RIGHT;
 8001b92:	4b5d      	ldr	r3, [pc, #372]	; (8001d08 <task2A+0x2e0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	22fa      	movs	r2, #250	; 0xfa
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
 		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2000);
 8001b9a:	4b5a      	ldr	r3, [pc, #360]	; (8001d04 <task2A+0x2dc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34
 		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001ba4:	4b57      	ldr	r3, [pc, #348]	; (8001d04 <task2A+0x2dc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bac:	63da      	str	r2, [r3, #60]	; 0x3c
 		 moving = 1;
 8001bae:	4b5a      	ldr	r3, [pc, #360]	; (8001d18 <task2A+0x2f0>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
 		 while (moving)
 8001bb4:	e021      	b.n	8001bfa <task2A+0x1d2>
 		 {
 			 if ((int)totalAngle <= -1*23) // prev was 30
 8001bb6:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <task2A+0x2f4>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7fe ffca 	bl	8000b58 <__aeabi_d2iz>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f113 0f16 	cmn.w	r3, #22
 8001bca:	db1b      	blt.n	8001c04 <task2A+0x1dc>
 			 {
 				break;
 			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8001bcc:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <task2A+0x2f4>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7fe ffbf 	bl	8000b58 <__aeabi_d2iz>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	f107 0308 	add.w	r3, r7, #8
 8001be0:	494f      	ldr	r1, [pc, #316]	; (8001d20 <task2A+0x2f8>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f00e ff32 	bl	8010a4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	461a      	mov	r2, r3
 8001bee:	2114      	movs	r1, #20
 8001bf0:	200a      	movs	r0, #10
 8001bf2:	f004 fbb9 	bl	8006368 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8001bf6:	f004 fa43 	bl	8006080 <OLED_Refresh_Gram>
 		 while (moving)
 8001bfa:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <task2A+0x2f0>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1d9      	bne.n	8001bb6 <task2A+0x18e>
 8001c02:	e000      	b.n	8001c06 <task2A+0x1de>
 				break;
 8001c04:	bf00      	nop
 		 }
 		moveGyroPID(58, 1);
 8001c06:	2001      	movs	r0, #1
 8001c08:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8001d34 <task2A+0x30c>
 8001c0c:	f002 f908 	bl	8003e20 <moveGyroPID>
 		htim1.Instance -> CCR4 = LEFT;
 8001c10:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <task2A+0x2e0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2269      	movs	r2, #105	; 0x69
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40
 		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001c18:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <task2A+0x2dc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c20:	635a      	str	r2, [r3, #52]	; 0x34
 		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 8001c22:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <task2A+0x2dc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c2a:	63da      	str	r2, [r3, #60]	; 0x3c
 		continueMoving = 0;
 8001c2c:	4b3e      	ldr	r3, [pc, #248]	; (8001d28 <task2A+0x300>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]

 		while (Distance > 14)
 8001c32:	e025      	b.n	8001c80 <task2A+0x258>
 		{
 			if (totalAngle >= 25){
 8001c34:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <task2A+0x2f4>)
 8001c36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <task2A+0x310>)
 8001c40:	f7fe ff60 	bl	8000b04 <__aeabi_dcmpge>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <task2A+0x22a>
 				continueMoving = 1;
 8001c4a:	4b37      	ldr	r3, [pc, #220]	; (8001d28 <task2A+0x300>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
 				break;
 8001c50:	e020      	b.n	8001c94 <task2A+0x26c>
 			}
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8001c52:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <task2A+0x2f4>)
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe ff7c 	bl	8000b58 <__aeabi_d2iz>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	492e      	ldr	r1, [pc, #184]	; (8001d20 <task2A+0x2f8>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f00e feef 	bl	8010a4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	461a      	mov	r2, r3
 8001c74:	2114      	movs	r1, #20
 8001c76:	200a      	movs	r0, #10
 8001c78:	f004 fb76 	bl	8006368 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8001c7c:	f004 fa00 	bl	8006080 <OLED_Refresh_Gram>
 		while (Distance > 14)
 8001c80:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <task2A+0x308>)
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	dccf      	bgt.n	8001c34 <task2A+0x20c>
 		 }
 		if(continueMoving)
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <task2A+0x300>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <task2A+0x278>
 		{
 			moveUltraExtreme();
 8001c9c:	f001 febe 	bl	8003a1c <moveUltraExtreme>
// 	 		continueMoving = 0;
// 		}
 	}

 	// straighten STM back to be perpendicular to 2nd obstacle
 		if(continueMoving){
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <task2A+0x300>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d078      	beq.n	8001d9a <task2A+0x372>
 			if(actualAngle > 0) {
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <task2A+0x314>)
 8001caa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	f7fe ff2f 	bl	8000b18 <__aeabi_dcmpgt>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d03f      	beq.n	8001d40 <task2A+0x318>
				while(actualAngle > 0){
 8001cc0:	e013      	b.n	8001cea <task2A+0x2c2>
					moving = 1;
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <task2A+0x2f0>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
					htim1.Instance -> CCR4 = RIGHT;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <task2A+0x2e0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	22fa      	movs	r2, #250	; 0xfa
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <task2A+0x2dc>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cd8:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 400);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <task2A+0x2dc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c
					delay(1);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f7ff fdc3 	bl	8001870 <delay>
				while(actualAngle > 0){
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <task2A+0x314>)
 8001cec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	f7fe ff0e 	bl	8000b18 <__aeabi_dcmpgt>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1df      	bne.n	8001cc2 <task2A+0x29a>
 8001d02:	e04a      	b.n	8001d9a <task2A+0x372>
 8001d04:	20000378 	.word	0x20000378
 8001d08:	20000258 	.word	0x20000258
 8001d0c:	40020000 	.word	0x40020000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40020800 	.word	0x40020800
 8001d18:	20000414 	.word	0x20000414
 8001d1c:	20000418 	.word	0x20000418
 8001d20:	08014668 	.word	0x08014668
 8001d24:	42700000 	.word	0x42700000
 8001d28:	20000416 	.word	0x20000416
 8001d2c:	c02e0000 	.word	0xc02e0000
 8001d30:	20000444 	.word	0x20000444
 8001d34:	42680000 	.word	0x42680000
 8001d38:	40390000 	.word	0x40390000
 8001d3c:	20000420 	.word	0x20000420
				}
			}
			else if(actualAngle < 0) {
 8001d40:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <task2A+0x3bc>)
 8001d42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	f7fe fec5 	bl	8000adc <__aeabi_dcmplt>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <task2A+0x372>
				while(actualAngle < 0) {
 8001d58:	e013      	b.n	8001d82 <task2A+0x35a>
					moving = 1;
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <task2A+0x3c0>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]
					htim1.Instance -> CCR4 = LEFT;
 8001d60:	4b22      	ldr	r3, [pc, #136]	; (8001dec <task2A+0x3c4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2269      	movs	r2, #105	; 0x69
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 400);
 8001d68:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <task2A+0x3c8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001d70:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <task2A+0x3c8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d7a:	63da      	str	r2, [r3, #60]	; 0x3c
					delay(1);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff fd77 	bl	8001870 <delay>
				while(actualAngle < 0) {
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <task2A+0x3bc>)
 8001d84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	f7fe fea4 	bl	8000adc <__aeabi_dcmplt>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1df      	bne.n	8001d5a <task2A+0x332>
				}
			}
 		}

		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <task2A+0x3c8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <task2A+0x3c8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2200      	movs	r2, #0
 8001da8:	63da      	str	r2, [r3, #60]	; 0x3c
		htim1.Instance -> CCR4 = STRAIGHT;
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <task2A+0x3c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2295      	movs	r2, #149	; 0x95
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001db2:	2201      	movs	r2, #1
 8001db4:	2108      	movs	r1, #8
 8001db6:	480f      	ldr	r0, [pc, #60]	; (8001df4 <task2A+0x3cc>)
 8001db8:	f005 fbfc 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	480c      	ldr	r0, [pc, #48]	; (8001df4 <task2A+0x3cc>)
 8001dc2:	f005 fbf7 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dcc:	480a      	ldr	r0, [pc, #40]	; (8001df8 <task2A+0x3d0>)
 8001dce:	f005 fbf1 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2120      	movs	r1, #32
 8001dd6:	4809      	ldr	r0, [pc, #36]	; (8001dfc <task2A+0x3d4>)
 8001dd8:	f005 fbec 	bl	80075b4 <HAL_GPIO_WritePin>
}
 8001ddc:	bf00      	nop
 8001dde:	3780      	adds	r7, #128	; 0x80
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000420 	.word	0x20000420
 8001de8:	20000414 	.word	0x20000414
 8001dec:	20000258 	.word	0x20000258
 8001df0:	20000378 	.word	0x20000378
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40020800 	.word	0x40020800

08001e00 <task2A2>:

void task2A2(uint32_t data)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0a0      	sub	sp, #128	; 0x80
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	uint32_t offset_show[30];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	48ac      	ldr	r0, [pc, #688]	; (80020bc <task2A2+0x2bc>)
 8001e0c:	f008 fc88 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001e10:	2108      	movs	r1, #8
 8001e12:	48aa      	ldr	r0, [pc, #680]	; (80020bc <task2A2+0x2bc>)
 8001e14:	f008 fc84 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001e18:	210c      	movs	r1, #12
 8001e1a:	48a9      	ldr	r0, [pc, #676]	; (80020c0 <task2A2+0x2c0>)
 8001e1c:	f008 fc80 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	2108      	movs	r1, #8
 8001e24:	48a7      	ldr	r0, [pc, #668]	; (80020c4 <task2A2+0x2c4>)
 8001e26:	f005 fbc5 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	48a5      	ldr	r0, [pc, #660]	; (80020c4 <task2A2+0x2c4>)
 8001e30:	f005 fbc0 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8001e34:	2201      	movs	r2, #1
 8001e36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e3a:	48a3      	ldr	r0, [pc, #652]	; (80020c8 <task2A2+0x2c8>)
 8001e3c:	f005 fbba 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2120      	movs	r1, #32
 8001e44:	48a1      	ldr	r0, [pc, #644]	; (80020cc <task2A2+0x2cc>)
 8001e46:	f005 fbb5 	bl	80075b4 <HAL_GPIO_WritePin>
	moving = 0;
 8001e4a:	4ba1      	ldr	r3, [pc, #644]	; (80020d0 <task2A2+0x2d0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]

	if(continueMoving){
 8001e50:	4ba0      	ldr	r3, [pc, #640]	; (80020d4 <task2A2+0x2d4>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 81c3 	beq.w	80021e0 <task2A2+0x3e0>
		//if picture detected is left Tln
		if (data == 'l')
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b6c      	cmp	r3, #108	; 0x6c
 8001e5e:	f040 80d2 	bne.w	8002006 <task2A2+0x206>
		{
			htim1.Instance -> CCR4 = 105;
 8001e62:	4b97      	ldr	r3, [pc, #604]	; (80020c0 <task2A2+0x2c0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2269      	movs	r2, #105	; 0x69
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001e6a:	4b94      	ldr	r3, [pc, #592]	; (80020bc <task2A2+0x2bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e72:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8001e74:	4b91      	ldr	r3, [pc, #580]	; (80020bc <task2A2+0x2bc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e7c:	63da      	str	r2, [r3, #60]	; 0x3c
			 moving = 1;
 8001e7e:	4b94      	ldr	r3, [pc, #592]	; (80020d0 <task2A2+0x2d0>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
			 while (moving)
 8001e84:	e020      	b.n	8001ec8 <task2A2+0xc8>
			 {
				 if ((int)actualAngle >= 60) // was 65
 8001e86:	4b94      	ldr	r3, [pc, #592]	; (80020d8 <task2A2+0x2d8>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7fe fe62 	bl	8000b58 <__aeabi_d2iz>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b3b      	cmp	r3, #59	; 0x3b
 8001e98:	dc1b      	bgt.n	8001ed2 <task2A2+0xd2>
				 {
					break;
				 }
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8001e9a:	4b90      	ldr	r3, [pc, #576]	; (80020dc <task2A2+0x2dc>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7fe fe58 	bl	8000b58 <__aeabi_d2iz>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	498c      	ldr	r1, [pc, #560]	; (80020e0 <task2A2+0x2e0>)
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f00e fdcb 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2114      	movs	r1, #20
 8001ebe:	200a      	movs	r0, #10
 8001ec0:	f004 fa52 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8001ec4:	f004 f8dc 	bl	8006080 <OLED_Refresh_Gram>
			 while (moving)
 8001ec8:	4b81      	ldr	r3, [pc, #516]	; (80020d0 <task2A2+0x2d0>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1da      	bne.n	8001e86 <task2A2+0x86>
 8001ed0:	e000      	b.n	8001ed4 <task2A2+0xd4>
					break;
 8001ed2:	bf00      	nop
			 }
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001ed4:	4b79      	ldr	r3, [pc, #484]	; (80020bc <task2A2+0x2bc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8001edc:	4b77      	ldr	r3, [pc, #476]	; (80020bc <task2A2+0x2bc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(85,1);
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 80020e4 <task2A2+0x2e4>
 8001eea:	f001 ff99 	bl	8003e20 <moveGyroPID>
			htim1.Instance -> CCR4 = RIGHT;
 8001eee:	4b74      	ldr	r3, [pc, #464]	; (80020c0 <task2A2+0x2c0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	22fa      	movs	r2, #250	; 0xfa
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001ef6:	4b71      	ldr	r3, [pc, #452]	; (80020bc <task2A2+0x2bc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001efe:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001f00:	4b6e      	ldr	r3, [pc, #440]	; (80020bc <task2A2+0x2bc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f08:	63da      	str	r2, [r3, #60]	; 0x3c
	// 		continueMoving = 0;

			while (moving)
 8001f0a:	e021      	b.n	8001f50 <task2A2+0x150>
			{
				if ((int)actualAngle <= -83)
 8001f0c:	4b72      	ldr	r3, [pc, #456]	; (80020d8 <task2A2+0x2d8>)
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f7fe fe1f 	bl	8000b58 <__aeabi_d2iz>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f113 0f52 	cmn.w	r3, #82	; 0x52
 8001f20:	db1b      	blt.n	8001f5a <task2A2+0x15a>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8001f22:	4b6e      	ldr	r3, [pc, #440]	; (80020dc <task2A2+0x2dc>)
 8001f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fe14 	bl	8000b58 <__aeabi_d2iz>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f107 0308 	add.w	r3, r7, #8
 8001f36:	496a      	ldr	r1, [pc, #424]	; (80020e0 <task2A2+0x2e0>)
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f00e fd87 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8001f3e:	f107 0308 	add.w	r3, r7, #8
 8001f42:	461a      	mov	r2, r3
 8001f44:	2114      	movs	r1, #20
 8001f46:	200a      	movs	r0, #10
 8001f48:	f004 fa0e 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8001f4c:	f004 f898 	bl	8006080 <OLED_Refresh_Gram>
			while (moving)
 8001f50:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <task2A2+0x2d0>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1d9      	bne.n	8001f0c <task2A2+0x10c>
 8001f58:	e000      	b.n	8001f5c <task2A2+0x15c>
					break;
 8001f5a:	bf00      	nop
			 }

			 moving = 0;
 8001f5c:	4b5c      	ldr	r3, [pc, #368]	; (80020d0 <task2A2+0x2d0>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
			 moveGyroPIDOld(52.0,1); // 50.0 for indoors
 8001f62:	2001      	movs	r0, #1
 8001f64:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80020e8 <task2A2+0x2e8>
 8001f68:	f002 fa66 	bl	8004438 <moveGyroPIDOld>
			 moving = 0;
 8001f6c:	4b58      	ldr	r3, [pc, #352]	; (80020d0 <task2A2+0x2d0>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
			htim1.Instance -> CCR4 = RIGHT;
 8001f72:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <task2A2+0x2c0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	22fa      	movs	r2, #250	; 0xfa
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001f7a:	4b50      	ldr	r3, [pc, #320]	; (80020bc <task2A2+0x2bc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f82:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001f84:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <task2A2+0x2bc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f8c:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8001f8e:	2064      	movs	r0, #100	; 0x64
 8001f90:	f7ff fc6e 	bl	8001870 <delay>
			moving = 1;
 8001f94:	4b4e      	ldr	r3, [pc, #312]	; (80020d0 <task2A2+0x2d0>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
			while (moving)
 8001f9a:	e021      	b.n	8001fe0 <task2A2+0x1e0>
			{
				if ((int)totalAngle <= -100) //MAYBE 105 for indoors, 100 for outdoors?
 8001f9c:	4b4f      	ldr	r3, [pc, #316]	; (80020dc <task2A2+0x2dc>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fdd7 	bl	8000b58 <__aeabi_d2iz>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001fb0:	db1b      	blt.n	8001fea <task2A2+0x1ea>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	; (80020dc <task2A2+0x2dc>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7fe fdcc 	bl	8000b58 <__aeabi_d2iz>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f107 0308 	add.w	r3, r7, #8
 8001fc6:	4946      	ldr	r1, [pc, #280]	; (80020e0 <task2A2+0x2e0>)
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f00e fd3f 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2114      	movs	r1, #20
 8001fd6:	200a      	movs	r0, #10
 8001fd8:	f004 f9c6 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8001fdc:	f004 f850 	bl	8006080 <OLED_Refresh_Gram>
			while (moving)
 8001fe0:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <task2A2+0x2d0>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1d9      	bne.n	8001f9c <task2A2+0x19c>
 8001fe8:	e000      	b.n	8001fec <task2A2+0x1ec>
					break;
 8001fea:	bf00      	nop
			 }
			actualAngle = 0;
 8001fec:	493a      	ldr	r1, [pc, #232]	; (80020d8 <task2A2+0x2d8>)
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	e9c1 2300 	strd	r2, r3, [r1]
			moving=0;
 8001ffa:	4b35      	ldr	r3, [pc, #212]	; (80020d0 <task2A2+0x2d0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 8002000:	f001 fafa 	bl	80035f8 <moveUltraEndLeft>
 8002004:	e2b9      	b.n	800257a <task2A2+0x77a>

		}
		else if (data == 'r')
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b72      	cmp	r3, #114	; 0x72
 800200a:	f040 82b6 	bne.w	800257a <task2A2+0x77a>
		{
			htim1.Instance -> CCR4 = RIGHT;
 800200e:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <task2A2+0x2c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	22fa      	movs	r2, #250	; 0xfa
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002016:	4b29      	ldr	r3, [pc, #164]	; (80020bc <task2A2+0x2bc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800201e:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <task2A2+0x2bc>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002028:	63da      	str	r2, [r3, #60]	; 0x3c
			 moving = 1;
 800202a:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <task2A2+0x2d0>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
			 while (moving)
 8002030:	e021      	b.n	8002076 <task2A2+0x276>
			 {
				 if ((int)totalAngle <= -1*40) // was 55. was 48. was 43.
 8002032:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <task2A2+0x2dc>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f7fe fd8c 	bl	8000b58 <__aeabi_d2iz>
 8002040:	4603      	mov	r3, r0
 8002042:	f113 0f27 	cmn.w	r3, #39	; 0x27
 8002046:	db1b      	blt.n	8002080 <task2A2+0x280>
				 {
					break;
				 }
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <task2A2+0x2dc>)
 800204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	f7fe fd81 	bl	8000b58 <__aeabi_d2iz>
 8002056:	4602      	mov	r2, r0
 8002058:	f107 0308 	add.w	r3, r7, #8
 800205c:	4920      	ldr	r1, [pc, #128]	; (80020e0 <task2A2+0x2e0>)
 800205e:	4618      	mov	r0, r3
 8002060:	f00e fcf4 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002064:	f107 0308 	add.w	r3, r7, #8
 8002068:	461a      	mov	r2, r3
 800206a:	2114      	movs	r1, #20
 800206c:	200a      	movs	r0, #10
 800206e:	f004 f97b 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002072:	f004 f805 	bl	8006080 <OLED_Refresh_Gram>
			 while (moving)
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <task2A2+0x2d0>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1d9      	bne.n	8002032 <task2A2+0x232>
 800207e:	e000      	b.n	8002082 <task2A2+0x282>
					break;
 8002080:	bf00      	nop
			 }
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <task2A2+0x2bc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2200      	movs	r2, #0
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <task2A2+0x2bc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2200      	movs	r2, #0
 8002090:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(45.0,1);
 8002092:	2001      	movs	r0, #1
 8002094:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80020ec <task2A2+0x2ec>
 8002098:	f001 fec2 	bl	8003e20 <moveGyroPID>
			htim1.Instance -> CCR4 = 110;
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <task2A2+0x2c0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	226e      	movs	r2, #110	; 0x6e
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <task2A2+0x2bc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ac:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 80020ae:	4b03      	ldr	r3, [pc, #12]	; (80020bc <task2A2+0x2bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80020b6:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving)
 80020b8:	e03b      	b.n	8002132 <task2A2+0x332>
 80020ba:	bf00      	nop
 80020bc:	20000378 	.word	0x20000378
 80020c0:	20000258 	.word	0x20000258
 80020c4:	40020000 	.word	0x40020000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40020800 	.word	0x40020800
 80020d0:	20000414 	.word	0x20000414
 80020d4:	20000416 	.word	0x20000416
 80020d8:	20000420 	.word	0x20000420
 80020dc:	20000418 	.word	0x20000418
 80020e0:	08014668 	.word	0x08014668
 80020e4:	42aa0000 	.word	0x42aa0000
 80020e8:	42500000 	.word	0x42500000
 80020ec:	42340000 	.word	0x42340000
			{
				if ((int)actualAngle >= 85)
 80020f0:	4bae      	ldr	r3, [pc, #696]	; (80023ac <task2A2+0x5ac>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f7fe fd2d 	bl	8000b58 <__aeabi_d2iz>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b54      	cmp	r3, #84	; 0x54
 8002102:	dc1b      	bgt.n	800213c <task2A2+0x33c>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002104:	4baa      	ldr	r3, [pc, #680]	; (80023b0 <task2A2+0x5b0>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f7fe fd23 	bl	8000b58 <__aeabi_d2iz>
 8002112:	4602      	mov	r2, r0
 8002114:	f107 0308 	add.w	r3, r7, #8
 8002118:	49a6      	ldr	r1, [pc, #664]	; (80023b4 <task2A2+0x5b4>)
 800211a:	4618      	mov	r0, r3
 800211c:	f00e fc96 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	461a      	mov	r2, r3
 8002126:	2114      	movs	r1, #20
 8002128:	200a      	movs	r0, #10
 800212a:	f004 f91d 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 800212e:	f003 ffa7 	bl	8006080 <OLED_Refresh_Gram>
			while (moving)
 8002132:	4ba1      	ldr	r3, [pc, #644]	; (80023b8 <task2A2+0x5b8>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1da      	bne.n	80020f0 <task2A2+0x2f0>
 800213a:	e000      	b.n	800213e <task2A2+0x33e>
					break;
 800213c:	bf00      	nop
			 }
			moving = 0;
 800213e:	4b9e      	ldr	r3, [pc, #632]	; (80023b8 <task2A2+0x5b8>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(50.0,1); // prev 23
 8002144:	2001      	movs	r0, #1
 8002146:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80023bc <task2A2+0x5bc>
 800214a:	f002 f975 	bl	8004438 <moveGyroPIDOld>
			moving = 0;
 800214e:	4b9a      	ldr	r3, [pc, #616]	; (80023b8 <task2A2+0x5b8>)
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
			htim1.Instance -> CCR4 = 115;
 8002154:	4b9a      	ldr	r3, [pc, #616]	; (80023c0 <task2A2+0x5c0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2273      	movs	r2, #115	; 0x73
 800215a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 800215c:	4b99      	ldr	r3, [pc, #612]	; (80023c4 <task2A2+0x5c4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002164:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8002166:	4b97      	ldr	r3, [pc, #604]	; (80023c4 <task2A2+0x5c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800216e:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8002170:	2064      	movs	r0, #100	; 0x64
 8002172:	f7ff fb7d 	bl	8001870 <delay>
			moving = 1;
 8002176:	4b90      	ldr	r3, [pc, #576]	; (80023b8 <task2A2+0x5b8>)
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
			while (moving)
 800217c:	e020      	b.n	80021c0 <task2A2+0x3c0>
			{
				if ((int)totalAngle >= 93) // 93 is too big for outdoors. changing to 88
 800217e:	4b8c      	ldr	r3, [pc, #560]	; (80023b0 <task2A2+0x5b0>)
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f7fe fce6 	bl	8000b58 <__aeabi_d2iz>
 800218c:	4603      	mov	r3, r0
 800218e:	2b5c      	cmp	r3, #92	; 0x5c
 8002190:	dc1b      	bgt.n	80021ca <task2A2+0x3ca>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002192:	4b87      	ldr	r3, [pc, #540]	; (80023b0 <task2A2+0x5b0>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	f7fe fcdc 	bl	8000b58 <__aeabi_d2iz>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f107 0308 	add.w	r3, r7, #8
 80021a6:	4983      	ldr	r1, [pc, #524]	; (80023b4 <task2A2+0x5b4>)
 80021a8:	4618      	mov	r0, r3
 80021aa:	f00e fc4f 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	461a      	mov	r2, r3
 80021b4:	2114      	movs	r1, #20
 80021b6:	200a      	movs	r0, #10
 80021b8:	f004 f8d6 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 80021bc:	f003 ff60 	bl	8006080 <OLED_Refresh_Gram>
			while (moving)
 80021c0:	4b7d      	ldr	r3, [pc, #500]	; (80023b8 <task2A2+0x5b8>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1da      	bne.n	800217e <task2A2+0x37e>
 80021c8:	e000      	b.n	80021cc <task2A2+0x3cc>
					break;
 80021ca:	bf00      	nop
			 }
			actualAngle = 0;
 80021cc:	4977      	ldr	r1, [pc, #476]	; (80023ac <task2A2+0x5ac>)
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 80021da:	f000 fffd 	bl	80031d8 <moveUltraEnd>
 80021de:	e1cc      	b.n	800257a <task2A2+0x77a>
		}
	}else{
		 // meaning continueMoving is 0, indicating that the car
		 // stopped because ultrasonic distance hit before target angle hit
		//if picture detected is left Tln
		if (data == 'l')
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b6c      	cmp	r3, #108	; 0x6c
 80021e4:	f040 80f2 	bne.w	80023cc <task2A2+0x5cc>
		{
			htim1.Instance -> CCR4 = 105;
 80021e8:	4b75      	ldr	r3, [pc, #468]	; (80023c0 <task2A2+0x5c0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2269      	movs	r2, #105	; 0x69
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 80021f0:	4b74      	ldr	r3, [pc, #464]	; (80023c4 <task2A2+0x5c4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021f8:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 80021fa:	4b72      	ldr	r3, [pc, #456]	; (80023c4 <task2A2+0x5c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002202:	63da      	str	r2, [r3, #60]	; 0x3c
			 moving = 0;
 8002204:	4b6c      	ldr	r3, [pc, #432]	; (80023b8 <task2A2+0x5b8>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
			 osDelay(1);
 800220a:	2001      	movs	r0, #1
 800220c:	f00b f83b 	bl	800d286 <osDelay>
			 moving = 1;
 8002210:	4b69      	ldr	r3, [pc, #420]	; (80023b8 <task2A2+0x5b8>)
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
			 while (moving)
 8002216:	e020      	b.n	800225a <task2A2+0x45a>
			 {
				 if ((int)actualAngle >= 55)
 8002218:	4b64      	ldr	r3, [pc, #400]	; (80023ac <task2A2+0x5ac>)
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	f7fe fc99 	bl	8000b58 <__aeabi_d2iz>
 8002226:	4603      	mov	r3, r0
 8002228:	2b36      	cmp	r3, #54	; 0x36
 800222a:	dc1b      	bgt.n	8002264 <task2A2+0x464>
				 {
					break;
				 }
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 800222c:	4b60      	ldr	r3, [pc, #384]	; (80023b0 <task2A2+0x5b0>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f7fe fc8f 	bl	8000b58 <__aeabi_d2iz>
 800223a:	4602      	mov	r2, r0
 800223c:	f107 0308 	add.w	r3, r7, #8
 8002240:	495c      	ldr	r1, [pc, #368]	; (80023b4 <task2A2+0x5b4>)
 8002242:	4618      	mov	r0, r3
 8002244:	f00e fc02 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002248:	f107 0308 	add.w	r3, r7, #8
 800224c:	461a      	mov	r2, r3
 800224e:	2114      	movs	r1, #20
 8002250:	200a      	movs	r0, #10
 8002252:	f004 f889 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002256:	f003 ff13 	bl	8006080 <OLED_Refresh_Gram>
			 while (moving)
 800225a:	4b57      	ldr	r3, [pc, #348]	; (80023b8 <task2A2+0x5b8>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1da      	bne.n	8002218 <task2A2+0x418>
 8002262:	e000      	b.n	8002266 <task2A2+0x466>
					break;
 8002264:	bf00      	nop
			 }
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002266:	4b57      	ldr	r3, [pc, #348]	; (80023c4 <task2A2+0x5c4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2200      	movs	r2, #0
 800226c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800226e:	4b55      	ldr	r3, [pc, #340]	; (80023c4 <task2A2+0x5c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2200      	movs	r2, #0
 8002274:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 0;
 8002276:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <task2A2+0x5b8>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(60,1);
 800227c:	2001      	movs	r0, #1
 800227e:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80023c8 <task2A2+0x5c8>
 8002282:	f002 f8d9 	bl	8004438 <moveGyroPIDOld>
//			moveGyroPID(85,1);
			htim1.Instance -> CCR4 = RIGHT;
 8002286:	4b4e      	ldr	r3, [pc, #312]	; (80023c0 <task2A2+0x5c0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	22fa      	movs	r2, #250	; 0xfa
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 800228e:	4b4d      	ldr	r3, [pc, #308]	; (80023c4 <task2A2+0x5c4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002296:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002298:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <task2A2+0x5c4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022a0:	63da      	str	r2, [r3, #60]	; 0x3c

			while (moving)
 80022a2:	e021      	b.n	80022e8 <task2A2+0x4e8>
			{
				if ((int)actualAngle <= -85)
 80022a4:	4b41      	ldr	r3, [pc, #260]	; (80023ac <task2A2+0x5ac>)
 80022a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7fe fc53 	bl	8000b58 <__aeabi_d2iz>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80022b8:	db1b      	blt.n	80022f2 <task2A2+0x4f2>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <task2A2+0x5b0>)
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f7fe fc48 	bl	8000b58 <__aeabi_d2iz>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f107 0308 	add.w	r3, r7, #8
 80022ce:	4939      	ldr	r1, [pc, #228]	; (80023b4 <task2A2+0x5b4>)
 80022d0:	4618      	mov	r0, r3
 80022d2:	f00e fbbb 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	461a      	mov	r2, r3
 80022dc:	2114      	movs	r1, #20
 80022de:	200a      	movs	r0, #10
 80022e0:	f004 f842 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 80022e4:	f003 fecc 	bl	8006080 <OLED_Refresh_Gram>
			while (moving)
 80022e8:	4b33      	ldr	r3, [pc, #204]	; (80023b8 <task2A2+0x5b8>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1d9      	bne.n	80022a4 <task2A2+0x4a4>
 80022f0:	e000      	b.n	80022f4 <task2A2+0x4f4>
					break;
 80022f2:	bf00      	nop
			 }

			 moving = 0;
 80022f4:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <task2A2+0x5b8>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
			 moveGyroPIDOld(50.0,1); // was 60
 80022fa:	2001      	movs	r0, #1
 80022fc:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80023bc <task2A2+0x5bc>
 8002300:	f002 f89a 	bl	8004438 <moveGyroPIDOld>
			 moving = 0;
 8002304:	4b2c      	ldr	r3, [pc, #176]	; (80023b8 <task2A2+0x5b8>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
			htim1.Instance -> CCR4 = RIGHT;
 800230a:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <task2A2+0x5c0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	22fa      	movs	r2, #250	; 0xfa
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002312:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <task2A2+0x5c4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800231a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 800231c:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <task2A2+0x5c4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002324:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8002326:	2064      	movs	r0, #100	; 0x64
 8002328:	f7ff faa2 	bl	8001870 <delay>
			moving=0;
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <task2A2+0x5b8>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
			osDelay(1);
 8002332:	2001      	movs	r0, #1
 8002334:	f00a ffa7 	bl	800d286 <osDelay>
			moving = 1;
 8002338:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <task2A2+0x5b8>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
			while (moving)
 800233e:	e021      	b.n	8002384 <task2A2+0x584>
			{
				if ((int)totalAngle <= -102) //MAYBE 105 for indoors, 100 for outdoors?
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <task2A2+0x5b0>)
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f7fe fc05 	bl	8000b58 <__aeabi_d2iz>
 800234e:	4603      	mov	r3, r0
 8002350:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8002354:	db1b      	blt.n	800238e <task2A2+0x58e>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <task2A2+0x5b0>)
 8002358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f7fe fbfa 	bl	8000b58 <__aeabi_d2iz>
 8002364:	4602      	mov	r2, r0
 8002366:	f107 0308 	add.w	r3, r7, #8
 800236a:	4912      	ldr	r1, [pc, #72]	; (80023b4 <task2A2+0x5b4>)
 800236c:	4618      	mov	r0, r3
 800236e:	f00e fb6d 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002372:	f107 0308 	add.w	r3, r7, #8
 8002376:	461a      	mov	r2, r3
 8002378:	2114      	movs	r1, #20
 800237a:	200a      	movs	r0, #10
 800237c:	f003 fff4 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002380:	f003 fe7e 	bl	8006080 <OLED_Refresh_Gram>
			while (moving)
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <task2A2+0x5b8>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1d9      	bne.n	8002340 <task2A2+0x540>
 800238c:	e000      	b.n	8002390 <task2A2+0x590>
					break;
 800238e:	bf00      	nop
			 }
			actualAngle = 0;
 8002390:	4906      	ldr	r1, [pc, #24]	; (80023ac <task2A2+0x5ac>)
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	e9c1 2300 	strd	r2, r3, [r1]
			moving = 0;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <task2A2+0x5b8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 80023a4:	f001 f928 	bl	80035f8 <moveUltraEndLeft>
 80023a8:	e0e7      	b.n	800257a <task2A2+0x77a>
 80023aa:	bf00      	nop
 80023ac:	20000420 	.word	0x20000420
 80023b0:	20000418 	.word	0x20000418
 80023b4:	08014668 	.word	0x08014668
 80023b8:	20000414 	.word	0x20000414
 80023bc:	42480000 	.word	0x42480000
 80023c0:	20000258 	.word	0x20000258
 80023c4:	20000378 	.word	0x20000378
 80023c8:	42700000 	.word	0x42700000

		}
		else if (data == 'r')
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b72      	cmp	r3, #114	; 0x72
 80023d0:	f040 80d3 	bne.w	800257a <task2A2+0x77a>
		{
			htim1.Instance -> CCR4 = RIGHT;
 80023d4:	4b7b      	ldr	r3, [pc, #492]	; (80025c4 <task2A2+0x7c4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	22fa      	movs	r2, #250	; 0xfa
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 80023dc:	4b7a      	ldr	r3, [pc, #488]	; (80025c8 <task2A2+0x7c8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80023e4:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 80023e6:	4b78      	ldr	r3, [pc, #480]	; (80025c8 <task2A2+0x7c8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023ee:	63da      	str	r2, [r3, #60]	; 0x3c
			 moving = 1;
 80023f0:	4b76      	ldr	r3, [pc, #472]	; (80025cc <task2A2+0x7cc>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
			 while (moving)
 80023f6:	e021      	b.n	800243c <task2A2+0x63c>
			 {
				 if ((int)totalAngle <= -1*22)
 80023f8:	4b75      	ldr	r3, [pc, #468]	; (80025d0 <task2A2+0x7d0>)
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	f7fe fba9 	bl	8000b58 <__aeabi_d2iz>
 8002406:	4603      	mov	r3, r0
 8002408:	f113 0f15 	cmn.w	r3, #21
 800240c:	db1b      	blt.n	8002446 <task2A2+0x646>
				 {
					break;
				 }
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 800240e:	4b70      	ldr	r3, [pc, #448]	; (80025d0 <task2A2+0x7d0>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	f7fe fb9e 	bl	8000b58 <__aeabi_d2iz>
 800241c:	4602      	mov	r2, r0
 800241e:	f107 0308 	add.w	r3, r7, #8
 8002422:	496c      	ldr	r1, [pc, #432]	; (80025d4 <task2A2+0x7d4>)
 8002424:	4618      	mov	r0, r3
 8002426:	f00e fb11 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 800242a:	f107 0308 	add.w	r3, r7, #8
 800242e:	461a      	mov	r2, r3
 8002430:	2114      	movs	r1, #20
 8002432:	200a      	movs	r0, #10
 8002434:	f003 ff98 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002438:	f003 fe22 	bl	8006080 <OLED_Refresh_Gram>
			 while (moving)
 800243c:	4b63      	ldr	r3, [pc, #396]	; (80025cc <task2A2+0x7cc>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1d9      	bne.n	80023f8 <task2A2+0x5f8>
 8002444:	e000      	b.n	8002448 <task2A2+0x648>
					break;
 8002446:	bf00      	nop
			 }
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002448:	4b5f      	ldr	r3, [pc, #380]	; (80025c8 <task2A2+0x7c8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2200      	movs	r2, #0
 800244e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002450:	4b5d      	ldr	r3, [pc, #372]	; (80025c8 <task2A2+0x7c8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2200      	movs	r2, #0
 8002456:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(75.0,1);
 8002458:	2001      	movs	r0, #1
 800245a:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 80025d8 <task2A2+0x7d8>
 800245e:	f001 fcdf 	bl	8003e20 <moveGyroPID>
			htim1.Instance -> CCR4 = 110;
 8002462:	4b58      	ldr	r3, [pc, #352]	; (80025c4 <task2A2+0x7c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	226e      	movs	r2, #110	; 0x6e
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 800246a:	4b57      	ldr	r3, [pc, #348]	; (80025c8 <task2A2+0x7c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002472:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 8002474:	4b54      	ldr	r3, [pc, #336]	; (80025c8 <task2A2+0x7c8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800247c:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving)
 800247e:	e020      	b.n	80024c2 <task2A2+0x6c2>
			{
				if ((int)actualAngle >= 85)
 8002480:	4b56      	ldr	r3, [pc, #344]	; (80025dc <task2A2+0x7dc>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	f7fe fb65 	bl	8000b58 <__aeabi_d2iz>
 800248e:	4603      	mov	r3, r0
 8002490:	2b54      	cmp	r3, #84	; 0x54
 8002492:	dc1b      	bgt.n	80024cc <task2A2+0x6cc>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002494:	4b4e      	ldr	r3, [pc, #312]	; (80025d0 <task2A2+0x7d0>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	f7fe fb5b 	bl	8000b58 <__aeabi_d2iz>
 80024a2:	4602      	mov	r2, r0
 80024a4:	f107 0308 	add.w	r3, r7, #8
 80024a8:	494a      	ldr	r1, [pc, #296]	; (80025d4 <task2A2+0x7d4>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00e face 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 80024b0:	f107 0308 	add.w	r3, r7, #8
 80024b4:	461a      	mov	r2, r3
 80024b6:	2114      	movs	r1, #20
 80024b8:	200a      	movs	r0, #10
 80024ba:	f003 ff55 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 80024be:	f003 fddf 	bl	8006080 <OLED_Refresh_Gram>
			while (moving)
 80024c2:	4b42      	ldr	r3, [pc, #264]	; (80025cc <task2A2+0x7cc>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1da      	bne.n	8002480 <task2A2+0x680>
 80024ca:	e000      	b.n	80024ce <task2A2+0x6ce>
					break;
 80024cc:	bf00      	nop
			 }
			moving = 0;
 80024ce:	4b3f      	ldr	r3, [pc, #252]	; (80025cc <task2A2+0x7cc>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(45.0,1); // prev 23
 80024d4:	2001      	movs	r0, #1
 80024d6:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80025e0 <task2A2+0x7e0>
 80024da:	f001 ffad 	bl	8004438 <moveGyroPIDOld>
			moving = 0;
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <task2A2+0x7cc>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
			htim1.Instance -> CCR4 = 115;
 80024e4:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <task2A2+0x7c4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2273      	movs	r2, #115	; 0x73
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 80024ec:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <task2A2+0x7c8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 80024f6:	4b34      	ldr	r3, [pc, #208]	; (80025c8 <task2A2+0x7c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80024fe:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8002500:	2064      	movs	r0, #100	; 0x64
 8002502:	f7ff f9b5 	bl	8001870 <delay>
			moving = 0;
 8002506:	4b31      	ldr	r3, [pc, #196]	; (80025cc <task2A2+0x7cc>)
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
			osDelay(1);
 800250c:	2001      	movs	r0, #1
 800250e:	f00a feba 	bl	800d286 <osDelay>
			moving = 1;
 8002512:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <task2A2+0x7cc>)
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
			while (moving)
 8002518:	e020      	b.n	800255c <task2A2+0x75c>
			{
				if ((int)totalAngle >= 105)
 800251a:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <task2A2+0x7d0>)
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	f7fe fb18 	bl	8000b58 <__aeabi_d2iz>
 8002528:	4603      	mov	r3, r0
 800252a:	2b68      	cmp	r3, #104	; 0x68
 800252c:	dc1b      	bgt.n	8002566 <task2A2+0x766>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 800252e:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <task2A2+0x7d0>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	f7fe fb0e 	bl	8000b58 <__aeabi_d2iz>
 800253c:	4602      	mov	r2, r0
 800253e:	f107 0308 	add.w	r3, r7, #8
 8002542:	4924      	ldr	r1, [pc, #144]	; (80025d4 <task2A2+0x7d4>)
 8002544:	4618      	mov	r0, r3
 8002546:	f00e fa81 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 800254a:	f107 0308 	add.w	r3, r7, #8
 800254e:	461a      	mov	r2, r3
 8002550:	2114      	movs	r1, #20
 8002552:	200a      	movs	r0, #10
 8002554:	f003 ff08 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002558:	f003 fd92 	bl	8006080 <OLED_Refresh_Gram>
			while (moving)
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <task2A2+0x7cc>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1da      	bne.n	800251a <task2A2+0x71a>
 8002564:	e000      	b.n	8002568 <task2A2+0x768>
					break;
 8002566:	bf00      	nop
			 }
			actualAngle = 0;
 8002568:	491c      	ldr	r1, [pc, #112]	; (80025dc <task2A2+0x7dc>)
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 8002576:	f000 fe2f 	bl	80031d8 <moveUltraEnd>
		}
	}

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <task2A2+0x7c8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2200      	movs	r2, #0
 8002580:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <task2A2+0x7c8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance -> CCR4 = STRAIGHT;
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <task2A2+0x7c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2295      	movs	r2, #149	; 0x95
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002592:	2201      	movs	r2, #1
 8002594:	2108      	movs	r1, #8
 8002596:	4813      	ldr	r0, [pc, #76]	; (80025e4 <task2A2+0x7e4>)
 8002598:	f005 f80c 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800259c:	2200      	movs	r2, #0
 800259e:	2104      	movs	r1, #4
 80025a0:	4810      	ldr	r0, [pc, #64]	; (80025e4 <task2A2+0x7e4>)
 80025a2:	f005 f807 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80025a6:	2201      	movs	r2, #1
 80025a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025ac:	480e      	ldr	r0, [pc, #56]	; (80025e8 <task2A2+0x7e8>)
 80025ae:	f005 f801 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2120      	movs	r1, #32
 80025b6:	480d      	ldr	r0, [pc, #52]	; (80025ec <task2A2+0x7ec>)
 80025b8:	f004 fffc 	bl	80075b4 <HAL_GPIO_WritePin>
}
 80025bc:	bf00      	nop
 80025be:	3780      	adds	r7, #128	; 0x80
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000258 	.word	0x20000258
 80025c8:	20000378 	.word	0x20000378
 80025cc:	20000414 	.word	0x20000414
 80025d0:	20000418 	.word	0x20000418
 80025d4:	08014668 	.word	0x08014668
 80025d8:	42960000 	.word	0x42960000
 80025dc:	20000420 	.word	0x20000420
 80025e0:	42340000 	.word	0x42340000
 80025e4:	40020000 	.word	0x40020000
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40020800 	.word	0x40020800

080025f0 <task2A2L>:

// 2nd obstacle after turning left
void task2A2L(uint32_t data)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b0a0      	sub	sp, #128	; 0x80
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	uint32_t offset_show[30];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80025f8:	2100      	movs	r1, #0
 80025fa:	48ac      	ldr	r0, [pc, #688]	; (80028ac <task2A2L+0x2bc>)
 80025fc:	f008 f890 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002600:	2108      	movs	r1, #8
 8002602:	48aa      	ldr	r0, [pc, #680]	; (80028ac <task2A2L+0x2bc>)
 8002604:	f008 f88c 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002608:	210c      	movs	r1, #12
 800260a:	48a9      	ldr	r0, [pc, #676]	; (80028b0 <task2A2L+0x2c0>)
 800260c:	f008 f888 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002610:	2201      	movs	r2, #1
 8002612:	2108      	movs	r1, #8
 8002614:	48a7      	ldr	r0, [pc, #668]	; (80028b4 <task2A2L+0x2c4>)
 8002616:	f004 ffcd 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800261a:	2200      	movs	r2, #0
 800261c:	2104      	movs	r1, #4
 800261e:	48a5      	ldr	r0, [pc, #660]	; (80028b4 <task2A2L+0x2c4>)
 8002620:	f004 ffc8 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8002624:	2201      	movs	r2, #1
 8002626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800262a:	48a3      	ldr	r0, [pc, #652]	; (80028b8 <task2A2L+0x2c8>)
 800262c:	f004 ffc2 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8002630:	2200      	movs	r2, #0
 8002632:	2120      	movs	r1, #32
 8002634:	48a1      	ldr	r0, [pc, #644]	; (80028bc <task2A2L+0x2cc>)
 8002636:	f004 ffbd 	bl	80075b4 <HAL_GPIO_WritePin>
	moving = 0;
 800263a:	4ba1      	ldr	r3, [pc, #644]	; (80028c0 <task2A2L+0x2d0>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]

	if (continueMoving){
 8002640:	4ba0      	ldr	r3, [pc, #640]	; (80028c4 <task2A2L+0x2d4>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 81c3 	beq.w	80029d0 <task2A2L+0x3e0>
		//	uint8_t continueMoving;
		//if picture detected is left Yln
		if (data == 'l')
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b6c      	cmp	r3, #108	; 0x6c
 800264e:	f040 80d2 	bne.w	80027f6 <task2A2L+0x206>
		{
			htim1.Instance -> CCR4 = 117;
 8002652:	4b97      	ldr	r3, [pc, #604]	; (80028b0 <task2A2L+0x2c0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2275      	movs	r2, #117	; 0x75
 8002658:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 800265a:	4b94      	ldr	r3, [pc, #592]	; (80028ac <task2A2L+0x2bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002662:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 8002664:	4b91      	ldr	r3, [pc, #580]	; (80028ac <task2A2L+0x2bc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800266c:	63da      	str	r2, [r3, #60]	; 0x3c
			 moving = 1;
 800266e:	4b94      	ldr	r3, [pc, #592]	; (80028c0 <task2A2L+0x2d0>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
			 while (moving)
 8002674:	e020      	b.n	80026b8 <task2A2L+0xc8>
			 {
				 if ((int)totalAngle >= 60)
 8002676:	4b94      	ldr	r3, [pc, #592]	; (80028c8 <task2A2L+0x2d8>)
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	f7fe fa6a 	bl	8000b58 <__aeabi_d2iz>
 8002684:	4603      	mov	r3, r0
 8002686:	2b3b      	cmp	r3, #59	; 0x3b
 8002688:	dc1b      	bgt.n	80026c2 <task2A2L+0xd2>
				 {
					break;
				 }
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 800268a:	4b8f      	ldr	r3, [pc, #572]	; (80028c8 <task2A2L+0x2d8>)
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	f7fe fa60 	bl	8000b58 <__aeabi_d2iz>
 8002698:	4602      	mov	r2, r0
 800269a:	f107 0308 	add.w	r3, r7, #8
 800269e:	498b      	ldr	r1, [pc, #556]	; (80028cc <task2A2L+0x2dc>)
 80026a0:	4618      	mov	r0, r3
 80026a2:	f00e f9d3 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 80026a6:	f107 0308 	add.w	r3, r7, #8
 80026aa:	461a      	mov	r2, r3
 80026ac:	2114      	movs	r1, #20
 80026ae:	200a      	movs	r0, #10
 80026b0:	f003 fe5a 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 80026b4:	f003 fce4 	bl	8006080 <OLED_Refresh_Gram>
			 while (moving)
 80026b8:	4b81      	ldr	r3, [pc, #516]	; (80028c0 <task2A2L+0x2d0>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1da      	bne.n	8002676 <task2A2L+0x86>
 80026c0:	e000      	b.n	80026c4 <task2A2L+0xd4>
					break;
 80026c2:	bf00      	nop
			 }
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80026c4:	4b79      	ldr	r3, [pc, #484]	; (80028ac <task2A2L+0x2bc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2200      	movs	r2, #0
 80026ca:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80026cc:	4b77      	ldr	r3, [pc, #476]	; (80028ac <task2A2L+0x2bc>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(60,1);
 80026d4:	2001      	movs	r0, #1
 80026d6:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80028d0 <task2A2L+0x2e0>
 80026da:	f001 fba1 	bl	8003e20 <moveGyroPID>
			htim1.Instance -> CCR4 = RIGHT;
 80026de:	4b74      	ldr	r3, [pc, #464]	; (80028b0 <task2A2L+0x2c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	22fa      	movs	r2, #250	; 0xfa
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 80026e6:	4b71      	ldr	r3, [pc, #452]	; (80028ac <task2A2L+0x2bc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80026ee:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 80026f0:	4b6e      	ldr	r3, [pc, #440]	; (80028ac <task2A2L+0x2bc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026f8:	63da      	str	r2, [r3, #60]	; 0x3c
	// 		continueMoving = 0;

			while (moving)
 80026fa:	e021      	b.n	8002740 <task2A2L+0x150>
			{
				if ((int)totalAngle <= -85)
 80026fc:	4b72      	ldr	r3, [pc, #456]	; (80028c8 <task2A2L+0x2d8>)
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f7fe fa27 	bl	8000b58 <__aeabi_d2iz>
 800270a:	4603      	mov	r3, r0
 800270c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002710:	db1b      	blt.n	800274a <task2A2L+0x15a>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002712:	4b6d      	ldr	r3, [pc, #436]	; (80028c8 <task2A2L+0x2d8>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe fa1c 	bl	8000b58 <__aeabi_d2iz>
 8002720:	4602      	mov	r2, r0
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	4969      	ldr	r1, [pc, #420]	; (80028cc <task2A2L+0x2dc>)
 8002728:	4618      	mov	r0, r3
 800272a:	f00e f98f 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 800272e:	f107 0308 	add.w	r3, r7, #8
 8002732:	461a      	mov	r2, r3
 8002734:	2114      	movs	r1, #20
 8002736:	200a      	movs	r0, #10
 8002738:	f003 fe16 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 800273c:	f003 fca0 	bl	8006080 <OLED_Refresh_Gram>
			while (moving)
 8002740:	4b5f      	ldr	r3, [pc, #380]	; (80028c0 <task2A2L+0x2d0>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1d9      	bne.n	80026fc <task2A2L+0x10c>
 8002748:	e000      	b.n	800274c <task2A2L+0x15c>
					break;
 800274a:	bf00      	nop
			 }

			 moving = 0;
 800274c:	4b5c      	ldr	r3, [pc, #368]	; (80028c0 <task2A2L+0x2d0>)
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
			 moveGyroPIDOld(50.0,1);
 8002752:	2001      	movs	r0, #1
 8002754:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 80028d4 <task2A2L+0x2e4>
 8002758:	f001 fe6e 	bl	8004438 <moveGyroPIDOld>
			 moving = 0;
 800275c:	4b58      	ldr	r3, [pc, #352]	; (80028c0 <task2A2L+0x2d0>)
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
			 delay(100);
 8002762:	2064      	movs	r0, #100	; 0x64
 8002764:	f7ff f884 	bl	8001870 <delay>
			moving = 1;
 8002768:	4b55      	ldr	r3, [pc, #340]	; (80028c0 <task2A2L+0x2d0>)
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
			htim1.Instance -> CCR4 = RIGHT;
 800276e:	4b50      	ldr	r3, [pc, #320]	; (80028b0 <task2A2L+0x2c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	22fa      	movs	r2, #250	; 0xfa
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002776:	4b4d      	ldr	r3, [pc, #308]	; (80028ac <task2A2L+0x2bc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800277e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002780:	4b4a      	ldr	r3, [pc, #296]	; (80028ac <task2A2L+0x2bc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002788:	63da      	str	r2, [r3, #60]	; 0x3c

			while (moving)
 800278a:	e021      	b.n	80027d0 <task2A2L+0x1e0>
			{
				if ((int)totalAngle <= -90) // was 95. was 90
 800278c:	4b4e      	ldr	r3, [pc, #312]	; (80028c8 <task2A2L+0x2d8>)
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	f7fe f9df 	bl	8000b58 <__aeabi_d2iz>
 800279a:	4603      	mov	r3, r0
 800279c:	f113 0f59 	cmn.w	r3, #89	; 0x59
 80027a0:	db1b      	blt.n	80027da <task2A2L+0x1ea>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <task2A2L+0x2d8>)
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	f7fe f9d4 	bl	8000b58 <__aeabi_d2iz>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	4945      	ldr	r1, [pc, #276]	; (80028cc <task2A2L+0x2dc>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f00e f947 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 80027be:	f107 0308 	add.w	r3, r7, #8
 80027c2:	461a      	mov	r2, r3
 80027c4:	2114      	movs	r1, #20
 80027c6:	200a      	movs	r0, #10
 80027c8:	f003 fdce 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 80027cc:	f003 fc58 	bl	8006080 <OLED_Refresh_Gram>
			while (moving)
 80027d0:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <task2A2L+0x2d0>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1d9      	bne.n	800278c <task2A2L+0x19c>
 80027d8:	e000      	b.n	80027dc <task2A2L+0x1ec>
					break;
 80027da:	bf00      	nop
			 }
			actualAngle = 0;
 80027dc:	493e      	ldr	r1, [pc, #248]	; (80028d8 <task2A2L+0x2e8>)
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	e9c1 2300 	strd	r2, r3, [r1]
			moving = 0;
 80027ea:	4b35      	ldr	r3, [pc, #212]	; (80028c0 <task2A2L+0x2d0>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 80027f0:	f000 ff02 	bl	80035f8 <moveUltraEndLeft>
 80027f4:	e2ae      	b.n	8002d54 <task2A2L+0x764>

		}
		else if (data == 'r')
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b72      	cmp	r3, #114	; 0x72
 80027fa:	f040 82ab 	bne.w	8002d54 <task2A2L+0x764>
		{
			htim1.Instance -> CCR4 = RIGHT;
 80027fe:	4b2c      	ldr	r3, [pc, #176]	; (80028b0 <task2A2L+0x2c0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	22fa      	movs	r2, #250	; 0xfa
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002806:	4b29      	ldr	r3, [pc, #164]	; (80028ac <task2A2L+0x2bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800280e:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002810:	4b26      	ldr	r3, [pc, #152]	; (80028ac <task2A2L+0x2bc>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002818:	63da      	str	r2, [r3, #60]	; 0x3c
			 moving = 1;
 800281a:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <task2A2L+0x2d0>)
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
			 while (moving)
 8002820:	e021      	b.n	8002866 <task2A2L+0x276>
			 {
				 if ((int)totalAngle <= -1*60)
 8002822:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <task2A2L+0x2d8>)
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	f7fe f994 	bl	8000b58 <__aeabi_d2iz>
 8002830:	4603      	mov	r3, r0
 8002832:	f113 0f3b 	cmn.w	r3, #59	; 0x3b
 8002836:	db1b      	blt.n	8002870 <task2A2L+0x280>
				 {
					break;
				 }
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002838:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <task2A2L+0x2d8>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f7fe f989 	bl	8000b58 <__aeabi_d2iz>
 8002846:	4602      	mov	r2, r0
 8002848:	f107 0308 	add.w	r3, r7, #8
 800284c:	491f      	ldr	r1, [pc, #124]	; (80028cc <task2A2L+0x2dc>)
 800284e:	4618      	mov	r0, r3
 8002850:	f00e f8fc 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002854:	f107 0308 	add.w	r3, r7, #8
 8002858:	461a      	mov	r2, r3
 800285a:	2114      	movs	r1, #20
 800285c:	200a      	movs	r0, #10
 800285e:	f003 fd83 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002862:	f003 fc0d 	bl	8006080 <OLED_Refresh_Gram>
			 while (moving)
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <task2A2L+0x2d0>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1d9      	bne.n	8002822 <task2A2L+0x232>
 800286e:	e000      	b.n	8002872 <task2A2L+0x282>
					break;
 8002870:	bf00      	nop
			 }
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <task2A2L+0x2bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <task2A2L+0x2bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2200      	movs	r2, #0
 8002880:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(45.0, 1);
 8002882:	2001      	movs	r0, #1
 8002884:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80028dc <task2A2L+0x2ec>
 8002888:	f001 faca 	bl	8003e20 <moveGyroPID>
			htim1.Instance -> CCR4 = 110;
 800288c:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <task2A2L+0x2c0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	226e      	movs	r2, #110	; 0x6e
 8002892:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <task2A2L+0x2bc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800289c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 800289e:	4b03      	ldr	r3, [pc, #12]	; (80028ac <task2A2L+0x2bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80028a6:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving)
 80028a8:	e03b      	b.n	8002922 <task2A2L+0x332>
 80028aa:	bf00      	nop
 80028ac:	20000378 	.word	0x20000378
 80028b0:	20000258 	.word	0x20000258
 80028b4:	40020000 	.word	0x40020000
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40020800 	.word	0x40020800
 80028c0:	20000414 	.word	0x20000414
 80028c4:	20000416 	.word	0x20000416
 80028c8:	20000418 	.word	0x20000418
 80028cc:	08014668 	.word	0x08014668
 80028d0:	42700000 	.word	0x42700000
 80028d4:	42480000 	.word	0x42480000
 80028d8:	20000420 	.word	0x20000420
 80028dc:	42340000 	.word	0x42340000
			{
				if ((int)totalAngle >= 85)
 80028e0:	4ba9      	ldr	r3, [pc, #676]	; (8002b88 <task2A2L+0x598>)
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	f7fe f935 	bl	8000b58 <__aeabi_d2iz>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b54      	cmp	r3, #84	; 0x54
 80028f2:	dc1b      	bgt.n	800292c <task2A2L+0x33c>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 80028f4:	4ba4      	ldr	r3, [pc, #656]	; (8002b88 <task2A2L+0x598>)
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7fe f92b 	bl	8000b58 <__aeabi_d2iz>
 8002902:	4602      	mov	r2, r0
 8002904:	f107 0308 	add.w	r3, r7, #8
 8002908:	49a0      	ldr	r1, [pc, #640]	; (8002b8c <task2A2L+0x59c>)
 800290a:	4618      	mov	r0, r3
 800290c:	f00e f89e 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002910:	f107 0308 	add.w	r3, r7, #8
 8002914:	461a      	mov	r2, r3
 8002916:	2114      	movs	r1, #20
 8002918:	200a      	movs	r0, #10
 800291a:	f003 fd25 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 800291e:	f003 fbaf 	bl	8006080 <OLED_Refresh_Gram>
			while (moving)
 8002922:	4b9b      	ldr	r3, [pc, #620]	; (8002b90 <task2A2L+0x5a0>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1da      	bne.n	80028e0 <task2A2L+0x2f0>
 800292a:	e000      	b.n	800292e <task2A2L+0x33e>
					break;
 800292c:	bf00      	nop
			 }
			moving = 0;
 800292e:	4b98      	ldr	r3, [pc, #608]	; (8002b90 <task2A2L+0x5a0>)
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(70.0,1); // prev 23
 8002934:	2001      	movs	r0, #1
 8002936:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8002b94 <task2A2L+0x5a4>
 800293a:	f001 fd7d 	bl	8004438 <moveGyroPIDOld>
			moving = 0;
 800293e:	4b94      	ldr	r3, [pc, #592]	; (8002b90 <task2A2L+0x5a0>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
			htim1.Instance -> CCR4 = 115;
 8002944:	4b94      	ldr	r3, [pc, #592]	; (8002b98 <task2A2L+0x5a8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2273      	movs	r2, #115	; 0x73
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 800294c:	4b93      	ldr	r3, [pc, #588]	; (8002b9c <task2A2L+0x5ac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002954:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8002956:	4b91      	ldr	r3, [pc, #580]	; (8002b9c <task2A2L+0x5ac>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800295e:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8002960:	2064      	movs	r0, #100	; 0x64
 8002962:	f7fe ff85 	bl	8001870 <delay>
			moving = 1;
 8002966:	4b8a      	ldr	r3, [pc, #552]	; (8002b90 <task2A2L+0x5a0>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
			while (moving)
 800296c:	e020      	b.n	80029b0 <task2A2L+0x3c0>
			{
				if ((int)totalAngle >= 92)
 800296e:	4b86      	ldr	r3, [pc, #536]	; (8002b88 <task2A2L+0x598>)
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	f7fe f8ee 	bl	8000b58 <__aeabi_d2iz>
 800297c:	4603      	mov	r3, r0
 800297e:	2b5b      	cmp	r3, #91	; 0x5b
 8002980:	dc1b      	bgt.n	80029ba <task2A2L+0x3ca>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002982:	4b81      	ldr	r3, [pc, #516]	; (8002b88 <task2A2L+0x598>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f8e4 	bl	8000b58 <__aeabi_d2iz>
 8002990:	4602      	mov	r2, r0
 8002992:	f107 0308 	add.w	r3, r7, #8
 8002996:	497d      	ldr	r1, [pc, #500]	; (8002b8c <task2A2L+0x59c>)
 8002998:	4618      	mov	r0, r3
 800299a:	f00e f857 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 800299e:	f107 0308 	add.w	r3, r7, #8
 80029a2:	461a      	mov	r2, r3
 80029a4:	2114      	movs	r1, #20
 80029a6:	200a      	movs	r0, #10
 80029a8:	f003 fcde 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 80029ac:	f003 fb68 	bl	8006080 <OLED_Refresh_Gram>
			while (moving)
 80029b0:	4b77      	ldr	r3, [pc, #476]	; (8002b90 <task2A2L+0x5a0>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1da      	bne.n	800296e <task2A2L+0x37e>
 80029b8:	e000      	b.n	80029bc <task2A2L+0x3cc>
					break;
 80029ba:	bf00      	nop
			 }
			actualAngle = 0;
 80029bc:	4978      	ldr	r1, [pc, #480]	; (8002ba0 <task2A2L+0x5b0>)
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 80029ca:	f000 fc05 	bl	80031d8 <moveUltraEnd>
 80029ce:	e1c1      	b.n	8002d54 <task2A2L+0x764>
		}
	} else {
		// meaning continueMoving is 0, indicating that the car
		// stopped because ultrasonic distance hit before target angle hit
		//if picture detected is left Yln
		if (data == 'l')
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b6c      	cmp	r3, #108	; 0x6c
 80029d4:	f040 80ea 	bne.w	8002bac <task2A2L+0x5bc>
		{
			htim1.Instance -> CCR4 = 115;
 80029d8:	4b6f      	ldr	r3, [pc, #444]	; (8002b98 <task2A2L+0x5a8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2273      	movs	r2, #115	; 0x73
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 80029e0:	4b6e      	ldr	r3, [pc, #440]	; (8002b9c <task2A2L+0x5ac>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 80029ea:	4b6c      	ldr	r3, [pc, #432]	; (8002b9c <task2A2L+0x5ac>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80029f2:	63da      	str	r2, [r3, #60]	; 0x3c
			 moving = 1;
 80029f4:	4b66      	ldr	r3, [pc, #408]	; (8002b90 <task2A2L+0x5a0>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
			 while (moving)
 80029fa:	e020      	b.n	8002a3e <task2A2L+0x44e>
			 {
				 if ((int)actualAngle >= 40)
 80029fc:	4b68      	ldr	r3, [pc, #416]	; (8002ba0 <task2A2L+0x5b0>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	f7fe f8a7 	bl	8000b58 <__aeabi_d2iz>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b27      	cmp	r3, #39	; 0x27
 8002a0e:	dc1b      	bgt.n	8002a48 <task2A2L+0x458>
				 {
					break;
				 }
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002a10:	4b5d      	ldr	r3, [pc, #372]	; (8002b88 <task2A2L+0x598>)
 8002a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f7fe f89d 	bl	8000b58 <__aeabi_d2iz>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	f107 0308 	add.w	r3, r7, #8
 8002a24:	4959      	ldr	r1, [pc, #356]	; (8002b8c <task2A2L+0x59c>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	f00e f810 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002a2c:	f107 0308 	add.w	r3, r7, #8
 8002a30:	461a      	mov	r2, r3
 8002a32:	2114      	movs	r1, #20
 8002a34:	200a      	movs	r0, #10
 8002a36:	f003 fc97 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002a3a:	f003 fb21 	bl	8006080 <OLED_Refresh_Gram>
			 while (moving)
 8002a3e:	4b54      	ldr	r3, [pc, #336]	; (8002b90 <task2A2L+0x5a0>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1da      	bne.n	80029fc <task2A2L+0x40c>
 8002a46:	e000      	b.n	8002a4a <task2A2L+0x45a>
					break;
 8002a48:	bf00      	nop
			 }
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002a4a:	4b54      	ldr	r3, [pc, #336]	; (8002b9c <task2A2L+0x5ac>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002a52:	4b52      	ldr	r3, [pc, #328]	; (8002b9c <task2A2L+0x5ac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2200      	movs	r2, #0
 8002a58:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(73.0,1);
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8002ba4 <task2A2L+0x5b4>
 8002a60:	f001 f9de 	bl	8003e20 <moveGyroPID>
			htim1.Instance -> CCR4 = RIGHT;
 8002a64:	4b4c      	ldr	r3, [pc, #304]	; (8002b98 <task2A2L+0x5a8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	22fa      	movs	r2, #250	; 0xfa
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002a6c:	4b4b      	ldr	r3, [pc, #300]	; (8002b9c <task2A2L+0x5ac>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002a74:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002a76:	4b49      	ldr	r3, [pc, #292]	; (8002b9c <task2A2L+0x5ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a7e:	63da      	str	r2, [r3, #60]	; 0x3c
	// 		continueMoving = 0;

			while (moving)
 8002a80:	e021      	b.n	8002ac6 <task2A2L+0x4d6>
			{
				if ((int)actualAngle <= -1*90)
 8002a82:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <task2A2L+0x5b0>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe f864 	bl	8000b58 <__aeabi_d2iz>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8002a96:	db1b      	blt.n	8002ad0 <task2A2L+0x4e0>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002a98:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <task2A2L+0x598>)
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f7fe f859 	bl	8000b58 <__aeabi_d2iz>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	f107 0308 	add.w	r3, r7, #8
 8002aac:	4937      	ldr	r1, [pc, #220]	; (8002b8c <task2A2L+0x59c>)
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f00d ffcc 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002ab4:	f107 0308 	add.w	r3, r7, #8
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2114      	movs	r1, #20
 8002abc:	200a      	movs	r0, #10
 8002abe:	f003 fc53 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002ac2:	f003 fadd 	bl	8006080 <OLED_Refresh_Gram>
			while (moving)
 8002ac6:	4b32      	ldr	r3, [pc, #200]	; (8002b90 <task2A2L+0x5a0>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1d9      	bne.n	8002a82 <task2A2L+0x492>
 8002ace:	e000      	b.n	8002ad2 <task2A2L+0x4e2>
					break;
 8002ad0:	bf00      	nop
			 }

			 moving = 0;
 8002ad2:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <task2A2L+0x5a0>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
			 moveGyroPIDOld(40.0,1);
 8002ad8:	2001      	movs	r0, #1
 8002ada:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8002ba8 <task2A2L+0x5b8>
 8002ade:	f001 fcab 	bl	8004438 <moveGyroPIDOld>
			 moving = 0;
 8002ae2:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <task2A2L+0x5a0>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
			htim1.Instance -> CCR4 = RIGHT;
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <task2A2L+0x5a8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	22fa      	movs	r2, #250	; 0xfa
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002af0:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <task2A2L+0x5ac>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002af8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002afa:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <task2A2L+0x5ac>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b02:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8002b04:	2064      	movs	r0, #100	; 0x64
 8002b06:	f7fe feb3 	bl	8001870 <delay>
			moving=0;
 8002b0a:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <task2A2L+0x5a0>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
			osDelay(1);
 8002b10:	2001      	movs	r0, #1
 8002b12:	f00a fbb8 	bl	800d286 <osDelay>
			moving = 1;
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <task2A2L+0x5a0>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
			while (moving)
 8002b1c:	e021      	b.n	8002b62 <task2A2L+0x572>
			{
				if ((int)totalAngle <= -1*90) // note: i changed to actualAngle to try, original was totalAngle = -100
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <task2A2L+0x598>)
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f7fe f816 	bl	8000b58 <__aeabi_d2iz>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8002b32:	db1b      	blt.n	8002b6c <task2A2L+0x57c>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <task2A2L+0x598>)
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f7fe f80b 	bl	8000b58 <__aeabi_d2iz>
 8002b42:	4602      	mov	r2, r0
 8002b44:	f107 0308 	add.w	r3, r7, #8
 8002b48:	4910      	ldr	r1, [pc, #64]	; (8002b8c <task2A2L+0x59c>)
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f00d ff7e 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002b50:	f107 0308 	add.w	r3, r7, #8
 8002b54:	461a      	mov	r2, r3
 8002b56:	2114      	movs	r1, #20
 8002b58:	200a      	movs	r0, #10
 8002b5a:	f003 fc05 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002b5e:	f003 fa8f 	bl	8006080 <OLED_Refresh_Gram>
			while (moving)
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <task2A2L+0x5a0>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1d9      	bne.n	8002b1e <task2A2L+0x52e>
 8002b6a:	e000      	b.n	8002b6e <task2A2L+0x57e>
					break;
 8002b6c:	bf00      	nop
			 }
			actualAngle = 0;
 8002b6e:	490c      	ldr	r1, [pc, #48]	; (8002ba0 <task2A2L+0x5b0>)
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9c1 2300 	strd	r2, r3, [r1]
			moving = 0;
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <task2A2L+0x5a0>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 8002b82:	f000 fd39 	bl	80035f8 <moveUltraEndLeft>
 8002b86:	e0e5      	b.n	8002d54 <task2A2L+0x764>
 8002b88:	20000418 	.word	0x20000418
 8002b8c:	08014668 	.word	0x08014668
 8002b90:	20000414 	.word	0x20000414
 8002b94:	428c0000 	.word	0x428c0000
 8002b98:	20000258 	.word	0x20000258
 8002b9c:	20000378 	.word	0x20000378
 8002ba0:	20000420 	.word	0x20000420
 8002ba4:	42920000 	.word	0x42920000
 8002ba8:	42200000 	.word	0x42200000

		}
		else if (data == 'r')
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b72      	cmp	r3, #114	; 0x72
 8002bb0:	f040 80d0 	bne.w	8002d54 <task2A2L+0x764>
		{
			htim1.Instance -> CCR4 = RIGHT;
 8002bb4:	4b7a      	ldr	r3, [pc, #488]	; (8002da0 <task2A2L+0x7b0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	22fa      	movs	r2, #250	; 0xfa
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8002bbc:	4b79      	ldr	r3, [pc, #484]	; (8002da4 <task2A2L+0x7b4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002bc4:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8002bc6:	4b77      	ldr	r3, [pc, #476]	; (8002da4 <task2A2L+0x7b4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bce:	63da      	str	r2, [r3, #60]	; 0x3c
			 moving = 1;
 8002bd0:	4b75      	ldr	r3, [pc, #468]	; (8002da8 <task2A2L+0x7b8>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
			 while (moving)
 8002bd6:	e021      	b.n	8002c1c <task2A2L+0x62c>
			 {
				 if ((int)totalAngle <= -1*60) // was 65
 8002bd8:	4b74      	ldr	r3, [pc, #464]	; (8002dac <task2A2L+0x7bc>)
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	f7fd ffb9 	bl	8000b58 <__aeabi_d2iz>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f113 0f3b 	cmn.w	r3, #59	; 0x3b
 8002bec:	db1b      	blt.n	8002c26 <task2A2L+0x636>
				 {
					break;
				 }
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002bee:	4b6f      	ldr	r3, [pc, #444]	; (8002dac <task2A2L+0x7bc>)
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f7fd ffae 	bl	8000b58 <__aeabi_d2iz>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	f107 0308 	add.w	r3, r7, #8
 8002c02:	496b      	ldr	r1, [pc, #428]	; (8002db0 <task2A2L+0x7c0>)
 8002c04:	4618      	mov	r0, r3
 8002c06:	f00d ff21 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002c0a:	f107 0308 	add.w	r3, r7, #8
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2114      	movs	r1, #20
 8002c12:	200a      	movs	r0, #10
 8002c14:	f003 fba8 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002c18:	f003 fa32 	bl	8006080 <OLED_Refresh_Gram>
			 while (moving)
 8002c1c:	4b62      	ldr	r3, [pc, #392]	; (8002da8 <task2A2L+0x7b8>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1d9      	bne.n	8002bd8 <task2A2L+0x5e8>
 8002c24:	e000      	b.n	8002c28 <task2A2L+0x638>
					break;
 8002c26:	bf00      	nop
			 }
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002c28:	4b5e      	ldr	r3, [pc, #376]	; (8002da4 <task2A2L+0x7b4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002c30:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <task2A2L+0x7b4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2200      	movs	r2, #0
 8002c36:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 0;
 8002c38:	4b5b      	ldr	r3, [pc, #364]	; (8002da8 <task2A2L+0x7b8>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(45.0,1); // was 55
 8002c3e:	2001      	movs	r0, #1
 8002c40:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8002db4 <task2A2L+0x7c4>
 8002c44:	f001 fbf8 	bl	8004438 <moveGyroPIDOld>
			htim1.Instance -> CCR4 = 110;
 8002c48:	4b55      	ldr	r3, [pc, #340]	; (8002da0 <task2A2L+0x7b0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	226e      	movs	r2, #110	; 0x6e
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8002c50:	4b54      	ldr	r3, [pc, #336]	; (8002da4 <task2A2L+0x7b4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c58:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8002c5a:	4b52      	ldr	r3, [pc, #328]	; (8002da4 <task2A2L+0x7b4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002c62:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving)
 8002c64:	e020      	b.n	8002ca8 <task2A2L+0x6b8>
			{
				if ((int)actualAngle >= 83)
 8002c66:	4b54      	ldr	r3, [pc, #336]	; (8002db8 <task2A2L+0x7c8>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	4619      	mov	r1, r3
 8002c70:	f7fd ff72 	bl	8000b58 <__aeabi_d2iz>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b52      	cmp	r3, #82	; 0x52
 8002c78:	dc1b      	bgt.n	8002cb2 <task2A2L+0x6c2>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002c7a:	4b4c      	ldr	r3, [pc, #304]	; (8002dac <task2A2L+0x7bc>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f7fd ff68 	bl	8000b58 <__aeabi_d2iz>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f107 0308 	add.w	r3, r7, #8
 8002c8e:	4948      	ldr	r1, [pc, #288]	; (8002db0 <task2A2L+0x7c0>)
 8002c90:	4618      	mov	r0, r3
 8002c92:	f00d fedb 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002c96:	f107 0308 	add.w	r3, r7, #8
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2114      	movs	r1, #20
 8002c9e:	200a      	movs	r0, #10
 8002ca0:	f003 fb62 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002ca4:	f003 f9ec 	bl	8006080 <OLED_Refresh_Gram>
			while (moving)
 8002ca8:	4b3f      	ldr	r3, [pc, #252]	; (8002da8 <task2A2L+0x7b8>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1da      	bne.n	8002c66 <task2A2L+0x676>
 8002cb0:	e000      	b.n	8002cb4 <task2A2L+0x6c4>
					break;
 8002cb2:	bf00      	nop
			 }
			moving = 0;
 8002cb4:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <task2A2L+0x7b8>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(60.0,1); // prev 23
 8002cba:	2001      	movs	r0, #1
 8002cbc:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8002dbc <task2A2L+0x7cc>
 8002cc0:	f001 fbba 	bl	8004438 <moveGyroPIDOld>
			moving = 0;
 8002cc4:	4b38      	ldr	r3, [pc, #224]	; (8002da8 <task2A2L+0x7b8>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
			htim1.Instance -> CCR4 = 115;
 8002cca:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <task2A2L+0x7b0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2273      	movs	r2, #115	; 0x73
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8002cd2:	4b34      	ldr	r3, [pc, #208]	; (8002da4 <task2A2L+0x7b4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8002cdc:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <task2A2L+0x7b4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002ce4:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100); // delay because gyro needs time to reset
 8002ce6:	2064      	movs	r0, #100	; 0x64
 8002ce8:	f7fe fdc2 	bl	8001870 <delay>
			moving = 1;
 8002cec:	4b2e      	ldr	r3, [pc, #184]	; (8002da8 <task2A2L+0x7b8>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
			while (moving)
 8002cf2:	e020      	b.n	8002d36 <task2A2L+0x746>
			{
				if ((int)totalAngle >= 105)
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <task2A2L+0x7bc>)
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f7fd ff2b 	bl	8000b58 <__aeabi_d2iz>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b68      	cmp	r3, #104	; 0x68
 8002d06:	dc1b      	bgt.n	8002d40 <task2A2L+0x750>
				{
					break;
				}
				 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8002d08:	4b28      	ldr	r3, [pc, #160]	; (8002dac <task2A2L+0x7bc>)
 8002d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	f7fd ff21 	bl	8000b58 <__aeabi_d2iz>
 8002d16:	4602      	mov	r2, r0
 8002d18:	f107 0308 	add.w	r3, r7, #8
 8002d1c:	4924      	ldr	r1, [pc, #144]	; (8002db0 <task2A2L+0x7c0>)
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f00d fe94 	bl	8010a4c <siprintf>
				 OLED_ShowString(10,20, offset_show);
 8002d24:	f107 0308 	add.w	r3, r7, #8
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2114      	movs	r1, #20
 8002d2c:	200a      	movs	r0, #10
 8002d2e:	f003 fb1b 	bl	8006368 <OLED_ShowString>
				 OLED_Refresh_Gram();
 8002d32:	f003 f9a5 	bl	8006080 <OLED_Refresh_Gram>
			while (moving)
 8002d36:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <task2A2L+0x7b8>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1da      	bne.n	8002cf4 <task2A2L+0x704>
 8002d3e:	e000      	b.n	8002d42 <task2A2L+0x752>
					break;
 8002d40:	bf00      	nop
			 }
			actualAngle = 0;
 8002d42:	491d      	ldr	r1, [pc, #116]	; (8002db8 <task2A2L+0x7c8>)
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 8002d50:	f000 fa42 	bl	80031d8 <moveUltraEnd>
		}
	}

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002d54:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <task2A2L+0x7b4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <task2A2L+0x7b4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2200      	movs	r2, #0
 8002d62:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance -> CCR4 = STRAIGHT;
 8002d64:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <task2A2L+0x7b0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2295      	movs	r2, #149	; 0x95
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	2108      	movs	r1, #8
 8002d70:	4813      	ldr	r0, [pc, #76]	; (8002dc0 <task2A2L+0x7d0>)
 8002d72:	f004 fc1f 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2104      	movs	r1, #4
 8002d7a:	4811      	ldr	r0, [pc, #68]	; (8002dc0 <task2A2L+0x7d0>)
 8002d7c:	f004 fc1a 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8002d80:	2201      	movs	r2, #1
 8002d82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d86:	480f      	ldr	r0, [pc, #60]	; (8002dc4 <task2A2L+0x7d4>)
 8002d88:	f004 fc14 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2120      	movs	r1, #32
 8002d90:	480d      	ldr	r0, [pc, #52]	; (8002dc8 <task2A2L+0x7d8>)
 8002d92:	f004 fc0f 	bl	80075b4 <HAL_GPIO_WritePin>
}
 8002d96:	bf00      	nop
 8002d98:	3780      	adds	r7, #128	; 0x80
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000258 	.word	0x20000258
 8002da4:	20000378 	.word	0x20000378
 8002da8:	20000414 	.word	0x20000414
 8002dac:	20000418 	.word	0x20000418
 8002db0:	08014668 	.word	0x08014668
 8002db4:	42340000 	.word	0x42340000
 8002db8:	20000420 	.word	0x20000420
 8002dbc:	42700000 	.word	0x42700000
 8002dc0:	40020000 	.word	0x40020000
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40020800 	.word	0x40020800

08002dcc <moveUltra>:

void moveUltra()
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b0ae      	sub	sp, #184	; 0xb8
 8002dd0:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	488a      	ldr	r0, [pc, #552]	; (8003000 <moveUltra+0x234>)
 8002dd6:	f007 fca3 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002dda:	2108      	movs	r1, #8
 8002ddc:	4888      	ldr	r0, [pc, #544]	; (8003000 <moveUltra+0x234>)
 8002dde:	f007 fc9f 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002de2:	210c      	movs	r1, #12
 8002de4:	4887      	ldr	r0, [pc, #540]	; (8003004 <moveUltra+0x238>)
 8002de6:	f007 fc9b 	bl	800a720 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8002dea:	4b86      	ldr	r3, [pc, #536]	; (8003004 <moveUltra+0x238>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2295      	movs	r2, #149	; 0x95
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 8002df2:	2064      	movs	r0, #100	; 0x64
 8002df4:	f00a fa47 	bl	800d286 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8002df8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002dfc:	2224      	movs	r2, #36	; 0x24
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f00c ff9b 	bl	800fd3c <memset>
 8002e06:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002e0a:	653b      	str	r3, [r7, #80]	; 0x50
 8002e0c:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8002e10:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e12:	f640 3354 	movw	r3, #2900	; 0xb54
 8002e16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e18:	4b7b      	ldr	r3, [pc, #492]	; (8003008 <moveUltra+0x23c>)
 8002e1a:	663b      	str	r3, [r7, #96]	; 0x60
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };


	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8002e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e20:	2224      	movs	r2, #36	; 0x24
 8002e22:	2100      	movs	r1, #0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f00c ff89 	bl	800fd3c <memset>
 8002e2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e30:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
 8002e36:	f640 3354 	movw	r3, #2900	; 0xb54
 8002e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e3c:	4b72      	ldr	r3, [pc, #456]	; (8003008 <moveUltra+0x23c>)
 8002e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8002e40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e44:	4618      	mov	r0, r3
 8002e46:	f003 fb4d 	bl	80064e4 <PIDController_Init>
	PIDController_Init(&pidRight);
 8002e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f003 fb48 	bl	80064e4 <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8002e54:	4b6d      	ldr	r3, [pc, #436]	; (800300c <moveUltra+0x240>)
 8002e56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8002e5a:	4b6d      	ldr	r3, [pc, #436]	; (8003010 <moveUltra+0x244>)
 8002e5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 23.56f; // NEED TO MEASURE AND CHANGE
 8002e60:	4b6c      	ldr	r3, [pc, #432]	; (8003014 <moveUltra+0x248>)
 8002e62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8002e66:	213c      	movs	r1, #60	; 0x3c
 8002e68:	486b      	ldr	r0, [pc, #428]	; (8003018 <moveUltra+0x24c>)
 8002e6a:	f007 ff3f 	bl	800acec <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8002e6e:	213c      	movs	r1, #60	; 0x3c
 8002e70:	486a      	ldr	r0, [pc, #424]	; (800301c <moveUltra+0x250>)
 8002e72:	f007 ff3b 	bl	800acec <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8002e76:	4b68      	ldr	r3, [pc, #416]	; (8003018 <moveUltra+0x24c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8002e80:	4b66      	ldr	r3, [pc, #408]	; (800301c <moveUltra+0x250>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8002e8a:	f004 f815 	bl	8006eb8 <HAL_GetTick>
 8002e8e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 8002e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 3000;
 8002eb6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002eba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 3000;
 8002ebe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002ec2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	2108      	movs	r1, #8
 8002eca:	4855      	ldr	r0, [pc, #340]	; (8003020 <moveUltra+0x254>)
 8002ecc:	f004 fb72 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2104      	movs	r1, #4
 8002ed4:	4852      	ldr	r0, [pc, #328]	; (8003020 <moveUltra+0x254>)
 8002ed6:	f004 fb6d 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8002eda:	2201      	movs	r2, #1
 8002edc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ee0:	4850      	ldr	r0, [pc, #320]	; (8003024 <moveUltra+0x258>)
 8002ee2:	f004 fb67 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2120      	movs	r1, #32
 8002eea:	484f      	ldr	r0, [pc, #316]	; (8003028 <moveUltra+0x25c>)
 8002eec:	f004 fb62 	bl	80075b4 <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for(;;)
	{

		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002ef0:	4b43      	ldr	r3, [pc, #268]	; (8003000 <moveUltra+0x234>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8002efa:	4b41      	ldr	r3, [pc, #260]	; (8003000 <moveUltra+0x234>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8002f02:	63da      	str	r2, [r3, #60]	; 0x3c
		 currTime = HAL_GetTick();
 8002f04:	f003 ffd8 	bl	8006eb8 <HAL_GetTick>
 8002f08:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		 moving = 1;
 8002f0c:	4b47      	ldr	r3, [pc, #284]	; (800302c <moveUltra+0x260>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]

		 if (currTime-prevTime > 60L)
 8002f12:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b3c      	cmp	r3, #60	; 0x3c
 8002f1e:	d9e7      	bls.n	8002ef0 <moveUltra+0x124>
		 {
			 leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8002f20:	4b3d      	ldr	r3, [pc, #244]	; (8003018 <moveUltra+0x24c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			 rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8002f2a:	4b3c      	ldr	r3, [pc, #240]	; (800301c <moveUltra+0x250>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	67fb      	str	r3, [r7, #124]	; 0x7c

			 diffLeft = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 diffRight = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8002f3e:	4b36      	ldr	r3, [pc, #216]	; (8003018 <moveUltra+0x24c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d118      	bne.n	8002f7e <moveUltra+0x1b2>
			 {
				 if (leftTick < leftTick_prev)
 8002f4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f54:	429a      	cmp	r2, r3
 8002f56:	da07      	bge.n	8002f68 <moveUltra+0x19c>
					 diffLeft = leftTick_prev - leftTick;
 8002f58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f66:	e022      	b.n	8002fae <moveUltra+0x1e2>
				 else
					 diffLeft = (65535 - leftTick) + leftTick_prev;
 8002f68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f6c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002f70:	33ff      	adds	r3, #255	; 0xff
 8002f72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f76:	4413      	add	r3, r2
 8002f78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f7c:	e017      	b.n	8002fae <moveUltra+0x1e2>
			 }
			 else
			 {
				 if (leftTick > leftTick_prev)
 8002f7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f86:	429a      	cmp	r2, r3
 8002f88:	dd07      	ble.n	8002f9a <moveUltra+0x1ce>
					 diffLeft = leftTick - leftTick_prev;
 8002f8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f98:	e009      	b.n	8002fae <moveUltra+0x1e2>
				 else
					 diffLeft = 65535 - leftTick_prev + leftTick;
 8002f9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f9e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002fa2:	33ff      	adds	r3, #255	; 0xff
 8002fa4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fa8:	4413      	add	r3, r2
 8002faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 }

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8002fae:	4b1b      	ldr	r3, [pc, #108]	; (800301c <moveUltra+0x250>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	d115      	bne.n	8002fe8 <moveUltra+0x21c>
			 {
				 if (rightTick < rightTick_prev)
 8002fbc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002fbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	da06      	bge.n	8002fd4 <moveUltra+0x208>
					 diffRight = rightTick_prev - rightTick;
 8002fc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fd2:	e036      	b.n	8003042 <moveUltra+0x276>
				 else
					 diffRight = (65535 - rightTick) + rightTick_prev;
 8002fd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fd6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002fda:	33ff      	adds	r3, #255	; 0xff
 8002fdc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fe6:	e02c      	b.n	8003042 <moveUltra+0x276>
			 }
			 else
			 {
				 if (rightTick > rightTick_prev)
 8002fe8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002fea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	dd1e      	ble.n	8003030 <moveUltra+0x264>
					 diffRight = rightTick - rightTick_prev;
 8002ff2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002ff4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ffe:	e020      	b.n	8003042 <moveUltra+0x276>
 8003000:	20000378 	.word	0x20000378
 8003004:	20000258 	.word	0x20000258
 8003008:	3d4ccccd 	.word	0x3d4ccccd
 800300c:	44440000 	.word	0x44440000
 8003010:	4442c000 	.word	0x4442c000
 8003014:	41bc7ae1 	.word	0x41bc7ae1
 8003018:	200002a0 	.word	0x200002a0
 800301c:	20000330 	.word	0x20000330
 8003020:	40020000 	.word	0x40020000
 8003024:	40021000 	.word	0x40021000
 8003028:	40020800 	.word	0x40020800
 800302c:	20000414 	.word	0x20000414
				 else
					 diffRight = 65535 - rightTick_prev + rightTick;
 8003030:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003034:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003038:	33ff      	adds	r3, #255	; 0xff
 800303a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800303c:	4413      	add	r3, r2
 800303e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			 }

			 // left measured distance
			 distLeft = ((float)diffLeft/wheel_rotationTicksL) * wheel_circumference;
 8003042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003046:	ee07 3a90 	vmov	s15, r3
 800304a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800304e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003056:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800305a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
			 totalDistance_left += distLeft;
 8003062:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8003066:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800306a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800306e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			 // right measured distance
			 distRight = ((float)diffRight/wheel_rotationTicksR) * wheel_circumference;
 8003072:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003076:	ee07 3a90 	vmov	s15, r3
 800307a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800307e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003086:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800308a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
			 totalDistance_right += distRight;
 8003092:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003096:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800309a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

			 //if robot doesnt go straight, using gyro to adjust, straight = 145
			 if (actualAngle < 0.00) //veering right
 80030a2:	4b46      	ldr	r3, [pc, #280]	; (80031bc <moveUltra+0x3f0>)
 80030a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	f7fd fd14 	bl	8000adc <__aeabi_dcmplt>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d006      	beq.n	80030c8 <moveUltra+0x2fc>
			 {

				 htim1.Instance -> CCR4 = 138; //left abit
 80030ba:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <moveUltra+0x3f4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	228a      	movs	r2, #138	; 0x8a
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
				 osDelay(10);
 80030c2:	200a      	movs	r0, #10
 80030c4:	f00a f8df 	bl	800d286 <osDelay>
			 }
			 if (actualAngle > 0.00)//veering left
 80030c8:	4b3c      	ldr	r3, [pc, #240]	; (80031bc <moveUltra+0x3f0>)
 80030ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	f7fd fd1f 	bl	8000b18 <__aeabi_dcmpgt>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d006      	beq.n	80030ee <moveUltra+0x322>
			 {

				 htim1.Instance -> CCR4 = 152; //right a bit
 80030e0:	4b37      	ldr	r3, [pc, #220]	; (80031c0 <moveUltra+0x3f4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2298      	movs	r2, #152	; 0x98
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
				 osDelay(10);
 80030e8:	200a      	movs	r0, #10
 80030ea:	f00a f8cc 	bl	800d286 <osDelay>
			 }
			 if (actualAngle == 0.00)
 80030ee:	4b33      	ldr	r3, [pc, #204]	; (80031bc <moveUltra+0x3f0>)
 80030f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	f7fd fce4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d006      	beq.n	8003114 <moveUltra+0x348>
			 {
//				 servo = STRAIGHT;
				 htim1.Instance -> CCR4 = STRAIGHT; //Straight
 8003106:	4b2e      	ldr	r3, [pc, #184]	; (80031c0 <moveUltra+0x3f4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2295      	movs	r2, #149	; 0x95
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
				 osDelay(10);
 800310e:	200a      	movs	r0, #10
 8003110:	f00a f8b9 	bl	800d286 <osDelay>
			 }

			prevTime = currTime;
 8003114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 800311c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8003124:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 15) // prev was 10
 800312a:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <moveUltra+0x3f8>)
 800312c:	edd3 7a00 	vldr	s15, [r3]
 8003130:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313c:	d417      	bmi.n	800316e <moveUltra+0x3a2>
			{
				break;
			}
			 sprintf(messageA, "angle %5d\0", (int)(actualAngle));
 800313e:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <moveUltra+0x3f0>)
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	f7fd fd06 	bl	8000b58 <__aeabi_d2iz>
 800314c:	4602      	mov	r2, r0
 800314e:	f107 0318 	add.w	r3, r7, #24
 8003152:	491d      	ldr	r1, [pc, #116]	; (80031c8 <moveUltra+0x3fc>)
 8003154:	4618      	mov	r0, r3
 8003156:	f00d fc79 	bl	8010a4c <siprintf>
			 OLED_ShowString(10,20, messageA);
 800315a:	f107 0318 	add.w	r3, r7, #24
 800315e:	461a      	mov	r2, r3
 8003160:	2114      	movs	r1, #20
 8003162:	200a      	movs	r0, #10
 8003164:	f003 f900 	bl	8006368 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8003168:	f002 ff8a 	bl	8006080 <OLED_Refresh_Gram>
		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800316c:	e6c0      	b.n	8002ef0 <moveUltra+0x124>
				break;
 800316e:	bf00      	nop
		 }
	}

//	moving = 0;
	move(1,0);
 8003170:	2000      	movs	r0, #0
 8003172:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003176:	f001 fc39 	bl	80049ec <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800317a:	2201      	movs	r2, #1
 800317c:	2108      	movs	r1, #8
 800317e:	4813      	ldr	r0, [pc, #76]	; (80031cc <moveUltra+0x400>)
 8003180:	f004 fa18 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003184:	2200      	movs	r2, #0
 8003186:	2104      	movs	r1, #4
 8003188:	4810      	ldr	r0, [pc, #64]	; (80031cc <moveUltra+0x400>)
 800318a:	f004 fa13 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800318e:	2201      	movs	r2, #1
 8003190:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003194:	480e      	ldr	r0, [pc, #56]	; (80031d0 <moveUltra+0x404>)
 8003196:	f004 fa0d 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800319a:	2200      	movs	r2, #0
 800319c:	2120      	movs	r1, #32
 800319e:	480d      	ldr	r0, [pc, #52]	; (80031d4 <moveUltra+0x408>)
 80031a0:	f004 fa08 	bl	80075b4 <HAL_GPIO_WritePin>
	htim1.Instance -> CCR4 = STRAIGHT; //centre
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <moveUltra+0x3f4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2295      	movs	r2, #149	; 0x95
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 80031ac:	200a      	movs	r0, #10
 80031ae:	f00a f86a 	bl	800d286 <osDelay>
	return;
 80031b2:	bf00      	nop

}
 80031b4:	37b8      	adds	r7, #184	; 0xb8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000420 	.word	0x20000420
 80031c0:	20000258 	.word	0x20000258
 80031c4:	20000444 	.word	0x20000444
 80031c8:	08014668 	.word	0x08014668
 80031cc:	40020000 	.word	0x40020000
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40020800 	.word	0x40020800

080031d8 <moveUltraEnd>:

void moveUltraEnd()
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b0ae      	sub	sp, #184	; 0xb8
 80031dc:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80031de:	2100      	movs	r1, #0
 80031e0:	488e      	ldr	r0, [pc, #568]	; (800341c <moveUltraEnd+0x244>)
 80031e2:	f007 fa9d 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80031e6:	2108      	movs	r1, #8
 80031e8:	488c      	ldr	r0, [pc, #560]	; (800341c <moveUltraEnd+0x244>)
 80031ea:	f007 fa99 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80031ee:	210c      	movs	r1, #12
 80031f0:	488b      	ldr	r0, [pc, #556]	; (8003420 <moveUltraEnd+0x248>)
 80031f2:	f007 fa95 	bl	800a720 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 80031f6:	4b8a      	ldr	r3, [pc, #552]	; (8003420 <moveUltraEnd+0x248>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2295      	movs	r2, #149	; 0x95
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 80031fe:	2064      	movs	r0, #100	; 0x64
 8003200:	f00a f841 	bl	800d286 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8003204:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003208:	2224      	movs	r2, #36	; 0x24
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f00c fd95 	bl	800fd3c <memset>
 8003212:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003216:	653b      	str	r3, [r7, #80]	; 0x50
 8003218:	f240 53aa 	movw	r3, #1450	; 0x5aa
 800321c:	65bb      	str	r3, [r7, #88]	; 0x58
 800321e:	f640 3354 	movw	r3, #2900	; 0xb54
 8003222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003224:	4b7f      	ldr	r3, [pc, #508]	; (8003424 <moveUltraEnd+0x24c>)
 8003226:	663b      	str	r3, [r7, #96]	; 0x60
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };


	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8003228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800322c:	2224      	movs	r2, #36	; 0x24
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f00c fd83 	bl	800fd3c <memset>
 8003236:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323c:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003240:	637b      	str	r3, [r7, #52]	; 0x34
 8003242:	f640 3354 	movw	r3, #2900	; 0xb54
 8003246:	63bb      	str	r3, [r7, #56]	; 0x38
 8003248:	4b76      	ldr	r3, [pc, #472]	; (8003424 <moveUltraEnd+0x24c>)
 800324a:	63fb      	str	r3, [r7, #60]	; 0x3c
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 800324c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003250:	4618      	mov	r0, r3
 8003252:	f003 f947 	bl	80064e4 <PIDController_Init>
	PIDController_Init(&pidRight);
 8003256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800325a:	4618      	mov	r0, r3
 800325c:	f003 f942 	bl	80064e4 <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8003260:	4b71      	ldr	r3, [pc, #452]	; (8003428 <moveUltraEnd+0x250>)
 8003262:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8003266:	4b71      	ldr	r3, [pc, #452]	; (800342c <moveUltraEnd+0x254>)
 8003268:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 800326c:	4b70      	ldr	r3, [pc, #448]	; (8003430 <moveUltraEnd+0x258>)
 800326e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8003272:	213c      	movs	r1, #60	; 0x3c
 8003274:	486f      	ldr	r0, [pc, #444]	; (8003434 <moveUltraEnd+0x25c>)
 8003276:	f007 fd39 	bl	800acec <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 800327a:	213c      	movs	r1, #60	; 0x3c
 800327c:	486e      	ldr	r0, [pc, #440]	; (8003438 <moveUltraEnd+0x260>)
 800327e:	f007 fd35 	bl	800acec <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003282:	4b6c      	ldr	r3, [pc, #432]	; (8003434 <moveUltraEnd+0x25c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 800328c:	4b6a      	ldr	r3, [pc, #424]	; (8003438 <moveUltraEnd+0x260>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8003296:	f003 fe0f 	bl	8006eb8 <HAL_GetTick>
 800329a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 800329e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	actualAngle = 0.00;
 80032c2:	495e      	ldr	r1, [pc, #376]	; (800343c <moveUltraEnd+0x264>)
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9c1 2300 	strd	r2, r3, [r1]
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 3000;
 80032d0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80032d4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 3000;
 80032d8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80032dc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80032e0:	2201      	movs	r2, #1
 80032e2:	2108      	movs	r1, #8
 80032e4:	4856      	ldr	r0, [pc, #344]	; (8003440 <moveUltraEnd+0x268>)
 80032e6:	f004 f965 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80032ea:	2200      	movs	r2, #0
 80032ec:	2104      	movs	r1, #4
 80032ee:	4854      	ldr	r0, [pc, #336]	; (8003440 <moveUltraEnd+0x268>)
 80032f0:	f004 f960 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80032f4:	2201      	movs	r2, #1
 80032f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032fa:	4852      	ldr	r0, [pc, #328]	; (8003444 <moveUltraEnd+0x26c>)
 80032fc:	f004 f95a 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003300:	2200      	movs	r2, #0
 8003302:	2120      	movs	r1, #32
 8003304:	4850      	ldr	r0, [pc, #320]	; (8003448 <moveUltraEnd+0x270>)
 8003306:	f004 f955 	bl	80075b4 <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for(;;)
	{

		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800330a:	4b44      	ldr	r3, [pc, #272]	; (800341c <moveUltraEnd+0x244>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8003312:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8003314:	4b41      	ldr	r3, [pc, #260]	; (800341c <moveUltraEnd+0x244>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800331c:	63da      	str	r2, [r3, #60]	; 0x3c
		 currTime = HAL_GetTick();
 800331e:	f003 fdcb 	bl	8006eb8 <HAL_GetTick>
 8003322:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		 moving = 1;
 8003326:	4b49      	ldr	r3, [pc, #292]	; (800344c <moveUltraEnd+0x274>)
 8003328:	2201      	movs	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]

		 if (currTime-prevTime > 60L)
 800332c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b3c      	cmp	r3, #60	; 0x3c
 8003338:	d9e7      	bls.n	800330a <moveUltraEnd+0x132>
		 {
			 leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 800333a:	4b3e      	ldr	r3, [pc, #248]	; (8003434 <moveUltraEnd+0x25c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			 rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8003344:	4b3c      	ldr	r3, [pc, #240]	; (8003438 <moveUltraEnd+0x260>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	67fb      	str	r3, [r7, #124]	; 0x7c

			 diffLeft = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 diffRight = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8003358:	4b36      	ldr	r3, [pc, #216]	; (8003434 <moveUltraEnd+0x25c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	2b10      	cmp	r3, #16
 8003364:	d118      	bne.n	8003398 <moveUltraEnd+0x1c0>
			 {
				 if (leftTick < leftTick_prev)
 8003366:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800336a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800336e:	429a      	cmp	r2, r3
 8003370:	da07      	bge.n	8003382 <moveUltraEnd+0x1aa>
					 diffLeft = leftTick_prev - leftTick;
 8003372:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003376:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003380:	e022      	b.n	80033c8 <moveUltraEnd+0x1f0>
				 else
					 diffLeft = (65535 - leftTick) + leftTick_prev;
 8003382:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003386:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800338a:	33ff      	adds	r3, #255	; 0xff
 800338c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003390:	4413      	add	r3, r2
 8003392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003396:	e017      	b.n	80033c8 <moveUltraEnd+0x1f0>
			 }
			 else
			 {
				 if (leftTick > leftTick_prev)
 8003398:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800339c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033a0:	429a      	cmp	r2, r3
 80033a2:	dd07      	ble.n	80033b4 <moveUltraEnd+0x1dc>
					 diffLeft = leftTick - leftTick_prev;
 80033a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033b2:	e009      	b.n	80033c8 <moveUltraEnd+0x1f0>
				 else
					 diffLeft = 65535 - leftTick_prev + leftTick;
 80033b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033b8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80033bc:	33ff      	adds	r3, #255	; 0xff
 80033be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033c2:	4413      	add	r3, r2
 80033c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 }

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 80033c8:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <moveUltraEnd+0x260>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d115      	bne.n	8003402 <moveUltraEnd+0x22a>
			 {
				 if (rightTick < rightTick_prev)
 80033d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80033d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033dc:	429a      	cmp	r2, r3
 80033de:	da06      	bge.n	80033ee <moveUltraEnd+0x216>
					 diffRight = rightTick_prev - rightTick;
 80033e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033ec:	e039      	b.n	8003462 <moveUltraEnd+0x28a>
				 else
					 diffRight = (65535 - rightTick) + rightTick_prev;
 80033ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033f0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80033f4:	33ff      	adds	r3, #255	; 0xff
 80033f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033fa:	4413      	add	r3, r2
 80033fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003400:	e02f      	b.n	8003462 <moveUltraEnd+0x28a>
			 }
			 else
			 {
				 if (rightTick > rightTick_prev)
 8003402:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003408:	429a      	cmp	r2, r3
 800340a:	dd21      	ble.n	8003450 <moveUltraEnd+0x278>
					 diffRight = rightTick - rightTick_prev;
 800340c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800340e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003418:	e023      	b.n	8003462 <moveUltraEnd+0x28a>
 800341a:	bf00      	nop
 800341c:	20000378 	.word	0x20000378
 8003420:	20000258 	.word	0x20000258
 8003424:	3d4ccccd 	.word	0x3d4ccccd
 8003428:	44440000 	.word	0x44440000
 800342c:	4442c000 	.word	0x4442c000
 8003430:	41b33333 	.word	0x41b33333
 8003434:	200002a0 	.word	0x200002a0
 8003438:	20000330 	.word	0x20000330
 800343c:	20000420 	.word	0x20000420
 8003440:	40020000 	.word	0x40020000
 8003444:	40021000 	.word	0x40021000
 8003448:	40020800 	.word	0x40020800
 800344c:	20000414 	.word	0x20000414
				 else
					 diffRight = 65535 - rightTick_prev + rightTick;
 8003450:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003454:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003458:	33ff      	adds	r3, #255	; 0xff
 800345a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800345c:	4413      	add	r3, r2
 800345e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			 }

			 // left measured distance
			 distLeft = ((float)diffLeft/wheel_rotationTicksL) * wheel_circumference;
 8003462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800346e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003476:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800347a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
			 totalDistance_left += distLeft;
 8003482:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8003486:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800348a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			 // right measured distance
			 distRight = ((float)diffRight/wheel_rotationTicksR) * wheel_circumference;
 8003492:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800349e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80034a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034a6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80034aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ae:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
			 totalDistance_right += distRight;
 80034b2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80034b6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80034ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034be:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

 			 //if robot doesnt go straight, using gyro to adjust, straight = 145
 			 if (actualAngle < 0.00) //veering right
 80034c2:	4b46      	ldr	r3, [pc, #280]	; (80035dc <moveUltraEnd+0x404>)
 80034c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	f7fd fb04 	bl	8000adc <__aeabi_dcmplt>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d006      	beq.n	80034e8 <moveUltraEnd+0x310>
 			 {

 				 htim1.Instance -> CCR4 = 138; //left abit
 80034da:	4b41      	ldr	r3, [pc, #260]	; (80035e0 <moveUltraEnd+0x408>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	228a      	movs	r2, #138	; 0x8a
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40
 				 osDelay(10);
 80034e2:	200a      	movs	r0, #10
 80034e4:	f009 fecf 	bl	800d286 <osDelay>
 			 }
 			 if (actualAngle > 0.00)//veering left
 80034e8:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <moveUltraEnd+0x404>)
 80034ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	f7fd fb0f 	bl	8000b18 <__aeabi_dcmpgt>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d006      	beq.n	800350e <moveUltraEnd+0x336>
 			 {

 				 htim1.Instance -> CCR4 = 152; //right a bit
 8003500:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <moveUltraEnd+0x408>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2298      	movs	r2, #152	; 0x98
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
 				 osDelay(10);
 8003508:	200a      	movs	r0, #10
 800350a:	f009 febc 	bl	800d286 <osDelay>
 			 }
 			 if (actualAngle == 0.00)
 800350e:	4b33      	ldr	r3, [pc, #204]	; (80035dc <moveUltraEnd+0x404>)
 8003510:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	f7fd fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <moveUltraEnd+0x35c>
 			 {
 //				 servo = STRAIGHT;
 				 htim1.Instance -> CCR4 = STRAIGHT; //Straight
 8003526:	4b2e      	ldr	r3, [pc, #184]	; (80035e0 <moveUltraEnd+0x408>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2295      	movs	r2, #149	; 0x95
 800352c:	641a      	str	r2, [r3, #64]	; 0x40
 				 osDelay(10);
 800352e:	200a      	movs	r0, #10
 8003530:	f009 fea9 	bl	800d286 <osDelay>
 			 }

			prevTime = currTime;
 8003534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003538:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 800353c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8003544:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 8)
 800354a:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <moveUltraEnd+0x40c>)
 800354c:	edd3 7a00 	vldr	s15, [r3]
 8003550:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355c:	d417      	bmi.n	800358e <moveUltraEnd+0x3b6>
			{
				break;
			}
			 sprintf(messageA, "angle %5d\0", (int)(actualAngle));
 800355e:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <moveUltraEnd+0x404>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	f7fd faf6 	bl	8000b58 <__aeabi_d2iz>
 800356c:	4602      	mov	r2, r0
 800356e:	f107 0318 	add.w	r3, r7, #24
 8003572:	491d      	ldr	r1, [pc, #116]	; (80035e8 <moveUltraEnd+0x410>)
 8003574:	4618      	mov	r0, r3
 8003576:	f00d fa69 	bl	8010a4c <siprintf>
			 OLED_ShowString(10,20, messageA);
 800357a:	f107 0318 	add.w	r3, r7, #24
 800357e:	461a      	mov	r2, r3
 8003580:	2114      	movs	r1, #20
 8003582:	200a      	movs	r0, #10
 8003584:	f002 fef0 	bl	8006368 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8003588:	f002 fd7a 	bl	8006080 <OLED_Refresh_Gram>
		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800358c:	e6bd      	b.n	800330a <moveUltraEnd+0x132>
				break;
 800358e:	bf00      	nop
		 }
	}

//	moving = 0;
	move(1,0);
 8003590:	2000      	movs	r0, #0
 8003592:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003596:	f001 fa29 	bl	80049ec <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800359a:	2201      	movs	r2, #1
 800359c:	2108      	movs	r1, #8
 800359e:	4813      	ldr	r0, [pc, #76]	; (80035ec <moveUltraEnd+0x414>)
 80035a0:	f004 f808 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80035a4:	2200      	movs	r2, #0
 80035a6:	2104      	movs	r1, #4
 80035a8:	4810      	ldr	r0, [pc, #64]	; (80035ec <moveUltraEnd+0x414>)
 80035aa:	f004 f803 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80035ae:	2201      	movs	r2, #1
 80035b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035b4:	480e      	ldr	r0, [pc, #56]	; (80035f0 <moveUltraEnd+0x418>)
 80035b6:	f003 fffd 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80035ba:	2200      	movs	r2, #0
 80035bc:	2120      	movs	r1, #32
 80035be:	480d      	ldr	r0, [pc, #52]	; (80035f4 <moveUltraEnd+0x41c>)
 80035c0:	f003 fff8 	bl	80075b4 <HAL_GPIO_WritePin>
	htim1.Instance -> CCR4 = STRAIGHT; //centre
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <moveUltraEnd+0x408>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2295      	movs	r2, #149	; 0x95
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 80035cc:	200a      	movs	r0, #10
 80035ce:	f009 fe5a 	bl	800d286 <osDelay>
	return;
 80035d2:	bf00      	nop

}
 80035d4:	37b8      	adds	r7, #184	; 0xb8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000420 	.word	0x20000420
 80035e0:	20000258 	.word	0x20000258
 80035e4:	20000444 	.word	0x20000444
 80035e8:	08014668 	.word	0x08014668
 80035ec:	40020000 	.word	0x40020000
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40020800 	.word	0x40020800

080035f8 <moveUltraEndLeft>:

void moveUltraEndLeft()
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b0ae      	sub	sp, #184	; 0xb8
 80035fc:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80035fe:	2100      	movs	r1, #0
 8003600:	488e      	ldr	r0, [pc, #568]	; (800383c <moveUltraEndLeft+0x244>)
 8003602:	f007 f88d 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003606:	2108      	movs	r1, #8
 8003608:	488c      	ldr	r0, [pc, #560]	; (800383c <moveUltraEndLeft+0x244>)
 800360a:	f007 f889 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800360e:	210c      	movs	r1, #12
 8003610:	488b      	ldr	r0, [pc, #556]	; (8003840 <moveUltraEndLeft+0x248>)
 8003612:	f007 f885 	bl	800a720 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8003616:	4b8a      	ldr	r3, [pc, #552]	; (8003840 <moveUltraEndLeft+0x248>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2295      	movs	r2, #149	; 0x95
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 800361e:	2064      	movs	r0, #100	; 0x64
 8003620:	f009 fe31 	bl	800d286 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8003624:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003628:	2224      	movs	r2, #36	; 0x24
 800362a:	2100      	movs	r1, #0
 800362c:	4618      	mov	r0, r3
 800362e:	f00c fb85 	bl	800fd3c <memset>
 8003632:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003636:	653b      	str	r3, [r7, #80]	; 0x50
 8003638:	f240 53aa 	movw	r3, #1450	; 0x5aa
 800363c:	65bb      	str	r3, [r7, #88]	; 0x58
 800363e:	f640 3354 	movw	r3, #2900	; 0xb54
 8003642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003644:	4b7f      	ldr	r3, [pc, #508]	; (8003844 <moveUltraEndLeft+0x24c>)
 8003646:	663b      	str	r3, [r7, #96]	; 0x60
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };


	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8003648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800364c:	2224      	movs	r2, #36	; 0x24
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f00c fb73 	bl	800fd3c <memset>
 8003656:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800365c:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
 8003662:	f640 3354 	movw	r3, #2900	; 0xb54
 8003666:	63bb      	str	r3, [r7, #56]	; 0x38
 8003668:	4b76      	ldr	r3, [pc, #472]	; (8003844 <moveUltraEndLeft+0x24c>)
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 800366c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003670:	4618      	mov	r0, r3
 8003672:	f002 ff37 	bl	80064e4 <PIDController_Init>
	PIDController_Init(&pidRight);
 8003676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800367a:	4618      	mov	r0, r3
 800367c:	f002 ff32 	bl	80064e4 <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8003680:	4b71      	ldr	r3, [pc, #452]	; (8003848 <moveUltraEndLeft+0x250>)
 8003682:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8003686:	4b71      	ldr	r3, [pc, #452]	; (800384c <moveUltraEndLeft+0x254>)
 8003688:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 800368c:	4b70      	ldr	r3, [pc, #448]	; (8003850 <moveUltraEndLeft+0x258>)
 800368e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8003692:	213c      	movs	r1, #60	; 0x3c
 8003694:	486f      	ldr	r0, [pc, #444]	; (8003854 <moveUltraEndLeft+0x25c>)
 8003696:	f007 fb29 	bl	800acec <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 800369a:	213c      	movs	r1, #60	; 0x3c
 800369c:	486e      	ldr	r0, [pc, #440]	; (8003858 <moveUltraEndLeft+0x260>)
 800369e:	f007 fb25 	bl	800acec <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80036a2:	4b6c      	ldr	r3, [pc, #432]	; (8003854 <moveUltraEndLeft+0x25c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 80036ac:	4b6a      	ldr	r3, [pc, #424]	; (8003858 <moveUltraEndLeft+0x260>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 80036b6:	f003 fbff 	bl	8006eb8 <HAL_GetTick>
 80036ba:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 80036be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 3000;
 80036e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80036e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 3000;
 80036ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80036ee:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80036f2:	2201      	movs	r2, #1
 80036f4:	2108      	movs	r1, #8
 80036f6:	4859      	ldr	r0, [pc, #356]	; (800385c <moveUltraEndLeft+0x264>)
 80036f8:	f003 ff5c 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80036fc:	2200      	movs	r2, #0
 80036fe:	2104      	movs	r1, #4
 8003700:	4856      	ldr	r0, [pc, #344]	; (800385c <moveUltraEndLeft+0x264>)
 8003702:	f003 ff57 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003706:	2201      	movs	r2, #1
 8003708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800370c:	4854      	ldr	r0, [pc, #336]	; (8003860 <moveUltraEndLeft+0x268>)
 800370e:	f003 ff51 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003712:	2200      	movs	r2, #0
 8003714:	2120      	movs	r1, #32
 8003716:	4853      	ldr	r0, [pc, #332]	; (8003864 <moveUltraEndLeft+0x26c>)
 8003718:	f003 ff4c 	bl	80075b4 <HAL_GPIO_WritePin>

	totalAngle = 0.0;
 800371c:	4952      	ldr	r1, [pc, #328]	; (8003868 <moveUltraEndLeft+0x270>)
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	e9c1 2300 	strd	r2, r3, [r1]

	/*Infinite loop*/
	for(;;)
	{

		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800372a:	4b44      	ldr	r3, [pc, #272]	; (800383c <moveUltraEndLeft+0x244>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8003732:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8003734:	4b41      	ldr	r3, [pc, #260]	; (800383c <moveUltraEndLeft+0x244>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800373c:	63da      	str	r2, [r3, #60]	; 0x3c
		 currTime = HAL_GetTick();
 800373e:	f003 fbbb 	bl	8006eb8 <HAL_GetTick>
 8003742:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		 moving = 1;
 8003746:	4b49      	ldr	r3, [pc, #292]	; (800386c <moveUltraEndLeft+0x274>)
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]

		 if (currTime-prevTime > 60L)
 800374c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b3c      	cmp	r3, #60	; 0x3c
 8003758:	d9e7      	bls.n	800372a <moveUltraEndLeft+0x132>
		 {
			 leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 800375a:	4b3e      	ldr	r3, [pc, #248]	; (8003854 <moveUltraEndLeft+0x25c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			 rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8003764:	4b3c      	ldr	r3, [pc, #240]	; (8003858 <moveUltraEndLeft+0x260>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	67fb      	str	r3, [r7, #124]	; 0x7c

			 diffLeft = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 diffRight = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8003778:	4b36      	ldr	r3, [pc, #216]	; (8003854 <moveUltraEndLeft+0x25c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b10      	cmp	r3, #16
 8003784:	d118      	bne.n	80037b8 <moveUltraEndLeft+0x1c0>
			 {
				 if (leftTick < leftTick_prev)
 8003786:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800378a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800378e:	429a      	cmp	r2, r3
 8003790:	da07      	bge.n	80037a2 <moveUltraEndLeft+0x1aa>
					 diffLeft = leftTick_prev - leftTick;
 8003792:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003796:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037a0:	e022      	b.n	80037e8 <moveUltraEndLeft+0x1f0>
				 else
					 diffLeft = (65535 - leftTick) + leftTick_prev;
 80037a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037a6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80037aa:	33ff      	adds	r3, #255	; 0xff
 80037ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037b0:	4413      	add	r3, r2
 80037b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037b6:	e017      	b.n	80037e8 <moveUltraEndLeft+0x1f0>
			 }
			 else
			 {
				 if (leftTick > leftTick_prev)
 80037b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037c0:	429a      	cmp	r2, r3
 80037c2:	dd07      	ble.n	80037d4 <moveUltraEndLeft+0x1dc>
					 diffLeft = leftTick - leftTick_prev;
 80037c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037d2:	e009      	b.n	80037e8 <moveUltraEndLeft+0x1f0>
				 else
					 diffLeft = 65535 - leftTick_prev + leftTick;
 80037d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037d8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80037dc:	33ff      	adds	r3, #255	; 0xff
 80037de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037e2:	4413      	add	r3, r2
 80037e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 }

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <moveUltraEndLeft+0x260>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d115      	bne.n	8003822 <moveUltraEndLeft+0x22a>
			 {
				 if (rightTick < rightTick_prev)
 80037f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80037f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037fc:	429a      	cmp	r2, r3
 80037fe:	da06      	bge.n	800380e <moveUltraEndLeft+0x216>
					 diffRight = rightTick_prev - rightTick;
 8003800:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003804:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800380c:	e039      	b.n	8003882 <moveUltraEndLeft+0x28a>
				 else
					 diffRight = (65535 - rightTick) + rightTick_prev;
 800380e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003810:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003814:	33ff      	adds	r3, #255	; 0xff
 8003816:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800381a:	4413      	add	r3, r2
 800381c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003820:	e02f      	b.n	8003882 <moveUltraEndLeft+0x28a>
			 }
			 else
			 {
				 if (rightTick > rightTick_prev)
 8003822:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003828:	429a      	cmp	r2, r3
 800382a:	dd21      	ble.n	8003870 <moveUltraEndLeft+0x278>
					 diffRight = rightTick - rightTick_prev;
 800382c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800382e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003838:	e023      	b.n	8003882 <moveUltraEndLeft+0x28a>
 800383a:	bf00      	nop
 800383c:	20000378 	.word	0x20000378
 8003840:	20000258 	.word	0x20000258
 8003844:	3d4ccccd 	.word	0x3d4ccccd
 8003848:	44440000 	.word	0x44440000
 800384c:	4442c000 	.word	0x4442c000
 8003850:	41b33333 	.word	0x41b33333
 8003854:	200002a0 	.word	0x200002a0
 8003858:	20000330 	.word	0x20000330
 800385c:	40020000 	.word	0x40020000
 8003860:	40021000 	.word	0x40021000
 8003864:	40020800 	.word	0x40020800
 8003868:	20000418 	.word	0x20000418
 800386c:	20000414 	.word	0x20000414
				 else
					 diffRight = 65535 - rightTick_prev + rightTick;
 8003870:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003874:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003878:	33ff      	adds	r3, #255	; 0xff
 800387a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800387c:	4413      	add	r3, r2
 800387e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			 }

			 // left measured distance
			 distLeft = ((float)diffLeft/wheel_rotationTicksL) * wheel_circumference;
 8003882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800388e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003896:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800389a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
			 totalDistance_left += distLeft;
 80038a2:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80038a6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80038aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ae:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			 // right measured distance
			 distRight = ((float)diffRight/wheel_rotationTicksR) * wheel_circumference;
 80038b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80038be:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80038c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80038ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ce:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
			 totalDistance_right += distRight;
 80038d2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80038d6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80038da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038de:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

 			 //if robot doesnt go straight, using gyro to adjust, straight = 145
 			 if (totalAngle < 0.00) //veering right
 80038e2:	4b46      	ldr	r3, [pc, #280]	; (80039fc <moveUltraEndLeft+0x404>)
 80038e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	f7fd f8f4 	bl	8000adc <__aeabi_dcmplt>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d006      	beq.n	8003908 <moveUltraEndLeft+0x310>
 			 {

 				 htim1.Instance -> CCR4 = 138; //left abit
 80038fa:	4b41      	ldr	r3, [pc, #260]	; (8003a00 <moveUltraEndLeft+0x408>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	228a      	movs	r2, #138	; 0x8a
 8003900:	641a      	str	r2, [r3, #64]	; 0x40
 				 osDelay(10);
 8003902:	200a      	movs	r0, #10
 8003904:	f009 fcbf 	bl	800d286 <osDelay>
 			 }
 			 if (totalAngle > 0.00)//veering left
 8003908:	4b3c      	ldr	r3, [pc, #240]	; (80039fc <moveUltraEndLeft+0x404>)
 800390a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	f7fd f8ff 	bl	8000b18 <__aeabi_dcmpgt>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <moveUltraEndLeft+0x336>
 			 {

 				 htim1.Instance -> CCR4 = 152; //right a bit
 8003920:	4b37      	ldr	r3, [pc, #220]	; (8003a00 <moveUltraEndLeft+0x408>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2298      	movs	r2, #152	; 0x98
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
 				 osDelay(10);
 8003928:	200a      	movs	r0, #10
 800392a:	f009 fcac 	bl	800d286 <osDelay>
 			 }
 			 if (totalAngle == 0.00)
 800392e:	4b33      	ldr	r3, [pc, #204]	; (80039fc <moveUltraEndLeft+0x404>)
 8003930:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	f7fd f8c4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d006      	beq.n	8003954 <moveUltraEndLeft+0x35c>
 			 {
 //				 servo = STRAIGHT;
 				 htim1.Instance -> CCR4 = STRAIGHT; //Straight
 8003946:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <moveUltraEndLeft+0x408>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2295      	movs	r2, #149	; 0x95
 800394c:	641a      	str	r2, [r3, #64]	; 0x40
 				 osDelay(10);
 800394e:	200a      	movs	r0, #10
 8003950:	f009 fc99 	bl	800d286 <osDelay>
 			 }

			prevTime = currTime;
 8003954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 800395c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8003964:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003966:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 8)
 800396a:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <moveUltraEndLeft+0x40c>)
 800396c:	edd3 7a00 	vldr	s15, [r3]
 8003970:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397c:	d417      	bmi.n	80039ae <moveUltraEndLeft+0x3b6>
			{
				break;
			}
			 sprintf(messageA, "angle %5d\0", (int)(actualAngle));
 800397e:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <moveUltraEndLeft+0x410>)
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	f7fd f8e6 	bl	8000b58 <__aeabi_d2iz>
 800398c:	4602      	mov	r2, r0
 800398e:	f107 0318 	add.w	r3, r7, #24
 8003992:	491e      	ldr	r1, [pc, #120]	; (8003a0c <moveUltraEndLeft+0x414>)
 8003994:	4618      	mov	r0, r3
 8003996:	f00d f859 	bl	8010a4c <siprintf>
			 OLED_ShowString(10,20, messageA);
 800399a:	f107 0318 	add.w	r3, r7, #24
 800399e:	461a      	mov	r2, r3
 80039a0:	2114      	movs	r1, #20
 80039a2:	200a      	movs	r0, #10
 80039a4:	f002 fce0 	bl	8006368 <OLED_ShowString>
			 OLED_Refresh_Gram();
 80039a8:	f002 fb6a 	bl	8006080 <OLED_Refresh_Gram>
		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80039ac:	e6bd      	b.n	800372a <moveUltraEndLeft+0x132>
				break;
 80039ae:	bf00      	nop
		 }
	}

//	moving = 0;
	move(1,0);
 80039b0:	2000      	movs	r0, #0
 80039b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80039b6:	f001 f819 	bl	80049ec <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80039ba:	2201      	movs	r2, #1
 80039bc:	2108      	movs	r1, #8
 80039be:	4814      	ldr	r0, [pc, #80]	; (8003a10 <moveUltraEndLeft+0x418>)
 80039c0:	f003 fdf8 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80039c4:	2200      	movs	r2, #0
 80039c6:	2104      	movs	r1, #4
 80039c8:	4811      	ldr	r0, [pc, #68]	; (8003a10 <moveUltraEndLeft+0x418>)
 80039ca:	f003 fdf3 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80039ce:	2201      	movs	r2, #1
 80039d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039d4:	480f      	ldr	r0, [pc, #60]	; (8003a14 <moveUltraEndLeft+0x41c>)
 80039d6:	f003 fded 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80039da:	2200      	movs	r2, #0
 80039dc:	2120      	movs	r1, #32
 80039de:	480e      	ldr	r0, [pc, #56]	; (8003a18 <moveUltraEndLeft+0x420>)
 80039e0:	f003 fde8 	bl	80075b4 <HAL_GPIO_WritePin>
	htim1.Instance -> CCR4 = STRAIGHT; //centre
 80039e4:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <moveUltraEndLeft+0x408>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2295      	movs	r2, #149	; 0x95
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 80039ec:	200a      	movs	r0, #10
 80039ee:	f009 fc4a 	bl	800d286 <osDelay>
	return;
 80039f2:	bf00      	nop

}
 80039f4:	37b8      	adds	r7, #184	; 0xb8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000418 	.word	0x20000418
 8003a00:	20000258 	.word	0x20000258
 8003a04:	20000444 	.word	0x20000444
 8003a08:	20000420 	.word	0x20000420
 8003a0c:	08014668 	.word	0x08014668
 8003a10:	40020000 	.word	0x40020000
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40020800 	.word	0x40020800

08003a1c <moveUltraExtreme>:

void moveUltraExtreme()
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b0ae      	sub	sp, #184	; 0xb8
 8003a20:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003a22:	2100      	movs	r1, #0
 8003a24:	488a      	ldr	r0, [pc, #552]	; (8003c50 <moveUltraExtreme+0x234>)
 8003a26:	f006 fe7b 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003a2a:	2108      	movs	r1, #8
 8003a2c:	4888      	ldr	r0, [pc, #544]	; (8003c50 <moveUltraExtreme+0x234>)
 8003a2e:	f006 fe77 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003a32:	210c      	movs	r1, #12
 8003a34:	4887      	ldr	r0, [pc, #540]	; (8003c54 <moveUltraExtreme+0x238>)
 8003a36:	f006 fe73 	bl	800a720 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8003a3a:	4b86      	ldr	r3, [pc, #536]	; (8003c54 <moveUltraExtreme+0x238>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2295      	movs	r2, #149	; 0x95
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 8003a42:	2064      	movs	r0, #100	; 0x64
 8003a44:	f009 fc1f 	bl	800d286 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8003a48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a4c:	2224      	movs	r2, #36	; 0x24
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f00c f973 	bl	800fd3c <memset>
 8003a56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a5c:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003a60:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a62:	f640 3354 	movw	r3, #2900	; 0xb54
 8003a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a68:	4b7b      	ldr	r3, [pc, #492]	; (8003c58 <moveUltraExtreme+0x23c>)
 8003a6a:	663b      	str	r3, [r7, #96]	; 0x60
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };


	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8003a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a70:	2224      	movs	r2, #36	; 0x24
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f00c f961 	bl	800fd3c <memset>
 8003a7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a80:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
 8003a86:	f640 3354 	movw	r3, #2900	; 0xb54
 8003a8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a8c:	4b72      	ldr	r3, [pc, #456]	; (8003c58 <moveUltraExtreme+0x23c>)
 8003a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8003a90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a94:	4618      	mov	r0, r3
 8003a96:	f002 fd25 	bl	80064e4 <PIDController_Init>
	PIDController_Init(&pidRight);
 8003a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f002 fd20 	bl	80064e4 <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8003aa4:	4b6d      	ldr	r3, [pc, #436]	; (8003c5c <moveUltraExtreme+0x240>)
 8003aa6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8003aaa:	4b6d      	ldr	r3, [pc, #436]	; (8003c60 <moveUltraExtreme+0x244>)
 8003aac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 8003ab0:	4b6c      	ldr	r3, [pc, #432]	; (8003c64 <moveUltraExtreme+0x248>)
 8003ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8003ab6:	213c      	movs	r1, #60	; 0x3c
 8003ab8:	486b      	ldr	r0, [pc, #428]	; (8003c68 <moveUltraExtreme+0x24c>)
 8003aba:	f007 f917 	bl	800acec <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8003abe:	213c      	movs	r1, #60	; 0x3c
 8003ac0:	486a      	ldr	r0, [pc, #424]	; (8003c6c <moveUltraExtreme+0x250>)
 8003ac2:	f007 f913 	bl	800acec <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003ac6:	4b68      	ldr	r3, [pc, #416]	; (8003c68 <moveUltraExtreme+0x24c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8003ad0:	4b66      	ldr	r3, [pc, #408]	; (8003c6c <moveUltraExtreme+0x250>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8003ada:	f003 f9ed 	bl	8006eb8 <HAL_GetTick>
 8003ade:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 8003ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8003b06:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003b0a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 2000;
 8003b0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003b12:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003b16:	2201      	movs	r2, #1
 8003b18:	2108      	movs	r1, #8
 8003b1a:	4855      	ldr	r0, [pc, #340]	; (8003c70 <moveUltraExtreme+0x254>)
 8003b1c:	f003 fd4a 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003b20:	2200      	movs	r2, #0
 8003b22:	2104      	movs	r1, #4
 8003b24:	4852      	ldr	r0, [pc, #328]	; (8003c70 <moveUltraExtreme+0x254>)
 8003b26:	f003 fd45 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b30:	4850      	ldr	r0, [pc, #320]	; (8003c74 <moveUltraExtreme+0x258>)
 8003b32:	f003 fd3f 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003b36:	2200      	movs	r2, #0
 8003b38:	2120      	movs	r1, #32
 8003b3a:	484f      	ldr	r0, [pc, #316]	; (8003c78 <moveUltraExtreme+0x25c>)
 8003b3c:	f003 fd3a 	bl	80075b4 <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for(;;)
	{

		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8003b40:	4b43      	ldr	r3, [pc, #268]	; (8003c50 <moveUltraExtreme+0x234>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8003b48:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8003b4a:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <moveUltraExtreme+0x234>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8003b52:	63da      	str	r2, [r3, #60]	; 0x3c
		 currTime = HAL_GetTick();
 8003b54:	f003 f9b0 	bl	8006eb8 <HAL_GetTick>
 8003b58:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		 moving = 1;
 8003b5c:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <moveUltraExtreme+0x260>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]

		 if (currTime-prevTime > 60L)
 8003b62:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b3c      	cmp	r3, #60	; 0x3c
 8003b6e:	d9e7      	bls.n	8003b40 <moveUltraExtreme+0x124>
		 {
			 leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8003b70:	4b3d      	ldr	r3, [pc, #244]	; (8003c68 <moveUltraExtreme+0x24c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			 rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8003b7a:	4b3c      	ldr	r3, [pc, #240]	; (8003c6c <moveUltraExtreme+0x250>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	67fb      	str	r3, [r7, #124]	; 0x7c

			 diffLeft = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 diffRight = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8003b8e:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <moveUltraExtreme+0x24c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d118      	bne.n	8003bce <moveUltraExtreme+0x1b2>
			 {
				 if (leftTick < leftTick_prev)
 8003b9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ba0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	da07      	bge.n	8003bb8 <moveUltraExtreme+0x19c>
					 diffLeft = leftTick_prev - leftTick;
 8003ba8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bb6:	e022      	b.n	8003bfe <moveUltraExtreme+0x1e2>
				 else
					 diffLeft = (65535 - leftTick) + leftTick_prev;
 8003bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bbc:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003bc0:	33ff      	adds	r3, #255	; 0xff
 8003bc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bcc:	e017      	b.n	8003bfe <moveUltraExtreme+0x1e2>
			 }
			 else
			 {
				 if (leftTick > leftTick_prev)
 8003bce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	dd07      	ble.n	8003bea <moveUltraExtreme+0x1ce>
					 diffLeft = leftTick - leftTick_prev;
 8003bda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003be8:	e009      	b.n	8003bfe <moveUltraExtreme+0x1e2>
				 else
					 diffLeft = 65535 - leftTick_prev + leftTick;
 8003bea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bee:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003bf2:	33ff      	adds	r3, #255	; 0xff
 8003bf4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 }

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <moveUltraExtreme+0x250>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d115      	bne.n	8003c38 <moveUltraExtreme+0x21c>
			 {
				 if (rightTick < rightTick_prev)
 8003c0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c12:	429a      	cmp	r2, r3
 8003c14:	da06      	bge.n	8003c24 <moveUltraExtreme+0x208>
					 diffRight = rightTick_prev - rightTick;
 8003c16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c22:	e036      	b.n	8003c92 <moveUltraExtreme+0x276>
				 else
					 diffRight = (65535 - rightTick) + rightTick_prev;
 8003c24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c26:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003c2a:	33ff      	adds	r3, #255	; 0xff
 8003c2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c30:	4413      	add	r3, r2
 8003c32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c36:	e02c      	b.n	8003c92 <moveUltraExtreme+0x276>
			 }
			 else
			 {
				 if (rightTick > rightTick_prev)
 8003c38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	dd1e      	ble.n	8003c80 <moveUltraExtreme+0x264>
					 diffRight = rightTick - rightTick_prev;
 8003c42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c4e:	e020      	b.n	8003c92 <moveUltraExtreme+0x276>
 8003c50:	20000378 	.word	0x20000378
 8003c54:	20000258 	.word	0x20000258
 8003c58:	3d4ccccd 	.word	0x3d4ccccd
 8003c5c:	44440000 	.word	0x44440000
 8003c60:	4442c000 	.word	0x4442c000
 8003c64:	41b33333 	.word	0x41b33333
 8003c68:	200002a0 	.word	0x200002a0
 8003c6c:	20000330 	.word	0x20000330
 8003c70:	40020000 	.word	0x40020000
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40020800 	.word	0x40020800
 8003c7c:	20000414 	.word	0x20000414
				 else
					 diffRight = 65535 - rightTick_prev + rightTick;
 8003c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c84:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003c88:	33ff      	adds	r3, #255	; 0xff
 8003c8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			 }

			 // left measured distance
			 distLeft = ((float)diffLeft/wheel_rotationTicksL) * wheel_circumference;
 8003c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c9e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cae:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
			 totalDistance_left += distLeft;
 8003cb2:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8003cb6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cbe:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			 // right measured distance
			 distRight = ((float)diffRight/wheel_rotationTicksR) * wheel_circumference;
 8003cc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003cce:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cde:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
			 totalDistance_right += distRight;
 8003ce2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003ce6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cee:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

			 //if robot doesnt go straight, using gyro to adjust, straight = 145
			 if (actualAngle < 0.00) //veering right
 8003cf2:	4b3a      	ldr	r3, [pc, #232]	; (8003ddc <moveUltraExtreme+0x3c0>)
 8003cf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	f7fc feec 	bl	8000adc <__aeabi_dcmplt>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d006      	beq.n	8003d18 <moveUltraExtreme+0x2fc>
			 {

				 htim1.Instance -> CCR4 = 115; //left abit
 8003d0a:	4b35      	ldr	r3, [pc, #212]	; (8003de0 <moveUltraExtreme+0x3c4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2273      	movs	r2, #115	; 0x73
 8003d10:	641a      	str	r2, [r3, #64]	; 0x40
				 osDelay(10);
 8003d12:	200a      	movs	r0, #10
 8003d14:	f009 fab7 	bl	800d286 <osDelay>
			 }
			 if (actualAngle > 0.00)//veering left
 8003d18:	4b30      	ldr	r3, [pc, #192]	; (8003ddc <moveUltraExtreme+0x3c0>)
 8003d1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	f7fc fef7 	bl	8000b18 <__aeabi_dcmpgt>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <moveUltraExtreme+0x322>
			 {

				 htim1.Instance -> CCR4 = 180; //right a bit
 8003d30:	4b2b      	ldr	r3, [pc, #172]	; (8003de0 <moveUltraExtreme+0x3c4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	22b4      	movs	r2, #180	; 0xb4
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40
				 osDelay(10);
 8003d38:	200a      	movs	r0, #10
 8003d3a:	f009 faa4 	bl	800d286 <osDelay>
			 }
			 if (actualAngle == 0.00)
 8003d3e:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <moveUltraExtreme+0x3c0>)
 8003d40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	f7fc febc 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d006      	beq.n	8003d64 <moveUltraExtreme+0x348>
			 {
//				 servo = STRAIGHT;
				 htim1.Instance -> CCR4 = STRAIGHT; //Straight
 8003d56:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <moveUltraExtreme+0x3c4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2295      	movs	r2, #149	; 0x95
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
				 osDelay(10);
 8003d5e:	200a      	movs	r0, #10
 8003d60:	f009 fa91 	bl	800d286 <osDelay>
			 }

			prevTime = currTime;
 8003d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 8003d6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8003d74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 16) // prev was 10
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <moveUltraExtreme+0x3c8>)
 8003d7c:	edd3 7a00 	vldr	s15, [r3]
 8003d80:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8c:	d400      	bmi.n	8003d90 <moveUltraExtreme+0x374>
		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8003d8e:	e6d7      	b.n	8003b40 <moveUltraExtreme+0x124>
			{
				break;
 8003d90:	bf00      	nop
			}
		 }
	}

//	moving = 0;
	move(1,0);
 8003d92:	2000      	movs	r0, #0
 8003d94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003d98:	f000 fe28 	bl	80049ec <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	2108      	movs	r1, #8
 8003da0:	4811      	ldr	r0, [pc, #68]	; (8003de8 <moveUltraExtreme+0x3cc>)
 8003da2:	f003 fc07 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003da6:	2200      	movs	r2, #0
 8003da8:	2104      	movs	r1, #4
 8003daa:	480f      	ldr	r0, [pc, #60]	; (8003de8 <moveUltraExtreme+0x3cc>)
 8003dac:	f003 fc02 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003db0:	2201      	movs	r2, #1
 8003db2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003db6:	480d      	ldr	r0, [pc, #52]	; (8003dec <moveUltraExtreme+0x3d0>)
 8003db8:	f003 fbfc 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2120      	movs	r1, #32
 8003dc0:	480b      	ldr	r0, [pc, #44]	; (8003df0 <moveUltraExtreme+0x3d4>)
 8003dc2:	f003 fbf7 	bl	80075b4 <HAL_GPIO_WritePin>
	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8003dc6:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <moveUltraExtreme+0x3c4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2295      	movs	r2, #149	; 0x95
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8003dce:	200a      	movs	r0, #10
 8003dd0:	f009 fa59 	bl	800d286 <osDelay>
	return;
 8003dd4:	bf00      	nop

}
 8003dd6:	37b8      	adds	r7, #184	; 0xb8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20000420 	.word	0x20000420
 8003de0:	20000258 	.word	0x20000258
 8003de4:	20000444 	.word	0x20000444
 8003de8:	40020000 	.word	0x40020000
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40020800 	.word	0x40020800

08003df4 <sendToRPI>:
  * @brief send msg to RPI through UART after execute command
  * @param msg[] for the message to be sent
  * @retval None
  */
void sendToRPI(char* msg)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t *) msg,strlen(msg),0xFFFF);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7fc f9e7 	bl	80001d0 <strlen>
 8003e02:	4603      	mov	r3, r0
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4803      	ldr	r0, [pc, #12]	; (8003e1c <sendToRPI+0x28>)
 8003e0e:	f008 f8fe 	bl	800c00e <HAL_UART_Transmit>
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200003c0 	.word	0x200003c0

08003e20 <moveGyroPID>:

//gyro for straight

void moveGyroPID(float distance, int forward)
{
 8003e20:	b5b0      	push	{r4, r5, r7, lr}
 8003e22:	b0b0      	sub	sp, #192	; 0xc0
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	ed87 0a01 	vstr	s0, [r7, #4]
 8003e2a:	6038      	str	r0, [r7, #0]


	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	48c2      	ldr	r0, [pc, #776]	; (8004138 <moveGyroPID+0x318>)
 8003e30:	f006 fc76 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003e34:	2108      	movs	r1, #8
 8003e36:	48c0      	ldr	r0, [pc, #768]	; (8004138 <moveGyroPID+0x318>)
 8003e38:	f006 fc72 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003e3c:	210c      	movs	r1, #12
 8003e3e:	48bf      	ldr	r0, [pc, #764]	; (800413c <moveGyroPID+0x31c>)
 8003e40:	f006 fc6e 	bl	800a720 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8003e44:	4bbd      	ldr	r3, [pc, #756]	; (800413c <moveGyroPID+0x31c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2295      	movs	r2, #149	; 0x95
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(40);
 8003e4c:	2028      	movs	r0, #40	; 0x28
 8003e4e:	f009 fa1a 	bl	800d286 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8003e52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e56:	2224      	movs	r2, #36	; 0x24
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f00b ff6e 	bl	800fd3c <memset>
 8003e60:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003e64:	657b      	str	r3, [r7, #84]	; 0x54
 8003e66:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e6c:	f640 3354 	movw	r3, #2900	; 0xb54
 8003e70:	663b      	str	r3, [r7, #96]	; 0x60
 8003e72:	4bb3      	ldr	r3, [pc, #716]	; (8004140 <moveGyroPID+0x320>)
 8003e74:	667b      	str	r3, [r7, #100]	; 0x64
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };


	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8003e76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e7a:	2224      	movs	r2, #36	; 0x24
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f00b ff5c 	bl	800fd3c <memset>
 8003e84:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003e88:	633b      	str	r3, [r7, #48]	; 0x30
 8003e8a:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8003e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e90:	f640 3354 	movw	r3, #2900	; 0xb54
 8003e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e96:	4baa      	ldr	r3, [pc, #680]	; (8004140 <moveGyroPID+0x320>)
 8003e98:	643b      	str	r3, [r7, #64]	; 0x40
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8003e9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f002 fb20 	bl	80064e4 <PIDController_Init>
	PIDController_Init(&pidRight);
 8003ea4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f002 fb1b 	bl	80064e4 <PIDController_Init>

	//reset angle
	actualAngle = 0;
 8003eae:	49a5      	ldr	r1, [pc, #660]	; (8004144 <moveGyroPID+0x324>)
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9c1 2300 	strd	r2, r3, [r1]

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8003ebc:	4ba2      	ldr	r3, [pc, #648]	; (8004148 <moveGyroPID+0x328>)
 8003ebe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8003ec2:	4ba2      	ldr	r3, [pc, #648]	; (800414c <moveGyroPID+0x32c>)
 8003ec4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 21.1; // NEED TO MEASURE AND CHANGE
 8003ec8:	4ba1      	ldr	r3, [pc, #644]	; (8004150 <moveGyroPID+0x330>)
 8003eca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8003ece:	213c      	movs	r1, #60	; 0x3c
 8003ed0:	48a0      	ldr	r0, [pc, #640]	; (8004154 <moveGyroPID+0x334>)
 8003ed2:	f006 ff0b 	bl	800acec <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8003ed6:	213c      	movs	r1, #60	; 0x3c
 8003ed8:	489f      	ldr	r0, [pc, #636]	; (8004158 <moveGyroPID+0x338>)
 8003eda:	f006 ff07 	bl	800acec <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003ede:	4b9d      	ldr	r3, [pc, #628]	; (8004154 <moveGyroPID+0x334>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8003ee8:	4b9b      	ldr	r3, [pc, #620]	; (8004158 <moveGyroPID+0x338>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8003ef2:	f002 ffe1 	bl	8006eb8 <HAL_GetTick>
 8003ef6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 8003efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float totalDistance_right = 0;
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	int diffRight = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8003f1e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003f22:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	uint16_t pwmValC = 2000;
 8003f26:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003f2a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if(forward){
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d015      	beq.n	8003f60 <moveGyroPID+0x140>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003f34:	2201      	movs	r2, #1
 8003f36:	2108      	movs	r1, #8
 8003f38:	4888      	ldr	r0, [pc, #544]	; (800415c <moveGyroPID+0x33c>)
 8003f3a:	f003 fb3b 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2104      	movs	r1, #4
 8003f42:	4886      	ldr	r0, [pc, #536]	; (800415c <moveGyroPID+0x33c>)
 8003f44:	f003 fb36 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f4e:	4884      	ldr	r0, [pc, #528]	; (8004160 <moveGyroPID+0x340>)
 8003f50:	f003 fb30 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003f54:	2200      	movs	r2, #0
 8003f56:	2120      	movs	r1, #32
 8003f58:	4882      	ldr	r0, [pc, #520]	; (8004164 <moveGyroPID+0x344>)
 8003f5a:	f003 fb2b 	bl	80075b4 <HAL_GPIO_WritePin>
 8003f5e:	e014      	b.n	8003f8a <moveGyroPID+0x16a>
	}else{
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8003f60:	2200      	movs	r2, #0
 8003f62:	2108      	movs	r1, #8
 8003f64:	487d      	ldr	r0, [pc, #500]	; (800415c <moveGyroPID+0x33c>)
 8003f66:	f003 fb25 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	2104      	movs	r1, #4
 8003f6e:	487b      	ldr	r0, [pc, #492]	; (800415c <moveGyroPID+0x33c>)
 8003f70:	f003 fb20 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8003f74:	2200      	movs	r2, #0
 8003f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f7a:	4879      	ldr	r0, [pc, #484]	; (8004160 <moveGyroPID+0x340>)
 8003f7c:	f003 fb1a 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8003f80:	2201      	movs	r2, #1
 8003f82:	2120      	movs	r1, #32
 8003f84:	4877      	ldr	r0, [pc, #476]	; (8004164 <moveGyroPID+0x344>)
 8003f86:	f003 fb15 	bl	80075b4 <HAL_GPIO_WritePin>
	}

	/*Infinite loop*/
	for(;;)
	{
		if (totalDistance_left >= (distance+distanceError) * 0.9 || totalDistance_right >= (distance+distanceError) * 0.9) {
 8003f8a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003f8e:	f7fc fadb 	bl	8000548 <__aeabi_f2d>
 8003f92:	4604      	mov	r4, r0
 8003f94:	460d      	mov	r5, r1
 8003f96:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f9a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fa2:	ee17 0a90 	vmov	r0, s15
 8003fa6:	f7fc facf 	bl	8000548 <__aeabi_f2d>
 8003faa:	a361      	add	r3, pc, #388	; (adr r3, 8004130 <moveGyroPID+0x310>)
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	f7fc fb22 	bl	80005f8 <__aeabi_dmul>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4620      	mov	r0, r4
 8003fba:	4629      	mov	r1, r5
 8003fbc:	f7fc fda2 	bl	8000b04 <__aeabi_dcmpge>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11d      	bne.n	8004002 <moveGyroPID+0x1e2>
 8003fc6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003fca:	f7fc fabd 	bl	8000548 <__aeabi_f2d>
 8003fce:	4604      	mov	r4, r0
 8003fd0:	460d      	mov	r5, r1
 8003fd2:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fd6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fde:	ee17 0a90 	vmov	r0, s15
 8003fe2:	f7fc fab1 	bl	8000548 <__aeabi_f2d>
 8003fe6:	a352      	add	r3, pc, #328	; (adr r3, 8004130 <moveGyroPID+0x310>)
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f7fc fb04 	bl	80005f8 <__aeabi_dmul>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	f7fc fd84 	bl	8000b04 <__aeabi_dcmpge>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d007      	beq.n	8004012 <moveGyroPID+0x1f2>
			pwmValA = 1000;
 8004002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004006:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
			pwmValC = 1000;
 800400a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800400e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

		}

		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004012:	4b49      	ldr	r3, [pc, #292]	; (8004138 <moveGyroPID+0x318>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800401a:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 800401c:	4b46      	ldr	r3, [pc, #280]	; (8004138 <moveGyroPID+0x318>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004024:	63da      	str	r2, [r3, #60]	; 0x3c
		 currTime = HAL_GetTick();
 8004026:	f002 ff47 	bl	8006eb8 <HAL_GetTick>
 800402a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		 moving = 1;
 800402e:	4b4e      	ldr	r3, [pc, #312]	; (8004168 <moveGyroPID+0x348>)
 8004030:	2201      	movs	r2, #1
 8004032:	701a      	strb	r2, [r3, #0]

		 if (currTime-prevTime > 60L)
 8004034:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004038:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b3c      	cmp	r3, #60	; 0x3c
 8004040:	d9a3      	bls.n	8003f8a <moveGyroPID+0x16a>
		 {
			 leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8004042:	4b44      	ldr	r3, [pc, #272]	; (8004154 <moveGyroPID+0x334>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			 rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 800404c:	4b42      	ldr	r3, [pc, #264]	; (8004158 <moveGyroPID+0x338>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			 diffLeft = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			 diffRight = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8004062:	4b3c      	ldr	r3, [pc, #240]	; (8004154 <moveGyroPID+0x334>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b10      	cmp	r3, #16
 800406e:	d118      	bne.n	80040a2 <moveGyroPID+0x282>
			 {
				 if (leftTick < leftTick_prev)
 8004070:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004074:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004078:	429a      	cmp	r2, r3
 800407a:	da07      	bge.n	800408c <moveGyroPID+0x26c>
					 diffLeft = leftTick_prev - leftTick;
 800407c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004080:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800408a:	e022      	b.n	80040d2 <moveGyroPID+0x2b2>
				 else
					 diffLeft = (65535 - leftTick) + leftTick_prev;
 800408c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004090:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004094:	33ff      	adds	r3, #255	; 0xff
 8004096:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800409a:	4413      	add	r3, r2
 800409c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040a0:	e017      	b.n	80040d2 <moveGyroPID+0x2b2>
			 }
			 else
			 {
				 if (leftTick > leftTick_prev)
 80040a2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80040a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040aa:	429a      	cmp	r2, r3
 80040ac:	dd07      	ble.n	80040be <moveGyroPID+0x29e>
					 diffLeft = leftTick - leftTick_prev;
 80040ae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80040b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040bc:	e009      	b.n	80040d2 <moveGyroPID+0x2b2>
				 else
					 diffLeft = 65535 - leftTick_prev + leftTick;
 80040be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040c2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80040c6:	33ff      	adds	r3, #255	; 0xff
 80040c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80040cc:	4413      	add	r3, r2
 80040ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			 }

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 80040d2:	4b21      	ldr	r3, [pc, #132]	; (8004158 <moveGyroPID+0x338>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d118      	bne.n	8004112 <moveGyroPID+0x2f2>
			 {
				 if (rightTick < rightTick_prev)
 80040e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80040e8:	429a      	cmp	r2, r3
 80040ea:	da07      	bge.n	80040fc <moveGyroPID+0x2dc>
					 diffRight = rightTick_prev - rightTick;
 80040ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80040f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80040fa:	e047      	b.n	800418c <moveGyroPID+0x36c>
				 else
					 diffRight = (65535 - rightTick) + rightTick_prev;
 80040fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004100:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004104:	33ff      	adds	r3, #255	; 0xff
 8004106:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800410a:	4413      	add	r3, r2
 800410c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004110:	e03c      	b.n	800418c <moveGyroPID+0x36c>
			 }
			 else
			 {
				 if (rightTick > rightTick_prev)
 8004112:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004116:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800411a:	429a      	cmp	r2, r3
 800411c:	dd2c      	ble.n	8004178 <moveGyroPID+0x358>
					 diffRight = rightTick - rightTick_prev;
 800411e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800412c:	e02e      	b.n	800418c <moveGyroPID+0x36c>
 800412e:	bf00      	nop
 8004130:	cccccccd 	.word	0xcccccccd
 8004134:	3feccccc 	.word	0x3feccccc
 8004138:	20000378 	.word	0x20000378
 800413c:	20000258 	.word	0x20000258
 8004140:	3d4ccccd 	.word	0x3d4ccccd
 8004144:	20000420 	.word	0x20000420
 8004148:	44440000 	.word	0x44440000
 800414c:	4442c000 	.word	0x4442c000
 8004150:	41a8cccd 	.word	0x41a8cccd
 8004154:	200002a0 	.word	0x200002a0
 8004158:	20000330 	.word	0x20000330
 800415c:	40020000 	.word	0x40020000
 8004160:	40021000 	.word	0x40021000
 8004164:	40020800 	.word	0x40020800
 8004168:	20000414 	.word	0x20000414
 800416c:	3f9d70a4 	.word	0x3f9d70a4
 8004170:	bcf5c28f 	.word	0xbcf5c28f
 8004174:	bd75c28f 	.word	0xbd75c28f
				 else
					 diffRight = 65535 - rightTick_prev + rightTick;
 8004178:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800417c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004180:	33ff      	adds	r3, #255	; 0xff
 8004182:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004186:	4413      	add	r3, r2
 8004188:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			 }

			 // left measured distance
			 distLeft = ((float)diffLeft/wheel_rotationTicksL) * wheel_circumference;
 800418c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004190:	ee07 3a90 	vmov	s15, r3
 8004194:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004198:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800419c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80041a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
			 totalDistance_left += distLeft;
 80041ac:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80041b0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80041b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041b8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

			 // right measured distance
			 distRight = ((float)diffRight/wheel_rotationTicksR) * wheel_circumference;
 80041bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041c0:	ee07 3a90 	vmov	s15, r3
 80041c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80041c8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80041cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041d0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80041d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
			 totalDistance_right += distRight;
 80041dc:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80041e0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80041e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041e8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac


#define pwmValAadjust 300;
#define pwmValBadjust 525;

			 if (forward){
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d030      	beq.n	8004254 <moveGyroPID+0x434>

				 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA) - pwmValAadjust;
 80041f2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80041f6:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 800416c <moveGyroPID+0x34c>
 80041fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041fe:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004202:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004206:	4611      	mov	r1, r2
 8004208:	edd7 0a2c 	vldr	s1, [r7, #176]	; 0xb0
 800420c:	eeb0 0a67 	vmov.f32	s0, s15
 8004210:	4618      	mov	r0, r3
 8004212:	f002 f97f 	bl	8006514 <PIDController_Update>
 8004216:	4603      	mov	r3, r0
 8004218:	b29b      	uxth	r3, r3
 800421a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800421e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

				 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC) + pwmValBadjust;
 8004222:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004226:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 800416c <moveGyroPID+0x34c>
 800422a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800422e:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004232:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004236:	4611      	mov	r1, r2
 8004238:	eef0 0a67 	vmov.f32	s1, s15
 800423c:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8004240:	4618      	mov	r0, r3
 8004242:	f002 f967 	bl	8006514 <PIDController_Update>
 8004246:	4603      	mov	r3, r0
 8004248:	b29b      	uxth	r3, r3
 800424a:	f203 230d 	addw	r3, r3, #525	; 0x20d
 800424e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8004252:	e023      	b.n	800429c <moveGyroPID+0x47c>
			 }else{
				 pwmValA = PIDController_Update(&pidLeft, totalDistance_right, totalDistance_left*STRAIGHTRATIOR, pwmValA) - pwmValAadjust;
 8004254:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004258:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800425c:	4611      	mov	r1, r2
 800425e:	edd7 0a2c 	vldr	s1, [r7, #176]	; 0xb0
 8004262:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 8004266:	4618      	mov	r0, r3
 8004268:	f002 f954 	bl	8006514 <PIDController_Update>
 800426c:	4603      	mov	r3, r0
 800426e:	b29b      	uxth	r3, r3
 8004270:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004274:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

				 pwmValC = PIDController_Update(&pidRight, totalDistance_left*STRAIGHTRATIOR, totalDistance_right, pwmValC) + pwmValBadjust;
 8004278:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800427c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004280:	4611      	mov	r1, r2
 8004282:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 8004286:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 800428a:	4618      	mov	r0, r3
 800428c:	f002 f942 	bl	8006514 <PIDController_Update>
 8004290:	4603      	mov	r3, r0
 8004292:	b29b      	uxth	r3, r3
 8004294:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8004298:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
//
//				 pwmValC = PIDController_Update(&pidRight, totalDistance_left*STRAIGHTRATIOR, totalDistance_right, pwmValC);
//			 }


			 if(forward)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d008      	beq.n	80042b4 <moveGyroPID+0x494>
			 {
				  distanceError = DISTANCE_ERROR_OFFSETF * distance;
 80042a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80042a6:	ed1f 7a4e 	vldr	s14, [pc, #-312]	; 8004170 <moveGyroPID+0x350>
 80042aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042ae:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 80042b2:	e007      	b.n	80042c4 <moveGyroPID+0x4a4>
			 }
			 else
			 {
				  distanceError = DISTANCE_ERROR_OFFSETR * distance;
 80042b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80042b8:	ed1f 7a52 	vldr	s14, [pc, #-328]	; 8004174 <moveGyroPID+0x354>
 80042bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042c0:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
			 }

			 //if robot doesnt go straight, using gyro to adjust, straight = 145
			 if (forward)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d024      	beq.n	8004314 <moveGyroPID+0x4f4>
			 {
				 if (actualAngle < -0.33) //veering right
 80042ca:	4b55      	ldr	r3, [pc, #340]	; (8004420 <moveGyroPID+0x600>)
 80042cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042d0:	a34f      	add	r3, pc, #316	; (adr r3, 8004410 <moveGyroPID+0x5f0>)
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f7fc fc01 	bl	8000adc <__aeabi_dcmplt>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d004      	beq.n	80042ea <moveGyroPID+0x4ca>
				 {

					 htim1.Instance -> CCR4 = 138; //left abit. prev: 138
 80042e0:	4b50      	ldr	r3, [pc, #320]	; (8004424 <moveGyroPID+0x604>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	228a      	movs	r2, #138	; 0x8a
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40
 80042e8:	e038      	b.n	800435c <moveGyroPID+0x53c>
				 }
				 else if (actualAngle > 0.33)//veering left
 80042ea:	4b4d      	ldr	r3, [pc, #308]	; (8004420 <moveGyroPID+0x600>)
 80042ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042f0:	a349      	add	r3, pc, #292	; (adr r3, 8004418 <moveGyroPID+0x5f8>)
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	f7fc fc0f 	bl	8000b18 <__aeabi_dcmpgt>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d004      	beq.n	800430a <moveGyroPID+0x4ea>
				 {

					 htim1.Instance -> CCR4 = 155; //right a bit. prev: 152
 8004300:	4b48      	ldr	r3, [pc, #288]	; (8004424 <moveGyroPID+0x604>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	229b      	movs	r2, #155	; 0x9b
 8004306:	641a      	str	r2, [r3, #64]	; 0x40
 8004308:	e028      	b.n	800435c <moveGyroPID+0x53c>
				 }
				 else
				 {
	//				 servo = STRAIGHT;
					 htim1.Instance -> CCR4 = STRAIGHT; //Straight
 800430a:	4b46      	ldr	r3, [pc, #280]	; (8004424 <moveGyroPID+0x604>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2295      	movs	r2, #149	; 0x95
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
 8004312:	e023      	b.n	800435c <moveGyroPID+0x53c>


			 }
			 else
			 {
				 if (actualAngle > 0.33) //veering left
 8004314:	4b42      	ldr	r3, [pc, #264]	; (8004420 <moveGyroPID+0x600>)
 8004316:	e9d3 0100 	ldrd	r0, r1, [r3]
 800431a:	a33f      	add	r3, pc, #252	; (adr r3, 8004418 <moveGyroPID+0x5f8>)
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	f7fc fbfa 	bl	8000b18 <__aeabi_dcmpgt>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d004      	beq.n	8004334 <moveGyroPID+0x514>
				 {
	//				 servo = STRAIGHT;
					 htim1.Instance -> CCR4 = 138; //left abit
 800432a:	4b3e      	ldr	r3, [pc, #248]	; (8004424 <moveGyroPID+0x604>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	228a      	movs	r2, #138	; 0x8a
 8004330:	641a      	str	r2, [r3, #64]	; 0x40
 8004332:	e013      	b.n	800435c <moveGyroPID+0x53c>
				 }
				 else if (actualAngle < -0.33)//veering right
 8004334:	4b3a      	ldr	r3, [pc, #232]	; (8004420 <moveGyroPID+0x600>)
 8004336:	e9d3 0100 	ldrd	r0, r1, [r3]
 800433a:	a335      	add	r3, pc, #212	; (adr r3, 8004410 <moveGyroPID+0x5f0>)
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	f7fc fbcc 	bl	8000adc <__aeabi_dcmplt>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d004      	beq.n	8004354 <moveGyroPID+0x534>
				 {
//					 servo = STRAIGHT;
					 htim1.Instance -> CCR4 = 155; //right a bit
 800434a:	4b36      	ldr	r3, [pc, #216]	; (8004424 <moveGyroPID+0x604>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	229b      	movs	r2, #155	; 0x9b
 8004350:	641a      	str	r2, [r3, #64]	; 0x40
 8004352:	e003      	b.n	800435c <moveGyroPID+0x53c>
				 }
				 else
				 {
	//				 servo = STRAIGHT;
					 htim1.Instance -> CCR4 = STRAIGHT; //Straight
 8004354:	4b33      	ldr	r3, [pc, #204]	; (8004424 <moveGyroPID+0x604>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2295      	movs	r2, #149	; 0x95
 800435a:	641a      	str	r2, [r3, #64]	; 0x40
				 }
			 }
			 osDelay(10);
 800435c:	200a      	movs	r0, #10
 800435e:	f008 ff92 	bl	800d286 <osDelay>

			 if (totalDistance_left >= (distance+distanceError) || totalDistance_right >= (distance+distanceError))
 8004362:	ed97 7a01 	vldr	s14, [r7, #4]
 8004366:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800436a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800436e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004372:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437a:	da0c      	bge.n	8004396 <moveGyroPID+0x576>
 800437c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004380:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004388:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800438c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004394:	db0c      	blt.n	80043b0 <moveGyroPID+0x590>
			 {
				 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8004396:	4b24      	ldr	r3, [pc, #144]	; (8004428 <moveGyroPID+0x608>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2200      	movs	r2, #0
 800439c:	635a      	str	r2, [r3, #52]	; 0x34
				 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 800439e:	4b22      	ldr	r3, [pc, #136]	; (8004428 <moveGyroPID+0x608>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2200      	movs	r2, #0
 80043a4:	63da      	str	r2, [r3, #60]	; 0x3c
				 htim1.Instance -> CCR4 = STRAIGHT; //centre
 80043a6:	4b1f      	ldr	r3, [pc, #124]	; (8004424 <moveGyroPID+0x604>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2295      	movs	r2, #149	; 0x95
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40
//				sprintf(messageB, "SRight: %2d\0", pwmValC);
//				OLED_ShowString(10, 40, messageB);
//				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
//				OLED_ShowString(10, 50, messageB);
//				OLED_Refresh_Gram();
				 break;
 80043ae:	e00c      	b.n	80043ca <moveGyroPID+0x5aa>
//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
//			OLED_ShowString(10, 30, messageA);
//			sprintf(messageB, "SRight: %2d\0", diffRight);
//			OLED_ShowString(10, 40, messageB);

			prevTime = currTime;
 80043b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			leftTick_prev = leftTick;
 80043b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			rightTick_prev = rightTick;
 80043c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		if (totalDistance_left >= (distance+distanceError) * 0.9 || totalDistance_right >= (distance+distanceError) * 0.9) {
 80043c8:	e5df      	b.n	8003f8a <moveGyroPID+0x16a>
		 }
	}
//	moving = 0;
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80043ca:	2201      	movs	r2, #1
 80043cc:	2108      	movs	r1, #8
 80043ce:	4817      	ldr	r0, [pc, #92]	; (800442c <moveGyroPID+0x60c>)
 80043d0:	f003 f8f0 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80043d4:	2200      	movs	r2, #0
 80043d6:	2104      	movs	r1, #4
 80043d8:	4814      	ldr	r0, [pc, #80]	; (800442c <moveGyroPID+0x60c>)
 80043da:	f003 f8eb 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80043de:	2201      	movs	r2, #1
 80043e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80043e4:	4812      	ldr	r0, [pc, #72]	; (8004430 <moveGyroPID+0x610>)
 80043e6:	f003 f8e5 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80043ea:	2200      	movs	r2, #0
 80043ec:	2120      	movs	r1, #32
 80043ee:	4811      	ldr	r0, [pc, #68]	; (8004434 <moveGyroPID+0x614>)
 80043f0:	f003 f8e0 	bl	80075b4 <HAL_GPIO_WritePin>
	htim1.Instance -> CCR4 = STRAIGHT; //centre
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <moveGyroPID+0x604>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2295      	movs	r2, #149	; 0x95
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 80043fc:	200a      	movs	r0, #10
 80043fe:	f008 ff42 	bl	800d286 <osDelay>
	return;
 8004402:	bf00      	nop
}
 8004404:	37c0      	adds	r7, #192	; 0xc0
 8004406:	46bd      	mov	sp, r7
 8004408:	bdb0      	pop	{r4, r5, r7, pc}
 800440a:	bf00      	nop
 800440c:	f3af 8000 	nop.w
 8004410:	51eb851f 	.word	0x51eb851f
 8004414:	bfd51eb8 	.word	0xbfd51eb8
 8004418:	51eb851f 	.word	0x51eb851f
 800441c:	3fd51eb8 	.word	0x3fd51eb8
 8004420:	20000420 	.word	0x20000420
 8004424:	20000258 	.word	0x20000258
 8004428:	20000378 	.word	0x20000378
 800442c:	40020000 	.word	0x40020000
 8004430:	40021000 	.word	0x40021000
 8004434:	40020800 	.word	0x40020800

08004438 <moveGyroPIDOld>:

// this is without the drastic servo movement
void moveGyroPIDOld(float distance, int forward)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b0b2      	sub	sp, #200	; 0xc8
 800443c:	af00      	add	r7, sp, #0
 800443e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004442:	6038      	str	r0, [r7, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8004444:	2100      	movs	r1, #0
 8004446:	48bc      	ldr	r0, [pc, #752]	; (8004738 <moveGyroPIDOld+0x300>)
 8004448:	f006 f96a 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800444c:	2108      	movs	r1, #8
 800444e:	48ba      	ldr	r0, [pc, #744]	; (8004738 <moveGyroPIDOld+0x300>)
 8004450:	f006 f966 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004454:	210c      	movs	r1, #12
 8004456:	48b9      	ldr	r0, [pc, #740]	; (800473c <moveGyroPIDOld+0x304>)
 8004458:	f006 f962 	bl	800a720 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 800445c:	4bb7      	ldr	r3, [pc, #732]	; (800473c <moveGyroPIDOld+0x304>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2295      	movs	r2, #149	; 0x95
 8004462:	641a      	str	r2, [r3, #64]	; 0x40

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8004464:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004468:	2224      	movs	r2, #36	; 0x24
 800446a:	2100      	movs	r1, #0
 800446c:	4618      	mov	r0, r3
 800446e:	f00b fc65 	bl	800fd3c <memset>
 8004472:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004476:	65bb      	str	r3, [r7, #88]	; 0x58
 8004478:	f240 53aa 	movw	r3, #1450	; 0x5aa
 800447c:	663b      	str	r3, [r7, #96]	; 0x60
 800447e:	f640 3354 	movw	r3, #2900	; 0xb54
 8004482:	667b      	str	r3, [r7, #100]	; 0x64
 8004484:	4bae      	ldr	r3, [pc, #696]	; (8004740 <moveGyroPIDOld+0x308>)
 8004486:	66bb      	str	r3, [r7, #104]	; 0x68
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };


	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8004488:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800448c:	2224      	movs	r2, #36	; 0x24
 800448e:	2100      	movs	r1, #0
 8004490:	4618      	mov	r0, r3
 8004492:	f00b fc53 	bl	800fd3c <memset>
 8004496:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800449a:	637b      	str	r3, [r7, #52]	; 0x34
 800449c:	f240 53aa 	movw	r3, #1450	; 0x5aa
 80044a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a2:	f640 3354 	movw	r3, #2900	; 0xb54
 80044a6:	643b      	str	r3, [r7, #64]	; 0x40
 80044a8:	4ba5      	ldr	r3, [pc, #660]	; (8004740 <moveGyroPIDOld+0x308>)
 80044aa:	647b      	str	r3, [r7, #68]	; 0x44
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 80044ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044b0:	4618      	mov	r0, r3
 80044b2:	f002 f817 	bl	80064e4 <PIDController_Init>
	PIDController_Init(&pidRight);
 80044b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044ba:	4618      	mov	r0, r3
 80044bc:	f002 f812 	bl	80064e4 <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 80044c0:	4ba0      	ldr	r3, [pc, #640]	; (8004744 <moveGyroPIDOld+0x30c>)
 80044c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float wheel_rotationTicksR = 779; // for back right wheel
 80044c6:	4ba0      	ldr	r3, [pc, #640]	; (8004748 <moveGyroPIDOld+0x310>)
 80044c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	float wheel_circumference = 21.1f; // NEED TO MEASURE AND CHANGE
 80044cc:	4b9f      	ldr	r3, [pc, #636]	; (800474c <moveGyroPIDOld+0x314>)
 80044ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 80044d2:	213c      	movs	r1, #60	; 0x3c
 80044d4:	489e      	ldr	r0, [pc, #632]	; (8004750 <moveGyroPIDOld+0x318>)
 80044d6:	f006 fc09 	bl	800acec <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 80044da:	213c      	movs	r1, #60	; 0x3c
 80044dc:	489d      	ldr	r0, [pc, #628]	; (8004754 <moveGyroPIDOld+0x31c>)
 80044de:	f006 fc05 	bl	800acec <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80044e2:	4b9b      	ldr	r3, [pc, #620]	; (8004750 <moveGyroPIDOld+0x318>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 80044ec:	4b99      	ldr	r3, [pc, #612]	; (8004754 <moveGyroPIDOld+0x31c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 80044f6:	f002 fcdf 	bl	8006eb8 <HAL_GetTick>
 80044fa:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	uint32_t prevTime = startTime;
 80044fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004502:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float totalDistance_right = 0;
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int diffRight = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8004522:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004526:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint16_t pwmValC = 2000 * STRAIGHTRATIOF;
 800452a:	f640 139c 	movw	r3, #2460	; 0x99c
 800452e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if(forward){
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d015      	beq.n	8004564 <moveGyroPIDOld+0x12c>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004538:	2201      	movs	r2, #1
 800453a:	2108      	movs	r1, #8
 800453c:	4886      	ldr	r0, [pc, #536]	; (8004758 <moveGyroPIDOld+0x320>)
 800453e:	f003 f839 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004542:	2200      	movs	r2, #0
 8004544:	2104      	movs	r1, #4
 8004546:	4884      	ldr	r0, [pc, #528]	; (8004758 <moveGyroPIDOld+0x320>)
 8004548:	f003 f834 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800454c:	2201      	movs	r2, #1
 800454e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004552:	4882      	ldr	r0, [pc, #520]	; (800475c <moveGyroPIDOld+0x324>)
 8004554:	f003 f82e 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004558:	2200      	movs	r2, #0
 800455a:	2120      	movs	r1, #32
 800455c:	4880      	ldr	r0, [pc, #512]	; (8004760 <moveGyroPIDOld+0x328>)
 800455e:	f003 f829 	bl	80075b4 <HAL_GPIO_WritePin>
 8004562:	e014      	b.n	800458e <moveGyroPIDOld+0x156>
	}else{
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8004564:	2200      	movs	r2, #0
 8004566:	2108      	movs	r1, #8
 8004568:	487b      	ldr	r0, [pc, #492]	; (8004758 <moveGyroPIDOld+0x320>)
 800456a:	f003 f823 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800456e:	2201      	movs	r2, #1
 8004570:	2104      	movs	r1, #4
 8004572:	4879      	ldr	r0, [pc, #484]	; (8004758 <moveGyroPIDOld+0x320>)
 8004574:	f003 f81e 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8004578:	2200      	movs	r2, #0
 800457a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800457e:	4877      	ldr	r0, [pc, #476]	; (800475c <moveGyroPIDOld+0x324>)
 8004580:	f003 f818 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8004584:	2201      	movs	r2, #1
 8004586:	2120      	movs	r1, #32
 8004588:	4875      	ldr	r0, [pc, #468]	; (8004760 <moveGyroPIDOld+0x328>)
 800458a:	f003 f813 	bl	80075b4 <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for(;;)
	{

		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800458e:	4b6a      	ldr	r3, [pc, #424]	; (8004738 <moveGyroPIDOld+0x300>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004596:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8004598:	4b67      	ldr	r3, [pc, #412]	; (8004738 <moveGyroPIDOld+0x300>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 80045a0:	63da      	str	r2, [r3, #60]	; 0x3c
		 currTime = HAL_GetTick();
 80045a2:	f002 fc89 	bl	8006eb8 <HAL_GetTick>
 80045a6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		 moving = 1;
 80045aa:	4b6e      	ldr	r3, [pc, #440]	; (8004764 <moveGyroPIDOld+0x32c>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	701a      	strb	r2, [r3, #0]

		 if (currTime-prevTime > 60L)
 80045b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80045b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b3c      	cmp	r3, #60	; 0x3c
 80045bc:	d9e7      	bls.n	800458e <moveGyroPIDOld+0x156>
		 {
			 leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 80045be:	4b64      	ldr	r3, [pc, #400]	; (8004750 <moveGyroPIDOld+0x318>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			 rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 80045c8:	4b62      	ldr	r3, [pc, #392]	; (8004754 <moveGyroPIDOld+0x31c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

			 diffLeft = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			 diffRight = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 80045de:	4b5c      	ldr	r3, [pc, #368]	; (8004750 <moveGyroPIDOld+0x318>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	d118      	bne.n	800461e <moveGyroPIDOld+0x1e6>
			 {
				 if (leftTick < leftTick_prev)
 80045ec:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80045f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045f4:	429a      	cmp	r2, r3
 80045f6:	da07      	bge.n	8004608 <moveGyroPIDOld+0x1d0>
					 diffLeft = leftTick_prev - leftTick;
 80045f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004606:	e022      	b.n	800464e <moveGyroPIDOld+0x216>
				 else
					 diffLeft = (65535 - leftTick) + leftTick_prev;
 8004608:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800460c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004610:	33ff      	adds	r3, #255	; 0xff
 8004612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004616:	4413      	add	r3, r2
 8004618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800461c:	e017      	b.n	800464e <moveGyroPIDOld+0x216>
			 }
			 else
			 {
				 if (leftTick > leftTick_prev)
 800461e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004622:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004626:	429a      	cmp	r2, r3
 8004628:	dd07      	ble.n	800463a <moveGyroPIDOld+0x202>
					 diffLeft = leftTick - leftTick_prev;
 800462a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800462e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004638:	e009      	b.n	800464e <moveGyroPIDOld+0x216>
				 else
					 diffLeft = 65535 - leftTick_prev + leftTick;
 800463a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800463e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004642:	33ff      	adds	r3, #255	; 0xff
 8004644:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004648:	4413      	add	r3, r2
 800464a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			 }

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 800464e:	4b41      	ldr	r3, [pc, #260]	; (8004754 <moveGyroPIDOld+0x31c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b10      	cmp	r3, #16
 800465a:	d118      	bne.n	800468e <moveGyroPIDOld+0x256>
			 {
				 if (rightTick < rightTick_prev)
 800465c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004660:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004664:	429a      	cmp	r2, r3
 8004666:	da07      	bge.n	8004678 <moveGyroPIDOld+0x240>
					 diffRight = rightTick_prev - rightTick;
 8004668:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800466c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004676:	e022      	b.n	80046be <moveGyroPIDOld+0x286>
				 else
					 diffRight = (65535 - rightTick) + rightTick_prev;
 8004678:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800467c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004680:	33ff      	adds	r3, #255	; 0xff
 8004682:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004686:	4413      	add	r3, r2
 8004688:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800468c:	e017      	b.n	80046be <moveGyroPIDOld+0x286>
			 }
			 else
			 {
				 if (rightTick > rightTick_prev)
 800468e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004696:	429a      	cmp	r2, r3
 8004698:	dd07      	ble.n	80046aa <moveGyroPIDOld+0x272>
					 diffRight = rightTick - rightTick_prev;
 800469a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800469e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046a8:	e009      	b.n	80046be <moveGyroPIDOld+0x286>
				 else
					 diffRight = 65535 - rightTick_prev + rightTick;
 80046aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046ae:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80046b2:	33ff      	adds	r3, #255	; 0xff
 80046b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80046b8:	4413      	add	r3, r2
 80046ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 }

			 // left measured distance
			 distLeft = ((float)diffLeft/wheel_rotationTicksL) * wheel_circumference;
 80046be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80046ca:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80046ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046d2:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80046d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046da:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
			 totalDistance_left += distLeft;
 80046de:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80046e2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80046e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046ea:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

			 // right measured distance
			 distRight = ((float)diffRight/wheel_rotationTicksR) * wheel_circumference;
 80046ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80046fa:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80046fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004702:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8004706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
			 totalDistance_right += distRight;
 800470e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004712:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800471a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
//
//				 pwmValC = PIDController_Update(&pidRight, totalDistance_left*STRAIGHTRATIOR, totalDistance_right, pwmValC);
//			 }


			 if(forward)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d025      	beq.n	8004770 <moveGyroPIDOld+0x338>
			 {
				  distanceError = DISTANCE_ERROR_OFFSETF * distance;
 8004724:	edd7 7a01 	vldr	s15, [r7, #4]
 8004728:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004768 <moveGyroPIDOld+0x330>
 800472c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004730:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 8004734:	e024      	b.n	8004780 <moveGyroPIDOld+0x348>
 8004736:	bf00      	nop
 8004738:	20000378 	.word	0x20000378
 800473c:	20000258 	.word	0x20000258
 8004740:	3d4ccccd 	.word	0x3d4ccccd
 8004744:	44440000 	.word	0x44440000
 8004748:	4442c000 	.word	0x4442c000
 800474c:	41a8cccd 	.word	0x41a8cccd
 8004750:	200002a0 	.word	0x200002a0
 8004754:	20000330 	.word	0x20000330
 8004758:	40020000 	.word	0x40020000
 800475c:	40021000 	.word	0x40021000
 8004760:	40020800 	.word	0x40020800
 8004764:	20000414 	.word	0x20000414
 8004768:	bcf5c28f 	.word	0xbcf5c28f
 800476c:	bd75c28f 	.word	0xbd75c28f
			 }
			 else
			 {
				  distanceError = DISTANCE_ERROR_OFFSETR * distance;
 8004770:	edd7 7a01 	vldr	s15, [r7, #4]
 8004774:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 800476c <moveGyroPIDOld+0x334>
 8004778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800477c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
			 }

			 //if robot doesnt go straight, using gyro to adjust, straight = 145
			 if (forward)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d030      	beq.n	80047e8 <moveGyroPIDOld+0x3b0>
			 {
				 if (totalAngle < 0.00) //veering right
 8004786:	4b90      	ldr	r3, [pc, #576]	; (80049c8 <moveGyroPIDOld+0x590>)
 8004788:	e9d3 0100 	ldrd	r0, r1, [r3]
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	f7fc f9a2 	bl	8000adc <__aeabi_dcmplt>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <moveGyroPIDOld+0x36e>
				 {

					 htim1.Instance -> CCR4 = 140; //left abit. prev: 138
 800479e:	4b8b      	ldr	r3, [pc, #556]	; (80049cc <moveGyroPIDOld+0x594>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	228c      	movs	r2, #140	; 0x8c
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40
				 }
				 if (totalAngle > 0.00)//veering left
 80047a6:	4b88      	ldr	r3, [pc, #544]	; (80049c8 <moveGyroPIDOld+0x590>)
 80047a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	f7fc f9b0 	bl	8000b18 <__aeabi_dcmpgt>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <moveGyroPIDOld+0x38e>
				 {

					 htim1.Instance -> CCR4 = 155; //right a bit. prev: 152
 80047be:	4b83      	ldr	r3, [pc, #524]	; (80049cc <moveGyroPIDOld+0x594>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	229b      	movs	r2, #155	; 0x9b
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
				 }
				 if (totalAngle == 0.00)
 80047c6:	4b80      	ldr	r3, [pc, #512]	; (80049c8 <moveGyroPIDOld+0x590>)
 80047c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	f7fc f978 	bl	8000ac8 <__aeabi_dcmpeq>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d036      	beq.n	800484c <moveGyroPIDOld+0x414>
				 {
	//				 servo = STRAIGHT;
					 htim1.Instance -> CCR4 = STRAIGHT; //Straight
 80047de:	4b7b      	ldr	r3, [pc, #492]	; (80049cc <moveGyroPIDOld+0x594>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2295      	movs	r2, #149	; 0x95
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40
 80047e6:	e031      	b.n	800484c <moveGyroPIDOld+0x414>


			 }
			 else
			 {
				 if (totalAngle > 0.00) //veering left
 80047e8:	4b77      	ldr	r3, [pc, #476]	; (80049c8 <moveGyroPIDOld+0x590>)
 80047ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	f7fc f98f 	bl	8000b18 <__aeabi_dcmpgt>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <moveGyroPIDOld+0x3d0>
				 {
	//				 servo = STRAIGHT;
					 htim1.Instance -> CCR4 = 140; //left abit
 8004800:	4b72      	ldr	r3, [pc, #456]	; (80049cc <moveGyroPIDOld+0x594>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	228c      	movs	r2, #140	; 0x8c
 8004806:	641a      	str	r2, [r3, #64]	; 0x40
				 }
				 if (totalAngle < 0.00)//veering right
 8004808:	4b6f      	ldr	r3, [pc, #444]	; (80049c8 <moveGyroPIDOld+0x590>)
 800480a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	f7fc f961 	bl	8000adc <__aeabi_dcmplt>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <moveGyroPIDOld+0x3f4>
				 {
					 servo = STRAIGHT;
 8004820:	2395      	movs	r3, #149	; 0x95
 8004822:	67fb      	str	r3, [r7, #124]	; 0x7c
					 htim1.Instance -> CCR4 = 155; //right a bit
 8004824:	4b69      	ldr	r3, [pc, #420]	; (80049cc <moveGyroPIDOld+0x594>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	229b      	movs	r2, #155	; 0x9b
 800482a:	641a      	str	r2, [r3, #64]	; 0x40
				 }
				 if (totalAngle == 0.00)
 800482c:	4b66      	ldr	r3, [pc, #408]	; (80049c8 <moveGyroPIDOld+0x590>)
 800482e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	f7fc f945 	bl	8000ac8 <__aeabi_dcmpeq>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <moveGyroPIDOld+0x414>
				 {
	//				 servo = STRAIGHT;
					 htim1.Instance -> CCR4 = STRAIGHT; //Straight
 8004844:	4b61      	ldr	r3, [pc, #388]	; (80049cc <moveGyroPIDOld+0x594>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2295      	movs	r2, #149	; 0x95
 800484a:	641a      	str	r2, [r3, #64]	; 0x40
				 }
			 }
			 osDelay(10);
 800484c:	200a      	movs	r0, #10
 800484e:	f008 fd1a 	bl	800d286 <osDelay>
			 if (totalDistance_left >= (distance+distanceError) || totalDistance_right >= (distance+distanceError))
 8004852:	ed97 7a01 	vldr	s14, [r7, #4]
 8004856:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800485a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800485e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486a:	da0c      	bge.n	8004886 <moveGyroPIDOld+0x44e>
 800486c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004870:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004878:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800487c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004884:	db3f      	blt.n	8004906 <moveGyroPIDOld+0x4ce>
			 {
				 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8004886:	4b52      	ldr	r3, [pc, #328]	; (80049d0 <moveGyroPIDOld+0x598>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2200      	movs	r2, #0
 800488c:	635a      	str	r2, [r3, #52]	; 0x34
				 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 800488e:	4b50      	ldr	r3, [pc, #320]	; (80049d0 <moveGyroPIDOld+0x598>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2200      	movs	r2, #0
 8004894:	63da      	str	r2, [r3, #60]	; 0x3c
//				 moving = 0;
				sprintf(messageA, "dist: %.2f\0", distance);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fb fe56 	bl	8000548 <__aeabi_f2d>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	f107 0020 	add.w	r0, r7, #32
 80048a4:	494b      	ldr	r1, [pc, #300]	; (80049d4 <moveGyroPIDOld+0x59c>)
 80048a6:	f00c f8d1 	bl	8010a4c <siprintf>
				OLED_ShowString(10, 10, messageA);
 80048aa:	f107 0320 	add.w	r3, r7, #32
 80048ae:	461a      	mov	r2, r3
 80048b0:	210a      	movs	r1, #10
 80048b2:	200a      	movs	r0, #10
 80048b4:	f001 fd58 	bl	8006368 <OLED_ShowString>
//				sprintf(messageA, "SLeft: %2d\0", pwmValA);
//				OLED_ShowString(10, 20, messageA);
				sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 80048b8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80048bc:	f7fb fe44 	bl	8000548 <__aeabi_f2d>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	f107 0020 	add.w	r0, r7, #32
 80048c8:	4943      	ldr	r1, [pc, #268]	; (80049d8 <moveGyroPIDOld+0x5a0>)
 80048ca:	f00c f8bf 	bl	8010a4c <siprintf>
				OLED_ShowString(10, 30, messageA);
 80048ce:	f107 0320 	add.w	r3, r7, #32
 80048d2:	461a      	mov	r2, r3
 80048d4:	211e      	movs	r1, #30
 80048d6:	200a      	movs	r0, #10
 80048d8:	f001 fd46 	bl	8006368 <OLED_ShowString>
//
//				sprintf(messageB, "SRight: %2d\0", pwmValC);
//				OLED_ShowString(10, 40, messageB);
				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 80048dc:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80048e0:	f7fb fe32 	bl	8000548 <__aeabi_f2d>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	f107 000c 	add.w	r0, r7, #12
 80048ec:	493b      	ldr	r1, [pc, #236]	; (80049dc <moveGyroPIDOld+0x5a4>)
 80048ee:	f00c f8ad 	bl	8010a4c <siprintf>
				OLED_ShowString(10, 50, messageB);
 80048f2:	f107 030c 	add.w	r3, r7, #12
 80048f6:	461a      	mov	r2, r3
 80048f8:	2132      	movs	r1, #50	; 0x32
 80048fa:	200a      	movs	r0, #10
 80048fc:	f001 fd34 	bl	8006368 <OLED_ShowString>
				OLED_Refresh_Gram();
 8004900:	f001 fbbe 	bl	8006080 <OLED_Refresh_Gram>
				 break;
 8004904:	e043      	b.n	800498e <moveGyroPIDOld+0x556>
//			// OLED
//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
//			OLED_ShowString(10, 30, messageA);
//			sprintf(messageB, "SRight: %2d\0", diffRight);
//			OLED_ShowString(10, 40, messageB);
			sprintf(messageA, "dist: %.2f\0", distance);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fb fe1e 	bl	8000548 <__aeabi_f2d>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	f107 0020 	add.w	r0, r7, #32
 8004914:	492f      	ldr	r1, [pc, #188]	; (80049d4 <moveGyroPIDOld+0x59c>)
 8004916:	f00c f899 	bl	8010a4c <siprintf>
			OLED_ShowString(10, 10, messageA);
 800491a:	f107 0320 	add.w	r3, r7, #32
 800491e:	461a      	mov	r2, r3
 8004920:	210a      	movs	r1, #10
 8004922:	200a      	movs	r0, #10
 8004924:	f001 fd20 	bl	8006368 <OLED_ShowString>

			sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 8004928:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800492c:	f7fb fe0c 	bl	8000548 <__aeabi_f2d>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	f107 0020 	add.w	r0, r7, #32
 8004938:	4927      	ldr	r1, [pc, #156]	; (80049d8 <moveGyroPIDOld+0x5a0>)
 800493a:	f00c f887 	bl	8010a4c <siprintf>
			OLED_ShowString(10, 30, messageA);
 800493e:	f107 0320 	add.w	r3, r7, #32
 8004942:	461a      	mov	r2, r3
 8004944:	211e      	movs	r1, #30
 8004946:	200a      	movs	r0, #10
 8004948:	f001 fd0e 	bl	8006368 <OLED_ShowString>

			sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 800494c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8004950:	f7fb fdfa 	bl	8000548 <__aeabi_f2d>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	f107 000c 	add.w	r0, r7, #12
 800495c:	491f      	ldr	r1, [pc, #124]	; (80049dc <moveGyroPIDOld+0x5a4>)
 800495e:	f00c f875 	bl	8010a4c <siprintf>
			OLED_ShowString(10, 50, messageB);
 8004962:	f107 030c 	add.w	r3, r7, #12
 8004966:	461a      	mov	r2, r3
 8004968:	2132      	movs	r1, #50	; 0x32
 800496a:	200a      	movs	r0, #10
 800496c:	f001 fcfc 	bl	8006368 <OLED_ShowString>
			OLED_Refresh_Gram();
 8004970:	f001 fb86 	bl	8006080 <OLED_Refresh_Gram>

			prevTime = currTime;
 8004974:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			leftTick_prev = leftTick;
 800497c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004980:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			rightTick_prev = rightTick;
 8004984:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004988:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800498c:	e5ff      	b.n	800458e <moveGyroPIDOld+0x156>
		 }
	}
//	moving = 0;
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800498e:	2201      	movs	r2, #1
 8004990:	2108      	movs	r1, #8
 8004992:	4813      	ldr	r0, [pc, #76]	; (80049e0 <moveGyroPIDOld+0x5a8>)
 8004994:	f002 fe0e 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004998:	2200      	movs	r2, #0
 800499a:	2104      	movs	r1, #4
 800499c:	4810      	ldr	r0, [pc, #64]	; (80049e0 <moveGyroPIDOld+0x5a8>)
 800499e:	f002 fe09 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80049a2:	2201      	movs	r2, #1
 80049a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049a8:	480e      	ldr	r0, [pc, #56]	; (80049e4 <moveGyroPIDOld+0x5ac>)
 80049aa:	f002 fe03 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80049ae:	2200      	movs	r2, #0
 80049b0:	2120      	movs	r1, #32
 80049b2:	480d      	ldr	r0, [pc, #52]	; (80049e8 <moveGyroPIDOld+0x5b0>)
 80049b4:	f002 fdfe 	bl	80075b4 <HAL_GPIO_WritePin>
	htim1.Instance -> CCR4 = STRAIGHT; //centre
 80049b8:	4b04      	ldr	r3, [pc, #16]	; (80049cc <moveGyroPIDOld+0x594>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2295      	movs	r2, #149	; 0x95
 80049be:	641a      	str	r2, [r3, #64]	; 0x40
	return;
 80049c0:	bf00      	nop
}
 80049c2:	37c8      	adds	r7, #200	; 0xc8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20000418 	.word	0x20000418
 80049cc:	20000258 	.word	0x20000258
 80049d0:	20000378 	.word	0x20000378
 80049d4:	08014674 	.word	0x08014674
 80049d8:	08014680 	.word	0x08014680
 80049dc:	08014690 	.word	0x08014690
 80049e0:	40020000 	.word	0x40020000
 80049e4:	40021000 	.word	0x40021000
 80049e8:	40020800 	.word	0x40020800

080049ec <move>:

void move(float distance, int forward)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b0b0      	sub	sp, #192	; 0xc0
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80049f6:	6038      	str	r0, [r7, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80049f8:	2100      	movs	r1, #0
 80049fa:	48d1      	ldr	r0, [pc, #836]	; (8004d40 <move+0x354>)
 80049fc:	f005 fe90 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004a00:	2108      	movs	r1, #8
 8004a02:	48cf      	ldr	r0, [pc, #828]	; (8004d40 <move+0x354>)
 8004a04:	f005 fe8c 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004a08:	210c      	movs	r1, #12
 8004a0a:	48ce      	ldr	r0, [pc, #824]	; (8004d44 <move+0x358>)
 8004a0c:	f005 fe88 	bl	800a720 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8004a10:	4bcc      	ldr	r3, [pc, #816]	; (8004d44 <move+0x358>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2295      	movs	r2, #149	; 0x95
 8004a16:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 8004a18:	2064      	movs	r0, #100	; 0x64
 8004a1a:	f008 fc34 	bl	800d286 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8004a1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a22:	2224      	movs	r2, #36	; 0x24
 8004a24:	2100      	movs	r1, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f00b f988 	bl	800fd3c <memset>
 8004a2c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004a30:	657b      	str	r3, [r7, #84]	; 0x54
 8004a32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004a36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a38:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004a3c:	663b      	str	r3, [r7, #96]	; 0x60
 8004a3e:	4bc2      	ldr	r3, [pc, #776]	; (8004d48 <move+0x35c>)
 8004a40:	667b      	str	r3, [r7, #100]	; 0x64
						  500, 1500,
						  SAMPLE_TIME_S };


	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8004a42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a46:	2224      	movs	r2, #36	; 0x24
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f00b f976 	bl	800fd3c <memset>
 8004a50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004a54:	633b      	str	r3, [r7, #48]	; 0x30
 8004a56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a5c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a62:	4bb9      	ldr	r3, [pc, #740]	; (8004d48 <move+0x35c>)
 8004a64:	643b      	str	r3, [r7, #64]	; 0x40
							500, 1500,
						  SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8004a66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 fd3a 	bl	80064e4 <PIDController_Init>
	PIDController_Init(&pidRight);
 8004a70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a74:	4618      	mov	r0, r3
 8004a76:	f001 fd35 	bl	80064e4 <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8004a7a:	4bb4      	ldr	r3, [pc, #720]	; (8004d4c <move+0x360>)
 8004a7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 8004a80:	4bb3      	ldr	r3, [pc, #716]	; (8004d50 <move+0x364>)
 8004a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 8004a86:	4bb3      	ldr	r3, [pc, #716]	; (8004d54 <move+0x368>)
 8004a88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8004a8c:	213c      	movs	r1, #60	; 0x3c
 8004a8e:	48b2      	ldr	r0, [pc, #712]	; (8004d58 <move+0x36c>)
 8004a90:	f006 f92c 	bl	800acec <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8004a94:	213c      	movs	r1, #60	; 0x3c
 8004a96:	48b1      	ldr	r0, [pc, #708]	; (8004d5c <move+0x370>)
 8004a98:	f006 f928 	bl	800acec <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8004a9c:	4bae      	ldr	r3, [pc, #696]	; (8004d58 <move+0x36c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8004aa6:	4bad      	ldr	r3, [pc, #692]	; (8004d5c <move+0x370>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8004ab0:	f002 fa02 	bl	8006eb8 <HAL_GetTick>
 8004ab4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 8004ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float totalDistance_right = 0;
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	int diffRight = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8004adc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004ae0:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	uint16_t pwmValC = 2000;
 8004ae4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004ae8:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if(forward){
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d015      	beq.n	8004b1e <move+0x132>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004af2:	2201      	movs	r2, #1
 8004af4:	2108      	movs	r1, #8
 8004af6:	489a      	ldr	r0, [pc, #616]	; (8004d60 <move+0x374>)
 8004af8:	f002 fd5c 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004afc:	2200      	movs	r2, #0
 8004afe:	2104      	movs	r1, #4
 8004b00:	4897      	ldr	r0, [pc, #604]	; (8004d60 <move+0x374>)
 8004b02:	f002 fd57 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004b06:	2201      	movs	r2, #1
 8004b08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b0c:	4895      	ldr	r0, [pc, #596]	; (8004d64 <move+0x378>)
 8004b0e:	f002 fd51 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004b12:	2200      	movs	r2, #0
 8004b14:	2120      	movs	r1, #32
 8004b16:	4894      	ldr	r0, [pc, #592]	; (8004d68 <move+0x37c>)
 8004b18:	f002 fd4c 	bl	80075b4 <HAL_GPIO_WritePin>
 8004b1c:	e014      	b.n	8004b48 <move+0x15c>
	}else{
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2108      	movs	r1, #8
 8004b22:	488f      	ldr	r0, [pc, #572]	; (8004d60 <move+0x374>)
 8004b24:	f002 fd46 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8004b28:	2201      	movs	r2, #1
 8004b2a:	2104      	movs	r1, #4
 8004b2c:	488c      	ldr	r0, [pc, #560]	; (8004d60 <move+0x374>)
 8004b2e:	f002 fd41 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8004b32:	2200      	movs	r2, #0
 8004b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b38:	488a      	ldr	r0, [pc, #552]	; (8004d64 <move+0x378>)
 8004b3a:	f002 fd3b 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8004b3e:	2201      	movs	r2, #1
 8004b40:	2120      	movs	r1, #32
 8004b42:	4889      	ldr	r0, [pc, #548]	; (8004d68 <move+0x37c>)
 8004b44:	f002 fd36 	bl	80075b4 <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for(;;)
	{

		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004b48:	4b7d      	ldr	r3, [pc, #500]	; (8004d40 <move+0x354>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004b50:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8004b52:	4b7b      	ldr	r3, [pc, #492]	; (8004d40 <move+0x354>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004b5a:	63da      	str	r2, [r3, #60]	; 0x3c
		 currTime = HAL_GetTick();
 8004b5c:	f002 f9ac 	bl	8006eb8 <HAL_GetTick>
 8004b60:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		 moving = 1;
 8004b64:	4b81      	ldr	r3, [pc, #516]	; (8004d6c <move+0x380>)
 8004b66:	2201      	movs	r2, #1
 8004b68:	701a      	strb	r2, [r3, #0]

		 if (currTime-prevTime > 60L)
 8004b6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004b6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b3c      	cmp	r3, #60	; 0x3c
 8004b76:	d9e7      	bls.n	8004b48 <move+0x15c>
		 {
			 leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8004b78:	4b77      	ldr	r3, [pc, #476]	; (8004d58 <move+0x36c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			 rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8004b82:	4b76      	ldr	r3, [pc, #472]	; (8004d5c <move+0x370>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			 diffLeft = 0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			 diffRight = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8004b98:	4b6f      	ldr	r3, [pc, #444]	; (8004d58 <move+0x36c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d118      	bne.n	8004bd8 <move+0x1ec>
			 {
				 if (leftTick < leftTick_prev)
 8004ba6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004baa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	da07      	bge.n	8004bc2 <move+0x1d6>
					 diffLeft = leftTick_prev - leftTick;
 8004bb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004bb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bc0:	e022      	b.n	8004c08 <move+0x21c>
				 else
					 diffLeft = (65535 - leftTick) + leftTick_prev;
 8004bc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bc6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004bca:	33ff      	adds	r3, #255	; 0xff
 8004bcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bd6:	e017      	b.n	8004c08 <move+0x21c>
			 }
			 else
			 {
				 if (leftTick > leftTick_prev)
 8004bd8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004bdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004be0:	429a      	cmp	r2, r3
 8004be2:	dd07      	ble.n	8004bf4 <move+0x208>
					 diffLeft = leftTick - leftTick_prev;
 8004be4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004be8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bf2:	e009      	b.n	8004c08 <move+0x21c>
				 else
					 diffLeft = 65535 - leftTick_prev + leftTick;
 8004bf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004bf8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004bfc:	33ff      	adds	r3, #255	; 0xff
 8004bfe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004c02:	4413      	add	r3, r2
 8004c04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			 }

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8004c08:	4b54      	ldr	r3, [pc, #336]	; (8004d5c <move+0x370>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0310 	and.w	r3, r3, #16
 8004c12:	2b10      	cmp	r3, #16
 8004c14:	d118      	bne.n	8004c48 <move+0x25c>
			 {
				 if (rightTick < rightTick_prev)
 8004c16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	da07      	bge.n	8004c32 <move+0x246>
					 diffRight = rightTick_prev - rightTick;
 8004c22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004c30:	e022      	b.n	8004c78 <move+0x28c>
				 else
					 diffRight = (65535 - rightTick) + rightTick_prev;
 8004c32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c36:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004c3a:	33ff      	adds	r3, #255	; 0xff
 8004c3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c40:	4413      	add	r3, r2
 8004c42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004c46:	e017      	b.n	8004c78 <move+0x28c>
			 }
			 else
			 {
				 if (rightTick > rightTick_prev)
 8004c48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c50:	429a      	cmp	r2, r3
 8004c52:	dd07      	ble.n	8004c64 <move+0x278>
					 diffRight = rightTick - rightTick_prev;
 8004c54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004c62:	e009      	b.n	8004c78 <move+0x28c>
				 else
					 diffRight = 65535 - rightTick_prev + rightTick;
 8004c64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c68:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004c6c:	33ff      	adds	r3, #255	; 0xff
 8004c6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c72:	4413      	add	r3, r2
 8004c74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			 }

			 // left measured distance
			 distLeft = ((float)diffLeft/wheel_rotationTicksL) * wheel_circumference;
 8004c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c7c:	ee07 3a90 	vmov	s15, r3
 8004c80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004c84:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c8c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8004c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c94:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
			 totalDistance_left += distLeft;
 8004c98:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004c9c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8004ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ca4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

			 // right measured distance
			 distRight = ((float)diffRight/wheel_rotationTicksR) * wheel_circumference;
 8004ca8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004cac:	ee07 3a90 	vmov	s15, r3
 8004cb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004cb4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cbc:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8004cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
			 totalDistance_right += distRight;
 8004cc8:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8004ccc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cd4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
			 // 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.

#define pwmValAadjust 300;
#define pwmValBadjust 525;

			 if (forward){
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d04e      	beq.n	8004d7c <move+0x390>

				 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA) - pwmValAadjust;
 8004cde:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004ce2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004d70 <move+0x384>
 8004ce6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cea:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004cee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	edd7 0a2c 	vldr	s1, [r7, #176]	; 0xb0
 8004cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 fc09 	bl	8006514 <PIDController_Update>
 8004d02:	4603      	mov	r3, r0
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d0a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

				 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC) + pwmValBadjust;
 8004d0e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004d12:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004d70 <move+0x384>
 8004d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d1a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004d1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d22:	4611      	mov	r1, r2
 8004d24:	eef0 0a67 	vmov.f32	s1, s15
 8004d28:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f001 fbf1 	bl	8006514 <PIDController_Update>
 8004d32:	4603      	mov	r3, r0
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8004d3a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8004d3e:	e041      	b.n	8004dc4 <move+0x3d8>
 8004d40:	20000378 	.word	0x20000378
 8004d44:	20000258 	.word	0x20000258
 8004d48:	3d4ccccd 	.word	0x3d4ccccd
 8004d4c:	44440000 	.word	0x44440000
 8004d50:	4442c000 	.word	0x4442c000
 8004d54:	41b33333 	.word	0x41b33333
 8004d58:	200002a0 	.word	0x200002a0
 8004d5c:	20000330 	.word	0x20000330
 8004d60:	40020000 	.word	0x40020000
 8004d64:	40021000 	.word	0x40021000
 8004d68:	40020800 	.word	0x40020800
 8004d6c:	20000414 	.word	0x20000414
 8004d70:	3f9d70a4 	.word	0x3f9d70a4
 8004d74:	bcf5c28f 	.word	0xbcf5c28f
 8004d78:	bd75c28f 	.word	0xbd75c28f
			 }else{
				 pwmValA = PIDController_Update(&pidLeft, totalDistance_right, totalDistance_left*STRAIGHTRATIOR, pwmValA) - pwmValAadjust;
 8004d7c:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004d80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d84:	4611      	mov	r1, r2
 8004d86:	edd7 0a2c 	vldr	s1, [r7, #176]	; 0xb0
 8004d8a:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f001 fbc0 	bl	8006514 <PIDController_Update>
 8004d94:	4603      	mov	r3, r0
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d9c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

				 pwmValC = PIDController_Update(&pidRight, totalDistance_left*STRAIGHTRATIOR, totalDistance_right, pwmValC) + pwmValBadjust;
 8004da0:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004da4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004da8:	4611      	mov	r1, r2
 8004daa:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 8004dae:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8004db2:	4618      	mov	r0, r3
 8004db4:	f001 fbae 	bl	8006514 <PIDController_Update>
 8004db8:	4603      	mov	r3, r0
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8004dc0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			 }


			 if(forward)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <move+0x3f0>
			 {
				  distanceError = DISTANCE_ERROR_OFFSETF * distance;
 8004dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dce:	ed1f 7a17 	vldr	s14, [pc, #-92]	; 8004d74 <move+0x388>
 8004dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dd6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8004dda:	e007      	b.n	8004dec <move+0x400>
			 }
			 else
			 {
				  distanceError = DISTANCE_ERROR_OFFSETR * distance;
 8004ddc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004de0:	ed1f 7a1b 	vldr	s14, [pc, #-108]	; 8004d78 <move+0x38c>
 8004de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004de8:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
			 }

			 if (totalDistance_left >= (distance+distanceError) || totalDistance_right >= (distance+distanceError))
 8004dec:	ed97 7a01 	vldr	s14, [r7, #4]
 8004df0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004df8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004dfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e04:	da0c      	bge.n	8004e20 <move+0x434>
 8004e06:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e0a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e12:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8004e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e1e:	db60      	blt.n	8004ee2 <move+0x4f6>
			 {
				 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8004e20:	4b48      	ldr	r3, [pc, #288]	; (8004f44 <move+0x558>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2200      	movs	r2, #0
 8004e26:	635a      	str	r2, [r3, #52]	; 0x34
				 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 8004e28:	4b46      	ldr	r3, [pc, #280]	; (8004f44 <move+0x558>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	63da      	str	r2, [r3, #60]	; 0x3c
				 moving = 0;
 8004e30:	4b45      	ldr	r3, [pc, #276]	; (8004f48 <move+0x55c>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	701a      	strb	r2, [r3, #0]
				sprintf(messageA, "dist: %.2f\0", distance);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fb fb86 	bl	8000548 <__aeabi_f2d>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	f107 001c 	add.w	r0, r7, #28
 8004e44:	4941      	ldr	r1, [pc, #260]	; (8004f4c <move+0x560>)
 8004e46:	f00b fe01 	bl	8010a4c <siprintf>
				OLED_ShowString(10, 10, messageA);
 8004e4a:	f107 031c 	add.w	r3, r7, #28
 8004e4e:	461a      	mov	r2, r3
 8004e50:	210a      	movs	r1, #10
 8004e52:	200a      	movs	r0, #10
 8004e54:	f001 fa88 	bl	8006368 <OLED_ShowString>
				sprintf(messageA, "SLeft: %2d\0", pwmValA);
 8004e58:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004e5c:	f107 031c 	add.w	r3, r7, #28
 8004e60:	493b      	ldr	r1, [pc, #236]	; (8004f50 <move+0x564>)
 8004e62:	4618      	mov	r0, r3
 8004e64:	f00b fdf2 	bl	8010a4c <siprintf>
				OLED_ShowString(10, 20, messageA);
 8004e68:	f107 031c 	add.w	r3, r7, #28
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	2114      	movs	r1, #20
 8004e70:	200a      	movs	r0, #10
 8004e72:	f001 fa79 	bl	8006368 <OLED_ShowString>
				sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 8004e76:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8004e7a:	f7fb fb65 	bl	8000548 <__aeabi_f2d>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	f107 001c 	add.w	r0, r7, #28
 8004e86:	4933      	ldr	r1, [pc, #204]	; (8004f54 <move+0x568>)
 8004e88:	f00b fde0 	bl	8010a4c <siprintf>
				OLED_ShowString(10, 30, messageA);
 8004e8c:	f107 031c 	add.w	r3, r7, #28
 8004e90:	461a      	mov	r2, r3
 8004e92:	211e      	movs	r1, #30
 8004e94:	200a      	movs	r0, #10
 8004e96:	f001 fa67 	bl	8006368 <OLED_ShowString>

				sprintf(messageB, "SRight: %2d\0", pwmValC);
 8004e9a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004e9e:	f107 0308 	add.w	r3, r7, #8
 8004ea2:	492d      	ldr	r1, [pc, #180]	; (8004f58 <move+0x56c>)
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f00b fdd1 	bl	8010a4c <siprintf>
				OLED_ShowString(10, 40, messageB);
 8004eaa:	f107 0308 	add.w	r3, r7, #8
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2128      	movs	r1, #40	; 0x28
 8004eb2:	200a      	movs	r0, #10
 8004eb4:	f001 fa58 	bl	8006368 <OLED_ShowString>
				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 8004eb8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004ebc:	f7fb fb44 	bl	8000548 <__aeabi_f2d>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	f107 0008 	add.w	r0, r7, #8
 8004ec8:	4924      	ldr	r1, [pc, #144]	; (8004f5c <move+0x570>)
 8004eca:	f00b fdbf 	bl	8010a4c <siprintf>
				OLED_ShowString(10, 50, messageB);
 8004ece:	f107 0308 	add.w	r3, r7, #8
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2132      	movs	r1, #50	; 0x32
 8004ed6:	200a      	movs	r0, #10
 8004ed8:	f001 fa46 	bl	8006368 <OLED_ShowString>
				OLED_Refresh_Gram();
 8004edc:	f001 f8d0 	bl	8006080 <OLED_Refresh_Gram>
				 break;
 8004ee0:	e00c      	b.n	8004efc <move+0x510>
//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
//			OLED_ShowString(10, 30, messageA);
//			sprintf(messageB, "SRight: %2d\0", diffRight);
//			OLED_ShowString(10, 40, messageB);

			prevTime = currTime;
 8004ee2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ee6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			leftTick_prev = leftTick;
 8004eea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004eee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			rightTick_prev = rightTick;
 8004ef2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ef6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004efa:	e625      	b.n	8004b48 <move+0x15c>
		 }
	}
	moving = 0;
 8004efc:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <move+0x55c>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	701a      	strb	r2, [r3, #0]
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004f02:	2201      	movs	r2, #1
 8004f04:	2108      	movs	r1, #8
 8004f06:	4816      	ldr	r0, [pc, #88]	; (8004f60 <move+0x574>)
 8004f08:	f002 fb54 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2104      	movs	r1, #4
 8004f10:	4813      	ldr	r0, [pc, #76]	; (8004f60 <move+0x574>)
 8004f12:	f002 fb4f 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004f16:	2201      	movs	r2, #1
 8004f18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f1c:	4811      	ldr	r0, [pc, #68]	; (8004f64 <move+0x578>)
 8004f1e:	f002 fb49 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004f22:	2200      	movs	r2, #0
 8004f24:	2120      	movs	r1, #32
 8004f26:	4810      	ldr	r0, [pc, #64]	; (8004f68 <move+0x57c>)
 8004f28:	f002 fb44 	bl	80075b4 <HAL_GPIO_WritePin>
	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <move+0x580>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2295      	movs	r2, #149	; 0x95
 8004f32:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8004f34:	200a      	movs	r0, #10
 8004f36:	f008 f9a6 	bl	800d286 <osDelay>
	return;
 8004f3a:	bf00      	nop
}
 8004f3c:	37c0      	adds	r7, #192	; 0xc0
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000378 	.word	0x20000378
 8004f48:	20000414 	.word	0x20000414
 8004f4c:	08014674 	.word	0x08014674
 8004f50:	080146a0 	.word	0x080146a0
 8004f54:	08014680 	.word	0x08014680
 8004f58:	080146ac 	.word	0x080146ac
 8004f5c:	08014690 	.word	0x08014690
 8004f60:	40020000 	.word	0x40020000
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40020800 	.word	0x40020800
 8004f6c:	20000258 	.word	0x20000258

08004f70 <bLeft90>:

void bLeft90()
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
	//  xydir = (xydir + 1) % 2;
	//  y += axis[dir][1] * left_90[xydir];

	  // outdoor
		uint8_t messageA[20];
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8004f76:	2100      	movs	r1, #0
 8004f78:	4839      	ldr	r0, [pc, #228]	; (8005060 <bLeft90+0xf0>)
 8004f7a:	f005 fbd1 	bl	800a720 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004f7e:	2108      	movs	r1, #8
 8004f80:	4837      	ldr	r0, [pc, #220]	; (8005060 <bLeft90+0xf0>)
 8004f82:	f005 fbcd 	bl	800a720 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004f86:	210c      	movs	r1, #12
 8004f88:	4836      	ldr	r0, [pc, #216]	; (8005064 <bLeft90+0xf4>)
 8004f8a:	f005 fbc9 	bl	800a720 <HAL_TIM_PWM_Start>

		htim1.Instance -> CCR4 = STRAIGHT; //centre
 8004f8e:	4b35      	ldr	r3, [pc, #212]	; (8005064 <bLeft90+0xf4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2295      	movs	r2, #149	; 0x95
 8004f94:	641a      	str	r2, [r3, #64]	; 0x40
		move(8.5,1);
 8004f96:	2001      	movs	r0, #1
 8004f98:	eeb2 0a01 	vmov.f32	s0, #33	; 0x41080000  8.5
 8004f9c:	f7ff fd26 	bl	80049ec <move>

	  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2108      	movs	r1, #8
 8004fa4:	4830      	ldr	r0, [pc, #192]	; (8005068 <bLeft90+0xf8>)
 8004fa6:	f002 fb05 	bl	80075b4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8004faa:	2201      	movs	r2, #1
 8004fac:	2104      	movs	r1, #4
 8004fae:	482e      	ldr	r0, [pc, #184]	; (8005068 <bLeft90+0xf8>)
 8004fb0:	f002 fb00 	bl	80075b4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004fba:	482c      	ldr	r0, [pc, #176]	; (800506c <bLeft90+0xfc>)
 8004fbc:	f002 fafa 	bl	80075b4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	2120      	movs	r1, #32
 8004fc4:	482a      	ldr	r0, [pc, #168]	; (8005070 <bLeft90+0x100>)
 8004fc6:	f002 faf5 	bl	80075b4 <HAL_GPIO_WritePin>
	  moving = 1;
 8004fca:	4b2a      	ldr	r3, [pc, #168]	; (8005074 <bLeft90+0x104>)
 8004fcc:	2201      	movs	r2, #1
 8004fce:	701a      	strb	r2, [r3, #0]
	  htim1.Instance -> CCR4 = LEFT;
 8004fd0:	4b24      	ldr	r3, [pc, #144]	; (8005064 <bLeft90+0xf4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2269      	movs	r2, #105	; 0x69
 8004fd6:	641a      	str	r2, [r3, #64]	; 0x40
	   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 600);
 8004fd8:	4b21      	ldr	r3, [pc, #132]	; (8005060 <bLeft90+0xf0>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004fe0:	635a      	str	r2, [r3, #52]	; 0x34
	   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3700);
 8004fe2:	4b1f      	ldr	r3, [pc, #124]	; (8005060 <bLeft90+0xf0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f640 6274 	movw	r2, #3700	; 0xe74
 8004fea:	63da      	str	r2, [r3, #60]	; 0x3c
	  while (moving)
 8004fec:	e017      	b.n	800501e <bLeft90+0xae>
	  {

	     if (totalAngle <= -81.0)
 8004fee:	4b22      	ldr	r3, [pc, #136]	; (8005078 <bLeft90+0x108>)
 8004ff0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ff4:	a318      	add	r3, pc, #96	; (adr r3, 8005058 <bLeft90+0xe8>)
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	f7fb fd79 	bl	8000af0 <__aeabi_dcmple>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d111      	bne.n	8005028 <bLeft90+0xb8>
	     {
	       break;
	     }
	     sprintf(messageA, "Langle %5d\0", (int)(totalAngle));
 8005004:	4b1c      	ldr	r3, [pc, #112]	; (8005078 <bLeft90+0x108>)
 8005006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500a:	4610      	mov	r0, r2
 800500c:	4619      	mov	r1, r3
 800500e:	f7fb fda3 	bl	8000b58 <__aeabi_d2iz>
 8005012:	4602      	mov	r2, r0
 8005014:	1d3b      	adds	r3, r7, #4
 8005016:	4919      	ldr	r1, [pc, #100]	; (800507c <bLeft90+0x10c>)
 8005018:	4618      	mov	r0, r3
 800501a:	f00b fd17 	bl	8010a4c <siprintf>
	  while (moving)
 800501e:	4b15      	ldr	r3, [pc, #84]	; (8005074 <bLeft90+0x104>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e3      	bne.n	8004fee <bLeft90+0x7e>
 8005026:	e000      	b.n	800502a <bLeft90+0xba>
	       break;
 8005028:	bf00      	nop
	//     OLED_ShowString(10,30, messageA);
	//     OLED_Refresh_Gram();
	  }
	//  stop();
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800502a:	4b0d      	ldr	r3, [pc, #52]	; (8005060 <bLeft90+0xf0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2200      	movs	r2, #0
 8005030:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005032:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <bLeft90+0xf0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2200      	movs	r2, #0
 8005038:	63da      	str	r2, [r3, #60]	; 0x3c
	  moving = 0;
 800503a:	4b0e      	ldr	r3, [pc, #56]	; (8005074 <bLeft90+0x104>)
 800503c:	2200      	movs	r2, #0
 800503e:	701a      	strb	r2, [r3, #0]
	  move(10.75, 0);
 8005040:	2000      	movs	r0, #0
 8005042:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8005080 <bLeft90+0x110>
 8005046:	f7ff fcd1 	bl	80049ec <move>
//	//  dir = (dir + 3) % 4 ;
//	//  x += axis[dir][0] * left_90[xydir];
//	//  xydir = (xydir + 1) % 2;
//	//  y += axis[dir][1] * left_90[xydir];

}
 800504a:	bf00      	nop
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	f3af 8000 	nop.w
 8005058:	00000000 	.word	0x00000000
 800505c:	c0544000 	.word	0xc0544000
 8005060:	20000378 	.word	0x20000378
 8005064:	20000258 	.word	0x20000258
 8005068:	40020000 	.word	0x40020000
 800506c:	40021000 	.word	0x40021000
 8005070:	40020800 	.word	0x40020800
 8005074:	20000414 	.word	0x20000414
 8005078:	20000418 	.word	0x20000418
 800507c:	080146bc 	.word	0x080146bc
 8005080:	412c0000 	.word	0x412c0000

08005084 <bRight90>:

void bRight90()
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
//	  moving = 0;
//	  move(6, 0);

	// outdoor
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800508a:	2100      	movs	r1, #0
 800508c:	4836      	ldr	r0, [pc, #216]	; (8005168 <bRight90+0xe4>)
 800508e:	f005 fb47 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8005092:	2108      	movs	r1, #8
 8005094:	4834      	ldr	r0, [pc, #208]	; (8005168 <bRight90+0xe4>)
 8005096:	f005 fb43 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800509a:	210c      	movs	r1, #12
 800509c:	4833      	ldr	r0, [pc, #204]	; (800516c <bRight90+0xe8>)
 800509e:	f005 fb3f 	bl	800a720 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 80050a2:	4b32      	ldr	r3, [pc, #200]	; (800516c <bRight90+0xe8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2295      	movs	r2, #149	; 0x95
 80050a8:	641a      	str	r2, [r3, #64]	; 0x40

	move(11, 1);
 80050aa:	2001      	movs	r0, #1
 80050ac:	eeb2 0a06 	vmov.f32	s0, #38	; 0x41300000  11.0
 80050b0:	f7ff fc9c 	bl	80049ec <move>

  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80050b4:	2200      	movs	r2, #0
 80050b6:	2108      	movs	r1, #8
 80050b8:	482d      	ldr	r0, [pc, #180]	; (8005170 <bRight90+0xec>)
 80050ba:	f002 fa7b 	bl	80075b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80050be:	2201      	movs	r2, #1
 80050c0:	2104      	movs	r1, #4
 80050c2:	482b      	ldr	r0, [pc, #172]	; (8005170 <bRight90+0xec>)
 80050c4:	f002 fa76 	bl	80075b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 80050c8:	2200      	movs	r2, #0
 80050ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050ce:	4829      	ldr	r0, [pc, #164]	; (8005174 <bRight90+0xf0>)
 80050d0:	f002 fa70 	bl	80075b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 80050d4:	2201      	movs	r2, #1
 80050d6:	2120      	movs	r1, #32
 80050d8:	4827      	ldr	r0, [pc, #156]	; (8005178 <bRight90+0xf4>)
 80050da:	f002 fa6b 	bl	80075b4 <HAL_GPIO_WritePin>
  moving = 1;
 80050de:	4b27      	ldr	r3, [pc, #156]	; (800517c <bRight90+0xf8>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	701a      	strb	r2, [r3, #0]
  htim1.Instance -> CCR4 = 250;
 80050e4:	4b21      	ldr	r3, [pc, #132]	; (800516c <bRight90+0xe8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	22fa      	movs	r2, #250	; 0xfa
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40
   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3400);
 80050ec:	4b1e      	ldr	r3, [pc, #120]	; (8005168 <bRight90+0xe4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f640 5248 	movw	r2, #3400	; 0xd48
 80050f4:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 500);
 80050f6:	4b1c      	ldr	r3, [pc, #112]	; (8005168 <bRight90+0xe4>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80050fe:	63da      	str	r2, [r3, #60]	; 0x3c
  while (moving)
 8005100:	e017      	b.n	8005132 <bRight90+0xae>
  {

     if (totalAngle > 77)
 8005102:	4b1f      	ldr	r3, [pc, #124]	; (8005180 <bRight90+0xfc>)
 8005104:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <bRight90+0x100>)
 800510e:	f7fb fd03 	bl	8000b18 <__aeabi_dcmpgt>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d111      	bne.n	800513c <bRight90+0xb8>
     {
       break;
     }
     sprintf(messageA, "Langle %5d\0", (int)(totalAngle));
 8005118:	4b19      	ldr	r3, [pc, #100]	; (8005180 <bRight90+0xfc>)
 800511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511e:	4610      	mov	r0, r2
 8005120:	4619      	mov	r1, r3
 8005122:	f7fb fd19 	bl	8000b58 <__aeabi_d2iz>
 8005126:	4602      	mov	r2, r0
 8005128:	1d3b      	adds	r3, r7, #4
 800512a:	4917      	ldr	r1, [pc, #92]	; (8005188 <bRight90+0x104>)
 800512c:	4618      	mov	r0, r3
 800512e:	f00b fc8d 	bl	8010a4c <siprintf>
  while (moving)
 8005132:	4b12      	ldr	r3, [pc, #72]	; (800517c <bRight90+0xf8>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e3      	bne.n	8005102 <bRight90+0x7e>
 800513a:	e000      	b.n	800513e <bRight90+0xba>
       break;
 800513c:	bf00      	nop
	//     OLED_ShowString(10,30, messageA);
	//     OLED_Refresh_Gram();
  }
	//  stop();
  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800513e:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <bRight90+0xe4>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2200      	movs	r2, #0
 8005144:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005146:	4b08      	ldr	r3, [pc, #32]	; (8005168 <bRight90+0xe4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2200      	movs	r2, #0
 800514c:	63da      	str	r2, [r3, #60]	; 0x3c
  moving = 0;
 800514e:	4b0b      	ldr	r3, [pc, #44]	; (800517c <bRight90+0xf8>)
 8005150:	2200      	movs	r2, #0
 8005152:	701a      	strb	r2, [r3, #0]
  move(8, 0);
 8005154:	2000      	movs	r0, #0
 8005156:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800515a:	f7ff fc47 	bl	80049ec <move>
}
 800515e:	bf00      	nop
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000378 	.word	0x20000378
 800516c:	20000258 	.word	0x20000258
 8005170:	40020000 	.word	0x40020000
 8005174:	40021000 	.word	0x40021000
 8005178:	40020800 	.word	0x40020800
 800517c:	20000414 	.word	0x20000414
 8005180:	20000418 	.word	0x20000418
 8005184:	40534000 	.word	0x40534000
 8005188:	080146bc 	.word	0x080146bc

0800518c <left90>:

void left90()
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
////  x += axis[dir][0] * left_90[xydir];
////  xydir = (xydir + 1) % 2;
////  y += axis[dir][1] * left_90[xydir];

	// outdoor
	totalAngle = 0;
 8005192:	493e      	ldr	r1, [pc, #248]	; (800528c <left90+0x100>)
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80051a0:	2100      	movs	r1, #0
 80051a2:	483b      	ldr	r0, [pc, #236]	; (8005290 <left90+0x104>)
 80051a4:	f005 fabc 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80051a8:	2108      	movs	r1, #8
 80051aa:	4839      	ldr	r0, [pc, #228]	; (8005290 <left90+0x104>)
 80051ac:	f005 fab8 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80051b0:	210c      	movs	r1, #12
 80051b2:	4838      	ldr	r0, [pc, #224]	; (8005294 <left90+0x108>)
 80051b4:	f005 fab4 	bl	800a720 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 80051b8:	4b36      	ldr	r3, [pc, #216]	; (8005294 <left90+0x108>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2295      	movs	r2, #149	; 0x95
 80051be:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80051c0:	2201      	movs	r2, #1
 80051c2:	2108      	movs	r1, #8
 80051c4:	4834      	ldr	r0, [pc, #208]	; (8005298 <left90+0x10c>)
 80051c6:	f002 f9f5 	bl	80075b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80051ca:	2200      	movs	r2, #0
 80051cc:	2104      	movs	r1, #4
 80051ce:	4832      	ldr	r0, [pc, #200]	; (8005298 <left90+0x10c>)
 80051d0:	f002 f9f0 	bl	80075b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80051d4:	2201      	movs	r2, #1
 80051d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051da:	4830      	ldr	r0, [pc, #192]	; (800529c <left90+0x110>)
 80051dc:	f002 f9ea 	bl	80075b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80051e0:	2200      	movs	r2, #0
 80051e2:	2120      	movs	r1, #32
 80051e4:	482e      	ldr	r0, [pc, #184]	; (80052a0 <left90+0x114>)
 80051e6:	f002 f9e5 	bl	80075b4 <HAL_GPIO_WritePin>
  moving = 1;
 80051ea:	4b2e      	ldr	r3, [pc, #184]	; (80052a4 <left90+0x118>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	701a      	strb	r2, [r3, #0]
  htim1.Instance -> CCR4 = 107;
 80051f0:	4b28      	ldr	r3, [pc, #160]	; (8005294 <left90+0x108>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	226b      	movs	r2, #107	; 0x6b
 80051f6:	641a      	str	r2, [r3, #64]	; 0x40
   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 350);
 80051f8:	4b25      	ldr	r3, [pc, #148]	; (8005290 <left90+0x104>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005200:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3800);
 8005202:	4b23      	ldr	r3, [pc, #140]	; (8005290 <left90+0x104>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f640 62d8 	movw	r2, #3800	; 0xed8
 800520a:	63da      	str	r2, [r3, #60]	; 0x3c
  while (moving)
 800520c:	e01f      	b.n	800524e <left90+0xc2>
  {

     if (totalAngle >= 74)
 800520e:	4b1f      	ldr	r3, [pc, #124]	; (800528c <left90+0x100>)
 8005210:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	4b23      	ldr	r3, [pc, #140]	; (80052a8 <left90+0x11c>)
 800521a:	f7fb fc73 	bl	8000b04 <__aeabi_dcmpge>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d119      	bne.n	8005258 <left90+0xcc>
     {
       break;
     }
     sprintf(messageA, "Langle %5d\0", (int)(totalAngle));
 8005224:	4b19      	ldr	r3, [pc, #100]	; (800528c <left90+0x100>)
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	4610      	mov	r0, r2
 800522c:	4619      	mov	r1, r3
 800522e:	f7fb fc93 	bl	8000b58 <__aeabi_d2iz>
 8005232:	4602      	mov	r2, r0
 8005234:	1d3b      	adds	r3, r7, #4
 8005236:	491d      	ldr	r1, [pc, #116]	; (80052ac <left90+0x120>)
 8005238:	4618      	mov	r0, r3
 800523a:	f00b fc07 	bl	8010a4c <siprintf>
     OLED_ShowString(10,30, messageA);
 800523e:	1d3b      	adds	r3, r7, #4
 8005240:	461a      	mov	r2, r3
 8005242:	211e      	movs	r1, #30
 8005244:	200a      	movs	r0, #10
 8005246:	f001 f88f 	bl	8006368 <OLED_ShowString>
     OLED_Refresh_Gram();
 800524a:	f000 ff19 	bl	8006080 <OLED_Refresh_Gram>
  while (moving)
 800524e:	4b15      	ldr	r3, [pc, #84]	; (80052a4 <left90+0x118>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1db      	bne.n	800520e <left90+0x82>
 8005256:	e000      	b.n	800525a <left90+0xce>
       break;
 8005258:	bf00      	nop
  }
//  stop();
  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800525a:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <left90+0x104>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2200      	movs	r2, #0
 8005260:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005262:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <left90+0x104>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2200      	movs	r2, #0
 8005268:	63da      	str	r2, [r3, #60]	; 0x3c
  moving = 0;
 800526a:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <left90+0x118>)
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
  move(0,0);
 8005270:	2000      	movs	r0, #0
 8005272:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80052b0 <left90+0x124>
 8005276:	f7ff fbb9 	bl	80049ec <move>
  moveGyroPIDOld(12, 0);
 800527a:	2000      	movs	r0, #0
 800527c:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8005280:	f7ff f8da 	bl	8004438 <moveGyroPIDOld>
//  dir = (dir + 3) % 4 ;
//  x += axis[dir][0] * left_90[xydir];
//  xydir = (xydir + 1) % 2;
//  y += axis[dir][1] * left_90[xydir];
}
 8005284:	bf00      	nop
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20000418 	.word	0x20000418
 8005290:	20000378 	.word	0x20000378
 8005294:	20000258 	.word	0x20000258
 8005298:	40020000 	.word	0x40020000
 800529c:	40021000 	.word	0x40021000
 80052a0:	40020800 	.word	0x40020800
 80052a4:	20000414 	.word	0x20000414
 80052a8:	40528000 	.word	0x40528000
 80052ac:	080146bc 	.word	0x080146bc
	...

080052b8 <right90>:

void right90()
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
//	//  y += axis[dir][1] * right_90[xydir];
//	//  dir = (dir + 1) % 4 ;

	// outdoor
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80052be:	2100      	movs	r1, #0
 80052c0:	4837      	ldr	r0, [pc, #220]	; (80053a0 <right90+0xe8>)
 80052c2:	f005 fa2d 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80052c6:	2108      	movs	r1, #8
 80052c8:	4835      	ldr	r0, [pc, #212]	; (80053a0 <right90+0xe8>)
 80052ca:	f005 fa29 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80052ce:	210c      	movs	r1, #12
 80052d0:	4834      	ldr	r0, [pc, #208]	; (80053a4 <right90+0xec>)
 80052d2:	f005 fa25 	bl	800a720 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 80052d6:	4b33      	ldr	r3, [pc, #204]	; (80053a4 <right90+0xec>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2295      	movs	r2, #149	; 0x95
 80052dc:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80052de:	2201      	movs	r2, #1
 80052e0:	2108      	movs	r1, #8
 80052e2:	4831      	ldr	r0, [pc, #196]	; (80053a8 <right90+0xf0>)
 80052e4:	f002 f966 	bl	80075b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80052e8:	2200      	movs	r2, #0
 80052ea:	2104      	movs	r1, #4
 80052ec:	482e      	ldr	r0, [pc, #184]	; (80053a8 <right90+0xf0>)
 80052ee:	f002 f961 	bl	80075b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80052f2:	2201      	movs	r2, #1
 80052f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052f8:	482c      	ldr	r0, [pc, #176]	; (80053ac <right90+0xf4>)
 80052fa:	f002 f95b 	bl	80075b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80052fe:	2200      	movs	r2, #0
 8005300:	2120      	movs	r1, #32
 8005302:	482b      	ldr	r0, [pc, #172]	; (80053b0 <right90+0xf8>)
 8005304:	f002 f956 	bl	80075b4 <HAL_GPIO_WritePin>
  moving = 1;
 8005308:	4b2a      	ldr	r3, [pc, #168]	; (80053b4 <right90+0xfc>)
 800530a:	2201      	movs	r2, #1
 800530c:	701a      	strb	r2, [r3, #0]
  htim1.Instance -> CCR4 = 250;
 800530e:	4b25      	ldr	r3, [pc, #148]	; (80053a4 <right90+0xec>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	22fa      	movs	r2, #250	; 0xfa
 8005314:	641a      	str	r2, [r3, #64]	; 0x40
   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3200);
 8005316:	4b22      	ldr	r3, [pc, #136]	; (80053a0 <right90+0xe8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800531e:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8005320:	4b1f      	ldr	r3, [pc, #124]	; (80053a0 <right90+0xe8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005328:	63da      	str	r2, [r3, #60]	; 0x3c
  while (moving)
 800532a:	e017      	b.n	800535c <right90+0xa4>
  {

     if (totalAngle < -85)
 800532c:	4b22      	ldr	r3, [pc, #136]	; (80053b8 <right90+0x100>)
 800532e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005332:	a319      	add	r3, pc, #100	; (adr r3, 8005398 <right90+0xe0>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	f7fb fbd0 	bl	8000adc <__aeabi_dcmplt>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d111      	bne.n	8005366 <right90+0xae>
     {
       break;
     }
     sprintf(messageA, "Rangle %5d\0", (int)(totalAngle));
 8005342:	4b1d      	ldr	r3, [pc, #116]	; (80053b8 <right90+0x100>)
 8005344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005348:	4610      	mov	r0, r2
 800534a:	4619      	mov	r1, r3
 800534c:	f7fb fc04 	bl	8000b58 <__aeabi_d2iz>
 8005350:	4602      	mov	r2, r0
 8005352:	1d3b      	adds	r3, r7, #4
 8005354:	4919      	ldr	r1, [pc, #100]	; (80053bc <right90+0x104>)
 8005356:	4618      	mov	r0, r3
 8005358:	f00b fb78 	bl	8010a4c <siprintf>
  while (moving)
 800535c:	4b15      	ldr	r3, [pc, #84]	; (80053b4 <right90+0xfc>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e3      	bne.n	800532c <right90+0x74>
 8005364:	e000      	b.n	8005368 <right90+0xb0>
       break;
 8005366:	bf00      	nop
//     OLED_ShowString(10,40, messageA);
//     OLED_Refresh_Gram();
  }
//  stop();
  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005368:	4b0d      	ldr	r3, [pc, #52]	; (80053a0 <right90+0xe8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2200      	movs	r2, #0
 800536e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <right90+0xe8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2200      	movs	r2, #0
 8005376:	63da      	str	r2, [r3, #60]	; 0x3c
  osDelay(200);
 8005378:	20c8      	movs	r0, #200	; 0xc8
 800537a:	f007 ff84 	bl	800d286 <osDelay>
  move(15,0);
 800537e:	2000      	movs	r0, #0
 8005380:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8005384:	f7ff fb32 	bl	80049ec <move>
  moving = 0;
 8005388:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <right90+0xfc>)
 800538a:	2200      	movs	r2, #0
 800538c:	701a      	strb	r2, [r3, #0]
//  x += axis[dir][0] * right_90[xydir];
//  xydir = (xydir + 1) % 2;
//  y += axis[dir][1] * right_90[xydir];
//  dir = (dir + 1) % 4 ;
}
 800538e:	bf00      	nop
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	00000000 	.word	0x00000000
 800539c:	c0554000 	.word	0xc0554000
 80053a0:	20000378 	.word	0x20000378
 80053a4:	20000258 	.word	0x20000258
 80053a8:	40020000 	.word	0x40020000
 80053ac:	40021000 	.word	0x40021000
 80053b0:	40020800 	.word	0x40020800
 80053b4:	20000414 	.word	0x20000414
 80053b8:	20000418 	.word	0x20000418
 80053bc:	080146c8 	.word	0x080146c8

080053c0 <spotTurn>:

	osDelay(1000);
	return;
}

void spotTurn(uint8_t direction){
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08c      	sub	sp, #48	; 0x30
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	71fb      	strb	r3, [r7, #7]
	uint16_t offset_show[20];

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80053ca:	2100      	movs	r1, #0
 80053cc:	48b2      	ldr	r0, [pc, #712]	; (8005698 <spotTurn+0x2d8>)
 80053ce:	f005 f9a7 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80053d2:	2108      	movs	r1, #8
 80053d4:	48b0      	ldr	r0, [pc, #704]	; (8005698 <spotTurn+0x2d8>)
 80053d6:	f005 f9a3 	bl	800a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80053da:	210c      	movs	r1, #12
 80053dc:	48af      	ldr	r0, [pc, #700]	; (800569c <spotTurn+0x2dc>)
 80053de:	f005 f99f 	bl	800a720 <HAL_TIM_PWM_Start>
	htim1.Instance -> CCR4 = STRAIGHT;
 80053e2:	4bae      	ldr	r3, [pc, #696]	; (800569c <spotTurn+0x2dc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2295      	movs	r2, #149	; 0x95
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40

	//move forward
	if (direction) // spot turn left
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 816b 	beq.w	80056c8 <spotTurn+0x308>
	{
//		targetAngle += 90;
//		if(targetAngle > 360) targetAngle -= 360;
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80053f2:	2201      	movs	r2, #1
 80053f4:	2108      	movs	r1, #8
 80053f6:	48aa      	ldr	r0, [pc, #680]	; (80056a0 <spotTurn+0x2e0>)
 80053f8:	f002 f8dc 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80053fc:	2200      	movs	r2, #0
 80053fe:	2104      	movs	r1, #4
 8005400:	48a7      	ldr	r0, [pc, #668]	; (80056a0 <spotTurn+0x2e0>)
 8005402:	f002 f8d7 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005406:	2201      	movs	r2, #1
 8005408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800540c:	48a5      	ldr	r0, [pc, #660]	; (80056a4 <spotTurn+0x2e4>)
 800540e:	f002 f8d1 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005412:	2200      	movs	r2, #0
 8005414:	2120      	movs	r1, #32
 8005416:	48a4      	ldr	r0, [pc, #656]	; (80056a8 <spotTurn+0x2e8>)
 8005418:	f002 f8cc 	bl	80075b4 <HAL_GPIO_WritePin>
		 htim1.Instance -> CCR4 = LEFT;
 800541c:	4b9f      	ldr	r3, [pc, #636]	; (800569c <spotTurn+0x2dc>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2269      	movs	r2, #105	; 0x69
 8005422:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 800);
 8005424:	4b9c      	ldr	r3, [pc, #624]	; (8005698 <spotTurn+0x2d8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f44f 7248 	mov.w	r2, #800	; 0x320
 800542c:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1500);
 800542e:	4b9a      	ldr	r3, [pc, #616]	; (8005698 <spotTurn+0x2d8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005436:	63da      	str	r2, [r3, #60]	; 0x3c
		 moving = 1;
 8005438:	4b9c      	ldr	r3, [pc, #624]	; (80056ac <spotTurn+0x2ec>)
 800543a:	2201      	movs	r2, #1
 800543c:	701a      	strb	r2, [r3, #0]
		 while (moving)
 800543e:	e021      	b.n	8005484 <spotTurn+0xc4>
		 {
			 if (totalAngle >= 18)
 8005440:	4b9b      	ldr	r3, [pc, #620]	; (80056b0 <spotTurn+0x2f0>)
 8005442:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	4b9a      	ldr	r3, [pc, #616]	; (80056b4 <spotTurn+0x2f4>)
 800544c:	f7fb fb5a 	bl	8000b04 <__aeabi_dcmpge>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d11b      	bne.n	800548e <spotTurn+0xce>
			 }
//				 else
//				 {
//					 break;
//				 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8005456:	4b96      	ldr	r3, [pc, #600]	; (80056b0 <spotTurn+0x2f0>)
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	4610      	mov	r0, r2
 800545e:	4619      	mov	r1, r3
 8005460:	f7fb fb7a 	bl	8000b58 <__aeabi_d2iz>
 8005464:	4602      	mov	r2, r0
 8005466:	f107 0308 	add.w	r3, r7, #8
 800546a:	4993      	ldr	r1, [pc, #588]	; (80056b8 <spotTurn+0x2f8>)
 800546c:	4618      	mov	r0, r3
 800546e:	f00b faed 	bl	8010a4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 8005472:	f107 0308 	add.w	r3, r7, #8
 8005476:	461a      	mov	r2, r3
 8005478:	2114      	movs	r1, #20
 800547a:	200a      	movs	r0, #10
 800547c:	f000 ff74 	bl	8006368 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8005480:	f000 fdfe 	bl	8006080 <OLED_Refresh_Gram>
		 while (moving)
 8005484:	4b89      	ldr	r3, [pc, #548]	; (80056ac <spotTurn+0x2ec>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1d9      	bne.n	8005440 <spotTurn+0x80>
 800548c:	e000      	b.n	8005490 <spotTurn+0xd0>
				 break;
 800548e:	bf00      	nop
		 }
		 HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8005490:	2200      	movs	r2, #0
 8005492:	2108      	movs	r1, #8
 8005494:	4882      	ldr	r0, [pc, #520]	; (80056a0 <spotTurn+0x2e0>)
 8005496:	f002 f88d 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800549a:	2201      	movs	r2, #1
 800549c:	2104      	movs	r1, #4
 800549e:	4880      	ldr	r0, [pc, #512]	; (80056a0 <spotTurn+0x2e0>)
 80054a0:	f002 f888 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 80054a4:	2200      	movs	r2, #0
 80054a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054aa:	487e      	ldr	r0, [pc, #504]	; (80056a4 <spotTurn+0x2e4>)
 80054ac:	f002 f882 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 80054b0:	2201      	movs	r2, #1
 80054b2:	2120      	movs	r1, #32
 80054b4:	487c      	ldr	r0, [pc, #496]	; (80056a8 <spotTurn+0x2e8>)
 80054b6:	f002 f87d 	bl	80075b4 <HAL_GPIO_WritePin>
		 //robot forward left to reduce turning radius
		 htim1.Instance -> CCR4 = RIGHT;
 80054ba:	4b78      	ldr	r3, [pc, #480]	; (800569c <spotTurn+0x2dc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	22fa      	movs	r2, #250	; 0xfa
 80054c0:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1500);
 80054c2:	4b75      	ldr	r3, [pc, #468]	; (8005698 <spotTurn+0x2d8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80054ca:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 500);
 80054cc:	4b72      	ldr	r3, [pc, #456]	; (8005698 <spotTurn+0x2d8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80054d4:	63da      	str	r2, [r3, #60]	; 0x3c
		 while (moving)
 80054d6:	e021      	b.n	800551c <spotTurn+0x15c>
		 {
			 if (totalAngle >= 38)
 80054d8:	4b75      	ldr	r3, [pc, #468]	; (80056b0 <spotTurn+0x2f0>)
 80054da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	4b76      	ldr	r3, [pc, #472]	; (80056bc <spotTurn+0x2fc>)
 80054e4:	f7fb fb0e 	bl	8000b04 <__aeabi_dcmpge>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d11b      	bne.n	8005526 <spotTurn+0x166>
			 {
				 break;
			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 80054ee:	4b70      	ldr	r3, [pc, #448]	; (80056b0 <spotTurn+0x2f0>)
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	4610      	mov	r0, r2
 80054f6:	4619      	mov	r1, r3
 80054f8:	f7fb fb2e 	bl	8000b58 <__aeabi_d2iz>
 80054fc:	4602      	mov	r2, r0
 80054fe:	f107 0308 	add.w	r3, r7, #8
 8005502:	496d      	ldr	r1, [pc, #436]	; (80056b8 <spotTurn+0x2f8>)
 8005504:	4618      	mov	r0, r3
 8005506:	f00b faa1 	bl	8010a4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 800550a:	f107 0308 	add.w	r3, r7, #8
 800550e:	461a      	mov	r2, r3
 8005510:	2114      	movs	r1, #20
 8005512:	200a      	movs	r0, #10
 8005514:	f000 ff28 	bl	8006368 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8005518:	f000 fdb2 	bl	8006080 <OLED_Refresh_Gram>
		 while (moving)
 800551c:	4b63      	ldr	r3, [pc, #396]	; (80056ac <spotTurn+0x2ec>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1d9      	bne.n	80054d8 <spotTurn+0x118>
 8005524:	e000      	b.n	8005528 <spotTurn+0x168>
				 break;
 8005526:	bf00      	nop
		 }
		 htim1.Instance -> CCR4 = STRAIGHT;
 8005528:	4b5c      	ldr	r3, [pc, #368]	; (800569c <spotTurn+0x2dc>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2295      	movs	r2, #149	; 0x95
 800552e:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005530:	4b59      	ldr	r3, [pc, #356]	; (8005698 <spotTurn+0x2d8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2200      	movs	r2, #0
 8005536:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005538:	4b57      	ldr	r3, [pc, #348]	; (8005698 <spotTurn+0x2d8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2200      	movs	r2, #0
 800553e:	63da      	str	r2, [r3, #60]	; 0x3c
		 osDelay(100);
 8005540:	2064      	movs	r0, #100	; 0x64
 8005542:	f007 fea0 	bl	800d286 <osDelay>
		 move(5,1);
 8005546:	2001      	movs	r0, #1
 8005548:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800554c:	f7ff fa4e 	bl	80049ec <move>
		 osDelay(100);
 8005550:	2064      	movs	r0, #100	; 0x64
 8005552:	f007 fe98 	bl	800d286 <osDelay>
		 moving=1;
 8005556:	4b55      	ldr	r3, [pc, #340]	; (80056ac <spotTurn+0x2ec>)
 8005558:	2201      	movs	r2, #1
 800555a:	701a      	strb	r2, [r3, #0]
		 //continue forward left
		 HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800555c:	2201      	movs	r2, #1
 800555e:	2108      	movs	r1, #8
 8005560:	484f      	ldr	r0, [pc, #316]	; (80056a0 <spotTurn+0x2e0>)
 8005562:	f002 f827 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005566:	2200      	movs	r2, #0
 8005568:	2104      	movs	r1, #4
 800556a:	484d      	ldr	r0, [pc, #308]	; (80056a0 <spotTurn+0x2e0>)
 800556c:	f002 f822 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005570:	2201      	movs	r2, #1
 8005572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005576:	484b      	ldr	r0, [pc, #300]	; (80056a4 <spotTurn+0x2e4>)
 8005578:	f002 f81c 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800557c:	2200      	movs	r2, #0
 800557e:	2120      	movs	r1, #32
 8005580:	4849      	ldr	r0, [pc, #292]	; (80056a8 <spotTurn+0x2e8>)
 8005582:	f002 f817 	bl	80075b4 <HAL_GPIO_WritePin>
		 htim1.Instance -> CCR4 = LEFT;
 8005586:	4b45      	ldr	r3, [pc, #276]	; (800569c <spotTurn+0x2dc>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2269      	movs	r2, #105	; 0x69
 800558c:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 800);
 800558e:	4b42      	ldr	r3, [pc, #264]	; (8005698 <spotTurn+0x2d8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005596:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1500);
 8005598:	4b3f      	ldr	r3, [pc, #252]	; (8005698 <spotTurn+0x2d8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80055a0:	63da      	str	r2, [r3, #60]	; 0x3c
		 while (moving)
 80055a2:	e021      	b.n	80055e8 <spotTurn+0x228>
		 {
			 if (totalAngle >= 23)
 80055a4:	4b42      	ldr	r3, [pc, #264]	; (80056b0 <spotTurn+0x2f0>)
 80055a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	4b44      	ldr	r3, [pc, #272]	; (80056c0 <spotTurn+0x300>)
 80055b0:	f7fb faa8 	bl	8000b04 <__aeabi_dcmpge>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d11b      	bne.n	80055f2 <spotTurn+0x232>
			 {
				 break;
			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 80055ba:	4b3d      	ldr	r3, [pc, #244]	; (80056b0 <spotTurn+0x2f0>)
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	4610      	mov	r0, r2
 80055c2:	4619      	mov	r1, r3
 80055c4:	f7fb fac8 	bl	8000b58 <__aeabi_d2iz>
 80055c8:	4602      	mov	r2, r0
 80055ca:	f107 0308 	add.w	r3, r7, #8
 80055ce:	493a      	ldr	r1, [pc, #232]	; (80056b8 <spotTurn+0x2f8>)
 80055d0:	4618      	mov	r0, r3
 80055d2:	f00b fa3b 	bl	8010a4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 80055d6:	f107 0308 	add.w	r3, r7, #8
 80055da:	461a      	mov	r2, r3
 80055dc:	2114      	movs	r1, #20
 80055de:	200a      	movs	r0, #10
 80055e0:	f000 fec2 	bl	8006368 <OLED_ShowString>
			 OLED_Refresh_Gram();
 80055e4:	f000 fd4c 	bl	8006080 <OLED_Refresh_Gram>
		 while (moving)
 80055e8:	4b30      	ldr	r3, [pc, #192]	; (80056ac <spotTurn+0x2ec>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1d9      	bne.n	80055a4 <spotTurn+0x1e4>
 80055f0:	e000      	b.n	80055f4 <spotTurn+0x234>
				 break;
 80055f2:	bf00      	nop
		 }
		 //continue reverse right
		 HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80055f4:	2200      	movs	r2, #0
 80055f6:	2108      	movs	r1, #8
 80055f8:	4829      	ldr	r0, [pc, #164]	; (80056a0 <spotTurn+0x2e0>)
 80055fa:	f001 ffdb 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80055fe:	2201      	movs	r2, #1
 8005600:	2104      	movs	r1, #4
 8005602:	4827      	ldr	r0, [pc, #156]	; (80056a0 <spotTurn+0x2e0>)
 8005604:	f001 ffd6 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8005608:	2200      	movs	r2, #0
 800560a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800560e:	4825      	ldr	r0, [pc, #148]	; (80056a4 <spotTurn+0x2e4>)
 8005610:	f001 ffd0 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8005614:	2201      	movs	r2, #1
 8005616:	2120      	movs	r1, #32
 8005618:	4823      	ldr	r0, [pc, #140]	; (80056a8 <spotTurn+0x2e8>)
 800561a:	f001 ffcb 	bl	80075b4 <HAL_GPIO_WritePin>
		 htim1.Instance -> CCR4 = RIGHT;
 800561e:	4b1f      	ldr	r3, [pc, #124]	; (800569c <spotTurn+0x2dc>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	22fa      	movs	r2, #250	; 0xfa
 8005624:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1500);
 8005626:	4b1c      	ldr	r3, [pc, #112]	; (8005698 <spotTurn+0x2d8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800562e:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 500);
 8005630:	4b19      	ldr	r3, [pc, #100]	; (8005698 <spotTurn+0x2d8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005638:	63da      	str	r2, [r3, #60]	; 0x3c
		 while (moving)
 800563a:	e021      	b.n	8005680 <spotTurn+0x2c0>
		 {
			 if (totalAngle >= 50)//prev:50
 800563c:	4b1c      	ldr	r3, [pc, #112]	; (80056b0 <spotTurn+0x2f0>)
 800563e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	4b1f      	ldr	r3, [pc, #124]	; (80056c4 <spotTurn+0x304>)
 8005648:	f7fb fa5c 	bl	8000b04 <__aeabi_dcmpge>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d11b      	bne.n	800568a <spotTurn+0x2ca>
//			 if (totalAngle >= 53 + (targetAngle - actualAngle))//prev:50
			 {
				 break;
			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8005652:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <spotTurn+0x2f0>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	4610      	mov	r0, r2
 800565a:	4619      	mov	r1, r3
 800565c:	f7fb fa7c 	bl	8000b58 <__aeabi_d2iz>
 8005660:	4602      	mov	r2, r0
 8005662:	f107 0308 	add.w	r3, r7, #8
 8005666:	4914      	ldr	r1, [pc, #80]	; (80056b8 <spotTurn+0x2f8>)
 8005668:	4618      	mov	r0, r3
 800566a:	f00b f9ef 	bl	8010a4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 800566e:	f107 0308 	add.w	r3, r7, #8
 8005672:	461a      	mov	r2, r3
 8005674:	2114      	movs	r1, #20
 8005676:	200a      	movs	r0, #10
 8005678:	f000 fe76 	bl	8006368 <OLED_ShowString>
			 OLED_Refresh_Gram();
 800567c:	f000 fd00 	bl	8006080 <OLED_Refresh_Gram>
		 while (moving)
 8005680:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <spotTurn+0x2ec>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1d9      	bne.n	800563c <spotTurn+0x27c>
 8005688:	e000      	b.n	800568c <spotTurn+0x2cc>
				 break;
 800568a:	bf00      	nop
		 }
		 move(2,1);
 800568c:	2001      	movs	r0, #1
 800568e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005692:	f7ff f9ab 	bl	80049ec <move>
 8005696:	e166      	b.n	8005966 <spotTurn+0x5a6>
 8005698:	20000378 	.word	0x20000378
 800569c:	20000258 	.word	0x20000258
 80056a0:	40020000 	.word	0x40020000
 80056a4:	40021000 	.word	0x40021000
 80056a8:	40020800 	.word	0x40020800
 80056ac:	20000414 	.word	0x20000414
 80056b0:	20000418 	.word	0x20000418
 80056b4:	40320000 	.word	0x40320000
 80056b8:	08014668 	.word	0x08014668
 80056bc:	40430000 	.word	0x40430000
 80056c0:	40370000 	.word	0x40370000
 80056c4:	40490000 	.word	0x40490000
	}
	else //spot turn right
	{
//		targetAngle -= 90;
//		if(targetAngle < 0) targetAngle += 360;
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80056c8:	2201      	movs	r2, #1
 80056ca:	2108      	movs	r1, #8
 80056cc:	48b1      	ldr	r0, [pc, #708]	; (8005994 <spotTurn+0x5d4>)
 80056ce:	f001 ff71 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80056d2:	2200      	movs	r2, #0
 80056d4:	2104      	movs	r1, #4
 80056d6:	48af      	ldr	r0, [pc, #700]	; (8005994 <spotTurn+0x5d4>)
 80056d8:	f001 ff6c 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80056dc:	2201      	movs	r2, #1
 80056de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056e2:	48ad      	ldr	r0, [pc, #692]	; (8005998 <spotTurn+0x5d8>)
 80056e4:	f001 ff66 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80056e8:	2200      	movs	r2, #0
 80056ea:	2120      	movs	r1, #32
 80056ec:	48ab      	ldr	r0, [pc, #684]	; (800599c <spotTurn+0x5dc>)
 80056ee:	f001 ff61 	bl	80075b4 <HAL_GPIO_WritePin>
		htim1.Instance -> CCR4 = RIGHT;
 80056f2:	4bab      	ldr	r3, [pc, #684]	; (80059a0 <spotTurn+0x5e0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	22fa      	movs	r2, #250	; 0xfa
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1500);
 80056fa:	4baa      	ldr	r3, [pc, #680]	; (80059a4 <spotTurn+0x5e4>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005702:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 500);
 8005704:	4ba7      	ldr	r3, [pc, #668]	; (80059a4 <spotTurn+0x5e4>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800570c:	63da      	str	r2, [r3, #60]	; 0x3c
		 moving = 1;
 800570e:	4ba6      	ldr	r3, [pc, #664]	; (80059a8 <spotTurn+0x5e8>)
 8005710:	2201      	movs	r2, #1
 8005712:	701a      	strb	r2, [r3, #0]
		 while (moving)
 8005714:	e021      	b.n	800575a <spotTurn+0x39a>
		 {
			 if (totalAngle <= -1*20)
 8005716:	4ba5      	ldr	r3, [pc, #660]	; (80059ac <spotTurn+0x5ec>)
 8005718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	4ba3      	ldr	r3, [pc, #652]	; (80059b0 <spotTurn+0x5f0>)
 8005722:	f7fb f9e5 	bl	8000af0 <__aeabi_dcmple>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d11b      	bne.n	8005764 <spotTurn+0x3a4>
			 {
				 break;
			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 800572c:	4b9f      	ldr	r3, [pc, #636]	; (80059ac <spotTurn+0x5ec>)
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	4610      	mov	r0, r2
 8005734:	4619      	mov	r1, r3
 8005736:	f7fb fa0f 	bl	8000b58 <__aeabi_d2iz>
 800573a:	4602      	mov	r2, r0
 800573c:	f107 0308 	add.w	r3, r7, #8
 8005740:	499c      	ldr	r1, [pc, #624]	; (80059b4 <spotTurn+0x5f4>)
 8005742:	4618      	mov	r0, r3
 8005744:	f00b f982 	bl	8010a4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 8005748:	f107 0308 	add.w	r3, r7, #8
 800574c:	461a      	mov	r2, r3
 800574e:	2114      	movs	r1, #20
 8005750:	200a      	movs	r0, #10
 8005752:	f000 fe09 	bl	8006368 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8005756:	f000 fc93 	bl	8006080 <OLED_Refresh_Gram>
		 while (moving)
 800575a:	4b93      	ldr	r3, [pc, #588]	; (80059a8 <spotTurn+0x5e8>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1d9      	bne.n	8005716 <spotTurn+0x356>
 8005762:	e000      	b.n	8005766 <spotTurn+0x3a6>
				 break;
 8005764:	bf00      	nop
		 }
		 HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8005766:	2200      	movs	r2, #0
 8005768:	2108      	movs	r1, #8
 800576a:	488a      	ldr	r0, [pc, #552]	; (8005994 <spotTurn+0x5d4>)
 800576c:	f001 ff22 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8005770:	2201      	movs	r2, #1
 8005772:	2104      	movs	r1, #4
 8005774:	4887      	ldr	r0, [pc, #540]	; (8005994 <spotTurn+0x5d4>)
 8005776:	f001 ff1d 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 800577a:	2200      	movs	r2, #0
 800577c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005780:	4885      	ldr	r0, [pc, #532]	; (8005998 <spotTurn+0x5d8>)
 8005782:	f001 ff17 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8005786:	2201      	movs	r2, #1
 8005788:	2120      	movs	r1, #32
 800578a:	4884      	ldr	r0, [pc, #528]	; (800599c <spotTurn+0x5dc>)
 800578c:	f001 ff12 	bl	80075b4 <HAL_GPIO_WritePin>
		 //robot reverse left
		 htim1.Instance -> CCR4 = LEFT;
 8005790:	4b83      	ldr	r3, [pc, #524]	; (80059a0 <spotTurn+0x5e0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2269      	movs	r2, #105	; 0x69
 8005796:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 800);
 8005798:	4b82      	ldr	r3, [pc, #520]	; (80059a4 <spotTurn+0x5e4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80057a0:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1500);
 80057a2:	4b80      	ldr	r3, [pc, #512]	; (80059a4 <spotTurn+0x5e4>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80057aa:	63da      	str	r2, [r3, #60]	; 0x3c
		 while (moving)
 80057ac:	e021      	b.n	80057f2 <spotTurn+0x432>
		 {
			 if (totalAngle <= -1*35)
 80057ae:	4b7f      	ldr	r3, [pc, #508]	; (80059ac <spotTurn+0x5ec>)
 80057b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	4b7f      	ldr	r3, [pc, #508]	; (80059b8 <spotTurn+0x5f8>)
 80057ba:	f7fb f999 	bl	8000af0 <__aeabi_dcmple>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d11b      	bne.n	80057fc <spotTurn+0x43c>
			 {
				 break;
			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 80057c4:	4b79      	ldr	r3, [pc, #484]	; (80059ac <spotTurn+0x5ec>)
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	4610      	mov	r0, r2
 80057cc:	4619      	mov	r1, r3
 80057ce:	f7fb f9c3 	bl	8000b58 <__aeabi_d2iz>
 80057d2:	4602      	mov	r2, r0
 80057d4:	f107 0308 	add.w	r3, r7, #8
 80057d8:	4976      	ldr	r1, [pc, #472]	; (80059b4 <spotTurn+0x5f4>)
 80057da:	4618      	mov	r0, r3
 80057dc:	f00b f936 	bl	8010a4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 80057e0:	f107 0308 	add.w	r3, r7, #8
 80057e4:	461a      	mov	r2, r3
 80057e6:	2114      	movs	r1, #20
 80057e8:	200a      	movs	r0, #10
 80057ea:	f000 fdbd 	bl	8006368 <OLED_ShowString>
			 OLED_Refresh_Gram();
 80057ee:	f000 fc47 	bl	8006080 <OLED_Refresh_Gram>
		 while (moving)
 80057f2:	4b6d      	ldr	r3, [pc, #436]	; (80059a8 <spotTurn+0x5e8>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1d9      	bne.n	80057ae <spotTurn+0x3ee>
 80057fa:	e000      	b.n	80057fe <spotTurn+0x43e>
				 break;
 80057fc:	bf00      	nop
		 }
		 htim1.Instance -> CCR4 = STRAIGHT;
 80057fe:	4b68      	ldr	r3, [pc, #416]	; (80059a0 <spotTurn+0x5e0>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2295      	movs	r2, #149	; 0x95
 8005804:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005806:	4b67      	ldr	r3, [pc, #412]	; (80059a4 <spotTurn+0x5e4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2200      	movs	r2, #0
 800580c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800580e:	4b65      	ldr	r3, [pc, #404]	; (80059a4 <spotTurn+0x5e4>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2200      	movs	r2, #0
 8005814:	63da      	str	r2, [r3, #60]	; 0x3c
		 move(9.5,1);
 8005816:	2001      	movs	r0, #1
 8005818:	eeb2 0a03 	vmov.f32	s0, #35	; 0x41180000  9.5
 800581c:	f7ff f8e6 	bl	80049ec <move>
		 osDelay(100);
 8005820:	2064      	movs	r0, #100	; 0x64
 8005822:	f007 fd30 	bl	800d286 <osDelay>
		 moving=1;
 8005826:	4b60      	ldr	r3, [pc, #384]	; (80059a8 <spotTurn+0x5e8>)
 8005828:	2201      	movs	r2, #1
 800582a:	701a      	strb	r2, [r3, #0]
		 //continue forward right
		 HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800582c:	2201      	movs	r2, #1
 800582e:	2108      	movs	r1, #8
 8005830:	4858      	ldr	r0, [pc, #352]	; (8005994 <spotTurn+0x5d4>)
 8005832:	f001 febf 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8005836:	2200      	movs	r2, #0
 8005838:	2104      	movs	r1, #4
 800583a:	4856      	ldr	r0, [pc, #344]	; (8005994 <spotTurn+0x5d4>)
 800583c:	f001 feba 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005840:	2201      	movs	r2, #1
 8005842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005846:	4854      	ldr	r0, [pc, #336]	; (8005998 <spotTurn+0x5d8>)
 8005848:	f001 feb4 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800584c:	2200      	movs	r2, #0
 800584e:	2120      	movs	r1, #32
 8005850:	4852      	ldr	r0, [pc, #328]	; (800599c <spotTurn+0x5dc>)
 8005852:	f001 feaf 	bl	80075b4 <HAL_GPIO_WritePin>
		 htim1.Instance -> CCR4 = RIGHT;
 8005856:	4b52      	ldr	r3, [pc, #328]	; (80059a0 <spotTurn+0x5e0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	22fa      	movs	r2, #250	; 0xfa
 800585c:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1500);
 800585e:	4b51      	ldr	r3, [pc, #324]	; (80059a4 <spotTurn+0x5e4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005866:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 500);
 8005868:	4b4e      	ldr	r3, [pc, #312]	; (80059a4 <spotTurn+0x5e4>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005870:	63da      	str	r2, [r3, #60]	; 0x3c
		 while (moving)
 8005872:	e021      	b.n	80058b8 <spotTurn+0x4f8>
		 {
			 if (totalAngle <= -1*16)
 8005874:	4b4d      	ldr	r3, [pc, #308]	; (80059ac <spotTurn+0x5ec>)
 8005876:	e9d3 0100 	ldrd	r0, r1, [r3]
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	4b4f      	ldr	r3, [pc, #316]	; (80059bc <spotTurn+0x5fc>)
 8005880:	f7fb f936 	bl	8000af0 <__aeabi_dcmple>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d11b      	bne.n	80058c2 <spotTurn+0x502>
			 {
				 break;
			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 800588a:	4b48      	ldr	r3, [pc, #288]	; (80059ac <spotTurn+0x5ec>)
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	4610      	mov	r0, r2
 8005892:	4619      	mov	r1, r3
 8005894:	f7fb f960 	bl	8000b58 <__aeabi_d2iz>
 8005898:	4602      	mov	r2, r0
 800589a:	f107 0308 	add.w	r3, r7, #8
 800589e:	4945      	ldr	r1, [pc, #276]	; (80059b4 <spotTurn+0x5f4>)
 80058a0:	4618      	mov	r0, r3
 80058a2:	f00b f8d3 	bl	8010a4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 80058a6:	f107 0308 	add.w	r3, r7, #8
 80058aa:	461a      	mov	r2, r3
 80058ac:	2114      	movs	r1, #20
 80058ae:	200a      	movs	r0, #10
 80058b0:	f000 fd5a 	bl	8006368 <OLED_ShowString>
			 OLED_Refresh_Gram();
 80058b4:	f000 fbe4 	bl	8006080 <OLED_Refresh_Gram>
		 while (moving)
 80058b8:	4b3b      	ldr	r3, [pc, #236]	; (80059a8 <spotTurn+0x5e8>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1d9      	bne.n	8005874 <spotTurn+0x4b4>
 80058c0:	e000      	b.n	80058c4 <spotTurn+0x504>
				 break;
 80058c2:	bf00      	nop
		 }

		 HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80058c4:	2200      	movs	r2, #0
 80058c6:	2108      	movs	r1, #8
 80058c8:	4832      	ldr	r0, [pc, #200]	; (8005994 <spotTurn+0x5d4>)
 80058ca:	f001 fe73 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80058ce:	2201      	movs	r2, #1
 80058d0:	2104      	movs	r1, #4
 80058d2:	4830      	ldr	r0, [pc, #192]	; (8005994 <spotTurn+0x5d4>)
 80058d4:	f001 fe6e 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 80058d8:	2200      	movs	r2, #0
 80058da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058de:	482e      	ldr	r0, [pc, #184]	; (8005998 <spotTurn+0x5d8>)
 80058e0:	f001 fe68 	bl	80075b4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 80058e4:	2201      	movs	r2, #1
 80058e6:	2120      	movs	r1, #32
 80058e8:	482c      	ldr	r0, [pc, #176]	; (800599c <spotTurn+0x5dc>)
 80058ea:	f001 fe63 	bl	80075b4 <HAL_GPIO_WritePin>
		 htim1.Instance -> CCR4 = LEFT;
 80058ee:	4b2c      	ldr	r3, [pc, #176]	; (80059a0 <spotTurn+0x5e0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2269      	movs	r2, #105	; 0x69
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 800);
 80058f6:	4b2b      	ldr	r3, [pc, #172]	; (80059a4 <spotTurn+0x5e4>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80058fe:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1500);
 8005900:	4b28      	ldr	r3, [pc, #160]	; (80059a4 <spotTurn+0x5e4>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005908:	63da      	str	r2, [r3, #60]	; 0x3c
		 while (moving)
 800590a:	e021      	b.n	8005950 <spotTurn+0x590>
		 {
			 if (totalAngle <= -1*46)//previous: 48
 800590c:	4b27      	ldr	r3, [pc, #156]	; (80059ac <spotTurn+0x5ec>)
 800590e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005912:	f04f 0200 	mov.w	r2, #0
 8005916:	4b2a      	ldr	r3, [pc, #168]	; (80059c0 <spotTurn+0x600>)
 8005918:	f7fb f8ea 	bl	8000af0 <__aeabi_dcmple>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d11b      	bne.n	800595a <spotTurn+0x59a>
//			 if (totalAngle <= -1*45 - (targetAngle - actualAngle))//previous: 48
			 {
				 break;
			 }
			 sprintf(offset_show, "angle %5d\0", (int)(totalAngle));
 8005922:	4b22      	ldr	r3, [pc, #136]	; (80059ac <spotTurn+0x5ec>)
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	4610      	mov	r0, r2
 800592a:	4619      	mov	r1, r3
 800592c:	f7fb f914 	bl	8000b58 <__aeabi_d2iz>
 8005930:	4602      	mov	r2, r0
 8005932:	f107 0308 	add.w	r3, r7, #8
 8005936:	491f      	ldr	r1, [pc, #124]	; (80059b4 <spotTurn+0x5f4>)
 8005938:	4618      	mov	r0, r3
 800593a:	f00b f887 	bl	8010a4c <siprintf>
			 OLED_ShowString(10,20, offset_show);
 800593e:	f107 0308 	add.w	r3, r7, #8
 8005942:	461a      	mov	r2, r3
 8005944:	2114      	movs	r1, #20
 8005946:	200a      	movs	r0, #10
 8005948:	f000 fd0e 	bl	8006368 <OLED_ShowString>
			 OLED_Refresh_Gram();
 800594c:	f000 fb98 	bl	8006080 <OLED_Refresh_Gram>
		 while (moving)
 8005950:	4b15      	ldr	r3, [pc, #84]	; (80059a8 <spotTurn+0x5e8>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1d9      	bne.n	800590c <spotTurn+0x54c>
 8005958:	e000      	b.n	800595c <spotTurn+0x59c>
				 break;
 800595a:	bf00      	nop
		 }
		 move(0.5,0);
 800595c:	2000      	movs	r0, #0
 800595e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8005962:	f7ff f843 	bl	80049ec <move>
	}
	//Stop wheels and let wheels be straight
	htim1.Instance -> CCR4 = STRAIGHT;
 8005966:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <spotTurn+0x5e0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2295      	movs	r2, #149	; 0x95
 800596c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800596e:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <spotTurn+0x5e4>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2200      	movs	r2, #0
 8005974:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005976:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <spotTurn+0x5e4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2200      	movs	r2, #0
 800597c:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 800597e:	4b0a      	ldr	r3, [pc, #40]	; (80059a8 <spotTurn+0x5e8>)
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
//	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);

	osDelay(100);
 8005984:	2064      	movs	r0, #100	; 0x64
 8005986:	f007 fc7e 	bl	800d286 <osDelay>
}
 800598a:	bf00      	nop
 800598c:	3730      	adds	r7, #48	; 0x30
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	40020000 	.word	0x40020000
 8005998:	40021000 	.word	0x40021000
 800599c:	40020800 	.word	0x40020800
 80059a0:	20000258 	.word	0x20000258
 80059a4:	20000378 	.word	0x20000378
 80059a8:	20000414 	.word	0x20000414
 80059ac:	20000418 	.word	0x20000418
 80059b0:	c0340000 	.word	0xc0340000
 80059b4:	08014668 	.word	0x08014668
 80059b8:	c0418000 	.word	0xc0418000
 80059bc:	c0300000 	.word	0xc0300000
 80059c0:	c0470000 	.word	0xc0470000

080059c4 <readByte>:


////////////////////GYRO FUNCTIONS//////////////////////////
void readByte(uint8_t addr, uint8_t* data){
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	4603      	mov	r3, r0
 80059cc:	6039      	str	r1, [r7, #0]
 80059ce:	71fb      	strb	r3, [r7, #7]
	buff[0] = addr;
 80059d0:	4a0f      	ldr	r2, [pc, #60]	; (8005a10 <readByte+0x4c>)
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr<<1, buff, 1, 10);
 80059d6:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <readByte+0x50>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	b299      	uxth	r1, r3
 80059e0:	230a      	movs	r3, #10
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	2301      	movs	r3, #1
 80059e6:	4a0a      	ldr	r2, [pc, #40]	; (8005a10 <readByte+0x4c>)
 80059e8:	480b      	ldr	r0, [pc, #44]	; (8005a18 <readByte+0x54>)
 80059ea:	f001 ff5b 	bl	80078a4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddr<<1, data, 2, 20);
 80059ee:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <readByte+0x50>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	b299      	uxth	r1, r3
 80059f8:	2314      	movs	r3, #20
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	2302      	movs	r3, #2
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	4805      	ldr	r0, [pc, #20]	; (8005a18 <readByte+0x54>)
 8005a02:	f002 f84d 	bl	8007aa0 <HAL_I2C_Master_Receive>

}
 8005a06:	bf00      	nop
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000448 	.word	0x20000448
 8005a14:	20000000 	.word	0x20000000
 8005a18:	20000204 	.word	0x20000204

08005a1c <writeByte>:

void writeByte(uint8_t addr, uint8_t data){
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	4603      	mov	r3, r0
 8005a24:	460a      	mov	r2, r1
 8005a26:	71fb      	strb	r3, [r7, #7]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	71bb      	strb	r3, [r7, #6]
	buff[0] = addr;
 8005a2c:	4a0a      	ldr	r2, [pc, #40]	; (8005a58 <writeByte+0x3c>)
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	7013      	strb	r3, [r2, #0]
	buff[1] = data;
 8005a32:	4a09      	ldr	r2, [pc, #36]	; (8005a58 <writeByte+0x3c>)
 8005a34:	79bb      	ldrb	r3, [r7, #6]
 8005a36:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, buff, 2, 20);
 8005a38:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <writeByte+0x40>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	b299      	uxth	r1, r3
 8005a42:	2314      	movs	r3, #20
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	2302      	movs	r3, #2
 8005a48:	4a03      	ldr	r2, [pc, #12]	; (8005a58 <writeByte+0x3c>)
 8005a4a:	4805      	ldr	r0, [pc, #20]	; (8005a60 <writeByte+0x44>)
 8005a4c:	f001 ff2a 	bl	80078a4 <HAL_I2C_Master_Transmit>
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	20000448 	.word	0x20000448
 8005a5c:	20000000 	.word	0x20000000
 8005a60:	20000204 	.word	0x20000204

08005a64 <gyroStart>:

void gyroStart(){
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
	writeByte(0x07, 0x07);
 8005a68:	2107      	movs	r1, #7
 8005a6a:	2007      	movs	r0, #7
 8005a6c:	f7ff ffd6 	bl	8005a1c <writeByte>
	osDelayUntil(10);
 8005a70:	200a      	movs	r0, #10
 8005a72:	f007 fc23 	bl	800d2bc <osDelayUntil>

	writeByte(0x07, 0x00);
 8005a76:	2100      	movs	r1, #0
 8005a78:	2007      	movs	r0, #7
 8005a7a:	f7ff ffcf 	bl	8005a1c <writeByte>
	osDelayUntil(10);
 8005a7e:	200a      	movs	r0, #10
 8005a80:	f007 fc1c 	bl	800d2bc <osDelayUntil>
}
 8005a84:	bf00      	nop
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <gyroInit>:


void gyroInit(){
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0

	writeByte(0x06, 0x00);
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	2006      	movs	r0, #6
 8005a90:	f7ff ffc4 	bl	8005a1c <writeByte>
	osDelayUntil(10);
 8005a94:	200a      	movs	r0, #10
 8005a96:	f007 fc11 	bl	800d2bc <osDelayUntil>
	writeByte(0x03, 0x80);
 8005a9a:	2180      	movs	r1, #128	; 0x80
 8005a9c:	2003      	movs	r0, #3
 8005a9e:	f7ff ffbd 	bl	8005a1c <writeByte>
	osDelayUntil(10);
 8005aa2:	200a      	movs	r0, #10
 8005aa4:	f007 fc0a 	bl	800d2bc <osDelayUntil>
	writeByte(0x07, 0x07);
 8005aa8:	2107      	movs	r1, #7
 8005aaa:	2007      	movs	r0, #7
 8005aac:	f7ff ffb6 	bl	8005a1c <writeByte>
	osDelayUntil(10);
 8005ab0:	200a      	movs	r0, #10
 8005ab2:	f007 fc03 	bl	800d2bc <osDelayUntil>
	writeByte(0x06, 0x01);
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	2006      	movs	r0, #6
 8005aba:	f7ff ffaf 	bl	8005a1c <writeByte>
	osDelayUntil(10);
 8005abe:	200a      	movs	r0, #10
 8005ac0:	f007 fbfc 	bl	800d2bc <osDelayUntil>
	writeByte(0x7F, 0x20);
 8005ac4:	2120      	movs	r1, #32
 8005ac6:	207f      	movs	r0, #127	; 0x7f
 8005ac8:	f7ff ffa8 	bl	8005a1c <writeByte>
	osDelayUntil(10);
 8005acc:	200a      	movs	r0, #10
 8005ace:	f007 fbf5 	bl	800d2bc <osDelayUntil>
	writeByte(0x01, 0x2F);
 8005ad2:	212f      	movs	r1, #47	; 0x2f
 8005ad4:	2001      	movs	r0, #1
 8005ad6:	f7ff ffa1 	bl	8005a1c <writeByte>
	osDelayUntil(10);
 8005ada:	200a      	movs	r0, #10
 8005adc:	f007 fbee 	bl	800d2bc <osDelayUntil>
	writeByte(0x0, 0x00);
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	f7ff ff9a 	bl	8005a1c <writeByte>
	osDelayUntil(10);
 8005ae8:	200a      	movs	r0, #10
 8005aea:	f007 fbe7 	bl	800d2bc <osDelayUntil>
	writeByte(0x7F, 0x00);
 8005aee:	2100      	movs	r1, #0
 8005af0:	207f      	movs	r0, #127	; 0x7f
 8005af2:	f7ff ff93 	bl	8005a1c <writeByte>
	osDelayUntil(10);
 8005af6:	200a      	movs	r0, #10
 8005af8:	f007 fbe0 	bl	800d2bc <osDelayUntil>
	writeByte(0x07, 0x00);
 8005afc:	2100      	movs	r1, #0
 8005afe:	2007      	movs	r0, #7
 8005b00:	f7ff ff8c 	bl	8005a1c <writeByte>
	osDelayUntil(10);
 8005b04:	200a      	movs	r0, #10
 8005b06:	f007 fbd9 	bl	800d2bc <osDelayUntil>

}
 8005b0a:	bf00      	nop
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b090      	sub	sp, #64	; 0x40
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t instrBuffer[40], angle;
	uint16_t i = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	86fb      	strh	r3, [r7, #54]	; 0x36
	HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer, 1);
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	49c1      	ldr	r1, [pc, #772]	; (8005e24 <StartDefaultTask+0x314>)
 8005b20:	48c1      	ldr	r0, [pc, #772]	; (8005e28 <StartDefaultTask+0x318>)
 8005b22:	f006 fb06 	bl	800c132 <HAL_UART_Receive_IT>


	moving = 0;
 8005b26:	4bc1      	ldr	r3, [pc, #772]	; (8005e2c <StartDefaultTask+0x31c>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	701a      	strb	r2, [r3, #0]
	cmd = data = newCmdReceived = 0;
 8005b2c:	4bc0      	ldr	r3, [pc, #768]	; (8005e30 <StartDefaultTask+0x320>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	4bc0      	ldr	r3, [pc, #768]	; (8005e34 <StartDefaultTask+0x324>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	4bbe      	ldr	r3, [pc, #760]	; (8005e34 <StartDefaultTask+0x324>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	4bbe      	ldr	r3, [pc, #760]	; (8005e38 <StartDefaultTask+0x328>)
 8005b40:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {

	  //Toggle LED just to see if the code is running
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8005b42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b46:	48bd      	ldr	r0, [pc, #756]	; (8005e3c <StartDefaultTask+0x32c>)
 8005b48:	f001 fd4d 	bl	80075e6 <HAL_GPIO_TogglePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005b4c:	210c      	movs	r1, #12
 8005b4e:	48bc      	ldr	r0, [pc, #752]	; (8005e40 <StartDefaultTask+0x330>)
 8005b50:	f004 fde6 	bl	800a720 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8005b54:	4bba      	ldr	r3, [pc, #744]	; (8005e40 <StartDefaultTask+0x330>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2295      	movs	r2, #149	; 0x95
 8005b5a:	641a      	str	r2, [r3, #64]	; 0x40
	// 1: forward
	// 2: left
	// 3: right
	// 4: reverse
	// 5: shortest path
	if (newCmdReceived == 1)
 8005b5c:	4bb4      	ldr	r3, [pc, #720]	; (8005e30 <StartDefaultTask+0x320>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	f040 815b 	bne.w	8005e1c <StartDefaultTask+0x30c>
	{
		newCmdReceived = 0;
 8005b66:	4bb2      	ldr	r3, [pc, #712]	; (8005e30 <StartDefaultTask+0x320>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	701a      	strb	r2, [r3, #0]
//		sprintf(instrBuffer, "d: %d\0", data);
//		sendToRPI(instrBuffer);
//		OLED_ShowString(10, 30, instrBuffer);
//		OLED_Refresh_Gram();
//		cmd = 'w';
		switch(cmd)
 8005b6c:	4bb2      	ldr	r3, [pc, #712]	; (8005e38 <StartDefaultTask+0x328>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	3b4c      	subs	r3, #76	; 0x4c
 8005b72:	2b2c      	cmp	r3, #44	; 0x2c
 8005b74:	f200 814e 	bhi.w	8005e14 <StartDefaultTask+0x304>
 8005b78:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <StartDefaultTask+0x70>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005d69 	.word	0x08005d69
 8005b84:	08005e15 	.word	0x08005e15
 8005b88:	08005e15 	.word	0x08005e15
 8005b8c:	08005e15 	.word	0x08005e15
 8005b90:	08005e15 	.word	0x08005e15
 8005b94:	08005e15 	.word	0x08005e15
 8005b98:	08005d75 	.word	0x08005d75
 8005b9c:	08005e15 	.word	0x08005e15
 8005ba0:	08005df1 	.word	0x08005df1
 8005ba4:	08005e15 	.word	0x08005e15
 8005ba8:	08005e15 	.word	0x08005e15
 8005bac:	08005e15 	.word	0x08005e15
 8005bb0:	08005d8f 	.word	0x08005d8f
 8005bb4:	08005e03 	.word	0x08005e03
 8005bb8:	08005e15 	.word	0x08005e15
 8005bbc:	08005e15 	.word	0x08005e15
 8005bc0:	08005e15 	.word	0x08005e15
 8005bc4:	08005e15 	.word	0x08005e15
 8005bc8:	08005e15 	.word	0x08005e15
 8005bcc:	08005e15 	.word	0x08005e15
 8005bd0:	08005e15 	.word	0x08005e15
 8005bd4:	08005d4d 	.word	0x08005d4d
 8005bd8:	08005e15 	.word	0x08005e15
 8005bdc:	08005e15 	.word	0x08005e15
 8005be0:	08005d5b 	.word	0x08005d5b
 8005be4:	08005e15 	.word	0x08005e15
 8005be8:	08005e15 	.word	0x08005e15
 8005bec:	08005e15 	.word	0x08005e15
 8005bf0:	08005e15 	.word	0x08005e15
 8005bf4:	08005e15 	.word	0x08005e15
 8005bf8:	08005e15 	.word	0x08005e15
 8005bfc:	08005e15 	.word	0x08005e15
 8005c00:	08005cb5 	.word	0x08005cb5
 8005c04:	08005e15 	.word	0x08005e15
 8005c08:	08005e15 	.word	0x08005e15
 8005c0c:	08005e15 	.word	0x08005e15
 8005c10:	08005d9d 	.word	0x08005d9d
 8005c14:	08005e15 	.word	0x08005e15
 8005c18:	08005cc1 	.word	0x08005cc1
 8005c1c:	08005ccd 	.word	0x08005ccd
 8005c20:	08005dd3 	.word	0x08005dd3
 8005c24:	08005dbb 	.word	0x08005dbb
 8005c28:	08005e15 	.word	0x08005e15
 8005c2c:	08005c35 	.word	0x08005c35
 8005c30:	08005d81 	.word	0x08005d81
		{
		case 'w':
			num_loops = ceil(data / 50);
 8005c34:	4b7f      	ldr	r3, [pc, #508]	; (8005e34 <StartDefaultTask+0x324>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a82      	ldr	r2, [pc, #520]	; (8005e44 <StartDefaultTask+0x334>)
 8005c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3e:	091b      	lsrs	r3, r3, #4
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fa fc5f 	bl	8000504 <__aeabi_ui2d>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	f7fa ffab 	bl	8000ba8 <__aeabi_d2uiz>
 8005c52:	4603      	mov	r3, r0
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	4b7c      	ldr	r3, [pc, #496]	; (8005e48 <StartDefaultTask+0x338>)
 8005c58:	701a      	strb	r2, [r3, #0]
			remainder_dist = data % 50;
 8005c5a:	4b76      	ldr	r3, [pc, #472]	; (8005e34 <StartDefaultTask+0x324>)
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4b79      	ldr	r3, [pc, #484]	; (8005e44 <StartDefaultTask+0x334>)
 8005c60:	fba3 1302 	umull	r1, r3, r3, r2
 8005c64:	091b      	lsrs	r3, r3, #4
 8005c66:	2132      	movs	r1, #50	; 0x32
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	4b76      	ldr	r3, [pc, #472]	; (8005e4c <StartDefaultTask+0x33c>)
 8005c72:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < num_loops; i++){
 8005c74:	2300      	movs	r3, #0
 8005c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c78:	e007      	b.n	8005c8a <StartDefaultTask+0x17a>
				moveGyroPID(50, 1);
 8005c7a:	2001      	movs	r0, #1
 8005c7c:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8005e50 <StartDefaultTask+0x340>
 8005c80:	f7fe f8ce 	bl	8003e20 <moveGyroPID>
			for (int i = 0; i < num_loops; i++){
 8005c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c86:	3301      	adds	r3, #1
 8005c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c8a:	4b6f      	ldr	r3, [pc, #444]	; (8005e48 <StartDefaultTask+0x338>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c92:	4293      	cmp	r3, r2
 8005c94:	dbf1      	blt.n	8005c7a <StartDefaultTask+0x16a>
			}
			moveGyroPID(remainder_dist, 1);
 8005c96:	4b6d      	ldr	r3, [pc, #436]	; (8005e4c <StartDefaultTask+0x33c>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca2:	2001      	movs	r0, #1
 8005ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ca8:	f7fe f8ba 	bl	8003e20 <moveGyroPID>
//			moveGyroPIDOld(10,1);
//			gyro_move(data, 1);
//			sendToRPI("Forward done!f\n\0");
			sendToRPI("RPI:d");
 8005cac:	4869      	ldr	r0, [pc, #420]	; (8005e54 <StartDefaultTask+0x344>)
 8005cae:	f7fe f8a1 	bl	8003df4 <sendToRPI>
			break;
 8005cb2:	e0b0      	b.n	8005e16 <StartDefaultTask+0x306>
		case 'l':
//			turn(1, 1);
			left90();
 8005cb4:	f7ff fa6a 	bl	800518c <left90>
//			sendToRPI("Left done!\0");
			sendToRPI("RPI:d");
 8005cb8:	4866      	ldr	r0, [pc, #408]	; (8005e54 <StartDefaultTask+0x344>)
 8005cba:	f7fe f89b 	bl	8003df4 <sendToRPI>
			break;
 8005cbe:	e0aa      	b.n	8005e16 <StartDefaultTask+0x306>
		case 'r':
//			turn(0, 1);
			right90();
 8005cc0:	f7ff fafa 	bl	80052b8 <right90>
//			sendToRPI("Right done!\0");
			sendToRPI("RPI:d");
 8005cc4:	4863      	ldr	r0, [pc, #396]	; (8005e54 <StartDefaultTask+0x344>)
 8005cc6:	f7fe f895 	bl	8003df4 <sendToRPI>
			break;
 8005cca:	e0a4      	b.n	8005e16 <StartDefaultTask+0x306>
		case 's':
			num_loops = ceil(data / 50);
 8005ccc:	4b59      	ldr	r3, [pc, #356]	; (8005e34 <StartDefaultTask+0x324>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a5c      	ldr	r2, [pc, #368]	; (8005e44 <StartDefaultTask+0x334>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	091b      	lsrs	r3, r3, #4
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fa fc13 	bl	8000504 <__aeabi_ui2d>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	f7fa ff5f 	bl	8000ba8 <__aeabi_d2uiz>
 8005cea:	4603      	mov	r3, r0
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	4b56      	ldr	r3, [pc, #344]	; (8005e48 <StartDefaultTask+0x338>)
 8005cf0:	701a      	strb	r2, [r3, #0]
			remainder_dist = data % 50;
 8005cf2:	4b50      	ldr	r3, [pc, #320]	; (8005e34 <StartDefaultTask+0x324>)
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	4b53      	ldr	r3, [pc, #332]	; (8005e44 <StartDefaultTask+0x334>)
 8005cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cfc:	091b      	lsrs	r3, r3, #4
 8005cfe:	2132      	movs	r1, #50	; 0x32
 8005d00:	fb01 f303 	mul.w	r3, r1, r3
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	4b50      	ldr	r3, [pc, #320]	; (8005e4c <StartDefaultTask+0x33c>)
 8005d0a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < num_loops; i++){
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d10:	e007      	b.n	8005d22 <StartDefaultTask+0x212>
				moveGyroPID(50, 0);
 8005d12:	2000      	movs	r0, #0
 8005d14:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8005e50 <StartDefaultTask+0x340>
 8005d18:	f7fe f882 	bl	8003e20 <moveGyroPID>
			for (int i = 0; i < num_loops; i++){
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1e:	3301      	adds	r3, #1
 8005d20:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d22:	4b49      	ldr	r3, [pc, #292]	; (8005e48 <StartDefaultTask+0x338>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	461a      	mov	r2, r3
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	dbf1      	blt.n	8005d12 <StartDefaultTask+0x202>
			}
			moveGyroPIDOld(remainder_dist, 0);
 8005d2e:	4b47      	ldr	r3, [pc, #284]	; (8005e4c <StartDefaultTask+0x33c>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d40:	f7fe fb7a 	bl	8004438 <moveGyroPIDOld>
//			moveGyroPIDOld(10, 0);
//			sendToRPI("Reverse done!\0");
			sendToRPI("RPI:d");
 8005d44:	4843      	ldr	r0, [pc, #268]	; (8005e54 <StartDefaultTask+0x344>)
 8005d46:	f7fe f855 	bl	8003df4 <sendToRPI>
			break;
 8005d4a:	e064      	b.n	8005e16 <StartDefaultTask+0x306>
		case 'a':
			spotTurn(1);
 8005d4c:	2001      	movs	r0, #1
 8005d4e:	f7ff fb37 	bl	80053c0 <spotTurn>
			sendToRPI("RPI:d");
 8005d52:	4840      	ldr	r0, [pc, #256]	; (8005e54 <StartDefaultTask+0x344>)
 8005d54:	f7fe f84e 	bl	8003df4 <sendToRPI>
			break;
 8005d58:	e05d      	b.n	8005e16 <StartDefaultTask+0x306>
		case 'd':
			spotTurn(0);
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f7ff fb30 	bl	80053c0 <spotTurn>
			sendToRPI("RPI:d");
 8005d60:	483c      	ldr	r0, [pc, #240]	; (8005e54 <StartDefaultTask+0x344>)
 8005d62:	f7fe f847 	bl	8003df4 <sendToRPI>
			break;
 8005d66:	e056      	b.n	8005e16 <StartDefaultTask+0x306>
		case 'L':
			bLeft90();
 8005d68:	f7ff f902 	bl	8004f70 <bLeft90>
//			sendToRPI("Reverse Left done!\0");
			sendToRPI("RPI:d");
 8005d6c:	4839      	ldr	r0, [pc, #228]	; (8005e54 <StartDefaultTask+0x344>)
 8005d6e:	f7fe f841 	bl	8003df4 <sendToRPI>
			break;
 8005d72:	e050      	b.n	8005e16 <StartDefaultTask+0x306>
		case 'R':
			bRight90();
 8005d74:	f7ff f986 	bl	8005084 <bRight90>
//			sendToRPI("Reverse Right done!\0");
			sendToRPI("RPI:d");
 8005d78:	4836      	ldr	r0, [pc, #216]	; (8005e54 <StartDefaultTask+0x344>)
 8005d7a:	f7fe f83b 	bl	8003df4 <sendToRPI>
			break;
 8005d7e:	e04a      	b.n	8005e16 <StartDefaultTask+0x306>
		case 'x':
			spotTurn(1); //spotTurn left
 8005d80:	2001      	movs	r0, #1
 8005d82:	f7ff fb1d 	bl	80053c0 <spotTurn>
			sendToRPI("RPI:d");
 8005d86:	4833      	ldr	r0, [pc, #204]	; (8005e54 <StartDefaultTask+0x344>)
 8005d88:	f7fe f834 	bl	8003df4 <sendToRPI>
			break;
 8005d8c:	e043      	b.n	8005e16 <StartDefaultTask+0x306>
		case 'X':
			spotTurn(0); //spotTurn right
 8005d8e:	2000      	movs	r0, #0
 8005d90:	f7ff fb16 	bl	80053c0 <spotTurn>
			sendToRPI("RPI:d");
 8005d94:	482f      	ldr	r0, [pc, #188]	; (8005e54 <StartDefaultTask+0x344>)
 8005d96:	f7fe f82d 	bl	8003df4 <sendToRPI>
			break;
 8005d9a:	e03c      	b.n	8005e16 <StartDefaultTask+0x306>
		case 'p': // take photo
			sendToRPI("RPI:d");
 8005d9c:	482d      	ldr	r0, [pc, #180]	; (8005e54 <StartDefaultTask+0x344>)
 8005d9e:	f7fe f829 	bl	8003df4 <sendToRPI>
			osDelay(1000);
 8005da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005da6:	f007 fa6e 	bl	800d286 <osDelay>
			sendToRPI("RPI:s"); // command for rpi to take photo
 8005daa:	482b      	ldr	r0, [pc, #172]	; (8005e58 <StartDefaultTask+0x348>)
 8005dac:	f7fe f822 	bl	8003df4 <sendToRPI>
			osDelay(1000);
 8005db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005db4:	f007 fa67 	bl	800d286 <osDelay>
			break;
 8005db8:	e02d      	b.n	8005e16 <StartDefaultTask+0x306>
		case 'u':
			moveUltra();
 8005dba:	f7fd f807 	bl	8002dcc <moveUltra>
			sendToRPI("RPI:d");
 8005dbe:	4825      	ldr	r0, [pc, #148]	; (8005e54 <StartDefaultTask+0x344>)
 8005dc0:	f7fe f818 	bl	8003df4 <sendToRPI>
			osDelay(50);
 8005dc4:	2032      	movs	r0, #50	; 0x32
 8005dc6:	f007 fa5e 	bl	800d286 <osDelay>
			sendToRPI("RPI:s"); // command for rpi to take photo
 8005dca:	4823      	ldr	r0, [pc, #140]	; (8005e58 <StartDefaultTask+0x348>)
 8005dcc:	f7fe f812 	bl	8003df4 <sendToRPI>
//			osDelay(1000);
			break;
 8005dd0:	e021      	b.n	8005e16 <StartDefaultTask+0x306>
		case 't': // tln or trn
			task2A(data);
 8005dd2:	4b18      	ldr	r3, [pc, #96]	; (8005e34 <StartDefaultTask+0x324>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fb fe26 	bl	8001a28 <task2A>
			sendToRPI("RPI:d");
 8005ddc:	481d      	ldr	r0, [pc, #116]	; (8005e54 <StartDefaultTask+0x344>)
 8005dde:	f7fe f809 	bl	8003df4 <sendToRPI>
			osDelay(50);
 8005de2:	2032      	movs	r0, #50	; 0x32
 8005de4:	f007 fa4f 	bl	800d286 <osDelay>
			sendToRPI("RPI:s"); // command for rpi to take photo
 8005de8:	481b      	ldr	r0, [pc, #108]	; (8005e58 <StartDefaultTask+0x348>)
 8005dea:	f7fe f803 	bl	8003df4 <sendToRPI>
//			osDelay(1000);
			break;
 8005dee:	e012      	b.n	8005e16 <StartDefaultTask+0x306>
		case 'T': // when first obstacle goes right-> Tln or Trn
			task2A2(data);
 8005df0:	4b10      	ldr	r3, [pc, #64]	; (8005e34 <StartDefaultTask+0x324>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fc f803 	bl	8001e00 <task2A2>
			sendToRPI("RPI:d");
 8005dfa:	4816      	ldr	r0, [pc, #88]	; (8005e54 <StartDefaultTask+0x344>)
 8005dfc:	f7fd fffa 	bl	8003df4 <sendToRPI>
			break;
 8005e00:	e009      	b.n	8005e16 <StartDefaultTask+0x306>
		case 'Y': // when first obstacle goes left-> Yln or Yrn
			task2A2L(data);
 8005e02:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <StartDefaultTask+0x324>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fc fbf2 	bl	80025f0 <task2A2L>
			sendToRPI("RPI:d");
 8005e0c:	4811      	ldr	r0, [pc, #68]	; (8005e54 <StartDefaultTask+0x344>)
 8005e0e:	f7fd fff1 	bl	8003df4 <sendToRPI>
			break;
 8005e12:	e000      	b.n	8005e16 <StartDefaultTask+0x306>
		default:
			break;
 8005e14:	bf00      	nop
		}

		data = 0;
 8005e16:	4b07      	ldr	r3, [pc, #28]	; (8005e34 <StartDefaultTask+0x324>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
	}
	osDelay(50);
 8005e1c:	2032      	movs	r0, #50	; 0x32
 8005e1e:	f007 fa32 	bl	800d286 <osDelay>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8005e22:	e68e      	b.n	8005b42 <StartDefaultTask+0x32>
 8005e24:	20000428 	.word	0x20000428
 8005e28:	200003c0 	.word	0x200003c0
 8005e2c:	20000414 	.word	0x20000414
 8005e30:	20000429 	.word	0x20000429
 8005e34:	2000042c 	.word	0x2000042c
 8005e38:	2000042a 	.word	0x2000042a
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	20000258 	.word	0x20000258
 8005e44:	51eb851f 	.word	0x51eb851f
 8005e48:	20000430 	.word	0x20000430
 8005e4c:	20000431 	.word	0x20000431
 8005e50:	42480000 	.word	0x42480000
 8005e54:	080146d4 	.word	0x080146d4
 8005e58:	080146dc 	.word	0x080146dc

08005e5c <oled_show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_oled_show */
void oled_show(void *argument)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN oled_show */
  /* Infinite loop */


	for(;;)
 8005e64:	e7fe      	b.n	8005e64 <oled_show+0x8>
	...

08005e68 <gyro_read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gyro_read */
void gyro_read(void *argument)
{
 8005e68:	b5b0      	push	{r4, r5, r7, lr}
 8005e6a:	b090      	sub	sp, #64	; 0x40
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gyro_read */
  /* Infinite loop */
  uint8_t val[2] = {0,0};
 8005e70:	2300      	movs	r3, #0
 8005e72:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t offset_show[20];
  int16_t angularSpeed = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint32_t tick = 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  int dir, offset;
  offset = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	637b      	str	r3, [r7, #52]	; 0x34

  gyroInit();
 8005e80:	f7ff fe02 	bl	8005a88 <gyroInit>
  gyroStart();
 8005e84:	f7ff fdee 	bl	8005a64 <gyroStart>
  tick = HAL_GetTick();
 8005e88:	f001 f816 	bl	8006eb8 <HAL_GetTick>
 8005e8c:	63f8      	str	r0, [r7, #60]	; 0x3c
  osDelayUntil(10);
 8005e8e:	200a      	movs	r0, #10
 8005e90:	f007 fa14 	bl	800d2bc <osDelayUntil>
  actualAngle=0;
 8005e94:	4966      	ldr	r1, [pc, #408]	; (8006030 <gyro_read+0x1c8>)
 8005e96:	f04f 0200 	mov.w	r2, #0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	e9c1 2300 	strd	r2, r3, [r1]

  for(;;)
  {

	  if(HAL_GetTick() - tick >= 100L)
 8005ea2:	f001 f809 	bl	8006eb8 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b63      	cmp	r3, #99	; 0x63
 8005eae:	d9f8      	bls.n	8005ea2 <gyro_read+0x3a>
	  {

		  //read gyro value Z-axis
		  readByte(0x37, val);
 8005eb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	2037      	movs	r0, #55	; 0x37
 8005eb8:	f7ff fd84 	bl	80059c4 <readByte>
		  //Angle per >100 ticks
		  angularSpeed = (val[0] << 8) | val[1];
 8005ebc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	b21a      	sxth	r2, r3
 8005ec4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005ec8:	b21b      	sxth	r3, r3
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	877b      	strh	r3, [r7, #58]	; 0x3a


		  if(moving || moveStraight)
 8005ece:	4b59      	ldr	r3, [pc, #356]	; (8006034 <gyro_read+0x1cc>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d104      	bne.n	8005ee0 <gyro_read+0x78>
 8005ed6:	4b58      	ldr	r3, [pc, #352]	; (8006038 <gyro_read+0x1d0>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 8095 	beq.w	800600a <gyro_read+0x1a2>
		  {
//			  actualAngle += (double)(angularSpeed + 0.5)*((HAL_GetTick() - tick)/16400.0)*1.02;
			  totalAngle += (double)(angularSpeed + 0.5)*((HAL_GetTick() - tick)/16400.0)*1.02;
 8005ee0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fa fb1d 	bl	8000524 <__aeabi_i2d>
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	4b53      	ldr	r3, [pc, #332]	; (800603c <gyro_read+0x1d4>)
 8005ef0:	f7fa f9cc 	bl	800028c <__adddf3>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4614      	mov	r4, r2
 8005efa:	461d      	mov	r5, r3
 8005efc:	f000 ffdc 	bl	8006eb8 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fa fafc 	bl	8000504 <__aeabi_ui2d>
 8005f0c:	a344      	add	r3, pc, #272	; (adr r3, 8006020 <gyro_read+0x1b8>)
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f7fa fc9b 	bl	800084c <__aeabi_ddiv>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	4629      	mov	r1, r5
 8005f1e:	f7fa fb6b 	bl	80005f8 <__aeabi_dmul>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4610      	mov	r0, r2
 8005f28:	4619      	mov	r1, r3
 8005f2a:	a33f      	add	r3, pc, #252	; (adr r3, 8006028 <gyro_read+0x1c0>)
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	f7fa fb62 	bl	80005f8 <__aeabi_dmul>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4b40      	ldr	r3, [pc, #256]	; (8006040 <gyro_read+0x1d8>)
 8005f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f42:	f7fa f9a3 	bl	800028c <__adddf3>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	493d      	ldr	r1, [pc, #244]	; (8006040 <gyro_read+0x1d8>)
 8005f4c:	e9c1 2300 	strd	r2, r3, [r1]
			  actualAngle += (double)(angularSpeed + 0.5)*((HAL_GetTick() - tick)/16400.0)*1.02;
 8005f50:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fa fae5 	bl	8000524 <__aeabi_i2d>
 8005f5a:	f04f 0200 	mov.w	r2, #0
 8005f5e:	4b37      	ldr	r3, [pc, #220]	; (800603c <gyro_read+0x1d4>)
 8005f60:	f7fa f994 	bl	800028c <__adddf3>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4614      	mov	r4, r2
 8005f6a:	461d      	mov	r5, r3
 8005f6c:	f000 ffa4 	bl	8006eb8 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fa fac4 	bl	8000504 <__aeabi_ui2d>
 8005f7c:	a328      	add	r3, pc, #160	; (adr r3, 8006020 <gyro_read+0x1b8>)
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	f7fa fc63 	bl	800084c <__aeabi_ddiv>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	f7fa fb33 	bl	80005f8 <__aeabi_dmul>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4610      	mov	r0, r2
 8005f98:	4619      	mov	r1, r3
 8005f9a:	a323      	add	r3, pc, #140	; (adr r3, 8006028 <gyro_read+0x1c0>)
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	f7fa fb2a 	bl	80005f8 <__aeabi_dmul>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	4b20      	ldr	r3, [pc, #128]	; (8006030 <gyro_read+0x1c8>)
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	f7fa f96b 	bl	800028c <__adddf3>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	491d      	ldr	r1, [pc, #116]	; (8006030 <gyro_read+0x1c8>)
 8005fbc:	e9c1 2300 	strd	r2, r3, [r1]

//			  if(actualAngle >= 720)
//			  {
//				  actualAngle = 0;
//			  }
			  if(totalAngle >= 720)
 8005fc0:	4b1f      	ldr	r3, [pc, #124]	; (8006040 <gyro_read+0x1d8>)
 8005fc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	4b1e      	ldr	r3, [pc, #120]	; (8006044 <gyro_read+0x1dc>)
 8005fcc:	f7fa fd9a 	bl	8000b04 <__aeabi_dcmpge>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d006      	beq.n	8005fe4 <gyro_read+0x17c>
			  {
				  totalAngle = 0;
 8005fd6:	491a      	ldr	r1, [pc, #104]	; (8006040 <gyro_read+0x1d8>)
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	e9c1 2300 	strd	r2, r3, [r1]
			  }
			  if(actualAngle >= 720)
 8005fe4:	4b12      	ldr	r3, [pc, #72]	; (8006030 <gyro_read+0x1c8>)
 8005fe6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	4b15      	ldr	r3, [pc, #84]	; (8006044 <gyro_read+0x1dc>)
 8005ff0:	f7fa fd88 	bl	8000b04 <__aeabi_dcmpge>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00e      	beq.n	8006018 <gyro_read+0x1b0>
			  {
				  actualAngle = 0;
 8005ffa:	490d      	ldr	r1, [pc, #52]	; (8006030 <gyro_read+0x1c8>)
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	e9c1 2300 	strd	r2, r3, [r1]
			  if(actualAngle >= 720)
 8006008:	e006      	b.n	8006018 <gyro_read+0x1b0>
			  }
		  }
		  else
		  {
			  totalAngle = 0;
 800600a:	490d      	ldr	r1, [pc, #52]	; (8006040 <gyro_read+0x1d8>)
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	f04f 0300 	mov.w	r3, #0
 8006014:	e9c1 2300 	strd	r2, r3, [r1]
//

//		  sprintf(offset_show, "angle:: %5d\0", (int)(actualAngle));
//		  OLED_ShowString(10,10, offset_show);
//		  OLED_Refresh_Gram();
		  tick = HAL_GetTick();
 8006018:	f000 ff4e 	bl	8006eb8 <HAL_GetTick>
 800601c:	63f8      	str	r0, [r7, #60]	; 0x3c
	  if(HAL_GetTick() - tick >= 100L)
 800601e:	e740      	b.n	8005ea2 <gyro_read+0x3a>
 8006020:	00000000 	.word	0x00000000
 8006024:	40d00400 	.word	0x40d00400
 8006028:	851eb852 	.word	0x851eb852
 800602c:	3ff051eb 	.word	0x3ff051eb
 8006030:	20000420 	.word	0x20000420
 8006034:	20000414 	.word	0x20000414
 8006038:	20000415 	.word	0x20000415
 800603c:	3fe00000 	.word	0x3fe00000
 8006040:	20000418 	.word	0x20000418
 8006044:	40868000 	.word	0x40868000

08006048 <servoMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servoMotor */
void servoMotor(void *argument)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN servoMotor */
	uint8_t message[20];
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   //will call callback function when interrupt is detected
 8006050:	2100      	movs	r1, #0
 8006052:	4806      	ldr	r0, [pc, #24]	; (800606c <servoMotor+0x24>)
 8006054:	f004 fc7c 	bl	800a950 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8006058:	210c      	movs	r1, #12
 800605a:	4805      	ldr	r0, [pc, #20]	; (8006070 <servoMotor+0x28>)
 800605c:	f004 fb60 	bl	800a720 <HAL_TIM_PWM_Start>
//		osDelay(2000);
//		htim1.Instance -> CCR4 = LEFT; //left
//		osDelay(2000);
//		htim1.Instance -> CCR4 = STRAIGHT; //centre
//		osDelay(2000);
		HCSR04_Read();
 8006060:	f7fb fc20 	bl	80018a4 <HCSR04_Read>
//		sprintf(message, "distance: %5.2f\0", Distance);
//		OLED_ShowString(10, 50, message);
//		OLED_Refresh_Gram(); //Refresh Ram
		HAL_Delay(200);
 8006064:	20c8      	movs	r0, #200	; 0xc8
 8006066:	f000 ff33 	bl	8006ed0 <HAL_Delay>
		HCSR04_Read();
 800606a:	e7f9      	b.n	8006060 <servoMotor+0x18>
 800606c:	200002e8 	.word	0x200002e8
 8006070:	20000258 	.word	0x20000258

08006074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006074:	b480      	push	{r7}
 8006076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006078:	b672      	cpsid	i
}
 800607a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800607c:	e7fe      	b.n	800607c <Error_Handler+0x8>
	...

08006080 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8006086:	2300      	movs	r3, #0
 8006088:	71fb      	strb	r3, [r7, #7]
 800608a:	e026      	b.n	80060da <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800608c:	79fb      	ldrb	r3, [r7, #7]
 800608e:	3b50      	subs	r3, #80	; 0x50
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2100      	movs	r1, #0
 8006094:	4618      	mov	r0, r3
 8006096:	f000 f82b 	bl	80060f0 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800609a:	2100      	movs	r1, #0
 800609c:	2000      	movs	r0, #0
 800609e:	f000 f827 	bl	80060f0 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80060a2:	2100      	movs	r1, #0
 80060a4:	2010      	movs	r0, #16
 80060a6:	f000 f823 	bl	80060f0 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80060aa:	2300      	movs	r3, #0
 80060ac:	71bb      	strb	r3, [r7, #6]
 80060ae:	e00d      	b.n	80060cc <OLED_Refresh_Gram+0x4c>
 80060b0:	79ba      	ldrb	r2, [r7, #6]
 80060b2:	79fb      	ldrb	r3, [r7, #7]
 80060b4:	490d      	ldr	r1, [pc, #52]	; (80060ec <OLED_Refresh_Gram+0x6c>)
 80060b6:	00d2      	lsls	r2, r2, #3
 80060b8:	440a      	add	r2, r1
 80060ba:	4413      	add	r3, r2
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2101      	movs	r1, #1
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 f815 	bl	80060f0 <OLED_WR_Byte>
 80060c6:	79bb      	ldrb	r3, [r7, #6]
 80060c8:	3301      	adds	r3, #1
 80060ca:	71bb      	strb	r3, [r7, #6]
 80060cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	daed      	bge.n	80060b0 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	3301      	adds	r3, #1
 80060d8:	71fb      	strb	r3, [r7, #7]
 80060da:	79fb      	ldrb	r3, [r7, #7]
 80060dc:	2b07      	cmp	r3, #7
 80060de:	d9d5      	bls.n	800608c <OLED_Refresh_Gram+0xc>
	}   
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000460 	.word	0x20000460

080060f0 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	4603      	mov	r3, r0
 80060f8:	460a      	mov	r2, r1
 80060fa:	71fb      	strb	r3, [r7, #7]
 80060fc:	4613      	mov	r3, r2
 80060fe:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8006100:	79bb      	ldrb	r3, [r7, #6]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d006      	beq.n	8006114 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8006106:	2201      	movs	r2, #1
 8006108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800610c:	481c      	ldr	r0, [pc, #112]	; (8006180 <OLED_WR_Byte+0x90>)
 800610e:	f001 fa51 	bl	80075b4 <HAL_GPIO_WritePin>
 8006112:	e005      	b.n	8006120 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8006114:	2200      	movs	r2, #0
 8006116:	f44f 7180 	mov.w	r1, #256	; 0x100
 800611a:	4819      	ldr	r0, [pc, #100]	; (8006180 <OLED_WR_Byte+0x90>)
 800611c:	f001 fa4a 	bl	80075b4 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8006120:	2300      	movs	r3, #0
 8006122:	73fb      	strb	r3, [r7, #15]
 8006124:	e01e      	b.n	8006164 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8006126:	2200      	movs	r2, #0
 8006128:	2120      	movs	r1, #32
 800612a:	4815      	ldr	r0, [pc, #84]	; (8006180 <OLED_WR_Byte+0x90>)
 800612c:	f001 fa42 	bl	80075b4 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8006130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006134:	2b00      	cmp	r3, #0
 8006136:	da05      	bge.n	8006144 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8006138:	2201      	movs	r2, #1
 800613a:	2140      	movs	r1, #64	; 0x40
 800613c:	4810      	ldr	r0, [pc, #64]	; (8006180 <OLED_WR_Byte+0x90>)
 800613e:	f001 fa39 	bl	80075b4 <HAL_GPIO_WritePin>
 8006142:	e004      	b.n	800614e <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8006144:	2200      	movs	r2, #0
 8006146:	2140      	movs	r1, #64	; 0x40
 8006148:	480d      	ldr	r0, [pc, #52]	; (8006180 <OLED_WR_Byte+0x90>)
 800614a:	f001 fa33 	bl	80075b4 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800614e:	2201      	movs	r2, #1
 8006150:	2120      	movs	r1, #32
 8006152:	480b      	ldr	r0, [pc, #44]	; (8006180 <OLED_WR_Byte+0x90>)
 8006154:	f001 fa2e 	bl	80075b4 <HAL_GPIO_WritePin>
		dat<<=1;   
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	3301      	adds	r3, #1
 8006162:	73fb      	strb	r3, [r7, #15]
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	2b07      	cmp	r3, #7
 8006168:	d9dd      	bls.n	8006126 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800616a:	2201      	movs	r2, #1
 800616c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006170:	4803      	ldr	r0, [pc, #12]	; (8006180 <OLED_WR_Byte+0x90>)
 8006172:	f001 fa1f 	bl	80075b4 <HAL_GPIO_WritePin>
} 
 8006176:	bf00      	nop
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40021000 	.word	0x40021000

08006184 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800618a:	2300      	movs	r3, #0
 800618c:	71fb      	strb	r3, [r7, #7]
 800618e:	e014      	b.n	80061ba <OLED_Clear+0x36>
 8006190:	2300      	movs	r3, #0
 8006192:	71bb      	strb	r3, [r7, #6]
 8006194:	e00a      	b.n	80061ac <OLED_Clear+0x28>
 8006196:	79ba      	ldrb	r2, [r7, #6]
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	490c      	ldr	r1, [pc, #48]	; (80061cc <OLED_Clear+0x48>)
 800619c:	00d2      	lsls	r2, r2, #3
 800619e:	440a      	add	r2, r1
 80061a0:	4413      	add	r3, r2
 80061a2:	2200      	movs	r2, #0
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	79bb      	ldrb	r3, [r7, #6]
 80061a8:	3301      	adds	r3, #1
 80061aa:	71bb      	strb	r3, [r7, #6]
 80061ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	daf0      	bge.n	8006196 <OLED_Clear+0x12>
 80061b4:	79fb      	ldrb	r3, [r7, #7]
 80061b6:	3301      	adds	r3, #1
 80061b8:	71fb      	strb	r3, [r7, #7]
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	2b07      	cmp	r3, #7
 80061be:	d9e7      	bls.n	8006190 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80061c0:	f7ff ff5e 	bl	8006080 <OLED_Refresh_Gram>
}
 80061c4:	bf00      	nop
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20000460 	.word	0x20000460

080061d0 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	4603      	mov	r3, r0
 80061d8:	71fb      	strb	r3, [r7, #7]
 80061da:	460b      	mov	r3, r1
 80061dc:	71bb      	strb	r3, [r7, #6]
 80061de:	4613      	mov	r3, r2
 80061e0:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80061e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	db41      	blt.n	8006272 <OLED_DrawPoint+0xa2>
 80061ee:	79bb      	ldrb	r3, [r7, #6]
 80061f0:	2b3f      	cmp	r3, #63	; 0x3f
 80061f2:	d83e      	bhi.n	8006272 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80061f4:	79bb      	ldrb	r3, [r7, #6]
 80061f6:	08db      	lsrs	r3, r3, #3
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	f1c3 0307 	rsb	r3, r3, #7
 80061fe:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8006200:	79bb      	ldrb	r3, [r7, #6]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8006208:	7b7b      	ldrb	r3, [r7, #13]
 800620a:	f1c3 0307 	rsb	r3, r3, #7
 800620e:	2201      	movs	r2, #1
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8006216:	797b      	ldrb	r3, [r7, #5]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d012      	beq.n	8006242 <OLED_DrawPoint+0x72>
 800621c:	79fa      	ldrb	r2, [r7, #7]
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	4917      	ldr	r1, [pc, #92]	; (8006280 <OLED_DrawPoint+0xb0>)
 8006222:	00d2      	lsls	r2, r2, #3
 8006224:	440a      	add	r2, r1
 8006226:	4413      	add	r3, r2
 8006228:	7818      	ldrb	r0, [r3, #0]
 800622a:	79fa      	ldrb	r2, [r7, #7]
 800622c:	7bbb      	ldrb	r3, [r7, #14]
 800622e:	7bf9      	ldrb	r1, [r7, #15]
 8006230:	4301      	orrs	r1, r0
 8006232:	b2c8      	uxtb	r0, r1
 8006234:	4912      	ldr	r1, [pc, #72]	; (8006280 <OLED_DrawPoint+0xb0>)
 8006236:	00d2      	lsls	r2, r2, #3
 8006238:	440a      	add	r2, r1
 800623a:	4413      	add	r3, r2
 800623c:	4602      	mov	r2, r0
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	e018      	b.n	8006274 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8006242:	79fa      	ldrb	r2, [r7, #7]
 8006244:	7bbb      	ldrb	r3, [r7, #14]
 8006246:	490e      	ldr	r1, [pc, #56]	; (8006280 <OLED_DrawPoint+0xb0>)
 8006248:	00d2      	lsls	r2, r2, #3
 800624a:	440a      	add	r2, r1
 800624c:	4413      	add	r3, r2
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	b25a      	sxtb	r2, r3
 8006252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006256:	43db      	mvns	r3, r3
 8006258:	b25b      	sxtb	r3, r3
 800625a:	4013      	ands	r3, r2
 800625c:	b259      	sxtb	r1, r3
 800625e:	79fa      	ldrb	r2, [r7, #7]
 8006260:	7bbb      	ldrb	r3, [r7, #14]
 8006262:	b2c8      	uxtb	r0, r1
 8006264:	4906      	ldr	r1, [pc, #24]	; (8006280 <OLED_DrawPoint+0xb0>)
 8006266:	00d2      	lsls	r2, r2, #3
 8006268:	440a      	add	r2, r1
 800626a:	4413      	add	r3, r2
 800626c:	4602      	mov	r2, r0
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	e000      	b.n	8006274 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8006272:	bf00      	nop
}
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	20000460 	.word	0x20000460

08006284 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8006284:	b590      	push	{r4, r7, lr}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	4604      	mov	r4, r0
 800628c:	4608      	mov	r0, r1
 800628e:	4611      	mov	r1, r2
 8006290:	461a      	mov	r2, r3
 8006292:	4623      	mov	r3, r4
 8006294:	71fb      	strb	r3, [r7, #7]
 8006296:	4603      	mov	r3, r0
 8006298:	71bb      	strb	r3, [r7, #6]
 800629a:	460b      	mov	r3, r1
 800629c:	717b      	strb	r3, [r7, #5]
 800629e:	4613      	mov	r3, r2
 80062a0:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80062a2:	79bb      	ldrb	r3, [r7, #6]
 80062a4:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80062a6:	797b      	ldrb	r3, [r7, #5]
 80062a8:	3b20      	subs	r3, #32
 80062aa:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80062ac:	2300      	movs	r3, #0
 80062ae:	73bb      	strb	r3, [r7, #14]
 80062b0:	e04d      	b.n	800634e <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80062b2:	793b      	ldrb	r3, [r7, #4]
 80062b4:	2b0c      	cmp	r3, #12
 80062b6:	d10b      	bne.n	80062d0 <OLED_ShowChar+0x4c>
 80062b8:	797a      	ldrb	r2, [r7, #5]
 80062ba:	7bb9      	ldrb	r1, [r7, #14]
 80062bc:	4828      	ldr	r0, [pc, #160]	; (8006360 <OLED_ShowChar+0xdc>)
 80062be:	4613      	mov	r3, r2
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4403      	add	r3, r0
 80062c8:	440b      	add	r3, r1
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	73fb      	strb	r3, [r7, #15]
 80062ce:	e007      	b.n	80062e0 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80062d0:	797a      	ldrb	r2, [r7, #5]
 80062d2:	7bbb      	ldrb	r3, [r7, #14]
 80062d4:	4923      	ldr	r1, [pc, #140]	; (8006364 <OLED_ShowChar+0xe0>)
 80062d6:	0112      	lsls	r2, r2, #4
 80062d8:	440a      	add	r2, r1
 80062da:	4413      	add	r3, r2
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80062e0:	2300      	movs	r3, #0
 80062e2:	737b      	strb	r3, [r7, #13]
 80062e4:	e02d      	b.n	8006342 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80062e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	da07      	bge.n	80062fe <OLED_ShowChar+0x7a>
 80062ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80062f2:	79b9      	ldrb	r1, [r7, #6]
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff ff6a 	bl	80061d0 <OLED_DrawPoint>
 80062fc:	e00c      	b.n	8006318 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80062fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006302:	2b00      	cmp	r3, #0
 8006304:	bf0c      	ite	eq
 8006306:	2301      	moveq	r3, #1
 8006308:	2300      	movne	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	79b9      	ldrb	r1, [r7, #6]
 8006310:	79fb      	ldrb	r3, [r7, #7]
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff ff5c 	bl	80061d0 <OLED_DrawPoint>
			temp<<=1;
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	73fb      	strb	r3, [r7, #15]
			y++;
 800631e:	79bb      	ldrb	r3, [r7, #6]
 8006320:	3301      	adds	r3, #1
 8006322:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8006324:	79ba      	ldrb	r2, [r7, #6]
 8006326:	7b3b      	ldrb	r3, [r7, #12]
 8006328:	1ad2      	subs	r2, r2, r3
 800632a:	793b      	ldrb	r3, [r7, #4]
 800632c:	429a      	cmp	r2, r3
 800632e:	d105      	bne.n	800633c <OLED_ShowChar+0xb8>
			{
				y=y0;
 8006330:	7b3b      	ldrb	r3, [r7, #12]
 8006332:	71bb      	strb	r3, [r7, #6]
				x++;
 8006334:	79fb      	ldrb	r3, [r7, #7]
 8006336:	3301      	adds	r3, #1
 8006338:	71fb      	strb	r3, [r7, #7]
				break;
 800633a:	e005      	b.n	8006348 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800633c:	7b7b      	ldrb	r3, [r7, #13]
 800633e:	3301      	adds	r3, #1
 8006340:	737b      	strb	r3, [r7, #13]
 8006342:	7b7b      	ldrb	r3, [r7, #13]
 8006344:	2b07      	cmp	r3, #7
 8006346:	d9ce      	bls.n	80062e6 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	3301      	adds	r3, #1
 800634c:	73bb      	strb	r3, [r7, #14]
 800634e:	7bba      	ldrb	r2, [r7, #14]
 8006350:	793b      	ldrb	r3, [r7, #4]
 8006352:	429a      	cmp	r2, r3
 8006354:	d3ad      	bcc.n	80062b2 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8006356:	bf00      	nop
 8006358:	bf00      	nop
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	bd90      	pop	{r4, r7, pc}
 8006360:	0801478c 	.word	0x0801478c
 8006364:	08014c00 	.word	0x08014c00

08006368 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af02      	add	r7, sp, #8
 800636e:	4603      	mov	r3, r0
 8006370:	603a      	str	r2, [r7, #0]
 8006372:	71fb      	strb	r3, [r7, #7]
 8006374:	460b      	mov	r3, r1
 8006376:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8006378:	e01f      	b.n	80063ba <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	2b7a      	cmp	r3, #122	; 0x7a
 800637e:	d904      	bls.n	800638a <OLED_ShowString+0x22>
 8006380:	2300      	movs	r3, #0
 8006382:	71fb      	strb	r3, [r7, #7]
 8006384:	79bb      	ldrb	r3, [r7, #6]
 8006386:	3310      	adds	r3, #16
 8006388:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800638a:	79bb      	ldrb	r3, [r7, #6]
 800638c:	2b3a      	cmp	r3, #58	; 0x3a
 800638e:	d905      	bls.n	800639c <OLED_ShowString+0x34>
 8006390:	2300      	movs	r3, #0
 8006392:	71fb      	strb	r3, [r7, #7]
 8006394:	79fb      	ldrb	r3, [r7, #7]
 8006396:	71bb      	strb	r3, [r7, #6]
 8006398:	f7ff fef4 	bl	8006184 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781a      	ldrb	r2, [r3, #0]
 80063a0:	79b9      	ldrb	r1, [r7, #6]
 80063a2:	79f8      	ldrb	r0, [r7, #7]
 80063a4:	2301      	movs	r3, #1
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	230c      	movs	r3, #12
 80063aa:	f7ff ff6b 	bl	8006284 <OLED_ShowChar>
        x+=8;
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	3308      	adds	r3, #8
 80063b2:	71fb      	strb	r3, [r7, #7]
        p++;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	3301      	adds	r3, #1
 80063b8:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1db      	bne.n	800637a <OLED_ShowString+0x12>
    }  
}	 
 80063c2:	bf00      	nop
 80063c4:	bf00      	nop
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <OLED_Init>:

void OLED_Init(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80063d0:	f003 fc7e 	bl	8009cd0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80063d4:	4b41      	ldr	r3, [pc, #260]	; (80064dc <OLED_Init+0x110>)
 80063d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d8:	4a40      	ldr	r2, [pc, #256]	; (80064dc <OLED_Init+0x110>)
 80063da:	f023 0301 	bic.w	r3, r3, #1
 80063de:	6713      	str	r3, [r2, #112]	; 0x70
 80063e0:	4b3e      	ldr	r3, [pc, #248]	; (80064dc <OLED_Init+0x110>)
 80063e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e4:	4a3d      	ldr	r2, [pc, #244]	; (80064dc <OLED_Init+0x110>)
 80063e6:	f023 0304 	bic.w	r3, r3, #4
 80063ea:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80063ec:	f003 fc84 	bl	8009cf8 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80063f0:	2200      	movs	r2, #0
 80063f2:	2180      	movs	r1, #128	; 0x80
 80063f4:	483a      	ldr	r0, [pc, #232]	; (80064e0 <OLED_Init+0x114>)
 80063f6:	f001 f8dd 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80063fa:	2064      	movs	r0, #100	; 0x64
 80063fc:	f000 fd68 	bl	8006ed0 <HAL_Delay>
	OLED_RST_Set();
 8006400:	2201      	movs	r2, #1
 8006402:	2180      	movs	r1, #128	; 0x80
 8006404:	4836      	ldr	r0, [pc, #216]	; (80064e0 <OLED_Init+0x114>)
 8006406:	f001 f8d5 	bl	80075b4 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800640a:	2100      	movs	r1, #0
 800640c:	20ae      	movs	r0, #174	; 0xae
 800640e:	f7ff fe6f 	bl	80060f0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8006412:	2100      	movs	r1, #0
 8006414:	20d5      	movs	r0, #213	; 0xd5
 8006416:	f7ff fe6b 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800641a:	2100      	movs	r1, #0
 800641c:	2050      	movs	r0, #80	; 0x50
 800641e:	f7ff fe67 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8006422:	2100      	movs	r1, #0
 8006424:	20a8      	movs	r0, #168	; 0xa8
 8006426:	f7ff fe63 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800642a:	2100      	movs	r1, #0
 800642c:	203f      	movs	r0, #63	; 0x3f
 800642e:	f7ff fe5f 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8006432:	2100      	movs	r1, #0
 8006434:	20d3      	movs	r0, #211	; 0xd3
 8006436:	f7ff fe5b 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800643a:	2100      	movs	r1, #0
 800643c:	2000      	movs	r0, #0
 800643e:	f7ff fe57 	bl	80060f0 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8006442:	2100      	movs	r1, #0
 8006444:	2040      	movs	r0, #64	; 0x40
 8006446:	f7ff fe53 	bl	80060f0 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800644a:	2100      	movs	r1, #0
 800644c:	208d      	movs	r0, #141	; 0x8d
 800644e:	f7ff fe4f 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8006452:	2100      	movs	r1, #0
 8006454:	2014      	movs	r0, #20
 8006456:	f7ff fe4b 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800645a:	2100      	movs	r1, #0
 800645c:	2020      	movs	r0, #32
 800645e:	f7ff fe47 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8006462:	2100      	movs	r1, #0
 8006464:	2002      	movs	r0, #2
 8006466:	f7ff fe43 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800646a:	2100      	movs	r1, #0
 800646c:	20a1      	movs	r0, #161	; 0xa1
 800646e:	f7ff fe3f 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8006472:	2100      	movs	r1, #0
 8006474:	20c0      	movs	r0, #192	; 0xc0
 8006476:	f7ff fe3b 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800647a:	2100      	movs	r1, #0
 800647c:	20da      	movs	r0, #218	; 0xda
 800647e:	f7ff fe37 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8006482:	2100      	movs	r1, #0
 8006484:	2012      	movs	r0, #18
 8006486:	f7ff fe33 	bl	80060f0 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800648a:	2100      	movs	r1, #0
 800648c:	2081      	movs	r0, #129	; 0x81
 800648e:	f7ff fe2f 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8006492:	2100      	movs	r1, #0
 8006494:	20ef      	movs	r0, #239	; 0xef
 8006496:	f7ff fe2b 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800649a:	2100      	movs	r1, #0
 800649c:	20d9      	movs	r0, #217	; 0xd9
 800649e:	f7ff fe27 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80064a2:	2100      	movs	r1, #0
 80064a4:	20f1      	movs	r0, #241	; 0xf1
 80064a6:	f7ff fe23 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80064aa:	2100      	movs	r1, #0
 80064ac:	20db      	movs	r0, #219	; 0xdb
 80064ae:	f7ff fe1f 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80064b2:	2100      	movs	r1, #0
 80064b4:	2030      	movs	r0, #48	; 0x30
 80064b6:	f7ff fe1b 	bl	80060f0 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80064ba:	2100      	movs	r1, #0
 80064bc:	20a4      	movs	r0, #164	; 0xa4
 80064be:	f7ff fe17 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80064c2:	2100      	movs	r1, #0
 80064c4:	20a6      	movs	r0, #166	; 0xa6
 80064c6:	f7ff fe13 	bl	80060f0 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80064ca:	2100      	movs	r1, #0
 80064cc:	20af      	movs	r0, #175	; 0xaf
 80064ce:	f7ff fe0f 	bl	80060f0 <OLED_WR_Byte>
	OLED_Clear(); 
 80064d2:	f7ff fe57 	bl	8006184 <OLED_Clear>
}
 80064d6:	bf00      	nop
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	40023800 	.word	0x40023800
 80064e0:	40021000 	.word	0x40021000

080064e4 <PIDController_Init>:
#include "pid.h"
#include "math.h"

void PIDController_Init(PIDController *pid) {
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	615a      	str	r2, [r3, #20]
	pid->prevError  = 0.0f;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	619a      	str	r2, [r3, #24]
	pid->prevMeasurement = 0.0f;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	61da      	str	r2, [r3, #28]
	pid->out = 0;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	621a      	str	r2, [r3, #32]

}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <PIDController_Update>:

int PIDController_Update(PIDController *pid, float setpoint, float measurement, int currentpwm) {
 8006514:	b480      	push	{r7}
 8006516:	b089      	sub	sp, #36	; 0x24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	ed87 0a02 	vstr	s0, [r7, #8]
 8006520:	edc7 0a01 	vstr	s1, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8006526:	ed97 7a02 	vldr	s14, [r7, #8]
 800652a:	edd7 7a01 	vldr	s15, [r7, #4]
 800652e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006532:	edc7 7a07 	vstr	s15, [r7, #28]
    if (isnan(error) == 1) error = 0;
 8006536:	ed97 7a07 	vldr	s14, [r7, #28]
 800653a:	edd7 7a07 	vldr	s15, [r7, #28]
 800653e:	eeb4 7a67 	vcmp.f32	s14, s15
 8006542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006546:	d702      	bvc.n	800654e <PIDController_Update+0x3a>
 8006548:	f04f 0300 	mov.w	r3, #0
 800654c:	61fb      	str	r3, [r7, #28]
	// Proportional
    //int proportional = pid->Kp * error * currentpwm;

    // velocity implementation (instead of distance)
    int proportional;
    if (error >= 0) // positive error, need to increase pwm
 800654e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006552:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800655a:	db1b      	blt.n	8006594 <PIDController_Update+0x80>
    {
    	 proportional = (int)((1 + pid->Kp * (error / setpoint)) * currentpwm); // kP * (1 + percentage of error based on setpoint) * currentpwm
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	ed93 7a00 	vldr	s14, [r3]
 8006562:	ed97 6a07 	vldr	s12, [r7, #28]
 8006566:	edd7 6a02 	vldr	s13, [r7, #8]
 800656a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800656e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006576:	ee37 7a87 	vadd.f32	s14, s15, s14
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	ee07 3a90 	vmov	s15, r3
 8006580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800658c:	ee17 3a90 	vmov	r3, s15
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	e01a      	b.n	80065ca <PIDController_Update+0xb6>
    }
    else // negative error, need to decrease pwm
    {
    	proportional = (int)((1 + pid->Kp * (error / measurement)) * currentpwm); // kP * (1 + percentage of error based on measurement) * currentpwm
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	ed93 7a00 	vldr	s14, [r3]
 800659a:	ed97 6a07 	vldr	s12, [r7, #28]
 800659e:	edd7 6a01 	vldr	s13, [r7, #4]
 80065a2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80065a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	ee07 3a90 	vmov	s15, r3
 80065b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065c4:	ee17 3a90 	vmov	r3, s15
 80065c8:	61bb      	str	r3, [r7, #24]
    }

	// Integral
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError) * currentpwm;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	ee07 3a90 	vmov	s15, r3
 80065d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80065dc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80065e0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80065ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	ed93 6a06 	vldr	s12, [r3, #24]
 80065f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80065f8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80065fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800660a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800660e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006616:	ee17 2a90 	vmov	r2, s15
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	615a      	str	r2, [r3, #20]

	// Anti-wind-up via dynamic integrator clamping
	int limMinInt, limMaxInt;

	// Compute integrator limits
	if (pid->limMax > proportional) {
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	429a      	cmp	r2, r3
 8006626:	da05      	bge.n	8006634 <PIDController_Update+0x120>

		limMaxInt = pid->limMax - proportional;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	e001      	b.n	8006638 <PIDController_Update+0x124>

	} else {

		limMaxInt = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	613b      	str	r3, [r7, #16]

	}

	if (pid->limMin < proportional) {
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	429a      	cmp	r2, r3
 8006640:	dd05      	ble.n	800664e <PIDController_Update+0x13a>

		limMinInt = pid->limMin - proportional;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	e001      	b.n	8006652 <PIDController_Update+0x13e>

	} else {

		limMinInt = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]

	}

	// Clamp integrator
    if (pid->integrator > limMaxInt) {
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	429a      	cmp	r2, r3
 800665a:	da03      	bge.n	8006664 <PIDController_Update+0x150>

        pid->integrator = limMaxInt;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	615a      	str	r2, [r3, #20]
 8006662:	e007      	b.n	8006674 <PIDController_Update+0x160>

    } else if (pid->integrator < limMinInt) {
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	429a      	cmp	r2, r3
 800666c:	dd02      	ble.n	8006674 <PIDController_Update+0x160>

        pid->integrator = limMinInt;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	615a      	str	r2, [r3, #20]

	/*
	* Compute output and apply limits
	*/

    pid->out = proportional + pid->integrator;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	695a      	ldr	r2, [r3, #20]
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	441a      	add	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	621a      	str	r2, [r3, #32]

    if (pid->out > pid->limMax) {
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a1a      	ldr	r2, [r3, #32]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	429a      	cmp	r2, r3
 800668a:	dd04      	ble.n	8006696 <PIDController_Update+0x182>

        pid->out = pid->limMax;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	621a      	str	r2, [r3, #32]
 8006694:	e009      	b.n	80066aa <PIDController_Update+0x196>

    } else if (pid->out < pid->limMin) {
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a1a      	ldr	r2, [r3, #32]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	429a      	cmp	r2, r3
 80066a0:	da03      	bge.n	80066aa <PIDController_Update+0x196>

        pid->out = pid->limMin;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689a      	ldr	r2, [r3, #8]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	621a      	str	r2, [r3, #32]

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	69fa      	ldr	r2, [r7, #28]
 80066ae:	619a      	str	r2, [r3, #24]
    pid->prevMeasurement = measurement;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	61da      	str	r2, [r3, #28]

	/* Return controller output */
    return pid->out;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a1b      	ldr	r3, [r3, #32]

}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3724      	adds	r7, #36	; 0x24
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
	...

080066c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066ce:	2300      	movs	r3, #0
 80066d0:	607b      	str	r3, [r7, #4]
 80066d2:	4b12      	ldr	r3, [pc, #72]	; (800671c <HAL_MspInit+0x54>)
 80066d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d6:	4a11      	ldr	r2, [pc, #68]	; (800671c <HAL_MspInit+0x54>)
 80066d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066dc:	6453      	str	r3, [r2, #68]	; 0x44
 80066de:	4b0f      	ldr	r3, [pc, #60]	; (800671c <HAL_MspInit+0x54>)
 80066e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e6:	607b      	str	r3, [r7, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80066ea:	2300      	movs	r3, #0
 80066ec:	603b      	str	r3, [r7, #0]
 80066ee:	4b0b      	ldr	r3, [pc, #44]	; (800671c <HAL_MspInit+0x54>)
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	4a0a      	ldr	r2, [pc, #40]	; (800671c <HAL_MspInit+0x54>)
 80066f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f8:	6413      	str	r3, [r2, #64]	; 0x40
 80066fa:	4b08      	ldr	r3, [pc, #32]	; (800671c <HAL_MspInit+0x54>)
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006702:	603b      	str	r3, [r7, #0]
 8006704:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006706:	2200      	movs	r2, #0
 8006708:	210f      	movs	r1, #15
 800670a:	f06f 0001 	mvn.w	r0, #1
 800670e:	f000 fcde 	bl	80070ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006712:	bf00      	nop
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	40023800 	.word	0x40023800

08006720 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08a      	sub	sp, #40	; 0x28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006728:	f107 0314 	add.w	r3, r7, #20
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]
 8006730:	605a      	str	r2, [r3, #4]
 8006732:	609a      	str	r2, [r3, #8]
 8006734:	60da      	str	r2, [r3, #12]
 8006736:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a1d      	ldr	r2, [pc, #116]	; (80067b4 <HAL_I2C_MspInit+0x94>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d134      	bne.n	80067ac <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006742:	2300      	movs	r3, #0
 8006744:	613b      	str	r3, [r7, #16]
 8006746:	4b1c      	ldr	r3, [pc, #112]	; (80067b8 <HAL_I2C_MspInit+0x98>)
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	4a1b      	ldr	r2, [pc, #108]	; (80067b8 <HAL_I2C_MspInit+0x98>)
 800674c:	f043 0302 	orr.w	r3, r3, #2
 8006750:	6313      	str	r3, [r2, #48]	; 0x30
 8006752:	4b19      	ldr	r3, [pc, #100]	; (80067b8 <HAL_I2C_MspInit+0x98>)
 8006754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	613b      	str	r3, [r7, #16]
 800675c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GYRO_SCL_Pin|GYRO_SDA_Pin;
 800675e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006764:	2312      	movs	r3, #18
 8006766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006768:	2300      	movs	r3, #0
 800676a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800676c:	2303      	movs	r3, #3
 800676e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006770:	2304      	movs	r3, #4
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006774:	f107 0314 	add.w	r3, r7, #20
 8006778:	4619      	mov	r1, r3
 800677a:	4810      	ldr	r0, [pc, #64]	; (80067bc <HAL_I2C_MspInit+0x9c>)
 800677c:	f000 fd7e 	bl	800727c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <HAL_I2C_MspInit+0x98>)
 8006786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006788:	4a0b      	ldr	r2, [pc, #44]	; (80067b8 <HAL_I2C_MspInit+0x98>)
 800678a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800678e:	6413      	str	r3, [r2, #64]	; 0x40
 8006790:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <HAL_I2C_MspInit+0x98>)
 8006792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800679c:	2200      	movs	r2, #0
 800679e:	2105      	movs	r1, #5
 80067a0:	201f      	movs	r0, #31
 80067a2:	f000 fc94 	bl	80070ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80067a6:	201f      	movs	r0, #31
 80067a8:	f000 fcad 	bl	8007106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80067ac:	bf00      	nop
 80067ae:	3728      	adds	r7, #40	; 0x28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	40005400 	.word	0x40005400
 80067b8:	40023800 	.word	0x40023800
 80067bc:	40020400 	.word	0x40020400

080067c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08a      	sub	sp, #40	; 0x28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067c8:	f107 0314 	add.w	r3, r7, #20
 80067cc:	2200      	movs	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	605a      	str	r2, [r3, #4]
 80067d2:	609a      	str	r2, [r3, #8]
 80067d4:	60da      	str	r2, [r3, #12]
 80067d6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a23      	ldr	r2, [pc, #140]	; (800686c <HAL_TIM_Base_MspInit+0xac>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d10e      	bne.n	8006800 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80067e2:	2300      	movs	r3, #0
 80067e4:	613b      	str	r3, [r7, #16]
 80067e6:	4b22      	ldr	r3, [pc, #136]	; (8006870 <HAL_TIM_Base_MspInit+0xb0>)
 80067e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ea:	4a21      	ldr	r2, [pc, #132]	; (8006870 <HAL_TIM_Base_MspInit+0xb0>)
 80067ec:	f043 0301 	orr.w	r3, r3, #1
 80067f0:	6453      	str	r3, [r2, #68]	; 0x44
 80067f2:	4b1f      	ldr	r3, [pc, #124]	; (8006870 <HAL_TIM_Base_MspInit+0xb0>)
 80067f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	613b      	str	r3, [r7, #16]
 80067fc:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80067fe:	e031      	b.n	8006864 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM8)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a1b      	ldr	r2, [pc, #108]	; (8006874 <HAL_TIM_Base_MspInit+0xb4>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d12c      	bne.n	8006864 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800680a:	2300      	movs	r3, #0
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	4b18      	ldr	r3, [pc, #96]	; (8006870 <HAL_TIM_Base_MspInit+0xb0>)
 8006810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006812:	4a17      	ldr	r2, [pc, #92]	; (8006870 <HAL_TIM_Base_MspInit+0xb0>)
 8006814:	f043 0302 	orr.w	r3, r3, #2
 8006818:	6453      	str	r3, [r2, #68]	; 0x44
 800681a:	4b15      	ldr	r3, [pc, #84]	; (8006870 <HAL_TIM_Base_MspInit+0xb0>)
 800681c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006826:	2300      	movs	r3, #0
 8006828:	60bb      	str	r3, [r7, #8]
 800682a:	4b11      	ldr	r3, [pc, #68]	; (8006870 <HAL_TIM_Base_MspInit+0xb0>)
 800682c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682e:	4a10      	ldr	r2, [pc, #64]	; (8006870 <HAL_TIM_Base_MspInit+0xb0>)
 8006830:	f043 0304 	orr.w	r3, r3, #4
 8006834:	6313      	str	r3, [r2, #48]	; 0x30
 8006836:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <HAL_TIM_Base_MspInit+0xb0>)
 8006838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683a:	f003 0304 	and.w	r3, r3, #4
 800683e:	60bb      	str	r3, [r7, #8]
 8006840:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin|PWMC_Pin|PWMD_Pin;
 8006842:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006848:	2302      	movs	r3, #2
 800684a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800684c:	2300      	movs	r3, #0
 800684e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006850:	2300      	movs	r3, #0
 8006852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006854:	2303      	movs	r3, #3
 8006856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006858:	f107 0314 	add.w	r3, r7, #20
 800685c:	4619      	mov	r1, r3
 800685e:	4806      	ldr	r0, [pc, #24]	; (8006878 <HAL_TIM_Base_MspInit+0xb8>)
 8006860:	f000 fd0c 	bl	800727c <HAL_GPIO_Init>
}
 8006864:	bf00      	nop
 8006866:	3728      	adds	r7, #40	; 0x28
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	40010000 	.word	0x40010000
 8006870:	40023800 	.word	0x40023800
 8006874:	40010400 	.word	0x40010400
 8006878:	40020800 	.word	0x40020800

0800687c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08c      	sub	sp, #48	; 0x30
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006884:	f107 031c 	add.w	r3, r7, #28
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	605a      	str	r2, [r3, #4]
 800688e:	609a      	str	r2, [r3, #8]
 8006890:	60da      	str	r2, [r3, #12]
 8006892:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689c:	d14b      	bne.n	8006936 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800689e:	2300      	movs	r3, #0
 80068a0:	61bb      	str	r3, [r7, #24]
 80068a2:	4b3f      	ldr	r3, [pc, #252]	; (80069a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	4a3e      	ldr	r2, [pc, #248]	; (80069a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80068a8:	f043 0301 	orr.w	r3, r3, #1
 80068ac:	6413      	str	r3, [r2, #64]	; 0x40
 80068ae:	4b3c      	ldr	r3, [pc, #240]	; (80069a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	61bb      	str	r3, [r7, #24]
 80068b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	4b38      	ldr	r3, [pc, #224]	; (80069a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	4a37      	ldr	r2, [pc, #220]	; (80069a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80068c4:	f043 0301 	orr.w	r3, r3, #1
 80068c8:	6313      	str	r3, [r2, #48]	; 0x30
 80068ca:	4b35      	ldr	r3, [pc, #212]	; (80069a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80068cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068d6:	2300      	movs	r3, #0
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	4b31      	ldr	r3, [pc, #196]	; (80069a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80068dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068de:	4a30      	ldr	r2, [pc, #192]	; (80069a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80068e0:	f043 0302 	orr.w	r3, r3, #2
 80068e4:	6313      	str	r3, [r2, #48]	; 0x30
 80068e6:	4b2e      	ldr	r3, [pc, #184]	; (80069a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80068e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	613b      	str	r3, [r7, #16]
 80068f0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA1_Pin;
 80068f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f8:	2302      	movs	r3, #2
 80068fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006900:	2300      	movs	r3, #0
 8006902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006904:	2301      	movs	r3, #1
 8006906:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA1_GPIO_Port, &GPIO_InitStruct);
 8006908:	f107 031c 	add.w	r3, r7, #28
 800690c:	4619      	mov	r1, r3
 800690e:	4825      	ldr	r0, [pc, #148]	; (80069a4 <HAL_TIM_Encoder_MspInit+0x128>)
 8006910:	f000 fcb4 	bl	800727c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA2_Pin;
 8006914:	2308      	movs	r3, #8
 8006916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006918:	2302      	movs	r3, #2
 800691a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800691c:	2300      	movs	r3, #0
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006920:	2300      	movs	r3, #0
 8006922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006924:	2301      	movs	r3, #1
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA2_GPIO_Port, &GPIO_InitStruct);
 8006928:	f107 031c 	add.w	r3, r7, #28
 800692c:	4619      	mov	r1, r3
 800692e:	481e      	ldr	r0, [pc, #120]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006930:	f000 fca4 	bl	800727c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006934:	e030      	b.n	8006998 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a1c      	ldr	r2, [pc, #112]	; (80069ac <HAL_TIM_Encoder_MspInit+0x130>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d12b      	bne.n	8006998 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	4b16      	ldr	r3, [pc, #88]	; (80069a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	4a15      	ldr	r2, [pc, #84]	; (80069a0 <HAL_TIM_Encoder_MspInit+0x124>)
 800694a:	f043 0304 	orr.w	r3, r3, #4
 800694e:	6413      	str	r3, [r2, #64]	; 0x40
 8006950:	4b13      	ldr	r3, [pc, #76]	; (80069a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800695c:	2300      	movs	r3, #0
 800695e:	60bb      	str	r3, [r7, #8]
 8006960:	4b0f      	ldr	r3, [pc, #60]	; (80069a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006964:	4a0e      	ldr	r2, [pc, #56]	; (80069a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8006966:	f043 0302 	orr.w	r3, r3, #2
 800696a:	6313      	str	r3, [r2, #48]	; 0x30
 800696c:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <HAL_TIM_Encoder_MspInit+0x124>)
 800696e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderC1_Pin|EncoderC2_Pin;
 8006978:	23c0      	movs	r3, #192	; 0xc0
 800697a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800697c:	2302      	movs	r3, #2
 800697e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006980:	2300      	movs	r3, #0
 8006982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006984:	2300      	movs	r3, #0
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006988:	2302      	movs	r3, #2
 800698a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800698c:	f107 031c 	add.w	r3, r7, #28
 8006990:	4619      	mov	r1, r3
 8006992:	4805      	ldr	r0, [pc, #20]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006994:	f000 fc72 	bl	800727c <HAL_GPIO_Init>
}
 8006998:	bf00      	nop
 800699a:	3730      	adds	r7, #48	; 0x30
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	40023800 	.word	0x40023800
 80069a4:	40020000 	.word	0x40020000
 80069a8:	40020400 	.word	0x40020400
 80069ac:	40000800 	.word	0x40000800

080069b0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08a      	sub	sp, #40	; 0x28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069b8:	f107 0314 	add.w	r3, r7, #20
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	605a      	str	r2, [r3, #4]
 80069c2:	609a      	str	r2, [r3, #8]
 80069c4:	60da      	str	r2, [r3, #12]
 80069c6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1d      	ldr	r2, [pc, #116]	; (8006a44 <HAL_TIM_IC_MspInit+0x94>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d133      	bne.n	8006a3a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80069d2:	2300      	movs	r3, #0
 80069d4:	613b      	str	r3, [r7, #16]
 80069d6:	4b1c      	ldr	r3, [pc, #112]	; (8006a48 <HAL_TIM_IC_MspInit+0x98>)
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	4a1b      	ldr	r2, [pc, #108]	; (8006a48 <HAL_TIM_IC_MspInit+0x98>)
 80069dc:	f043 0302 	orr.w	r3, r3, #2
 80069e0:	6413      	str	r3, [r2, #64]	; 0x40
 80069e2:	4b19      	ldr	r3, [pc, #100]	; (8006a48 <HAL_TIM_IC_MspInit+0x98>)
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	613b      	str	r3, [r7, #16]
 80069ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	4b15      	ldr	r3, [pc, #84]	; (8006a48 <HAL_TIM_IC_MspInit+0x98>)
 80069f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f6:	4a14      	ldr	r2, [pc, #80]	; (8006a48 <HAL_TIM_IC_MspInit+0x98>)
 80069f8:	f043 0302 	orr.w	r3, r3, #2
 80069fc:	6313      	str	r3, [r2, #48]	; 0x30
 80069fe:	4b12      	ldr	r3, [pc, #72]	; (8006a48 <HAL_TIM_IC_MspInit+0x98>)
 8006a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = UltraSensor_Echo_Pin;
 8006a0a:	2310      	movs	r3, #16
 8006a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a0e:	2302      	movs	r3, #2
 8006a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a16:	2300      	movs	r3, #0
 8006a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(UltraSensor_Echo_GPIO_Port, &GPIO_InitStruct);
 8006a1e:	f107 0314 	add.w	r3, r7, #20
 8006a22:	4619      	mov	r1, r3
 8006a24:	4809      	ldr	r0, [pc, #36]	; (8006a4c <HAL_TIM_IC_MspInit+0x9c>)
 8006a26:	f000 fc29 	bl	800727c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2105      	movs	r1, #5
 8006a2e:	201d      	movs	r0, #29
 8006a30:	f000 fb4d 	bl	80070ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006a34:	201d      	movs	r0, #29
 8006a36:	f000 fb66 	bl	8007106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006a3a:	bf00      	nop
 8006a3c:	3728      	adds	r7, #40	; 0x28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	40000400 	.word	0x40000400
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	40020400 	.word	0x40020400

08006a50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a58:	f107 030c 	add.w	r3, r7, #12
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	605a      	str	r2, [r3, #4]
 8006a62:	609a      	str	r2, [r3, #8]
 8006a64:	60da      	str	r2, [r3, #12]
 8006a66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a12      	ldr	r2, [pc, #72]	; (8006ab8 <HAL_TIM_MspPostInit+0x68>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d11e      	bne.n	8006ab0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a72:	2300      	movs	r3, #0
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	4b11      	ldr	r3, [pc, #68]	; (8006abc <HAL_TIM_MspPostInit+0x6c>)
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	4a10      	ldr	r2, [pc, #64]	; (8006abc <HAL_TIM_MspPostInit+0x6c>)
 8006a7c:	f043 0310 	orr.w	r3, r3, #16
 8006a80:	6313      	str	r3, [r2, #48]	; 0x30
 8006a82:	4b0e      	ldr	r3, [pc, #56]	; (8006abc <HAL_TIM_MspPostInit+0x6c>)
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	60bb      	str	r3, [r7, #8]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8006a8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a94:	2302      	movs	r3, #2
 8006a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8006aa4:	f107 030c 	add.w	r3, r7, #12
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	4805      	ldr	r0, [pc, #20]	; (8006ac0 <HAL_TIM_MspPostInit+0x70>)
 8006aac:	f000 fbe6 	bl	800727c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006ab0:	bf00      	nop
 8006ab2:	3720      	adds	r7, #32
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	40021000 	.word	0x40021000

08006ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08a      	sub	sp, #40	; 0x28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006acc:	f107 0314 	add.w	r3, r7, #20
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	605a      	str	r2, [r3, #4]
 8006ad6:	609a      	str	r2, [r3, #8]
 8006ad8:	60da      	str	r2, [r3, #12]
 8006ada:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a1d      	ldr	r2, [pc, #116]	; (8006b58 <HAL_UART_MspInit+0x94>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d134      	bne.n	8006b50 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	613b      	str	r3, [r7, #16]
 8006aea:	4b1c      	ldr	r3, [pc, #112]	; (8006b5c <HAL_UART_MspInit+0x98>)
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	4a1b      	ldr	r2, [pc, #108]	; (8006b5c <HAL_UART_MspInit+0x98>)
 8006af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006af4:	6413      	str	r3, [r2, #64]	; 0x40
 8006af6:	4b19      	ldr	r3, [pc, #100]	; (8006b5c <HAL_UART_MspInit+0x98>)
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006afe:	613b      	str	r3, [r7, #16]
 8006b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b02:	2300      	movs	r3, #0
 8006b04:	60fb      	str	r3, [r7, #12]
 8006b06:	4b15      	ldr	r3, [pc, #84]	; (8006b5c <HAL_UART_MspInit+0x98>)
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0a:	4a14      	ldr	r2, [pc, #80]	; (8006b5c <HAL_UART_MspInit+0x98>)
 8006b0c:	f043 0304 	orr.w	r3, r3, #4
 8006b10:	6313      	str	r3, [r2, #48]	; 0x30
 8006b12:	4b12      	ldr	r3, [pc, #72]	; (8006b5c <HAL_UART_MspInit+0x98>)
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	f003 0304 	and.w	r3, r3, #4
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006b1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b24:	2302      	movs	r3, #2
 8006b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006b30:	2307      	movs	r3, #7
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b34:	f107 0314 	add.w	r3, r7, #20
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4809      	ldr	r0, [pc, #36]	; (8006b60 <HAL_UART_MspInit+0x9c>)
 8006b3c:	f000 fb9e 	bl	800727c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006b40:	2200      	movs	r2, #0
 8006b42:	2105      	movs	r1, #5
 8006b44:	2027      	movs	r0, #39	; 0x27
 8006b46:	f000 fac2 	bl	80070ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006b4a:	2027      	movs	r0, #39	; 0x27
 8006b4c:	f000 fadb 	bl	8007106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006b50:	bf00      	nop
 8006b52:	3728      	adds	r7, #40	; 0x28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	40004800 	.word	0x40004800
 8006b5c:	40023800 	.word	0x40023800
 8006b60:	40020800 	.word	0x40020800

08006b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006b64:	b480      	push	{r7}
 8006b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006b68:	e7fe      	b.n	8006b68 <NMI_Handler+0x4>

08006b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006b6e:	e7fe      	b.n	8006b6e <HardFault_Handler+0x4>

08006b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006b74:	e7fe      	b.n	8006b74 <MemManage_Handler+0x4>

08006b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006b76:	b480      	push	{r7}
 8006b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006b7a:	e7fe      	b.n	8006b7a <BusFault_Handler+0x4>

08006b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006b80:	e7fe      	b.n	8006b80 <UsageFault_Handler+0x4>

08006b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006b82:	b480      	push	{r7}
 8006b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006b86:	bf00      	nop
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b94:	f000 f97c 	bl	8006e90 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006b98:	f008 f82e 	bl	800ebf8 <xTaskGetSchedulerState>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d001      	beq.n	8006ba6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006ba2:	f008 fe19 	bl	800f7d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006ba6:	bf00      	nop
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006bb0:	4802      	ldr	r0, [pc, #8]	; (8006bbc <TIM3_IRQHandler+0x10>)
 8006bb2:	f004 f929 	bl	800ae08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006bb6:	bf00      	nop
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	200002e8 	.word	0x200002e8

08006bc0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006bc4:	4802      	ldr	r0, [pc, #8]	; (8006bd0 <I2C1_EV_IRQHandler+0x10>)
 8006bc6:	f001 f991 	bl	8007eec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006bca:	bf00      	nop
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000204 	.word	0x20000204

08006bd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006bd8:	4802      	ldr	r0, [pc, #8]	; (8006be4 <USART3_IRQHandler+0x10>)
 8006bda:	f005 fadb 	bl	800c194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006bde:	bf00      	nop
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	200003c0 	.word	0x200003c0

08006be8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0
	return 1;
 8006bec:	2301      	movs	r3, #1
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <_kill>:

int _kill(int pid, int sig)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006c02:	f009 f863 	bl	800fccc <__errno>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2216      	movs	r2, #22
 8006c0a:	601a      	str	r2, [r3, #0]
	return -1;
 8006c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <_exit>:

void _exit (int status)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006c20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff ffe7 	bl	8006bf8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006c2a:	e7fe      	b.n	8006c2a <_exit+0x12>

08006c2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c38:	2300      	movs	r3, #0
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	e00a      	b.n	8006c54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006c3e:	f3af 8000 	nop.w
 8006c42:	4601      	mov	r1, r0
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	60ba      	str	r2, [r7, #8]
 8006c4a:	b2ca      	uxtb	r2, r1
 8006c4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	3301      	adds	r3, #1
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	dbf0      	blt.n	8006c3e <_read+0x12>
	}

return len;
 8006c5c:	687b      	ldr	r3, [r7, #4]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b086      	sub	sp, #24
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	60b9      	str	r1, [r7, #8]
 8006c70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c72:	2300      	movs	r3, #0
 8006c74:	617b      	str	r3, [r7, #20]
 8006c76:	e009      	b.n	8006c8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	60ba      	str	r2, [r7, #8]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	617b      	str	r3, [r7, #20]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	dbf1      	blt.n	8006c78 <_write+0x12>
	}
	return len;
 8006c94:	687b      	ldr	r3, [r7, #4]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <_close>:

int _close(int file)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b083      	sub	sp, #12
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
	return -1;
 8006ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006cc6:	605a      	str	r2, [r3, #4]
	return 0;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <_isatty>:

int _isatty(int file)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
	return 1;
 8006cde:	2301      	movs	r3, #1
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
	return 0;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
	...

08006d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006d10:	4a14      	ldr	r2, [pc, #80]	; (8006d64 <_sbrk+0x5c>)
 8006d12:	4b15      	ldr	r3, [pc, #84]	; (8006d68 <_sbrk+0x60>)
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006d1c:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <_sbrk+0x64>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d102      	bne.n	8006d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006d24:	4b11      	ldr	r3, [pc, #68]	; (8006d6c <_sbrk+0x64>)
 8006d26:	4a12      	ldr	r2, [pc, #72]	; (8006d70 <_sbrk+0x68>)
 8006d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006d2a:	4b10      	ldr	r3, [pc, #64]	; (8006d6c <_sbrk+0x64>)
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4413      	add	r3, r2
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d207      	bcs.n	8006d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006d38:	f008 ffc8 	bl	800fccc <__errno>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	220c      	movs	r2, #12
 8006d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d46:	e009      	b.n	8006d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006d48:	4b08      	ldr	r3, [pc, #32]	; (8006d6c <_sbrk+0x64>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006d4e:	4b07      	ldr	r3, [pc, #28]	; (8006d6c <_sbrk+0x64>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4413      	add	r3, r2
 8006d56:	4a05      	ldr	r2, [pc, #20]	; (8006d6c <_sbrk+0x64>)
 8006d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20020000 	.word	0x20020000
 8006d68:	00000400 	.word	0x00000400
 8006d6c:	20000860 	.word	0x20000860
 8006d70:	200063c8 	.word	0x200063c8

08006d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006d74:	b480      	push	{r7}
 8006d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006d78:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <SystemInit+0x20>)
 8006d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7e:	4a05      	ldr	r2, [pc, #20]	; (8006d94 <SystemInit+0x20>)
 8006d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006d88:	bf00      	nop
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	e000ed00 	.word	0xe000ed00

08006d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006d9c:	480d      	ldr	r0, [pc, #52]	; (8006dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006d9e:	490e      	ldr	r1, [pc, #56]	; (8006dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006da0:	4a0e      	ldr	r2, [pc, #56]	; (8006ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006da4:	e002      	b.n	8006dac <LoopCopyDataInit>

08006da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006daa:	3304      	adds	r3, #4

08006dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006db0:	d3f9      	bcc.n	8006da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006db2:	4a0b      	ldr	r2, [pc, #44]	; (8006de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006db4:	4c0b      	ldr	r4, [pc, #44]	; (8006de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006db8:	e001      	b.n	8006dbe <LoopFillZerobss>

08006dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006dbc:	3204      	adds	r2, #4

08006dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006dc0:	d3fb      	bcc.n	8006dba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006dc2:	f7ff ffd7 	bl	8006d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006dc6:	f008 ff87 	bl	800fcd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006dca:	f7fa f915 	bl	8000ff8 <main>
  bx  lr    
 8006dce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006dd8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8006ddc:	080156bc 	.word	0x080156bc
  ldr r2, =_sbss
 8006de0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8006de4:	200063c8 	.word	0x200063c8

08006de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006de8:	e7fe      	b.n	8006de8 <ADC_IRQHandler>
	...

08006dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006df0:	4b0e      	ldr	r3, [pc, #56]	; (8006e2c <HAL_Init+0x40>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a0d      	ldr	r2, [pc, #52]	; (8006e2c <HAL_Init+0x40>)
 8006df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <HAL_Init+0x40>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a0a      	ldr	r2, [pc, #40]	; (8006e2c <HAL_Init+0x40>)
 8006e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e08:	4b08      	ldr	r3, [pc, #32]	; (8006e2c <HAL_Init+0x40>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a07      	ldr	r2, [pc, #28]	; (8006e2c <HAL_Init+0x40>)
 8006e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e14:	2003      	movs	r0, #3
 8006e16:	f000 f94f 	bl	80070b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e1a:	200f      	movs	r0, #15
 8006e1c:	f000 f808 	bl	8006e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006e20:	f7ff fc52 	bl	80066c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	40023c00 	.word	0x40023c00

08006e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006e38:	4b12      	ldr	r3, [pc, #72]	; (8006e84 <HAL_InitTick+0x54>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	4b12      	ldr	r3, [pc, #72]	; (8006e88 <HAL_InitTick+0x58>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	4619      	mov	r1, r3
 8006e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 f967 	bl	8007122 <HAL_SYSTICK_Config>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e00e      	b.n	8006e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b0f      	cmp	r3, #15
 8006e62:	d80a      	bhi.n	8006e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006e64:	2200      	movs	r2, #0
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e6c:	f000 f92f 	bl	80070ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006e70:	4a06      	ldr	r2, [pc, #24]	; (8006e8c <HAL_InitTick+0x5c>)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	e000      	b.n	8006e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000004 	.word	0x20000004
 8006e88:	2000000c 	.word	0x2000000c
 8006e8c:	20000008 	.word	0x20000008

08006e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006e94:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <HAL_IncTick+0x20>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4b06      	ldr	r3, [pc, #24]	; (8006eb4 <HAL_IncTick+0x24>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	4a04      	ldr	r2, [pc, #16]	; (8006eb4 <HAL_IncTick+0x24>)
 8006ea2:	6013      	str	r3, [r2, #0]
}
 8006ea4:	bf00      	nop
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	2000000c 	.word	0x2000000c
 8006eb4:	20000864 	.word	0x20000864

08006eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
  return uwTick;
 8006ebc:	4b03      	ldr	r3, [pc, #12]	; (8006ecc <HAL_GetTick+0x14>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	20000864 	.word	0x20000864

08006ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ed8:	f7ff ffee 	bl	8006eb8 <HAL_GetTick>
 8006edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ee8:	d005      	beq.n	8006ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006eea:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <HAL_Delay+0x44>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006ef6:	bf00      	nop
 8006ef8:	f7ff ffde 	bl	8006eb8 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d8f7      	bhi.n	8006ef8 <HAL_Delay+0x28>
  {
  }
}
 8006f08:	bf00      	nop
 8006f0a:	bf00      	nop
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	2000000c 	.word	0x2000000c

08006f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f28:	4b0c      	ldr	r3, [pc, #48]	; (8006f5c <__NVIC_SetPriorityGrouping+0x44>)
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f34:	4013      	ands	r3, r2
 8006f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f4a:	4a04      	ldr	r2, [pc, #16]	; (8006f5c <__NVIC_SetPriorityGrouping+0x44>)
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	60d3      	str	r3, [r2, #12]
}
 8006f50:	bf00      	nop
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	e000ed00 	.word	0xe000ed00

08006f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f64:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <__NVIC_GetPriorityGrouping+0x18>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	0a1b      	lsrs	r3, r3, #8
 8006f6a:	f003 0307 	and.w	r3, r3, #7
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	e000ed00 	.word	0xe000ed00

08006f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	db0b      	blt.n	8006fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f8e:	79fb      	ldrb	r3, [r7, #7]
 8006f90:	f003 021f 	and.w	r2, r3, #31
 8006f94:	4907      	ldr	r1, [pc, #28]	; (8006fb4 <__NVIC_EnableIRQ+0x38>)
 8006f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8006fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	e000e100 	.word	0xe000e100

08006fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	6039      	str	r1, [r7, #0]
 8006fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	db0a      	blt.n	8006fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	490c      	ldr	r1, [pc, #48]	; (8007004 <__NVIC_SetPriority+0x4c>)
 8006fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fd6:	0112      	lsls	r2, r2, #4
 8006fd8:	b2d2      	uxtb	r2, r2
 8006fda:	440b      	add	r3, r1
 8006fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006fe0:	e00a      	b.n	8006ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	4908      	ldr	r1, [pc, #32]	; (8007008 <__NVIC_SetPriority+0x50>)
 8006fe8:	79fb      	ldrb	r3, [r7, #7]
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	3b04      	subs	r3, #4
 8006ff0:	0112      	lsls	r2, r2, #4
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	761a      	strb	r2, [r3, #24]
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	e000e100 	.word	0xe000e100
 8007008:	e000ed00 	.word	0xe000ed00

0800700c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800700c:	b480      	push	{r7}
 800700e:	b089      	sub	sp, #36	; 0x24
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f003 0307 	and.w	r3, r3, #7
 800701e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	f1c3 0307 	rsb	r3, r3, #7
 8007026:	2b04      	cmp	r3, #4
 8007028:	bf28      	it	cs
 800702a:	2304      	movcs	r3, #4
 800702c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	3304      	adds	r3, #4
 8007032:	2b06      	cmp	r3, #6
 8007034:	d902      	bls.n	800703c <NVIC_EncodePriority+0x30>
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	3b03      	subs	r3, #3
 800703a:	e000      	b.n	800703e <NVIC_EncodePriority+0x32>
 800703c:	2300      	movs	r3, #0
 800703e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	fa02 f303 	lsl.w	r3, r2, r3
 800704a:	43da      	mvns	r2, r3
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	401a      	ands	r2, r3
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	fa01 f303 	lsl.w	r3, r1, r3
 800705e:	43d9      	mvns	r1, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007064:	4313      	orrs	r3, r2
         );
}
 8007066:	4618      	mov	r0, r3
 8007068:	3724      	adds	r7, #36	; 0x24
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
	...

08007074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3b01      	subs	r3, #1
 8007080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007084:	d301      	bcc.n	800708a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007086:	2301      	movs	r3, #1
 8007088:	e00f      	b.n	80070aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800708a:	4a0a      	ldr	r2, [pc, #40]	; (80070b4 <SysTick_Config+0x40>)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	3b01      	subs	r3, #1
 8007090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007092:	210f      	movs	r1, #15
 8007094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007098:	f7ff ff8e 	bl	8006fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800709c:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <SysTick_Config+0x40>)
 800709e:	2200      	movs	r2, #0
 80070a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070a2:	4b04      	ldr	r3, [pc, #16]	; (80070b4 <SysTick_Config+0x40>)
 80070a4:	2207      	movs	r2, #7
 80070a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	e000e010 	.word	0xe000e010

080070b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7ff ff29 	bl	8006f18 <__NVIC_SetPriorityGrouping>
}
 80070c6:	bf00      	nop
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b086      	sub	sp, #24
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	4603      	mov	r3, r0
 80070d6:	60b9      	str	r1, [r7, #8]
 80070d8:	607a      	str	r2, [r7, #4]
 80070da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80070dc:	2300      	movs	r3, #0
 80070de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80070e0:	f7ff ff3e 	bl	8006f60 <__NVIC_GetPriorityGrouping>
 80070e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	6978      	ldr	r0, [r7, #20]
 80070ec:	f7ff ff8e 	bl	800700c <NVIC_EncodePriority>
 80070f0:	4602      	mov	r2, r0
 80070f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070f6:	4611      	mov	r1, r2
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7ff ff5d 	bl	8006fb8 <__NVIC_SetPriority>
}
 80070fe:	bf00      	nop
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b082      	sub	sp, #8
 800710a:	af00      	add	r7, sp, #0
 800710c:	4603      	mov	r3, r0
 800710e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007114:	4618      	mov	r0, r3
 8007116:	f7ff ff31 	bl	8006f7c <__NVIC_EnableIRQ>
}
 800711a:	bf00      	nop
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b082      	sub	sp, #8
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff ffa2 	bl	8007074 <SysTick_Config>
 8007130:	4603      	mov	r3, r0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007146:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007148:	f7ff feb6 	bl	8006eb8 <HAL_GetTick>
 800714c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d008      	beq.n	800716c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2280      	movs	r2, #128	; 0x80
 800715e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e052      	b.n	8007212 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0216 	bic.w	r2, r2, #22
 800717a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	695a      	ldr	r2, [r3, #20]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800718a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d103      	bne.n	800719c <HAL_DMA_Abort+0x62>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007198:	2b00      	cmp	r3, #0
 800719a:	d007      	beq.n	80071ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0208 	bic.w	r2, r2, #8
 80071aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0201 	bic.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071bc:	e013      	b.n	80071e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071be:	f7ff fe7b 	bl	8006eb8 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b05      	cmp	r3, #5
 80071ca:	d90c      	bls.n	80071e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2220      	movs	r2, #32
 80071d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2203      	movs	r2, #3
 80071d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e015      	b.n	8007212 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e4      	bne.n	80071be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f8:	223f      	movs	r2, #63	; 0x3f
 80071fa:	409a      	lsls	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b02      	cmp	r3, #2
 800722c:	d004      	beq.n	8007238 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2280      	movs	r2, #128	; 0x80
 8007232:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e00c      	b.n	8007252 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2205      	movs	r2, #5
 800723c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 0201 	bic.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800726c:	b2db      	uxtb	r3, r3
}
 800726e:	4618      	mov	r0, r3
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
	...

0800727c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800727c:	b480      	push	{r7}
 800727e:	b089      	sub	sp, #36	; 0x24
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007286:	2300      	movs	r3, #0
 8007288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800728a:	2300      	movs	r3, #0
 800728c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800728e:	2300      	movs	r3, #0
 8007290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007292:	2300      	movs	r3, #0
 8007294:	61fb      	str	r3, [r7, #28]
 8007296:	e16b      	b.n	8007570 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007298:	2201      	movs	r2, #1
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	fa02 f303 	lsl.w	r3, r2, r3
 80072a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	4013      	ands	r3, r2
 80072aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	f040 815a 	bne.w	800756a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f003 0303 	and.w	r3, r3, #3
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d005      	beq.n	80072ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d130      	bne.n	8007330 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	2203      	movs	r2, #3
 80072da:	fa02 f303 	lsl.w	r3, r2, r3
 80072de:	43db      	mvns	r3, r3
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	4013      	ands	r3, r2
 80072e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	68da      	ldr	r2, [r3, #12]
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	fa02 f303 	lsl.w	r3, r2, r3
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007304:	2201      	movs	r2, #1
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	43db      	mvns	r3, r3
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	4013      	ands	r3, r2
 8007312:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	091b      	lsrs	r3, r3, #4
 800731a:	f003 0201 	and.w	r2, r3, #1
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	fa02 f303 	lsl.w	r3, r2, r3
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	4313      	orrs	r3, r2
 8007328:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f003 0303 	and.w	r3, r3, #3
 8007338:	2b03      	cmp	r3, #3
 800733a:	d017      	beq.n	800736c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	2203      	movs	r2, #3
 8007348:	fa02 f303 	lsl.w	r3, r2, r3
 800734c:	43db      	mvns	r3, r3
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	4013      	ands	r3, r2
 8007352:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	689a      	ldr	r2, [r3, #8]
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	fa02 f303 	lsl.w	r3, r2, r3
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	4313      	orrs	r3, r2
 8007364:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f003 0303 	and.w	r3, r3, #3
 8007374:	2b02      	cmp	r3, #2
 8007376:	d123      	bne.n	80073c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	08da      	lsrs	r2, r3, #3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3208      	adds	r2, #8
 8007380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007384:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	220f      	movs	r2, #15
 8007390:	fa02 f303 	lsl.w	r3, r2, r3
 8007394:	43db      	mvns	r3, r3
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	4013      	ands	r3, r2
 800739a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	691a      	ldr	r2, [r3, #16]
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	08da      	lsrs	r2, r3, #3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3208      	adds	r2, #8
 80073ba:	69b9      	ldr	r1, [r7, #24]
 80073bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	2203      	movs	r2, #3
 80073cc:	fa02 f303 	lsl.w	r3, r2, r3
 80073d0:	43db      	mvns	r3, r3
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	4013      	ands	r3, r2
 80073d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f003 0203 	and.w	r2, r3, #3
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	fa02 f303 	lsl.w	r3, r2, r3
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 80b4 	beq.w	800756a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007402:	2300      	movs	r3, #0
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	4b60      	ldr	r3, [pc, #384]	; (8007588 <HAL_GPIO_Init+0x30c>)
 8007408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740a:	4a5f      	ldr	r2, [pc, #380]	; (8007588 <HAL_GPIO_Init+0x30c>)
 800740c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007410:	6453      	str	r3, [r2, #68]	; 0x44
 8007412:	4b5d      	ldr	r3, [pc, #372]	; (8007588 <HAL_GPIO_Init+0x30c>)
 8007414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800741e:	4a5b      	ldr	r2, [pc, #364]	; (800758c <HAL_GPIO_Init+0x310>)
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	089b      	lsrs	r3, r3, #2
 8007424:	3302      	adds	r3, #2
 8007426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800742a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	220f      	movs	r2, #15
 8007436:	fa02 f303 	lsl.w	r3, r2, r3
 800743a:	43db      	mvns	r3, r3
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	4013      	ands	r3, r2
 8007440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a52      	ldr	r2, [pc, #328]	; (8007590 <HAL_GPIO_Init+0x314>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d02b      	beq.n	80074a2 <HAL_GPIO_Init+0x226>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a51      	ldr	r2, [pc, #324]	; (8007594 <HAL_GPIO_Init+0x318>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d025      	beq.n	800749e <HAL_GPIO_Init+0x222>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a50      	ldr	r2, [pc, #320]	; (8007598 <HAL_GPIO_Init+0x31c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d01f      	beq.n	800749a <HAL_GPIO_Init+0x21e>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a4f      	ldr	r2, [pc, #316]	; (800759c <HAL_GPIO_Init+0x320>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d019      	beq.n	8007496 <HAL_GPIO_Init+0x21a>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a4e      	ldr	r2, [pc, #312]	; (80075a0 <HAL_GPIO_Init+0x324>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d013      	beq.n	8007492 <HAL_GPIO_Init+0x216>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a4d      	ldr	r2, [pc, #308]	; (80075a4 <HAL_GPIO_Init+0x328>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d00d      	beq.n	800748e <HAL_GPIO_Init+0x212>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a4c      	ldr	r2, [pc, #304]	; (80075a8 <HAL_GPIO_Init+0x32c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d007      	beq.n	800748a <HAL_GPIO_Init+0x20e>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a4b      	ldr	r2, [pc, #300]	; (80075ac <HAL_GPIO_Init+0x330>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d101      	bne.n	8007486 <HAL_GPIO_Init+0x20a>
 8007482:	2307      	movs	r3, #7
 8007484:	e00e      	b.n	80074a4 <HAL_GPIO_Init+0x228>
 8007486:	2308      	movs	r3, #8
 8007488:	e00c      	b.n	80074a4 <HAL_GPIO_Init+0x228>
 800748a:	2306      	movs	r3, #6
 800748c:	e00a      	b.n	80074a4 <HAL_GPIO_Init+0x228>
 800748e:	2305      	movs	r3, #5
 8007490:	e008      	b.n	80074a4 <HAL_GPIO_Init+0x228>
 8007492:	2304      	movs	r3, #4
 8007494:	e006      	b.n	80074a4 <HAL_GPIO_Init+0x228>
 8007496:	2303      	movs	r3, #3
 8007498:	e004      	b.n	80074a4 <HAL_GPIO_Init+0x228>
 800749a:	2302      	movs	r3, #2
 800749c:	e002      	b.n	80074a4 <HAL_GPIO_Init+0x228>
 800749e:	2301      	movs	r3, #1
 80074a0:	e000      	b.n	80074a4 <HAL_GPIO_Init+0x228>
 80074a2:	2300      	movs	r3, #0
 80074a4:	69fa      	ldr	r2, [r7, #28]
 80074a6:	f002 0203 	and.w	r2, r2, #3
 80074aa:	0092      	lsls	r2, r2, #2
 80074ac:	4093      	lsls	r3, r2
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074b4:	4935      	ldr	r1, [pc, #212]	; (800758c <HAL_GPIO_Init+0x310>)
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	089b      	lsrs	r3, r3, #2
 80074ba:	3302      	adds	r3, #2
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80074c2:	4b3b      	ldr	r3, [pc, #236]	; (80075b0 <HAL_GPIO_Init+0x334>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	43db      	mvns	r3, r3
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	4013      	ands	r3, r2
 80074d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80074de:	69ba      	ldr	r2, [r7, #24]
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80074e6:	4a32      	ldr	r2, [pc, #200]	; (80075b0 <HAL_GPIO_Init+0x334>)
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80074ec:	4b30      	ldr	r3, [pc, #192]	; (80075b0 <HAL_GPIO_Init+0x334>)
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	43db      	mvns	r3, r3
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	4013      	ands	r3, r2
 80074fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d003      	beq.n	8007510 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	4313      	orrs	r3, r2
 800750e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007510:	4a27      	ldr	r2, [pc, #156]	; (80075b0 <HAL_GPIO_Init+0x334>)
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007516:	4b26      	ldr	r3, [pc, #152]	; (80075b0 <HAL_GPIO_Init+0x334>)
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	43db      	mvns	r3, r3
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	4013      	ands	r3, r2
 8007524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	4313      	orrs	r3, r2
 8007538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800753a:	4a1d      	ldr	r2, [pc, #116]	; (80075b0 <HAL_GPIO_Init+0x334>)
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007540:	4b1b      	ldr	r3, [pc, #108]	; (80075b0 <HAL_GPIO_Init+0x334>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	43db      	mvns	r3, r3
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	4013      	ands	r3, r2
 800754e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800755c:	69ba      	ldr	r2, [r7, #24]
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	4313      	orrs	r3, r2
 8007562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007564:	4a12      	ldr	r2, [pc, #72]	; (80075b0 <HAL_GPIO_Init+0x334>)
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	3301      	adds	r3, #1
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	2b0f      	cmp	r3, #15
 8007574:	f67f ae90 	bls.w	8007298 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007578:	bf00      	nop
 800757a:	bf00      	nop
 800757c:	3724      	adds	r7, #36	; 0x24
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	40023800 	.word	0x40023800
 800758c:	40013800 	.word	0x40013800
 8007590:	40020000 	.word	0x40020000
 8007594:	40020400 	.word	0x40020400
 8007598:	40020800 	.word	0x40020800
 800759c:	40020c00 	.word	0x40020c00
 80075a0:	40021000 	.word	0x40021000
 80075a4:	40021400 	.word	0x40021400
 80075a8:	40021800 	.word	0x40021800
 80075ac:	40021c00 	.word	0x40021c00
 80075b0:	40013c00 	.word	0x40013c00

080075b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	807b      	strh	r3, [r7, #2]
 80075c0:	4613      	mov	r3, r2
 80075c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075c4:	787b      	ldrb	r3, [r7, #1]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075ca:	887a      	ldrh	r2, [r7, #2]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80075d0:	e003      	b.n	80075da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80075d2:	887b      	ldrh	r3, [r7, #2]
 80075d4:	041a      	lsls	r2, r3, #16
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	619a      	str	r2, [r3, #24]
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b085      	sub	sp, #20
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	460b      	mov	r3, r1
 80075f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80075f8:	887a      	ldrh	r2, [r7, #2]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4013      	ands	r3, r2
 80075fe:	041a      	lsls	r2, r3, #16
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	43d9      	mvns	r1, r3
 8007604:	887b      	ldrh	r3, [r7, #2]
 8007606:	400b      	ands	r3, r1
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	619a      	str	r2, [r3, #24]
}
 800760e:	bf00      	nop
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
	...

0800761c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e12b      	b.n	8007886 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d106      	bne.n	8007648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7ff f86c 	bl	8006720 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2224      	movs	r2, #36	; 0x24
 800764c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0201 	bic.w	r2, r2, #1
 800765e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800766e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800767e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007680:	f002 ff7e 	bl	800a580 <HAL_RCC_GetPCLK1Freq>
 8007684:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	4a81      	ldr	r2, [pc, #516]	; (8007890 <HAL_I2C_Init+0x274>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d807      	bhi.n	80076a0 <HAL_I2C_Init+0x84>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4a80      	ldr	r2, [pc, #512]	; (8007894 <HAL_I2C_Init+0x278>)
 8007694:	4293      	cmp	r3, r2
 8007696:	bf94      	ite	ls
 8007698:	2301      	movls	r3, #1
 800769a:	2300      	movhi	r3, #0
 800769c:	b2db      	uxtb	r3, r3
 800769e:	e006      	b.n	80076ae <HAL_I2C_Init+0x92>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4a7d      	ldr	r2, [pc, #500]	; (8007898 <HAL_I2C_Init+0x27c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	bf94      	ite	ls
 80076a8:	2301      	movls	r3, #1
 80076aa:	2300      	movhi	r3, #0
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e0e7      	b.n	8007886 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	4a78      	ldr	r2, [pc, #480]	; (800789c <HAL_I2C_Init+0x280>)
 80076ba:	fba2 2303 	umull	r2, r3, r2, r3
 80076be:	0c9b      	lsrs	r3, r3, #18
 80076c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	4a6a      	ldr	r2, [pc, #424]	; (8007890 <HAL_I2C_Init+0x274>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d802      	bhi.n	80076f0 <HAL_I2C_Init+0xd4>
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	3301      	adds	r3, #1
 80076ee:	e009      	b.n	8007704 <HAL_I2C_Init+0xe8>
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80076f6:	fb02 f303 	mul.w	r3, r2, r3
 80076fa:	4a69      	ldr	r2, [pc, #420]	; (80078a0 <HAL_I2C_Init+0x284>)
 80076fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007700:	099b      	lsrs	r3, r3, #6
 8007702:	3301      	adds	r3, #1
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	6812      	ldr	r2, [r2, #0]
 8007708:	430b      	orrs	r3, r1
 800770a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007716:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	495c      	ldr	r1, [pc, #368]	; (8007890 <HAL_I2C_Init+0x274>)
 8007720:	428b      	cmp	r3, r1
 8007722:	d819      	bhi.n	8007758 <HAL_I2C_Init+0x13c>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	1e59      	subs	r1, r3, #1
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	005b      	lsls	r3, r3, #1
 800772e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007732:	1c59      	adds	r1, r3, #1
 8007734:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007738:	400b      	ands	r3, r1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00a      	beq.n	8007754 <HAL_I2C_Init+0x138>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	1e59      	subs	r1, r3, #1
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	fbb1 f3f3 	udiv	r3, r1, r3
 800774c:	3301      	adds	r3, #1
 800774e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007752:	e051      	b.n	80077f8 <HAL_I2C_Init+0x1dc>
 8007754:	2304      	movs	r3, #4
 8007756:	e04f      	b.n	80077f8 <HAL_I2C_Init+0x1dc>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d111      	bne.n	8007784 <HAL_I2C_Init+0x168>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	1e58      	subs	r0, r3, #1
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6859      	ldr	r1, [r3, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	440b      	add	r3, r1
 800776e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007772:	3301      	adds	r3, #1
 8007774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007778:	2b00      	cmp	r3, #0
 800777a:	bf0c      	ite	eq
 800777c:	2301      	moveq	r3, #1
 800777e:	2300      	movne	r3, #0
 8007780:	b2db      	uxtb	r3, r3
 8007782:	e012      	b.n	80077aa <HAL_I2C_Init+0x18e>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	1e58      	subs	r0, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6859      	ldr	r1, [r3, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	440b      	add	r3, r1
 8007792:	0099      	lsls	r1, r3, #2
 8007794:	440b      	add	r3, r1
 8007796:	fbb0 f3f3 	udiv	r3, r0, r3
 800779a:	3301      	adds	r3, #1
 800779c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	bf0c      	ite	eq
 80077a4:	2301      	moveq	r3, #1
 80077a6:	2300      	movne	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <HAL_I2C_Init+0x196>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e022      	b.n	80077f8 <HAL_I2C_Init+0x1dc>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10e      	bne.n	80077d8 <HAL_I2C_Init+0x1bc>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	1e58      	subs	r0, r3, #1
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6859      	ldr	r1, [r3, #4]
 80077c2:	460b      	mov	r3, r1
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	440b      	add	r3, r1
 80077c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80077cc:	3301      	adds	r3, #1
 80077ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077d6:	e00f      	b.n	80077f8 <HAL_I2C_Init+0x1dc>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	1e58      	subs	r0, r3, #1
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6859      	ldr	r1, [r3, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	440b      	add	r3, r1
 80077e6:	0099      	lsls	r1, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80077ee:	3301      	adds	r3, #1
 80077f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	6809      	ldr	r1, [r1, #0]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69da      	ldr	r2, [r3, #28]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	431a      	orrs	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007826:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6911      	ldr	r1, [r2, #16]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	68d2      	ldr	r2, [r2, #12]
 8007832:	4311      	orrs	r1, r2
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	6812      	ldr	r2, [r2, #0]
 8007838:	430b      	orrs	r3, r1
 800783a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695a      	ldr	r2, [r3, #20]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0201 	orr.w	r2, r2, #1
 8007866:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2220      	movs	r2, #32
 8007872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	000186a0 	.word	0x000186a0
 8007894:	001e847f 	.word	0x001e847f
 8007898:	003d08ff 	.word	0x003d08ff
 800789c:	431bde83 	.word	0x431bde83
 80078a0:	10624dd3 	.word	0x10624dd3

080078a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b088      	sub	sp, #32
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	607a      	str	r2, [r7, #4]
 80078ae:	461a      	mov	r2, r3
 80078b0:	460b      	mov	r3, r1
 80078b2:	817b      	strh	r3, [r7, #10]
 80078b4:	4613      	mov	r3, r2
 80078b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078b8:	f7ff fafe 	bl	8006eb8 <HAL_GetTick>
 80078bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b20      	cmp	r3, #32
 80078c8:	f040 80e0 	bne.w	8007a8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	2319      	movs	r3, #25
 80078d2:	2201      	movs	r2, #1
 80078d4:	4970      	ldr	r1, [pc, #448]	; (8007a98 <HAL_I2C_Master_Transmit+0x1f4>)
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f001 ffd0 	bl	800987c <I2C_WaitOnFlagUntilTimeout>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80078e2:	2302      	movs	r3, #2
 80078e4:	e0d3      	b.n	8007a8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d101      	bne.n	80078f4 <HAL_I2C_Master_Transmit+0x50>
 80078f0:	2302      	movs	r3, #2
 80078f2:	e0cc      	b.n	8007a8e <HAL_I2C_Master_Transmit+0x1ea>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b01      	cmp	r3, #1
 8007908:	d007      	beq.n	800791a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f042 0201 	orr.w	r2, r2, #1
 8007918:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007928:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2221      	movs	r2, #33	; 0x21
 800792e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2210      	movs	r2, #16
 8007936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	893a      	ldrh	r2, [r7, #8]
 800794a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4a50      	ldr	r2, [pc, #320]	; (8007a9c <HAL_I2C_Master_Transmit+0x1f8>)
 800795a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800795c:	8979      	ldrh	r1, [r7, #10]
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	6a3a      	ldr	r2, [r7, #32]
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f001 fd92 	bl	800948c <I2C_MasterRequestWrite>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e08d      	b.n	8007a8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007972:	2300      	movs	r3, #0
 8007974:	613b      	str	r3, [r7, #16]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	613b      	str	r3, [r7, #16]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	613b      	str	r3, [r7, #16]
 8007986:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007988:	e066      	b.n	8007a58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	6a39      	ldr	r1, [r7, #32]
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f002 f84a 	bl	8009a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00d      	beq.n	80079b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	2b04      	cmp	r3, #4
 80079a0:	d107      	bne.n	80079b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e06b      	b.n	8007a8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	781a      	ldrb	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3b01      	subs	r3, #1
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d11b      	bne.n	8007a2c <HAL_I2C_Master_Transmit+0x188>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d017      	beq.n	8007a2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	781a      	ldrb	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a24:	3b01      	subs	r3, #1
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	6a39      	ldr	r1, [r7, #32]
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f002 f83a 	bl	8009aaa <I2C_WaitOnBTFFlagUntilTimeout>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00d      	beq.n	8007a58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a40:	2b04      	cmp	r3, #4
 8007a42:	d107      	bne.n	8007a54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e01a      	b.n	8007a8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d194      	bne.n	800798a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	e000      	b.n	8007a8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007a8c:	2302      	movs	r3, #2
  }
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	00100002 	.word	0x00100002
 8007a9c:	ffff0000 	.word	0xffff0000

08007aa0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08c      	sub	sp, #48	; 0x30
 8007aa4:	af02      	add	r7, sp, #8
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	607a      	str	r2, [r7, #4]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	460b      	mov	r3, r1
 8007aae:	817b      	strh	r3, [r7, #10]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ab4:	f7ff fa00 	bl	8006eb8 <HAL_GetTick>
 8007ab8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b20      	cmp	r3, #32
 8007ac4:	f040 820b 	bne.w	8007ede <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	2319      	movs	r3, #25
 8007ace:	2201      	movs	r2, #1
 8007ad0:	497c      	ldr	r1, [pc, #496]	; (8007cc4 <HAL_I2C_Master_Receive+0x224>)
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f001 fed2 	bl	800987c <I2C_WaitOnFlagUntilTimeout>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007ade:	2302      	movs	r3, #2
 8007ae0:	e1fe      	b.n	8007ee0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d101      	bne.n	8007af0 <HAL_I2C_Master_Receive+0x50>
 8007aec:	2302      	movs	r3, #2
 8007aee:	e1f7      	b.n	8007ee0 <HAL_I2C_Master_Receive+0x440>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d007      	beq.n	8007b16 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f042 0201 	orr.w	r2, r2, #1
 8007b14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2222      	movs	r2, #34	; 0x22
 8007b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2210      	movs	r2, #16
 8007b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	893a      	ldrh	r2, [r7, #8]
 8007b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4a5c      	ldr	r2, [pc, #368]	; (8007cc8 <HAL_I2C_Master_Receive+0x228>)
 8007b56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007b58:	8979      	ldrh	r1, [r7, #10]
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f001 fd16 	bl	8009590 <I2C_MasterRequestRead>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e1b8      	b.n	8007ee0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d113      	bne.n	8007b9e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b76:	2300      	movs	r3, #0
 8007b78:	623b      	str	r3, [r7, #32]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	623b      	str	r3, [r7, #32]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	623b      	str	r3, [r7, #32]
 8007b8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	e18c      	b.n	8007eb8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d11b      	bne.n	8007bde <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	61fb      	str	r3, [r7, #28]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	61fb      	str	r3, [r7, #28]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	61fb      	str	r3, [r7, #28]
 8007bca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	e16c      	b.n	8007eb8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d11b      	bne.n	8007c1e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bf4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c06:	2300      	movs	r3, #0
 8007c08:	61bb      	str	r3, [r7, #24]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	61bb      	str	r3, [r7, #24]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	61bb      	str	r3, [r7, #24]
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	e14c      	b.n	8007eb8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c2e:	2300      	movs	r3, #0
 8007c30:	617b      	str	r3, [r7, #20]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	617b      	str	r3, [r7, #20]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	617b      	str	r3, [r7, #20]
 8007c42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c44:	e138      	b.n	8007eb8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	f200 80f1 	bhi.w	8007e32 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d123      	bne.n	8007ca0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f001 ff97 	bl	8009b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e139      	b.n	8007ee0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	691a      	ldr	r2, [r3, #16]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	3b01      	subs	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c9e:	e10b      	b.n	8007eb8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d14e      	bne.n	8007d46 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	2200      	movs	r2, #0
 8007cb0:	4906      	ldr	r1, [pc, #24]	; (8007ccc <HAL_I2C_Master_Receive+0x22c>)
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f001 fde2 	bl	800987c <I2C_WaitOnFlagUntilTimeout>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d008      	beq.n	8007cd0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e10e      	b.n	8007ee0 <HAL_I2C_Master_Receive+0x440>
 8007cc2:	bf00      	nop
 8007cc4:	00100002 	.word	0x00100002
 8007cc8:	ffff0000 	.word	0xffff0000
 8007ccc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691a      	ldr	r2, [r3, #16]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	691a      	ldr	r2, [r3, #16]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	b2d2      	uxtb	r2, r2
 8007d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	1c5a      	adds	r2, r3, #1
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d44:	e0b8      	b.n	8007eb8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	4966      	ldr	r1, [pc, #408]	; (8007ee8 <HAL_I2C_Master_Receive+0x448>)
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f001 fd93 	bl	800987c <I2C_WaitOnFlagUntilTimeout>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e0bf      	b.n	8007ee0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	691a      	ldr	r2, [r3, #16]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	2200      	movs	r2, #0
 8007daa:	494f      	ldr	r1, [pc, #316]	; (8007ee8 <HAL_I2C_Master_Receive+0x448>)
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f001 fd65 	bl	800987c <I2C_WaitOnFlagUntilTimeout>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e091      	b.n	8007ee0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	691a      	ldr	r2, [r3, #16]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	b2d2      	uxtb	r2, r2
 8007dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007de8:	3b01      	subs	r3, #1
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	3b01      	subs	r3, #1
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	691a      	ldr	r2, [r3, #16]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e08:	b2d2      	uxtb	r2, r2
 8007e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e30:	e042      	b.n	8007eb8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f001 feaa 	bl	8009b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e04c      	b.n	8007ee0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	691a      	ldr	r2, [r3, #16]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	b2d2      	uxtb	r2, r2
 8007e52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	3b01      	subs	r3, #1
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	f003 0304 	and.w	r3, r3, #4
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d118      	bne.n	8007eb8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	691a      	ldr	r2, [r3, #16]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	b2d2      	uxtb	r2, r2
 8007e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	1c5a      	adds	r2, r3, #1
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f47f aec2 	bne.w	8007c46 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	e000      	b.n	8007ee0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007ede:	2302      	movs	r3, #2
  }
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3728      	adds	r7, #40	; 0x28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	00010004 	.word	0x00010004

08007eec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b088      	sub	sp, #32
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f04:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f0c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f14:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
 8007f18:	2b10      	cmp	r3, #16
 8007f1a:	d003      	beq.n	8007f24 <HAL_I2C_EV_IRQHandler+0x38>
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
 8007f1e:	2b40      	cmp	r3, #64	; 0x40
 8007f20:	f040 80c1 	bne.w	80080a6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10d      	bne.n	8007f5a <HAL_I2C_EV_IRQHandler+0x6e>
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007f44:	d003      	beq.n	8007f4e <HAL_I2C_EV_IRQHandler+0x62>
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007f4c:	d101      	bne.n	8007f52 <HAL_I2C_EV_IRQHandler+0x66>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e000      	b.n	8007f54 <HAL_I2C_EV_IRQHandler+0x68>
 8007f52:	2300      	movs	r3, #0
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	f000 8132 	beq.w	80081be <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00c      	beq.n	8007f7e <HAL_I2C_EV_IRQHandler+0x92>
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	0a5b      	lsrs	r3, r3, #9
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d006      	beq.n	8007f7e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f001 fe92 	bl	8009c9a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fcdc 	bl	8008934 <I2C_Master_SB>
 8007f7c:	e092      	b.n	80080a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	08db      	lsrs	r3, r3, #3
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d009      	beq.n	8007f9e <HAL_I2C_EV_IRQHandler+0xb2>
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	0a5b      	lsrs	r3, r3, #9
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fd52 	bl	8008a40 <I2C_Master_ADD10>
 8007f9c:	e082      	b.n	80080a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	085b      	lsrs	r3, r3, #1
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d009      	beq.n	8007fbe <HAL_I2C_EV_IRQHandler+0xd2>
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	0a5b      	lsrs	r3, r3, #9
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fd6c 	bl	8008a94 <I2C_Master_ADDR>
 8007fbc:	e072      	b.n	80080a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	089b      	lsrs	r3, r3, #2
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d03b      	beq.n	8008042 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fd8:	f000 80f3 	beq.w	80081c2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	09db      	lsrs	r3, r3, #7
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00f      	beq.n	8008008 <HAL_I2C_EV_IRQHandler+0x11c>
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	0a9b      	lsrs	r3, r3, #10
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d009      	beq.n	8008008 <HAL_I2C_EV_IRQHandler+0x11c>
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	089b      	lsrs	r3, r3, #2
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d103      	bne.n	8008008 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f94c 	bl	800829e <I2C_MasterTransmit_TXE>
 8008006:	e04d      	b.n	80080a4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	089b      	lsrs	r3, r3, #2
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 80d6 	beq.w	80081c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	0a5b      	lsrs	r3, r3, #9
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	f000 80cf 	beq.w	80081c2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	2b21      	cmp	r3, #33	; 0x21
 8008028:	d103      	bne.n	8008032 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f9d3 	bl	80083d6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008030:	e0c7      	b.n	80081c2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	2b40      	cmp	r3, #64	; 0x40
 8008036:	f040 80c4 	bne.w	80081c2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fa41 	bl	80084c2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008040:	e0bf      	b.n	80081c2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800804c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008050:	f000 80b7 	beq.w	80081c2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	099b      	lsrs	r3, r3, #6
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00f      	beq.n	8008080 <HAL_I2C_EV_IRQHandler+0x194>
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	0a9b      	lsrs	r3, r3, #10
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	d009      	beq.n	8008080 <HAL_I2C_EV_IRQHandler+0x194>
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	089b      	lsrs	r3, r3, #2
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	d103      	bne.n	8008080 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fab6 	bl	80085ea <I2C_MasterReceive_RXNE>
 800807e:	e011      	b.n	80080a4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	089b      	lsrs	r3, r3, #2
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 809a 	beq.w	80081c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	0a5b      	lsrs	r3, r3, #9
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	f000 8093 	beq.w	80081c2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fb5f 	bl	8008760 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80080a2:	e08e      	b.n	80081c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80080a4:	e08d      	b.n	80081c2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d004      	beq.n	80080b8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	61fb      	str	r3, [r7, #28]
 80080b6:	e007      	b.n	80080c8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	085b      	lsrs	r3, r3, #1
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d012      	beq.n	80080fa <HAL_I2C_EV_IRQHandler+0x20e>
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	0a5b      	lsrs	r3, r3, #9
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00c      	beq.n	80080fa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80080f0:	69b9      	ldr	r1, [r7, #24]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 ff1d 	bl	8008f32 <I2C_Slave_ADDR>
 80080f8:	e066      	b.n	80081c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	091b      	lsrs	r3, r3, #4
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d009      	beq.n	800811a <HAL_I2C_EV_IRQHandler+0x22e>
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	0a5b      	lsrs	r3, r3, #9
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 ff58 	bl	8008fc8 <I2C_Slave_STOPF>
 8008118:	e056      	b.n	80081c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	2b21      	cmp	r3, #33	; 0x21
 800811e:	d002      	beq.n	8008126 <HAL_I2C_EV_IRQHandler+0x23a>
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	2b29      	cmp	r3, #41	; 0x29
 8008124:	d125      	bne.n	8008172 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	09db      	lsrs	r3, r3, #7
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00f      	beq.n	8008152 <HAL_I2C_EV_IRQHandler+0x266>
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	0a9b      	lsrs	r3, r3, #10
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d009      	beq.n	8008152 <HAL_I2C_EV_IRQHandler+0x266>
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	089b      	lsrs	r3, r3, #2
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d103      	bne.n	8008152 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fe33 	bl	8008db6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008150:	e039      	b.n	80081c6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	089b      	lsrs	r3, r3, #2
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d033      	beq.n	80081c6 <HAL_I2C_EV_IRQHandler+0x2da>
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	0a5b      	lsrs	r3, r3, #9
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	2b00      	cmp	r3, #0
 8008168:	d02d      	beq.n	80081c6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fe60 	bl	8008e30 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008170:	e029      	b.n	80081c6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	099b      	lsrs	r3, r3, #6
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00f      	beq.n	800819e <HAL_I2C_EV_IRQHandler+0x2b2>
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	0a9b      	lsrs	r3, r3, #10
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d009      	beq.n	800819e <HAL_I2C_EV_IRQHandler+0x2b2>
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	089b      	lsrs	r3, r3, #2
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b00      	cmp	r3, #0
 8008194:	d103      	bne.n	800819e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fe6b 	bl	8008e72 <I2C_SlaveReceive_RXNE>
 800819c:	e014      	b.n	80081c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	089b      	lsrs	r3, r3, #2
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00e      	beq.n	80081c8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	0a5b      	lsrs	r3, r3, #9
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d008      	beq.n	80081c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fe99 	bl	8008eee <I2C_SlaveReceive_BTF>
 80081bc:	e004      	b.n	80081c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80081be:	bf00      	nop
 80081c0:	e002      	b.n	80081c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80081c2:	bf00      	nop
 80081c4:	e000      	b.n	80081c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80081c6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80081c8:	3720      	adds	r7, #32
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b083      	sub	sp, #12
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80081fe:	bf00      	nop
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008212:	bf00      	nop
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800821e:	b480      	push	{r7}
 8008220:	b083      	sub	sp, #12
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	460b      	mov	r3, r1
 8008228:	70fb      	strb	r3, [r7, #3]
 800822a:	4613      	mov	r3, r2
 800822c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008262:	b480      	push	{r7}
 8008264:	b083      	sub	sp, #12
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800826a:	bf00      	nop
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800828a:	b480      	push	{r7}
 800828c:	b083      	sub	sp, #12
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008292:	bf00      	nop
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082b4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d150      	bne.n	8008366 <I2C_MasterTransmit_TXE+0xc8>
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
 80082c6:	2b21      	cmp	r3, #33	; 0x21
 80082c8:	d14d      	bne.n	8008366 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	2b08      	cmp	r3, #8
 80082ce:	d01d      	beq.n	800830c <I2C_MasterTransmit_TXE+0x6e>
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b20      	cmp	r3, #32
 80082d4:	d01a      	beq.n	800830c <I2C_MasterTransmit_TXE+0x6e>
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082dc:	d016      	beq.n	800830c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082ec:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2211      	movs	r2, #17
 80082f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2220      	movs	r2, #32
 8008300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7ff ff62 	bl	80081ce <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800830a:	e060      	b.n	80083ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800831a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800832a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2220      	movs	r2, #32
 8008336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b40      	cmp	r3, #64	; 0x40
 8008344:	d107      	bne.n	8008356 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7ff ff7d 	bl	800824e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008354:	e03b      	b.n	80083ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7ff ff35 	bl	80081ce <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008364:	e033      	b.n	80083ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008366:	7bfb      	ldrb	r3, [r7, #15]
 8008368:	2b21      	cmp	r3, #33	; 0x21
 800836a:	d005      	beq.n	8008378 <I2C_MasterTransmit_TXE+0xda>
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	2b40      	cmp	r3, #64	; 0x40
 8008370:	d12d      	bne.n	80083ce <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008372:	7bfb      	ldrb	r3, [r7, #15]
 8008374:	2b22      	cmp	r3, #34	; 0x22
 8008376:	d12a      	bne.n	80083ce <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800837c:	b29b      	uxth	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d108      	bne.n	8008394 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	685a      	ldr	r2, [r3, #4]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008390:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008392:	e01c      	b.n	80083ce <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b40      	cmp	r3, #64	; 0x40
 800839e:	d103      	bne.n	80083a8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f88e 	bl	80084c2 <I2C_MemoryTransmit_TXE_BTF>
}
 80083a6:	e012      	b.n	80083ce <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	781a      	ldrb	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	3b01      	subs	r3, #1
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80083cc:	e7ff      	b.n	80083ce <I2C_MasterTransmit_TXE+0x130>
 80083ce:	bf00      	nop
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b21      	cmp	r3, #33	; 0x21
 80083ee:	d164      	bne.n	80084ba <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d012      	beq.n	8008420 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	781a      	ldrb	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	1c5a      	adds	r2, r3, #1
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008414:	b29b      	uxth	r3, r3
 8008416:	3b01      	subs	r3, #1
 8008418:	b29a      	uxth	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800841e:	e04c      	b.n	80084ba <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b08      	cmp	r3, #8
 8008424:	d01d      	beq.n	8008462 <I2C_MasterTransmit_BTF+0x8c>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2b20      	cmp	r3, #32
 800842a:	d01a      	beq.n	8008462 <I2C_MasterTransmit_BTF+0x8c>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008432:	d016      	beq.n	8008462 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008442:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2211      	movs	r2, #17
 8008448:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2220      	movs	r2, #32
 8008456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7ff feb7 	bl	80081ce <HAL_I2C_MasterTxCpltCallback>
}
 8008460:	e02b      	b.n	80084ba <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008470:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008480:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b40      	cmp	r3, #64	; 0x40
 800849a:	d107      	bne.n	80084ac <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7ff fed2 	bl	800824e <HAL_I2C_MemTxCpltCallback>
}
 80084aa:	e006      	b.n	80084ba <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff fe8a 	bl	80081ce <HAL_I2C_MasterTxCpltCallback>
}
 80084ba:	bf00      	nop
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d11d      	bne.n	8008516 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d10b      	bne.n	80084fa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f2:	1c9a      	adds	r2, r3, #2
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80084f8:	e073      	b.n	80085e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084fe:	b29b      	uxth	r3, r3
 8008500:	121b      	asrs	r3, r3, #8
 8008502:	b2da      	uxtb	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008514:	e065      	b.n	80085e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800851a:	2b01      	cmp	r3, #1
 800851c:	d10b      	bne.n	8008536 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008522:	b2da      	uxtb	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008534:	e055      	b.n	80085e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800853a:	2b02      	cmp	r3, #2
 800853c:	d151      	bne.n	80085e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	2b22      	cmp	r3, #34	; 0x22
 8008542:	d10d      	bne.n	8008560 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008552:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800855e:	e040      	b.n	80085e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008564:	b29b      	uxth	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d015      	beq.n	8008596 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	2b21      	cmp	r3, #33	; 0x21
 800856e:	d112      	bne.n	8008596 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008574:	781a      	ldrb	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800858a:	b29b      	uxth	r3, r3
 800858c:	3b01      	subs	r3, #1
 800858e:	b29a      	uxth	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008594:	e025      	b.n	80085e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800859a:	b29b      	uxth	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d120      	bne.n	80085e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
 80085a2:	2b21      	cmp	r3, #33	; 0x21
 80085a4:	d11d      	bne.n	80085e2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80085b4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085c4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2220      	movs	r2, #32
 80085d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff fe36 	bl	800824e <HAL_I2C_MemTxCpltCallback>
}
 80085e2:	bf00      	nop
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b22      	cmp	r3, #34	; 0x22
 80085fc:	f040 80ac 	bne.w	8008758 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008604:	b29b      	uxth	r3, r3
 8008606:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2b03      	cmp	r3, #3
 800860c:	d921      	bls.n	8008652 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	691a      	ldr	r2, [r3, #16]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008618:	b2d2      	uxtb	r2, r2
 800861a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800862a:	b29b      	uxth	r3, r3
 800862c:	3b01      	subs	r3, #1
 800862e:	b29a      	uxth	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008638:	b29b      	uxth	r3, r3
 800863a:	2b03      	cmp	r3, #3
 800863c:	f040 808c 	bne.w	8008758 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800864e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008650:	e082      	b.n	8008758 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008656:	2b02      	cmp	r3, #2
 8008658:	d075      	beq.n	8008746 <I2C_MasterReceive_RXNE+0x15c>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d002      	beq.n	8008666 <I2C_MasterReceive_RXNE+0x7c>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d16f      	bne.n	8008746 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f001 fa60 	bl	8009b2c <I2C_WaitOnSTOPRequestThroughIT>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d142      	bne.n	80086f8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008680:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008690:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	691a      	ldr	r2, [r3, #16]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	b2d2      	uxtb	r2, r2
 800869e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	1c5a      	adds	r2, r3, #1
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	3b01      	subs	r3, #1
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2220      	movs	r2, #32
 80086bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b40      	cmp	r3, #64	; 0x40
 80086ca:	d10a      	bne.n	80086e2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7ff fdc1 	bl	8008262 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80086e0:	e03a      	b.n	8008758 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2212      	movs	r2, #18
 80086ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7ff fd76 	bl	80081e2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80086f6:	e02f      	b.n	8008758 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008706:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	691a      	ldr	r2, [r3, #16]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	b2d2      	uxtb	r2, r2
 8008714:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008724:	b29b      	uxth	r3, r3
 8008726:	3b01      	subs	r3, #1
 8008728:	b29a      	uxth	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2220      	movs	r2, #32
 8008732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7ff fd99 	bl	8008276 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008744:	e008      	b.n	8008758 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008754:	605a      	str	r2, [r3, #4]
}
 8008756:	e7ff      	b.n	8008758 <I2C_MasterReceive_RXNE+0x16e>
 8008758:	bf00      	nop
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008772:	b29b      	uxth	r3, r3
 8008774:	2b04      	cmp	r3, #4
 8008776:	d11b      	bne.n	80087b0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685a      	ldr	r2, [r3, #4]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008786:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	691a      	ldr	r2, [r3, #16]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008792:	b2d2      	uxtb	r2, r2
 8008794:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	3b01      	subs	r3, #1
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80087ae:	e0bd      	b.n	800892c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d129      	bne.n	800880e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087c8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2b04      	cmp	r3, #4
 80087ce:	d00a      	beq.n	80087e6 <I2C_MasterReceive_BTF+0x86>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d007      	beq.n	80087e6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087e4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	691a      	ldr	r2, [r3, #16]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	b2d2      	uxtb	r2, r2
 80087f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008802:	b29b      	uxth	r3, r3
 8008804:	3b01      	subs	r3, #1
 8008806:	b29a      	uxth	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800880c:	e08e      	b.n	800892c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008812:	b29b      	uxth	r3, r3
 8008814:	2b02      	cmp	r3, #2
 8008816:	d176      	bne.n	8008906 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d002      	beq.n	8008824 <I2C_MasterReceive_BTF+0xc4>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b10      	cmp	r3, #16
 8008822:	d108      	bne.n	8008836 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	e019      	b.n	800886a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2b04      	cmp	r3, #4
 800883a:	d002      	beq.n	8008842 <I2C_MasterReceive_BTF+0xe2>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2b02      	cmp	r3, #2
 8008840:	d108      	bne.n	8008854 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	e00a      	b.n	800886a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b10      	cmp	r3, #16
 8008858:	d007      	beq.n	800886a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008868:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	691a      	ldr	r2, [r3, #16]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008874:	b2d2      	uxtb	r2, r2
 8008876:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887c:	1c5a      	adds	r2, r3, #1
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008886:	b29b      	uxth	r3, r3
 8008888:	3b01      	subs	r3, #1
 800888a:	b29a      	uxth	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	691a      	ldr	r2, [r3, #16]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889a:	b2d2      	uxtb	r2, r2
 800889c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	3b01      	subs	r3, #1
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80088c4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2220      	movs	r2, #32
 80088ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b40      	cmp	r3, #64	; 0x40
 80088d8:	d10a      	bne.n	80088f0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7ff fcba 	bl	8008262 <HAL_I2C_MemRxCpltCallback>
}
 80088ee:	e01d      	b.n	800892c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2212      	movs	r2, #18
 80088fc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7ff fc6f 	bl	80081e2 <HAL_I2C_MasterRxCpltCallback>
}
 8008904:	e012      	b.n	800892c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	691a      	ldr	r2, [r3, #16]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	b2d2      	uxtb	r2, r2
 8008912:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008922:	b29b      	uxth	r3, r3
 8008924:	3b01      	subs	r3, #1
 8008926:	b29a      	uxth	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800892c:	bf00      	nop
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b40      	cmp	r3, #64	; 0x40
 8008946:	d117      	bne.n	8008978 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800894c:	2b00      	cmp	r3, #0
 800894e:	d109      	bne.n	8008964 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008954:	b2db      	uxtb	r3, r3
 8008956:	461a      	mov	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008960:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008962:	e067      	b.n	8008a34 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008968:	b2db      	uxtb	r3, r3
 800896a:	f043 0301 	orr.w	r3, r3, #1
 800896e:	b2da      	uxtb	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	611a      	str	r2, [r3, #16]
}
 8008976:	e05d      	b.n	8008a34 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008980:	d133      	bne.n	80089ea <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b21      	cmp	r3, #33	; 0x21
 800898c:	d109      	bne.n	80089a2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008992:	b2db      	uxtb	r3, r3
 8008994:	461a      	mov	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800899e:	611a      	str	r2, [r3, #16]
 80089a0:	e008      	b.n	80089b4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	f043 0301 	orr.w	r3, r3, #1
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d004      	beq.n	80089c6 <I2C_Master_SB+0x92>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d108      	bne.n	80089d8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d032      	beq.n	8008a34 <I2C_Master_SB+0x100>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d02d      	beq.n	8008a34 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089e6:	605a      	str	r2, [r3, #4]
}
 80089e8:	e024      	b.n	8008a34 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10e      	bne.n	8008a10 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	11db      	asrs	r3, r3, #7
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	f003 0306 	and.w	r3, r3, #6
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	f063 030f 	orn	r3, r3, #15
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	611a      	str	r2, [r3, #16]
}
 8008a0e:	e011      	b.n	8008a34 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d10d      	bne.n	8008a34 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	11db      	asrs	r3, r3, #7
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	f003 0306 	and.w	r3, r3, #6
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	f063 030e 	orn	r3, r3, #14
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	611a      	str	r2, [r3, #16]
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d004      	beq.n	8008a66 <I2C_Master_ADD10+0x26>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d108      	bne.n	8008a78 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00c      	beq.n	8008a88 <I2C_Master_ADD10+0x48>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d007      	beq.n	8008a88 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a86:	605a      	str	r2, [r3, #4]
  }
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b091      	sub	sp, #68	; 0x44
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008aa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b22      	cmp	r3, #34	; 0x22
 8008abc:	f040 8169 	bne.w	8008d92 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10f      	bne.n	8008ae8 <I2C_Master_ADDR+0x54>
 8008ac8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008acc:	2b40      	cmp	r3, #64	; 0x40
 8008ace:	d10b      	bne.n	8008ae8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	633b      	str	r3, [r7, #48]	; 0x30
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	633b      	str	r3, [r7, #48]	; 0x30
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	e160      	b.n	8008daa <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d11d      	bne.n	8008b2c <I2C_Master_ADDR+0x98>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008af8:	d118      	bne.n	8008b2c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008afa:	2300      	movs	r3, #0
 8008afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b1e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b24:	1c5a      	adds	r2, r3, #1
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	651a      	str	r2, [r3, #80]	; 0x50
 8008b2a:	e13e      	b.n	8008daa <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d113      	bne.n	8008b5e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b36:	2300      	movs	r3, #0
 8008b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	e115      	b.n	8008d8a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	f040 808a 	bne.w	8008c7e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008b70:	d137      	bne.n	8008be2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b80:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b90:	d113      	bne.n	8008bba <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ba0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	e0e7      	b.n	8008d8a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bba:	2300      	movs	r3, #0
 8008bbc:	623b      	str	r3, [r7, #32]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	623b      	str	r3, [r7, #32]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	623b      	str	r3, [r7, #32]
 8008bce:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	e0d3      	b.n	8008d8a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	2b08      	cmp	r3, #8
 8008be6:	d02e      	beq.n	8008c46 <I2C_Master_ADDR+0x1b2>
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	2b20      	cmp	r3, #32
 8008bec:	d02b      	beq.n	8008c46 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf0:	2b12      	cmp	r3, #18
 8008bf2:	d102      	bne.n	8008bfa <I2C_Master_ADDR+0x166>
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d125      	bne.n	8008c46 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfc:	2b04      	cmp	r3, #4
 8008bfe:	d00e      	beq.n	8008c1e <I2C_Master_ADDR+0x18a>
 8008c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d00b      	beq.n	8008c1e <I2C_Master_ADDR+0x18a>
 8008c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c08:	2b10      	cmp	r3, #16
 8008c0a:	d008      	beq.n	8008c1e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c1a:	601a      	str	r2, [r3, #0]
 8008c1c:	e007      	b.n	8008c2e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c2c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c2e:	2300      	movs	r3, #0
 8008c30:	61fb      	str	r3, [r7, #28]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	695b      	ldr	r3, [r3, #20]
 8008c38:	61fb      	str	r3, [r7, #28]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	61fb      	str	r3, [r7, #28]
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	e0a1      	b.n	8008d8a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c54:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c56:	2300      	movs	r3, #0
 8008c58:	61bb      	str	r3, [r7, #24]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	695b      	ldr	r3, [r3, #20]
 8008c60:	61bb      	str	r3, [r7, #24]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	61bb      	str	r3, [r7, #24]
 8008c6a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c7a:	601a      	str	r2, [r3, #0]
 8008c7c:	e085      	b.n	8008d8a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d14d      	bne.n	8008d24 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8a:	2b04      	cmp	r3, #4
 8008c8c:	d016      	beq.n	8008cbc <I2C_Master_ADDR+0x228>
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d013      	beq.n	8008cbc <I2C_Master_ADDR+0x228>
 8008c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c96:	2b10      	cmp	r3, #16
 8008c98:	d010      	beq.n	8008cbc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ca8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cb8:	601a      	str	r2, [r3, #0]
 8008cba:	e007      	b.n	8008ccc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008cca:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cda:	d117      	bne.n	8008d0c <I2C_Master_ADDR+0x278>
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ce2:	d00b      	beq.n	8008cfc <I2C_Master_ADDR+0x268>
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d008      	beq.n	8008cfc <I2C_Master_ADDR+0x268>
 8008cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cec:	2b08      	cmp	r3, #8
 8008cee:	d005      	beq.n	8008cfc <I2C_Master_ADDR+0x268>
 8008cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf2:	2b10      	cmp	r3, #16
 8008cf4:	d002      	beq.n	8008cfc <I2C_Master_ADDR+0x268>
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf8:	2b20      	cmp	r3, #32
 8008cfa:	d107      	bne.n	8008d0c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d0a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	617b      	str	r3, [r7, #20]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	617b      	str	r3, [r7, #20]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	617b      	str	r3, [r7, #20]
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	e032      	b.n	8008d8a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d32:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d42:	d117      	bne.n	8008d74 <I2C_Master_ADDR+0x2e0>
 8008d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008d4a:	d00b      	beq.n	8008d64 <I2C_Master_ADDR+0x2d0>
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d008      	beq.n	8008d64 <I2C_Master_ADDR+0x2d0>
 8008d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d54:	2b08      	cmp	r3, #8
 8008d56:	d005      	beq.n	8008d64 <I2C_Master_ADDR+0x2d0>
 8008d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5a:	2b10      	cmp	r3, #16
 8008d5c:	d002      	beq.n	8008d64 <I2C_Master_ADDR+0x2d0>
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d60:	2b20      	cmp	r3, #32
 8008d62:	d107      	bne.n	8008d74 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	685a      	ldr	r2, [r3, #4]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d72:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d74:	2300      	movs	r3, #0
 8008d76:	613b      	str	r3, [r7, #16]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	613b      	str	r3, [r7, #16]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	613b      	str	r3, [r7, #16]
 8008d88:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008d90:	e00b      	b.n	8008daa <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d92:	2300      	movs	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	695b      	ldr	r3, [r3, #20]
 8008d9c:	60fb      	str	r3, [r7, #12]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	60fb      	str	r3, [r7, #12]
 8008da6:	68fb      	ldr	r3, [r7, #12]
}
 8008da8:	e7ff      	b.n	8008daa <I2C_Master_ADDR+0x316>
 8008daa:	bf00      	nop
 8008dac:	3744      	adds	r7, #68	; 0x44
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dc4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d02b      	beq.n	8008e28 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	781a      	ldrb	r2, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	3b01      	subs	r3, #1
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d114      	bne.n	8008e28 <I2C_SlaveTransmit_TXE+0x72>
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b29      	cmp	r3, #41	; 0x29
 8008e02:	d111      	bne.n	8008e28 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e12:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2221      	movs	r2, #33	; 0x21
 8008e18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2228      	movs	r2, #40	; 0x28
 8008e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7ff f9e7 	bl	80081f6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008e28:	bf00      	nop
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d011      	beq.n	8008e66 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	781a      	ldrb	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e52:	1c5a      	adds	r2, r3, #1
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008e66:	bf00      	nop
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e80:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d02c      	beq.n	8008ee6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	691a      	ldr	r2, [r3, #16]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d114      	bne.n	8008ee6 <I2C_SlaveReceive_RXNE+0x74>
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8008ec0:	d111      	bne.n	8008ee6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ed0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2222      	movs	r2, #34	; 0x22
 8008ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2228      	movs	r2, #40	; 0x28
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7ff f992 	bl	800820a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008ee6:	bf00      	nop
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d012      	beq.n	8008f26 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	691a      	ldr	r2, [r3, #16]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0a:	b2d2      	uxtb	r2, r2
 8008f0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008f26:	bf00      	nop
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b084      	sub	sp, #16
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f4c:	2b28      	cmp	r3, #40	; 0x28
 8008f4e:	d127      	bne.n	8008fa0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	685a      	ldr	r2, [r3, #4]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f5e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	089b      	lsrs	r3, r3, #2
 8008f64:	f003 0301 	and.w	r3, r3, #1
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	09db      	lsrs	r3, r3, #7
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d103      	bne.n	8008f84 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	81bb      	strh	r3, [r7, #12]
 8008f82:	e002      	b.n	8008f8a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008f92:	89ba      	ldrh	r2, [r7, #12]
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7ff f940 	bl	800821e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008f9e:	e00e      	b.n	8008fbe <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	60bb      	str	r3, [r7, #8]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	60bb      	str	r3, [r7, #8]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	60bb      	str	r3, [r7, #8]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008fbe:	bf00      	nop
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
	...

08008fc8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008fe6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008fe8:	2300      	movs	r3, #0
 8008fea:	60bb      	str	r3, [r7, #8]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	60bb      	str	r3, [r7, #8]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f042 0201 	orr.w	r2, r2, #1
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009014:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009024:	d172      	bne.n	800910c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009026:	7bfb      	ldrb	r3, [r7, #15]
 8009028:	2b22      	cmp	r3, #34	; 0x22
 800902a:	d002      	beq.n	8009032 <I2C_Slave_STOPF+0x6a>
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	2b2a      	cmp	r3, #42	; 0x2a
 8009030:	d135      	bne.n	800909e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	b29a      	uxth	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009044:	b29b      	uxth	r3, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	d005      	beq.n	8009056 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904e:	f043 0204 	orr.w	r2, r3, #4
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009064:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe f8f7 	bl	800725e <HAL_DMA_GetState>
 8009070:	4603      	mov	r3, r0
 8009072:	2b01      	cmp	r3, #1
 8009074:	d049      	beq.n	800910a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907a:	4a69      	ldr	r2, [pc, #420]	; (8009220 <I2C_Slave_STOPF+0x258>)
 800907c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe f8c9 	bl	800721a <HAL_DMA_Abort_IT>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d03d      	beq.n	800910a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009098:	4610      	mov	r0, r2
 800909a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800909c:	e035      	b.n	800910a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d005      	beq.n	80090c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ba:	f043 0204 	orr.w	r2, r3, #4
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fe f8c1 	bl	800725e <HAL_DMA_GetState>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d014      	beq.n	800910c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e6:	4a4e      	ldr	r2, [pc, #312]	; (8009220 <I2C_Slave_STOPF+0x258>)
 80090e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe f893 	bl	800721a <HAL_DMA_Abort_IT>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d008      	beq.n	800910c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009104:	4610      	mov	r0, r2
 8009106:	4798      	blx	r3
 8009108:	e000      	b.n	800910c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800910a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009110:	b29b      	uxth	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d03e      	beq.n	8009194 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	695b      	ldr	r3, [r3, #20]
 800911c:	f003 0304 	and.w	r3, r3, #4
 8009120:	2b04      	cmp	r3, #4
 8009122:	d112      	bne.n	800914a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	691a      	ldr	r2, [r3, #16]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912e:	b2d2      	uxtb	r2, r2
 8009130:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	1c5a      	adds	r2, r3, #1
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009140:	b29b      	uxth	r3, r3
 8009142:	3b01      	subs	r3, #1
 8009144:	b29a      	uxth	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009154:	2b40      	cmp	r3, #64	; 0x40
 8009156:	d112      	bne.n	800917e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	691a      	ldr	r2, [r3, #16]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009162:	b2d2      	uxtb	r2, r2
 8009164:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916a:	1c5a      	adds	r2, r3, #1
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009174:	b29b      	uxth	r3, r3
 8009176:	3b01      	subs	r3, #1
 8009178:	b29a      	uxth	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009182:	b29b      	uxth	r3, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	d005      	beq.n	8009194 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918c:	f043 0204 	orr.w	r2, r3, #4
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f843 	bl	8009228 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80091a2:	e039      	b.n	8009218 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
 80091a6:	2b2a      	cmp	r3, #42	; 0x2a
 80091a8:	d109      	bne.n	80091be <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2228      	movs	r2, #40	; 0x28
 80091b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7ff f826 	bl	800820a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2b28      	cmp	r3, #40	; 0x28
 80091c8:	d111      	bne.n	80091ee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a15      	ldr	r2, [pc, #84]	; (8009224 <I2C_Slave_STOPF+0x25c>)
 80091ce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2220      	movs	r2, #32
 80091da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7ff f827 	bl	800823a <HAL_I2C_ListenCpltCallback>
}
 80091ec:	e014      	b.n	8009218 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f2:	2b22      	cmp	r3, #34	; 0x22
 80091f4:	d002      	beq.n	80091fc <I2C_Slave_STOPF+0x234>
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
 80091f8:	2b22      	cmp	r3, #34	; 0x22
 80091fa:	d10d      	bne.n	8009218 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2220      	movs	r2, #32
 8009206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7fe fff9 	bl	800820a <HAL_I2C_SlaveRxCpltCallback>
}
 8009218:	bf00      	nop
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	0800972d 	.word	0x0800972d
 8009224:	ffff0000 	.word	0xffff0000

08009228 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009236:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800923e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009240:	7bbb      	ldrb	r3, [r7, #14]
 8009242:	2b10      	cmp	r3, #16
 8009244:	d002      	beq.n	800924c <I2C_ITError+0x24>
 8009246:	7bbb      	ldrb	r3, [r7, #14]
 8009248:	2b40      	cmp	r3, #64	; 0x40
 800924a:	d10a      	bne.n	8009262 <I2C_ITError+0x3a>
 800924c:	7bfb      	ldrb	r3, [r7, #15]
 800924e:	2b22      	cmp	r3, #34	; 0x22
 8009250:	d107      	bne.n	8009262 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009260:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009262:	7bfb      	ldrb	r3, [r7, #15]
 8009264:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009268:	2b28      	cmp	r3, #40	; 0x28
 800926a:	d107      	bne.n	800927c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2228      	movs	r2, #40	; 0x28
 8009276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800927a:	e015      	b.n	80092a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800928a:	d00a      	beq.n	80092a2 <I2C_ITError+0x7a>
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	2b60      	cmp	r3, #96	; 0x60
 8009290:	d007      	beq.n	80092a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2220      	movs	r2, #32
 8009296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092b6:	d162      	bne.n	800937e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d020      	beq.n	8009318 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092da:	4a6a      	ldr	r2, [pc, #424]	; (8009484 <I2C_ITError+0x25c>)
 80092dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fd ff99 	bl	800721a <HAL_DMA_Abort_IT>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 8089 	beq.w	8009402 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f022 0201 	bic.w	r2, r2, #1
 80092fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2220      	movs	r2, #32
 8009304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009312:	4610      	mov	r0, r2
 8009314:	4798      	blx	r3
 8009316:	e074      	b.n	8009402 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931c:	4a59      	ldr	r2, [pc, #356]	; (8009484 <I2C_ITError+0x25c>)
 800931e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009324:	4618      	mov	r0, r3
 8009326:	f7fd ff78 	bl	800721a <HAL_DMA_Abort_IT>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d068      	beq.n	8009402 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800933a:	2b40      	cmp	r3, #64	; 0x40
 800933c:	d10b      	bne.n	8009356 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	691a      	ldr	r2, [r3, #16]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	b2d2      	uxtb	r2, r2
 800934a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	1c5a      	adds	r2, r3, #1
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f022 0201 	bic.w	r2, r2, #1
 8009364:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2220      	movs	r2, #32
 800936a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009378:	4610      	mov	r0, r2
 800937a:	4798      	blx	r3
 800937c:	e041      	b.n	8009402 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b60      	cmp	r3, #96	; 0x60
 8009388:	d125      	bne.n	80093d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2220      	movs	r2, #32
 800938e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	695b      	ldr	r3, [r3, #20]
 800939e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093a2:	2b40      	cmp	r3, #64	; 0x40
 80093a4:	d10b      	bne.n	80093be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	691a      	ldr	r2, [r3, #16]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b0:	b2d2      	uxtb	r2, r2
 80093b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	1c5a      	adds	r2, r3, #1
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 0201 	bic.w	r2, r2, #1
 80093cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7fe ff5b 	bl	800828a <HAL_I2C_AbortCpltCallback>
 80093d4:	e015      	b.n	8009402 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e0:	2b40      	cmp	r3, #64	; 0x40
 80093e2:	d10b      	bne.n	80093fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	691a      	ldr	r2, [r3, #16]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ee:	b2d2      	uxtb	r2, r2
 80093f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7fe ff3a 	bl	8008276 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009406:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	f003 0301 	and.w	r3, r3, #1
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10e      	bne.n	8009430 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009418:	2b00      	cmp	r3, #0
 800941a:	d109      	bne.n	8009430 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009422:	2b00      	cmp	r3, #0
 8009424:	d104      	bne.n	8009430 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800942c:	2b00      	cmp	r3, #0
 800942e:	d007      	beq.n	8009440 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800943e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009446:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944c:	f003 0304 	and.w	r3, r3, #4
 8009450:	2b04      	cmp	r3, #4
 8009452:	d113      	bne.n	800947c <I2C_ITError+0x254>
 8009454:	7bfb      	ldrb	r3, [r7, #15]
 8009456:	2b28      	cmp	r3, #40	; 0x28
 8009458:	d110      	bne.n	800947c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a0a      	ldr	r2, [pc, #40]	; (8009488 <I2C_ITError+0x260>)
 800945e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2220      	movs	r2, #32
 800946a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7fe fedf 	bl	800823a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800947c:	bf00      	nop
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	0800972d 	.word	0x0800972d
 8009488:	ffff0000 	.word	0xffff0000

0800948c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b088      	sub	sp, #32
 8009490:	af02      	add	r7, sp, #8
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	607a      	str	r2, [r7, #4]
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	460b      	mov	r3, r1
 800949a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	2b08      	cmp	r3, #8
 80094a6:	d006      	beq.n	80094b6 <I2C_MasterRequestWrite+0x2a>
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d003      	beq.n	80094b6 <I2C_MasterRequestWrite+0x2a>
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80094b4:	d108      	bne.n	80094c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	e00b      	b.n	80094e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094cc:	2b12      	cmp	r3, #18
 80094ce:	d107      	bne.n	80094e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 f9c5 	bl	800987c <I2C_WaitOnFlagUntilTimeout>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00d      	beq.n	8009514 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009506:	d103      	bne.n	8009510 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800950e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e035      	b.n	8009580 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800951c:	d108      	bne.n	8009530 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800951e:	897b      	ldrh	r3, [r7, #10]
 8009520:	b2db      	uxtb	r3, r3
 8009522:	461a      	mov	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800952c:	611a      	str	r2, [r3, #16]
 800952e:	e01b      	b.n	8009568 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009530:	897b      	ldrh	r3, [r7, #10]
 8009532:	11db      	asrs	r3, r3, #7
 8009534:	b2db      	uxtb	r3, r3
 8009536:	f003 0306 	and.w	r3, r3, #6
 800953a:	b2db      	uxtb	r3, r3
 800953c:	f063 030f 	orn	r3, r3, #15
 8009540:	b2da      	uxtb	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	490e      	ldr	r1, [pc, #56]	; (8009588 <I2C_MasterRequestWrite+0xfc>)
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f000 f9eb 	bl	800992a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e010      	b.n	8009580 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800955e:	897b      	ldrh	r3, [r7, #10]
 8009560:	b2da      	uxtb	r2, r3
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	4907      	ldr	r1, [pc, #28]	; (800958c <I2C_MasterRequestWrite+0x100>)
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 f9db 	bl	800992a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d001      	beq.n	800957e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	e000      	b.n	8009580 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3718      	adds	r7, #24
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	00010008 	.word	0x00010008
 800958c:	00010002 	.word	0x00010002

08009590 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af02      	add	r7, sp, #8
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	607a      	str	r2, [r7, #4]
 800959a:	603b      	str	r3, [r7, #0]
 800959c:	460b      	mov	r3, r1
 800959e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80095b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	2b08      	cmp	r3, #8
 80095ba:	d006      	beq.n	80095ca <I2C_MasterRequestRead+0x3a>
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d003      	beq.n	80095ca <I2C_MasterRequestRead+0x3a>
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80095c8:	d108      	bne.n	80095dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095d8:	601a      	str	r2, [r3, #0]
 80095da:	e00b      	b.n	80095f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e0:	2b11      	cmp	r3, #17
 80095e2:	d107      	bne.n	80095f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f000 f93b 	bl	800987c <I2C_WaitOnFlagUntilTimeout>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00d      	beq.n	8009628 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800961a:	d103      	bne.n	8009624 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009622:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009624:	2303      	movs	r3, #3
 8009626:	e079      	b.n	800971c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009630:	d108      	bne.n	8009644 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009632:	897b      	ldrh	r3, [r7, #10]
 8009634:	b2db      	uxtb	r3, r3
 8009636:	f043 0301 	orr.w	r3, r3, #1
 800963a:	b2da      	uxtb	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	611a      	str	r2, [r3, #16]
 8009642:	e05f      	b.n	8009704 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009644:	897b      	ldrh	r3, [r7, #10]
 8009646:	11db      	asrs	r3, r3, #7
 8009648:	b2db      	uxtb	r3, r3
 800964a:	f003 0306 	and.w	r3, r3, #6
 800964e:	b2db      	uxtb	r3, r3
 8009650:	f063 030f 	orn	r3, r3, #15
 8009654:	b2da      	uxtb	r2, r3
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	4930      	ldr	r1, [pc, #192]	; (8009724 <I2C_MasterRequestRead+0x194>)
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f000 f961 	bl	800992a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e054      	b.n	800971c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009672:	897b      	ldrh	r3, [r7, #10]
 8009674:	b2da      	uxtb	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	4929      	ldr	r1, [pc, #164]	; (8009728 <I2C_MasterRequestRead+0x198>)
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f000 f951 	bl	800992a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e044      	b.n	800971c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009692:	2300      	movs	r3, #0
 8009694:	613b      	str	r3, [r7, #16]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	695b      	ldr	r3, [r3, #20]
 800969c:	613b      	str	r3, [r7, #16]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	613b      	str	r3, [r7, #16]
 80096a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 f8d9 	bl	800987c <I2C_WaitOnFlagUntilTimeout>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00d      	beq.n	80096ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096de:	d103      	bne.n	80096e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80096e8:	2303      	movs	r3, #3
 80096ea:	e017      	b.n	800971c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80096ec:	897b      	ldrh	r3, [r7, #10]
 80096ee:	11db      	asrs	r3, r3, #7
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	f003 0306 	and.w	r3, r3, #6
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	f063 030e 	orn	r3, r3, #14
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	4907      	ldr	r1, [pc, #28]	; (8009728 <I2C_MasterRequestRead+0x198>)
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f000 f90d 	bl	800992a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e000      	b.n	800971c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	00010008 	.word	0x00010008
 8009728:	00010002 	.word	0x00010002

0800972c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009734:	2300      	movs	r3, #0
 8009736:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009744:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009746:	4b4b      	ldr	r3, [pc, #300]	; (8009874 <I2C_DMAAbort+0x148>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	08db      	lsrs	r3, r3, #3
 800974c:	4a4a      	ldr	r2, [pc, #296]	; (8009878 <I2C_DMAAbort+0x14c>)
 800974e:	fba2 2303 	umull	r2, r3, r2, r3
 8009752:	0a1a      	lsrs	r2, r3, #8
 8009754:	4613      	mov	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	00da      	lsls	r2, r3, #3
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d106      	bne.n	8009774 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976a:	f043 0220 	orr.w	r2, r3, #32
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009772:	e00a      	b.n	800978a <I2C_DMAAbort+0x5e>
    }
    count--;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	3b01      	subs	r3, #1
 8009778:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009788:	d0ea      	beq.n	8009760 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009796:	2200      	movs	r2, #0
 8009798:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a6:	2200      	movs	r2, #0
 80097a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097b8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2200      	movs	r2, #0
 80097be:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d003      	beq.n	80097d0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097cc:	2200      	movs	r2, #0
 80097ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097dc:	2200      	movs	r2, #0
 80097de:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f022 0201 	bic.w	r2, r2, #1
 80097ee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b60      	cmp	r3, #96	; 0x60
 80097fa:	d10e      	bne.n	800981a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	2220      	movs	r2, #32
 8009800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	2200      	movs	r2, #0
 8009810:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009812:	6978      	ldr	r0, [r7, #20]
 8009814:	f7fe fd39 	bl	800828a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009818:	e027      	b.n	800986a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800981a:	7cfb      	ldrb	r3, [r7, #19]
 800981c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009820:	2b28      	cmp	r3, #40	; 0x28
 8009822:	d117      	bne.n	8009854 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f042 0201 	orr.w	r2, r2, #1
 8009832:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009842:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2200      	movs	r2, #0
 8009848:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2228      	movs	r2, #40	; 0x28
 800984e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009852:	e007      	b.n	8009864 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	2220      	movs	r2, #32
 8009858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	2200      	movs	r2, #0
 8009860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009864:	6978      	ldr	r0, [r7, #20]
 8009866:	f7fe fd06 	bl	8008276 <HAL_I2C_ErrorCallback>
}
 800986a:	bf00      	nop
 800986c:	3718      	adds	r7, #24
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	20000004 	.word	0x20000004
 8009878:	14f8b589 	.word	0x14f8b589

0800987c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	603b      	str	r3, [r7, #0]
 8009888:	4613      	mov	r3, r2
 800988a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800988c:	e025      	b.n	80098da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009894:	d021      	beq.n	80098da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009896:	f7fd fb0f 	bl	8006eb8 <HAL_GetTick>
 800989a:	4602      	mov	r2, r0
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d302      	bcc.n	80098ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d116      	bne.n	80098da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2220      	movs	r2, #32
 80098b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c6:	f043 0220 	orr.w	r2, r3, #32
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e023      	b.n	8009922 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	0c1b      	lsrs	r3, r3, #16
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d10d      	bne.n	8009900 <I2C_WaitOnFlagUntilTimeout+0x84>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	43da      	mvns	r2, r3
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	4013      	ands	r3, r2
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	bf0c      	ite	eq
 80098f6:	2301      	moveq	r3, #1
 80098f8:	2300      	movne	r3, #0
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	461a      	mov	r2, r3
 80098fe:	e00c      	b.n	800991a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	43da      	mvns	r2, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	4013      	ands	r3, r2
 800990c:	b29b      	uxth	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	bf0c      	ite	eq
 8009912:	2301      	moveq	r3, #1
 8009914:	2300      	movne	r3, #0
 8009916:	b2db      	uxtb	r3, r3
 8009918:	461a      	mov	r2, r3
 800991a:	79fb      	ldrb	r3, [r7, #7]
 800991c:	429a      	cmp	r2, r3
 800991e:	d0b6      	beq.n	800988e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	607a      	str	r2, [r7, #4]
 8009936:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009938:	e051      	b.n	80099de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009948:	d123      	bne.n	8009992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009958:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009962:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2220      	movs	r2, #32
 800996e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997e:	f043 0204 	orr.w	r2, r3, #4
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	e046      	b.n	8009a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009998:	d021      	beq.n	80099de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800999a:	f7fd fa8d 	bl	8006eb8 <HAL_GetTick>
 800999e:	4602      	mov	r2, r0
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d302      	bcc.n	80099b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d116      	bne.n	80099de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2220      	movs	r2, #32
 80099ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ca:	f043 0220 	orr.w	r2, r3, #32
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e020      	b.n	8009a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	0c1b      	lsrs	r3, r3, #16
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d10c      	bne.n	8009a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	43da      	mvns	r2, r3
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	4013      	ands	r3, r2
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	bf14      	ite	ne
 80099fa:	2301      	movne	r3, #1
 80099fc:	2300      	moveq	r3, #0
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	e00b      	b.n	8009a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	43da      	mvns	r2, r3
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	bf14      	ite	ne
 8009a14:	2301      	movne	r3, #1
 8009a16:	2300      	moveq	r3, #0
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d18d      	bne.n	800993a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a34:	e02d      	b.n	8009a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f000 f900 	bl	8009c3c <I2C_IsAcknowledgeFailed>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e02d      	b.n	8009aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a4c:	d021      	beq.n	8009a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a4e:	f7fd fa33 	bl	8006eb8 <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	68ba      	ldr	r2, [r7, #8]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d302      	bcc.n	8009a64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d116      	bne.n	8009a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2220      	movs	r2, #32
 8009a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7e:	f043 0220 	orr.w	r2, r3, #32
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e007      	b.n	8009aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a9c:	2b80      	cmp	r3, #128	; 0x80
 8009a9e:	d1ca      	bne.n	8009a36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	60f8      	str	r0, [r7, #12]
 8009ab2:	60b9      	str	r1, [r7, #8]
 8009ab4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009ab6:	e02d      	b.n	8009b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 f8bf 	bl	8009c3c <I2C_IsAcknowledgeFailed>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e02d      	b.n	8009b24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ace:	d021      	beq.n	8009b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ad0:	f7fd f9f2 	bl	8006eb8 <HAL_GetTick>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d302      	bcc.n	8009ae6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d116      	bne.n	8009b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2220      	movs	r2, #32
 8009af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b00:	f043 0220 	orr.w	r2, r3, #32
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e007      	b.n	8009b24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	f003 0304 	and.w	r3, r3, #4
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d1ca      	bne.n	8009ab8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b34:	2300      	movs	r3, #0
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009b38:	4b13      	ldr	r3, [pc, #76]	; (8009b88 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	08db      	lsrs	r3, r3, #3
 8009b3e:	4a13      	ldr	r2, [pc, #76]	; (8009b8c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009b40:	fba2 2303 	umull	r2, r3, r2, r3
 8009b44:	0a1a      	lsrs	r2, r3, #8
 8009b46:	4613      	mov	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	3b01      	subs	r3, #1
 8009b52:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d107      	bne.n	8009b6a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5e:	f043 0220 	orr.w	r2, r3, #32
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e008      	b.n	8009b7c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b78:	d0e9      	beq.n	8009b4e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3714      	adds	r7, #20
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	20000004 	.word	0x20000004
 8009b8c:	14f8b589 	.word	0x14f8b589

08009b90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009b9c:	e042      	b.n	8009c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	695b      	ldr	r3, [r3, #20]
 8009ba4:	f003 0310 	and.w	r3, r3, #16
 8009ba8:	2b10      	cmp	r3, #16
 8009baa:	d119      	bne.n	8009be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f06f 0210 	mvn.w	r2, #16
 8009bb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2220      	movs	r2, #32
 8009bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e029      	b.n	8009c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009be0:	f7fd f96a 	bl	8006eb8 <HAL_GetTick>
 8009be4:	4602      	mov	r2, r0
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d302      	bcc.n	8009bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d116      	bne.n	8009c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2220      	movs	r2, #32
 8009c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c10:	f043 0220 	orr.w	r2, r3, #32
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e007      	b.n	8009c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c2e:	2b40      	cmp	r3, #64	; 0x40
 8009c30:	d1b5      	bne.n	8009b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3710      	adds	r7, #16
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c52:	d11b      	bne.n	8009c8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2220      	movs	r2, #32
 8009c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c78:	f043 0204 	orr.w	r2, r3, #4
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e000      	b.n	8009c8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	370c      	adds	r7, #12
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b083      	sub	sp, #12
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009caa:	d103      	bne.n	8009cb4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009cb2:	e007      	b.n	8009cc4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009cbc:	d102      	bne.n	8009cc4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2208      	movs	r2, #8
 8009cc2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009cd6:	4b06      	ldr	r3, [pc, #24]	; (8009cf0 <HAL_PWR_EnableBkUpAccess+0x20>)
 8009cd8:	2201      	movs	r2, #1
 8009cda:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8009cdc:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <HAL_PWR_EnableBkUpAccess+0x24>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8009ce2:	687b      	ldr	r3, [r7, #4]
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr
 8009cf0:	420e0020 	.word	0x420e0020
 8009cf4:	40007000 	.word	0x40007000

08009cf8 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8009cfe:	4b06      	ldr	r3, [pc, #24]	; (8009d18 <HAL_PWR_DisableBkUpAccess+0x20>)
 8009d00:	2200      	movs	r2, #0
 8009d02:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8009d04:	4b05      	ldr	r3, [pc, #20]	; (8009d1c <HAL_PWR_DisableBkUpAccess+0x24>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8009d0a:	687b      	ldr	r3, [r7, #4]
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	420e0020 	.word	0x420e0020
 8009d1c:	40007000 	.word	0x40007000

08009d20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d101      	bne.n	8009d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e267      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d075      	beq.n	8009e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009d3e:	4b88      	ldr	r3, [pc, #544]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	f003 030c 	and.w	r3, r3, #12
 8009d46:	2b04      	cmp	r3, #4
 8009d48:	d00c      	beq.n	8009d64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d4a:	4b85      	ldr	r3, [pc, #532]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009d52:	2b08      	cmp	r3, #8
 8009d54:	d112      	bne.n	8009d7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d56:	4b82      	ldr	r3, [pc, #520]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d62:	d10b      	bne.n	8009d7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d64:	4b7e      	ldr	r3, [pc, #504]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d05b      	beq.n	8009e28 <HAL_RCC_OscConfig+0x108>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d157      	bne.n	8009e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e242      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d84:	d106      	bne.n	8009d94 <HAL_RCC_OscConfig+0x74>
 8009d86:	4b76      	ldr	r3, [pc, #472]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a75      	ldr	r2, [pc, #468]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d90:	6013      	str	r3, [r2, #0]
 8009d92:	e01d      	b.n	8009dd0 <HAL_RCC_OscConfig+0xb0>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d9c:	d10c      	bne.n	8009db8 <HAL_RCC_OscConfig+0x98>
 8009d9e:	4b70      	ldr	r3, [pc, #448]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a6f      	ldr	r2, [pc, #444]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009da8:	6013      	str	r3, [r2, #0]
 8009daa:	4b6d      	ldr	r3, [pc, #436]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a6c      	ldr	r2, [pc, #432]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009db4:	6013      	str	r3, [r2, #0]
 8009db6:	e00b      	b.n	8009dd0 <HAL_RCC_OscConfig+0xb0>
 8009db8:	4b69      	ldr	r3, [pc, #420]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a68      	ldr	r2, [pc, #416]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	4b66      	ldr	r3, [pc, #408]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a65      	ldr	r2, [pc, #404]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d013      	beq.n	8009e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dd8:	f7fd f86e 	bl	8006eb8 <HAL_GetTick>
 8009ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009dde:	e008      	b.n	8009df2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009de0:	f7fd f86a 	bl	8006eb8 <HAL_GetTick>
 8009de4:	4602      	mov	r2, r0
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	2b64      	cmp	r3, #100	; 0x64
 8009dec:	d901      	bls.n	8009df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e207      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009df2:	4b5b      	ldr	r3, [pc, #364]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d0f0      	beq.n	8009de0 <HAL_RCC_OscConfig+0xc0>
 8009dfe:	e014      	b.n	8009e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e00:	f7fd f85a 	bl	8006eb8 <HAL_GetTick>
 8009e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e06:	e008      	b.n	8009e1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e08:	f7fd f856 	bl	8006eb8 <HAL_GetTick>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	2b64      	cmp	r3, #100	; 0x64
 8009e14:	d901      	bls.n	8009e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009e16:	2303      	movs	r3, #3
 8009e18:	e1f3      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e1a:	4b51      	ldr	r3, [pc, #324]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1f0      	bne.n	8009e08 <HAL_RCC_OscConfig+0xe8>
 8009e26:	e000      	b.n	8009e2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 0302 	and.w	r3, r3, #2
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d063      	beq.n	8009efe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009e36:	4b4a      	ldr	r3, [pc, #296]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f003 030c 	and.w	r3, r3, #12
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00b      	beq.n	8009e5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e42:	4b47      	ldr	r3, [pc, #284]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009e4a:	2b08      	cmp	r3, #8
 8009e4c:	d11c      	bne.n	8009e88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e4e:	4b44      	ldr	r3, [pc, #272]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d116      	bne.n	8009e88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e5a:	4b41      	ldr	r3, [pc, #260]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f003 0302 	and.w	r3, r3, #2
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d005      	beq.n	8009e72 <HAL_RCC_OscConfig+0x152>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d001      	beq.n	8009e72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e1c7      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e72:	4b3b      	ldr	r3, [pc, #236]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	00db      	lsls	r3, r3, #3
 8009e80:	4937      	ldr	r1, [pc, #220]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009e82:	4313      	orrs	r3, r2
 8009e84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e86:	e03a      	b.n	8009efe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d020      	beq.n	8009ed2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009e90:	4b34      	ldr	r3, [pc, #208]	; (8009f64 <HAL_RCC_OscConfig+0x244>)
 8009e92:	2201      	movs	r2, #1
 8009e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e96:	f7fd f80f 	bl	8006eb8 <HAL_GetTick>
 8009e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e9c:	e008      	b.n	8009eb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e9e:	f7fd f80b 	bl	8006eb8 <HAL_GetTick>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d901      	bls.n	8009eb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009eac:	2303      	movs	r3, #3
 8009eae:	e1a8      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009eb0:	4b2b      	ldr	r3, [pc, #172]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 0302 	and.w	r3, r3, #2
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d0f0      	beq.n	8009e9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ebc:	4b28      	ldr	r3, [pc, #160]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	4925      	ldr	r1, [pc, #148]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	600b      	str	r3, [r1, #0]
 8009ed0:	e015      	b.n	8009efe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ed2:	4b24      	ldr	r3, [pc, #144]	; (8009f64 <HAL_RCC_OscConfig+0x244>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ed8:	f7fc ffee 	bl	8006eb8 <HAL_GetTick>
 8009edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ede:	e008      	b.n	8009ef2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ee0:	f7fc ffea 	bl	8006eb8 <HAL_GetTick>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d901      	bls.n	8009ef2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009eee:	2303      	movs	r3, #3
 8009ef0:	e187      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ef2:	4b1b      	ldr	r3, [pc, #108]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 0302 	and.w	r3, r3, #2
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1f0      	bne.n	8009ee0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 0308 	and.w	r3, r3, #8
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d036      	beq.n	8009f78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d016      	beq.n	8009f40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f12:	4b15      	ldr	r3, [pc, #84]	; (8009f68 <HAL_RCC_OscConfig+0x248>)
 8009f14:	2201      	movs	r2, #1
 8009f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f18:	f7fc ffce 	bl	8006eb8 <HAL_GetTick>
 8009f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f1e:	e008      	b.n	8009f32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f20:	f7fc ffca 	bl	8006eb8 <HAL_GetTick>
 8009f24:	4602      	mov	r2, r0
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d901      	bls.n	8009f32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e167      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f32:	4b0b      	ldr	r3, [pc, #44]	; (8009f60 <HAL_RCC_OscConfig+0x240>)
 8009f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d0f0      	beq.n	8009f20 <HAL_RCC_OscConfig+0x200>
 8009f3e:	e01b      	b.n	8009f78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f40:	4b09      	ldr	r3, [pc, #36]	; (8009f68 <HAL_RCC_OscConfig+0x248>)
 8009f42:	2200      	movs	r2, #0
 8009f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f46:	f7fc ffb7 	bl	8006eb8 <HAL_GetTick>
 8009f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f4c:	e00e      	b.n	8009f6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f4e:	f7fc ffb3 	bl	8006eb8 <HAL_GetTick>
 8009f52:	4602      	mov	r2, r0
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	2b02      	cmp	r3, #2
 8009f5a:	d907      	bls.n	8009f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	e150      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
 8009f60:	40023800 	.word	0x40023800
 8009f64:	42470000 	.word	0x42470000
 8009f68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f6c:	4b88      	ldr	r3, [pc, #544]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 8009f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f70:	f003 0302 	and.w	r3, r3, #2
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1ea      	bne.n	8009f4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0304 	and.w	r3, r3, #4
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 8097 	beq.w	800a0b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f86:	2300      	movs	r3, #0
 8009f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f8a:	4b81      	ldr	r3, [pc, #516]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d10f      	bne.n	8009fb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f96:	2300      	movs	r3, #0
 8009f98:	60bb      	str	r3, [r7, #8]
 8009f9a:	4b7d      	ldr	r3, [pc, #500]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 8009f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f9e:	4a7c      	ldr	r2, [pc, #496]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 8009fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8009fa6:	4b7a      	ldr	r3, [pc, #488]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fae:	60bb      	str	r3, [r7, #8]
 8009fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009fb6:	4b77      	ldr	r3, [pc, #476]	; (800a194 <HAL_RCC_OscConfig+0x474>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d118      	bne.n	8009ff4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009fc2:	4b74      	ldr	r3, [pc, #464]	; (800a194 <HAL_RCC_OscConfig+0x474>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a73      	ldr	r2, [pc, #460]	; (800a194 <HAL_RCC_OscConfig+0x474>)
 8009fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009fce:	f7fc ff73 	bl	8006eb8 <HAL_GetTick>
 8009fd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009fd4:	e008      	b.n	8009fe8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fd6:	f7fc ff6f 	bl	8006eb8 <HAL_GetTick>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d901      	bls.n	8009fe8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	e10c      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009fe8:	4b6a      	ldr	r3, [pc, #424]	; (800a194 <HAL_RCC_OscConfig+0x474>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d0f0      	beq.n	8009fd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d106      	bne.n	800a00a <HAL_RCC_OscConfig+0x2ea>
 8009ffc:	4b64      	ldr	r3, [pc, #400]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 8009ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a000:	4a63      	ldr	r2, [pc, #396]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a002:	f043 0301 	orr.w	r3, r3, #1
 800a006:	6713      	str	r3, [r2, #112]	; 0x70
 800a008:	e01c      	b.n	800a044 <HAL_RCC_OscConfig+0x324>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	2b05      	cmp	r3, #5
 800a010:	d10c      	bne.n	800a02c <HAL_RCC_OscConfig+0x30c>
 800a012:	4b5f      	ldr	r3, [pc, #380]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a016:	4a5e      	ldr	r2, [pc, #376]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a018:	f043 0304 	orr.w	r3, r3, #4
 800a01c:	6713      	str	r3, [r2, #112]	; 0x70
 800a01e:	4b5c      	ldr	r3, [pc, #368]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a022:	4a5b      	ldr	r2, [pc, #364]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a024:	f043 0301 	orr.w	r3, r3, #1
 800a028:	6713      	str	r3, [r2, #112]	; 0x70
 800a02a:	e00b      	b.n	800a044 <HAL_RCC_OscConfig+0x324>
 800a02c:	4b58      	ldr	r3, [pc, #352]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a030:	4a57      	ldr	r2, [pc, #348]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a032:	f023 0301 	bic.w	r3, r3, #1
 800a036:	6713      	str	r3, [r2, #112]	; 0x70
 800a038:	4b55      	ldr	r3, [pc, #340]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a03a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a03c:	4a54      	ldr	r2, [pc, #336]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a03e:	f023 0304 	bic.w	r3, r3, #4
 800a042:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d015      	beq.n	800a078 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a04c:	f7fc ff34 	bl	8006eb8 <HAL_GetTick>
 800a050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a052:	e00a      	b.n	800a06a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a054:	f7fc ff30 	bl	8006eb8 <HAL_GetTick>
 800a058:	4602      	mov	r2, r0
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	1ad3      	subs	r3, r2, r3
 800a05e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a062:	4293      	cmp	r3, r2
 800a064:	d901      	bls.n	800a06a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e0cb      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a06a:	4b49      	ldr	r3, [pc, #292]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a06c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a06e:	f003 0302 	and.w	r3, r3, #2
 800a072:	2b00      	cmp	r3, #0
 800a074:	d0ee      	beq.n	800a054 <HAL_RCC_OscConfig+0x334>
 800a076:	e014      	b.n	800a0a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a078:	f7fc ff1e 	bl	8006eb8 <HAL_GetTick>
 800a07c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a07e:	e00a      	b.n	800a096 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a080:	f7fc ff1a 	bl	8006eb8 <HAL_GetTick>
 800a084:	4602      	mov	r2, r0
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	1ad3      	subs	r3, r2, r3
 800a08a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a08e:	4293      	cmp	r3, r2
 800a090:	d901      	bls.n	800a096 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a092:	2303      	movs	r3, #3
 800a094:	e0b5      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a096:	4b3e      	ldr	r3, [pc, #248]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a09a:	f003 0302 	and.w	r3, r3, #2
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1ee      	bne.n	800a080 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a0a2:	7dfb      	ldrb	r3, [r7, #23]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d105      	bne.n	800a0b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0a8:	4b39      	ldr	r3, [pc, #228]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ac:	4a38      	ldr	r2, [pc, #224]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a0ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f000 80a1 	beq.w	800a200 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a0be:	4b34      	ldr	r3, [pc, #208]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	f003 030c 	and.w	r3, r3, #12
 800a0c6:	2b08      	cmp	r3, #8
 800a0c8:	d05c      	beq.n	800a184 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d141      	bne.n	800a156 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0d2:	4b31      	ldr	r3, [pc, #196]	; (800a198 <HAL_RCC_OscConfig+0x478>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0d8:	f7fc feee 	bl	8006eb8 <HAL_GetTick>
 800a0dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0de:	e008      	b.n	800a0f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0e0:	f7fc feea 	bl	8006eb8 <HAL_GetTick>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d901      	bls.n	800a0f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	e087      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0f2:	4b27      	ldr	r3, [pc, #156]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1f0      	bne.n	800a0e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	69da      	ldr	r2, [r3, #28]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a1b      	ldr	r3, [r3, #32]
 800a106:	431a      	orrs	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10c:	019b      	lsls	r3, r3, #6
 800a10e:	431a      	orrs	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a114:	085b      	lsrs	r3, r3, #1
 800a116:	3b01      	subs	r3, #1
 800a118:	041b      	lsls	r3, r3, #16
 800a11a:	431a      	orrs	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a120:	061b      	lsls	r3, r3, #24
 800a122:	491b      	ldr	r1, [pc, #108]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a124:	4313      	orrs	r3, r2
 800a126:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a128:	4b1b      	ldr	r3, [pc, #108]	; (800a198 <HAL_RCC_OscConfig+0x478>)
 800a12a:	2201      	movs	r2, #1
 800a12c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a12e:	f7fc fec3 	bl	8006eb8 <HAL_GetTick>
 800a132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a134:	e008      	b.n	800a148 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a136:	f7fc febf 	bl	8006eb8 <HAL_GetTick>
 800a13a:	4602      	mov	r2, r0
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	2b02      	cmp	r3, #2
 800a142:	d901      	bls.n	800a148 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a144:	2303      	movs	r3, #3
 800a146:	e05c      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a148:	4b11      	ldr	r3, [pc, #68]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a150:	2b00      	cmp	r3, #0
 800a152:	d0f0      	beq.n	800a136 <HAL_RCC_OscConfig+0x416>
 800a154:	e054      	b.n	800a200 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a156:	4b10      	ldr	r3, [pc, #64]	; (800a198 <HAL_RCC_OscConfig+0x478>)
 800a158:	2200      	movs	r2, #0
 800a15a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a15c:	f7fc feac 	bl	8006eb8 <HAL_GetTick>
 800a160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a162:	e008      	b.n	800a176 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a164:	f7fc fea8 	bl	8006eb8 <HAL_GetTick>
 800a168:	4602      	mov	r2, r0
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	1ad3      	subs	r3, r2, r3
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d901      	bls.n	800a176 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a172:	2303      	movs	r3, #3
 800a174:	e045      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a176:	4b06      	ldr	r3, [pc, #24]	; (800a190 <HAL_RCC_OscConfig+0x470>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1f0      	bne.n	800a164 <HAL_RCC_OscConfig+0x444>
 800a182:	e03d      	b.n	800a200 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d107      	bne.n	800a19c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e038      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
 800a190:	40023800 	.word	0x40023800
 800a194:	40007000 	.word	0x40007000
 800a198:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a19c:	4b1b      	ldr	r3, [pc, #108]	; (800a20c <HAL_RCC_OscConfig+0x4ec>)
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	699b      	ldr	r3, [r3, #24]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d028      	beq.n	800a1fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d121      	bne.n	800a1fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d11a      	bne.n	800a1fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a1d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d111      	bne.n	800a1fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e2:	085b      	lsrs	r3, r3, #1
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d107      	bne.n	800a1fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d001      	beq.n	800a200 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e000      	b.n	800a202 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	40023800 	.word	0x40023800

0800a210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d101      	bne.n	800a224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e0cc      	b.n	800a3be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a224:	4b68      	ldr	r3, [pc, #416]	; (800a3c8 <HAL_RCC_ClockConfig+0x1b8>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 0307 	and.w	r3, r3, #7
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d90c      	bls.n	800a24c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a232:	4b65      	ldr	r3, [pc, #404]	; (800a3c8 <HAL_RCC_ClockConfig+0x1b8>)
 800a234:	683a      	ldr	r2, [r7, #0]
 800a236:	b2d2      	uxtb	r2, r2
 800a238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a23a:	4b63      	ldr	r3, [pc, #396]	; (800a3c8 <HAL_RCC_ClockConfig+0x1b8>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 0307 	and.w	r3, r3, #7
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	429a      	cmp	r2, r3
 800a246:	d001      	beq.n	800a24c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	e0b8      	b.n	800a3be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 0302 	and.w	r3, r3, #2
 800a254:	2b00      	cmp	r3, #0
 800a256:	d020      	beq.n	800a29a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 0304 	and.w	r3, r3, #4
 800a260:	2b00      	cmp	r3, #0
 800a262:	d005      	beq.n	800a270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a264:	4b59      	ldr	r3, [pc, #356]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	4a58      	ldr	r2, [pc, #352]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a26a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a26e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f003 0308 	and.w	r3, r3, #8
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d005      	beq.n	800a288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a27c:	4b53      	ldr	r3, [pc, #332]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	4a52      	ldr	r2, [pc, #328]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a288:	4b50      	ldr	r3, [pc, #320]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	494d      	ldr	r1, [pc, #308]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a296:	4313      	orrs	r3, r2
 800a298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0301 	and.w	r3, r3, #1
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d044      	beq.n	800a330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d107      	bne.n	800a2be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2ae:	4b47      	ldr	r3, [pc, #284]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d119      	bne.n	800a2ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e07f      	b.n	800a3be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d003      	beq.n	800a2ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a2ca:	2b03      	cmp	r3, #3
 800a2cc:	d107      	bne.n	800a2de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2ce:	4b3f      	ldr	r3, [pc, #252]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d109      	bne.n	800a2ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e06f      	b.n	800a3be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2de:	4b3b      	ldr	r3, [pc, #236]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f003 0302 	and.w	r3, r3, #2
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d101      	bne.n	800a2ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e067      	b.n	800a3be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a2ee:	4b37      	ldr	r3, [pc, #220]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	f023 0203 	bic.w	r2, r3, #3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	4934      	ldr	r1, [pc, #208]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a300:	f7fc fdda 	bl	8006eb8 <HAL_GetTick>
 800a304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a306:	e00a      	b.n	800a31e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a308:	f7fc fdd6 	bl	8006eb8 <HAL_GetTick>
 800a30c:	4602      	mov	r2, r0
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	f241 3288 	movw	r2, #5000	; 0x1388
 800a316:	4293      	cmp	r3, r2
 800a318:	d901      	bls.n	800a31e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a31a:	2303      	movs	r3, #3
 800a31c:	e04f      	b.n	800a3be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a31e:	4b2b      	ldr	r3, [pc, #172]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	f003 020c 	and.w	r2, r3, #12
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d1eb      	bne.n	800a308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a330:	4b25      	ldr	r3, [pc, #148]	; (800a3c8 <HAL_RCC_ClockConfig+0x1b8>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 0307 	and.w	r3, r3, #7
 800a338:	683a      	ldr	r2, [r7, #0]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d20c      	bcs.n	800a358 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a33e:	4b22      	ldr	r3, [pc, #136]	; (800a3c8 <HAL_RCC_ClockConfig+0x1b8>)
 800a340:	683a      	ldr	r2, [r7, #0]
 800a342:	b2d2      	uxtb	r2, r2
 800a344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a346:	4b20      	ldr	r3, [pc, #128]	; (800a3c8 <HAL_RCC_ClockConfig+0x1b8>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 0307 	and.w	r3, r3, #7
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	429a      	cmp	r2, r3
 800a352:	d001      	beq.n	800a358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	e032      	b.n	800a3be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 0304 	and.w	r3, r3, #4
 800a360:	2b00      	cmp	r3, #0
 800a362:	d008      	beq.n	800a376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a364:	4b19      	ldr	r3, [pc, #100]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	4916      	ldr	r1, [pc, #88]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a372:	4313      	orrs	r3, r2
 800a374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 0308 	and.w	r3, r3, #8
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d009      	beq.n	800a396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a382:	4b12      	ldr	r3, [pc, #72]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	00db      	lsls	r3, r3, #3
 800a390:	490e      	ldr	r1, [pc, #56]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a392:	4313      	orrs	r3, r2
 800a394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a396:	f000 f821 	bl	800a3dc <HAL_RCC_GetSysClockFreq>
 800a39a:	4602      	mov	r2, r0
 800a39c:	4b0b      	ldr	r3, [pc, #44]	; (800a3cc <HAL_RCC_ClockConfig+0x1bc>)
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	091b      	lsrs	r3, r3, #4
 800a3a2:	f003 030f 	and.w	r3, r3, #15
 800a3a6:	490a      	ldr	r1, [pc, #40]	; (800a3d0 <HAL_RCC_ClockConfig+0x1c0>)
 800a3a8:	5ccb      	ldrb	r3, [r1, r3]
 800a3aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ae:	4a09      	ldr	r2, [pc, #36]	; (800a3d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a3b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a3b2:	4b09      	ldr	r3, [pc, #36]	; (800a3d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fc fd3a 	bl	8006e30 <HAL_InitTick>

  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	40023c00 	.word	0x40023c00
 800a3cc:	40023800 	.word	0x40023800
 800a3d0:	080151f0 	.word	0x080151f0
 800a3d4:	20000004 	.word	0x20000004
 800a3d8:	20000008 	.word	0x20000008

0800a3dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a3dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3e0:	b090      	sub	sp, #64	; 0x40
 800a3e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	637b      	str	r3, [r7, #52]	; 0x34
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a3f4:	4b59      	ldr	r3, [pc, #356]	; (800a55c <HAL_RCC_GetSysClockFreq+0x180>)
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	f003 030c 	and.w	r3, r3, #12
 800a3fc:	2b08      	cmp	r3, #8
 800a3fe:	d00d      	beq.n	800a41c <HAL_RCC_GetSysClockFreq+0x40>
 800a400:	2b08      	cmp	r3, #8
 800a402:	f200 80a1 	bhi.w	800a548 <HAL_RCC_GetSysClockFreq+0x16c>
 800a406:	2b00      	cmp	r3, #0
 800a408:	d002      	beq.n	800a410 <HAL_RCC_GetSysClockFreq+0x34>
 800a40a:	2b04      	cmp	r3, #4
 800a40c:	d003      	beq.n	800a416 <HAL_RCC_GetSysClockFreq+0x3a>
 800a40e:	e09b      	b.n	800a548 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a410:	4b53      	ldr	r3, [pc, #332]	; (800a560 <HAL_RCC_GetSysClockFreq+0x184>)
 800a412:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800a414:	e09b      	b.n	800a54e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a416:	4b53      	ldr	r3, [pc, #332]	; (800a564 <HAL_RCC_GetSysClockFreq+0x188>)
 800a418:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a41a:	e098      	b.n	800a54e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a41c:	4b4f      	ldr	r3, [pc, #316]	; (800a55c <HAL_RCC_GetSysClockFreq+0x180>)
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a424:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a426:	4b4d      	ldr	r3, [pc, #308]	; (800a55c <HAL_RCC_GetSysClockFreq+0x180>)
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d028      	beq.n	800a484 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a432:	4b4a      	ldr	r3, [pc, #296]	; (800a55c <HAL_RCC_GetSysClockFreq+0x180>)
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	099b      	lsrs	r3, r3, #6
 800a438:	2200      	movs	r2, #0
 800a43a:	623b      	str	r3, [r7, #32]
 800a43c:	627a      	str	r2, [r7, #36]	; 0x24
 800a43e:	6a3b      	ldr	r3, [r7, #32]
 800a440:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a444:	2100      	movs	r1, #0
 800a446:	4b47      	ldr	r3, [pc, #284]	; (800a564 <HAL_RCC_GetSysClockFreq+0x188>)
 800a448:	fb03 f201 	mul.w	r2, r3, r1
 800a44c:	2300      	movs	r3, #0
 800a44e:	fb00 f303 	mul.w	r3, r0, r3
 800a452:	4413      	add	r3, r2
 800a454:	4a43      	ldr	r2, [pc, #268]	; (800a564 <HAL_RCC_GetSysClockFreq+0x188>)
 800a456:	fba0 1202 	umull	r1, r2, r0, r2
 800a45a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a45c:	460a      	mov	r2, r1
 800a45e:	62ba      	str	r2, [r7, #40]	; 0x28
 800a460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a462:	4413      	add	r3, r2
 800a464:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a468:	2200      	movs	r2, #0
 800a46a:	61bb      	str	r3, [r7, #24]
 800a46c:	61fa      	str	r2, [r7, #28]
 800a46e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a472:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a476:	f7f6 fc07 	bl	8000c88 <__aeabi_uldivmod>
 800a47a:	4602      	mov	r2, r0
 800a47c:	460b      	mov	r3, r1
 800a47e:	4613      	mov	r3, r2
 800a480:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a482:	e053      	b.n	800a52c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a484:	4b35      	ldr	r3, [pc, #212]	; (800a55c <HAL_RCC_GetSysClockFreq+0x180>)
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	099b      	lsrs	r3, r3, #6
 800a48a:	2200      	movs	r2, #0
 800a48c:	613b      	str	r3, [r7, #16]
 800a48e:	617a      	str	r2, [r7, #20]
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a496:	f04f 0b00 	mov.w	fp, #0
 800a49a:	4652      	mov	r2, sl
 800a49c:	465b      	mov	r3, fp
 800a49e:	f04f 0000 	mov.w	r0, #0
 800a4a2:	f04f 0100 	mov.w	r1, #0
 800a4a6:	0159      	lsls	r1, r3, #5
 800a4a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a4ac:	0150      	lsls	r0, r2, #5
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	ebb2 080a 	subs.w	r8, r2, sl
 800a4b6:	eb63 090b 	sbc.w	r9, r3, fp
 800a4ba:	f04f 0200 	mov.w	r2, #0
 800a4be:	f04f 0300 	mov.w	r3, #0
 800a4c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a4c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a4ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a4ce:	ebb2 0408 	subs.w	r4, r2, r8
 800a4d2:	eb63 0509 	sbc.w	r5, r3, r9
 800a4d6:	f04f 0200 	mov.w	r2, #0
 800a4da:	f04f 0300 	mov.w	r3, #0
 800a4de:	00eb      	lsls	r3, r5, #3
 800a4e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a4e4:	00e2      	lsls	r2, r4, #3
 800a4e6:	4614      	mov	r4, r2
 800a4e8:	461d      	mov	r5, r3
 800a4ea:	eb14 030a 	adds.w	r3, r4, sl
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	eb45 030b 	adc.w	r3, r5, fp
 800a4f4:	607b      	str	r3, [r7, #4]
 800a4f6:	f04f 0200 	mov.w	r2, #0
 800a4fa:	f04f 0300 	mov.w	r3, #0
 800a4fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a502:	4629      	mov	r1, r5
 800a504:	028b      	lsls	r3, r1, #10
 800a506:	4621      	mov	r1, r4
 800a508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a50c:	4621      	mov	r1, r4
 800a50e:	028a      	lsls	r2, r1, #10
 800a510:	4610      	mov	r0, r2
 800a512:	4619      	mov	r1, r3
 800a514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a516:	2200      	movs	r2, #0
 800a518:	60bb      	str	r3, [r7, #8]
 800a51a:	60fa      	str	r2, [r7, #12]
 800a51c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a520:	f7f6 fbb2 	bl	8000c88 <__aeabi_uldivmod>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	4613      	mov	r3, r2
 800a52a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a52c:	4b0b      	ldr	r3, [pc, #44]	; (800a55c <HAL_RCC_GetSysClockFreq+0x180>)
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	0c1b      	lsrs	r3, r3, #16
 800a532:	f003 0303 	and.w	r3, r3, #3
 800a536:	3301      	adds	r3, #1
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800a53c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a540:	fbb2 f3f3 	udiv	r3, r2, r3
 800a544:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a546:	e002      	b.n	800a54e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a548:	4b05      	ldr	r3, [pc, #20]	; (800a560 <HAL_RCC_GetSysClockFreq+0x184>)
 800a54a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a54c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a550:	4618      	mov	r0, r3
 800a552:	3740      	adds	r7, #64	; 0x40
 800a554:	46bd      	mov	sp, r7
 800a556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a55a:	bf00      	nop
 800a55c:	40023800 	.word	0x40023800
 800a560:	00f42400 	.word	0x00f42400
 800a564:	017d7840 	.word	0x017d7840

0800a568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a568:	b480      	push	{r7}
 800a56a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a56c:	4b03      	ldr	r3, [pc, #12]	; (800a57c <HAL_RCC_GetHCLKFreq+0x14>)
 800a56e:	681b      	ldr	r3, [r3, #0]
}
 800a570:	4618      	mov	r0, r3
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	20000004 	.word	0x20000004

0800a580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a584:	f7ff fff0 	bl	800a568 <HAL_RCC_GetHCLKFreq>
 800a588:	4602      	mov	r2, r0
 800a58a:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	0a9b      	lsrs	r3, r3, #10
 800a590:	f003 0307 	and.w	r3, r3, #7
 800a594:	4903      	ldr	r1, [pc, #12]	; (800a5a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a596:	5ccb      	ldrb	r3, [r1, r3]
 800a598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	40023800 	.word	0x40023800
 800a5a4:	08015200 	.word	0x08015200

0800a5a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a5ac:	f7ff ffdc 	bl	800a568 <HAL_RCC_GetHCLKFreq>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	4b05      	ldr	r3, [pc, #20]	; (800a5c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	0b5b      	lsrs	r3, r3, #13
 800a5b8:	f003 0307 	and.w	r3, r3, #7
 800a5bc:	4903      	ldr	r1, [pc, #12]	; (800a5cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a5be:	5ccb      	ldrb	r3, [r1, r3]
 800a5c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	40023800 	.word	0x40023800
 800a5cc:	08015200 	.word	0x08015200

0800a5d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e041      	b.n	800a666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d106      	bne.n	800a5fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7fc f8e2 	bl	80067c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2202      	movs	r2, #2
 800a600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	3304      	adds	r3, #4
 800a60c:	4619      	mov	r1, r3
 800a60e:	4610      	mov	r0, r2
 800a610:	f000 ff94 	bl	800b53c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b082      	sub	sp, #8
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e041      	b.n	800a704 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a686:	b2db      	uxtb	r3, r3
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d106      	bne.n	800a69a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f839 	bl	800a70c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2202      	movs	r2, #2
 800a69e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	f000 ff45 	bl	800b53c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a714:	bf00      	nop
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d109      	bne.n	800a744 <HAL_TIM_PWM_Start+0x24>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b01      	cmp	r3, #1
 800a73a:	bf14      	ite	ne
 800a73c:	2301      	movne	r3, #1
 800a73e:	2300      	moveq	r3, #0
 800a740:	b2db      	uxtb	r3, r3
 800a742:	e022      	b.n	800a78a <HAL_TIM_PWM_Start+0x6a>
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	2b04      	cmp	r3, #4
 800a748:	d109      	bne.n	800a75e <HAL_TIM_PWM_Start+0x3e>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a750:	b2db      	uxtb	r3, r3
 800a752:	2b01      	cmp	r3, #1
 800a754:	bf14      	ite	ne
 800a756:	2301      	movne	r3, #1
 800a758:	2300      	moveq	r3, #0
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	e015      	b.n	800a78a <HAL_TIM_PWM_Start+0x6a>
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	2b08      	cmp	r3, #8
 800a762:	d109      	bne.n	800a778 <HAL_TIM_PWM_Start+0x58>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	bf14      	ite	ne
 800a770:	2301      	movne	r3, #1
 800a772:	2300      	moveq	r3, #0
 800a774:	b2db      	uxtb	r3, r3
 800a776:	e008      	b.n	800a78a <HAL_TIM_PWM_Start+0x6a>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	2b01      	cmp	r3, #1
 800a782:	bf14      	ite	ne
 800a784:	2301      	movne	r3, #1
 800a786:	2300      	moveq	r3, #0
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d001      	beq.n	800a792 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	e07c      	b.n	800a88c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d104      	bne.n	800a7a2 <HAL_TIM_PWM_Start+0x82>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2202      	movs	r2, #2
 800a79c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7a0:	e013      	b.n	800a7ca <HAL_TIM_PWM_Start+0xaa>
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	2b04      	cmp	r3, #4
 800a7a6:	d104      	bne.n	800a7b2 <HAL_TIM_PWM_Start+0x92>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7b0:	e00b      	b.n	800a7ca <HAL_TIM_PWM_Start+0xaa>
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2b08      	cmp	r3, #8
 800a7b6:	d104      	bne.n	800a7c2 <HAL_TIM_PWM_Start+0xa2>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2202      	movs	r2, #2
 800a7bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7c0:	e003      	b.n	800a7ca <HAL_TIM_PWM_Start+0xaa>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2202      	movs	r2, #2
 800a7c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	6839      	ldr	r1, [r7, #0]
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f001 fac6 	bl	800bd64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a2d      	ldr	r2, [pc, #180]	; (800a894 <HAL_TIM_PWM_Start+0x174>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d004      	beq.n	800a7ec <HAL_TIM_PWM_Start+0xcc>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a2c      	ldr	r2, [pc, #176]	; (800a898 <HAL_TIM_PWM_Start+0x178>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d101      	bne.n	800a7f0 <HAL_TIM_PWM_Start+0xd0>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e000      	b.n	800a7f2 <HAL_TIM_PWM_Start+0xd2>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d007      	beq.n	800a806 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a804:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a22      	ldr	r2, [pc, #136]	; (800a894 <HAL_TIM_PWM_Start+0x174>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d022      	beq.n	800a856 <HAL_TIM_PWM_Start+0x136>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a818:	d01d      	beq.n	800a856 <HAL_TIM_PWM_Start+0x136>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a1f      	ldr	r2, [pc, #124]	; (800a89c <HAL_TIM_PWM_Start+0x17c>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d018      	beq.n	800a856 <HAL_TIM_PWM_Start+0x136>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a1d      	ldr	r2, [pc, #116]	; (800a8a0 <HAL_TIM_PWM_Start+0x180>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d013      	beq.n	800a856 <HAL_TIM_PWM_Start+0x136>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a1c      	ldr	r2, [pc, #112]	; (800a8a4 <HAL_TIM_PWM_Start+0x184>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d00e      	beq.n	800a856 <HAL_TIM_PWM_Start+0x136>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a16      	ldr	r2, [pc, #88]	; (800a898 <HAL_TIM_PWM_Start+0x178>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d009      	beq.n	800a856 <HAL_TIM_PWM_Start+0x136>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a18      	ldr	r2, [pc, #96]	; (800a8a8 <HAL_TIM_PWM_Start+0x188>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d004      	beq.n	800a856 <HAL_TIM_PWM_Start+0x136>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a16      	ldr	r2, [pc, #88]	; (800a8ac <HAL_TIM_PWM_Start+0x18c>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d111      	bne.n	800a87a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	f003 0307 	and.w	r3, r3, #7
 800a860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2b06      	cmp	r3, #6
 800a866:	d010      	beq.n	800a88a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f042 0201 	orr.w	r2, r2, #1
 800a876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a878:	e007      	b.n	800a88a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f042 0201 	orr.w	r2, r2, #1
 800a888:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	40010000 	.word	0x40010000
 800a898:	40010400 	.word	0x40010400
 800a89c:	40000400 	.word	0x40000400
 800a8a0:	40000800 	.word	0x40000800
 800a8a4:	40000c00 	.word	0x40000c00
 800a8a8:	40014000 	.word	0x40014000
 800a8ac:	40001800 	.word	0x40001800

0800a8b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d101      	bne.n	800a8c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e041      	b.n	800a946 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d106      	bne.n	800a8dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f7fc f86a 	bl	80069b0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2202      	movs	r2, #2
 800a8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	4610      	mov	r0, r2
 800a8f0:	f000 fe24 	bl	800b53c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3708      	adds	r7, #8
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
	...

0800a950 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d104      	bne.n	800a96e <HAL_TIM_IC_Start_IT+0x1e>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	e013      	b.n	800a996 <HAL_TIM_IC_Start_IT+0x46>
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	2b04      	cmp	r3, #4
 800a972:	d104      	bne.n	800a97e <HAL_TIM_IC_Start_IT+0x2e>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	e00b      	b.n	800a996 <HAL_TIM_IC_Start_IT+0x46>
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	2b08      	cmp	r3, #8
 800a982:	d104      	bne.n	800a98e <HAL_TIM_IC_Start_IT+0x3e>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	e003      	b.n	800a996 <HAL_TIM_IC_Start_IT+0x46>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a994:	b2db      	uxtb	r3, r3
 800a996:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d104      	bne.n	800a9a8 <HAL_TIM_IC_Start_IT+0x58>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	e013      	b.n	800a9d0 <HAL_TIM_IC_Start_IT+0x80>
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	2b04      	cmp	r3, #4
 800a9ac:	d104      	bne.n	800a9b8 <HAL_TIM_IC_Start_IT+0x68>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	e00b      	b.n	800a9d0 <HAL_TIM_IC_Start_IT+0x80>
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	2b08      	cmp	r3, #8
 800a9bc:	d104      	bne.n	800a9c8 <HAL_TIM_IC_Start_IT+0x78>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	e003      	b.n	800a9d0 <HAL_TIM_IC_Start_IT+0x80>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9d2:	7bbb      	ldrb	r3, [r7, #14]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d102      	bne.n	800a9de <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a9d8:	7b7b      	ldrb	r3, [r7, #13]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d001      	beq.n	800a9e2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e0cc      	b.n	800ab7c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d104      	bne.n	800a9f2 <HAL_TIM_IC_Start_IT+0xa2>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9f0:	e013      	b.n	800aa1a <HAL_TIM_IC_Start_IT+0xca>
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b04      	cmp	r3, #4
 800a9f6:	d104      	bne.n	800aa02 <HAL_TIM_IC_Start_IT+0xb2>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2202      	movs	r2, #2
 800a9fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa00:	e00b      	b.n	800aa1a <HAL_TIM_IC_Start_IT+0xca>
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2b08      	cmp	r3, #8
 800aa06:	d104      	bne.n	800aa12 <HAL_TIM_IC_Start_IT+0xc2>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2202      	movs	r2, #2
 800aa0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa10:	e003      	b.n	800aa1a <HAL_TIM_IC_Start_IT+0xca>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2202      	movs	r2, #2
 800aa16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d104      	bne.n	800aa2a <HAL_TIM_IC_Start_IT+0xda>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2202      	movs	r2, #2
 800aa24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa28:	e013      	b.n	800aa52 <HAL_TIM_IC_Start_IT+0x102>
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	d104      	bne.n	800aa3a <HAL_TIM_IC_Start_IT+0xea>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2202      	movs	r2, #2
 800aa34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa38:	e00b      	b.n	800aa52 <HAL_TIM_IC_Start_IT+0x102>
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	2b08      	cmp	r3, #8
 800aa3e:	d104      	bne.n	800aa4a <HAL_TIM_IC_Start_IT+0xfa>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2202      	movs	r2, #2
 800aa44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa48:	e003      	b.n	800aa52 <HAL_TIM_IC_Start_IT+0x102>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2202      	movs	r2, #2
 800aa4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	2b0c      	cmp	r3, #12
 800aa56:	d841      	bhi.n	800aadc <HAL_TIM_IC_Start_IT+0x18c>
 800aa58:	a201      	add	r2, pc, #4	; (adr r2, 800aa60 <HAL_TIM_IC_Start_IT+0x110>)
 800aa5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5e:	bf00      	nop
 800aa60:	0800aa95 	.word	0x0800aa95
 800aa64:	0800aadd 	.word	0x0800aadd
 800aa68:	0800aadd 	.word	0x0800aadd
 800aa6c:	0800aadd 	.word	0x0800aadd
 800aa70:	0800aaa7 	.word	0x0800aaa7
 800aa74:	0800aadd 	.word	0x0800aadd
 800aa78:	0800aadd 	.word	0x0800aadd
 800aa7c:	0800aadd 	.word	0x0800aadd
 800aa80:	0800aab9 	.word	0x0800aab9
 800aa84:	0800aadd 	.word	0x0800aadd
 800aa88:	0800aadd 	.word	0x0800aadd
 800aa8c:	0800aadd 	.word	0x0800aadd
 800aa90:	0800aacb 	.word	0x0800aacb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68da      	ldr	r2, [r3, #12]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f042 0202 	orr.w	r2, r2, #2
 800aaa2:	60da      	str	r2, [r3, #12]
      break;
 800aaa4:	e01d      	b.n	800aae2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68da      	ldr	r2, [r3, #12]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f042 0204 	orr.w	r2, r2, #4
 800aab4:	60da      	str	r2, [r3, #12]
      break;
 800aab6:	e014      	b.n	800aae2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68da      	ldr	r2, [r3, #12]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f042 0208 	orr.w	r2, r2, #8
 800aac6:	60da      	str	r2, [r3, #12]
      break;
 800aac8:	e00b      	b.n	800aae2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68da      	ldr	r2, [r3, #12]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f042 0210 	orr.w	r2, r2, #16
 800aad8:	60da      	str	r2, [r3, #12]
      break;
 800aada:	e002      	b.n	800aae2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	73fb      	strb	r3, [r7, #15]
      break;
 800aae0:	bf00      	nop
  }

  if (status == HAL_OK)
 800aae2:	7bfb      	ldrb	r3, [r7, #15]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d148      	bne.n	800ab7a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2201      	movs	r2, #1
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f001 f937 	bl	800bd64 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a22      	ldr	r2, [pc, #136]	; (800ab84 <HAL_TIM_IC_Start_IT+0x234>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d022      	beq.n	800ab46 <HAL_TIM_IC_Start_IT+0x1f6>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab08:	d01d      	beq.n	800ab46 <HAL_TIM_IC_Start_IT+0x1f6>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a1e      	ldr	r2, [pc, #120]	; (800ab88 <HAL_TIM_IC_Start_IT+0x238>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d018      	beq.n	800ab46 <HAL_TIM_IC_Start_IT+0x1f6>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a1c      	ldr	r2, [pc, #112]	; (800ab8c <HAL_TIM_IC_Start_IT+0x23c>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d013      	beq.n	800ab46 <HAL_TIM_IC_Start_IT+0x1f6>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a1b      	ldr	r2, [pc, #108]	; (800ab90 <HAL_TIM_IC_Start_IT+0x240>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d00e      	beq.n	800ab46 <HAL_TIM_IC_Start_IT+0x1f6>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a19      	ldr	r2, [pc, #100]	; (800ab94 <HAL_TIM_IC_Start_IT+0x244>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d009      	beq.n	800ab46 <HAL_TIM_IC_Start_IT+0x1f6>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a18      	ldr	r2, [pc, #96]	; (800ab98 <HAL_TIM_IC_Start_IT+0x248>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d004      	beq.n	800ab46 <HAL_TIM_IC_Start_IT+0x1f6>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a16      	ldr	r2, [pc, #88]	; (800ab9c <HAL_TIM_IC_Start_IT+0x24c>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d111      	bne.n	800ab6a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	f003 0307 	and.w	r3, r3, #7
 800ab50:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b06      	cmp	r3, #6
 800ab56:	d010      	beq.n	800ab7a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f042 0201 	orr.w	r2, r2, #1
 800ab66:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab68:	e007      	b.n	800ab7a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f042 0201 	orr.w	r2, r2, #1
 800ab78:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	40010000 	.word	0x40010000
 800ab88:	40000400 	.word	0x40000400
 800ab8c:	40000800 	.word	0x40000800
 800ab90:	40000c00 	.word	0x40000c00
 800ab94:	40010400 	.word	0x40010400
 800ab98:	40014000 	.word	0x40014000
 800ab9c:	40001800 	.word	0x40001800

0800aba0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d101      	bne.n	800abb4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800abb0:	2301      	movs	r3, #1
 800abb2:	e097      	b.n	800ace4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d106      	bne.n	800abce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f7fb fe57 	bl	800687c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2202      	movs	r2, #2
 800abd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	6812      	ldr	r2, [r2, #0]
 800abe0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abe4:	f023 0307 	bic.w	r3, r3, #7
 800abe8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	3304      	adds	r3, #4
 800abf2:	4619      	mov	r1, r3
 800abf4:	4610      	mov	r0, r2
 800abf6:	f000 fca1 	bl	800b53c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	699b      	ldr	r3, [r3, #24]
 800ac08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	6a1b      	ldr	r3, [r3, #32]
 800ac10:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac22:	f023 0303 	bic.w	r3, r3, #3
 800ac26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	689a      	ldr	r2, [r3, #8]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	699b      	ldr	r3, [r3, #24]
 800ac30:	021b      	lsls	r3, r3, #8
 800ac32:	4313      	orrs	r3, r2
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ac40:	f023 030c 	bic.w	r3, r3, #12
 800ac44:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	68da      	ldr	r2, [r3, #12]
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	69db      	ldr	r3, [r3, #28]
 800ac5a:	021b      	lsls	r3, r3, #8
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	693a      	ldr	r2, [r7, #16]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	011a      	lsls	r2, r3, #4
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	031b      	lsls	r3, r3, #12
 800ac70:	4313      	orrs	r3, r2
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ac7e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ac86:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	695b      	ldr	r3, [r3, #20]
 800ac90:	011b      	lsls	r3, r3, #4
 800ac92:	4313      	orrs	r3, r2
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	697a      	ldr	r2, [r7, #20]
 800aca0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2201      	movs	r2, #1
 800acb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2201      	movs	r2, #1
 800acbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2201      	movs	r2, #1
 800acce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2201      	movs	r2, #1
 800acd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2201      	movs	r2, #1
 800acde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800acfc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ad04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ad14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d110      	bne.n	800ad3e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d102      	bne.n	800ad28 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ad22:	7b7b      	ldrb	r3, [r7, #13]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d001      	beq.n	800ad2c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e069      	b.n	800ae00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2202      	movs	r2, #2
 800ad30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2202      	movs	r2, #2
 800ad38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad3c:	e031      	b.n	800ada2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	2b04      	cmp	r3, #4
 800ad42:	d110      	bne.n	800ad66 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad44:	7bbb      	ldrb	r3, [r7, #14]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d102      	bne.n	800ad50 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ad4a:	7b3b      	ldrb	r3, [r7, #12]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d001      	beq.n	800ad54 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e055      	b.n	800ae00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2202      	movs	r2, #2
 800ad58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2202      	movs	r2, #2
 800ad60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad64:	e01d      	b.n	800ada2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d108      	bne.n	800ad7e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad6c:	7bbb      	ldrb	r3, [r7, #14]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d105      	bne.n	800ad7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad72:	7b7b      	ldrb	r3, [r7, #13]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d102      	bne.n	800ad7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ad78:	7b3b      	ldrb	r3, [r7, #12]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d001      	beq.n	800ad82 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e03e      	b.n	800ae00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2202      	movs	r2, #2
 800ad86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2202      	movs	r2, #2
 800ad8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2202      	movs	r2, #2
 800ad96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2202      	movs	r2, #2
 800ad9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d003      	beq.n	800adb0 <HAL_TIM_Encoder_Start+0xc4>
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	2b04      	cmp	r3, #4
 800adac:	d008      	beq.n	800adc0 <HAL_TIM_Encoder_Start+0xd4>
 800adae:	e00f      	b.n	800add0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2201      	movs	r2, #1
 800adb6:	2100      	movs	r1, #0
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 ffd3 	bl	800bd64 <TIM_CCxChannelCmd>
      break;
 800adbe:	e016      	b.n	800adee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2201      	movs	r2, #1
 800adc6:	2104      	movs	r1, #4
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 ffcb 	bl	800bd64 <TIM_CCxChannelCmd>
      break;
 800adce:	e00e      	b.n	800adee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2201      	movs	r2, #1
 800add6:	2100      	movs	r1, #0
 800add8:	4618      	mov	r0, r3
 800adda:	f000 ffc3 	bl	800bd64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2201      	movs	r2, #1
 800ade4:	2104      	movs	r1, #4
 800ade6:	4618      	mov	r0, r3
 800ade8:	f000 ffbc 	bl	800bd64 <TIM_CCxChannelCmd>
      break;
 800adec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f042 0201 	orr.w	r2, r2, #1
 800adfc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	f003 0302 	and.w	r3, r3, #2
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	d122      	bne.n	800ae64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	f003 0302 	and.w	r3, r3, #2
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d11b      	bne.n	800ae64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f06f 0202 	mvn.w	r2, #2
 800ae34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2201      	movs	r2, #1
 800ae3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	699b      	ldr	r3, [r3, #24]
 800ae42:	f003 0303 	and.w	r3, r3, #3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7f6 fd4c 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800ae50:	e005      	b.n	800ae5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fb54 	bl	800b500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fb5b 	bl	800b514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	f003 0304 	and.w	r3, r3, #4
 800ae6e:	2b04      	cmp	r3, #4
 800ae70:	d122      	bne.n	800aeb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	f003 0304 	and.w	r3, r3, #4
 800ae7c:	2b04      	cmp	r3, #4
 800ae7e:	d11b      	bne.n	800aeb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f06f 0204 	mvn.w	r2, #4
 800ae88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	699b      	ldr	r3, [r3, #24]
 800ae96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d003      	beq.n	800aea6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f7f6 fd22 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800aea4:	e005      	b.n	800aeb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fb2a 	bl	800b500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fb31 	bl	800b514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	f003 0308 	and.w	r3, r3, #8
 800aec2:	2b08      	cmp	r3, #8
 800aec4:	d122      	bne.n	800af0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	f003 0308 	and.w	r3, r3, #8
 800aed0:	2b08      	cmp	r3, #8
 800aed2:	d11b      	bne.n	800af0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f06f 0208 	mvn.w	r2, #8
 800aedc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2204      	movs	r2, #4
 800aee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	69db      	ldr	r3, [r3, #28]
 800aeea:	f003 0303 	and.w	r3, r3, #3
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d003      	beq.n	800aefa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7f6 fcf8 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800aef8:	e005      	b.n	800af06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 fb00 	bl	800b500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fb07 	bl	800b514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	f003 0310 	and.w	r3, r3, #16
 800af16:	2b10      	cmp	r3, #16
 800af18:	d122      	bne.n	800af60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	f003 0310 	and.w	r3, r3, #16
 800af24:	2b10      	cmp	r3, #16
 800af26:	d11b      	bne.n	800af60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f06f 0210 	mvn.w	r2, #16
 800af30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2208      	movs	r2, #8
 800af36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af42:	2b00      	cmp	r3, #0
 800af44:	d003      	beq.n	800af4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7f6 fcce 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800af4c:	e005      	b.n	800af5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fad6 	bl	800b500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fadd 	bl	800b514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	f003 0301 	and.w	r3, r3, #1
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d10e      	bne.n	800af8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	f003 0301 	and.w	r3, r3, #1
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d107      	bne.n	800af8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f06f 0201 	mvn.w	r2, #1
 800af84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fab0 	bl	800b4ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af96:	2b80      	cmp	r3, #128	; 0x80
 800af98:	d10e      	bne.n	800afb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afa4:	2b80      	cmp	r3, #128	; 0x80
 800afa6:	d107      	bne.n	800afb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800afb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 ffd4 	bl	800bf60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	691b      	ldr	r3, [r3, #16]
 800afbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc2:	2b40      	cmp	r3, #64	; 0x40
 800afc4:	d10e      	bne.n	800afe4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afd0:	2b40      	cmp	r3, #64	; 0x40
 800afd2:	d107      	bne.n	800afe4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800afdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 faa2 	bl	800b528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	f003 0320 	and.w	r3, r3, #32
 800afee:	2b20      	cmp	r3, #32
 800aff0:	d10e      	bne.n	800b010 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	f003 0320 	and.w	r3, r3, #32
 800affc:	2b20      	cmp	r3, #32
 800affe:	d107      	bne.n	800b010 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f06f 0220 	mvn.w	r2, #32
 800b008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 ff9e 	bl	800bf4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b010:	bf00      	nop
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b086      	sub	sp, #24
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b024:	2300      	movs	r3, #0
 800b026:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d101      	bne.n	800b036 <HAL_TIM_IC_ConfigChannel+0x1e>
 800b032:	2302      	movs	r3, #2
 800b034:	e088      	b.n	800b148 <HAL_TIM_IC_ConfigChannel+0x130>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2201      	movs	r2, #1
 800b03a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d11b      	bne.n	800b07c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6818      	ldr	r0, [r3, #0]
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	6819      	ldr	r1, [r3, #0]
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	685a      	ldr	r2, [r3, #4]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	f000 fcc2 	bl	800b9dc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	699a      	ldr	r2, [r3, #24]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f022 020c 	bic.w	r2, r2, #12
 800b066:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	6999      	ldr	r1, [r3, #24]
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	689a      	ldr	r2, [r3, #8]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	430a      	orrs	r2, r1
 800b078:	619a      	str	r2, [r3, #24]
 800b07a:	e060      	b.n	800b13e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b04      	cmp	r3, #4
 800b080:	d11c      	bne.n	800b0bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6818      	ldr	r0, [r3, #0]
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	6819      	ldr	r1, [r3, #0]
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	685a      	ldr	r2, [r3, #4]
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	f000 fd46 	bl	800bb22 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	699a      	ldr	r2, [r3, #24]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b0a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	6999      	ldr	r1, [r3, #24]
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	021a      	lsls	r2, r3, #8
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	430a      	orrs	r2, r1
 800b0b8:	619a      	str	r2, [r3, #24]
 800b0ba:	e040      	b.n	800b13e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b08      	cmp	r3, #8
 800b0c0:	d11b      	bne.n	800b0fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6818      	ldr	r0, [r3, #0]
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	6819      	ldr	r1, [r3, #0]
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	685a      	ldr	r2, [r3, #4]
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	f000 fd93 	bl	800bbfc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	69da      	ldr	r2, [r3, #28]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f022 020c 	bic.w	r2, r2, #12
 800b0e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	69d9      	ldr	r1, [r3, #28]
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	689a      	ldr	r2, [r3, #8]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	430a      	orrs	r2, r1
 800b0f6:	61da      	str	r2, [r3, #28]
 800b0f8:	e021      	b.n	800b13e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b0c      	cmp	r3, #12
 800b0fe:	d11c      	bne.n	800b13a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6818      	ldr	r0, [r3, #0]
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	6819      	ldr	r1, [r3, #0]
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	f000 fdb0 	bl	800bc74 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	69da      	ldr	r2, [r3, #28]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b122:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	69d9      	ldr	r1, [r3, #28]
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	021a      	lsls	r2, r3, #8
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	430a      	orrs	r2, r1
 800b136:	61da      	str	r2, [r3, #28]
 800b138:	e001      	b.n	800b13e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800b13a:	2301      	movs	r3, #1
 800b13c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b146:	7dfb      	ldrb	r3, [r7, #23]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b15c:	2300      	movs	r3, #0
 800b15e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b166:	2b01      	cmp	r3, #1
 800b168:	d101      	bne.n	800b16e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b16a:	2302      	movs	r3, #2
 800b16c:	e0ae      	b.n	800b2cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2201      	movs	r2, #1
 800b172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b0c      	cmp	r3, #12
 800b17a:	f200 809f 	bhi.w	800b2bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b17e:	a201      	add	r2, pc, #4	; (adr r2, 800b184 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b184:	0800b1b9 	.word	0x0800b1b9
 800b188:	0800b2bd 	.word	0x0800b2bd
 800b18c:	0800b2bd 	.word	0x0800b2bd
 800b190:	0800b2bd 	.word	0x0800b2bd
 800b194:	0800b1f9 	.word	0x0800b1f9
 800b198:	0800b2bd 	.word	0x0800b2bd
 800b19c:	0800b2bd 	.word	0x0800b2bd
 800b1a0:	0800b2bd 	.word	0x0800b2bd
 800b1a4:	0800b23b 	.word	0x0800b23b
 800b1a8:	0800b2bd 	.word	0x0800b2bd
 800b1ac:	0800b2bd 	.word	0x0800b2bd
 800b1b0:	0800b2bd 	.word	0x0800b2bd
 800b1b4:	0800b27b 	.word	0x0800b27b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68b9      	ldr	r1, [r7, #8]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f000 fa5c 	bl	800b67c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	699a      	ldr	r2, [r3, #24]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f042 0208 	orr.w	r2, r2, #8
 800b1d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	699a      	ldr	r2, [r3, #24]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f022 0204 	bic.w	r2, r2, #4
 800b1e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	6999      	ldr	r1, [r3, #24]
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	691a      	ldr	r2, [r3, #16]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	430a      	orrs	r2, r1
 800b1f4:	619a      	str	r2, [r3, #24]
      break;
 800b1f6:	e064      	b.n	800b2c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68b9      	ldr	r1, [r7, #8]
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 faac 	bl	800b75c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	699a      	ldr	r2, [r3, #24]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	699a      	ldr	r2, [r3, #24]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6999      	ldr	r1, [r3, #24]
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	021a      	lsls	r2, r3, #8
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	430a      	orrs	r2, r1
 800b236:	619a      	str	r2, [r3, #24]
      break;
 800b238:	e043      	b.n	800b2c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68b9      	ldr	r1, [r7, #8]
 800b240:	4618      	mov	r0, r3
 800b242:	f000 fb01 	bl	800b848 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	69da      	ldr	r2, [r3, #28]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f042 0208 	orr.w	r2, r2, #8
 800b254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	69da      	ldr	r2, [r3, #28]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f022 0204 	bic.w	r2, r2, #4
 800b264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	69d9      	ldr	r1, [r3, #28]
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	691a      	ldr	r2, [r3, #16]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	430a      	orrs	r2, r1
 800b276:	61da      	str	r2, [r3, #28]
      break;
 800b278:	e023      	b.n	800b2c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68b9      	ldr	r1, [r7, #8]
 800b280:	4618      	mov	r0, r3
 800b282:	f000 fb55 	bl	800b930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	69da      	ldr	r2, [r3, #28]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	69da      	ldr	r2, [r3, #28]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	69d9      	ldr	r1, [r3, #28]
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	021a      	lsls	r2, r3, #8
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	430a      	orrs	r2, r1
 800b2b8:	61da      	str	r2, [r3, #28]
      break;
 800b2ba:	e002      	b.n	800b2c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	75fb      	strb	r3, [r7, #23]
      break;
 800b2c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3718      	adds	r7, #24
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d101      	bne.n	800b2f0 <HAL_TIM_ConfigClockSource+0x1c>
 800b2ec:	2302      	movs	r3, #2
 800b2ee:	e0b4      	b.n	800b45a <HAL_TIM_ConfigClockSource+0x186>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b30e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b328:	d03e      	beq.n	800b3a8 <HAL_TIM_ConfigClockSource+0xd4>
 800b32a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b32e:	f200 8087 	bhi.w	800b440 <HAL_TIM_ConfigClockSource+0x16c>
 800b332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b336:	f000 8086 	beq.w	800b446 <HAL_TIM_ConfigClockSource+0x172>
 800b33a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b33e:	d87f      	bhi.n	800b440 <HAL_TIM_ConfigClockSource+0x16c>
 800b340:	2b70      	cmp	r3, #112	; 0x70
 800b342:	d01a      	beq.n	800b37a <HAL_TIM_ConfigClockSource+0xa6>
 800b344:	2b70      	cmp	r3, #112	; 0x70
 800b346:	d87b      	bhi.n	800b440 <HAL_TIM_ConfigClockSource+0x16c>
 800b348:	2b60      	cmp	r3, #96	; 0x60
 800b34a:	d050      	beq.n	800b3ee <HAL_TIM_ConfigClockSource+0x11a>
 800b34c:	2b60      	cmp	r3, #96	; 0x60
 800b34e:	d877      	bhi.n	800b440 <HAL_TIM_ConfigClockSource+0x16c>
 800b350:	2b50      	cmp	r3, #80	; 0x50
 800b352:	d03c      	beq.n	800b3ce <HAL_TIM_ConfigClockSource+0xfa>
 800b354:	2b50      	cmp	r3, #80	; 0x50
 800b356:	d873      	bhi.n	800b440 <HAL_TIM_ConfigClockSource+0x16c>
 800b358:	2b40      	cmp	r3, #64	; 0x40
 800b35a:	d058      	beq.n	800b40e <HAL_TIM_ConfigClockSource+0x13a>
 800b35c:	2b40      	cmp	r3, #64	; 0x40
 800b35e:	d86f      	bhi.n	800b440 <HAL_TIM_ConfigClockSource+0x16c>
 800b360:	2b30      	cmp	r3, #48	; 0x30
 800b362:	d064      	beq.n	800b42e <HAL_TIM_ConfigClockSource+0x15a>
 800b364:	2b30      	cmp	r3, #48	; 0x30
 800b366:	d86b      	bhi.n	800b440 <HAL_TIM_ConfigClockSource+0x16c>
 800b368:	2b20      	cmp	r3, #32
 800b36a:	d060      	beq.n	800b42e <HAL_TIM_ConfigClockSource+0x15a>
 800b36c:	2b20      	cmp	r3, #32
 800b36e:	d867      	bhi.n	800b440 <HAL_TIM_ConfigClockSource+0x16c>
 800b370:	2b00      	cmp	r3, #0
 800b372:	d05c      	beq.n	800b42e <HAL_TIM_ConfigClockSource+0x15a>
 800b374:	2b10      	cmp	r3, #16
 800b376:	d05a      	beq.n	800b42e <HAL_TIM_ConfigClockSource+0x15a>
 800b378:	e062      	b.n	800b440 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6818      	ldr	r0, [r3, #0]
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	6899      	ldr	r1, [r3, #8]
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	f000 fccb 	bl	800bd24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b39c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	609a      	str	r2, [r3, #8]
      break;
 800b3a6:	e04f      	b.n	800b448 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6818      	ldr	r0, [r3, #0]
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	6899      	ldr	r1, [r3, #8]
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	685a      	ldr	r2, [r3, #4]
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	f000 fcb4 	bl	800bd24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	689a      	ldr	r2, [r3, #8]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3ca:	609a      	str	r2, [r3, #8]
      break;
 800b3cc:	e03c      	b.n	800b448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6818      	ldr	r0, [r3, #0]
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	6859      	ldr	r1, [r3, #4]
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	f000 fb72 	bl	800bac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2150      	movs	r1, #80	; 0x50
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f000 fc81 	bl	800bcee <TIM_ITRx_SetConfig>
      break;
 800b3ec:	e02c      	b.n	800b448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6818      	ldr	r0, [r3, #0]
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	6859      	ldr	r1, [r3, #4]
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	f000 fbce 	bl	800bb9c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2160      	movs	r1, #96	; 0x60
 800b406:	4618      	mov	r0, r3
 800b408:	f000 fc71 	bl	800bcee <TIM_ITRx_SetConfig>
      break;
 800b40c:	e01c      	b.n	800b448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6818      	ldr	r0, [r3, #0]
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	6859      	ldr	r1, [r3, #4]
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	461a      	mov	r2, r3
 800b41c:	f000 fb52 	bl	800bac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2140      	movs	r1, #64	; 0x40
 800b426:	4618      	mov	r0, r3
 800b428:	f000 fc61 	bl	800bcee <TIM_ITRx_SetConfig>
      break;
 800b42c:	e00c      	b.n	800b448 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4619      	mov	r1, r3
 800b438:	4610      	mov	r0, r2
 800b43a:	f000 fc58 	bl	800bcee <TIM_ITRx_SetConfig>
      break;
 800b43e:	e003      	b.n	800b448 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	73fb      	strb	r3, [r7, #15]
      break;
 800b444:	e000      	b.n	800b448 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b458:	7bfb      	ldrb	r3, [r7, #15]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
	...

0800b464 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b46e:	2300      	movs	r3, #0
 800b470:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2b0c      	cmp	r3, #12
 800b476:	d831      	bhi.n	800b4dc <HAL_TIM_ReadCapturedValue+0x78>
 800b478:	a201      	add	r2, pc, #4	; (adr r2, 800b480 <HAL_TIM_ReadCapturedValue+0x1c>)
 800b47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b47e:	bf00      	nop
 800b480:	0800b4b5 	.word	0x0800b4b5
 800b484:	0800b4dd 	.word	0x0800b4dd
 800b488:	0800b4dd 	.word	0x0800b4dd
 800b48c:	0800b4dd 	.word	0x0800b4dd
 800b490:	0800b4bf 	.word	0x0800b4bf
 800b494:	0800b4dd 	.word	0x0800b4dd
 800b498:	0800b4dd 	.word	0x0800b4dd
 800b49c:	0800b4dd 	.word	0x0800b4dd
 800b4a0:	0800b4c9 	.word	0x0800b4c9
 800b4a4:	0800b4dd 	.word	0x0800b4dd
 800b4a8:	0800b4dd 	.word	0x0800b4dd
 800b4ac:	0800b4dd 	.word	0x0800b4dd
 800b4b0:	0800b4d3 	.word	0x0800b4d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ba:	60fb      	str	r3, [r7, #12]

      break;
 800b4bc:	e00f      	b.n	800b4de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c4:	60fb      	str	r3, [r7, #12]

      break;
 800b4c6:	e00a      	b.n	800b4de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ce:	60fb      	str	r3, [r7, #12]

      break;
 800b4d0:	e005      	b.n	800b4de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d8:	60fb      	str	r3, [r7, #12]

      break;
 800b4da:	e000      	b.n	800b4de <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800b4dc:	bf00      	nop
  }

  return tmpreg;
 800b4de:	68fb      	ldr	r3, [r7, #12]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3714      	adds	r7, #20
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b508:	bf00      	nop
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b51c:	bf00      	nop
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b530:	bf00      	nop
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a40      	ldr	r2, [pc, #256]	; (800b650 <TIM_Base_SetConfig+0x114>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d013      	beq.n	800b57c <TIM_Base_SetConfig+0x40>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b55a:	d00f      	beq.n	800b57c <TIM_Base_SetConfig+0x40>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	4a3d      	ldr	r2, [pc, #244]	; (800b654 <TIM_Base_SetConfig+0x118>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d00b      	beq.n	800b57c <TIM_Base_SetConfig+0x40>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a3c      	ldr	r2, [pc, #240]	; (800b658 <TIM_Base_SetConfig+0x11c>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d007      	beq.n	800b57c <TIM_Base_SetConfig+0x40>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a3b      	ldr	r2, [pc, #236]	; (800b65c <TIM_Base_SetConfig+0x120>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d003      	beq.n	800b57c <TIM_Base_SetConfig+0x40>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a3a      	ldr	r2, [pc, #232]	; (800b660 <TIM_Base_SetConfig+0x124>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d108      	bne.n	800b58e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a2f      	ldr	r2, [pc, #188]	; (800b650 <TIM_Base_SetConfig+0x114>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d02b      	beq.n	800b5ee <TIM_Base_SetConfig+0xb2>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b59c:	d027      	beq.n	800b5ee <TIM_Base_SetConfig+0xb2>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4a2c      	ldr	r2, [pc, #176]	; (800b654 <TIM_Base_SetConfig+0x118>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d023      	beq.n	800b5ee <TIM_Base_SetConfig+0xb2>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4a2b      	ldr	r2, [pc, #172]	; (800b658 <TIM_Base_SetConfig+0x11c>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d01f      	beq.n	800b5ee <TIM_Base_SetConfig+0xb2>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a2a      	ldr	r2, [pc, #168]	; (800b65c <TIM_Base_SetConfig+0x120>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d01b      	beq.n	800b5ee <TIM_Base_SetConfig+0xb2>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	4a29      	ldr	r2, [pc, #164]	; (800b660 <TIM_Base_SetConfig+0x124>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d017      	beq.n	800b5ee <TIM_Base_SetConfig+0xb2>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a28      	ldr	r2, [pc, #160]	; (800b664 <TIM_Base_SetConfig+0x128>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d013      	beq.n	800b5ee <TIM_Base_SetConfig+0xb2>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a27      	ldr	r2, [pc, #156]	; (800b668 <TIM_Base_SetConfig+0x12c>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d00f      	beq.n	800b5ee <TIM_Base_SetConfig+0xb2>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a26      	ldr	r2, [pc, #152]	; (800b66c <TIM_Base_SetConfig+0x130>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d00b      	beq.n	800b5ee <TIM_Base_SetConfig+0xb2>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a25      	ldr	r2, [pc, #148]	; (800b670 <TIM_Base_SetConfig+0x134>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d007      	beq.n	800b5ee <TIM_Base_SetConfig+0xb2>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a24      	ldr	r2, [pc, #144]	; (800b674 <TIM_Base_SetConfig+0x138>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d003      	beq.n	800b5ee <TIM_Base_SetConfig+0xb2>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a23      	ldr	r2, [pc, #140]	; (800b678 <TIM_Base_SetConfig+0x13c>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d108      	bne.n	800b600 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	695b      	ldr	r3, [r3, #20]
 800b60a:	4313      	orrs	r3, r2
 800b60c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68fa      	ldr	r2, [r7, #12]
 800b612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	689a      	ldr	r2, [r3, #8]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4a0a      	ldr	r2, [pc, #40]	; (800b650 <TIM_Base_SetConfig+0x114>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d003      	beq.n	800b634 <TIM_Base_SetConfig+0xf8>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a0c      	ldr	r2, [pc, #48]	; (800b660 <TIM_Base_SetConfig+0x124>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d103      	bne.n	800b63c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	691a      	ldr	r2, [r3, #16]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	615a      	str	r2, [r3, #20]
}
 800b642:	bf00      	nop
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	40010000 	.word	0x40010000
 800b654:	40000400 	.word	0x40000400
 800b658:	40000800 	.word	0x40000800
 800b65c:	40000c00 	.word	0x40000c00
 800b660:	40010400 	.word	0x40010400
 800b664:	40014000 	.word	0x40014000
 800b668:	40014400 	.word	0x40014400
 800b66c:	40014800 	.word	0x40014800
 800b670:	40001800 	.word	0x40001800
 800b674:	40001c00 	.word	0x40001c00
 800b678:	40002000 	.word	0x40002000

0800b67c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b087      	sub	sp, #28
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a1b      	ldr	r3, [r3, #32]
 800b68a:	f023 0201 	bic.w	r2, r3, #1
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a1b      	ldr	r3, [r3, #32]
 800b696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	699b      	ldr	r3, [r3, #24]
 800b6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f023 0303 	bic.w	r3, r3, #3
 800b6b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f023 0302 	bic.w	r3, r3, #2
 800b6c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	697a      	ldr	r2, [r7, #20]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a20      	ldr	r2, [pc, #128]	; (800b754 <TIM_OC1_SetConfig+0xd8>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d003      	beq.n	800b6e0 <TIM_OC1_SetConfig+0x64>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4a1f      	ldr	r2, [pc, #124]	; (800b758 <TIM_OC1_SetConfig+0xdc>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d10c      	bne.n	800b6fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	f023 0308 	bic.w	r3, r3, #8
 800b6e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	697a      	ldr	r2, [r7, #20]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	f023 0304 	bic.w	r3, r3, #4
 800b6f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a15      	ldr	r2, [pc, #84]	; (800b754 <TIM_OC1_SetConfig+0xd8>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d003      	beq.n	800b70a <TIM_OC1_SetConfig+0x8e>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a14      	ldr	r2, [pc, #80]	; (800b758 <TIM_OC1_SetConfig+0xdc>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d111      	bne.n	800b72e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	695b      	ldr	r3, [r3, #20]
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	4313      	orrs	r3, r2
 800b722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	699b      	ldr	r3, [r3, #24]
 800b728:	693a      	ldr	r2, [r7, #16]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	693a      	ldr	r2, [r7, #16]
 800b732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	685a      	ldr	r2, [r3, #4]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	697a      	ldr	r2, [r7, #20]
 800b746:	621a      	str	r2, [r3, #32]
}
 800b748:	bf00      	nop
 800b74a:	371c      	adds	r7, #28
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr
 800b754:	40010000 	.word	0x40010000
 800b758:	40010400 	.word	0x40010400

0800b75c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b087      	sub	sp, #28
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6a1b      	ldr	r3, [r3, #32]
 800b76a:	f023 0210 	bic.w	r2, r3, #16
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a1b      	ldr	r3, [r3, #32]
 800b776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	699b      	ldr	r3, [r3, #24]
 800b782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b78a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	021b      	lsls	r3, r3, #8
 800b79a:	68fa      	ldr	r2, [r7, #12]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	f023 0320 	bic.w	r3, r3, #32
 800b7a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	011b      	lsls	r3, r3, #4
 800b7ae:	697a      	ldr	r2, [r7, #20]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4a22      	ldr	r2, [pc, #136]	; (800b840 <TIM_OC2_SetConfig+0xe4>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d003      	beq.n	800b7c4 <TIM_OC2_SetConfig+0x68>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4a21      	ldr	r2, [pc, #132]	; (800b844 <TIM_OC2_SetConfig+0xe8>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d10d      	bne.n	800b7e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	011b      	lsls	r3, r3, #4
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a17      	ldr	r2, [pc, #92]	; (800b840 <TIM_OC2_SetConfig+0xe4>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d003      	beq.n	800b7f0 <TIM_OC2_SetConfig+0x94>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4a16      	ldr	r2, [pc, #88]	; (800b844 <TIM_OC2_SetConfig+0xe8>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d113      	bne.n	800b818 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b7f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b7fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	695b      	ldr	r3, [r3, #20]
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	4313      	orrs	r3, r2
 800b80a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	693a      	ldr	r2, [r7, #16]
 800b814:	4313      	orrs	r3, r2
 800b816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	693a      	ldr	r2, [r7, #16]
 800b81c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	685a      	ldr	r2, [r3, #4]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	697a      	ldr	r2, [r7, #20]
 800b830:	621a      	str	r2, [r3, #32]
}
 800b832:	bf00      	nop
 800b834:	371c      	adds	r7, #28
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	40010000 	.word	0x40010000
 800b844:	40010400 	.word	0x40010400

0800b848 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b848:	b480      	push	{r7}
 800b84a:	b087      	sub	sp, #28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a1b      	ldr	r3, [r3, #32]
 800b862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	69db      	ldr	r3, [r3, #28]
 800b86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f023 0303 	bic.w	r3, r3, #3
 800b87e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	4313      	orrs	r3, r2
 800b888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	021b      	lsls	r3, r3, #8
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	4313      	orrs	r3, r2
 800b89c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4a21      	ldr	r2, [pc, #132]	; (800b928 <TIM_OC3_SetConfig+0xe0>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d003      	beq.n	800b8ae <TIM_OC3_SetConfig+0x66>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a20      	ldr	r2, [pc, #128]	; (800b92c <TIM_OC3_SetConfig+0xe4>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d10d      	bne.n	800b8ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b8b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	021b      	lsls	r3, r3, #8
 800b8bc:	697a      	ldr	r2, [r7, #20]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b8c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a16      	ldr	r2, [pc, #88]	; (800b928 <TIM_OC3_SetConfig+0xe0>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d003      	beq.n	800b8da <TIM_OC3_SetConfig+0x92>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	4a15      	ldr	r2, [pc, #84]	; (800b92c <TIM_OC3_SetConfig+0xe4>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d113      	bne.n	800b902 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b8e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	695b      	ldr	r3, [r3, #20]
 800b8ee:	011b      	lsls	r3, r3, #4
 800b8f0:	693a      	ldr	r2, [r7, #16]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	699b      	ldr	r3, [r3, #24]
 800b8fa:	011b      	lsls	r3, r3, #4
 800b8fc:	693a      	ldr	r2, [r7, #16]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	693a      	ldr	r2, [r7, #16]
 800b906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	685a      	ldr	r2, [r3, #4]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	697a      	ldr	r2, [r7, #20]
 800b91a:	621a      	str	r2, [r3, #32]
}
 800b91c:	bf00      	nop
 800b91e:	371c      	adds	r7, #28
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr
 800b928:	40010000 	.word	0x40010000
 800b92c:	40010400 	.word	0x40010400

0800b930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b930:	b480      	push	{r7}
 800b932:	b087      	sub	sp, #28
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a1b      	ldr	r3, [r3, #32]
 800b93e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a1b      	ldr	r3, [r3, #32]
 800b94a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	69db      	ldr	r3, [r3, #28]
 800b956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b95e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	021b      	lsls	r3, r3, #8
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	4313      	orrs	r3, r2
 800b972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b97a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	031b      	lsls	r3, r3, #12
 800b982:	693a      	ldr	r2, [r7, #16]
 800b984:	4313      	orrs	r3, r2
 800b986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4a12      	ldr	r2, [pc, #72]	; (800b9d4 <TIM_OC4_SetConfig+0xa4>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d003      	beq.n	800b998 <TIM_OC4_SetConfig+0x68>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a11      	ldr	r2, [pc, #68]	; (800b9d8 <TIM_OC4_SetConfig+0xa8>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d109      	bne.n	800b9ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b99e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	695b      	ldr	r3, [r3, #20]
 800b9a4:	019b      	lsls	r3, r3, #6
 800b9a6:	697a      	ldr	r2, [r7, #20]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	697a      	ldr	r2, [r7, #20]
 800b9b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	685a      	ldr	r2, [r3, #4]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	621a      	str	r2, [r3, #32]
}
 800b9c6:	bf00      	nop
 800b9c8:	371c      	adds	r7, #28
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	40010000 	.word	0x40010000
 800b9d8:	40010400 	.word	0x40010400

0800b9dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b087      	sub	sp, #28
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	607a      	str	r2, [r7, #4]
 800b9e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6a1b      	ldr	r3, [r3, #32]
 800b9ee:	f023 0201 	bic.w	r2, r3, #1
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	699b      	ldr	r3, [r3, #24]
 800b9fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6a1b      	ldr	r3, [r3, #32]
 800ba00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	4a28      	ldr	r2, [pc, #160]	; (800baa8 <TIM_TI1_SetConfig+0xcc>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d01b      	beq.n	800ba42 <TIM_TI1_SetConfig+0x66>
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba10:	d017      	beq.n	800ba42 <TIM_TI1_SetConfig+0x66>
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	4a25      	ldr	r2, [pc, #148]	; (800baac <TIM_TI1_SetConfig+0xd0>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d013      	beq.n	800ba42 <TIM_TI1_SetConfig+0x66>
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	4a24      	ldr	r2, [pc, #144]	; (800bab0 <TIM_TI1_SetConfig+0xd4>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d00f      	beq.n	800ba42 <TIM_TI1_SetConfig+0x66>
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	4a23      	ldr	r2, [pc, #140]	; (800bab4 <TIM_TI1_SetConfig+0xd8>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d00b      	beq.n	800ba42 <TIM_TI1_SetConfig+0x66>
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	4a22      	ldr	r2, [pc, #136]	; (800bab8 <TIM_TI1_SetConfig+0xdc>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d007      	beq.n	800ba42 <TIM_TI1_SetConfig+0x66>
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	4a21      	ldr	r2, [pc, #132]	; (800babc <TIM_TI1_SetConfig+0xe0>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d003      	beq.n	800ba42 <TIM_TI1_SetConfig+0x66>
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	4a20      	ldr	r2, [pc, #128]	; (800bac0 <TIM_TI1_SetConfig+0xe4>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d101      	bne.n	800ba46 <TIM_TI1_SetConfig+0x6a>
 800ba42:	2301      	movs	r3, #1
 800ba44:	e000      	b.n	800ba48 <TIM_TI1_SetConfig+0x6c>
 800ba46:	2300      	movs	r3, #0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d008      	beq.n	800ba5e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	f023 0303 	bic.w	r3, r3, #3
 800ba52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ba54:	697a      	ldr	r2, [r7, #20]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	617b      	str	r3, [r7, #20]
 800ba5c:	e003      	b.n	800ba66 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	f043 0301 	orr.w	r3, r3, #1
 800ba64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	011b      	lsls	r3, r3, #4
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	697a      	ldr	r2, [r7, #20]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	f023 030a 	bic.w	r3, r3, #10
 800ba80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	f003 030a 	and.w	r3, r3, #10
 800ba88:	693a      	ldr	r2, [r7, #16]
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	621a      	str	r2, [r3, #32]
}
 800ba9a:	bf00      	nop
 800ba9c:	371c      	adds	r7, #28
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	40010000 	.word	0x40010000
 800baac:	40000400 	.word	0x40000400
 800bab0:	40000800 	.word	0x40000800
 800bab4:	40000c00 	.word	0x40000c00
 800bab8:	40010400 	.word	0x40010400
 800babc:	40014000 	.word	0x40014000
 800bac0:	40001800 	.word	0x40001800

0800bac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b087      	sub	sp, #28
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6a1b      	ldr	r3, [r3, #32]
 800bad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6a1b      	ldr	r3, [r3, #32]
 800bada:	f023 0201 	bic.w	r2, r3, #1
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800baee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	011b      	lsls	r3, r3, #4
 800baf4:	693a      	ldr	r2, [r7, #16]
 800baf6:	4313      	orrs	r3, r2
 800baf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	f023 030a 	bic.w	r3, r3, #10
 800bb00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	4313      	orrs	r3, r2
 800bb08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	697a      	ldr	r2, [r7, #20]
 800bb14:	621a      	str	r2, [r3, #32]
}
 800bb16:	bf00      	nop
 800bb18:	371c      	adds	r7, #28
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr

0800bb22 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bb22:	b480      	push	{r7}
 800bb24:	b087      	sub	sp, #28
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	60f8      	str	r0, [r7, #12]
 800bb2a:	60b9      	str	r1, [r7, #8]
 800bb2c:	607a      	str	r2, [r7, #4]
 800bb2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6a1b      	ldr	r3, [r3, #32]
 800bb34:	f023 0210 	bic.w	r2, r3, #16
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	699b      	ldr	r3, [r3, #24]
 800bb40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6a1b      	ldr	r3, [r3, #32]
 800bb46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	021b      	lsls	r3, r3, #8
 800bb54:	697a      	ldr	r2, [r7, #20]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	031b      	lsls	r3, r3, #12
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	697a      	ldr	r2, [r7, #20]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	011b      	lsls	r3, r3, #4
 800bb7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bb7e:	693a      	ldr	r2, [r7, #16]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	697a      	ldr	r2, [r7, #20]
 800bb88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	693a      	ldr	r2, [r7, #16]
 800bb8e:	621a      	str	r2, [r3, #32]
}
 800bb90:	bf00      	nop
 800bb92:	371c      	adds	r7, #28
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b087      	sub	sp, #28
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6a1b      	ldr	r3, [r3, #32]
 800bbac:	f023 0210 	bic.w	r2, r3, #16
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	699b      	ldr	r3, [r3, #24]
 800bbb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6a1b      	ldr	r3, [r3, #32]
 800bbbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	031b      	lsls	r3, r3, #12
 800bbcc:	697a      	ldr	r2, [r7, #20]
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bbd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	011b      	lsls	r3, r3, #4
 800bbde:	693a      	ldr	r2, [r7, #16]
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	693a      	ldr	r2, [r7, #16]
 800bbee:	621a      	str	r2, [r3, #32]
}
 800bbf0:	bf00      	nop
 800bbf2:	371c      	adds	r7, #28
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b087      	sub	sp, #28
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]
 800bc08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	6a1b      	ldr	r3, [r3, #32]
 800bc0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	69db      	ldr	r3, [r3, #28]
 800bc1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6a1b      	ldr	r3, [r3, #32]
 800bc20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	f023 0303 	bic.w	r3, r3, #3
 800bc28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	011b      	lsls	r3, r3, #4
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	697a      	ldr	r2, [r7, #20]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800bc4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	021b      	lsls	r3, r3, #8
 800bc52:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800bc56:	693a      	ldr	r2, [r7, #16]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	697a      	ldr	r2, [r7, #20]
 800bc60:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	693a      	ldr	r2, [r7, #16]
 800bc66:	621a      	str	r2, [r3, #32]
}
 800bc68:	bf00      	nop
 800bc6a:	371c      	adds	r7, #28
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b087      	sub	sp, #28
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	607a      	str	r2, [r7, #4]
 800bc80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6a1b      	ldr	r3, [r3, #32]
 800bc86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	69db      	ldr	r3, [r3, #28]
 800bc92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	6a1b      	ldr	r3, [r3, #32]
 800bc98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bca0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	021b      	lsls	r3, r3, #8
 800bca6:	697a      	ldr	r2, [r7, #20]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bcb2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	031b      	lsls	r3, r3, #12
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	697a      	ldr	r2, [r7, #20]
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bcc6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	031b      	lsls	r3, r3, #12
 800bccc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bcd0:	693a      	ldr	r2, [r7, #16]
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	697a      	ldr	r2, [r7, #20]
 800bcda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	693a      	ldr	r2, [r7, #16]
 800bce0:	621a      	str	r2, [r3, #32]
}
 800bce2:	bf00      	nop
 800bce4:	371c      	adds	r7, #28
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b085      	sub	sp, #20
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	f043 0307 	orr.w	r3, r3, #7
 800bd10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	609a      	str	r2, [r3, #8]
}
 800bd18:	bf00      	nop
 800bd1a:	3714      	adds	r7, #20
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b087      	sub	sp, #28
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	021a      	lsls	r2, r3, #8
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	431a      	orrs	r2, r3
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	697a      	ldr	r2, [r7, #20]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	697a      	ldr	r2, [r7, #20]
 800bd56:	609a      	str	r2, [r3, #8]
}
 800bd58:	bf00      	nop
 800bd5a:	371c      	adds	r7, #28
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b087      	sub	sp, #28
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	f003 031f 	and.w	r3, r3, #31
 800bd76:	2201      	movs	r2, #1
 800bd78:	fa02 f303 	lsl.w	r3, r2, r3
 800bd7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6a1a      	ldr	r2, [r3, #32]
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	43db      	mvns	r3, r3
 800bd86:	401a      	ands	r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6a1a      	ldr	r2, [r3, #32]
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	f003 031f 	and.w	r3, r3, #31
 800bd96:	6879      	ldr	r1, [r7, #4]
 800bd98:	fa01 f303 	lsl.w	r3, r1, r3
 800bd9c:	431a      	orrs	r2, r3
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	621a      	str	r2, [r3, #32]
}
 800bda2:	bf00      	nop
 800bda4:	371c      	adds	r7, #28
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
	...

0800bdb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d101      	bne.n	800bdc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bdc4:	2302      	movs	r3, #2
 800bdc6:	e05a      	b.n	800be7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2202      	movs	r2, #2
 800bdd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a21      	ldr	r2, [pc, #132]	; (800be8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d022      	beq.n	800be52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be14:	d01d      	beq.n	800be52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a1d      	ldr	r2, [pc, #116]	; (800be90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d018      	beq.n	800be52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a1b      	ldr	r2, [pc, #108]	; (800be94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d013      	beq.n	800be52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a1a      	ldr	r2, [pc, #104]	; (800be98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d00e      	beq.n	800be52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a18      	ldr	r2, [pc, #96]	; (800be9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d009      	beq.n	800be52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a17      	ldr	r2, [pc, #92]	; (800bea0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d004      	beq.n	800be52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a15      	ldr	r2, [pc, #84]	; (800bea4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d10c      	bne.n	800be6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	4313      	orrs	r3, r2
 800be62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2201      	movs	r2, #1
 800be70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3714      	adds	r7, #20
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	40010000 	.word	0x40010000
 800be90:	40000400 	.word	0x40000400
 800be94:	40000800 	.word	0x40000800
 800be98:	40000c00 	.word	0x40000c00
 800be9c:	40010400 	.word	0x40010400
 800bea0:	40014000 	.word	0x40014000
 800bea4:	40001800 	.word	0x40001800

0800bea8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800beb2:	2300      	movs	r3, #0
 800beb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d101      	bne.n	800bec4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bec0:	2302      	movs	r3, #2
 800bec2:	e03d      	b.n	800bf40 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2201      	movs	r2, #1
 800bec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	4313      	orrs	r3, r2
 800bed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	691b      	ldr	r3, [r3, #16]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	695b      	ldr	r3, [r3, #20]
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	69db      	ldr	r3, [r3, #28]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf54:	bf00      	nop
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d101      	bne.n	800bf86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf82:	2301      	movs	r3, #1
 800bf84:	e03f      	b.n	800c006 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d106      	bne.n	800bfa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f7fa fd92 	bl	8006ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2224      	movs	r2, #36	; 0x24
 800bfa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68da      	ldr	r2, [r3, #12]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bfb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fddf 	bl	800cb7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	691a      	ldr	r2, [r3, #16]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bfcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	695a      	ldr	r2, [r3, #20]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bfdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bfec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2220      	movs	r2, #32
 800bff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2220      	movs	r2, #32
 800c000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b08a      	sub	sp, #40	; 0x28
 800c012:	af02      	add	r7, sp, #8
 800c014:	60f8      	str	r0, [r7, #12]
 800c016:	60b9      	str	r1, [r7, #8]
 800c018:	603b      	str	r3, [r7, #0]
 800c01a:	4613      	mov	r3, r2
 800c01c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c01e:	2300      	movs	r3, #0
 800c020:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	2b20      	cmp	r3, #32
 800c02c:	d17c      	bne.n	800c128 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d002      	beq.n	800c03a <HAL_UART_Transmit+0x2c>
 800c034:	88fb      	ldrh	r3, [r7, #6]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d101      	bne.n	800c03e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c03a:	2301      	movs	r3, #1
 800c03c:	e075      	b.n	800c12a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c044:	2b01      	cmp	r3, #1
 800c046:	d101      	bne.n	800c04c <HAL_UART_Transmit+0x3e>
 800c048:	2302      	movs	r3, #2
 800c04a:	e06e      	b.n	800c12a <HAL_UART_Transmit+0x11c>
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2201      	movs	r2, #1
 800c050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2200      	movs	r2, #0
 800c058:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2221      	movs	r2, #33	; 0x21
 800c05e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c062:	f7fa ff29 	bl	8006eb8 <HAL_GetTick>
 800c066:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	88fa      	ldrh	r2, [r7, #6]
 800c06c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	88fa      	ldrh	r2, [r7, #6]
 800c072:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c07c:	d108      	bne.n	800c090 <HAL_UART_Transmit+0x82>
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d104      	bne.n	800c090 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c086:	2300      	movs	r3, #0
 800c088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	61bb      	str	r3, [r7, #24]
 800c08e:	e003      	b.n	800c098 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c094:	2300      	movs	r3, #0
 800c096:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2200      	movs	r2, #0
 800c09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c0a0:	e02a      	b.n	800c0f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	2180      	movs	r1, #128	; 0x80
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f000 fb1f 	bl	800c6f0 <UART_WaitOnFlagUntilTimeout>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d001      	beq.n	800c0bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	e036      	b.n	800c12a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d10b      	bne.n	800c0da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	881b      	ldrh	r3, [r3, #0]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c0d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	3302      	adds	r3, #2
 800c0d6:	61bb      	str	r3, [r7, #24]
 800c0d8:	e007      	b.n	800c0ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	781a      	ldrb	r2, [r3, #0]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1cf      	bne.n	800c0a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	9300      	str	r3, [sp, #0]
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	2200      	movs	r2, #0
 800c10a:	2140      	movs	r1, #64	; 0x40
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f000 faef 	bl	800c6f0 <UART_WaitOnFlagUntilTimeout>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d001      	beq.n	800c11c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c118:	2303      	movs	r3, #3
 800c11a:	e006      	b.n	800c12a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2220      	movs	r2, #32
 800c120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c124:	2300      	movs	r3, #0
 800c126:	e000      	b.n	800c12a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c128:	2302      	movs	r3, #2
  }
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3720      	adds	r7, #32
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b084      	sub	sp, #16
 800c136:	af00      	add	r7, sp, #0
 800c138:	60f8      	str	r0, [r7, #12]
 800c13a:	60b9      	str	r1, [r7, #8]
 800c13c:	4613      	mov	r3, r2
 800c13e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c146:	b2db      	uxtb	r3, r3
 800c148:	2b20      	cmp	r3, #32
 800c14a:	d11d      	bne.n	800c188 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d002      	beq.n	800c158 <HAL_UART_Receive_IT+0x26>
 800c152:	88fb      	ldrh	r3, [r7, #6]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d101      	bne.n	800c15c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c158:	2301      	movs	r3, #1
 800c15a:	e016      	b.n	800c18a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c162:	2b01      	cmp	r3, #1
 800c164:	d101      	bne.n	800c16a <HAL_UART_Receive_IT+0x38>
 800c166:	2302      	movs	r3, #2
 800c168:	e00f      	b.n	800c18a <HAL_UART_Receive_IT+0x58>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2200      	movs	r2, #0
 800c176:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c178:	88fb      	ldrh	r3, [r7, #6]
 800c17a:	461a      	mov	r2, r3
 800c17c:	68b9      	ldr	r1, [r7, #8]
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f000 fb24 	bl	800c7cc <UART_Start_Receive_IT>
 800c184:	4603      	mov	r3, r0
 800c186:	e000      	b.n	800c18a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c188:	2302      	movs	r3, #2
  }
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
	...

0800c194 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b0ba      	sub	sp, #232	; 0xe8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	695b      	ldr	r3, [r3, #20]
 800c1b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c1c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ca:	f003 030f 	and.w	r3, r3, #15
 800c1ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c1d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10f      	bne.n	800c1fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c1da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1de:	f003 0320 	and.w	r3, r3, #32
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d009      	beq.n	800c1fa <HAL_UART_IRQHandler+0x66>
 800c1e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1ea:	f003 0320 	and.w	r3, r3, #32
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d003      	beq.n	800c1fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fc07 	bl	800ca06 <UART_Receive_IT>
      return;
 800c1f8:	e256      	b.n	800c6a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c1fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	f000 80de 	beq.w	800c3c0 <HAL_UART_IRQHandler+0x22c>
 800c204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c208:	f003 0301 	and.w	r3, r3, #1
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d106      	bne.n	800c21e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c214:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f000 80d1 	beq.w	800c3c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c222:	f003 0301 	and.w	r3, r3, #1
 800c226:	2b00      	cmp	r3, #0
 800c228:	d00b      	beq.n	800c242 <HAL_UART_IRQHandler+0xae>
 800c22a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c22e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c232:	2b00      	cmp	r3, #0
 800c234:	d005      	beq.n	800c242 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23a:	f043 0201 	orr.w	r2, r3, #1
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c246:	f003 0304 	and.w	r3, r3, #4
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00b      	beq.n	800c266 <HAL_UART_IRQHandler+0xd2>
 800c24e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c252:	f003 0301 	and.w	r3, r3, #1
 800c256:	2b00      	cmp	r3, #0
 800c258:	d005      	beq.n	800c266 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c25e:	f043 0202 	orr.w	r2, r3, #2
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c26a:	f003 0302 	and.w	r3, r3, #2
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d00b      	beq.n	800c28a <HAL_UART_IRQHandler+0xf6>
 800c272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c276:	f003 0301 	and.w	r3, r3, #1
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d005      	beq.n	800c28a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c282:	f043 0204 	orr.w	r2, r3, #4
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c28a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c28e:	f003 0308 	and.w	r3, r3, #8
 800c292:	2b00      	cmp	r3, #0
 800c294:	d011      	beq.n	800c2ba <HAL_UART_IRQHandler+0x126>
 800c296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c29a:	f003 0320 	and.w	r3, r3, #32
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d105      	bne.n	800c2ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c2a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2a6:	f003 0301 	and.w	r3, r3, #1
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d005      	beq.n	800c2ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b2:	f043 0208 	orr.w	r2, r3, #8
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f000 81ed 	beq.w	800c69e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c2c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2c8:	f003 0320 	and.w	r3, r3, #32
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d008      	beq.n	800c2e2 <HAL_UART_IRQHandler+0x14e>
 800c2d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2d4:	f003 0320 	and.w	r3, r3, #32
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d002      	beq.n	800c2e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fb92 	bl	800ca06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	695b      	ldr	r3, [r3, #20]
 800c2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ec:	2b40      	cmp	r3, #64	; 0x40
 800c2ee:	bf0c      	ite	eq
 800c2f0:	2301      	moveq	r3, #1
 800c2f2:	2300      	movne	r3, #0
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2fe:	f003 0308 	and.w	r3, r3, #8
 800c302:	2b00      	cmp	r3, #0
 800c304:	d103      	bne.n	800c30e <HAL_UART_IRQHandler+0x17a>
 800c306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d04f      	beq.n	800c3ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fa9a 	bl	800c848 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	695b      	ldr	r3, [r3, #20]
 800c31a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c31e:	2b40      	cmp	r3, #64	; 0x40
 800c320:	d141      	bne.n	800c3a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	3314      	adds	r3, #20
 800c328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c330:	e853 3f00 	ldrex	r3, [r3]
 800c334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c338:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c33c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	3314      	adds	r3, #20
 800c34a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c34e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c356:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c35a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c35e:	e841 2300 	strex	r3, r2, [r1]
 800c362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1d9      	bne.n	800c322 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c372:	2b00      	cmp	r3, #0
 800c374:	d013      	beq.n	800c39e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c37a:	4a7d      	ldr	r2, [pc, #500]	; (800c570 <HAL_UART_IRQHandler+0x3dc>)
 800c37c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c382:	4618      	mov	r0, r3
 800c384:	f7fa ff49 	bl	800721a <HAL_DMA_Abort_IT>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d016      	beq.n	800c3bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c398:	4610      	mov	r0, r2
 800c39a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c39c:	e00e      	b.n	800c3bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f990 	bl	800c6c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3a4:	e00a      	b.n	800c3bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 f98c 	bl	800c6c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3ac:	e006      	b.n	800c3bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 f988 	bl	800c6c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c3ba:	e170      	b.n	800c69e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3bc:	bf00      	nop
    return;
 800c3be:	e16e      	b.n	800c69e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	f040 814a 	bne.w	800c65e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c3ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3ce:	f003 0310 	and.w	r3, r3, #16
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f000 8143 	beq.w	800c65e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c3d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3dc:	f003 0310 	and.w	r3, r3, #16
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f000 813c 	beq.w	800c65e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60bb      	str	r3, [r7, #8]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	60bb      	str	r3, [r7, #8]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	60bb      	str	r3, [r7, #8]
 800c3fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	695b      	ldr	r3, [r3, #20]
 800c402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c406:	2b40      	cmp	r3, #64	; 0x40
 800c408:	f040 80b4 	bne.w	800c574 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c418:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f000 8140 	beq.w	800c6a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c42a:	429a      	cmp	r2, r3
 800c42c:	f080 8139 	bcs.w	800c6a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c436:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c43c:	69db      	ldr	r3, [r3, #28]
 800c43e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c442:	f000 8088 	beq.w	800c556 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	330c      	adds	r3, #12
 800c44c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c450:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c454:	e853 3f00 	ldrex	r3, [r3]
 800c458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c45c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	330c      	adds	r3, #12
 800c46e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c472:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c476:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c47e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c482:	e841 2300 	strex	r3, r2, [r1]
 800c486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c48a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1d9      	bne.n	800c446 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	3314      	adds	r3, #20
 800c498:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c49c:	e853 3f00 	ldrex	r3, [r3]
 800c4a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c4a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4a4:	f023 0301 	bic.w	r3, r3, #1
 800c4a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	3314      	adds	r3, #20
 800c4b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c4b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c4ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c4be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c4c2:	e841 2300 	strex	r3, r2, [r1]
 800c4c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c4c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d1e1      	bne.n	800c492 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	3314      	adds	r3, #20
 800c4d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4d8:	e853 3f00 	ldrex	r3, [r3]
 800c4dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c4de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	3314      	adds	r3, #20
 800c4ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c4f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c4f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c4f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c4fa:	e841 2300 	strex	r3, r2, [r1]
 800c4fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1e3      	bne.n	800c4ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2220      	movs	r2, #32
 800c50a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	330c      	adds	r3, #12
 800c51a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c51c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c51e:	e853 3f00 	ldrex	r3, [r3]
 800c522:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c526:	f023 0310 	bic.w	r3, r3, #16
 800c52a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	330c      	adds	r3, #12
 800c534:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c538:	65ba      	str	r2, [r7, #88]	; 0x58
 800c53a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c53e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c540:	e841 2300 	strex	r3, r2, [r1]
 800c544:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1e3      	bne.n	800c514 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c550:	4618      	mov	r0, r3
 800c552:	f7fa fdf2 	bl	800713a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c55e:	b29b      	uxth	r3, r3
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	b29b      	uxth	r3, r3
 800c564:	4619      	mov	r1, r3
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 f8b6 	bl	800c6d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c56c:	e099      	b.n	800c6a2 <HAL_UART_IRQHandler+0x50e>
 800c56e:	bf00      	nop
 800c570:	0800c90f 	.word	0x0800c90f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c588:	b29b      	uxth	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	f000 808b 	beq.w	800c6a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c590:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c594:	2b00      	cmp	r3, #0
 800c596:	f000 8086 	beq.w	800c6a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	330c      	adds	r3, #12
 800c5a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a4:	e853 3f00 	ldrex	r3, [r3]
 800c5a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	330c      	adds	r3, #12
 800c5ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c5be:	647a      	str	r2, [r7, #68]	; 0x44
 800c5c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c5c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5c6:	e841 2300 	strex	r3, r2, [r1]
 800c5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c5cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1e3      	bne.n	800c59a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3314      	adds	r3, #20
 800c5d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5dc:	e853 3f00 	ldrex	r3, [r3]
 800c5e0:	623b      	str	r3, [r7, #32]
   return(result);
 800c5e2:	6a3b      	ldr	r3, [r7, #32]
 800c5e4:	f023 0301 	bic.w	r3, r3, #1
 800c5e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	3314      	adds	r3, #20
 800c5f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c5f6:	633a      	str	r2, [r7, #48]	; 0x30
 800c5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5fe:	e841 2300 	strex	r3, r2, [r1]
 800c602:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c606:	2b00      	cmp	r3, #0
 800c608:	d1e3      	bne.n	800c5d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2220      	movs	r2, #32
 800c60e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	330c      	adds	r3, #12
 800c61e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	e853 3f00 	ldrex	r3, [r3]
 800c626:	60fb      	str	r3, [r7, #12]
   return(result);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f023 0310 	bic.w	r3, r3, #16
 800c62e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	330c      	adds	r3, #12
 800c638:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c63c:	61fa      	str	r2, [r7, #28]
 800c63e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c640:	69b9      	ldr	r1, [r7, #24]
 800c642:	69fa      	ldr	r2, [r7, #28]
 800c644:	e841 2300 	strex	r3, r2, [r1]
 800c648:	617b      	str	r3, [r7, #20]
   return(result);
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d1e3      	bne.n	800c618 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c654:	4619      	mov	r1, r3
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f83e 	bl	800c6d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c65c:	e023      	b.n	800c6a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c65e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c666:	2b00      	cmp	r3, #0
 800c668:	d009      	beq.n	800c67e <HAL_UART_IRQHandler+0x4ea>
 800c66a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c672:	2b00      	cmp	r3, #0
 800c674:	d003      	beq.n	800c67e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 f95d 	bl	800c936 <UART_Transmit_IT>
    return;
 800c67c:	e014      	b.n	800c6a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c686:	2b00      	cmp	r3, #0
 800c688:	d00e      	beq.n	800c6a8 <HAL_UART_IRQHandler+0x514>
 800c68a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c692:	2b00      	cmp	r3, #0
 800c694:	d008      	beq.n	800c6a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f99d 	bl	800c9d6 <UART_EndTransmit_IT>
    return;
 800c69c:	e004      	b.n	800c6a8 <HAL_UART_IRQHandler+0x514>
    return;
 800c69e:	bf00      	nop
 800c6a0:	e002      	b.n	800c6a8 <HAL_UART_IRQHandler+0x514>
      return;
 800c6a2:	bf00      	nop
 800c6a4:	e000      	b.n	800c6a8 <HAL_UART_IRQHandler+0x514>
      return;
 800c6a6:	bf00      	nop
  }
}
 800c6a8:	37e8      	adds	r7, #232	; 0xe8
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop

0800c6b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c6b8:	bf00      	nop
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c6cc:	bf00      	nop
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c6e4:	bf00      	nop
 800c6e6:	370c      	adds	r7, #12
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr

0800c6f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b090      	sub	sp, #64	; 0x40
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	60b9      	str	r1, [r7, #8]
 800c6fa:	603b      	str	r3, [r7, #0]
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c700:	e050      	b.n	800c7a4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c708:	d04c      	beq.n	800c7a4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c70a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d007      	beq.n	800c720 <UART_WaitOnFlagUntilTimeout+0x30>
 800c710:	f7fa fbd2 	bl	8006eb8 <HAL_GetTick>
 800c714:	4602      	mov	r2, r0
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d241      	bcs.n	800c7a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	330c      	adds	r3, #12
 800c726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72a:	e853 3f00 	ldrex	r3, [r3]
 800c72e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c732:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c736:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	330c      	adds	r3, #12
 800c73e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c740:	637a      	str	r2, [r7, #52]	; 0x34
 800c742:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c744:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c748:	e841 2300 	strex	r3, r2, [r1]
 800c74c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c750:	2b00      	cmp	r3, #0
 800c752:	d1e5      	bne.n	800c720 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	3314      	adds	r3, #20
 800c75a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	e853 3f00 	ldrex	r3, [r3]
 800c762:	613b      	str	r3, [r7, #16]
   return(result);
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	f023 0301 	bic.w	r3, r3, #1
 800c76a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	3314      	adds	r3, #20
 800c772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c774:	623a      	str	r2, [r7, #32]
 800c776:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c778:	69f9      	ldr	r1, [r7, #28]
 800c77a:	6a3a      	ldr	r2, [r7, #32]
 800c77c:	e841 2300 	strex	r3, r2, [r1]
 800c780:	61bb      	str	r3, [r7, #24]
   return(result);
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1e5      	bne.n	800c754 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2220      	movs	r2, #32
 800c78c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2220      	movs	r2, #32
 800c794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	e00f      	b.n	800c7c4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	bf0c      	ite	eq
 800c7b4:	2301      	moveq	r3, #1
 800c7b6:	2300      	movne	r3, #0
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	79fb      	ldrb	r3, [r7, #7]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d09f      	beq.n	800c702 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c7c2:	2300      	movs	r3, #0
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3740      	adds	r7, #64	; 0x40
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b085      	sub	sp, #20
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	88fa      	ldrh	r2, [r7, #6]
 800c7e4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	88fa      	ldrh	r2, [r7, #6]
 800c7ea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2222      	movs	r2, #34	; 0x22
 800c7f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d007      	beq.n	800c81a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	68da      	ldr	r2, [r3, #12]
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c818:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	695a      	ldr	r2, [r3, #20]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f042 0201 	orr.w	r2, r2, #1
 800c828:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	68da      	ldr	r2, [r3, #12]
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f042 0220 	orr.w	r2, r2, #32
 800c838:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3714      	adds	r7, #20
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c848:	b480      	push	{r7}
 800c84a:	b095      	sub	sp, #84	; 0x54
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	330c      	adds	r3, #12
 800c856:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c85a:	e853 3f00 	ldrex	r3, [r3]
 800c85e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c862:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c866:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	330c      	adds	r3, #12
 800c86e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c870:	643a      	str	r2, [r7, #64]	; 0x40
 800c872:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c874:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c876:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c878:	e841 2300 	strex	r3, r2, [r1]
 800c87c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c880:	2b00      	cmp	r3, #0
 800c882:	d1e5      	bne.n	800c850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	3314      	adds	r3, #20
 800c88a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c88c:	6a3b      	ldr	r3, [r7, #32]
 800c88e:	e853 3f00 	ldrex	r3, [r3]
 800c892:	61fb      	str	r3, [r7, #28]
   return(result);
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	f023 0301 	bic.w	r3, r3, #1
 800c89a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	3314      	adds	r3, #20
 800c8a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8ac:	e841 2300 	strex	r3, r2, [r1]
 800c8b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1e5      	bne.n	800c884 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d119      	bne.n	800c8f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	330c      	adds	r3, #12
 800c8c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	e853 3f00 	ldrex	r3, [r3]
 800c8ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	f023 0310 	bic.w	r3, r3, #16
 800c8d6:	647b      	str	r3, [r7, #68]	; 0x44
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	330c      	adds	r3, #12
 800c8de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8e0:	61ba      	str	r2, [r7, #24]
 800c8e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e4:	6979      	ldr	r1, [r7, #20]
 800c8e6:	69ba      	ldr	r2, [r7, #24]
 800c8e8:	e841 2300 	strex	r3, r2, [r1]
 800c8ec:	613b      	str	r3, [r7, #16]
   return(result);
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1e5      	bne.n	800c8c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2220      	movs	r2, #32
 800c8f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c902:	bf00      	nop
 800c904:	3754      	adds	r7, #84	; 0x54
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c90e:	b580      	push	{r7, lr}
 800c910:	b084      	sub	sp, #16
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c91a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2200      	movs	r2, #0
 800c920:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2200      	movs	r2, #0
 800c926:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f7ff fecb 	bl	800c6c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c92e:	bf00      	nop
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c936:	b480      	push	{r7}
 800c938:	b085      	sub	sp, #20
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c944:	b2db      	uxtb	r3, r3
 800c946:	2b21      	cmp	r3, #33	; 0x21
 800c948:	d13e      	bne.n	800c9c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c952:	d114      	bne.n	800c97e <UART_Transmit_IT+0x48>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	691b      	ldr	r3, [r3, #16]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d110      	bne.n	800c97e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6a1b      	ldr	r3, [r3, #32]
 800c960:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	881b      	ldrh	r3, [r3, #0]
 800c966:	461a      	mov	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c970:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6a1b      	ldr	r3, [r3, #32]
 800c976:	1c9a      	adds	r2, r3, #2
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	621a      	str	r2, [r3, #32]
 800c97c:	e008      	b.n	800c990 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6a1b      	ldr	r3, [r3, #32]
 800c982:	1c59      	adds	r1, r3, #1
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	6211      	str	r1, [r2, #32]
 800c988:	781a      	ldrb	r2, [r3, #0]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c994:	b29b      	uxth	r3, r3
 800c996:	3b01      	subs	r3, #1
 800c998:	b29b      	uxth	r3, r3
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	4619      	mov	r1, r3
 800c99e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d10f      	bne.n	800c9c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	68da      	ldr	r2, [r3, #12]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c9b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	68da      	ldr	r2, [r3, #12]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	e000      	b.n	800c9ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c9c8:	2302      	movs	r3, #2
  }
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3714      	adds	r7, #20
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr

0800c9d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b082      	sub	sp, #8
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	68da      	ldr	r2, [r3, #12]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2220      	movs	r2, #32
 800c9f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7ff fe5a 	bl	800c6b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3708      	adds	r7, #8
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b08c      	sub	sp, #48	; 0x30
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	2b22      	cmp	r3, #34	; 0x22
 800ca18:	f040 80ab 	bne.w	800cb72 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca24:	d117      	bne.n	800ca56 <UART_Receive_IT+0x50>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	691b      	ldr	r3, [r3, #16]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d113      	bne.n	800ca56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca44:	b29a      	uxth	r2, r3
 800ca46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca4e:	1c9a      	adds	r2, r3, #2
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	629a      	str	r2, [r3, #40]	; 0x28
 800ca54:	e026      	b.n	800caa4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca68:	d007      	beq.n	800ca7a <UART_Receive_IT+0x74>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d10a      	bne.n	800ca88 <UART_Receive_IT+0x82>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	691b      	ldr	r3, [r3, #16]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d106      	bne.n	800ca88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	b2da      	uxtb	r2, r3
 800ca82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca84:	701a      	strb	r2, [r3, #0]
 800ca86:	e008      	b.n	800ca9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca94:	b2da      	uxtb	r2, r3
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca9e:	1c5a      	adds	r2, r3, #1
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	3b01      	subs	r3, #1
 800caac:	b29b      	uxth	r3, r3
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	4619      	mov	r1, r3
 800cab2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d15a      	bne.n	800cb6e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	68da      	ldr	r2, [r3, #12]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f022 0220 	bic.w	r2, r2, #32
 800cac6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	68da      	ldr	r2, [r3, #12]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cad6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	695a      	ldr	r2, [r3, #20]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f022 0201 	bic.w	r2, r2, #1
 800cae6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2220      	movs	r2, #32
 800caec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d135      	bne.n	800cb64 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	330c      	adds	r3, #12
 800cb04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	e853 3f00 	ldrex	r3, [r3]
 800cb0c:	613b      	str	r3, [r7, #16]
   return(result);
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	f023 0310 	bic.w	r3, r3, #16
 800cb14:	627b      	str	r3, [r7, #36]	; 0x24
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	330c      	adds	r3, #12
 800cb1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb1e:	623a      	str	r2, [r7, #32]
 800cb20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb22:	69f9      	ldr	r1, [r7, #28]
 800cb24:	6a3a      	ldr	r2, [r7, #32]
 800cb26:	e841 2300 	strex	r3, r2, [r1]
 800cb2a:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1e5      	bne.n	800cafe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f003 0310 	and.w	r3, r3, #16
 800cb3c:	2b10      	cmp	r3, #16
 800cb3e:	d10a      	bne.n	800cb56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cb40:	2300      	movs	r3, #0
 800cb42:	60fb      	str	r3, [r7, #12]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	60fb      	str	r3, [r7, #12]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	60fb      	str	r3, [r7, #12]
 800cb54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7ff fdbb 	bl	800c6d8 <HAL_UARTEx_RxEventCallback>
 800cb62:	e002      	b.n	800cb6a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f7f4 fe21 	bl	80017ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	e002      	b.n	800cb74 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	e000      	b.n	800cb74 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800cb72:	2302      	movs	r3, #2
  }
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3730      	adds	r7, #48	; 0x30
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb80:	b0c0      	sub	sp, #256	; 0x100
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	691b      	ldr	r3, [r3, #16]
 800cb90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cb94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb98:	68d9      	ldr	r1, [r3, #12]
 800cb9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	ea40 0301 	orr.w	r3, r0, r1
 800cba4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbaa:	689a      	ldr	r2, [r3, #8]
 800cbac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	431a      	orrs	r2, r3
 800cbb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbb8:	695b      	ldr	r3, [r3, #20]
 800cbba:	431a      	orrs	r2, r3
 800cbbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbc0:	69db      	ldr	r3, [r3, #28]
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cbc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cbd4:	f021 010c 	bic.w	r1, r1, #12
 800cbd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cbe2:	430b      	orrs	r3, r1
 800cbe4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cbe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	695b      	ldr	r3, [r3, #20]
 800cbee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cbf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbf6:	6999      	ldr	r1, [r3, #24]
 800cbf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	ea40 0301 	orr.w	r3, r0, r1
 800cc02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cc04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	4b8f      	ldr	r3, [pc, #572]	; (800ce48 <UART_SetConfig+0x2cc>)
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d005      	beq.n	800cc1c <UART_SetConfig+0xa0>
 800cc10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	4b8d      	ldr	r3, [pc, #564]	; (800ce4c <UART_SetConfig+0x2d0>)
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d104      	bne.n	800cc26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cc1c:	f7fd fcc4 	bl	800a5a8 <HAL_RCC_GetPCLK2Freq>
 800cc20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cc24:	e003      	b.n	800cc2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cc26:	f7fd fcab 	bl	800a580 <HAL_RCC_GetPCLK1Freq>
 800cc2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc32:	69db      	ldr	r3, [r3, #28]
 800cc34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc38:	f040 810c 	bne.w	800ce54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cc3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc40:	2200      	movs	r2, #0
 800cc42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cc46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cc4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cc4e:	4622      	mov	r2, r4
 800cc50:	462b      	mov	r3, r5
 800cc52:	1891      	adds	r1, r2, r2
 800cc54:	65b9      	str	r1, [r7, #88]	; 0x58
 800cc56:	415b      	adcs	r3, r3
 800cc58:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cc5e:	4621      	mov	r1, r4
 800cc60:	eb12 0801 	adds.w	r8, r2, r1
 800cc64:	4629      	mov	r1, r5
 800cc66:	eb43 0901 	adc.w	r9, r3, r1
 800cc6a:	f04f 0200 	mov.w	r2, #0
 800cc6e:	f04f 0300 	mov.w	r3, #0
 800cc72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cc76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cc7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cc7e:	4690      	mov	r8, r2
 800cc80:	4699      	mov	r9, r3
 800cc82:	4623      	mov	r3, r4
 800cc84:	eb18 0303 	adds.w	r3, r8, r3
 800cc88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cc8c:	462b      	mov	r3, r5
 800cc8e:	eb49 0303 	adc.w	r3, r9, r3
 800cc92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cc96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cca2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cca6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ccaa:	460b      	mov	r3, r1
 800ccac:	18db      	adds	r3, r3, r3
 800ccae:	653b      	str	r3, [r7, #80]	; 0x50
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	eb42 0303 	adc.w	r3, r2, r3
 800ccb6:	657b      	str	r3, [r7, #84]	; 0x54
 800ccb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ccbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ccc0:	f7f3 ffe2 	bl	8000c88 <__aeabi_uldivmod>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	4b61      	ldr	r3, [pc, #388]	; (800ce50 <UART_SetConfig+0x2d4>)
 800ccca:	fba3 2302 	umull	r2, r3, r3, r2
 800ccce:	095b      	lsrs	r3, r3, #5
 800ccd0:	011c      	lsls	r4, r3, #4
 800ccd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ccdc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cce0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cce4:	4642      	mov	r2, r8
 800cce6:	464b      	mov	r3, r9
 800cce8:	1891      	adds	r1, r2, r2
 800ccea:	64b9      	str	r1, [r7, #72]	; 0x48
 800ccec:	415b      	adcs	r3, r3
 800ccee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccf0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ccf4:	4641      	mov	r1, r8
 800ccf6:	eb12 0a01 	adds.w	sl, r2, r1
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	eb43 0b01 	adc.w	fp, r3, r1
 800cd00:	f04f 0200 	mov.w	r2, #0
 800cd04:	f04f 0300 	mov.w	r3, #0
 800cd08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cd0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cd10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cd14:	4692      	mov	sl, r2
 800cd16:	469b      	mov	fp, r3
 800cd18:	4643      	mov	r3, r8
 800cd1a:	eb1a 0303 	adds.w	r3, sl, r3
 800cd1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cd22:	464b      	mov	r3, r9
 800cd24:	eb4b 0303 	adc.w	r3, fp, r3
 800cd28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cd2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cd38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cd3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cd40:	460b      	mov	r3, r1
 800cd42:	18db      	adds	r3, r3, r3
 800cd44:	643b      	str	r3, [r7, #64]	; 0x40
 800cd46:	4613      	mov	r3, r2
 800cd48:	eb42 0303 	adc.w	r3, r2, r3
 800cd4c:	647b      	str	r3, [r7, #68]	; 0x44
 800cd4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cd52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cd56:	f7f3 ff97 	bl	8000c88 <__aeabi_uldivmod>
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	4611      	mov	r1, r2
 800cd60:	4b3b      	ldr	r3, [pc, #236]	; (800ce50 <UART_SetConfig+0x2d4>)
 800cd62:	fba3 2301 	umull	r2, r3, r3, r1
 800cd66:	095b      	lsrs	r3, r3, #5
 800cd68:	2264      	movs	r2, #100	; 0x64
 800cd6a:	fb02 f303 	mul.w	r3, r2, r3
 800cd6e:	1acb      	subs	r3, r1, r3
 800cd70:	00db      	lsls	r3, r3, #3
 800cd72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cd76:	4b36      	ldr	r3, [pc, #216]	; (800ce50 <UART_SetConfig+0x2d4>)
 800cd78:	fba3 2302 	umull	r2, r3, r3, r2
 800cd7c:	095b      	lsrs	r3, r3, #5
 800cd7e:	005b      	lsls	r3, r3, #1
 800cd80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cd84:	441c      	add	r4, r3
 800cd86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cd90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cd94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cd98:	4642      	mov	r2, r8
 800cd9a:	464b      	mov	r3, r9
 800cd9c:	1891      	adds	r1, r2, r2
 800cd9e:	63b9      	str	r1, [r7, #56]	; 0x38
 800cda0:	415b      	adcs	r3, r3
 800cda2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cda4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cda8:	4641      	mov	r1, r8
 800cdaa:	1851      	adds	r1, r2, r1
 800cdac:	6339      	str	r1, [r7, #48]	; 0x30
 800cdae:	4649      	mov	r1, r9
 800cdb0:	414b      	adcs	r3, r1
 800cdb2:	637b      	str	r3, [r7, #52]	; 0x34
 800cdb4:	f04f 0200 	mov.w	r2, #0
 800cdb8:	f04f 0300 	mov.w	r3, #0
 800cdbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cdc0:	4659      	mov	r1, fp
 800cdc2:	00cb      	lsls	r3, r1, #3
 800cdc4:	4651      	mov	r1, sl
 800cdc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cdca:	4651      	mov	r1, sl
 800cdcc:	00ca      	lsls	r2, r1, #3
 800cdce:	4610      	mov	r0, r2
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	4642      	mov	r2, r8
 800cdd6:	189b      	adds	r3, r3, r2
 800cdd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cddc:	464b      	mov	r3, r9
 800cdde:	460a      	mov	r2, r1
 800cde0:	eb42 0303 	adc.w	r3, r2, r3
 800cde4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cde8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cdf4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cdf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	18db      	adds	r3, r3, r3
 800ce00:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce02:	4613      	mov	r3, r2
 800ce04:	eb42 0303 	adc.w	r3, r2, r3
 800ce08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ce0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ce12:	f7f3 ff39 	bl	8000c88 <__aeabi_uldivmod>
 800ce16:	4602      	mov	r2, r0
 800ce18:	460b      	mov	r3, r1
 800ce1a:	4b0d      	ldr	r3, [pc, #52]	; (800ce50 <UART_SetConfig+0x2d4>)
 800ce1c:	fba3 1302 	umull	r1, r3, r3, r2
 800ce20:	095b      	lsrs	r3, r3, #5
 800ce22:	2164      	movs	r1, #100	; 0x64
 800ce24:	fb01 f303 	mul.w	r3, r1, r3
 800ce28:	1ad3      	subs	r3, r2, r3
 800ce2a:	00db      	lsls	r3, r3, #3
 800ce2c:	3332      	adds	r3, #50	; 0x32
 800ce2e:	4a08      	ldr	r2, [pc, #32]	; (800ce50 <UART_SetConfig+0x2d4>)
 800ce30:	fba2 2303 	umull	r2, r3, r2, r3
 800ce34:	095b      	lsrs	r3, r3, #5
 800ce36:	f003 0207 	and.w	r2, r3, #7
 800ce3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4422      	add	r2, r4
 800ce42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ce44:	e105      	b.n	800d052 <UART_SetConfig+0x4d6>
 800ce46:	bf00      	nop
 800ce48:	40011000 	.word	0x40011000
 800ce4c:	40011400 	.word	0x40011400
 800ce50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ce54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ce5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ce62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ce66:	4642      	mov	r2, r8
 800ce68:	464b      	mov	r3, r9
 800ce6a:	1891      	adds	r1, r2, r2
 800ce6c:	6239      	str	r1, [r7, #32]
 800ce6e:	415b      	adcs	r3, r3
 800ce70:	627b      	str	r3, [r7, #36]	; 0x24
 800ce72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ce76:	4641      	mov	r1, r8
 800ce78:	1854      	adds	r4, r2, r1
 800ce7a:	4649      	mov	r1, r9
 800ce7c:	eb43 0501 	adc.w	r5, r3, r1
 800ce80:	f04f 0200 	mov.w	r2, #0
 800ce84:	f04f 0300 	mov.w	r3, #0
 800ce88:	00eb      	lsls	r3, r5, #3
 800ce8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ce8e:	00e2      	lsls	r2, r4, #3
 800ce90:	4614      	mov	r4, r2
 800ce92:	461d      	mov	r5, r3
 800ce94:	4643      	mov	r3, r8
 800ce96:	18e3      	adds	r3, r4, r3
 800ce98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ce9c:	464b      	mov	r3, r9
 800ce9e:	eb45 0303 	adc.w	r3, r5, r3
 800cea2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ceb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ceb6:	f04f 0200 	mov.w	r2, #0
 800ceba:	f04f 0300 	mov.w	r3, #0
 800cebe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cec2:	4629      	mov	r1, r5
 800cec4:	008b      	lsls	r3, r1, #2
 800cec6:	4621      	mov	r1, r4
 800cec8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cecc:	4621      	mov	r1, r4
 800cece:	008a      	lsls	r2, r1, #2
 800ced0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ced4:	f7f3 fed8 	bl	8000c88 <__aeabi_uldivmod>
 800ced8:	4602      	mov	r2, r0
 800ceda:	460b      	mov	r3, r1
 800cedc:	4b60      	ldr	r3, [pc, #384]	; (800d060 <UART_SetConfig+0x4e4>)
 800cede:	fba3 2302 	umull	r2, r3, r3, r2
 800cee2:	095b      	lsrs	r3, r3, #5
 800cee4:	011c      	lsls	r4, r3, #4
 800cee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ceea:	2200      	movs	r2, #0
 800ceec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cef0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cef4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cef8:	4642      	mov	r2, r8
 800cefa:	464b      	mov	r3, r9
 800cefc:	1891      	adds	r1, r2, r2
 800cefe:	61b9      	str	r1, [r7, #24]
 800cf00:	415b      	adcs	r3, r3
 800cf02:	61fb      	str	r3, [r7, #28]
 800cf04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cf08:	4641      	mov	r1, r8
 800cf0a:	1851      	adds	r1, r2, r1
 800cf0c:	6139      	str	r1, [r7, #16]
 800cf0e:	4649      	mov	r1, r9
 800cf10:	414b      	adcs	r3, r1
 800cf12:	617b      	str	r3, [r7, #20]
 800cf14:	f04f 0200 	mov.w	r2, #0
 800cf18:	f04f 0300 	mov.w	r3, #0
 800cf1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cf20:	4659      	mov	r1, fp
 800cf22:	00cb      	lsls	r3, r1, #3
 800cf24:	4651      	mov	r1, sl
 800cf26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cf2a:	4651      	mov	r1, sl
 800cf2c:	00ca      	lsls	r2, r1, #3
 800cf2e:	4610      	mov	r0, r2
 800cf30:	4619      	mov	r1, r3
 800cf32:	4603      	mov	r3, r0
 800cf34:	4642      	mov	r2, r8
 800cf36:	189b      	adds	r3, r3, r2
 800cf38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cf3c:	464b      	mov	r3, r9
 800cf3e:	460a      	mov	r2, r1
 800cf40:	eb42 0303 	adc.w	r3, r2, r3
 800cf44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cf48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	67bb      	str	r3, [r7, #120]	; 0x78
 800cf52:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cf54:	f04f 0200 	mov.w	r2, #0
 800cf58:	f04f 0300 	mov.w	r3, #0
 800cf5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cf60:	4649      	mov	r1, r9
 800cf62:	008b      	lsls	r3, r1, #2
 800cf64:	4641      	mov	r1, r8
 800cf66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cf6a:	4641      	mov	r1, r8
 800cf6c:	008a      	lsls	r2, r1, #2
 800cf6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cf72:	f7f3 fe89 	bl	8000c88 <__aeabi_uldivmod>
 800cf76:	4602      	mov	r2, r0
 800cf78:	460b      	mov	r3, r1
 800cf7a:	4b39      	ldr	r3, [pc, #228]	; (800d060 <UART_SetConfig+0x4e4>)
 800cf7c:	fba3 1302 	umull	r1, r3, r3, r2
 800cf80:	095b      	lsrs	r3, r3, #5
 800cf82:	2164      	movs	r1, #100	; 0x64
 800cf84:	fb01 f303 	mul.w	r3, r1, r3
 800cf88:	1ad3      	subs	r3, r2, r3
 800cf8a:	011b      	lsls	r3, r3, #4
 800cf8c:	3332      	adds	r3, #50	; 0x32
 800cf8e:	4a34      	ldr	r2, [pc, #208]	; (800d060 <UART_SetConfig+0x4e4>)
 800cf90:	fba2 2303 	umull	r2, r3, r2, r3
 800cf94:	095b      	lsrs	r3, r3, #5
 800cf96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf9a:	441c      	add	r4, r3
 800cf9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	673b      	str	r3, [r7, #112]	; 0x70
 800cfa4:	677a      	str	r2, [r7, #116]	; 0x74
 800cfa6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cfaa:	4642      	mov	r2, r8
 800cfac:	464b      	mov	r3, r9
 800cfae:	1891      	adds	r1, r2, r2
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	415b      	adcs	r3, r3
 800cfb4:	60fb      	str	r3, [r7, #12]
 800cfb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cfba:	4641      	mov	r1, r8
 800cfbc:	1851      	adds	r1, r2, r1
 800cfbe:	6039      	str	r1, [r7, #0]
 800cfc0:	4649      	mov	r1, r9
 800cfc2:	414b      	adcs	r3, r1
 800cfc4:	607b      	str	r3, [r7, #4]
 800cfc6:	f04f 0200 	mov.w	r2, #0
 800cfca:	f04f 0300 	mov.w	r3, #0
 800cfce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cfd2:	4659      	mov	r1, fp
 800cfd4:	00cb      	lsls	r3, r1, #3
 800cfd6:	4651      	mov	r1, sl
 800cfd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cfdc:	4651      	mov	r1, sl
 800cfde:	00ca      	lsls	r2, r1, #3
 800cfe0:	4610      	mov	r0, r2
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	4642      	mov	r2, r8
 800cfe8:	189b      	adds	r3, r3, r2
 800cfea:	66bb      	str	r3, [r7, #104]	; 0x68
 800cfec:	464b      	mov	r3, r9
 800cfee:	460a      	mov	r2, r1
 800cff0:	eb42 0303 	adc.w	r3, r2, r3
 800cff4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	663b      	str	r3, [r7, #96]	; 0x60
 800d000:	667a      	str	r2, [r7, #100]	; 0x64
 800d002:	f04f 0200 	mov.w	r2, #0
 800d006:	f04f 0300 	mov.w	r3, #0
 800d00a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d00e:	4649      	mov	r1, r9
 800d010:	008b      	lsls	r3, r1, #2
 800d012:	4641      	mov	r1, r8
 800d014:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d018:	4641      	mov	r1, r8
 800d01a:	008a      	lsls	r2, r1, #2
 800d01c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d020:	f7f3 fe32 	bl	8000c88 <__aeabi_uldivmod>
 800d024:	4602      	mov	r2, r0
 800d026:	460b      	mov	r3, r1
 800d028:	4b0d      	ldr	r3, [pc, #52]	; (800d060 <UART_SetConfig+0x4e4>)
 800d02a:	fba3 1302 	umull	r1, r3, r3, r2
 800d02e:	095b      	lsrs	r3, r3, #5
 800d030:	2164      	movs	r1, #100	; 0x64
 800d032:	fb01 f303 	mul.w	r3, r1, r3
 800d036:	1ad3      	subs	r3, r2, r3
 800d038:	011b      	lsls	r3, r3, #4
 800d03a:	3332      	adds	r3, #50	; 0x32
 800d03c:	4a08      	ldr	r2, [pc, #32]	; (800d060 <UART_SetConfig+0x4e4>)
 800d03e:	fba2 2303 	umull	r2, r3, r2, r3
 800d042:	095b      	lsrs	r3, r3, #5
 800d044:	f003 020f 	and.w	r2, r3, #15
 800d048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4422      	add	r2, r4
 800d050:	609a      	str	r2, [r3, #8]
}
 800d052:	bf00      	nop
 800d054:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d058:	46bd      	mov	sp, r7
 800d05a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d05e:	bf00      	nop
 800d060:	51eb851f 	.word	0x51eb851f

0800d064 <__NVIC_SetPriority>:
{
 800d064:	b480      	push	{r7}
 800d066:	b083      	sub	sp, #12
 800d068:	af00      	add	r7, sp, #0
 800d06a:	4603      	mov	r3, r0
 800d06c:	6039      	str	r1, [r7, #0]
 800d06e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d074:	2b00      	cmp	r3, #0
 800d076:	db0a      	blt.n	800d08e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	b2da      	uxtb	r2, r3
 800d07c:	490c      	ldr	r1, [pc, #48]	; (800d0b0 <__NVIC_SetPriority+0x4c>)
 800d07e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d082:	0112      	lsls	r2, r2, #4
 800d084:	b2d2      	uxtb	r2, r2
 800d086:	440b      	add	r3, r1
 800d088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d08c:	e00a      	b.n	800d0a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	b2da      	uxtb	r2, r3
 800d092:	4908      	ldr	r1, [pc, #32]	; (800d0b4 <__NVIC_SetPriority+0x50>)
 800d094:	79fb      	ldrb	r3, [r7, #7]
 800d096:	f003 030f 	and.w	r3, r3, #15
 800d09a:	3b04      	subs	r3, #4
 800d09c:	0112      	lsls	r2, r2, #4
 800d09e:	b2d2      	uxtb	r2, r2
 800d0a0:	440b      	add	r3, r1
 800d0a2:	761a      	strb	r2, [r3, #24]
}
 800d0a4:	bf00      	nop
 800d0a6:	370c      	adds	r7, #12
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr
 800d0b0:	e000e100 	.word	0xe000e100
 800d0b4:	e000ed00 	.word	0xe000ed00

0800d0b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d0bc:	2100      	movs	r1, #0
 800d0be:	f06f 0004 	mvn.w	r0, #4
 800d0c2:	f7ff ffcf 	bl	800d064 <__NVIC_SetPriority>
#endif
}
 800d0c6:	bf00      	nop
 800d0c8:	bd80      	pop	{r7, pc}
	...

0800d0cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0d2:	f3ef 8305 	mrs	r3, IPSR
 800d0d6:	603b      	str	r3, [r7, #0]
  return(result);
 800d0d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d003      	beq.n	800d0e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d0de:	f06f 0305 	mvn.w	r3, #5
 800d0e2:	607b      	str	r3, [r7, #4]
 800d0e4:	e00c      	b.n	800d100 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d0e6:	4b0a      	ldr	r3, [pc, #40]	; (800d110 <osKernelInitialize+0x44>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d105      	bne.n	800d0fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d0ee:	4b08      	ldr	r3, [pc, #32]	; (800d110 <osKernelInitialize+0x44>)
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	607b      	str	r3, [r7, #4]
 800d0f8:	e002      	b.n	800d100 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d0fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d100:	687b      	ldr	r3, [r7, #4]
}
 800d102:	4618      	mov	r0, r3
 800d104:	370c      	adds	r7, #12
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	20000868 	.word	0x20000868

0800d114 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d11a:	f3ef 8305 	mrs	r3, IPSR
 800d11e:	603b      	str	r3, [r7, #0]
  return(result);
 800d120:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d122:	2b00      	cmp	r3, #0
 800d124:	d003      	beq.n	800d12e <osKernelStart+0x1a>
    stat = osErrorISR;
 800d126:	f06f 0305 	mvn.w	r3, #5
 800d12a:	607b      	str	r3, [r7, #4]
 800d12c:	e010      	b.n	800d150 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d12e:	4b0b      	ldr	r3, [pc, #44]	; (800d15c <osKernelStart+0x48>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2b01      	cmp	r3, #1
 800d134:	d109      	bne.n	800d14a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d136:	f7ff ffbf 	bl	800d0b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d13a:	4b08      	ldr	r3, [pc, #32]	; (800d15c <osKernelStart+0x48>)
 800d13c:	2202      	movs	r2, #2
 800d13e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d140:	f001 f912 	bl	800e368 <vTaskStartScheduler>
      stat = osOK;
 800d144:	2300      	movs	r3, #0
 800d146:	607b      	str	r3, [r7, #4]
 800d148:	e002      	b.n	800d150 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d14a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d14e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d150:	687b      	ldr	r3, [r7, #4]
}
 800d152:	4618      	mov	r0, r3
 800d154:	3708      	adds	r7, #8
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	20000868 	.word	0x20000868

0800d160 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d160:	b580      	push	{r7, lr}
 800d162:	b08e      	sub	sp, #56	; 0x38
 800d164:	af04      	add	r7, sp, #16
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d16c:	2300      	movs	r3, #0
 800d16e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d170:	f3ef 8305 	mrs	r3, IPSR
 800d174:	617b      	str	r3, [r7, #20]
  return(result);
 800d176:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d17f      	bne.n	800d27c <osThreadNew+0x11c>
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d07c      	beq.n	800d27c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800d182:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d186:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d188:	2318      	movs	r3, #24
 800d18a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d18c:	2300      	movs	r3, #0
 800d18e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d194:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d045      	beq.n	800d228 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d002      	beq.n	800d1aa <osThreadNew+0x4a>
        name = attr->name;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	699b      	ldr	r3, [r3, #24]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d002      	beq.n	800d1b8 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	699b      	ldr	r3, [r3, #24]
 800d1b6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d008      	beq.n	800d1d0 <osThreadNew+0x70>
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	2b38      	cmp	r3, #56	; 0x38
 800d1c2:	d805      	bhi.n	800d1d0 <osThreadNew+0x70>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	f003 0301 	and.w	r3, r3, #1
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d001      	beq.n	800d1d4 <osThreadNew+0x74>
        return (NULL);
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	e054      	b.n	800d27e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	695b      	ldr	r3, [r3, #20]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d003      	beq.n	800d1e4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	695b      	ldr	r3, [r3, #20]
 800d1e0:	089b      	lsrs	r3, r3, #2
 800d1e2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d00e      	beq.n	800d20a <osThreadNew+0xaa>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	2b5b      	cmp	r3, #91	; 0x5b
 800d1f2:	d90a      	bls.n	800d20a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d006      	beq.n	800d20a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	695b      	ldr	r3, [r3, #20]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d002      	beq.n	800d20a <osThreadNew+0xaa>
        mem = 1;
 800d204:	2301      	movs	r3, #1
 800d206:	61bb      	str	r3, [r7, #24]
 800d208:	e010      	b.n	800d22c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	689b      	ldr	r3, [r3, #8]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d10c      	bne.n	800d22c <osThreadNew+0xcc>
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	68db      	ldr	r3, [r3, #12]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d108      	bne.n	800d22c <osThreadNew+0xcc>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	691b      	ldr	r3, [r3, #16]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d104      	bne.n	800d22c <osThreadNew+0xcc>
          mem = 0;
 800d222:	2300      	movs	r3, #0
 800d224:	61bb      	str	r3, [r7, #24]
 800d226:	e001      	b.n	800d22c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800d228:	2300      	movs	r3, #0
 800d22a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d110      	bne.n	800d254 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d23a:	9202      	str	r2, [sp, #8]
 800d23c:	9301      	str	r3, [sp, #4]
 800d23e:	69fb      	ldr	r3, [r7, #28]
 800d240:	9300      	str	r3, [sp, #0]
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	6a3a      	ldr	r2, [r7, #32]
 800d246:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	f000 fe39 	bl	800dec0 <xTaskCreateStatic>
 800d24e:	4603      	mov	r3, r0
 800d250:	613b      	str	r3, [r7, #16]
 800d252:	e013      	b.n	800d27c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800d254:	69bb      	ldr	r3, [r7, #24]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d110      	bne.n	800d27c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d25a:	6a3b      	ldr	r3, [r7, #32]
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	f107 0310 	add.w	r3, r7, #16
 800d262:	9301      	str	r3, [sp, #4]
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	9300      	str	r3, [sp, #0]
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d26c:	68f8      	ldr	r0, [r7, #12]
 800d26e:	f000 fe84 	bl	800df7a <xTaskCreate>
 800d272:	4603      	mov	r3, r0
 800d274:	2b01      	cmp	r3, #1
 800d276:	d001      	beq.n	800d27c <osThreadNew+0x11c>
            hTask = NULL;
 800d278:	2300      	movs	r3, #0
 800d27a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d27c:	693b      	ldr	r3, [r7, #16]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3728      	adds	r7, #40	; 0x28
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}

0800d286 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d286:	b580      	push	{r7, lr}
 800d288:	b084      	sub	sp, #16
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d28e:	f3ef 8305 	mrs	r3, IPSR
 800d292:	60bb      	str	r3, [r7, #8]
  return(result);
 800d294:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d296:	2b00      	cmp	r3, #0
 800d298:	d003      	beq.n	800d2a2 <osDelay+0x1c>
    stat = osErrorISR;
 800d29a:	f06f 0305 	mvn.w	r3, #5
 800d29e:	60fb      	str	r3, [r7, #12]
 800d2a0:	e007      	b.n	800d2b2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d002      	beq.n	800d2b2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f001 f827 	bl	800e300 <vTaskDelay>
    }
  }

  return (stat);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3710      	adds	r7, #16
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b086      	sub	sp, #24
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2c4:	f3ef 8305 	mrs	r3, IPSR
 800d2c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d003      	beq.n	800d2d8 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800d2d0:	f06f 0305 	mvn.w	r3, #5
 800d2d4:	617b      	str	r3, [r7, #20]
 800d2d6:	e019      	b.n	800d30c <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800d2dc:	f001 f956 	bl	800e58c <xTaskGetTickCount>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d009      	beq.n	800d306 <osDelayUntil+0x4a>
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	db06      	blt.n	800d306 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800d2f8:	f107 0308 	add.w	r3, r7, #8
 800d2fc:	6939      	ldr	r1, [r7, #16]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f000 ff80 	bl	800e204 <vTaskDelayUntil>
 800d304:	e002      	b.n	800d30c <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800d306:	f06f 0303 	mvn.w	r3, #3
 800d30a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d30c:	697b      	ldr	r3, [r7, #20]
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3718      	adds	r7, #24
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
	...

0800d318 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d318:	b480      	push	{r7}
 800d31a:	b085      	sub	sp, #20
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	4a07      	ldr	r2, [pc, #28]	; (800d344 <vApplicationGetIdleTaskMemory+0x2c>)
 800d328:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	4a06      	ldr	r2, [pc, #24]	; (800d348 <vApplicationGetIdleTaskMemory+0x30>)
 800d32e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d336:	601a      	str	r2, [r3, #0]
}
 800d338:	bf00      	nop
 800d33a:	3714      	adds	r7, #20
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr
 800d344:	2000086c 	.word	0x2000086c
 800d348:	200008c8 	.word	0x200008c8

0800d34c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d34c:	b480      	push	{r7}
 800d34e:	b085      	sub	sp, #20
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	4a07      	ldr	r2, [pc, #28]	; (800d378 <vApplicationGetTimerTaskMemory+0x2c>)
 800d35c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	4a06      	ldr	r2, [pc, #24]	; (800d37c <vApplicationGetTimerTaskMemory+0x30>)
 800d362:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d36a:	601a      	str	r2, [r3, #0]
}
 800d36c:	bf00      	nop
 800d36e:	3714      	adds	r7, #20
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr
 800d378:	200010c8 	.word	0x200010c8
 800d37c:	20001124 	.word	0x20001124

0800d380 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d380:	b480      	push	{r7}
 800d382:	b083      	sub	sp, #12
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f103 0208 	add.w	r2, r3, #8
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d398:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f103 0208 	add.w	r2, r3, #8
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f103 0208 	add.w	r2, r3, #8
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d3b4:	bf00      	nop
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d3ce:	bf00      	nop
 800d3d0:	370c      	adds	r7, #12
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr

0800d3da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d3da:	b480      	push	{r7}
 800d3dc:	b085      	sub	sp, #20
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
 800d3e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	689a      	ldr	r2, [r3, #8]
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	689b      	ldr	r3, [r3, #8]
 800d3fc:	683a      	ldr	r2, [r7, #0]
 800d3fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	683a      	ldr	r2, [r7, #0]
 800d404:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	1c5a      	adds	r2, r3, #1
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	601a      	str	r2, [r3, #0]
}
 800d416:	bf00      	nop
 800d418:	3714      	adds	r7, #20
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr

0800d422 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d422:	b480      	push	{r7}
 800d424:	b085      	sub	sp, #20
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
 800d42a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d438:	d103      	bne.n	800d442 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	691b      	ldr	r3, [r3, #16]
 800d43e:	60fb      	str	r3, [r7, #12]
 800d440:	e00c      	b.n	800d45c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	3308      	adds	r3, #8
 800d446:	60fb      	str	r3, [r7, #12]
 800d448:	e002      	b.n	800d450 <vListInsert+0x2e>
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	60fb      	str	r3, [r7, #12]
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	68ba      	ldr	r2, [r7, #8]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d2f6      	bcs.n	800d44a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	685a      	ldr	r2, [r3, #4]
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	683a      	ldr	r2, [r7, #0]
 800d46a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	68fa      	ldr	r2, [r7, #12]
 800d470:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	683a      	ldr	r2, [r7, #0]
 800d476:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	1c5a      	adds	r2, r3, #1
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	601a      	str	r2, [r3, #0]
}
 800d488:	bf00      	nop
 800d48a:	3714      	adds	r7, #20
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d494:	b480      	push	{r7}
 800d496:	b085      	sub	sp, #20
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	691b      	ldr	r3, [r3, #16]
 800d4a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	6892      	ldr	r2, [r2, #8]
 800d4aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	6852      	ldr	r2, [r2, #4]
 800d4b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d103      	bne.n	800d4c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	689a      	ldr	r2, [r3, #8]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	1e5a      	subs	r2, r3, #1
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3714      	adds	r7, #20
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr

0800d4e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d10a      	bne.n	800d512 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d500:	f383 8811 	msr	BASEPRI, r3
 800d504:	f3bf 8f6f 	isb	sy
 800d508:	f3bf 8f4f 	dsb	sy
 800d50c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d50e:	bf00      	nop
 800d510:	e7fe      	b.n	800d510 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d512:	f002 f8cf 	bl	800f6b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d51e:	68f9      	ldr	r1, [r7, #12]
 800d520:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d522:	fb01 f303 	mul.w	r3, r1, r3
 800d526:	441a      	add	r2, r3
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2200      	movs	r2, #0
 800d530:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d542:	3b01      	subs	r3, #1
 800d544:	68f9      	ldr	r1, [r7, #12]
 800d546:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d548:	fb01 f303 	mul.w	r3, r1, r3
 800d54c:	441a      	add	r2, r3
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	22ff      	movs	r2, #255	; 0xff
 800d556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	22ff      	movs	r2, #255	; 0xff
 800d55e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d114      	bne.n	800d592 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	691b      	ldr	r3, [r3, #16]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d01a      	beq.n	800d5a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	3310      	adds	r3, #16
 800d574:	4618      	mov	r0, r3
 800d576:	f001 f981 	bl	800e87c <xTaskRemoveFromEventList>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d012      	beq.n	800d5a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d580:	4b0c      	ldr	r3, [pc, #48]	; (800d5b4 <xQueueGenericReset+0xcc>)
 800d582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d586:	601a      	str	r2, [r3, #0]
 800d588:	f3bf 8f4f 	dsb	sy
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	e009      	b.n	800d5a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	3310      	adds	r3, #16
 800d596:	4618      	mov	r0, r3
 800d598:	f7ff fef2 	bl	800d380 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	3324      	adds	r3, #36	; 0x24
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7ff feed 	bl	800d380 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d5a6:	f002 f8b5 	bl	800f714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d5aa:	2301      	movs	r3, #1
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3710      	adds	r7, #16
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	e000ed04 	.word	0xe000ed04

0800d5b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b08e      	sub	sp, #56	; 0x38
 800d5bc:	af02      	add	r7, sp, #8
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
 800d5c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d10a      	bne.n	800d5e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d0:	f383 8811 	msr	BASEPRI, r3
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	f3bf 8f4f 	dsb	sy
 800d5dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d5de:	bf00      	nop
 800d5e0:	e7fe      	b.n	800d5e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d10a      	bne.n	800d5fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ec:	f383 8811 	msr	BASEPRI, r3
 800d5f0:	f3bf 8f6f 	isb	sy
 800d5f4:	f3bf 8f4f 	dsb	sy
 800d5f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d5fa:	bf00      	nop
 800d5fc:	e7fe      	b.n	800d5fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d002      	beq.n	800d60a <xQueueGenericCreateStatic+0x52>
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d001      	beq.n	800d60e <xQueueGenericCreateStatic+0x56>
 800d60a:	2301      	movs	r3, #1
 800d60c:	e000      	b.n	800d610 <xQueueGenericCreateStatic+0x58>
 800d60e:	2300      	movs	r3, #0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10a      	bne.n	800d62a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d618:	f383 8811 	msr	BASEPRI, r3
 800d61c:	f3bf 8f6f 	isb	sy
 800d620:	f3bf 8f4f 	dsb	sy
 800d624:	623b      	str	r3, [r7, #32]
}
 800d626:	bf00      	nop
 800d628:	e7fe      	b.n	800d628 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d102      	bne.n	800d636 <xQueueGenericCreateStatic+0x7e>
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d101      	bne.n	800d63a <xQueueGenericCreateStatic+0x82>
 800d636:	2301      	movs	r3, #1
 800d638:	e000      	b.n	800d63c <xQueueGenericCreateStatic+0x84>
 800d63a:	2300      	movs	r3, #0
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d10a      	bne.n	800d656 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d644:	f383 8811 	msr	BASEPRI, r3
 800d648:	f3bf 8f6f 	isb	sy
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	61fb      	str	r3, [r7, #28]
}
 800d652:	bf00      	nop
 800d654:	e7fe      	b.n	800d654 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d656:	2350      	movs	r3, #80	; 0x50
 800d658:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	2b50      	cmp	r3, #80	; 0x50
 800d65e:	d00a      	beq.n	800d676 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d664:	f383 8811 	msr	BASEPRI, r3
 800d668:	f3bf 8f6f 	isb	sy
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	61bb      	str	r3, [r7, #24]
}
 800d672:	bf00      	nop
 800d674:	e7fe      	b.n	800d674 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d676:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d00d      	beq.n	800d69e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d684:	2201      	movs	r2, #1
 800d686:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d68a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	4613      	mov	r3, r2
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	68b9      	ldr	r1, [r7, #8]
 800d698:	68f8      	ldr	r0, [r7, #12]
 800d69a:	f000 f805 	bl	800d6a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3730      	adds	r7, #48	; 0x30
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
 800d6b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d103      	bne.n	800d6c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	69ba      	ldr	r2, [r7, #24]
 800d6c0:	601a      	str	r2, [r3, #0]
 800d6c2:	e002      	b.n	800d6ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d6ca:	69bb      	ldr	r3, [r7, #24]
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	68ba      	ldr	r2, [r7, #8]
 800d6d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d6d6:	2101      	movs	r1, #1
 800d6d8:	69b8      	ldr	r0, [r7, #24]
 800d6da:	f7ff ff05 	bl	800d4e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	78fa      	ldrb	r2, [r7, #3]
 800d6e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d6e6:	bf00      	nop
 800d6e8:	3710      	adds	r7, #16
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
	...

0800d6f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b08e      	sub	sp, #56	; 0x38
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	607a      	str	r2, [r7, #4]
 800d6fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d6fe:	2300      	movs	r3, #0
 800d700:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10a      	bne.n	800d722 <xQueueGenericSend+0x32>
	__asm volatile
 800d70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d710:	f383 8811 	msr	BASEPRI, r3
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d71e:	bf00      	nop
 800d720:	e7fe      	b.n	800d720 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d103      	bne.n	800d730 <xQueueGenericSend+0x40>
 800d728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d101      	bne.n	800d734 <xQueueGenericSend+0x44>
 800d730:	2301      	movs	r3, #1
 800d732:	e000      	b.n	800d736 <xQueueGenericSend+0x46>
 800d734:	2300      	movs	r3, #0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d10a      	bne.n	800d750 <xQueueGenericSend+0x60>
	__asm volatile
 800d73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73e:	f383 8811 	msr	BASEPRI, r3
 800d742:	f3bf 8f6f 	isb	sy
 800d746:	f3bf 8f4f 	dsb	sy
 800d74a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d74c:	bf00      	nop
 800d74e:	e7fe      	b.n	800d74e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	2b02      	cmp	r3, #2
 800d754:	d103      	bne.n	800d75e <xQueueGenericSend+0x6e>
 800d756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d101      	bne.n	800d762 <xQueueGenericSend+0x72>
 800d75e:	2301      	movs	r3, #1
 800d760:	e000      	b.n	800d764 <xQueueGenericSend+0x74>
 800d762:	2300      	movs	r3, #0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d10a      	bne.n	800d77e <xQueueGenericSend+0x8e>
	__asm volatile
 800d768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76c:	f383 8811 	msr	BASEPRI, r3
 800d770:	f3bf 8f6f 	isb	sy
 800d774:	f3bf 8f4f 	dsb	sy
 800d778:	623b      	str	r3, [r7, #32]
}
 800d77a:	bf00      	nop
 800d77c:	e7fe      	b.n	800d77c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d77e:	f001 fa3b 	bl	800ebf8 <xTaskGetSchedulerState>
 800d782:	4603      	mov	r3, r0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d102      	bne.n	800d78e <xQueueGenericSend+0x9e>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d101      	bne.n	800d792 <xQueueGenericSend+0xa2>
 800d78e:	2301      	movs	r3, #1
 800d790:	e000      	b.n	800d794 <xQueueGenericSend+0xa4>
 800d792:	2300      	movs	r3, #0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d10a      	bne.n	800d7ae <xQueueGenericSend+0xbe>
	__asm volatile
 800d798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79c:	f383 8811 	msr	BASEPRI, r3
 800d7a0:	f3bf 8f6f 	isb	sy
 800d7a4:	f3bf 8f4f 	dsb	sy
 800d7a8:	61fb      	str	r3, [r7, #28]
}
 800d7aa:	bf00      	nop
 800d7ac:	e7fe      	b.n	800d7ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7ae:	f001 ff81 	bl	800f6b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d302      	bcc.n	800d7c4 <xQueueGenericSend+0xd4>
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	2b02      	cmp	r3, #2
 800d7c2:	d129      	bne.n	800d818 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7c4:	683a      	ldr	r2, [r7, #0]
 800d7c6:	68b9      	ldr	r1, [r7, #8]
 800d7c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7ca:	f000 fa0b 	bl	800dbe4 <prvCopyDataToQueue>
 800d7ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d010      	beq.n	800d7fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7da:	3324      	adds	r3, #36	; 0x24
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f001 f84d 	bl	800e87c <xTaskRemoveFromEventList>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d013      	beq.n	800d810 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d7e8:	4b3f      	ldr	r3, [pc, #252]	; (800d8e8 <xQueueGenericSend+0x1f8>)
 800d7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7ee:	601a      	str	r2, [r3, #0]
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	f3bf 8f6f 	isb	sy
 800d7f8:	e00a      	b.n	800d810 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d007      	beq.n	800d810 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d800:	4b39      	ldr	r3, [pc, #228]	; (800d8e8 <xQueueGenericSend+0x1f8>)
 800d802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d806:	601a      	str	r2, [r3, #0]
 800d808:	f3bf 8f4f 	dsb	sy
 800d80c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d810:	f001 ff80 	bl	800f714 <vPortExitCritical>
				return pdPASS;
 800d814:	2301      	movs	r3, #1
 800d816:	e063      	b.n	800d8e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d103      	bne.n	800d826 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d81e:	f001 ff79 	bl	800f714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d822:	2300      	movs	r3, #0
 800d824:	e05c      	b.n	800d8e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d106      	bne.n	800d83a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d82c:	f107 0314 	add.w	r3, r7, #20
 800d830:	4618      	mov	r0, r3
 800d832:	f001 f887 	bl	800e944 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d836:	2301      	movs	r3, #1
 800d838:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d83a:	f001 ff6b 	bl	800f714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d83e:	f000 fdf9 	bl	800e434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d842:	f001 ff37 	bl	800f6b4 <vPortEnterCritical>
 800d846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d848:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d84c:	b25b      	sxtb	r3, r3
 800d84e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d852:	d103      	bne.n	800d85c <xQueueGenericSend+0x16c>
 800d854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d856:	2200      	movs	r2, #0
 800d858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d862:	b25b      	sxtb	r3, r3
 800d864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d868:	d103      	bne.n	800d872 <xQueueGenericSend+0x182>
 800d86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86c:	2200      	movs	r2, #0
 800d86e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d872:	f001 ff4f 	bl	800f714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d876:	1d3a      	adds	r2, r7, #4
 800d878:	f107 0314 	add.w	r3, r7, #20
 800d87c:	4611      	mov	r1, r2
 800d87e:	4618      	mov	r0, r3
 800d880:	f001 f876 	bl	800e970 <xTaskCheckForTimeOut>
 800d884:	4603      	mov	r3, r0
 800d886:	2b00      	cmp	r3, #0
 800d888:	d124      	bne.n	800d8d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d88a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d88c:	f000 faa2 	bl	800ddd4 <prvIsQueueFull>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d018      	beq.n	800d8c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d898:	3310      	adds	r3, #16
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	4611      	mov	r1, r2
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f000 ff9c 	bl	800e7dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d8a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8a6:	f000 fa2d 	bl	800dd04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d8aa:	f000 fdd1 	bl	800e450 <xTaskResumeAll>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	f47f af7c 	bne.w	800d7ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d8b6:	4b0c      	ldr	r3, [pc, #48]	; (800d8e8 <xQueueGenericSend+0x1f8>)
 800d8b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8bc:	601a      	str	r2, [r3, #0]
 800d8be:	f3bf 8f4f 	dsb	sy
 800d8c2:	f3bf 8f6f 	isb	sy
 800d8c6:	e772      	b.n	800d7ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d8c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8ca:	f000 fa1b 	bl	800dd04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8ce:	f000 fdbf 	bl	800e450 <xTaskResumeAll>
 800d8d2:	e76c      	b.n	800d7ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d8d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8d6:	f000 fa15 	bl	800dd04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8da:	f000 fdb9 	bl	800e450 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d8de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3738      	adds	r7, #56	; 0x38
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	e000ed04 	.word	0xe000ed04

0800d8ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b090      	sub	sp, #64	; 0x40
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	607a      	str	r2, [r7, #4]
 800d8f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d900:	2b00      	cmp	r3, #0
 800d902:	d10a      	bne.n	800d91a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d908:	f383 8811 	msr	BASEPRI, r3
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	f3bf 8f4f 	dsb	sy
 800d914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d916:	bf00      	nop
 800d918:	e7fe      	b.n	800d918 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d103      	bne.n	800d928 <xQueueGenericSendFromISR+0x3c>
 800d920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d924:	2b00      	cmp	r3, #0
 800d926:	d101      	bne.n	800d92c <xQueueGenericSendFromISR+0x40>
 800d928:	2301      	movs	r3, #1
 800d92a:	e000      	b.n	800d92e <xQueueGenericSendFromISR+0x42>
 800d92c:	2300      	movs	r3, #0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d10a      	bne.n	800d948 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d936:	f383 8811 	msr	BASEPRI, r3
 800d93a:	f3bf 8f6f 	isb	sy
 800d93e:	f3bf 8f4f 	dsb	sy
 800d942:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d944:	bf00      	nop
 800d946:	e7fe      	b.n	800d946 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	2b02      	cmp	r3, #2
 800d94c:	d103      	bne.n	800d956 <xQueueGenericSendFromISR+0x6a>
 800d94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d952:	2b01      	cmp	r3, #1
 800d954:	d101      	bne.n	800d95a <xQueueGenericSendFromISR+0x6e>
 800d956:	2301      	movs	r3, #1
 800d958:	e000      	b.n	800d95c <xQueueGenericSendFromISR+0x70>
 800d95a:	2300      	movs	r3, #0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d10a      	bne.n	800d976 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d964:	f383 8811 	msr	BASEPRI, r3
 800d968:	f3bf 8f6f 	isb	sy
 800d96c:	f3bf 8f4f 	dsb	sy
 800d970:	623b      	str	r3, [r7, #32]
}
 800d972:	bf00      	nop
 800d974:	e7fe      	b.n	800d974 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d976:	f001 ff7f 	bl	800f878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d97a:	f3ef 8211 	mrs	r2, BASEPRI
 800d97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d982:	f383 8811 	msr	BASEPRI, r3
 800d986:	f3bf 8f6f 	isb	sy
 800d98a:	f3bf 8f4f 	dsb	sy
 800d98e:	61fa      	str	r2, [r7, #28]
 800d990:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d992:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d994:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d302      	bcc.n	800d9a8 <xQueueGenericSendFromISR+0xbc>
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	2b02      	cmp	r3, #2
 800d9a6:	d12f      	bne.n	800da08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d9b8:	683a      	ldr	r2, [r7, #0]
 800d9ba:	68b9      	ldr	r1, [r7, #8]
 800d9bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d9be:	f000 f911 	bl	800dbe4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d9c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d9c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9ca:	d112      	bne.n	800d9f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d016      	beq.n	800da02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d6:	3324      	adds	r3, #36	; 0x24
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f000 ff4f 	bl	800e87c <xTaskRemoveFromEventList>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00e      	beq.n	800da02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d00b      	beq.n	800da02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	601a      	str	r2, [r3, #0]
 800d9f0:	e007      	b.n	800da02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d9f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	b25a      	sxtb	r2, r3
 800d9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800da02:	2301      	movs	r3, #1
 800da04:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800da06:	e001      	b.n	800da0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800da08:	2300      	movs	r3, #0
 800da0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da0e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800da16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3740      	adds	r7, #64	; 0x40
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
	...

0800da24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b08c      	sub	sp, #48	; 0x30
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	60b9      	str	r1, [r7, #8]
 800da2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800da30:	2300      	movs	r3, #0
 800da32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d10a      	bne.n	800da54 <xQueueReceive+0x30>
	__asm volatile
 800da3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da42:	f383 8811 	msr	BASEPRI, r3
 800da46:	f3bf 8f6f 	isb	sy
 800da4a:	f3bf 8f4f 	dsb	sy
 800da4e:	623b      	str	r3, [r7, #32]
}
 800da50:	bf00      	nop
 800da52:	e7fe      	b.n	800da52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d103      	bne.n	800da62 <xQueueReceive+0x3e>
 800da5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d101      	bne.n	800da66 <xQueueReceive+0x42>
 800da62:	2301      	movs	r3, #1
 800da64:	e000      	b.n	800da68 <xQueueReceive+0x44>
 800da66:	2300      	movs	r3, #0
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d10a      	bne.n	800da82 <xQueueReceive+0x5e>
	__asm volatile
 800da6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da70:	f383 8811 	msr	BASEPRI, r3
 800da74:	f3bf 8f6f 	isb	sy
 800da78:	f3bf 8f4f 	dsb	sy
 800da7c:	61fb      	str	r3, [r7, #28]
}
 800da7e:	bf00      	nop
 800da80:	e7fe      	b.n	800da80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da82:	f001 f8b9 	bl	800ebf8 <xTaskGetSchedulerState>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d102      	bne.n	800da92 <xQueueReceive+0x6e>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d101      	bne.n	800da96 <xQueueReceive+0x72>
 800da92:	2301      	movs	r3, #1
 800da94:	e000      	b.n	800da98 <xQueueReceive+0x74>
 800da96:	2300      	movs	r3, #0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d10a      	bne.n	800dab2 <xQueueReceive+0x8e>
	__asm volatile
 800da9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa0:	f383 8811 	msr	BASEPRI, r3
 800daa4:	f3bf 8f6f 	isb	sy
 800daa8:	f3bf 8f4f 	dsb	sy
 800daac:	61bb      	str	r3, [r7, #24]
}
 800daae:	bf00      	nop
 800dab0:	e7fe      	b.n	800dab0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dab2:	f001 fdff 	bl	800f6b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d01f      	beq.n	800db02 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dac2:	68b9      	ldr	r1, [r7, #8]
 800dac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dac6:	f000 f8f7 	bl	800dcb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800daca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dacc:	1e5a      	subs	r2, r3, #1
 800dace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad4:	691b      	ldr	r3, [r3, #16]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00f      	beq.n	800dafa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dadc:	3310      	adds	r3, #16
 800dade:	4618      	mov	r0, r3
 800dae0:	f000 fecc 	bl	800e87c <xTaskRemoveFromEventList>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d007      	beq.n	800dafa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800daea:	4b3d      	ldr	r3, [pc, #244]	; (800dbe0 <xQueueReceive+0x1bc>)
 800daec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daf0:	601a      	str	r2, [r3, #0]
 800daf2:	f3bf 8f4f 	dsb	sy
 800daf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dafa:	f001 fe0b 	bl	800f714 <vPortExitCritical>
				return pdPASS;
 800dafe:	2301      	movs	r3, #1
 800db00:	e069      	b.n	800dbd6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d103      	bne.n	800db10 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800db08:	f001 fe04 	bl	800f714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800db0c:	2300      	movs	r3, #0
 800db0e:	e062      	b.n	800dbd6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db12:	2b00      	cmp	r3, #0
 800db14:	d106      	bne.n	800db24 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db16:	f107 0310 	add.w	r3, r7, #16
 800db1a:	4618      	mov	r0, r3
 800db1c:	f000 ff12 	bl	800e944 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db20:	2301      	movs	r3, #1
 800db22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db24:	f001 fdf6 	bl	800f714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db28:	f000 fc84 	bl	800e434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db2c:	f001 fdc2 	bl	800f6b4 <vPortEnterCritical>
 800db30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db36:	b25b      	sxtb	r3, r3
 800db38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db3c:	d103      	bne.n	800db46 <xQueueReceive+0x122>
 800db3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db40:	2200      	movs	r2, #0
 800db42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db4c:	b25b      	sxtb	r3, r3
 800db4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db52:	d103      	bne.n	800db5c <xQueueReceive+0x138>
 800db54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db56:	2200      	movs	r2, #0
 800db58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db5c:	f001 fdda 	bl	800f714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db60:	1d3a      	adds	r2, r7, #4
 800db62:	f107 0310 	add.w	r3, r7, #16
 800db66:	4611      	mov	r1, r2
 800db68:	4618      	mov	r0, r3
 800db6a:	f000 ff01 	bl	800e970 <xTaskCheckForTimeOut>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d123      	bne.n	800dbbc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db76:	f000 f917 	bl	800dda8 <prvIsQueueEmpty>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d017      	beq.n	800dbb0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db82:	3324      	adds	r3, #36	; 0x24
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	4611      	mov	r1, r2
 800db88:	4618      	mov	r0, r3
 800db8a:	f000 fe27 	bl	800e7dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db90:	f000 f8b8 	bl	800dd04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db94:	f000 fc5c 	bl	800e450 <xTaskResumeAll>
 800db98:	4603      	mov	r3, r0
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d189      	bne.n	800dab2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800db9e:	4b10      	ldr	r3, [pc, #64]	; (800dbe0 <xQueueReceive+0x1bc>)
 800dba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dba4:	601a      	str	r2, [r3, #0]
 800dba6:	f3bf 8f4f 	dsb	sy
 800dbaa:	f3bf 8f6f 	isb	sy
 800dbae:	e780      	b.n	800dab2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dbb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbb2:	f000 f8a7 	bl	800dd04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dbb6:	f000 fc4b 	bl	800e450 <xTaskResumeAll>
 800dbba:	e77a      	b.n	800dab2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dbbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbbe:	f000 f8a1 	bl	800dd04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dbc2:	f000 fc45 	bl	800e450 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbc8:	f000 f8ee 	bl	800dda8 <prvIsQueueEmpty>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	f43f af6f 	beq.w	800dab2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dbd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3730      	adds	r7, #48	; 0x30
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	e000ed04 	.word	0xe000ed04

0800dbe4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b086      	sub	sp, #24
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d10d      	bne.n	800dc1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d14d      	bne.n	800dca6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	689b      	ldr	r3, [r3, #8]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f001 f810 	bl	800ec34 <xTaskPriorityDisinherit>
 800dc14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	609a      	str	r2, [r3, #8]
 800dc1c:	e043      	b.n	800dca6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d119      	bne.n	800dc58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	6858      	ldr	r0, [r3, #4]
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	68b9      	ldr	r1, [r7, #8]
 800dc30:	f002 f876 	bl	800fd20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	685a      	ldr	r2, [r3, #4]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc3c:	441a      	add	r2, r3
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	685a      	ldr	r2, [r3, #4]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	689b      	ldr	r3, [r3, #8]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d32b      	bcc.n	800dca6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	605a      	str	r2, [r3, #4]
 800dc56:	e026      	b.n	800dca6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	68d8      	ldr	r0, [r3, #12]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc60:	461a      	mov	r2, r3
 800dc62:	68b9      	ldr	r1, [r7, #8]
 800dc64:	f002 f85c 	bl	800fd20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	68da      	ldr	r2, [r3, #12]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc70:	425b      	negs	r3, r3
 800dc72:	441a      	add	r2, r3
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	68da      	ldr	r2, [r3, #12]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d207      	bcs.n	800dc94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	689a      	ldr	r2, [r3, #8]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc8c:	425b      	negs	r3, r3
 800dc8e:	441a      	add	r2, r3
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2b02      	cmp	r3, #2
 800dc98:	d105      	bne.n	800dca6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	3b01      	subs	r3, #1
 800dca4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	1c5a      	adds	r2, r3, #1
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dcae:	697b      	ldr	r3, [r7, #20]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3718      	adds	r7, #24
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d018      	beq.n	800dcfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	68da      	ldr	r2, [r3, #12]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd2:	441a      	add	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	68da      	ldr	r2, [r3, #12]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d303      	bcc.n	800dcec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	68d9      	ldr	r1, [r3, #12]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	6838      	ldr	r0, [r7, #0]
 800dcf8:	f002 f812 	bl	800fd20 <memcpy>
	}
}
 800dcfc:	bf00      	nop
 800dcfe:	3708      	adds	r7, #8
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd0c:	f001 fcd2 	bl	800f6b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd18:	e011      	b.n	800dd3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d012      	beq.n	800dd48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	3324      	adds	r3, #36	; 0x24
 800dd26:	4618      	mov	r0, r3
 800dd28:	f000 fda8 	bl	800e87c <xTaskRemoveFromEventList>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d001      	beq.n	800dd36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd32:	f000 fe7f 	bl	800ea34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd36:	7bfb      	ldrb	r3, [r7, #15]
 800dd38:	3b01      	subs	r3, #1
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	dce9      	bgt.n	800dd1a <prvUnlockQueue+0x16>
 800dd46:	e000      	b.n	800dd4a <prvUnlockQueue+0x46>
					break;
 800dd48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	22ff      	movs	r2, #255	; 0xff
 800dd4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dd52:	f001 fcdf 	bl	800f714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dd56:	f001 fcad 	bl	800f6b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd62:	e011      	b.n	800dd88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	691b      	ldr	r3, [r3, #16]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d012      	beq.n	800dd92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	3310      	adds	r3, #16
 800dd70:	4618      	mov	r0, r3
 800dd72:	f000 fd83 	bl	800e87c <xTaskRemoveFromEventList>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d001      	beq.n	800dd80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dd7c:	f000 fe5a 	bl	800ea34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dd80:	7bbb      	ldrb	r3, [r7, #14]
 800dd82:	3b01      	subs	r3, #1
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	dce9      	bgt.n	800dd64 <prvUnlockQueue+0x60>
 800dd90:	e000      	b.n	800dd94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dd92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	22ff      	movs	r2, #255	; 0xff
 800dd98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dd9c:	f001 fcba 	bl	800f714 <vPortExitCritical>
}
 800dda0:	bf00      	nop
 800dda2:	3710      	adds	r7, #16
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ddb0:	f001 fc80 	bl	800f6b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d102      	bne.n	800ddc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	60fb      	str	r3, [r7, #12]
 800ddc0:	e001      	b.n	800ddc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ddc6:	f001 fca5 	bl	800f714 <vPortExitCritical>

	return xReturn;
 800ddca:	68fb      	ldr	r3, [r7, #12]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3710      	adds	r7, #16
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dddc:	f001 fc6a 	bl	800f6b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d102      	bne.n	800ddf2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ddec:	2301      	movs	r3, #1
 800ddee:	60fb      	str	r3, [r7, #12]
 800ddf0:	e001      	b.n	800ddf6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ddf6:	f001 fc8d 	bl	800f714 <vPortExitCritical>

	return xReturn;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800de04:	b480      	push	{r7}
 800de06:	b085      	sub	sp, #20
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de0e:	2300      	movs	r3, #0
 800de10:	60fb      	str	r3, [r7, #12]
 800de12:	e014      	b.n	800de3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800de14:	4a0f      	ldr	r2, [pc, #60]	; (800de54 <vQueueAddToRegistry+0x50>)
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d10b      	bne.n	800de38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800de20:	490c      	ldr	r1, [pc, #48]	; (800de54 <vQueueAddToRegistry+0x50>)
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	683a      	ldr	r2, [r7, #0]
 800de26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de2a:	4a0a      	ldr	r2, [pc, #40]	; (800de54 <vQueueAddToRegistry+0x50>)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	00db      	lsls	r3, r3, #3
 800de30:	4413      	add	r3, r2
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800de36:	e006      	b.n	800de46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	3301      	adds	r3, #1
 800de3c:	60fb      	str	r3, [r7, #12]
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2b07      	cmp	r3, #7
 800de42:	d9e7      	bls.n	800de14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800de44:	bf00      	nop
 800de46:	bf00      	nop
 800de48:	3714      	adds	r7, #20
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr
 800de52:	bf00      	nop
 800de54:	20002124 	.word	0x20002124

0800de58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b086      	sub	sp, #24
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800de68:	f001 fc24 	bl	800f6b4 <vPortEnterCritical>
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de72:	b25b      	sxtb	r3, r3
 800de74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de78:	d103      	bne.n	800de82 <vQueueWaitForMessageRestricted+0x2a>
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	2200      	movs	r2, #0
 800de7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de88:	b25b      	sxtb	r3, r3
 800de8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de8e:	d103      	bne.n	800de98 <vQueueWaitForMessageRestricted+0x40>
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	2200      	movs	r2, #0
 800de94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de98:	f001 fc3c 	bl	800f714 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d106      	bne.n	800deb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	3324      	adds	r3, #36	; 0x24
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	68b9      	ldr	r1, [r7, #8]
 800deac:	4618      	mov	r0, r3
 800deae:	f000 fcb9 	bl	800e824 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800deb2:	6978      	ldr	r0, [r7, #20]
 800deb4:	f7ff ff26 	bl	800dd04 <prvUnlockQueue>
	}
 800deb8:	bf00      	nop
 800deba:	3718      	adds	r7, #24
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b08e      	sub	sp, #56	; 0x38
 800dec4:	af04      	add	r7, sp, #16
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	607a      	str	r2, [r7, #4]
 800decc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d10a      	bne.n	800deea <xTaskCreateStatic+0x2a>
	__asm volatile
 800ded4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded8:	f383 8811 	msr	BASEPRI, r3
 800dedc:	f3bf 8f6f 	isb	sy
 800dee0:	f3bf 8f4f 	dsb	sy
 800dee4:	623b      	str	r3, [r7, #32]
}
 800dee6:	bf00      	nop
 800dee8:	e7fe      	b.n	800dee8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800deea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deec:	2b00      	cmp	r3, #0
 800deee:	d10a      	bne.n	800df06 <xTaskCreateStatic+0x46>
	__asm volatile
 800def0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def4:	f383 8811 	msr	BASEPRI, r3
 800def8:	f3bf 8f6f 	isb	sy
 800defc:	f3bf 8f4f 	dsb	sy
 800df00:	61fb      	str	r3, [r7, #28]
}
 800df02:	bf00      	nop
 800df04:	e7fe      	b.n	800df04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800df06:	235c      	movs	r3, #92	; 0x5c
 800df08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	2b5c      	cmp	r3, #92	; 0x5c
 800df0e:	d00a      	beq.n	800df26 <xTaskCreateStatic+0x66>
	__asm volatile
 800df10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df14:	f383 8811 	msr	BASEPRI, r3
 800df18:	f3bf 8f6f 	isb	sy
 800df1c:	f3bf 8f4f 	dsb	sy
 800df20:	61bb      	str	r3, [r7, #24]
}
 800df22:	bf00      	nop
 800df24:	e7fe      	b.n	800df24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d01e      	beq.n	800df6c <xTaskCreateStatic+0xac>
 800df2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df30:	2b00      	cmp	r3, #0
 800df32:	d01b      	beq.n	800df6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df40:	2202      	movs	r2, #2
 800df42:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800df46:	2300      	movs	r3, #0
 800df48:	9303      	str	r3, [sp, #12]
 800df4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4c:	9302      	str	r3, [sp, #8]
 800df4e:	f107 0314 	add.w	r3, r7, #20
 800df52:	9301      	str	r3, [sp, #4]
 800df54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df56:	9300      	str	r3, [sp, #0]
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	68b9      	ldr	r1, [r7, #8]
 800df5e:	68f8      	ldr	r0, [r7, #12]
 800df60:	f000 f850 	bl	800e004 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df66:	f000 f8dd 	bl	800e124 <prvAddNewTaskToReadyList>
 800df6a:	e001      	b.n	800df70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800df6c:	2300      	movs	r3, #0
 800df6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800df70:	697b      	ldr	r3, [r7, #20]
	}
 800df72:	4618      	mov	r0, r3
 800df74:	3728      	adds	r7, #40	; 0x28
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800df7a:	b580      	push	{r7, lr}
 800df7c:	b08c      	sub	sp, #48	; 0x30
 800df7e:	af04      	add	r7, sp, #16
 800df80:	60f8      	str	r0, [r7, #12]
 800df82:	60b9      	str	r1, [r7, #8]
 800df84:	603b      	str	r3, [r7, #0]
 800df86:	4613      	mov	r3, r2
 800df88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800df8a:	88fb      	ldrh	r3, [r7, #6]
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	4618      	mov	r0, r3
 800df90:	f001 fcb2 	bl	800f8f8 <pvPortMalloc>
 800df94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d00e      	beq.n	800dfba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800df9c:	205c      	movs	r0, #92	; 0x5c
 800df9e:	f001 fcab 	bl	800f8f8 <pvPortMalloc>
 800dfa2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dfa4:	69fb      	ldr	r3, [r7, #28]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d003      	beq.n	800dfb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dfaa:	69fb      	ldr	r3, [r7, #28]
 800dfac:	697a      	ldr	r2, [r7, #20]
 800dfae:	631a      	str	r2, [r3, #48]	; 0x30
 800dfb0:	e005      	b.n	800dfbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dfb2:	6978      	ldr	r0, [r7, #20]
 800dfb4:	f001 fd6c 	bl	800fa90 <vPortFree>
 800dfb8:	e001      	b.n	800dfbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dfbe:	69fb      	ldr	r3, [r7, #28]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d017      	beq.n	800dff4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dfcc:	88fa      	ldrh	r2, [r7, #6]
 800dfce:	2300      	movs	r3, #0
 800dfd0:	9303      	str	r3, [sp, #12]
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	9302      	str	r3, [sp, #8]
 800dfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd8:	9301      	str	r3, [sp, #4]
 800dfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfdc:	9300      	str	r3, [sp, #0]
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	68b9      	ldr	r1, [r7, #8]
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f000 f80e 	bl	800e004 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfe8:	69f8      	ldr	r0, [r7, #28]
 800dfea:	f000 f89b 	bl	800e124 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dfee:	2301      	movs	r3, #1
 800dff0:	61bb      	str	r3, [r7, #24]
 800dff2:	e002      	b.n	800dffa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dff8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dffa:	69bb      	ldr	r3, [r7, #24]
	}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3720      	adds	r7, #32
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b088      	sub	sp, #32
 800e008:	af00      	add	r7, sp, #0
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	607a      	str	r2, [r7, #4]
 800e010:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e014:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	009b      	lsls	r3, r3, #2
 800e01a:	461a      	mov	r2, r3
 800e01c:	21a5      	movs	r1, #165	; 0xa5
 800e01e:	f001 fe8d 	bl	800fd3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e02c:	3b01      	subs	r3, #1
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	4413      	add	r3, r2
 800e032:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	f023 0307 	bic.w	r3, r3, #7
 800e03a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e03c:	69bb      	ldr	r3, [r7, #24]
 800e03e:	f003 0307 	and.w	r3, r3, #7
 800e042:	2b00      	cmp	r3, #0
 800e044:	d00a      	beq.n	800e05c <prvInitialiseNewTask+0x58>
	__asm volatile
 800e046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04a:	f383 8811 	msr	BASEPRI, r3
 800e04e:	f3bf 8f6f 	isb	sy
 800e052:	f3bf 8f4f 	dsb	sy
 800e056:	617b      	str	r3, [r7, #20]
}
 800e058:	bf00      	nop
 800e05a:	e7fe      	b.n	800e05a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d01f      	beq.n	800e0a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e062:	2300      	movs	r3, #0
 800e064:	61fb      	str	r3, [r7, #28]
 800e066:	e012      	b.n	800e08e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e068:	68ba      	ldr	r2, [r7, #8]
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	4413      	add	r3, r2
 800e06e:	7819      	ldrb	r1, [r3, #0]
 800e070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e072:	69fb      	ldr	r3, [r7, #28]
 800e074:	4413      	add	r3, r2
 800e076:	3334      	adds	r3, #52	; 0x34
 800e078:	460a      	mov	r2, r1
 800e07a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e07c:	68ba      	ldr	r2, [r7, #8]
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	4413      	add	r3, r2
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d006      	beq.n	800e096 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	3301      	adds	r3, #1
 800e08c:	61fb      	str	r3, [r7, #28]
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	2b0f      	cmp	r3, #15
 800e092:	d9e9      	bls.n	800e068 <prvInitialiseNewTask+0x64>
 800e094:	e000      	b.n	800e098 <prvInitialiseNewTask+0x94>
			{
				break;
 800e096:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e09a:	2200      	movs	r2, #0
 800e09c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e0a0:	e003      	b.n	800e0aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ac:	2b37      	cmp	r3, #55	; 0x37
 800e0ae:	d901      	bls.n	800e0b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e0b0:	2337      	movs	r3, #55	; 0x37
 800e0b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c8:	3304      	adds	r3, #4
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7ff f978 	bl	800d3c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d2:	3318      	adds	r3, #24
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7ff f973 	bl	800d3c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e0fe:	683a      	ldr	r2, [r7, #0]
 800e100:	68f9      	ldr	r1, [r7, #12]
 800e102:	69b8      	ldr	r0, [r7, #24]
 800e104:	f001 f9a6 	bl	800f454 <pxPortInitialiseStack>
 800e108:	4602      	mov	r2, r0
 800e10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e110:	2b00      	cmp	r3, #0
 800e112:	d002      	beq.n	800e11a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e11a:	bf00      	nop
 800e11c:	3720      	adds	r7, #32
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
	...

0800e124 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e12c:	f001 fac2 	bl	800f6b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e130:	4b2d      	ldr	r3, [pc, #180]	; (800e1e8 <prvAddNewTaskToReadyList+0xc4>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	3301      	adds	r3, #1
 800e136:	4a2c      	ldr	r2, [pc, #176]	; (800e1e8 <prvAddNewTaskToReadyList+0xc4>)
 800e138:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e13a:	4b2c      	ldr	r3, [pc, #176]	; (800e1ec <prvAddNewTaskToReadyList+0xc8>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d109      	bne.n	800e156 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e142:	4a2a      	ldr	r2, [pc, #168]	; (800e1ec <prvAddNewTaskToReadyList+0xc8>)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e148:	4b27      	ldr	r3, [pc, #156]	; (800e1e8 <prvAddNewTaskToReadyList+0xc4>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d110      	bne.n	800e172 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e150:	f000 fc94 	bl	800ea7c <prvInitialiseTaskLists>
 800e154:	e00d      	b.n	800e172 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e156:	4b26      	ldr	r3, [pc, #152]	; (800e1f0 <prvAddNewTaskToReadyList+0xcc>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d109      	bne.n	800e172 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e15e:	4b23      	ldr	r3, [pc, #140]	; (800e1ec <prvAddNewTaskToReadyList+0xc8>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e168:	429a      	cmp	r2, r3
 800e16a:	d802      	bhi.n	800e172 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e16c:	4a1f      	ldr	r2, [pc, #124]	; (800e1ec <prvAddNewTaskToReadyList+0xc8>)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e172:	4b20      	ldr	r3, [pc, #128]	; (800e1f4 <prvAddNewTaskToReadyList+0xd0>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	3301      	adds	r3, #1
 800e178:	4a1e      	ldr	r2, [pc, #120]	; (800e1f4 <prvAddNewTaskToReadyList+0xd0>)
 800e17a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e17c:	4b1d      	ldr	r3, [pc, #116]	; (800e1f4 <prvAddNewTaskToReadyList+0xd0>)
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e188:	4b1b      	ldr	r3, [pc, #108]	; (800e1f8 <prvAddNewTaskToReadyList+0xd4>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d903      	bls.n	800e198 <prvAddNewTaskToReadyList+0x74>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e194:	4a18      	ldr	r2, [pc, #96]	; (800e1f8 <prvAddNewTaskToReadyList+0xd4>)
 800e196:	6013      	str	r3, [r2, #0]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e19c:	4613      	mov	r3, r2
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	4413      	add	r3, r2
 800e1a2:	009b      	lsls	r3, r3, #2
 800e1a4:	4a15      	ldr	r2, [pc, #84]	; (800e1fc <prvAddNewTaskToReadyList+0xd8>)
 800e1a6:	441a      	add	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	3304      	adds	r3, #4
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	4610      	mov	r0, r2
 800e1b0:	f7ff f913 	bl	800d3da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e1b4:	f001 faae 	bl	800f714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e1b8:	4b0d      	ldr	r3, [pc, #52]	; (800e1f0 <prvAddNewTaskToReadyList+0xcc>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00e      	beq.n	800e1de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e1c0:	4b0a      	ldr	r3, [pc, #40]	; (800e1ec <prvAddNewTaskToReadyList+0xc8>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d207      	bcs.n	800e1de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e1ce:	4b0c      	ldr	r3, [pc, #48]	; (800e200 <prvAddNewTaskToReadyList+0xdc>)
 800e1d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1d4:	601a      	str	r2, [r3, #0]
 800e1d6:	f3bf 8f4f 	dsb	sy
 800e1da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1de:	bf00      	nop
 800e1e0:	3708      	adds	r7, #8
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	20002638 	.word	0x20002638
 800e1ec:	20002164 	.word	0x20002164
 800e1f0:	20002644 	.word	0x20002644
 800e1f4:	20002654 	.word	0x20002654
 800e1f8:	20002640 	.word	0x20002640
 800e1fc:	20002168 	.word	0x20002168
 800e200:	e000ed04 	.word	0xe000ed04

0800e204 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e204:	b580      	push	{r7, lr}
 800e206:	b08a      	sub	sp, #40	; 0x28
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e20e:	2300      	movs	r3, #0
 800e210:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d10a      	bne.n	800e22e <vTaskDelayUntil+0x2a>
	__asm volatile
 800e218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e21c:	f383 8811 	msr	BASEPRI, r3
 800e220:	f3bf 8f6f 	isb	sy
 800e224:	f3bf 8f4f 	dsb	sy
 800e228:	617b      	str	r3, [r7, #20]
}
 800e22a:	bf00      	nop
 800e22c:	e7fe      	b.n	800e22c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d10a      	bne.n	800e24a <vTaskDelayUntil+0x46>
	__asm volatile
 800e234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	613b      	str	r3, [r7, #16]
}
 800e246:	bf00      	nop
 800e248:	e7fe      	b.n	800e248 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e24a:	4b2a      	ldr	r3, [pc, #168]	; (800e2f4 <vTaskDelayUntil+0xf0>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00a      	beq.n	800e268 <vTaskDelayUntil+0x64>
	__asm volatile
 800e252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e256:	f383 8811 	msr	BASEPRI, r3
 800e25a:	f3bf 8f6f 	isb	sy
 800e25e:	f3bf 8f4f 	dsb	sy
 800e262:	60fb      	str	r3, [r7, #12]
}
 800e264:	bf00      	nop
 800e266:	e7fe      	b.n	800e266 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e268:	f000 f8e4 	bl	800e434 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e26c:	4b22      	ldr	r3, [pc, #136]	; (800e2f8 <vTaskDelayUntil+0xf4>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	683a      	ldr	r2, [r7, #0]
 800e278:	4413      	add	r3, r2
 800e27a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	6a3a      	ldr	r2, [r7, #32]
 800e282:	429a      	cmp	r2, r3
 800e284:	d20b      	bcs.n	800e29e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	69fa      	ldr	r2, [r7, #28]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d211      	bcs.n	800e2b4 <vTaskDelayUntil+0xb0>
 800e290:	69fa      	ldr	r2, [r7, #28]
 800e292:	6a3b      	ldr	r3, [r7, #32]
 800e294:	429a      	cmp	r2, r3
 800e296:	d90d      	bls.n	800e2b4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e298:	2301      	movs	r3, #1
 800e29a:	627b      	str	r3, [r7, #36]	; 0x24
 800e29c:	e00a      	b.n	800e2b4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	69fa      	ldr	r2, [r7, #28]
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d303      	bcc.n	800e2b0 <vTaskDelayUntil+0xac>
 800e2a8:	69fa      	ldr	r2, [r7, #28]
 800e2aa:	6a3b      	ldr	r3, [r7, #32]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d901      	bls.n	800e2b4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	69fa      	ldr	r2, [r7, #28]
 800e2b8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d006      	beq.n	800e2ce <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e2c0:	69fa      	ldr	r2, [r7, #28]
 800e2c2:	6a3b      	ldr	r3, [r7, #32]
 800e2c4:	1ad3      	subs	r3, r2, r3
 800e2c6:	2100      	movs	r1, #0
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f000 fd21 	bl	800ed10 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e2ce:	f000 f8bf 	bl	800e450 <xTaskResumeAll>
 800e2d2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d107      	bne.n	800e2ea <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e2da:	4b08      	ldr	r3, [pc, #32]	; (800e2fc <vTaskDelayUntil+0xf8>)
 800e2dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2e0:	601a      	str	r2, [r3, #0]
 800e2e2:	f3bf 8f4f 	dsb	sy
 800e2e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2ea:	bf00      	nop
 800e2ec:	3728      	adds	r7, #40	; 0x28
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	20002660 	.word	0x20002660
 800e2f8:	2000263c 	.word	0x2000263c
 800e2fc:	e000ed04 	.word	0xe000ed04

0800e300 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e308:	2300      	movs	r3, #0
 800e30a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d017      	beq.n	800e342 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e312:	4b13      	ldr	r3, [pc, #76]	; (800e360 <vTaskDelay+0x60>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d00a      	beq.n	800e330 <vTaskDelay+0x30>
	__asm volatile
 800e31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31e:	f383 8811 	msr	BASEPRI, r3
 800e322:	f3bf 8f6f 	isb	sy
 800e326:	f3bf 8f4f 	dsb	sy
 800e32a:	60bb      	str	r3, [r7, #8]
}
 800e32c:	bf00      	nop
 800e32e:	e7fe      	b.n	800e32e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e330:	f000 f880 	bl	800e434 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e334:	2100      	movs	r1, #0
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 fcea 	bl	800ed10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e33c:	f000 f888 	bl	800e450 <xTaskResumeAll>
 800e340:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d107      	bne.n	800e358 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e348:	4b06      	ldr	r3, [pc, #24]	; (800e364 <vTaskDelay+0x64>)
 800e34a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e34e:	601a      	str	r2, [r3, #0]
 800e350:	f3bf 8f4f 	dsb	sy
 800e354:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e358:	bf00      	nop
 800e35a:	3710      	adds	r7, #16
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	20002660 	.word	0x20002660
 800e364:	e000ed04 	.word	0xe000ed04

0800e368 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b08a      	sub	sp, #40	; 0x28
 800e36c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e36e:	2300      	movs	r3, #0
 800e370:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e372:	2300      	movs	r3, #0
 800e374:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e376:	463a      	mov	r2, r7
 800e378:	1d39      	adds	r1, r7, #4
 800e37a:	f107 0308 	add.w	r3, r7, #8
 800e37e:	4618      	mov	r0, r3
 800e380:	f7fe ffca 	bl	800d318 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e384:	6839      	ldr	r1, [r7, #0]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	68ba      	ldr	r2, [r7, #8]
 800e38a:	9202      	str	r2, [sp, #8]
 800e38c:	9301      	str	r3, [sp, #4]
 800e38e:	2300      	movs	r3, #0
 800e390:	9300      	str	r3, [sp, #0]
 800e392:	2300      	movs	r3, #0
 800e394:	460a      	mov	r2, r1
 800e396:	4921      	ldr	r1, [pc, #132]	; (800e41c <vTaskStartScheduler+0xb4>)
 800e398:	4821      	ldr	r0, [pc, #132]	; (800e420 <vTaskStartScheduler+0xb8>)
 800e39a:	f7ff fd91 	bl	800dec0 <xTaskCreateStatic>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	4a20      	ldr	r2, [pc, #128]	; (800e424 <vTaskStartScheduler+0xbc>)
 800e3a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e3a4:	4b1f      	ldr	r3, [pc, #124]	; (800e424 <vTaskStartScheduler+0xbc>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d002      	beq.n	800e3b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	617b      	str	r3, [r7, #20]
 800e3b0:	e001      	b.n	800e3b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	d102      	bne.n	800e3c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e3bc:	f000 fcfc 	bl	800edb8 <xTimerCreateTimerTask>
 800e3c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d116      	bne.n	800e3f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800e3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3cc:	f383 8811 	msr	BASEPRI, r3
 800e3d0:	f3bf 8f6f 	isb	sy
 800e3d4:	f3bf 8f4f 	dsb	sy
 800e3d8:	613b      	str	r3, [r7, #16]
}
 800e3da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e3dc:	4b12      	ldr	r3, [pc, #72]	; (800e428 <vTaskStartScheduler+0xc0>)
 800e3de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e3e4:	4b11      	ldr	r3, [pc, #68]	; (800e42c <vTaskStartScheduler+0xc4>)
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e3ea:	4b11      	ldr	r3, [pc, #68]	; (800e430 <vTaskStartScheduler+0xc8>)
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e3f0:	f001 f8be 	bl	800f570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e3f4:	e00e      	b.n	800e414 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3fc:	d10a      	bne.n	800e414 <vTaskStartScheduler+0xac>
	__asm volatile
 800e3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e402:	f383 8811 	msr	BASEPRI, r3
 800e406:	f3bf 8f6f 	isb	sy
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	60fb      	str	r3, [r7, #12]
}
 800e410:	bf00      	nop
 800e412:	e7fe      	b.n	800e412 <vTaskStartScheduler+0xaa>
}
 800e414:	bf00      	nop
 800e416:	3718      	adds	r7, #24
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	080146e4 	.word	0x080146e4
 800e420:	0800ea4d 	.word	0x0800ea4d
 800e424:	2000265c 	.word	0x2000265c
 800e428:	20002658 	.word	0x20002658
 800e42c:	20002644 	.word	0x20002644
 800e430:	2000263c 	.word	0x2000263c

0800e434 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e434:	b480      	push	{r7}
 800e436:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e438:	4b04      	ldr	r3, [pc, #16]	; (800e44c <vTaskSuspendAll+0x18>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	3301      	adds	r3, #1
 800e43e:	4a03      	ldr	r2, [pc, #12]	; (800e44c <vTaskSuspendAll+0x18>)
 800e440:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e442:	bf00      	nop
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr
 800e44c:	20002660 	.word	0x20002660

0800e450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e456:	2300      	movs	r3, #0
 800e458:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e45a:	2300      	movs	r3, #0
 800e45c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e45e:	4b42      	ldr	r3, [pc, #264]	; (800e568 <xTaskResumeAll+0x118>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d10a      	bne.n	800e47c <xTaskResumeAll+0x2c>
	__asm volatile
 800e466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e46a:	f383 8811 	msr	BASEPRI, r3
 800e46e:	f3bf 8f6f 	isb	sy
 800e472:	f3bf 8f4f 	dsb	sy
 800e476:	603b      	str	r3, [r7, #0]
}
 800e478:	bf00      	nop
 800e47a:	e7fe      	b.n	800e47a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e47c:	f001 f91a 	bl	800f6b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e480:	4b39      	ldr	r3, [pc, #228]	; (800e568 <xTaskResumeAll+0x118>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	3b01      	subs	r3, #1
 800e486:	4a38      	ldr	r2, [pc, #224]	; (800e568 <xTaskResumeAll+0x118>)
 800e488:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e48a:	4b37      	ldr	r3, [pc, #220]	; (800e568 <xTaskResumeAll+0x118>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d162      	bne.n	800e558 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e492:	4b36      	ldr	r3, [pc, #216]	; (800e56c <xTaskResumeAll+0x11c>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d05e      	beq.n	800e558 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e49a:	e02f      	b.n	800e4fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e49c:	4b34      	ldr	r3, [pc, #208]	; (800e570 <xTaskResumeAll+0x120>)
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	68db      	ldr	r3, [r3, #12]
 800e4a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	3318      	adds	r3, #24
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f7fe fff3 	bl	800d494 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	3304      	adds	r3, #4
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fe ffee 	bl	800d494 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4bc:	4b2d      	ldr	r3, [pc, #180]	; (800e574 <xTaskResumeAll+0x124>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d903      	bls.n	800e4cc <xTaskResumeAll+0x7c>
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c8:	4a2a      	ldr	r2, [pc, #168]	; (800e574 <xTaskResumeAll+0x124>)
 800e4ca:	6013      	str	r3, [r2, #0]
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	4413      	add	r3, r2
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	4a27      	ldr	r2, [pc, #156]	; (800e578 <xTaskResumeAll+0x128>)
 800e4da:	441a      	add	r2, r3
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	3304      	adds	r3, #4
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	4610      	mov	r0, r2
 800e4e4:	f7fe ff79 	bl	800d3da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ec:	4b23      	ldr	r3, [pc, #140]	; (800e57c <xTaskResumeAll+0x12c>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d302      	bcc.n	800e4fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e4f6:	4b22      	ldr	r3, [pc, #136]	; (800e580 <xTaskResumeAll+0x130>)
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4fc:	4b1c      	ldr	r3, [pc, #112]	; (800e570 <xTaskResumeAll+0x120>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d1cb      	bne.n	800e49c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d001      	beq.n	800e50e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e50a:	f000 fb55 	bl	800ebb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e50e:	4b1d      	ldr	r3, [pc, #116]	; (800e584 <xTaskResumeAll+0x134>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d010      	beq.n	800e53c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e51a:	f000 f847 	bl	800e5ac <xTaskIncrementTick>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d002      	beq.n	800e52a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e524:	4b16      	ldr	r3, [pc, #88]	; (800e580 <xTaskResumeAll+0x130>)
 800e526:	2201      	movs	r2, #1
 800e528:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	3b01      	subs	r3, #1
 800e52e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1f1      	bne.n	800e51a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e536:	4b13      	ldr	r3, [pc, #76]	; (800e584 <xTaskResumeAll+0x134>)
 800e538:	2200      	movs	r2, #0
 800e53a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e53c:	4b10      	ldr	r3, [pc, #64]	; (800e580 <xTaskResumeAll+0x130>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d009      	beq.n	800e558 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e544:	2301      	movs	r3, #1
 800e546:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e548:	4b0f      	ldr	r3, [pc, #60]	; (800e588 <xTaskResumeAll+0x138>)
 800e54a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e54e:	601a      	str	r2, [r3, #0]
 800e550:	f3bf 8f4f 	dsb	sy
 800e554:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e558:	f001 f8dc 	bl	800f714 <vPortExitCritical>

	return xAlreadyYielded;
 800e55c:	68bb      	ldr	r3, [r7, #8]
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3710      	adds	r7, #16
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	20002660 	.word	0x20002660
 800e56c:	20002638 	.word	0x20002638
 800e570:	200025f8 	.word	0x200025f8
 800e574:	20002640 	.word	0x20002640
 800e578:	20002168 	.word	0x20002168
 800e57c:	20002164 	.word	0x20002164
 800e580:	2000264c 	.word	0x2000264c
 800e584:	20002648 	.word	0x20002648
 800e588:	e000ed04 	.word	0xe000ed04

0800e58c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e58c:	b480      	push	{r7}
 800e58e:	b083      	sub	sp, #12
 800e590:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e592:	4b05      	ldr	r3, [pc, #20]	; (800e5a8 <xTaskGetTickCount+0x1c>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e598:	687b      	ldr	r3, [r7, #4]
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	370c      	adds	r7, #12
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr
 800e5a6:	bf00      	nop
 800e5a8:	2000263c 	.word	0x2000263c

0800e5ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b086      	sub	sp, #24
 800e5b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5b6:	4b4f      	ldr	r3, [pc, #316]	; (800e6f4 <xTaskIncrementTick+0x148>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	f040 808f 	bne.w	800e6de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e5c0:	4b4d      	ldr	r3, [pc, #308]	; (800e6f8 <xTaskIncrementTick+0x14c>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e5c8:	4a4b      	ldr	r2, [pc, #300]	; (800e6f8 <xTaskIncrementTick+0x14c>)
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d120      	bne.n	800e616 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e5d4:	4b49      	ldr	r3, [pc, #292]	; (800e6fc <xTaskIncrementTick+0x150>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00a      	beq.n	800e5f4 <xTaskIncrementTick+0x48>
	__asm volatile
 800e5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e2:	f383 8811 	msr	BASEPRI, r3
 800e5e6:	f3bf 8f6f 	isb	sy
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	603b      	str	r3, [r7, #0]
}
 800e5f0:	bf00      	nop
 800e5f2:	e7fe      	b.n	800e5f2 <xTaskIncrementTick+0x46>
 800e5f4:	4b41      	ldr	r3, [pc, #260]	; (800e6fc <xTaskIncrementTick+0x150>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	60fb      	str	r3, [r7, #12]
 800e5fa:	4b41      	ldr	r3, [pc, #260]	; (800e700 <xTaskIncrementTick+0x154>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4a3f      	ldr	r2, [pc, #252]	; (800e6fc <xTaskIncrementTick+0x150>)
 800e600:	6013      	str	r3, [r2, #0]
 800e602:	4a3f      	ldr	r2, [pc, #252]	; (800e700 <xTaskIncrementTick+0x154>)
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	6013      	str	r3, [r2, #0]
 800e608:	4b3e      	ldr	r3, [pc, #248]	; (800e704 <xTaskIncrementTick+0x158>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	3301      	adds	r3, #1
 800e60e:	4a3d      	ldr	r2, [pc, #244]	; (800e704 <xTaskIncrementTick+0x158>)
 800e610:	6013      	str	r3, [r2, #0]
 800e612:	f000 fad1 	bl	800ebb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e616:	4b3c      	ldr	r3, [pc, #240]	; (800e708 <xTaskIncrementTick+0x15c>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	693a      	ldr	r2, [r7, #16]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d349      	bcc.n	800e6b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e620:	4b36      	ldr	r3, [pc, #216]	; (800e6fc <xTaskIncrementTick+0x150>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d104      	bne.n	800e634 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e62a:	4b37      	ldr	r3, [pc, #220]	; (800e708 <xTaskIncrementTick+0x15c>)
 800e62c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e630:	601a      	str	r2, [r3, #0]
					break;
 800e632:	e03f      	b.n	800e6b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e634:	4b31      	ldr	r3, [pc, #196]	; (800e6fc <xTaskIncrementTick+0x150>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	68db      	ldr	r3, [r3, #12]
 800e63c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e644:	693a      	ldr	r2, [r7, #16]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	429a      	cmp	r2, r3
 800e64a:	d203      	bcs.n	800e654 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e64c:	4a2e      	ldr	r2, [pc, #184]	; (800e708 <xTaskIncrementTick+0x15c>)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e652:	e02f      	b.n	800e6b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	3304      	adds	r3, #4
 800e658:	4618      	mov	r0, r3
 800e65a:	f7fe ff1b 	bl	800d494 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e662:	2b00      	cmp	r3, #0
 800e664:	d004      	beq.n	800e670 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	3318      	adds	r3, #24
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7fe ff12 	bl	800d494 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e674:	4b25      	ldr	r3, [pc, #148]	; (800e70c <xTaskIncrementTick+0x160>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	429a      	cmp	r2, r3
 800e67a:	d903      	bls.n	800e684 <xTaskIncrementTick+0xd8>
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e680:	4a22      	ldr	r2, [pc, #136]	; (800e70c <xTaskIncrementTick+0x160>)
 800e682:	6013      	str	r3, [r2, #0]
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e688:	4613      	mov	r3, r2
 800e68a:	009b      	lsls	r3, r3, #2
 800e68c:	4413      	add	r3, r2
 800e68e:	009b      	lsls	r3, r3, #2
 800e690:	4a1f      	ldr	r2, [pc, #124]	; (800e710 <xTaskIncrementTick+0x164>)
 800e692:	441a      	add	r2, r3
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	3304      	adds	r3, #4
 800e698:	4619      	mov	r1, r3
 800e69a:	4610      	mov	r0, r2
 800e69c:	f7fe fe9d 	bl	800d3da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6a4:	4b1b      	ldr	r3, [pc, #108]	; (800e714 <xTaskIncrementTick+0x168>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d3b8      	bcc.n	800e620 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6b2:	e7b5      	b.n	800e620 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e6b4:	4b17      	ldr	r3, [pc, #92]	; (800e714 <xTaskIncrementTick+0x168>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ba:	4915      	ldr	r1, [pc, #84]	; (800e710 <xTaskIncrementTick+0x164>)
 800e6bc:	4613      	mov	r3, r2
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	4413      	add	r3, r2
 800e6c2:	009b      	lsls	r3, r3, #2
 800e6c4:	440b      	add	r3, r1
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d901      	bls.n	800e6d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e6d0:	4b11      	ldr	r3, [pc, #68]	; (800e718 <xTaskIncrementTick+0x16c>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d007      	beq.n	800e6e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	617b      	str	r3, [r7, #20]
 800e6dc:	e004      	b.n	800e6e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e6de:	4b0f      	ldr	r3, [pc, #60]	; (800e71c <xTaskIncrementTick+0x170>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	4a0d      	ldr	r2, [pc, #52]	; (800e71c <xTaskIncrementTick+0x170>)
 800e6e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e6e8:	697b      	ldr	r3, [r7, #20]
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3718      	adds	r7, #24
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	20002660 	.word	0x20002660
 800e6f8:	2000263c 	.word	0x2000263c
 800e6fc:	200025f0 	.word	0x200025f0
 800e700:	200025f4 	.word	0x200025f4
 800e704:	20002650 	.word	0x20002650
 800e708:	20002658 	.word	0x20002658
 800e70c:	20002640 	.word	0x20002640
 800e710:	20002168 	.word	0x20002168
 800e714:	20002164 	.word	0x20002164
 800e718:	2000264c 	.word	0x2000264c
 800e71c:	20002648 	.word	0x20002648

0800e720 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e720:	b480      	push	{r7}
 800e722:	b085      	sub	sp, #20
 800e724:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e726:	4b28      	ldr	r3, [pc, #160]	; (800e7c8 <vTaskSwitchContext+0xa8>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d003      	beq.n	800e736 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e72e:	4b27      	ldr	r3, [pc, #156]	; (800e7cc <vTaskSwitchContext+0xac>)
 800e730:	2201      	movs	r2, #1
 800e732:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e734:	e041      	b.n	800e7ba <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e736:	4b25      	ldr	r3, [pc, #148]	; (800e7cc <vTaskSwitchContext+0xac>)
 800e738:	2200      	movs	r2, #0
 800e73a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e73c:	4b24      	ldr	r3, [pc, #144]	; (800e7d0 <vTaskSwitchContext+0xb0>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	60fb      	str	r3, [r7, #12]
 800e742:	e010      	b.n	800e766 <vTaskSwitchContext+0x46>
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d10a      	bne.n	800e760 <vTaskSwitchContext+0x40>
	__asm volatile
 800e74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e74e:	f383 8811 	msr	BASEPRI, r3
 800e752:	f3bf 8f6f 	isb	sy
 800e756:	f3bf 8f4f 	dsb	sy
 800e75a:	607b      	str	r3, [r7, #4]
}
 800e75c:	bf00      	nop
 800e75e:	e7fe      	b.n	800e75e <vTaskSwitchContext+0x3e>
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	3b01      	subs	r3, #1
 800e764:	60fb      	str	r3, [r7, #12]
 800e766:	491b      	ldr	r1, [pc, #108]	; (800e7d4 <vTaskSwitchContext+0xb4>)
 800e768:	68fa      	ldr	r2, [r7, #12]
 800e76a:	4613      	mov	r3, r2
 800e76c:	009b      	lsls	r3, r3, #2
 800e76e:	4413      	add	r3, r2
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	440b      	add	r3, r1
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d0e4      	beq.n	800e744 <vTaskSwitchContext+0x24>
 800e77a:	68fa      	ldr	r2, [r7, #12]
 800e77c:	4613      	mov	r3, r2
 800e77e:	009b      	lsls	r3, r3, #2
 800e780:	4413      	add	r3, r2
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	4a13      	ldr	r2, [pc, #76]	; (800e7d4 <vTaskSwitchContext+0xb4>)
 800e786:	4413      	add	r3, r2
 800e788:	60bb      	str	r3, [r7, #8]
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	685b      	ldr	r3, [r3, #4]
 800e78e:	685a      	ldr	r2, [r3, #4]
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	605a      	str	r2, [r3, #4]
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	685a      	ldr	r2, [r3, #4]
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	3308      	adds	r3, #8
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d104      	bne.n	800e7aa <vTaskSwitchContext+0x8a>
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	685a      	ldr	r2, [r3, #4]
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	605a      	str	r2, [r3, #4]
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	4a09      	ldr	r2, [pc, #36]	; (800e7d8 <vTaskSwitchContext+0xb8>)
 800e7b2:	6013      	str	r3, [r2, #0]
 800e7b4:	4a06      	ldr	r2, [pc, #24]	; (800e7d0 <vTaskSwitchContext+0xb0>)
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	6013      	str	r3, [r2, #0]
}
 800e7ba:	bf00      	nop
 800e7bc:	3714      	adds	r7, #20
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c4:	4770      	bx	lr
 800e7c6:	bf00      	nop
 800e7c8:	20002660 	.word	0x20002660
 800e7cc:	2000264c 	.word	0x2000264c
 800e7d0:	20002640 	.word	0x20002640
 800e7d4:	20002168 	.word	0x20002168
 800e7d8:	20002164 	.word	0x20002164

0800e7dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d10a      	bne.n	800e802 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f0:	f383 8811 	msr	BASEPRI, r3
 800e7f4:	f3bf 8f6f 	isb	sy
 800e7f8:	f3bf 8f4f 	dsb	sy
 800e7fc:	60fb      	str	r3, [r7, #12]
}
 800e7fe:	bf00      	nop
 800e800:	e7fe      	b.n	800e800 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e802:	4b07      	ldr	r3, [pc, #28]	; (800e820 <vTaskPlaceOnEventList+0x44>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	3318      	adds	r3, #24
 800e808:	4619      	mov	r1, r3
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f7fe fe09 	bl	800d422 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e810:	2101      	movs	r1, #1
 800e812:	6838      	ldr	r0, [r7, #0]
 800e814:	f000 fa7c 	bl	800ed10 <prvAddCurrentTaskToDelayedList>
}
 800e818:	bf00      	nop
 800e81a:	3710      	adds	r7, #16
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	20002164 	.word	0x20002164

0800e824 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e824:	b580      	push	{r7, lr}
 800e826:	b086      	sub	sp, #24
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d10a      	bne.n	800e84c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e83a:	f383 8811 	msr	BASEPRI, r3
 800e83e:	f3bf 8f6f 	isb	sy
 800e842:	f3bf 8f4f 	dsb	sy
 800e846:	617b      	str	r3, [r7, #20]
}
 800e848:	bf00      	nop
 800e84a:	e7fe      	b.n	800e84a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e84c:	4b0a      	ldr	r3, [pc, #40]	; (800e878 <vTaskPlaceOnEventListRestricted+0x54>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	3318      	adds	r3, #24
 800e852:	4619      	mov	r1, r3
 800e854:	68f8      	ldr	r0, [r7, #12]
 800e856:	f7fe fdc0 	bl	800d3da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d002      	beq.n	800e866 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e864:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e866:	6879      	ldr	r1, [r7, #4]
 800e868:	68b8      	ldr	r0, [r7, #8]
 800e86a:	f000 fa51 	bl	800ed10 <prvAddCurrentTaskToDelayedList>
	}
 800e86e:	bf00      	nop
 800e870:	3718      	adds	r7, #24
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop
 800e878:	20002164 	.word	0x20002164

0800e87c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b086      	sub	sp, #24
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	68db      	ldr	r3, [r3, #12]
 800e888:	68db      	ldr	r3, [r3, #12]
 800e88a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e88c:	693b      	ldr	r3, [r7, #16]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d10a      	bne.n	800e8a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e896:	f383 8811 	msr	BASEPRI, r3
 800e89a:	f3bf 8f6f 	isb	sy
 800e89e:	f3bf 8f4f 	dsb	sy
 800e8a2:	60fb      	str	r3, [r7, #12]
}
 800e8a4:	bf00      	nop
 800e8a6:	e7fe      	b.n	800e8a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	3318      	adds	r3, #24
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7fe fdf1 	bl	800d494 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8b2:	4b1e      	ldr	r3, [pc, #120]	; (800e92c <xTaskRemoveFromEventList+0xb0>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d11d      	bne.n	800e8f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	3304      	adds	r3, #4
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7fe fde8 	bl	800d494 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8c8:	4b19      	ldr	r3, [pc, #100]	; (800e930 <xTaskRemoveFromEventList+0xb4>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d903      	bls.n	800e8d8 <xTaskRemoveFromEventList+0x5c>
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8d4:	4a16      	ldr	r2, [pc, #88]	; (800e930 <xTaskRemoveFromEventList+0xb4>)
 800e8d6:	6013      	str	r3, [r2, #0]
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8dc:	4613      	mov	r3, r2
 800e8de:	009b      	lsls	r3, r3, #2
 800e8e0:	4413      	add	r3, r2
 800e8e2:	009b      	lsls	r3, r3, #2
 800e8e4:	4a13      	ldr	r2, [pc, #76]	; (800e934 <xTaskRemoveFromEventList+0xb8>)
 800e8e6:	441a      	add	r2, r3
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	3304      	adds	r3, #4
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	4610      	mov	r0, r2
 800e8f0:	f7fe fd73 	bl	800d3da <vListInsertEnd>
 800e8f4:	e005      	b.n	800e902 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	3318      	adds	r3, #24
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	480e      	ldr	r0, [pc, #56]	; (800e938 <xTaskRemoveFromEventList+0xbc>)
 800e8fe:	f7fe fd6c 	bl	800d3da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e906:	4b0d      	ldr	r3, [pc, #52]	; (800e93c <xTaskRemoveFromEventList+0xc0>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d905      	bls.n	800e91c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e910:	2301      	movs	r3, #1
 800e912:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e914:	4b0a      	ldr	r3, [pc, #40]	; (800e940 <xTaskRemoveFromEventList+0xc4>)
 800e916:	2201      	movs	r2, #1
 800e918:	601a      	str	r2, [r3, #0]
 800e91a:	e001      	b.n	800e920 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e91c:	2300      	movs	r3, #0
 800e91e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e920:	697b      	ldr	r3, [r7, #20]
}
 800e922:	4618      	mov	r0, r3
 800e924:	3718      	adds	r7, #24
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	20002660 	.word	0x20002660
 800e930:	20002640 	.word	0x20002640
 800e934:	20002168 	.word	0x20002168
 800e938:	200025f8 	.word	0x200025f8
 800e93c:	20002164 	.word	0x20002164
 800e940:	2000264c 	.word	0x2000264c

0800e944 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e94c:	4b06      	ldr	r3, [pc, #24]	; (800e968 <vTaskInternalSetTimeOutState+0x24>)
 800e94e:	681a      	ldr	r2, [r3, #0]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e954:	4b05      	ldr	r3, [pc, #20]	; (800e96c <vTaskInternalSetTimeOutState+0x28>)
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	605a      	str	r2, [r3, #4]
}
 800e95c:	bf00      	nop
 800e95e:	370c      	adds	r7, #12
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr
 800e968:	20002650 	.word	0x20002650
 800e96c:	2000263c 	.word	0x2000263c

0800e970 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b088      	sub	sp, #32
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d10a      	bne.n	800e996 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e984:	f383 8811 	msr	BASEPRI, r3
 800e988:	f3bf 8f6f 	isb	sy
 800e98c:	f3bf 8f4f 	dsb	sy
 800e990:	613b      	str	r3, [r7, #16]
}
 800e992:	bf00      	nop
 800e994:	e7fe      	b.n	800e994 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d10a      	bne.n	800e9b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a0:	f383 8811 	msr	BASEPRI, r3
 800e9a4:	f3bf 8f6f 	isb	sy
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	60fb      	str	r3, [r7, #12]
}
 800e9ae:	bf00      	nop
 800e9b0:	e7fe      	b.n	800e9b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e9b2:	f000 fe7f 	bl	800f6b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e9b6:	4b1d      	ldr	r3, [pc, #116]	; (800ea2c <xTaskCheckForTimeOut+0xbc>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	69ba      	ldr	r2, [r7, #24]
 800e9c2:	1ad3      	subs	r3, r2, r3
 800e9c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9ce:	d102      	bne.n	800e9d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	61fb      	str	r3, [r7, #28]
 800e9d4:	e023      	b.n	800ea1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	4b15      	ldr	r3, [pc, #84]	; (800ea30 <xTaskCheckForTimeOut+0xc0>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d007      	beq.n	800e9f2 <xTaskCheckForTimeOut+0x82>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	69ba      	ldr	r2, [r7, #24]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d302      	bcc.n	800e9f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	61fb      	str	r3, [r7, #28]
 800e9f0:	e015      	b.n	800ea1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	697a      	ldr	r2, [r7, #20]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d20b      	bcs.n	800ea14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	681a      	ldr	r2, [r3, #0]
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	1ad2      	subs	r2, r2, r3
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f7ff ff9b 	bl	800e944 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	61fb      	str	r3, [r7, #28]
 800ea12:	e004      	b.n	800ea1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	2200      	movs	r2, #0
 800ea18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea1e:	f000 fe79 	bl	800f714 <vPortExitCritical>

	return xReturn;
 800ea22:	69fb      	ldr	r3, [r7, #28]
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3720      	adds	r7, #32
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	2000263c 	.word	0x2000263c
 800ea30:	20002650 	.word	0x20002650

0800ea34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ea34:	b480      	push	{r7}
 800ea36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ea38:	4b03      	ldr	r3, [pc, #12]	; (800ea48 <vTaskMissedYield+0x14>)
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	601a      	str	r2, [r3, #0]
}
 800ea3e:	bf00      	nop
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr
 800ea48:	2000264c 	.word	0x2000264c

0800ea4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b082      	sub	sp, #8
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ea54:	f000 f852 	bl	800eafc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ea58:	4b06      	ldr	r3, [pc, #24]	; (800ea74 <prvIdleTask+0x28>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d9f9      	bls.n	800ea54 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ea60:	4b05      	ldr	r3, [pc, #20]	; (800ea78 <prvIdleTask+0x2c>)
 800ea62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea66:	601a      	str	r2, [r3, #0]
 800ea68:	f3bf 8f4f 	dsb	sy
 800ea6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ea70:	e7f0      	b.n	800ea54 <prvIdleTask+0x8>
 800ea72:	bf00      	nop
 800ea74:	20002168 	.word	0x20002168
 800ea78:	e000ed04 	.word	0xe000ed04

0800ea7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea82:	2300      	movs	r3, #0
 800ea84:	607b      	str	r3, [r7, #4]
 800ea86:	e00c      	b.n	800eaa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	4413      	add	r3, r2
 800ea90:	009b      	lsls	r3, r3, #2
 800ea92:	4a12      	ldr	r2, [pc, #72]	; (800eadc <prvInitialiseTaskLists+0x60>)
 800ea94:	4413      	add	r3, r2
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7fe fc72 	bl	800d380 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	607b      	str	r3, [r7, #4]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2b37      	cmp	r3, #55	; 0x37
 800eaa6:	d9ef      	bls.n	800ea88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eaa8:	480d      	ldr	r0, [pc, #52]	; (800eae0 <prvInitialiseTaskLists+0x64>)
 800eaaa:	f7fe fc69 	bl	800d380 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eaae:	480d      	ldr	r0, [pc, #52]	; (800eae4 <prvInitialiseTaskLists+0x68>)
 800eab0:	f7fe fc66 	bl	800d380 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eab4:	480c      	ldr	r0, [pc, #48]	; (800eae8 <prvInitialiseTaskLists+0x6c>)
 800eab6:	f7fe fc63 	bl	800d380 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eaba:	480c      	ldr	r0, [pc, #48]	; (800eaec <prvInitialiseTaskLists+0x70>)
 800eabc:	f7fe fc60 	bl	800d380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eac0:	480b      	ldr	r0, [pc, #44]	; (800eaf0 <prvInitialiseTaskLists+0x74>)
 800eac2:	f7fe fc5d 	bl	800d380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eac6:	4b0b      	ldr	r3, [pc, #44]	; (800eaf4 <prvInitialiseTaskLists+0x78>)
 800eac8:	4a05      	ldr	r2, [pc, #20]	; (800eae0 <prvInitialiseTaskLists+0x64>)
 800eaca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eacc:	4b0a      	ldr	r3, [pc, #40]	; (800eaf8 <prvInitialiseTaskLists+0x7c>)
 800eace:	4a05      	ldr	r2, [pc, #20]	; (800eae4 <prvInitialiseTaskLists+0x68>)
 800ead0:	601a      	str	r2, [r3, #0]
}
 800ead2:	bf00      	nop
 800ead4:	3708      	adds	r7, #8
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
 800eada:	bf00      	nop
 800eadc:	20002168 	.word	0x20002168
 800eae0:	200025c8 	.word	0x200025c8
 800eae4:	200025dc 	.word	0x200025dc
 800eae8:	200025f8 	.word	0x200025f8
 800eaec:	2000260c 	.word	0x2000260c
 800eaf0:	20002624 	.word	0x20002624
 800eaf4:	200025f0 	.word	0x200025f0
 800eaf8:	200025f4 	.word	0x200025f4

0800eafc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb02:	e019      	b.n	800eb38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eb04:	f000 fdd6 	bl	800f6b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb08:	4b10      	ldr	r3, [pc, #64]	; (800eb4c <prvCheckTasksWaitingTermination+0x50>)
 800eb0a:	68db      	ldr	r3, [r3, #12]
 800eb0c:	68db      	ldr	r3, [r3, #12]
 800eb0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	3304      	adds	r3, #4
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7fe fcbd 	bl	800d494 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb1a:	4b0d      	ldr	r3, [pc, #52]	; (800eb50 <prvCheckTasksWaitingTermination+0x54>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	3b01      	subs	r3, #1
 800eb20:	4a0b      	ldr	r2, [pc, #44]	; (800eb50 <prvCheckTasksWaitingTermination+0x54>)
 800eb22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb24:	4b0b      	ldr	r3, [pc, #44]	; (800eb54 <prvCheckTasksWaitingTermination+0x58>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	3b01      	subs	r3, #1
 800eb2a:	4a0a      	ldr	r2, [pc, #40]	; (800eb54 <prvCheckTasksWaitingTermination+0x58>)
 800eb2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eb2e:	f000 fdf1 	bl	800f714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f000 f810 	bl	800eb58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb38:	4b06      	ldr	r3, [pc, #24]	; (800eb54 <prvCheckTasksWaitingTermination+0x58>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d1e1      	bne.n	800eb04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eb40:	bf00      	nop
 800eb42:	bf00      	nop
 800eb44:	3708      	adds	r7, #8
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	2000260c 	.word	0x2000260c
 800eb50:	20002638 	.word	0x20002638
 800eb54:	20002620 	.word	0x20002620

0800eb58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b084      	sub	sp, #16
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d108      	bne.n	800eb7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f000 ff8e 	bl	800fa90 <vPortFree>
				vPortFree( pxTCB );
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f000 ff8b 	bl	800fa90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eb7a:	e018      	b.n	800ebae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	d103      	bne.n	800eb8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 ff82 	bl	800fa90 <vPortFree>
	}
 800eb8c:	e00f      	b.n	800ebae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800eb94:	2b02      	cmp	r3, #2
 800eb96:	d00a      	beq.n	800ebae <prvDeleteTCB+0x56>
	__asm volatile
 800eb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb9c:	f383 8811 	msr	BASEPRI, r3
 800eba0:	f3bf 8f6f 	isb	sy
 800eba4:	f3bf 8f4f 	dsb	sy
 800eba8:	60fb      	str	r3, [r7, #12]
}
 800ebaa:	bf00      	nop
 800ebac:	e7fe      	b.n	800ebac <prvDeleteTCB+0x54>
	}
 800ebae:	bf00      	nop
 800ebb0:	3710      	adds	r7, #16
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
	...

0800ebb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b083      	sub	sp, #12
 800ebbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebbe:	4b0c      	ldr	r3, [pc, #48]	; (800ebf0 <prvResetNextTaskUnblockTime+0x38>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d104      	bne.n	800ebd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ebc8:	4b0a      	ldr	r3, [pc, #40]	; (800ebf4 <prvResetNextTaskUnblockTime+0x3c>)
 800ebca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ebd0:	e008      	b.n	800ebe4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebd2:	4b07      	ldr	r3, [pc, #28]	; (800ebf0 <prvResetNextTaskUnblockTime+0x38>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	68db      	ldr	r3, [r3, #12]
 800ebd8:	68db      	ldr	r3, [r3, #12]
 800ebda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	4a04      	ldr	r2, [pc, #16]	; (800ebf4 <prvResetNextTaskUnblockTime+0x3c>)
 800ebe2:	6013      	str	r3, [r2, #0]
}
 800ebe4:	bf00      	nop
 800ebe6:	370c      	adds	r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr
 800ebf0:	200025f0 	.word	0x200025f0
 800ebf4:	20002658 	.word	0x20002658

0800ebf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b083      	sub	sp, #12
 800ebfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ebfe:	4b0b      	ldr	r3, [pc, #44]	; (800ec2c <xTaskGetSchedulerState+0x34>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d102      	bne.n	800ec0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec06:	2301      	movs	r3, #1
 800ec08:	607b      	str	r3, [r7, #4]
 800ec0a:	e008      	b.n	800ec1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec0c:	4b08      	ldr	r3, [pc, #32]	; (800ec30 <xTaskGetSchedulerState+0x38>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d102      	bne.n	800ec1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec14:	2302      	movs	r3, #2
 800ec16:	607b      	str	r3, [r7, #4]
 800ec18:	e001      	b.n	800ec1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec1e:	687b      	ldr	r3, [r7, #4]
	}
 800ec20:	4618      	mov	r0, r3
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr
 800ec2c:	20002644 	.word	0x20002644
 800ec30:	20002660 	.word	0x20002660

0800ec34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b086      	sub	sp, #24
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ec40:	2300      	movs	r3, #0
 800ec42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d056      	beq.n	800ecf8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ec4a:	4b2e      	ldr	r3, [pc, #184]	; (800ed04 <xTaskPriorityDisinherit+0xd0>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	693a      	ldr	r2, [r7, #16]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d00a      	beq.n	800ec6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ec54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec58:	f383 8811 	msr	BASEPRI, r3
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	f3bf 8f4f 	dsb	sy
 800ec64:	60fb      	str	r3, [r7, #12]
}
 800ec66:	bf00      	nop
 800ec68:	e7fe      	b.n	800ec68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d10a      	bne.n	800ec88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ec72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec76:	f383 8811 	msr	BASEPRI, r3
 800ec7a:	f3bf 8f6f 	isb	sy
 800ec7e:	f3bf 8f4f 	dsb	sy
 800ec82:	60bb      	str	r3, [r7, #8]
}
 800ec84:	bf00      	nop
 800ec86:	e7fe      	b.n	800ec86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec8c:	1e5a      	subs	r2, r3, #1
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d02c      	beq.n	800ecf8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d128      	bne.n	800ecf8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	3304      	adds	r3, #4
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fe fbf2 	bl	800d494 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecbc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecc8:	4b0f      	ldr	r3, [pc, #60]	; (800ed08 <xTaskPriorityDisinherit+0xd4>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d903      	bls.n	800ecd8 <xTaskPriorityDisinherit+0xa4>
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd4:	4a0c      	ldr	r2, [pc, #48]	; (800ed08 <xTaskPriorityDisinherit+0xd4>)
 800ecd6:	6013      	str	r3, [r2, #0]
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecdc:	4613      	mov	r3, r2
 800ecde:	009b      	lsls	r3, r3, #2
 800ece0:	4413      	add	r3, r2
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	4a09      	ldr	r2, [pc, #36]	; (800ed0c <xTaskPriorityDisinherit+0xd8>)
 800ece6:	441a      	add	r2, r3
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	3304      	adds	r3, #4
 800ecec:	4619      	mov	r1, r3
 800ecee:	4610      	mov	r0, r2
 800ecf0:	f7fe fb73 	bl	800d3da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ecf8:	697b      	ldr	r3, [r7, #20]
	}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3718      	adds	r7, #24
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	20002164 	.word	0x20002164
 800ed08:	20002640 	.word	0x20002640
 800ed0c:	20002168 	.word	0x20002168

0800ed10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b084      	sub	sp, #16
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ed1a:	4b21      	ldr	r3, [pc, #132]	; (800eda0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed20:	4b20      	ldr	r3, [pc, #128]	; (800eda4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	3304      	adds	r3, #4
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7fe fbb4 	bl	800d494 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed32:	d10a      	bne.n	800ed4a <prvAddCurrentTaskToDelayedList+0x3a>
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d007      	beq.n	800ed4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed3a:	4b1a      	ldr	r3, [pc, #104]	; (800eda4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	3304      	adds	r3, #4
 800ed40:	4619      	mov	r1, r3
 800ed42:	4819      	ldr	r0, [pc, #100]	; (800eda8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ed44:	f7fe fb49 	bl	800d3da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ed48:	e026      	b.n	800ed98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	4413      	add	r3, r2
 800ed50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ed52:	4b14      	ldr	r3, [pc, #80]	; (800eda4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	68ba      	ldr	r2, [r7, #8]
 800ed58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ed5a:	68ba      	ldr	r2, [r7, #8]
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d209      	bcs.n	800ed76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed62:	4b12      	ldr	r3, [pc, #72]	; (800edac <prvAddCurrentTaskToDelayedList+0x9c>)
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	4b0f      	ldr	r3, [pc, #60]	; (800eda4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	3304      	adds	r3, #4
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	4610      	mov	r0, r2
 800ed70:	f7fe fb57 	bl	800d422 <vListInsert>
}
 800ed74:	e010      	b.n	800ed98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed76:	4b0e      	ldr	r3, [pc, #56]	; (800edb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ed78:	681a      	ldr	r2, [r3, #0]
 800ed7a:	4b0a      	ldr	r3, [pc, #40]	; (800eda4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	3304      	adds	r3, #4
 800ed80:	4619      	mov	r1, r3
 800ed82:	4610      	mov	r0, r2
 800ed84:	f7fe fb4d 	bl	800d422 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ed88:	4b0a      	ldr	r3, [pc, #40]	; (800edb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	68ba      	ldr	r2, [r7, #8]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d202      	bcs.n	800ed98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ed92:	4a08      	ldr	r2, [pc, #32]	; (800edb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	6013      	str	r3, [r2, #0]
}
 800ed98:	bf00      	nop
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	2000263c 	.word	0x2000263c
 800eda4:	20002164 	.word	0x20002164
 800eda8:	20002624 	.word	0x20002624
 800edac:	200025f4 	.word	0x200025f4
 800edb0:	200025f0 	.word	0x200025f0
 800edb4:	20002658 	.word	0x20002658

0800edb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b08a      	sub	sp, #40	; 0x28
 800edbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800edbe:	2300      	movs	r3, #0
 800edc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800edc2:	f000 fb07 	bl	800f3d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800edc6:	4b1c      	ldr	r3, [pc, #112]	; (800ee38 <xTimerCreateTimerTask+0x80>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d021      	beq.n	800ee12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800edce:	2300      	movs	r3, #0
 800edd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800edd2:	2300      	movs	r3, #0
 800edd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800edd6:	1d3a      	adds	r2, r7, #4
 800edd8:	f107 0108 	add.w	r1, r7, #8
 800eddc:	f107 030c 	add.w	r3, r7, #12
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7fe fab3 	bl	800d34c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ede6:	6879      	ldr	r1, [r7, #4]
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	9202      	str	r2, [sp, #8]
 800edee:	9301      	str	r3, [sp, #4]
 800edf0:	2302      	movs	r3, #2
 800edf2:	9300      	str	r3, [sp, #0]
 800edf4:	2300      	movs	r3, #0
 800edf6:	460a      	mov	r2, r1
 800edf8:	4910      	ldr	r1, [pc, #64]	; (800ee3c <xTimerCreateTimerTask+0x84>)
 800edfa:	4811      	ldr	r0, [pc, #68]	; (800ee40 <xTimerCreateTimerTask+0x88>)
 800edfc:	f7ff f860 	bl	800dec0 <xTaskCreateStatic>
 800ee00:	4603      	mov	r3, r0
 800ee02:	4a10      	ldr	r2, [pc, #64]	; (800ee44 <xTimerCreateTimerTask+0x8c>)
 800ee04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ee06:	4b0f      	ldr	r3, [pc, #60]	; (800ee44 <xTimerCreateTimerTask+0x8c>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d001      	beq.n	800ee12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ee0e:	2301      	movs	r3, #1
 800ee10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d10a      	bne.n	800ee2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ee18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1c:	f383 8811 	msr	BASEPRI, r3
 800ee20:	f3bf 8f6f 	isb	sy
 800ee24:	f3bf 8f4f 	dsb	sy
 800ee28:	613b      	str	r3, [r7, #16]
}
 800ee2a:	bf00      	nop
 800ee2c:	e7fe      	b.n	800ee2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ee2e:	697b      	ldr	r3, [r7, #20]
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3718      	adds	r7, #24
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	20002694 	.word	0x20002694
 800ee3c:	080146ec 	.word	0x080146ec
 800ee40:	0800ef7d 	.word	0x0800ef7d
 800ee44:	20002698 	.word	0x20002698

0800ee48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b08a      	sub	sp, #40	; 0x28
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	60f8      	str	r0, [r7, #12]
 800ee50:	60b9      	str	r1, [r7, #8]
 800ee52:	607a      	str	r2, [r7, #4]
 800ee54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ee56:	2300      	movs	r3, #0
 800ee58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d10a      	bne.n	800ee76 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ee60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee64:	f383 8811 	msr	BASEPRI, r3
 800ee68:	f3bf 8f6f 	isb	sy
 800ee6c:	f3bf 8f4f 	dsb	sy
 800ee70:	623b      	str	r3, [r7, #32]
}
 800ee72:	bf00      	nop
 800ee74:	e7fe      	b.n	800ee74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ee76:	4b1a      	ldr	r3, [pc, #104]	; (800eee0 <xTimerGenericCommand+0x98>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d02a      	beq.n	800eed4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	2b05      	cmp	r3, #5
 800ee8e:	dc18      	bgt.n	800eec2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ee90:	f7ff feb2 	bl	800ebf8 <xTaskGetSchedulerState>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b02      	cmp	r3, #2
 800ee98:	d109      	bne.n	800eeae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ee9a:	4b11      	ldr	r3, [pc, #68]	; (800eee0 <xTimerGenericCommand+0x98>)
 800ee9c:	6818      	ldr	r0, [r3, #0]
 800ee9e:	f107 0110 	add.w	r1, r7, #16
 800eea2:	2300      	movs	r3, #0
 800eea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eea6:	f7fe fc23 	bl	800d6f0 <xQueueGenericSend>
 800eeaa:	6278      	str	r0, [r7, #36]	; 0x24
 800eeac:	e012      	b.n	800eed4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eeae:	4b0c      	ldr	r3, [pc, #48]	; (800eee0 <xTimerGenericCommand+0x98>)
 800eeb0:	6818      	ldr	r0, [r3, #0]
 800eeb2:	f107 0110 	add.w	r1, r7, #16
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f7fe fc19 	bl	800d6f0 <xQueueGenericSend>
 800eebe:	6278      	str	r0, [r7, #36]	; 0x24
 800eec0:	e008      	b.n	800eed4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eec2:	4b07      	ldr	r3, [pc, #28]	; (800eee0 <xTimerGenericCommand+0x98>)
 800eec4:	6818      	ldr	r0, [r3, #0]
 800eec6:	f107 0110 	add.w	r1, r7, #16
 800eeca:	2300      	movs	r3, #0
 800eecc:	683a      	ldr	r2, [r7, #0]
 800eece:	f7fe fd0d 	bl	800d8ec <xQueueGenericSendFromISR>
 800eed2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3728      	adds	r7, #40	; 0x28
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
 800eede:	bf00      	nop
 800eee0:	20002694 	.word	0x20002694

0800eee4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b088      	sub	sp, #32
 800eee8:	af02      	add	r7, sp, #8
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eeee:	4b22      	ldr	r3, [pc, #136]	; (800ef78 <prvProcessExpiredTimer+0x94>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	68db      	ldr	r3, [r3, #12]
 800eef6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	3304      	adds	r3, #4
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7fe fac9 	bl	800d494 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef08:	f003 0304 	and.w	r3, r3, #4
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d022      	beq.n	800ef56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	699a      	ldr	r2, [r3, #24]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	18d1      	adds	r1, r2, r3
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	683a      	ldr	r2, [r7, #0]
 800ef1c:	6978      	ldr	r0, [r7, #20]
 800ef1e:	f000 f8d1 	bl	800f0c4 <prvInsertTimerInActiveList>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d01f      	beq.n	800ef68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef28:	2300      	movs	r3, #0
 800ef2a:	9300      	str	r3, [sp, #0]
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	687a      	ldr	r2, [r7, #4]
 800ef30:	2100      	movs	r1, #0
 800ef32:	6978      	ldr	r0, [r7, #20]
 800ef34:	f7ff ff88 	bl	800ee48 <xTimerGenericCommand>
 800ef38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d113      	bne.n	800ef68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ef40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef44:	f383 8811 	msr	BASEPRI, r3
 800ef48:	f3bf 8f6f 	isb	sy
 800ef4c:	f3bf 8f4f 	dsb	sy
 800ef50:	60fb      	str	r3, [r7, #12]
}
 800ef52:	bf00      	nop
 800ef54:	e7fe      	b.n	800ef54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef5c:	f023 0301 	bic.w	r3, r3, #1
 800ef60:	b2da      	uxtb	r2, r3
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	6a1b      	ldr	r3, [r3, #32]
 800ef6c:	6978      	ldr	r0, [r7, #20]
 800ef6e:	4798      	blx	r3
}
 800ef70:	bf00      	nop
 800ef72:	3718      	adds	r7, #24
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	2000268c 	.word	0x2000268c

0800ef7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b084      	sub	sp, #16
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ef84:	f107 0308 	add.w	r3, r7, #8
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f000 f857 	bl	800f03c <prvGetNextExpireTime>
 800ef8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	4619      	mov	r1, r3
 800ef94:	68f8      	ldr	r0, [r7, #12]
 800ef96:	f000 f803 	bl	800efa0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ef9a:	f000 f8d5 	bl	800f148 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ef9e:	e7f1      	b.n	800ef84 <prvTimerTask+0x8>

0800efa0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800efaa:	f7ff fa43 	bl	800e434 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800efae:	f107 0308 	add.w	r3, r7, #8
 800efb2:	4618      	mov	r0, r3
 800efb4:	f000 f866 	bl	800f084 <prvSampleTimeNow>
 800efb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d130      	bne.n	800f022 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d10a      	bne.n	800efdc <prvProcessTimerOrBlockTask+0x3c>
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d806      	bhi.n	800efdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800efce:	f7ff fa3f 	bl	800e450 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800efd2:	68f9      	ldr	r1, [r7, #12]
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f7ff ff85 	bl	800eee4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800efda:	e024      	b.n	800f026 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d008      	beq.n	800eff4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800efe2:	4b13      	ldr	r3, [pc, #76]	; (800f030 <prvProcessTimerOrBlockTask+0x90>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d101      	bne.n	800eff0 <prvProcessTimerOrBlockTask+0x50>
 800efec:	2301      	movs	r3, #1
 800efee:	e000      	b.n	800eff2 <prvProcessTimerOrBlockTask+0x52>
 800eff0:	2300      	movs	r3, #0
 800eff2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eff4:	4b0f      	ldr	r3, [pc, #60]	; (800f034 <prvProcessTimerOrBlockTask+0x94>)
 800eff6:	6818      	ldr	r0, [r3, #0]
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	1ad3      	subs	r3, r2, r3
 800effe:	683a      	ldr	r2, [r7, #0]
 800f000:	4619      	mov	r1, r3
 800f002:	f7fe ff29 	bl	800de58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f006:	f7ff fa23 	bl	800e450 <xTaskResumeAll>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d10a      	bne.n	800f026 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f010:	4b09      	ldr	r3, [pc, #36]	; (800f038 <prvProcessTimerOrBlockTask+0x98>)
 800f012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f016:	601a      	str	r2, [r3, #0]
 800f018:	f3bf 8f4f 	dsb	sy
 800f01c:	f3bf 8f6f 	isb	sy
}
 800f020:	e001      	b.n	800f026 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f022:	f7ff fa15 	bl	800e450 <xTaskResumeAll>
}
 800f026:	bf00      	nop
 800f028:	3710      	adds	r7, #16
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	20002690 	.word	0x20002690
 800f034:	20002694 	.word	0x20002694
 800f038:	e000ed04 	.word	0xe000ed04

0800f03c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f03c:	b480      	push	{r7}
 800f03e:	b085      	sub	sp, #20
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f044:	4b0e      	ldr	r3, [pc, #56]	; (800f080 <prvGetNextExpireTime+0x44>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d101      	bne.n	800f052 <prvGetNextExpireTime+0x16>
 800f04e:	2201      	movs	r2, #1
 800f050:	e000      	b.n	800f054 <prvGetNextExpireTime+0x18>
 800f052:	2200      	movs	r2, #0
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d105      	bne.n	800f06c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f060:	4b07      	ldr	r3, [pc, #28]	; (800f080 <prvGetNextExpireTime+0x44>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	68db      	ldr	r3, [r3, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	60fb      	str	r3, [r7, #12]
 800f06a:	e001      	b.n	800f070 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f06c:	2300      	movs	r3, #0
 800f06e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f070:	68fb      	ldr	r3, [r7, #12]
}
 800f072:	4618      	mov	r0, r3
 800f074:	3714      	adds	r7, #20
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr
 800f07e:	bf00      	nop
 800f080:	2000268c 	.word	0x2000268c

0800f084 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b084      	sub	sp, #16
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f08c:	f7ff fa7e 	bl	800e58c <xTaskGetTickCount>
 800f090:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f092:	4b0b      	ldr	r3, [pc, #44]	; (800f0c0 <prvSampleTimeNow+0x3c>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	68fa      	ldr	r2, [r7, #12]
 800f098:	429a      	cmp	r2, r3
 800f09a:	d205      	bcs.n	800f0a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f09c:	f000 f936 	bl	800f30c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	601a      	str	r2, [r3, #0]
 800f0a6:	e002      	b.n	800f0ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f0ae:	4a04      	ldr	r2, [pc, #16]	; (800f0c0 <prvSampleTimeNow+0x3c>)
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	2000269c 	.word	0x2000269c

0800f0c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b086      	sub	sp, #24
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	60f8      	str	r0, [r7, #12]
 800f0cc:	60b9      	str	r1, [r7, #8]
 800f0ce:	607a      	str	r2, [r7, #4]
 800f0d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	68ba      	ldr	r2, [r7, #8]
 800f0da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	68fa      	ldr	r2, [r7, #12]
 800f0e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f0e2:	68ba      	ldr	r2, [r7, #8]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d812      	bhi.n	800f110 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0ea:	687a      	ldr	r2, [r7, #4]
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	1ad2      	subs	r2, r2, r3
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	699b      	ldr	r3, [r3, #24]
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d302      	bcc.n	800f0fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	617b      	str	r3, [r7, #20]
 800f0fc:	e01b      	b.n	800f136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f0fe:	4b10      	ldr	r3, [pc, #64]	; (800f140 <prvInsertTimerInActiveList+0x7c>)
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	3304      	adds	r3, #4
 800f106:	4619      	mov	r1, r3
 800f108:	4610      	mov	r0, r2
 800f10a:	f7fe f98a 	bl	800d422 <vListInsert>
 800f10e:	e012      	b.n	800f136 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f110:	687a      	ldr	r2, [r7, #4]
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	429a      	cmp	r2, r3
 800f116:	d206      	bcs.n	800f126 <prvInsertTimerInActiveList+0x62>
 800f118:	68ba      	ldr	r2, [r7, #8]
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d302      	bcc.n	800f126 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f120:	2301      	movs	r3, #1
 800f122:	617b      	str	r3, [r7, #20]
 800f124:	e007      	b.n	800f136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f126:	4b07      	ldr	r3, [pc, #28]	; (800f144 <prvInsertTimerInActiveList+0x80>)
 800f128:	681a      	ldr	r2, [r3, #0]
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	3304      	adds	r3, #4
 800f12e:	4619      	mov	r1, r3
 800f130:	4610      	mov	r0, r2
 800f132:	f7fe f976 	bl	800d422 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f136:	697b      	ldr	r3, [r7, #20]
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3718      	adds	r7, #24
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	20002690 	.word	0x20002690
 800f144:	2000268c 	.word	0x2000268c

0800f148 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b08e      	sub	sp, #56	; 0x38
 800f14c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f14e:	e0ca      	b.n	800f2e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2b00      	cmp	r3, #0
 800f154:	da18      	bge.n	800f188 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f156:	1d3b      	adds	r3, r7, #4
 800f158:	3304      	adds	r3, #4
 800f15a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d10a      	bne.n	800f178 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f166:	f383 8811 	msr	BASEPRI, r3
 800f16a:	f3bf 8f6f 	isb	sy
 800f16e:	f3bf 8f4f 	dsb	sy
 800f172:	61fb      	str	r3, [r7, #28]
}
 800f174:	bf00      	nop
 800f176:	e7fe      	b.n	800f176 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f17e:	6850      	ldr	r0, [r2, #4]
 800f180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f182:	6892      	ldr	r2, [r2, #8]
 800f184:	4611      	mov	r1, r2
 800f186:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	f2c0 80aa 	blt.w	800f2e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f196:	695b      	ldr	r3, [r3, #20]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d004      	beq.n	800f1a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19e:	3304      	adds	r3, #4
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7fe f977 	bl	800d494 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1a6:	463b      	mov	r3, r7
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7ff ff6b 	bl	800f084 <prvSampleTimeNow>
 800f1ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2b09      	cmp	r3, #9
 800f1b4:	f200 8097 	bhi.w	800f2e6 <prvProcessReceivedCommands+0x19e>
 800f1b8:	a201      	add	r2, pc, #4	; (adr r2, 800f1c0 <prvProcessReceivedCommands+0x78>)
 800f1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1be:	bf00      	nop
 800f1c0:	0800f1e9 	.word	0x0800f1e9
 800f1c4:	0800f1e9 	.word	0x0800f1e9
 800f1c8:	0800f1e9 	.word	0x0800f1e9
 800f1cc:	0800f25d 	.word	0x0800f25d
 800f1d0:	0800f271 	.word	0x0800f271
 800f1d4:	0800f2bb 	.word	0x0800f2bb
 800f1d8:	0800f1e9 	.word	0x0800f1e9
 800f1dc:	0800f1e9 	.word	0x0800f1e9
 800f1e0:	0800f25d 	.word	0x0800f25d
 800f1e4:	0800f271 	.word	0x0800f271
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1ee:	f043 0301 	orr.w	r3, r3, #1
 800f1f2:	b2da      	uxtb	r2, r3
 800f1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f1fa:	68ba      	ldr	r2, [r7, #8]
 800f1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1fe:	699b      	ldr	r3, [r3, #24]
 800f200:	18d1      	adds	r1, r2, r3
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f208:	f7ff ff5c 	bl	800f0c4 <prvInsertTimerInActiveList>
 800f20c:	4603      	mov	r3, r0
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d069      	beq.n	800f2e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f214:	6a1b      	ldr	r3, [r3, #32]
 800f216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f218:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f220:	f003 0304 	and.w	r3, r3, #4
 800f224:	2b00      	cmp	r3, #0
 800f226:	d05e      	beq.n	800f2e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f228:	68ba      	ldr	r2, [r7, #8]
 800f22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f22c:	699b      	ldr	r3, [r3, #24]
 800f22e:	441a      	add	r2, r3
 800f230:	2300      	movs	r3, #0
 800f232:	9300      	str	r3, [sp, #0]
 800f234:	2300      	movs	r3, #0
 800f236:	2100      	movs	r1, #0
 800f238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f23a:	f7ff fe05 	bl	800ee48 <xTimerGenericCommand>
 800f23e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f240:	6a3b      	ldr	r3, [r7, #32]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d14f      	bne.n	800f2e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f24a:	f383 8811 	msr	BASEPRI, r3
 800f24e:	f3bf 8f6f 	isb	sy
 800f252:	f3bf 8f4f 	dsb	sy
 800f256:	61bb      	str	r3, [r7, #24]
}
 800f258:	bf00      	nop
 800f25a:	e7fe      	b.n	800f25a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f262:	f023 0301 	bic.w	r3, r3, #1
 800f266:	b2da      	uxtb	r2, r3
 800f268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f26e:	e03a      	b.n	800f2e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f276:	f043 0301 	orr.w	r3, r3, #1
 800f27a:	b2da      	uxtb	r2, r3
 800f27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f282:	68ba      	ldr	r2, [r7, #8]
 800f284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f286:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28a:	699b      	ldr	r3, [r3, #24]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d10a      	bne.n	800f2a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f294:	f383 8811 	msr	BASEPRI, r3
 800f298:	f3bf 8f6f 	isb	sy
 800f29c:	f3bf 8f4f 	dsb	sy
 800f2a0:	617b      	str	r3, [r7, #20]
}
 800f2a2:	bf00      	nop
 800f2a4:	e7fe      	b.n	800f2a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a8:	699a      	ldr	r2, [r3, #24]
 800f2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ac:	18d1      	adds	r1, r2, r3
 800f2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2b4:	f7ff ff06 	bl	800f0c4 <prvInsertTimerInActiveList>
					break;
 800f2b8:	e015      	b.n	800f2e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2c0:	f003 0302 	and.w	r3, r3, #2
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d103      	bne.n	800f2d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f2c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2ca:	f000 fbe1 	bl	800fa90 <vPortFree>
 800f2ce:	e00a      	b.n	800f2e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2d6:	f023 0301 	bic.w	r3, r3, #1
 800f2da:	b2da      	uxtb	r2, r3
 800f2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f2e2:	e000      	b.n	800f2e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f2e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f2e6:	4b08      	ldr	r3, [pc, #32]	; (800f308 <prvProcessReceivedCommands+0x1c0>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	1d39      	adds	r1, r7, #4
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fe fb98 	bl	800da24 <xQueueReceive>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	f47f af2a 	bne.w	800f150 <prvProcessReceivedCommands+0x8>
	}
}
 800f2fc:	bf00      	nop
 800f2fe:	bf00      	nop
 800f300:	3730      	adds	r7, #48	; 0x30
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	20002694 	.word	0x20002694

0800f30c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b088      	sub	sp, #32
 800f310:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f312:	e048      	b.n	800f3a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f314:	4b2d      	ldr	r3, [pc, #180]	; (800f3cc <prvSwitchTimerLists+0xc0>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	68db      	ldr	r3, [r3, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f31e:	4b2b      	ldr	r3, [pc, #172]	; (800f3cc <prvSwitchTimerLists+0xc0>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	68db      	ldr	r3, [r3, #12]
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	3304      	adds	r3, #4
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7fe f8b1 	bl	800d494 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	6a1b      	ldr	r3, [r3, #32]
 800f336:	68f8      	ldr	r0, [r7, #12]
 800f338:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f340:	f003 0304 	and.w	r3, r3, #4
 800f344:	2b00      	cmp	r3, #0
 800f346:	d02e      	beq.n	800f3a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	699b      	ldr	r3, [r3, #24]
 800f34c:	693a      	ldr	r2, [r7, #16]
 800f34e:	4413      	add	r3, r2
 800f350:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f352:	68ba      	ldr	r2, [r7, #8]
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	429a      	cmp	r2, r3
 800f358:	d90e      	bls.n	800f378 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	68ba      	ldr	r2, [r7, #8]
 800f35e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	68fa      	ldr	r2, [r7, #12]
 800f364:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f366:	4b19      	ldr	r3, [pc, #100]	; (800f3cc <prvSwitchTimerLists+0xc0>)
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	3304      	adds	r3, #4
 800f36e:	4619      	mov	r1, r3
 800f370:	4610      	mov	r0, r2
 800f372:	f7fe f856 	bl	800d422 <vListInsert>
 800f376:	e016      	b.n	800f3a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f378:	2300      	movs	r3, #0
 800f37a:	9300      	str	r3, [sp, #0]
 800f37c:	2300      	movs	r3, #0
 800f37e:	693a      	ldr	r2, [r7, #16]
 800f380:	2100      	movs	r1, #0
 800f382:	68f8      	ldr	r0, [r7, #12]
 800f384:	f7ff fd60 	bl	800ee48 <xTimerGenericCommand>
 800f388:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d10a      	bne.n	800f3a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f394:	f383 8811 	msr	BASEPRI, r3
 800f398:	f3bf 8f6f 	isb	sy
 800f39c:	f3bf 8f4f 	dsb	sy
 800f3a0:	603b      	str	r3, [r7, #0]
}
 800f3a2:	bf00      	nop
 800f3a4:	e7fe      	b.n	800f3a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f3a6:	4b09      	ldr	r3, [pc, #36]	; (800f3cc <prvSwitchTimerLists+0xc0>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d1b1      	bne.n	800f314 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f3b0:	4b06      	ldr	r3, [pc, #24]	; (800f3cc <prvSwitchTimerLists+0xc0>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f3b6:	4b06      	ldr	r3, [pc, #24]	; (800f3d0 <prvSwitchTimerLists+0xc4>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	4a04      	ldr	r2, [pc, #16]	; (800f3cc <prvSwitchTimerLists+0xc0>)
 800f3bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f3be:	4a04      	ldr	r2, [pc, #16]	; (800f3d0 <prvSwitchTimerLists+0xc4>)
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	6013      	str	r3, [r2, #0]
}
 800f3c4:	bf00      	nop
 800f3c6:	3718      	adds	r7, #24
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}
 800f3cc:	2000268c 	.word	0x2000268c
 800f3d0:	20002690 	.word	0x20002690

0800f3d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f3da:	f000 f96b 	bl	800f6b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f3de:	4b15      	ldr	r3, [pc, #84]	; (800f434 <prvCheckForValidListAndQueue+0x60>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d120      	bne.n	800f428 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f3e6:	4814      	ldr	r0, [pc, #80]	; (800f438 <prvCheckForValidListAndQueue+0x64>)
 800f3e8:	f7fd ffca 	bl	800d380 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f3ec:	4813      	ldr	r0, [pc, #76]	; (800f43c <prvCheckForValidListAndQueue+0x68>)
 800f3ee:	f7fd ffc7 	bl	800d380 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f3f2:	4b13      	ldr	r3, [pc, #76]	; (800f440 <prvCheckForValidListAndQueue+0x6c>)
 800f3f4:	4a10      	ldr	r2, [pc, #64]	; (800f438 <prvCheckForValidListAndQueue+0x64>)
 800f3f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f3f8:	4b12      	ldr	r3, [pc, #72]	; (800f444 <prvCheckForValidListAndQueue+0x70>)
 800f3fa:	4a10      	ldr	r2, [pc, #64]	; (800f43c <prvCheckForValidListAndQueue+0x68>)
 800f3fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f3fe:	2300      	movs	r3, #0
 800f400:	9300      	str	r3, [sp, #0]
 800f402:	4b11      	ldr	r3, [pc, #68]	; (800f448 <prvCheckForValidListAndQueue+0x74>)
 800f404:	4a11      	ldr	r2, [pc, #68]	; (800f44c <prvCheckForValidListAndQueue+0x78>)
 800f406:	2110      	movs	r1, #16
 800f408:	200a      	movs	r0, #10
 800f40a:	f7fe f8d5 	bl	800d5b8 <xQueueGenericCreateStatic>
 800f40e:	4603      	mov	r3, r0
 800f410:	4a08      	ldr	r2, [pc, #32]	; (800f434 <prvCheckForValidListAndQueue+0x60>)
 800f412:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f414:	4b07      	ldr	r3, [pc, #28]	; (800f434 <prvCheckForValidListAndQueue+0x60>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d005      	beq.n	800f428 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f41c:	4b05      	ldr	r3, [pc, #20]	; (800f434 <prvCheckForValidListAndQueue+0x60>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	490b      	ldr	r1, [pc, #44]	; (800f450 <prvCheckForValidListAndQueue+0x7c>)
 800f422:	4618      	mov	r0, r3
 800f424:	f7fe fcee 	bl	800de04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f428:	f000 f974 	bl	800f714 <vPortExitCritical>
}
 800f42c:	bf00      	nop
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
 800f432:	bf00      	nop
 800f434:	20002694 	.word	0x20002694
 800f438:	20002664 	.word	0x20002664
 800f43c:	20002678 	.word	0x20002678
 800f440:	2000268c 	.word	0x2000268c
 800f444:	20002690 	.word	0x20002690
 800f448:	20002740 	.word	0x20002740
 800f44c:	200026a0 	.word	0x200026a0
 800f450:	080146f4 	.word	0x080146f4

0800f454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f454:	b480      	push	{r7}
 800f456:	b085      	sub	sp, #20
 800f458:	af00      	add	r7, sp, #0
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	3b04      	subs	r3, #4
 800f464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f46c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	3b04      	subs	r3, #4
 800f472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	f023 0201 	bic.w	r2, r3, #1
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	3b04      	subs	r3, #4
 800f482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f484:	4a0c      	ldr	r2, [pc, #48]	; (800f4b8 <pxPortInitialiseStack+0x64>)
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	3b14      	subs	r3, #20
 800f48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f490:	687a      	ldr	r2, [r7, #4]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	3b04      	subs	r3, #4
 800f49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	f06f 0202 	mvn.w	r2, #2
 800f4a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	3b20      	subs	r3, #32
 800f4a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3714      	adds	r7, #20
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr
 800f4b8:	0800f4bd 	.word	0x0800f4bd

0800f4bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b085      	sub	sp, #20
 800f4c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f4c6:	4b12      	ldr	r3, [pc, #72]	; (800f510 <prvTaskExitError+0x54>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4ce:	d00a      	beq.n	800f4e6 <prvTaskExitError+0x2a>
	__asm volatile
 800f4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d4:	f383 8811 	msr	BASEPRI, r3
 800f4d8:	f3bf 8f6f 	isb	sy
 800f4dc:	f3bf 8f4f 	dsb	sy
 800f4e0:	60fb      	str	r3, [r7, #12]
}
 800f4e2:	bf00      	nop
 800f4e4:	e7fe      	b.n	800f4e4 <prvTaskExitError+0x28>
	__asm volatile
 800f4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ea:	f383 8811 	msr	BASEPRI, r3
 800f4ee:	f3bf 8f6f 	isb	sy
 800f4f2:	f3bf 8f4f 	dsb	sy
 800f4f6:	60bb      	str	r3, [r7, #8]
}
 800f4f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f4fa:	bf00      	nop
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d0fc      	beq.n	800f4fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f502:	bf00      	nop
 800f504:	bf00      	nop
 800f506:	3714      	adds	r7, #20
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr
 800f510:	20000010 	.word	0x20000010
	...

0800f520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f520:	4b07      	ldr	r3, [pc, #28]	; (800f540 <pxCurrentTCBConst2>)
 800f522:	6819      	ldr	r1, [r3, #0]
 800f524:	6808      	ldr	r0, [r1, #0]
 800f526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f52a:	f380 8809 	msr	PSP, r0
 800f52e:	f3bf 8f6f 	isb	sy
 800f532:	f04f 0000 	mov.w	r0, #0
 800f536:	f380 8811 	msr	BASEPRI, r0
 800f53a:	4770      	bx	lr
 800f53c:	f3af 8000 	nop.w

0800f540 <pxCurrentTCBConst2>:
 800f540:	20002164 	.word	0x20002164
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f544:	bf00      	nop
 800f546:	bf00      	nop

0800f548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f548:	4808      	ldr	r0, [pc, #32]	; (800f56c <prvPortStartFirstTask+0x24>)
 800f54a:	6800      	ldr	r0, [r0, #0]
 800f54c:	6800      	ldr	r0, [r0, #0]
 800f54e:	f380 8808 	msr	MSP, r0
 800f552:	f04f 0000 	mov.w	r0, #0
 800f556:	f380 8814 	msr	CONTROL, r0
 800f55a:	b662      	cpsie	i
 800f55c:	b661      	cpsie	f
 800f55e:	f3bf 8f4f 	dsb	sy
 800f562:	f3bf 8f6f 	isb	sy
 800f566:	df00      	svc	0
 800f568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f56a:	bf00      	nop
 800f56c:	e000ed08 	.word	0xe000ed08

0800f570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b086      	sub	sp, #24
 800f574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f576:	4b46      	ldr	r3, [pc, #280]	; (800f690 <xPortStartScheduler+0x120>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	4a46      	ldr	r2, [pc, #280]	; (800f694 <xPortStartScheduler+0x124>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d10a      	bne.n	800f596 <xPortStartScheduler+0x26>
	__asm volatile
 800f580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f584:	f383 8811 	msr	BASEPRI, r3
 800f588:	f3bf 8f6f 	isb	sy
 800f58c:	f3bf 8f4f 	dsb	sy
 800f590:	613b      	str	r3, [r7, #16]
}
 800f592:	bf00      	nop
 800f594:	e7fe      	b.n	800f594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f596:	4b3e      	ldr	r3, [pc, #248]	; (800f690 <xPortStartScheduler+0x120>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	4a3f      	ldr	r2, [pc, #252]	; (800f698 <xPortStartScheduler+0x128>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d10a      	bne.n	800f5b6 <xPortStartScheduler+0x46>
	__asm volatile
 800f5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a4:	f383 8811 	msr	BASEPRI, r3
 800f5a8:	f3bf 8f6f 	isb	sy
 800f5ac:	f3bf 8f4f 	dsb	sy
 800f5b0:	60fb      	str	r3, [r7, #12]
}
 800f5b2:	bf00      	nop
 800f5b4:	e7fe      	b.n	800f5b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f5b6:	4b39      	ldr	r3, [pc, #228]	; (800f69c <xPortStartScheduler+0x12c>)
 800f5b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	22ff      	movs	r2, #255	; 0xff
 800f5c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	b2db      	uxtb	r3, r3
 800f5ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f5d0:	78fb      	ldrb	r3, [r7, #3]
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f5d8:	b2da      	uxtb	r2, r3
 800f5da:	4b31      	ldr	r3, [pc, #196]	; (800f6a0 <xPortStartScheduler+0x130>)
 800f5dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f5de:	4b31      	ldr	r3, [pc, #196]	; (800f6a4 <xPortStartScheduler+0x134>)
 800f5e0:	2207      	movs	r2, #7
 800f5e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f5e4:	e009      	b.n	800f5fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f5e6:	4b2f      	ldr	r3, [pc, #188]	; (800f6a4 <xPortStartScheduler+0x134>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	3b01      	subs	r3, #1
 800f5ec:	4a2d      	ldr	r2, [pc, #180]	; (800f6a4 <xPortStartScheduler+0x134>)
 800f5ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f5f0:	78fb      	ldrb	r3, [r7, #3]
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	005b      	lsls	r3, r3, #1
 800f5f6:	b2db      	uxtb	r3, r3
 800f5f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f5fa:	78fb      	ldrb	r3, [r7, #3]
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f602:	2b80      	cmp	r3, #128	; 0x80
 800f604:	d0ef      	beq.n	800f5e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f606:	4b27      	ldr	r3, [pc, #156]	; (800f6a4 <xPortStartScheduler+0x134>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	f1c3 0307 	rsb	r3, r3, #7
 800f60e:	2b04      	cmp	r3, #4
 800f610:	d00a      	beq.n	800f628 <xPortStartScheduler+0xb8>
	__asm volatile
 800f612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f616:	f383 8811 	msr	BASEPRI, r3
 800f61a:	f3bf 8f6f 	isb	sy
 800f61e:	f3bf 8f4f 	dsb	sy
 800f622:	60bb      	str	r3, [r7, #8]
}
 800f624:	bf00      	nop
 800f626:	e7fe      	b.n	800f626 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f628:	4b1e      	ldr	r3, [pc, #120]	; (800f6a4 <xPortStartScheduler+0x134>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	021b      	lsls	r3, r3, #8
 800f62e:	4a1d      	ldr	r2, [pc, #116]	; (800f6a4 <xPortStartScheduler+0x134>)
 800f630:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f632:	4b1c      	ldr	r3, [pc, #112]	; (800f6a4 <xPortStartScheduler+0x134>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f63a:	4a1a      	ldr	r2, [pc, #104]	; (800f6a4 <xPortStartScheduler+0x134>)
 800f63c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	b2da      	uxtb	r2, r3
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f646:	4b18      	ldr	r3, [pc, #96]	; (800f6a8 <xPortStartScheduler+0x138>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	4a17      	ldr	r2, [pc, #92]	; (800f6a8 <xPortStartScheduler+0x138>)
 800f64c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f652:	4b15      	ldr	r3, [pc, #84]	; (800f6a8 <xPortStartScheduler+0x138>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4a14      	ldr	r2, [pc, #80]	; (800f6a8 <xPortStartScheduler+0x138>)
 800f658:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f65c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f65e:	f000 f8dd 	bl	800f81c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f662:	4b12      	ldr	r3, [pc, #72]	; (800f6ac <xPortStartScheduler+0x13c>)
 800f664:	2200      	movs	r2, #0
 800f666:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f668:	f000 f8fc 	bl	800f864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f66c:	4b10      	ldr	r3, [pc, #64]	; (800f6b0 <xPortStartScheduler+0x140>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4a0f      	ldr	r2, [pc, #60]	; (800f6b0 <xPortStartScheduler+0x140>)
 800f672:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f676:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f678:	f7ff ff66 	bl	800f548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f67c:	f7ff f850 	bl	800e720 <vTaskSwitchContext>
	prvTaskExitError();
 800f680:	f7ff ff1c 	bl	800f4bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f684:	2300      	movs	r3, #0
}
 800f686:	4618      	mov	r0, r3
 800f688:	3718      	adds	r7, #24
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	bf00      	nop
 800f690:	e000ed00 	.word	0xe000ed00
 800f694:	410fc271 	.word	0x410fc271
 800f698:	410fc270 	.word	0x410fc270
 800f69c:	e000e400 	.word	0xe000e400
 800f6a0:	20002790 	.word	0x20002790
 800f6a4:	20002794 	.word	0x20002794
 800f6a8:	e000ed20 	.word	0xe000ed20
 800f6ac:	20000010 	.word	0x20000010
 800f6b0:	e000ef34 	.word	0xe000ef34

0800f6b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b083      	sub	sp, #12
 800f6b8:	af00      	add	r7, sp, #0
	__asm volatile
 800f6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6be:	f383 8811 	msr	BASEPRI, r3
 800f6c2:	f3bf 8f6f 	isb	sy
 800f6c6:	f3bf 8f4f 	dsb	sy
 800f6ca:	607b      	str	r3, [r7, #4]
}
 800f6cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f6ce:	4b0f      	ldr	r3, [pc, #60]	; (800f70c <vPortEnterCritical+0x58>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	4a0d      	ldr	r2, [pc, #52]	; (800f70c <vPortEnterCritical+0x58>)
 800f6d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f6d8:	4b0c      	ldr	r3, [pc, #48]	; (800f70c <vPortEnterCritical+0x58>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	2b01      	cmp	r3, #1
 800f6de:	d10f      	bne.n	800f700 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f6e0:	4b0b      	ldr	r3, [pc, #44]	; (800f710 <vPortEnterCritical+0x5c>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d00a      	beq.n	800f700 <vPortEnterCritical+0x4c>
	__asm volatile
 800f6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ee:	f383 8811 	msr	BASEPRI, r3
 800f6f2:	f3bf 8f6f 	isb	sy
 800f6f6:	f3bf 8f4f 	dsb	sy
 800f6fa:	603b      	str	r3, [r7, #0]
}
 800f6fc:	bf00      	nop
 800f6fe:	e7fe      	b.n	800f6fe <vPortEnterCritical+0x4a>
	}
}
 800f700:	bf00      	nop
 800f702:	370c      	adds	r7, #12
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr
 800f70c:	20000010 	.word	0x20000010
 800f710:	e000ed04 	.word	0xe000ed04

0800f714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f714:	b480      	push	{r7}
 800f716:	b083      	sub	sp, #12
 800f718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f71a:	4b12      	ldr	r3, [pc, #72]	; (800f764 <vPortExitCritical+0x50>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d10a      	bne.n	800f738 <vPortExitCritical+0x24>
	__asm volatile
 800f722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f726:	f383 8811 	msr	BASEPRI, r3
 800f72a:	f3bf 8f6f 	isb	sy
 800f72e:	f3bf 8f4f 	dsb	sy
 800f732:	607b      	str	r3, [r7, #4]
}
 800f734:	bf00      	nop
 800f736:	e7fe      	b.n	800f736 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f738:	4b0a      	ldr	r3, [pc, #40]	; (800f764 <vPortExitCritical+0x50>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	3b01      	subs	r3, #1
 800f73e:	4a09      	ldr	r2, [pc, #36]	; (800f764 <vPortExitCritical+0x50>)
 800f740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f742:	4b08      	ldr	r3, [pc, #32]	; (800f764 <vPortExitCritical+0x50>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d105      	bne.n	800f756 <vPortExitCritical+0x42>
 800f74a:	2300      	movs	r3, #0
 800f74c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	f383 8811 	msr	BASEPRI, r3
}
 800f754:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f756:	bf00      	nop
 800f758:	370c      	adds	r7, #12
 800f75a:	46bd      	mov	sp, r7
 800f75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f760:	4770      	bx	lr
 800f762:	bf00      	nop
 800f764:	20000010 	.word	0x20000010
	...

0800f770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f770:	f3ef 8009 	mrs	r0, PSP
 800f774:	f3bf 8f6f 	isb	sy
 800f778:	4b15      	ldr	r3, [pc, #84]	; (800f7d0 <pxCurrentTCBConst>)
 800f77a:	681a      	ldr	r2, [r3, #0]
 800f77c:	f01e 0f10 	tst.w	lr, #16
 800f780:	bf08      	it	eq
 800f782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f78a:	6010      	str	r0, [r2, #0]
 800f78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f790:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f794:	f380 8811 	msr	BASEPRI, r0
 800f798:	f3bf 8f4f 	dsb	sy
 800f79c:	f3bf 8f6f 	isb	sy
 800f7a0:	f7fe ffbe 	bl	800e720 <vTaskSwitchContext>
 800f7a4:	f04f 0000 	mov.w	r0, #0
 800f7a8:	f380 8811 	msr	BASEPRI, r0
 800f7ac:	bc09      	pop	{r0, r3}
 800f7ae:	6819      	ldr	r1, [r3, #0]
 800f7b0:	6808      	ldr	r0, [r1, #0]
 800f7b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b6:	f01e 0f10 	tst.w	lr, #16
 800f7ba:	bf08      	it	eq
 800f7bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f7c0:	f380 8809 	msr	PSP, r0
 800f7c4:	f3bf 8f6f 	isb	sy
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop
 800f7cc:	f3af 8000 	nop.w

0800f7d0 <pxCurrentTCBConst>:
 800f7d0:	20002164 	.word	0x20002164
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f7d4:	bf00      	nop
 800f7d6:	bf00      	nop

0800f7d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e2:	f383 8811 	msr	BASEPRI, r3
 800f7e6:	f3bf 8f6f 	isb	sy
 800f7ea:	f3bf 8f4f 	dsb	sy
 800f7ee:	607b      	str	r3, [r7, #4]
}
 800f7f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f7f2:	f7fe fedb 	bl	800e5ac <xTaskIncrementTick>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d003      	beq.n	800f804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f7fc:	4b06      	ldr	r3, [pc, #24]	; (800f818 <xPortSysTickHandler+0x40>)
 800f7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f802:	601a      	str	r2, [r3, #0]
 800f804:	2300      	movs	r3, #0
 800f806:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	f383 8811 	msr	BASEPRI, r3
}
 800f80e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f810:	bf00      	nop
 800f812:	3708      	adds	r7, #8
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}
 800f818:	e000ed04 	.word	0xe000ed04

0800f81c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f81c:	b480      	push	{r7}
 800f81e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f820:	4b0b      	ldr	r3, [pc, #44]	; (800f850 <vPortSetupTimerInterrupt+0x34>)
 800f822:	2200      	movs	r2, #0
 800f824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f826:	4b0b      	ldr	r3, [pc, #44]	; (800f854 <vPortSetupTimerInterrupt+0x38>)
 800f828:	2200      	movs	r2, #0
 800f82a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f82c:	4b0a      	ldr	r3, [pc, #40]	; (800f858 <vPortSetupTimerInterrupt+0x3c>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	4a0a      	ldr	r2, [pc, #40]	; (800f85c <vPortSetupTimerInterrupt+0x40>)
 800f832:	fba2 2303 	umull	r2, r3, r2, r3
 800f836:	099b      	lsrs	r3, r3, #6
 800f838:	4a09      	ldr	r2, [pc, #36]	; (800f860 <vPortSetupTimerInterrupt+0x44>)
 800f83a:	3b01      	subs	r3, #1
 800f83c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f83e:	4b04      	ldr	r3, [pc, #16]	; (800f850 <vPortSetupTimerInterrupt+0x34>)
 800f840:	2207      	movs	r2, #7
 800f842:	601a      	str	r2, [r3, #0]
}
 800f844:	bf00      	nop
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr
 800f84e:	bf00      	nop
 800f850:	e000e010 	.word	0xe000e010
 800f854:	e000e018 	.word	0xe000e018
 800f858:	20000004 	.word	0x20000004
 800f85c:	10624dd3 	.word	0x10624dd3
 800f860:	e000e014 	.word	0xe000e014

0800f864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f874 <vPortEnableVFP+0x10>
 800f868:	6801      	ldr	r1, [r0, #0]
 800f86a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f86e:	6001      	str	r1, [r0, #0]
 800f870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f872:	bf00      	nop
 800f874:	e000ed88 	.word	0xe000ed88

0800f878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f878:	b480      	push	{r7}
 800f87a:	b085      	sub	sp, #20
 800f87c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f87e:	f3ef 8305 	mrs	r3, IPSR
 800f882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	2b0f      	cmp	r3, #15
 800f888:	d914      	bls.n	800f8b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f88a:	4a17      	ldr	r2, [pc, #92]	; (800f8e8 <vPortValidateInterruptPriority+0x70>)
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	4413      	add	r3, r2
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f894:	4b15      	ldr	r3, [pc, #84]	; (800f8ec <vPortValidateInterruptPriority+0x74>)
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	7afa      	ldrb	r2, [r7, #11]
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d20a      	bcs.n	800f8b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a2:	f383 8811 	msr	BASEPRI, r3
 800f8a6:	f3bf 8f6f 	isb	sy
 800f8aa:	f3bf 8f4f 	dsb	sy
 800f8ae:	607b      	str	r3, [r7, #4]
}
 800f8b0:	bf00      	nop
 800f8b2:	e7fe      	b.n	800f8b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f8b4:	4b0e      	ldr	r3, [pc, #56]	; (800f8f0 <vPortValidateInterruptPriority+0x78>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f8bc:	4b0d      	ldr	r3, [pc, #52]	; (800f8f4 <vPortValidateInterruptPriority+0x7c>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d90a      	bls.n	800f8da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c8:	f383 8811 	msr	BASEPRI, r3
 800f8cc:	f3bf 8f6f 	isb	sy
 800f8d0:	f3bf 8f4f 	dsb	sy
 800f8d4:	603b      	str	r3, [r7, #0]
}
 800f8d6:	bf00      	nop
 800f8d8:	e7fe      	b.n	800f8d8 <vPortValidateInterruptPriority+0x60>
	}
 800f8da:	bf00      	nop
 800f8dc:	3714      	adds	r7, #20
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e4:	4770      	bx	lr
 800f8e6:	bf00      	nop
 800f8e8:	e000e3f0 	.word	0xe000e3f0
 800f8ec:	20002790 	.word	0x20002790
 800f8f0:	e000ed0c 	.word	0xe000ed0c
 800f8f4:	20002794 	.word	0x20002794

0800f8f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b08a      	sub	sp, #40	; 0x28
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f900:	2300      	movs	r3, #0
 800f902:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f904:	f7fe fd96 	bl	800e434 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f908:	4b5b      	ldr	r3, [pc, #364]	; (800fa78 <pvPortMalloc+0x180>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d101      	bne.n	800f914 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f910:	f000 f920 	bl	800fb54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f914:	4b59      	ldr	r3, [pc, #356]	; (800fa7c <pvPortMalloc+0x184>)
 800f916:	681a      	ldr	r2, [r3, #0]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4013      	ands	r3, r2
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	f040 8093 	bne.w	800fa48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d01d      	beq.n	800f964 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f928:	2208      	movs	r2, #8
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4413      	add	r3, r2
 800f92e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f003 0307 	and.w	r3, r3, #7
 800f936:	2b00      	cmp	r3, #0
 800f938:	d014      	beq.n	800f964 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f023 0307 	bic.w	r3, r3, #7
 800f940:	3308      	adds	r3, #8
 800f942:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f003 0307 	and.w	r3, r3, #7
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d00a      	beq.n	800f964 <pvPortMalloc+0x6c>
	__asm volatile
 800f94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f952:	f383 8811 	msr	BASEPRI, r3
 800f956:	f3bf 8f6f 	isb	sy
 800f95a:	f3bf 8f4f 	dsb	sy
 800f95e:	617b      	str	r3, [r7, #20]
}
 800f960:	bf00      	nop
 800f962:	e7fe      	b.n	800f962 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d06e      	beq.n	800fa48 <pvPortMalloc+0x150>
 800f96a:	4b45      	ldr	r3, [pc, #276]	; (800fa80 <pvPortMalloc+0x188>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	429a      	cmp	r2, r3
 800f972:	d869      	bhi.n	800fa48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f974:	4b43      	ldr	r3, [pc, #268]	; (800fa84 <pvPortMalloc+0x18c>)
 800f976:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f978:	4b42      	ldr	r3, [pc, #264]	; (800fa84 <pvPortMalloc+0x18c>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f97e:	e004      	b.n	800f98a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f982:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	429a      	cmp	r2, r3
 800f992:	d903      	bls.n	800f99c <pvPortMalloc+0xa4>
 800f994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d1f1      	bne.n	800f980 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f99c:	4b36      	ldr	r3, [pc, #216]	; (800fa78 <pvPortMalloc+0x180>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d050      	beq.n	800fa48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f9a6:	6a3b      	ldr	r3, [r7, #32]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	2208      	movs	r2, #8
 800f9ac:	4413      	add	r3, r2
 800f9ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b2:	681a      	ldr	r2, [r3, #0]
 800f9b4:	6a3b      	ldr	r3, [r7, #32]
 800f9b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ba:	685a      	ldr	r2, [r3, #4]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	1ad2      	subs	r2, r2, r3
 800f9c0:	2308      	movs	r3, #8
 800f9c2:	005b      	lsls	r3, r3, #1
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d91f      	bls.n	800fa08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	4413      	add	r3, r2
 800f9ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9d0:	69bb      	ldr	r3, [r7, #24]
 800f9d2:	f003 0307 	and.w	r3, r3, #7
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d00a      	beq.n	800f9f0 <pvPortMalloc+0xf8>
	__asm volatile
 800f9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9de:	f383 8811 	msr	BASEPRI, r3
 800f9e2:	f3bf 8f6f 	isb	sy
 800f9e6:	f3bf 8f4f 	dsb	sy
 800f9ea:	613b      	str	r3, [r7, #16]
}
 800f9ec:	bf00      	nop
 800f9ee:	e7fe      	b.n	800f9ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f2:	685a      	ldr	r2, [r3, #4]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	1ad2      	subs	r2, r2, r3
 800f9f8:	69bb      	ldr	r3, [r7, #24]
 800f9fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9fe:	687a      	ldr	r2, [r7, #4]
 800fa00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fa02:	69b8      	ldr	r0, [r7, #24]
 800fa04:	f000 f908 	bl	800fc18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fa08:	4b1d      	ldr	r3, [pc, #116]	; (800fa80 <pvPortMalloc+0x188>)
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	1ad3      	subs	r3, r2, r3
 800fa12:	4a1b      	ldr	r2, [pc, #108]	; (800fa80 <pvPortMalloc+0x188>)
 800fa14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fa16:	4b1a      	ldr	r3, [pc, #104]	; (800fa80 <pvPortMalloc+0x188>)
 800fa18:	681a      	ldr	r2, [r3, #0]
 800fa1a:	4b1b      	ldr	r3, [pc, #108]	; (800fa88 <pvPortMalloc+0x190>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d203      	bcs.n	800fa2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fa22:	4b17      	ldr	r3, [pc, #92]	; (800fa80 <pvPortMalloc+0x188>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	4a18      	ldr	r2, [pc, #96]	; (800fa88 <pvPortMalloc+0x190>)
 800fa28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2c:	685a      	ldr	r2, [r3, #4]
 800fa2e:	4b13      	ldr	r3, [pc, #76]	; (800fa7c <pvPortMalloc+0x184>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	431a      	orrs	r2, r3
 800fa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fa3e:	4b13      	ldr	r3, [pc, #76]	; (800fa8c <pvPortMalloc+0x194>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	3301      	adds	r3, #1
 800fa44:	4a11      	ldr	r2, [pc, #68]	; (800fa8c <pvPortMalloc+0x194>)
 800fa46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fa48:	f7fe fd02 	bl	800e450 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa4c:	69fb      	ldr	r3, [r7, #28]
 800fa4e:	f003 0307 	and.w	r3, r3, #7
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d00a      	beq.n	800fa6c <pvPortMalloc+0x174>
	__asm volatile
 800fa56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa5a:	f383 8811 	msr	BASEPRI, r3
 800fa5e:	f3bf 8f6f 	isb	sy
 800fa62:	f3bf 8f4f 	dsb	sy
 800fa66:	60fb      	str	r3, [r7, #12]
}
 800fa68:	bf00      	nop
 800fa6a:	e7fe      	b.n	800fa6a <pvPortMalloc+0x172>
	return pvReturn;
 800fa6c:	69fb      	ldr	r3, [r7, #28]
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3728      	adds	r7, #40	; 0x28
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	200063a0 	.word	0x200063a0
 800fa7c:	200063b4 	.word	0x200063b4
 800fa80:	200063a4 	.word	0x200063a4
 800fa84:	20006398 	.word	0x20006398
 800fa88:	200063a8 	.word	0x200063a8
 800fa8c:	200063ac 	.word	0x200063ac

0800fa90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b086      	sub	sp, #24
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d04d      	beq.n	800fb3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800faa2:	2308      	movs	r3, #8
 800faa4:	425b      	negs	r3, r3
 800faa6:	697a      	ldr	r2, [r7, #20]
 800faa8:	4413      	add	r3, r2
 800faaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	685a      	ldr	r2, [r3, #4]
 800fab4:	4b24      	ldr	r3, [pc, #144]	; (800fb48 <vPortFree+0xb8>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	4013      	ands	r3, r2
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d10a      	bne.n	800fad4 <vPortFree+0x44>
	__asm volatile
 800fabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac2:	f383 8811 	msr	BASEPRI, r3
 800fac6:	f3bf 8f6f 	isb	sy
 800faca:	f3bf 8f4f 	dsb	sy
 800face:	60fb      	str	r3, [r7, #12]
}
 800fad0:	bf00      	nop
 800fad2:	e7fe      	b.n	800fad2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d00a      	beq.n	800faf2 <vPortFree+0x62>
	__asm volatile
 800fadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae0:	f383 8811 	msr	BASEPRI, r3
 800fae4:	f3bf 8f6f 	isb	sy
 800fae8:	f3bf 8f4f 	dsb	sy
 800faec:	60bb      	str	r3, [r7, #8]
}
 800faee:	bf00      	nop
 800faf0:	e7fe      	b.n	800faf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	685a      	ldr	r2, [r3, #4]
 800faf6:	4b14      	ldr	r3, [pc, #80]	; (800fb48 <vPortFree+0xb8>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	4013      	ands	r3, r2
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d01e      	beq.n	800fb3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d11a      	bne.n	800fb3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	685a      	ldr	r2, [r3, #4]
 800fb0c:	4b0e      	ldr	r3, [pc, #56]	; (800fb48 <vPortFree+0xb8>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	43db      	mvns	r3, r3
 800fb12:	401a      	ands	r2, r3
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fb18:	f7fe fc8c 	bl	800e434 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	685a      	ldr	r2, [r3, #4]
 800fb20:	4b0a      	ldr	r3, [pc, #40]	; (800fb4c <vPortFree+0xbc>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	4413      	add	r3, r2
 800fb26:	4a09      	ldr	r2, [pc, #36]	; (800fb4c <vPortFree+0xbc>)
 800fb28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fb2a:	6938      	ldr	r0, [r7, #16]
 800fb2c:	f000 f874 	bl	800fc18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fb30:	4b07      	ldr	r3, [pc, #28]	; (800fb50 <vPortFree+0xc0>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	3301      	adds	r3, #1
 800fb36:	4a06      	ldr	r2, [pc, #24]	; (800fb50 <vPortFree+0xc0>)
 800fb38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fb3a:	f7fe fc89 	bl	800e450 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fb3e:	bf00      	nop
 800fb40:	3718      	adds	r7, #24
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	200063b4 	.word	0x200063b4
 800fb4c:	200063a4 	.word	0x200063a4
 800fb50:	200063b0 	.word	0x200063b0

0800fb54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fb54:	b480      	push	{r7}
 800fb56:	b085      	sub	sp, #20
 800fb58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fb5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fb5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fb60:	4b27      	ldr	r3, [pc, #156]	; (800fc00 <prvHeapInit+0xac>)
 800fb62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f003 0307 	and.w	r3, r3, #7
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d00c      	beq.n	800fb88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	3307      	adds	r3, #7
 800fb72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f023 0307 	bic.w	r3, r3, #7
 800fb7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fb7c:	68ba      	ldr	r2, [r7, #8]
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	1ad3      	subs	r3, r2, r3
 800fb82:	4a1f      	ldr	r2, [pc, #124]	; (800fc00 <prvHeapInit+0xac>)
 800fb84:	4413      	add	r3, r2
 800fb86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fb8c:	4a1d      	ldr	r2, [pc, #116]	; (800fc04 <prvHeapInit+0xb0>)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fb92:	4b1c      	ldr	r3, [pc, #112]	; (800fc04 <prvHeapInit+0xb0>)
 800fb94:	2200      	movs	r2, #0
 800fb96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	68ba      	ldr	r2, [r7, #8]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fba0:	2208      	movs	r2, #8
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	1a9b      	subs	r3, r3, r2
 800fba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f023 0307 	bic.w	r3, r3, #7
 800fbae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	4a15      	ldr	r2, [pc, #84]	; (800fc08 <prvHeapInit+0xb4>)
 800fbb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fbb6:	4b14      	ldr	r3, [pc, #80]	; (800fc08 <prvHeapInit+0xb4>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fbbe:	4b12      	ldr	r3, [pc, #72]	; (800fc08 <prvHeapInit+0xb4>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	1ad2      	subs	r2, r2, r3
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fbd4:	4b0c      	ldr	r3, [pc, #48]	; (800fc08 <prvHeapInit+0xb4>)
 800fbd6:	681a      	ldr	r2, [r3, #0]
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	4a0a      	ldr	r2, [pc, #40]	; (800fc0c <prvHeapInit+0xb8>)
 800fbe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	685b      	ldr	r3, [r3, #4]
 800fbe8:	4a09      	ldr	r2, [pc, #36]	; (800fc10 <prvHeapInit+0xbc>)
 800fbea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fbec:	4b09      	ldr	r3, [pc, #36]	; (800fc14 <prvHeapInit+0xc0>)
 800fbee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fbf2:	601a      	str	r2, [r3, #0]
}
 800fbf4:	bf00      	nop
 800fbf6:	3714      	adds	r7, #20
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr
 800fc00:	20002798 	.word	0x20002798
 800fc04:	20006398 	.word	0x20006398
 800fc08:	200063a0 	.word	0x200063a0
 800fc0c:	200063a8 	.word	0x200063a8
 800fc10:	200063a4 	.word	0x200063a4
 800fc14:	200063b4 	.word	0x200063b4

0800fc18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc20:	4b28      	ldr	r3, [pc, #160]	; (800fcc4 <prvInsertBlockIntoFreeList+0xac>)
 800fc22:	60fb      	str	r3, [r7, #12]
 800fc24:	e002      	b.n	800fc2c <prvInsertBlockIntoFreeList+0x14>
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	60fb      	str	r3, [r7, #12]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d8f7      	bhi.n	800fc26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	68ba      	ldr	r2, [r7, #8]
 800fc40:	4413      	add	r3, r2
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d108      	bne.n	800fc5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	685a      	ldr	r2, [r3, #4]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	441a      	add	r2, r3
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	68ba      	ldr	r2, [r7, #8]
 800fc64:	441a      	add	r2, r3
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d118      	bne.n	800fca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681a      	ldr	r2, [r3, #0]
 800fc72:	4b15      	ldr	r3, [pc, #84]	; (800fcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d00d      	beq.n	800fc96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	685a      	ldr	r2, [r3, #4]
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	441a      	add	r2, r3
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	601a      	str	r2, [r3, #0]
 800fc94:	e008      	b.n	800fca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fc96:	4b0c      	ldr	r3, [pc, #48]	; (800fcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800fc98:	681a      	ldr	r2, [r3, #0]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	601a      	str	r2, [r3, #0]
 800fc9e:	e003      	b.n	800fca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fca8:	68fa      	ldr	r2, [r7, #12]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d002      	beq.n	800fcb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fcb6:	bf00      	nop
 800fcb8:	3714      	adds	r7, #20
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr
 800fcc2:	bf00      	nop
 800fcc4:	20006398 	.word	0x20006398
 800fcc8:	200063a0 	.word	0x200063a0

0800fccc <__errno>:
 800fccc:	4b01      	ldr	r3, [pc, #4]	; (800fcd4 <__errno+0x8>)
 800fcce:	6818      	ldr	r0, [r3, #0]
 800fcd0:	4770      	bx	lr
 800fcd2:	bf00      	nop
 800fcd4:	20000014 	.word	0x20000014

0800fcd8 <__libc_init_array>:
 800fcd8:	b570      	push	{r4, r5, r6, lr}
 800fcda:	4d0d      	ldr	r5, [pc, #52]	; (800fd10 <__libc_init_array+0x38>)
 800fcdc:	4c0d      	ldr	r4, [pc, #52]	; (800fd14 <__libc_init_array+0x3c>)
 800fcde:	1b64      	subs	r4, r4, r5
 800fce0:	10a4      	asrs	r4, r4, #2
 800fce2:	2600      	movs	r6, #0
 800fce4:	42a6      	cmp	r6, r4
 800fce6:	d109      	bne.n	800fcfc <__libc_init_array+0x24>
 800fce8:	4d0b      	ldr	r5, [pc, #44]	; (800fd18 <__libc_init_array+0x40>)
 800fcea:	4c0c      	ldr	r4, [pc, #48]	; (800fd1c <__libc_init_array+0x44>)
 800fcec:	f004 fc90 	bl	8014610 <_init>
 800fcf0:	1b64      	subs	r4, r4, r5
 800fcf2:	10a4      	asrs	r4, r4, #2
 800fcf4:	2600      	movs	r6, #0
 800fcf6:	42a6      	cmp	r6, r4
 800fcf8:	d105      	bne.n	800fd06 <__libc_init_array+0x2e>
 800fcfa:	bd70      	pop	{r4, r5, r6, pc}
 800fcfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd00:	4798      	blx	r3
 800fd02:	3601      	adds	r6, #1
 800fd04:	e7ee      	b.n	800fce4 <__libc_init_array+0xc>
 800fd06:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd0a:	4798      	blx	r3
 800fd0c:	3601      	adds	r6, #1
 800fd0e:	e7f2      	b.n	800fcf6 <__libc_init_array+0x1e>
 800fd10:	080156b4 	.word	0x080156b4
 800fd14:	080156b4 	.word	0x080156b4
 800fd18:	080156b4 	.word	0x080156b4
 800fd1c:	080156b8 	.word	0x080156b8

0800fd20 <memcpy>:
 800fd20:	440a      	add	r2, r1
 800fd22:	4291      	cmp	r1, r2
 800fd24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fd28:	d100      	bne.n	800fd2c <memcpy+0xc>
 800fd2a:	4770      	bx	lr
 800fd2c:	b510      	push	{r4, lr}
 800fd2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd36:	4291      	cmp	r1, r2
 800fd38:	d1f9      	bne.n	800fd2e <memcpy+0xe>
 800fd3a:	bd10      	pop	{r4, pc}

0800fd3c <memset>:
 800fd3c:	4402      	add	r2, r0
 800fd3e:	4603      	mov	r3, r0
 800fd40:	4293      	cmp	r3, r2
 800fd42:	d100      	bne.n	800fd46 <memset+0xa>
 800fd44:	4770      	bx	lr
 800fd46:	f803 1b01 	strb.w	r1, [r3], #1
 800fd4a:	e7f9      	b.n	800fd40 <memset+0x4>

0800fd4c <__cvt>:
 800fd4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd50:	ec55 4b10 	vmov	r4, r5, d0
 800fd54:	2d00      	cmp	r5, #0
 800fd56:	460e      	mov	r6, r1
 800fd58:	4619      	mov	r1, r3
 800fd5a:	462b      	mov	r3, r5
 800fd5c:	bfbb      	ittet	lt
 800fd5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fd62:	461d      	movlt	r5, r3
 800fd64:	2300      	movge	r3, #0
 800fd66:	232d      	movlt	r3, #45	; 0x2d
 800fd68:	700b      	strb	r3, [r1, #0]
 800fd6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fd70:	4691      	mov	r9, r2
 800fd72:	f023 0820 	bic.w	r8, r3, #32
 800fd76:	bfbc      	itt	lt
 800fd78:	4622      	movlt	r2, r4
 800fd7a:	4614      	movlt	r4, r2
 800fd7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fd80:	d005      	beq.n	800fd8e <__cvt+0x42>
 800fd82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fd86:	d100      	bne.n	800fd8a <__cvt+0x3e>
 800fd88:	3601      	adds	r6, #1
 800fd8a:	2102      	movs	r1, #2
 800fd8c:	e000      	b.n	800fd90 <__cvt+0x44>
 800fd8e:	2103      	movs	r1, #3
 800fd90:	ab03      	add	r3, sp, #12
 800fd92:	9301      	str	r3, [sp, #4]
 800fd94:	ab02      	add	r3, sp, #8
 800fd96:	9300      	str	r3, [sp, #0]
 800fd98:	ec45 4b10 	vmov	d0, r4, r5
 800fd9c:	4653      	mov	r3, sl
 800fd9e:	4632      	mov	r2, r6
 800fda0:	f001 fdae 	bl	8011900 <_dtoa_r>
 800fda4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fda8:	4607      	mov	r7, r0
 800fdaa:	d102      	bne.n	800fdb2 <__cvt+0x66>
 800fdac:	f019 0f01 	tst.w	r9, #1
 800fdb0:	d022      	beq.n	800fdf8 <__cvt+0xac>
 800fdb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fdb6:	eb07 0906 	add.w	r9, r7, r6
 800fdba:	d110      	bne.n	800fdde <__cvt+0x92>
 800fdbc:	783b      	ldrb	r3, [r7, #0]
 800fdbe:	2b30      	cmp	r3, #48	; 0x30
 800fdc0:	d10a      	bne.n	800fdd8 <__cvt+0x8c>
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	4629      	mov	r1, r5
 800fdca:	f7f0 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800fdce:	b918      	cbnz	r0, 800fdd8 <__cvt+0x8c>
 800fdd0:	f1c6 0601 	rsb	r6, r6, #1
 800fdd4:	f8ca 6000 	str.w	r6, [sl]
 800fdd8:	f8da 3000 	ldr.w	r3, [sl]
 800fddc:	4499      	add	r9, r3
 800fdde:	2200      	movs	r2, #0
 800fde0:	2300      	movs	r3, #0
 800fde2:	4620      	mov	r0, r4
 800fde4:	4629      	mov	r1, r5
 800fde6:	f7f0 fe6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800fdea:	b108      	cbz	r0, 800fdf0 <__cvt+0xa4>
 800fdec:	f8cd 900c 	str.w	r9, [sp, #12]
 800fdf0:	2230      	movs	r2, #48	; 0x30
 800fdf2:	9b03      	ldr	r3, [sp, #12]
 800fdf4:	454b      	cmp	r3, r9
 800fdf6:	d307      	bcc.n	800fe08 <__cvt+0xbc>
 800fdf8:	9b03      	ldr	r3, [sp, #12]
 800fdfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fdfc:	1bdb      	subs	r3, r3, r7
 800fdfe:	4638      	mov	r0, r7
 800fe00:	6013      	str	r3, [r2, #0]
 800fe02:	b004      	add	sp, #16
 800fe04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe08:	1c59      	adds	r1, r3, #1
 800fe0a:	9103      	str	r1, [sp, #12]
 800fe0c:	701a      	strb	r2, [r3, #0]
 800fe0e:	e7f0      	b.n	800fdf2 <__cvt+0xa6>

0800fe10 <__exponent>:
 800fe10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe12:	4603      	mov	r3, r0
 800fe14:	2900      	cmp	r1, #0
 800fe16:	bfb8      	it	lt
 800fe18:	4249      	neglt	r1, r1
 800fe1a:	f803 2b02 	strb.w	r2, [r3], #2
 800fe1e:	bfb4      	ite	lt
 800fe20:	222d      	movlt	r2, #45	; 0x2d
 800fe22:	222b      	movge	r2, #43	; 0x2b
 800fe24:	2909      	cmp	r1, #9
 800fe26:	7042      	strb	r2, [r0, #1]
 800fe28:	dd2a      	ble.n	800fe80 <__exponent+0x70>
 800fe2a:	f10d 0407 	add.w	r4, sp, #7
 800fe2e:	46a4      	mov	ip, r4
 800fe30:	270a      	movs	r7, #10
 800fe32:	46a6      	mov	lr, r4
 800fe34:	460a      	mov	r2, r1
 800fe36:	fb91 f6f7 	sdiv	r6, r1, r7
 800fe3a:	fb07 1516 	mls	r5, r7, r6, r1
 800fe3e:	3530      	adds	r5, #48	; 0x30
 800fe40:	2a63      	cmp	r2, #99	; 0x63
 800fe42:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800fe46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fe4a:	4631      	mov	r1, r6
 800fe4c:	dcf1      	bgt.n	800fe32 <__exponent+0x22>
 800fe4e:	3130      	adds	r1, #48	; 0x30
 800fe50:	f1ae 0502 	sub.w	r5, lr, #2
 800fe54:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fe58:	1c44      	adds	r4, r0, #1
 800fe5a:	4629      	mov	r1, r5
 800fe5c:	4561      	cmp	r1, ip
 800fe5e:	d30a      	bcc.n	800fe76 <__exponent+0x66>
 800fe60:	f10d 0209 	add.w	r2, sp, #9
 800fe64:	eba2 020e 	sub.w	r2, r2, lr
 800fe68:	4565      	cmp	r5, ip
 800fe6a:	bf88      	it	hi
 800fe6c:	2200      	movhi	r2, #0
 800fe6e:	4413      	add	r3, r2
 800fe70:	1a18      	subs	r0, r3, r0
 800fe72:	b003      	add	sp, #12
 800fe74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fe7e:	e7ed      	b.n	800fe5c <__exponent+0x4c>
 800fe80:	2330      	movs	r3, #48	; 0x30
 800fe82:	3130      	adds	r1, #48	; 0x30
 800fe84:	7083      	strb	r3, [r0, #2]
 800fe86:	70c1      	strb	r1, [r0, #3]
 800fe88:	1d03      	adds	r3, r0, #4
 800fe8a:	e7f1      	b.n	800fe70 <__exponent+0x60>

0800fe8c <_printf_float>:
 800fe8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe90:	ed2d 8b02 	vpush	{d8}
 800fe94:	b08d      	sub	sp, #52	; 0x34
 800fe96:	460c      	mov	r4, r1
 800fe98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fe9c:	4616      	mov	r6, r2
 800fe9e:	461f      	mov	r7, r3
 800fea0:	4605      	mov	r5, r0
 800fea2:	f002 fe8b 	bl	8012bbc <_localeconv_r>
 800fea6:	f8d0 a000 	ldr.w	sl, [r0]
 800feaa:	4650      	mov	r0, sl
 800feac:	f7f0 f990 	bl	80001d0 <strlen>
 800feb0:	2300      	movs	r3, #0
 800feb2:	930a      	str	r3, [sp, #40]	; 0x28
 800feb4:	6823      	ldr	r3, [r4, #0]
 800feb6:	9305      	str	r3, [sp, #20]
 800feb8:	f8d8 3000 	ldr.w	r3, [r8]
 800febc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fec0:	3307      	adds	r3, #7
 800fec2:	f023 0307 	bic.w	r3, r3, #7
 800fec6:	f103 0208 	add.w	r2, r3, #8
 800feca:	f8c8 2000 	str.w	r2, [r8]
 800fece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fed6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800feda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fede:	9307      	str	r3, [sp, #28]
 800fee0:	f8cd 8018 	str.w	r8, [sp, #24]
 800fee4:	ee08 0a10 	vmov	s16, r0
 800fee8:	4b9f      	ldr	r3, [pc, #636]	; (8010168 <_printf_float+0x2dc>)
 800feea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800feee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fef2:	f7f0 fe1b 	bl	8000b2c <__aeabi_dcmpun>
 800fef6:	bb88      	cbnz	r0, 800ff5c <_printf_float+0xd0>
 800fef8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fefc:	4b9a      	ldr	r3, [pc, #616]	; (8010168 <_printf_float+0x2dc>)
 800fefe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff02:	f7f0 fdf5 	bl	8000af0 <__aeabi_dcmple>
 800ff06:	bb48      	cbnz	r0, 800ff5c <_printf_float+0xd0>
 800ff08:	2200      	movs	r2, #0
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	4640      	mov	r0, r8
 800ff0e:	4649      	mov	r1, r9
 800ff10:	f7f0 fde4 	bl	8000adc <__aeabi_dcmplt>
 800ff14:	b110      	cbz	r0, 800ff1c <_printf_float+0x90>
 800ff16:	232d      	movs	r3, #45	; 0x2d
 800ff18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff1c:	4b93      	ldr	r3, [pc, #588]	; (801016c <_printf_float+0x2e0>)
 800ff1e:	4894      	ldr	r0, [pc, #592]	; (8010170 <_printf_float+0x2e4>)
 800ff20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ff24:	bf94      	ite	ls
 800ff26:	4698      	movls	r8, r3
 800ff28:	4680      	movhi	r8, r0
 800ff2a:	2303      	movs	r3, #3
 800ff2c:	6123      	str	r3, [r4, #16]
 800ff2e:	9b05      	ldr	r3, [sp, #20]
 800ff30:	f023 0204 	bic.w	r2, r3, #4
 800ff34:	6022      	str	r2, [r4, #0]
 800ff36:	f04f 0900 	mov.w	r9, #0
 800ff3a:	9700      	str	r7, [sp, #0]
 800ff3c:	4633      	mov	r3, r6
 800ff3e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ff40:	4621      	mov	r1, r4
 800ff42:	4628      	mov	r0, r5
 800ff44:	f000 f9d8 	bl	80102f8 <_printf_common>
 800ff48:	3001      	adds	r0, #1
 800ff4a:	f040 8090 	bne.w	801006e <_printf_float+0x1e2>
 800ff4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff52:	b00d      	add	sp, #52	; 0x34
 800ff54:	ecbd 8b02 	vpop	{d8}
 800ff58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff5c:	4642      	mov	r2, r8
 800ff5e:	464b      	mov	r3, r9
 800ff60:	4640      	mov	r0, r8
 800ff62:	4649      	mov	r1, r9
 800ff64:	f7f0 fde2 	bl	8000b2c <__aeabi_dcmpun>
 800ff68:	b140      	cbz	r0, 800ff7c <_printf_float+0xf0>
 800ff6a:	464b      	mov	r3, r9
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	bfbc      	itt	lt
 800ff70:	232d      	movlt	r3, #45	; 0x2d
 800ff72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ff76:	487f      	ldr	r0, [pc, #508]	; (8010174 <_printf_float+0x2e8>)
 800ff78:	4b7f      	ldr	r3, [pc, #508]	; (8010178 <_printf_float+0x2ec>)
 800ff7a:	e7d1      	b.n	800ff20 <_printf_float+0x94>
 800ff7c:	6863      	ldr	r3, [r4, #4]
 800ff7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ff82:	9206      	str	r2, [sp, #24]
 800ff84:	1c5a      	adds	r2, r3, #1
 800ff86:	d13f      	bne.n	8010008 <_printf_float+0x17c>
 800ff88:	2306      	movs	r3, #6
 800ff8a:	6063      	str	r3, [r4, #4]
 800ff8c:	9b05      	ldr	r3, [sp, #20]
 800ff8e:	6861      	ldr	r1, [r4, #4]
 800ff90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ff94:	2300      	movs	r3, #0
 800ff96:	9303      	str	r3, [sp, #12]
 800ff98:	ab0a      	add	r3, sp, #40	; 0x28
 800ff9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ff9e:	ab09      	add	r3, sp, #36	; 0x24
 800ffa0:	ec49 8b10 	vmov	d0, r8, r9
 800ffa4:	9300      	str	r3, [sp, #0]
 800ffa6:	6022      	str	r2, [r4, #0]
 800ffa8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ffac:	4628      	mov	r0, r5
 800ffae:	f7ff fecd 	bl	800fd4c <__cvt>
 800ffb2:	9b06      	ldr	r3, [sp, #24]
 800ffb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ffb6:	2b47      	cmp	r3, #71	; 0x47
 800ffb8:	4680      	mov	r8, r0
 800ffba:	d108      	bne.n	800ffce <_printf_float+0x142>
 800ffbc:	1cc8      	adds	r0, r1, #3
 800ffbe:	db02      	blt.n	800ffc6 <_printf_float+0x13a>
 800ffc0:	6863      	ldr	r3, [r4, #4]
 800ffc2:	4299      	cmp	r1, r3
 800ffc4:	dd41      	ble.n	801004a <_printf_float+0x1be>
 800ffc6:	f1ab 0b02 	sub.w	fp, fp, #2
 800ffca:	fa5f fb8b 	uxtb.w	fp, fp
 800ffce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ffd2:	d820      	bhi.n	8010016 <_printf_float+0x18a>
 800ffd4:	3901      	subs	r1, #1
 800ffd6:	465a      	mov	r2, fp
 800ffd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ffdc:	9109      	str	r1, [sp, #36]	; 0x24
 800ffde:	f7ff ff17 	bl	800fe10 <__exponent>
 800ffe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffe4:	1813      	adds	r3, r2, r0
 800ffe6:	2a01      	cmp	r2, #1
 800ffe8:	4681      	mov	r9, r0
 800ffea:	6123      	str	r3, [r4, #16]
 800ffec:	dc02      	bgt.n	800fff4 <_printf_float+0x168>
 800ffee:	6822      	ldr	r2, [r4, #0]
 800fff0:	07d2      	lsls	r2, r2, #31
 800fff2:	d501      	bpl.n	800fff8 <_printf_float+0x16c>
 800fff4:	3301      	adds	r3, #1
 800fff6:	6123      	str	r3, [r4, #16]
 800fff8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d09c      	beq.n	800ff3a <_printf_float+0xae>
 8010000:	232d      	movs	r3, #45	; 0x2d
 8010002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010006:	e798      	b.n	800ff3a <_printf_float+0xae>
 8010008:	9a06      	ldr	r2, [sp, #24]
 801000a:	2a47      	cmp	r2, #71	; 0x47
 801000c:	d1be      	bne.n	800ff8c <_printf_float+0x100>
 801000e:	2b00      	cmp	r3, #0
 8010010:	d1bc      	bne.n	800ff8c <_printf_float+0x100>
 8010012:	2301      	movs	r3, #1
 8010014:	e7b9      	b.n	800ff8a <_printf_float+0xfe>
 8010016:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801001a:	d118      	bne.n	801004e <_printf_float+0x1c2>
 801001c:	2900      	cmp	r1, #0
 801001e:	6863      	ldr	r3, [r4, #4]
 8010020:	dd0b      	ble.n	801003a <_printf_float+0x1ae>
 8010022:	6121      	str	r1, [r4, #16]
 8010024:	b913      	cbnz	r3, 801002c <_printf_float+0x1a0>
 8010026:	6822      	ldr	r2, [r4, #0]
 8010028:	07d0      	lsls	r0, r2, #31
 801002a:	d502      	bpl.n	8010032 <_printf_float+0x1a6>
 801002c:	3301      	adds	r3, #1
 801002e:	440b      	add	r3, r1
 8010030:	6123      	str	r3, [r4, #16]
 8010032:	65a1      	str	r1, [r4, #88]	; 0x58
 8010034:	f04f 0900 	mov.w	r9, #0
 8010038:	e7de      	b.n	800fff8 <_printf_float+0x16c>
 801003a:	b913      	cbnz	r3, 8010042 <_printf_float+0x1b6>
 801003c:	6822      	ldr	r2, [r4, #0]
 801003e:	07d2      	lsls	r2, r2, #31
 8010040:	d501      	bpl.n	8010046 <_printf_float+0x1ba>
 8010042:	3302      	adds	r3, #2
 8010044:	e7f4      	b.n	8010030 <_printf_float+0x1a4>
 8010046:	2301      	movs	r3, #1
 8010048:	e7f2      	b.n	8010030 <_printf_float+0x1a4>
 801004a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801004e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010050:	4299      	cmp	r1, r3
 8010052:	db05      	blt.n	8010060 <_printf_float+0x1d4>
 8010054:	6823      	ldr	r3, [r4, #0]
 8010056:	6121      	str	r1, [r4, #16]
 8010058:	07d8      	lsls	r0, r3, #31
 801005a:	d5ea      	bpl.n	8010032 <_printf_float+0x1a6>
 801005c:	1c4b      	adds	r3, r1, #1
 801005e:	e7e7      	b.n	8010030 <_printf_float+0x1a4>
 8010060:	2900      	cmp	r1, #0
 8010062:	bfd4      	ite	le
 8010064:	f1c1 0202 	rsble	r2, r1, #2
 8010068:	2201      	movgt	r2, #1
 801006a:	4413      	add	r3, r2
 801006c:	e7e0      	b.n	8010030 <_printf_float+0x1a4>
 801006e:	6823      	ldr	r3, [r4, #0]
 8010070:	055a      	lsls	r2, r3, #21
 8010072:	d407      	bmi.n	8010084 <_printf_float+0x1f8>
 8010074:	6923      	ldr	r3, [r4, #16]
 8010076:	4642      	mov	r2, r8
 8010078:	4631      	mov	r1, r6
 801007a:	4628      	mov	r0, r5
 801007c:	47b8      	blx	r7
 801007e:	3001      	adds	r0, #1
 8010080:	d12c      	bne.n	80100dc <_printf_float+0x250>
 8010082:	e764      	b.n	800ff4e <_printf_float+0xc2>
 8010084:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010088:	f240 80e0 	bls.w	801024c <_printf_float+0x3c0>
 801008c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010090:	2200      	movs	r2, #0
 8010092:	2300      	movs	r3, #0
 8010094:	f7f0 fd18 	bl	8000ac8 <__aeabi_dcmpeq>
 8010098:	2800      	cmp	r0, #0
 801009a:	d034      	beq.n	8010106 <_printf_float+0x27a>
 801009c:	4a37      	ldr	r2, [pc, #220]	; (801017c <_printf_float+0x2f0>)
 801009e:	2301      	movs	r3, #1
 80100a0:	4631      	mov	r1, r6
 80100a2:	4628      	mov	r0, r5
 80100a4:	47b8      	blx	r7
 80100a6:	3001      	adds	r0, #1
 80100a8:	f43f af51 	beq.w	800ff4e <_printf_float+0xc2>
 80100ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100b0:	429a      	cmp	r2, r3
 80100b2:	db02      	blt.n	80100ba <_printf_float+0x22e>
 80100b4:	6823      	ldr	r3, [r4, #0]
 80100b6:	07d8      	lsls	r0, r3, #31
 80100b8:	d510      	bpl.n	80100dc <_printf_float+0x250>
 80100ba:	ee18 3a10 	vmov	r3, s16
 80100be:	4652      	mov	r2, sl
 80100c0:	4631      	mov	r1, r6
 80100c2:	4628      	mov	r0, r5
 80100c4:	47b8      	blx	r7
 80100c6:	3001      	adds	r0, #1
 80100c8:	f43f af41 	beq.w	800ff4e <_printf_float+0xc2>
 80100cc:	f04f 0800 	mov.w	r8, #0
 80100d0:	f104 091a 	add.w	r9, r4, #26
 80100d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100d6:	3b01      	subs	r3, #1
 80100d8:	4543      	cmp	r3, r8
 80100da:	dc09      	bgt.n	80100f0 <_printf_float+0x264>
 80100dc:	6823      	ldr	r3, [r4, #0]
 80100de:	079b      	lsls	r3, r3, #30
 80100e0:	f100 8105 	bmi.w	80102ee <_printf_float+0x462>
 80100e4:	68e0      	ldr	r0, [r4, #12]
 80100e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100e8:	4298      	cmp	r0, r3
 80100ea:	bfb8      	it	lt
 80100ec:	4618      	movlt	r0, r3
 80100ee:	e730      	b.n	800ff52 <_printf_float+0xc6>
 80100f0:	2301      	movs	r3, #1
 80100f2:	464a      	mov	r2, r9
 80100f4:	4631      	mov	r1, r6
 80100f6:	4628      	mov	r0, r5
 80100f8:	47b8      	blx	r7
 80100fa:	3001      	adds	r0, #1
 80100fc:	f43f af27 	beq.w	800ff4e <_printf_float+0xc2>
 8010100:	f108 0801 	add.w	r8, r8, #1
 8010104:	e7e6      	b.n	80100d4 <_printf_float+0x248>
 8010106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010108:	2b00      	cmp	r3, #0
 801010a:	dc39      	bgt.n	8010180 <_printf_float+0x2f4>
 801010c:	4a1b      	ldr	r2, [pc, #108]	; (801017c <_printf_float+0x2f0>)
 801010e:	2301      	movs	r3, #1
 8010110:	4631      	mov	r1, r6
 8010112:	4628      	mov	r0, r5
 8010114:	47b8      	blx	r7
 8010116:	3001      	adds	r0, #1
 8010118:	f43f af19 	beq.w	800ff4e <_printf_float+0xc2>
 801011c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010120:	4313      	orrs	r3, r2
 8010122:	d102      	bne.n	801012a <_printf_float+0x29e>
 8010124:	6823      	ldr	r3, [r4, #0]
 8010126:	07d9      	lsls	r1, r3, #31
 8010128:	d5d8      	bpl.n	80100dc <_printf_float+0x250>
 801012a:	ee18 3a10 	vmov	r3, s16
 801012e:	4652      	mov	r2, sl
 8010130:	4631      	mov	r1, r6
 8010132:	4628      	mov	r0, r5
 8010134:	47b8      	blx	r7
 8010136:	3001      	adds	r0, #1
 8010138:	f43f af09 	beq.w	800ff4e <_printf_float+0xc2>
 801013c:	f04f 0900 	mov.w	r9, #0
 8010140:	f104 0a1a 	add.w	sl, r4, #26
 8010144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010146:	425b      	negs	r3, r3
 8010148:	454b      	cmp	r3, r9
 801014a:	dc01      	bgt.n	8010150 <_printf_float+0x2c4>
 801014c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801014e:	e792      	b.n	8010076 <_printf_float+0x1ea>
 8010150:	2301      	movs	r3, #1
 8010152:	4652      	mov	r2, sl
 8010154:	4631      	mov	r1, r6
 8010156:	4628      	mov	r0, r5
 8010158:	47b8      	blx	r7
 801015a:	3001      	adds	r0, #1
 801015c:	f43f aef7 	beq.w	800ff4e <_printf_float+0xc2>
 8010160:	f109 0901 	add.w	r9, r9, #1
 8010164:	e7ee      	b.n	8010144 <_printf_float+0x2b8>
 8010166:	bf00      	nop
 8010168:	7fefffff 	.word	0x7fefffff
 801016c:	0801520c 	.word	0x0801520c
 8010170:	08015210 	.word	0x08015210
 8010174:	08015218 	.word	0x08015218
 8010178:	08015214 	.word	0x08015214
 801017c:	0801521c 	.word	0x0801521c
 8010180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010182:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010184:	429a      	cmp	r2, r3
 8010186:	bfa8      	it	ge
 8010188:	461a      	movge	r2, r3
 801018a:	2a00      	cmp	r2, #0
 801018c:	4691      	mov	r9, r2
 801018e:	dc37      	bgt.n	8010200 <_printf_float+0x374>
 8010190:	f04f 0b00 	mov.w	fp, #0
 8010194:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010198:	f104 021a 	add.w	r2, r4, #26
 801019c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801019e:	9305      	str	r3, [sp, #20]
 80101a0:	eba3 0309 	sub.w	r3, r3, r9
 80101a4:	455b      	cmp	r3, fp
 80101a6:	dc33      	bgt.n	8010210 <_printf_float+0x384>
 80101a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80101ac:	429a      	cmp	r2, r3
 80101ae:	db3b      	blt.n	8010228 <_printf_float+0x39c>
 80101b0:	6823      	ldr	r3, [r4, #0]
 80101b2:	07da      	lsls	r2, r3, #31
 80101b4:	d438      	bmi.n	8010228 <_printf_float+0x39c>
 80101b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101b8:	9a05      	ldr	r2, [sp, #20]
 80101ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101bc:	1a9a      	subs	r2, r3, r2
 80101be:	eba3 0901 	sub.w	r9, r3, r1
 80101c2:	4591      	cmp	r9, r2
 80101c4:	bfa8      	it	ge
 80101c6:	4691      	movge	r9, r2
 80101c8:	f1b9 0f00 	cmp.w	r9, #0
 80101cc:	dc35      	bgt.n	801023a <_printf_float+0x3ae>
 80101ce:	f04f 0800 	mov.w	r8, #0
 80101d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80101d6:	f104 0a1a 	add.w	sl, r4, #26
 80101da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80101de:	1a9b      	subs	r3, r3, r2
 80101e0:	eba3 0309 	sub.w	r3, r3, r9
 80101e4:	4543      	cmp	r3, r8
 80101e6:	f77f af79 	ble.w	80100dc <_printf_float+0x250>
 80101ea:	2301      	movs	r3, #1
 80101ec:	4652      	mov	r2, sl
 80101ee:	4631      	mov	r1, r6
 80101f0:	4628      	mov	r0, r5
 80101f2:	47b8      	blx	r7
 80101f4:	3001      	adds	r0, #1
 80101f6:	f43f aeaa 	beq.w	800ff4e <_printf_float+0xc2>
 80101fa:	f108 0801 	add.w	r8, r8, #1
 80101fe:	e7ec      	b.n	80101da <_printf_float+0x34e>
 8010200:	4613      	mov	r3, r2
 8010202:	4631      	mov	r1, r6
 8010204:	4642      	mov	r2, r8
 8010206:	4628      	mov	r0, r5
 8010208:	47b8      	blx	r7
 801020a:	3001      	adds	r0, #1
 801020c:	d1c0      	bne.n	8010190 <_printf_float+0x304>
 801020e:	e69e      	b.n	800ff4e <_printf_float+0xc2>
 8010210:	2301      	movs	r3, #1
 8010212:	4631      	mov	r1, r6
 8010214:	4628      	mov	r0, r5
 8010216:	9205      	str	r2, [sp, #20]
 8010218:	47b8      	blx	r7
 801021a:	3001      	adds	r0, #1
 801021c:	f43f ae97 	beq.w	800ff4e <_printf_float+0xc2>
 8010220:	9a05      	ldr	r2, [sp, #20]
 8010222:	f10b 0b01 	add.w	fp, fp, #1
 8010226:	e7b9      	b.n	801019c <_printf_float+0x310>
 8010228:	ee18 3a10 	vmov	r3, s16
 801022c:	4652      	mov	r2, sl
 801022e:	4631      	mov	r1, r6
 8010230:	4628      	mov	r0, r5
 8010232:	47b8      	blx	r7
 8010234:	3001      	adds	r0, #1
 8010236:	d1be      	bne.n	80101b6 <_printf_float+0x32a>
 8010238:	e689      	b.n	800ff4e <_printf_float+0xc2>
 801023a:	9a05      	ldr	r2, [sp, #20]
 801023c:	464b      	mov	r3, r9
 801023e:	4442      	add	r2, r8
 8010240:	4631      	mov	r1, r6
 8010242:	4628      	mov	r0, r5
 8010244:	47b8      	blx	r7
 8010246:	3001      	adds	r0, #1
 8010248:	d1c1      	bne.n	80101ce <_printf_float+0x342>
 801024a:	e680      	b.n	800ff4e <_printf_float+0xc2>
 801024c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801024e:	2a01      	cmp	r2, #1
 8010250:	dc01      	bgt.n	8010256 <_printf_float+0x3ca>
 8010252:	07db      	lsls	r3, r3, #31
 8010254:	d538      	bpl.n	80102c8 <_printf_float+0x43c>
 8010256:	2301      	movs	r3, #1
 8010258:	4642      	mov	r2, r8
 801025a:	4631      	mov	r1, r6
 801025c:	4628      	mov	r0, r5
 801025e:	47b8      	blx	r7
 8010260:	3001      	adds	r0, #1
 8010262:	f43f ae74 	beq.w	800ff4e <_printf_float+0xc2>
 8010266:	ee18 3a10 	vmov	r3, s16
 801026a:	4652      	mov	r2, sl
 801026c:	4631      	mov	r1, r6
 801026e:	4628      	mov	r0, r5
 8010270:	47b8      	blx	r7
 8010272:	3001      	adds	r0, #1
 8010274:	f43f ae6b 	beq.w	800ff4e <_printf_float+0xc2>
 8010278:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801027c:	2200      	movs	r2, #0
 801027e:	2300      	movs	r3, #0
 8010280:	f7f0 fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 8010284:	b9d8      	cbnz	r0, 80102be <_printf_float+0x432>
 8010286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010288:	f108 0201 	add.w	r2, r8, #1
 801028c:	3b01      	subs	r3, #1
 801028e:	4631      	mov	r1, r6
 8010290:	4628      	mov	r0, r5
 8010292:	47b8      	blx	r7
 8010294:	3001      	adds	r0, #1
 8010296:	d10e      	bne.n	80102b6 <_printf_float+0x42a>
 8010298:	e659      	b.n	800ff4e <_printf_float+0xc2>
 801029a:	2301      	movs	r3, #1
 801029c:	4652      	mov	r2, sl
 801029e:	4631      	mov	r1, r6
 80102a0:	4628      	mov	r0, r5
 80102a2:	47b8      	blx	r7
 80102a4:	3001      	adds	r0, #1
 80102a6:	f43f ae52 	beq.w	800ff4e <_printf_float+0xc2>
 80102aa:	f108 0801 	add.w	r8, r8, #1
 80102ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102b0:	3b01      	subs	r3, #1
 80102b2:	4543      	cmp	r3, r8
 80102b4:	dcf1      	bgt.n	801029a <_printf_float+0x40e>
 80102b6:	464b      	mov	r3, r9
 80102b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80102bc:	e6dc      	b.n	8010078 <_printf_float+0x1ec>
 80102be:	f04f 0800 	mov.w	r8, #0
 80102c2:	f104 0a1a 	add.w	sl, r4, #26
 80102c6:	e7f2      	b.n	80102ae <_printf_float+0x422>
 80102c8:	2301      	movs	r3, #1
 80102ca:	4642      	mov	r2, r8
 80102cc:	e7df      	b.n	801028e <_printf_float+0x402>
 80102ce:	2301      	movs	r3, #1
 80102d0:	464a      	mov	r2, r9
 80102d2:	4631      	mov	r1, r6
 80102d4:	4628      	mov	r0, r5
 80102d6:	47b8      	blx	r7
 80102d8:	3001      	adds	r0, #1
 80102da:	f43f ae38 	beq.w	800ff4e <_printf_float+0xc2>
 80102de:	f108 0801 	add.w	r8, r8, #1
 80102e2:	68e3      	ldr	r3, [r4, #12]
 80102e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80102e6:	1a5b      	subs	r3, r3, r1
 80102e8:	4543      	cmp	r3, r8
 80102ea:	dcf0      	bgt.n	80102ce <_printf_float+0x442>
 80102ec:	e6fa      	b.n	80100e4 <_printf_float+0x258>
 80102ee:	f04f 0800 	mov.w	r8, #0
 80102f2:	f104 0919 	add.w	r9, r4, #25
 80102f6:	e7f4      	b.n	80102e2 <_printf_float+0x456>

080102f8 <_printf_common>:
 80102f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102fc:	4616      	mov	r6, r2
 80102fe:	4699      	mov	r9, r3
 8010300:	688a      	ldr	r2, [r1, #8]
 8010302:	690b      	ldr	r3, [r1, #16]
 8010304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010308:	4293      	cmp	r3, r2
 801030a:	bfb8      	it	lt
 801030c:	4613      	movlt	r3, r2
 801030e:	6033      	str	r3, [r6, #0]
 8010310:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010314:	4607      	mov	r7, r0
 8010316:	460c      	mov	r4, r1
 8010318:	b10a      	cbz	r2, 801031e <_printf_common+0x26>
 801031a:	3301      	adds	r3, #1
 801031c:	6033      	str	r3, [r6, #0]
 801031e:	6823      	ldr	r3, [r4, #0]
 8010320:	0699      	lsls	r1, r3, #26
 8010322:	bf42      	ittt	mi
 8010324:	6833      	ldrmi	r3, [r6, #0]
 8010326:	3302      	addmi	r3, #2
 8010328:	6033      	strmi	r3, [r6, #0]
 801032a:	6825      	ldr	r5, [r4, #0]
 801032c:	f015 0506 	ands.w	r5, r5, #6
 8010330:	d106      	bne.n	8010340 <_printf_common+0x48>
 8010332:	f104 0a19 	add.w	sl, r4, #25
 8010336:	68e3      	ldr	r3, [r4, #12]
 8010338:	6832      	ldr	r2, [r6, #0]
 801033a:	1a9b      	subs	r3, r3, r2
 801033c:	42ab      	cmp	r3, r5
 801033e:	dc26      	bgt.n	801038e <_printf_common+0x96>
 8010340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010344:	1e13      	subs	r3, r2, #0
 8010346:	6822      	ldr	r2, [r4, #0]
 8010348:	bf18      	it	ne
 801034a:	2301      	movne	r3, #1
 801034c:	0692      	lsls	r2, r2, #26
 801034e:	d42b      	bmi.n	80103a8 <_printf_common+0xb0>
 8010350:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010354:	4649      	mov	r1, r9
 8010356:	4638      	mov	r0, r7
 8010358:	47c0      	blx	r8
 801035a:	3001      	adds	r0, #1
 801035c:	d01e      	beq.n	801039c <_printf_common+0xa4>
 801035e:	6823      	ldr	r3, [r4, #0]
 8010360:	68e5      	ldr	r5, [r4, #12]
 8010362:	6832      	ldr	r2, [r6, #0]
 8010364:	f003 0306 	and.w	r3, r3, #6
 8010368:	2b04      	cmp	r3, #4
 801036a:	bf08      	it	eq
 801036c:	1aad      	subeq	r5, r5, r2
 801036e:	68a3      	ldr	r3, [r4, #8]
 8010370:	6922      	ldr	r2, [r4, #16]
 8010372:	bf0c      	ite	eq
 8010374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010378:	2500      	movne	r5, #0
 801037a:	4293      	cmp	r3, r2
 801037c:	bfc4      	itt	gt
 801037e:	1a9b      	subgt	r3, r3, r2
 8010380:	18ed      	addgt	r5, r5, r3
 8010382:	2600      	movs	r6, #0
 8010384:	341a      	adds	r4, #26
 8010386:	42b5      	cmp	r5, r6
 8010388:	d11a      	bne.n	80103c0 <_printf_common+0xc8>
 801038a:	2000      	movs	r0, #0
 801038c:	e008      	b.n	80103a0 <_printf_common+0xa8>
 801038e:	2301      	movs	r3, #1
 8010390:	4652      	mov	r2, sl
 8010392:	4649      	mov	r1, r9
 8010394:	4638      	mov	r0, r7
 8010396:	47c0      	blx	r8
 8010398:	3001      	adds	r0, #1
 801039a:	d103      	bne.n	80103a4 <_printf_common+0xac>
 801039c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103a4:	3501      	adds	r5, #1
 80103a6:	e7c6      	b.n	8010336 <_printf_common+0x3e>
 80103a8:	18e1      	adds	r1, r4, r3
 80103aa:	1c5a      	adds	r2, r3, #1
 80103ac:	2030      	movs	r0, #48	; 0x30
 80103ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80103b2:	4422      	add	r2, r4
 80103b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80103b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80103bc:	3302      	adds	r3, #2
 80103be:	e7c7      	b.n	8010350 <_printf_common+0x58>
 80103c0:	2301      	movs	r3, #1
 80103c2:	4622      	mov	r2, r4
 80103c4:	4649      	mov	r1, r9
 80103c6:	4638      	mov	r0, r7
 80103c8:	47c0      	blx	r8
 80103ca:	3001      	adds	r0, #1
 80103cc:	d0e6      	beq.n	801039c <_printf_common+0xa4>
 80103ce:	3601      	adds	r6, #1
 80103d0:	e7d9      	b.n	8010386 <_printf_common+0x8e>
	...

080103d4 <_printf_i>:
 80103d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80103d8:	7e0f      	ldrb	r7, [r1, #24]
 80103da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80103dc:	2f78      	cmp	r7, #120	; 0x78
 80103de:	4691      	mov	r9, r2
 80103e0:	4680      	mov	r8, r0
 80103e2:	460c      	mov	r4, r1
 80103e4:	469a      	mov	sl, r3
 80103e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80103ea:	d807      	bhi.n	80103fc <_printf_i+0x28>
 80103ec:	2f62      	cmp	r7, #98	; 0x62
 80103ee:	d80a      	bhi.n	8010406 <_printf_i+0x32>
 80103f0:	2f00      	cmp	r7, #0
 80103f2:	f000 80d8 	beq.w	80105a6 <_printf_i+0x1d2>
 80103f6:	2f58      	cmp	r7, #88	; 0x58
 80103f8:	f000 80a3 	beq.w	8010542 <_printf_i+0x16e>
 80103fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010400:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010404:	e03a      	b.n	801047c <_printf_i+0xa8>
 8010406:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801040a:	2b15      	cmp	r3, #21
 801040c:	d8f6      	bhi.n	80103fc <_printf_i+0x28>
 801040e:	a101      	add	r1, pc, #4	; (adr r1, 8010414 <_printf_i+0x40>)
 8010410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010414:	0801046d 	.word	0x0801046d
 8010418:	08010481 	.word	0x08010481
 801041c:	080103fd 	.word	0x080103fd
 8010420:	080103fd 	.word	0x080103fd
 8010424:	080103fd 	.word	0x080103fd
 8010428:	080103fd 	.word	0x080103fd
 801042c:	08010481 	.word	0x08010481
 8010430:	080103fd 	.word	0x080103fd
 8010434:	080103fd 	.word	0x080103fd
 8010438:	080103fd 	.word	0x080103fd
 801043c:	080103fd 	.word	0x080103fd
 8010440:	0801058d 	.word	0x0801058d
 8010444:	080104b1 	.word	0x080104b1
 8010448:	0801056f 	.word	0x0801056f
 801044c:	080103fd 	.word	0x080103fd
 8010450:	080103fd 	.word	0x080103fd
 8010454:	080105af 	.word	0x080105af
 8010458:	080103fd 	.word	0x080103fd
 801045c:	080104b1 	.word	0x080104b1
 8010460:	080103fd 	.word	0x080103fd
 8010464:	080103fd 	.word	0x080103fd
 8010468:	08010577 	.word	0x08010577
 801046c:	682b      	ldr	r3, [r5, #0]
 801046e:	1d1a      	adds	r2, r3, #4
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	602a      	str	r2, [r5, #0]
 8010474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801047c:	2301      	movs	r3, #1
 801047e:	e0a3      	b.n	80105c8 <_printf_i+0x1f4>
 8010480:	6820      	ldr	r0, [r4, #0]
 8010482:	6829      	ldr	r1, [r5, #0]
 8010484:	0606      	lsls	r6, r0, #24
 8010486:	f101 0304 	add.w	r3, r1, #4
 801048a:	d50a      	bpl.n	80104a2 <_printf_i+0xce>
 801048c:	680e      	ldr	r6, [r1, #0]
 801048e:	602b      	str	r3, [r5, #0]
 8010490:	2e00      	cmp	r6, #0
 8010492:	da03      	bge.n	801049c <_printf_i+0xc8>
 8010494:	232d      	movs	r3, #45	; 0x2d
 8010496:	4276      	negs	r6, r6
 8010498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801049c:	485e      	ldr	r0, [pc, #376]	; (8010618 <_printf_i+0x244>)
 801049e:	230a      	movs	r3, #10
 80104a0:	e019      	b.n	80104d6 <_printf_i+0x102>
 80104a2:	680e      	ldr	r6, [r1, #0]
 80104a4:	602b      	str	r3, [r5, #0]
 80104a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80104aa:	bf18      	it	ne
 80104ac:	b236      	sxthne	r6, r6
 80104ae:	e7ef      	b.n	8010490 <_printf_i+0xbc>
 80104b0:	682b      	ldr	r3, [r5, #0]
 80104b2:	6820      	ldr	r0, [r4, #0]
 80104b4:	1d19      	adds	r1, r3, #4
 80104b6:	6029      	str	r1, [r5, #0]
 80104b8:	0601      	lsls	r1, r0, #24
 80104ba:	d501      	bpl.n	80104c0 <_printf_i+0xec>
 80104bc:	681e      	ldr	r6, [r3, #0]
 80104be:	e002      	b.n	80104c6 <_printf_i+0xf2>
 80104c0:	0646      	lsls	r6, r0, #25
 80104c2:	d5fb      	bpl.n	80104bc <_printf_i+0xe8>
 80104c4:	881e      	ldrh	r6, [r3, #0]
 80104c6:	4854      	ldr	r0, [pc, #336]	; (8010618 <_printf_i+0x244>)
 80104c8:	2f6f      	cmp	r7, #111	; 0x6f
 80104ca:	bf0c      	ite	eq
 80104cc:	2308      	moveq	r3, #8
 80104ce:	230a      	movne	r3, #10
 80104d0:	2100      	movs	r1, #0
 80104d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80104d6:	6865      	ldr	r5, [r4, #4]
 80104d8:	60a5      	str	r5, [r4, #8]
 80104da:	2d00      	cmp	r5, #0
 80104dc:	bfa2      	ittt	ge
 80104de:	6821      	ldrge	r1, [r4, #0]
 80104e0:	f021 0104 	bicge.w	r1, r1, #4
 80104e4:	6021      	strge	r1, [r4, #0]
 80104e6:	b90e      	cbnz	r6, 80104ec <_printf_i+0x118>
 80104e8:	2d00      	cmp	r5, #0
 80104ea:	d04d      	beq.n	8010588 <_printf_i+0x1b4>
 80104ec:	4615      	mov	r5, r2
 80104ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80104f2:	fb03 6711 	mls	r7, r3, r1, r6
 80104f6:	5dc7      	ldrb	r7, [r0, r7]
 80104f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80104fc:	4637      	mov	r7, r6
 80104fe:	42bb      	cmp	r3, r7
 8010500:	460e      	mov	r6, r1
 8010502:	d9f4      	bls.n	80104ee <_printf_i+0x11a>
 8010504:	2b08      	cmp	r3, #8
 8010506:	d10b      	bne.n	8010520 <_printf_i+0x14c>
 8010508:	6823      	ldr	r3, [r4, #0]
 801050a:	07de      	lsls	r6, r3, #31
 801050c:	d508      	bpl.n	8010520 <_printf_i+0x14c>
 801050e:	6923      	ldr	r3, [r4, #16]
 8010510:	6861      	ldr	r1, [r4, #4]
 8010512:	4299      	cmp	r1, r3
 8010514:	bfde      	ittt	le
 8010516:	2330      	movle	r3, #48	; 0x30
 8010518:	f805 3c01 	strble.w	r3, [r5, #-1]
 801051c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010520:	1b52      	subs	r2, r2, r5
 8010522:	6122      	str	r2, [r4, #16]
 8010524:	f8cd a000 	str.w	sl, [sp]
 8010528:	464b      	mov	r3, r9
 801052a:	aa03      	add	r2, sp, #12
 801052c:	4621      	mov	r1, r4
 801052e:	4640      	mov	r0, r8
 8010530:	f7ff fee2 	bl	80102f8 <_printf_common>
 8010534:	3001      	adds	r0, #1
 8010536:	d14c      	bne.n	80105d2 <_printf_i+0x1fe>
 8010538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801053c:	b004      	add	sp, #16
 801053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010542:	4835      	ldr	r0, [pc, #212]	; (8010618 <_printf_i+0x244>)
 8010544:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010548:	6829      	ldr	r1, [r5, #0]
 801054a:	6823      	ldr	r3, [r4, #0]
 801054c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010550:	6029      	str	r1, [r5, #0]
 8010552:	061d      	lsls	r5, r3, #24
 8010554:	d514      	bpl.n	8010580 <_printf_i+0x1ac>
 8010556:	07df      	lsls	r7, r3, #31
 8010558:	bf44      	itt	mi
 801055a:	f043 0320 	orrmi.w	r3, r3, #32
 801055e:	6023      	strmi	r3, [r4, #0]
 8010560:	b91e      	cbnz	r6, 801056a <_printf_i+0x196>
 8010562:	6823      	ldr	r3, [r4, #0]
 8010564:	f023 0320 	bic.w	r3, r3, #32
 8010568:	6023      	str	r3, [r4, #0]
 801056a:	2310      	movs	r3, #16
 801056c:	e7b0      	b.n	80104d0 <_printf_i+0xfc>
 801056e:	6823      	ldr	r3, [r4, #0]
 8010570:	f043 0320 	orr.w	r3, r3, #32
 8010574:	6023      	str	r3, [r4, #0]
 8010576:	2378      	movs	r3, #120	; 0x78
 8010578:	4828      	ldr	r0, [pc, #160]	; (801061c <_printf_i+0x248>)
 801057a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801057e:	e7e3      	b.n	8010548 <_printf_i+0x174>
 8010580:	0659      	lsls	r1, r3, #25
 8010582:	bf48      	it	mi
 8010584:	b2b6      	uxthmi	r6, r6
 8010586:	e7e6      	b.n	8010556 <_printf_i+0x182>
 8010588:	4615      	mov	r5, r2
 801058a:	e7bb      	b.n	8010504 <_printf_i+0x130>
 801058c:	682b      	ldr	r3, [r5, #0]
 801058e:	6826      	ldr	r6, [r4, #0]
 8010590:	6961      	ldr	r1, [r4, #20]
 8010592:	1d18      	adds	r0, r3, #4
 8010594:	6028      	str	r0, [r5, #0]
 8010596:	0635      	lsls	r5, r6, #24
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	d501      	bpl.n	80105a0 <_printf_i+0x1cc>
 801059c:	6019      	str	r1, [r3, #0]
 801059e:	e002      	b.n	80105a6 <_printf_i+0x1d2>
 80105a0:	0670      	lsls	r0, r6, #25
 80105a2:	d5fb      	bpl.n	801059c <_printf_i+0x1c8>
 80105a4:	8019      	strh	r1, [r3, #0]
 80105a6:	2300      	movs	r3, #0
 80105a8:	6123      	str	r3, [r4, #16]
 80105aa:	4615      	mov	r5, r2
 80105ac:	e7ba      	b.n	8010524 <_printf_i+0x150>
 80105ae:	682b      	ldr	r3, [r5, #0]
 80105b0:	1d1a      	adds	r2, r3, #4
 80105b2:	602a      	str	r2, [r5, #0]
 80105b4:	681d      	ldr	r5, [r3, #0]
 80105b6:	6862      	ldr	r2, [r4, #4]
 80105b8:	2100      	movs	r1, #0
 80105ba:	4628      	mov	r0, r5
 80105bc:	f7ef fe10 	bl	80001e0 <memchr>
 80105c0:	b108      	cbz	r0, 80105c6 <_printf_i+0x1f2>
 80105c2:	1b40      	subs	r0, r0, r5
 80105c4:	6060      	str	r0, [r4, #4]
 80105c6:	6863      	ldr	r3, [r4, #4]
 80105c8:	6123      	str	r3, [r4, #16]
 80105ca:	2300      	movs	r3, #0
 80105cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105d0:	e7a8      	b.n	8010524 <_printf_i+0x150>
 80105d2:	6923      	ldr	r3, [r4, #16]
 80105d4:	462a      	mov	r2, r5
 80105d6:	4649      	mov	r1, r9
 80105d8:	4640      	mov	r0, r8
 80105da:	47d0      	blx	sl
 80105dc:	3001      	adds	r0, #1
 80105de:	d0ab      	beq.n	8010538 <_printf_i+0x164>
 80105e0:	6823      	ldr	r3, [r4, #0]
 80105e2:	079b      	lsls	r3, r3, #30
 80105e4:	d413      	bmi.n	801060e <_printf_i+0x23a>
 80105e6:	68e0      	ldr	r0, [r4, #12]
 80105e8:	9b03      	ldr	r3, [sp, #12]
 80105ea:	4298      	cmp	r0, r3
 80105ec:	bfb8      	it	lt
 80105ee:	4618      	movlt	r0, r3
 80105f0:	e7a4      	b.n	801053c <_printf_i+0x168>
 80105f2:	2301      	movs	r3, #1
 80105f4:	4632      	mov	r2, r6
 80105f6:	4649      	mov	r1, r9
 80105f8:	4640      	mov	r0, r8
 80105fa:	47d0      	blx	sl
 80105fc:	3001      	adds	r0, #1
 80105fe:	d09b      	beq.n	8010538 <_printf_i+0x164>
 8010600:	3501      	adds	r5, #1
 8010602:	68e3      	ldr	r3, [r4, #12]
 8010604:	9903      	ldr	r1, [sp, #12]
 8010606:	1a5b      	subs	r3, r3, r1
 8010608:	42ab      	cmp	r3, r5
 801060a:	dcf2      	bgt.n	80105f2 <_printf_i+0x21e>
 801060c:	e7eb      	b.n	80105e6 <_printf_i+0x212>
 801060e:	2500      	movs	r5, #0
 8010610:	f104 0619 	add.w	r6, r4, #25
 8010614:	e7f5      	b.n	8010602 <_printf_i+0x22e>
 8010616:	bf00      	nop
 8010618:	0801521e 	.word	0x0801521e
 801061c:	0801522f 	.word	0x0801522f

08010620 <_scanf_float>:
 8010620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010624:	b087      	sub	sp, #28
 8010626:	4617      	mov	r7, r2
 8010628:	9303      	str	r3, [sp, #12]
 801062a:	688b      	ldr	r3, [r1, #8]
 801062c:	1e5a      	subs	r2, r3, #1
 801062e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010632:	bf83      	ittte	hi
 8010634:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010638:	195b      	addhi	r3, r3, r5
 801063a:	9302      	strhi	r3, [sp, #8]
 801063c:	2300      	movls	r3, #0
 801063e:	bf86      	itte	hi
 8010640:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010644:	608b      	strhi	r3, [r1, #8]
 8010646:	9302      	strls	r3, [sp, #8]
 8010648:	680b      	ldr	r3, [r1, #0]
 801064a:	468b      	mov	fp, r1
 801064c:	2500      	movs	r5, #0
 801064e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010652:	f84b 3b1c 	str.w	r3, [fp], #28
 8010656:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801065a:	4680      	mov	r8, r0
 801065c:	460c      	mov	r4, r1
 801065e:	465e      	mov	r6, fp
 8010660:	46aa      	mov	sl, r5
 8010662:	46a9      	mov	r9, r5
 8010664:	9501      	str	r5, [sp, #4]
 8010666:	68a2      	ldr	r2, [r4, #8]
 8010668:	b152      	cbz	r2, 8010680 <_scanf_float+0x60>
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	2b4e      	cmp	r3, #78	; 0x4e
 8010670:	d864      	bhi.n	801073c <_scanf_float+0x11c>
 8010672:	2b40      	cmp	r3, #64	; 0x40
 8010674:	d83c      	bhi.n	80106f0 <_scanf_float+0xd0>
 8010676:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801067a:	b2c8      	uxtb	r0, r1
 801067c:	280e      	cmp	r0, #14
 801067e:	d93a      	bls.n	80106f6 <_scanf_float+0xd6>
 8010680:	f1b9 0f00 	cmp.w	r9, #0
 8010684:	d003      	beq.n	801068e <_scanf_float+0x6e>
 8010686:	6823      	ldr	r3, [r4, #0]
 8010688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801068c:	6023      	str	r3, [r4, #0]
 801068e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010692:	f1ba 0f01 	cmp.w	sl, #1
 8010696:	f200 8113 	bhi.w	80108c0 <_scanf_float+0x2a0>
 801069a:	455e      	cmp	r6, fp
 801069c:	f200 8105 	bhi.w	80108aa <_scanf_float+0x28a>
 80106a0:	2501      	movs	r5, #1
 80106a2:	4628      	mov	r0, r5
 80106a4:	b007      	add	sp, #28
 80106a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106aa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80106ae:	2a0d      	cmp	r2, #13
 80106b0:	d8e6      	bhi.n	8010680 <_scanf_float+0x60>
 80106b2:	a101      	add	r1, pc, #4	; (adr r1, 80106b8 <_scanf_float+0x98>)
 80106b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80106b8:	080107f7 	.word	0x080107f7
 80106bc:	08010681 	.word	0x08010681
 80106c0:	08010681 	.word	0x08010681
 80106c4:	08010681 	.word	0x08010681
 80106c8:	08010857 	.word	0x08010857
 80106cc:	0801082f 	.word	0x0801082f
 80106d0:	08010681 	.word	0x08010681
 80106d4:	08010681 	.word	0x08010681
 80106d8:	08010805 	.word	0x08010805
 80106dc:	08010681 	.word	0x08010681
 80106e0:	08010681 	.word	0x08010681
 80106e4:	08010681 	.word	0x08010681
 80106e8:	08010681 	.word	0x08010681
 80106ec:	080107bd 	.word	0x080107bd
 80106f0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80106f4:	e7db      	b.n	80106ae <_scanf_float+0x8e>
 80106f6:	290e      	cmp	r1, #14
 80106f8:	d8c2      	bhi.n	8010680 <_scanf_float+0x60>
 80106fa:	a001      	add	r0, pc, #4	; (adr r0, 8010700 <_scanf_float+0xe0>)
 80106fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010700:	080107af 	.word	0x080107af
 8010704:	08010681 	.word	0x08010681
 8010708:	080107af 	.word	0x080107af
 801070c:	08010843 	.word	0x08010843
 8010710:	08010681 	.word	0x08010681
 8010714:	0801075d 	.word	0x0801075d
 8010718:	08010799 	.word	0x08010799
 801071c:	08010799 	.word	0x08010799
 8010720:	08010799 	.word	0x08010799
 8010724:	08010799 	.word	0x08010799
 8010728:	08010799 	.word	0x08010799
 801072c:	08010799 	.word	0x08010799
 8010730:	08010799 	.word	0x08010799
 8010734:	08010799 	.word	0x08010799
 8010738:	08010799 	.word	0x08010799
 801073c:	2b6e      	cmp	r3, #110	; 0x6e
 801073e:	d809      	bhi.n	8010754 <_scanf_float+0x134>
 8010740:	2b60      	cmp	r3, #96	; 0x60
 8010742:	d8b2      	bhi.n	80106aa <_scanf_float+0x8a>
 8010744:	2b54      	cmp	r3, #84	; 0x54
 8010746:	d077      	beq.n	8010838 <_scanf_float+0x218>
 8010748:	2b59      	cmp	r3, #89	; 0x59
 801074a:	d199      	bne.n	8010680 <_scanf_float+0x60>
 801074c:	2d07      	cmp	r5, #7
 801074e:	d197      	bne.n	8010680 <_scanf_float+0x60>
 8010750:	2508      	movs	r5, #8
 8010752:	e029      	b.n	80107a8 <_scanf_float+0x188>
 8010754:	2b74      	cmp	r3, #116	; 0x74
 8010756:	d06f      	beq.n	8010838 <_scanf_float+0x218>
 8010758:	2b79      	cmp	r3, #121	; 0x79
 801075a:	e7f6      	b.n	801074a <_scanf_float+0x12a>
 801075c:	6821      	ldr	r1, [r4, #0]
 801075e:	05c8      	lsls	r0, r1, #23
 8010760:	d51a      	bpl.n	8010798 <_scanf_float+0x178>
 8010762:	9b02      	ldr	r3, [sp, #8]
 8010764:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010768:	6021      	str	r1, [r4, #0]
 801076a:	f109 0901 	add.w	r9, r9, #1
 801076e:	b11b      	cbz	r3, 8010778 <_scanf_float+0x158>
 8010770:	3b01      	subs	r3, #1
 8010772:	3201      	adds	r2, #1
 8010774:	9302      	str	r3, [sp, #8]
 8010776:	60a2      	str	r2, [r4, #8]
 8010778:	68a3      	ldr	r3, [r4, #8]
 801077a:	3b01      	subs	r3, #1
 801077c:	60a3      	str	r3, [r4, #8]
 801077e:	6923      	ldr	r3, [r4, #16]
 8010780:	3301      	adds	r3, #1
 8010782:	6123      	str	r3, [r4, #16]
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	3b01      	subs	r3, #1
 8010788:	2b00      	cmp	r3, #0
 801078a:	607b      	str	r3, [r7, #4]
 801078c:	f340 8084 	ble.w	8010898 <_scanf_float+0x278>
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	3301      	adds	r3, #1
 8010794:	603b      	str	r3, [r7, #0]
 8010796:	e766      	b.n	8010666 <_scanf_float+0x46>
 8010798:	eb1a 0f05 	cmn.w	sl, r5
 801079c:	f47f af70 	bne.w	8010680 <_scanf_float+0x60>
 80107a0:	6822      	ldr	r2, [r4, #0]
 80107a2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80107a6:	6022      	str	r2, [r4, #0]
 80107a8:	f806 3b01 	strb.w	r3, [r6], #1
 80107ac:	e7e4      	b.n	8010778 <_scanf_float+0x158>
 80107ae:	6822      	ldr	r2, [r4, #0]
 80107b0:	0610      	lsls	r0, r2, #24
 80107b2:	f57f af65 	bpl.w	8010680 <_scanf_float+0x60>
 80107b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80107ba:	e7f4      	b.n	80107a6 <_scanf_float+0x186>
 80107bc:	f1ba 0f00 	cmp.w	sl, #0
 80107c0:	d10e      	bne.n	80107e0 <_scanf_float+0x1c0>
 80107c2:	f1b9 0f00 	cmp.w	r9, #0
 80107c6:	d10e      	bne.n	80107e6 <_scanf_float+0x1c6>
 80107c8:	6822      	ldr	r2, [r4, #0]
 80107ca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80107ce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80107d2:	d108      	bne.n	80107e6 <_scanf_float+0x1c6>
 80107d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80107d8:	6022      	str	r2, [r4, #0]
 80107da:	f04f 0a01 	mov.w	sl, #1
 80107de:	e7e3      	b.n	80107a8 <_scanf_float+0x188>
 80107e0:	f1ba 0f02 	cmp.w	sl, #2
 80107e4:	d055      	beq.n	8010892 <_scanf_float+0x272>
 80107e6:	2d01      	cmp	r5, #1
 80107e8:	d002      	beq.n	80107f0 <_scanf_float+0x1d0>
 80107ea:	2d04      	cmp	r5, #4
 80107ec:	f47f af48 	bne.w	8010680 <_scanf_float+0x60>
 80107f0:	3501      	adds	r5, #1
 80107f2:	b2ed      	uxtb	r5, r5
 80107f4:	e7d8      	b.n	80107a8 <_scanf_float+0x188>
 80107f6:	f1ba 0f01 	cmp.w	sl, #1
 80107fa:	f47f af41 	bne.w	8010680 <_scanf_float+0x60>
 80107fe:	f04f 0a02 	mov.w	sl, #2
 8010802:	e7d1      	b.n	80107a8 <_scanf_float+0x188>
 8010804:	b97d      	cbnz	r5, 8010826 <_scanf_float+0x206>
 8010806:	f1b9 0f00 	cmp.w	r9, #0
 801080a:	f47f af3c 	bne.w	8010686 <_scanf_float+0x66>
 801080e:	6822      	ldr	r2, [r4, #0]
 8010810:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010814:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010818:	f47f af39 	bne.w	801068e <_scanf_float+0x6e>
 801081c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010820:	6022      	str	r2, [r4, #0]
 8010822:	2501      	movs	r5, #1
 8010824:	e7c0      	b.n	80107a8 <_scanf_float+0x188>
 8010826:	2d03      	cmp	r5, #3
 8010828:	d0e2      	beq.n	80107f0 <_scanf_float+0x1d0>
 801082a:	2d05      	cmp	r5, #5
 801082c:	e7de      	b.n	80107ec <_scanf_float+0x1cc>
 801082e:	2d02      	cmp	r5, #2
 8010830:	f47f af26 	bne.w	8010680 <_scanf_float+0x60>
 8010834:	2503      	movs	r5, #3
 8010836:	e7b7      	b.n	80107a8 <_scanf_float+0x188>
 8010838:	2d06      	cmp	r5, #6
 801083a:	f47f af21 	bne.w	8010680 <_scanf_float+0x60>
 801083e:	2507      	movs	r5, #7
 8010840:	e7b2      	b.n	80107a8 <_scanf_float+0x188>
 8010842:	6822      	ldr	r2, [r4, #0]
 8010844:	0591      	lsls	r1, r2, #22
 8010846:	f57f af1b 	bpl.w	8010680 <_scanf_float+0x60>
 801084a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801084e:	6022      	str	r2, [r4, #0]
 8010850:	f8cd 9004 	str.w	r9, [sp, #4]
 8010854:	e7a8      	b.n	80107a8 <_scanf_float+0x188>
 8010856:	6822      	ldr	r2, [r4, #0]
 8010858:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801085c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010860:	d006      	beq.n	8010870 <_scanf_float+0x250>
 8010862:	0550      	lsls	r0, r2, #21
 8010864:	f57f af0c 	bpl.w	8010680 <_scanf_float+0x60>
 8010868:	f1b9 0f00 	cmp.w	r9, #0
 801086c:	f43f af0f 	beq.w	801068e <_scanf_float+0x6e>
 8010870:	0591      	lsls	r1, r2, #22
 8010872:	bf58      	it	pl
 8010874:	9901      	ldrpl	r1, [sp, #4]
 8010876:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801087a:	bf58      	it	pl
 801087c:	eba9 0101 	subpl.w	r1, r9, r1
 8010880:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010884:	bf58      	it	pl
 8010886:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801088a:	6022      	str	r2, [r4, #0]
 801088c:	f04f 0900 	mov.w	r9, #0
 8010890:	e78a      	b.n	80107a8 <_scanf_float+0x188>
 8010892:	f04f 0a03 	mov.w	sl, #3
 8010896:	e787      	b.n	80107a8 <_scanf_float+0x188>
 8010898:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801089c:	4639      	mov	r1, r7
 801089e:	4640      	mov	r0, r8
 80108a0:	4798      	blx	r3
 80108a2:	2800      	cmp	r0, #0
 80108a4:	f43f aedf 	beq.w	8010666 <_scanf_float+0x46>
 80108a8:	e6ea      	b.n	8010680 <_scanf_float+0x60>
 80108aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80108ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80108b2:	463a      	mov	r2, r7
 80108b4:	4640      	mov	r0, r8
 80108b6:	4798      	blx	r3
 80108b8:	6923      	ldr	r3, [r4, #16]
 80108ba:	3b01      	subs	r3, #1
 80108bc:	6123      	str	r3, [r4, #16]
 80108be:	e6ec      	b.n	801069a <_scanf_float+0x7a>
 80108c0:	1e6b      	subs	r3, r5, #1
 80108c2:	2b06      	cmp	r3, #6
 80108c4:	d825      	bhi.n	8010912 <_scanf_float+0x2f2>
 80108c6:	2d02      	cmp	r5, #2
 80108c8:	d836      	bhi.n	8010938 <_scanf_float+0x318>
 80108ca:	455e      	cmp	r6, fp
 80108cc:	f67f aee8 	bls.w	80106a0 <_scanf_float+0x80>
 80108d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80108d4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80108d8:	463a      	mov	r2, r7
 80108da:	4640      	mov	r0, r8
 80108dc:	4798      	blx	r3
 80108de:	6923      	ldr	r3, [r4, #16]
 80108e0:	3b01      	subs	r3, #1
 80108e2:	6123      	str	r3, [r4, #16]
 80108e4:	e7f1      	b.n	80108ca <_scanf_float+0x2aa>
 80108e6:	9802      	ldr	r0, [sp, #8]
 80108e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80108ec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80108f0:	9002      	str	r0, [sp, #8]
 80108f2:	463a      	mov	r2, r7
 80108f4:	4640      	mov	r0, r8
 80108f6:	4798      	blx	r3
 80108f8:	6923      	ldr	r3, [r4, #16]
 80108fa:	3b01      	subs	r3, #1
 80108fc:	6123      	str	r3, [r4, #16]
 80108fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010902:	fa5f fa8a 	uxtb.w	sl, sl
 8010906:	f1ba 0f02 	cmp.w	sl, #2
 801090a:	d1ec      	bne.n	80108e6 <_scanf_float+0x2c6>
 801090c:	3d03      	subs	r5, #3
 801090e:	b2ed      	uxtb	r5, r5
 8010910:	1b76      	subs	r6, r6, r5
 8010912:	6823      	ldr	r3, [r4, #0]
 8010914:	05da      	lsls	r2, r3, #23
 8010916:	d52f      	bpl.n	8010978 <_scanf_float+0x358>
 8010918:	055b      	lsls	r3, r3, #21
 801091a:	d510      	bpl.n	801093e <_scanf_float+0x31e>
 801091c:	455e      	cmp	r6, fp
 801091e:	f67f aebf 	bls.w	80106a0 <_scanf_float+0x80>
 8010922:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010926:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801092a:	463a      	mov	r2, r7
 801092c:	4640      	mov	r0, r8
 801092e:	4798      	blx	r3
 8010930:	6923      	ldr	r3, [r4, #16]
 8010932:	3b01      	subs	r3, #1
 8010934:	6123      	str	r3, [r4, #16]
 8010936:	e7f1      	b.n	801091c <_scanf_float+0x2fc>
 8010938:	46aa      	mov	sl, r5
 801093a:	9602      	str	r6, [sp, #8]
 801093c:	e7df      	b.n	80108fe <_scanf_float+0x2de>
 801093e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010942:	6923      	ldr	r3, [r4, #16]
 8010944:	2965      	cmp	r1, #101	; 0x65
 8010946:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801094a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801094e:	6123      	str	r3, [r4, #16]
 8010950:	d00c      	beq.n	801096c <_scanf_float+0x34c>
 8010952:	2945      	cmp	r1, #69	; 0x45
 8010954:	d00a      	beq.n	801096c <_scanf_float+0x34c>
 8010956:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801095a:	463a      	mov	r2, r7
 801095c:	4640      	mov	r0, r8
 801095e:	4798      	blx	r3
 8010960:	6923      	ldr	r3, [r4, #16]
 8010962:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010966:	3b01      	subs	r3, #1
 8010968:	1eb5      	subs	r5, r6, #2
 801096a:	6123      	str	r3, [r4, #16]
 801096c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010970:	463a      	mov	r2, r7
 8010972:	4640      	mov	r0, r8
 8010974:	4798      	blx	r3
 8010976:	462e      	mov	r6, r5
 8010978:	6825      	ldr	r5, [r4, #0]
 801097a:	f015 0510 	ands.w	r5, r5, #16
 801097e:	d159      	bne.n	8010a34 <_scanf_float+0x414>
 8010980:	7035      	strb	r5, [r6, #0]
 8010982:	6823      	ldr	r3, [r4, #0]
 8010984:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801098c:	d11b      	bne.n	80109c6 <_scanf_float+0x3a6>
 801098e:	9b01      	ldr	r3, [sp, #4]
 8010990:	454b      	cmp	r3, r9
 8010992:	eba3 0209 	sub.w	r2, r3, r9
 8010996:	d123      	bne.n	80109e0 <_scanf_float+0x3c0>
 8010998:	2200      	movs	r2, #0
 801099a:	4659      	mov	r1, fp
 801099c:	4640      	mov	r0, r8
 801099e:	f000 fe99 	bl	80116d4 <_strtod_r>
 80109a2:	6822      	ldr	r2, [r4, #0]
 80109a4:	9b03      	ldr	r3, [sp, #12]
 80109a6:	f012 0f02 	tst.w	r2, #2
 80109aa:	ec57 6b10 	vmov	r6, r7, d0
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	d021      	beq.n	80109f6 <_scanf_float+0x3d6>
 80109b2:	9903      	ldr	r1, [sp, #12]
 80109b4:	1d1a      	adds	r2, r3, #4
 80109b6:	600a      	str	r2, [r1, #0]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	e9c3 6700 	strd	r6, r7, [r3]
 80109be:	68e3      	ldr	r3, [r4, #12]
 80109c0:	3301      	adds	r3, #1
 80109c2:	60e3      	str	r3, [r4, #12]
 80109c4:	e66d      	b.n	80106a2 <_scanf_float+0x82>
 80109c6:	9b04      	ldr	r3, [sp, #16]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d0e5      	beq.n	8010998 <_scanf_float+0x378>
 80109cc:	9905      	ldr	r1, [sp, #20]
 80109ce:	230a      	movs	r3, #10
 80109d0:	462a      	mov	r2, r5
 80109d2:	3101      	adds	r1, #1
 80109d4:	4640      	mov	r0, r8
 80109d6:	f000 ff05 	bl	80117e4 <_strtol_r>
 80109da:	9b04      	ldr	r3, [sp, #16]
 80109dc:	9e05      	ldr	r6, [sp, #20]
 80109de:	1ac2      	subs	r2, r0, r3
 80109e0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80109e4:	429e      	cmp	r6, r3
 80109e6:	bf28      	it	cs
 80109e8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80109ec:	4912      	ldr	r1, [pc, #72]	; (8010a38 <_scanf_float+0x418>)
 80109ee:	4630      	mov	r0, r6
 80109f0:	f000 f82c 	bl	8010a4c <siprintf>
 80109f4:	e7d0      	b.n	8010998 <_scanf_float+0x378>
 80109f6:	9903      	ldr	r1, [sp, #12]
 80109f8:	f012 0f04 	tst.w	r2, #4
 80109fc:	f103 0204 	add.w	r2, r3, #4
 8010a00:	600a      	str	r2, [r1, #0]
 8010a02:	d1d9      	bne.n	80109b8 <_scanf_float+0x398>
 8010a04:	f8d3 8000 	ldr.w	r8, [r3]
 8010a08:	ee10 2a10 	vmov	r2, s0
 8010a0c:	ee10 0a10 	vmov	r0, s0
 8010a10:	463b      	mov	r3, r7
 8010a12:	4639      	mov	r1, r7
 8010a14:	f7f0 f88a 	bl	8000b2c <__aeabi_dcmpun>
 8010a18:	b128      	cbz	r0, 8010a26 <_scanf_float+0x406>
 8010a1a:	4808      	ldr	r0, [pc, #32]	; (8010a3c <_scanf_float+0x41c>)
 8010a1c:	f000 f810 	bl	8010a40 <nanf>
 8010a20:	ed88 0a00 	vstr	s0, [r8]
 8010a24:	e7cb      	b.n	80109be <_scanf_float+0x39e>
 8010a26:	4630      	mov	r0, r6
 8010a28:	4639      	mov	r1, r7
 8010a2a:	f7f0 f8dd 	bl	8000be8 <__aeabi_d2f>
 8010a2e:	f8c8 0000 	str.w	r0, [r8]
 8010a32:	e7c4      	b.n	80109be <_scanf_float+0x39e>
 8010a34:	2500      	movs	r5, #0
 8010a36:	e634      	b.n	80106a2 <_scanf_float+0x82>
 8010a38:	08015240 	.word	0x08015240
 8010a3c:	08015648 	.word	0x08015648

08010a40 <nanf>:
 8010a40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010a48 <nanf+0x8>
 8010a44:	4770      	bx	lr
 8010a46:	bf00      	nop
 8010a48:	7fc00000 	.word	0x7fc00000

08010a4c <siprintf>:
 8010a4c:	b40e      	push	{r1, r2, r3}
 8010a4e:	b500      	push	{lr}
 8010a50:	b09c      	sub	sp, #112	; 0x70
 8010a52:	ab1d      	add	r3, sp, #116	; 0x74
 8010a54:	9002      	str	r0, [sp, #8]
 8010a56:	9006      	str	r0, [sp, #24]
 8010a58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010a5c:	4809      	ldr	r0, [pc, #36]	; (8010a84 <siprintf+0x38>)
 8010a5e:	9107      	str	r1, [sp, #28]
 8010a60:	9104      	str	r1, [sp, #16]
 8010a62:	4909      	ldr	r1, [pc, #36]	; (8010a88 <siprintf+0x3c>)
 8010a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a68:	9105      	str	r1, [sp, #20]
 8010a6a:	6800      	ldr	r0, [r0, #0]
 8010a6c:	9301      	str	r3, [sp, #4]
 8010a6e:	a902      	add	r1, sp, #8
 8010a70:	f002 fed6 	bl	8013820 <_svfiprintf_r>
 8010a74:	9b02      	ldr	r3, [sp, #8]
 8010a76:	2200      	movs	r2, #0
 8010a78:	701a      	strb	r2, [r3, #0]
 8010a7a:	b01c      	add	sp, #112	; 0x70
 8010a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a80:	b003      	add	sp, #12
 8010a82:	4770      	bx	lr
 8010a84:	20000014 	.word	0x20000014
 8010a88:	ffff0208 	.word	0xffff0208

08010a8c <sulp>:
 8010a8c:	b570      	push	{r4, r5, r6, lr}
 8010a8e:	4604      	mov	r4, r0
 8010a90:	460d      	mov	r5, r1
 8010a92:	ec45 4b10 	vmov	d0, r4, r5
 8010a96:	4616      	mov	r6, r2
 8010a98:	f002 fc20 	bl	80132dc <__ulp>
 8010a9c:	ec51 0b10 	vmov	r0, r1, d0
 8010aa0:	b17e      	cbz	r6, 8010ac2 <sulp+0x36>
 8010aa2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010aa6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	dd09      	ble.n	8010ac2 <sulp+0x36>
 8010aae:	051b      	lsls	r3, r3, #20
 8010ab0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010ab4:	2400      	movs	r4, #0
 8010ab6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010aba:	4622      	mov	r2, r4
 8010abc:	462b      	mov	r3, r5
 8010abe:	f7ef fd9b 	bl	80005f8 <__aeabi_dmul>
 8010ac2:	bd70      	pop	{r4, r5, r6, pc}
 8010ac4:	0000      	movs	r0, r0
	...

08010ac8 <_strtod_l>:
 8010ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010acc:	ed2d 8b02 	vpush	{d8}
 8010ad0:	b09d      	sub	sp, #116	; 0x74
 8010ad2:	461f      	mov	r7, r3
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	9318      	str	r3, [sp, #96]	; 0x60
 8010ad8:	4ba2      	ldr	r3, [pc, #648]	; (8010d64 <_strtod_l+0x29c>)
 8010ada:	9213      	str	r2, [sp, #76]	; 0x4c
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	9305      	str	r3, [sp, #20]
 8010ae0:	4604      	mov	r4, r0
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	4688      	mov	r8, r1
 8010ae6:	f7ef fb73 	bl	80001d0 <strlen>
 8010aea:	f04f 0a00 	mov.w	sl, #0
 8010aee:	4605      	mov	r5, r0
 8010af0:	f04f 0b00 	mov.w	fp, #0
 8010af4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010af8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010afa:	781a      	ldrb	r2, [r3, #0]
 8010afc:	2a2b      	cmp	r2, #43	; 0x2b
 8010afe:	d04e      	beq.n	8010b9e <_strtod_l+0xd6>
 8010b00:	d83b      	bhi.n	8010b7a <_strtod_l+0xb2>
 8010b02:	2a0d      	cmp	r2, #13
 8010b04:	d834      	bhi.n	8010b70 <_strtod_l+0xa8>
 8010b06:	2a08      	cmp	r2, #8
 8010b08:	d834      	bhi.n	8010b74 <_strtod_l+0xac>
 8010b0a:	2a00      	cmp	r2, #0
 8010b0c:	d03e      	beq.n	8010b8c <_strtod_l+0xc4>
 8010b0e:	2300      	movs	r3, #0
 8010b10:	930a      	str	r3, [sp, #40]	; 0x28
 8010b12:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010b14:	7833      	ldrb	r3, [r6, #0]
 8010b16:	2b30      	cmp	r3, #48	; 0x30
 8010b18:	f040 80b0 	bne.w	8010c7c <_strtod_l+0x1b4>
 8010b1c:	7873      	ldrb	r3, [r6, #1]
 8010b1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010b22:	2b58      	cmp	r3, #88	; 0x58
 8010b24:	d168      	bne.n	8010bf8 <_strtod_l+0x130>
 8010b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b28:	9301      	str	r3, [sp, #4]
 8010b2a:	ab18      	add	r3, sp, #96	; 0x60
 8010b2c:	9702      	str	r7, [sp, #8]
 8010b2e:	9300      	str	r3, [sp, #0]
 8010b30:	4a8d      	ldr	r2, [pc, #564]	; (8010d68 <_strtod_l+0x2a0>)
 8010b32:	ab19      	add	r3, sp, #100	; 0x64
 8010b34:	a917      	add	r1, sp, #92	; 0x5c
 8010b36:	4620      	mov	r0, r4
 8010b38:	f001 fd38 	bl	80125ac <__gethex>
 8010b3c:	f010 0707 	ands.w	r7, r0, #7
 8010b40:	4605      	mov	r5, r0
 8010b42:	d005      	beq.n	8010b50 <_strtod_l+0x88>
 8010b44:	2f06      	cmp	r7, #6
 8010b46:	d12c      	bne.n	8010ba2 <_strtod_l+0xda>
 8010b48:	3601      	adds	r6, #1
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	9617      	str	r6, [sp, #92]	; 0x5c
 8010b4e:	930a      	str	r3, [sp, #40]	; 0x28
 8010b50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	f040 8590 	bne.w	8011678 <_strtod_l+0xbb0>
 8010b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b5a:	b1eb      	cbz	r3, 8010b98 <_strtod_l+0xd0>
 8010b5c:	4652      	mov	r2, sl
 8010b5e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010b62:	ec43 2b10 	vmov	d0, r2, r3
 8010b66:	b01d      	add	sp, #116	; 0x74
 8010b68:	ecbd 8b02 	vpop	{d8}
 8010b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b70:	2a20      	cmp	r2, #32
 8010b72:	d1cc      	bne.n	8010b0e <_strtod_l+0x46>
 8010b74:	3301      	adds	r3, #1
 8010b76:	9317      	str	r3, [sp, #92]	; 0x5c
 8010b78:	e7be      	b.n	8010af8 <_strtod_l+0x30>
 8010b7a:	2a2d      	cmp	r2, #45	; 0x2d
 8010b7c:	d1c7      	bne.n	8010b0e <_strtod_l+0x46>
 8010b7e:	2201      	movs	r2, #1
 8010b80:	920a      	str	r2, [sp, #40]	; 0x28
 8010b82:	1c5a      	adds	r2, r3, #1
 8010b84:	9217      	str	r2, [sp, #92]	; 0x5c
 8010b86:	785b      	ldrb	r3, [r3, #1]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d1c2      	bne.n	8010b12 <_strtod_l+0x4a>
 8010b8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010b8e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f040 856e 	bne.w	8011674 <_strtod_l+0xbac>
 8010b98:	4652      	mov	r2, sl
 8010b9a:	465b      	mov	r3, fp
 8010b9c:	e7e1      	b.n	8010b62 <_strtod_l+0x9a>
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	e7ee      	b.n	8010b80 <_strtod_l+0xb8>
 8010ba2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010ba4:	b13a      	cbz	r2, 8010bb6 <_strtod_l+0xee>
 8010ba6:	2135      	movs	r1, #53	; 0x35
 8010ba8:	a81a      	add	r0, sp, #104	; 0x68
 8010baa:	f002 fca2 	bl	80134f2 <__copybits>
 8010bae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	f002 f861 	bl	8012c78 <_Bfree>
 8010bb6:	3f01      	subs	r7, #1
 8010bb8:	2f04      	cmp	r7, #4
 8010bba:	d806      	bhi.n	8010bca <_strtod_l+0x102>
 8010bbc:	e8df f007 	tbb	[pc, r7]
 8010bc0:	1714030a 	.word	0x1714030a
 8010bc4:	0a          	.byte	0x0a
 8010bc5:	00          	.byte	0x00
 8010bc6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8010bca:	0728      	lsls	r0, r5, #28
 8010bcc:	d5c0      	bpl.n	8010b50 <_strtod_l+0x88>
 8010bce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010bd2:	e7bd      	b.n	8010b50 <_strtod_l+0x88>
 8010bd4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010bd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010bda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010bde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010be2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010be6:	e7f0      	b.n	8010bca <_strtod_l+0x102>
 8010be8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010d6c <_strtod_l+0x2a4>
 8010bec:	e7ed      	b.n	8010bca <_strtod_l+0x102>
 8010bee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010bf2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010bf6:	e7e8      	b.n	8010bca <_strtod_l+0x102>
 8010bf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010bfa:	1c5a      	adds	r2, r3, #1
 8010bfc:	9217      	str	r2, [sp, #92]	; 0x5c
 8010bfe:	785b      	ldrb	r3, [r3, #1]
 8010c00:	2b30      	cmp	r3, #48	; 0x30
 8010c02:	d0f9      	beq.n	8010bf8 <_strtod_l+0x130>
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d0a3      	beq.n	8010b50 <_strtod_l+0x88>
 8010c08:	2301      	movs	r3, #1
 8010c0a:	f04f 0900 	mov.w	r9, #0
 8010c0e:	9304      	str	r3, [sp, #16]
 8010c10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010c12:	9308      	str	r3, [sp, #32]
 8010c14:	f8cd 901c 	str.w	r9, [sp, #28]
 8010c18:	464f      	mov	r7, r9
 8010c1a:	220a      	movs	r2, #10
 8010c1c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010c1e:	7806      	ldrb	r6, [r0, #0]
 8010c20:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010c24:	b2d9      	uxtb	r1, r3
 8010c26:	2909      	cmp	r1, #9
 8010c28:	d92a      	bls.n	8010c80 <_strtod_l+0x1b8>
 8010c2a:	9905      	ldr	r1, [sp, #20]
 8010c2c:	462a      	mov	r2, r5
 8010c2e:	f002 ff0f 	bl	8013a50 <strncmp>
 8010c32:	b398      	cbz	r0, 8010c9c <_strtod_l+0x1d4>
 8010c34:	2000      	movs	r0, #0
 8010c36:	4632      	mov	r2, r6
 8010c38:	463d      	mov	r5, r7
 8010c3a:	9005      	str	r0, [sp, #20]
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	2a65      	cmp	r2, #101	; 0x65
 8010c40:	d001      	beq.n	8010c46 <_strtod_l+0x17e>
 8010c42:	2a45      	cmp	r2, #69	; 0x45
 8010c44:	d118      	bne.n	8010c78 <_strtod_l+0x1b0>
 8010c46:	b91d      	cbnz	r5, 8010c50 <_strtod_l+0x188>
 8010c48:	9a04      	ldr	r2, [sp, #16]
 8010c4a:	4302      	orrs	r2, r0
 8010c4c:	d09e      	beq.n	8010b8c <_strtod_l+0xc4>
 8010c4e:	2500      	movs	r5, #0
 8010c50:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8010c54:	f108 0201 	add.w	r2, r8, #1
 8010c58:	9217      	str	r2, [sp, #92]	; 0x5c
 8010c5a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010c5e:	2a2b      	cmp	r2, #43	; 0x2b
 8010c60:	d075      	beq.n	8010d4e <_strtod_l+0x286>
 8010c62:	2a2d      	cmp	r2, #45	; 0x2d
 8010c64:	d07b      	beq.n	8010d5e <_strtod_l+0x296>
 8010c66:	f04f 0c00 	mov.w	ip, #0
 8010c6a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010c6e:	2909      	cmp	r1, #9
 8010c70:	f240 8082 	bls.w	8010d78 <_strtod_l+0x2b0>
 8010c74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010c78:	2600      	movs	r6, #0
 8010c7a:	e09d      	b.n	8010db8 <_strtod_l+0x2f0>
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	e7c4      	b.n	8010c0a <_strtod_l+0x142>
 8010c80:	2f08      	cmp	r7, #8
 8010c82:	bfd8      	it	le
 8010c84:	9907      	ldrle	r1, [sp, #28]
 8010c86:	f100 0001 	add.w	r0, r0, #1
 8010c8a:	bfda      	itte	le
 8010c8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010c90:	9307      	strle	r3, [sp, #28]
 8010c92:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010c96:	3701      	adds	r7, #1
 8010c98:	9017      	str	r0, [sp, #92]	; 0x5c
 8010c9a:	e7bf      	b.n	8010c1c <_strtod_l+0x154>
 8010c9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010c9e:	195a      	adds	r2, r3, r5
 8010ca0:	9217      	str	r2, [sp, #92]	; 0x5c
 8010ca2:	5d5a      	ldrb	r2, [r3, r5]
 8010ca4:	2f00      	cmp	r7, #0
 8010ca6:	d037      	beq.n	8010d18 <_strtod_l+0x250>
 8010ca8:	9005      	str	r0, [sp, #20]
 8010caa:	463d      	mov	r5, r7
 8010cac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010cb0:	2b09      	cmp	r3, #9
 8010cb2:	d912      	bls.n	8010cda <_strtod_l+0x212>
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	e7c2      	b.n	8010c3e <_strtod_l+0x176>
 8010cb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010cba:	1c5a      	adds	r2, r3, #1
 8010cbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8010cbe:	785a      	ldrb	r2, [r3, #1]
 8010cc0:	3001      	adds	r0, #1
 8010cc2:	2a30      	cmp	r2, #48	; 0x30
 8010cc4:	d0f8      	beq.n	8010cb8 <_strtod_l+0x1f0>
 8010cc6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010cca:	2b08      	cmp	r3, #8
 8010ccc:	f200 84d9 	bhi.w	8011682 <_strtod_l+0xbba>
 8010cd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010cd2:	9005      	str	r0, [sp, #20]
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	9308      	str	r3, [sp, #32]
 8010cd8:	4605      	mov	r5, r0
 8010cda:	3a30      	subs	r2, #48	; 0x30
 8010cdc:	f100 0301 	add.w	r3, r0, #1
 8010ce0:	d014      	beq.n	8010d0c <_strtod_l+0x244>
 8010ce2:	9905      	ldr	r1, [sp, #20]
 8010ce4:	4419      	add	r1, r3
 8010ce6:	9105      	str	r1, [sp, #20]
 8010ce8:	462b      	mov	r3, r5
 8010cea:	eb00 0e05 	add.w	lr, r0, r5
 8010cee:	210a      	movs	r1, #10
 8010cf0:	4573      	cmp	r3, lr
 8010cf2:	d113      	bne.n	8010d1c <_strtod_l+0x254>
 8010cf4:	182b      	adds	r3, r5, r0
 8010cf6:	2b08      	cmp	r3, #8
 8010cf8:	f105 0501 	add.w	r5, r5, #1
 8010cfc:	4405      	add	r5, r0
 8010cfe:	dc1c      	bgt.n	8010d3a <_strtod_l+0x272>
 8010d00:	9907      	ldr	r1, [sp, #28]
 8010d02:	230a      	movs	r3, #10
 8010d04:	fb03 2301 	mla	r3, r3, r1, r2
 8010d08:	9307      	str	r3, [sp, #28]
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010d0e:	1c51      	adds	r1, r2, #1
 8010d10:	9117      	str	r1, [sp, #92]	; 0x5c
 8010d12:	7852      	ldrb	r2, [r2, #1]
 8010d14:	4618      	mov	r0, r3
 8010d16:	e7c9      	b.n	8010cac <_strtod_l+0x1e4>
 8010d18:	4638      	mov	r0, r7
 8010d1a:	e7d2      	b.n	8010cc2 <_strtod_l+0x1fa>
 8010d1c:	2b08      	cmp	r3, #8
 8010d1e:	dc04      	bgt.n	8010d2a <_strtod_l+0x262>
 8010d20:	9e07      	ldr	r6, [sp, #28]
 8010d22:	434e      	muls	r6, r1
 8010d24:	9607      	str	r6, [sp, #28]
 8010d26:	3301      	adds	r3, #1
 8010d28:	e7e2      	b.n	8010cf0 <_strtod_l+0x228>
 8010d2a:	f103 0c01 	add.w	ip, r3, #1
 8010d2e:	f1bc 0f10 	cmp.w	ip, #16
 8010d32:	bfd8      	it	le
 8010d34:	fb01 f909 	mulle.w	r9, r1, r9
 8010d38:	e7f5      	b.n	8010d26 <_strtod_l+0x25e>
 8010d3a:	2d10      	cmp	r5, #16
 8010d3c:	bfdc      	itt	le
 8010d3e:	230a      	movle	r3, #10
 8010d40:	fb03 2909 	mlale	r9, r3, r9, r2
 8010d44:	e7e1      	b.n	8010d0a <_strtod_l+0x242>
 8010d46:	2300      	movs	r3, #0
 8010d48:	9305      	str	r3, [sp, #20]
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	e77c      	b.n	8010c48 <_strtod_l+0x180>
 8010d4e:	f04f 0c00 	mov.w	ip, #0
 8010d52:	f108 0202 	add.w	r2, r8, #2
 8010d56:	9217      	str	r2, [sp, #92]	; 0x5c
 8010d58:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010d5c:	e785      	b.n	8010c6a <_strtod_l+0x1a2>
 8010d5e:	f04f 0c01 	mov.w	ip, #1
 8010d62:	e7f6      	b.n	8010d52 <_strtod_l+0x28a>
 8010d64:	08015490 	.word	0x08015490
 8010d68:	08015248 	.word	0x08015248
 8010d6c:	7ff00000 	.word	0x7ff00000
 8010d70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010d72:	1c51      	adds	r1, r2, #1
 8010d74:	9117      	str	r1, [sp, #92]	; 0x5c
 8010d76:	7852      	ldrb	r2, [r2, #1]
 8010d78:	2a30      	cmp	r2, #48	; 0x30
 8010d7a:	d0f9      	beq.n	8010d70 <_strtod_l+0x2a8>
 8010d7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010d80:	2908      	cmp	r1, #8
 8010d82:	f63f af79 	bhi.w	8010c78 <_strtod_l+0x1b0>
 8010d86:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010d8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010d8c:	9206      	str	r2, [sp, #24]
 8010d8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010d90:	1c51      	adds	r1, r2, #1
 8010d92:	9117      	str	r1, [sp, #92]	; 0x5c
 8010d94:	7852      	ldrb	r2, [r2, #1]
 8010d96:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010d9a:	2e09      	cmp	r6, #9
 8010d9c:	d937      	bls.n	8010e0e <_strtod_l+0x346>
 8010d9e:	9e06      	ldr	r6, [sp, #24]
 8010da0:	1b89      	subs	r1, r1, r6
 8010da2:	2908      	cmp	r1, #8
 8010da4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010da8:	dc02      	bgt.n	8010db0 <_strtod_l+0x2e8>
 8010daa:	4576      	cmp	r6, lr
 8010dac:	bfa8      	it	ge
 8010dae:	4676      	movge	r6, lr
 8010db0:	f1bc 0f00 	cmp.w	ip, #0
 8010db4:	d000      	beq.n	8010db8 <_strtod_l+0x2f0>
 8010db6:	4276      	negs	r6, r6
 8010db8:	2d00      	cmp	r5, #0
 8010dba:	d14d      	bne.n	8010e58 <_strtod_l+0x390>
 8010dbc:	9904      	ldr	r1, [sp, #16]
 8010dbe:	4301      	orrs	r1, r0
 8010dc0:	f47f aec6 	bne.w	8010b50 <_strtod_l+0x88>
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	f47f aee1 	bne.w	8010b8c <_strtod_l+0xc4>
 8010dca:	2a69      	cmp	r2, #105	; 0x69
 8010dcc:	d027      	beq.n	8010e1e <_strtod_l+0x356>
 8010dce:	dc24      	bgt.n	8010e1a <_strtod_l+0x352>
 8010dd0:	2a49      	cmp	r2, #73	; 0x49
 8010dd2:	d024      	beq.n	8010e1e <_strtod_l+0x356>
 8010dd4:	2a4e      	cmp	r2, #78	; 0x4e
 8010dd6:	f47f aed9 	bne.w	8010b8c <_strtod_l+0xc4>
 8010dda:	499f      	ldr	r1, [pc, #636]	; (8011058 <_strtod_l+0x590>)
 8010ddc:	a817      	add	r0, sp, #92	; 0x5c
 8010dde:	f001 fe3d 	bl	8012a5c <__match>
 8010de2:	2800      	cmp	r0, #0
 8010de4:	f43f aed2 	beq.w	8010b8c <_strtod_l+0xc4>
 8010de8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	2b28      	cmp	r3, #40	; 0x28
 8010dee:	d12d      	bne.n	8010e4c <_strtod_l+0x384>
 8010df0:	499a      	ldr	r1, [pc, #616]	; (801105c <_strtod_l+0x594>)
 8010df2:	aa1a      	add	r2, sp, #104	; 0x68
 8010df4:	a817      	add	r0, sp, #92	; 0x5c
 8010df6:	f001 fe45 	bl	8012a84 <__hexnan>
 8010dfa:	2805      	cmp	r0, #5
 8010dfc:	d126      	bne.n	8010e4c <_strtod_l+0x384>
 8010dfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010e00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8010e04:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010e08:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010e0c:	e6a0      	b.n	8010b50 <_strtod_l+0x88>
 8010e0e:	210a      	movs	r1, #10
 8010e10:	fb01 2e0e 	mla	lr, r1, lr, r2
 8010e14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010e18:	e7b9      	b.n	8010d8e <_strtod_l+0x2c6>
 8010e1a:	2a6e      	cmp	r2, #110	; 0x6e
 8010e1c:	e7db      	b.n	8010dd6 <_strtod_l+0x30e>
 8010e1e:	4990      	ldr	r1, [pc, #576]	; (8011060 <_strtod_l+0x598>)
 8010e20:	a817      	add	r0, sp, #92	; 0x5c
 8010e22:	f001 fe1b 	bl	8012a5c <__match>
 8010e26:	2800      	cmp	r0, #0
 8010e28:	f43f aeb0 	beq.w	8010b8c <_strtod_l+0xc4>
 8010e2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e2e:	498d      	ldr	r1, [pc, #564]	; (8011064 <_strtod_l+0x59c>)
 8010e30:	3b01      	subs	r3, #1
 8010e32:	a817      	add	r0, sp, #92	; 0x5c
 8010e34:	9317      	str	r3, [sp, #92]	; 0x5c
 8010e36:	f001 fe11 	bl	8012a5c <__match>
 8010e3a:	b910      	cbnz	r0, 8010e42 <_strtod_l+0x37a>
 8010e3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e3e:	3301      	adds	r3, #1
 8010e40:	9317      	str	r3, [sp, #92]	; 0x5c
 8010e42:	f8df b230 	ldr.w	fp, [pc, #560]	; 8011074 <_strtod_l+0x5ac>
 8010e46:	f04f 0a00 	mov.w	sl, #0
 8010e4a:	e681      	b.n	8010b50 <_strtod_l+0x88>
 8010e4c:	4886      	ldr	r0, [pc, #536]	; (8011068 <_strtod_l+0x5a0>)
 8010e4e:	f002 fde7 	bl	8013a20 <nan>
 8010e52:	ec5b ab10 	vmov	sl, fp, d0
 8010e56:	e67b      	b.n	8010b50 <_strtod_l+0x88>
 8010e58:	9b05      	ldr	r3, [sp, #20]
 8010e5a:	9807      	ldr	r0, [sp, #28]
 8010e5c:	1af3      	subs	r3, r6, r3
 8010e5e:	2f00      	cmp	r7, #0
 8010e60:	bf08      	it	eq
 8010e62:	462f      	moveq	r7, r5
 8010e64:	2d10      	cmp	r5, #16
 8010e66:	9306      	str	r3, [sp, #24]
 8010e68:	46a8      	mov	r8, r5
 8010e6a:	bfa8      	it	ge
 8010e6c:	f04f 0810 	movge.w	r8, #16
 8010e70:	f7ef fb48 	bl	8000504 <__aeabi_ui2d>
 8010e74:	2d09      	cmp	r5, #9
 8010e76:	4682      	mov	sl, r0
 8010e78:	468b      	mov	fp, r1
 8010e7a:	dd13      	ble.n	8010ea4 <_strtod_l+0x3dc>
 8010e7c:	4b7b      	ldr	r3, [pc, #492]	; (801106c <_strtod_l+0x5a4>)
 8010e7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010e82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010e86:	f7ef fbb7 	bl	80005f8 <__aeabi_dmul>
 8010e8a:	4682      	mov	sl, r0
 8010e8c:	4648      	mov	r0, r9
 8010e8e:	468b      	mov	fp, r1
 8010e90:	f7ef fb38 	bl	8000504 <__aeabi_ui2d>
 8010e94:	4602      	mov	r2, r0
 8010e96:	460b      	mov	r3, r1
 8010e98:	4650      	mov	r0, sl
 8010e9a:	4659      	mov	r1, fp
 8010e9c:	f7ef f9f6 	bl	800028c <__adddf3>
 8010ea0:	4682      	mov	sl, r0
 8010ea2:	468b      	mov	fp, r1
 8010ea4:	2d0f      	cmp	r5, #15
 8010ea6:	dc38      	bgt.n	8010f1a <_strtod_l+0x452>
 8010ea8:	9b06      	ldr	r3, [sp, #24]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	f43f ae50 	beq.w	8010b50 <_strtod_l+0x88>
 8010eb0:	dd24      	ble.n	8010efc <_strtod_l+0x434>
 8010eb2:	2b16      	cmp	r3, #22
 8010eb4:	dc0b      	bgt.n	8010ece <_strtod_l+0x406>
 8010eb6:	496d      	ldr	r1, [pc, #436]	; (801106c <_strtod_l+0x5a4>)
 8010eb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ec0:	4652      	mov	r2, sl
 8010ec2:	465b      	mov	r3, fp
 8010ec4:	f7ef fb98 	bl	80005f8 <__aeabi_dmul>
 8010ec8:	4682      	mov	sl, r0
 8010eca:	468b      	mov	fp, r1
 8010ecc:	e640      	b.n	8010b50 <_strtod_l+0x88>
 8010ece:	9a06      	ldr	r2, [sp, #24]
 8010ed0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010ed4:	4293      	cmp	r3, r2
 8010ed6:	db20      	blt.n	8010f1a <_strtod_l+0x452>
 8010ed8:	4c64      	ldr	r4, [pc, #400]	; (801106c <_strtod_l+0x5a4>)
 8010eda:	f1c5 050f 	rsb	r5, r5, #15
 8010ede:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010ee2:	4652      	mov	r2, sl
 8010ee4:	465b      	mov	r3, fp
 8010ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010eea:	f7ef fb85 	bl	80005f8 <__aeabi_dmul>
 8010eee:	9b06      	ldr	r3, [sp, #24]
 8010ef0:	1b5d      	subs	r5, r3, r5
 8010ef2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010ef6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010efa:	e7e3      	b.n	8010ec4 <_strtod_l+0x3fc>
 8010efc:	9b06      	ldr	r3, [sp, #24]
 8010efe:	3316      	adds	r3, #22
 8010f00:	db0b      	blt.n	8010f1a <_strtod_l+0x452>
 8010f02:	9b05      	ldr	r3, [sp, #20]
 8010f04:	1b9e      	subs	r6, r3, r6
 8010f06:	4b59      	ldr	r3, [pc, #356]	; (801106c <_strtod_l+0x5a4>)
 8010f08:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010f0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010f10:	4650      	mov	r0, sl
 8010f12:	4659      	mov	r1, fp
 8010f14:	f7ef fc9a 	bl	800084c <__aeabi_ddiv>
 8010f18:	e7d6      	b.n	8010ec8 <_strtod_l+0x400>
 8010f1a:	9b06      	ldr	r3, [sp, #24]
 8010f1c:	eba5 0808 	sub.w	r8, r5, r8
 8010f20:	4498      	add	r8, r3
 8010f22:	f1b8 0f00 	cmp.w	r8, #0
 8010f26:	dd74      	ble.n	8011012 <_strtod_l+0x54a>
 8010f28:	f018 030f 	ands.w	r3, r8, #15
 8010f2c:	d00a      	beq.n	8010f44 <_strtod_l+0x47c>
 8010f2e:	494f      	ldr	r1, [pc, #316]	; (801106c <_strtod_l+0x5a4>)
 8010f30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010f34:	4652      	mov	r2, sl
 8010f36:	465b      	mov	r3, fp
 8010f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f3c:	f7ef fb5c 	bl	80005f8 <__aeabi_dmul>
 8010f40:	4682      	mov	sl, r0
 8010f42:	468b      	mov	fp, r1
 8010f44:	f038 080f 	bics.w	r8, r8, #15
 8010f48:	d04f      	beq.n	8010fea <_strtod_l+0x522>
 8010f4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010f4e:	dd22      	ble.n	8010f96 <_strtod_l+0x4ce>
 8010f50:	2500      	movs	r5, #0
 8010f52:	462e      	mov	r6, r5
 8010f54:	9507      	str	r5, [sp, #28]
 8010f56:	9505      	str	r5, [sp, #20]
 8010f58:	2322      	movs	r3, #34	; 0x22
 8010f5a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8011074 <_strtod_l+0x5ac>
 8010f5e:	6023      	str	r3, [r4, #0]
 8010f60:	f04f 0a00 	mov.w	sl, #0
 8010f64:	9b07      	ldr	r3, [sp, #28]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	f43f adf2 	beq.w	8010b50 <_strtod_l+0x88>
 8010f6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010f6e:	4620      	mov	r0, r4
 8010f70:	f001 fe82 	bl	8012c78 <_Bfree>
 8010f74:	9905      	ldr	r1, [sp, #20]
 8010f76:	4620      	mov	r0, r4
 8010f78:	f001 fe7e 	bl	8012c78 <_Bfree>
 8010f7c:	4631      	mov	r1, r6
 8010f7e:	4620      	mov	r0, r4
 8010f80:	f001 fe7a 	bl	8012c78 <_Bfree>
 8010f84:	9907      	ldr	r1, [sp, #28]
 8010f86:	4620      	mov	r0, r4
 8010f88:	f001 fe76 	bl	8012c78 <_Bfree>
 8010f8c:	4629      	mov	r1, r5
 8010f8e:	4620      	mov	r0, r4
 8010f90:	f001 fe72 	bl	8012c78 <_Bfree>
 8010f94:	e5dc      	b.n	8010b50 <_strtod_l+0x88>
 8010f96:	4b36      	ldr	r3, [pc, #216]	; (8011070 <_strtod_l+0x5a8>)
 8010f98:	9304      	str	r3, [sp, #16]
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010fa0:	4650      	mov	r0, sl
 8010fa2:	4659      	mov	r1, fp
 8010fa4:	4699      	mov	r9, r3
 8010fa6:	f1b8 0f01 	cmp.w	r8, #1
 8010faa:	dc21      	bgt.n	8010ff0 <_strtod_l+0x528>
 8010fac:	b10b      	cbz	r3, 8010fb2 <_strtod_l+0x4ea>
 8010fae:	4682      	mov	sl, r0
 8010fb0:	468b      	mov	fp, r1
 8010fb2:	4b2f      	ldr	r3, [pc, #188]	; (8011070 <_strtod_l+0x5a8>)
 8010fb4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010fb8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010fbc:	4652      	mov	r2, sl
 8010fbe:	465b      	mov	r3, fp
 8010fc0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010fc4:	f7ef fb18 	bl	80005f8 <__aeabi_dmul>
 8010fc8:	4b2a      	ldr	r3, [pc, #168]	; (8011074 <_strtod_l+0x5ac>)
 8010fca:	460a      	mov	r2, r1
 8010fcc:	400b      	ands	r3, r1
 8010fce:	492a      	ldr	r1, [pc, #168]	; (8011078 <_strtod_l+0x5b0>)
 8010fd0:	428b      	cmp	r3, r1
 8010fd2:	4682      	mov	sl, r0
 8010fd4:	d8bc      	bhi.n	8010f50 <_strtod_l+0x488>
 8010fd6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010fda:	428b      	cmp	r3, r1
 8010fdc:	bf86      	itte	hi
 8010fde:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801107c <_strtod_l+0x5b4>
 8010fe2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8010fe6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010fea:	2300      	movs	r3, #0
 8010fec:	9304      	str	r3, [sp, #16]
 8010fee:	e084      	b.n	80110fa <_strtod_l+0x632>
 8010ff0:	f018 0f01 	tst.w	r8, #1
 8010ff4:	d005      	beq.n	8011002 <_strtod_l+0x53a>
 8010ff6:	9b04      	ldr	r3, [sp, #16]
 8010ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffc:	f7ef fafc 	bl	80005f8 <__aeabi_dmul>
 8011000:	2301      	movs	r3, #1
 8011002:	9a04      	ldr	r2, [sp, #16]
 8011004:	3208      	adds	r2, #8
 8011006:	f109 0901 	add.w	r9, r9, #1
 801100a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801100e:	9204      	str	r2, [sp, #16]
 8011010:	e7c9      	b.n	8010fa6 <_strtod_l+0x4de>
 8011012:	d0ea      	beq.n	8010fea <_strtod_l+0x522>
 8011014:	f1c8 0800 	rsb	r8, r8, #0
 8011018:	f018 020f 	ands.w	r2, r8, #15
 801101c:	d00a      	beq.n	8011034 <_strtod_l+0x56c>
 801101e:	4b13      	ldr	r3, [pc, #76]	; (801106c <_strtod_l+0x5a4>)
 8011020:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011024:	4650      	mov	r0, sl
 8011026:	4659      	mov	r1, fp
 8011028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801102c:	f7ef fc0e 	bl	800084c <__aeabi_ddiv>
 8011030:	4682      	mov	sl, r0
 8011032:	468b      	mov	fp, r1
 8011034:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011038:	d0d7      	beq.n	8010fea <_strtod_l+0x522>
 801103a:	f1b8 0f1f 	cmp.w	r8, #31
 801103e:	dd1f      	ble.n	8011080 <_strtod_l+0x5b8>
 8011040:	2500      	movs	r5, #0
 8011042:	462e      	mov	r6, r5
 8011044:	9507      	str	r5, [sp, #28]
 8011046:	9505      	str	r5, [sp, #20]
 8011048:	2322      	movs	r3, #34	; 0x22
 801104a:	f04f 0a00 	mov.w	sl, #0
 801104e:	f04f 0b00 	mov.w	fp, #0
 8011052:	6023      	str	r3, [r4, #0]
 8011054:	e786      	b.n	8010f64 <_strtod_l+0x49c>
 8011056:	bf00      	nop
 8011058:	08015219 	.word	0x08015219
 801105c:	0801525c 	.word	0x0801525c
 8011060:	08015211 	.word	0x08015211
 8011064:	0801539c 	.word	0x0801539c
 8011068:	08015648 	.word	0x08015648
 801106c:	08015528 	.word	0x08015528
 8011070:	08015500 	.word	0x08015500
 8011074:	7ff00000 	.word	0x7ff00000
 8011078:	7ca00000 	.word	0x7ca00000
 801107c:	7fefffff 	.word	0x7fefffff
 8011080:	f018 0310 	ands.w	r3, r8, #16
 8011084:	bf18      	it	ne
 8011086:	236a      	movne	r3, #106	; 0x6a
 8011088:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8011438 <_strtod_l+0x970>
 801108c:	9304      	str	r3, [sp, #16]
 801108e:	4650      	mov	r0, sl
 8011090:	4659      	mov	r1, fp
 8011092:	2300      	movs	r3, #0
 8011094:	f018 0f01 	tst.w	r8, #1
 8011098:	d004      	beq.n	80110a4 <_strtod_l+0x5dc>
 801109a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801109e:	f7ef faab 	bl	80005f8 <__aeabi_dmul>
 80110a2:	2301      	movs	r3, #1
 80110a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80110a8:	f109 0908 	add.w	r9, r9, #8
 80110ac:	d1f2      	bne.n	8011094 <_strtod_l+0x5cc>
 80110ae:	b10b      	cbz	r3, 80110b4 <_strtod_l+0x5ec>
 80110b0:	4682      	mov	sl, r0
 80110b2:	468b      	mov	fp, r1
 80110b4:	9b04      	ldr	r3, [sp, #16]
 80110b6:	b1c3      	cbz	r3, 80110ea <_strtod_l+0x622>
 80110b8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80110bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	4659      	mov	r1, fp
 80110c4:	dd11      	ble.n	80110ea <_strtod_l+0x622>
 80110c6:	2b1f      	cmp	r3, #31
 80110c8:	f340 8124 	ble.w	8011314 <_strtod_l+0x84c>
 80110cc:	2b34      	cmp	r3, #52	; 0x34
 80110ce:	bfde      	ittt	le
 80110d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80110d4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80110d8:	fa03 f202 	lslle.w	r2, r3, r2
 80110dc:	f04f 0a00 	mov.w	sl, #0
 80110e0:	bfcc      	ite	gt
 80110e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80110e6:	ea02 0b01 	andle.w	fp, r2, r1
 80110ea:	2200      	movs	r2, #0
 80110ec:	2300      	movs	r3, #0
 80110ee:	4650      	mov	r0, sl
 80110f0:	4659      	mov	r1, fp
 80110f2:	f7ef fce9 	bl	8000ac8 <__aeabi_dcmpeq>
 80110f6:	2800      	cmp	r0, #0
 80110f8:	d1a2      	bne.n	8011040 <_strtod_l+0x578>
 80110fa:	9b07      	ldr	r3, [sp, #28]
 80110fc:	9300      	str	r3, [sp, #0]
 80110fe:	9908      	ldr	r1, [sp, #32]
 8011100:	462b      	mov	r3, r5
 8011102:	463a      	mov	r2, r7
 8011104:	4620      	mov	r0, r4
 8011106:	f001 fe1f 	bl	8012d48 <__s2b>
 801110a:	9007      	str	r0, [sp, #28]
 801110c:	2800      	cmp	r0, #0
 801110e:	f43f af1f 	beq.w	8010f50 <_strtod_l+0x488>
 8011112:	9b05      	ldr	r3, [sp, #20]
 8011114:	1b9e      	subs	r6, r3, r6
 8011116:	9b06      	ldr	r3, [sp, #24]
 8011118:	2b00      	cmp	r3, #0
 801111a:	bfb4      	ite	lt
 801111c:	4633      	movlt	r3, r6
 801111e:	2300      	movge	r3, #0
 8011120:	930c      	str	r3, [sp, #48]	; 0x30
 8011122:	9b06      	ldr	r3, [sp, #24]
 8011124:	2500      	movs	r5, #0
 8011126:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801112a:	9312      	str	r3, [sp, #72]	; 0x48
 801112c:	462e      	mov	r6, r5
 801112e:	9b07      	ldr	r3, [sp, #28]
 8011130:	4620      	mov	r0, r4
 8011132:	6859      	ldr	r1, [r3, #4]
 8011134:	f001 fd60 	bl	8012bf8 <_Balloc>
 8011138:	9005      	str	r0, [sp, #20]
 801113a:	2800      	cmp	r0, #0
 801113c:	f43f af0c 	beq.w	8010f58 <_strtod_l+0x490>
 8011140:	9b07      	ldr	r3, [sp, #28]
 8011142:	691a      	ldr	r2, [r3, #16]
 8011144:	3202      	adds	r2, #2
 8011146:	f103 010c 	add.w	r1, r3, #12
 801114a:	0092      	lsls	r2, r2, #2
 801114c:	300c      	adds	r0, #12
 801114e:	f7fe fde7 	bl	800fd20 <memcpy>
 8011152:	ec4b ab10 	vmov	d0, sl, fp
 8011156:	aa1a      	add	r2, sp, #104	; 0x68
 8011158:	a919      	add	r1, sp, #100	; 0x64
 801115a:	4620      	mov	r0, r4
 801115c:	f002 f93a 	bl	80133d4 <__d2b>
 8011160:	ec4b ab18 	vmov	d8, sl, fp
 8011164:	9018      	str	r0, [sp, #96]	; 0x60
 8011166:	2800      	cmp	r0, #0
 8011168:	f43f aef6 	beq.w	8010f58 <_strtod_l+0x490>
 801116c:	2101      	movs	r1, #1
 801116e:	4620      	mov	r0, r4
 8011170:	f001 fe84 	bl	8012e7c <__i2b>
 8011174:	4606      	mov	r6, r0
 8011176:	2800      	cmp	r0, #0
 8011178:	f43f aeee 	beq.w	8010f58 <_strtod_l+0x490>
 801117c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801117e:	9904      	ldr	r1, [sp, #16]
 8011180:	2b00      	cmp	r3, #0
 8011182:	bfab      	itete	ge
 8011184:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8011186:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011188:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801118a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801118e:	bfac      	ite	ge
 8011190:	eb03 0902 	addge.w	r9, r3, r2
 8011194:	1ad7      	sublt	r7, r2, r3
 8011196:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011198:	eba3 0801 	sub.w	r8, r3, r1
 801119c:	4490      	add	r8, r2
 801119e:	4ba1      	ldr	r3, [pc, #644]	; (8011424 <_strtod_l+0x95c>)
 80111a0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80111a4:	4598      	cmp	r8, r3
 80111a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80111aa:	f280 80c7 	bge.w	801133c <_strtod_l+0x874>
 80111ae:	eba3 0308 	sub.w	r3, r3, r8
 80111b2:	2b1f      	cmp	r3, #31
 80111b4:	eba2 0203 	sub.w	r2, r2, r3
 80111b8:	f04f 0101 	mov.w	r1, #1
 80111bc:	f300 80b1 	bgt.w	8011322 <_strtod_l+0x85a>
 80111c0:	fa01 f303 	lsl.w	r3, r1, r3
 80111c4:	930d      	str	r3, [sp, #52]	; 0x34
 80111c6:	2300      	movs	r3, #0
 80111c8:	9308      	str	r3, [sp, #32]
 80111ca:	eb09 0802 	add.w	r8, r9, r2
 80111ce:	9b04      	ldr	r3, [sp, #16]
 80111d0:	45c1      	cmp	r9, r8
 80111d2:	4417      	add	r7, r2
 80111d4:	441f      	add	r7, r3
 80111d6:	464b      	mov	r3, r9
 80111d8:	bfa8      	it	ge
 80111da:	4643      	movge	r3, r8
 80111dc:	42bb      	cmp	r3, r7
 80111de:	bfa8      	it	ge
 80111e0:	463b      	movge	r3, r7
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	bfc2      	ittt	gt
 80111e6:	eba8 0803 	subgt.w	r8, r8, r3
 80111ea:	1aff      	subgt	r7, r7, r3
 80111ec:	eba9 0903 	subgt.w	r9, r9, r3
 80111f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	dd17      	ble.n	8011226 <_strtod_l+0x75e>
 80111f6:	4631      	mov	r1, r6
 80111f8:	461a      	mov	r2, r3
 80111fa:	4620      	mov	r0, r4
 80111fc:	f001 fefe 	bl	8012ffc <__pow5mult>
 8011200:	4606      	mov	r6, r0
 8011202:	2800      	cmp	r0, #0
 8011204:	f43f aea8 	beq.w	8010f58 <_strtod_l+0x490>
 8011208:	4601      	mov	r1, r0
 801120a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801120c:	4620      	mov	r0, r4
 801120e:	f001 fe4b 	bl	8012ea8 <__multiply>
 8011212:	900b      	str	r0, [sp, #44]	; 0x2c
 8011214:	2800      	cmp	r0, #0
 8011216:	f43f ae9f 	beq.w	8010f58 <_strtod_l+0x490>
 801121a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801121c:	4620      	mov	r0, r4
 801121e:	f001 fd2b 	bl	8012c78 <_Bfree>
 8011222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011224:	9318      	str	r3, [sp, #96]	; 0x60
 8011226:	f1b8 0f00 	cmp.w	r8, #0
 801122a:	f300 808c 	bgt.w	8011346 <_strtod_l+0x87e>
 801122e:	9b06      	ldr	r3, [sp, #24]
 8011230:	2b00      	cmp	r3, #0
 8011232:	dd08      	ble.n	8011246 <_strtod_l+0x77e>
 8011234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011236:	9905      	ldr	r1, [sp, #20]
 8011238:	4620      	mov	r0, r4
 801123a:	f001 fedf 	bl	8012ffc <__pow5mult>
 801123e:	9005      	str	r0, [sp, #20]
 8011240:	2800      	cmp	r0, #0
 8011242:	f43f ae89 	beq.w	8010f58 <_strtod_l+0x490>
 8011246:	2f00      	cmp	r7, #0
 8011248:	dd08      	ble.n	801125c <_strtod_l+0x794>
 801124a:	9905      	ldr	r1, [sp, #20]
 801124c:	463a      	mov	r2, r7
 801124e:	4620      	mov	r0, r4
 8011250:	f001 ff2e 	bl	80130b0 <__lshift>
 8011254:	9005      	str	r0, [sp, #20]
 8011256:	2800      	cmp	r0, #0
 8011258:	f43f ae7e 	beq.w	8010f58 <_strtod_l+0x490>
 801125c:	f1b9 0f00 	cmp.w	r9, #0
 8011260:	dd08      	ble.n	8011274 <_strtod_l+0x7ac>
 8011262:	4631      	mov	r1, r6
 8011264:	464a      	mov	r2, r9
 8011266:	4620      	mov	r0, r4
 8011268:	f001 ff22 	bl	80130b0 <__lshift>
 801126c:	4606      	mov	r6, r0
 801126e:	2800      	cmp	r0, #0
 8011270:	f43f ae72 	beq.w	8010f58 <_strtod_l+0x490>
 8011274:	9a05      	ldr	r2, [sp, #20]
 8011276:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011278:	4620      	mov	r0, r4
 801127a:	f001 ffa5 	bl	80131c8 <__mdiff>
 801127e:	4605      	mov	r5, r0
 8011280:	2800      	cmp	r0, #0
 8011282:	f43f ae69 	beq.w	8010f58 <_strtod_l+0x490>
 8011286:	68c3      	ldr	r3, [r0, #12]
 8011288:	930b      	str	r3, [sp, #44]	; 0x2c
 801128a:	2300      	movs	r3, #0
 801128c:	60c3      	str	r3, [r0, #12]
 801128e:	4631      	mov	r1, r6
 8011290:	f001 ff7e 	bl	8013190 <__mcmp>
 8011294:	2800      	cmp	r0, #0
 8011296:	da60      	bge.n	801135a <_strtod_l+0x892>
 8011298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801129a:	ea53 030a 	orrs.w	r3, r3, sl
 801129e:	f040 8082 	bne.w	80113a6 <_strtod_l+0x8de>
 80112a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d17d      	bne.n	80113a6 <_strtod_l+0x8de>
 80112aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80112ae:	0d1b      	lsrs	r3, r3, #20
 80112b0:	051b      	lsls	r3, r3, #20
 80112b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80112b6:	d976      	bls.n	80113a6 <_strtod_l+0x8de>
 80112b8:	696b      	ldr	r3, [r5, #20]
 80112ba:	b913      	cbnz	r3, 80112c2 <_strtod_l+0x7fa>
 80112bc:	692b      	ldr	r3, [r5, #16]
 80112be:	2b01      	cmp	r3, #1
 80112c0:	dd71      	ble.n	80113a6 <_strtod_l+0x8de>
 80112c2:	4629      	mov	r1, r5
 80112c4:	2201      	movs	r2, #1
 80112c6:	4620      	mov	r0, r4
 80112c8:	f001 fef2 	bl	80130b0 <__lshift>
 80112cc:	4631      	mov	r1, r6
 80112ce:	4605      	mov	r5, r0
 80112d0:	f001 ff5e 	bl	8013190 <__mcmp>
 80112d4:	2800      	cmp	r0, #0
 80112d6:	dd66      	ble.n	80113a6 <_strtod_l+0x8de>
 80112d8:	9904      	ldr	r1, [sp, #16]
 80112da:	4a53      	ldr	r2, [pc, #332]	; (8011428 <_strtod_l+0x960>)
 80112dc:	465b      	mov	r3, fp
 80112de:	2900      	cmp	r1, #0
 80112e0:	f000 8081 	beq.w	80113e6 <_strtod_l+0x91e>
 80112e4:	ea02 010b 	and.w	r1, r2, fp
 80112e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80112ec:	dc7b      	bgt.n	80113e6 <_strtod_l+0x91e>
 80112ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80112f2:	f77f aea9 	ble.w	8011048 <_strtod_l+0x580>
 80112f6:	4b4d      	ldr	r3, [pc, #308]	; (801142c <_strtod_l+0x964>)
 80112f8:	4650      	mov	r0, sl
 80112fa:	4659      	mov	r1, fp
 80112fc:	2200      	movs	r2, #0
 80112fe:	f7ef f97b 	bl	80005f8 <__aeabi_dmul>
 8011302:	460b      	mov	r3, r1
 8011304:	4303      	orrs	r3, r0
 8011306:	bf08      	it	eq
 8011308:	2322      	moveq	r3, #34	; 0x22
 801130a:	4682      	mov	sl, r0
 801130c:	468b      	mov	fp, r1
 801130e:	bf08      	it	eq
 8011310:	6023      	streq	r3, [r4, #0]
 8011312:	e62b      	b.n	8010f6c <_strtod_l+0x4a4>
 8011314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011318:	fa02 f303 	lsl.w	r3, r2, r3
 801131c:	ea03 0a0a 	and.w	sl, r3, sl
 8011320:	e6e3      	b.n	80110ea <_strtod_l+0x622>
 8011322:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011326:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801132a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801132e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011332:	fa01 f308 	lsl.w	r3, r1, r8
 8011336:	9308      	str	r3, [sp, #32]
 8011338:	910d      	str	r1, [sp, #52]	; 0x34
 801133a:	e746      	b.n	80111ca <_strtod_l+0x702>
 801133c:	2300      	movs	r3, #0
 801133e:	9308      	str	r3, [sp, #32]
 8011340:	2301      	movs	r3, #1
 8011342:	930d      	str	r3, [sp, #52]	; 0x34
 8011344:	e741      	b.n	80111ca <_strtod_l+0x702>
 8011346:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011348:	4642      	mov	r2, r8
 801134a:	4620      	mov	r0, r4
 801134c:	f001 feb0 	bl	80130b0 <__lshift>
 8011350:	9018      	str	r0, [sp, #96]	; 0x60
 8011352:	2800      	cmp	r0, #0
 8011354:	f47f af6b 	bne.w	801122e <_strtod_l+0x766>
 8011358:	e5fe      	b.n	8010f58 <_strtod_l+0x490>
 801135a:	465f      	mov	r7, fp
 801135c:	d16e      	bne.n	801143c <_strtod_l+0x974>
 801135e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011360:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011364:	b342      	cbz	r2, 80113b8 <_strtod_l+0x8f0>
 8011366:	4a32      	ldr	r2, [pc, #200]	; (8011430 <_strtod_l+0x968>)
 8011368:	4293      	cmp	r3, r2
 801136a:	d128      	bne.n	80113be <_strtod_l+0x8f6>
 801136c:	9b04      	ldr	r3, [sp, #16]
 801136e:	4651      	mov	r1, sl
 8011370:	b1eb      	cbz	r3, 80113ae <_strtod_l+0x8e6>
 8011372:	4b2d      	ldr	r3, [pc, #180]	; (8011428 <_strtod_l+0x960>)
 8011374:	403b      	ands	r3, r7
 8011376:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801137a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801137e:	d819      	bhi.n	80113b4 <_strtod_l+0x8ec>
 8011380:	0d1b      	lsrs	r3, r3, #20
 8011382:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011386:	fa02 f303 	lsl.w	r3, r2, r3
 801138a:	4299      	cmp	r1, r3
 801138c:	d117      	bne.n	80113be <_strtod_l+0x8f6>
 801138e:	4b29      	ldr	r3, [pc, #164]	; (8011434 <_strtod_l+0x96c>)
 8011390:	429f      	cmp	r7, r3
 8011392:	d102      	bne.n	801139a <_strtod_l+0x8d2>
 8011394:	3101      	adds	r1, #1
 8011396:	f43f addf 	beq.w	8010f58 <_strtod_l+0x490>
 801139a:	4b23      	ldr	r3, [pc, #140]	; (8011428 <_strtod_l+0x960>)
 801139c:	403b      	ands	r3, r7
 801139e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80113a2:	f04f 0a00 	mov.w	sl, #0
 80113a6:	9b04      	ldr	r3, [sp, #16]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d1a4      	bne.n	80112f6 <_strtod_l+0x82e>
 80113ac:	e5de      	b.n	8010f6c <_strtod_l+0x4a4>
 80113ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113b2:	e7ea      	b.n	801138a <_strtod_l+0x8c2>
 80113b4:	4613      	mov	r3, r2
 80113b6:	e7e8      	b.n	801138a <_strtod_l+0x8c2>
 80113b8:	ea53 030a 	orrs.w	r3, r3, sl
 80113bc:	d08c      	beq.n	80112d8 <_strtod_l+0x810>
 80113be:	9b08      	ldr	r3, [sp, #32]
 80113c0:	b1db      	cbz	r3, 80113fa <_strtod_l+0x932>
 80113c2:	423b      	tst	r3, r7
 80113c4:	d0ef      	beq.n	80113a6 <_strtod_l+0x8de>
 80113c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113c8:	9a04      	ldr	r2, [sp, #16]
 80113ca:	4650      	mov	r0, sl
 80113cc:	4659      	mov	r1, fp
 80113ce:	b1c3      	cbz	r3, 8011402 <_strtod_l+0x93a>
 80113d0:	f7ff fb5c 	bl	8010a8c <sulp>
 80113d4:	4602      	mov	r2, r0
 80113d6:	460b      	mov	r3, r1
 80113d8:	ec51 0b18 	vmov	r0, r1, d8
 80113dc:	f7ee ff56 	bl	800028c <__adddf3>
 80113e0:	4682      	mov	sl, r0
 80113e2:	468b      	mov	fp, r1
 80113e4:	e7df      	b.n	80113a6 <_strtod_l+0x8de>
 80113e6:	4013      	ands	r3, r2
 80113e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80113ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80113f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80113f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80113f8:	e7d5      	b.n	80113a6 <_strtod_l+0x8de>
 80113fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80113fc:	ea13 0f0a 	tst.w	r3, sl
 8011400:	e7e0      	b.n	80113c4 <_strtod_l+0x8fc>
 8011402:	f7ff fb43 	bl	8010a8c <sulp>
 8011406:	4602      	mov	r2, r0
 8011408:	460b      	mov	r3, r1
 801140a:	ec51 0b18 	vmov	r0, r1, d8
 801140e:	f7ee ff3b 	bl	8000288 <__aeabi_dsub>
 8011412:	2200      	movs	r2, #0
 8011414:	2300      	movs	r3, #0
 8011416:	4682      	mov	sl, r0
 8011418:	468b      	mov	fp, r1
 801141a:	f7ef fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 801141e:	2800      	cmp	r0, #0
 8011420:	d0c1      	beq.n	80113a6 <_strtod_l+0x8de>
 8011422:	e611      	b.n	8011048 <_strtod_l+0x580>
 8011424:	fffffc02 	.word	0xfffffc02
 8011428:	7ff00000 	.word	0x7ff00000
 801142c:	39500000 	.word	0x39500000
 8011430:	000fffff 	.word	0x000fffff
 8011434:	7fefffff 	.word	0x7fefffff
 8011438:	08015270 	.word	0x08015270
 801143c:	4631      	mov	r1, r6
 801143e:	4628      	mov	r0, r5
 8011440:	f002 f824 	bl	801348c <__ratio>
 8011444:	ec59 8b10 	vmov	r8, r9, d0
 8011448:	ee10 0a10 	vmov	r0, s0
 801144c:	2200      	movs	r2, #0
 801144e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011452:	4649      	mov	r1, r9
 8011454:	f7ef fb4c 	bl	8000af0 <__aeabi_dcmple>
 8011458:	2800      	cmp	r0, #0
 801145a:	d07a      	beq.n	8011552 <_strtod_l+0xa8a>
 801145c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801145e:	2b00      	cmp	r3, #0
 8011460:	d04a      	beq.n	80114f8 <_strtod_l+0xa30>
 8011462:	4b95      	ldr	r3, [pc, #596]	; (80116b8 <_strtod_l+0xbf0>)
 8011464:	2200      	movs	r2, #0
 8011466:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801146a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80116b8 <_strtod_l+0xbf0>
 801146e:	f04f 0800 	mov.w	r8, #0
 8011472:	4b92      	ldr	r3, [pc, #584]	; (80116bc <_strtod_l+0xbf4>)
 8011474:	403b      	ands	r3, r7
 8011476:	930d      	str	r3, [sp, #52]	; 0x34
 8011478:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801147a:	4b91      	ldr	r3, [pc, #580]	; (80116c0 <_strtod_l+0xbf8>)
 801147c:	429a      	cmp	r2, r3
 801147e:	f040 80b0 	bne.w	80115e2 <_strtod_l+0xb1a>
 8011482:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011486:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801148a:	ec4b ab10 	vmov	d0, sl, fp
 801148e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011492:	f001 ff23 	bl	80132dc <__ulp>
 8011496:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801149a:	ec53 2b10 	vmov	r2, r3, d0
 801149e:	f7ef f8ab 	bl	80005f8 <__aeabi_dmul>
 80114a2:	4652      	mov	r2, sl
 80114a4:	465b      	mov	r3, fp
 80114a6:	f7ee fef1 	bl	800028c <__adddf3>
 80114aa:	460b      	mov	r3, r1
 80114ac:	4983      	ldr	r1, [pc, #524]	; (80116bc <_strtod_l+0xbf4>)
 80114ae:	4a85      	ldr	r2, [pc, #532]	; (80116c4 <_strtod_l+0xbfc>)
 80114b0:	4019      	ands	r1, r3
 80114b2:	4291      	cmp	r1, r2
 80114b4:	4682      	mov	sl, r0
 80114b6:	d960      	bls.n	801157a <_strtod_l+0xab2>
 80114b8:	ee18 3a90 	vmov	r3, s17
 80114bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80114c0:	4293      	cmp	r3, r2
 80114c2:	d104      	bne.n	80114ce <_strtod_l+0xa06>
 80114c4:	ee18 3a10 	vmov	r3, s16
 80114c8:	3301      	adds	r3, #1
 80114ca:	f43f ad45 	beq.w	8010f58 <_strtod_l+0x490>
 80114ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 80116d0 <_strtod_l+0xc08>
 80114d2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80114d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80114d8:	4620      	mov	r0, r4
 80114da:	f001 fbcd 	bl	8012c78 <_Bfree>
 80114de:	9905      	ldr	r1, [sp, #20]
 80114e0:	4620      	mov	r0, r4
 80114e2:	f001 fbc9 	bl	8012c78 <_Bfree>
 80114e6:	4631      	mov	r1, r6
 80114e8:	4620      	mov	r0, r4
 80114ea:	f001 fbc5 	bl	8012c78 <_Bfree>
 80114ee:	4629      	mov	r1, r5
 80114f0:	4620      	mov	r0, r4
 80114f2:	f001 fbc1 	bl	8012c78 <_Bfree>
 80114f6:	e61a      	b.n	801112e <_strtod_l+0x666>
 80114f8:	f1ba 0f00 	cmp.w	sl, #0
 80114fc:	d11b      	bne.n	8011536 <_strtod_l+0xa6e>
 80114fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011502:	b9f3      	cbnz	r3, 8011542 <_strtod_l+0xa7a>
 8011504:	4b6c      	ldr	r3, [pc, #432]	; (80116b8 <_strtod_l+0xbf0>)
 8011506:	2200      	movs	r2, #0
 8011508:	4640      	mov	r0, r8
 801150a:	4649      	mov	r1, r9
 801150c:	f7ef fae6 	bl	8000adc <__aeabi_dcmplt>
 8011510:	b9d0      	cbnz	r0, 8011548 <_strtod_l+0xa80>
 8011512:	4640      	mov	r0, r8
 8011514:	4649      	mov	r1, r9
 8011516:	4b6c      	ldr	r3, [pc, #432]	; (80116c8 <_strtod_l+0xc00>)
 8011518:	2200      	movs	r2, #0
 801151a:	f7ef f86d 	bl	80005f8 <__aeabi_dmul>
 801151e:	4680      	mov	r8, r0
 8011520:	4689      	mov	r9, r1
 8011522:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011526:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801152a:	9315      	str	r3, [sp, #84]	; 0x54
 801152c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011530:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011534:	e79d      	b.n	8011472 <_strtod_l+0x9aa>
 8011536:	f1ba 0f01 	cmp.w	sl, #1
 801153a:	d102      	bne.n	8011542 <_strtod_l+0xa7a>
 801153c:	2f00      	cmp	r7, #0
 801153e:	f43f ad83 	beq.w	8011048 <_strtod_l+0x580>
 8011542:	4b62      	ldr	r3, [pc, #392]	; (80116cc <_strtod_l+0xc04>)
 8011544:	2200      	movs	r2, #0
 8011546:	e78e      	b.n	8011466 <_strtod_l+0x99e>
 8011548:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80116c8 <_strtod_l+0xc00>
 801154c:	f04f 0800 	mov.w	r8, #0
 8011550:	e7e7      	b.n	8011522 <_strtod_l+0xa5a>
 8011552:	4b5d      	ldr	r3, [pc, #372]	; (80116c8 <_strtod_l+0xc00>)
 8011554:	4640      	mov	r0, r8
 8011556:	4649      	mov	r1, r9
 8011558:	2200      	movs	r2, #0
 801155a:	f7ef f84d 	bl	80005f8 <__aeabi_dmul>
 801155e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011560:	4680      	mov	r8, r0
 8011562:	4689      	mov	r9, r1
 8011564:	b933      	cbnz	r3, 8011574 <_strtod_l+0xaac>
 8011566:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801156a:	900e      	str	r0, [sp, #56]	; 0x38
 801156c:	930f      	str	r3, [sp, #60]	; 0x3c
 801156e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011572:	e7dd      	b.n	8011530 <_strtod_l+0xa68>
 8011574:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8011578:	e7f9      	b.n	801156e <_strtod_l+0xaa6>
 801157a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801157e:	9b04      	ldr	r3, [sp, #16]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d1a8      	bne.n	80114d6 <_strtod_l+0xa0e>
 8011584:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011588:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801158a:	0d1b      	lsrs	r3, r3, #20
 801158c:	051b      	lsls	r3, r3, #20
 801158e:	429a      	cmp	r2, r3
 8011590:	d1a1      	bne.n	80114d6 <_strtod_l+0xa0e>
 8011592:	4640      	mov	r0, r8
 8011594:	4649      	mov	r1, r9
 8011596:	f7ef fb8f 	bl	8000cb8 <__aeabi_d2lz>
 801159a:	f7ee ffff 	bl	800059c <__aeabi_l2d>
 801159e:	4602      	mov	r2, r0
 80115a0:	460b      	mov	r3, r1
 80115a2:	4640      	mov	r0, r8
 80115a4:	4649      	mov	r1, r9
 80115a6:	f7ee fe6f 	bl	8000288 <__aeabi_dsub>
 80115aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80115ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80115b0:	ea43 030a 	orr.w	r3, r3, sl
 80115b4:	4313      	orrs	r3, r2
 80115b6:	4680      	mov	r8, r0
 80115b8:	4689      	mov	r9, r1
 80115ba:	d055      	beq.n	8011668 <_strtod_l+0xba0>
 80115bc:	a336      	add	r3, pc, #216	; (adr r3, 8011698 <_strtod_l+0xbd0>)
 80115be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c2:	f7ef fa8b 	bl	8000adc <__aeabi_dcmplt>
 80115c6:	2800      	cmp	r0, #0
 80115c8:	f47f acd0 	bne.w	8010f6c <_strtod_l+0x4a4>
 80115cc:	a334      	add	r3, pc, #208	; (adr r3, 80116a0 <_strtod_l+0xbd8>)
 80115ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d2:	4640      	mov	r0, r8
 80115d4:	4649      	mov	r1, r9
 80115d6:	f7ef fa9f 	bl	8000b18 <__aeabi_dcmpgt>
 80115da:	2800      	cmp	r0, #0
 80115dc:	f43f af7b 	beq.w	80114d6 <_strtod_l+0xa0e>
 80115e0:	e4c4      	b.n	8010f6c <_strtod_l+0x4a4>
 80115e2:	9b04      	ldr	r3, [sp, #16]
 80115e4:	b333      	cbz	r3, 8011634 <_strtod_l+0xb6c>
 80115e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80115ec:	d822      	bhi.n	8011634 <_strtod_l+0xb6c>
 80115ee:	a32e      	add	r3, pc, #184	; (adr r3, 80116a8 <_strtod_l+0xbe0>)
 80115f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f4:	4640      	mov	r0, r8
 80115f6:	4649      	mov	r1, r9
 80115f8:	f7ef fa7a 	bl	8000af0 <__aeabi_dcmple>
 80115fc:	b1a0      	cbz	r0, 8011628 <_strtod_l+0xb60>
 80115fe:	4649      	mov	r1, r9
 8011600:	4640      	mov	r0, r8
 8011602:	f7ef fad1 	bl	8000ba8 <__aeabi_d2uiz>
 8011606:	2801      	cmp	r0, #1
 8011608:	bf38      	it	cc
 801160a:	2001      	movcc	r0, #1
 801160c:	f7ee ff7a 	bl	8000504 <__aeabi_ui2d>
 8011610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011612:	4680      	mov	r8, r0
 8011614:	4689      	mov	r9, r1
 8011616:	bb23      	cbnz	r3, 8011662 <_strtod_l+0xb9a>
 8011618:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801161c:	9010      	str	r0, [sp, #64]	; 0x40
 801161e:	9311      	str	r3, [sp, #68]	; 0x44
 8011620:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011624:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801162a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801162c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011630:	1a9b      	subs	r3, r3, r2
 8011632:	9309      	str	r3, [sp, #36]	; 0x24
 8011634:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011638:	eeb0 0a48 	vmov.f32	s0, s16
 801163c:	eef0 0a68 	vmov.f32	s1, s17
 8011640:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011644:	f001 fe4a 	bl	80132dc <__ulp>
 8011648:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801164c:	ec53 2b10 	vmov	r2, r3, d0
 8011650:	f7ee ffd2 	bl	80005f8 <__aeabi_dmul>
 8011654:	ec53 2b18 	vmov	r2, r3, d8
 8011658:	f7ee fe18 	bl	800028c <__adddf3>
 801165c:	4682      	mov	sl, r0
 801165e:	468b      	mov	fp, r1
 8011660:	e78d      	b.n	801157e <_strtod_l+0xab6>
 8011662:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8011666:	e7db      	b.n	8011620 <_strtod_l+0xb58>
 8011668:	a311      	add	r3, pc, #68	; (adr r3, 80116b0 <_strtod_l+0xbe8>)
 801166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166e:	f7ef fa35 	bl	8000adc <__aeabi_dcmplt>
 8011672:	e7b2      	b.n	80115da <_strtod_l+0xb12>
 8011674:	2300      	movs	r3, #0
 8011676:	930a      	str	r3, [sp, #40]	; 0x28
 8011678:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801167a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801167c:	6013      	str	r3, [r2, #0]
 801167e:	f7ff ba6b 	b.w	8010b58 <_strtod_l+0x90>
 8011682:	2a65      	cmp	r2, #101	; 0x65
 8011684:	f43f ab5f 	beq.w	8010d46 <_strtod_l+0x27e>
 8011688:	2a45      	cmp	r2, #69	; 0x45
 801168a:	f43f ab5c 	beq.w	8010d46 <_strtod_l+0x27e>
 801168e:	2301      	movs	r3, #1
 8011690:	f7ff bb94 	b.w	8010dbc <_strtod_l+0x2f4>
 8011694:	f3af 8000 	nop.w
 8011698:	94a03595 	.word	0x94a03595
 801169c:	3fdfffff 	.word	0x3fdfffff
 80116a0:	35afe535 	.word	0x35afe535
 80116a4:	3fe00000 	.word	0x3fe00000
 80116a8:	ffc00000 	.word	0xffc00000
 80116ac:	41dfffff 	.word	0x41dfffff
 80116b0:	94a03595 	.word	0x94a03595
 80116b4:	3fcfffff 	.word	0x3fcfffff
 80116b8:	3ff00000 	.word	0x3ff00000
 80116bc:	7ff00000 	.word	0x7ff00000
 80116c0:	7fe00000 	.word	0x7fe00000
 80116c4:	7c9fffff 	.word	0x7c9fffff
 80116c8:	3fe00000 	.word	0x3fe00000
 80116cc:	bff00000 	.word	0xbff00000
 80116d0:	7fefffff 	.word	0x7fefffff

080116d4 <_strtod_r>:
 80116d4:	4b01      	ldr	r3, [pc, #4]	; (80116dc <_strtod_r+0x8>)
 80116d6:	f7ff b9f7 	b.w	8010ac8 <_strtod_l>
 80116da:	bf00      	nop
 80116dc:	2000007c 	.word	0x2000007c

080116e0 <_strtol_l.constprop.0>:
 80116e0:	2b01      	cmp	r3, #1
 80116e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116e6:	d001      	beq.n	80116ec <_strtol_l.constprop.0+0xc>
 80116e8:	2b24      	cmp	r3, #36	; 0x24
 80116ea:	d906      	bls.n	80116fa <_strtol_l.constprop.0+0x1a>
 80116ec:	f7fe faee 	bl	800fccc <__errno>
 80116f0:	2316      	movs	r3, #22
 80116f2:	6003      	str	r3, [r0, #0]
 80116f4:	2000      	movs	r0, #0
 80116f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80117e0 <_strtol_l.constprop.0+0x100>
 80116fe:	460d      	mov	r5, r1
 8011700:	462e      	mov	r6, r5
 8011702:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011706:	f814 700c 	ldrb.w	r7, [r4, ip]
 801170a:	f017 0708 	ands.w	r7, r7, #8
 801170e:	d1f7      	bne.n	8011700 <_strtol_l.constprop.0+0x20>
 8011710:	2c2d      	cmp	r4, #45	; 0x2d
 8011712:	d132      	bne.n	801177a <_strtol_l.constprop.0+0x9a>
 8011714:	782c      	ldrb	r4, [r5, #0]
 8011716:	2701      	movs	r7, #1
 8011718:	1cb5      	adds	r5, r6, #2
 801171a:	2b00      	cmp	r3, #0
 801171c:	d05b      	beq.n	80117d6 <_strtol_l.constprop.0+0xf6>
 801171e:	2b10      	cmp	r3, #16
 8011720:	d109      	bne.n	8011736 <_strtol_l.constprop.0+0x56>
 8011722:	2c30      	cmp	r4, #48	; 0x30
 8011724:	d107      	bne.n	8011736 <_strtol_l.constprop.0+0x56>
 8011726:	782c      	ldrb	r4, [r5, #0]
 8011728:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801172c:	2c58      	cmp	r4, #88	; 0x58
 801172e:	d14d      	bne.n	80117cc <_strtol_l.constprop.0+0xec>
 8011730:	786c      	ldrb	r4, [r5, #1]
 8011732:	2310      	movs	r3, #16
 8011734:	3502      	adds	r5, #2
 8011736:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801173a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801173e:	f04f 0c00 	mov.w	ip, #0
 8011742:	fbb8 f9f3 	udiv	r9, r8, r3
 8011746:	4666      	mov	r6, ip
 8011748:	fb03 8a19 	mls	sl, r3, r9, r8
 801174c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011750:	f1be 0f09 	cmp.w	lr, #9
 8011754:	d816      	bhi.n	8011784 <_strtol_l.constprop.0+0xa4>
 8011756:	4674      	mov	r4, lr
 8011758:	42a3      	cmp	r3, r4
 801175a:	dd24      	ble.n	80117a6 <_strtol_l.constprop.0+0xc6>
 801175c:	f1bc 0f00 	cmp.w	ip, #0
 8011760:	db1e      	blt.n	80117a0 <_strtol_l.constprop.0+0xc0>
 8011762:	45b1      	cmp	r9, r6
 8011764:	d31c      	bcc.n	80117a0 <_strtol_l.constprop.0+0xc0>
 8011766:	d101      	bne.n	801176c <_strtol_l.constprop.0+0x8c>
 8011768:	45a2      	cmp	sl, r4
 801176a:	db19      	blt.n	80117a0 <_strtol_l.constprop.0+0xc0>
 801176c:	fb06 4603 	mla	r6, r6, r3, r4
 8011770:	f04f 0c01 	mov.w	ip, #1
 8011774:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011778:	e7e8      	b.n	801174c <_strtol_l.constprop.0+0x6c>
 801177a:	2c2b      	cmp	r4, #43	; 0x2b
 801177c:	bf04      	itt	eq
 801177e:	782c      	ldrbeq	r4, [r5, #0]
 8011780:	1cb5      	addeq	r5, r6, #2
 8011782:	e7ca      	b.n	801171a <_strtol_l.constprop.0+0x3a>
 8011784:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011788:	f1be 0f19 	cmp.w	lr, #25
 801178c:	d801      	bhi.n	8011792 <_strtol_l.constprop.0+0xb2>
 801178e:	3c37      	subs	r4, #55	; 0x37
 8011790:	e7e2      	b.n	8011758 <_strtol_l.constprop.0+0x78>
 8011792:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011796:	f1be 0f19 	cmp.w	lr, #25
 801179a:	d804      	bhi.n	80117a6 <_strtol_l.constprop.0+0xc6>
 801179c:	3c57      	subs	r4, #87	; 0x57
 801179e:	e7db      	b.n	8011758 <_strtol_l.constprop.0+0x78>
 80117a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80117a4:	e7e6      	b.n	8011774 <_strtol_l.constprop.0+0x94>
 80117a6:	f1bc 0f00 	cmp.w	ip, #0
 80117aa:	da05      	bge.n	80117b8 <_strtol_l.constprop.0+0xd8>
 80117ac:	2322      	movs	r3, #34	; 0x22
 80117ae:	6003      	str	r3, [r0, #0]
 80117b0:	4646      	mov	r6, r8
 80117b2:	b942      	cbnz	r2, 80117c6 <_strtol_l.constprop.0+0xe6>
 80117b4:	4630      	mov	r0, r6
 80117b6:	e79e      	b.n	80116f6 <_strtol_l.constprop.0+0x16>
 80117b8:	b107      	cbz	r7, 80117bc <_strtol_l.constprop.0+0xdc>
 80117ba:	4276      	negs	r6, r6
 80117bc:	2a00      	cmp	r2, #0
 80117be:	d0f9      	beq.n	80117b4 <_strtol_l.constprop.0+0xd4>
 80117c0:	f1bc 0f00 	cmp.w	ip, #0
 80117c4:	d000      	beq.n	80117c8 <_strtol_l.constprop.0+0xe8>
 80117c6:	1e69      	subs	r1, r5, #1
 80117c8:	6011      	str	r1, [r2, #0]
 80117ca:	e7f3      	b.n	80117b4 <_strtol_l.constprop.0+0xd4>
 80117cc:	2430      	movs	r4, #48	; 0x30
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d1b1      	bne.n	8011736 <_strtol_l.constprop.0+0x56>
 80117d2:	2308      	movs	r3, #8
 80117d4:	e7af      	b.n	8011736 <_strtol_l.constprop.0+0x56>
 80117d6:	2c30      	cmp	r4, #48	; 0x30
 80117d8:	d0a5      	beq.n	8011726 <_strtol_l.constprop.0+0x46>
 80117da:	230a      	movs	r3, #10
 80117dc:	e7ab      	b.n	8011736 <_strtol_l.constprop.0+0x56>
 80117de:	bf00      	nop
 80117e0:	08015299 	.word	0x08015299

080117e4 <_strtol_r>:
 80117e4:	f7ff bf7c 	b.w	80116e0 <_strtol_l.constprop.0>

080117e8 <quorem>:
 80117e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ec:	6903      	ldr	r3, [r0, #16]
 80117ee:	690c      	ldr	r4, [r1, #16]
 80117f0:	42a3      	cmp	r3, r4
 80117f2:	4607      	mov	r7, r0
 80117f4:	f2c0 8081 	blt.w	80118fa <quorem+0x112>
 80117f8:	3c01      	subs	r4, #1
 80117fa:	f101 0814 	add.w	r8, r1, #20
 80117fe:	f100 0514 	add.w	r5, r0, #20
 8011802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011806:	9301      	str	r3, [sp, #4]
 8011808:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801180c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011810:	3301      	adds	r3, #1
 8011812:	429a      	cmp	r2, r3
 8011814:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011818:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801181c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011820:	d331      	bcc.n	8011886 <quorem+0x9e>
 8011822:	f04f 0e00 	mov.w	lr, #0
 8011826:	4640      	mov	r0, r8
 8011828:	46ac      	mov	ip, r5
 801182a:	46f2      	mov	sl, lr
 801182c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011830:	b293      	uxth	r3, r2
 8011832:	fb06 e303 	mla	r3, r6, r3, lr
 8011836:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801183a:	b29b      	uxth	r3, r3
 801183c:	ebaa 0303 	sub.w	r3, sl, r3
 8011840:	f8dc a000 	ldr.w	sl, [ip]
 8011844:	0c12      	lsrs	r2, r2, #16
 8011846:	fa13 f38a 	uxtah	r3, r3, sl
 801184a:	fb06 e202 	mla	r2, r6, r2, lr
 801184e:	9300      	str	r3, [sp, #0]
 8011850:	9b00      	ldr	r3, [sp, #0]
 8011852:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011856:	b292      	uxth	r2, r2
 8011858:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801185c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011860:	f8bd 3000 	ldrh.w	r3, [sp]
 8011864:	4581      	cmp	r9, r0
 8011866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801186a:	f84c 3b04 	str.w	r3, [ip], #4
 801186e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011872:	d2db      	bcs.n	801182c <quorem+0x44>
 8011874:	f855 300b 	ldr.w	r3, [r5, fp]
 8011878:	b92b      	cbnz	r3, 8011886 <quorem+0x9e>
 801187a:	9b01      	ldr	r3, [sp, #4]
 801187c:	3b04      	subs	r3, #4
 801187e:	429d      	cmp	r5, r3
 8011880:	461a      	mov	r2, r3
 8011882:	d32e      	bcc.n	80118e2 <quorem+0xfa>
 8011884:	613c      	str	r4, [r7, #16]
 8011886:	4638      	mov	r0, r7
 8011888:	f001 fc82 	bl	8013190 <__mcmp>
 801188c:	2800      	cmp	r0, #0
 801188e:	db24      	blt.n	80118da <quorem+0xf2>
 8011890:	3601      	adds	r6, #1
 8011892:	4628      	mov	r0, r5
 8011894:	f04f 0c00 	mov.w	ip, #0
 8011898:	f858 2b04 	ldr.w	r2, [r8], #4
 801189c:	f8d0 e000 	ldr.w	lr, [r0]
 80118a0:	b293      	uxth	r3, r2
 80118a2:	ebac 0303 	sub.w	r3, ip, r3
 80118a6:	0c12      	lsrs	r2, r2, #16
 80118a8:	fa13 f38e 	uxtah	r3, r3, lr
 80118ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80118b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80118b4:	b29b      	uxth	r3, r3
 80118b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80118ba:	45c1      	cmp	r9, r8
 80118bc:	f840 3b04 	str.w	r3, [r0], #4
 80118c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80118c4:	d2e8      	bcs.n	8011898 <quorem+0xb0>
 80118c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80118ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80118ce:	b922      	cbnz	r2, 80118da <quorem+0xf2>
 80118d0:	3b04      	subs	r3, #4
 80118d2:	429d      	cmp	r5, r3
 80118d4:	461a      	mov	r2, r3
 80118d6:	d30a      	bcc.n	80118ee <quorem+0x106>
 80118d8:	613c      	str	r4, [r7, #16]
 80118da:	4630      	mov	r0, r6
 80118dc:	b003      	add	sp, #12
 80118de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118e2:	6812      	ldr	r2, [r2, #0]
 80118e4:	3b04      	subs	r3, #4
 80118e6:	2a00      	cmp	r2, #0
 80118e8:	d1cc      	bne.n	8011884 <quorem+0x9c>
 80118ea:	3c01      	subs	r4, #1
 80118ec:	e7c7      	b.n	801187e <quorem+0x96>
 80118ee:	6812      	ldr	r2, [r2, #0]
 80118f0:	3b04      	subs	r3, #4
 80118f2:	2a00      	cmp	r2, #0
 80118f4:	d1f0      	bne.n	80118d8 <quorem+0xf0>
 80118f6:	3c01      	subs	r4, #1
 80118f8:	e7eb      	b.n	80118d2 <quorem+0xea>
 80118fa:	2000      	movs	r0, #0
 80118fc:	e7ee      	b.n	80118dc <quorem+0xf4>
	...

08011900 <_dtoa_r>:
 8011900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011904:	ed2d 8b04 	vpush	{d8-d9}
 8011908:	ec57 6b10 	vmov	r6, r7, d0
 801190c:	b093      	sub	sp, #76	; 0x4c
 801190e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011910:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011914:	9106      	str	r1, [sp, #24]
 8011916:	ee10 aa10 	vmov	sl, s0
 801191a:	4604      	mov	r4, r0
 801191c:	9209      	str	r2, [sp, #36]	; 0x24
 801191e:	930c      	str	r3, [sp, #48]	; 0x30
 8011920:	46bb      	mov	fp, r7
 8011922:	b975      	cbnz	r5, 8011942 <_dtoa_r+0x42>
 8011924:	2010      	movs	r0, #16
 8011926:	f001 f94d 	bl	8012bc4 <malloc>
 801192a:	4602      	mov	r2, r0
 801192c:	6260      	str	r0, [r4, #36]	; 0x24
 801192e:	b920      	cbnz	r0, 801193a <_dtoa_r+0x3a>
 8011930:	4ba7      	ldr	r3, [pc, #668]	; (8011bd0 <_dtoa_r+0x2d0>)
 8011932:	21ea      	movs	r1, #234	; 0xea
 8011934:	48a7      	ldr	r0, [pc, #668]	; (8011bd4 <_dtoa_r+0x2d4>)
 8011936:	f002 f8ad 	bl	8013a94 <__assert_func>
 801193a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801193e:	6005      	str	r5, [r0, #0]
 8011940:	60c5      	str	r5, [r0, #12]
 8011942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011944:	6819      	ldr	r1, [r3, #0]
 8011946:	b151      	cbz	r1, 801195e <_dtoa_r+0x5e>
 8011948:	685a      	ldr	r2, [r3, #4]
 801194a:	604a      	str	r2, [r1, #4]
 801194c:	2301      	movs	r3, #1
 801194e:	4093      	lsls	r3, r2
 8011950:	608b      	str	r3, [r1, #8]
 8011952:	4620      	mov	r0, r4
 8011954:	f001 f990 	bl	8012c78 <_Bfree>
 8011958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801195a:	2200      	movs	r2, #0
 801195c:	601a      	str	r2, [r3, #0]
 801195e:	1e3b      	subs	r3, r7, #0
 8011960:	bfaa      	itet	ge
 8011962:	2300      	movge	r3, #0
 8011964:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011968:	f8c8 3000 	strge.w	r3, [r8]
 801196c:	4b9a      	ldr	r3, [pc, #616]	; (8011bd8 <_dtoa_r+0x2d8>)
 801196e:	bfbc      	itt	lt
 8011970:	2201      	movlt	r2, #1
 8011972:	f8c8 2000 	strlt.w	r2, [r8]
 8011976:	ea33 030b 	bics.w	r3, r3, fp
 801197a:	d11b      	bne.n	80119b4 <_dtoa_r+0xb4>
 801197c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801197e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011982:	6013      	str	r3, [r2, #0]
 8011984:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011988:	4333      	orrs	r3, r6
 801198a:	f000 8592 	beq.w	80124b2 <_dtoa_r+0xbb2>
 801198e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011990:	b963      	cbnz	r3, 80119ac <_dtoa_r+0xac>
 8011992:	4b92      	ldr	r3, [pc, #584]	; (8011bdc <_dtoa_r+0x2dc>)
 8011994:	e022      	b.n	80119dc <_dtoa_r+0xdc>
 8011996:	4b92      	ldr	r3, [pc, #584]	; (8011be0 <_dtoa_r+0x2e0>)
 8011998:	9301      	str	r3, [sp, #4]
 801199a:	3308      	adds	r3, #8
 801199c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801199e:	6013      	str	r3, [r2, #0]
 80119a0:	9801      	ldr	r0, [sp, #4]
 80119a2:	b013      	add	sp, #76	; 0x4c
 80119a4:	ecbd 8b04 	vpop	{d8-d9}
 80119a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119ac:	4b8b      	ldr	r3, [pc, #556]	; (8011bdc <_dtoa_r+0x2dc>)
 80119ae:	9301      	str	r3, [sp, #4]
 80119b0:	3303      	adds	r3, #3
 80119b2:	e7f3      	b.n	801199c <_dtoa_r+0x9c>
 80119b4:	2200      	movs	r2, #0
 80119b6:	2300      	movs	r3, #0
 80119b8:	4650      	mov	r0, sl
 80119ba:	4659      	mov	r1, fp
 80119bc:	f7ef f884 	bl	8000ac8 <__aeabi_dcmpeq>
 80119c0:	ec4b ab19 	vmov	d9, sl, fp
 80119c4:	4680      	mov	r8, r0
 80119c6:	b158      	cbz	r0, 80119e0 <_dtoa_r+0xe0>
 80119c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80119ca:	2301      	movs	r3, #1
 80119cc:	6013      	str	r3, [r2, #0]
 80119ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	f000 856b 	beq.w	80124ac <_dtoa_r+0xbac>
 80119d6:	4883      	ldr	r0, [pc, #524]	; (8011be4 <_dtoa_r+0x2e4>)
 80119d8:	6018      	str	r0, [r3, #0]
 80119da:	1e43      	subs	r3, r0, #1
 80119dc:	9301      	str	r3, [sp, #4]
 80119de:	e7df      	b.n	80119a0 <_dtoa_r+0xa0>
 80119e0:	ec4b ab10 	vmov	d0, sl, fp
 80119e4:	aa10      	add	r2, sp, #64	; 0x40
 80119e6:	a911      	add	r1, sp, #68	; 0x44
 80119e8:	4620      	mov	r0, r4
 80119ea:	f001 fcf3 	bl	80133d4 <__d2b>
 80119ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80119f2:	ee08 0a10 	vmov	s16, r0
 80119f6:	2d00      	cmp	r5, #0
 80119f8:	f000 8084 	beq.w	8011b04 <_dtoa_r+0x204>
 80119fc:	ee19 3a90 	vmov	r3, s19
 8011a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011a04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011a08:	4656      	mov	r6, sl
 8011a0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011a0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011a12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011a16:	4b74      	ldr	r3, [pc, #464]	; (8011be8 <_dtoa_r+0x2e8>)
 8011a18:	2200      	movs	r2, #0
 8011a1a:	4630      	mov	r0, r6
 8011a1c:	4639      	mov	r1, r7
 8011a1e:	f7ee fc33 	bl	8000288 <__aeabi_dsub>
 8011a22:	a365      	add	r3, pc, #404	; (adr r3, 8011bb8 <_dtoa_r+0x2b8>)
 8011a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a28:	f7ee fde6 	bl	80005f8 <__aeabi_dmul>
 8011a2c:	a364      	add	r3, pc, #400	; (adr r3, 8011bc0 <_dtoa_r+0x2c0>)
 8011a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a32:	f7ee fc2b 	bl	800028c <__adddf3>
 8011a36:	4606      	mov	r6, r0
 8011a38:	4628      	mov	r0, r5
 8011a3a:	460f      	mov	r7, r1
 8011a3c:	f7ee fd72 	bl	8000524 <__aeabi_i2d>
 8011a40:	a361      	add	r3, pc, #388	; (adr r3, 8011bc8 <_dtoa_r+0x2c8>)
 8011a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a46:	f7ee fdd7 	bl	80005f8 <__aeabi_dmul>
 8011a4a:	4602      	mov	r2, r0
 8011a4c:	460b      	mov	r3, r1
 8011a4e:	4630      	mov	r0, r6
 8011a50:	4639      	mov	r1, r7
 8011a52:	f7ee fc1b 	bl	800028c <__adddf3>
 8011a56:	4606      	mov	r6, r0
 8011a58:	460f      	mov	r7, r1
 8011a5a:	f7ef f87d 	bl	8000b58 <__aeabi_d2iz>
 8011a5e:	2200      	movs	r2, #0
 8011a60:	9000      	str	r0, [sp, #0]
 8011a62:	2300      	movs	r3, #0
 8011a64:	4630      	mov	r0, r6
 8011a66:	4639      	mov	r1, r7
 8011a68:	f7ef f838 	bl	8000adc <__aeabi_dcmplt>
 8011a6c:	b150      	cbz	r0, 8011a84 <_dtoa_r+0x184>
 8011a6e:	9800      	ldr	r0, [sp, #0]
 8011a70:	f7ee fd58 	bl	8000524 <__aeabi_i2d>
 8011a74:	4632      	mov	r2, r6
 8011a76:	463b      	mov	r3, r7
 8011a78:	f7ef f826 	bl	8000ac8 <__aeabi_dcmpeq>
 8011a7c:	b910      	cbnz	r0, 8011a84 <_dtoa_r+0x184>
 8011a7e:	9b00      	ldr	r3, [sp, #0]
 8011a80:	3b01      	subs	r3, #1
 8011a82:	9300      	str	r3, [sp, #0]
 8011a84:	9b00      	ldr	r3, [sp, #0]
 8011a86:	2b16      	cmp	r3, #22
 8011a88:	d85a      	bhi.n	8011b40 <_dtoa_r+0x240>
 8011a8a:	9a00      	ldr	r2, [sp, #0]
 8011a8c:	4b57      	ldr	r3, [pc, #348]	; (8011bec <_dtoa_r+0x2ec>)
 8011a8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a96:	ec51 0b19 	vmov	r0, r1, d9
 8011a9a:	f7ef f81f 	bl	8000adc <__aeabi_dcmplt>
 8011a9e:	2800      	cmp	r0, #0
 8011aa0:	d050      	beq.n	8011b44 <_dtoa_r+0x244>
 8011aa2:	9b00      	ldr	r3, [sp, #0]
 8011aa4:	3b01      	subs	r3, #1
 8011aa6:	9300      	str	r3, [sp, #0]
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8011aac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011aae:	1b5d      	subs	r5, r3, r5
 8011ab0:	1e6b      	subs	r3, r5, #1
 8011ab2:	9305      	str	r3, [sp, #20]
 8011ab4:	bf45      	ittet	mi
 8011ab6:	f1c5 0301 	rsbmi	r3, r5, #1
 8011aba:	9304      	strmi	r3, [sp, #16]
 8011abc:	2300      	movpl	r3, #0
 8011abe:	2300      	movmi	r3, #0
 8011ac0:	bf4c      	ite	mi
 8011ac2:	9305      	strmi	r3, [sp, #20]
 8011ac4:	9304      	strpl	r3, [sp, #16]
 8011ac6:	9b00      	ldr	r3, [sp, #0]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	db3d      	blt.n	8011b48 <_dtoa_r+0x248>
 8011acc:	9b05      	ldr	r3, [sp, #20]
 8011ace:	9a00      	ldr	r2, [sp, #0]
 8011ad0:	920a      	str	r2, [sp, #40]	; 0x28
 8011ad2:	4413      	add	r3, r2
 8011ad4:	9305      	str	r3, [sp, #20]
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	9307      	str	r3, [sp, #28]
 8011ada:	9b06      	ldr	r3, [sp, #24]
 8011adc:	2b09      	cmp	r3, #9
 8011ade:	f200 8089 	bhi.w	8011bf4 <_dtoa_r+0x2f4>
 8011ae2:	2b05      	cmp	r3, #5
 8011ae4:	bfc4      	itt	gt
 8011ae6:	3b04      	subgt	r3, #4
 8011ae8:	9306      	strgt	r3, [sp, #24]
 8011aea:	9b06      	ldr	r3, [sp, #24]
 8011aec:	f1a3 0302 	sub.w	r3, r3, #2
 8011af0:	bfcc      	ite	gt
 8011af2:	2500      	movgt	r5, #0
 8011af4:	2501      	movle	r5, #1
 8011af6:	2b03      	cmp	r3, #3
 8011af8:	f200 8087 	bhi.w	8011c0a <_dtoa_r+0x30a>
 8011afc:	e8df f003 	tbb	[pc, r3]
 8011b00:	59383a2d 	.word	0x59383a2d
 8011b04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011b08:	441d      	add	r5, r3
 8011b0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011b0e:	2b20      	cmp	r3, #32
 8011b10:	bfc1      	itttt	gt
 8011b12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011b16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011b1a:	fa0b f303 	lslgt.w	r3, fp, r3
 8011b1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011b22:	bfda      	itte	le
 8011b24:	f1c3 0320 	rsble	r3, r3, #32
 8011b28:	fa06 f003 	lslle.w	r0, r6, r3
 8011b2c:	4318      	orrgt	r0, r3
 8011b2e:	f7ee fce9 	bl	8000504 <__aeabi_ui2d>
 8011b32:	2301      	movs	r3, #1
 8011b34:	4606      	mov	r6, r0
 8011b36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011b3a:	3d01      	subs	r5, #1
 8011b3c:	930e      	str	r3, [sp, #56]	; 0x38
 8011b3e:	e76a      	b.n	8011a16 <_dtoa_r+0x116>
 8011b40:	2301      	movs	r3, #1
 8011b42:	e7b2      	b.n	8011aaa <_dtoa_r+0x1aa>
 8011b44:	900b      	str	r0, [sp, #44]	; 0x2c
 8011b46:	e7b1      	b.n	8011aac <_dtoa_r+0x1ac>
 8011b48:	9b04      	ldr	r3, [sp, #16]
 8011b4a:	9a00      	ldr	r2, [sp, #0]
 8011b4c:	1a9b      	subs	r3, r3, r2
 8011b4e:	9304      	str	r3, [sp, #16]
 8011b50:	4253      	negs	r3, r2
 8011b52:	9307      	str	r3, [sp, #28]
 8011b54:	2300      	movs	r3, #0
 8011b56:	930a      	str	r3, [sp, #40]	; 0x28
 8011b58:	e7bf      	b.n	8011ada <_dtoa_r+0x1da>
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	9308      	str	r3, [sp, #32]
 8011b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	dc55      	bgt.n	8011c10 <_dtoa_r+0x310>
 8011b64:	2301      	movs	r3, #1
 8011b66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011b6a:	461a      	mov	r2, r3
 8011b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8011b6e:	e00c      	b.n	8011b8a <_dtoa_r+0x28a>
 8011b70:	2301      	movs	r3, #1
 8011b72:	e7f3      	b.n	8011b5c <_dtoa_r+0x25c>
 8011b74:	2300      	movs	r3, #0
 8011b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b78:	9308      	str	r3, [sp, #32]
 8011b7a:	9b00      	ldr	r3, [sp, #0]
 8011b7c:	4413      	add	r3, r2
 8011b7e:	9302      	str	r3, [sp, #8]
 8011b80:	3301      	adds	r3, #1
 8011b82:	2b01      	cmp	r3, #1
 8011b84:	9303      	str	r3, [sp, #12]
 8011b86:	bfb8      	it	lt
 8011b88:	2301      	movlt	r3, #1
 8011b8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	6042      	str	r2, [r0, #4]
 8011b90:	2204      	movs	r2, #4
 8011b92:	f102 0614 	add.w	r6, r2, #20
 8011b96:	429e      	cmp	r6, r3
 8011b98:	6841      	ldr	r1, [r0, #4]
 8011b9a:	d93d      	bls.n	8011c18 <_dtoa_r+0x318>
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	f001 f82b 	bl	8012bf8 <_Balloc>
 8011ba2:	9001      	str	r0, [sp, #4]
 8011ba4:	2800      	cmp	r0, #0
 8011ba6:	d13b      	bne.n	8011c20 <_dtoa_r+0x320>
 8011ba8:	4b11      	ldr	r3, [pc, #68]	; (8011bf0 <_dtoa_r+0x2f0>)
 8011baa:	4602      	mov	r2, r0
 8011bac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011bb0:	e6c0      	b.n	8011934 <_dtoa_r+0x34>
 8011bb2:	2301      	movs	r3, #1
 8011bb4:	e7df      	b.n	8011b76 <_dtoa_r+0x276>
 8011bb6:	bf00      	nop
 8011bb8:	636f4361 	.word	0x636f4361
 8011bbc:	3fd287a7 	.word	0x3fd287a7
 8011bc0:	8b60c8b3 	.word	0x8b60c8b3
 8011bc4:	3fc68a28 	.word	0x3fc68a28
 8011bc8:	509f79fb 	.word	0x509f79fb
 8011bcc:	3fd34413 	.word	0x3fd34413
 8011bd0:	080153a6 	.word	0x080153a6
 8011bd4:	080153bd 	.word	0x080153bd
 8011bd8:	7ff00000 	.word	0x7ff00000
 8011bdc:	080153a2 	.word	0x080153a2
 8011be0:	08015399 	.word	0x08015399
 8011be4:	0801521d 	.word	0x0801521d
 8011be8:	3ff80000 	.word	0x3ff80000
 8011bec:	08015528 	.word	0x08015528
 8011bf0:	08015418 	.word	0x08015418
 8011bf4:	2501      	movs	r5, #1
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	9306      	str	r3, [sp, #24]
 8011bfa:	9508      	str	r5, [sp, #32]
 8011bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011c04:	2200      	movs	r2, #0
 8011c06:	2312      	movs	r3, #18
 8011c08:	e7b0      	b.n	8011b6c <_dtoa_r+0x26c>
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	9308      	str	r3, [sp, #32]
 8011c0e:	e7f5      	b.n	8011bfc <_dtoa_r+0x2fc>
 8011c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011c16:	e7b8      	b.n	8011b8a <_dtoa_r+0x28a>
 8011c18:	3101      	adds	r1, #1
 8011c1a:	6041      	str	r1, [r0, #4]
 8011c1c:	0052      	lsls	r2, r2, #1
 8011c1e:	e7b8      	b.n	8011b92 <_dtoa_r+0x292>
 8011c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c22:	9a01      	ldr	r2, [sp, #4]
 8011c24:	601a      	str	r2, [r3, #0]
 8011c26:	9b03      	ldr	r3, [sp, #12]
 8011c28:	2b0e      	cmp	r3, #14
 8011c2a:	f200 809d 	bhi.w	8011d68 <_dtoa_r+0x468>
 8011c2e:	2d00      	cmp	r5, #0
 8011c30:	f000 809a 	beq.w	8011d68 <_dtoa_r+0x468>
 8011c34:	9b00      	ldr	r3, [sp, #0]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	dd32      	ble.n	8011ca0 <_dtoa_r+0x3a0>
 8011c3a:	4ab7      	ldr	r2, [pc, #732]	; (8011f18 <_dtoa_r+0x618>)
 8011c3c:	f003 030f 	and.w	r3, r3, #15
 8011c40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011c44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c48:	9b00      	ldr	r3, [sp, #0]
 8011c4a:	05d8      	lsls	r0, r3, #23
 8011c4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011c50:	d516      	bpl.n	8011c80 <_dtoa_r+0x380>
 8011c52:	4bb2      	ldr	r3, [pc, #712]	; (8011f1c <_dtoa_r+0x61c>)
 8011c54:	ec51 0b19 	vmov	r0, r1, d9
 8011c58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011c5c:	f7ee fdf6 	bl	800084c <__aeabi_ddiv>
 8011c60:	f007 070f 	and.w	r7, r7, #15
 8011c64:	4682      	mov	sl, r0
 8011c66:	468b      	mov	fp, r1
 8011c68:	2503      	movs	r5, #3
 8011c6a:	4eac      	ldr	r6, [pc, #688]	; (8011f1c <_dtoa_r+0x61c>)
 8011c6c:	b957      	cbnz	r7, 8011c84 <_dtoa_r+0x384>
 8011c6e:	4642      	mov	r2, r8
 8011c70:	464b      	mov	r3, r9
 8011c72:	4650      	mov	r0, sl
 8011c74:	4659      	mov	r1, fp
 8011c76:	f7ee fde9 	bl	800084c <__aeabi_ddiv>
 8011c7a:	4682      	mov	sl, r0
 8011c7c:	468b      	mov	fp, r1
 8011c7e:	e028      	b.n	8011cd2 <_dtoa_r+0x3d2>
 8011c80:	2502      	movs	r5, #2
 8011c82:	e7f2      	b.n	8011c6a <_dtoa_r+0x36a>
 8011c84:	07f9      	lsls	r1, r7, #31
 8011c86:	d508      	bpl.n	8011c9a <_dtoa_r+0x39a>
 8011c88:	4640      	mov	r0, r8
 8011c8a:	4649      	mov	r1, r9
 8011c8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011c90:	f7ee fcb2 	bl	80005f8 <__aeabi_dmul>
 8011c94:	3501      	adds	r5, #1
 8011c96:	4680      	mov	r8, r0
 8011c98:	4689      	mov	r9, r1
 8011c9a:	107f      	asrs	r7, r7, #1
 8011c9c:	3608      	adds	r6, #8
 8011c9e:	e7e5      	b.n	8011c6c <_dtoa_r+0x36c>
 8011ca0:	f000 809b 	beq.w	8011dda <_dtoa_r+0x4da>
 8011ca4:	9b00      	ldr	r3, [sp, #0]
 8011ca6:	4f9d      	ldr	r7, [pc, #628]	; (8011f1c <_dtoa_r+0x61c>)
 8011ca8:	425e      	negs	r6, r3
 8011caa:	4b9b      	ldr	r3, [pc, #620]	; (8011f18 <_dtoa_r+0x618>)
 8011cac:	f006 020f 	and.w	r2, r6, #15
 8011cb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb8:	ec51 0b19 	vmov	r0, r1, d9
 8011cbc:	f7ee fc9c 	bl	80005f8 <__aeabi_dmul>
 8011cc0:	1136      	asrs	r6, r6, #4
 8011cc2:	4682      	mov	sl, r0
 8011cc4:	468b      	mov	fp, r1
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	2502      	movs	r5, #2
 8011cca:	2e00      	cmp	r6, #0
 8011ccc:	d17a      	bne.n	8011dc4 <_dtoa_r+0x4c4>
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d1d3      	bne.n	8011c7a <_dtoa_r+0x37a>
 8011cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	f000 8082 	beq.w	8011dde <_dtoa_r+0x4de>
 8011cda:	4b91      	ldr	r3, [pc, #580]	; (8011f20 <_dtoa_r+0x620>)
 8011cdc:	2200      	movs	r2, #0
 8011cde:	4650      	mov	r0, sl
 8011ce0:	4659      	mov	r1, fp
 8011ce2:	f7ee fefb 	bl	8000adc <__aeabi_dcmplt>
 8011ce6:	2800      	cmp	r0, #0
 8011ce8:	d079      	beq.n	8011dde <_dtoa_r+0x4de>
 8011cea:	9b03      	ldr	r3, [sp, #12]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d076      	beq.n	8011dde <_dtoa_r+0x4de>
 8011cf0:	9b02      	ldr	r3, [sp, #8]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	dd36      	ble.n	8011d64 <_dtoa_r+0x464>
 8011cf6:	9b00      	ldr	r3, [sp, #0]
 8011cf8:	4650      	mov	r0, sl
 8011cfa:	4659      	mov	r1, fp
 8011cfc:	1e5f      	subs	r7, r3, #1
 8011cfe:	2200      	movs	r2, #0
 8011d00:	4b88      	ldr	r3, [pc, #544]	; (8011f24 <_dtoa_r+0x624>)
 8011d02:	f7ee fc79 	bl	80005f8 <__aeabi_dmul>
 8011d06:	9e02      	ldr	r6, [sp, #8]
 8011d08:	4682      	mov	sl, r0
 8011d0a:	468b      	mov	fp, r1
 8011d0c:	3501      	adds	r5, #1
 8011d0e:	4628      	mov	r0, r5
 8011d10:	f7ee fc08 	bl	8000524 <__aeabi_i2d>
 8011d14:	4652      	mov	r2, sl
 8011d16:	465b      	mov	r3, fp
 8011d18:	f7ee fc6e 	bl	80005f8 <__aeabi_dmul>
 8011d1c:	4b82      	ldr	r3, [pc, #520]	; (8011f28 <_dtoa_r+0x628>)
 8011d1e:	2200      	movs	r2, #0
 8011d20:	f7ee fab4 	bl	800028c <__adddf3>
 8011d24:	46d0      	mov	r8, sl
 8011d26:	46d9      	mov	r9, fp
 8011d28:	4682      	mov	sl, r0
 8011d2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011d2e:	2e00      	cmp	r6, #0
 8011d30:	d158      	bne.n	8011de4 <_dtoa_r+0x4e4>
 8011d32:	4b7e      	ldr	r3, [pc, #504]	; (8011f2c <_dtoa_r+0x62c>)
 8011d34:	2200      	movs	r2, #0
 8011d36:	4640      	mov	r0, r8
 8011d38:	4649      	mov	r1, r9
 8011d3a:	f7ee faa5 	bl	8000288 <__aeabi_dsub>
 8011d3e:	4652      	mov	r2, sl
 8011d40:	465b      	mov	r3, fp
 8011d42:	4680      	mov	r8, r0
 8011d44:	4689      	mov	r9, r1
 8011d46:	f7ee fee7 	bl	8000b18 <__aeabi_dcmpgt>
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	f040 8295 	bne.w	801227a <_dtoa_r+0x97a>
 8011d50:	4652      	mov	r2, sl
 8011d52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011d56:	4640      	mov	r0, r8
 8011d58:	4649      	mov	r1, r9
 8011d5a:	f7ee febf 	bl	8000adc <__aeabi_dcmplt>
 8011d5e:	2800      	cmp	r0, #0
 8011d60:	f040 8289 	bne.w	8012276 <_dtoa_r+0x976>
 8011d64:	ec5b ab19 	vmov	sl, fp, d9
 8011d68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	f2c0 8148 	blt.w	8012000 <_dtoa_r+0x700>
 8011d70:	9a00      	ldr	r2, [sp, #0]
 8011d72:	2a0e      	cmp	r2, #14
 8011d74:	f300 8144 	bgt.w	8012000 <_dtoa_r+0x700>
 8011d78:	4b67      	ldr	r3, [pc, #412]	; (8011f18 <_dtoa_r+0x618>)
 8011d7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011d7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	f280 80d5 	bge.w	8011f34 <_dtoa_r+0x634>
 8011d8a:	9b03      	ldr	r3, [sp, #12]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	f300 80d1 	bgt.w	8011f34 <_dtoa_r+0x634>
 8011d92:	f040 826f 	bne.w	8012274 <_dtoa_r+0x974>
 8011d96:	4b65      	ldr	r3, [pc, #404]	; (8011f2c <_dtoa_r+0x62c>)
 8011d98:	2200      	movs	r2, #0
 8011d9a:	4640      	mov	r0, r8
 8011d9c:	4649      	mov	r1, r9
 8011d9e:	f7ee fc2b 	bl	80005f8 <__aeabi_dmul>
 8011da2:	4652      	mov	r2, sl
 8011da4:	465b      	mov	r3, fp
 8011da6:	f7ee fead 	bl	8000b04 <__aeabi_dcmpge>
 8011daa:	9e03      	ldr	r6, [sp, #12]
 8011dac:	4637      	mov	r7, r6
 8011dae:	2800      	cmp	r0, #0
 8011db0:	f040 8245 	bne.w	801223e <_dtoa_r+0x93e>
 8011db4:	9d01      	ldr	r5, [sp, #4]
 8011db6:	2331      	movs	r3, #49	; 0x31
 8011db8:	f805 3b01 	strb.w	r3, [r5], #1
 8011dbc:	9b00      	ldr	r3, [sp, #0]
 8011dbe:	3301      	adds	r3, #1
 8011dc0:	9300      	str	r3, [sp, #0]
 8011dc2:	e240      	b.n	8012246 <_dtoa_r+0x946>
 8011dc4:	07f2      	lsls	r2, r6, #31
 8011dc6:	d505      	bpl.n	8011dd4 <_dtoa_r+0x4d4>
 8011dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011dcc:	f7ee fc14 	bl	80005f8 <__aeabi_dmul>
 8011dd0:	3501      	adds	r5, #1
 8011dd2:	2301      	movs	r3, #1
 8011dd4:	1076      	asrs	r6, r6, #1
 8011dd6:	3708      	adds	r7, #8
 8011dd8:	e777      	b.n	8011cca <_dtoa_r+0x3ca>
 8011dda:	2502      	movs	r5, #2
 8011ddc:	e779      	b.n	8011cd2 <_dtoa_r+0x3d2>
 8011dde:	9f00      	ldr	r7, [sp, #0]
 8011de0:	9e03      	ldr	r6, [sp, #12]
 8011de2:	e794      	b.n	8011d0e <_dtoa_r+0x40e>
 8011de4:	9901      	ldr	r1, [sp, #4]
 8011de6:	4b4c      	ldr	r3, [pc, #304]	; (8011f18 <_dtoa_r+0x618>)
 8011de8:	4431      	add	r1, r6
 8011dea:	910d      	str	r1, [sp, #52]	; 0x34
 8011dec:	9908      	ldr	r1, [sp, #32]
 8011dee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011df2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011df6:	2900      	cmp	r1, #0
 8011df8:	d043      	beq.n	8011e82 <_dtoa_r+0x582>
 8011dfa:	494d      	ldr	r1, [pc, #308]	; (8011f30 <_dtoa_r+0x630>)
 8011dfc:	2000      	movs	r0, #0
 8011dfe:	f7ee fd25 	bl	800084c <__aeabi_ddiv>
 8011e02:	4652      	mov	r2, sl
 8011e04:	465b      	mov	r3, fp
 8011e06:	f7ee fa3f 	bl	8000288 <__aeabi_dsub>
 8011e0a:	9d01      	ldr	r5, [sp, #4]
 8011e0c:	4682      	mov	sl, r0
 8011e0e:	468b      	mov	fp, r1
 8011e10:	4649      	mov	r1, r9
 8011e12:	4640      	mov	r0, r8
 8011e14:	f7ee fea0 	bl	8000b58 <__aeabi_d2iz>
 8011e18:	4606      	mov	r6, r0
 8011e1a:	f7ee fb83 	bl	8000524 <__aeabi_i2d>
 8011e1e:	4602      	mov	r2, r0
 8011e20:	460b      	mov	r3, r1
 8011e22:	4640      	mov	r0, r8
 8011e24:	4649      	mov	r1, r9
 8011e26:	f7ee fa2f 	bl	8000288 <__aeabi_dsub>
 8011e2a:	3630      	adds	r6, #48	; 0x30
 8011e2c:	f805 6b01 	strb.w	r6, [r5], #1
 8011e30:	4652      	mov	r2, sl
 8011e32:	465b      	mov	r3, fp
 8011e34:	4680      	mov	r8, r0
 8011e36:	4689      	mov	r9, r1
 8011e38:	f7ee fe50 	bl	8000adc <__aeabi_dcmplt>
 8011e3c:	2800      	cmp	r0, #0
 8011e3e:	d163      	bne.n	8011f08 <_dtoa_r+0x608>
 8011e40:	4642      	mov	r2, r8
 8011e42:	464b      	mov	r3, r9
 8011e44:	4936      	ldr	r1, [pc, #216]	; (8011f20 <_dtoa_r+0x620>)
 8011e46:	2000      	movs	r0, #0
 8011e48:	f7ee fa1e 	bl	8000288 <__aeabi_dsub>
 8011e4c:	4652      	mov	r2, sl
 8011e4e:	465b      	mov	r3, fp
 8011e50:	f7ee fe44 	bl	8000adc <__aeabi_dcmplt>
 8011e54:	2800      	cmp	r0, #0
 8011e56:	f040 80b5 	bne.w	8011fc4 <_dtoa_r+0x6c4>
 8011e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e5c:	429d      	cmp	r5, r3
 8011e5e:	d081      	beq.n	8011d64 <_dtoa_r+0x464>
 8011e60:	4b30      	ldr	r3, [pc, #192]	; (8011f24 <_dtoa_r+0x624>)
 8011e62:	2200      	movs	r2, #0
 8011e64:	4650      	mov	r0, sl
 8011e66:	4659      	mov	r1, fp
 8011e68:	f7ee fbc6 	bl	80005f8 <__aeabi_dmul>
 8011e6c:	4b2d      	ldr	r3, [pc, #180]	; (8011f24 <_dtoa_r+0x624>)
 8011e6e:	4682      	mov	sl, r0
 8011e70:	468b      	mov	fp, r1
 8011e72:	4640      	mov	r0, r8
 8011e74:	4649      	mov	r1, r9
 8011e76:	2200      	movs	r2, #0
 8011e78:	f7ee fbbe 	bl	80005f8 <__aeabi_dmul>
 8011e7c:	4680      	mov	r8, r0
 8011e7e:	4689      	mov	r9, r1
 8011e80:	e7c6      	b.n	8011e10 <_dtoa_r+0x510>
 8011e82:	4650      	mov	r0, sl
 8011e84:	4659      	mov	r1, fp
 8011e86:	f7ee fbb7 	bl	80005f8 <__aeabi_dmul>
 8011e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e8c:	9d01      	ldr	r5, [sp, #4]
 8011e8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e90:	4682      	mov	sl, r0
 8011e92:	468b      	mov	fp, r1
 8011e94:	4649      	mov	r1, r9
 8011e96:	4640      	mov	r0, r8
 8011e98:	f7ee fe5e 	bl	8000b58 <__aeabi_d2iz>
 8011e9c:	4606      	mov	r6, r0
 8011e9e:	f7ee fb41 	bl	8000524 <__aeabi_i2d>
 8011ea2:	3630      	adds	r6, #48	; 0x30
 8011ea4:	4602      	mov	r2, r0
 8011ea6:	460b      	mov	r3, r1
 8011ea8:	4640      	mov	r0, r8
 8011eaa:	4649      	mov	r1, r9
 8011eac:	f7ee f9ec 	bl	8000288 <__aeabi_dsub>
 8011eb0:	f805 6b01 	strb.w	r6, [r5], #1
 8011eb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011eb6:	429d      	cmp	r5, r3
 8011eb8:	4680      	mov	r8, r0
 8011eba:	4689      	mov	r9, r1
 8011ebc:	f04f 0200 	mov.w	r2, #0
 8011ec0:	d124      	bne.n	8011f0c <_dtoa_r+0x60c>
 8011ec2:	4b1b      	ldr	r3, [pc, #108]	; (8011f30 <_dtoa_r+0x630>)
 8011ec4:	4650      	mov	r0, sl
 8011ec6:	4659      	mov	r1, fp
 8011ec8:	f7ee f9e0 	bl	800028c <__adddf3>
 8011ecc:	4602      	mov	r2, r0
 8011ece:	460b      	mov	r3, r1
 8011ed0:	4640      	mov	r0, r8
 8011ed2:	4649      	mov	r1, r9
 8011ed4:	f7ee fe20 	bl	8000b18 <__aeabi_dcmpgt>
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	d173      	bne.n	8011fc4 <_dtoa_r+0x6c4>
 8011edc:	4652      	mov	r2, sl
 8011ede:	465b      	mov	r3, fp
 8011ee0:	4913      	ldr	r1, [pc, #76]	; (8011f30 <_dtoa_r+0x630>)
 8011ee2:	2000      	movs	r0, #0
 8011ee4:	f7ee f9d0 	bl	8000288 <__aeabi_dsub>
 8011ee8:	4602      	mov	r2, r0
 8011eea:	460b      	mov	r3, r1
 8011eec:	4640      	mov	r0, r8
 8011eee:	4649      	mov	r1, r9
 8011ef0:	f7ee fdf4 	bl	8000adc <__aeabi_dcmplt>
 8011ef4:	2800      	cmp	r0, #0
 8011ef6:	f43f af35 	beq.w	8011d64 <_dtoa_r+0x464>
 8011efa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011efc:	1e6b      	subs	r3, r5, #1
 8011efe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011f04:	2b30      	cmp	r3, #48	; 0x30
 8011f06:	d0f8      	beq.n	8011efa <_dtoa_r+0x5fa>
 8011f08:	9700      	str	r7, [sp, #0]
 8011f0a:	e049      	b.n	8011fa0 <_dtoa_r+0x6a0>
 8011f0c:	4b05      	ldr	r3, [pc, #20]	; (8011f24 <_dtoa_r+0x624>)
 8011f0e:	f7ee fb73 	bl	80005f8 <__aeabi_dmul>
 8011f12:	4680      	mov	r8, r0
 8011f14:	4689      	mov	r9, r1
 8011f16:	e7bd      	b.n	8011e94 <_dtoa_r+0x594>
 8011f18:	08015528 	.word	0x08015528
 8011f1c:	08015500 	.word	0x08015500
 8011f20:	3ff00000 	.word	0x3ff00000
 8011f24:	40240000 	.word	0x40240000
 8011f28:	401c0000 	.word	0x401c0000
 8011f2c:	40140000 	.word	0x40140000
 8011f30:	3fe00000 	.word	0x3fe00000
 8011f34:	9d01      	ldr	r5, [sp, #4]
 8011f36:	4656      	mov	r6, sl
 8011f38:	465f      	mov	r7, fp
 8011f3a:	4642      	mov	r2, r8
 8011f3c:	464b      	mov	r3, r9
 8011f3e:	4630      	mov	r0, r6
 8011f40:	4639      	mov	r1, r7
 8011f42:	f7ee fc83 	bl	800084c <__aeabi_ddiv>
 8011f46:	f7ee fe07 	bl	8000b58 <__aeabi_d2iz>
 8011f4a:	4682      	mov	sl, r0
 8011f4c:	f7ee faea 	bl	8000524 <__aeabi_i2d>
 8011f50:	4642      	mov	r2, r8
 8011f52:	464b      	mov	r3, r9
 8011f54:	f7ee fb50 	bl	80005f8 <__aeabi_dmul>
 8011f58:	4602      	mov	r2, r0
 8011f5a:	460b      	mov	r3, r1
 8011f5c:	4630      	mov	r0, r6
 8011f5e:	4639      	mov	r1, r7
 8011f60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011f64:	f7ee f990 	bl	8000288 <__aeabi_dsub>
 8011f68:	f805 6b01 	strb.w	r6, [r5], #1
 8011f6c:	9e01      	ldr	r6, [sp, #4]
 8011f6e:	9f03      	ldr	r7, [sp, #12]
 8011f70:	1bae      	subs	r6, r5, r6
 8011f72:	42b7      	cmp	r7, r6
 8011f74:	4602      	mov	r2, r0
 8011f76:	460b      	mov	r3, r1
 8011f78:	d135      	bne.n	8011fe6 <_dtoa_r+0x6e6>
 8011f7a:	f7ee f987 	bl	800028c <__adddf3>
 8011f7e:	4642      	mov	r2, r8
 8011f80:	464b      	mov	r3, r9
 8011f82:	4606      	mov	r6, r0
 8011f84:	460f      	mov	r7, r1
 8011f86:	f7ee fdc7 	bl	8000b18 <__aeabi_dcmpgt>
 8011f8a:	b9d0      	cbnz	r0, 8011fc2 <_dtoa_r+0x6c2>
 8011f8c:	4642      	mov	r2, r8
 8011f8e:	464b      	mov	r3, r9
 8011f90:	4630      	mov	r0, r6
 8011f92:	4639      	mov	r1, r7
 8011f94:	f7ee fd98 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f98:	b110      	cbz	r0, 8011fa0 <_dtoa_r+0x6a0>
 8011f9a:	f01a 0f01 	tst.w	sl, #1
 8011f9e:	d110      	bne.n	8011fc2 <_dtoa_r+0x6c2>
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	ee18 1a10 	vmov	r1, s16
 8011fa6:	f000 fe67 	bl	8012c78 <_Bfree>
 8011faa:	2300      	movs	r3, #0
 8011fac:	9800      	ldr	r0, [sp, #0]
 8011fae:	702b      	strb	r3, [r5, #0]
 8011fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fb2:	3001      	adds	r0, #1
 8011fb4:	6018      	str	r0, [r3, #0]
 8011fb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	f43f acf1 	beq.w	80119a0 <_dtoa_r+0xa0>
 8011fbe:	601d      	str	r5, [r3, #0]
 8011fc0:	e4ee      	b.n	80119a0 <_dtoa_r+0xa0>
 8011fc2:	9f00      	ldr	r7, [sp, #0]
 8011fc4:	462b      	mov	r3, r5
 8011fc6:	461d      	mov	r5, r3
 8011fc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011fcc:	2a39      	cmp	r2, #57	; 0x39
 8011fce:	d106      	bne.n	8011fde <_dtoa_r+0x6de>
 8011fd0:	9a01      	ldr	r2, [sp, #4]
 8011fd2:	429a      	cmp	r2, r3
 8011fd4:	d1f7      	bne.n	8011fc6 <_dtoa_r+0x6c6>
 8011fd6:	9901      	ldr	r1, [sp, #4]
 8011fd8:	2230      	movs	r2, #48	; 0x30
 8011fda:	3701      	adds	r7, #1
 8011fdc:	700a      	strb	r2, [r1, #0]
 8011fde:	781a      	ldrb	r2, [r3, #0]
 8011fe0:	3201      	adds	r2, #1
 8011fe2:	701a      	strb	r2, [r3, #0]
 8011fe4:	e790      	b.n	8011f08 <_dtoa_r+0x608>
 8011fe6:	4ba6      	ldr	r3, [pc, #664]	; (8012280 <_dtoa_r+0x980>)
 8011fe8:	2200      	movs	r2, #0
 8011fea:	f7ee fb05 	bl	80005f8 <__aeabi_dmul>
 8011fee:	2200      	movs	r2, #0
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	4606      	mov	r6, r0
 8011ff4:	460f      	mov	r7, r1
 8011ff6:	f7ee fd67 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ffa:	2800      	cmp	r0, #0
 8011ffc:	d09d      	beq.n	8011f3a <_dtoa_r+0x63a>
 8011ffe:	e7cf      	b.n	8011fa0 <_dtoa_r+0x6a0>
 8012000:	9a08      	ldr	r2, [sp, #32]
 8012002:	2a00      	cmp	r2, #0
 8012004:	f000 80d7 	beq.w	80121b6 <_dtoa_r+0x8b6>
 8012008:	9a06      	ldr	r2, [sp, #24]
 801200a:	2a01      	cmp	r2, #1
 801200c:	f300 80ba 	bgt.w	8012184 <_dtoa_r+0x884>
 8012010:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012012:	2a00      	cmp	r2, #0
 8012014:	f000 80b2 	beq.w	801217c <_dtoa_r+0x87c>
 8012018:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801201c:	9e07      	ldr	r6, [sp, #28]
 801201e:	9d04      	ldr	r5, [sp, #16]
 8012020:	9a04      	ldr	r2, [sp, #16]
 8012022:	441a      	add	r2, r3
 8012024:	9204      	str	r2, [sp, #16]
 8012026:	9a05      	ldr	r2, [sp, #20]
 8012028:	2101      	movs	r1, #1
 801202a:	441a      	add	r2, r3
 801202c:	4620      	mov	r0, r4
 801202e:	9205      	str	r2, [sp, #20]
 8012030:	f000 ff24 	bl	8012e7c <__i2b>
 8012034:	4607      	mov	r7, r0
 8012036:	2d00      	cmp	r5, #0
 8012038:	dd0c      	ble.n	8012054 <_dtoa_r+0x754>
 801203a:	9b05      	ldr	r3, [sp, #20]
 801203c:	2b00      	cmp	r3, #0
 801203e:	dd09      	ble.n	8012054 <_dtoa_r+0x754>
 8012040:	42ab      	cmp	r3, r5
 8012042:	9a04      	ldr	r2, [sp, #16]
 8012044:	bfa8      	it	ge
 8012046:	462b      	movge	r3, r5
 8012048:	1ad2      	subs	r2, r2, r3
 801204a:	9204      	str	r2, [sp, #16]
 801204c:	9a05      	ldr	r2, [sp, #20]
 801204e:	1aed      	subs	r5, r5, r3
 8012050:	1ad3      	subs	r3, r2, r3
 8012052:	9305      	str	r3, [sp, #20]
 8012054:	9b07      	ldr	r3, [sp, #28]
 8012056:	b31b      	cbz	r3, 80120a0 <_dtoa_r+0x7a0>
 8012058:	9b08      	ldr	r3, [sp, #32]
 801205a:	2b00      	cmp	r3, #0
 801205c:	f000 80af 	beq.w	80121be <_dtoa_r+0x8be>
 8012060:	2e00      	cmp	r6, #0
 8012062:	dd13      	ble.n	801208c <_dtoa_r+0x78c>
 8012064:	4639      	mov	r1, r7
 8012066:	4632      	mov	r2, r6
 8012068:	4620      	mov	r0, r4
 801206a:	f000 ffc7 	bl	8012ffc <__pow5mult>
 801206e:	ee18 2a10 	vmov	r2, s16
 8012072:	4601      	mov	r1, r0
 8012074:	4607      	mov	r7, r0
 8012076:	4620      	mov	r0, r4
 8012078:	f000 ff16 	bl	8012ea8 <__multiply>
 801207c:	ee18 1a10 	vmov	r1, s16
 8012080:	4680      	mov	r8, r0
 8012082:	4620      	mov	r0, r4
 8012084:	f000 fdf8 	bl	8012c78 <_Bfree>
 8012088:	ee08 8a10 	vmov	s16, r8
 801208c:	9b07      	ldr	r3, [sp, #28]
 801208e:	1b9a      	subs	r2, r3, r6
 8012090:	d006      	beq.n	80120a0 <_dtoa_r+0x7a0>
 8012092:	ee18 1a10 	vmov	r1, s16
 8012096:	4620      	mov	r0, r4
 8012098:	f000 ffb0 	bl	8012ffc <__pow5mult>
 801209c:	ee08 0a10 	vmov	s16, r0
 80120a0:	2101      	movs	r1, #1
 80120a2:	4620      	mov	r0, r4
 80120a4:	f000 feea 	bl	8012e7c <__i2b>
 80120a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	4606      	mov	r6, r0
 80120ae:	f340 8088 	ble.w	80121c2 <_dtoa_r+0x8c2>
 80120b2:	461a      	mov	r2, r3
 80120b4:	4601      	mov	r1, r0
 80120b6:	4620      	mov	r0, r4
 80120b8:	f000 ffa0 	bl	8012ffc <__pow5mult>
 80120bc:	9b06      	ldr	r3, [sp, #24]
 80120be:	2b01      	cmp	r3, #1
 80120c0:	4606      	mov	r6, r0
 80120c2:	f340 8081 	ble.w	80121c8 <_dtoa_r+0x8c8>
 80120c6:	f04f 0800 	mov.w	r8, #0
 80120ca:	6933      	ldr	r3, [r6, #16]
 80120cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80120d0:	6918      	ldr	r0, [r3, #16]
 80120d2:	f000 fe83 	bl	8012ddc <__hi0bits>
 80120d6:	f1c0 0020 	rsb	r0, r0, #32
 80120da:	9b05      	ldr	r3, [sp, #20]
 80120dc:	4418      	add	r0, r3
 80120de:	f010 001f 	ands.w	r0, r0, #31
 80120e2:	f000 8092 	beq.w	801220a <_dtoa_r+0x90a>
 80120e6:	f1c0 0320 	rsb	r3, r0, #32
 80120ea:	2b04      	cmp	r3, #4
 80120ec:	f340 808a 	ble.w	8012204 <_dtoa_r+0x904>
 80120f0:	f1c0 001c 	rsb	r0, r0, #28
 80120f4:	9b04      	ldr	r3, [sp, #16]
 80120f6:	4403      	add	r3, r0
 80120f8:	9304      	str	r3, [sp, #16]
 80120fa:	9b05      	ldr	r3, [sp, #20]
 80120fc:	4403      	add	r3, r0
 80120fe:	4405      	add	r5, r0
 8012100:	9305      	str	r3, [sp, #20]
 8012102:	9b04      	ldr	r3, [sp, #16]
 8012104:	2b00      	cmp	r3, #0
 8012106:	dd07      	ble.n	8012118 <_dtoa_r+0x818>
 8012108:	ee18 1a10 	vmov	r1, s16
 801210c:	461a      	mov	r2, r3
 801210e:	4620      	mov	r0, r4
 8012110:	f000 ffce 	bl	80130b0 <__lshift>
 8012114:	ee08 0a10 	vmov	s16, r0
 8012118:	9b05      	ldr	r3, [sp, #20]
 801211a:	2b00      	cmp	r3, #0
 801211c:	dd05      	ble.n	801212a <_dtoa_r+0x82a>
 801211e:	4631      	mov	r1, r6
 8012120:	461a      	mov	r2, r3
 8012122:	4620      	mov	r0, r4
 8012124:	f000 ffc4 	bl	80130b0 <__lshift>
 8012128:	4606      	mov	r6, r0
 801212a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801212c:	2b00      	cmp	r3, #0
 801212e:	d06e      	beq.n	801220e <_dtoa_r+0x90e>
 8012130:	ee18 0a10 	vmov	r0, s16
 8012134:	4631      	mov	r1, r6
 8012136:	f001 f82b 	bl	8013190 <__mcmp>
 801213a:	2800      	cmp	r0, #0
 801213c:	da67      	bge.n	801220e <_dtoa_r+0x90e>
 801213e:	9b00      	ldr	r3, [sp, #0]
 8012140:	3b01      	subs	r3, #1
 8012142:	ee18 1a10 	vmov	r1, s16
 8012146:	9300      	str	r3, [sp, #0]
 8012148:	220a      	movs	r2, #10
 801214a:	2300      	movs	r3, #0
 801214c:	4620      	mov	r0, r4
 801214e:	f000 fdb5 	bl	8012cbc <__multadd>
 8012152:	9b08      	ldr	r3, [sp, #32]
 8012154:	ee08 0a10 	vmov	s16, r0
 8012158:	2b00      	cmp	r3, #0
 801215a:	f000 81b1 	beq.w	80124c0 <_dtoa_r+0xbc0>
 801215e:	2300      	movs	r3, #0
 8012160:	4639      	mov	r1, r7
 8012162:	220a      	movs	r2, #10
 8012164:	4620      	mov	r0, r4
 8012166:	f000 fda9 	bl	8012cbc <__multadd>
 801216a:	9b02      	ldr	r3, [sp, #8]
 801216c:	2b00      	cmp	r3, #0
 801216e:	4607      	mov	r7, r0
 8012170:	f300 808e 	bgt.w	8012290 <_dtoa_r+0x990>
 8012174:	9b06      	ldr	r3, [sp, #24]
 8012176:	2b02      	cmp	r3, #2
 8012178:	dc51      	bgt.n	801221e <_dtoa_r+0x91e>
 801217a:	e089      	b.n	8012290 <_dtoa_r+0x990>
 801217c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801217e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012182:	e74b      	b.n	801201c <_dtoa_r+0x71c>
 8012184:	9b03      	ldr	r3, [sp, #12]
 8012186:	1e5e      	subs	r6, r3, #1
 8012188:	9b07      	ldr	r3, [sp, #28]
 801218a:	42b3      	cmp	r3, r6
 801218c:	bfbf      	itttt	lt
 801218e:	9b07      	ldrlt	r3, [sp, #28]
 8012190:	9607      	strlt	r6, [sp, #28]
 8012192:	1af2      	sublt	r2, r6, r3
 8012194:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012196:	bfb6      	itet	lt
 8012198:	189b      	addlt	r3, r3, r2
 801219a:	1b9e      	subge	r6, r3, r6
 801219c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801219e:	9b03      	ldr	r3, [sp, #12]
 80121a0:	bfb8      	it	lt
 80121a2:	2600      	movlt	r6, #0
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	bfb7      	itett	lt
 80121a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80121ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80121b0:	1a9d      	sublt	r5, r3, r2
 80121b2:	2300      	movlt	r3, #0
 80121b4:	e734      	b.n	8012020 <_dtoa_r+0x720>
 80121b6:	9e07      	ldr	r6, [sp, #28]
 80121b8:	9d04      	ldr	r5, [sp, #16]
 80121ba:	9f08      	ldr	r7, [sp, #32]
 80121bc:	e73b      	b.n	8012036 <_dtoa_r+0x736>
 80121be:	9a07      	ldr	r2, [sp, #28]
 80121c0:	e767      	b.n	8012092 <_dtoa_r+0x792>
 80121c2:	9b06      	ldr	r3, [sp, #24]
 80121c4:	2b01      	cmp	r3, #1
 80121c6:	dc18      	bgt.n	80121fa <_dtoa_r+0x8fa>
 80121c8:	f1ba 0f00 	cmp.w	sl, #0
 80121cc:	d115      	bne.n	80121fa <_dtoa_r+0x8fa>
 80121ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80121d2:	b993      	cbnz	r3, 80121fa <_dtoa_r+0x8fa>
 80121d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80121d8:	0d1b      	lsrs	r3, r3, #20
 80121da:	051b      	lsls	r3, r3, #20
 80121dc:	b183      	cbz	r3, 8012200 <_dtoa_r+0x900>
 80121de:	9b04      	ldr	r3, [sp, #16]
 80121e0:	3301      	adds	r3, #1
 80121e2:	9304      	str	r3, [sp, #16]
 80121e4:	9b05      	ldr	r3, [sp, #20]
 80121e6:	3301      	adds	r3, #1
 80121e8:	9305      	str	r3, [sp, #20]
 80121ea:	f04f 0801 	mov.w	r8, #1
 80121ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	f47f af6a 	bne.w	80120ca <_dtoa_r+0x7ca>
 80121f6:	2001      	movs	r0, #1
 80121f8:	e76f      	b.n	80120da <_dtoa_r+0x7da>
 80121fa:	f04f 0800 	mov.w	r8, #0
 80121fe:	e7f6      	b.n	80121ee <_dtoa_r+0x8ee>
 8012200:	4698      	mov	r8, r3
 8012202:	e7f4      	b.n	80121ee <_dtoa_r+0x8ee>
 8012204:	f43f af7d 	beq.w	8012102 <_dtoa_r+0x802>
 8012208:	4618      	mov	r0, r3
 801220a:	301c      	adds	r0, #28
 801220c:	e772      	b.n	80120f4 <_dtoa_r+0x7f4>
 801220e:	9b03      	ldr	r3, [sp, #12]
 8012210:	2b00      	cmp	r3, #0
 8012212:	dc37      	bgt.n	8012284 <_dtoa_r+0x984>
 8012214:	9b06      	ldr	r3, [sp, #24]
 8012216:	2b02      	cmp	r3, #2
 8012218:	dd34      	ble.n	8012284 <_dtoa_r+0x984>
 801221a:	9b03      	ldr	r3, [sp, #12]
 801221c:	9302      	str	r3, [sp, #8]
 801221e:	9b02      	ldr	r3, [sp, #8]
 8012220:	b96b      	cbnz	r3, 801223e <_dtoa_r+0x93e>
 8012222:	4631      	mov	r1, r6
 8012224:	2205      	movs	r2, #5
 8012226:	4620      	mov	r0, r4
 8012228:	f000 fd48 	bl	8012cbc <__multadd>
 801222c:	4601      	mov	r1, r0
 801222e:	4606      	mov	r6, r0
 8012230:	ee18 0a10 	vmov	r0, s16
 8012234:	f000 ffac 	bl	8013190 <__mcmp>
 8012238:	2800      	cmp	r0, #0
 801223a:	f73f adbb 	bgt.w	8011db4 <_dtoa_r+0x4b4>
 801223e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012240:	9d01      	ldr	r5, [sp, #4]
 8012242:	43db      	mvns	r3, r3
 8012244:	9300      	str	r3, [sp, #0]
 8012246:	f04f 0800 	mov.w	r8, #0
 801224a:	4631      	mov	r1, r6
 801224c:	4620      	mov	r0, r4
 801224e:	f000 fd13 	bl	8012c78 <_Bfree>
 8012252:	2f00      	cmp	r7, #0
 8012254:	f43f aea4 	beq.w	8011fa0 <_dtoa_r+0x6a0>
 8012258:	f1b8 0f00 	cmp.w	r8, #0
 801225c:	d005      	beq.n	801226a <_dtoa_r+0x96a>
 801225e:	45b8      	cmp	r8, r7
 8012260:	d003      	beq.n	801226a <_dtoa_r+0x96a>
 8012262:	4641      	mov	r1, r8
 8012264:	4620      	mov	r0, r4
 8012266:	f000 fd07 	bl	8012c78 <_Bfree>
 801226a:	4639      	mov	r1, r7
 801226c:	4620      	mov	r0, r4
 801226e:	f000 fd03 	bl	8012c78 <_Bfree>
 8012272:	e695      	b.n	8011fa0 <_dtoa_r+0x6a0>
 8012274:	2600      	movs	r6, #0
 8012276:	4637      	mov	r7, r6
 8012278:	e7e1      	b.n	801223e <_dtoa_r+0x93e>
 801227a:	9700      	str	r7, [sp, #0]
 801227c:	4637      	mov	r7, r6
 801227e:	e599      	b.n	8011db4 <_dtoa_r+0x4b4>
 8012280:	40240000 	.word	0x40240000
 8012284:	9b08      	ldr	r3, [sp, #32]
 8012286:	2b00      	cmp	r3, #0
 8012288:	f000 80ca 	beq.w	8012420 <_dtoa_r+0xb20>
 801228c:	9b03      	ldr	r3, [sp, #12]
 801228e:	9302      	str	r3, [sp, #8]
 8012290:	2d00      	cmp	r5, #0
 8012292:	dd05      	ble.n	80122a0 <_dtoa_r+0x9a0>
 8012294:	4639      	mov	r1, r7
 8012296:	462a      	mov	r2, r5
 8012298:	4620      	mov	r0, r4
 801229a:	f000 ff09 	bl	80130b0 <__lshift>
 801229e:	4607      	mov	r7, r0
 80122a0:	f1b8 0f00 	cmp.w	r8, #0
 80122a4:	d05b      	beq.n	801235e <_dtoa_r+0xa5e>
 80122a6:	6879      	ldr	r1, [r7, #4]
 80122a8:	4620      	mov	r0, r4
 80122aa:	f000 fca5 	bl	8012bf8 <_Balloc>
 80122ae:	4605      	mov	r5, r0
 80122b0:	b928      	cbnz	r0, 80122be <_dtoa_r+0x9be>
 80122b2:	4b87      	ldr	r3, [pc, #540]	; (80124d0 <_dtoa_r+0xbd0>)
 80122b4:	4602      	mov	r2, r0
 80122b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80122ba:	f7ff bb3b 	b.w	8011934 <_dtoa_r+0x34>
 80122be:	693a      	ldr	r2, [r7, #16]
 80122c0:	3202      	adds	r2, #2
 80122c2:	0092      	lsls	r2, r2, #2
 80122c4:	f107 010c 	add.w	r1, r7, #12
 80122c8:	300c      	adds	r0, #12
 80122ca:	f7fd fd29 	bl	800fd20 <memcpy>
 80122ce:	2201      	movs	r2, #1
 80122d0:	4629      	mov	r1, r5
 80122d2:	4620      	mov	r0, r4
 80122d4:	f000 feec 	bl	80130b0 <__lshift>
 80122d8:	9b01      	ldr	r3, [sp, #4]
 80122da:	f103 0901 	add.w	r9, r3, #1
 80122de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80122e2:	4413      	add	r3, r2
 80122e4:	9305      	str	r3, [sp, #20]
 80122e6:	f00a 0301 	and.w	r3, sl, #1
 80122ea:	46b8      	mov	r8, r7
 80122ec:	9304      	str	r3, [sp, #16]
 80122ee:	4607      	mov	r7, r0
 80122f0:	4631      	mov	r1, r6
 80122f2:	ee18 0a10 	vmov	r0, s16
 80122f6:	f7ff fa77 	bl	80117e8 <quorem>
 80122fa:	4641      	mov	r1, r8
 80122fc:	9002      	str	r0, [sp, #8]
 80122fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012302:	ee18 0a10 	vmov	r0, s16
 8012306:	f000 ff43 	bl	8013190 <__mcmp>
 801230a:	463a      	mov	r2, r7
 801230c:	9003      	str	r0, [sp, #12]
 801230e:	4631      	mov	r1, r6
 8012310:	4620      	mov	r0, r4
 8012312:	f000 ff59 	bl	80131c8 <__mdiff>
 8012316:	68c2      	ldr	r2, [r0, #12]
 8012318:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801231c:	4605      	mov	r5, r0
 801231e:	bb02      	cbnz	r2, 8012362 <_dtoa_r+0xa62>
 8012320:	4601      	mov	r1, r0
 8012322:	ee18 0a10 	vmov	r0, s16
 8012326:	f000 ff33 	bl	8013190 <__mcmp>
 801232a:	4602      	mov	r2, r0
 801232c:	4629      	mov	r1, r5
 801232e:	4620      	mov	r0, r4
 8012330:	9207      	str	r2, [sp, #28]
 8012332:	f000 fca1 	bl	8012c78 <_Bfree>
 8012336:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801233a:	ea43 0102 	orr.w	r1, r3, r2
 801233e:	9b04      	ldr	r3, [sp, #16]
 8012340:	430b      	orrs	r3, r1
 8012342:	464d      	mov	r5, r9
 8012344:	d10f      	bne.n	8012366 <_dtoa_r+0xa66>
 8012346:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801234a:	d02a      	beq.n	80123a2 <_dtoa_r+0xaa2>
 801234c:	9b03      	ldr	r3, [sp, #12]
 801234e:	2b00      	cmp	r3, #0
 8012350:	dd02      	ble.n	8012358 <_dtoa_r+0xa58>
 8012352:	9b02      	ldr	r3, [sp, #8]
 8012354:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012358:	f88b a000 	strb.w	sl, [fp]
 801235c:	e775      	b.n	801224a <_dtoa_r+0x94a>
 801235e:	4638      	mov	r0, r7
 8012360:	e7ba      	b.n	80122d8 <_dtoa_r+0x9d8>
 8012362:	2201      	movs	r2, #1
 8012364:	e7e2      	b.n	801232c <_dtoa_r+0xa2c>
 8012366:	9b03      	ldr	r3, [sp, #12]
 8012368:	2b00      	cmp	r3, #0
 801236a:	db04      	blt.n	8012376 <_dtoa_r+0xa76>
 801236c:	9906      	ldr	r1, [sp, #24]
 801236e:	430b      	orrs	r3, r1
 8012370:	9904      	ldr	r1, [sp, #16]
 8012372:	430b      	orrs	r3, r1
 8012374:	d122      	bne.n	80123bc <_dtoa_r+0xabc>
 8012376:	2a00      	cmp	r2, #0
 8012378:	ddee      	ble.n	8012358 <_dtoa_r+0xa58>
 801237a:	ee18 1a10 	vmov	r1, s16
 801237e:	2201      	movs	r2, #1
 8012380:	4620      	mov	r0, r4
 8012382:	f000 fe95 	bl	80130b0 <__lshift>
 8012386:	4631      	mov	r1, r6
 8012388:	ee08 0a10 	vmov	s16, r0
 801238c:	f000 ff00 	bl	8013190 <__mcmp>
 8012390:	2800      	cmp	r0, #0
 8012392:	dc03      	bgt.n	801239c <_dtoa_r+0xa9c>
 8012394:	d1e0      	bne.n	8012358 <_dtoa_r+0xa58>
 8012396:	f01a 0f01 	tst.w	sl, #1
 801239a:	d0dd      	beq.n	8012358 <_dtoa_r+0xa58>
 801239c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80123a0:	d1d7      	bne.n	8012352 <_dtoa_r+0xa52>
 80123a2:	2339      	movs	r3, #57	; 0x39
 80123a4:	f88b 3000 	strb.w	r3, [fp]
 80123a8:	462b      	mov	r3, r5
 80123aa:	461d      	mov	r5, r3
 80123ac:	3b01      	subs	r3, #1
 80123ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80123b2:	2a39      	cmp	r2, #57	; 0x39
 80123b4:	d071      	beq.n	801249a <_dtoa_r+0xb9a>
 80123b6:	3201      	adds	r2, #1
 80123b8:	701a      	strb	r2, [r3, #0]
 80123ba:	e746      	b.n	801224a <_dtoa_r+0x94a>
 80123bc:	2a00      	cmp	r2, #0
 80123be:	dd07      	ble.n	80123d0 <_dtoa_r+0xad0>
 80123c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80123c4:	d0ed      	beq.n	80123a2 <_dtoa_r+0xaa2>
 80123c6:	f10a 0301 	add.w	r3, sl, #1
 80123ca:	f88b 3000 	strb.w	r3, [fp]
 80123ce:	e73c      	b.n	801224a <_dtoa_r+0x94a>
 80123d0:	9b05      	ldr	r3, [sp, #20]
 80123d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80123d6:	4599      	cmp	r9, r3
 80123d8:	d047      	beq.n	801246a <_dtoa_r+0xb6a>
 80123da:	ee18 1a10 	vmov	r1, s16
 80123de:	2300      	movs	r3, #0
 80123e0:	220a      	movs	r2, #10
 80123e2:	4620      	mov	r0, r4
 80123e4:	f000 fc6a 	bl	8012cbc <__multadd>
 80123e8:	45b8      	cmp	r8, r7
 80123ea:	ee08 0a10 	vmov	s16, r0
 80123ee:	f04f 0300 	mov.w	r3, #0
 80123f2:	f04f 020a 	mov.w	r2, #10
 80123f6:	4641      	mov	r1, r8
 80123f8:	4620      	mov	r0, r4
 80123fa:	d106      	bne.n	801240a <_dtoa_r+0xb0a>
 80123fc:	f000 fc5e 	bl	8012cbc <__multadd>
 8012400:	4680      	mov	r8, r0
 8012402:	4607      	mov	r7, r0
 8012404:	f109 0901 	add.w	r9, r9, #1
 8012408:	e772      	b.n	80122f0 <_dtoa_r+0x9f0>
 801240a:	f000 fc57 	bl	8012cbc <__multadd>
 801240e:	4639      	mov	r1, r7
 8012410:	4680      	mov	r8, r0
 8012412:	2300      	movs	r3, #0
 8012414:	220a      	movs	r2, #10
 8012416:	4620      	mov	r0, r4
 8012418:	f000 fc50 	bl	8012cbc <__multadd>
 801241c:	4607      	mov	r7, r0
 801241e:	e7f1      	b.n	8012404 <_dtoa_r+0xb04>
 8012420:	9b03      	ldr	r3, [sp, #12]
 8012422:	9302      	str	r3, [sp, #8]
 8012424:	9d01      	ldr	r5, [sp, #4]
 8012426:	ee18 0a10 	vmov	r0, s16
 801242a:	4631      	mov	r1, r6
 801242c:	f7ff f9dc 	bl	80117e8 <quorem>
 8012430:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012434:	9b01      	ldr	r3, [sp, #4]
 8012436:	f805 ab01 	strb.w	sl, [r5], #1
 801243a:	1aea      	subs	r2, r5, r3
 801243c:	9b02      	ldr	r3, [sp, #8]
 801243e:	4293      	cmp	r3, r2
 8012440:	dd09      	ble.n	8012456 <_dtoa_r+0xb56>
 8012442:	ee18 1a10 	vmov	r1, s16
 8012446:	2300      	movs	r3, #0
 8012448:	220a      	movs	r2, #10
 801244a:	4620      	mov	r0, r4
 801244c:	f000 fc36 	bl	8012cbc <__multadd>
 8012450:	ee08 0a10 	vmov	s16, r0
 8012454:	e7e7      	b.n	8012426 <_dtoa_r+0xb26>
 8012456:	9b02      	ldr	r3, [sp, #8]
 8012458:	2b00      	cmp	r3, #0
 801245a:	bfc8      	it	gt
 801245c:	461d      	movgt	r5, r3
 801245e:	9b01      	ldr	r3, [sp, #4]
 8012460:	bfd8      	it	le
 8012462:	2501      	movle	r5, #1
 8012464:	441d      	add	r5, r3
 8012466:	f04f 0800 	mov.w	r8, #0
 801246a:	ee18 1a10 	vmov	r1, s16
 801246e:	2201      	movs	r2, #1
 8012470:	4620      	mov	r0, r4
 8012472:	f000 fe1d 	bl	80130b0 <__lshift>
 8012476:	4631      	mov	r1, r6
 8012478:	ee08 0a10 	vmov	s16, r0
 801247c:	f000 fe88 	bl	8013190 <__mcmp>
 8012480:	2800      	cmp	r0, #0
 8012482:	dc91      	bgt.n	80123a8 <_dtoa_r+0xaa8>
 8012484:	d102      	bne.n	801248c <_dtoa_r+0xb8c>
 8012486:	f01a 0f01 	tst.w	sl, #1
 801248a:	d18d      	bne.n	80123a8 <_dtoa_r+0xaa8>
 801248c:	462b      	mov	r3, r5
 801248e:	461d      	mov	r5, r3
 8012490:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012494:	2a30      	cmp	r2, #48	; 0x30
 8012496:	d0fa      	beq.n	801248e <_dtoa_r+0xb8e>
 8012498:	e6d7      	b.n	801224a <_dtoa_r+0x94a>
 801249a:	9a01      	ldr	r2, [sp, #4]
 801249c:	429a      	cmp	r2, r3
 801249e:	d184      	bne.n	80123aa <_dtoa_r+0xaaa>
 80124a0:	9b00      	ldr	r3, [sp, #0]
 80124a2:	3301      	adds	r3, #1
 80124a4:	9300      	str	r3, [sp, #0]
 80124a6:	2331      	movs	r3, #49	; 0x31
 80124a8:	7013      	strb	r3, [r2, #0]
 80124aa:	e6ce      	b.n	801224a <_dtoa_r+0x94a>
 80124ac:	4b09      	ldr	r3, [pc, #36]	; (80124d4 <_dtoa_r+0xbd4>)
 80124ae:	f7ff ba95 	b.w	80119dc <_dtoa_r+0xdc>
 80124b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	f47f aa6e 	bne.w	8011996 <_dtoa_r+0x96>
 80124ba:	4b07      	ldr	r3, [pc, #28]	; (80124d8 <_dtoa_r+0xbd8>)
 80124bc:	f7ff ba8e 	b.w	80119dc <_dtoa_r+0xdc>
 80124c0:	9b02      	ldr	r3, [sp, #8]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	dcae      	bgt.n	8012424 <_dtoa_r+0xb24>
 80124c6:	9b06      	ldr	r3, [sp, #24]
 80124c8:	2b02      	cmp	r3, #2
 80124ca:	f73f aea8 	bgt.w	801221e <_dtoa_r+0x91e>
 80124ce:	e7a9      	b.n	8012424 <_dtoa_r+0xb24>
 80124d0:	08015418 	.word	0x08015418
 80124d4:	0801521c 	.word	0x0801521c
 80124d8:	08015399 	.word	0x08015399

080124dc <rshift>:
 80124dc:	6903      	ldr	r3, [r0, #16]
 80124de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80124e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80124e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80124ea:	f100 0414 	add.w	r4, r0, #20
 80124ee:	dd45      	ble.n	801257c <rshift+0xa0>
 80124f0:	f011 011f 	ands.w	r1, r1, #31
 80124f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80124f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80124fc:	d10c      	bne.n	8012518 <rshift+0x3c>
 80124fe:	f100 0710 	add.w	r7, r0, #16
 8012502:	4629      	mov	r1, r5
 8012504:	42b1      	cmp	r1, r6
 8012506:	d334      	bcc.n	8012572 <rshift+0x96>
 8012508:	1a9b      	subs	r3, r3, r2
 801250a:	009b      	lsls	r3, r3, #2
 801250c:	1eea      	subs	r2, r5, #3
 801250e:	4296      	cmp	r6, r2
 8012510:	bf38      	it	cc
 8012512:	2300      	movcc	r3, #0
 8012514:	4423      	add	r3, r4
 8012516:	e015      	b.n	8012544 <rshift+0x68>
 8012518:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801251c:	f1c1 0820 	rsb	r8, r1, #32
 8012520:	40cf      	lsrs	r7, r1
 8012522:	f105 0e04 	add.w	lr, r5, #4
 8012526:	46a1      	mov	r9, r4
 8012528:	4576      	cmp	r6, lr
 801252a:	46f4      	mov	ip, lr
 801252c:	d815      	bhi.n	801255a <rshift+0x7e>
 801252e:	1a9a      	subs	r2, r3, r2
 8012530:	0092      	lsls	r2, r2, #2
 8012532:	3a04      	subs	r2, #4
 8012534:	3501      	adds	r5, #1
 8012536:	42ae      	cmp	r6, r5
 8012538:	bf38      	it	cc
 801253a:	2200      	movcc	r2, #0
 801253c:	18a3      	adds	r3, r4, r2
 801253e:	50a7      	str	r7, [r4, r2]
 8012540:	b107      	cbz	r7, 8012544 <rshift+0x68>
 8012542:	3304      	adds	r3, #4
 8012544:	1b1a      	subs	r2, r3, r4
 8012546:	42a3      	cmp	r3, r4
 8012548:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801254c:	bf08      	it	eq
 801254e:	2300      	moveq	r3, #0
 8012550:	6102      	str	r2, [r0, #16]
 8012552:	bf08      	it	eq
 8012554:	6143      	streq	r3, [r0, #20]
 8012556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801255a:	f8dc c000 	ldr.w	ip, [ip]
 801255e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012562:	ea4c 0707 	orr.w	r7, ip, r7
 8012566:	f849 7b04 	str.w	r7, [r9], #4
 801256a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801256e:	40cf      	lsrs	r7, r1
 8012570:	e7da      	b.n	8012528 <rshift+0x4c>
 8012572:	f851 cb04 	ldr.w	ip, [r1], #4
 8012576:	f847 cf04 	str.w	ip, [r7, #4]!
 801257a:	e7c3      	b.n	8012504 <rshift+0x28>
 801257c:	4623      	mov	r3, r4
 801257e:	e7e1      	b.n	8012544 <rshift+0x68>

08012580 <__hexdig_fun>:
 8012580:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012584:	2b09      	cmp	r3, #9
 8012586:	d802      	bhi.n	801258e <__hexdig_fun+0xe>
 8012588:	3820      	subs	r0, #32
 801258a:	b2c0      	uxtb	r0, r0
 801258c:	4770      	bx	lr
 801258e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012592:	2b05      	cmp	r3, #5
 8012594:	d801      	bhi.n	801259a <__hexdig_fun+0x1a>
 8012596:	3847      	subs	r0, #71	; 0x47
 8012598:	e7f7      	b.n	801258a <__hexdig_fun+0xa>
 801259a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801259e:	2b05      	cmp	r3, #5
 80125a0:	d801      	bhi.n	80125a6 <__hexdig_fun+0x26>
 80125a2:	3827      	subs	r0, #39	; 0x27
 80125a4:	e7f1      	b.n	801258a <__hexdig_fun+0xa>
 80125a6:	2000      	movs	r0, #0
 80125a8:	4770      	bx	lr
	...

080125ac <__gethex>:
 80125ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b0:	ed2d 8b02 	vpush	{d8}
 80125b4:	b089      	sub	sp, #36	; 0x24
 80125b6:	ee08 0a10 	vmov	s16, r0
 80125ba:	9304      	str	r3, [sp, #16]
 80125bc:	4bb4      	ldr	r3, [pc, #720]	; (8012890 <__gethex+0x2e4>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	9301      	str	r3, [sp, #4]
 80125c2:	4618      	mov	r0, r3
 80125c4:	468b      	mov	fp, r1
 80125c6:	4690      	mov	r8, r2
 80125c8:	f7ed fe02 	bl	80001d0 <strlen>
 80125cc:	9b01      	ldr	r3, [sp, #4]
 80125ce:	f8db 2000 	ldr.w	r2, [fp]
 80125d2:	4403      	add	r3, r0
 80125d4:	4682      	mov	sl, r0
 80125d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80125da:	9305      	str	r3, [sp, #20]
 80125dc:	1c93      	adds	r3, r2, #2
 80125de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80125e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80125e6:	32fe      	adds	r2, #254	; 0xfe
 80125e8:	18d1      	adds	r1, r2, r3
 80125ea:	461f      	mov	r7, r3
 80125ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80125f0:	9100      	str	r1, [sp, #0]
 80125f2:	2830      	cmp	r0, #48	; 0x30
 80125f4:	d0f8      	beq.n	80125e8 <__gethex+0x3c>
 80125f6:	f7ff ffc3 	bl	8012580 <__hexdig_fun>
 80125fa:	4604      	mov	r4, r0
 80125fc:	2800      	cmp	r0, #0
 80125fe:	d13a      	bne.n	8012676 <__gethex+0xca>
 8012600:	9901      	ldr	r1, [sp, #4]
 8012602:	4652      	mov	r2, sl
 8012604:	4638      	mov	r0, r7
 8012606:	f001 fa23 	bl	8013a50 <strncmp>
 801260a:	4605      	mov	r5, r0
 801260c:	2800      	cmp	r0, #0
 801260e:	d168      	bne.n	80126e2 <__gethex+0x136>
 8012610:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012614:	eb07 060a 	add.w	r6, r7, sl
 8012618:	f7ff ffb2 	bl	8012580 <__hexdig_fun>
 801261c:	2800      	cmp	r0, #0
 801261e:	d062      	beq.n	80126e6 <__gethex+0x13a>
 8012620:	4633      	mov	r3, r6
 8012622:	7818      	ldrb	r0, [r3, #0]
 8012624:	2830      	cmp	r0, #48	; 0x30
 8012626:	461f      	mov	r7, r3
 8012628:	f103 0301 	add.w	r3, r3, #1
 801262c:	d0f9      	beq.n	8012622 <__gethex+0x76>
 801262e:	f7ff ffa7 	bl	8012580 <__hexdig_fun>
 8012632:	2301      	movs	r3, #1
 8012634:	fab0 f480 	clz	r4, r0
 8012638:	0964      	lsrs	r4, r4, #5
 801263a:	4635      	mov	r5, r6
 801263c:	9300      	str	r3, [sp, #0]
 801263e:	463a      	mov	r2, r7
 8012640:	4616      	mov	r6, r2
 8012642:	3201      	adds	r2, #1
 8012644:	7830      	ldrb	r0, [r6, #0]
 8012646:	f7ff ff9b 	bl	8012580 <__hexdig_fun>
 801264a:	2800      	cmp	r0, #0
 801264c:	d1f8      	bne.n	8012640 <__gethex+0x94>
 801264e:	9901      	ldr	r1, [sp, #4]
 8012650:	4652      	mov	r2, sl
 8012652:	4630      	mov	r0, r6
 8012654:	f001 f9fc 	bl	8013a50 <strncmp>
 8012658:	b980      	cbnz	r0, 801267c <__gethex+0xd0>
 801265a:	b94d      	cbnz	r5, 8012670 <__gethex+0xc4>
 801265c:	eb06 050a 	add.w	r5, r6, sl
 8012660:	462a      	mov	r2, r5
 8012662:	4616      	mov	r6, r2
 8012664:	3201      	adds	r2, #1
 8012666:	7830      	ldrb	r0, [r6, #0]
 8012668:	f7ff ff8a 	bl	8012580 <__hexdig_fun>
 801266c:	2800      	cmp	r0, #0
 801266e:	d1f8      	bne.n	8012662 <__gethex+0xb6>
 8012670:	1bad      	subs	r5, r5, r6
 8012672:	00ad      	lsls	r5, r5, #2
 8012674:	e004      	b.n	8012680 <__gethex+0xd4>
 8012676:	2400      	movs	r4, #0
 8012678:	4625      	mov	r5, r4
 801267a:	e7e0      	b.n	801263e <__gethex+0x92>
 801267c:	2d00      	cmp	r5, #0
 801267e:	d1f7      	bne.n	8012670 <__gethex+0xc4>
 8012680:	7833      	ldrb	r3, [r6, #0]
 8012682:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012686:	2b50      	cmp	r3, #80	; 0x50
 8012688:	d13b      	bne.n	8012702 <__gethex+0x156>
 801268a:	7873      	ldrb	r3, [r6, #1]
 801268c:	2b2b      	cmp	r3, #43	; 0x2b
 801268e:	d02c      	beq.n	80126ea <__gethex+0x13e>
 8012690:	2b2d      	cmp	r3, #45	; 0x2d
 8012692:	d02e      	beq.n	80126f2 <__gethex+0x146>
 8012694:	1c71      	adds	r1, r6, #1
 8012696:	f04f 0900 	mov.w	r9, #0
 801269a:	7808      	ldrb	r0, [r1, #0]
 801269c:	f7ff ff70 	bl	8012580 <__hexdig_fun>
 80126a0:	1e43      	subs	r3, r0, #1
 80126a2:	b2db      	uxtb	r3, r3
 80126a4:	2b18      	cmp	r3, #24
 80126a6:	d82c      	bhi.n	8012702 <__gethex+0x156>
 80126a8:	f1a0 0210 	sub.w	r2, r0, #16
 80126ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80126b0:	f7ff ff66 	bl	8012580 <__hexdig_fun>
 80126b4:	1e43      	subs	r3, r0, #1
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	2b18      	cmp	r3, #24
 80126ba:	d91d      	bls.n	80126f8 <__gethex+0x14c>
 80126bc:	f1b9 0f00 	cmp.w	r9, #0
 80126c0:	d000      	beq.n	80126c4 <__gethex+0x118>
 80126c2:	4252      	negs	r2, r2
 80126c4:	4415      	add	r5, r2
 80126c6:	f8cb 1000 	str.w	r1, [fp]
 80126ca:	b1e4      	cbz	r4, 8012706 <__gethex+0x15a>
 80126cc:	9b00      	ldr	r3, [sp, #0]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	bf14      	ite	ne
 80126d2:	2700      	movne	r7, #0
 80126d4:	2706      	moveq	r7, #6
 80126d6:	4638      	mov	r0, r7
 80126d8:	b009      	add	sp, #36	; 0x24
 80126da:	ecbd 8b02 	vpop	{d8}
 80126de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126e2:	463e      	mov	r6, r7
 80126e4:	4625      	mov	r5, r4
 80126e6:	2401      	movs	r4, #1
 80126e8:	e7ca      	b.n	8012680 <__gethex+0xd4>
 80126ea:	f04f 0900 	mov.w	r9, #0
 80126ee:	1cb1      	adds	r1, r6, #2
 80126f0:	e7d3      	b.n	801269a <__gethex+0xee>
 80126f2:	f04f 0901 	mov.w	r9, #1
 80126f6:	e7fa      	b.n	80126ee <__gethex+0x142>
 80126f8:	230a      	movs	r3, #10
 80126fa:	fb03 0202 	mla	r2, r3, r2, r0
 80126fe:	3a10      	subs	r2, #16
 8012700:	e7d4      	b.n	80126ac <__gethex+0x100>
 8012702:	4631      	mov	r1, r6
 8012704:	e7df      	b.n	80126c6 <__gethex+0x11a>
 8012706:	1bf3      	subs	r3, r6, r7
 8012708:	3b01      	subs	r3, #1
 801270a:	4621      	mov	r1, r4
 801270c:	2b07      	cmp	r3, #7
 801270e:	dc0b      	bgt.n	8012728 <__gethex+0x17c>
 8012710:	ee18 0a10 	vmov	r0, s16
 8012714:	f000 fa70 	bl	8012bf8 <_Balloc>
 8012718:	4604      	mov	r4, r0
 801271a:	b940      	cbnz	r0, 801272e <__gethex+0x182>
 801271c:	4b5d      	ldr	r3, [pc, #372]	; (8012894 <__gethex+0x2e8>)
 801271e:	4602      	mov	r2, r0
 8012720:	21de      	movs	r1, #222	; 0xde
 8012722:	485d      	ldr	r0, [pc, #372]	; (8012898 <__gethex+0x2ec>)
 8012724:	f001 f9b6 	bl	8013a94 <__assert_func>
 8012728:	3101      	adds	r1, #1
 801272a:	105b      	asrs	r3, r3, #1
 801272c:	e7ee      	b.n	801270c <__gethex+0x160>
 801272e:	f100 0914 	add.w	r9, r0, #20
 8012732:	f04f 0b00 	mov.w	fp, #0
 8012736:	f1ca 0301 	rsb	r3, sl, #1
 801273a:	f8cd 9008 	str.w	r9, [sp, #8]
 801273e:	f8cd b000 	str.w	fp, [sp]
 8012742:	9306      	str	r3, [sp, #24]
 8012744:	42b7      	cmp	r7, r6
 8012746:	d340      	bcc.n	80127ca <__gethex+0x21e>
 8012748:	9802      	ldr	r0, [sp, #8]
 801274a:	9b00      	ldr	r3, [sp, #0]
 801274c:	f840 3b04 	str.w	r3, [r0], #4
 8012750:	eba0 0009 	sub.w	r0, r0, r9
 8012754:	1080      	asrs	r0, r0, #2
 8012756:	0146      	lsls	r6, r0, #5
 8012758:	6120      	str	r0, [r4, #16]
 801275a:	4618      	mov	r0, r3
 801275c:	f000 fb3e 	bl	8012ddc <__hi0bits>
 8012760:	1a30      	subs	r0, r6, r0
 8012762:	f8d8 6000 	ldr.w	r6, [r8]
 8012766:	42b0      	cmp	r0, r6
 8012768:	dd63      	ble.n	8012832 <__gethex+0x286>
 801276a:	1b87      	subs	r7, r0, r6
 801276c:	4639      	mov	r1, r7
 801276e:	4620      	mov	r0, r4
 8012770:	f000 fee2 	bl	8013538 <__any_on>
 8012774:	4682      	mov	sl, r0
 8012776:	b1a8      	cbz	r0, 80127a4 <__gethex+0x1f8>
 8012778:	1e7b      	subs	r3, r7, #1
 801277a:	1159      	asrs	r1, r3, #5
 801277c:	f003 021f 	and.w	r2, r3, #31
 8012780:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012784:	f04f 0a01 	mov.w	sl, #1
 8012788:	fa0a f202 	lsl.w	r2, sl, r2
 801278c:	420a      	tst	r2, r1
 801278e:	d009      	beq.n	80127a4 <__gethex+0x1f8>
 8012790:	4553      	cmp	r3, sl
 8012792:	dd05      	ble.n	80127a0 <__gethex+0x1f4>
 8012794:	1eb9      	subs	r1, r7, #2
 8012796:	4620      	mov	r0, r4
 8012798:	f000 fece 	bl	8013538 <__any_on>
 801279c:	2800      	cmp	r0, #0
 801279e:	d145      	bne.n	801282c <__gethex+0x280>
 80127a0:	f04f 0a02 	mov.w	sl, #2
 80127a4:	4639      	mov	r1, r7
 80127a6:	4620      	mov	r0, r4
 80127a8:	f7ff fe98 	bl	80124dc <rshift>
 80127ac:	443d      	add	r5, r7
 80127ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80127b2:	42ab      	cmp	r3, r5
 80127b4:	da4c      	bge.n	8012850 <__gethex+0x2a4>
 80127b6:	ee18 0a10 	vmov	r0, s16
 80127ba:	4621      	mov	r1, r4
 80127bc:	f000 fa5c 	bl	8012c78 <_Bfree>
 80127c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80127c2:	2300      	movs	r3, #0
 80127c4:	6013      	str	r3, [r2, #0]
 80127c6:	27a3      	movs	r7, #163	; 0xa3
 80127c8:	e785      	b.n	80126d6 <__gethex+0x12a>
 80127ca:	1e73      	subs	r3, r6, #1
 80127cc:	9a05      	ldr	r2, [sp, #20]
 80127ce:	9303      	str	r3, [sp, #12]
 80127d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80127d4:	4293      	cmp	r3, r2
 80127d6:	d019      	beq.n	801280c <__gethex+0x260>
 80127d8:	f1bb 0f20 	cmp.w	fp, #32
 80127dc:	d107      	bne.n	80127ee <__gethex+0x242>
 80127de:	9b02      	ldr	r3, [sp, #8]
 80127e0:	9a00      	ldr	r2, [sp, #0]
 80127e2:	f843 2b04 	str.w	r2, [r3], #4
 80127e6:	9302      	str	r3, [sp, #8]
 80127e8:	2300      	movs	r3, #0
 80127ea:	9300      	str	r3, [sp, #0]
 80127ec:	469b      	mov	fp, r3
 80127ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80127f2:	f7ff fec5 	bl	8012580 <__hexdig_fun>
 80127f6:	9b00      	ldr	r3, [sp, #0]
 80127f8:	f000 000f 	and.w	r0, r0, #15
 80127fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8012800:	4303      	orrs	r3, r0
 8012802:	9300      	str	r3, [sp, #0]
 8012804:	f10b 0b04 	add.w	fp, fp, #4
 8012808:	9b03      	ldr	r3, [sp, #12]
 801280a:	e00d      	b.n	8012828 <__gethex+0x27c>
 801280c:	9b03      	ldr	r3, [sp, #12]
 801280e:	9a06      	ldr	r2, [sp, #24]
 8012810:	4413      	add	r3, r2
 8012812:	42bb      	cmp	r3, r7
 8012814:	d3e0      	bcc.n	80127d8 <__gethex+0x22c>
 8012816:	4618      	mov	r0, r3
 8012818:	9901      	ldr	r1, [sp, #4]
 801281a:	9307      	str	r3, [sp, #28]
 801281c:	4652      	mov	r2, sl
 801281e:	f001 f917 	bl	8013a50 <strncmp>
 8012822:	9b07      	ldr	r3, [sp, #28]
 8012824:	2800      	cmp	r0, #0
 8012826:	d1d7      	bne.n	80127d8 <__gethex+0x22c>
 8012828:	461e      	mov	r6, r3
 801282a:	e78b      	b.n	8012744 <__gethex+0x198>
 801282c:	f04f 0a03 	mov.w	sl, #3
 8012830:	e7b8      	b.n	80127a4 <__gethex+0x1f8>
 8012832:	da0a      	bge.n	801284a <__gethex+0x29e>
 8012834:	1a37      	subs	r7, r6, r0
 8012836:	4621      	mov	r1, r4
 8012838:	ee18 0a10 	vmov	r0, s16
 801283c:	463a      	mov	r2, r7
 801283e:	f000 fc37 	bl	80130b0 <__lshift>
 8012842:	1bed      	subs	r5, r5, r7
 8012844:	4604      	mov	r4, r0
 8012846:	f100 0914 	add.w	r9, r0, #20
 801284a:	f04f 0a00 	mov.w	sl, #0
 801284e:	e7ae      	b.n	80127ae <__gethex+0x202>
 8012850:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012854:	42a8      	cmp	r0, r5
 8012856:	dd72      	ble.n	801293e <__gethex+0x392>
 8012858:	1b45      	subs	r5, r0, r5
 801285a:	42ae      	cmp	r6, r5
 801285c:	dc36      	bgt.n	80128cc <__gethex+0x320>
 801285e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012862:	2b02      	cmp	r3, #2
 8012864:	d02a      	beq.n	80128bc <__gethex+0x310>
 8012866:	2b03      	cmp	r3, #3
 8012868:	d02c      	beq.n	80128c4 <__gethex+0x318>
 801286a:	2b01      	cmp	r3, #1
 801286c:	d11c      	bne.n	80128a8 <__gethex+0x2fc>
 801286e:	42ae      	cmp	r6, r5
 8012870:	d11a      	bne.n	80128a8 <__gethex+0x2fc>
 8012872:	2e01      	cmp	r6, #1
 8012874:	d112      	bne.n	801289c <__gethex+0x2f0>
 8012876:	9a04      	ldr	r2, [sp, #16]
 8012878:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801287c:	6013      	str	r3, [r2, #0]
 801287e:	2301      	movs	r3, #1
 8012880:	6123      	str	r3, [r4, #16]
 8012882:	f8c9 3000 	str.w	r3, [r9]
 8012886:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012888:	2762      	movs	r7, #98	; 0x62
 801288a:	601c      	str	r4, [r3, #0]
 801288c:	e723      	b.n	80126d6 <__gethex+0x12a>
 801288e:	bf00      	nop
 8012890:	08015490 	.word	0x08015490
 8012894:	08015418 	.word	0x08015418
 8012898:	08015429 	.word	0x08015429
 801289c:	1e71      	subs	r1, r6, #1
 801289e:	4620      	mov	r0, r4
 80128a0:	f000 fe4a 	bl	8013538 <__any_on>
 80128a4:	2800      	cmp	r0, #0
 80128a6:	d1e6      	bne.n	8012876 <__gethex+0x2ca>
 80128a8:	ee18 0a10 	vmov	r0, s16
 80128ac:	4621      	mov	r1, r4
 80128ae:	f000 f9e3 	bl	8012c78 <_Bfree>
 80128b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80128b4:	2300      	movs	r3, #0
 80128b6:	6013      	str	r3, [r2, #0]
 80128b8:	2750      	movs	r7, #80	; 0x50
 80128ba:	e70c      	b.n	80126d6 <__gethex+0x12a>
 80128bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d1f2      	bne.n	80128a8 <__gethex+0x2fc>
 80128c2:	e7d8      	b.n	8012876 <__gethex+0x2ca>
 80128c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d1d5      	bne.n	8012876 <__gethex+0x2ca>
 80128ca:	e7ed      	b.n	80128a8 <__gethex+0x2fc>
 80128cc:	1e6f      	subs	r7, r5, #1
 80128ce:	f1ba 0f00 	cmp.w	sl, #0
 80128d2:	d131      	bne.n	8012938 <__gethex+0x38c>
 80128d4:	b127      	cbz	r7, 80128e0 <__gethex+0x334>
 80128d6:	4639      	mov	r1, r7
 80128d8:	4620      	mov	r0, r4
 80128da:	f000 fe2d 	bl	8013538 <__any_on>
 80128de:	4682      	mov	sl, r0
 80128e0:	117b      	asrs	r3, r7, #5
 80128e2:	2101      	movs	r1, #1
 80128e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80128e8:	f007 071f 	and.w	r7, r7, #31
 80128ec:	fa01 f707 	lsl.w	r7, r1, r7
 80128f0:	421f      	tst	r7, r3
 80128f2:	4629      	mov	r1, r5
 80128f4:	4620      	mov	r0, r4
 80128f6:	bf18      	it	ne
 80128f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80128fc:	1b76      	subs	r6, r6, r5
 80128fe:	f7ff fded 	bl	80124dc <rshift>
 8012902:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012906:	2702      	movs	r7, #2
 8012908:	f1ba 0f00 	cmp.w	sl, #0
 801290c:	d048      	beq.n	80129a0 <__gethex+0x3f4>
 801290e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012912:	2b02      	cmp	r3, #2
 8012914:	d015      	beq.n	8012942 <__gethex+0x396>
 8012916:	2b03      	cmp	r3, #3
 8012918:	d017      	beq.n	801294a <__gethex+0x39e>
 801291a:	2b01      	cmp	r3, #1
 801291c:	d109      	bne.n	8012932 <__gethex+0x386>
 801291e:	f01a 0f02 	tst.w	sl, #2
 8012922:	d006      	beq.n	8012932 <__gethex+0x386>
 8012924:	f8d9 0000 	ldr.w	r0, [r9]
 8012928:	ea4a 0a00 	orr.w	sl, sl, r0
 801292c:	f01a 0f01 	tst.w	sl, #1
 8012930:	d10e      	bne.n	8012950 <__gethex+0x3a4>
 8012932:	f047 0710 	orr.w	r7, r7, #16
 8012936:	e033      	b.n	80129a0 <__gethex+0x3f4>
 8012938:	f04f 0a01 	mov.w	sl, #1
 801293c:	e7d0      	b.n	80128e0 <__gethex+0x334>
 801293e:	2701      	movs	r7, #1
 8012940:	e7e2      	b.n	8012908 <__gethex+0x35c>
 8012942:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012944:	f1c3 0301 	rsb	r3, r3, #1
 8012948:	9315      	str	r3, [sp, #84]	; 0x54
 801294a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801294c:	2b00      	cmp	r3, #0
 801294e:	d0f0      	beq.n	8012932 <__gethex+0x386>
 8012950:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012954:	f104 0314 	add.w	r3, r4, #20
 8012958:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801295c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012960:	f04f 0c00 	mov.w	ip, #0
 8012964:	4618      	mov	r0, r3
 8012966:	f853 2b04 	ldr.w	r2, [r3], #4
 801296a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801296e:	d01c      	beq.n	80129aa <__gethex+0x3fe>
 8012970:	3201      	adds	r2, #1
 8012972:	6002      	str	r2, [r0, #0]
 8012974:	2f02      	cmp	r7, #2
 8012976:	f104 0314 	add.w	r3, r4, #20
 801297a:	d13f      	bne.n	80129fc <__gethex+0x450>
 801297c:	f8d8 2000 	ldr.w	r2, [r8]
 8012980:	3a01      	subs	r2, #1
 8012982:	42b2      	cmp	r2, r6
 8012984:	d10a      	bne.n	801299c <__gethex+0x3f0>
 8012986:	1171      	asrs	r1, r6, #5
 8012988:	2201      	movs	r2, #1
 801298a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801298e:	f006 061f 	and.w	r6, r6, #31
 8012992:	fa02 f606 	lsl.w	r6, r2, r6
 8012996:	421e      	tst	r6, r3
 8012998:	bf18      	it	ne
 801299a:	4617      	movne	r7, r2
 801299c:	f047 0720 	orr.w	r7, r7, #32
 80129a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80129a2:	601c      	str	r4, [r3, #0]
 80129a4:	9b04      	ldr	r3, [sp, #16]
 80129a6:	601d      	str	r5, [r3, #0]
 80129a8:	e695      	b.n	80126d6 <__gethex+0x12a>
 80129aa:	4299      	cmp	r1, r3
 80129ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80129b0:	d8d8      	bhi.n	8012964 <__gethex+0x3b8>
 80129b2:	68a3      	ldr	r3, [r4, #8]
 80129b4:	459b      	cmp	fp, r3
 80129b6:	db19      	blt.n	80129ec <__gethex+0x440>
 80129b8:	6861      	ldr	r1, [r4, #4]
 80129ba:	ee18 0a10 	vmov	r0, s16
 80129be:	3101      	adds	r1, #1
 80129c0:	f000 f91a 	bl	8012bf8 <_Balloc>
 80129c4:	4681      	mov	r9, r0
 80129c6:	b918      	cbnz	r0, 80129d0 <__gethex+0x424>
 80129c8:	4b1a      	ldr	r3, [pc, #104]	; (8012a34 <__gethex+0x488>)
 80129ca:	4602      	mov	r2, r0
 80129cc:	2184      	movs	r1, #132	; 0x84
 80129ce:	e6a8      	b.n	8012722 <__gethex+0x176>
 80129d0:	6922      	ldr	r2, [r4, #16]
 80129d2:	3202      	adds	r2, #2
 80129d4:	f104 010c 	add.w	r1, r4, #12
 80129d8:	0092      	lsls	r2, r2, #2
 80129da:	300c      	adds	r0, #12
 80129dc:	f7fd f9a0 	bl	800fd20 <memcpy>
 80129e0:	4621      	mov	r1, r4
 80129e2:	ee18 0a10 	vmov	r0, s16
 80129e6:	f000 f947 	bl	8012c78 <_Bfree>
 80129ea:	464c      	mov	r4, r9
 80129ec:	6923      	ldr	r3, [r4, #16]
 80129ee:	1c5a      	adds	r2, r3, #1
 80129f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80129f4:	6122      	str	r2, [r4, #16]
 80129f6:	2201      	movs	r2, #1
 80129f8:	615a      	str	r2, [r3, #20]
 80129fa:	e7bb      	b.n	8012974 <__gethex+0x3c8>
 80129fc:	6922      	ldr	r2, [r4, #16]
 80129fe:	455a      	cmp	r2, fp
 8012a00:	dd0b      	ble.n	8012a1a <__gethex+0x46e>
 8012a02:	2101      	movs	r1, #1
 8012a04:	4620      	mov	r0, r4
 8012a06:	f7ff fd69 	bl	80124dc <rshift>
 8012a0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012a0e:	3501      	adds	r5, #1
 8012a10:	42ab      	cmp	r3, r5
 8012a12:	f6ff aed0 	blt.w	80127b6 <__gethex+0x20a>
 8012a16:	2701      	movs	r7, #1
 8012a18:	e7c0      	b.n	801299c <__gethex+0x3f0>
 8012a1a:	f016 061f 	ands.w	r6, r6, #31
 8012a1e:	d0fa      	beq.n	8012a16 <__gethex+0x46a>
 8012a20:	4453      	add	r3, sl
 8012a22:	f1c6 0620 	rsb	r6, r6, #32
 8012a26:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012a2a:	f000 f9d7 	bl	8012ddc <__hi0bits>
 8012a2e:	42b0      	cmp	r0, r6
 8012a30:	dbe7      	blt.n	8012a02 <__gethex+0x456>
 8012a32:	e7f0      	b.n	8012a16 <__gethex+0x46a>
 8012a34:	08015418 	.word	0x08015418

08012a38 <L_shift>:
 8012a38:	f1c2 0208 	rsb	r2, r2, #8
 8012a3c:	0092      	lsls	r2, r2, #2
 8012a3e:	b570      	push	{r4, r5, r6, lr}
 8012a40:	f1c2 0620 	rsb	r6, r2, #32
 8012a44:	6843      	ldr	r3, [r0, #4]
 8012a46:	6804      	ldr	r4, [r0, #0]
 8012a48:	fa03 f506 	lsl.w	r5, r3, r6
 8012a4c:	432c      	orrs	r4, r5
 8012a4e:	40d3      	lsrs	r3, r2
 8012a50:	6004      	str	r4, [r0, #0]
 8012a52:	f840 3f04 	str.w	r3, [r0, #4]!
 8012a56:	4288      	cmp	r0, r1
 8012a58:	d3f4      	bcc.n	8012a44 <L_shift+0xc>
 8012a5a:	bd70      	pop	{r4, r5, r6, pc}

08012a5c <__match>:
 8012a5c:	b530      	push	{r4, r5, lr}
 8012a5e:	6803      	ldr	r3, [r0, #0]
 8012a60:	3301      	adds	r3, #1
 8012a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a66:	b914      	cbnz	r4, 8012a6e <__match+0x12>
 8012a68:	6003      	str	r3, [r0, #0]
 8012a6a:	2001      	movs	r0, #1
 8012a6c:	bd30      	pop	{r4, r5, pc}
 8012a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012a76:	2d19      	cmp	r5, #25
 8012a78:	bf98      	it	ls
 8012a7a:	3220      	addls	r2, #32
 8012a7c:	42a2      	cmp	r2, r4
 8012a7e:	d0f0      	beq.n	8012a62 <__match+0x6>
 8012a80:	2000      	movs	r0, #0
 8012a82:	e7f3      	b.n	8012a6c <__match+0x10>

08012a84 <__hexnan>:
 8012a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a88:	680b      	ldr	r3, [r1, #0]
 8012a8a:	115e      	asrs	r6, r3, #5
 8012a8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012a90:	f013 031f 	ands.w	r3, r3, #31
 8012a94:	b087      	sub	sp, #28
 8012a96:	bf18      	it	ne
 8012a98:	3604      	addne	r6, #4
 8012a9a:	2500      	movs	r5, #0
 8012a9c:	1f37      	subs	r7, r6, #4
 8012a9e:	4690      	mov	r8, r2
 8012aa0:	6802      	ldr	r2, [r0, #0]
 8012aa2:	9301      	str	r3, [sp, #4]
 8012aa4:	4682      	mov	sl, r0
 8012aa6:	f846 5c04 	str.w	r5, [r6, #-4]
 8012aaa:	46b9      	mov	r9, r7
 8012aac:	463c      	mov	r4, r7
 8012aae:	9502      	str	r5, [sp, #8]
 8012ab0:	46ab      	mov	fp, r5
 8012ab2:	7851      	ldrb	r1, [r2, #1]
 8012ab4:	1c53      	adds	r3, r2, #1
 8012ab6:	9303      	str	r3, [sp, #12]
 8012ab8:	b341      	cbz	r1, 8012b0c <__hexnan+0x88>
 8012aba:	4608      	mov	r0, r1
 8012abc:	9205      	str	r2, [sp, #20]
 8012abe:	9104      	str	r1, [sp, #16]
 8012ac0:	f7ff fd5e 	bl	8012580 <__hexdig_fun>
 8012ac4:	2800      	cmp	r0, #0
 8012ac6:	d14f      	bne.n	8012b68 <__hexnan+0xe4>
 8012ac8:	9904      	ldr	r1, [sp, #16]
 8012aca:	9a05      	ldr	r2, [sp, #20]
 8012acc:	2920      	cmp	r1, #32
 8012ace:	d818      	bhi.n	8012b02 <__hexnan+0x7e>
 8012ad0:	9b02      	ldr	r3, [sp, #8]
 8012ad2:	459b      	cmp	fp, r3
 8012ad4:	dd13      	ble.n	8012afe <__hexnan+0x7a>
 8012ad6:	454c      	cmp	r4, r9
 8012ad8:	d206      	bcs.n	8012ae8 <__hexnan+0x64>
 8012ada:	2d07      	cmp	r5, #7
 8012adc:	dc04      	bgt.n	8012ae8 <__hexnan+0x64>
 8012ade:	462a      	mov	r2, r5
 8012ae0:	4649      	mov	r1, r9
 8012ae2:	4620      	mov	r0, r4
 8012ae4:	f7ff ffa8 	bl	8012a38 <L_shift>
 8012ae8:	4544      	cmp	r4, r8
 8012aea:	d950      	bls.n	8012b8e <__hexnan+0x10a>
 8012aec:	2300      	movs	r3, #0
 8012aee:	f1a4 0904 	sub.w	r9, r4, #4
 8012af2:	f844 3c04 	str.w	r3, [r4, #-4]
 8012af6:	f8cd b008 	str.w	fp, [sp, #8]
 8012afa:	464c      	mov	r4, r9
 8012afc:	461d      	mov	r5, r3
 8012afe:	9a03      	ldr	r2, [sp, #12]
 8012b00:	e7d7      	b.n	8012ab2 <__hexnan+0x2e>
 8012b02:	2929      	cmp	r1, #41	; 0x29
 8012b04:	d156      	bne.n	8012bb4 <__hexnan+0x130>
 8012b06:	3202      	adds	r2, #2
 8012b08:	f8ca 2000 	str.w	r2, [sl]
 8012b0c:	f1bb 0f00 	cmp.w	fp, #0
 8012b10:	d050      	beq.n	8012bb4 <__hexnan+0x130>
 8012b12:	454c      	cmp	r4, r9
 8012b14:	d206      	bcs.n	8012b24 <__hexnan+0xa0>
 8012b16:	2d07      	cmp	r5, #7
 8012b18:	dc04      	bgt.n	8012b24 <__hexnan+0xa0>
 8012b1a:	462a      	mov	r2, r5
 8012b1c:	4649      	mov	r1, r9
 8012b1e:	4620      	mov	r0, r4
 8012b20:	f7ff ff8a 	bl	8012a38 <L_shift>
 8012b24:	4544      	cmp	r4, r8
 8012b26:	d934      	bls.n	8012b92 <__hexnan+0x10e>
 8012b28:	f1a8 0204 	sub.w	r2, r8, #4
 8012b2c:	4623      	mov	r3, r4
 8012b2e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012b32:	f842 1f04 	str.w	r1, [r2, #4]!
 8012b36:	429f      	cmp	r7, r3
 8012b38:	d2f9      	bcs.n	8012b2e <__hexnan+0xaa>
 8012b3a:	1b3b      	subs	r3, r7, r4
 8012b3c:	f023 0303 	bic.w	r3, r3, #3
 8012b40:	3304      	adds	r3, #4
 8012b42:	3401      	adds	r4, #1
 8012b44:	3e03      	subs	r6, #3
 8012b46:	42b4      	cmp	r4, r6
 8012b48:	bf88      	it	hi
 8012b4a:	2304      	movhi	r3, #4
 8012b4c:	4443      	add	r3, r8
 8012b4e:	2200      	movs	r2, #0
 8012b50:	f843 2b04 	str.w	r2, [r3], #4
 8012b54:	429f      	cmp	r7, r3
 8012b56:	d2fb      	bcs.n	8012b50 <__hexnan+0xcc>
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	b91b      	cbnz	r3, 8012b64 <__hexnan+0xe0>
 8012b5c:	4547      	cmp	r7, r8
 8012b5e:	d127      	bne.n	8012bb0 <__hexnan+0x12c>
 8012b60:	2301      	movs	r3, #1
 8012b62:	603b      	str	r3, [r7, #0]
 8012b64:	2005      	movs	r0, #5
 8012b66:	e026      	b.n	8012bb6 <__hexnan+0x132>
 8012b68:	3501      	adds	r5, #1
 8012b6a:	2d08      	cmp	r5, #8
 8012b6c:	f10b 0b01 	add.w	fp, fp, #1
 8012b70:	dd06      	ble.n	8012b80 <__hexnan+0xfc>
 8012b72:	4544      	cmp	r4, r8
 8012b74:	d9c3      	bls.n	8012afe <__hexnan+0x7a>
 8012b76:	2300      	movs	r3, #0
 8012b78:	f844 3c04 	str.w	r3, [r4, #-4]
 8012b7c:	2501      	movs	r5, #1
 8012b7e:	3c04      	subs	r4, #4
 8012b80:	6822      	ldr	r2, [r4, #0]
 8012b82:	f000 000f 	and.w	r0, r0, #15
 8012b86:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012b8a:	6022      	str	r2, [r4, #0]
 8012b8c:	e7b7      	b.n	8012afe <__hexnan+0x7a>
 8012b8e:	2508      	movs	r5, #8
 8012b90:	e7b5      	b.n	8012afe <__hexnan+0x7a>
 8012b92:	9b01      	ldr	r3, [sp, #4]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d0df      	beq.n	8012b58 <__hexnan+0xd4>
 8012b98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b9c:	f1c3 0320 	rsb	r3, r3, #32
 8012ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8012ba4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012ba8:	401a      	ands	r2, r3
 8012baa:	f846 2c04 	str.w	r2, [r6, #-4]
 8012bae:	e7d3      	b.n	8012b58 <__hexnan+0xd4>
 8012bb0:	3f04      	subs	r7, #4
 8012bb2:	e7d1      	b.n	8012b58 <__hexnan+0xd4>
 8012bb4:	2004      	movs	r0, #4
 8012bb6:	b007      	add	sp, #28
 8012bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012bbc <_localeconv_r>:
 8012bbc:	4800      	ldr	r0, [pc, #0]	; (8012bc0 <_localeconv_r+0x4>)
 8012bbe:	4770      	bx	lr
 8012bc0:	2000016c 	.word	0x2000016c

08012bc4 <malloc>:
 8012bc4:	4b02      	ldr	r3, [pc, #8]	; (8012bd0 <malloc+0xc>)
 8012bc6:	4601      	mov	r1, r0
 8012bc8:	6818      	ldr	r0, [r3, #0]
 8012bca:	f000 bd59 	b.w	8013680 <_malloc_r>
 8012bce:	bf00      	nop
 8012bd0:	20000014 	.word	0x20000014

08012bd4 <__ascii_mbtowc>:
 8012bd4:	b082      	sub	sp, #8
 8012bd6:	b901      	cbnz	r1, 8012bda <__ascii_mbtowc+0x6>
 8012bd8:	a901      	add	r1, sp, #4
 8012bda:	b142      	cbz	r2, 8012bee <__ascii_mbtowc+0x1a>
 8012bdc:	b14b      	cbz	r3, 8012bf2 <__ascii_mbtowc+0x1e>
 8012bde:	7813      	ldrb	r3, [r2, #0]
 8012be0:	600b      	str	r3, [r1, #0]
 8012be2:	7812      	ldrb	r2, [r2, #0]
 8012be4:	1e10      	subs	r0, r2, #0
 8012be6:	bf18      	it	ne
 8012be8:	2001      	movne	r0, #1
 8012bea:	b002      	add	sp, #8
 8012bec:	4770      	bx	lr
 8012bee:	4610      	mov	r0, r2
 8012bf0:	e7fb      	b.n	8012bea <__ascii_mbtowc+0x16>
 8012bf2:	f06f 0001 	mvn.w	r0, #1
 8012bf6:	e7f8      	b.n	8012bea <__ascii_mbtowc+0x16>

08012bf8 <_Balloc>:
 8012bf8:	b570      	push	{r4, r5, r6, lr}
 8012bfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012bfc:	4604      	mov	r4, r0
 8012bfe:	460d      	mov	r5, r1
 8012c00:	b976      	cbnz	r6, 8012c20 <_Balloc+0x28>
 8012c02:	2010      	movs	r0, #16
 8012c04:	f7ff ffde 	bl	8012bc4 <malloc>
 8012c08:	4602      	mov	r2, r0
 8012c0a:	6260      	str	r0, [r4, #36]	; 0x24
 8012c0c:	b920      	cbnz	r0, 8012c18 <_Balloc+0x20>
 8012c0e:	4b18      	ldr	r3, [pc, #96]	; (8012c70 <_Balloc+0x78>)
 8012c10:	4818      	ldr	r0, [pc, #96]	; (8012c74 <_Balloc+0x7c>)
 8012c12:	2166      	movs	r1, #102	; 0x66
 8012c14:	f000 ff3e 	bl	8013a94 <__assert_func>
 8012c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c1c:	6006      	str	r6, [r0, #0]
 8012c1e:	60c6      	str	r6, [r0, #12]
 8012c20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012c22:	68f3      	ldr	r3, [r6, #12]
 8012c24:	b183      	cbz	r3, 8012c48 <_Balloc+0x50>
 8012c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c28:	68db      	ldr	r3, [r3, #12]
 8012c2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012c2e:	b9b8      	cbnz	r0, 8012c60 <_Balloc+0x68>
 8012c30:	2101      	movs	r1, #1
 8012c32:	fa01 f605 	lsl.w	r6, r1, r5
 8012c36:	1d72      	adds	r2, r6, #5
 8012c38:	0092      	lsls	r2, r2, #2
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	f000 fc9d 	bl	801357a <_calloc_r>
 8012c40:	b160      	cbz	r0, 8012c5c <_Balloc+0x64>
 8012c42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012c46:	e00e      	b.n	8012c66 <_Balloc+0x6e>
 8012c48:	2221      	movs	r2, #33	; 0x21
 8012c4a:	2104      	movs	r1, #4
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	f000 fc94 	bl	801357a <_calloc_r>
 8012c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c54:	60f0      	str	r0, [r6, #12]
 8012c56:	68db      	ldr	r3, [r3, #12]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d1e4      	bne.n	8012c26 <_Balloc+0x2e>
 8012c5c:	2000      	movs	r0, #0
 8012c5e:	bd70      	pop	{r4, r5, r6, pc}
 8012c60:	6802      	ldr	r2, [r0, #0]
 8012c62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012c66:	2300      	movs	r3, #0
 8012c68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012c6c:	e7f7      	b.n	8012c5e <_Balloc+0x66>
 8012c6e:	bf00      	nop
 8012c70:	080153a6 	.word	0x080153a6
 8012c74:	080154a4 	.word	0x080154a4

08012c78 <_Bfree>:
 8012c78:	b570      	push	{r4, r5, r6, lr}
 8012c7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012c7c:	4605      	mov	r5, r0
 8012c7e:	460c      	mov	r4, r1
 8012c80:	b976      	cbnz	r6, 8012ca0 <_Bfree+0x28>
 8012c82:	2010      	movs	r0, #16
 8012c84:	f7ff ff9e 	bl	8012bc4 <malloc>
 8012c88:	4602      	mov	r2, r0
 8012c8a:	6268      	str	r0, [r5, #36]	; 0x24
 8012c8c:	b920      	cbnz	r0, 8012c98 <_Bfree+0x20>
 8012c8e:	4b09      	ldr	r3, [pc, #36]	; (8012cb4 <_Bfree+0x3c>)
 8012c90:	4809      	ldr	r0, [pc, #36]	; (8012cb8 <_Bfree+0x40>)
 8012c92:	218a      	movs	r1, #138	; 0x8a
 8012c94:	f000 fefe 	bl	8013a94 <__assert_func>
 8012c98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c9c:	6006      	str	r6, [r0, #0]
 8012c9e:	60c6      	str	r6, [r0, #12]
 8012ca0:	b13c      	cbz	r4, 8012cb2 <_Bfree+0x3a>
 8012ca2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012ca4:	6862      	ldr	r2, [r4, #4]
 8012ca6:	68db      	ldr	r3, [r3, #12]
 8012ca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012cac:	6021      	str	r1, [r4, #0]
 8012cae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012cb2:	bd70      	pop	{r4, r5, r6, pc}
 8012cb4:	080153a6 	.word	0x080153a6
 8012cb8:	080154a4 	.word	0x080154a4

08012cbc <__multadd>:
 8012cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc0:	690d      	ldr	r5, [r1, #16]
 8012cc2:	4607      	mov	r7, r0
 8012cc4:	460c      	mov	r4, r1
 8012cc6:	461e      	mov	r6, r3
 8012cc8:	f101 0c14 	add.w	ip, r1, #20
 8012ccc:	2000      	movs	r0, #0
 8012cce:	f8dc 3000 	ldr.w	r3, [ip]
 8012cd2:	b299      	uxth	r1, r3
 8012cd4:	fb02 6101 	mla	r1, r2, r1, r6
 8012cd8:	0c1e      	lsrs	r6, r3, #16
 8012cda:	0c0b      	lsrs	r3, r1, #16
 8012cdc:	fb02 3306 	mla	r3, r2, r6, r3
 8012ce0:	b289      	uxth	r1, r1
 8012ce2:	3001      	adds	r0, #1
 8012ce4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012ce8:	4285      	cmp	r5, r0
 8012cea:	f84c 1b04 	str.w	r1, [ip], #4
 8012cee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012cf2:	dcec      	bgt.n	8012cce <__multadd+0x12>
 8012cf4:	b30e      	cbz	r6, 8012d3a <__multadd+0x7e>
 8012cf6:	68a3      	ldr	r3, [r4, #8]
 8012cf8:	42ab      	cmp	r3, r5
 8012cfa:	dc19      	bgt.n	8012d30 <__multadd+0x74>
 8012cfc:	6861      	ldr	r1, [r4, #4]
 8012cfe:	4638      	mov	r0, r7
 8012d00:	3101      	adds	r1, #1
 8012d02:	f7ff ff79 	bl	8012bf8 <_Balloc>
 8012d06:	4680      	mov	r8, r0
 8012d08:	b928      	cbnz	r0, 8012d16 <__multadd+0x5a>
 8012d0a:	4602      	mov	r2, r0
 8012d0c:	4b0c      	ldr	r3, [pc, #48]	; (8012d40 <__multadd+0x84>)
 8012d0e:	480d      	ldr	r0, [pc, #52]	; (8012d44 <__multadd+0x88>)
 8012d10:	21b5      	movs	r1, #181	; 0xb5
 8012d12:	f000 febf 	bl	8013a94 <__assert_func>
 8012d16:	6922      	ldr	r2, [r4, #16]
 8012d18:	3202      	adds	r2, #2
 8012d1a:	f104 010c 	add.w	r1, r4, #12
 8012d1e:	0092      	lsls	r2, r2, #2
 8012d20:	300c      	adds	r0, #12
 8012d22:	f7fc fffd 	bl	800fd20 <memcpy>
 8012d26:	4621      	mov	r1, r4
 8012d28:	4638      	mov	r0, r7
 8012d2a:	f7ff ffa5 	bl	8012c78 <_Bfree>
 8012d2e:	4644      	mov	r4, r8
 8012d30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012d34:	3501      	adds	r5, #1
 8012d36:	615e      	str	r6, [r3, #20]
 8012d38:	6125      	str	r5, [r4, #16]
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d40:	08015418 	.word	0x08015418
 8012d44:	080154a4 	.word	0x080154a4

08012d48 <__s2b>:
 8012d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d4c:	460c      	mov	r4, r1
 8012d4e:	4615      	mov	r5, r2
 8012d50:	461f      	mov	r7, r3
 8012d52:	2209      	movs	r2, #9
 8012d54:	3308      	adds	r3, #8
 8012d56:	4606      	mov	r6, r0
 8012d58:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d5c:	2100      	movs	r1, #0
 8012d5e:	2201      	movs	r2, #1
 8012d60:	429a      	cmp	r2, r3
 8012d62:	db09      	blt.n	8012d78 <__s2b+0x30>
 8012d64:	4630      	mov	r0, r6
 8012d66:	f7ff ff47 	bl	8012bf8 <_Balloc>
 8012d6a:	b940      	cbnz	r0, 8012d7e <__s2b+0x36>
 8012d6c:	4602      	mov	r2, r0
 8012d6e:	4b19      	ldr	r3, [pc, #100]	; (8012dd4 <__s2b+0x8c>)
 8012d70:	4819      	ldr	r0, [pc, #100]	; (8012dd8 <__s2b+0x90>)
 8012d72:	21ce      	movs	r1, #206	; 0xce
 8012d74:	f000 fe8e 	bl	8013a94 <__assert_func>
 8012d78:	0052      	lsls	r2, r2, #1
 8012d7a:	3101      	adds	r1, #1
 8012d7c:	e7f0      	b.n	8012d60 <__s2b+0x18>
 8012d7e:	9b08      	ldr	r3, [sp, #32]
 8012d80:	6143      	str	r3, [r0, #20]
 8012d82:	2d09      	cmp	r5, #9
 8012d84:	f04f 0301 	mov.w	r3, #1
 8012d88:	6103      	str	r3, [r0, #16]
 8012d8a:	dd16      	ble.n	8012dba <__s2b+0x72>
 8012d8c:	f104 0909 	add.w	r9, r4, #9
 8012d90:	46c8      	mov	r8, r9
 8012d92:	442c      	add	r4, r5
 8012d94:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012d98:	4601      	mov	r1, r0
 8012d9a:	3b30      	subs	r3, #48	; 0x30
 8012d9c:	220a      	movs	r2, #10
 8012d9e:	4630      	mov	r0, r6
 8012da0:	f7ff ff8c 	bl	8012cbc <__multadd>
 8012da4:	45a0      	cmp	r8, r4
 8012da6:	d1f5      	bne.n	8012d94 <__s2b+0x4c>
 8012da8:	f1a5 0408 	sub.w	r4, r5, #8
 8012dac:	444c      	add	r4, r9
 8012dae:	1b2d      	subs	r5, r5, r4
 8012db0:	1963      	adds	r3, r4, r5
 8012db2:	42bb      	cmp	r3, r7
 8012db4:	db04      	blt.n	8012dc0 <__s2b+0x78>
 8012db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dba:	340a      	adds	r4, #10
 8012dbc:	2509      	movs	r5, #9
 8012dbe:	e7f6      	b.n	8012dae <__s2b+0x66>
 8012dc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012dc4:	4601      	mov	r1, r0
 8012dc6:	3b30      	subs	r3, #48	; 0x30
 8012dc8:	220a      	movs	r2, #10
 8012dca:	4630      	mov	r0, r6
 8012dcc:	f7ff ff76 	bl	8012cbc <__multadd>
 8012dd0:	e7ee      	b.n	8012db0 <__s2b+0x68>
 8012dd2:	bf00      	nop
 8012dd4:	08015418 	.word	0x08015418
 8012dd8:	080154a4 	.word	0x080154a4

08012ddc <__hi0bits>:
 8012ddc:	0c03      	lsrs	r3, r0, #16
 8012dde:	041b      	lsls	r3, r3, #16
 8012de0:	b9d3      	cbnz	r3, 8012e18 <__hi0bits+0x3c>
 8012de2:	0400      	lsls	r0, r0, #16
 8012de4:	2310      	movs	r3, #16
 8012de6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012dea:	bf04      	itt	eq
 8012dec:	0200      	lsleq	r0, r0, #8
 8012dee:	3308      	addeq	r3, #8
 8012df0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012df4:	bf04      	itt	eq
 8012df6:	0100      	lsleq	r0, r0, #4
 8012df8:	3304      	addeq	r3, #4
 8012dfa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012dfe:	bf04      	itt	eq
 8012e00:	0080      	lsleq	r0, r0, #2
 8012e02:	3302      	addeq	r3, #2
 8012e04:	2800      	cmp	r0, #0
 8012e06:	db05      	blt.n	8012e14 <__hi0bits+0x38>
 8012e08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012e0c:	f103 0301 	add.w	r3, r3, #1
 8012e10:	bf08      	it	eq
 8012e12:	2320      	moveq	r3, #32
 8012e14:	4618      	mov	r0, r3
 8012e16:	4770      	bx	lr
 8012e18:	2300      	movs	r3, #0
 8012e1a:	e7e4      	b.n	8012de6 <__hi0bits+0xa>

08012e1c <__lo0bits>:
 8012e1c:	6803      	ldr	r3, [r0, #0]
 8012e1e:	f013 0207 	ands.w	r2, r3, #7
 8012e22:	4601      	mov	r1, r0
 8012e24:	d00b      	beq.n	8012e3e <__lo0bits+0x22>
 8012e26:	07da      	lsls	r2, r3, #31
 8012e28:	d423      	bmi.n	8012e72 <__lo0bits+0x56>
 8012e2a:	0798      	lsls	r0, r3, #30
 8012e2c:	bf49      	itett	mi
 8012e2e:	085b      	lsrmi	r3, r3, #1
 8012e30:	089b      	lsrpl	r3, r3, #2
 8012e32:	2001      	movmi	r0, #1
 8012e34:	600b      	strmi	r3, [r1, #0]
 8012e36:	bf5c      	itt	pl
 8012e38:	600b      	strpl	r3, [r1, #0]
 8012e3a:	2002      	movpl	r0, #2
 8012e3c:	4770      	bx	lr
 8012e3e:	b298      	uxth	r0, r3
 8012e40:	b9a8      	cbnz	r0, 8012e6e <__lo0bits+0x52>
 8012e42:	0c1b      	lsrs	r3, r3, #16
 8012e44:	2010      	movs	r0, #16
 8012e46:	b2da      	uxtb	r2, r3
 8012e48:	b90a      	cbnz	r2, 8012e4e <__lo0bits+0x32>
 8012e4a:	3008      	adds	r0, #8
 8012e4c:	0a1b      	lsrs	r3, r3, #8
 8012e4e:	071a      	lsls	r2, r3, #28
 8012e50:	bf04      	itt	eq
 8012e52:	091b      	lsreq	r3, r3, #4
 8012e54:	3004      	addeq	r0, #4
 8012e56:	079a      	lsls	r2, r3, #30
 8012e58:	bf04      	itt	eq
 8012e5a:	089b      	lsreq	r3, r3, #2
 8012e5c:	3002      	addeq	r0, #2
 8012e5e:	07da      	lsls	r2, r3, #31
 8012e60:	d403      	bmi.n	8012e6a <__lo0bits+0x4e>
 8012e62:	085b      	lsrs	r3, r3, #1
 8012e64:	f100 0001 	add.w	r0, r0, #1
 8012e68:	d005      	beq.n	8012e76 <__lo0bits+0x5a>
 8012e6a:	600b      	str	r3, [r1, #0]
 8012e6c:	4770      	bx	lr
 8012e6e:	4610      	mov	r0, r2
 8012e70:	e7e9      	b.n	8012e46 <__lo0bits+0x2a>
 8012e72:	2000      	movs	r0, #0
 8012e74:	4770      	bx	lr
 8012e76:	2020      	movs	r0, #32
 8012e78:	4770      	bx	lr
	...

08012e7c <__i2b>:
 8012e7c:	b510      	push	{r4, lr}
 8012e7e:	460c      	mov	r4, r1
 8012e80:	2101      	movs	r1, #1
 8012e82:	f7ff feb9 	bl	8012bf8 <_Balloc>
 8012e86:	4602      	mov	r2, r0
 8012e88:	b928      	cbnz	r0, 8012e96 <__i2b+0x1a>
 8012e8a:	4b05      	ldr	r3, [pc, #20]	; (8012ea0 <__i2b+0x24>)
 8012e8c:	4805      	ldr	r0, [pc, #20]	; (8012ea4 <__i2b+0x28>)
 8012e8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012e92:	f000 fdff 	bl	8013a94 <__assert_func>
 8012e96:	2301      	movs	r3, #1
 8012e98:	6144      	str	r4, [r0, #20]
 8012e9a:	6103      	str	r3, [r0, #16]
 8012e9c:	bd10      	pop	{r4, pc}
 8012e9e:	bf00      	nop
 8012ea0:	08015418 	.word	0x08015418
 8012ea4:	080154a4 	.word	0x080154a4

08012ea8 <__multiply>:
 8012ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eac:	4691      	mov	r9, r2
 8012eae:	690a      	ldr	r2, [r1, #16]
 8012eb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012eb4:	429a      	cmp	r2, r3
 8012eb6:	bfb8      	it	lt
 8012eb8:	460b      	movlt	r3, r1
 8012eba:	460c      	mov	r4, r1
 8012ebc:	bfbc      	itt	lt
 8012ebe:	464c      	movlt	r4, r9
 8012ec0:	4699      	movlt	r9, r3
 8012ec2:	6927      	ldr	r7, [r4, #16]
 8012ec4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012ec8:	68a3      	ldr	r3, [r4, #8]
 8012eca:	6861      	ldr	r1, [r4, #4]
 8012ecc:	eb07 060a 	add.w	r6, r7, sl
 8012ed0:	42b3      	cmp	r3, r6
 8012ed2:	b085      	sub	sp, #20
 8012ed4:	bfb8      	it	lt
 8012ed6:	3101      	addlt	r1, #1
 8012ed8:	f7ff fe8e 	bl	8012bf8 <_Balloc>
 8012edc:	b930      	cbnz	r0, 8012eec <__multiply+0x44>
 8012ede:	4602      	mov	r2, r0
 8012ee0:	4b44      	ldr	r3, [pc, #272]	; (8012ff4 <__multiply+0x14c>)
 8012ee2:	4845      	ldr	r0, [pc, #276]	; (8012ff8 <__multiply+0x150>)
 8012ee4:	f240 115d 	movw	r1, #349	; 0x15d
 8012ee8:	f000 fdd4 	bl	8013a94 <__assert_func>
 8012eec:	f100 0514 	add.w	r5, r0, #20
 8012ef0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012ef4:	462b      	mov	r3, r5
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	4543      	cmp	r3, r8
 8012efa:	d321      	bcc.n	8012f40 <__multiply+0x98>
 8012efc:	f104 0314 	add.w	r3, r4, #20
 8012f00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012f04:	f109 0314 	add.w	r3, r9, #20
 8012f08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012f0c:	9202      	str	r2, [sp, #8]
 8012f0e:	1b3a      	subs	r2, r7, r4
 8012f10:	3a15      	subs	r2, #21
 8012f12:	f022 0203 	bic.w	r2, r2, #3
 8012f16:	3204      	adds	r2, #4
 8012f18:	f104 0115 	add.w	r1, r4, #21
 8012f1c:	428f      	cmp	r7, r1
 8012f1e:	bf38      	it	cc
 8012f20:	2204      	movcc	r2, #4
 8012f22:	9201      	str	r2, [sp, #4]
 8012f24:	9a02      	ldr	r2, [sp, #8]
 8012f26:	9303      	str	r3, [sp, #12]
 8012f28:	429a      	cmp	r2, r3
 8012f2a:	d80c      	bhi.n	8012f46 <__multiply+0x9e>
 8012f2c:	2e00      	cmp	r6, #0
 8012f2e:	dd03      	ble.n	8012f38 <__multiply+0x90>
 8012f30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d05a      	beq.n	8012fee <__multiply+0x146>
 8012f38:	6106      	str	r6, [r0, #16]
 8012f3a:	b005      	add	sp, #20
 8012f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f40:	f843 2b04 	str.w	r2, [r3], #4
 8012f44:	e7d8      	b.n	8012ef8 <__multiply+0x50>
 8012f46:	f8b3 a000 	ldrh.w	sl, [r3]
 8012f4a:	f1ba 0f00 	cmp.w	sl, #0
 8012f4e:	d024      	beq.n	8012f9a <__multiply+0xf2>
 8012f50:	f104 0e14 	add.w	lr, r4, #20
 8012f54:	46a9      	mov	r9, r5
 8012f56:	f04f 0c00 	mov.w	ip, #0
 8012f5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012f5e:	f8d9 1000 	ldr.w	r1, [r9]
 8012f62:	fa1f fb82 	uxth.w	fp, r2
 8012f66:	b289      	uxth	r1, r1
 8012f68:	fb0a 110b 	mla	r1, sl, fp, r1
 8012f6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012f70:	f8d9 2000 	ldr.w	r2, [r9]
 8012f74:	4461      	add	r1, ip
 8012f76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012f7a:	fb0a c20b 	mla	r2, sl, fp, ip
 8012f7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012f82:	b289      	uxth	r1, r1
 8012f84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012f88:	4577      	cmp	r7, lr
 8012f8a:	f849 1b04 	str.w	r1, [r9], #4
 8012f8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012f92:	d8e2      	bhi.n	8012f5a <__multiply+0xb2>
 8012f94:	9a01      	ldr	r2, [sp, #4]
 8012f96:	f845 c002 	str.w	ip, [r5, r2]
 8012f9a:	9a03      	ldr	r2, [sp, #12]
 8012f9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012fa0:	3304      	adds	r3, #4
 8012fa2:	f1b9 0f00 	cmp.w	r9, #0
 8012fa6:	d020      	beq.n	8012fea <__multiply+0x142>
 8012fa8:	6829      	ldr	r1, [r5, #0]
 8012faa:	f104 0c14 	add.w	ip, r4, #20
 8012fae:	46ae      	mov	lr, r5
 8012fb0:	f04f 0a00 	mov.w	sl, #0
 8012fb4:	f8bc b000 	ldrh.w	fp, [ip]
 8012fb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012fbc:	fb09 220b 	mla	r2, r9, fp, r2
 8012fc0:	4492      	add	sl, r2
 8012fc2:	b289      	uxth	r1, r1
 8012fc4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012fc8:	f84e 1b04 	str.w	r1, [lr], #4
 8012fcc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012fd0:	f8be 1000 	ldrh.w	r1, [lr]
 8012fd4:	0c12      	lsrs	r2, r2, #16
 8012fd6:	fb09 1102 	mla	r1, r9, r2, r1
 8012fda:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012fde:	4567      	cmp	r7, ip
 8012fe0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012fe4:	d8e6      	bhi.n	8012fb4 <__multiply+0x10c>
 8012fe6:	9a01      	ldr	r2, [sp, #4]
 8012fe8:	50a9      	str	r1, [r5, r2]
 8012fea:	3504      	adds	r5, #4
 8012fec:	e79a      	b.n	8012f24 <__multiply+0x7c>
 8012fee:	3e01      	subs	r6, #1
 8012ff0:	e79c      	b.n	8012f2c <__multiply+0x84>
 8012ff2:	bf00      	nop
 8012ff4:	08015418 	.word	0x08015418
 8012ff8:	080154a4 	.word	0x080154a4

08012ffc <__pow5mult>:
 8012ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013000:	4615      	mov	r5, r2
 8013002:	f012 0203 	ands.w	r2, r2, #3
 8013006:	4606      	mov	r6, r0
 8013008:	460f      	mov	r7, r1
 801300a:	d007      	beq.n	801301c <__pow5mult+0x20>
 801300c:	4c25      	ldr	r4, [pc, #148]	; (80130a4 <__pow5mult+0xa8>)
 801300e:	3a01      	subs	r2, #1
 8013010:	2300      	movs	r3, #0
 8013012:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013016:	f7ff fe51 	bl	8012cbc <__multadd>
 801301a:	4607      	mov	r7, r0
 801301c:	10ad      	asrs	r5, r5, #2
 801301e:	d03d      	beq.n	801309c <__pow5mult+0xa0>
 8013020:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013022:	b97c      	cbnz	r4, 8013044 <__pow5mult+0x48>
 8013024:	2010      	movs	r0, #16
 8013026:	f7ff fdcd 	bl	8012bc4 <malloc>
 801302a:	4602      	mov	r2, r0
 801302c:	6270      	str	r0, [r6, #36]	; 0x24
 801302e:	b928      	cbnz	r0, 801303c <__pow5mult+0x40>
 8013030:	4b1d      	ldr	r3, [pc, #116]	; (80130a8 <__pow5mult+0xac>)
 8013032:	481e      	ldr	r0, [pc, #120]	; (80130ac <__pow5mult+0xb0>)
 8013034:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013038:	f000 fd2c 	bl	8013a94 <__assert_func>
 801303c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013040:	6004      	str	r4, [r0, #0]
 8013042:	60c4      	str	r4, [r0, #12]
 8013044:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013048:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801304c:	b94c      	cbnz	r4, 8013062 <__pow5mult+0x66>
 801304e:	f240 2171 	movw	r1, #625	; 0x271
 8013052:	4630      	mov	r0, r6
 8013054:	f7ff ff12 	bl	8012e7c <__i2b>
 8013058:	2300      	movs	r3, #0
 801305a:	f8c8 0008 	str.w	r0, [r8, #8]
 801305e:	4604      	mov	r4, r0
 8013060:	6003      	str	r3, [r0, #0]
 8013062:	f04f 0900 	mov.w	r9, #0
 8013066:	07eb      	lsls	r3, r5, #31
 8013068:	d50a      	bpl.n	8013080 <__pow5mult+0x84>
 801306a:	4639      	mov	r1, r7
 801306c:	4622      	mov	r2, r4
 801306e:	4630      	mov	r0, r6
 8013070:	f7ff ff1a 	bl	8012ea8 <__multiply>
 8013074:	4639      	mov	r1, r7
 8013076:	4680      	mov	r8, r0
 8013078:	4630      	mov	r0, r6
 801307a:	f7ff fdfd 	bl	8012c78 <_Bfree>
 801307e:	4647      	mov	r7, r8
 8013080:	106d      	asrs	r5, r5, #1
 8013082:	d00b      	beq.n	801309c <__pow5mult+0xa0>
 8013084:	6820      	ldr	r0, [r4, #0]
 8013086:	b938      	cbnz	r0, 8013098 <__pow5mult+0x9c>
 8013088:	4622      	mov	r2, r4
 801308a:	4621      	mov	r1, r4
 801308c:	4630      	mov	r0, r6
 801308e:	f7ff ff0b 	bl	8012ea8 <__multiply>
 8013092:	6020      	str	r0, [r4, #0]
 8013094:	f8c0 9000 	str.w	r9, [r0]
 8013098:	4604      	mov	r4, r0
 801309a:	e7e4      	b.n	8013066 <__pow5mult+0x6a>
 801309c:	4638      	mov	r0, r7
 801309e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130a2:	bf00      	nop
 80130a4:	080155f0 	.word	0x080155f0
 80130a8:	080153a6 	.word	0x080153a6
 80130ac:	080154a4 	.word	0x080154a4

080130b0 <__lshift>:
 80130b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130b4:	460c      	mov	r4, r1
 80130b6:	6849      	ldr	r1, [r1, #4]
 80130b8:	6923      	ldr	r3, [r4, #16]
 80130ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80130be:	68a3      	ldr	r3, [r4, #8]
 80130c0:	4607      	mov	r7, r0
 80130c2:	4691      	mov	r9, r2
 80130c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80130c8:	f108 0601 	add.w	r6, r8, #1
 80130cc:	42b3      	cmp	r3, r6
 80130ce:	db0b      	blt.n	80130e8 <__lshift+0x38>
 80130d0:	4638      	mov	r0, r7
 80130d2:	f7ff fd91 	bl	8012bf8 <_Balloc>
 80130d6:	4605      	mov	r5, r0
 80130d8:	b948      	cbnz	r0, 80130ee <__lshift+0x3e>
 80130da:	4602      	mov	r2, r0
 80130dc:	4b2a      	ldr	r3, [pc, #168]	; (8013188 <__lshift+0xd8>)
 80130de:	482b      	ldr	r0, [pc, #172]	; (801318c <__lshift+0xdc>)
 80130e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80130e4:	f000 fcd6 	bl	8013a94 <__assert_func>
 80130e8:	3101      	adds	r1, #1
 80130ea:	005b      	lsls	r3, r3, #1
 80130ec:	e7ee      	b.n	80130cc <__lshift+0x1c>
 80130ee:	2300      	movs	r3, #0
 80130f0:	f100 0114 	add.w	r1, r0, #20
 80130f4:	f100 0210 	add.w	r2, r0, #16
 80130f8:	4618      	mov	r0, r3
 80130fa:	4553      	cmp	r3, sl
 80130fc:	db37      	blt.n	801316e <__lshift+0xbe>
 80130fe:	6920      	ldr	r0, [r4, #16]
 8013100:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013104:	f104 0314 	add.w	r3, r4, #20
 8013108:	f019 091f 	ands.w	r9, r9, #31
 801310c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013110:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013114:	d02f      	beq.n	8013176 <__lshift+0xc6>
 8013116:	f1c9 0e20 	rsb	lr, r9, #32
 801311a:	468a      	mov	sl, r1
 801311c:	f04f 0c00 	mov.w	ip, #0
 8013120:	681a      	ldr	r2, [r3, #0]
 8013122:	fa02 f209 	lsl.w	r2, r2, r9
 8013126:	ea42 020c 	orr.w	r2, r2, ip
 801312a:	f84a 2b04 	str.w	r2, [sl], #4
 801312e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013132:	4298      	cmp	r0, r3
 8013134:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013138:	d8f2      	bhi.n	8013120 <__lshift+0x70>
 801313a:	1b03      	subs	r3, r0, r4
 801313c:	3b15      	subs	r3, #21
 801313e:	f023 0303 	bic.w	r3, r3, #3
 8013142:	3304      	adds	r3, #4
 8013144:	f104 0215 	add.w	r2, r4, #21
 8013148:	4290      	cmp	r0, r2
 801314a:	bf38      	it	cc
 801314c:	2304      	movcc	r3, #4
 801314e:	f841 c003 	str.w	ip, [r1, r3]
 8013152:	f1bc 0f00 	cmp.w	ip, #0
 8013156:	d001      	beq.n	801315c <__lshift+0xac>
 8013158:	f108 0602 	add.w	r6, r8, #2
 801315c:	3e01      	subs	r6, #1
 801315e:	4638      	mov	r0, r7
 8013160:	612e      	str	r6, [r5, #16]
 8013162:	4621      	mov	r1, r4
 8013164:	f7ff fd88 	bl	8012c78 <_Bfree>
 8013168:	4628      	mov	r0, r5
 801316a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801316e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013172:	3301      	adds	r3, #1
 8013174:	e7c1      	b.n	80130fa <__lshift+0x4a>
 8013176:	3904      	subs	r1, #4
 8013178:	f853 2b04 	ldr.w	r2, [r3], #4
 801317c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013180:	4298      	cmp	r0, r3
 8013182:	d8f9      	bhi.n	8013178 <__lshift+0xc8>
 8013184:	e7ea      	b.n	801315c <__lshift+0xac>
 8013186:	bf00      	nop
 8013188:	08015418 	.word	0x08015418
 801318c:	080154a4 	.word	0x080154a4

08013190 <__mcmp>:
 8013190:	b530      	push	{r4, r5, lr}
 8013192:	6902      	ldr	r2, [r0, #16]
 8013194:	690c      	ldr	r4, [r1, #16]
 8013196:	1b12      	subs	r2, r2, r4
 8013198:	d10e      	bne.n	80131b8 <__mcmp+0x28>
 801319a:	f100 0314 	add.w	r3, r0, #20
 801319e:	3114      	adds	r1, #20
 80131a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80131a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80131a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80131ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80131b0:	42a5      	cmp	r5, r4
 80131b2:	d003      	beq.n	80131bc <__mcmp+0x2c>
 80131b4:	d305      	bcc.n	80131c2 <__mcmp+0x32>
 80131b6:	2201      	movs	r2, #1
 80131b8:	4610      	mov	r0, r2
 80131ba:	bd30      	pop	{r4, r5, pc}
 80131bc:	4283      	cmp	r3, r0
 80131be:	d3f3      	bcc.n	80131a8 <__mcmp+0x18>
 80131c0:	e7fa      	b.n	80131b8 <__mcmp+0x28>
 80131c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80131c6:	e7f7      	b.n	80131b8 <__mcmp+0x28>

080131c8 <__mdiff>:
 80131c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131cc:	460c      	mov	r4, r1
 80131ce:	4606      	mov	r6, r0
 80131d0:	4611      	mov	r1, r2
 80131d2:	4620      	mov	r0, r4
 80131d4:	4690      	mov	r8, r2
 80131d6:	f7ff ffdb 	bl	8013190 <__mcmp>
 80131da:	1e05      	subs	r5, r0, #0
 80131dc:	d110      	bne.n	8013200 <__mdiff+0x38>
 80131de:	4629      	mov	r1, r5
 80131e0:	4630      	mov	r0, r6
 80131e2:	f7ff fd09 	bl	8012bf8 <_Balloc>
 80131e6:	b930      	cbnz	r0, 80131f6 <__mdiff+0x2e>
 80131e8:	4b3a      	ldr	r3, [pc, #232]	; (80132d4 <__mdiff+0x10c>)
 80131ea:	4602      	mov	r2, r0
 80131ec:	f240 2132 	movw	r1, #562	; 0x232
 80131f0:	4839      	ldr	r0, [pc, #228]	; (80132d8 <__mdiff+0x110>)
 80131f2:	f000 fc4f 	bl	8013a94 <__assert_func>
 80131f6:	2301      	movs	r3, #1
 80131f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80131fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013200:	bfa4      	itt	ge
 8013202:	4643      	movge	r3, r8
 8013204:	46a0      	movge	r8, r4
 8013206:	4630      	mov	r0, r6
 8013208:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801320c:	bfa6      	itte	ge
 801320e:	461c      	movge	r4, r3
 8013210:	2500      	movge	r5, #0
 8013212:	2501      	movlt	r5, #1
 8013214:	f7ff fcf0 	bl	8012bf8 <_Balloc>
 8013218:	b920      	cbnz	r0, 8013224 <__mdiff+0x5c>
 801321a:	4b2e      	ldr	r3, [pc, #184]	; (80132d4 <__mdiff+0x10c>)
 801321c:	4602      	mov	r2, r0
 801321e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013222:	e7e5      	b.n	80131f0 <__mdiff+0x28>
 8013224:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013228:	6926      	ldr	r6, [r4, #16]
 801322a:	60c5      	str	r5, [r0, #12]
 801322c:	f104 0914 	add.w	r9, r4, #20
 8013230:	f108 0514 	add.w	r5, r8, #20
 8013234:	f100 0e14 	add.w	lr, r0, #20
 8013238:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801323c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013240:	f108 0210 	add.w	r2, r8, #16
 8013244:	46f2      	mov	sl, lr
 8013246:	2100      	movs	r1, #0
 8013248:	f859 3b04 	ldr.w	r3, [r9], #4
 801324c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013250:	fa1f f883 	uxth.w	r8, r3
 8013254:	fa11 f18b 	uxtah	r1, r1, fp
 8013258:	0c1b      	lsrs	r3, r3, #16
 801325a:	eba1 0808 	sub.w	r8, r1, r8
 801325e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013262:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013266:	fa1f f888 	uxth.w	r8, r8
 801326a:	1419      	asrs	r1, r3, #16
 801326c:	454e      	cmp	r6, r9
 801326e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013272:	f84a 3b04 	str.w	r3, [sl], #4
 8013276:	d8e7      	bhi.n	8013248 <__mdiff+0x80>
 8013278:	1b33      	subs	r3, r6, r4
 801327a:	3b15      	subs	r3, #21
 801327c:	f023 0303 	bic.w	r3, r3, #3
 8013280:	3304      	adds	r3, #4
 8013282:	3415      	adds	r4, #21
 8013284:	42a6      	cmp	r6, r4
 8013286:	bf38      	it	cc
 8013288:	2304      	movcc	r3, #4
 801328a:	441d      	add	r5, r3
 801328c:	4473      	add	r3, lr
 801328e:	469e      	mov	lr, r3
 8013290:	462e      	mov	r6, r5
 8013292:	4566      	cmp	r6, ip
 8013294:	d30e      	bcc.n	80132b4 <__mdiff+0xec>
 8013296:	f10c 0203 	add.w	r2, ip, #3
 801329a:	1b52      	subs	r2, r2, r5
 801329c:	f022 0203 	bic.w	r2, r2, #3
 80132a0:	3d03      	subs	r5, #3
 80132a2:	45ac      	cmp	ip, r5
 80132a4:	bf38      	it	cc
 80132a6:	2200      	movcc	r2, #0
 80132a8:	441a      	add	r2, r3
 80132aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80132ae:	b17b      	cbz	r3, 80132d0 <__mdiff+0x108>
 80132b0:	6107      	str	r7, [r0, #16]
 80132b2:	e7a3      	b.n	80131fc <__mdiff+0x34>
 80132b4:	f856 8b04 	ldr.w	r8, [r6], #4
 80132b8:	fa11 f288 	uxtah	r2, r1, r8
 80132bc:	1414      	asrs	r4, r2, #16
 80132be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80132c2:	b292      	uxth	r2, r2
 80132c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80132c8:	f84e 2b04 	str.w	r2, [lr], #4
 80132cc:	1421      	asrs	r1, r4, #16
 80132ce:	e7e0      	b.n	8013292 <__mdiff+0xca>
 80132d0:	3f01      	subs	r7, #1
 80132d2:	e7ea      	b.n	80132aa <__mdiff+0xe2>
 80132d4:	08015418 	.word	0x08015418
 80132d8:	080154a4 	.word	0x080154a4

080132dc <__ulp>:
 80132dc:	b082      	sub	sp, #8
 80132de:	ed8d 0b00 	vstr	d0, [sp]
 80132e2:	9b01      	ldr	r3, [sp, #4]
 80132e4:	4912      	ldr	r1, [pc, #72]	; (8013330 <__ulp+0x54>)
 80132e6:	4019      	ands	r1, r3
 80132e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80132ec:	2900      	cmp	r1, #0
 80132ee:	dd05      	ble.n	80132fc <__ulp+0x20>
 80132f0:	2200      	movs	r2, #0
 80132f2:	460b      	mov	r3, r1
 80132f4:	ec43 2b10 	vmov	d0, r2, r3
 80132f8:	b002      	add	sp, #8
 80132fa:	4770      	bx	lr
 80132fc:	4249      	negs	r1, r1
 80132fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013302:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013306:	f04f 0200 	mov.w	r2, #0
 801330a:	f04f 0300 	mov.w	r3, #0
 801330e:	da04      	bge.n	801331a <__ulp+0x3e>
 8013310:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013314:	fa41 f300 	asr.w	r3, r1, r0
 8013318:	e7ec      	b.n	80132f4 <__ulp+0x18>
 801331a:	f1a0 0114 	sub.w	r1, r0, #20
 801331e:	291e      	cmp	r1, #30
 8013320:	bfda      	itte	le
 8013322:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013326:	fa20 f101 	lsrle.w	r1, r0, r1
 801332a:	2101      	movgt	r1, #1
 801332c:	460a      	mov	r2, r1
 801332e:	e7e1      	b.n	80132f4 <__ulp+0x18>
 8013330:	7ff00000 	.word	0x7ff00000

08013334 <__b2d>:
 8013334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013336:	6905      	ldr	r5, [r0, #16]
 8013338:	f100 0714 	add.w	r7, r0, #20
 801333c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013340:	1f2e      	subs	r6, r5, #4
 8013342:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013346:	4620      	mov	r0, r4
 8013348:	f7ff fd48 	bl	8012ddc <__hi0bits>
 801334c:	f1c0 0320 	rsb	r3, r0, #32
 8013350:	280a      	cmp	r0, #10
 8013352:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80133d0 <__b2d+0x9c>
 8013356:	600b      	str	r3, [r1, #0]
 8013358:	dc14      	bgt.n	8013384 <__b2d+0x50>
 801335a:	f1c0 0e0b 	rsb	lr, r0, #11
 801335e:	fa24 f10e 	lsr.w	r1, r4, lr
 8013362:	42b7      	cmp	r7, r6
 8013364:	ea41 030c 	orr.w	r3, r1, ip
 8013368:	bf34      	ite	cc
 801336a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801336e:	2100      	movcs	r1, #0
 8013370:	3015      	adds	r0, #21
 8013372:	fa04 f000 	lsl.w	r0, r4, r0
 8013376:	fa21 f10e 	lsr.w	r1, r1, lr
 801337a:	ea40 0201 	orr.w	r2, r0, r1
 801337e:	ec43 2b10 	vmov	d0, r2, r3
 8013382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013384:	42b7      	cmp	r7, r6
 8013386:	bf3a      	itte	cc
 8013388:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801338c:	f1a5 0608 	subcc.w	r6, r5, #8
 8013390:	2100      	movcs	r1, #0
 8013392:	380b      	subs	r0, #11
 8013394:	d017      	beq.n	80133c6 <__b2d+0x92>
 8013396:	f1c0 0c20 	rsb	ip, r0, #32
 801339a:	fa04 f500 	lsl.w	r5, r4, r0
 801339e:	42be      	cmp	r6, r7
 80133a0:	fa21 f40c 	lsr.w	r4, r1, ip
 80133a4:	ea45 0504 	orr.w	r5, r5, r4
 80133a8:	bf8c      	ite	hi
 80133aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80133ae:	2400      	movls	r4, #0
 80133b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80133b4:	fa01 f000 	lsl.w	r0, r1, r0
 80133b8:	fa24 f40c 	lsr.w	r4, r4, ip
 80133bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80133c0:	ea40 0204 	orr.w	r2, r0, r4
 80133c4:	e7db      	b.n	801337e <__b2d+0x4a>
 80133c6:	ea44 030c 	orr.w	r3, r4, ip
 80133ca:	460a      	mov	r2, r1
 80133cc:	e7d7      	b.n	801337e <__b2d+0x4a>
 80133ce:	bf00      	nop
 80133d0:	3ff00000 	.word	0x3ff00000

080133d4 <__d2b>:
 80133d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80133d8:	4689      	mov	r9, r1
 80133da:	2101      	movs	r1, #1
 80133dc:	ec57 6b10 	vmov	r6, r7, d0
 80133e0:	4690      	mov	r8, r2
 80133e2:	f7ff fc09 	bl	8012bf8 <_Balloc>
 80133e6:	4604      	mov	r4, r0
 80133e8:	b930      	cbnz	r0, 80133f8 <__d2b+0x24>
 80133ea:	4602      	mov	r2, r0
 80133ec:	4b25      	ldr	r3, [pc, #148]	; (8013484 <__d2b+0xb0>)
 80133ee:	4826      	ldr	r0, [pc, #152]	; (8013488 <__d2b+0xb4>)
 80133f0:	f240 310a 	movw	r1, #778	; 0x30a
 80133f4:	f000 fb4e 	bl	8013a94 <__assert_func>
 80133f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80133fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013400:	bb35      	cbnz	r5, 8013450 <__d2b+0x7c>
 8013402:	2e00      	cmp	r6, #0
 8013404:	9301      	str	r3, [sp, #4]
 8013406:	d028      	beq.n	801345a <__d2b+0x86>
 8013408:	4668      	mov	r0, sp
 801340a:	9600      	str	r6, [sp, #0]
 801340c:	f7ff fd06 	bl	8012e1c <__lo0bits>
 8013410:	9900      	ldr	r1, [sp, #0]
 8013412:	b300      	cbz	r0, 8013456 <__d2b+0x82>
 8013414:	9a01      	ldr	r2, [sp, #4]
 8013416:	f1c0 0320 	rsb	r3, r0, #32
 801341a:	fa02 f303 	lsl.w	r3, r2, r3
 801341e:	430b      	orrs	r3, r1
 8013420:	40c2      	lsrs	r2, r0
 8013422:	6163      	str	r3, [r4, #20]
 8013424:	9201      	str	r2, [sp, #4]
 8013426:	9b01      	ldr	r3, [sp, #4]
 8013428:	61a3      	str	r3, [r4, #24]
 801342a:	2b00      	cmp	r3, #0
 801342c:	bf14      	ite	ne
 801342e:	2202      	movne	r2, #2
 8013430:	2201      	moveq	r2, #1
 8013432:	6122      	str	r2, [r4, #16]
 8013434:	b1d5      	cbz	r5, 801346c <__d2b+0x98>
 8013436:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801343a:	4405      	add	r5, r0
 801343c:	f8c9 5000 	str.w	r5, [r9]
 8013440:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013444:	f8c8 0000 	str.w	r0, [r8]
 8013448:	4620      	mov	r0, r4
 801344a:	b003      	add	sp, #12
 801344c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013454:	e7d5      	b.n	8013402 <__d2b+0x2e>
 8013456:	6161      	str	r1, [r4, #20]
 8013458:	e7e5      	b.n	8013426 <__d2b+0x52>
 801345a:	a801      	add	r0, sp, #4
 801345c:	f7ff fcde 	bl	8012e1c <__lo0bits>
 8013460:	9b01      	ldr	r3, [sp, #4]
 8013462:	6163      	str	r3, [r4, #20]
 8013464:	2201      	movs	r2, #1
 8013466:	6122      	str	r2, [r4, #16]
 8013468:	3020      	adds	r0, #32
 801346a:	e7e3      	b.n	8013434 <__d2b+0x60>
 801346c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013470:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013474:	f8c9 0000 	str.w	r0, [r9]
 8013478:	6918      	ldr	r0, [r3, #16]
 801347a:	f7ff fcaf 	bl	8012ddc <__hi0bits>
 801347e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013482:	e7df      	b.n	8013444 <__d2b+0x70>
 8013484:	08015418 	.word	0x08015418
 8013488:	080154a4 	.word	0x080154a4

0801348c <__ratio>:
 801348c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013490:	4688      	mov	r8, r1
 8013492:	4669      	mov	r1, sp
 8013494:	4681      	mov	r9, r0
 8013496:	f7ff ff4d 	bl	8013334 <__b2d>
 801349a:	a901      	add	r1, sp, #4
 801349c:	4640      	mov	r0, r8
 801349e:	ec55 4b10 	vmov	r4, r5, d0
 80134a2:	f7ff ff47 	bl	8013334 <__b2d>
 80134a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80134aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80134ae:	eba3 0c02 	sub.w	ip, r3, r2
 80134b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80134b6:	1a9b      	subs	r3, r3, r2
 80134b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80134bc:	ec51 0b10 	vmov	r0, r1, d0
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	bfd6      	itet	le
 80134c4:	460a      	movle	r2, r1
 80134c6:	462a      	movgt	r2, r5
 80134c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80134cc:	468b      	mov	fp, r1
 80134ce:	462f      	mov	r7, r5
 80134d0:	bfd4      	ite	le
 80134d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80134d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80134da:	4620      	mov	r0, r4
 80134dc:	ee10 2a10 	vmov	r2, s0
 80134e0:	465b      	mov	r3, fp
 80134e2:	4639      	mov	r1, r7
 80134e4:	f7ed f9b2 	bl	800084c <__aeabi_ddiv>
 80134e8:	ec41 0b10 	vmov	d0, r0, r1
 80134ec:	b003      	add	sp, #12
 80134ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080134f2 <__copybits>:
 80134f2:	3901      	subs	r1, #1
 80134f4:	b570      	push	{r4, r5, r6, lr}
 80134f6:	1149      	asrs	r1, r1, #5
 80134f8:	6914      	ldr	r4, [r2, #16]
 80134fa:	3101      	adds	r1, #1
 80134fc:	f102 0314 	add.w	r3, r2, #20
 8013500:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013504:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013508:	1f05      	subs	r5, r0, #4
 801350a:	42a3      	cmp	r3, r4
 801350c:	d30c      	bcc.n	8013528 <__copybits+0x36>
 801350e:	1aa3      	subs	r3, r4, r2
 8013510:	3b11      	subs	r3, #17
 8013512:	f023 0303 	bic.w	r3, r3, #3
 8013516:	3211      	adds	r2, #17
 8013518:	42a2      	cmp	r2, r4
 801351a:	bf88      	it	hi
 801351c:	2300      	movhi	r3, #0
 801351e:	4418      	add	r0, r3
 8013520:	2300      	movs	r3, #0
 8013522:	4288      	cmp	r0, r1
 8013524:	d305      	bcc.n	8013532 <__copybits+0x40>
 8013526:	bd70      	pop	{r4, r5, r6, pc}
 8013528:	f853 6b04 	ldr.w	r6, [r3], #4
 801352c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013530:	e7eb      	b.n	801350a <__copybits+0x18>
 8013532:	f840 3b04 	str.w	r3, [r0], #4
 8013536:	e7f4      	b.n	8013522 <__copybits+0x30>

08013538 <__any_on>:
 8013538:	f100 0214 	add.w	r2, r0, #20
 801353c:	6900      	ldr	r0, [r0, #16]
 801353e:	114b      	asrs	r3, r1, #5
 8013540:	4298      	cmp	r0, r3
 8013542:	b510      	push	{r4, lr}
 8013544:	db11      	blt.n	801356a <__any_on+0x32>
 8013546:	dd0a      	ble.n	801355e <__any_on+0x26>
 8013548:	f011 011f 	ands.w	r1, r1, #31
 801354c:	d007      	beq.n	801355e <__any_on+0x26>
 801354e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013552:	fa24 f001 	lsr.w	r0, r4, r1
 8013556:	fa00 f101 	lsl.w	r1, r0, r1
 801355a:	428c      	cmp	r4, r1
 801355c:	d10b      	bne.n	8013576 <__any_on+0x3e>
 801355e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013562:	4293      	cmp	r3, r2
 8013564:	d803      	bhi.n	801356e <__any_on+0x36>
 8013566:	2000      	movs	r0, #0
 8013568:	bd10      	pop	{r4, pc}
 801356a:	4603      	mov	r3, r0
 801356c:	e7f7      	b.n	801355e <__any_on+0x26>
 801356e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013572:	2900      	cmp	r1, #0
 8013574:	d0f5      	beq.n	8013562 <__any_on+0x2a>
 8013576:	2001      	movs	r0, #1
 8013578:	e7f6      	b.n	8013568 <__any_on+0x30>

0801357a <_calloc_r>:
 801357a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801357c:	fba1 2402 	umull	r2, r4, r1, r2
 8013580:	b94c      	cbnz	r4, 8013596 <_calloc_r+0x1c>
 8013582:	4611      	mov	r1, r2
 8013584:	9201      	str	r2, [sp, #4]
 8013586:	f000 f87b 	bl	8013680 <_malloc_r>
 801358a:	9a01      	ldr	r2, [sp, #4]
 801358c:	4605      	mov	r5, r0
 801358e:	b930      	cbnz	r0, 801359e <_calloc_r+0x24>
 8013590:	4628      	mov	r0, r5
 8013592:	b003      	add	sp, #12
 8013594:	bd30      	pop	{r4, r5, pc}
 8013596:	220c      	movs	r2, #12
 8013598:	6002      	str	r2, [r0, #0]
 801359a:	2500      	movs	r5, #0
 801359c:	e7f8      	b.n	8013590 <_calloc_r+0x16>
 801359e:	4621      	mov	r1, r4
 80135a0:	f7fc fbcc 	bl	800fd3c <memset>
 80135a4:	e7f4      	b.n	8013590 <_calloc_r+0x16>
	...

080135a8 <_free_r>:
 80135a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80135aa:	2900      	cmp	r1, #0
 80135ac:	d044      	beq.n	8013638 <_free_r+0x90>
 80135ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135b2:	9001      	str	r0, [sp, #4]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	f1a1 0404 	sub.w	r4, r1, #4
 80135ba:	bfb8      	it	lt
 80135bc:	18e4      	addlt	r4, r4, r3
 80135be:	f000 fab3 	bl	8013b28 <__malloc_lock>
 80135c2:	4a1e      	ldr	r2, [pc, #120]	; (801363c <_free_r+0x94>)
 80135c4:	9801      	ldr	r0, [sp, #4]
 80135c6:	6813      	ldr	r3, [r2, #0]
 80135c8:	b933      	cbnz	r3, 80135d8 <_free_r+0x30>
 80135ca:	6063      	str	r3, [r4, #4]
 80135cc:	6014      	str	r4, [r2, #0]
 80135ce:	b003      	add	sp, #12
 80135d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135d4:	f000 baae 	b.w	8013b34 <__malloc_unlock>
 80135d8:	42a3      	cmp	r3, r4
 80135da:	d908      	bls.n	80135ee <_free_r+0x46>
 80135dc:	6825      	ldr	r5, [r4, #0]
 80135de:	1961      	adds	r1, r4, r5
 80135e0:	428b      	cmp	r3, r1
 80135e2:	bf01      	itttt	eq
 80135e4:	6819      	ldreq	r1, [r3, #0]
 80135e6:	685b      	ldreq	r3, [r3, #4]
 80135e8:	1949      	addeq	r1, r1, r5
 80135ea:	6021      	streq	r1, [r4, #0]
 80135ec:	e7ed      	b.n	80135ca <_free_r+0x22>
 80135ee:	461a      	mov	r2, r3
 80135f0:	685b      	ldr	r3, [r3, #4]
 80135f2:	b10b      	cbz	r3, 80135f8 <_free_r+0x50>
 80135f4:	42a3      	cmp	r3, r4
 80135f6:	d9fa      	bls.n	80135ee <_free_r+0x46>
 80135f8:	6811      	ldr	r1, [r2, #0]
 80135fa:	1855      	adds	r5, r2, r1
 80135fc:	42a5      	cmp	r5, r4
 80135fe:	d10b      	bne.n	8013618 <_free_r+0x70>
 8013600:	6824      	ldr	r4, [r4, #0]
 8013602:	4421      	add	r1, r4
 8013604:	1854      	adds	r4, r2, r1
 8013606:	42a3      	cmp	r3, r4
 8013608:	6011      	str	r1, [r2, #0]
 801360a:	d1e0      	bne.n	80135ce <_free_r+0x26>
 801360c:	681c      	ldr	r4, [r3, #0]
 801360e:	685b      	ldr	r3, [r3, #4]
 8013610:	6053      	str	r3, [r2, #4]
 8013612:	4421      	add	r1, r4
 8013614:	6011      	str	r1, [r2, #0]
 8013616:	e7da      	b.n	80135ce <_free_r+0x26>
 8013618:	d902      	bls.n	8013620 <_free_r+0x78>
 801361a:	230c      	movs	r3, #12
 801361c:	6003      	str	r3, [r0, #0]
 801361e:	e7d6      	b.n	80135ce <_free_r+0x26>
 8013620:	6825      	ldr	r5, [r4, #0]
 8013622:	1961      	adds	r1, r4, r5
 8013624:	428b      	cmp	r3, r1
 8013626:	bf04      	itt	eq
 8013628:	6819      	ldreq	r1, [r3, #0]
 801362a:	685b      	ldreq	r3, [r3, #4]
 801362c:	6063      	str	r3, [r4, #4]
 801362e:	bf04      	itt	eq
 8013630:	1949      	addeq	r1, r1, r5
 8013632:	6021      	streq	r1, [r4, #0]
 8013634:	6054      	str	r4, [r2, #4]
 8013636:	e7ca      	b.n	80135ce <_free_r+0x26>
 8013638:	b003      	add	sp, #12
 801363a:	bd30      	pop	{r4, r5, pc}
 801363c:	200063b8 	.word	0x200063b8

08013640 <sbrk_aligned>:
 8013640:	b570      	push	{r4, r5, r6, lr}
 8013642:	4e0e      	ldr	r6, [pc, #56]	; (801367c <sbrk_aligned+0x3c>)
 8013644:	460c      	mov	r4, r1
 8013646:	6831      	ldr	r1, [r6, #0]
 8013648:	4605      	mov	r5, r0
 801364a:	b911      	cbnz	r1, 8013652 <sbrk_aligned+0x12>
 801364c:	f000 f9f0 	bl	8013a30 <_sbrk_r>
 8013650:	6030      	str	r0, [r6, #0]
 8013652:	4621      	mov	r1, r4
 8013654:	4628      	mov	r0, r5
 8013656:	f000 f9eb 	bl	8013a30 <_sbrk_r>
 801365a:	1c43      	adds	r3, r0, #1
 801365c:	d00a      	beq.n	8013674 <sbrk_aligned+0x34>
 801365e:	1cc4      	adds	r4, r0, #3
 8013660:	f024 0403 	bic.w	r4, r4, #3
 8013664:	42a0      	cmp	r0, r4
 8013666:	d007      	beq.n	8013678 <sbrk_aligned+0x38>
 8013668:	1a21      	subs	r1, r4, r0
 801366a:	4628      	mov	r0, r5
 801366c:	f000 f9e0 	bl	8013a30 <_sbrk_r>
 8013670:	3001      	adds	r0, #1
 8013672:	d101      	bne.n	8013678 <sbrk_aligned+0x38>
 8013674:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013678:	4620      	mov	r0, r4
 801367a:	bd70      	pop	{r4, r5, r6, pc}
 801367c:	200063bc 	.word	0x200063bc

08013680 <_malloc_r>:
 8013680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013684:	1ccd      	adds	r5, r1, #3
 8013686:	f025 0503 	bic.w	r5, r5, #3
 801368a:	3508      	adds	r5, #8
 801368c:	2d0c      	cmp	r5, #12
 801368e:	bf38      	it	cc
 8013690:	250c      	movcc	r5, #12
 8013692:	2d00      	cmp	r5, #0
 8013694:	4607      	mov	r7, r0
 8013696:	db01      	blt.n	801369c <_malloc_r+0x1c>
 8013698:	42a9      	cmp	r1, r5
 801369a:	d905      	bls.n	80136a8 <_malloc_r+0x28>
 801369c:	230c      	movs	r3, #12
 801369e:	603b      	str	r3, [r7, #0]
 80136a0:	2600      	movs	r6, #0
 80136a2:	4630      	mov	r0, r6
 80136a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136a8:	4e2e      	ldr	r6, [pc, #184]	; (8013764 <_malloc_r+0xe4>)
 80136aa:	f000 fa3d 	bl	8013b28 <__malloc_lock>
 80136ae:	6833      	ldr	r3, [r6, #0]
 80136b0:	461c      	mov	r4, r3
 80136b2:	bb34      	cbnz	r4, 8013702 <_malloc_r+0x82>
 80136b4:	4629      	mov	r1, r5
 80136b6:	4638      	mov	r0, r7
 80136b8:	f7ff ffc2 	bl	8013640 <sbrk_aligned>
 80136bc:	1c43      	adds	r3, r0, #1
 80136be:	4604      	mov	r4, r0
 80136c0:	d14d      	bne.n	801375e <_malloc_r+0xde>
 80136c2:	6834      	ldr	r4, [r6, #0]
 80136c4:	4626      	mov	r6, r4
 80136c6:	2e00      	cmp	r6, #0
 80136c8:	d140      	bne.n	801374c <_malloc_r+0xcc>
 80136ca:	6823      	ldr	r3, [r4, #0]
 80136cc:	4631      	mov	r1, r6
 80136ce:	4638      	mov	r0, r7
 80136d0:	eb04 0803 	add.w	r8, r4, r3
 80136d4:	f000 f9ac 	bl	8013a30 <_sbrk_r>
 80136d8:	4580      	cmp	r8, r0
 80136da:	d13a      	bne.n	8013752 <_malloc_r+0xd2>
 80136dc:	6821      	ldr	r1, [r4, #0]
 80136de:	3503      	adds	r5, #3
 80136e0:	1a6d      	subs	r5, r5, r1
 80136e2:	f025 0503 	bic.w	r5, r5, #3
 80136e6:	3508      	adds	r5, #8
 80136e8:	2d0c      	cmp	r5, #12
 80136ea:	bf38      	it	cc
 80136ec:	250c      	movcc	r5, #12
 80136ee:	4629      	mov	r1, r5
 80136f0:	4638      	mov	r0, r7
 80136f2:	f7ff ffa5 	bl	8013640 <sbrk_aligned>
 80136f6:	3001      	adds	r0, #1
 80136f8:	d02b      	beq.n	8013752 <_malloc_r+0xd2>
 80136fa:	6823      	ldr	r3, [r4, #0]
 80136fc:	442b      	add	r3, r5
 80136fe:	6023      	str	r3, [r4, #0]
 8013700:	e00e      	b.n	8013720 <_malloc_r+0xa0>
 8013702:	6822      	ldr	r2, [r4, #0]
 8013704:	1b52      	subs	r2, r2, r5
 8013706:	d41e      	bmi.n	8013746 <_malloc_r+0xc6>
 8013708:	2a0b      	cmp	r2, #11
 801370a:	d916      	bls.n	801373a <_malloc_r+0xba>
 801370c:	1961      	adds	r1, r4, r5
 801370e:	42a3      	cmp	r3, r4
 8013710:	6025      	str	r5, [r4, #0]
 8013712:	bf18      	it	ne
 8013714:	6059      	strne	r1, [r3, #4]
 8013716:	6863      	ldr	r3, [r4, #4]
 8013718:	bf08      	it	eq
 801371a:	6031      	streq	r1, [r6, #0]
 801371c:	5162      	str	r2, [r4, r5]
 801371e:	604b      	str	r3, [r1, #4]
 8013720:	4638      	mov	r0, r7
 8013722:	f104 060b 	add.w	r6, r4, #11
 8013726:	f000 fa05 	bl	8013b34 <__malloc_unlock>
 801372a:	f026 0607 	bic.w	r6, r6, #7
 801372e:	1d23      	adds	r3, r4, #4
 8013730:	1af2      	subs	r2, r6, r3
 8013732:	d0b6      	beq.n	80136a2 <_malloc_r+0x22>
 8013734:	1b9b      	subs	r3, r3, r6
 8013736:	50a3      	str	r3, [r4, r2]
 8013738:	e7b3      	b.n	80136a2 <_malloc_r+0x22>
 801373a:	6862      	ldr	r2, [r4, #4]
 801373c:	42a3      	cmp	r3, r4
 801373e:	bf0c      	ite	eq
 8013740:	6032      	streq	r2, [r6, #0]
 8013742:	605a      	strne	r2, [r3, #4]
 8013744:	e7ec      	b.n	8013720 <_malloc_r+0xa0>
 8013746:	4623      	mov	r3, r4
 8013748:	6864      	ldr	r4, [r4, #4]
 801374a:	e7b2      	b.n	80136b2 <_malloc_r+0x32>
 801374c:	4634      	mov	r4, r6
 801374e:	6876      	ldr	r6, [r6, #4]
 8013750:	e7b9      	b.n	80136c6 <_malloc_r+0x46>
 8013752:	230c      	movs	r3, #12
 8013754:	603b      	str	r3, [r7, #0]
 8013756:	4638      	mov	r0, r7
 8013758:	f000 f9ec 	bl	8013b34 <__malloc_unlock>
 801375c:	e7a1      	b.n	80136a2 <_malloc_r+0x22>
 801375e:	6025      	str	r5, [r4, #0]
 8013760:	e7de      	b.n	8013720 <_malloc_r+0xa0>
 8013762:	bf00      	nop
 8013764:	200063b8 	.word	0x200063b8

08013768 <__ssputs_r>:
 8013768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801376c:	688e      	ldr	r6, [r1, #8]
 801376e:	429e      	cmp	r6, r3
 8013770:	4682      	mov	sl, r0
 8013772:	460c      	mov	r4, r1
 8013774:	4690      	mov	r8, r2
 8013776:	461f      	mov	r7, r3
 8013778:	d838      	bhi.n	80137ec <__ssputs_r+0x84>
 801377a:	898a      	ldrh	r2, [r1, #12]
 801377c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013780:	d032      	beq.n	80137e8 <__ssputs_r+0x80>
 8013782:	6825      	ldr	r5, [r4, #0]
 8013784:	6909      	ldr	r1, [r1, #16]
 8013786:	eba5 0901 	sub.w	r9, r5, r1
 801378a:	6965      	ldr	r5, [r4, #20]
 801378c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013790:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013794:	3301      	adds	r3, #1
 8013796:	444b      	add	r3, r9
 8013798:	106d      	asrs	r5, r5, #1
 801379a:	429d      	cmp	r5, r3
 801379c:	bf38      	it	cc
 801379e:	461d      	movcc	r5, r3
 80137a0:	0553      	lsls	r3, r2, #21
 80137a2:	d531      	bpl.n	8013808 <__ssputs_r+0xa0>
 80137a4:	4629      	mov	r1, r5
 80137a6:	f7ff ff6b 	bl	8013680 <_malloc_r>
 80137aa:	4606      	mov	r6, r0
 80137ac:	b950      	cbnz	r0, 80137c4 <__ssputs_r+0x5c>
 80137ae:	230c      	movs	r3, #12
 80137b0:	f8ca 3000 	str.w	r3, [sl]
 80137b4:	89a3      	ldrh	r3, [r4, #12]
 80137b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137ba:	81a3      	strh	r3, [r4, #12]
 80137bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80137c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137c4:	6921      	ldr	r1, [r4, #16]
 80137c6:	464a      	mov	r2, r9
 80137c8:	f7fc faaa 	bl	800fd20 <memcpy>
 80137cc:	89a3      	ldrh	r3, [r4, #12]
 80137ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80137d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137d6:	81a3      	strh	r3, [r4, #12]
 80137d8:	6126      	str	r6, [r4, #16]
 80137da:	6165      	str	r5, [r4, #20]
 80137dc:	444e      	add	r6, r9
 80137de:	eba5 0509 	sub.w	r5, r5, r9
 80137e2:	6026      	str	r6, [r4, #0]
 80137e4:	60a5      	str	r5, [r4, #8]
 80137e6:	463e      	mov	r6, r7
 80137e8:	42be      	cmp	r6, r7
 80137ea:	d900      	bls.n	80137ee <__ssputs_r+0x86>
 80137ec:	463e      	mov	r6, r7
 80137ee:	6820      	ldr	r0, [r4, #0]
 80137f0:	4632      	mov	r2, r6
 80137f2:	4641      	mov	r1, r8
 80137f4:	f000 f97e 	bl	8013af4 <memmove>
 80137f8:	68a3      	ldr	r3, [r4, #8]
 80137fa:	1b9b      	subs	r3, r3, r6
 80137fc:	60a3      	str	r3, [r4, #8]
 80137fe:	6823      	ldr	r3, [r4, #0]
 8013800:	4433      	add	r3, r6
 8013802:	6023      	str	r3, [r4, #0]
 8013804:	2000      	movs	r0, #0
 8013806:	e7db      	b.n	80137c0 <__ssputs_r+0x58>
 8013808:	462a      	mov	r2, r5
 801380a:	f000 f999 	bl	8013b40 <_realloc_r>
 801380e:	4606      	mov	r6, r0
 8013810:	2800      	cmp	r0, #0
 8013812:	d1e1      	bne.n	80137d8 <__ssputs_r+0x70>
 8013814:	6921      	ldr	r1, [r4, #16]
 8013816:	4650      	mov	r0, sl
 8013818:	f7ff fec6 	bl	80135a8 <_free_r>
 801381c:	e7c7      	b.n	80137ae <__ssputs_r+0x46>
	...

08013820 <_svfiprintf_r>:
 8013820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013824:	4698      	mov	r8, r3
 8013826:	898b      	ldrh	r3, [r1, #12]
 8013828:	061b      	lsls	r3, r3, #24
 801382a:	b09d      	sub	sp, #116	; 0x74
 801382c:	4607      	mov	r7, r0
 801382e:	460d      	mov	r5, r1
 8013830:	4614      	mov	r4, r2
 8013832:	d50e      	bpl.n	8013852 <_svfiprintf_r+0x32>
 8013834:	690b      	ldr	r3, [r1, #16]
 8013836:	b963      	cbnz	r3, 8013852 <_svfiprintf_r+0x32>
 8013838:	2140      	movs	r1, #64	; 0x40
 801383a:	f7ff ff21 	bl	8013680 <_malloc_r>
 801383e:	6028      	str	r0, [r5, #0]
 8013840:	6128      	str	r0, [r5, #16]
 8013842:	b920      	cbnz	r0, 801384e <_svfiprintf_r+0x2e>
 8013844:	230c      	movs	r3, #12
 8013846:	603b      	str	r3, [r7, #0]
 8013848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801384c:	e0d1      	b.n	80139f2 <_svfiprintf_r+0x1d2>
 801384e:	2340      	movs	r3, #64	; 0x40
 8013850:	616b      	str	r3, [r5, #20]
 8013852:	2300      	movs	r3, #0
 8013854:	9309      	str	r3, [sp, #36]	; 0x24
 8013856:	2320      	movs	r3, #32
 8013858:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801385c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013860:	2330      	movs	r3, #48	; 0x30
 8013862:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013a0c <_svfiprintf_r+0x1ec>
 8013866:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801386a:	f04f 0901 	mov.w	r9, #1
 801386e:	4623      	mov	r3, r4
 8013870:	469a      	mov	sl, r3
 8013872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013876:	b10a      	cbz	r2, 801387c <_svfiprintf_r+0x5c>
 8013878:	2a25      	cmp	r2, #37	; 0x25
 801387a:	d1f9      	bne.n	8013870 <_svfiprintf_r+0x50>
 801387c:	ebba 0b04 	subs.w	fp, sl, r4
 8013880:	d00b      	beq.n	801389a <_svfiprintf_r+0x7a>
 8013882:	465b      	mov	r3, fp
 8013884:	4622      	mov	r2, r4
 8013886:	4629      	mov	r1, r5
 8013888:	4638      	mov	r0, r7
 801388a:	f7ff ff6d 	bl	8013768 <__ssputs_r>
 801388e:	3001      	adds	r0, #1
 8013890:	f000 80aa 	beq.w	80139e8 <_svfiprintf_r+0x1c8>
 8013894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013896:	445a      	add	r2, fp
 8013898:	9209      	str	r2, [sp, #36]	; 0x24
 801389a:	f89a 3000 	ldrb.w	r3, [sl]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	f000 80a2 	beq.w	80139e8 <_svfiprintf_r+0x1c8>
 80138a4:	2300      	movs	r3, #0
 80138a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80138aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80138ae:	f10a 0a01 	add.w	sl, sl, #1
 80138b2:	9304      	str	r3, [sp, #16]
 80138b4:	9307      	str	r3, [sp, #28]
 80138b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80138ba:	931a      	str	r3, [sp, #104]	; 0x68
 80138bc:	4654      	mov	r4, sl
 80138be:	2205      	movs	r2, #5
 80138c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138c4:	4851      	ldr	r0, [pc, #324]	; (8013a0c <_svfiprintf_r+0x1ec>)
 80138c6:	f7ec fc8b 	bl	80001e0 <memchr>
 80138ca:	9a04      	ldr	r2, [sp, #16]
 80138cc:	b9d8      	cbnz	r0, 8013906 <_svfiprintf_r+0xe6>
 80138ce:	06d0      	lsls	r0, r2, #27
 80138d0:	bf44      	itt	mi
 80138d2:	2320      	movmi	r3, #32
 80138d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80138d8:	0711      	lsls	r1, r2, #28
 80138da:	bf44      	itt	mi
 80138dc:	232b      	movmi	r3, #43	; 0x2b
 80138de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80138e2:	f89a 3000 	ldrb.w	r3, [sl]
 80138e6:	2b2a      	cmp	r3, #42	; 0x2a
 80138e8:	d015      	beq.n	8013916 <_svfiprintf_r+0xf6>
 80138ea:	9a07      	ldr	r2, [sp, #28]
 80138ec:	4654      	mov	r4, sl
 80138ee:	2000      	movs	r0, #0
 80138f0:	f04f 0c0a 	mov.w	ip, #10
 80138f4:	4621      	mov	r1, r4
 80138f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80138fa:	3b30      	subs	r3, #48	; 0x30
 80138fc:	2b09      	cmp	r3, #9
 80138fe:	d94e      	bls.n	801399e <_svfiprintf_r+0x17e>
 8013900:	b1b0      	cbz	r0, 8013930 <_svfiprintf_r+0x110>
 8013902:	9207      	str	r2, [sp, #28]
 8013904:	e014      	b.n	8013930 <_svfiprintf_r+0x110>
 8013906:	eba0 0308 	sub.w	r3, r0, r8
 801390a:	fa09 f303 	lsl.w	r3, r9, r3
 801390e:	4313      	orrs	r3, r2
 8013910:	9304      	str	r3, [sp, #16]
 8013912:	46a2      	mov	sl, r4
 8013914:	e7d2      	b.n	80138bc <_svfiprintf_r+0x9c>
 8013916:	9b03      	ldr	r3, [sp, #12]
 8013918:	1d19      	adds	r1, r3, #4
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	9103      	str	r1, [sp, #12]
 801391e:	2b00      	cmp	r3, #0
 8013920:	bfbb      	ittet	lt
 8013922:	425b      	neglt	r3, r3
 8013924:	f042 0202 	orrlt.w	r2, r2, #2
 8013928:	9307      	strge	r3, [sp, #28]
 801392a:	9307      	strlt	r3, [sp, #28]
 801392c:	bfb8      	it	lt
 801392e:	9204      	strlt	r2, [sp, #16]
 8013930:	7823      	ldrb	r3, [r4, #0]
 8013932:	2b2e      	cmp	r3, #46	; 0x2e
 8013934:	d10c      	bne.n	8013950 <_svfiprintf_r+0x130>
 8013936:	7863      	ldrb	r3, [r4, #1]
 8013938:	2b2a      	cmp	r3, #42	; 0x2a
 801393a:	d135      	bne.n	80139a8 <_svfiprintf_r+0x188>
 801393c:	9b03      	ldr	r3, [sp, #12]
 801393e:	1d1a      	adds	r2, r3, #4
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	9203      	str	r2, [sp, #12]
 8013944:	2b00      	cmp	r3, #0
 8013946:	bfb8      	it	lt
 8013948:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801394c:	3402      	adds	r4, #2
 801394e:	9305      	str	r3, [sp, #20]
 8013950:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013a1c <_svfiprintf_r+0x1fc>
 8013954:	7821      	ldrb	r1, [r4, #0]
 8013956:	2203      	movs	r2, #3
 8013958:	4650      	mov	r0, sl
 801395a:	f7ec fc41 	bl	80001e0 <memchr>
 801395e:	b140      	cbz	r0, 8013972 <_svfiprintf_r+0x152>
 8013960:	2340      	movs	r3, #64	; 0x40
 8013962:	eba0 000a 	sub.w	r0, r0, sl
 8013966:	fa03 f000 	lsl.w	r0, r3, r0
 801396a:	9b04      	ldr	r3, [sp, #16]
 801396c:	4303      	orrs	r3, r0
 801396e:	3401      	adds	r4, #1
 8013970:	9304      	str	r3, [sp, #16]
 8013972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013976:	4826      	ldr	r0, [pc, #152]	; (8013a10 <_svfiprintf_r+0x1f0>)
 8013978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801397c:	2206      	movs	r2, #6
 801397e:	f7ec fc2f 	bl	80001e0 <memchr>
 8013982:	2800      	cmp	r0, #0
 8013984:	d038      	beq.n	80139f8 <_svfiprintf_r+0x1d8>
 8013986:	4b23      	ldr	r3, [pc, #140]	; (8013a14 <_svfiprintf_r+0x1f4>)
 8013988:	bb1b      	cbnz	r3, 80139d2 <_svfiprintf_r+0x1b2>
 801398a:	9b03      	ldr	r3, [sp, #12]
 801398c:	3307      	adds	r3, #7
 801398e:	f023 0307 	bic.w	r3, r3, #7
 8013992:	3308      	adds	r3, #8
 8013994:	9303      	str	r3, [sp, #12]
 8013996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013998:	4433      	add	r3, r6
 801399a:	9309      	str	r3, [sp, #36]	; 0x24
 801399c:	e767      	b.n	801386e <_svfiprintf_r+0x4e>
 801399e:	fb0c 3202 	mla	r2, ip, r2, r3
 80139a2:	460c      	mov	r4, r1
 80139a4:	2001      	movs	r0, #1
 80139a6:	e7a5      	b.n	80138f4 <_svfiprintf_r+0xd4>
 80139a8:	2300      	movs	r3, #0
 80139aa:	3401      	adds	r4, #1
 80139ac:	9305      	str	r3, [sp, #20]
 80139ae:	4619      	mov	r1, r3
 80139b0:	f04f 0c0a 	mov.w	ip, #10
 80139b4:	4620      	mov	r0, r4
 80139b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80139ba:	3a30      	subs	r2, #48	; 0x30
 80139bc:	2a09      	cmp	r2, #9
 80139be:	d903      	bls.n	80139c8 <_svfiprintf_r+0x1a8>
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d0c5      	beq.n	8013950 <_svfiprintf_r+0x130>
 80139c4:	9105      	str	r1, [sp, #20]
 80139c6:	e7c3      	b.n	8013950 <_svfiprintf_r+0x130>
 80139c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80139cc:	4604      	mov	r4, r0
 80139ce:	2301      	movs	r3, #1
 80139d0:	e7f0      	b.n	80139b4 <_svfiprintf_r+0x194>
 80139d2:	ab03      	add	r3, sp, #12
 80139d4:	9300      	str	r3, [sp, #0]
 80139d6:	462a      	mov	r2, r5
 80139d8:	4b0f      	ldr	r3, [pc, #60]	; (8013a18 <_svfiprintf_r+0x1f8>)
 80139da:	a904      	add	r1, sp, #16
 80139dc:	4638      	mov	r0, r7
 80139de:	f7fc fa55 	bl	800fe8c <_printf_float>
 80139e2:	1c42      	adds	r2, r0, #1
 80139e4:	4606      	mov	r6, r0
 80139e6:	d1d6      	bne.n	8013996 <_svfiprintf_r+0x176>
 80139e8:	89ab      	ldrh	r3, [r5, #12]
 80139ea:	065b      	lsls	r3, r3, #25
 80139ec:	f53f af2c 	bmi.w	8013848 <_svfiprintf_r+0x28>
 80139f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139f2:	b01d      	add	sp, #116	; 0x74
 80139f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139f8:	ab03      	add	r3, sp, #12
 80139fa:	9300      	str	r3, [sp, #0]
 80139fc:	462a      	mov	r2, r5
 80139fe:	4b06      	ldr	r3, [pc, #24]	; (8013a18 <_svfiprintf_r+0x1f8>)
 8013a00:	a904      	add	r1, sp, #16
 8013a02:	4638      	mov	r0, r7
 8013a04:	f7fc fce6 	bl	80103d4 <_printf_i>
 8013a08:	e7eb      	b.n	80139e2 <_svfiprintf_r+0x1c2>
 8013a0a:	bf00      	nop
 8013a0c:	080155fc 	.word	0x080155fc
 8013a10:	08015606 	.word	0x08015606
 8013a14:	0800fe8d 	.word	0x0800fe8d
 8013a18:	08013769 	.word	0x08013769
 8013a1c:	08015602 	.word	0x08015602

08013a20 <nan>:
 8013a20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013a28 <nan+0x8>
 8013a24:	4770      	bx	lr
 8013a26:	bf00      	nop
 8013a28:	00000000 	.word	0x00000000
 8013a2c:	7ff80000 	.word	0x7ff80000

08013a30 <_sbrk_r>:
 8013a30:	b538      	push	{r3, r4, r5, lr}
 8013a32:	4d06      	ldr	r5, [pc, #24]	; (8013a4c <_sbrk_r+0x1c>)
 8013a34:	2300      	movs	r3, #0
 8013a36:	4604      	mov	r4, r0
 8013a38:	4608      	mov	r0, r1
 8013a3a:	602b      	str	r3, [r5, #0]
 8013a3c:	f7f3 f964 	bl	8006d08 <_sbrk>
 8013a40:	1c43      	adds	r3, r0, #1
 8013a42:	d102      	bne.n	8013a4a <_sbrk_r+0x1a>
 8013a44:	682b      	ldr	r3, [r5, #0]
 8013a46:	b103      	cbz	r3, 8013a4a <_sbrk_r+0x1a>
 8013a48:	6023      	str	r3, [r4, #0]
 8013a4a:	bd38      	pop	{r3, r4, r5, pc}
 8013a4c:	200063c0 	.word	0x200063c0

08013a50 <strncmp>:
 8013a50:	b510      	push	{r4, lr}
 8013a52:	b17a      	cbz	r2, 8013a74 <strncmp+0x24>
 8013a54:	4603      	mov	r3, r0
 8013a56:	3901      	subs	r1, #1
 8013a58:	1884      	adds	r4, r0, r2
 8013a5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013a5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013a62:	4290      	cmp	r0, r2
 8013a64:	d101      	bne.n	8013a6a <strncmp+0x1a>
 8013a66:	42a3      	cmp	r3, r4
 8013a68:	d101      	bne.n	8013a6e <strncmp+0x1e>
 8013a6a:	1a80      	subs	r0, r0, r2
 8013a6c:	bd10      	pop	{r4, pc}
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	d1f3      	bne.n	8013a5a <strncmp+0xa>
 8013a72:	e7fa      	b.n	8013a6a <strncmp+0x1a>
 8013a74:	4610      	mov	r0, r2
 8013a76:	e7f9      	b.n	8013a6c <strncmp+0x1c>

08013a78 <__ascii_wctomb>:
 8013a78:	b149      	cbz	r1, 8013a8e <__ascii_wctomb+0x16>
 8013a7a:	2aff      	cmp	r2, #255	; 0xff
 8013a7c:	bf85      	ittet	hi
 8013a7e:	238a      	movhi	r3, #138	; 0x8a
 8013a80:	6003      	strhi	r3, [r0, #0]
 8013a82:	700a      	strbls	r2, [r1, #0]
 8013a84:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013a88:	bf98      	it	ls
 8013a8a:	2001      	movls	r0, #1
 8013a8c:	4770      	bx	lr
 8013a8e:	4608      	mov	r0, r1
 8013a90:	4770      	bx	lr
	...

08013a94 <__assert_func>:
 8013a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013a96:	4614      	mov	r4, r2
 8013a98:	461a      	mov	r2, r3
 8013a9a:	4b09      	ldr	r3, [pc, #36]	; (8013ac0 <__assert_func+0x2c>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	4605      	mov	r5, r0
 8013aa0:	68d8      	ldr	r0, [r3, #12]
 8013aa2:	b14c      	cbz	r4, 8013ab8 <__assert_func+0x24>
 8013aa4:	4b07      	ldr	r3, [pc, #28]	; (8013ac4 <__assert_func+0x30>)
 8013aa6:	9100      	str	r1, [sp, #0]
 8013aa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013aac:	4906      	ldr	r1, [pc, #24]	; (8013ac8 <__assert_func+0x34>)
 8013aae:	462b      	mov	r3, r5
 8013ab0:	f000 f80e 	bl	8013ad0 <fiprintf>
 8013ab4:	f000 fa8c 	bl	8013fd0 <abort>
 8013ab8:	4b04      	ldr	r3, [pc, #16]	; (8013acc <__assert_func+0x38>)
 8013aba:	461c      	mov	r4, r3
 8013abc:	e7f3      	b.n	8013aa6 <__assert_func+0x12>
 8013abe:	bf00      	nop
 8013ac0:	20000014 	.word	0x20000014
 8013ac4:	0801560d 	.word	0x0801560d
 8013ac8:	0801561a 	.word	0x0801561a
 8013acc:	08015648 	.word	0x08015648

08013ad0 <fiprintf>:
 8013ad0:	b40e      	push	{r1, r2, r3}
 8013ad2:	b503      	push	{r0, r1, lr}
 8013ad4:	4601      	mov	r1, r0
 8013ad6:	ab03      	add	r3, sp, #12
 8013ad8:	4805      	ldr	r0, [pc, #20]	; (8013af0 <fiprintf+0x20>)
 8013ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ade:	6800      	ldr	r0, [r0, #0]
 8013ae0:	9301      	str	r3, [sp, #4]
 8013ae2:	f000 f885 	bl	8013bf0 <_vfiprintf_r>
 8013ae6:	b002      	add	sp, #8
 8013ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013aec:	b003      	add	sp, #12
 8013aee:	4770      	bx	lr
 8013af0:	20000014 	.word	0x20000014

08013af4 <memmove>:
 8013af4:	4288      	cmp	r0, r1
 8013af6:	b510      	push	{r4, lr}
 8013af8:	eb01 0402 	add.w	r4, r1, r2
 8013afc:	d902      	bls.n	8013b04 <memmove+0x10>
 8013afe:	4284      	cmp	r4, r0
 8013b00:	4623      	mov	r3, r4
 8013b02:	d807      	bhi.n	8013b14 <memmove+0x20>
 8013b04:	1e43      	subs	r3, r0, #1
 8013b06:	42a1      	cmp	r1, r4
 8013b08:	d008      	beq.n	8013b1c <memmove+0x28>
 8013b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013b12:	e7f8      	b.n	8013b06 <memmove+0x12>
 8013b14:	4402      	add	r2, r0
 8013b16:	4601      	mov	r1, r0
 8013b18:	428a      	cmp	r2, r1
 8013b1a:	d100      	bne.n	8013b1e <memmove+0x2a>
 8013b1c:	bd10      	pop	{r4, pc}
 8013b1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013b22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013b26:	e7f7      	b.n	8013b18 <memmove+0x24>

08013b28 <__malloc_lock>:
 8013b28:	4801      	ldr	r0, [pc, #4]	; (8013b30 <__malloc_lock+0x8>)
 8013b2a:	f000 bc11 	b.w	8014350 <__retarget_lock_acquire_recursive>
 8013b2e:	bf00      	nop
 8013b30:	200063c4 	.word	0x200063c4

08013b34 <__malloc_unlock>:
 8013b34:	4801      	ldr	r0, [pc, #4]	; (8013b3c <__malloc_unlock+0x8>)
 8013b36:	f000 bc0c 	b.w	8014352 <__retarget_lock_release_recursive>
 8013b3a:	bf00      	nop
 8013b3c:	200063c4 	.word	0x200063c4

08013b40 <_realloc_r>:
 8013b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b44:	4680      	mov	r8, r0
 8013b46:	4614      	mov	r4, r2
 8013b48:	460e      	mov	r6, r1
 8013b4a:	b921      	cbnz	r1, 8013b56 <_realloc_r+0x16>
 8013b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b50:	4611      	mov	r1, r2
 8013b52:	f7ff bd95 	b.w	8013680 <_malloc_r>
 8013b56:	b92a      	cbnz	r2, 8013b64 <_realloc_r+0x24>
 8013b58:	f7ff fd26 	bl	80135a8 <_free_r>
 8013b5c:	4625      	mov	r5, r4
 8013b5e:	4628      	mov	r0, r5
 8013b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b64:	f000 fc5c 	bl	8014420 <_malloc_usable_size_r>
 8013b68:	4284      	cmp	r4, r0
 8013b6a:	4607      	mov	r7, r0
 8013b6c:	d802      	bhi.n	8013b74 <_realloc_r+0x34>
 8013b6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013b72:	d812      	bhi.n	8013b9a <_realloc_r+0x5a>
 8013b74:	4621      	mov	r1, r4
 8013b76:	4640      	mov	r0, r8
 8013b78:	f7ff fd82 	bl	8013680 <_malloc_r>
 8013b7c:	4605      	mov	r5, r0
 8013b7e:	2800      	cmp	r0, #0
 8013b80:	d0ed      	beq.n	8013b5e <_realloc_r+0x1e>
 8013b82:	42bc      	cmp	r4, r7
 8013b84:	4622      	mov	r2, r4
 8013b86:	4631      	mov	r1, r6
 8013b88:	bf28      	it	cs
 8013b8a:	463a      	movcs	r2, r7
 8013b8c:	f7fc f8c8 	bl	800fd20 <memcpy>
 8013b90:	4631      	mov	r1, r6
 8013b92:	4640      	mov	r0, r8
 8013b94:	f7ff fd08 	bl	80135a8 <_free_r>
 8013b98:	e7e1      	b.n	8013b5e <_realloc_r+0x1e>
 8013b9a:	4635      	mov	r5, r6
 8013b9c:	e7df      	b.n	8013b5e <_realloc_r+0x1e>

08013b9e <__sfputc_r>:
 8013b9e:	6893      	ldr	r3, [r2, #8]
 8013ba0:	3b01      	subs	r3, #1
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	b410      	push	{r4}
 8013ba6:	6093      	str	r3, [r2, #8]
 8013ba8:	da08      	bge.n	8013bbc <__sfputc_r+0x1e>
 8013baa:	6994      	ldr	r4, [r2, #24]
 8013bac:	42a3      	cmp	r3, r4
 8013bae:	db01      	blt.n	8013bb4 <__sfputc_r+0x16>
 8013bb0:	290a      	cmp	r1, #10
 8013bb2:	d103      	bne.n	8013bbc <__sfputc_r+0x1e>
 8013bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bb8:	f000 b94a 	b.w	8013e50 <__swbuf_r>
 8013bbc:	6813      	ldr	r3, [r2, #0]
 8013bbe:	1c58      	adds	r0, r3, #1
 8013bc0:	6010      	str	r0, [r2, #0]
 8013bc2:	7019      	strb	r1, [r3, #0]
 8013bc4:	4608      	mov	r0, r1
 8013bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bca:	4770      	bx	lr

08013bcc <__sfputs_r>:
 8013bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bce:	4606      	mov	r6, r0
 8013bd0:	460f      	mov	r7, r1
 8013bd2:	4614      	mov	r4, r2
 8013bd4:	18d5      	adds	r5, r2, r3
 8013bd6:	42ac      	cmp	r4, r5
 8013bd8:	d101      	bne.n	8013bde <__sfputs_r+0x12>
 8013bda:	2000      	movs	r0, #0
 8013bdc:	e007      	b.n	8013bee <__sfputs_r+0x22>
 8013bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013be2:	463a      	mov	r2, r7
 8013be4:	4630      	mov	r0, r6
 8013be6:	f7ff ffda 	bl	8013b9e <__sfputc_r>
 8013bea:	1c43      	adds	r3, r0, #1
 8013bec:	d1f3      	bne.n	8013bd6 <__sfputs_r+0xa>
 8013bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013bf0 <_vfiprintf_r>:
 8013bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bf4:	460d      	mov	r5, r1
 8013bf6:	b09d      	sub	sp, #116	; 0x74
 8013bf8:	4614      	mov	r4, r2
 8013bfa:	4698      	mov	r8, r3
 8013bfc:	4606      	mov	r6, r0
 8013bfe:	b118      	cbz	r0, 8013c08 <_vfiprintf_r+0x18>
 8013c00:	6983      	ldr	r3, [r0, #24]
 8013c02:	b90b      	cbnz	r3, 8013c08 <_vfiprintf_r+0x18>
 8013c04:	f000 fb06 	bl	8014214 <__sinit>
 8013c08:	4b89      	ldr	r3, [pc, #548]	; (8013e30 <_vfiprintf_r+0x240>)
 8013c0a:	429d      	cmp	r5, r3
 8013c0c:	d11b      	bne.n	8013c46 <_vfiprintf_r+0x56>
 8013c0e:	6875      	ldr	r5, [r6, #4]
 8013c10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c12:	07d9      	lsls	r1, r3, #31
 8013c14:	d405      	bmi.n	8013c22 <_vfiprintf_r+0x32>
 8013c16:	89ab      	ldrh	r3, [r5, #12]
 8013c18:	059a      	lsls	r2, r3, #22
 8013c1a:	d402      	bmi.n	8013c22 <_vfiprintf_r+0x32>
 8013c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c1e:	f000 fb97 	bl	8014350 <__retarget_lock_acquire_recursive>
 8013c22:	89ab      	ldrh	r3, [r5, #12]
 8013c24:	071b      	lsls	r3, r3, #28
 8013c26:	d501      	bpl.n	8013c2c <_vfiprintf_r+0x3c>
 8013c28:	692b      	ldr	r3, [r5, #16]
 8013c2a:	b9eb      	cbnz	r3, 8013c68 <_vfiprintf_r+0x78>
 8013c2c:	4629      	mov	r1, r5
 8013c2e:	4630      	mov	r0, r6
 8013c30:	f000 f960 	bl	8013ef4 <__swsetup_r>
 8013c34:	b1c0      	cbz	r0, 8013c68 <_vfiprintf_r+0x78>
 8013c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c38:	07dc      	lsls	r4, r3, #31
 8013c3a:	d50e      	bpl.n	8013c5a <_vfiprintf_r+0x6a>
 8013c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c40:	b01d      	add	sp, #116	; 0x74
 8013c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c46:	4b7b      	ldr	r3, [pc, #492]	; (8013e34 <_vfiprintf_r+0x244>)
 8013c48:	429d      	cmp	r5, r3
 8013c4a:	d101      	bne.n	8013c50 <_vfiprintf_r+0x60>
 8013c4c:	68b5      	ldr	r5, [r6, #8]
 8013c4e:	e7df      	b.n	8013c10 <_vfiprintf_r+0x20>
 8013c50:	4b79      	ldr	r3, [pc, #484]	; (8013e38 <_vfiprintf_r+0x248>)
 8013c52:	429d      	cmp	r5, r3
 8013c54:	bf08      	it	eq
 8013c56:	68f5      	ldreq	r5, [r6, #12]
 8013c58:	e7da      	b.n	8013c10 <_vfiprintf_r+0x20>
 8013c5a:	89ab      	ldrh	r3, [r5, #12]
 8013c5c:	0598      	lsls	r0, r3, #22
 8013c5e:	d4ed      	bmi.n	8013c3c <_vfiprintf_r+0x4c>
 8013c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c62:	f000 fb76 	bl	8014352 <__retarget_lock_release_recursive>
 8013c66:	e7e9      	b.n	8013c3c <_vfiprintf_r+0x4c>
 8013c68:	2300      	movs	r3, #0
 8013c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8013c6c:	2320      	movs	r3, #32
 8013c6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c76:	2330      	movs	r3, #48	; 0x30
 8013c78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013e3c <_vfiprintf_r+0x24c>
 8013c7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c80:	f04f 0901 	mov.w	r9, #1
 8013c84:	4623      	mov	r3, r4
 8013c86:	469a      	mov	sl, r3
 8013c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c8c:	b10a      	cbz	r2, 8013c92 <_vfiprintf_r+0xa2>
 8013c8e:	2a25      	cmp	r2, #37	; 0x25
 8013c90:	d1f9      	bne.n	8013c86 <_vfiprintf_r+0x96>
 8013c92:	ebba 0b04 	subs.w	fp, sl, r4
 8013c96:	d00b      	beq.n	8013cb0 <_vfiprintf_r+0xc0>
 8013c98:	465b      	mov	r3, fp
 8013c9a:	4622      	mov	r2, r4
 8013c9c:	4629      	mov	r1, r5
 8013c9e:	4630      	mov	r0, r6
 8013ca0:	f7ff ff94 	bl	8013bcc <__sfputs_r>
 8013ca4:	3001      	adds	r0, #1
 8013ca6:	f000 80aa 	beq.w	8013dfe <_vfiprintf_r+0x20e>
 8013caa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013cac:	445a      	add	r2, fp
 8013cae:	9209      	str	r2, [sp, #36]	; 0x24
 8013cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	f000 80a2 	beq.w	8013dfe <_vfiprintf_r+0x20e>
 8013cba:	2300      	movs	r3, #0
 8013cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013cc4:	f10a 0a01 	add.w	sl, sl, #1
 8013cc8:	9304      	str	r3, [sp, #16]
 8013cca:	9307      	str	r3, [sp, #28]
 8013ccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013cd0:	931a      	str	r3, [sp, #104]	; 0x68
 8013cd2:	4654      	mov	r4, sl
 8013cd4:	2205      	movs	r2, #5
 8013cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cda:	4858      	ldr	r0, [pc, #352]	; (8013e3c <_vfiprintf_r+0x24c>)
 8013cdc:	f7ec fa80 	bl	80001e0 <memchr>
 8013ce0:	9a04      	ldr	r2, [sp, #16]
 8013ce2:	b9d8      	cbnz	r0, 8013d1c <_vfiprintf_r+0x12c>
 8013ce4:	06d1      	lsls	r1, r2, #27
 8013ce6:	bf44      	itt	mi
 8013ce8:	2320      	movmi	r3, #32
 8013cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cee:	0713      	lsls	r3, r2, #28
 8013cf0:	bf44      	itt	mi
 8013cf2:	232b      	movmi	r3, #43	; 0x2b
 8013cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8013cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8013cfe:	d015      	beq.n	8013d2c <_vfiprintf_r+0x13c>
 8013d00:	9a07      	ldr	r2, [sp, #28]
 8013d02:	4654      	mov	r4, sl
 8013d04:	2000      	movs	r0, #0
 8013d06:	f04f 0c0a 	mov.w	ip, #10
 8013d0a:	4621      	mov	r1, r4
 8013d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d10:	3b30      	subs	r3, #48	; 0x30
 8013d12:	2b09      	cmp	r3, #9
 8013d14:	d94e      	bls.n	8013db4 <_vfiprintf_r+0x1c4>
 8013d16:	b1b0      	cbz	r0, 8013d46 <_vfiprintf_r+0x156>
 8013d18:	9207      	str	r2, [sp, #28]
 8013d1a:	e014      	b.n	8013d46 <_vfiprintf_r+0x156>
 8013d1c:	eba0 0308 	sub.w	r3, r0, r8
 8013d20:	fa09 f303 	lsl.w	r3, r9, r3
 8013d24:	4313      	orrs	r3, r2
 8013d26:	9304      	str	r3, [sp, #16]
 8013d28:	46a2      	mov	sl, r4
 8013d2a:	e7d2      	b.n	8013cd2 <_vfiprintf_r+0xe2>
 8013d2c:	9b03      	ldr	r3, [sp, #12]
 8013d2e:	1d19      	adds	r1, r3, #4
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	9103      	str	r1, [sp, #12]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	bfbb      	ittet	lt
 8013d38:	425b      	neglt	r3, r3
 8013d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8013d3e:	9307      	strge	r3, [sp, #28]
 8013d40:	9307      	strlt	r3, [sp, #28]
 8013d42:	bfb8      	it	lt
 8013d44:	9204      	strlt	r2, [sp, #16]
 8013d46:	7823      	ldrb	r3, [r4, #0]
 8013d48:	2b2e      	cmp	r3, #46	; 0x2e
 8013d4a:	d10c      	bne.n	8013d66 <_vfiprintf_r+0x176>
 8013d4c:	7863      	ldrb	r3, [r4, #1]
 8013d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8013d50:	d135      	bne.n	8013dbe <_vfiprintf_r+0x1ce>
 8013d52:	9b03      	ldr	r3, [sp, #12]
 8013d54:	1d1a      	adds	r2, r3, #4
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	9203      	str	r2, [sp, #12]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	bfb8      	it	lt
 8013d5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013d62:	3402      	adds	r4, #2
 8013d64:	9305      	str	r3, [sp, #20]
 8013d66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013e4c <_vfiprintf_r+0x25c>
 8013d6a:	7821      	ldrb	r1, [r4, #0]
 8013d6c:	2203      	movs	r2, #3
 8013d6e:	4650      	mov	r0, sl
 8013d70:	f7ec fa36 	bl	80001e0 <memchr>
 8013d74:	b140      	cbz	r0, 8013d88 <_vfiprintf_r+0x198>
 8013d76:	2340      	movs	r3, #64	; 0x40
 8013d78:	eba0 000a 	sub.w	r0, r0, sl
 8013d7c:	fa03 f000 	lsl.w	r0, r3, r0
 8013d80:	9b04      	ldr	r3, [sp, #16]
 8013d82:	4303      	orrs	r3, r0
 8013d84:	3401      	adds	r4, #1
 8013d86:	9304      	str	r3, [sp, #16]
 8013d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d8c:	482c      	ldr	r0, [pc, #176]	; (8013e40 <_vfiprintf_r+0x250>)
 8013d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d92:	2206      	movs	r2, #6
 8013d94:	f7ec fa24 	bl	80001e0 <memchr>
 8013d98:	2800      	cmp	r0, #0
 8013d9a:	d03f      	beq.n	8013e1c <_vfiprintf_r+0x22c>
 8013d9c:	4b29      	ldr	r3, [pc, #164]	; (8013e44 <_vfiprintf_r+0x254>)
 8013d9e:	bb1b      	cbnz	r3, 8013de8 <_vfiprintf_r+0x1f8>
 8013da0:	9b03      	ldr	r3, [sp, #12]
 8013da2:	3307      	adds	r3, #7
 8013da4:	f023 0307 	bic.w	r3, r3, #7
 8013da8:	3308      	adds	r3, #8
 8013daa:	9303      	str	r3, [sp, #12]
 8013dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dae:	443b      	add	r3, r7
 8013db0:	9309      	str	r3, [sp, #36]	; 0x24
 8013db2:	e767      	b.n	8013c84 <_vfiprintf_r+0x94>
 8013db4:	fb0c 3202 	mla	r2, ip, r2, r3
 8013db8:	460c      	mov	r4, r1
 8013dba:	2001      	movs	r0, #1
 8013dbc:	e7a5      	b.n	8013d0a <_vfiprintf_r+0x11a>
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	3401      	adds	r4, #1
 8013dc2:	9305      	str	r3, [sp, #20]
 8013dc4:	4619      	mov	r1, r3
 8013dc6:	f04f 0c0a 	mov.w	ip, #10
 8013dca:	4620      	mov	r0, r4
 8013dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013dd0:	3a30      	subs	r2, #48	; 0x30
 8013dd2:	2a09      	cmp	r2, #9
 8013dd4:	d903      	bls.n	8013dde <_vfiprintf_r+0x1ee>
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d0c5      	beq.n	8013d66 <_vfiprintf_r+0x176>
 8013dda:	9105      	str	r1, [sp, #20]
 8013ddc:	e7c3      	b.n	8013d66 <_vfiprintf_r+0x176>
 8013dde:	fb0c 2101 	mla	r1, ip, r1, r2
 8013de2:	4604      	mov	r4, r0
 8013de4:	2301      	movs	r3, #1
 8013de6:	e7f0      	b.n	8013dca <_vfiprintf_r+0x1da>
 8013de8:	ab03      	add	r3, sp, #12
 8013dea:	9300      	str	r3, [sp, #0]
 8013dec:	462a      	mov	r2, r5
 8013dee:	4b16      	ldr	r3, [pc, #88]	; (8013e48 <_vfiprintf_r+0x258>)
 8013df0:	a904      	add	r1, sp, #16
 8013df2:	4630      	mov	r0, r6
 8013df4:	f7fc f84a 	bl	800fe8c <_printf_float>
 8013df8:	4607      	mov	r7, r0
 8013dfa:	1c78      	adds	r0, r7, #1
 8013dfc:	d1d6      	bne.n	8013dac <_vfiprintf_r+0x1bc>
 8013dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e00:	07d9      	lsls	r1, r3, #31
 8013e02:	d405      	bmi.n	8013e10 <_vfiprintf_r+0x220>
 8013e04:	89ab      	ldrh	r3, [r5, #12]
 8013e06:	059a      	lsls	r2, r3, #22
 8013e08:	d402      	bmi.n	8013e10 <_vfiprintf_r+0x220>
 8013e0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e0c:	f000 faa1 	bl	8014352 <__retarget_lock_release_recursive>
 8013e10:	89ab      	ldrh	r3, [r5, #12]
 8013e12:	065b      	lsls	r3, r3, #25
 8013e14:	f53f af12 	bmi.w	8013c3c <_vfiprintf_r+0x4c>
 8013e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e1a:	e711      	b.n	8013c40 <_vfiprintf_r+0x50>
 8013e1c:	ab03      	add	r3, sp, #12
 8013e1e:	9300      	str	r3, [sp, #0]
 8013e20:	462a      	mov	r2, r5
 8013e22:	4b09      	ldr	r3, [pc, #36]	; (8013e48 <_vfiprintf_r+0x258>)
 8013e24:	a904      	add	r1, sp, #16
 8013e26:	4630      	mov	r0, r6
 8013e28:	f7fc fad4 	bl	80103d4 <_printf_i>
 8013e2c:	e7e4      	b.n	8013df8 <_vfiprintf_r+0x208>
 8013e2e:	bf00      	nop
 8013e30:	0801566c 	.word	0x0801566c
 8013e34:	0801568c 	.word	0x0801568c
 8013e38:	0801564c 	.word	0x0801564c
 8013e3c:	080155fc 	.word	0x080155fc
 8013e40:	08015606 	.word	0x08015606
 8013e44:	0800fe8d 	.word	0x0800fe8d
 8013e48:	08013bcd 	.word	0x08013bcd
 8013e4c:	08015602 	.word	0x08015602

08013e50 <__swbuf_r>:
 8013e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e52:	460e      	mov	r6, r1
 8013e54:	4614      	mov	r4, r2
 8013e56:	4605      	mov	r5, r0
 8013e58:	b118      	cbz	r0, 8013e62 <__swbuf_r+0x12>
 8013e5a:	6983      	ldr	r3, [r0, #24]
 8013e5c:	b90b      	cbnz	r3, 8013e62 <__swbuf_r+0x12>
 8013e5e:	f000 f9d9 	bl	8014214 <__sinit>
 8013e62:	4b21      	ldr	r3, [pc, #132]	; (8013ee8 <__swbuf_r+0x98>)
 8013e64:	429c      	cmp	r4, r3
 8013e66:	d12b      	bne.n	8013ec0 <__swbuf_r+0x70>
 8013e68:	686c      	ldr	r4, [r5, #4]
 8013e6a:	69a3      	ldr	r3, [r4, #24]
 8013e6c:	60a3      	str	r3, [r4, #8]
 8013e6e:	89a3      	ldrh	r3, [r4, #12]
 8013e70:	071a      	lsls	r2, r3, #28
 8013e72:	d52f      	bpl.n	8013ed4 <__swbuf_r+0x84>
 8013e74:	6923      	ldr	r3, [r4, #16]
 8013e76:	b36b      	cbz	r3, 8013ed4 <__swbuf_r+0x84>
 8013e78:	6923      	ldr	r3, [r4, #16]
 8013e7a:	6820      	ldr	r0, [r4, #0]
 8013e7c:	1ac0      	subs	r0, r0, r3
 8013e7e:	6963      	ldr	r3, [r4, #20]
 8013e80:	b2f6      	uxtb	r6, r6
 8013e82:	4283      	cmp	r3, r0
 8013e84:	4637      	mov	r7, r6
 8013e86:	dc04      	bgt.n	8013e92 <__swbuf_r+0x42>
 8013e88:	4621      	mov	r1, r4
 8013e8a:	4628      	mov	r0, r5
 8013e8c:	f000 f92e 	bl	80140ec <_fflush_r>
 8013e90:	bb30      	cbnz	r0, 8013ee0 <__swbuf_r+0x90>
 8013e92:	68a3      	ldr	r3, [r4, #8]
 8013e94:	3b01      	subs	r3, #1
 8013e96:	60a3      	str	r3, [r4, #8]
 8013e98:	6823      	ldr	r3, [r4, #0]
 8013e9a:	1c5a      	adds	r2, r3, #1
 8013e9c:	6022      	str	r2, [r4, #0]
 8013e9e:	701e      	strb	r6, [r3, #0]
 8013ea0:	6963      	ldr	r3, [r4, #20]
 8013ea2:	3001      	adds	r0, #1
 8013ea4:	4283      	cmp	r3, r0
 8013ea6:	d004      	beq.n	8013eb2 <__swbuf_r+0x62>
 8013ea8:	89a3      	ldrh	r3, [r4, #12]
 8013eaa:	07db      	lsls	r3, r3, #31
 8013eac:	d506      	bpl.n	8013ebc <__swbuf_r+0x6c>
 8013eae:	2e0a      	cmp	r6, #10
 8013eb0:	d104      	bne.n	8013ebc <__swbuf_r+0x6c>
 8013eb2:	4621      	mov	r1, r4
 8013eb4:	4628      	mov	r0, r5
 8013eb6:	f000 f919 	bl	80140ec <_fflush_r>
 8013eba:	b988      	cbnz	r0, 8013ee0 <__swbuf_r+0x90>
 8013ebc:	4638      	mov	r0, r7
 8013ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ec0:	4b0a      	ldr	r3, [pc, #40]	; (8013eec <__swbuf_r+0x9c>)
 8013ec2:	429c      	cmp	r4, r3
 8013ec4:	d101      	bne.n	8013eca <__swbuf_r+0x7a>
 8013ec6:	68ac      	ldr	r4, [r5, #8]
 8013ec8:	e7cf      	b.n	8013e6a <__swbuf_r+0x1a>
 8013eca:	4b09      	ldr	r3, [pc, #36]	; (8013ef0 <__swbuf_r+0xa0>)
 8013ecc:	429c      	cmp	r4, r3
 8013ece:	bf08      	it	eq
 8013ed0:	68ec      	ldreq	r4, [r5, #12]
 8013ed2:	e7ca      	b.n	8013e6a <__swbuf_r+0x1a>
 8013ed4:	4621      	mov	r1, r4
 8013ed6:	4628      	mov	r0, r5
 8013ed8:	f000 f80c 	bl	8013ef4 <__swsetup_r>
 8013edc:	2800      	cmp	r0, #0
 8013ede:	d0cb      	beq.n	8013e78 <__swbuf_r+0x28>
 8013ee0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013ee4:	e7ea      	b.n	8013ebc <__swbuf_r+0x6c>
 8013ee6:	bf00      	nop
 8013ee8:	0801566c 	.word	0x0801566c
 8013eec:	0801568c 	.word	0x0801568c
 8013ef0:	0801564c 	.word	0x0801564c

08013ef4 <__swsetup_r>:
 8013ef4:	4b32      	ldr	r3, [pc, #200]	; (8013fc0 <__swsetup_r+0xcc>)
 8013ef6:	b570      	push	{r4, r5, r6, lr}
 8013ef8:	681d      	ldr	r5, [r3, #0]
 8013efa:	4606      	mov	r6, r0
 8013efc:	460c      	mov	r4, r1
 8013efe:	b125      	cbz	r5, 8013f0a <__swsetup_r+0x16>
 8013f00:	69ab      	ldr	r3, [r5, #24]
 8013f02:	b913      	cbnz	r3, 8013f0a <__swsetup_r+0x16>
 8013f04:	4628      	mov	r0, r5
 8013f06:	f000 f985 	bl	8014214 <__sinit>
 8013f0a:	4b2e      	ldr	r3, [pc, #184]	; (8013fc4 <__swsetup_r+0xd0>)
 8013f0c:	429c      	cmp	r4, r3
 8013f0e:	d10f      	bne.n	8013f30 <__swsetup_r+0x3c>
 8013f10:	686c      	ldr	r4, [r5, #4]
 8013f12:	89a3      	ldrh	r3, [r4, #12]
 8013f14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f18:	0719      	lsls	r1, r3, #28
 8013f1a:	d42c      	bmi.n	8013f76 <__swsetup_r+0x82>
 8013f1c:	06dd      	lsls	r5, r3, #27
 8013f1e:	d411      	bmi.n	8013f44 <__swsetup_r+0x50>
 8013f20:	2309      	movs	r3, #9
 8013f22:	6033      	str	r3, [r6, #0]
 8013f24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013f28:	81a3      	strh	r3, [r4, #12]
 8013f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f2e:	e03e      	b.n	8013fae <__swsetup_r+0xba>
 8013f30:	4b25      	ldr	r3, [pc, #148]	; (8013fc8 <__swsetup_r+0xd4>)
 8013f32:	429c      	cmp	r4, r3
 8013f34:	d101      	bne.n	8013f3a <__swsetup_r+0x46>
 8013f36:	68ac      	ldr	r4, [r5, #8]
 8013f38:	e7eb      	b.n	8013f12 <__swsetup_r+0x1e>
 8013f3a:	4b24      	ldr	r3, [pc, #144]	; (8013fcc <__swsetup_r+0xd8>)
 8013f3c:	429c      	cmp	r4, r3
 8013f3e:	bf08      	it	eq
 8013f40:	68ec      	ldreq	r4, [r5, #12]
 8013f42:	e7e6      	b.n	8013f12 <__swsetup_r+0x1e>
 8013f44:	0758      	lsls	r0, r3, #29
 8013f46:	d512      	bpl.n	8013f6e <__swsetup_r+0x7a>
 8013f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f4a:	b141      	cbz	r1, 8013f5e <__swsetup_r+0x6a>
 8013f4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f50:	4299      	cmp	r1, r3
 8013f52:	d002      	beq.n	8013f5a <__swsetup_r+0x66>
 8013f54:	4630      	mov	r0, r6
 8013f56:	f7ff fb27 	bl	80135a8 <_free_r>
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	6363      	str	r3, [r4, #52]	; 0x34
 8013f5e:	89a3      	ldrh	r3, [r4, #12]
 8013f60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013f64:	81a3      	strh	r3, [r4, #12]
 8013f66:	2300      	movs	r3, #0
 8013f68:	6063      	str	r3, [r4, #4]
 8013f6a:	6923      	ldr	r3, [r4, #16]
 8013f6c:	6023      	str	r3, [r4, #0]
 8013f6e:	89a3      	ldrh	r3, [r4, #12]
 8013f70:	f043 0308 	orr.w	r3, r3, #8
 8013f74:	81a3      	strh	r3, [r4, #12]
 8013f76:	6923      	ldr	r3, [r4, #16]
 8013f78:	b94b      	cbnz	r3, 8013f8e <__swsetup_r+0x9a>
 8013f7a:	89a3      	ldrh	r3, [r4, #12]
 8013f7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f84:	d003      	beq.n	8013f8e <__swsetup_r+0x9a>
 8013f86:	4621      	mov	r1, r4
 8013f88:	4630      	mov	r0, r6
 8013f8a:	f000 fa09 	bl	80143a0 <__smakebuf_r>
 8013f8e:	89a0      	ldrh	r0, [r4, #12]
 8013f90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f94:	f010 0301 	ands.w	r3, r0, #1
 8013f98:	d00a      	beq.n	8013fb0 <__swsetup_r+0xbc>
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	60a3      	str	r3, [r4, #8]
 8013f9e:	6963      	ldr	r3, [r4, #20]
 8013fa0:	425b      	negs	r3, r3
 8013fa2:	61a3      	str	r3, [r4, #24]
 8013fa4:	6923      	ldr	r3, [r4, #16]
 8013fa6:	b943      	cbnz	r3, 8013fba <__swsetup_r+0xc6>
 8013fa8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013fac:	d1ba      	bne.n	8013f24 <__swsetup_r+0x30>
 8013fae:	bd70      	pop	{r4, r5, r6, pc}
 8013fb0:	0781      	lsls	r1, r0, #30
 8013fb2:	bf58      	it	pl
 8013fb4:	6963      	ldrpl	r3, [r4, #20]
 8013fb6:	60a3      	str	r3, [r4, #8]
 8013fb8:	e7f4      	b.n	8013fa4 <__swsetup_r+0xb0>
 8013fba:	2000      	movs	r0, #0
 8013fbc:	e7f7      	b.n	8013fae <__swsetup_r+0xba>
 8013fbe:	bf00      	nop
 8013fc0:	20000014 	.word	0x20000014
 8013fc4:	0801566c 	.word	0x0801566c
 8013fc8:	0801568c 	.word	0x0801568c
 8013fcc:	0801564c 	.word	0x0801564c

08013fd0 <abort>:
 8013fd0:	b508      	push	{r3, lr}
 8013fd2:	2006      	movs	r0, #6
 8013fd4:	f000 fa54 	bl	8014480 <raise>
 8013fd8:	2001      	movs	r0, #1
 8013fda:	f7f2 fe1d 	bl	8006c18 <_exit>
	...

08013fe0 <__sflush_r>:
 8013fe0:	898a      	ldrh	r2, [r1, #12]
 8013fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fe6:	4605      	mov	r5, r0
 8013fe8:	0710      	lsls	r0, r2, #28
 8013fea:	460c      	mov	r4, r1
 8013fec:	d458      	bmi.n	80140a0 <__sflush_r+0xc0>
 8013fee:	684b      	ldr	r3, [r1, #4]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	dc05      	bgt.n	8014000 <__sflush_r+0x20>
 8013ff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	dc02      	bgt.n	8014000 <__sflush_r+0x20>
 8013ffa:	2000      	movs	r0, #0
 8013ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014002:	2e00      	cmp	r6, #0
 8014004:	d0f9      	beq.n	8013ffa <__sflush_r+0x1a>
 8014006:	2300      	movs	r3, #0
 8014008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801400c:	682f      	ldr	r7, [r5, #0]
 801400e:	602b      	str	r3, [r5, #0]
 8014010:	d032      	beq.n	8014078 <__sflush_r+0x98>
 8014012:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014014:	89a3      	ldrh	r3, [r4, #12]
 8014016:	075a      	lsls	r2, r3, #29
 8014018:	d505      	bpl.n	8014026 <__sflush_r+0x46>
 801401a:	6863      	ldr	r3, [r4, #4]
 801401c:	1ac0      	subs	r0, r0, r3
 801401e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014020:	b10b      	cbz	r3, 8014026 <__sflush_r+0x46>
 8014022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014024:	1ac0      	subs	r0, r0, r3
 8014026:	2300      	movs	r3, #0
 8014028:	4602      	mov	r2, r0
 801402a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801402c:	6a21      	ldr	r1, [r4, #32]
 801402e:	4628      	mov	r0, r5
 8014030:	47b0      	blx	r6
 8014032:	1c43      	adds	r3, r0, #1
 8014034:	89a3      	ldrh	r3, [r4, #12]
 8014036:	d106      	bne.n	8014046 <__sflush_r+0x66>
 8014038:	6829      	ldr	r1, [r5, #0]
 801403a:	291d      	cmp	r1, #29
 801403c:	d82c      	bhi.n	8014098 <__sflush_r+0xb8>
 801403e:	4a2a      	ldr	r2, [pc, #168]	; (80140e8 <__sflush_r+0x108>)
 8014040:	40ca      	lsrs	r2, r1
 8014042:	07d6      	lsls	r6, r2, #31
 8014044:	d528      	bpl.n	8014098 <__sflush_r+0xb8>
 8014046:	2200      	movs	r2, #0
 8014048:	6062      	str	r2, [r4, #4]
 801404a:	04d9      	lsls	r1, r3, #19
 801404c:	6922      	ldr	r2, [r4, #16]
 801404e:	6022      	str	r2, [r4, #0]
 8014050:	d504      	bpl.n	801405c <__sflush_r+0x7c>
 8014052:	1c42      	adds	r2, r0, #1
 8014054:	d101      	bne.n	801405a <__sflush_r+0x7a>
 8014056:	682b      	ldr	r3, [r5, #0]
 8014058:	b903      	cbnz	r3, 801405c <__sflush_r+0x7c>
 801405a:	6560      	str	r0, [r4, #84]	; 0x54
 801405c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801405e:	602f      	str	r7, [r5, #0]
 8014060:	2900      	cmp	r1, #0
 8014062:	d0ca      	beq.n	8013ffa <__sflush_r+0x1a>
 8014064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014068:	4299      	cmp	r1, r3
 801406a:	d002      	beq.n	8014072 <__sflush_r+0x92>
 801406c:	4628      	mov	r0, r5
 801406e:	f7ff fa9b 	bl	80135a8 <_free_r>
 8014072:	2000      	movs	r0, #0
 8014074:	6360      	str	r0, [r4, #52]	; 0x34
 8014076:	e7c1      	b.n	8013ffc <__sflush_r+0x1c>
 8014078:	6a21      	ldr	r1, [r4, #32]
 801407a:	2301      	movs	r3, #1
 801407c:	4628      	mov	r0, r5
 801407e:	47b0      	blx	r6
 8014080:	1c41      	adds	r1, r0, #1
 8014082:	d1c7      	bne.n	8014014 <__sflush_r+0x34>
 8014084:	682b      	ldr	r3, [r5, #0]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d0c4      	beq.n	8014014 <__sflush_r+0x34>
 801408a:	2b1d      	cmp	r3, #29
 801408c:	d001      	beq.n	8014092 <__sflush_r+0xb2>
 801408e:	2b16      	cmp	r3, #22
 8014090:	d101      	bne.n	8014096 <__sflush_r+0xb6>
 8014092:	602f      	str	r7, [r5, #0]
 8014094:	e7b1      	b.n	8013ffa <__sflush_r+0x1a>
 8014096:	89a3      	ldrh	r3, [r4, #12]
 8014098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801409c:	81a3      	strh	r3, [r4, #12]
 801409e:	e7ad      	b.n	8013ffc <__sflush_r+0x1c>
 80140a0:	690f      	ldr	r7, [r1, #16]
 80140a2:	2f00      	cmp	r7, #0
 80140a4:	d0a9      	beq.n	8013ffa <__sflush_r+0x1a>
 80140a6:	0793      	lsls	r3, r2, #30
 80140a8:	680e      	ldr	r6, [r1, #0]
 80140aa:	bf08      	it	eq
 80140ac:	694b      	ldreq	r3, [r1, #20]
 80140ae:	600f      	str	r7, [r1, #0]
 80140b0:	bf18      	it	ne
 80140b2:	2300      	movne	r3, #0
 80140b4:	eba6 0807 	sub.w	r8, r6, r7
 80140b8:	608b      	str	r3, [r1, #8]
 80140ba:	f1b8 0f00 	cmp.w	r8, #0
 80140be:	dd9c      	ble.n	8013ffa <__sflush_r+0x1a>
 80140c0:	6a21      	ldr	r1, [r4, #32]
 80140c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80140c4:	4643      	mov	r3, r8
 80140c6:	463a      	mov	r2, r7
 80140c8:	4628      	mov	r0, r5
 80140ca:	47b0      	blx	r6
 80140cc:	2800      	cmp	r0, #0
 80140ce:	dc06      	bgt.n	80140de <__sflush_r+0xfe>
 80140d0:	89a3      	ldrh	r3, [r4, #12]
 80140d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140d6:	81a3      	strh	r3, [r4, #12]
 80140d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140dc:	e78e      	b.n	8013ffc <__sflush_r+0x1c>
 80140de:	4407      	add	r7, r0
 80140e0:	eba8 0800 	sub.w	r8, r8, r0
 80140e4:	e7e9      	b.n	80140ba <__sflush_r+0xda>
 80140e6:	bf00      	nop
 80140e8:	20400001 	.word	0x20400001

080140ec <_fflush_r>:
 80140ec:	b538      	push	{r3, r4, r5, lr}
 80140ee:	690b      	ldr	r3, [r1, #16]
 80140f0:	4605      	mov	r5, r0
 80140f2:	460c      	mov	r4, r1
 80140f4:	b913      	cbnz	r3, 80140fc <_fflush_r+0x10>
 80140f6:	2500      	movs	r5, #0
 80140f8:	4628      	mov	r0, r5
 80140fa:	bd38      	pop	{r3, r4, r5, pc}
 80140fc:	b118      	cbz	r0, 8014106 <_fflush_r+0x1a>
 80140fe:	6983      	ldr	r3, [r0, #24]
 8014100:	b90b      	cbnz	r3, 8014106 <_fflush_r+0x1a>
 8014102:	f000 f887 	bl	8014214 <__sinit>
 8014106:	4b14      	ldr	r3, [pc, #80]	; (8014158 <_fflush_r+0x6c>)
 8014108:	429c      	cmp	r4, r3
 801410a:	d11b      	bne.n	8014144 <_fflush_r+0x58>
 801410c:	686c      	ldr	r4, [r5, #4]
 801410e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d0ef      	beq.n	80140f6 <_fflush_r+0xa>
 8014116:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014118:	07d0      	lsls	r0, r2, #31
 801411a:	d404      	bmi.n	8014126 <_fflush_r+0x3a>
 801411c:	0599      	lsls	r1, r3, #22
 801411e:	d402      	bmi.n	8014126 <_fflush_r+0x3a>
 8014120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014122:	f000 f915 	bl	8014350 <__retarget_lock_acquire_recursive>
 8014126:	4628      	mov	r0, r5
 8014128:	4621      	mov	r1, r4
 801412a:	f7ff ff59 	bl	8013fe0 <__sflush_r>
 801412e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014130:	07da      	lsls	r2, r3, #31
 8014132:	4605      	mov	r5, r0
 8014134:	d4e0      	bmi.n	80140f8 <_fflush_r+0xc>
 8014136:	89a3      	ldrh	r3, [r4, #12]
 8014138:	059b      	lsls	r3, r3, #22
 801413a:	d4dd      	bmi.n	80140f8 <_fflush_r+0xc>
 801413c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801413e:	f000 f908 	bl	8014352 <__retarget_lock_release_recursive>
 8014142:	e7d9      	b.n	80140f8 <_fflush_r+0xc>
 8014144:	4b05      	ldr	r3, [pc, #20]	; (801415c <_fflush_r+0x70>)
 8014146:	429c      	cmp	r4, r3
 8014148:	d101      	bne.n	801414e <_fflush_r+0x62>
 801414a:	68ac      	ldr	r4, [r5, #8]
 801414c:	e7df      	b.n	801410e <_fflush_r+0x22>
 801414e:	4b04      	ldr	r3, [pc, #16]	; (8014160 <_fflush_r+0x74>)
 8014150:	429c      	cmp	r4, r3
 8014152:	bf08      	it	eq
 8014154:	68ec      	ldreq	r4, [r5, #12]
 8014156:	e7da      	b.n	801410e <_fflush_r+0x22>
 8014158:	0801566c 	.word	0x0801566c
 801415c:	0801568c 	.word	0x0801568c
 8014160:	0801564c 	.word	0x0801564c

08014164 <std>:
 8014164:	2300      	movs	r3, #0
 8014166:	b510      	push	{r4, lr}
 8014168:	4604      	mov	r4, r0
 801416a:	e9c0 3300 	strd	r3, r3, [r0]
 801416e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014172:	6083      	str	r3, [r0, #8]
 8014174:	8181      	strh	r1, [r0, #12]
 8014176:	6643      	str	r3, [r0, #100]	; 0x64
 8014178:	81c2      	strh	r2, [r0, #14]
 801417a:	6183      	str	r3, [r0, #24]
 801417c:	4619      	mov	r1, r3
 801417e:	2208      	movs	r2, #8
 8014180:	305c      	adds	r0, #92	; 0x5c
 8014182:	f7fb fddb 	bl	800fd3c <memset>
 8014186:	4b05      	ldr	r3, [pc, #20]	; (801419c <std+0x38>)
 8014188:	6263      	str	r3, [r4, #36]	; 0x24
 801418a:	4b05      	ldr	r3, [pc, #20]	; (80141a0 <std+0x3c>)
 801418c:	62a3      	str	r3, [r4, #40]	; 0x28
 801418e:	4b05      	ldr	r3, [pc, #20]	; (80141a4 <std+0x40>)
 8014190:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014192:	4b05      	ldr	r3, [pc, #20]	; (80141a8 <std+0x44>)
 8014194:	6224      	str	r4, [r4, #32]
 8014196:	6323      	str	r3, [r4, #48]	; 0x30
 8014198:	bd10      	pop	{r4, pc}
 801419a:	bf00      	nop
 801419c:	080144b9 	.word	0x080144b9
 80141a0:	080144db 	.word	0x080144db
 80141a4:	08014513 	.word	0x08014513
 80141a8:	08014537 	.word	0x08014537

080141ac <_cleanup_r>:
 80141ac:	4901      	ldr	r1, [pc, #4]	; (80141b4 <_cleanup_r+0x8>)
 80141ae:	f000 b8af 	b.w	8014310 <_fwalk_reent>
 80141b2:	bf00      	nop
 80141b4:	080140ed 	.word	0x080140ed

080141b8 <__sfmoreglue>:
 80141b8:	b570      	push	{r4, r5, r6, lr}
 80141ba:	2268      	movs	r2, #104	; 0x68
 80141bc:	1e4d      	subs	r5, r1, #1
 80141be:	4355      	muls	r5, r2
 80141c0:	460e      	mov	r6, r1
 80141c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80141c6:	f7ff fa5b 	bl	8013680 <_malloc_r>
 80141ca:	4604      	mov	r4, r0
 80141cc:	b140      	cbz	r0, 80141e0 <__sfmoreglue+0x28>
 80141ce:	2100      	movs	r1, #0
 80141d0:	e9c0 1600 	strd	r1, r6, [r0]
 80141d4:	300c      	adds	r0, #12
 80141d6:	60a0      	str	r0, [r4, #8]
 80141d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80141dc:	f7fb fdae 	bl	800fd3c <memset>
 80141e0:	4620      	mov	r0, r4
 80141e2:	bd70      	pop	{r4, r5, r6, pc}

080141e4 <__sfp_lock_acquire>:
 80141e4:	4801      	ldr	r0, [pc, #4]	; (80141ec <__sfp_lock_acquire+0x8>)
 80141e6:	f000 b8b3 	b.w	8014350 <__retarget_lock_acquire_recursive>
 80141ea:	bf00      	nop
 80141ec:	200063c5 	.word	0x200063c5

080141f0 <__sfp_lock_release>:
 80141f0:	4801      	ldr	r0, [pc, #4]	; (80141f8 <__sfp_lock_release+0x8>)
 80141f2:	f000 b8ae 	b.w	8014352 <__retarget_lock_release_recursive>
 80141f6:	bf00      	nop
 80141f8:	200063c5 	.word	0x200063c5

080141fc <__sinit_lock_acquire>:
 80141fc:	4801      	ldr	r0, [pc, #4]	; (8014204 <__sinit_lock_acquire+0x8>)
 80141fe:	f000 b8a7 	b.w	8014350 <__retarget_lock_acquire_recursive>
 8014202:	bf00      	nop
 8014204:	200063c6 	.word	0x200063c6

08014208 <__sinit_lock_release>:
 8014208:	4801      	ldr	r0, [pc, #4]	; (8014210 <__sinit_lock_release+0x8>)
 801420a:	f000 b8a2 	b.w	8014352 <__retarget_lock_release_recursive>
 801420e:	bf00      	nop
 8014210:	200063c6 	.word	0x200063c6

08014214 <__sinit>:
 8014214:	b510      	push	{r4, lr}
 8014216:	4604      	mov	r4, r0
 8014218:	f7ff fff0 	bl	80141fc <__sinit_lock_acquire>
 801421c:	69a3      	ldr	r3, [r4, #24]
 801421e:	b11b      	cbz	r3, 8014228 <__sinit+0x14>
 8014220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014224:	f7ff bff0 	b.w	8014208 <__sinit_lock_release>
 8014228:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801422c:	6523      	str	r3, [r4, #80]	; 0x50
 801422e:	4b13      	ldr	r3, [pc, #76]	; (801427c <__sinit+0x68>)
 8014230:	4a13      	ldr	r2, [pc, #76]	; (8014280 <__sinit+0x6c>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	62a2      	str	r2, [r4, #40]	; 0x28
 8014236:	42a3      	cmp	r3, r4
 8014238:	bf04      	itt	eq
 801423a:	2301      	moveq	r3, #1
 801423c:	61a3      	streq	r3, [r4, #24]
 801423e:	4620      	mov	r0, r4
 8014240:	f000 f820 	bl	8014284 <__sfp>
 8014244:	6060      	str	r0, [r4, #4]
 8014246:	4620      	mov	r0, r4
 8014248:	f000 f81c 	bl	8014284 <__sfp>
 801424c:	60a0      	str	r0, [r4, #8]
 801424e:	4620      	mov	r0, r4
 8014250:	f000 f818 	bl	8014284 <__sfp>
 8014254:	2200      	movs	r2, #0
 8014256:	60e0      	str	r0, [r4, #12]
 8014258:	2104      	movs	r1, #4
 801425a:	6860      	ldr	r0, [r4, #4]
 801425c:	f7ff ff82 	bl	8014164 <std>
 8014260:	68a0      	ldr	r0, [r4, #8]
 8014262:	2201      	movs	r2, #1
 8014264:	2109      	movs	r1, #9
 8014266:	f7ff ff7d 	bl	8014164 <std>
 801426a:	68e0      	ldr	r0, [r4, #12]
 801426c:	2202      	movs	r2, #2
 801426e:	2112      	movs	r1, #18
 8014270:	f7ff ff78 	bl	8014164 <std>
 8014274:	2301      	movs	r3, #1
 8014276:	61a3      	str	r3, [r4, #24]
 8014278:	e7d2      	b.n	8014220 <__sinit+0xc>
 801427a:	bf00      	nop
 801427c:	08015208 	.word	0x08015208
 8014280:	080141ad 	.word	0x080141ad

08014284 <__sfp>:
 8014284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014286:	4607      	mov	r7, r0
 8014288:	f7ff ffac 	bl	80141e4 <__sfp_lock_acquire>
 801428c:	4b1e      	ldr	r3, [pc, #120]	; (8014308 <__sfp+0x84>)
 801428e:	681e      	ldr	r6, [r3, #0]
 8014290:	69b3      	ldr	r3, [r6, #24]
 8014292:	b913      	cbnz	r3, 801429a <__sfp+0x16>
 8014294:	4630      	mov	r0, r6
 8014296:	f7ff ffbd 	bl	8014214 <__sinit>
 801429a:	3648      	adds	r6, #72	; 0x48
 801429c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80142a0:	3b01      	subs	r3, #1
 80142a2:	d503      	bpl.n	80142ac <__sfp+0x28>
 80142a4:	6833      	ldr	r3, [r6, #0]
 80142a6:	b30b      	cbz	r3, 80142ec <__sfp+0x68>
 80142a8:	6836      	ldr	r6, [r6, #0]
 80142aa:	e7f7      	b.n	801429c <__sfp+0x18>
 80142ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80142b0:	b9d5      	cbnz	r5, 80142e8 <__sfp+0x64>
 80142b2:	4b16      	ldr	r3, [pc, #88]	; (801430c <__sfp+0x88>)
 80142b4:	60e3      	str	r3, [r4, #12]
 80142b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80142ba:	6665      	str	r5, [r4, #100]	; 0x64
 80142bc:	f000 f847 	bl	801434e <__retarget_lock_init_recursive>
 80142c0:	f7ff ff96 	bl	80141f0 <__sfp_lock_release>
 80142c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80142c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80142cc:	6025      	str	r5, [r4, #0]
 80142ce:	61a5      	str	r5, [r4, #24]
 80142d0:	2208      	movs	r2, #8
 80142d2:	4629      	mov	r1, r5
 80142d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80142d8:	f7fb fd30 	bl	800fd3c <memset>
 80142dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80142e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80142e4:	4620      	mov	r0, r4
 80142e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142e8:	3468      	adds	r4, #104	; 0x68
 80142ea:	e7d9      	b.n	80142a0 <__sfp+0x1c>
 80142ec:	2104      	movs	r1, #4
 80142ee:	4638      	mov	r0, r7
 80142f0:	f7ff ff62 	bl	80141b8 <__sfmoreglue>
 80142f4:	4604      	mov	r4, r0
 80142f6:	6030      	str	r0, [r6, #0]
 80142f8:	2800      	cmp	r0, #0
 80142fa:	d1d5      	bne.n	80142a8 <__sfp+0x24>
 80142fc:	f7ff ff78 	bl	80141f0 <__sfp_lock_release>
 8014300:	230c      	movs	r3, #12
 8014302:	603b      	str	r3, [r7, #0]
 8014304:	e7ee      	b.n	80142e4 <__sfp+0x60>
 8014306:	bf00      	nop
 8014308:	08015208 	.word	0x08015208
 801430c:	ffff0001 	.word	0xffff0001

08014310 <_fwalk_reent>:
 8014310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014314:	4606      	mov	r6, r0
 8014316:	4688      	mov	r8, r1
 8014318:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801431c:	2700      	movs	r7, #0
 801431e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014322:	f1b9 0901 	subs.w	r9, r9, #1
 8014326:	d505      	bpl.n	8014334 <_fwalk_reent+0x24>
 8014328:	6824      	ldr	r4, [r4, #0]
 801432a:	2c00      	cmp	r4, #0
 801432c:	d1f7      	bne.n	801431e <_fwalk_reent+0xe>
 801432e:	4638      	mov	r0, r7
 8014330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014334:	89ab      	ldrh	r3, [r5, #12]
 8014336:	2b01      	cmp	r3, #1
 8014338:	d907      	bls.n	801434a <_fwalk_reent+0x3a>
 801433a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801433e:	3301      	adds	r3, #1
 8014340:	d003      	beq.n	801434a <_fwalk_reent+0x3a>
 8014342:	4629      	mov	r1, r5
 8014344:	4630      	mov	r0, r6
 8014346:	47c0      	blx	r8
 8014348:	4307      	orrs	r7, r0
 801434a:	3568      	adds	r5, #104	; 0x68
 801434c:	e7e9      	b.n	8014322 <_fwalk_reent+0x12>

0801434e <__retarget_lock_init_recursive>:
 801434e:	4770      	bx	lr

08014350 <__retarget_lock_acquire_recursive>:
 8014350:	4770      	bx	lr

08014352 <__retarget_lock_release_recursive>:
 8014352:	4770      	bx	lr

08014354 <__swhatbuf_r>:
 8014354:	b570      	push	{r4, r5, r6, lr}
 8014356:	460e      	mov	r6, r1
 8014358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801435c:	2900      	cmp	r1, #0
 801435e:	b096      	sub	sp, #88	; 0x58
 8014360:	4614      	mov	r4, r2
 8014362:	461d      	mov	r5, r3
 8014364:	da08      	bge.n	8014378 <__swhatbuf_r+0x24>
 8014366:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801436a:	2200      	movs	r2, #0
 801436c:	602a      	str	r2, [r5, #0]
 801436e:	061a      	lsls	r2, r3, #24
 8014370:	d410      	bmi.n	8014394 <__swhatbuf_r+0x40>
 8014372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014376:	e00e      	b.n	8014396 <__swhatbuf_r+0x42>
 8014378:	466a      	mov	r2, sp
 801437a:	f000 f903 	bl	8014584 <_fstat_r>
 801437e:	2800      	cmp	r0, #0
 8014380:	dbf1      	blt.n	8014366 <__swhatbuf_r+0x12>
 8014382:	9a01      	ldr	r2, [sp, #4]
 8014384:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014388:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801438c:	425a      	negs	r2, r3
 801438e:	415a      	adcs	r2, r3
 8014390:	602a      	str	r2, [r5, #0]
 8014392:	e7ee      	b.n	8014372 <__swhatbuf_r+0x1e>
 8014394:	2340      	movs	r3, #64	; 0x40
 8014396:	2000      	movs	r0, #0
 8014398:	6023      	str	r3, [r4, #0]
 801439a:	b016      	add	sp, #88	; 0x58
 801439c:	bd70      	pop	{r4, r5, r6, pc}
	...

080143a0 <__smakebuf_r>:
 80143a0:	898b      	ldrh	r3, [r1, #12]
 80143a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80143a4:	079d      	lsls	r5, r3, #30
 80143a6:	4606      	mov	r6, r0
 80143a8:	460c      	mov	r4, r1
 80143aa:	d507      	bpl.n	80143bc <__smakebuf_r+0x1c>
 80143ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80143b0:	6023      	str	r3, [r4, #0]
 80143b2:	6123      	str	r3, [r4, #16]
 80143b4:	2301      	movs	r3, #1
 80143b6:	6163      	str	r3, [r4, #20]
 80143b8:	b002      	add	sp, #8
 80143ba:	bd70      	pop	{r4, r5, r6, pc}
 80143bc:	ab01      	add	r3, sp, #4
 80143be:	466a      	mov	r2, sp
 80143c0:	f7ff ffc8 	bl	8014354 <__swhatbuf_r>
 80143c4:	9900      	ldr	r1, [sp, #0]
 80143c6:	4605      	mov	r5, r0
 80143c8:	4630      	mov	r0, r6
 80143ca:	f7ff f959 	bl	8013680 <_malloc_r>
 80143ce:	b948      	cbnz	r0, 80143e4 <__smakebuf_r+0x44>
 80143d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143d4:	059a      	lsls	r2, r3, #22
 80143d6:	d4ef      	bmi.n	80143b8 <__smakebuf_r+0x18>
 80143d8:	f023 0303 	bic.w	r3, r3, #3
 80143dc:	f043 0302 	orr.w	r3, r3, #2
 80143e0:	81a3      	strh	r3, [r4, #12]
 80143e2:	e7e3      	b.n	80143ac <__smakebuf_r+0xc>
 80143e4:	4b0d      	ldr	r3, [pc, #52]	; (801441c <__smakebuf_r+0x7c>)
 80143e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80143e8:	89a3      	ldrh	r3, [r4, #12]
 80143ea:	6020      	str	r0, [r4, #0]
 80143ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143f0:	81a3      	strh	r3, [r4, #12]
 80143f2:	9b00      	ldr	r3, [sp, #0]
 80143f4:	6163      	str	r3, [r4, #20]
 80143f6:	9b01      	ldr	r3, [sp, #4]
 80143f8:	6120      	str	r0, [r4, #16]
 80143fa:	b15b      	cbz	r3, 8014414 <__smakebuf_r+0x74>
 80143fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014400:	4630      	mov	r0, r6
 8014402:	f000 f8d1 	bl	80145a8 <_isatty_r>
 8014406:	b128      	cbz	r0, 8014414 <__smakebuf_r+0x74>
 8014408:	89a3      	ldrh	r3, [r4, #12]
 801440a:	f023 0303 	bic.w	r3, r3, #3
 801440e:	f043 0301 	orr.w	r3, r3, #1
 8014412:	81a3      	strh	r3, [r4, #12]
 8014414:	89a0      	ldrh	r0, [r4, #12]
 8014416:	4305      	orrs	r5, r0
 8014418:	81a5      	strh	r5, [r4, #12]
 801441a:	e7cd      	b.n	80143b8 <__smakebuf_r+0x18>
 801441c:	080141ad 	.word	0x080141ad

08014420 <_malloc_usable_size_r>:
 8014420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014424:	1f18      	subs	r0, r3, #4
 8014426:	2b00      	cmp	r3, #0
 8014428:	bfbc      	itt	lt
 801442a:	580b      	ldrlt	r3, [r1, r0]
 801442c:	18c0      	addlt	r0, r0, r3
 801442e:	4770      	bx	lr

08014430 <_raise_r>:
 8014430:	291f      	cmp	r1, #31
 8014432:	b538      	push	{r3, r4, r5, lr}
 8014434:	4604      	mov	r4, r0
 8014436:	460d      	mov	r5, r1
 8014438:	d904      	bls.n	8014444 <_raise_r+0x14>
 801443a:	2316      	movs	r3, #22
 801443c:	6003      	str	r3, [r0, #0]
 801443e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014442:	bd38      	pop	{r3, r4, r5, pc}
 8014444:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014446:	b112      	cbz	r2, 801444e <_raise_r+0x1e>
 8014448:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801444c:	b94b      	cbnz	r3, 8014462 <_raise_r+0x32>
 801444e:	4620      	mov	r0, r4
 8014450:	f000 f830 	bl	80144b4 <_getpid_r>
 8014454:	462a      	mov	r2, r5
 8014456:	4601      	mov	r1, r0
 8014458:	4620      	mov	r0, r4
 801445a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801445e:	f000 b817 	b.w	8014490 <_kill_r>
 8014462:	2b01      	cmp	r3, #1
 8014464:	d00a      	beq.n	801447c <_raise_r+0x4c>
 8014466:	1c59      	adds	r1, r3, #1
 8014468:	d103      	bne.n	8014472 <_raise_r+0x42>
 801446a:	2316      	movs	r3, #22
 801446c:	6003      	str	r3, [r0, #0]
 801446e:	2001      	movs	r0, #1
 8014470:	e7e7      	b.n	8014442 <_raise_r+0x12>
 8014472:	2400      	movs	r4, #0
 8014474:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014478:	4628      	mov	r0, r5
 801447a:	4798      	blx	r3
 801447c:	2000      	movs	r0, #0
 801447e:	e7e0      	b.n	8014442 <_raise_r+0x12>

08014480 <raise>:
 8014480:	4b02      	ldr	r3, [pc, #8]	; (801448c <raise+0xc>)
 8014482:	4601      	mov	r1, r0
 8014484:	6818      	ldr	r0, [r3, #0]
 8014486:	f7ff bfd3 	b.w	8014430 <_raise_r>
 801448a:	bf00      	nop
 801448c:	20000014 	.word	0x20000014

08014490 <_kill_r>:
 8014490:	b538      	push	{r3, r4, r5, lr}
 8014492:	4d07      	ldr	r5, [pc, #28]	; (80144b0 <_kill_r+0x20>)
 8014494:	2300      	movs	r3, #0
 8014496:	4604      	mov	r4, r0
 8014498:	4608      	mov	r0, r1
 801449a:	4611      	mov	r1, r2
 801449c:	602b      	str	r3, [r5, #0]
 801449e:	f7f2 fbab 	bl	8006bf8 <_kill>
 80144a2:	1c43      	adds	r3, r0, #1
 80144a4:	d102      	bne.n	80144ac <_kill_r+0x1c>
 80144a6:	682b      	ldr	r3, [r5, #0]
 80144a8:	b103      	cbz	r3, 80144ac <_kill_r+0x1c>
 80144aa:	6023      	str	r3, [r4, #0]
 80144ac:	bd38      	pop	{r3, r4, r5, pc}
 80144ae:	bf00      	nop
 80144b0:	200063c0 	.word	0x200063c0

080144b4 <_getpid_r>:
 80144b4:	f7f2 bb98 	b.w	8006be8 <_getpid>

080144b8 <__sread>:
 80144b8:	b510      	push	{r4, lr}
 80144ba:	460c      	mov	r4, r1
 80144bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144c0:	f000 f894 	bl	80145ec <_read_r>
 80144c4:	2800      	cmp	r0, #0
 80144c6:	bfab      	itete	ge
 80144c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80144ca:	89a3      	ldrhlt	r3, [r4, #12]
 80144cc:	181b      	addge	r3, r3, r0
 80144ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80144d2:	bfac      	ite	ge
 80144d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80144d6:	81a3      	strhlt	r3, [r4, #12]
 80144d8:	bd10      	pop	{r4, pc}

080144da <__swrite>:
 80144da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144de:	461f      	mov	r7, r3
 80144e0:	898b      	ldrh	r3, [r1, #12]
 80144e2:	05db      	lsls	r3, r3, #23
 80144e4:	4605      	mov	r5, r0
 80144e6:	460c      	mov	r4, r1
 80144e8:	4616      	mov	r6, r2
 80144ea:	d505      	bpl.n	80144f8 <__swrite+0x1e>
 80144ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144f0:	2302      	movs	r3, #2
 80144f2:	2200      	movs	r2, #0
 80144f4:	f000 f868 	bl	80145c8 <_lseek_r>
 80144f8:	89a3      	ldrh	r3, [r4, #12]
 80144fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80144fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014502:	81a3      	strh	r3, [r4, #12]
 8014504:	4632      	mov	r2, r6
 8014506:	463b      	mov	r3, r7
 8014508:	4628      	mov	r0, r5
 801450a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801450e:	f000 b817 	b.w	8014540 <_write_r>

08014512 <__sseek>:
 8014512:	b510      	push	{r4, lr}
 8014514:	460c      	mov	r4, r1
 8014516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801451a:	f000 f855 	bl	80145c8 <_lseek_r>
 801451e:	1c43      	adds	r3, r0, #1
 8014520:	89a3      	ldrh	r3, [r4, #12]
 8014522:	bf15      	itete	ne
 8014524:	6560      	strne	r0, [r4, #84]	; 0x54
 8014526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801452a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801452e:	81a3      	strheq	r3, [r4, #12]
 8014530:	bf18      	it	ne
 8014532:	81a3      	strhne	r3, [r4, #12]
 8014534:	bd10      	pop	{r4, pc}

08014536 <__sclose>:
 8014536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801453a:	f000 b813 	b.w	8014564 <_close_r>
	...

08014540 <_write_r>:
 8014540:	b538      	push	{r3, r4, r5, lr}
 8014542:	4d07      	ldr	r5, [pc, #28]	; (8014560 <_write_r+0x20>)
 8014544:	4604      	mov	r4, r0
 8014546:	4608      	mov	r0, r1
 8014548:	4611      	mov	r1, r2
 801454a:	2200      	movs	r2, #0
 801454c:	602a      	str	r2, [r5, #0]
 801454e:	461a      	mov	r2, r3
 8014550:	f7f2 fb89 	bl	8006c66 <_write>
 8014554:	1c43      	adds	r3, r0, #1
 8014556:	d102      	bne.n	801455e <_write_r+0x1e>
 8014558:	682b      	ldr	r3, [r5, #0]
 801455a:	b103      	cbz	r3, 801455e <_write_r+0x1e>
 801455c:	6023      	str	r3, [r4, #0]
 801455e:	bd38      	pop	{r3, r4, r5, pc}
 8014560:	200063c0 	.word	0x200063c0

08014564 <_close_r>:
 8014564:	b538      	push	{r3, r4, r5, lr}
 8014566:	4d06      	ldr	r5, [pc, #24]	; (8014580 <_close_r+0x1c>)
 8014568:	2300      	movs	r3, #0
 801456a:	4604      	mov	r4, r0
 801456c:	4608      	mov	r0, r1
 801456e:	602b      	str	r3, [r5, #0]
 8014570:	f7f2 fb95 	bl	8006c9e <_close>
 8014574:	1c43      	adds	r3, r0, #1
 8014576:	d102      	bne.n	801457e <_close_r+0x1a>
 8014578:	682b      	ldr	r3, [r5, #0]
 801457a:	b103      	cbz	r3, 801457e <_close_r+0x1a>
 801457c:	6023      	str	r3, [r4, #0]
 801457e:	bd38      	pop	{r3, r4, r5, pc}
 8014580:	200063c0 	.word	0x200063c0

08014584 <_fstat_r>:
 8014584:	b538      	push	{r3, r4, r5, lr}
 8014586:	4d07      	ldr	r5, [pc, #28]	; (80145a4 <_fstat_r+0x20>)
 8014588:	2300      	movs	r3, #0
 801458a:	4604      	mov	r4, r0
 801458c:	4608      	mov	r0, r1
 801458e:	4611      	mov	r1, r2
 8014590:	602b      	str	r3, [r5, #0]
 8014592:	f7f2 fb90 	bl	8006cb6 <_fstat>
 8014596:	1c43      	adds	r3, r0, #1
 8014598:	d102      	bne.n	80145a0 <_fstat_r+0x1c>
 801459a:	682b      	ldr	r3, [r5, #0]
 801459c:	b103      	cbz	r3, 80145a0 <_fstat_r+0x1c>
 801459e:	6023      	str	r3, [r4, #0]
 80145a0:	bd38      	pop	{r3, r4, r5, pc}
 80145a2:	bf00      	nop
 80145a4:	200063c0 	.word	0x200063c0

080145a8 <_isatty_r>:
 80145a8:	b538      	push	{r3, r4, r5, lr}
 80145aa:	4d06      	ldr	r5, [pc, #24]	; (80145c4 <_isatty_r+0x1c>)
 80145ac:	2300      	movs	r3, #0
 80145ae:	4604      	mov	r4, r0
 80145b0:	4608      	mov	r0, r1
 80145b2:	602b      	str	r3, [r5, #0]
 80145b4:	f7f2 fb8f 	bl	8006cd6 <_isatty>
 80145b8:	1c43      	adds	r3, r0, #1
 80145ba:	d102      	bne.n	80145c2 <_isatty_r+0x1a>
 80145bc:	682b      	ldr	r3, [r5, #0]
 80145be:	b103      	cbz	r3, 80145c2 <_isatty_r+0x1a>
 80145c0:	6023      	str	r3, [r4, #0]
 80145c2:	bd38      	pop	{r3, r4, r5, pc}
 80145c4:	200063c0 	.word	0x200063c0

080145c8 <_lseek_r>:
 80145c8:	b538      	push	{r3, r4, r5, lr}
 80145ca:	4d07      	ldr	r5, [pc, #28]	; (80145e8 <_lseek_r+0x20>)
 80145cc:	4604      	mov	r4, r0
 80145ce:	4608      	mov	r0, r1
 80145d0:	4611      	mov	r1, r2
 80145d2:	2200      	movs	r2, #0
 80145d4:	602a      	str	r2, [r5, #0]
 80145d6:	461a      	mov	r2, r3
 80145d8:	f7f2 fb88 	bl	8006cec <_lseek>
 80145dc:	1c43      	adds	r3, r0, #1
 80145de:	d102      	bne.n	80145e6 <_lseek_r+0x1e>
 80145e0:	682b      	ldr	r3, [r5, #0]
 80145e2:	b103      	cbz	r3, 80145e6 <_lseek_r+0x1e>
 80145e4:	6023      	str	r3, [r4, #0]
 80145e6:	bd38      	pop	{r3, r4, r5, pc}
 80145e8:	200063c0 	.word	0x200063c0

080145ec <_read_r>:
 80145ec:	b538      	push	{r3, r4, r5, lr}
 80145ee:	4d07      	ldr	r5, [pc, #28]	; (801460c <_read_r+0x20>)
 80145f0:	4604      	mov	r4, r0
 80145f2:	4608      	mov	r0, r1
 80145f4:	4611      	mov	r1, r2
 80145f6:	2200      	movs	r2, #0
 80145f8:	602a      	str	r2, [r5, #0]
 80145fa:	461a      	mov	r2, r3
 80145fc:	f7f2 fb16 	bl	8006c2c <_read>
 8014600:	1c43      	adds	r3, r0, #1
 8014602:	d102      	bne.n	801460a <_read_r+0x1e>
 8014604:	682b      	ldr	r3, [r5, #0]
 8014606:	b103      	cbz	r3, 801460a <_read_r+0x1e>
 8014608:	6023      	str	r3, [r4, #0]
 801460a:	bd38      	pop	{r3, r4, r5, pc}
 801460c:	200063c0 	.word	0x200063c0

08014610 <_init>:
 8014610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014612:	bf00      	nop
 8014614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014616:	bc08      	pop	{r3}
 8014618:	469e      	mov	lr, r3
 801461a:	4770      	bx	lr

0801461c <_fini>:
 801461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801461e:	bf00      	nop
 8014620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014622:	bc08      	pop	{r3}
 8014624:	469e      	mov	lr, r3
 8014626:	4770      	bx	lr
